/*++

Copyright (C) 2021 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.7.0-develop.

Abstract: This is an autogenerated C++-Header file in order to allow an easy
 use of MQTT Library

Interface version: 1.0.0

*/

#ifndef __LIBMQTT_HEADER_CPP
#define __LIBMQTT_HEADER_CPP

#ifdef __LIBMQTT_EXPORTS
#ifdef _WIN32
#define LIBMQTT_DECLSPEC __declspec (dllexport)
#else // _WIN32
#define LIBMQTT_DECLSPEC __attribute__((visibility("default")))
#endif // _WIN32
#else // __LIBMQTT_EXPORTS
#define LIBMQTT_DECLSPEC
#endif // __LIBMQTT_EXPORTS

#include "libmqtt_types.hpp"


#ifdef __cplusplus
extern "C" {
#endif

/*************************************************************************************************************************
 Class definition for Base
**************************************************************************************************************************/

/*************************************************************************************************************************
 Class definition for MQTTContext
**************************************************************************************************************************/

/**
* sets the IOT end point
*
* @param[in] pMQTTContext - MQTTContext instance.
* @param[in] pEndPoint - IOT End point.
* @param[in] nPort - MQTT Port.
* @return error code or 0 (success)
*/
LIBMQTT_DECLSPEC LibMQTTResult libmqtt_mqttcontext_setiotendpoint(LibMQTT_MQTTContext pMQTTContext, const char * pEndPoint, LibMQTT_uint32 nPort);

/**
* sets the Server root certificate.
*
* @param[in] pMQTTContext - MQTTContext instance.
* @param[in] pCertificateString - Root certificate (in PEM string format).
* @return error code or 0 (success)
*/
LIBMQTT_DECLSPEC LibMQTTResult libmqtt_mqttcontext_setrootcertificate(LibMQTT_MQTTContext pMQTTContext, const char * pCertificateString);

/**
* sets the Client certificate and keys.
*
* @param[in] pMQTTContext - MQTTContext instance.
* @param[in] pClientIdentifier - Client identifier.
* @param[in] pClientCertificateString - Client public key (in PEM string format).
* @param[in] pCertificatePrivateKeyString - Client private key (in PEM string format).
* @return error code or 0 (success)
*/
LIBMQTT_DECLSPEC LibMQTTResult libmqtt_mqttcontext_setclientinformation(LibMQTT_MQTTContext pMQTTContext, const char * pClientIdentifier, const char * pClientCertificateString, const char * pCertificatePrivateKeyString);

/**
* sets MQTT topic
*
* @param[in] pMQTTContext - MQTTContext instance.
* @param[in] pMqttTopic - MQTT topic.
* @return error code or 0 (success)
*/
LIBMQTT_DECLSPEC LibMQTTResult libmqtt_mqttcontext_setmqtttopic(LibMQTT_MQTTContext pMQTTContext, const char * pMqttTopic);

/**
* sets MQTT message
*
* @param[in] pMQTTContext - MQTTContext instance.
* @param[in] pMqttMessage - MQTT message.
* @return error code or 0 (success)
*/
LIBMQTT_DECLSPEC LibMQTTResult libmqtt_mqttcontext_setmqttmessage(LibMQTT_MQTTContext pMQTTContext, const char * pMqttMessage);

/**
* Establish a MQTT connection. Disconnects if connected.
*
* @param[in] pMQTTContext - MQTTContext instance.
* @return error code or 0 (success)
*/
LIBMQTT_DECLSPEC LibMQTTResult libmqtt_mqttcontext_connect(LibMQTT_MQTTContext pMQTTContext);

/**
* Disconnect a running MQTT connection
*
* @param[in] pMQTTContext - MQTTContext instance.
* @return error code or 0 (success)
*/
LIBMQTT_DECLSPEC LibMQTTResult libmqtt_mqttcontext_disconnect(LibMQTT_MQTTContext pMQTTContext);

/**
* Sends an MQTT Message.
*
* @param[in] pMQTTContext - MQTTContext instance.
* @param[in] pMessageJSON - Message in JSON format.
* @return error code or 0 (success)
*/
LIBMQTT_DECLSPEC LibMQTTResult libmqtt_mqttcontext_sendmessage(LibMQTT_MQTTContext pMQTTContext, const char * pMessageJSON);

/*************************************************************************************************************************
 Global functions
**************************************************************************************************************************/

/**
* retrieves the binary version of this library.
*
* @param[out] pMajor - returns the major version of this library
* @param[out] pMinor - returns the minor version of this library
* @param[out] pMicro - returns the micro version of this library
* @return error code or 0 (success)
*/
LIBMQTT_DECLSPEC LibMQTTResult libmqtt_getversion(LibMQTT_uint32 * pMajor, LibMQTT_uint32 * pMinor, LibMQTT_uint32 * pMicro);

/**
* Returns the last error recorded on this object
*
* @param[in] pInstance - Instance Handle
* @param[in] nErrorMessageBufferSize - size of the buffer (including trailing 0)
* @param[out] pErrorMessageNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pErrorMessageBuffer -  buffer of Message of the last error, may be NULL
* @param[out] pHasError - Is there a last error to query
* @return error code or 0 (success)
*/
LIBMQTT_DECLSPEC LibMQTTResult libmqtt_getlasterror(LibMQTT_Base pInstance, const LibMQTT_uint32 nErrorMessageBufferSize, LibMQTT_uint32* pErrorMessageNeededChars, char * pErrorMessageBuffer, bool * pHasError);

/**
* Releases shared ownership of an Instance
*
* @param[in] pInstance - Instance Handle
* @return error code or 0 (success)
*/
LIBMQTT_DECLSPEC LibMQTTResult libmqtt_releaseinstance(LibMQTT_Base pInstance);

/**
* Acquires shared ownership of an Instance
*
* @param[in] pInstance - Instance Handle
* @return error code or 0 (success)
*/
LIBMQTT_DECLSPEC LibMQTTResult libmqtt_acquireinstance(LibMQTT_Base pInstance);

/**
* Injects an imported component for usage within this component
*
* @param[in] pNameSpace - NameSpace of the injected component
* @param[in] pSymbolAddressMethod - Address of the SymbolAddressMethod of the injected component
* @return error code or 0 (success)
*/
LIBMQTT_DECLSPEC LibMQTTResult libmqtt_injectcomponent(const char * pNameSpace, LibMQTT_pvoid pSymbolAddressMethod);

/**
* Creates a MQTT Context.
*
* @param[in] pInstanceName - Name of instance to be created.
* @param[out] pInstance - New Context instance
* @return error code or 0 (success)
*/
LIBMQTT_DECLSPEC LibMQTTResult libmqtt_createcontext(const char * pInstanceName, LibMQTT_MQTTContext * pInstance);

#ifdef __cplusplus
}
#endif

#endif // __LIBMQTT_HEADER_CPP

