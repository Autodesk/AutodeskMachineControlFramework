<?xml version="1.0" encoding="UTF-8"?>
<component xmlns="http://schemas.autodesk.com/netfabb/automaticcomponenttoolkit/2018" 
	libraryname="MC Environment Interface" namespace="LibMCEnv" copyright="Autodesk Inc." year="2020" basename="libmcenv"
	version="1.0.0">

	<license>
		<line value="All rights reserved." />
		<line value="" />
		<line value="Redistribution and use in source and binary forms, with or without" />
		<line value="modification, are permitted provided that the following conditions are met:" />
		<line value="    * Redistributions of source code must retain the above copyright" />
		<line value="      notice, this list of conditions and the following disclaimer." />
		<line value="    * Redistributions in binary form must reproduce the above copyright" />
		<line value="      notice, this list of conditions and the following disclaimer in the" />
		<line value="      documentation and/or other materials provided with the distribution." />
		<line value="    * Neither the name of the Autodesk Inc. nor the" />
		<line value="      names of its contributors may be used to endorse or promote products" />
		<line value="      derived from this software without specific prior written permission." />
		<line value="" />
		<line value="THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND" />
		<line value="ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED" />
		<line value="WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE" />
		<line value="DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY" />
		<line value="DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES" />
		<line value="(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;" />
		<line value="LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND" />
		<line value="ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT" />
		<line value="(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS" />
		<line value="SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." />
		<line value="" />
	</license>
	
	<bindings>
		<binding language="CppDynamic" indentation="tabs" documentation="true" />
	</bindings>
	<implementations>
		<implementation language="Cpp" indentation="tabs"/>
	</implementations>
	
		
	<errors>
		<error name="NOTIMPLEMENTED" code="10001" description="functionality not implemented" />
		<error name="INVALIDPARAM" code="10002" description="an invalid parameter was passed" />
		<error name="INVALIDCAST" code="10003" description="a type cast failed" />
		<error name="BUFFERTOOSMALL" code="10004" description="a provided buffer is too small" />
		<error name="GENERICEXCEPTION" code="10005" description="a generic exception occurred" />
		<error name="COULDNOTLOADLIBRARY" code="10006" description="the library could not be loaded" />
		<error name="COULDNOTFINDLIBRARYEXPORT" code="10007" description="a required exported symbol could not be found in the library" />
		<error name="INCOMPATIBLEBINARYVERSION" code="10008" description="the version of the binary interface does not match the bindings interface" />				
		<error name="PARAMETERGROUPNOTFOUND" code="10009" description="Parameter group not found" />
		<error name="PARAMETERNOTFOUND" code="10010" description="Parameter not found" />
		<error name="COULDNOTFINDSIGNALDEFINITON" code="10011" description="Could not find signal definition" />
		<error name="COULDNOTTRIGGERSIGNAL" code="10012" description="Could not trigger signal" />
		<error name="SIGNALNOTFOUND" code="10013" description="Signal not found" />
		<error name="TERMINATED" code="10014" description="operation has been terminated." />
		<error name="SIGNALHASTRIGGEREDTWICE" code="10015" description="signal has been triggered twice." />
		<error name="SIGNALHASNOTBEENTRIGGERED" code="10016" description="signal has not been triggered." />
		<error name="DRIVERISNOTINITIALISING" code="10017" description="driver is not in initialisation mode." />
		<error name="RESOURCEENTRYNOTFOUND" code="10018" description="resource entry not found." />
		<error name="INTERNALERROR" code="10019" description="internal error." />
		<error name="INVALIDCHARACTERINFILENAME" code="10020" description="invalid character in filename." />
		<error name="WORKINGDIRECTORYHASBEENCLEANED" code="10021" description="working directory has been cleaned." />
		<error name="INVALIDITERATOR" code="10022" description="invalid iterator." />
		<error name="FORMVALUENOTFOUND" code="10023" description="Form value not found." />
		<error name="INVALIDDOUBLEFORMVALUE" code="10024" description="Invalid double form value." />
		<error name="INVALIDINTEGERFORMVALUE" code="10025" description="Invalid integer form value." />
		<error name="COULDNNOTACCESSCLIENTVARIABLES" code="10026" description="Could not access client variables." />
		<error name="INVALIDPIXELCOUNT" code="10027" description="Invalid pixel count." />
		<error name="INVALIDDPIVALUE" code="10028" description="Invalid dpi value." />
		<error name="COULDNOTCOMPRESSPNGIMAGE" code="10029" description="Could not compress PNG image." />
		<error name="COULDNOTSTOREPNGIMAGE" code="10030" description="Could not store PNG image." />
		<error name="EMPTYPNGIMAGEDATA" code="10031" description="Empty PNG image data." />
		<error name="INVALIDXCOORDINATE" code="10032" description="Invalid X coordinate." />
		<error name="INVALIDYCOORDINATE" code="10033" description="Invalid Y coordinate." />
		<error name="INVALIDXCOORDINATERANGE" code="10034" description="Invalid X coordinate range." />
		<error name="INVALIDYCOORDINATERANGE" code="10035" description="Invalid Y coordinate range." />
		<error name="INVALIDPIXELDATACOUNT" code="10036" description="Invalid pixel data count." />
		<error name="INVALIDIMAGEBUFFER" code="10037" description="Invalid image buffer." />
		<error name="INVALIDPIXELFORMAT" code="10038" description="Invalid pixel format." />
		<error name="INVALIDTESTOUTPUTNAME" code="10039" description="Invalid test output name." />		
		<error name="TOOLPATHNOTLOADED" code="10040" description="Toolpath has not been loaded." />
		<error name="INVALIDLAYERINDEX" code="10041" description="Invalid layer index." />
		<error name="INVALIDHATCHCOUNT" code="10042" description="Invalid hatch count." />
		<error name="SEGMENTISNOTOFTYPEHATCH" code="10043" description="Segment is not of type hatch." />		
		<error name="TEMPFILEEXTENSIONEXCEEDS64CHARACTERS" code="10044" description="Temp file extension exceeds 64 characters." />
		<error name="TEMPFILEEXTENSIONCONTAINSINVALIDCHARACTERS" code="10045" description="Temp file extension contains invalid characters." />
		<error name="COULDNOTGENERATETEMPFILENAME" code="10046" description="Could not generate temp file name." />
		<error name="EMPTYTCPIPPACKET" code="10047" description="Empty TCP/IP Packet." />		
		<error name="COULDNOTGETADDRESSINFO" code="10048" description="Could not get address info." />
		<error name="COULDNOTCREATESOCKET" code="10049" description="Could not create socket." />
		<error name="COULDNOTCONNECT" code="10050" description="Could not connect." />
		<error name="SENDERROR" code="10051" description="Send error." />
		<error name="RECEIVECOUNTEXCEEDSMAXIMUM" code="10052" description="Receive count exceeds maximum." />
		<error name="CONNECTIONCLOSED" code="10053" description="Connection closed." />
		<error name="RECEIVEERROR" code="10054" description="Receive error." />
		<error name="SENDCOUNTEXCEEDSMAXIMUM" code="10055" description="Send count exceeds maximum." />
		<error name="SOCKETNOTCONNECTED" code="10056" description="Socket not connected." />
		<error name="INVALIDSENDBUFFER" code="10057" description="Invalid send buffer." />
		<error name="INVALIDMODBUSTCPPAYLOADSIZE" code="10058" description="Invalid modbus TCP payload size" />
		<error name="INVALIDMODBUSTCPREQUEST" code="10059" description="Invalid modbus TCP request" />
		<error name="INSUFFICIENTMODBUSTCPRESPONSEHEADER" code="10060" description="Insufficient modbus tcp response header" />
		<error name="MODBUSTCPRESPONSEOVERFLOW" code="10061" description="modbus tcp response overflow" />
		<error name="INVALIDMODBUSTCPTRANSACTIONIDRESPONSE" code="10062" description="invalid modbus tcp transaction ID response" />
		<error name="INVALIDMODBUSTCPPROTOCOLIDRESPONSE" code="10063" description="invalid modbus tcp protocol ID response" />
		<error name="INVALIDMODBUSTCPUNITIDENTIFIERRESPONSE" code="10064" description="invalid modbus tcp unit identifier response" />
		<error name="MODBUSTCPRESPONSELENGTHMISMATCH" code="10065" description="modbus tcp response length mismatch" />		
		<error name="MODBUSTCPINVALIDCOILSTATUSBITCOUNT" code="10066" description="modbus TCP Invalid coils status bit count." />
		<error name="MODBUSTCPINVALIDCOILSTATUSRESPONSE" code="10067" description="modbus TCP Invalid coils status response." />
		<error name="MODBUSTCPCOILSTATUSRESPONSEEMPTY" code="10068" description="modbus TCP coils status response empty." />
		<error name="MODBUSTCPINVALIDCOILSTATUSRESPONSESIZE" code="10069" description="modbus TCP invalid coil status response size." />
		<error name="MODBUSTCPINVALIDINPUTSTATUSBITCOUNT" code="10070" description="modbus TCP invalid input status bit count." />
		<error name="MODBUSTCPINVALIDINPUTSTATUSRESPONSE" code="10071" description="modbus TCP invalid input status response." />
		<error name="MODBUSTCPINPUTSTATUSRESPONSEEMPTY" code="10072" description="modbus TCP input status response empty." />		
		<error name="MODBUSTCPINVALIDINPUTSTATUSRESPONSESIZE" code="10073" description="modbus TCP invalid input status response size." />
		<error name="INVALIDMODBUSTCPCOILCOUNT" code="10074" description="invalid modbus tcp coil count." />
		<error name="INVALIDMODBUSTCPREGISTERCOUNT" code="10075" description="invalid modbus tcp register count." />
		<error name="INVALIDMODBUSIOINDEX" code="10076" description="invalid modbus IO index." />
		<error name="MODBUSIOSTATUSEMPTY" code="10077" description="modbus io status empty." />
		<error name="INVALIDMODBUSREGISTERINDEX" code="10078" description="invalid modbus register index." />
		<error name="MODBUSREGISTERSTATUSEMPTY" code="10079" description="modbus register status empty." />		
		<error name="MODBUSTCPINVALIDINPUTREGISTERSRESPONSE" code="10080" description="modbus TCP invalid input registers response" />
		<error name="MODBUSTCPINPUTREGISTERSRESPONSEEMPTY" code="10081" description="modbus TCP input registers response empty" />
		<error name="MODBUSTCPINVALIDINPUTREGISTERSRESPONSESIZE" code="10083" description="modbus TCP invalid input registers response size" />
		<error name="MODBUSTCPINVALIDHOLDINGREGISTERSRESPONSE" code="10084" description="modbus TCP invalid holding registers response" />
		<error name="MODBUSTCPHOLDINGREGISTERSRESPONSEEMPTY" code="10085" description="modbus TCP holding registers response empty" />
		<error name="MODBUSTCPINVALIDHOLDINGREGISTERSRESPONSESIZE" code="10086" description="modbus TCP invalid holding registers response size" />
		<error name="SIGNALUUIDNOTACTIVE" code="10087" description="signal UUID not active." />		
		<error name="COULDNOTPARSEXMLSTRING" code="10088" description="could not parse XML string." />		
		<error name="COULDNOTPARSEXMLDATA" code="10089" description="could not parse XML data." />		
		<error name="INVALIDPROFILEVALUETYPE" code="10090" description="Invalid profile value type." />		
		<error name="XMLDOCUMENTMISMATCH" code="10091" description="XML Document mismatch." />				
		<error name="INVALIDINTEGERVALUEATTRIBUTE" code="10092" description="Invalid integer value attribute." />				
		<error name="INTEGERVALUEATTRIBUTEOUTOFRANGE" code="10093" description="Integer value attribute out of range." />				
		<error name="INVALIDDOUBLEVALUEATTRIBUTE" code="10094" description="Invalid double value attribute." />				
		<error name="DOUBLEVALUEATTRIBUTEOUTOFRANGE" code="10095" description="Double value attribute out of range." />						
		<error name="INVALIDDEFAULTIMAGEVALUE" code="10096" description="Invalid default image value." />
		<error name="INVALIDPIXELMEMORYSIZE" code="10097" description="Invalid pixel memory size." />
		<error name="INVALIDFIELDBUFFER" code="10098" description="Invalid field buffer." />
		<error name="INTERNALFIELDSIZEERROR" code="10099" description="Internal field size error." />
		<error name="INVALIDFIELDSIZE" code="10100" description="Invalid field size." />
		<error name="INVALIDFIELDSCALINGFACTOR" code="10101" description="Invalid field scaling factor." />
		<error name="SCALINGEXCEEDSMAXIMUMPIXELCOUNT" code="10102" description="Scaling exceeds maximum pixel count." />
		<error name="INTERNALSCALINGERROR" code="10103" description="Internal scaling error." />
		<error name="INVALIDCOLORRANGE" code="10104" description="Invalid color range." />
		<error name="EMPTYJOURNALVARIABLENAME" code="10105" description="Empty journal variable name." />
		<error name="INVALIDJOURNALVARIABLEINTERVAL" code="10106" description="Invalid journal variable interval." />
		<error name="JOURNALVARIABLENOTFOUND" code="10107" description="Journal variable not found." />
		<error name="COMPUTATIONOUTSIDEOFJOURNALDATA" code="10108" description="Computation outside of journal data." />
		<error name="INVALIDJOURNALCOMPUTEINTERVAL" code="10109" description="Invalid Journal compute interval." />
		<error name="INVALIDJOURNALCOMPUTEDATA" code="10110" description="Invalid Journal compute data." />
		<error name="INVALIDSEGMENTATTRIBUTETYPE" code="10111" description="Invalid Segment Attribute Type." />
		<error name="SEGMENTATTRIBUTENOTFOUND" code="10112" description="Segment Attribute not Found." />
		<error name="UNSUPPORTEDFIELDSAMPLINGMODE" code="10113" description="Unsupported field sampling mode." />
		<error name="SAMPLEPOINTCOUNTEXCEEDSMAXIMUM" code="10114" description="Sample point count exceeds maximum"/>
		<error name="INVALIDCLAMPINTERVAL" code="10115" description="Invalid clamp interval"/>
		<error name="COULDNOTRETRIEVEPNGSTREAM" code="10116" description="Could not retrieve PNG stream"/>
		<error name="COULDNOTSTOREFIELDDATA" code="10117" description="Could not store field data"/>
		<error name="DISCRETEFIELDDATANOTFOUND" code="10118" description="Discrete field data not found"/>
		<error name="EMPTYUSERLOGIN" code="10119" description="Empty user login"/>
		<error name="INVALIDUSERLOGIN" code="10120" description="Invalid user login"/>
		<error name="EMPTYPERMISSIONIDENTIFIER" code="10121" description="Empty permission identifier"/>
		<error name="INVALIDPERMISSIONIDENTIFIER" code="10122" description="Invalid permission identifier"/>
		<error name="EMPTYUSERROLE" code="10123" description="Empty user role"/>
		<error name="INVALIDUSERROLE" code="10124" description="Invalid user role"/>
		<error name="EMPTYUSERLANGUAGE" code="10125" description="Empty user language"/>
		<error name="INVALIDUSERLANGUAGE" code="10126" description="Invalid user language"/>
		<error name="ORIGINOUTOFRANGE" code="10127" description="Origin out of range"/>
		<error name="RAWPIXELDATASIZEMISMATCH" code="10128" description="Raw pixel data size mismatch"/>		
		<error name="EMPTYPNGSTREAM" code="10129" description="Empty PNG Stream"/>
		<error name="COULDNOTLOADPNGIMAGE" code="10130" description="Could not load PNG image"/>
		<error name="INVALIDPIXELSIZE" code="10131" description="Invalid pixel size"/>
		<error name="MESHISNOTREGISTERED" code="10132" description="Mesh is not registered"/>
		<error name="INVALIDUSERINDEX" code="10133" description="Invalid user index"/>
		<error name="DATASERIESTIMESTAMPSNOTINCREMENTING" code="10134" description="Data series time stamps not incrementing" />		
		<error name="INVALIDNUMBEROFSAMPLES" code="10135" description="Invalid number of samples"/>
		<error name="EMPTYALERTIDENTIFIER" code="10136" description="Empty alert identifier"/>
		<error name="INVALIDALERTIDENTIFIER" code="10137" description="Invalid alert identifier"/>
		<error name="ALERTNOTFOUND" code="10138" description="Alert not found."/>
		<error name="USERDOESNOTEXIST" code="10139" description="User does not exist."/>
		<error name="EMPTYSHA256SOURCE" code="10140" description="Empty SHA256 Source."/>
		<error name="ALERTHASNOUSERCONTEXT" code="10141" description="Alert has no user context."/>
		<error name="EMPTYJOURNALSTREAMNAME" code="10142" description="Empty journal stream name."/>
		<error name="EMPTYJOURNALSTREAMMIMETYPE" code="10143" description="Empty journal stream mime type."/>		
		<error name="INVALIDSTREAMREADCALLBACK" code="10144" description="Invalid stream read callback." />		
		<error name="INVALIDSTREAMSEEKCALLBACK" code="10145" description="Invalid stream seek callback." />		
		<error name="INVALIDSTREAMCALLBACKUSERDATA" code="10146" description="Invalid stream callback user data." />		
		<error name="STREAMREADEXCEEDSSTREAMSIZE" code="10147" description="Stream read exceeds stream size." />		
		<error name="INVALIDSTREAMREADSIZE" code="10148" description="Invalid stream read size." />		
		<error name="INVALIDSTREAMSEEKPOSITION" code="10149" description="Invalid stream seek position." />		
		<error name="STORAGESTREAMNOTFOUND" code="10150" description="Storage Stream not found." />		
		<error name="DOWNLOADSTREAMDOESNOTEXIST" code="10151" description="Download stream does not exist." />		
		<error name="EMPTYDOWNLOADSTREAMFILENAME" code="10152" description="Empty download stream filename." />		
		<error name="INVALIDDOWNLOADSTREAMFILENAME" code="10153" description="Invalid download stream filename." />		
		<error name="USERISNOTAUTHORIZED" code="10154" description="User is not authorized." />		
		<error name="INVALIDMETADATAKEY" code="10155" description="Invalid Metadata Key." />		
		<error name="CANNOTCHANGESTATUSOFBUILDEXECUTION" code="10156" description="Can not change status of build execution." />		
		<error name="BUILDEXECUTIONHASNOATTACHEDUSER" code="10157" description="Build execution has no attached user." />		
		<error name="UNITSAREOUTOFRANGE" code="10158" description="Units are out of range." />		
		<error name="COLUMNIDENTIFIEREMPTY" code="10159" description="Column identifier is empty." />		
		<error name="INVALIDCOLUMNIDENTIFIER" code="10160" description="Invalid column identifier." />		
		<error name="DUPLICATECOLUMNIDENTIFIER" code="10161" description="Duplicate column identifier." />		
		<error name="INVALIDCOLUMNDATATYPE" code="10162" description="Invalid column data type." />		
		<error name="DATATABLEHASTOOMANYCOLUMS" code="10163" description="Data table has too many columns." />		
		<error name="COLUMNIDENTIFIERNOTFOUND" code="10164" description="Column identifier not found." />		
		<error name="INVALIDCOLUMNINDEX" code="10165" description="Invalid column index." />		
		<error name="COLUMNBUFFERISNULL" code="10166" description="Column buffer is null." />				
		<error name="COLUMNISNOTOFTYPEDOUBLE" code="10167" description="Column is not of type double." />		
		<error name="COLUMNISNOTOFTYPEUINT32" code="10168" description="Column is not of type uint32." />		
		<error name="COLUMNISNOTOFTYPEUINT64" code="10169" description="Column is not of type uint64." />		
		<error name="COLUMNISNOTOFTYPEINT32" code="10170" description="Column is not of type int32." />		
		<error name="COLUMNISNOTOFTYPEINT64" code="10171" description="Column is not of type int64" />		
		<error name="INVALIDCSVSEPARATOR" code="10172" description="Invalid CSV Separator" />		
		<error name="DATATABLECSVBUFFEROVERFLOW" code="10173" description="Data Table CSV buffer overflow" />		
		<error name="DATETIMEDIFFERENCEISINVALID" code="10174" description="Date Time difference is invalid" />		
		<error name="DATETIMEISINVALID" code="10175" description="Date Time is invalid" />		
		<error name="DATETIMEOUTOFBOUNDS" code="10176" description="Date Time out of bounds" />		
		<error name="EMPTYPNGBUFFER" code="10177" description="Empty PNG buffer" />						
		<error name="CANNOTSEEKZIPSTREAM" code="10178" description="Cannot seek ZIP stream" />
		<error name="GLOBALTIMERNOTCONTINUOUS" code="10179" description="Global Timer is not continuous." />	
		<error name="STREAMWRITERISNOTFINISHED" code="10180" description="Stream writer is not finished" />
		<error name="CANNOTREADFROMZIPSTREAM" code="10181" description="Cannot read from ZIP stream" />
		<error name="EMPTYDATATABLENAME" code="10182" description="Empty datatable name" />
		<error name="EMPTYDATATABLEIDENTIFIER" code="10183" description="Empty datatable identifier" />
		<error name="INVALIDDATATABLEIDENTIFIER" code="10184" description="Invalid datatable identifier" />
		<error name="INVALIDDATATABLESIGNATURE" code="10185" description="Invalid datatable signature" />		
		<error name="INVALIDSUPPORTINDEX" code="10186" description="Invalid support index" />		
		<error name="INVALIDSOLIDINDEX" code="10187" description="Invalid solid index" />		
		<error name="INVALIDCOMPONENTINDEX" code="10188" description="Invalid component index" />		
		<error name="INVALIDEXTERNALEVENTPARAMETERKEY" code="10189" description="Invalid external event parameter key" />		
		<error name="COULDNOTFINDEXTERNALEVENTPARAMETER" code="10190" description="Could not find external event parameter" />		
		<error name="INVALIDEXTERNALEVENTRETURNVALUEKEY" code="10191" description="Invalid external event return value key" />				
		<error name="EXTERNALEVENTVALUEKEYISRESERVED" code="10192" description="External event value key is reserved." />		
		<error name="EXTERNALEVENTRETURNVALUEKEYISRESERVED" code="10193" description="External event return value key is reserved." />		
		<error name="INVALIDYUY2BUFFERSIZE" code="10194" description="Invalid YUY2 buffer size" />		
		<error name="YUY2PIXELCOUNTMUSTBEAMULTIPLEOF2" code="10195" description="YUY2 pixel count must be a multiple of 2" />		
		<error name="INVALIDJPEGDATA" code="10196" description="Invalid JPEG Data size" />		
		<error name="INVALIDJPEGBUFFERSIZE" code="10197" description="Invalid JPEG Buffer size" />		
		<error name="COULDNOTINITIALIZEJPEGLIBRARY" code="10198" description="Could not initialize JPEG library" />		
		<error name="COULDNOTSETJPEGSTOPONWARNING" code="10199" description="Could not set JPEG StopOnWarning" />		
		<error name="COULDNOTSETFASTUPSAMPLE" code="10200" description="Could not set FastUpSample" />		
		<error name="COULDNOTSETFASTDCT" code="10201" description="Could not set FastDCT" />		
		<error name="COULDNOTREADJPEGHEADER" code="10202" description="Could not read JPEG Header" />		
		<error name="INVALIDJPEGIMAGESIZE" code="10203" description="Invalid JPEG image size" />		
		<error name="JPEGCOLORPRECISIONTOOHIGH" code="10204" description="JPEG color precision too high" />		
		<error name="COULDNOTDECOMPRESSJPEG" code="10205" description="Could not decompress JPEG" />		
		<error name="COULDNOTSTOREJPEGIMAGE" code="10206" description="Could not store JPEG image" />		
		<error name="INVALIDPNGEXPORTFORMAT" code="10207" description="Invalid PNG Export Format" />		
		<error name="INVALIDMEMORYCACHEQUOTA" code="10208" description="Invalid memory cache quota" />		
		
		
	</errors>

	<enum name="AlertLevel">
		<option name="FatalError" value="1"/>
		<option name="CriticalError" value="2"/>
		<option name="Warning" value="3"/>
		<option name="Message" value="4"/>
		<option name="Unknown" value="7"/>
	</enum>	

	<enum name="LogLevel">
		<option name="FatalError" value="1"/>
		<option name="CriticalError" value="2"/>
		<option name="Warning" value="3"/>
		<option name="Message" value="4"/>
		<option name="Info" value="5"/>
		<option name="Debug" value="6"/>
		<option name="Unknown" value="7"/>
	</enum>	
	
	
	<enum name="JSONObjectType">
		<option name="Unknown" value="0"/>
		<option name="String" value="1"/>
		<option name="Integer" value="2"/>
		<option name="Double" value="3"/>
		<option name="Object" value="4"/>
		<option name="Array" value="5"/>
	</enum>	
	
		
	<enum name="ImagePixelFormat">
		<option name="Unknown" value="0" />
		<option name="GreyScale8bit" value="1" />
		<option name="RGB24bit" value="2" />
		<option name="RGBA32bit" value="3" />
		<option name="RGB16bit" value="4" />
	</enum>
	
	<enum name="PNGStorageFormat">
		<option name="Unknown" value="0" />
		<option name="BlackWhite1bit" value="1" />
		<option name="GreyScale1bit" value="2" />
		<option name="GreyScale2bit" value="3" />
		<option name="GreyScale4bit" value="4" />
		<option name="GreyScale8bit" value="5" />
		<option name="RGB24bit" value="6" />
		<option name="RGBA32bit" value="7" />
	</enum>
	
	<enum name="FieldSamplingMode">
		<option name="Unknown" value="0" description="Field sampling mode is invalid." />
		<option name="FloorCoordinate" value="1" description="Point Coordinates are rounded down to the nearest pixel and the point value is fully attached to this pixel. Points on a border will be attached to the pixel which is nearer to the origin." />
		<option name="CeilCoordinate" value="2" description="Point Coordinates are rounded up to the nearest pixel and the point value is fully attached to this pixel. Points on a border will be attached to the pixel which is farer from the origin." />
		<option name="WeightByRectangleArea" value="3" description="Point values are valued by a rectangle shape area and its overlap with each pixel (with the center as the given coordinate)." />
		<option name="WeightByEllipseArea" value="4" description="Point values are valued by a ellipse shape area that its overlap with each pixel (with the center as the given coordinate)." />
	</enum>
	
	
	<enum name="ToolpathSegmentType">
		<option name="Unknown" value="0" />
		<option name="Hatch" value="1" />
		<option name="Loop" value="2" />
		<option name="Polyline" value="3" />
	</enum>
	
	<enum name="ToolpathAttributeType">
		<option name="Unknown" value="0" />
		<option name="Integer" value="1" />
		<option name="Double" value="2" />
	</enum>

	<enum name="ToolpathProfileValueType">
		<option name="Custom" value="0" />
		<option name="Speed" value="1" />
		<option name="JumpSpeed" value="2" />
		<option name="ExtrusionFactor" value="3" />
		<option name="LaserPower" value="4" />
		<option name="StartDelay" value="5" />
		<option name="EndDelay" value="6" />
		<option name="PolyDelay" value="7" />
		<option name="PolyDelayAngleDependent" value="8" />
		<option name="LaserOnDelay" value="9" />
		<option name="LaserOffDelay" value="10" />
		<option name="JumpDelay" value="11" />
		<option name="MarkDelay" value="12" />
		<option name="LaserFocus" value="13" />
	</enum>
	
	<enum name="ToolpathProfileOverrideFactor">
		<option name="Unknown" value="0" />
		<option name="FactorF" value="1" />
		<option name="FactorG" value="2" />
		<option name="FactorH" value="3" />
	</enum>

	
	<enum name="MessageDialogType">
		<option name="Unknown" value="0" />
		<option name="DialogOK" value="1" />
		<option name="DialogOKCancel" value="2" />
		<option name="DialogYesNo" value="3" />
		<option name="DialogYesNoCancel" value="4" />
	</enum>
	
	<enum name="BuildExecutionStatus">
		<option name="Unknown" value="0" />
		<option name="InProcess" value="1" />
		<option name="Finished" value="2" />
		<option name="Failed" value="3" />
	</enum>
	
	<enum name="DataTableColumnType">
		<option name="Unknown" value="0" />
		<option name="DoubleColumn" value="1" />
		<option name="Int32Column" value="2" />
		<option name="Uint32Column" value="3" />
		<option name="Int64Column" value="4" />
		<option name="Uint64Column" value="5" />
	</enum>
	
		
	
	<struct name="Position2D">
		<member name="Coordinates" type="int32" rows="2"/>
	</struct>

	<struct name="Hatch2D">
		<member name="X1" type="int32" />
		<member name="Y1" type="int32" />
		<member name="X2" type="int32" />
		<member name="Y2" type="int32" />
	</struct>

	<struct name="MeshVertex3D">
		<member name="VertexID" type="uint32" />
		<member name="Coordinates" type="double" rows="3"/>
	</struct>	
	
	<struct name="MeshTriangle3D">
		<member name="TriangleID" type="uint32" />
		<member name="Vertices" type="uint32" rows="3"/>
	</struct>	

	<struct name="FloatPosition2D">
		<member name="Coordinates" type="double" rows="2"/>
	</struct>

	<struct name="FieldData2DPoint">
		<member name="Coordinates" type="double" rows="2"/>
		<member name="Value" type="double" />
	</struct>

	<struct name="FieldData3DPoint">
		<member name="Coordinates" type="double" rows="3"/>
		<member name="Value" type="double" />
	</struct>

	<struct name="FloatHatch2D">
		<member name="X1" type="double" />
		<member name="Y1" type="double" />
		<member name="X2" type="double" />
		<member name="Y2" type="double" />
	</struct>

	<struct name="Hatch2DOverrides">
		<member name="Point1Override" type="double" />
		<member name="Point2Override" type="double" />
	</struct>	
	
	<struct name="ModelDataTransform">
		<member name="Matrix" type="double" rows="3" columns="3"/>
		<member name="Translation" type="double" rows="3"/>
	</struct>

	<struct name="ColorRGB">
		<member name="Red" type="double" description="Red value of color (0..1)" />
		<member name="Green" type="double" description="Green value of color (0..1)"/>
		<member name="Blue" type="double" description="Blue value of color (0..1)" />
	</struct>

	<struct name="TimeStreamEntry" description="Entry of a time stream.">
		<member name="TimestampInMicroSeconds" type="uint64" />
		<member name="Value" type="double" />
	</struct>

	
	<class name="Base">
	</class>


	<class name="Iterator" parent="Base">
		<method name="MoveNext" description="Iterates to the next object in the list.">
			<param name="HasNext" type="bool" pass="return" description="Iterates to the next object in the list."/>
		</method>
		<method name="MovePrevious" description="Iterates to the previous object in the list.">
			<param name="HasPrevious" type="bool" pass="return" description="Iterates to the previous object in the list."/>
		</method>
		<method name="GetCurrent" description="Returns the object the iterator points at.">
			<param name="Instance" type="handle" class="Base" pass="return" description="returns the object instance."/>
		</method>
		<method name="Clone" description="Creates a new object iterator with the same object list.">
			<param name="OutIterator" type="handle" class="Iterator" pass="return" description="returns the cloned Iterator instance"/>
		</method>
		<method name="Count" description="Returns the number of resoucres the iterator captures.">
			<param name="Count" type="uint64" pass="return" description="returns the number of objects the iterator captures."/>
		</method>
	</class>

	
	<class name="TestEnvironment" parent="Base">
	
		<method name="WriteTestOutput" description="Write output file to test directory.">
			<param name="OutputName" type="string" pass="in" description="Output file name. Only alphanumeric characters, point, underscore and hypen are allowed."/>
			<param name="Data" type="basicarray" class="uint8" pass="in" description="Test data to write into output directory."/>
		</method>
		
	</class>
	
	<class name="CryptoContext" parent="Base">
	
		<method name="CalculateSHA256FromString" description="Calculates SHA256 from a string. Fails if string is empty.">
			<param name="Value" type="string" pass="in" description="Input value."/>
			<param name="SHA256Value" type="string" pass="return" description="SHA256 Return value."/>
		</method>
		
		<method name="CalculateSHA256FromBytes" description="Calculates SHA256 from a byte array. Fails if array is empty.">
			<param name="Value" type="basicarray" class="uint8" pass="in" description="Input value."/>
			<param name="SHA256Value" type="string" pass="return" description="SHA256 Return value."/>
		</method>

		<method name="NormalizeSHA256String" description="Normalizes a standard string into UUID format. Fails if string does not have a proper UUID format.">
			<param name="Value" type="string" pass="in" description="Input value."/>
			<param name="SHA256Value" type="string" pass="return" description="SHA256 Return value."/>
		</method>

		<method name="CreateRandomSHA256Hash" description="Generates a random SHA256 hash value with operating system APIs.">
			<param name="SHA256Value" type="string" pass="return" description="SHA256 Return value."/>
		</method>

		<method name="CreateUUID" description="Generates a random UUID with operating system APIs.">
			<param name="UUIDValue" type="string" pass="return" description="UUID Return value."/>
		</method>
		
		<method name="NormalizeUUIDString" description="Normalizes a standard string into UUID format. Fails if string does not have a proper UUID format.">
			<param name="Value" type="string" pass="in" description="Input value."/>
			<param name="UUIDValue" type="string" pass="return" description="UUID Return value."/>
		</method>
		
	</class>	
	

	
	<class name="PNGImageStoreOptions" parent="Base" description="Option class to parametrize saving of PNG Images.">
	
		<method name="ResetToDefaults" description="Resets Options to default.">
		</method>
	
		<method name="GetStorageFormat" description="Returns the PNG storage format.">
			<param name="PNGStorageFormat" type="enum" class="PNGStorageFormat" pass="return" description="PNG Format of image" />		
		</method>

		<method name="SetStorageFormat" description="Sets the PNG storage format.">
			<param name="PNGStorageFormat" type="enum" class="PNGStorageFormat" pass="in" description="new PNG Format of image" />		
		</method>


	</class>
	
	
	<class name="PNGImageData" parent="Base" description="Binary representation of PNG Data.">

		<method name="GetSizeInPixels" description="Returns image pixel sizes.">
			<param name="PixelSizeX" type="uint32" pass="out" description="Number of pixels in X" />
			<param name="PixelSizeY" type="uint32" pass="out" description="Number of pixels in Y" />
		</method>		

		<method name="GetPNGDataStream" description="Retrieves encoded PNG data of image object.">
			<param name="PNGData" type="basicarray" class="uint8" pass="out" description="PNG Data stream." />
		</method>
		
		<method name="WriteToStream" description="Writes encoded PNG data into a stream object.">
			<param name="Stream" type="class" class="TempStreamWriter" pass="in" description="Stream to write to." />
		</method>
		

	</class>
	
	
	<class name="JPEGImageStoreOptions" parent="Base" description="Option class to parametrize saving of JPEG Images.">
	
		<method name="ResetToDefaults" description="Resets Options to default.">
		</method>	
	
	</class>
	
	
	<class name="JPEGImageData" parent="Base" description="Binary representation of JPEG Data.">

		<method name="GetSizeInPixels" description="Returns image pixel sizes.">
			<param name="PixelSizeX" type="uint32" pass="out" description="Number of pixels in X" />
			<param name="PixelSizeY" type="uint32" pass="out" description="Number of pixels in Y" />
		</method>		

		<method name="GetJPEGDataStream" description="Retrieves encoded JPEG data of image object.">
			<param name="JPEGData" type="basicarray" class="uint8" pass="out" description="JPEG Data stream." />
		</method>

		<method name="WriteToStream" description="Writes encoded JPEG data into a stream object.">
			<param name="Stream" type="class" class="TempStreamWriter" pass="in" description="Stream to write to." />
		</method>


	</class>
	
	<class name="ImageData" parent="Base" description="In memory representation of an image.">

		<method name="GetPixelFormat" description="Returns Pixel format of the image.">
			<param name="PixelFormat" type="enum" class="ImagePixelFormat" pass="return" description="Pixel Format of image" />
		</method>

		<method name="ChangePixelFormat" description="Changes Pixel format of the image. Might lose alpha or color information during the process.">
			<param name="PixelFormat" type="enum" class="ImagePixelFormat" pass="in" description="new Pixel Format of image" />
		</method>

		<method name="GetDPI" description="Returns DPI values in X and Y.">
			<param name="DPIValueX" type="double" pass="out" description="DPI value in X" />
			<param name="DPIValueY" type="double" pass="out" description="DPI value in Y" />
		</method>

		<method name="SetDPI" description="Sets DPI values in X and Y.">
			<param name="DPIValueX" type="double" pass="in" description="new DPI value in X" />
			<param name="DPIValueY" type="double" pass="in" description="new DPI value in Y" />
		</method>
		
		<method name="GetSizeInMM" description="Returns image sizes inmm.">
			<param name="SizeX" type="double" pass="out" description="Size in X in mm" />
			<param name="SizeY" type="double" pass="out" description="Size in Y in mm" />
		</method>

		<method name="GetSizeInPixels" description="Returns image pixel sizes.">
			<param name="PixelSizeX" type="uint32" pass="out" description="Number of pixels in X" />
			<param name="PixelSizeY" type="uint32" pass="out" description="Number of pixels in Y" />
		</method>		

		<method name="ResizeImage" description="Resizes Image pixel data.">
			<param name="PixelSizeX" type="uint32" pass="out" description="Number of pixels in X" />
			<param name="PixelSizeY" type="uint32" pass="out" description="Number of pixels in Y" />
		</method>		
				
		<method name="CreatePNGOptions" description="Creates PNG Options for storing the PNG file.">		
			<param name="PNGStorageOptions" type="class" class="PNGImageStoreOptions" pass="return" description="Encoding options for the image." />		
		</method>

		<method name="CreatePNGImage" description="Creates PNG Image out of the pixel data.">		
			<param name="PNGStorageOptions" type="optionalclass" class="PNGImageStoreOptions" pass="in" description="Optional encoding options for the image." />		
			<param name="PNGImage" type="class" class="PNGImageData" pass="return" description="Image data." />		
		</method>

		<method name="CreateJPEGOptions" description="Creates PNG Options for storing the PNG file.">		
			<param name="JPEGStorageOptions" type="class" class="JPEGImageStoreOptions" pass="return" description="Encoding options for the image." />		
		</method>

		<method name="CreateJPEGImage" description="Creates JPEG Image out of the pixel data.">		
			<param name="JPEGStorageOptions" type="optionalclass" class="JPEGImageStoreOptions" pass="in" description="Optional encoding options for the image." />		
			<param name="JPEGImage" type="class" class="JPEGImageData" pass="return" description="Image data." />		
		</method>
		
		<method name="Clear" description="Sets all pixels to a single value.">
			<param name="Value" type="uint32" pass="in" description="Pixel value." />
		</method>		

		<method name="GetPixel" description="Returns one pixel of an image.">
			<param name="X" type="uint32" pass="in" description="Pixel coordinate in X" />
			<param name="Y" type="uint32" pass="in" description="Pixel coordinate in Y" />
			<param name="Value" type="uint32" pass="return" description="Pixel value at this position" />
		</method>		

		<method name="SetPixel" description="Sets one pixel of an image.">
			<param name="X" type="uint32" pass="in" description="Pixel coordinate in X" />
			<param name="Y" type="uint32" pass="in" description="Pixel coordinate in Y" />
			<param name="Value" type="uint32" pass="in" description="New Pixel value at this position" />
		</method>		

		<method name="GetPixelRange" description="Returns a subset of an image or the whole image data. DEPRECIATED.">
			<param name="XMin" type="uint32" pass="in" description="Min Pixel coordinate in X. MUST be within image bounds." />
			<param name="YMin" type="uint32" pass="in" description="Min Pixel coordinate in Y. MUST be within image bounds." />
			<param name="XMax" type="uint32" pass="in" description="Max Pixel coordinate in X. MUST be within image bounds. MUST be larger or equal than MinX" />
			<param name="YMax" type="uint32" pass="in" description="Max Pixel coordinate in Y. MUST be within image bounds. MUST be larger or equal than MinY" />
			<param name="Value" type="basicarray" class="uint8" pass="out" description="Pixel values of the rectangle, rowwise array. Will return the exact number of pixels in size and 1, 3 or 4 bytes per pixel, depending on pixel format." />
		</method>		

		<method name="SetPixelRange" description="Exchanges a subset of an image or the whole image data. DEPRECIATED.">
			<param name="XMin" type="uint32" pass="in" description="Min Pixel coordinate in X. MUST be within image bounds." />
			<param name="YMin" type="uint32" pass="in" description="Min Pixel coordinate in Y. MUST be within image bounds." />
			<param name="XMax" type="uint32" pass="in" description="Max Pixel coordinate in X. MUST be within image bounds. MUST be larger or equal than MinX" />
			<param name="YMax" type="uint32" pass="in" description="Max Pixel coordinate in Y. MUST be within image bounds. MUST be larger or equal than MinY" />
			<param name="Value" type="basicarray" class="uint8" pass="in" description="New pixel values of the rectangle, rowwise array. MUST have the exact number of pixels in size and 1, 3 or 4 bytes per pixel, depending on pixel format." />
		</method>

		<method name="GetPixels" description="Returns a subset of an image or the whole image data. Please use this function instead of GetPixelRange.">
			<param name="StartX" type="uint32" pass="in" description="Min Pixel coordinate in X. MUST be within image bounds." />
			<param name="StartY" type="uint32" pass="in" description="Min Pixel coordinate in Y. MUST be within image bounds." />
			<param name="CountX" type="uint32" pass="in" description="Number of Pixels to write in X. StartX + SizeX MUST be smaller or equal the number of pixels in X." />
			<param name="CountY" type="uint32" pass="in" description="Number of Pixels to write in Y. StartY + SizeY MUST be smaller or equal the number of pixels in Y." />
			<param name="TargetFormat" type="enum" class="ImagePixelFormat" pass="in" description="Target pixel format to convert the image data to." />
			<param name="Value" type="basicarray" class="uint8" pass="out" description="Pixel values of the rectangle, rowwise array. Will return the exact number of pixels in size and 1, 2, 3 or 4 bytes per pixel, depending on target format." />
		</method>		

		<method name="SetPixels" description="Exchanges a subset of an image or the whole image data. Please use this function instead of SetPixelRange.">
			<param name="StartX" type="uint32" pass="in" description="Min Pixel coordinate in X. MUST be within image bounds." />
			<param name="StartY" type="uint32" pass="in" description="Min Pixel coordinate in Y. MUST be within image bounds." />
			<param name="CountX" type="uint32" pass="in" description="Number of Pixels to write in X. StartX + SizeX MUST be smaller or equal the number of pixels in X." />
			<param name="CountY" type="uint32" pass="in" description="Number of Pixels to write in Y. StartY + SizeY MUST be smaller or equal the number of pixels in Y." />
			<param name="SourceFormat" type="enum" class="ImagePixelFormat" pass="in" description="Source pixel format to convert the image data from." />
			<param name="Value" type="basicarray" class="uint8" pass="in" description="New pixel values of the rectangle, rowwise array. MUST have the exact number of pixels in size and 1, 2, 3 or 4 bytes per pixel, depending on source format." />
		</method>

		<method name="SetPixelsFromRawYUY2Data" description="Sets all pixels from a raw YUY2 color array.">
			<param name="YUY2Data" type="basicarray" class="uint8" pass="in" description="Pixel array in YUY2 color format (2 bytes per pixels). The array MUST have a length of PixelSizeX * PixelSizeY * 2." />
		</method>

		<method name="WriteToRawMemory" description="Writes an image to a raw memory buffer, according to a target pixel format. SHOULD ONLY BE USED WITH CAUTION. No memory checks are performed on the target.">
			<param name="StartX" type="uint32" pass="in" description="Min Pixel coordinate in X. MUST be within image bounds." />
			<param name="StartY" type="uint32" pass="in" description="Min Pixel coordinate in Y. MUST be within image bounds." />
			<param name="CountX" type="uint32" pass="in" description="Number of Pixels to write in X. StartX + SizeX MUST be smaller or equal the number of pixels in X." />
			<param name="CountY" type="uint32" pass="in" description="Number of Pixels to write in Y. StartY + SizeY MUST be smaller or equal the number of pixels in Y." />
			<param name="TargetFormat" type="enum" class="ImagePixelFormat" pass="in" description="Target pixel format to convert the image data to." />
			<param name="Target" type="pointer" pass="in" description="Memory address to write to. The pixel value of StartX/StartY will be written to this address." />
			<param name="YLineOffset" type="uint32" pass="in" description="Offset to add to the Target pointer to advance a line (in bytes)." />
		</method>		

		<method name="ReadFromRawMemory" description="Reads an image to a raw memory buffer, according to a target pixel format. SHOULD ONLY BE USED WITH CAUTION. No memory checks are performed on the source.">
			<param name="StartX" type="uint32" pass="in" description="Min Pixel coordinate in X. MUST be within image bounds." />
			<param name="StartY" type="uint32" pass="in" description="Min Pixel coordinate in Y. MUST be within image bounds." />
			<param name="CountX" type="uint32" pass="in" description="Number of Pixels to write in X. StartX + SizeX MUST be smaller or equal the number of pixels in X." />
			<param name="CountY" type="uint32" pass="in" description="Number of Pixels to write in Y. StartY + SizeY MUST be smaller or equal the number of pixels in Y." />
			<param name="SourceFormat" type="enum" class="ImagePixelFormat" pass="in" description="Source pixel format to convert the image data from." />
			<param name="Source" type="pointer" pass="in" description="Memory address to read from. The pixel value of StartX/StartY will be written to this address." />
			<param name="YLineOffset" type="uint32" pass="in" description="Offset to add to the source pointer to advance a line (in bytes)." />
		</method>		

	
	</class>
	
	<class name="ImageLoader" parent="Base" description="Class for loading images from various data formats.">

		<method name="LoadPNGImage" description="creates an image object from a PNG data stream.">
			<param name="PNGData" type="basicarray" class="uint8" pass="in" description="PNG Data as byte array. Fails if image cannot be loaded." />
			<param name="DPIValueX" type="double" pass="in" description="DPI Value in X. MUST be positive." />
			<param name="DPIValueY" type="double" pass="in" description="DPI Value in Y. MUST be positive." />
			<param name="PixelFormat" type="enum" class="ImagePixelFormat" pass="in" description="Pixel format to use. Might lose color and alpha information." />
			<param name="ImageDataInstance" type="class" class="ImageData" pass="return" description="Image instance containing the PNG image." />
		</method>

		<method name="LoadJPEGImage" description="creates an image object from a JPEG data stream.">
			<param name="JPEGData" type="basicarray" class="uint8" pass="in" description="JPEG Data as byte array. Fails if image cannot be loaded." />
			<param name="DPIValueX" type="double" pass="in" description="DPI Value in X. MUST be positive." />
			<param name="DPIValueY" type="double" pass="in" description="DPI Value in Y. MUST be positive." />
			<param name="PixelFormat" type="enum" class="ImagePixelFormat" pass="in" description="Pixel format to use. Might lose color and alpha information." />
			<param name="ImageDataInstance" type="class" class="ImageData" pass="return" description="Image instance containing the PNG image." />
		</method>

		<method name="CreateImageFromRawRGB24Data" description="creates an image object from raw RGB24 Data. (3 bytes per pixel)">
			<param name="RGB24Data" type="basicarray" class="uint8" pass="in" description="RGB 24 data. MUST contain PixelSizeX * PixelSizeY * 3 bytes." />
			<param name="PixelSizeX" type="uint32" pass="in" description="Pixel size in X. MUST be positive." />
			<param name="PixelSizeY" type="uint32" pass="in" description="Pixel size in Y. MUST be positive." />
			<param name="DPIValueX" type="double" pass="in" description="DPI Value in X. MUST be positive." />
			<param name="DPIValueY" type="double" pass="in" description="DPI Value in Y. MUST be positive." />
			<param name="PixelFormat" type="enum" class="ImagePixelFormat" pass="in" description="Pixel format to use in memory." />
			<param name="ImageDataInstance" type="class" class="ImageData" pass="return" description="Image instance with the data." />
		</method>
	
		<method name="CreateImageFromRawRGBA32Data" description="creates an image object from raw RGBA32 Data. (4 bytes per pixel)">
			<param name="RGBA32Data" type="basicarray" class="uint8" pass="in" description="RGBA 32 data. MUST contain PixelSizeX * PixelSizeY * 4 bytes." />
			<param name="PixelSizeX" type="uint32" pass="in" description="Pixel size in X. MUST be positive." />
			<param name="PixelSizeY" type="uint32" pass="in" description="Pixel size in Y. MUST be positive." />
			<param name="DPIValueX" type="double" pass="in" description="DPI Value in X. MUST be positive." />
			<param name="DPIValueY" type="double" pass="in" description="DPI Value in Y. MUST be positive." />
			<param name="PixelFormat" type="enum" class="ImagePixelFormat" pass="in" description="Pixel format to use in memory." />
			<param name="ImageDataInstance" type="class" class="ImageData" pass="return" description="Image instance with the data." />
		</method>

		<method name="CreateImageFromRawYUY2Data" description="creates an image object from raw YUY2 Data. (2 bytes per pixel)">
			<param name="YUY2Data" type="basicarray" class="uint8" pass="in" description="YUY2 data. MUST contain PixelSizeX * PixelSizeY * 2 bytes." />
			<param name="PixelSizeX" type="uint32" pass="in" description="Pixel size in X. MUST be positive." />
			<param name="PixelSizeY" type="uint32" pass="in" description="Pixel size in Y. MUST be positive." />
			<param name="DPIValueX" type="double" pass="in" description="DPI Value in X. MUST be positive." />
			<param name="DPIValueY" type="double" pass="in" description="DPI Value in Y. MUST be positive." />
			<param name="PixelFormat" type="enum" class="ImagePixelFormat" pass="in" description="Pixel format to use in memory." />
			<param name="ImageDataInstance" type="class" class="ImageData" pass="return" description="Image instance with the data." />
		</method>
		

	</class>

	
	
	<class name="VideoStream" parent="Base" description="Video stream class.">
	
		
	
	</class>
	
	
	<class name="DiscreteFieldData2DStoreOptions" parent="Base" description="Option class to parametrize saving of Field Data.">
	
		<method name="ResetToDefaults" description="Resets Options to default.">
		</method>	
	
	</class>


	<class name="DiscreteFieldData2D" parent="Base" description="In-memory representation of discrete field in space.">

		<method name="GetDPI" description="Returns DPI values in X and Y.">
			<param name="DPIValueX" type="double" pass="out" description="DPI value in X" />
			<param name="DPIValueY" type="double" pass="out" description="DPI value in Y" />
		</method>

		<method name="SetDPI" description="Sets DPI values in X and Y.">
			<param name="DPIValueX" type="double" pass="in" description="new DPI value in X. MUST be positive." />
			<param name="DPIValueY" type="double" pass="in" description="new DPI value in Y. MUST be positive." />
		</method>

		<method name="GetOriginInMM" description="Returns field origin in mm.">
			<param name="OriginX" type="double" pass="out" description="Origin in X in mm" />
			<param name="OriginY" type="double" pass="out" description="Origin in Y in mm" />
		</method>

		<method name="SetOriginInMM" description="Set field origin in mm.">
			<param name="OriginX" type="double" pass="in" description="Origin in X in mm" />
			<param name="OriginY" type="double" pass="in" description="Origin in Y in mm" />
		</method>
		
		<method name="GetSizeInMM" description="Returns field sizes in mm.">
			<param name="SizeX" type="double" pass="out" description="Size in X in mm" />
			<param name="SizeY" type="double" pass="out" description="Size in Y in mm" />
		</method>

		<method name="GetSizeInPixels" description="Returns field pixel sizes.">
			<param name="PixelSizeX" type="uint32" pass="out" description="Number of pixels in X" />
			<param name="PixelSizeY" type="uint32" pass="out" description="Number of pixels in Y" />
		</method>		

		<method name="ResizeField" description="Resizes field pixel data.">
			<param name="PixelSizeX" type="uint32" pass="in" description="Number of pixels in X" />
			<param name="PixelSizeY" type="uint32" pass="in" description="Number of pixels in Y" />
			<param name="DefaultValue" type="double" pass="in" description="Default Pixel value." />
		</method>

		<method name="Clear" description="Sets all pixels to a single value.">
			<param name="Value" type="double" pass="in" description="Pixel value." />
		</method>		

		<method name="Clamp" description="Clamps all pixels to a certain interval.">
			<param name="MinValue" type="double" pass="in" description="Minimum value. MUST be smaller or equal than MaxValue." />
			<param name="MaxValue" type="double" pass="in" description="Maximum value. MUST be larger or equal than MinValue." />
		</method>		

		<method name="GetPixel" description="Returns one pixel of an field. Fails if outside of field size.">
			<param name="X" type="uint32" pass="in" description="Pixel coordinate in X" />
			<param name="Y" type="uint32" pass="in" description="Pixel coordinate in Y" />
			<param name="Value" type="double" pass="return" description="Pixel value at this position" />
		</method>		

		<method name="SetPixel" description="Sets one pixel of an field. Fails if outside of field size.">
			<param name="X" type="uint32" pass="in" description="Pixel coordinate in X" />
			<param name="Y" type="uint32" pass="in" description="Pixel coordinate in Y" />
			<param name="Value" type="double" pass="in" description="New Pixel value at this position" />
		</method>		

		<method name="GetPixelRange" description="Returns a subset of an field or the whole field data.">
			<param name="XMin" type="uint32" pass="in" description="Min Pixel coordinate in X. MUST be within field bounds." />
			<param name="YMin" type="uint32" pass="in" description="Min Pixel coordinate in Y. MUST be within field bounds." />
			<param name="XMax" type="uint32" pass="in" description="Max Pixel coordinate in X. MUST be within field bounds. MUST be larger or equal than MinX" />
			<param name="YMax" type="uint32" pass="in" description="Max Pixel coordinate in Y. MUST be within field bounds. MUST be larger or equal than MinY" />
			<param name="Value" type="basicarray" class="double" pass="out" description="Pixel values of the rectangle, rowwise array. Will return the exact number of pixels in size." />
		</method>		

		<method name="SetPixelRange" description="Exchanges a subset of an field or the whole field data.">
			<param name="XMin" type="uint32" pass="in" description="Min Pixel coordinate in X. MUST be within field bounds." />
			<param name="YMin" type="uint32" pass="in" description="Min Pixel coordinate in Y. MUST be within field bounds." />
			<param name="XMax" type="uint32" pass="in" description="Max Pixel coordinate in X. MUST be within field bounds. MUST be larger or equal than MinX" />
			<param name="YMax" type="uint32" pass="in" description="Max Pixel coordinate in Y. MUST be within field bounds. MUST be larger or equal than MinY" />
			<param name="Value" type="basicarray" class="double" pass="in" description="New pixel values of the rectangle, rowwise array. MUST have the exact number of pixels in size." />
		</method>
		
		<method name="RenderAveragePointValues" description="Renders and array of average point values into the field. ">
			<param name="DefaultValue" type="double" pass="in" description="If a pixel does not contain any value, fall back to this given value." />
			<param name="SamplingMode" type="enum" class="FieldSamplingMode" pass="in" description="Sampling mode of point values." />
			<param name="SampleSizeX" type="double" pass="in" description="How large a sample point should be drawn in Pixel widths. This determines the weighting when a point value overlaps multiple pixels. Ignored if SamplingMode is equal FloorCoordinate or CeilCoordinate. MUST be positive otherwise." />
			<param name="SampleSizeY" type="double" pass="in" description="How large a sample point should be drawn in Pixel heights. This determines the weighting when a point value overlaps multiple pixels. Ignored if SamplingMode is equal FloorCoordinate or CeilCoordinate. MUST be positive otherwise." />
			<param name="PointValues" type="structarray" class="FieldData2DPoint" pass="in" description="Array of Field Data Points that are sorted into the grid. If a point lies on a grid border, it will be counted to all adjacent pixels." />
		</method>
		
		<method name="ScaleFieldDown" description="Scales the field to a smaller size.">
			<param name="FactorX" type="uint32" pass="in" description="The new field will be this factor smaller in X. MUST be positive and smaller than PixelSizeX" />
			<param name="FactorY" type="uint32" pass="in" description="The new field will be this factor smaller in Y. MUST be positive and smaller than PixelSizeY" />
			<param name="NewField" type="class" class="DiscreteFieldData2D" pass="return" description="Scaled Field Instance" />
		</method>		
		
		<method name="ScaleFieldUp" description="Scales the field to a larger size.">
			<param name="FactorX" type="uint32" pass="in" description="The new field will be this factor larger in X. MUST be positive." />
			<param name="FactorY" type="uint32" pass="in" description="The new field will be this factor larger in Y. MUST be positive." />
			<param name="NewField" type="class" class="DiscreteFieldData2D" pass="return" description="Scaled Field Instance" />
		</method>		

		<method name="Discretize" description="Discretizes the field into a finite set of values. All field values will be set to the nearest value in the given array. Equivalent to DiscretizeWithMapping with two identical parameters.">
			<param name="DiscreteValues" type="basicarray" class="double" pass="in" description="An array of values. MUST NOT be empty." />
		</method>
		
		<method name="DiscretizeWithMapping" description="Discretizes the field into a finite set of DiscreteValues. For each field value the nearest DiscreteValue is determined, and the field is set to the element of NewValues with the same index.">
			<param name="DiscreteValues" type="basicarray" class="double" pass="in" description="An array of values. MUST NOT be empty.  " />
			<param name="NewValues" type="basicarray" class="double" pass="in" description="An array of values. MUST have the same cardinality as DiscreteValues." />
		</method>

		<method name="RenderToImageRaw" description="Renders the field into a PNG image. The colors will be linearly interpolated into a given color scheme.">
			<param name="MinValue" type="double" pass="in" description="Min point value. Values smaller than MinValue will be clamped to MinValue." />
			<param name="MinColor" type="struct" class="ColorRGB" pass="in" description="The color assigned to MinValue." />
			<param name="MidValue" type="double" pass="in" description="Mid point value. MUST be at least 1E-6 larger than MinValue." />
			<param name="MidColor" type="struct" class="ColorRGB" pass="in" description="The color assigned to MidValue" />
			<param name="MaxValue" type="double" pass="in" description="Max point value. MUST be at least 1E-6 larger than MidValue. Values larger than MaxValue will be clamped to MaxValue." />
			<param name="MaxColor" type="struct" class="ColorRGB" pass="in" description="The color assigned to MaxValue" />
			<param name="NewImage" type="class" class="ImageData" pass="return" description="New Image with the according data. Pixel size and DPI will be equal to the field. Pixel format will be RGB24bit." />
		</method>		
		
		<method name="TransformField" description="Scales the field values with a factor and a translation.">
			<param name="Scale" type="double" pass="in" description="A scaling factor will be applied to all values in the field." />
			<param name="Offset" type="double" pass="in" description="The offset will be applied to all values in the field after scaling." />
		</method>		

		<method name="AddField" description="Adds another field to the field. Both fields MUST have the same pixel extensions.">
			<param name="OtherField" type="class" class="DiscreteFieldData2D" pass="in" description="Field Instance to add" />
			<param name="Scale" type="double" pass="in" description="A scaling factor will be applied to all values in the other field before adding." />
			<param name="Offset" type="double" pass="in" description="The offset will be applied to all values in the field after scaling." />
		</method>		

		<method name="Duplicate" description="Creates a copy of the field.">
			<param name="NewField" type="class" class="DiscreteFieldData2D" pass="return" description="Scaled Field Instance" />
		</method>		

	</class>

	<class name="DataTableWriteOptions" parent="Base" description="Configurates the writing of data table streams to disk.">
	</class>

	<class name="DataTableCSVWriteOptions" parent="Base" description="Configurates the writing of data table streams to disk as CSV.">

		<method name="GetSeparator" description="Returns the desired separator of the CSV file. Default is semicolon.">
			<param name="Separator" type="string" pass="return" description="Separator to use." />
		</method>

		<method name="SetSeparator" description="Sets the desired separator of the CSV file.">
			<param name="Separator" type="string" pass="in" description="Separator to use. MUST be a single character ASCII string. (ASCII Code 32-127)" />
		</method>

	</class>
	
	<class name="DataTable" parent="Base" description="A in memory data table, streamable for example into a CSV file.">
	
		<method name="AddColumn" description="Adds a column to the data field.">
			<param name="Identifier" type="string" pass="in" description="Identifier of the column. MUST be unique, alphanumeric and not empty." />
			<param name="Description" type="string" pass="in" description="Description of the column." />
			<param name="ColumnType" type="enum" class="DataTableColumnType" pass="in" description="Data type of the column." />
		</method>

		<method name="RemoveColumn" description="Removes a column from the data field. Fails if Column does not exist.">
			<param name="Identifier" type="string" pass="in" description="Identifier of the column." />
		</method>

		<method name="Clear" description="Clears all data from the data table.">
		</method>

		<method name="HasColumn" description="Returns if a column exists in the data field.">
			<param name="Identifier" type="string" pass="in" description="Identifier of the column." />
			<param name="ColumnExists" type="bool" pass="return" description="Returns if the columns exist." />
		</method>
		
		<method name="GetRowCount" description="Returns the current row count.">
			<param name="RowCount" type="uint32" pass="return" description="Number of rows." />
		</method>

		<method name="GetColumnCount" description="Returns the current column count.">
			<param name="ColumnCount" type="uint32" pass="return" description="Number of columns." />
		</method>
		
		<method name="GetColumnIdentifier" description="Returns the identifier of a column. Will fail if Index is out of bounds.">
			<param name="ColumnIndex" type="uint32" pass="in" description="Index of column. 0-based." />
			<param name="Identifier" type="string" pass="return" description="Identifier of the column." />
		</method>

		<method name="GetColumnDescription" description="Returns the description of a column. Will fail if Index is out of bounds.">
			<param name="ColumnIndex" type="uint32" pass="in" description="Index of column. 0-based." />
			<param name="Description" type="string" pass="return" description="Description of the column." />
		</method>

		<method name="GetColumnType" description="Returns the type of a column. Will fail if Index is out of bounds.">
			<param name="ColumnIndex" type="uint32" pass="in" description="Index of column. 0-based." />
			<param name="ColumnType" type="enum" class="DataTableColumnType" pass="return" description="Data type of the column." />
		</method>

		<method name="GetColumnInformation" description="Returns the values of a double column. Will fail if column does not exist or type is not double.">
			<param name="Identifier" type="string" pass="in" description="Identifier of the column." />
			<param name="Description" type="string" pass="out" description="Description of the column." />
			<param name="ColumnType" type="enum" class="DataTableColumnType" pass="out" description="Data type of the column." />
		</method>

		<method name="GetDoubleColumnValues" description="Returns the values of a double column. Will fail if column does not exist or type is not double.">
			<param name="Identifier" type="string" pass="in" description="Identifier of the column." />
			<param name="Values" type="basicarray" class="double" pass="out" description="Value array of a column." />
		</method>

		<method name="GetInt32ColumnValues" description="Returns the double columns. Will fail if column does not exist or type is not int32.">
			<param name="Identifier" type="string" pass="in" description="Identifier of the column." />
			<param name="Values" type="basicarray" class="int32" pass="out" description="Value array of a column." />
		</method>

		<method name="GetInt64ColumnValues" description="Returns the double columns. Will fail if column does not exist or type is not int64.">
			<param name="Identifier" type="string" pass="in" description="Identifier of the column." />
			<param name="Values" type="basicarray" class="int64" pass="out" description="Value array of a column." />
		</method>

		<method name="GetUint32ColumnValues" description="Returns the double columns. Will fail if column does not exist or type is not uint32.">
			<param name="Identifier" type="string" pass="in" description="Identifier of the column." />
			<param name="Values" type="basicarray" class="uint32" pass="out" description="Value array of a column." />
		</method>

		<method name="GetUint64ColumnValues" description="Returns the double columns. Will fail if column does not exist or type is not uint64.">
			<param name="Identifier" type="string" pass="in" description="Identifier of the column." />
			<param name="Values" type="basicarray" class="uint64" pass="out" description="Value array of a column." />
		</method>

		<method name="SetDoubleColumnValues" description="Sets the values of a double column. Will fail if column does not exist or type is not double.">
			<param name="Identifier" type="string" pass="in" description="Identifier of the column." />
			<param name="Values" type="basicarray" class="double" pass="in" description="New Value array of a column. Array length should match RowCount. Values will be filled up with 0, if length is less than RowCount. RowCount will be extended if length is larger than RowCount." />
		</method>

		<method name="SetInt32ColumnValues" description="Sets the double columns. Will fail if column does not exist or type is not int32.">
			<param name="Identifier" type="string" pass="in" description="Identifier of the column." />
			<param name="Values" type="basicarray" class="int32" pass="in" description="New Value array of a column. Array length should match RowCount. Values will be filled up with 0, if length is less than RowCount. RowCount will be extended if length is larger than RowCount." />
		</method>

		<method name="SetInt64ColumnValues" description="Sets the double columns. Will fail if column does not exist or type is not int64.">
			<param name="Identifier" type="string" pass="in" description="Identifier of the column." />
			<param name="Values" type="basicarray" class="int64" pass="in" description="New Value array of a column. Array length should match RowCount. Values will be filled up with 0, if length is less than RowCount. RowCount will be extended if length is larger than RowCount." />
		</method>

		<method name="SetUint32ColumnValues" description="Sets the double columns. Will fail if column does not exist or type is not uint32.">
			<param name="Identifier" type="string" pass="in" description="Identifier of the column." />
			<param name="Values" type="basicarray" class="uint32" pass="in" description="New Value array of a column. Array length should match RowCount. Values will be filled up with 0, if length is less than RowCount. RowCount will be extended if length is larger than RowCount." />
		</method>

		<method name="SetUint64ColumnValues" description="Sets the double columns. Will fail if column does not exist or type is not uint64.">
			<param name="Identifier" type="string" pass="in" description="Identifier of the column." />
			<param name="Values" type="basicarray" class="uint64" pass="in" description="New Value array of a column. Array length should match RowCount. Values will be filled up with 0, if length is less than RowCount. RowCount will be extended if length is larger than RowCount." />
		</method>
		
		<method name="CreateWriteOptions" description="Creates a Write Option.">
			<param name="Options" type="class" class="DataTableWriteOptions" pass="return" description="Writer Options Instance to pass on to WriteDataToStream." />
		</method>

		<method name="CreateCSVWriteOptions" description="Creates a CSV Write Option.">
			<param name="Options" type="class" class="DataTableCSVWriteOptions" pass="return" description="Writer Options Instance to pass on to WriteCSVToStream." />
		</method>

		<method name="WriteCSVToStream" description="Writes the data as CSV to a temporary stream.">
			<param name="Writer" type="class" class="TempStreamWriter" pass="in" description="Stream writer to use." />
			<param name="Options" type="optionalclass" class="DataTableCSVWriteOptions" pass="in" description="Optional CSV writer options to use." />
		</method>
		
		<method name="WriteDataToStream" description="Writes the data as binary to a temporary stream.">
			<param name="Writer" type="class" class="TempStreamWriter" pass="in" description="Stream writer instance to use." />
			<param name="Options" type="optionalclass" class="DataTableWriteOptions" pass="in" description="Optional writer options to use." />
		</method>

		<method name="LoadFromStream" description="Loads the data table from a stream. Clears all existing data from the data table.">
			<param name="Stream" type="class" class="StreamReader" pass="in" description="Stream read instance to read from." />
		</method>
		
	</class>

	<class name="DataSeries" parent="Base" description="A data series of points.">
	
		<method name="GetName" description="Returns the name of the data series.">
			<param name="Name" type="string" pass="return" description="Returns the name." />
		</method>
	
		<method name="GetUUID" description="Returns the UUID of the data series.">
			<param name="UUID" type="string" pass="return" description="Returns uuid." />
		</method>

		<method name="Clear" description="Clears all entries of the data series.">
		</method>

		<method name="IsEmpty" description="Checks if data series is empty.">
			<param name="EmptyValue" type="bool" pass="return" description="Returns true if data series has no entries." />
		</method>

		<method name="GetMinimum" description="Returns the minimum time stamp of the data series. Fails if data series is empty.">
			<param name="MinimumInMicroSeconds" type="uint64" pass="return" description="Minimum time stamp in microseconds." />
		</method>
		
		<method name="GetMaximum" description="Returns the maximum time stamp of the data series. Fails if data series is empty.">
			<param name="MaximumInMicroSeconds" type="uint64" pass="return" description="Maximum time stamp in microseconds." />
		</method>
		
		<method name="GetAllEntries" description="Returns all entries of the data series. Fails if data series is empty.">
			<param name="EntryArray" type="structarray" class="TimeStreamEntry" pass="out" description="Data series entries will be written in this array." />
		</method>
		
		<method name="SetAllEntries" description="Sets all entries of the data series. The time stamp array MUST be sorted in incrementing order, with no two time stamps being equal.">
			<param name="EntryArray" type="structarray" class="TimeStreamEntry" pass="in" description="Data series entries to use." />
		</method>
		
		<method name="SampleJournalVariable" description="Samples a journal variable.">
			<param name="JournalVariable" type="class" class="JournalVariable" pass="in" description="Journal variable to sample." />
			<param name="NumberOfSamples" type="uint32" pass="in" description="Number of samples to generate." />
			<param name="MovingAverageDelta" type="double" pass="in" description="Each sample will be averaged from minus MovingAverageDelta to plus MovingAverageDelta." />
		</method>
		
		<method name="GetVersion" description="Returns the incrementing change version of the data series.">
			<param name="Version" type="uint32" pass="return" description="Version number. Increases with every change to the data." />
		</method>

		<method name="IncreaseVersion" description="Increases the version number of the data series.">
		</method>

		
	</class>




	<class name="DateTimeDifference" parent="Base" description="Represents a duration between two DateTimeStamps. Accuracy is milliseconds. Can contain durations up to 1000000 years.">

		<method name="ToMicroseconds" description = "Returns the duration in Microseconds.">
			<param name="Microseconds" type="uint64" pass="return" description="The duration in Microseconds." />
		</method>

		<method name="ToMilliseconds" description = "Returns the duration in Milliseconds. Partial milliseconds are rounded down.">
			<param name="Milliseconds" type="uint64" pass="return" description="The duration in Milliseconds." />
		</method>

		<method name="ToSeconds" description = "Returns the duration in Seconds. Partial seconds are rounded down.">
			<param name="Seconds" type="uint64" pass="return" description="The duration in seconds." />
		</method>

		<method name="ToMinutes" description = "Returns the duration in Seconds. Partial minutes are rounded down.">
			<param name="Minutes" type="uint64" pass="return" description="The duration in seconds." />
		</method>

		<method name="ToHours" description = "Returns the duration in Hours. Partial hours are rounded down.">
			<param name="Hours" type="uint64" pass="return" description="The duration in hours." />
		</method>

		<method name="ToDays" description = "Returns the duration in Days. Partial days are rounded down.">
			<param name="Days" type="uint64" pass="return" description="The duration in days." />
		</method>

		<method name="RoundDownToDay" description = "Rounds down the duration to the full day.">
		</method>

		<method name="RoundDownToHour" description = "Rounds down the duration to the full hour.">
		</method>

		<method name="RoundDownToMinute" description = "Rounds down the duration to the full minute.">
		</method>

		<method name="RoundDownToSeconds" description = "Rounds down the duration to the full second.">
		</method>

		<method name="RoundDownToMilliseconds" description = "Rounds down the duration to the full millisecond.">
		</method>

		<method name="RoundUpToDay" description = "Rounds up the duration to the full day.">
		</method>

		<method name="RoundUpToHour" description = "Rounds up the duration to the full hour.">
		</method>

		<method name="RoundUpToMinute" description = "Rounds up the duration to the full minute.">
		</method>

		<method name="RoundUpToSeconds" description = "Rounds up the duration to the full second.">
		</method>

		<method name="RoundupToMilliseconds" description = "Rounds up the duration to the full millisecond.">
		</method>

	</class>


	<class name="DateTime" parent="Base" description="Represents a date and time in UTC time zone. Must be after first of January 1900. Accuracy is Microseconds.">
	
		<method name="ToMicrosecondsSince1970" description = "Returns the maximum accuracy date time.">
			<param name="MicrosecondsSince1970" type="uint64" pass="return" description="Returns the date in Microseconds since midnight first of January 1970." />
		</method>
		
		<method name="ToUnixTimestamp" description = "Returns the unix time stamp of the date time">
			<param name="SecondsSince1970" type="uint64" pass="return" description="Returns the date in seconds since midnight the first of January 1970. Rounds down the value if microseconds are present." />
		</method>
		
		<method name="ToUTCDateTime" description = "Returns the Timestamp in ISO8601 UTC format. Rounded down to Second Accuracy.">
			<param name="UTCDateTime" type="string" pass="return" description="The time stamp in ISO8601 format. Rounds down the value if microseconds are present. One example is 2024-03-27T15:21:46Z UTC" />
		</method>

		<method name="ToUTCDateTimeInMilliseconds" description = "Returns the Timestamp in ISO8601 UTC format. Rounded down to Millisecond Accuracy.">
			<param name="UTCDateTime" type="string" pass="return" description="The time stamp in ISO8601 format. Rounds down the value if microseconds are present. One example is 2024-03-27T15:21:46.123Z UTC" />
		</method>

		<method name="ToUTCDateTimeInMicroseconds" description = "Returns the Timestamp in ISO8601 UTC format. Returns the string in full microsecond accuracy.">
			<param name="UTCDateTime" type="string" pass="return" description="The time stamp in ISO8601 format. One example is 2024-03-27T15:21:46.123456Z UTC" />
		</method>

		<method name="GetDate" description = "Returns the date information.">
			<param name="Year" type="uint32" pass="out" description="Year of the date." />
			<param name="Month" type="uint32" pass="out" description="Month of the date." />
			<param name="Day" type="uint32" pass="out" description="Day of the date." />
		</method>
		
		<method name="GetTime" description = "Returns the time information.">
			<param name="Hour" type="uint32" pass="out" description="Hour of the time. Returns 0-23." />
			<param name="Minute" type="uint32" pass="out" description="Minute of the time. Returns 0-59." />
			<param name="Second" type="uint32" pass="out" description="Seconds of the time. Returns 0-59." />
			<param name="Microsecond" type="uint32" pass="out" description="Partial microseconds of the time. Returns 0-999999." />
		</method>

		<method name="Duplicate" description = "Duplicates the date time instance.">
			<param name="NewInstance" type="class" class="DateTime" pass="return" description="Returns a copied instance." />
		</method>

		<method name="IsLeapYear" description = "Returns if the year is a leap year.">
			<param name="IsLeapYear" type="bool" pass="return" description="Returns true if the year is a leap year." />
		</method>

		<method name="IsLaterThan" description = "Checks if this timestamp is later than another timestamp.">
			<param name="OtherTimeStamp" type="class" class="DateTime" pass="in" description="Instance to check against." />
			<param name="IsLater" type="bool" pass="return" description="Returns true if the instance is later than OtherTimeStamp." />
		</method>

		<method name="IsEarlierThan" description = "Checks if this timestamp is earlier than another timestamp.">
			<param name="OtherTimeStamp" type="class" class="DateTime" pass="in" description="Instance to check against." />
			<param name="IsEarlier" type="bool" pass="return" description="Returns true if the instance is earlier than OtherTimeStamp." />
		</method>

		<method name="IsEqualTo" description = "Checks if this timestamp is equal to another timestamp.">
			<param name="OtherTimeStamp" type="class" class="DateTime" pass="in" description="Instance to check against." />
			<param name="IsEqual" type="bool" pass="return" description="Returns true if the instance is equal to the OtherTimeStamp." />
		</method>

		<method name="GetTimeDifference" description = "Returns the time difference to another time stamp as positive duration value.">
			<param name="OtherTimeStamp" type="class" class="DateTime" pass="in" description="Instance to check against." />
			<param name="Difference" type="class" class="DateTimeDifference" pass="return" description="Difference between the two time stamps. Value will always be positive. Use IsEarlierThan or IsLaterThan to figure out the time ordering." />
		</method>

		<method name="AddDuration" description = "Shifts the date time by a duration. Fails if the shift will make it move outside of the year 1900 or 1000000.">
			<param name="Duration" type="class" class="DateTimeDifference" pass="in" description="Duration to add to the time stamp." />
		</method>

		<method name="SubtractDuration" description = "Shifts the date time by a duration. Fails if the shift will make it move outside of the year 1900 or 1000000.">
			<param name="Duration" type="class" class="DateTimeDifference" pass="in" description="Duration to subtract from the time stamp." />
		</method>

		<method name="ShiftByYears" description = "Shifts the date time by years. Takes leap years into account. Fails if the shift will make it move outside of the year 1900 or 1000000.">
			<param name="DeltaYears" type="int64" pass="in" description="Years to shift the date time stamp." />
		</method>

		<method name="ShiftByDays" description = "Shifts the date time by days. Fails if the shift will make it move outside of the year 1900 or 1000000.">
			<param name="DeltaDays" type="int64" pass="in" description="Days to shift the date time stamp." />
		</method>

		<method name="ShiftByHours" description = "Shifts the date time by hours. Fails if the shift will make it move outside of the year 1900 or 1000000.">
			<param name="DeltaHours" type="int64" pass="in" description="Hours to shift the date time stamp." />
		</method>

		<method name="ShiftByMinutes" description = "Shifts the date time by minutes. Fails if the shift will make it move outside of the year 1900 or 1000000.">
			<param name="DeltaMinutes" type="int64" pass="in" description="Minutes to shift the date time stamp." />
		</method>

		<method name="ShiftBySeconds" description = "Shifts the date time by seconds. Fails if the shift will make it move outside of the year 1900 or 1000000.">
			<param name="DeltaSeconds" type="int64" pass="in" description="Seconds to shift the date time stamp." />
		</method>

		<method name="ShiftByMilliseconds" description = "Shifts the date time by milliseconds. Fails if the shift will make it move outside of the year 1900 or 1000000.">
			<param name="DeltaMilliseconds" type="int64" pass="in" description="Milliseconds to shift the date time stamp." />
		</method>
		
		<method name="ShiftByMicroseconds" description = "Shifts the date time by microseconds. Fails if the shift will make it move outside of the year 1900 or 1000000.">
			<param name="DeltaMicroseconds" type="int64" pass="in" description="Microseconds to shift the date time stamp." />
		</method>

		<method name="RoundDownToYear" description = "Rounds down the timestamp to the start of the year. Takes leap years into account.">
		</method>

		<method name="RoundDownToMonth" description = "Rounds down the timestamp to the start of the month. Takes leap years into account.">
		</method>

		<method name="RoundDownToDay" description = "Rounds down the timestamp to the full day.">
		</method>

		<method name="RoundDownToHour" description = "Rounds down the timestamp to the full hour.">
		</method>

		<method name="RoundDownToMinute" description = "Rounds down the timestamp to the full minute.">
		</method>

		<method name="RoundDownToSeconds" description = "Rounds down the timestamp to the full second.">
		</method>

		<method name="RoundDownToMilliseconds" description = "Rounds down the timestamp to the full millisecond.">
		</method>
				
		<method name="RoundUpToYear" description = "Rounds up the timestamp to the start of the year. Takes leap years into account.">
		</method>

		<method name="RoundUpToMonth" description = "Rounds up the timestamp to the start of the month. Takes leap years into account.">
		</method>

		<method name="RoundUpToDay" description = "Rounds up the timestamp to the full day.">
		</method>

		<method name="RoundUpToHour" description = "Rounds up the timestamp to the full hour.">
		</method>

		<method name="RoundUpToMinute" description = "Rounds up the timestamp to the full minute.">
		</method>

		<method name="RoundUpToSeconds" description = "Rounds up the timestamp to the full second.">
		</method>

		<method name="RoundUpToMilliseconds" description = "Rounds up the timestamp to the full millisecond.">
		</method>

	</class>



	<class name="MeshObject" parent="Base" description="A mesh object is an in memory representation of a 3D mesh model.">
	
		<method name="GetName" description="Returns the name of the Mesh Object.">
			<param name="Name" type="string" pass="return" description="Returns the name of the mesh object." />
		</method>
	
		<method name="GetUUID" description="Returns the UUID of the mesh object.">
			<param name="UUID" type="string" pass="return" description="Returns mesh uuid." />
		</method>

		<method name="GetTriangleCount" description="Returns the number of triangles in the mesh.">
			<param name="TriangleCount" type="uint32" pass="return" description="Number of triangles." />
		</method>
	
		<method name="GetVertexCount" description="Returns the number of vertices in the mesh.">
			<param name="VertexCount" type="uint32" pass="return" description="Number of vertices." />
		</method>

		<method name="IsManifold" description="Checks if the mesh topology is closed and every edge has two adjacent faces.">
			<param name="ManifoldResult" type="bool" pass="return" description="Returns true if the mesh is manifold." />
		</method>

		<method name="IsOriented" description="Checks if the mesh topology is oriented, so no Mobius strip or Klein bottle for example.">
			<param name="OrientedResult" type="bool" pass="return" description="Returns true if the mesh is oriented." />
		</method>

		<method name="IsWatertight" description="Checks if the mesh topology is oriented and manifold, e.g is describing a 3D volume.">
			<param name="WatertightResult" type="bool" pass="return" description="Returns true if the mesh is watertight." />
		</method>

		<method name="GetMaxVertexID" description="Returns the maximum vertex ID occuring in the mesh.">
			<param name="MaxVertexID" type="uint32" pass="return" description="All vertices will have an ID smaller or equal this ID." />
		</method>

		<method name="VertexExists" description="Returns if a vertex with an ID exists.">
			<param name="VertexID" type="uint32" pass="in" description="Vertex ID to check." />
			<param name="VertexExists" type="bool" pass="return" description="Returns true if the vertex exists." />
		</method>

		<method name="GetVertex" description="Returns position of a vertex. Will return 0 if vertex does not exist.">
			<param name="VertexID" type="uint32" pass="in" description="Vertex ID to retrieve." />
			<param name="X" type="double" pass="out" description="Returns the X coordinate of the vertex. Returns 0 if vertex does not exist." />
			<param name="Y" type="double" pass="out" description="Returns the Y coordinate of the vertex. Returns 0 if vertex does not exist." />
			<param name="Z" type="double" pass="out" description="Returns the Z coordinate of the vertex. Returns 0 if vertex does not exist." />
			<param name="VertexExists" type="bool" pass="return" description="Returns true if the vertex exists." />
		</method>

		<method name="GetVertexIDs" description="Returns all IDs of the vertices. Ordered sequentially.">
			<param name="VertexIDs" type="basicarray" class="uint32" pass="out" description="Vertex ID array." />
		</method>

		<method name="GetAllVertices" description="Returns all the vertex information. Ordered sequentially by ID.">
			<param name="Vertices" type="structarray" class="MeshVertex3D" pass="out" description="Vertex array." />
		</method>

		<method name="GetMaxTriangleID" description="Returns the maximum triangle ID occuring in the mesh.">
			<param name="MaxTriangleID" type="uint32" pass="return" description="All triangles will have an ID smaller or equal this ID." />
		</method>

		<method name="TriangeExists" description="Returns if a triangle with an ID exists.">
			<param name="TriangleID" type="uint32" pass="in" description="Triangle ID to check." />
			<param name="TriangleExists" type="bool" pass="return" description="Returns true if the triangle exists." />
		</method>

		<method name="GetTriangle" description="Returns vertex IDs of a triangle. Will return 0 if triangle does not exist.">
			<param name="TriangleID" type="uint32" pass="in" description="Triangle ID to retrieve." />
			<param name="Vertex1ID" type="uint32" pass="out" description="Returns the vertex ID of the first corner. Returns 0 if triangle does not exist." />
			<param name="Vertex2ID" type="uint32" pass="out" description="Returns the vertex ID of the second corner. Returns 0 if triangle does not exist." />
			<param name="Vertex3ID" type="uint32" pass="out" description="Returns the vertex ID of the third corner. Returns 0 if triangle does not exist." />
			<param name="VertexExists" type="bool" pass="return" description="Returns true if the triangle exists." />
		</method>

		<method name="GetTriangleIDs" description="Returns all IDs of the triangles. Ordered sequentially.">
			<param name="TriangleIDs" type="basicarray" class="uint32" pass="out" description="Triangle ID array." />
		</method>

		<method name="GetAllTriangles" description="Returns all the triangle information. Ordered sequentially by ID.">
			<param name="Triangles" type="structarray" class="MeshTriangle3D" pass="out" description="Triangle array." />
		</method>

		<method name="IsPersistent" description="Returns if the mesh object is persisted in memory.">
			<param name="Value" type="bool" pass="return" description="If true, the mesh object is persisted in memory and can be retrieved by FindPersistentMeshObject." />
		</method>

		<method name="MakePersistent" description="Makes the mesh persistent in memory. It will not be released when the MeshObject instances is released. Should be handled with great care!">
			<param name="BoundToLoginSession" type="bool" pass="in" description="If true, the mesh will be freed once the client login session expires." />
			<param name="PersistentMesh" type="class" class="PersistentMeshObject" pass="return" description="Returns a persistent instance to the same mesh data." />
		</method>

	</class>

	<class name="PersistentMeshObject" parent="MeshObject" description="A persistent mesh object is a globally stored object that stays in memory. Should be handled with great care!">

		<method name="IsBoundToLoginSession" description="Returns if the mesh object is bound to a specific login session.">
			<param name="Value" type="bool" pass="return" description="If true, the mesh will be freed once the client login session expires." />
		</method>

	</class>


	<class name="ModelDataMeshInstance" parent="Base" description="An instance of a 3D Model Data.">
	
		<method name="GetName" description="Returns Mesh Name.">
			<param name="Name" type="string" pass="return" description="Returns mesh instance name." />
		</method>
	
		<method name="GetUUID" description="Returns Mesh UUID.">
			<param name="UUID" type="string" pass="return" description="Returns mesh instance uuid." />
		</method>

		<method name="GetLocalTransform" description="Returns Local Transform of the Mesh.">
			<param name="LocalTransform" type="struct" class="ModelDataTransform" pass="return" description="Returns the transform matrix of the mesh in its component coordinate system." />		
		</method>

		<method name="GetAbsoluteTransform" description="Returns Transform of the Mesh.">
			<param name="AbsoluteTransform" type="struct" class="ModelDataTransform" pass="return" description="Returns the transform matrix of the mesh in the global world coordinate system." />		
		</method>

		<method name="CreateCopiedMesh" description="Loads a copy of the mesh geometry into memory. Might be inefficient to use for many identical copies of the mesh in the scene.">
			<param name="MeshObjectCopy" type="class" class="MeshObject" pass="return" description="Returns the mesh object instance." />		
		</method>

		<method name="CreatePersistentMesh" description="Creates a persistent mesh of the geometry. Will not create a duplicate if the instance was already persisted before. The release of the memory should be handled with great care! ">
			<param name="BoundToLoginSession" type="bool" pass="in" description="If true, the mesh will be freed once the client login session expires." />
			<param name="PersistentMesh" type="class" class="PersistentMeshObject" pass="return" description="Returns a persistent instance to the same mesh data." />
		</method>

	</class>


	<class name="ModelDataComponentInstance" parent="Base" description="A Component of a 3D Model Data.">
	
		<method name="GetName" description="Returns Component Name.">
			<param name="Name" type="string" pass="return" description="Returns toolpath part name." />
		</method>
	
		<method name="GetUUID" description="Returns Component UUID.">
			<param name="UUID" type="string" pass="return" description="Returns toolpath part uuid." />
		</method>

		<method name="GetLocalTransform" description="Returns Local Transform of the Mesh.">
			<param name="LocalTransform" type="struct" class="ModelDataTransform" pass="return" description="Returns the transform matrix of the mesh in its component coordinate system." />		
		</method>

		<method name="GetAbsoluteTransform" description="Returns Transform of the Mesh.">
			<param name="AbsoluteTransform" type="struct" class="ModelDataTransform" pass="return" description="Returns the transform matrix of the mesh in the global world coordinate system." />		
		</method>

		<method name="GetSolidCount" description="Returns the number of solid meshes in the component.">
			<param name="Count" type="uint32" pass="return" description="Model Count." />
		</method>

		<method name="GetSolidMesh" description="Returns a solid mesh of the component.">
			<param name="Index" type="uint32" pass="in" description="Index of Solid Mesh. MUST be between 0 and SolidCount - 1." />
			<param name="MeshInstance" type="class" class="ModelDataMeshInstance" pass="return" description="Solid Mesh. MUST be between 0 and ModelCount - 1." />
		</method>

		<method name="GetSupportCount" description="Returns the number of support meshes in the component.">
			<param name="Count" type="uint32" pass="return" description="Support Count." />
		</method>

		<method name="GetSupportMesh" description="Returns a support mesh of the component.">
			<param name="Index" type="uint32" pass="in" description="Index of Support Mesh. MUST be between 0 and SupportCount - 1." />
			<param name="MeshInstance" type="class" class="ModelDataMeshInstance" pass="return" description="Support Mesh. MUST be between 0 and ModelCount - 1." />
		</method>

		<method name="GetSubComponentCount" description="Returns the number of subcomponents of the component.">
			<param name="Count" type="uint32" pass="return" description="Subcomponent Count." />
		</method>

		<method name="GetSubComponent" description="Returns a subcomponent of the component.">
			<param name="Index" type="uint32" pass="in" description="Index of Subcomponent. MUST be between 0 and SubComponentCount - 1." />
			<param name="SubComponentInstance" type="class" class="ModelDataComponentInstance" pass="return" description="SubComponent. MUST be between 0 and ModelCount - 1." />
		</method>

	</class>


	<class name="MeshSceneItem" parent="Base" description="A class for handling a 3D Scene Item. A scene refers to instances of persistent meshes that can be displayed.">

		<method name="GetItemUUID" description="Returns the UUID of the scene item.">
			<param name="UUID" type="string" pass="return" description="Returns scene item uuid." />
		</method>	

		<method name="GetSceneUUID" description="Returns the UUID of the scene.">
			<param name="UUID" type="string" pass="return" description="Returns scene uuid." />
		</method>	

		<method name="GetTransform" description="Returns the transform of the scene item.">
			<param name="AbsoluteTransform" type="struct" class="ModelDataTransform" pass="return" description="Returns the transform matrix of the mesh in the global world coordinate system." />		
		</method>	

		<method name="UpdateTransform" description="Updates the transform of the scene item.">
			<param name="AbsoluteTransform" type="struct" class="ModelDataTransform" pass="in" description="The new transform matrix of the mesh in the global world coordinate system." />		
		</method>	

		<method name="GetMeshObject" description="Returns persistent mesh object.">
			<param name="PersistentMesh" type="class" class="PersistentMeshObject" pass="return" description="Returns a persistent mesh object of this scene." />
		</method>

		<method name="ReferenceIsValid" description="Returns if the underlying mesh object exists.">
			<param name="IsValid" type="bool" class="PersistentMeshObject" pass="return" description="Returns a persistent mesh object of this scene." />
		</method>

	</class>



	<class name="MeshScene" parent="Base" description="A class for handling a 3D Scene and displaying it on the user interface. Handle Memory management with care!">
	
		<method name="GetSceneUUID" description="Returns the UUID of the scene.">
			<param name="UUID" type="string" pass="return" description="Returns scene uuid." />
		</method>	

		<method name="IsBoundToLoginSession" description="Returns if the scene object is bound to a specific login session.">
			<param name="Value" type="bool" pass="return" description="If true, the scene will be freed once the client login session expires." />
		</method>

		<method name="AddSceneItem" description="Adds a persistent mesh to the scene.">
			<param name="Mesh" type="class" class="PersistentMeshObject" pass="in" description="Mesh to add to the scene." />
			<param name="AbsoluteTransform" type="struct" class="ModelDataTransform" pass="in" description="Transform matrix of the mesh in the global world coordinate system." />		
			<param name="SceneItem" type="class" class="MeshSceneItem" pass="return" description="The returned scene item." />
		
		</method>	

		<method name="AddModelDataMeshAsSceneItem" description="Adds an instance from a ModelData component. Reuses underlying mesh data, if mesh has been persisted already. Registers new Persistent Mesh if necessary.">
			<param name="ModelDataMesh" type="class" class="ModelDataMeshInstance" pass="in" description="Adds a mesh to the scene." />
			<param name="SceneItem" type="class" class="MeshSceneItem" pass="return" description="The returned scene item." />
		</method>	

		<method name="GetSceneItemCount" description="Returns the number of scene items.">
			<param name="Count" type="uint32" pass="return" description="Returns the number of scene items." />
		</method>	

		<method name="GetSceneItem" description="Returns a scene item by index.">
			<param name="Index" type="uint32" pass="in" description="Index to retrieve. MUST be between 0 and SceneItemCount - 1" />
			<param name="SceneItem" type="class" class="MeshSceneItem" pass="return" description="The returned scene item." />
		</method>	

		<method name="FindSceneItem" description="Finds a scene item by UUID.">
			<param name="UUID" type="string" pass="in" description="UUID to retrieve." />
			<param name="MustExist" type="bool" pass="in" description="If true, the call fails, if the UUID does not exist." />
			<param name="SceneItem" type="class" class="MeshSceneItem" pass="return" description="The returned scene item. NULL, if MustExist is false and UUID does not exist." />
		</method>	

		<method name="HasSceneItem" description="Checks if a scene item exists.">
			<param name="UUID" type="string" pass="in" description="UUID to retrieve." />
			<param name="SceneItemExists" type="bool" pass="return" description="Returns true, if scene item UUID exists." />
		</method>	

		<method name="RemoveSceneItem" description="Removes a scene item from the scene.">
			<param name="SceneItem" type="class" class="MeshSceneItem" pass="in" description="Scene Item to remove." />
		</method>	

	</class>


	<class name="SceneHandler" parent="Base" description="Handler class for managing 3D Scenes. Handle Memory management with care!">

		<method name="MeshIsPersistent" description="Checks if a mesh uuid is registered.">
			<param name="MeshUUID" type="string" pass="in" description="Mesh UUID to load." />
			<param name="MeshIsRegistered" type="bool" pass="return" description="Flag is registered." />
		</method>	

		<method name="FindPersistentMesh" description="Finds a registered mesh by its UUID. Fails if mesh UUID is not registered.">
			<param name="MeshUUID" type="string" pass="in" description="Mesh UUID to load." />
			<param name="MeshObjectInstance" type="class" class="PersistentMeshObject" pass="return" description="Mesh Object instance." />
		</method>	

		<method name="CreateEmptyMeshScene" description="Creates an empty mesh scene object.">
			<param name="BoundToLoginSession" type="bool" pass="in" description="Scene shall be freed when the current login session expires. Parameter is ignored, if not executed in a UIEnvironment context." />
			<param name="SceneInstance" type="class" class="MeshScene" pass="return" description="Returns and register a scene instance." />		
		</method>	

		<method name="ReleaseMeshScene" description="Removes a mesh scene and removes all memory.">
			<param name="SceneInstance" type="class" class="MeshScene" pass="in" description="Returns and register a scene instance." />		
		</method>	

		<method name="Load3MFFromResource" description="Loads a 3MF Resource into memory.">
			<param name="ResourceName" type="string" pass="in" description="Resource name to load." />
			<param name="ModelData" type="class" class="ModelDataComponentInstance" pass="return" description="Contains the component hierarchy of the 3MF mesh. Memory will be freed once this component instance is freed." />
		</method>

		<method name="Load3MFFromMemory" description="Loads a 3MF from memory.">
			<param name="Data" type="basicarray" class="uint8" pass="in" description="Binary data to load." />
			<param name="ModelData" type="class" class="ModelDataComponentInstance" pass="return" description="Contains the component hierarchy of the 3MF mesh. Memory will be freed once this component instance is freed." />
		</method>

		<method name="Load3MFFromStream" description="Loads a 3MF from a StreamReader.">
			<param name="ReaderInstance" type="class" class="StreamReader" pass="in" description="Stream reader instance." />
			<param name="ModelData" type="class" class="ModelDataComponentInstance" pass="return" description="Contains the component hierarchy of the 3MF mesh. Memory will be freed once this component instance is freed." />
		</method>
		
	</class>
				



	<class name="ToolpathPart" parent="Base">
	
		<method name="GetName" description="Returns Part Name.">
			<param name="Name" type="string" pass="return" description="Returns toolpath part name." />
		</method>
	
		<method name="GetUUID" description="Returns Part UUID.">
			<param name="UUID" type="string" pass="return" description="Returns toolpath part uuid." />
		</method>

		<method name="GetRootComponent" description="Returns the Root Component of the part.">
			<param name="RootComponent" type="class" class="ModelDataComponentInstance" pass="return" description="Returns root component instance." />
		</method>
	
	</class>


	<class name="ToolpathLayer" parent="Base">
	  
		<method name="GetLayerDataUUID" description="Retrieves the layerdata's uuid">
			<param name="UUID" type="string" pass="return" description="Returns the uuid value." />
		</method>
		
		<method name="GetSegmentCount" description="Retrieves the count of segments.">
			<param name="Count" type="uint32" pass="return" description="Count" />
		</method>
		
		<method name="GetSegmentInfo" description="Retrieves the segment type and point count information .">
			<param name="Index" type="uint32" pass="in" description="Index. Must be between 0 and Count - 1." />
			<param name="Type" type="enum" class="ToolpathSegmentType" pass="out" description="Segment Type" />
			<param name="PointCount" type="uint32" pass="out" description="Point count of segment." />
		</method>

		<method name="GetSegmentType" description="Retrieves the segment type.">
			<param name="Index" type="uint32" pass="in" description="Index. Must be between 0 and Count - 1." />
			<param name="Type" type="enum" class="ToolpathSegmentType" pass="return" description="Segment Type" />
		</method>

		<method name="SegmentIsLoop" description="Returns if segment is a loop.">
			<param name="Index" type="uint32" pass="in" description="Index. Must be between 0 and Count - 1." />
			<param name="IsLoop" type="bool" pass="return" description="Flag if segment is a loop." />
		</method>

		<method name="SegmentIsPolyline" description="Returns if segment is a polyline.">
			<param name="Index" type="uint32" pass="in" description="Index. Must be between 0 and Count - 1." />
			<param name="IsPolyline" type="bool" pass="return" description="Flag if segment is a polyline." />
		</method>

		<method name="SegmentIsHatchSegment" description="Returns if segment is a hatch segment.">
			<param name="Index" type="uint32" pass="in" description="Index. Must be between 0 and Count - 1." />
			<param name="IsHatchSegment" type="bool" pass="return" description="Flag if segment is a hatch segment." />
		</method>
		
		<method name="GetSegmentIntegerAttribute" description="Retrieves the segment integer attribute with the corresponding ID. Fails if attribute does not exist or does have different type.">
			<param name="Index" type="uint32" pass="in" description="Segment Index. Must be between 0 and Count - 1." />
			<param name="AttributeID" type="uint32" pass="in" description="ID of the attribute." />
			<param name="Value" type="int64" pass="return" description="Attribute Value." />
		</method>

		<method name="GetSegmentDoubleAttribute" description="Retrieves the segment double attribute with the corresponding ID. Fails if attribute does not exist or does have different type.">
			<param name="Index" type="uint32" pass="in" description="Segment Index. Must be between 0 and Count - 1." />
			<param name="AttributeID" type="uint32" pass="in" description="ID of the attribute." />
			<param name="Value" type="double" pass="return" description="Attribute Value." />
		</method>

		<method name="HasCustomSegmentAttribute" description="Checks if a segment attribute is registered.">
			<param name="Namespace" type="string" pass="in" description="Namespace of the attribute." />
			<param name="AttributeName" type="string" pass="in" description="Name of the attribute." />
			<param name="ValueExists" type="bool" pass="return" description="Flag if attribute is registered." />
		</method>

		<method name="FindCustomSegmentAttributeID" description="Finds a segment attribute ID. Fails if attribute is not registered.">
			<param name="Namespace" type="string" pass="in" description="Namespace of the attribute." />
			<param name="AttributeName" type="string" pass="in" description="Name of the attribute." />
			<param name="AttributeID" type="uint32" pass="return" description="ID of the attribute." />
		</method>

		<method name="FindCustomSegmentAttributeType" description="Finds a segment attribute type. Fails if attribute is not registered.">
			<param name="Namespace" type="string" pass="in" description="Namespace of the attribute." />
			<param name="AttributeName" type="string" pass="in" description="Name of the attribute." />
			<param name="AttributeType" type="enum" class="ToolpathAttributeType" pass="return" description="Type of the attribute." />
		</method>

		<method name="FindCustomSegmentAttributeInfo" description="Finds a segment attribute ID and type. Fails if attribute is not registered.">
			<param name="Namespace" type="string" pass="in" description="Namespace of the attribute." />
			<param name="AttributeName" type="string" pass="in" description="Name of the attribute." />
			<param name="AttributeID" type="uint32" pass="out" description="ID of the attribute." />
			<param name="AttributeType" type="enum" class="ToolpathAttributeType" pass="out" description="Type of the attribute." />
		</method>

		<method name="GetSegmentPointCount" description="Retrieves the number of points in the segment. For type hatch, the points are taken pairwise.">
			<param name="SegmentIndex" type="uint32" pass="in" description="Index. Must be between 0 and Count - 1." />
			<param name="HatchCount" type="uint32" pass="return" description="Hatch count of segment." />
		</method>
		
		<method name="GetSegmentHatchCount" description="Retrieves the number of hatches in the segment (i.e. PointCount / 2). Returns 0 if segment is not of type hatch.">
			<param name="SegmentIndex" type="uint32" pass="in" description="Index. Must be between 0 and Count - 1." />
			<param name="HatchCount" type="uint32" pass="return" description="Hatch count of segment." />
		</method>
		
		<method name="GetSegmentProfileUUID" description="Retrieves the assigned segment profile uuid.">
			<param name="SegmentIndex" type="uint32" pass="in" description="Index. Must be between 0 and Count - 1." />
			<param name="ProfileUUID" type="string" pass="return" description="Segment Profile UUID" />
		</method>

		<method name="SegmentProfileHasValue" description="Retrieves an assigned profile custom value.">
			<param name="SegmentIndex" type="uint32" pass="in" description="Index. Must be between 0 and Count - 1." />
			<param name="Namespace" type="string" pass="in" description="Namespace to query for." />
			<param name="ValueName" type="string" pass="in" description="Value Name to query for." />
			<param name="HasValue" type="bool" pass="return" description="Returns true if value exist." />
		</method>

		<method name="GetSegmentProfileValue" description="Retrieves an assigned profile custom value. Fails if value does not exist.">
			<param name="SegmentIndex" type="uint32" pass="in" description="Index. Must be between 0 and Count - 1." />
			<param name="Namespace" type="string" pass="in" description="Namespace to query for." />
			<param name="ValueName" type="string" pass="in" description="Value Name to query for." />
			<param name="Value" type="string" pass="return" description="String Value." />
		</method>

		<method name="GetSegmentProfileValueDef" description="Retrieves an assigned profile custom value.">
			<param name="SegmentIndex" type="uint32" pass="in" description="Index. Must be between 0 and Count - 1." />
			<param name="Namespace" type="string" pass="in" description="Namespace to query for." />
			<param name="ValueName" type="string" pass="in" description="Value Name to query for." />
			<param name="DefaultValue" type="string" pass="in" description="Default value if value does not exist." />
			<param name="Value" type="string" pass="return" description="String Value." />
		</method>


		<method name="GetSegmentProfileDoubleValue" description="Retrieves an assigned profile custom double value. Fails if value does not exist or is not a double value.">
			<param name="SegmentIndex" type="uint32" pass="in" description="Index. Must be between 0 and Count - 1." />
			<param name="Namespace" type="string" pass="in" description="Namespace to query for." />
			<param name="ValueName" type="string" pass="in" description="Value Name to query for." />
			<param name="Value" type="double" pass="return" description="Double Value." />
		</method>

		<method name="GetSegmentProfileDoubleValueDef" description="Retrieves an assigned profile custom double value. Fails if value exists but is not a double value.">
			<param name="SegmentIndex" type="uint32" pass="in" description="Index. Must be between 0 and Count - 1." />
			<param name="Namespace" type="string" pass="in" description="Namespace to query for." />
			<param name="ValueName" type="string" pass="in" description="Value Name to query for." />
			<param name="DefaultValue" type="double" pass="in" description="Default value if value does not exist." />
			<param name="Value" type="double" pass="return" description="Double Value." />
		</method>

		<method name="GetSegmentProfileIntegerValue" description="Retrieves an assigned profile custom integer value. Fails if value does not exist or is not a integer value.">
			<param name="SegmentIndex" type="uint32" pass="in" description="Index. Must be between 0 and Count - 1." />
			<param name="Namespace" type="string" pass="in" description="Namespace to query for." />
			<param name="ValueName" type="string" pass="in" description="Value Name to query for." />
			<param name="Value" type="int64" pass="return" description="Integer Value." />
		</method>

		<method name="GetSegmentProfileIntegerValueDef" description="Retrieves an assigned profile custom integer value. Fails if value exists but is not a integer value.">
			<param name="SegmentIndex" type="uint32" pass="in" description="Index. Must be between 0 and Count - 1." />
			<param name="Namespace" type="string" pass="in" description="Namespace to query for." />
			<param name="ValueName" type="string" pass="in" description="Value Name to query for." />
			<param name="DefaultValue" type="int64" pass="in" description="Default value if value does not exist." />
			<param name="Value" type="int64" pass="return" description="Integer Value." />
		</method>


		<method name="GetSegmentProfileBoolValue" description="Retrieves an assigned profile custom boolean value. A Boolean value is either an integer value, or strings of the form true or false (case insensitive). Fails if value does not exist or is not a bool value.">
			<param name="SegmentIndex" type="uint32" pass="in" description="Index. Must be between 0 and Count - 1." />
			<param name="Namespace" type="string" pass="in" description="Namespace to query for." />
			<param name="ValueName" type="string" pass="in" description="Value Name to query for." />
			<param name="Value" type="bool" pass="return" description="Boolean Value." />
		</method>

		<method name="GetSegmentProfileBoolValueDef" description="Retrieves an assigned profile custom boolean value. A Boolean value is either an integer value, or strings of the form true or false (case insensitive). Fails if value exists but is not a bool value.">
			<param name="SegmentIndex" type="uint32" pass="in" description="Index. Must be between 0 and Count - 1." />
			<param name="Namespace" type="string" pass="in" description="Namespace to query for." />
			<param name="ValueName" type="string" pass="in" description="Value Name to query for." />
			<param name="DefaultValue" type="bool" pass="in" description="Default value if value does not exist." />
			<param name="Value" type="bool" pass="return" description="Boolean Value." />
		</method>

		<method name="GetSegmentProfileTypedValue" description="Retrieves an assigned profile value of a standard type. Fails if value does not exist or is not a double value.">
			<param name="SegmentIndex" type="uint32" pass="in" description="Index. Must be between 0 and Count - 1." />
			<param name="ValueType" type="enum" class="ToolpathProfileValueType" pass="in" description="Enum to query for. MUST NOT be custom." />
			<param name="Value" type="double" pass="return" description="Double Value" />
		</method>

		<method name="GetSegmentProfileTypedValueDef" description="Retrieves an assigned profile value of a standard type. Fails if value exists but is not a double value.">
			<param name="SegmentIndex" type="uint32" pass="in" description="Index. Must be between 0 and Count - 1." />
			<param name="ValueType" type="enum" class="ToolpathProfileValueType" pass="in" description="Enum to query for. MUST NOT be custom." />
			<param name="DefaultValue" type="double" pass="in" description="Default value if value does not exist." />
			<param name="Value" type="double" pass="return" description="Double Value" />
		</method>
		
		<method name="GetSegmentPartUUID" description="Retrieves the assigned segment part uuid.">
			<param name="SegmentIndex" type="uint32" pass="in" description="Index. Must be between 0 and Count - 1." />
			<param name="PartUUID" type="string" pass="return" description="Segment Part UUID" />
		</method>

		<method name="GetSegmentLocalPartID" description="Retrieves the local segment part id on the layer. ATTENTION: This ID is only unique within the layer and there is no guarantee to be globally unique or consistent across layers.">
			<param name="SegmentIndex" type="uint32" pass="in" description="Index. Must be between 0 and Count - 1." />
			<param name="LocalPartID" type="uint32" pass="return" description="Local Part ID of the segment" />
		</method>
	
		<method name="GetSegmentPointData" description="Retrieves the assigned segment point list. For type hatch, the points are taken pairwise.">
			<param name="SegmentIndex" type="uint32" pass="in" description="Index. Must be between 0 and Count - 1." />
			<param name="PointData" type="structarray" class="Position2D" pass="out" description="The point data array. Positions are absolute in units." />
		</method>
		
		<method name="GetSegmentHatchData" description="Retrieves the assigned segment hatch list. Fails if segment type is not hatch.">
			<param name="SegmentIndex" type="uint32" pass="in" description="Index. Must be between 0 and Count - 1." />
			<param name="HatchData" type="structarray" class="Hatch2D" pass="out" description="The hatch data array. Positions are absolute in units." />
		</method>

		<method name="GetSegmentPointDataInMM" description="Retrieves the assigned segment point list. For type hatch, the points are taken pairwise.">
			<param name="SegmentIndex" type="uint32" pass="in" description="Index. Must be between 0 and Count - 1." />
			<param name="PointData" type="structarray" class="FloatPosition2D" pass="out" description="The point data array. Positions are absolute in mm." />
		</method>
		
		<method name="GetSegmentHatchDataInMM" description="Retrieves the assigned segment hatch list. Fails if segment type is not hatch.">
			<param name="SegmentIndex" type="uint32" pass="in" description="Index. Must be between 0 and Count - 1." />
			<param name="HatchData" type="structarray" class="FloatHatch2D" pass="out" description="The hatch data array. Positions are absolute in mm." />
		</method>

		<method name="SegmentHasOverrideFactors" description="Returns if a segment has override factors attached to its points.">
			<param name="SegmentIndex" type="uint32" pass="in" description="Segment Index. Must be between 0 and Count - 1." />
			<param name="OverrideFactor" type="enum" class="ToolpathProfileOverrideFactor" pass="in" description="Which override factor to return (F, G or H)." />
			<param name="HasOverrideFactors" type="bool" pass="return" description="Returns true if the Segment given has an override factor of a certain type." />
		</method>
		
		<method name="GetSegmentPointOverrides" description="Retrieves factor overrides for a specific segment. For type hatch, the points are taken pairwise.">
			<param name="SegmentIndex" type="uint32" pass="in" description="Segment Index. Must be between 0 and Count - 1." />
			<param name="OverrideFactor" type="enum" class="ToolpathProfileOverrideFactor" pass="in" description="Which override factor to return (F, G or H)." />
			<param name="OverrideData" type="basicarray" class="double" pass="out" description="The override factor array. Will return as many override factors as points in the segment." />
		</method>
		
		<method name="GetSegmentHatchOverrides" description="Retrieves factor overrides for a specific segment. Fails if segment type is not hatch.">
			<param name="SegmentIndex" type="uint32" pass="in" description="Segment Index. Must be between 0 and Count - 1." />
			<param name="OverrideFactor" type="enum" class="ToolpathProfileOverrideFactor" pass="in" description="Which override factor to return (F, G or H)." />
			<param name="OverrideData" type="structarray" class="Hatch2DOverrides" pass="out" description="The override factor array. Will return as many override factors as hatches in the segment. Each element contains one factor for the first point or the second point." />
		</method>

		<method name="GetZValue" description="Retrieves the layers Z Value in units.">
			<param name="ZValue" type="int32" pass="return" description="Z Value of the layer in units." />
		</method>

		<method name="GetZValueInMM" description="Retrieves the layers Z Value in mm.">
			<param name="ZValue" type="double" pass="return" description="Z Value of the layer in mm." />
		</method>
		
		<method name="GetUnits" description="Retrieves the toolpath units in mm.">
			<param name="Units" type="double" pass="return" description="Toolpath units." />
		</method>

		<method name="GetMetaDataCount" description="Retrieves the number of metadata nodes in the build file.">
			<param name="MetaDataCount" type="uint32" pass="return" description="Meta Data information." />
		</method>		

		<method name="GetMetaDataInfo" description="Returns the namespace and identifier of the given metadata index.">
			<param name="MetaDataIndex" type="uint32" pass="in" description="Index of metadata to return (0-based)." />
			<param name="Namespace" type="string" pass="out" description="Namespace of the metadata" />
			<param name="Name" type="string" pass="out" description="Name of the metadata" />
		</method>		

		<method name="GetMetaDataContent" description="Returns the metadata XML content of the given metadata index.">
			<param name="MetaDataIndex" type="uint32" pass="in" description="Index of metadata to return (0-based)." />
			<param name="XMLNode" type="class" class="XMLDocumentNode" pass="return" description="XML Metadata Object" />
		</method>		

		<method name="HasUniqueMetaData" description="Checks if a metadata exists in the build file.">
			<param name="Namespace" type="string" pass="in" description="Namespace of the metadata" />
			<param name="Name" type="string" pass="in" description="Name of the metadata" />
			<param name="MetaDataExists" type="bool" pass="return" description="Returns true if metadata exists and is unique." />
		</method>		

		<method name="FindUniqueMetaData" description="Returns the given metadata XML content of the build file. Fails if metadata content does not exist or is not unique.">
			<param name="Namespace" type="string" pass="in" description="Namespace of the metadata" />
			<param name="Name" type="string" pass="in" description="Name of the metadata" />
			<param name="XMLNode" type="class" class="XMLDocumentNode" pass="return" description="XML Metadata Object" />
		</method>		

		<method name="CalculateExtents" description="Calculates the layers extents in units">
			<param name="MinX" type="int32" pass="out" description="Minimal X value of the layer in units." />
			<param name="MinY" type="int32" pass="out" description="Minimal Y value of the layer in units." />
			<param name="MaxX" type="int32" pass="out" description="Maximal X value of the layer in units." />
			<param name="MaxY" type="int32" pass="out" description="Maximal Y value of the layer in units." />
		</method>
		
		<method name="CalculateExtentsInMM" description="Calculates the layers extents in millimeters">
			<param name="MinX" type="double" pass="out" description="Minimal X value of the layer in mm." />
			<param name="MinY" type="double" pass="out" description="Minimal Y value of the layer in mm." />
			<param name="MaxX" type="double" pass="out" description="Maximal X value of the layer in mm." />
			<param name="MaxY" type="double" pass="out" description="Maximal Y value of the layer in mm." />
		</method>
		
	</class>


	<class name="ToolpathAccessor" parent="Base">
	
		<method name="GetStorageUUID" description="Returns Toolpath storage UUID.">
			<param name="StorageUUID" type="string" pass="return" description="Returns toolpath storage uuid." />
		</method>
	
		<method name="GetBuildUUID" description="Returns UUID of the toolpath's build file.">
			<param name="BuildUUID" type="string" pass="return" description="Returns build uuid." />
		</method>

		<method name="GetLayerCount" description="Returns layer count.">
			<param name="LayerCount" type="uint32" pass="return" description="Returns layer count." />
		</method>

		<method name="RegisterCustomSegmentAttribute" description="Registers a new custom segment attribute to be read.">
			<param name="NameSpace" type="string" pass="in" description="Namespace of the custom attribute." />
			<param name="AttributeName" type="string" pass="in" description="Name of the custom attribute." />
			<param name="AttributeType" type="enum" class="ToolpathAttributeType" pass="in" description="Attribute Type." />
		</method>

		<method name="LoadLayer" description="Reads and returns a layer object.">
			<param name="LayerIndex" type="uint32" pass="in" description="Layer Index." />
			<param name="LayerData" type="class" class="ToolpathLayer" pass="return" description="Toolpath layer object." />
		</method>
		
		<method name="GetUnits" description="Retrieves the toolpath units in mm.">
			<param name="Units" type="double" pass="return" description="Toolpath units." />
		</method>

		<method name="GetPartCount" description="Retrieves the number of parts in the toolpath.">
			<param name="PartCount" type="uint32" pass="return" description="Number of parts." />
		</method>

		<method name="GetPart" description="Retrieves the part information of a toolpath.">
			<param name="PartIndex" type="uint32" pass="in" description="Index of part. MUST be between 0 and PartCount-1" />
			<param name="Part" type="class" class="ToolpathPart" pass="return" description="Part Instance" />
		</method>

		<method name="FindPartByUUID" description="Finds the part information of a toolpath.">
			<param name="PartUUID" type="string" pass="in" description="UUID of part." />
			<param name="Part" type="optionalclass" class="ToolpathPart" pass="return" description="Part Instance. Returns null if part does not exist." />
		</method>
		
		<method name="GetBuildHeightInUnits" description="Retrieves the build height in units.">
			<param name="BuildHeight" type="int32" pass="return" description="Build height in units." />
		</method>

		<method name="GetZValueInUnits" description="Retrieves the layers Z Value in units.">
			<param name="LayerIndex" type="uint32" pass="in" description="Layer Index to return." />
			<param name="ZValue" type="int32" pass="return" description="Z Value of the layer in units." />
		</method>		
		
		<method name="GetBuildHeightInMM" description="Retrieves the build height in mm.">
			<param name="BuildHeight" type="double" pass="return" description="Build height in mm." />
		</method>

		<method name="GetZValueInMM" description="Retrieves the layers Z Value in mm.">
			<param name="LayerIndex" type="uint32" pass="in" description="Layer Index to return." />
			<param name="ZValue" type="double" pass="return" description="Z Value of the layer in mm." />
		</method>		

		<method name="GetMetaDataCount" description="Retrieves the number of metadata nodes in the build file.">
			<param name="MetaDataCount" type="uint32" pass="return" description="Meta Data information." />
		</method>		

		<method name="GetMetaDataInfo" description="Returns the namespace and identifier of the given metadata index.">
			<param name="MetaDataIndex" type="uint32" pass="in" description="Index of metadata to return (0-based)." />
			<param name="Namespace" type="string" pass="out" description="Namespace of the metadata" />
			<param name="Name" type="string" pass="out" description="Name of the metadata" />
		</method>		

		<method name="GetMetaDataContent" description="Returns the metadata XML content of the given metadata index.">
			<param name="MetaDataIndex" type="uint32" pass="in" description="Index of metadata to return (0-based)." />
			<param name="XMLNode" type="class" class="XMLDocumentNode" pass="return" description="XML Metadata Object" />
		</method>		

		<method name="HasUniqueMetaData" description="Checks if a metadata exists in the build file.">
			<param name="Namespace" type="string" pass="in" description="Namespace of the metadata" />
			<param name="Name" type="string" pass="in" description="Name of the metadata" />
			<param name="MetaDataExists" type="bool" pass="return" description="Returns true if metadata exists and is unique." />
		</method>		

		<method name="FindUniqueMetaData" description="Returns the given metadata XML content of the build file. Fails if metadata content does not exist or is not unique.">
			<param name="Namespace" type="string" pass="in" description="Namespace of the metadata" />
			<param name="Name" type="string" pass="in" description="Name of the metadata" />
			<param name="XMLNode" type="class" class="XMLDocumentNode" pass="return" description="XML Metadata Object" />
		</method>		


		<method name="HasBinaryMetaData" description="Checks if a binary metadata exists in the build file with a certain path.">
			<param name="Identifier" type="string" pass="in" description="Identifier of the binary metadata" />
			<param name="HasMetaData" type="bool" pass="return" description="Returns if the metadata exists." />
		</method>

		<method name="GetBinaryMetaData" description="Returns a binary metadata of the build file. Fails if binary metadata does not exist.">
			<param name="Identifier" type="string" pass="in" description="Identifier of the binary metadata" />
			<param name="MetaData" type="basicarray" class="uint8" pass="out" description="Returns the content of the binary binary data." />
		</method>
		
	</class>


	<class name="BuildExecution" parent="Base" description="A build execution is a physical run of a build.">

		<method name="GetUUID" description="Returns uuid of the build execution.">
			<param name="ExecutionUUID" type="string" pass="return" description="UUID of the build execution." />
		</method>

		<method name="GetBuildUUID" description="Returns uuid of the build.">
			<param name="BuildUUID" type="string" pass="return" description="UUID of the build." />
		</method>

		<method name="GetBuild" description="Returns the instance of the build.">
			<param name="BuildInstance" type="class" class="Build" pass="return" description="Instance of the build." />
		</method>

		<method name="GetExecutionStatus" description="Returns the status of the execution.">
			<param name="ExecutionStatus" type="enum" class="BuildExecutionStatus" pass="return" description="Status of the build." />
		</method>
		
		<method name="IsInProcess" description="Convenience function for checking the execution status.">
			<param name="IsInProcess" type="bool" pass="return" description="Returns true if the status is InProcess." />
		</method>		

		<method name="IsFinished" description="Convenience function for checking the execution status.">
			<param name="IsInProcess" type="bool" pass="return" description="Returns true if the status is Finished." />
		</method>		

		<method name="IsFailed" description="Convenience function for checking the execution status.">
			<param name="IsInProcess" type="bool" pass="return" description="Returns true if the status is Failed." />
		</method>		
		
		<method name="SetStatusToFinished" description="Sets build execution status to finished. Fails if Build status is not InProcess ">
		</method>
		
		<method name="SetStatusToFailed" description="Sets build execution status to failed. Fails if Build status is not InProcess ">
		</method>
		
		<method name="GetDescription" description="Returns a human readable description of the build execution for display in the User Interface.">
			<param name="Description" type="string" pass="return" description="Description." />
		</method>
		
		<method name="SetDescription" description="Sets a human readable description of the build execution for display in the User Interface. Should not be empty.">
			<param name="Description" type="string" pass="in" description="Description." />
		</method>
		
		<method name="GetJournalUUID" description="Returns the machine journal UUID that this job in executing in.">
			<param name="JournalUUID" type="string" pass="return" description="Journal UUID of build execution." />
		</method>

		<method name="HasAttachedUser" description="Returns if a user is attached to the execution.">
			<param name="UserIsAttached" type="bool" pass="return" description="Flag if a user is attached to the execution." />
		</method>

		<method name="GetUserUUID" description="Returns the user that started this job. Fails if no user is attached to the execution.">
			<param name="UserUUID" type="string" pass="return" description="User who started the job." />
		</method>

		<method name="GetStartTimeStampInMilliseconds" description="Returns the start time stamp of the build execution in the current machine journal.">
			<param name="TimeStampInMilliseconds" type="uint64" pass="return" description="TimeStamp when the build started in Milliseconds." />
		</method>

		<method name="GetStartTimeStampInMicroseconds" description="Returns the start time stamp of the build execution in the current machine journal.">
			<param name="TimeStampInMicroseconds" type="uint64" pass="return" description="TimeStamp when the build started in Microseconds." />
		</method>
		
		<method name="GetEndTimeStampInMilliseconds" description="Returns the end time stamp of the build execution in the current machine journal. Status MUST BE in Finished or Failed to retrieve this value.">
			<param name="TimeStampInMilliseconds" type="uint64" pass="return" description="TimeStamp when the build ended in Milliseconds." />
		</method>

		<method name="GetEndTimeStampInMicroseconds" description="Returns the end time stamp of the build execution in the current machine journal. Status MUST BE in Finished or Failed to retrieve this value.">
			<param name="TimeStampInMicroseconds" type="uint64" pass="return" description="TimeStamp when the build ended in Microseconds." />
		</method>
		
		<method name="GetElapsedTimeInMilliseconds" description="Returns the relative time of the build execution. If status is Finished or Failed, the full duration is returned.">
			<param name="TimeStampInMilliseconds" type="uint64" pass="return" description="Elapsed time in Milliseconds." />
		</method>

		<method name="GetElapsedTimeInMicroseconds" description="Returns the relative time of the build execution. If status is Finished or Failed, the full duration is returned.">
			<param name="TimeStampInMicroseconds" type="uint64" pass="return" description="Elapsed time in Microseconds." />
		</method>

		<method name="HasAttachment" description="Returns if the Execution has an attached data with a certain UUID">
			<param name="DataUUID" type="string" pass="in" description="Data UUID of the attachment to query. " />
			<param name="DataExists" type="bool" pass="return" description="Returns true if the data exists." />
		</method>

		<method name="HasAttachmentIdentifier" description="Returns if the Execution has an attached data with a certain identifier">
			<param name="Identifier" type="string" pass="in" description="Identifier of the attachment to query." />
			<param name="DataExists" type="bool" pass="return" description="Returns true if the data exists." />
		</method>
		
		<method name="AddBinaryData" description="Adds binary data to store with the build execution.">
			<param name="Identifier" type="string" pass="in" description="Unique identifier of the attached data. Fails if ther already exists a binary data with the equal identifier." />
			<param name="Name" type="string" pass="in" description="Name of the attache data" />
			<param name="MIMEType" type="string" pass="in" description="Mime type of the data." />
			<param name="UserUUID" type="string" pass="in" description="User UUID of the user that this data comes from. Empty string means no user attached." />
			<param name="Content" type="basicarray" class="uint8" pass="in" description="Stream content to store" />
			<param name="DataUUID" type="string" pass="return" description="Data UUID of the attachment." />
		</method>
		
		<method name="AttachTempStream" description="Attaches a temp stream to the build execution.">
			<param name="Identifier" type="string" pass="in" description="Unique identifier of the attached data. Fails if ther already exists a binary data with the equal identifier." />
			<param name="Name" type="string" pass="in" description="Name of the attached data" />
			<param name="UserUUID" type="string" pass="in" description="User UUID of the user that this data comes from. Empty string means no user attached." />
			<param name="StreamWriterInstance" type="class" class="BaseTempStreamWriter" pass="in" description="Stream to attach to the build." />
			<param name="DataUUID" type="string" pass="return" description="Data UUID of the attachment." />
		</method>
		
		<method name="LoadStreamByIdentifier" description="Loads stream of the build execution by attachment identifier.">
			<param name="Identifier" type="string" pass="in" description="Unique name of the attachment. Fails if name does not exist." />
			<param name="StreamReaderInstance" type="class" class="StreamReader" pass="return" description="Reader class to access the stream." />
		</method>

		<method name="LoadStreamByUUID" description="Loads stream of the build by attachment UUID.">
			<param name="DataUUID" type="string" pass="in" description="Data UUID of the attachment. Fails if uuid does not exist." />
			<param name="StreamReaderInstance" type="class" class="StreamReader" pass="return" description="Reader class to access the stream." />
		</method>
		
		<method name="LoadDiscreteField2DByIdentifier" description="Loads a discrete field by attachment identifier which was previously stored in the build execution. MIME Type MUST be application/amcf-discretefield2d.">
			<param name="Identifier" type="string" pass="in" description="Unique name of the build execution attachment. Fails if name does not exist or has invalid Mime type." />
			<param name="FieldDataInstance" type="class" class="DiscreteFieldData2D" pass="return" description="Loaded field instance." />
		</method>	
		
		<method name="LoadDiscreteField2DByUUID" description="Loads a discrete field by attachment uuid which previously stored in the build execution. MIME Type MUST be application/amcf-discretefield2d.">
			<param name="DataUUID" type="string" pass="in" description="Data UUID of the attachment. Fails if name does not exist or has invalid Mime type." />
			<param name="FieldDataInstance" type="class" class="DiscreteFieldData2D" pass="return" description="Loaded field instance." />
		</method>	

		<method name="StoreDiscreteField2D" description="Stores a discrete field in the build execution. MIME Type will be application/amcf-discretefield2d.">
			<param name="Identifier" type="string" pass="in" description="Unique name of the attachment. Fails if identifier already exists or is invalid." />
			<param name="Name" type="string" pass="in" description="Human Readable name of the attachment." />
			<param name="FieldDataInstance" type="class" class="DiscreteFieldData2D" pass="in" description="Field instance to store." />
			<param name="StoreOptions" type="optionalclass" class="DiscreteFieldData2DStoreOptions" pass="in" description="Field Data Store Options." />
			<param name="UserUUID" type="string" pass="in" description="User UUID of the user that this data comes from. Empty string means no user attached." />
			<param name="DataUUID" type="string" pass="return" description="Data UUID of the attachment." />
		</method>	

		<method name="LoadDataTableByIdentifier" description="Loads a data table by attachment identifier which was previously stored in the build execution. MIME Type MUST be application/amcf-datatable.">
			<param name="Identifier" type="string" pass="in" description="Unique name of the build execution attachment. Fails if name does not exist or has invalid Mime type." />
			<param name="DataTableInstance" type="class" class="DataTable" pass="return" description="Loaded data table instance." />
		</method>	
		
		<method name="LoadDataTableByUUID" description="Loads a data table by attachment uuid which previously stored in the build execution. MIME Type MUST be application/amcf-datatable.">
			<param name="DataUUID" type="string" pass="in" description="Data UUID of the attachment. Fails if name does not exist or has invalid Mime type." />
			<param name="DataTableInstance" type="class" class="DataTable" pass="return" description="Loaded data table instance." />
		</method>	

		<method name="StoreDataTable" description="Stores a data table in the build execution. MIME Type will be application/amcf-datatable.">
			<param name="Identifier" type="string" pass="in" description="Unique name of the attachment. Fails if identifier already exists or is invalid." />
			<param name="Name" type="string" pass="in" description="Human Readable name of the attachment." />
			<param name="FieldDataInstance" type="class" class="DataTable" pass="in" description="Field instance to store." />
			<param name="StoreOptions" type="optionalclass" class="DataTableWriteOptions" pass="in" description="Data Table Write Options." />
			<param name="UserUUID" type="string" pass="in" description="User UUID of the user that this data comes from. Empty string means no user attached." />
			<param name="DataUUID" type="string" pass="return" description="Data UUID of the attachment." />
		</method>	

		<method name="LoadPNGImageByIdentifier" description="Loads a PNG image by attachment identifier which was previously stored in the build execution. MIME Type MUST be image/png.">
			<param name="Identifier" type="string" pass="in" description="Unique name of the attachment. Fails if name does not exist or has invalid Mime type." />
			<param name="DPIValueX" type="double" pass="in" description="DPI Value in X. MUST be positive." />
			<param name="DPIValueY" type="double" pass="in" description="DPI Value in Y. MUST be positive." />
			<param name="PixelFormat" type="enum" class="ImagePixelFormat" pass="in" description="Pixel format to use. Might lose color and alpha information." />
			<param name="ImageDataInstance" type="class" class="ImageData" pass="return" description="Image data instance." />
		</method>	
		
		<method name="LoadPNGImageByUUID" description="Loads a PNG image by attachment uuid which was previously stored in the build execution. MIME Type MUST be image/png.">
			<param name="DataUUID" type="string" pass="in" description="Data UUID of the attachment. Fails if name does not exist or has invalid Mime type." />
			<param name="DPIValueX" type="double" pass="in" description="DPI Value in X. MUST be positive." />
			<param name="DPIValueY" type="double" pass="in" description="DPI Value in Y. MUST be positive." />
			<param name="PixelFormat" type="enum" class="ImagePixelFormat" pass="in" description="Pixel format to use. Might lose color and alpha information." />
			<param name="ImageDataInstance" type="class" class="ImageData" pass="return" description="Image data instance." />
		</method>	

		<method name="StorePNGImage" description="Stores a PNG image in the build job. MIME Type will be image/png">
			<param name="Identifier" type="string" pass="in" description="Unique name of the attachment. Fails if name does not exist or has invalid Mime type." />
			<param name="Name" type="string" pass="in" description="Unique name of the attachment. Fails if name does not exist or has invalid Mime type." />
			<param name="ImageDataInstance" type="class" class="ImageData" pass="in" description="Image data instance." />
			<param name="StoreOptions" type="optionalclass" class="PNGImageStoreOptions" pass="in" description="PNG Store Options." />
			<param name="UserUUID" type="string" pass="in" description="User UUID of the user that this data comes from. Empty string means no user attached." />
			<param name="DataUUID" type="string" pass="return" description="Data UUID of the attachment." />
		</method>			

		<method name="StoreMetaDataString" description="Adds a metadata string to a build execution. Meta data can only be added once. Deletion is not supported by purpose and MUST be avoided by the system design.">
			<param name="Key" type="string" pass="in" description="Unique key of value. MUST NOT be empty. MUST consist of alphanumeric characters or hyphen or underscore. Fails if Key already exists." />
			<param name="Value" type="string" pass="in" description="Value to store." />
		</method>
		
		<method name="HasMetaDataString" description="Checks if a metadata string exists.">
			<param name="Key" type="string" pass="in" description="Unique key of value. Fails if Key already exists." />
			<param name="MetaDataStringExists" type="bool" pass="return" description="Returns if metadata string exists." />
		</method>
		
		<method name="GetMetaDataString" description="Gets a metadata string of a build execution. Fails if Meta Data does not exist.">
			<param name="Key" type="string" pass="in" description="Unique key of value. Fails if Key already exists." />
			<param name="Value" type="string" pass="return" description="Return value." />
		</method>
		
		<method name="LoadAttachedJournal" description="Loads the journal that is associated with the build execution and returns an accessor instance.">
			<param name="CacheMemoryQuotaInMegabytes" type="uint32" pass="in" description="Memory quota to use for cached reading in bytes. MUST be larger than 16 and smaller than 4096." />
			<param name="JournalHandler" type="class" class="JournalHandler" pass="return" description="Journal instance." />
		</method>	
		

	</class>
	
	
	<class name="BuildExecutionIterator" parent="Iterator">
		<method name="GetCurrentExecution" description="Returns the execution the iterator points at.">
			<param name="BuildExecutionInstance" type="handle" class="BuildExecution" pass="return" description="returns the BuildExecution instance."/>
		</method>
	</class>


	<class name="Build" parent="Base" description="Build instance to access build files">

		<method name="GetName" description="Returns name of the build.">
			<param name="Name" type="string" pass="return" description="Name of the build." />
		</method>

		<method name="GetBuildUUID" description="Returns uuid of the build.">
			<param name="BuildUUID" type="string" pass="return" description="UUID of the build." />
		</method>

		<method name="GetStorageUUID" description="Returns storage uuid of the build stream.">
			<param name="StorageUUID" type="string" pass="return" description="Storage UUID of the build." />
		</method>

		<method name="GetStorageSHA256" description="Returns SHA256 of the build stream.">
			<param name="SHA256" type="string" pass="return" description="SHA256 of the build stream." />
		</method>

		<method name="GetLayerCount" description="Returns cached layer count of the toolpath.">
			<param name="LayerCount" type="uint32" pass="return" description="Returns layer count." />
		</method>

		<method name="GetBuildHeightInMM" description="Retrieves the build height in mm.">
			<param name="BuildHeight" type="double" pass="return" description="Build height in mm." />
		</method>

		<method name="GetZValueInMM" description="Retrieves the layers Z Value in mm.">
			<param name="LayerIndex" type="uint32" pass="in" description="Layer Index to return." />
			<param name="ZValue" type="double" pass="return" description="Z Value of the layer in mm." />
		</method>

		<method name="LoadToolpath" description="loads the a toolpath into memory. Does nothing if toolpath has already been loaded.">
		</method>

		<method name="UnloadToolpath" description="unloads the a toolpath from memory, if it has been loaded before.">
		</method>

		<method name="ToolpathIsLoaded" description="checks, if a toolpath object is loaded to memory.">
			<param name="IsLoaded" type="bool" pass="return" description="returns if toolpath is loaded." />
		</method>

		<method name="CreateToolpathAccessor" description="Creates an accessor object for a toolpath. Toolpath MUST have been loaded with LoadToolpath before.">
			<param name="ToolpathInstance" type="class" class="ToolpathAccessor" pass="return" description="Toolpath instance." />
		</method>

		<method name="HasAttachment" description="Returns if the Build has an attached data with a certain UUID">
			<param name="DataUUID" type="string" pass="in" description="Data UUID of the attachment to query. " />
			<param name="DataExists" type="bool" pass="return" description="Returns true if the data exists." />
		</method>

		<method name="HasAttachmentIdentifier" description="Returns if the Build has an attached data with a certain identifier">
			<param name="Identifier" type="string" pass="in" description="Identifier of the attachment to query." />
			<param name="DataExists" type="bool" pass="return" description="Returns true if the data exists." />
		</method>
		
		<method name="AddBinaryData" description="Adds binary data to store with the build.">
			<param name="Identifier" type="string" pass="in" description="Unique identifier of the attached data. Fails if ther already exists a binary data with the equal identifier." />
			<param name="Name" type="string" pass="in" description="Name of the attache data" />
			<param name="MIMEType" type="string" pass="in" description="Mime type of the data." />
			<param name="UserUUID" type="string" pass="in" description="User UUID of the user that this data comes from. Empty string means no user attached." />
			<param name="Content" type="basicarray" class="uint8" pass="in" description="Stream content to store" />
			<param name="DataUUID" type="string" pass="return" description="Data UUID of the attachment." />
		</method>

		<method name="AttachTempStream" description="Attaches a temp stream to the build.">
			<param name="Identifier" type="string" pass="in" description="Unique identifier of the attached data. Fails if ther already exists a binary data with the equal identifier." />
			<param name="Name" type="string" pass="in" description="Name of the attached data" />
			<param name="UserUUID" type="string" pass="in" description="User UUID of the user that this data comes from. Empty string means no user attached." />
			<param name="StreamWriterInstance" type="class" class="BaseTempStreamWriter" pass="in" description="Stream to attach to the build." />
			<param name="DataUUID" type="string" pass="return" description="Data UUID of the attachment." />
		</method>
		
		<method name="LoadStreamByIdentifier" description="Loads stream of the build by identifier.">
			<param name="Identifier" type="string" pass="in" description="Unique name of the build attachment. Fails if name does not exist." />
			<param name="StreamReaderInstance" type="class" class="StreamReader" pass="return" description="Reader class to access the stream." />
		</method>

		<method name="LoadStreamByUUID" description="Loads stream of the build by attachment UUID.">
			<param name="DataUUID" type="string" pass="in" description="Data UUID of the attachment. Fails if uuid does not exist." />
			<param name="StreamReaderInstance" type="class" class="StreamReader" pass="return" description="Reader class to access the stream." />
		</method>

		<method name="LoadDiscreteField2DByIdentifier" description="Loads a discrete field by identifier which was previously stored in the build job. MIME Type MUST be application/amcf-discretefield2d.">
			<param name="Identifier" type="string" pass="in" description="Unique name of the build attachment. Fails if name does not exist or has invalid Mime type." />
			<param name="FieldDataInstance" type="class" class="DiscreteFieldData2D" pass="return" description="Loaded field instance." />
		</method>	
		
		<method name="LoadDiscreteField2DByUUID" description="Loads a discrete field by uuid which previously stored in the build job. MIME Type MUST be application/amcf-discretefield2d.">
			<param name="DataUUID" type="string" pass="in" description="Data UUID of the attachment. Fails if name does not exist or has invalid Mime type." />
			<param name="FieldDataInstance" type="class" class="DiscreteFieldData2D" pass="return" description="Loaded field instance." />
		</method>	

		<method name="StoreDiscreteField2D" description="Stores a discrete field in the build job. MIME Type will be application/amcf-discretefield2d.">
			<param name="Identifier" type="string" pass="in" description="Unique name of the build attachment. Fails if identifier already exists or is invalid." />
			<param name="Name" type="string" pass="in" description="Unique name of the build attachment." />
			<param name="FieldDataInstance" type="class" class="DiscreteFieldData2D" pass="in" description="Field instance to store." />
			<param name="StoreOptions" type="optionalclass" class="DiscreteFieldData2DStoreOptions" pass="in" description="Field Data Store Options." />
			<param name="UserUUID" type="string" pass="in" description="User UUID of the user that this data comes from. Empty string means no user attached." />
			<param name="DataUUID" type="string" pass="return" description="Data UUID of the attachment." />
		</method>	

		<method name="LoadDataTableByIdentifier" description="Loads a data table by identifier which was previously stored in the build job. MIME Type MUST be application/amcf-datatable.">
			<param name="Identifier" type="string" pass="in" description="Unique name of the build attachment. Fails if name does not exist or has invalid Mime type." />
			<param name="DataTableInstance" type="class" class="DataTable" pass="return" description="Data Table instance." />
		</method>	
		
		<method name="LoadDataTableByUUID" description="Loads a data table by uuid which previously stored in the build job. MIME Type MUST be application/amcf-datatable.">
			<param name="DataUUID" type="string" pass="in" description="Data UUID of the attachment. Fails if name does not exist or has invalid Mime type." />
			<param name="DataTableInstance" type="class" class="DataTable" pass="return" description="Data Table instance." />
		</method>	

		<method name="StoreDataTable" description="Stores a data table in the build job. MIME Type will be application/amcf-datatable.">
			<param name="Identifier" type="string" pass="in" description="Unique name of the build attachment. Fails if identifier already exists or is invalid." />
			<param name="Name" type="string" pass="in" description="Unique name of the build attachment." />
			<param name="DataTableInstance" type="class" class="DataTable" pass="in" description="Data Table instance to store." />
			<param name="StoreOptions" type="optionalclass" class="DataTableWriteOptions" pass="in" description="Data Table Write Options." />
			<param name="UserUUID" type="string" pass="in" description="User UUID of the user that this data comes from. Empty string means no user attached." />
			<param name="DataUUID" type="string" pass="return" description="Data UUID of the attachment." />
		</method>	


		<method name="LoadPNGImageByIdentifier" description="Loads a PNG image by identifier which was previously stored in the build job. MIME Type MUST be image/png.">
			<param name="Identifier" type="string" pass="in" description="Unique name of the build attachment. Fails if name does not exist or has invalid Mime type." />
			<param name="DPIValueX" type="double" pass="in" description="DPI Value in X. MUST be positive." />
			<param name="DPIValueY" type="double" pass="in" description="DPI Value in Y. MUST be positive." />
			<param name="PixelFormat" type="enum" class="ImagePixelFormat" pass="in" description="Pixel format to use. Might lose color and alpha information." />
			<param name="ImageDataInstance" type="class" class="ImageData" pass="return" description="Image data instance." />
		</method>	
		
		<method name="LoadPNGImageByUUID" description="Loads a PNG image by uuid which was previously stored in the build job. MIME Type MUST be image/png.">
			<param name="DataUUID" type="string" pass="in" description="Data UUID of the attachment. Fails if name does not exist or has invalid Mime type." />
			<param name="DPIValueX" type="double" pass="in" description="DPI Value in X. MUST be positive." />
			<param name="DPIValueY" type="double" pass="in" description="DPI Value in Y. MUST be positive." />
			<param name="PixelFormat" type="enum" class="ImagePixelFormat" pass="in" description="Pixel format to use. Might lose color and alpha information." />
			<param name="ImageDataInstance" type="class" class="ImageData" pass="return" description="Image data instance." />
		</method>	

		<method name="StorePNGImage" description="Stores a PNG Image in the build job. MIME Type will be image/png">
			<param name="Identifier" type="string" pass="in" description="Unique name of the attachment. Fails if identifier does already exist or is invalid." />
			<param name="Name" type="string" pass="in" description="Unique name of the build attachment." />
			<param name="ImageDataInstance" type="class" class="ImageData" pass="in" description="Image data instance." />
			<param name="StoreOptions" type="optionalclass" class="PNGImageStoreOptions" pass="in" description="PNG Store Options." />
			<param name="UserUUID" type="string" pass="in" description="User UUID of the user that this data comes from. Empty string means no user attached." />
			<param name="DataUUID" type="string" pass="return" description="Data UUID of the attachment." />
		</method>	

		<method name="StartExecution" description="Starts a build execution. This function does not work in a UIEnvironment context!">
			<param name="Description" type="string" pass="in" description="A human readable description of the build execution for display in the User Interface. Should not be empty." />
			<param name="UserUUID" type="string" pass="in" description="User who started the execution. MUST exist. If empty, no user is attached." />
			<param name="BuildExecutionInstance" type="class" class="BuildExecution" pass="return" description="Build execution instance. Will be newly created and has the status InProcess." />
		</method>

		<method name="HasExecution" description="Checks if a build execution exists for this build.">
			<param name="ExecutionUUID" type="string" pass="in" description="The UUID of the exceution." />
			<param name="ExecutionExist" type="bool" pass="return" description="Returns true if the execution exists." />
		</method>
				
		<method name="FindExecution" description="Finds a build execution. Fails if execution does not exist.">
			<param name="ExecutionUUID" type="string" pass="in" description="The UUID of the exceution." />
			<param name="BuildExecutionInstance" type="class" class="BuildExecution" pass="return" description="Build execution instance. Will be newly created and has the status InProcess." />
		</method>

		<method name="ListExecutions" description="Lists all Executions of the build.">
			<param name="OnlyCurrentJournalSession" type="bool" pass="in" description="If true, only the builds that have been created in the current machine session." />
			<param name="IteratorInstance" type="class" class="BuildExecutionIterator" pass="return" description="Iterator instance." />
		</method>

		<method name="ListExecutionsByStatus" description="Lists all Executions of the build by status.">
			<param name="ExecutionStatus" type="enum" class="BuildExecutionStatus" pass="in" description="Status of the build." />
			<param name="OnlyCurrentJournalSession" type="bool" pass="in" description="If true, only the builds that have been created in the current machine session." />
			<param name="IteratorInstance" type="class" class="BuildExecutionIterator" pass="return" description="Iterator instance." />
		</method>
		
		<method name="StoreMetaDataString" description="Adds a metadata string to a build. Meta data can only be added once. Deletion is not supported by purpose and MUST be avoided by the system design.">
			<param name="Key" type="string" pass="in" description="Unique key of value. MUST NOT be empty. MUST consist of alphanumeric characters or hyphen or underscore. Fails if Key already exists." />
			<param name="Value" type="string" pass="in" description="Value to store." />
		</method>
		
		<method name="HasMetaDataString" description="Checks if a metadata string exists.">
			<param name="Key" type="string" pass="in" description="Unique key of value. Fails if Key already exists." />
			<param name="MetaDataStringExists" type="bool" pass="return" description="Returns if metadata string exists." />
		</method>
		
		<method name="GetMetaDataString" description="Gets a metadata string of a build. Fails if Meta Data does not exist.">
			<param name="Key" type="string" pass="in" description="Unique key of value. Fails if Key already exists." />
			<param name="Value" type="string" pass="return" description="Return value." />
		</method>
		
	</class>
	
	
	<class name="WorkingFileExecution" parent="Base" description="Working File Execution Object">

		<method name="GetStatus" description = "Returns the execution status">
		</method>

		<method name="ReturnStdOut" description = "Returns the output of the executable as string buffer">
			<param name="StringBuffer" type="string" pass="return" description="stdout buffer" />
		</method>


	</class>


	<class name="WorkingFile" parent="Base" description="Working File Access Object">

		<method name="GetAbsoluteFileName" description = "Retrieves absolute file name of the working file">
			<param name="FileName" type="string" pass="return" description="global path of the file" />
		</method>

		<method name="GetSize" description = "Returns the size of temporary file.">
			<param name="FileSize" type="uint64" pass="return" description="file size" />
		</method>

		<method name="CalculateSHA2" description = "Calculates the SHA256 checksum of the file.">
			<param name="SHA2" type="string" pass="return" description="sha256 checksum" />
		</method>

		<method name="ExecuteFile" description = "Executes the temporary file, if it is an executable.">
			<param name="Execution" type="class" class="WorkingFileExecution" pass="return" description="execution object" />
		</method>

		<method name="IsManaged" description = "Returns if the file is managed.">
			<param name="FileIsManaged" type="bool" pass="return" description="returns if the file is managed." />
		</method>

		<method name="MakeManaged" description = "Makes the file managed if it is not managed yet.">
		</method>

		<method name="FileExists" description = "Returns if the file exists on disk.">
			<param name="FileDoesExist" type="bool" pass="return" description="returns if the file exists." />
		</method>

		<method name="DeleteFromDisk" description = "Deletes the temporary file.">
			<param name="Success" type="bool" pass="return" description="returns if deletion was successful or file did not exist in the first place." />
		</method>
				
	</class>

	<class name="WorkingFileIterator" parent="Iterator">
		<method name="GetCurrentFile" description="Returns the working file the iterator points at.">
			<param name="WorkingFile" type="handle" class="WorkingFile" pass="return" description="returns the WorkingFile instance."/>
		</method>
	</class>


	<class name="WorkingDirectory" parent="Base" description="Working Directory Access Object">

		<method name="IsActive" description = "Working directory is active.">
			<param name="IsActive" type="bool" pass="return" description="returns true if files can be read and written to the directory." />
		</method>

		<method name="GetAbsoluteFilePath" description = "Retrieves absolute file path.">
			<param name="FilePath" type="string" pass="return" description="global path of the directory, including path delimiter." />
		</method>

		<method name="StoreCustomData" description = "Stores a data buffer in a temporary file with a given name.">
			<param name="FileName" type="string" pass="in" description="filename to store to. Can not include any path delimiters or .." />
			<param name="DataBuffer" type="basicarray" class="uint8" pass="in" description="file data to store to." />
			<param name="WorkingFile" type="class" class="WorkingFile" pass="return" description="working file instance." />
		</method>

		<method name="StoreCustomString" description = "Stores a string in a temporary file with a given name.">
			<param name="FileName" type="string" pass="in" description="filename to store to. Can not include any path delimiters or .." />
			<param name="DataString" type="string" pass="in" description="file data to store to." />
			<param name="WorkingFile" type="class" class="WorkingFile" pass="return" description="working file instance." />
		</method>

		<method name="StoreDriverData" description = "Stores attached driver data in a temporary file.">
			<param name="FileName" type="string" pass="in" description="filename to store to. Can not include any path delimiters or .." />
			<param name="Identifier" type="string" pass="in" description="identifier of the binary data in the driver package." />
			<param name="WorkingFile" type="class" class="WorkingFile" pass="return" description="working file instance." />
		</method>

		<method name="StoreCustomDataInTempFile" description = "Stores a data buffer in a temporary file with a generated name.">
			<param name="Extension" type="string" pass="in" description="extension of the file to store. MAY be an empty string. MUST only include up to 64 alphanumeric characters." />
			<param name="DataBuffer" type="basicarray" class="uint8" pass="in" description="file data to store to." />
			<param name="WorkingFile" type="class" class="WorkingFile" pass="return" description="working file instance." />
		</method>

		<method name="StoreCustomStringInTempFile" description = "Stores a string in a temporary file.">
			<param name="Extension" type="string" pass="in" description="extension of the file to store. MAY be an empty string. MUST only include up to 64 alphanumeric characters." />
			<param name="DataString" type="string" pass="in" description="file data to store to." />
			<param name="WorkingFile" type="class" class="WorkingFile" pass="return" description="working file instance." />
		</method>

		<method name="StoreDriverDataInTempFile" description = "Stores attached driver data in a temporary file.">
			<param name="Extension" type="string" pass="in" description="extension of the file to store. MAY be an empty string. MUST only include up to 64 alphanumeric characters." />
			<param name="Identifier" type="string" pass="in" description="identifier of the binary data in the driver package." />
			<param name="WorkingFile" type="class" class="WorkingFile" pass="return" description="working file instance." />
		</method>

		<method name="CleanUp" description = "Deletes all managed files in the directory and the directory. No storing is possible after a cleanup.">
			<param name="Success" type="bool" pass="return" description="returns if deletion was successful." />
		</method>

		<method name="AddManagedFile" description = "Adds a managed filename in the directory (i.e. this file will be deleted at CleanUp). Subdirectories are not allowed.">
			<param name="FileName" type="string" pass="in" description="Filename to manage. The file does not need to exist yet." />
			<param name="WorkingFile" type="class" class="WorkingFile" pass="return" description="working file instance." />
		</method>

		<method name="HasUnmanagedFiles" description = "Returns if the working directory has unmanaged files. A clean implementation will never deal with unmanaged files.">
			<param name="HasUnmanagedFiles" type="bool" pass="return" description="returns if there are unmanaged files." />
		</method>

		<method name="RetrieveUnmanagedFiles" description = "Returns a list of unmanaged files." >
			<param name="IteratorInstance" type="class" class="WorkingFileIterator" pass="return" description="working file iterator instance." />
		</method>

		<method name="RetrieveManagedFiles" description = "Returns a list of managed files." >
			<param name="IteratorInstance" type="class" class="WorkingFileIterator" pass="return" description="working file iterator instance." />
		</method>

		<method name="RetrieveAllFiles" description = "Returns a list of all files in the directory." >
			<param name="IteratorInstance" type="class" class="WorkingFileIterator" pass="return" description="working file iterator instance." />
		</method>

	</class>


	
	<class name="XMLDocumentAttribute" parent="Base" description="An XML document attribute.">

		<method name="GetNameSpace" description="Retrieves namespace of the attribute.">
			<param name="NameSpace" type="string" pass="return" description="returns the namespace of the attribute." />
		</method>

		<method name="GetName" description="Retrieves name of the attribute.">
			<param name="Name" type="string" pass="return" description="returns the name of the attribute." />
		</method>
				
		<method name="GetValue" description="Retrieves value of the attribute as string.">
			<param name="Value" type="string" pass="return" description="returns the value of the attribute." />
		</method>

		<method name="IsValidUUID" description="Checks if the value is a valid UUID string.">
			<param name="IsValid" type="bool" pass="return" description="returns if the value is a valid UUID string." />
		</method>
		
		<method name="GetUUIDValue" description="Retrieves value of the attribute as UUID string. Fails if value is not a UUID string.">
			<param name="Value" type="string" pass="return" description="returns the value of the attribute as normalized UUID string." />
		</method>

		<method name="IsValidInteger" description="Checks if the value is a valid integer in the given range.">
			<param name="MinValue" type="int64" pass="in" description="Minimum allowed value" />
			<param name="MaxValue" type="int64" pass="in" description="Maximum allowed value" />
			<param name="IsValid" type="bool" pass="return" description="returns if the value is a valid integer." />
		</method>

		<method name="GetIntegerValue" description="Returns the value as integer. Fails if the value is not a valid integer in the given range.">
			<param name="MinValue" type="int64" pass="in" description="Minimum allowed value" />
			<param name="MaxValue" type="int64" pass="in" description="Maximum allowed value" />
			<param name="Value" type="int64" pass="return" description="returns the value." />
		</method>


		<method name="IsValidDouble" description="Checks if the value is a valid double in the given range.">
			<param name="MinValue" type="double" pass="in" description="Minimum allowed value" />
			<param name="MaxValue" type="double" pass="in" description="Maximum allowed value" />
			<param name="IsValid" type="bool" pass="return" description="returns if the value is a valid double." />
		</method>

		<method name="GetDoubleValue" description="Returns the value as double. Fails if the value is not a valid double in the given range.">
			<param name="MinValue" type="double" pass="in" description="Minimum allowed value" />
			<param name="MaxValue" type="double" pass="in" description="Maximum allowed value" />
			<param name="Value" type="double" pass="return" description="returns the value ." />
		</method>
		
		<method name="IsValidBool" description="Checks if the value is a valid boolean value, meaning an integer or true or false as string. The value will be trimmed and any character will be converted to lowercase.">
			<param name="IsValid" type="bool" pass="return" description="returns if the value is a valid bool." />
		</method>

		<method name="GetBoolValue" description="Returns the value as bool. Fails if the value is not a valid boolean value, meaning an integer or true or false as string. The value will be trimmed and any character will be converted to lowercase.">
			<param name="Value" type="bool" pass="return" description="returns the value ." />
		</method>

		<method name="SetValue" description="Sets the value of the attribute as string.">
			<param name="Value" type="string" pass="in" description="new value of the attribute." />
		</method>
		
		<method name="SetUUIDValue" description="Sets the value of the attribute as UUID string.">
			<param name="Value" type="string" pass="in" description="new value of the attribute. Fails if Value is not a UUID." />
		</method>

		<method name="SetIntegerValue" description="Sets the value of the attribute as integer.">
			<param name="Value" type="int64" pass="in" description="new value of the attribute." />
		</method>

		<method name="SetDoubleValue" description="Sets the value of the attribute as double.">
			<param name="Value" type="double" pass="in" description="new value of the attribute." />
		</method>

		<method name="SetBoolValue" description="Sets the value of the attribute as bool.">
			<param name="Value" type="bool" pass="in" description="new value of the attribute." />
		</method>

		<method name="Remove" description="Removes the attribute from its parent node. All subsequent calls to the class will fail.">
		</method>
		
	</class>


	<class name="JSONObject" parent="Base" description="A JSON Object.">

		<method name="HasMember" description="Returns if a member with a specific name exist.">
			<param name="Name" type="string" pass="in" description="Name of the member." />
			<param name="MemberExists" type="bool" pass="return" description="returns if a member with a specific name exists." />
		</method>

		<method name="GetMemberCount" description="Returns the number of members.">
			<param name="Count" type="uint64" pass="return" description="returns the number of members." />
		</method>

		<method name="GetMemberName" description="Returns the name of a member by index.">
			<param name="Index" type="uint64" pass="in" description="Index of the member, 0-based. Fails if larger or equal than MemberCount" />
			<param name="Name" type="string" pass="in" description="Name of the member." />
		</method>

		<method name="GetMemberType" description="Returns the member type. Returns unknown, if the member does not exist.">
			<param name="Name" type="string" pass="in" description="Name of the member." />
			<param name="MemberType" type="enum" class="JSONObjectType" pass="return" description="The type of the member.." />
		</method>

		<method name="GetValue" description="Returns a member as string value. Fails if member is of type Array or Object. Returns true or false in terms of Boolean value.">
			<param name="Name" type="string" pass="in" description="Name of the member." />
			<param name="Value" type="string" pass="return" description="Member value." />
		</method>

		<method name="GetIntegerValue" description="Returns a member as integer value. Fails if member is of type Array or Object, or a non-double string.">
			<param name="Name" type="string" pass="in" description="Name of the member." />
			<param name="Value" type="int64" pass="return" description="Member value." />
		</method>

		<method name="GetDoubleValue" description="Returns a member as double value. Fails if member is of type Array or Object, or a non-integer string.">
			<param name="Name" type="string" pass="in" description="Name of the member." />
			<param name="Value" type="double" pass="return" description="Member value." />
		</method>
	
		<method name="GetBoolValue" description="Returns a member as boolean value. Fails if member is of type Array or Object or Double.">
			<param name="Name" type="string" pass="in" description="Name of the member." />
			<param name="Value" type="bool" pass="return" description="Member value." />
		</method>

		<method name="GetObjectValue" description="Returns a member as object value. Fails if member is not of type Object.">
			<param name="Name" type="string" pass="in" description="Name of the member." />
			<param name="Value" type="class" class="JSONObject" pass="return" description="Member value." />
		</method>

		<method name="GetArrayValue" description="Returns a member as object value. Fails if member is not of type Array.">
			<param name="Name" type="string" pass="in" description="Name of the member." />
			<param name="Value" type="class" class="JSONArray" pass="return" description="Member value." />
		</method>

		<method name="RemoveMember" description="Removes a member with a specific name. Does nothing if Member does not exist.">
			<param name="Name" type="string" pass="in" description="Name of the member." />
		</method>

		<method name="AddValue" description="Adds a member as string value. Fails if member already exists.">
			<param name="Name" type="string" pass="in" description="Name of the member." />
			<param name="Value" type="string" pass="in" description="Member value." />
		</method>

		<method name="AddIntegerValue" description="Adds a member as integer value. Fails if member already exists.">
			<param name="Name" type="string" pass="in" description="Name of the member." />
			<param name="Value" type="int64" pass="return" description="Member value." />
		</method>

		<method name="AddDoubleValue" description="Adds a member as double value. Fails if member already exists.">
			<param name="Name" type="string" pass="in" description="Name of the member." />
			<param name="Value" type="double" pass="return" description="Member value." />
		</method>

		<method name="AddBoolValue" description="Adds a member as bool value. Fails if member already exists.">
			<param name="Name" type="string" pass="in" description="Name of the member." />
			<param name="Value" type="bool" pass="return" description="Member value." />
		</method>
	
		<method name="AddObjectValue" description="Returns a member as object value. Returns empty object. Fails if member already exists.">
			<param name="Name" type="string" pass="in" description="Name of the member." />
			<param name="Value" type="class" class="JSONObject" pass="return" description="Member value." />
		</method>

		<method name="AddArrayValue" description="Returns a member as object value. Returns empty array. Fails if member already exists.">
			<param name="Name" type="string" pass="in" description="Name of the member." />
			<param name="Value" type="class" class="JSONArray" pass="return" description="Member value." />
		</method>

	</class>


	<class name="JSONArray" parent="Base" description="A JSON Array.">

		<method name="GetElementCount" description="Returns the number of elements.">
			<param name="Count" type="uint64" pass="return" description="returns the number of elements." />
		</method>

		<method name="GetElementType" description="Returns the element type. Returns unknown, if the element does not exist.">
			<param name="Index" type="uint64" pass="in" description="Index of the element, 0-based. Fails if larger or equal than ElementCount" />
			<param name="ElementType" type="enum" class="JSONObjectType" pass="return" description="The type of the element.." />
		</method>

		<method name="GetValue" description="Returns a element as string value. Fails if element is of type Array or Object. Returns true or false in terms of Boolean value.">
			<param name="Index" type="uint64" pass="in" description="Index of the element, 0-based. Fails if larger or equal than ElementCount" />
			<param name="Value" type="string" pass="return" description="Element value." />
		</method>

		<method name="GetIntegerValue" description="Returns a element as integer value. Fails if element is of type Array or Object, or a non-double string.">
			<param name="Index" type="uint64" pass="in" description="Index of the element, 0-based. Fails if larger or equal than ElementCount" />
			<param name="Value" type="int64" pass="return" description="Element value." />
		</method>

		<method name="GetDoubleValue" description="Returns a element as double value. Fails if element is of type Array or Object, or a non-integer string.">
			<param name="Index" type="uint64" pass="in" description="Index of the element, 0-based. Fails if larger or equal than ElementCount" />
			<param name="Value" type="double" pass="return" description="Element value." />
		</method>
	
		<method name="GetBoolValue" description="Returns a element as boolean value. Fails if element is of type Array or Object or Double.">
			<param name="Index" type="uint64" pass="in" description="Index of the element, 0-based. Fails if larger or equal than ElementCount" />
			<param name="Value" type="bool" pass="return" description="Element value." />
		</method>

		<method name="GetObjectValue" description="Returns a element as object value. Fails if element is not of type Object.">
			<param name="Index" type="uint64" pass="in" description="Index of the element, 0-based. Fails if larger or equal than ElementCount" />
			<param name="Value" type="class" class="JSONObject" pass="return" description="Element value." />
		</method>

		<method name="GetArrayValue" description="Returns a element as object value. Fails if element is not of type Array.">
			<param name="Index" type="uint64" pass="in" description="Index of the element, 0-based. Fails if larger or equal than ElementCount" />
			<param name="Value" type="class" class="JSONArray" pass="return" description="Element value." />
		</method>

		<method name="RemoveElement" description="Removes an element with a specific index. Does nothing if Element does not exist.">
			<param name="Index" type="uint64" pass="in" description="Index of the element, 0-based. Fails if larger or equal than ElementCount" />
		</method>

		<method name="AddValue" description="Adds an element as string value.">
			<param name="Value" type="string" pass="in" description="Member value." />
		</method>

		<method name="AddIntegerValue" description="Adds a member as integer value.">
			<param name="Value" type="int64" pass="return" description="Member value." />
		</method>

		<method name="AddDoubleValue" description="Adds a member as double value.">
			<param name="Value" type="double" pass="return" description="Member value." />
		</method>

		<method name="AddBoolValue" description="Adds a member as bool value.">
			<param name="Value" type="bool" pass="return" description="Member value." />
		</method>
	
		<method name="AddObjectValue" description="Returns a member as object value. Returns empty object.">
			<param name="Value" type="class" class="JSONObject" pass="return" description="Member value." />
		</method>

		<method name="AddArrayValue" description="Returns a member as object value. Returns empty array.">
			<param name="Value" type="class" class="JSONArray" pass="return" description="Member value." />
		</method>

	</class>

	<class name="XMLDocumentNode" parent="Base" description="An XML document node.">

		<method name="GetName" description="Retrieves name of the node.">
			<param name="Name" type="string" pass="return" description="returns the name of the node." />
		</method>
				
		<method name="GetNameSpace" description="Retrieves namespace of the node.">
			<param name="NameSpace" type="string" pass="return" description="returns the namespace of the node." />
		</method>

		<method name="GetTextContent" description="Retrieves the text content of the node. A node with text content MUST NOT have children.">
			<param name="TextContent" type="string" pass="return" description="returns the text content of the node." />
		</method>

		<method name="SetTextContent" description="Sets the text content of the node. Call will fail if node has children.">
			<param name="TextContent" type="string" pass="in" description="the new text content of the node." />
		</method>

		<method name="GetAttributeCount" description="Returns number of attributes.">
			<param name="Count" type="uint64" pass="return" description="returns the number of attributes." />
		</method>
				
		<method name="GetAttribute" description="Returns attribute instance. Fails if Index is out of range.">
			<param name="Index" type="uint64" pass="in" description="Index of the attribute to return (0-based)." />
			<param name="AttributeInstance" type="class" class="XMLDocumentAttribute" pass="return" description="XML Document attribute." />
		</method>

		<method name="HasAttribute" description="Returns if attribute of a specific name exists.">
			<param name="NameSpace" type="string" pass="in" description="Namespace of the attribute. If empty, it inherits the namespace of the node." />
			<param name="Name" type="string" pass="in" description="Name of the attribute." />
			<param name="AttributeExists" type="bool" pass="return" description="Returns if the attribute exists." />
		</method>

		<method name="FindAttribute" description="Returns attribute instance of a specific name. ">
			<param name="NameSpace" type="string" pass="in" description="Namespace of the attribute. If empty, it inherits the namespace of the node." />
			<param name="Name" type="string" pass="in" description="Name of the attribute." />
			<param name="MustExist" type="bool" pass="in" description="If true, the call fails if attribute does not exist. If falls, the call will return null if the attribute does not exist." />			
			<param name="AttributeInstance" type="optionalclass" class="XMLDocumentAttribute" pass="return" description="XML Document attribute." />
		</method>

		<method name="GetAttributeValue" description="Returns string value of an attribute. Fails if attribute does not exist.">
			<param name="NameSpace" type="string" pass="in" description="Namespace of the attribute. If empty, it inherits the namespace of the node." />
			<param name="Name" type="string" pass="in" description="Name of the attribute." />
			<param name="Value" type="string" pass="return" description="Attribute value." />
		</method>

		<method name="GetAttributeIntegerValue" description="Returns integer value of an attribute. Fails if attribute does not exist or attribute is not an integer .">
			<param name="NameSpace" type="string" pass="in" description="Namespace of the attribute. If empty, it inherits the namespace of the node." />
			<param name="Name" type="string" pass="in" description="Name of the attribute." />
			<param name="MinValue" type="int64" pass="in" description="Minimum allowed value." />
			<param name="MaxValue" type="int64" pass="in" description="Maximum allowed value." />
			<param name="Value" type="int64" pass="return" description="Attribute value." />
		</method>

		<method name="GetAttributeDoubleValue" description="Returns double value of an attribute. Fails if attribute does not exist or attribute is not a double value.">
			<param name="NameSpace" type="string" pass="in" description="Namespace of the attribute. If empty, it inherits the namespace of the node." />
			<param name="Name" type="string" pass="in" description="Name of the attribute." />
			<param name="MinValue" type="double" pass="in" description="Minimum allowed value" />
			<param name="MaxValue" type="double" pass="in" description="Maximum allowed value" />
			<param name="Value" type="double" pass="return" description="Attribute value." />
		</method>

		<method name="GetAttributeBoolValue" description="Returns bool value of an attribute. Fails if attribute does not exist or attribute is not a boolean value.">
			<param name="NameSpace" type="string" pass="in" description="Namespace of the attribute. If empty, it inherits the namespace of the node." />
			<param name="Name" type="string" pass="in" description="Name of the attribute." />
			<param name="Value" type="bool" pass="return" description="Attribute value." />
		</method>

		<method name="GetAttributeUUIDValue" description="Returns UUID value of an attribute. Fails if attribute does not exist or attribute value is not a UUID.">
			<param name="NameSpace" type="string" pass="in" description="Namespace of the attribute. If empty, it inherits the namespace of the node." />
			<param name="Name" type="string" pass="in" description="Name of the attribute." />
			<param name="Value" type="string" pass="return" description="Attribute value." />
		</method>

		<method name="GetAttributeValueDef" description="Returns string value of an attribute. Returns default value if attribute does not exist.">
			<param name="NameSpace" type="string" pass="in" description="Namespace of the attribute. If empty, it inherits the namespace of the node." />
			<param name="Name" type="string" pass="in" description="Name of the attribute." />
			<param name="DefaultValue" type="string" pass="in" description="Default value." />
			<param name="Value" type="string" pass="return" description="Attribute value." />
		</method>

		<method name="GetAttributeIntegerValueDef" description="Returns integer value of an attribute. Returns default value if attribute does not exist or attribute is not an integer .">
			<param name="NameSpace" type="string" pass="in" description="Namespace of the attribute. If empty, it inherits the namespace of the node." />
			<param name="Name" type="string" pass="in" description="Name of the attribute." />
			<param name="MinValue" type="int64" pass="in" description="Minimum allowed value." />
			<param name="MaxValue" type="int64" pass="in" description="Maximum allowed value." />
			<param name="DefaultValue" type="int64" pass="in" description="Default value. MUST be in valid range." />
			<param name="Value" type="int64" pass="return" description="Attribute value." />
		</method>

		<method name="GetAttributeDoubleValueDef" description="Returns double value of an attribute. Returns default value if attribute does not exist or attribute is not a double value.">
			<param name="NameSpace" type="string" pass="in" description="Namespace of the attribute. If empty, it inherits the namespace of the node." />
			<param name="Name" type="string" pass="in" description="Name of the attribute." />
			<param name="MinValue" type="double" pass="in" description="Minimum allowed value" />
			<param name="MaxValue" type="double" pass="in" description="Maximum allowed value" />
			<param name="DefaultValue" type="double" pass="in" description="Default value. MUST be in valid range." />
			<param name="Value" type="double" pass="return" description="Attribute value." />
		</method>

		<method name="GetAttributeBoolValueDef" description="Returns bool value of an attribute. Returns default value if attribute does not exist or attribute is not a boolean value.">
			<param name="NameSpace" type="string" pass="in" description="Namespace of the attribute. If empty, it inherits the namespace of the node." />
			<param name="Name" type="string" pass="in" description="Name of the attribute." />
			<param name="DefaultValue" type="bool" pass="in" description="Default value." />
			<param name="Value" type="bool" pass="return" description="Attribute value." />
		</method>

		<method name="GetAttributeUUIDValueDef" description="Returns UUID value of an attribute. Returns default value if attribute does not exist or attribute value is not a UUID.">
			<param name="NameSpace" type="string" pass="in" description="Namespace of the attribute. If empty, it inherits the namespace of the node." />
			<param name="Name" type="string" pass="in" description="Name of the attribute." />
			<param name="DefaultValue" type="string" pass="in" description="Attribute value. MUST be a valid UUID" />
			<param name="Value" type="string" pass="return" description="Attribute value." />
		</method>

		<method name="RemoveAttribute" description="Removes the attribute with a specific name. Does nothing if attribute does not exist.">
			<param name="NameSpace" type="string" pass="in" description="Namespace of the attribute. If empty, it inherits the namespace of the node." />
			<param name="Name" type="string" pass="in" description="Name of the attribute." />
		</method>

		<method name="RemoveAttributeByIndex" description="Removes the attribute with a specific index. Does nothing if attribute does not exist.">
			<param name="Index" type="uint64" pass="in" description="Index of the attribute to remove (0-based)." />
		</method>

		<method name="AddAttribute" description="Adds an attribute with a specific name and string value. Fails if attribute already exists.">
			<param name="NameSpace" type="string" pass="in" description="New namespace of the attribute. MUST be either an empty string for the root namespace, or previously being registered with the document." />
			<param name="Name" type="string" pass="in" description="Name of the attribute." />
			<param name="Value" type="string" pass="in" description="Value of the attribute." />
		</method>

		<method name="AddIntegerAttribute" description="Adds an attribute with a specific name and integer value. Fails if attribute already exists.">
			<param name="NameSpace" type="string" pass="in" description="New namespace of the attribute. MUST be either an empty string for the root namespace, or previously being registered with the document." />
			<param name="Name" type="string" pass="in" description="Name of the attribute." />
			<param name="Value" type="int64" pass="in" description="Value of the attribute." />
		</method>

		<method name="AddDoubleAttribute" description="Adds an attribute with a specific name and double value. Fails if attribute already exists.">
			<param name="NameSpace" type="string" pass="in" description="New namespace of the child. MUST be either an empty string for the root namespace, or previously being registered with the document." />
			<param name="Name" type="string" pass="in" description="Name of the attribute." />
			<param name="Value" type="double" pass="in" description="Value of the attribute." />
		</method>

		<method name="AddBoolAttribute" description="Adds an attribute with a specific name and bool value. Fails if attribute already exists.">
			<param name="NameSpace" type="string" pass="in" description="New namespace of the child. MUST be either an empty string for the root namespace, or previously being registered with the document." />
			<param name="Name" type="string" pass="in" description="Name of the attribute." />
			<param name="Value" type="bool" pass="in" description="Value of the attribute." />
		</method>

		<method name="GetChildren" description="Returns all the child nodes of the XML Node.">
			<param name="ChildNodes" type="class" class="XMLDocumentNodes" pass="return" description="returns the list of child nodes." />
		</method>

		<method name="CountChildrenByName" description="Returns how many children of the XML Node have a specific name.">
			<param name="NameSpace" type="string" pass="in" description="New namespace of the child. MUST be either an empty string for the root namespace, or previously being registered with the document." />
			<param name="Name" type="string" pass="in" description="Name of the node." />
			<param name="Count" type="uint64" pass="return" description="returns the number children with the specified name." />
		</method>
				
		<method name="GetChildrenByName" description="Returns all the child nodes of the XML Node with a specific name.">
			<param name="NameSpace" type="string" pass="in" description="New namespace of the child. MUST be either an empty string for the root namespace, or previously being registered with the document." />
			<param name="Name" type="string" pass="in" description="Name of the child." />
			<param name="ChildNodes" type="class" class="XMLDocumentNodes" pass="return" description="returns the list of child nodes." />
		</method>

		<method name="HasChild" description="Returns if a child with a specific name exist.">
			<param name="NameSpace" type="string" pass="in" description="New namespace of the child. MUST be either an empty string for the root namespace, or previously being registered with the document." />
			<param name="Name" type="string" pass="in" description="Name of the child." />
			<param name="ChildExists" type="bool" pass="return" description="returns if a child with a specific name exists." />
		</method>

		<method name="HasUniqueChild" description="Returns if a child with a specific name exist once and only once.">
			<param name="NameSpace" type="string" pass="in" description="New namespace of the child. MUST be either an empty string for the root namespace, or previously being registered with the document." />
			<param name="Name" type="string" pass="in" description="Name of the child." />
			<param name="ChildExists" type="bool" pass="return" description="returns if a child with a specific name exists once and only once." />
		</method>

		<method name="FindChild" description="Returns child with a specific name. Throws an error if name does not exist once and only once.">
			<param name="NameSpace" type="string" pass="in" description="New namespace of the child. MUST be either an empty string for the root namespace, or previously being registered with the document." />
			<param name="Name" type="string" pass="in" description="Name of the child." />
			<param name="MustExist" type="bool" pass="in" description="If true, the call fails if child does not exist. If falls, the call will return null if the child does not exist." />			
			<param name="ChildInstance" type="optionalclass" class="XMLDocumentNode" pass="return" description="returns child instance or null." />
		</method>
		
		<method name="AddChild" description="Adds a new child with a specific name. Fails if node has a non-empty text content.">
			<param name="NameSpace" type="string" pass="in" description="New namespace of the child. MUST be either an empty string for the root namespace, or previously being registered with the document." />
			<param name="Name" type="string" pass="in" description="Name of the child." />
			<param name="ChildInstance" type="class" class="XMLDocumentNode" pass="return" description="returns child instance." />
		</method>

		<method name="AddChildText" description="Adds a new child with text content and a specific name. Fails if node has a non-empty text content.">
			<param name="NameSpace" type="string" pass="in" description="New namespace of the child. MUST be either an empty string for the root namespace, or previously being registered with the document." />
			<param name="Name" type="string" pass="in" description="Name of the child." />
			<param name="TextContent" type="string" pass="in" description="Text content of the child." />
			<param name="ChildInstance" type="class" class="XMLDocumentNode" pass="return" description="returns child instance." />
		</method>

		<method name="RemoveChild" description="Removes a child with a specific name. All subsequent calls to the child will fail after the call.">
			<param name="ChildInstance" type="class" class="XMLDocumentNode" pass="in" description="child instance to remove. Fails if given instance is not a child of the node." />
		</method>

		<method name="RemoveChildrenWithName" description="Removes all children with a specific name. Does nothing if no child with the name exists. . All subsequent calls to the deleted children will fail after the call.">
			<param name="NameSpace" type="string" pass="in" description="New namespace of the child. MUST be either an empty string for the root namespace, or previously being registered with the document." />
			<param name="Name" type="string" pass="in" description="Name of the children." />
		</method>

		<method name="Remove" description="Removes the node from its parent. The root node of the document can not be removed.">
		</method>

		<method name="CopyFrom" description="Copies all content from another node in a recursive way.">
			<param name="OtherNode" type="class" class="XMLDocumentNode" pass="in" description="other XML Document Node. Does not need to live in the same document." />
		</method>
		
		
	</class>

	<class name="XMLDocumentNodes" parent="Base" description="An list of XML document nodes.">

		<method name="GetNodeCount" description="Returns number of nodes.">
			<param name="Count" type="uint64" pass="return" description="returns the number of nodes in the list." />
		</method>
				
		<method name="GetNode" description="Returns node instance. Fails if Index is out of range.">
			<param name="Index" type="uint64" pass="in" description="Index of the node to return (0-based)." />
			<param name="NodeInstance" type="class" class="XMLDocumentNode" pass="return" description="XML Node node." />
		</method>

		<method name="CountNodesByName" description="Returns how many nodes of the XML Node have a specific name.">
			<param name="NameSpace" type="string" pass="in" description="New namespace of the child. MUST be either an empty string for the root namespace, or previously being registered with the document." />
			<param name="Name" type="string" pass="in" description="Name of the node." />
			<param name="Count" type="uint64" pass="return" description="returns the number of nodes with the specified name." />
		</method>

		<method name="GetNodesByName" description="Returns all the nodes nodes of the XML Node with a specific name.">
			<param name="NameSpace" type="string" pass="in" description="New namespace of the child. MUST be either an empty string for the root namespace, or previously being registered with the document." />
			<param name="Name" type="string" pass="in" description="Name of the node." />
			<param name="Nodes" type="class" class="XMLDocumentNodes" pass="return" description="returns the list of node nodes." />
		</method>
				
		<method name="HasNode" description="Returns if a node with a specific name exist.">
			<param name="NameSpace" type="string" pass="in" description="New namespace of the child. MUST be either an empty string for the root namespace, or previously being registered with the document." />
			<param name="Name" type="string" pass="in" description="Name of the node." />
			<param name="NodeExists" type="bool" pass="return" description="returns if a node with a specific name exists." />
		</method>

		<method name="HasUniqueNode" description="Returns if a node with a specific name exist once and only once.">
			<param name="NameSpace" type="string" pass="in" description="New namespace of the child. MUST be either an empty string for the root namespace, or previously being registered with the document." />
			<param name="Name" type="string" pass="in" description="Name of the node." />
			<param name="NodeExists" type="bool" pass="return" description="returns if a node with a specific name exists once and only once." />
		</method>

		<method name="FindNode" description="Returns node with a specific name. Throws an error if name does not exist once and only once.">
			<param name="NameSpace" type="string" pass="in" description="New namespace of the child. MUST be either an empty string for the root namespace, or previously being registered with the document." />
			<param name="Name" type="string" pass="in" description="Name of the node." />
			<param name="MustExist" type="bool" pass="in" description="If true, the call fails if node does not exist. If falls, the call will return null if the node does not exist." />			
			<param name="NodeInstance" type="optionalclass" class="XMLDocumentNode" pass="return" description="returns node instance." />
		</method>


				
	</class>

	<class name="XMLDocument" parent="Base" description="An XML document instance.">
	
		<method name="GetDefaultNamespace" description="Returns default name space of the document.">
			<param name="Namespace" type="string" pass="return" description="name space of the document." />
		</method>	

		<method name="GetNamespaceCount" description="Returns the used number of name spaces of the document.">
			<param name="Count" type="uint64" pass="return" description="number of registered name spaces of the document." />
		</method>	

		<method name="GetNamespace" description="Returns a name space of the document. Will fail if index is invalid.">
			<param name="Index" type="uint64" pass="in" description="index of name space. 0-based." />
			<param name="Namespace" type="string" pass="out" description="name space of the document." />
			<param name="NamespacePrefix" type="string" pass="out" description="name space prefix of the document. Empty for root namespace." />
		</method>	

		<method name="HasNamespace" description="Returns if the document has a namespace.">
			<param name="Namespace" type="string" pass="in" description="Name space name." />
			<param name="NameSpaceIsRegistered" type="bool" pass="return" description="name space has been registered." />
		</method>	

		<method name="GetNamespacePrefix" description="Returns a name space of the document. Will fail if namespace is not registered.">
			<param name="Namespace" type="string" pass="in" description="name space of the document." />
			<param name="NamespacePrefix" type="string" pass="return" description="name space prefix of the document. Empty for root namespace." />
		</method>	

		<method name="RegisterNamespace" description="Registers a custom namespace prefix. Given Namespace MUST NOT have been in use before calling this function.">
			<param name="Namespace" type="string" pass="in" description="name space to register" />
			<param name="NamespacePrefix" type="string" pass="in" description="name space prefix to use for the namespace. MUST NOT be in use, MUST NOT be an empty string or contain non-alphanumeric characters." />
		</method>	

		<method name="ChangeNamespacePrefix" description="Changes the prefix of an existing Namespace. New Namespace MUST NOT have been in use before calling this function.">
			<param name="OldNamespacePrefix" type="string" pass="in" description="name space prefix that is currently in use." />
			<param name="NewNamespacePrefix" type="string" pass="in" description="name space prefix to use for the namespace. MUST NOT be in use, MUST NOT be an empty string or contain non-alphanumeric characters." />
		</method>	
			
		<method name="GetRootNode" description="Returns root node of the document.">
			<param name="RootNode" type="class" class="XMLDocumentNode" pass="return" description="Root node of the document." />
		</method>	

		<method name="SaveToString" description="Saves the XML document into a string.">
			<param name="AddLineBreaks" type="bool" pass="in" description="If true, line breaks and indentation will be added to the output string." />
			<param name="XMLString" type="string" pass="return" description="String with the XML Content." />
		</method>	
				
	</class>


	<class name="TCPIPPacket" parent="Base" description="Contains a received TCPIP packet data.">

		<method name="IsEmpty" description="Returns if packet is empty.">
			<param name="PacketIsEmpty" type="bool" pass="return" description="Flag if packet is empty." />
		</method>
	
		<method name="GetSize" description="Returns the size of the packet. Returns 0 if packet is empty.">
			<param name="PacketSize" type="uint32" pass="return" description="returns size of packet." />
		</method>

		<method name="GetData" description="Returns the data of the packet. Fails if packet is empty.">
			<param name="Buffer" type="basicarray" class="uint8" pass="out" description="packet data." />
		</method>
		
	</class>


	<class name="TCPIPConnection" parent="Base" description="A generic TCP/IP Connection.">

		<method name="GetIPAddress" description= "Returns the IP Address of the Connection.">
			<param name="IPAddress" type="string" pass="return" description="IP Address." />
		</method>

		<method name="GetPort" description= "Returns the Port of the Connection.">
			<param name="Port" type="uint32" pass="return" description="Port." />				
		</method>

		<method name="GetTimeout" description= "Returns the Timeout of the Connection.">
			<param name="Timeout" type="uint32" pass="return" description="Timeout in milliseconds." />				
		</method>

		<method name="IsConnected" description="Returns if the instance is connected.">		
			<param name="IsConnected" type="bool" pass="return" description="." />
		</method>	

		<method name="Disconnect" description= "Disconnects from the Server, if connected.">
		</method>

		<method name="Reconnect" description="Disconnects and Connects to the Server.">		
		</method>	

		<method name="SendBuffer" description= "Sends a buffer of bytes to the Server.">
			<param name="Buffer" type="basicarray" class="uint8" pass="in" description="packet payload." />		
		</method>

		<method name="WaitForData" description= "Waits for a server packet to arrive.">
			<param name="TimeOutInMS" type="uint32" pass="in" description="timeout in Milliseconds." />		
			<param name="DataAvailable" type="bool" pass="return" description="Flag if a new packet has arrived." />		
		</method>

		<method name="ReceiveFixedPacket" description= "Receives a fixed length packet. Blocks until expected number of bytes arrives or timeout is hit. Fails if there is a connection error. Returns empty packet if timeout is hit.">
			<param name="PacketSize" type="uint32" pass="in" description="Size of packet to receive. MUST be larger than 0." />	
			<param name="TimeOutInMS" type="uint32" pass="in" description="Timeout in Milliseconds." />		
			<param name="PacketInstance" type="class" class="TCPIPPacket" pass="return" description="Packet instance. Returns empty packet if timeout is hit" />
		</method>

		<method name="ReceiveData" description= "Receives data. Fails if there is a connection error. Returns empty packet if timeout is hit.">
			<param name="DataSize" type="uint32" pass="in" description="Size of data to receive." />	
			<param name="TimeOutInMS" type="uint32" pass="in" description="timeout in Milliseconds." />		
			<param name="PacketInstance" type="class" class="TCPIPPacket" pass="return" description="Packet instance. Size will be between 0 and DataSize." />
		</method>
				
	</class>

	<class name="ModbusTCPDigitalIOStatus" parent="Base" description="A Modbus TCP coil or input status object.">
	
		<method name="GetCount" description= "Returns the number of Digital IOs in the instance.">
			<param name="Count" type="uint32" pass="return" description="Count." />				
		</method>
		
		<method name="GetBaseAddress" description= "Returns the base address of Digital IOs in the instance.">
			<param name="Address" type="uint32" pass="return" description="Base Address." />				
		</method>

		<method name="GetValue" description= "Returns the cached state of the Digital IO in the instance.">
			<param name="Index" type="uint32" pass="in" description="Index of IO Value. 0-based." />
			<param name="State" type="bool" pass="return" description="State Value." />				
		</method>
		
		<method name="GetValues" description= "Returns all Digital IOs of the instance as byte array.">
			<param name="StateArray" type="basicarray" class="uint8" pass="out" description="State Value Array." />
		</method>
		
	</class>

	<class name="ModbusTCPRegisterStatus" parent="Base" description="A Modbus TCP register status object.">
	
		<method name="GetCount" description= "Returns the number of registers in the instance.">
			<param name="Count" type="uint32" pass="return" description="Count." />				
		</method>
		
		<method name="GetBaseAddress" description= "Returns the base address of registers in the instance.">
			<param name="Address" type="uint32" pass="return" description="Base Address." />				
		</method>

		<method name="GetValue" description= "Returns the cached state of the registers in the instance.">
			<param name="Index" type="uint32" pass="in" description="Index of IO Value. 0-based." />
			<param name="State" type="uint16" pass="return" description="State Value." />				
		</method>
		
		<method name="GetValues" description= "Returns all registers of the instance as word array.">
			<param name="StateArray" type="basicarray" class="uint16" pass="out" description="State Value Array." />
		</method>
		
	</class>

	<class name="ModbusTCPConnection" parent="Base" description="A generic Modbus TCP Connection.">

		<method name="GetIPAddress" description= "Returns the IP Address of the Connection.">
			<param name="IPAddress" type="string" pass="return" description="IP Address." />
		</method>

		<method name="GetPort" description= "Returns the Port of the Connection.">
			<param name="Port" type="uint32" pass="return" description="Port." />				
		</method>

		<method name="GetTimeout" description= "Returns the Timeout of the Connection.">
			<param name="Timeout" type="uint32" pass="return" description="Timeout in milliseconds." />				
		</method>

		<method name="IsConnected" description="Returns if the instance is connected.">		
			<param name="IsConnected" type="bool" pass="return" description="." />
		</method>	

		<method name="Disconnect" description= "Disconnects from the Server.">
		</method>

		<method name="Reconnect" description="Disconnects and Connects to the Server.">		
		</method>	

		<method name="DiagnosisCall" description= "Sends a diagnosis call to the Server.">
			<param name="SubFunction" type="uint16" pass="in" description="Modbus TCP Subfunction ID." />
			<param name="DataField" type="uint16" pass="in" description="Modbus TCP Data Field." />
			<param name="DataResponse" type="uint16" pass="return" description="Modbus TCP Data Response." />
		</method>

		<method name="ReadCoilStatus" description= "Reads coil status of Server.">
			<param name="StartAddress" type="uint32" pass="in" description="Start Address." />
			<param name="BitCount" type="uint32" pass="in" description="Number of coils to read. MUST be larger than 0." />
			<param name="CoilStatus" type="class" class="ModbusTCPDigitalIOStatus" pass="return" description="Coil status instance." />
		</method>
		
		<method name="ReadInputStatus" description= "Reads input status of Server.">
			<param name="StartAddress" type="uint32" pass="in" description="Start Address." />
			<param name="BitCount" type="uint32" pass="in" description="Number of inputs to read. MUST be larger than 0." />
-			<param name="InputStatus" type="class" class="ModbusTCPDigitalIOStatus" pass="return" description="Input status instance." />
		</method>
		
		<method name="ReadHoldingRegisters" description= "Reads holding registers of Server.">
			<param name="StartAddress" type="uint32" pass="in" description="Start Address." />
			<param name="RegisterCount" type="uint32" pass="in" description="Number of registers. MUST be larger than 0." />
			<param name="RegisterInstance" type="class" class="ModbusTCPRegisterStatus" pass="return" description="Holding register instance." />
		</method>
		
		<method name="ReadInputRegisters" description= "Reads input registers of Server.">
			<param name="StartAddress" type="uint32" pass="in" description="Start Address." />
			<param name="RegisterCount" type="uint32" pass="in" description="Number of registers. MUST be larger than 0." />
			<param name="RegisterInstance" type="class" class="ModbusTCPRegisterStatus" pass="return" description="Input register instance." />
		</method>
		
		<method name="ForceMultipleCoils" description= "Forces multiple coils on Server.">
			<param name="StartAddress" type="uint32" pass="in" description="Start Address." />
			<param name="Buffer" type="basicarray" class="uint8" pass="in" description="Input coil array. One byte per Input. MUST NOT be empty" />
		</method>

		<method name="PresetMultipleRegisters" description= "Forces multiple registers on Server.">
			<param name="StartAddress" type="uint32" pass="in" description="Start Address." />
			<param name="Buffer" type="basicarray" class="uint16" pass="in" description="Input register array. One word per Input. MUST NOT be empty" />
		</method>
		
	</class>	


	<class name="DriverStatusUpdateSession" parent="Base" description="Class for updating the status variables of the driver in a thread-safe way. One instance should be created per driver thread.">
	
		<method name="SetStringParameter" description="sets a string parameter">
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Value" type="string" pass="in" description="Value to set" />
		</method>

		<method name="SetUUIDParameter" description="sets a uuid parameter">
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Value" type="string" pass="in" description="Value to set" />
		</method>

		<method name="SetDoubleParameter" description="sets a double parameter">
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Value" type="double" pass="in" description="Value to set" />
		</method>

		<method name="SetIntegerParameter" description="sets an int parameter">
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Value" type="int64" pass="in" description="Value to set" />
		</method>

		<method name="SetBoolParameter" description="sets a bool parameter">
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Value" type="bool" pass="in" description="Value to set" />
		</method>	
		
		<method name="LogMessage" description="logs a string as message">
			<param name="LogString" type="string" pass="in" description="String to Log" />
		</method>

		<method name="LogWarning" description="logs a string as warning">
			<param name="LogString" type="string" pass="in" description="String to Log" />
		</method>

		<method name="LogInfo" description="logs a string as info">
			<param name="LogString" type="string" pass="in" description="String to Log" />
		</method>

		<method name="Sleep" description="Puts the current instance to sleep for a definite amount of time. MUST be used instead of a blocking sleep call.">
			<param name="Delay" type="uint32" pass="in" description="Milliseconds to sleeps" />
		</method>


		<method name="GetStringParameter" description="Gets a string parameter. Fails if parameter does not exist.">
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Value" type="string" pass="return" description="Value of parameter" />
		</method>

		<method name="GetUUIDParameter" description="Gets a uuid parameter. Fails if parameter does not exist or is not a UUID.">
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Value" type="string" pass="return" description="Value of parameter" />
		</method>

		<method name="GetDoubleParameter" description="Gets a double parameter. Fails if parameter does not exist or is not a Double parameter.">
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Value" type="double" pass="return" description="Value of parameter" />
		</method>

		<method name="GetIntegerParameter" description="Gets an int parameter. Fails if parameter does not exist or is not a Integer parameter.">
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Value" type="int64" pass="return" description="Value of parameter" />
		</method>

		<method name="GetBoolParameter" description="Gets a bool parameter. Fails if parameter does not exist or is not a Bool parameter.">
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Value" type="bool" pass="return" description="Value of parameter" />
		</method>

	</class>


	<class name="DriverEnvironment" parent="Base" description="Environment of the driver. Method calls should be mutexed by the multithreading of the driver implementation.">
	  
		<method name="CreateStatusUpdateSession" description = "creates a status update object which can be easily called from an independent thread.">
			<param name="UpdateStatusInstance" type="class" class="DriverStatusUpdateSession" pass="return" description="creates a status update instance" />
		</method>

		<method name="CreateWorkingDirectory" description = "creates a temporary working directory.">
			<param name="WorkingDirectory" type="class" class="WorkingDirectory" pass="return" description="creates a working directory" />
		</method>

		<method name="CreateTCPIPConnection" description = "creates a TCP/IP Connection for a specific IP address and port.">
			<param name="IPAddress" type="string" pass="in" description="IP Address." />
			<param name="Port" type="uint32" pass="in" description="Port." />				
			<param name="TimeOutInMS" type="uint32" pass="in" description="timeout in Milliseconds." />		
			<param name="ConnectionInstance" type="class" class="TCPIPConnection" pass="return" description="connects to the given IP Address" />
		</method>

		<method name="CreateModbusTCPConnection" description = "creates a Modbus TCP Connection for a specific IP address and port.">
			<param name="IPAddress" type="string" pass="in" description="IP Address." />
			<param name="Port" type="uint32" pass="in" description="Port." />				
			<param name="TimeOutInMS" type="uint32" pass="in" description="timeout in Milliseconds." />		
			<param name="ConnectionInstance" type="class" class="ModbusTCPConnection" pass="return" description="connects to the given IP Address" />
		</method>

		<method name="CreateXMLDocument" description = "creates an empty XML Document.">
			<param name="RootNodeName" type="string" pass="in" description="Name of the root node. MUST be a valid XML Node Name string." />
			<param name="DefaultNamespace" type="string" pass="in" description="Default namespace of the document. MUST be a valid XML namespace string." />
			<param name="XMLDocument" type="class" class="XMLDocument" pass="return" description="XML Document Instance." />
		</method>

		<method name="ParseXMLString" description = "parses an XML String and returns an XML Document instance. Throws an error if XML is malformatted.">
			<param name="XMLString" type="string" pass="in" description="XML String." />
			<param name="XMLDocument" type="class" class="XMLDocument" pass="return" description="XML Document Instance." />
		</method>

		<method name="ParseXMLData" description = "parses a XML stored in a byte array and returns an XML Document instance. . Throws an error if XML is malformatted.">
			<param name="XMLData" type="basicarray" class="uint8" pass="in" description="XML Binary data." />
			<param name="XMLDocument" type="class" class="XMLDocument" pass="return" description="XML Document Instance." />
		</method>

		<method name="CreateDataTable" description = "creates an empty data table.">
			<param name="DataTableInstance" type="class" class="DataTable" pass="return" description="Data Table Instance." />
		</method>

		<method name="DriverHasResourceData" description = "retrieves if attached driver has data with the given identifier.">
			<param name="Identifier" type="string" pass="in" description="identifier of the binary data in the driver package." />
			<param name="HasResourceData" type="bool" pass="return" description="returns true if the resource exists in the machine resource package." />
		</method>

		<method name="MachineHasResourceData" description = "retrieves if the machine resources has data with the given identifier.">
			<param name="Identifier" type="string" pass="in" description="identifier of the binary data in the driver package." />
			<param name="HasResourceData" type="bool" pass="return" description="returns true if the resource exists in the machine resource package." />
		</method>

		<method name="RetrieveDriverData" description = "retrieves attached driver resource data into a memory buffer. (depreciated, equivalent to RetrieveDriverResourceData)">
			<param name="Identifier" type="string" pass="in" description="identifier of the binary data in the driver package." />
			<param name="DataBuffer" type="basicarray" class="uint8" pass="out" description="buffer data." />
		</method>

		<method name="RetrieveDriverResourceData" description = "retrieves attached driver resource data into a memory buffer.">
			<param name="Identifier" type="string" pass="in" description="identifier of the binary data in the driver package." />
			<param name="DataBuffer" type="basicarray" class="uint8" pass="out" description="buffer data." />
		</method>

		<method name="RetrieveMachineResourceData" description = "retrieves a machine resource data (Plugins Directory) driver data into a memory buffer.">
			<param name="Identifier" type="string" pass="in" description="identifier of the binary data in the machine resource package." />
			<param name="DataBuffer" type="basicarray" class="uint8" pass="out" description="buffer data." />
		</method>
		
		<method name="CreateToolpathAccessor" description="Creates an accessor object for a toolpath. Toolpath MUST have been loaded into memory before.">
			<param name="StreamUUID" type="string" pass="in" description="UUID of the stream." />
			<param name="ToolpathInstance" type="class" class="ToolpathAccessor" pass="return" description="Toolpath instance." />
		</method>
		
		<method name="ParameterNameIsValid" description="checks if a name is a valid alphanumerical string for parameters.">
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="NameIsValid" type="bool" pass="return" description="returns true if the parameter name is a valid name." />
		</method>
		
		<method name="RegisterStringParameter" description="registers a string parameter. Must only be called during driver creation.">
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Description" type="string" pass="in" description="Parameter Description" />
			<param name="DefaultValue" type="string" pass="in" description="default value to set" />
		</method>

		<method name="RegisterUUIDParameter" description="registers a uuid parameter. Must only be called during driver creation.">
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Description" type="string" pass="in" description="Parameter Description" />
			<param name="DefaultValue" type="string" pass="in" description="default value to set" />
		</method>

		<method name="RegisterDoubleParameter" description="registers a double parameter. Must only be called during driver creation. The default units are 0.001.">
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Description" type="string" pass="in" description="Parameter Description" />
			<param name="DefaultValue" type="double" pass="in" description="default value to set" />
		</method>

		<method name="RegisterDoubleParameterWithUnits" description="registers a double parameter. Must only be called during driver creation.">
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Description" type="string" pass="in" description="Parameter Description" />
			<param name="DefaultValue" type="double" pass="in" description="default value to set" />
			<param name="Units" type="double" pass="in" description="unit factor to use" />
		</method>

		<method name="RegisterIntegerParameter" description="registers an int parameter. Must only be called during driver creation.">
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Description" type="string" pass="in" description="Parameter Description" />
			<param name="DefaultValue" type="int64" pass="in" description="default value to set" />
		</method>

		<method name="RegisterBoolParameter" description="registers a bool parameter. Must only be called during driver creation.">
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Description" type="string" pass="in" description="Parameter Description" />
			<param name="DefaultValue" type="bool" pass="in" description="default value to set" />
		</method>
		
		<method name="SetStringParameter" description="Sets a string parameter. For getting a string, use a Status Update Session.">
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Value" type="string" pass="in" description="Value to set" />
		</method>

		<method name="SetUUIDParameter" description="sets a uuid parameter. For getting a UUID, use a Status Update Session.">
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Value" type="string" pass="in" description="Value to set" />
		</method>

		<method name="SetDoubleParameter" description="sets a double parameter. For getting a Double, use a Status Update Session.">
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Value" type="double" pass="in" description="Value to set" />
		</method>

		<method name="SetIntegerParameter" description="sets an int parameter. For getting an Integer, use a Status Update Session.">
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Value" type="int64" pass="in" description="Value to set" />
		</method>

		<method name="SetBoolParameter" description="sets a bool parameter. For getting a bool, use a Status Update Session.">
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Value" type="bool" pass="in" description="Value to set" />
		</method>
		
		<method name="Sleep" description="Puts the current instance to sleep for a definite amount of time. MUST be used instead of a blocking sleep call.">
			<param name="Delay" type="uint32" pass="in" description="Milliseconds to sleeps" />
		</method>

		<method name="GetGlobalTimerInMilliseconds" description="Returns the global timer in milliseconds.">
			<param name="TimerValue" type="uint64" pass="return" description="Timer value in Milliseconds" />
		</method>

		<method name="GetGlobalTimerInMicroseconds" description="Returns the global timer in microseconds.">
			<param name="TimerValue" type="uint64" pass="return" description="Timer value in Microseconds" />
		</method>

		<method name="LogMessage" description="logs a string as message">
			<param name="LogString" type="string" pass="in" description="String to Log" />
		</method>

		<method name="LogWarning" description="logs a string as warning">
			<param name="LogString" type="string" pass="in" description="String to Log" />
		</method>

		<method name="LogInfo" description="logs a string as info">
			<param name="LogString" type="string" pass="in" description="String to Log" />
		</method>
		
		<method name="CreateEmptyImage" description="creates an empty image object.">
			<param name="PixelSizeX" type="uint32" pass="in" description="Pixel size in X. MUST be positive." />
			<param name="PixelSizeY" type="uint32" pass="in" description="Pixel size in Y. MUST be positive." />
			<param name="DPIValueX" type="double" pass="in" description="DPI Value in X. MUST be positive." />
			<param name="DPIValueY" type="double" pass="in" description="DPI Value in Y. MUST be positive." />
			<param name="PixelFormat" type="enum" class="ImagePixelFormat" pass="in" description="Pixel format to use." />
			<param name="ImageDataInstance" type="class" class="ImageData" pass="return" description="Empty image instance." />
		</method>		

		<method name="CreateImageLoader" description="creates an image loader object.">			
			<param name="ImageLoaderInstance" type="class" class="ImageLoader" pass="return" description="Image loader instance." />
		</method>		
		
		<method name="CreateDiscreteField2D" description="Creates an empty discrete field.">
			<param name="PixelCountX" type="uint32" pass="in" description="Pixel count in X. MUST be positive." />
			<param name="PixelCountY" type="uint32" pass="in" description="Pixel count in Y. MUST be positive." />
			<param name="DPIValueX" type="double" pass="in" description="DPI Value in X. MUST be positive." />
			<param name="DPIValueY" type="double" pass="in" description="DPI Value in Y. MUST be positive." />
			<param name="OriginX" type="double" pass="in" description="Origin X of the field in mm." />
			<param name="OriginY" type="double" pass="in" description="Origin Y of the field in mm." />
			<param name="DefaultValue" type="double" pass="in" description="Default value of the field." />
			<param name="FieldDataInstance" type="class" class="DiscreteFieldData2D" pass="return" description="Empty field instance." />
		</method>	

		<method name="CreateDiscreteField2DFromImage" description="Creates a discrete field from the greyscale values of an image. RGB colors in the image will be averaged to obtain a greyscale color.">
			<param name="ImageDataInstance" type="class" class="ImageData" pass="in" description="Image instance containing the pixel data." />
			<param name="BlackValue" type="double" pass="in" description="Value that the minimum color (black) shall be mapped to." />
			<param name="WhiteValue" type="double" pass="in" description="Value that the maximum color (white) shall be mapped to." />
			<param name="OriginX" type="double" pass="in" description="Origin X of the field in mm." />
			<param name="OriginY" type="double" pass="in" description="Origin Y of the field in mm." />
			<param name="FieldDataInstance" type="class" class="DiscreteFieldData2D" pass="return" description="Empty field instance." />
		</method>	

		<method name="HasBuildJob" description="Returns if a build object exists. Fails if BuildUUID is not a valid UUID string.">
			<param name="BuildUUID" type="string" pass="in" description="UUID of the build entity." />
			<param name="BuildExists" type="bool" pass="return" description="Returns true if build exists" />
		</method>

		<method name="GetBuildJob" description="Returns a instance of a build object. Fails if build uuid does not exist.">
			<param name="BuildUUID" type="string" pass="in" description="UUID of the build entity." />
			<param name="BuildInstance" type="class" class="Build" pass="return" description="Build instance" />
		</method>

		<method name="HasBuildExecution" description="Returns if a build execution exists. Fails if ExecutionUUID is not a valid UUID string.">
			<param name="ExecutionUUID" type="string" pass="in" description="UUID of the execution entity." />
			<param name="ExecutionExists" type="bool" pass="return" description="Returns true if execution exists" />
		</method>

		<method name="GetBuildExecution" description="Returns a instance of a build execution object. Fails if build execution uuid does not exist.">
			<param name="ExecutionUUID" type="string" pass="in" description="UUID of the execution entity." />
			<param name="ExecutionInstance" type="class" class="BuildExecution" pass="return" description="Build execution instance" />
		</method>

		<method name="CreateCryptoContext" description="Creates a crypto context.">
			<param name="Context" type="class" class="CryptoContext" pass="return" description="Cryptographic context instance" />
		</method>

		<method name="GetCurrentDateTime" description="Returns the current time as DateTime object instance.">
			<param name="DateTime" type="class" class="DateTime" pass="return" description="Date Time Instance." />
		</method>

		<method name="GetCustomDateTime" description="Returns a custom time as DateTime object instance. Fails if the values are not a valid time from January first 1970 to year 1 million.">
			<param name="Year" type="uint32" pass="in" description="Year. Must be larger or equal than 1970." />
			<param name="Month" type="uint32" pass="in" description="Month. Must be between 1 and 12." />
			<param name="Day" type="uint32" pass="in" description="Day. Must be between 1 and 31." />
			<param name="Hour" type="uint32" pass="in" description="Hour. Must be between 0 and 23." />
			<param name="Minute" type="uint32" pass="in" description="Minute. Must be between 0 and 59." />
			<param name="Second" type="uint32" pass="in" description="Second. Must be between 0 and 59." />
			<param name="Microsecond" type="uint32" pass="in" description="Microsecond. Must be between 0 and 999999." />
			<param name="DateTime" type="class" class="DateTime" pass="return" description="Date Time Instance." />
		</method>

		<method name="GetStartDateTime" description="Returns the startup time of the system as DateTime object instance. All Timer values are counted from there.">
			<param name="DateTime" type="class" class="DateTime" pass="return" description="Date Time Instance." />
		</method>

	</class>
	
	

	<class name="SignalTrigger" parent="Base" description="Class for signal triggering">

		<method name="CanTrigger" description="Returns, if signal channel is available.">
			<param name="ChannelIsAvailable" type="bool" pass="return" description="Returns true, if signal channel is available." />
		</method>

		<method name="Trigger" description="Triggers a signal, if signal channel is available.">
		</method>

		<method name="WaitForHandling" description="Waits until the signal is reset.">
			<param name="TimeOut" type="uint32" pass="in" description="Timeout in Milliseconds. 0 for Immediate return." />			
			<param name="Success" type="bool" pass="return" description="Flag if signal handling has been handled." />
		</method>
		
		<method name="GetName" description="Returns the signal name.">
			<param name="SignalName" type="string" pass="return" description="Name Of Signal" />
		</method>
		
		<method name="GetStateMachine" description="Returns the signal state machine instance.">
			<param name="StateMachineName" type="string" pass="return" description="Name Of State Machine" />
		</method>

		<method name="SetString" description="sets a string value">
			<param name="Name" type="string" pass="in" description="Name" />
			<param name="Value" type="string" pass="in" description="Value" />
		</method>

		<method name="SetUUID" description="sets a uuid value">
			<param name="Name" type="string" pass="in" description="Name" />
			<param name="Value" type="string" pass="in" description="Value" />
		</method>

		<method name="SetDouble" description="sets a double">
			<param name="Name" type="string" pass="in" description="Name" />
			<param name="Value" type="double" pass="in" description="Value" />
		</method>

		<method name="SetInteger" description="sets an int.">
			<param name="Name" type="string" pass="in" description="Name" />
			<param name="Value" type="int64" pass="in" description="Value" />
		</method>

		<method name="SetBool" description="sets a bool">
			<param name="Name" type="string" pass="in" description="Name" />
			<param name="Value" type="bool" pass="in" description="Value" />
		</method>

		<method name="GetStringResult" description="returns a string value of the result">
			<param name="Name" type="string" pass="in" description="Name" />
			<param name="Value" type="string" pass="return" description="Value" />
		</method>

		<method name="GetUUIDResult" description="returns a uuid value of the result">
			<param name="Name" type="string" pass="in" description="Name" />
			<param name="Value" type="string" pass="return" description="Value" />
		</method>

		<method name="GetDoubleResult" description="returns a string value of the result">
			<param name="Name" type="string" pass="in" description="Name" />
			<param name="Value" type="double" pass="return" description="Value" />
		</method>

		<method name="GetIntegerResult" description="returns an int value of the result.">
			<param name="Name" type="string" pass="in" description="Name" />
			<param name="Value" type="int64" pass="return" description="Value" />
		</method>

		<method name="GetBoolResult" description="returns a bool value of the result.">
			<param name="Name" type="string" pass="in" description="Name" />
			<param name="Value" type="bool" pass="return" description="Value" />
		</method>

	</class>



	<class name="SignalHandler" parent="Base" description="Class for signal handling">

		<method name="SignalHandled" description="Marks signal as handled and resets signal channel.">
		</method>
		
		<method name="GetName" description="Returns the signal name.">
			<param name="SignalName" type="string" pass="return" description="Name Of Signal" />
		</method>

		<method name="GetSignalID" description="Returns the signal id. Depreciated.">
			<param name="SignalID" type="string" pass="return" description="Signal Identifier" />
		</method>
		
		<method name="GetSignalUUID" description="Returns the signal uuid. Identical to GetSignalID.">
			<param name="SignalUUID" type="string" pass="return" description="Signal Identifier" />
		</method>

		<method name="GetStateMachine" description="Returns the signal state machine instance.">
			<param name="StateMachineName" type="string" pass="return" description="Name Of State Machine" />
		</method>

		<method name="GetString" description="gets a string value">
			<param name="Name" type="string" pass="in" description="Name" />
			<param name="Value" type="string" pass="return" description="Value" />
		</method>

		<method name="GetUUID" description="gets a uuid value">
			<param name="Name" type="string" pass="in" description="Name" />
			<param name="Value" type="string" pass="return" description="Value" />
		</method>


		<method name="GetDouble" description="gets a double">
			<param name="Name" type="string" pass="in" description="Name" />
			<param name="Value" type="double" pass="return" description="Value" />
		</method>

		<method name="GetInteger" description="gets an int.">
			<param name="Name" type="string" pass="in" description="Name" />
			<param name="Value" type="int64" pass="return" description="Value" />
		</method>

		<method name="GetBool" description="gets a bool">
			<param name="Name" type="string" pass="in" description="Name" />
			<param name="Value" type="bool" pass="return" description="Value" />
		</method>

		<method name="SetStringResult" description="returns a string value of the result">
			<param name="Name" type="string" pass="in" description="Name" />
			<param name="Value" type="string" pass="in" description="Value" />
		</method>

		<method name="SetUUIDResult" description="returns a uuid value of the result">
			<param name="Name" type="string" pass="in" description="Name" />
			<param name="Value" type="string" pass="in" description="Value" />
		</method>

		<method name="SetDoubleResult" description="returns a string value of the result">
			<param name="Name" type="string" pass="in" description="Name" />
			<param name="Value" type="double" pass="in" description="Value" />
		</method>

		<method name="SetIntegerResult" description="sets an int.">
			<param name="Name" type="string" pass="in" description="Name" />
			<param name="Value" type="int64" pass="in" description="Value" />
		</method>

		<method name="SetBoolResult" description="sets a bool">
			<param name="Name" type="string" pass="in" description="Name" />
			<param name="Value" type="bool" pass="in" description="Value" />
		</method>

	</class>



	<class name="BaseTempStreamWriter" parent="Base" description="Base class for writing temporary storage streams.">

		<method name="GetUUID" description="Returns the UUID of the stream.">
			<param name="UUID" type="string" pass="return" description="Returns stream uuid." />
		</method>
		
		<method name="GetName" description="Returns the name of the stream.">
			<param name="Name" type="string" pass="return" description="Returns stream name." />
		</method>
		
		<method name="GetMIMEType" description="Returns the MIME type of the stream.">
			<param name="MIMEType" type="string" pass="return" description="Returns stream MIME Type." />
		</method>		
		
		<method name="GetSize" description="Returns the current size of the stream.">
			<param name="Size" type="uint64" pass="return" description="Current size of the stream." />
		</method>

		<method name="Finish" description="Finishes the stream writing. All subsequent write attempts will fail. Fails if stream has been finished already.">
		</method>

		<method name="IsFinished" description="Returns if the stream writing has already been finished.">
			<param name="Finished" type="bool" pass="return" description="If true, writing into the stream is not possible anymore." />
		</method>

		<method name="GetStreamReader" description="Creates a stream reader on this stream. This call will finish the stream writing should it not be finished.">
			<param name="StreamReader" type="class" class="StreamReader" pass="return" description="Stream reader instance." />
		</method>
		
	</class>
	
	<class name="TempStreamWriter" parent="BaseTempStreamWriter" description="A writer that allows to create a temporary storage stream.">
			
		<method name="GetWritePosition" description="Returns the current write position of the stream.">
			<param name="WritePosition" type="uint64" pass="return" description="Current write position of the stream." />
		</method>		

		<method name="Seek" description="Moves the current write position to a certain address. New position MUST be smaller or equal the stream size.">
			<param name="WritePosition" type="uint64" pass="in" description="New write position of the stream. If Temp stream is living in a ZIP Writer, seeking is not possible." />
		</method>		
		
		<method name="WriteData" description="Writes a data array into the stream. Fails if stream has been finished. Will enlarge stream if writing outside of the current size.">
			<param name="Data" type="basicarray" class="uint8" pass="in" description="Data array to write into the stream" />
		</method>
		
		<method name="WriteString" description="Writes a string into the stream. Fails if stream has been finished. Will enlarge stream if writing outside of the current size.">
			<param name="Data" type="string" pass="in" description="String to write into the stream" />
		</method>
		
		<method name="WriteLine" description="Writes a string into the stream and adds a newline character. Fails if stream has been finished. Will enlarge stream if writing outside of the current size.">
			<param name="Line" type="string" pass="in" description="String to write into the stream" />
		</method>
		
		<method name="CopyFrom" description="Copies the full content of a StreamReader Instance.">
			<param name="StreamReader" type="class" class="StreamReader" pass="in" description="Stream to read from." />
		</method>

	</class>
	
	<class name="ZIPStreamWriter" parent="BaseTempStreamWriter" description="A writer that allows to create a ZIP file storage stream.">
	
		<method name="CreateZIPEntry" description="Creates a new ZIP entry in the ZIP file. All currently open ZIP Entry streams will be finished and closed.">
			<param name="FileName" type="string" pass="in" description="File Name for the new entry in the ZIP file. Entry MUST not exist yet." />
			<param name="TempStream" type="class" class="TempStreamWriter" pass="return" description="Returns temp stream to write into." />
		</method>
		
		<method name="CreateZIPEntryFromStream" description="Adds the full content of a StreamReader Instance.">
			<param name="FileName" type="string" pass="in" description="File Name for the new entry in the ZIP file. Entry MUST not exist yet." />
			<param name="StreamReader" type="class" class="StreamReader" pass="in" description="Stream to read from." />
		</method>
		
	</class>
	
	
	<class name="StreamReader" parent="Base" description="A reader class that allows to access a storage stream.">
	
		<method name="GetUUID" description="Returns the UUID of the stream.">
			<param name="UUID" type="string" pass="return" description="Returns stream uuid." />
		</method>

		<method name="GetName" description="Returns the name of the stream.">
			<param name="Name" type="string" pass="return" description="Returns stream name." />
		</method>
		
		<method name="GetMIMEType" description="Returns the MIME type of the stream.">
			<param name="MIMEType" type="string" pass="return" description="Returns stream MIME Type." />
		</method>

		<method name="GetSize" description="Returns the current size of the stream.">
			<param name="Size" type="uint64" pass="return" description="Current size of the stream." />
		</method>
		
		<method name="GetReadPosition" description="Returns the current read position of the stream.">
			<param name="ReadPosition" type="uint64" pass="return" description="Current read position of the stream." />
		</method>		

		<method name="Seek" description="Moves the current read position to a certain address. New position MUST be smaller or equal the stream size.">
			<param name="ReadPosition" type="uint64" pass="in" description="New read position of the stream." />
		</method>		
		
		<method name="ReadData" description="Reads a data array from the stream from the current read position. Fails if reading outside of the stream data.">
			<param name="SizeToRead" type="uint64" pass="in" description="Bytes to read. MUST be larger than 0." />
			<param name="Data" type="basicarray" class="uint8" pass="out" description="Return data array. In case of success, will have SizeToRead elements." />
		</method>

		<method name="ReadAllData" description="Seeks to the beginning of the stream and returns all the stream data.">
			<param name="Data" type="basicarray" class="uint8" pass="out" description="Return data array. In case of success, will have stream size elements." />
		</method>
		
	</class>	

	<class name="UniformJournalSampling" parent="Base" description="Result class for Journal Sampling">

		<method name="GetVariableName" description="returns the name of the recorded variable.">
			<param name="Name" type="string" pass="return" description="Path or name." />
		</method>

		<method name="GetNumberOfSamples" description="Returns the number of samples in the interval.">
			<param name="NumberOfSamples" type="uint32" pass="return" description="Number of samples in the sampling." />
		</method>

		<method name="GetStartTimeStamp" description="Returns the beginning time stamp of the available data point.">
			<param name="StartTimeStampInMicroSeconds" type="uint64" pass="return" description="Start Timestamp of Recording in microseconds." />
		</method>
	
		<method name="GetEndTimeStamp" description="Returns the beginning time stamp of the available data point.">
			<param name="EndTimeStampInMicroSeconds" type="uint64" pass="return" description="End Timestamp of Recording in microseconds." />
		</method>

		<method name="GetSample" description="Returns the timestamp and value of the given sample.">
			<param name="Index" type="uint32" pass="in" description="Index of the sample. 0-based. MUST be smaller than NumberOfSamples." />
			<param name="TimeStamp" type="uint64" pass="out" description="TimeStamp of the sample in MicroSeconds." />
			<param name="Value" type="double" pass="out" description="Value of the sample in ms." />
		</method>

		<method name="GetAllSamples" description="Returns all timestamps and values of the sampling.">
			<param name="Samples" type="structarray" class="TimeStreamEntry" pass="out" description="Array of Timestream entries, in increasing order." />
		</method>

	</class>


	<class name="JournalVariable" parent="Base" description="Class for accessing journal statistics">
	
		<method name="GetVariableName" description="returns the name of the recorded variable.">
			<param name="Name" type="string" pass="return" description="Path or name." />
		</method>
		
		<method name="GetStartTimeStamp" description="Returns the beginning time stamp of the available data point.">
			<param name="RecordingStartInMicroSeconds" type="uint64" pass="return" description="Start Timestamp of Recording in microseconds." />
		</method>
	
		<method name="GetEndTimeStamp" description="Returns the beginning time stamp of the available data point.">
			<param name="RecordingEndInMicroSeconds" type="uint64" pass="return" description="End Timestamp of Recording in microseconds." />
		</method>
		
		<method name="ComputeDoubleSample" description="Computes a single sample at a time. Fails if no data is available at this time value.">
			<param name="TimeInMicroSeconds" type="uint64" pass="in" description="Timestamp to check." />
			<param name="SampleValue" type="double" pass="return" description="Value of the variable at the time step." />
		</method>
		
		<method name="ComputeIntegerSample" description="Computes a single sample at a time. Fails if no data is available at this time value.">
			<param name="TimeInMicroSeconds" type="uint64" pass="in" description="Timestamp to check." />
			<param name="SampleValue" type="int64" pass="return" description="Value of the variable at the time step in integer." />
		</method>

	</class>

	<class name="Alert" parent="Base">
	
		<method name="GetUUID" description="Returns Alert UUID.">
			<param name="UUID" type="string" pass="return" description="Returns the alert uuid." />
		</method>

		<method name="IsActive" description="Returns if the alert is actuve.">
			<param name="Active" type="bool" pass="return" description="Returns if the alert is active." />
		</method>

		<method name="GetAlertLevel" description="Returns Alert Level.">
			<param name="Level" type="enum" class="AlertLevel" pass="return" description="Returns the alert level." />
		</method>

		<method name="GetIdentifier" description="Returns Alert Identifier.">
			<param name="Identifier" type="string" pass="return" description="Returns the alert identifier." />
		</method>
	
		<method name="GetReadableContextInformation" description="Returns Alert Custom Information.">
			<param name="ReadableContextInformation" type="string" pass="return" description="Returns context information for the alert." />
		</method>

		<method name="NeedsAcknowledgement" description="Returns if the alert needs acknowledgement.">
			<param name="Value" type="bool" pass="return" description="Flag if alert needs acknowledgement." />
		</method>
	
		<method name="HasBeenAcknowledged" description="Returns if the alert is acknowledged.">
			<param name="Value" type="bool" pass="return" description="Flag if alert is acknowledged." />
		</method>

		<method name="GetAcknowledgementInformation" description="Returns details about the acknowledgement. Fails if the alert is not acknowledged.">
			<param name="UserUUID" type="string" pass="out" description="User who acknowledged the alert." />
			<param name="UserComment" type="string" pass="out" description="Comment of the acknowledgement." />
			<param name="AckTime" type="string" pass="out" description="Timestamp in ISO8601 UTC format." />
		</method>

		<method name="GetAcknowledgementTime" description="Returns the time stamp of the the acknowledgement. Fails if the alert is not acknowledged.">
			<param name="AckTime" type="class" class="DateTime" pass="return" description="Timestamp Instance." />
		</method>

		<method name="AcknowledgeForUser" description="Acknowledges an alert for a specific user and sets it inactive. Fails if Alert is read from an archived journal.">
			<param name="UserUUID" type="string" pass="in" description="UUID of the user to acknowledge. Fails if user does not exist." />
			<param name="UserComment" type="string" pass="in" description="User comment to store. May be empty." />
		</method>

		<method name="AcknowledgeAlertForCurrentUser" description="Acknowledges an alert for the current user and sets it inactive. Only works if the Alert Instance was created from a UIEnvironment. StateEnvironments do not have login information. Fails if Alert is read from an archived journal.">
			<param name="UserComment" type="string" pass="in" description="User comment to store. May be empty." />
		</method>

		<method name="DeactivateAlert" description="Sets an alert inactive. It will not be marked as acknowledged by a certain user. Fails if Alert is read from an archived journal.">
		</method>
		
	</class>

	<class name="AlertIterator" parent="Iterator">
		<method name="GetCurrentAlert" description="Returns the alert the iterator points at.">
			<param name="AlertInstance" type="handle" class="Alert" pass="return" description="returns the Alert instance."/>
		</method>
	</class>

	<class name="LogEntryList" parent="Base" description="Class for accessing an AMCF Log Journal.">
		
		<method name="GetCount" description="Returns the number of log entries in the list.">
			<param name="Count" type="uint32" pass="return" description="Number of log entries."/>
		</method>
		
		<method name="GetEntry" description="Returns the a log entry of the list.">
			<param name="Index" type="uint32" pass="in" description="Index of entry to retrieve. 0-based. Fails if larger or equal to Count."/>
			<param name="Message" type="string" pass="out" description="Message of the log entry."/>
			<param name="SubSystem" type="string" pass="out" description="Subsystem of the log entry."/>
			<param name="LogID" type="uint32" pass="out" description="ID of the log entry."/>
			<param name="LogLevel" type="enum" class="LogLevel" pass="out" description="Level of the log entry."/>
		</method>

		<method name="GetEntryTime" description="Returns the time stamp of an entry.">
			<param name="Index" type="uint32" pass="in" description="Index of entry to retrieve. 0-based. Fails if larger or equal to Count."/>
			<param name="Timestamp" type="class" class="DateTime" pass="return" description="Date Time object of the entry."/>
		</method>
		
	</class>


	<class name="JournalHandler" parent="Base" description="Class for accessing an AMCF journal.">
				
		<method name="RetrieveJournalVariableFromTimeInterval" description = "Retrieves the history of a given variable in the system journal for an arbitrary time interval.">
			<param name="VariableName" type="string" pass="in" description="Variable name to analyse. Fails if Variable does not exist." />
			<param name="StartTimeInMicroseconds" type="uint64" pass="in" description="Start time stamp in microseconds. MUST be smaller than EndTimeInMicroseconds. Fails if larger than recorded time interval." />
			<param name="EndTimeInMicroseconds" type="uint64" pass="in" description="End time stamp in microseconds. MUST be larger than StartTimeInMicroseconds. Fails if larger than recorded time interval." />
			<param name="JournalVariable" type="class" class="JournalVariable" pass="return" description="Journal Instance." />
		</method>
						
		<method name="GetStartTime" description="Retrieves the reference start time of the journal.">
			<param name="DateTimeInstance" type="class" class="DateTime" pass="return" description="DateTime Instance" />
		</method>
	
		<method name="GetEndTime" description="Retrieves the end time of the journal recording.">
			<param name="DateTimeInstance" type="class" class="DateTime" pass="return" description="DateTime Instance" />
		</method>

		<method name="GetJournalLifeTimeInMicroseconds" description="Retrieves the life time of the journal. Which is EndTime minus StartTime.">
			<param name="LifeTimeInMicroseconds" type="uint64" pass="return" description="Life Time." />
		</method>

		<method name="RetrieveLogEntries" description="Retrieves the current log entries of the journal.">
			<param name="TimeDeltaInMicroseconds" type="uint64" pass="in" description="How many microseconds the journal should be retrieved in the past." />
			<param name="MinLogLevel" type="enum" class="LogLevel" pass="out" description="Only entries with a log level that is higher than the given one are returned."/>
			<param name="EntryList" type="class" class="LogEntryList" pass="return" description="Log Entry Instance." />
		</method>

		<method name="RetrieveLogEntriesFromTimeInterval" description="Retrieves the log entries of the journal over the given time interval.">
			<param name="StartTimeInMicroseconds" type="uint64" pass="in" description="Start time stamp in microseconds. MUST be smaller than EndTimeInMicroseconds. Fails if larger than recorded time interval." />
			<param name="EndTimeInMicroseconds" type="uint64" pass="in" description="End time stamp in microseconds. MUST be larger than StartTimeInMicroseconds. Fails if larger than recorded time interval." />
			<param name="MinLogLevel" type="enum" class="LogLevel" pass="out" description="Only entries with a log level that is higher than the given one are returned."/>
			<param name="EntryList" type="class" class="LogEntryList" pass="return" description="Log Entry Instance." />
		</method>

		<method name="RetrieveAlerts" description="Retrieves the alerts of the journal.">
			<param name="TimeDeltaInMicroseconds" type="uint64" pass="in" description="How many microseconds the journal should be retrieved in the past." />
			<param name="IteratorInstance" type="class" class="AlertIterator" pass="return" description="Alert Iterator Instance." />
		</method>

		<method name="RetrieveAlertsFromTimeInterval" description="Retrieves the alerts of the journal over the given time interval.">
			<param name="StartTimeInMicroseconds" type="uint64" pass="in" description="Start time stamp in microseconds. MUST be smaller than EndTimeInMicroseconds. Fails if larger than recorded time interval." />
			<param name="EndTimeInMicroseconds" type="uint64" pass="in" description="End time stamp in microseconds. MUST be larger than StartTimeInMicroseconds. Fails if larger than recorded time interval." />
			<param name="IteratorInstance" type="class" class="AlertIterator" pass="return" description="Alert Iterator Instance." />
		</method>
		
	</class>

	<class name="UserDetailList" parent="Base" description="List of user details at a certain snapshot time.">

		<method name="Count" description="Result Number of Users in the list.">
			<param name="UserCount" type="uint32" pass="return" description="Number of users in the list" />
		</method>

		<method name="GetUserProperties" description="Retrieves all the data of a user in the list. ">
			<param name="UserIndex" type="uint32" pass="in" description="Index of users in the list (0-based). Call will fail if invalid index is provided." />
			<param name="Username" type="string" pass="out" description="User name" />
			<param name="UUID" type="string" pass="out" description="UUID of the user." />
			<param name="Description" type="string" pass="out" description="Description of the user." />
			<param name="Role" type="string" pass="out" description="Role of the user." />
			<param name="LanguageIdentifier" type="string" pass="out" description="LanguageIdentifier of the user." />
		</method>
		
		<method name="GetUsername" description="Retrieves the user name of a user in the list. ">
			<param name="UserIndex" type="uint32" pass="in" description="Index of users in the list (0-based). Call will fail if invalid index is provided." />
			<param name="Username" type="string" pass="return" description="User name" />
		</method>

		<method name="GetUUID" description="Retrieves the UUID of a user in the list. ">
			<param name="UserIndex" type="uint32" pass="in" description="Index of users in the list (0-based). Call will fail if invalid index is provided." />
			<param name="UUID" type="string" pass="return" description="UUID of the user." />
		</method>

		<method name="GetDescription" description="Retrieves the description of a user in the list. ">
			<param name="UserIndex" type="uint32" pass="in" description="Index of users in the list (0-based). Call will fail if invalid index is provided." />
			<param name="Description" type="string" pass="return" description="Description of the user." />
		</method>

		<method name="GetRole" description="Retrieves the role of a user in the list. ">
			<param name="UserIndex" type="uint32" pass="in" description="Index of users in the list (0-based). Call will fail if invalid index is provided." />
			<param name="Role" type="string" pass="return" description="Role of the user." />
		</method>

		<method name="GetLanguage" description="Retrieves the language identifier of a user in the list. ">
			<param name="UserIndex" type="uint32" pass="in" description="Index of users in the list (0-based). Call will fail if invalid index is provided." />
			<param name="LanguageIdentifier" type="string" pass="return" description="Language Identifier of the user." />
		</method>
		
	</class>
	
	<class name="UserManagementHandler" parent="Base" description="Login handler instance">
	
		<method name="UserExists" description="Checks if a user exist.">
			<param name="Username" type="string" pass="in" description="User name" />
			<param name="UserExists" type="bool" pass="return" description="Flag if users exists" />
		</method>
	
		<method name="UserUUIDExists" description="Checks if a user uuid exist.">
			<param name="UUID" type="string" pass="in" description="UUID of the user." />
			<param name="UserExists" type="bool" pass="return" description="Flag if users exists" />
		</method>

		<method name="GetUserProperties" description="Retrieves all users data with one Transaction. Fails if user does not exist.">
			<param name="Username" type="string" pass="in" description="User name" />
			<param name="UUID" type="string" pass="out" description="UUID of the user." />
			<param name="Description" type="string" pass="out" description="Description of the user." />
			<param name="Role" type="string" pass="out" description="Role of the user." />
			<param name="LanguageIdentifier" type="string" pass="out" description="LanguageIdentifier of the user." />
		</method>

		<method name="GetUserPropertiesByUUID" description="Retrieves all users data with one Transaction. Fails if user does not exist.">
			<param name="UUID" type="string" pass="in" description="UUID of the user." />
			<param name="Username" type="string" pass="out" description="User name" />
			<param name="Description" type="string" pass="out" description="Description of the user." />
			<param name="Role" type="string" pass="out" description="Role of the user." />
			<param name="LanguageIdentifier" type="string" pass="out" description="LanguageIdentifier of the user." />
		</method>

		<method name="GetUsernameByUUID" description="Retrieves a users name with a given UUID. Fails if user does not exist.">
			<param name="UUID" type="string" pass="in" description="UUID of the user." />
			<param name="Username" type="string" pass="return" description="User name" />
		</method>

		<method name="GetUserUUID" description="Retrieves a users UUID. Fails if user does not exist.">
			<param name="Username" type="string" pass="in" description="User name" />
			<param name="UUID" type="string" pass="return" description="UUID of the user." />
		</method>

		<method name="GetUserDescription" description="Retrieves a users description. Fails if user does not exist.">
			<param name="Username" type="string" pass="in" description="User name" />
			<param name="Description" type="string" pass="return" description="Description of the user." />
		</method>

		<method name="GetUserDescriptionByUUID" description="Retrieves a users description by the user UUID. Fails if user does not exist.">
			<param name="UUID" type="string" pass="in" description="UUID of the user." />
			<param name="Description" type="string" pass="return" description="Description of the user." />
		</method>

		<method name="GetUserRole" description="Retrieves a users role. Fails if user does not exist.">
			<param name="Username" type="string" pass="in" description="User name" />
			<param name="Role" type="string" pass="return" description="Role of the user." />
		</method>

		<method name="GetUserRoleByUUID" description="Retrieves a users role by the user UUID. Fails if user does not exist.">
			<param name="UUID" type="string" pass="in" description="UUID of the user." />
			<param name="Role" type="string" pass="return" description="Role of the user." />
		</method>

		<method name="GetUserLanguage" description="Retrieves a users language preference. Fails if user does not exist.">
			<param name="Username" type="string" pass="in" description="User name" />
			<param name="LanguageIdentifier" type="string" pass="return" description="Language identifier of the user." />
		</method>
		
		<method name="GetUserLanguageByUUID" description="Retrieves a users language preference by user UUID. Fails if user does not exist.">
			<param name="UUID" type="string" pass="in" description="UUID of the user." />
			<param name="LanguageIdentifier" type="string" pass="return" description="Language identifier of the user." />
		</method>		

		<method name="CreateUser" description="Creates a new user. Fails if the user already exists.">
			<param name="Username" type="string" pass="in" description="User name to create. MUST be alphanumeric and not empty." />
			<param name="Role" type="string" pass="in" description="Role of the new user. MUST NOT be empty." />
			<param name="Salt" type="string" pass="in" description="Salt of the user. MUST NOT be empty. MUST be an SHA256 string." />
			<param name="HashedPassword" type="string" pass="in" description="Hashed Password. MUST be an SHA256 string. HashedPassword MUST NOT be the hash some of the given salt." />
			<param name="Description" type="string" pass="in" description="Description of the new user." />
			<param name="UUID" type="string" pass="return" description="UUID of the new user." />
		</method>

		<method name="SetUserLanguage" description="Updates a users language preference. Fails if user does not exist.">
			<param name="Username" type="string" pass="in" description="User name" />
			<param name="LanguageIdentifier" type="string" pass="in" description="New Language identifier of the user." />
		</method>
		
		<method name="SetUserRole" description="Updates a users role. Fails if user does not exist.">
			<param name="Username" type="string" pass="in" description="User name" />
			<param name="UserRole" type="string" pass="in" description="New Role identifier of the user." />
		</method>

		<method name="SetUserDescription" description="Updates a users description. Fails if user does not exist.">
			<param name="Username" type="string" pass="in" description="User name" />
			<param name="Description" type="string" pass="in" description="New Description of the user." />
		</method>
		
		<method name="SetUserPassword" description="Updates a users password. Fails if user does not exist.">
			<param name="Username" type="string" pass="in" description="User name" />
			<param name="Salt" type="string" pass="in" description="Salt of the user. MUST NOT be empty. MUST be an SHA256 string." />
			<param name="HashedPassword" type="string" pass="in" description="Hashed Password. MUST be an SHA256 string. HashedPassword MUST NOT be the hash some of the given salt." />
		</method>

		<method name="SetUserLanguageByUUID" description="Updates a users language preference. Fails if user does not exist.">
			<param name="UUID" type="string" pass="in" description="UUID of the user." />
			<param name="LanguageIdentifier" type="string" pass="in" description="New Language identifier of the user." />
		</method>
		
		<method name="SetUserRoleByUUID" description="Updates a users role. Fails if user does not exist.">
			<param name="UUID" type="string" pass="in" description="UUID of the user." />
			<param name="UserRole" type="string" pass="in" description="New Role identifier of the user." />
		</method>

		<method name="SetUserDescriptionByUUID" description="Updates a users description. Fails if user does not exist.">
			<param name="UUID" type="string" pass="in" description="UUID of the user." />
			<param name="Description" type="string" pass="in" description="New Description identifier of the user." />
		</method>
		
		<method name="SetUserPasswordByUUID" description="Updates a users password. Fails if user does not exist.">
			<param name="UUID" type="string" pass="in" description="UUID of the user." />
			<param name="Salt" type="string" pass="in" description="Salt of the user. MUST NOT be empty. MUST be an SHA256 string." />
			<param name="HashedPassword" type="string" pass="in" description="Hashed Password. MUST be an SHA256 string. HashedPassword MUST NOT be the hash some of the given salt." />
		</method>
		
		<method name="GetActiveUsers" description="Returns a list of all users.">
			<param name="ListInstance" type="class" class="UserDetailList" pass="return" description="Instance of active users." />		
		</method>
		

	</class>	

	<class name="StateEnvironment" parent="Base" description="Environment of the state">

		<method name="GetMachineState" description="Retrieves the machine state">
			<param name="MachineInstance" type="string" pass="in" description="State machine instance name" />
			<param name="StateName" type="string" pass="return" description="Name of current state" />
		</method>

		<method name="GetPreviousState" description="Retrieves the previous state before this execution. Returns the init state name, if called during the first state during runtime.">
			<param name="StateName" type="string" pass="return" description="Name of previous state" />
		</method>
	  
		<method name="PrepareSignal" description="prepares a signal object to trigger later.">
			<param name="MachineInstance" type="string" pass="in" description="State machine instance name" />
			<param name="SignalName" type="string" pass="in" description="Name Of signal channel." />
			<param name="SignalInstance" type="class" class="SignalTrigger" pass="return" description="Signal trigger object." />
		</method>
	  
		<method name="WaitForSignal" description="Waits for a signal for a certain amount of time.">
			<param name="SignalName" type="string" pass="in" description="Name Of Signal" />
			<param name="TimeOut" type="uint32" pass="in" description="Timeout in Milliseconds. 0 for Immediate return." />			
			<param name="HandlerInstance" type="optionalclass" class="SignalHandler" pass="out" description="Signal object. If Success is false, the Signal Handler Object will be null." />
			<param name="Success" type="bool" pass="return" description="Signal has been triggered" />
		</method>		

		<method name="GetUnhandledSignal" description="Retrieves an unhandled signal By signal type name.">
			<param name="SignalTypeName" type="string" pass="in" description="Name Of Signal to be returned" />
			<param name="HandlerInstance" type="optionalclass" class="SignalHandler" pass="return" description="Signal object. If no signal has been found the signal handler object will be null." />
		</method>		
		
		<method name="ClearAllUnhandledSignals" description="Clears all unhandled signals and marks them invalid.">
		</method>		

		<method name="GetUnhandledSignalByUUID" description="retrieves an unhandled signal from the current state machine by UUID.">
			<param name="UUID" type="string" pass="in" description="Name" />
			<param name="MustExist" type="bool" pass="in" description="The call fails if MustExist is true and not signal with UUID does exist or a signal with UUID has been handled already." />
			<param name="Handler" type="optionalclass" class="SignalHandler" pass="return" description="Signal handler instance. Returns null, if signal does not exist." />
		</method>
		
		<method name="GetDriverLibrary" description="Returns the driver type and library lookup for a specific registered driver.">
			<param name="DriverName" type="string" pass="in" description="Name identifier of the driver." />
			<param name="DriverType" type="string" pass="out" description="returns type identifier of the driver." />
			<param name="DriverLookup" type="pointer" pass="out" description="GetProcAddress Handle of the driver." />
		</method>

		<method name="CreateDriverAccess" description="Accesses and locks a driver for the execution of the current state.">
			<param name="DriverName" type="string" pass="in" description="Name identifier of the driver." />
			<param name="DriverHandle" type="pointer" pass="out" description="Handle of the driver." />
		</method>

		<method name="HasBuildJob" description="Returns if a build object exists. Fails if BuildUUID is not a valid UUID string.">
			<param name="BuildUUID" type="string" pass="in" description="UUID of the build entity." />
			<param name="BuildExists" type="bool" pass="return" description="Returns true if build exists" />
		</method>

		<method name="GetBuildJob" description="Returns a instance of a build object. Fails if build uuid does not exist.">
			<param name="BuildUUID" type="string" pass="in" description="UUID of the build entity." />
			<param name="BuildInstance" type="class" class="Build" pass="return" description="Build instance" />
		</method>

		<method name="HasBuildExecution" description="Returns if a build execution exists. Fails if ExecutionUUID is not a valid UUID string.">
			<param name="ExecutionUUID" type="string" pass="in" description="UUID of the execution entity." />
			<param name="ExecutionExists" type="bool" pass="return" description="Returns true if execution exists" />
		</method>

		<method name="GetBuildExecution" description="Returns a instance of a build execution object. Fails if build execution uuid does not exist.">
			<param name="ExecutionUUID" type="string" pass="in" description="UUID of the execution entity." />
			<param name="ExecutionInstance" type="class" class="BuildExecution" pass="return" description="Build execution instance" />
		</method>

		<method name="UnloadAllToolpathes" description="unloads all toolpath in memory to clean up">
		</method>


		<method name="SetNextState" description="sets the next state">
			<param name="StateName" type="string" pass="in" description="Name of next state" />
		</method>
				
		<method name="LogMessage" description="logs a string as message">
			<param name="LogString" type="string" pass="in" description="String to Log" />
		</method>

		<method name="LogWarning" description="logs a string as warning">
			<param name="LogString" type="string" pass="in" description="String to Log" />
		</method>

		<method name="LogInfo" description="logs a string as info">
			<param name="LogString" type="string" pass="in" description="String to Log" />
		</method>

		<method name="Sleep" description="Puts the current instance to sleep for a definite amount of time. MUST be used instead of a blocking sleep call.">
			<param name="Delay" type="uint32" pass="in" description="Milliseconds to sleeps" />
		</method>

		<method name="CheckForTermination" description="checks environment for termination signal. MUST be called frequently in longer-running operations.">
			<param name="ShallTerminate" type="bool" pass="return" description="Returns if termination shall appear" />
		</method>



		<method name="StoreSignal" description="DEPRECIATED: stores a signal handler in the current state machine">
			<param name="Name" type="string" pass="in" description="Name" />
			<param name="Handler" type="class" class="SignalHandler" pass="in" description="Signal handler to store." />
		</method>

		<method name="RetrieveSignal" description="DEPRECIATED: retrieves a signal handler from the current state machine. Fails if value has not been stored before or signal has been already handled.">
			<param name="Name" type="string" pass="in" description="Name" />
			<param name="Handler" type="class" class="SignalHandler" pass="return" description="Signal handler instance." />
		</method>

		<method name="ClearStoredValue" description="DEPRECIATED: deletes a value from the data store.">
			<param name="Name" type="string" pass="in" description="Name" />
		</method>
		
		
		<method name="SetStringParameter" description="sets a string parameter">
			<param name="ParameterGroup" type="string" pass="in" description="Parameter Group" />
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Value" type="string" pass="in" description="Value to set" />
		</method>

		<method name="SetUUIDParameter" description="sets a uuid parameter">
			<param name="ParameterGroup" type="string" pass="in" description="Parameter Group" />
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Value" type="string" pass="in" description="Value to set" />
		</method>

		<method name="SetDoubleParameter" description="sets a double parameter">
			<param name="ParameterGroup" type="string" pass="in" description="Parameter Group" />
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Value" type="double" pass="in" description="Value to set" />
		</method>

		<method name="SetIntegerParameter" description="sets an int parameter">
			<param name="ParameterGroup" type="string" pass="in" description="Parameter Group" />
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Value" type="int64" pass="in" description="Value to set" />
		</method>

		<method name="SetBoolParameter" description="sets a bool parameter">
			<param name="ParameterGroup" type="string" pass="in" description="Parameter Group" />
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Value" type="bool" pass="in" description="Value to set" />
		</method>

		<method name="GetStringParameter" description="returns a string parameter">
			<param name="ParameterGroup" type="string" pass="in" description="Parameter Group" />
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Value" type="string" pass="return" description="Value to set" />
		</method>

		<method name="GetUUIDParameter" description="returns a uuid parameter">
			<param name="ParameterGroup" type="string" pass="in" description="Parameter Group" />
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Value" type="string" pass="return" description="Value to set" />
		</method>

		<method name="GetDoubleParameter" description="returns a double parameter">
			<param name="ParameterGroup" type="string" pass="in" description="Parameter Group" />
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Value" type="double" pass="return" description="Value to set" />
		</method>

		<method name="GetIntegerParameter" description="returns an int parameter">
			<param name="ParameterGroup" type="string" pass="in" description="Parameter Group" />
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Value" type="int64" pass="return" description="Value to set" />
		</method>

		<method name="GetBoolParameter" description="returns a bool parameter">
			<param name="ParameterGroup" type="string" pass="in" description="Parameter Group" />
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Value" type="bool" pass="return" description="Value to set" />
		</method>
		
		<method name="HasResourceData" description = "retrieves if the machine resources has data with the given identifier.">
			<param name="Identifier" type="string" pass="in" description="identifier of the binary data in the machine resource package." />
			<param name="HasResourceData" type="bool" pass="return" description="returns true if the resource exists in the machine resource package." />
		</method>

		<method name="LoadResourceData" description="loads a plugin resource file into memory.">
			<param name="ResourceName" type="string" pass="in" description="Name of the resource." />
			<param name="ResourceData" type="basicarray" class="uint8" pass="out" description="Resource Data Buffer." />
		</method>

		<method name="LoadResourceString" description="loads a plugin resource file into a string. Fails if content is not a valid UTF8 string.">
			<param name="ResourceName" type="string" pass="in" description="Name of the resource." />
			<param name="ResourceData" type="string" pass="return" description="Resource Data String." />
		</method>

		<method name="CreateEmptyImage" description="creates an empty image object.">
			<param name="PixelSizeX" type="uint32" pass="in" description="Pixel size in X. MUST be positive." />
			<param name="PixelSizeY" type="uint32" pass="in" description="Pixel size in Y. MUST be positive." />
			<param name="DPIValueX" type="double" pass="in" description="DPI Value in X. MUST be positive." />
			<param name="DPIValueY" type="double" pass="in" description="DPI Value in Y. MUST be positive." />
			<param name="PixelFormat" type="enum" class="ImagePixelFormat" pass="in" description="Pixel format to use." />
			<param name="ImageDataInstance" type="class" class="ImageData" pass="return" description="Empty image instance." />
		</method>		
		
		<method name="CreateImageLoader" description="creates an image loader object.">			
			<param name="ImageLoaderInstance" type="class" class="ImageLoader" pass="return" description="Image loader instance." />
		</method>		

		<method name="CreateDiscreteField2D" description="Creates an empty discrete field.">
			<param name="PixelCountX" type="uint32" pass="in" description="Pixel count in X. MUST be positive." />
			<param name="PixelCountY" type="uint32" pass="in" description="Pixel count in Y. MUST be positive." />
			<param name="DPIValueX" type="double" pass="in" description="DPI Value in X. MUST be positive." />
			<param name="DPIValueY" type="double" pass="in" description="DPI Value in Y. MUST be positive." />
			<param name="OriginX" type="double" pass="in" description="Origin X of the field in mm." />
			<param name="OriginY" type="double" pass="in" description="Origin Y of the field in mm." />
			<param name="DefaultValue" type="double" pass="in" description="Default value of the field." />
			<param name="FieldDataInstance" type="class" class="DiscreteFieldData2D" pass="return" description="Empty field instance." />
		</method>	

		<method name="CreateDiscreteField2DFromImage" description="Creates a discrete field from the greyscale values of an image. RGB colors in the image will be averaged to obtain a greyscale color.">
			<param name="ImageDataInstance" type="class" class="ImageData" pass="in" description="Image instance containing the pixel data." />
			<param name="BlackValue" type="double" pass="in" description="Value that the minimum color (black) shall be mapped to." />
			<param name="WhiteValue" type="double" pass="in" description="Value that the maximum color (white) shall be mapped to." />
			<param name="OriginX" type="double" pass="in" description="Origin X of the field in mm." />
			<param name="OriginY" type="double" pass="in" description="Origin Y of the field in mm." />
			<param name="FieldDataInstance" type="class" class="DiscreteFieldData2D" pass="return" description="Empty field instance." />
		</method>
		
		<method name="GetGlobalTimerInMilliseconds" description="Returns the global timer in milliseconds.">
			<param name="TimerValue" type="uint64" pass="return" description="Timer value in Milliseconds" />
		</method>

		<method name="GetGlobalTimerInMicroseconds" description="Returns the global timer in microseconds.">
			<param name="TimerValue" type="uint64" pass="return" description="Timer value in Microseconds" />
		</method>

		<method name="GetStartTimeOfStateInMilliseconds" description="Returns the global start timer of the current state in milliseconds.">
			<param name="TimerValue" type="uint64" pass="return" description="Timer value in Milliseconds" />
		</method>

		<method name="GetStartTimeOfStateInMicroseconds" description="Returns the global start timer of the current state in microseconds.">
			<param name="TimerValue" type="uint64" pass="return" description="Timer value in Milliseconds" />
		</method>

		<method name="GetEndTimeOfPreviousStateInMicroseconds" description="Returns the global finish timer of the previous state in microseconds.">
			<param name="TimerValue" type="uint64" pass="return" description="Timer value in Microseconds" />
		</method>

		<method name="GetEndTimeOfPreviousStateInMilliseconds" description="Returns the global finish timer of the previous state in milliseconds.">
			<param name="TimerValue" type="uint64" pass="return" description="Timer value in Milliseconds" />
		</method>

		<method name="GetElapsedTimeInStateInMilliseconds" description="Returns the global finish timer of the previous state in milliseconds.">
			<param name="TimerValue" type="uint64" pass="return" description="Timer value in Milliseconds" />
		</method>

		<method name="GetElapsedTimeInStateInMicroseconds" description="Returns the global finish timer of the previous state in microseconds.">
			<param name="TimerValue" type="uint64" pass="return" description="Timer value in Microseconds" />
		</method>

		<method name="GetCurrentDateTime" description="Returns the current time as DateTime object instance.">
			<param name="DateTime" type="class" class="DateTime" pass="return" description="Date Time Instance." />
		</method>

		<method name="GetCustomDateTime" description="Returns a custom time as DateTime object instance. Fails if the values are not a valid time from January first 1970 to year 1 million.">
			<param name="Year" type="uint32" pass="in" description="Year. Must be larger or equal than 1970." />
			<param name="Month" type="uint32" pass="in" description="Month. Must be between 1 and 12." />
			<param name="Day" type="uint32" pass="in" description="Day. Must be between 1 and 31." />
			<param name="Hour" type="uint32" pass="in" description="Hour. Must be between 0 and 23." />
			<param name="Minute" type="uint32" pass="in" description="Minute. Must be between 0 and 59." />
			<param name="Second" type="uint32" pass="in" description="Second. Must be between 0 and 59." />
			<param name="Microsecond" type="uint32" pass="in" description="Microsecond. Must be between 0 and 999999." />
			<param name="DateTime" type="class" class="DateTime" pass="return" description="Date Time Instance." />
		</method>

		<method name="GetStartDateTime" description="Returns the startup time of the system as DateTime object instance. All Timer values are counted from there.">
			<param name="DateTime" type="class" class="DateTime" pass="return" description="Date Time Instance." />
		</method>

		<method name="GetTestEnvironment" description="Returns a test environment instance.">
			<param name="TestEnvironment" type="class" class="TestEnvironment" pass="return" description="Test Environment Instance" />
		</method>
		
		<method name="CreateXMLDocument" description = "creates an empty XML Document.">
			<param name="RootNodeName" type="string" pass="in" description="Name of the root node. MUST be a valid XML Node Name string." />
			<param name="DefaultNamespace" type="string" pass="in" description="Default namespace of the document. MUST be a valid XML namespace string." />
			<param name="XMLDocument" type="class" class="XMLDocument" pass="return" description="XML Document Instance." />
		</method>

		<method name="ParseXMLString" description = "parses an XML String and returns an XML Document instance. Throws an error if XML is malformatted.">
			<param name="XMLString" type="string" pass="in" description="XML String." />
			<param name="XMLDocument" type="class" class="XMLDocument" pass="return" description="XML Document Instance." />
		</method>

		<method name="ParseXMLData" description = "parses a XML stored in a byte array and returns an XML Document instance. . Throws an error if XML is malformatted.">
			<param name="XMLData" type="basicarray" class="uint8" pass="in" description="XML Binary data." />
			<param name="XMLDocument" type="class" class="XMLDocument" pass="return" description="XML Document Instance." />
		</method>
		
		<method name="CreateDataTable" description = "creates an empty data table.">
			<param name="DataTableInstance" type="class" class="DataTable" pass="return" description="Data Table Instance." />
		</method>

		<method name="CheckUserPermission" description="Returns if the a user has a certain permission. Fails if user or permission is not known to the system.">
			<param name="UserLogin" type="string" pass="in" description="Login of user to check" />
			<param name="PermissionIdentifier" type="string" pass="in" description="Permission identifier" />
			<param name="UserHasPermission" type="bool" pass="return" description="Returns if the user has permission" />
		</method>
		
		<method name="CreateUserManagement" description="Returns a user management handler instance.">
			<param name="UserManagementInstance" type="class" class="UserManagementHandler" pass="return" description="Returns a user management handler." />
		</method>	
		
		<method name="GetCurrentJournal" description="Returns the journal instance of the current session.">
			<param name="JournalHandler" type="class" class="JournalHandler" pass="return" description="Journal instance." />
		</method>	
						
		
		<method name="CreateSceneHandler" description="Creates a new 3D scene handler instance.">
			<param name="Instance" type="class" class="SceneHandler" pass="return" description="Scene Handler instance." />
		</method>	
				
		<method name="CreateDataSeries" description="Creates a new empty data series object.">
			<param name="Name" type="string" pass="in" description="Name to use for this data series. MUST NOT be an empty string." />
			<param name="Instance" type="class" class="DataSeries" pass="return" description="Data series instance." />
		</method>	

		<method name="HasDataSeries" description="Checks if a data series exist.">
			<param name="DataSeriesUUID" type="string" pass="in" description="UUID to find." />
			<param name="DataSeriesExists" type="bool" pass="return" description="returns true if series exists." />
		</method>	

		<method name="FindDataSeries" description="Finds a data series. Fails if data series does not exist.">
			<param name="DataSeriesUUID" type="string" pass="in" description="UUID to find." />
			<param name="Instance" type="class" class="DataSeries" pass="return" description="Data series instance." />
		</method>	

		<method name="ReleaseDataSeries" description="Releases the memory of a data series. Fails if data series does not exist.">
			<param name="DataSeriesUUID" type="string" pass="in" description="UUID to release." />
		</method>	
		
		<method name="CreateAlert" description="creates a new alert">
			<param name="Identifier" type="string" pass="in" description="Alert type identifier. Call fails if identifier is not registered." />
			<param name="ReadableContextInformation" type="string" pass="in" description="Context information string that can be displayed to the user." />
			<param name="AutomaticLogEntry" type="bool" pass="in" description="If this flag is set to true, an automatic message will be posted to the system log." />
			<param name="Alert" type="class" class="Alert" pass="return" description="Alert instance." />
		</method>

		<method name="FindAlert" description="finds an alert by UUID. Fails if alert does not exist.">
			<param name="UUID" type="string" pass="in" description="UUID of the alert to return." />
			<param name="Alert" type="class" class="Alert" pass="return" description="Alert instance." />
		</method>

		<method name="AlertExists" description="Checks if a certain alert exists.">
			<param name="UUID" type="string" pass="in" description="UUID of the alert to return." />
			<param name="Value" type="bool" pass="return" description="True if alert exists." />
		</method>

		<method name="RetrieveAlerts" description="Retrieves all or all active alerts.">
			<param name="OnlyActive" type="bool" pass="in" description="If true, only active alerts will be returned." />	
			<param name="IteratorInstance" type="class" class="AlertIterator" pass="return" description="AlertIterator Instance" />	
		</method>	

		<method name="RetrieveAlertsByType" description="Retrieves alerts of a certain type identifier.">
			<param name="Identifier" type="string" pass="in" description="Alert Identifier to look for. Fails if empty." />	
			<param name="OnlyActive" type="bool" pass="in" description="If true, only active alerts will be returned." />	
			<param name="IteratorInstance" type="class" class="AlertIterator" pass="return" description="AlertIterator Instance" />	
		</method>				

		<method name="HasAlertOfType" description="Checks, if an alert of a certain type identifier exists.">
			<param name="Identifier" type="string" pass="in" description="Alert Identifier to look for. Fails if empty." />	
			<param name="OnlyActive" type="bool" pass="in" description="If true, only active alerts will be taken into account." />	
			<param name="HasAlert" type="bool" pass="return" description="Flag, if the alert exists." />	
		</method>				

		<method name="CreateCryptoContext" description="Creates a crypto context.">
			<param name="Context" type="class" class="CryptoContext" pass="return" description="Cryptographic context instance" />
		</method>
		
		<method name="CreateTemporaryStream" description="Creates a new writer to store temporary data. This data will be attached to the current journal.">
			<param name="Name" type="string" pass="in" description="Name of the storage stream." />
			<param name="MIMEType" type="string" pass="in" description="Mime type of the data." />
			<param name="TempStreamInstance" type="class" class="TempStreamWriter" pass="return" description="Temp stream writer instance" />
		</method>
		
		<method name="CreateZIPStream" description="Creates a new ZIP writer to store temporary data. This data will be attached to the current journal. MIME Type will be application/zip">
			<param name="Name" type="string" pass="in" description="Name of the storage stream." />
			<param name="ZIPStreamInstance" type="class" class="ZIPStreamWriter" pass="return" description="ZIP stream writer instance" />
		</method>

		<method name="LoadStream" description="Loads a stream in the storage system.">
			<param name="UUID" type="string" pass="in" description="UUID of the storage stream." />
			<param name="MustExist" type="bool" pass="in" description="If true, the call fails if the stream does not exist." />
			<param name="StreamInstance" type="optionalclass" class="StreamReader" pass="return" description="Stream Instance. Will return null if not found and MustExists is false." />
		</method>

	</class>

	<class name="UIItem" parent="Base" description="Base item that represents a user interface element.">
	
		<method name="GetName" description="Returns the name of the user interface item. MUST be unique within its siblings.">
			<param name="Name" type="string" pass="return" description="Returns the name." />
		</method>
	
		<method name="GetPath" description="Returns the full path of the user interface item. MUST be unique.">
			<param name="Path" type="string" pass="return" description="Returns the path." />
		</method>

		<method name="GetUUID" description="Returns the UUID of the time stream chart object.">
			<param name="UUID" type="string" pass="return" description="Returns uuid." />
		</method>
	
	</class>


	<class name="UIEnvironment" parent="Base" description="Environment of the UI">
	  
		<method name="ActivateModalDialog" description="activates a modal dialog on the client.">
			<param name="DialogName" type="string" pass="in" description="Name of the dialog to activate." />
		</method>

		<method name="CloseModalDialog" description="closes the active modal dialog on the client.">
		</method>
	  
		<method name="ActivatePage" description="changes the current page on the client.">
			<param name="PageName" type="string" pass="in" description="Name of the page to activate." />
		</method>

	  	<method name="LogOut" description="Logs out the client session.">
		</method>

		<method name="ShowHint" description="Shows a hint message in the user interface.">
			<param name="Hint" type="string" pass="in" description="Hint to show." />
			<param name="TimeoutInMS" type="uint32" pass="in" description="How many milliseconds the snackbar should be shown." />
		</method>

		<method name="HasResourceData" description = "retrieves if the machine resources has data with the given identifier.">
			<param name="Identifier" type="string" pass="in" description="identifier of the binary data in the machine resource package." />
			<param name="HasResourceData" type="bool" pass="return" description="returns true if the resource exists in the machine resource package." />
		</method>

		<method name="LoadResourceData" description="loads a plugin resource file into memory.">
			<param name="ResourceName" type="string" pass="in" description="Name of the resource." />
			<param name="ResourceData" type="basicarray" class="uint8" pass="out" description="Resource Data Buffer." />
		</method>

		<method name="LoadResourceString" description="loads a plugin resource file into a string. Fails if content is not a valid UTF8 string.">
			<param name="ResourceName" type="string" pass="in" description="Name of the resource." />
			<param name="ResourceData" type="string" pass="return" description="Resource Data String." />
		</method>

		<method name="ShowHintColored" description="Shows a hint message in the user interface in a certain color.">		
			<param name="Hint" type="string" pass="in" description="Hint to show." />
			<param name="TimeoutInMS" type="uint32" pass="in" description="How many milliseconds the snackbar should be shown." />
			<param name="Color" type="struct" class="ColorRGB" pass="in" description="Background color of hint." />
			<param name="FontColor" type="struct" class="ColorRGB" pass="in" description="Font color of hint." />
		</method>

		<method name="HideHint" description="Hides hint if any is displayed.">
		</method>

		<method name="StartStreamDownload" description="Starts a stream download on the client. Fails if stream does not exist.">
			<param name="UUID" type="string" pass="in" description="Stream UUID." />
			<param name="Filename" type="string" pass="in" description="Filename on disk. Fails if empty string." />
		</method>

		<method name="ShowMessageDlg" description="Shows a message dialog in the user interface.">
			<param name="Caption" type="string" pass="in" description="Caption of the dialog" />
			<param name="Title" type="string" pass="in" description="Title of the dialog" />
			<param name="DialogType" type="enum" class="MessageDialogType" pass="in" description="Which dialog type shall be shown." />
			<param name="YesEvent" type="string" pass="in" description="Event to be called when clicked yes or ok." />
			<param name="NoEvent" type="string" pass="in" description="Event to be called when clicked no." />
			<param name="CancelEvent" type="string" pass="in" description="Event to be called when dialog is closed or cancel is pressed." />
			<param name="DialogUUID" type="string" pass="return" description="Dialog UUID. Will be set as sender for triggered events." />
		</method>

		<method name="RetrieveEventSender" description="returns path of the UI control that triggered the event.">
			<param name="SenderPath" type="string" pass="return" description="Path of the sender element." />
		</method>

		<method name="RetrieveEventSenderPage" description="returns name of the page of the UI control that triggered the event.">
			<param name="PageName" type="string" pass="return" description="Page of the sender element." />
		</method>

		<method name="RetrieveEventSenderUUID" description="returns uuid of the UI control that triggered the event.">
			<param name="SenderUUID" type="string" pass="return" description="Name of the sender uuid." />
		</method>
				
	  
		<method name="PrepareSignal" description="prepares a signal object to trigger later.">
			<param name="MachineInstance" type="string" pass="in" description="State machine instance name" />
			<param name="SignalName" type="string" pass="in" description="Name Of signal channel." />
			<param name="SignalInstance" type="class" class="SignalTrigger" pass="return" description="Signal trigger object." />
		</method>		
	  		
		<method name="GetMachineState" description="Retrieves the machine state">
			<param name="MachineInstance" type="string" pass="in" description="State machine instance name" />
			<param name="StateName" type="string" pass="return" description="Name of current state" />
		</method>

		<method name="LogMessage" description="logs a string as message">
			<param name="LogString" type="string" pass="in" description="String to Log" />
		</method>

		<method name="LogWarning" description="logs a string as warning">
			<param name="LogString" type="string" pass="in" description="String to Log" />
		</method>

		<method name="LogInfo" description="logs a string as info">
			<param name="LogString" type="string" pass="in" description="String to Log" />
		</method>

								
		<method name="GetMachineParameter" description="returns a string parameter of a state machine">
			<param name="MachineInstance" type="string" pass="in" description="State machine instance name" />
			<param name="ParameterGroup" type="string" pass="in" description="Parameter Group" />
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Value" type="string" pass="return" description="Current Parameter Value" />
		</method>

		<method name="GetMachineParameterAsUUID" description="returns a uuid parameter of a state machine">
			<param name="MachineInstance" type="string" pass="in" description="State machine instance name" />
			<param name="ParameterGroup" type="string" pass="in" description="Parameter Group" />
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Value" type="string" pass="return" description="Current Parameter Value" />
		</method>

		<method name="GetMachineParameterAsDouble" description="returns a double parameter of a state machine">
			<param name="MachineInstance" type="string" pass="in" description="State machine instance name" />
			<param name="ParameterGroup" type="string" pass="in" description="Parameter Group" />
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Value" type="double" pass="return" description="Current Parameter Value" />
		</method>

		<method name="GetMachineParameterAsInteger" description="returns an int parameter of a state machine">
			<param name="MachineInstance" type="string" pass="in" description="State machine instance name" />
			<param name="ParameterGroup" type="string" pass="in" description="Parameter Group" />
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Value" type="int64" pass="return" description="Current Parameter Value" />
		</method>

		<method name="GetMachineParameterAsBool" description="returns a bool parameter of a state machine">
			<param name="MachineInstance" type="string" pass="in" description="State machine instance name" />
			<param name="ParameterGroup" type="string" pass="in" description="Parameter Group" />
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Value" type="bool" pass="return" description="Current Parameter Value" />
		</method>



		<method name="GetUIProperty" description="returns a string property of a UI element on the client">
			<param name="ElementPath" type="string" pass="in" description="Path of UI Element. Fails if element does not exist." />
			<param name="PropertyName" type="string" pass="in" description="Property name. Fails if property does not exist." />
			<param name="Value" type="string" pass="return" description="Current property Value" />
		</method>

		<method name="GetUIPropertyAsUUID" description="returns a uuid variable of a UI element on the client">
			<param name="ElementPath" type="string" pass="in" description="Path of UI Element. Fails if element does not exist." />
			<param name="PropertyName" type="string" pass="in" description="Property name. Fails if property does not exist." />
			<param name="Value" type="string" pass="return" description="Current property Value" />
		</method>

		<method name="GetUIPropertyAsDouble" description="returns a double variable of a UI element on the client">
			<param name="ElementPath" type="string" pass="in" description="Path of UI Element. Fails if element does not exist." />
			<param name="PropertyName" type="string" pass="in" description="Property name. Fails if property does not exist." />
			<param name="Value" type="double" pass="return" description="Current property Value" />
		</method>

		<method name="GetUIPropertyAsInteger" description="returns a integer variable of a UI element on the client">
			<param name="ElementPath" type="string" pass="in" description="Path of UI Element. Fails if element does not exist." />
			<param name="PropertyName" type="string" pass="in" description="Property name. Fails if property does not exist." />
			<param name="Value" type="int64" pass="return" description="Current property Value" />
		</method>

		<method name="GetUIPropertyAsBool" description="returns a integer variable of a UI element on the client">
			<param name="ElementPath" type="string" pass="in" description="Path of UI Element. Fails if element does not exist." />
			<param name="PropertyName" type="string" pass="in" description="Property name. Fails if property does not exist." />
			<param name="Value" type="bool" pass="return" description="Current property Value" />
		</method>


		<method name="SetUIProperty" description="sets a string property of a UI element on the client.">
			<param name="ElementPath" type="string" pass="in" description="Path of UI Element. Fails if element does not exist." />
			<param name="PropertyName" type="string" pass="in" description="Property name. Fails if property does not exist or is readonly." />
			<param name="Value" type="string" pass="in" description="New property Value" />
		</method>

		<method name="SetUIPropertyAsUUID" description="sets a uuid property of a UI element on the client.">
			<param name="ElementPath" type="string" pass="in" description="Path of UI Element. Fails if element does not exist." />
			<param name="PropertyName" type="string" pass="in" description="Property name. Fails if property does not exist or is readonly." />
			<param name="Value" type="string" pass="in" description="New property Value" />
		</method>

		<method name="SetUIPropertyAsDouble" description="sets a double property of a UI element on the client.">
			<param name="ElementPath" type="string" pass="in" description="Path of UI Element. Fails if element does not exist." />
			<param name="PropertyName" type="string" pass="in" description="Property name. Fails if property does not exist or is readonly." />
			<param name="Value" type="double" pass="in" description="New property Value" />
		</method>

		<method name="SetUIPropertyAsInteger" description="sets a integer property of a UI element on the client.">
			<param name="ElementPath" type="string" pass="in" description="Path of UI Element. Fails if element does not exist." />
			<param name="PropertyName" type="string" pass="in" description="Property name. Fails if property does not exist or is readonly." />
			<param name="Value" type="int64" pass="in" description="New property Value" />
		</method>

		<method name="SetUIPropertyAsBool" description="sets a bool property of a UI element on the client.">
			<param name="ElementPath" type="string" pass="in" description="Path of UI Element. Fails if element does not exist." />
			<param name="PropertyName" type="string" pass="in" description="Property name. Fails if property does not exist or is readonly." />
			<param name="Value" type="bool" pass="in" description="New property Value" />
		</method>
		
		<method name="CreateEmptyImage" description="creates an empty image object.">
			<param name="PixelSizeX" type="uint32" pass="in" description="Pixel size in X. MUST be positive." />
			<param name="PixelSizeY" type="uint32" pass="in" description="Pixel size in Y. MUST be positive." />
			<param name="DPIValueX" type="double" pass="in" description="DPI Value in X. MUST be positive." />
			<param name="DPIValueY" type="double" pass="in" description="DPI Value in Y. MUST be positive." />
			<param name="PixelFormat" type="enum" class="ImagePixelFormat" pass="in" description="Pixel format to use." />
			<param name="ImageDataInstance" type="class" class="ImageData" pass="return" description="Empty image instance." />
		</method>		
		
		<method name="CreateImageLoader" description="creates an image loader object.">			
			<param name="ImageLoaderInstance" type="class" class="ImageLoader" pass="return" description="Image loader instance." />
		</method>		

		<method name="GetGlobalTimerInMilliseconds" description="Returns the global timer in milliseconds.">
			<param name="TimerValue" type="uint64" pass="return" description="Timer value in Milliseconds" />
		</method>
		
		<method name="GetGlobalTimerInMicroseconds" description="Returns the global timer in microseconds.">
			<param name="TimerValue" type="uint64" pass="return" description="Timer value in Microseconds" />
		</method>

		<method name="GetTestEnvironment" description="Returns a test environment instance.">
			<param name="TestEnvironment" type="class" class="TestEnvironment" pass="return" description="Test Environment Instance" />
		</method>
		
		<method name="CreateXMLDocument" description = "creates an empty XML Document.">
			<param name="RootNodeName" type="string" pass="in" description="Name of the root node. MUST be a valid XML Node Name string." />
			<param name="DefaultNamespace" type="string" pass="in" description="Default namespace of the document. MUST be a valid XML namespace string." />
			<param name="XMLDocument" type="class" class="XMLDocument" pass="return" description="XML Document Instance." />
		</method>

		<method name="ParseXMLString" description = "parses an XML String and returns an XML Document instance. Throws an error if XML is malformatted.">
			<param name="XMLString" type="string" pass="in" description="XML String." />
			<param name="XMLDocument" type="class" class="XMLDocument" pass="return" description="XML Document Instance." />
		</method>

		<method name="ParseXMLData" description = "parses a XML stored in a byte array and returns an XML Document instance. . Throws an error if XML is malformatted.">
			<param name="XMLData" type="basicarray" class="uint8" pass="in" description="XML Binary data." />
			<param name="XMLDocument" type="class" class="XMLDocument" pass="return" description="XML Document Instance." />
		</method>

		<method name="CreateDataTable" description = "creates an empty data table.">
			<param name="DataTableInstance" type="class" class="DataTable" pass="return" description="Data Table Instance." />
		</method>

		<method name="HasBuildJob" description="Returns if a build object exists. Fails if BuildUUID is not a valid UUID string.">
			<param name="BuildUUID" type="string" pass="in" description="UUID of the build entity." />
			<param name="BuildExists" type="bool" pass="return" description="Returns true if build exists" />
		</method>
		
		<method name="GetBuildJob" description="Returns a instance of a build object. Fails if build uuid does not exist.">
			<param name="BuildUUID" type="string" pass="in" description="UUID of the build entity." />
			<param name="BuildInstance" type="class" class="Build" pass="return" description="Build instance" />
		</method>		

		<method name="HasBuildExecution" description="Returns if a build execution exists. Fails if ExecutionUUID is not a valid UUID string.">
			<param name="ExecutionUUID" type="string" pass="in" description="UUID of the execution entity." />
			<param name="ExecutionExists" type="bool" pass="return" description="Returns true if execution exists" />
		</method>

		<method name="GetBuildExecution" description="Returns a instance of a build execution object. Fails if build execution uuid does not exist.">
			<param name="ExecutionUUID" type="string" pass="in" description="UUID of the execution entity." />
			<param name="ExecutionInstance" type="class" class="BuildExecution" pass="return" description="Build execution instance" />
		</method>

		<method name="CreateDiscreteField2D" description="Creates an empty discrete field.">
			<param name="PixelCountX" type="uint32" pass="in" description="Pixel count in X. MUST be positive." />
			<param name="PixelCountY" type="uint32" pass="in" description="Pixel count in Y. MUST be positive." />
			<param name="DPIValueX" type="double" pass="in" description="DPI Value in X. MUST be positive." />
			<param name="DPIValueY" type="double" pass="in" description="DPI Value in Y. MUST be positive." />
			<param name="OriginX" type="double" pass="in" description="Origin X of the field in mm." />
			<param name="OriginY" type="double" pass="in" description="Origin Y of the field in mm." />
			<param name="DefaultValue" type="double" pass="in" description="Default value of the field." />
			<param name="FieldDataInstance" type="class" class="DiscreteFieldData2D" pass="return" description="Empty field instance." />
		</method>	

		<method name="CreateDiscreteField2DFromImage" description="Creates a discrete field from the greyscale values of an image. RGB colors in the image will be averaged to obtain a greyscale color.">
			<param name="ImageDataInstance" type="class" class="ImageData" pass="in" description="Image instance containing the pixel data." />
			<param name="BlackValue" type="double" pass="in" description="Value that the minimum color (black) shall be mapped to." />
			<param name="WhiteValue" type="double" pass="in" description="Value that the maximum color (white) shall be mapped to." />
			<param name="OriginX" type="double" pass="in" description="Origin X of the field in mm." />
			<param name="OriginY" type="double" pass="in" description="Origin Y of the field in mm." />
			<param name="FieldDataInstance" type="class" class="DiscreteFieldData2D" pass="return" description="Empty field instance." />
		</method>
		
		<method name="CheckPermission" description="Returns if the current user has a certain permission. Fails if permission is not known to the system.">
			<param name="PermissionIdentifier" type="string" pass="in" description="Permission identifier" />
			<param name="UserHasPermission" type="bool" pass="return" description="Returns if the user has permission" />
		</method>		
		
		<method name="GetCurrentUserLogin" description="Returns the current user login name.">
			<param name="UserLogin" type="string" pass="return" description="Returns the current users login name." />
		</method>	

		<method name="GetCurrentUserDescription" description="Returns the current user description.">
			<param name="UserDescription" type="string" pass="return" description="Returns the current users description." />
		</method>	

		<method name="GetCurrentUserRole" description="Returns the current user role identifier.">
			<param name="UserRole" type="string" pass="return" description="Returns the current users role identifier." />
		</method>		

		<method name="GetCurrentUserLanguage" description="Returns the current users language identifier.">
			<param name="UserLanguage" type="string" pass="return" description="Returns the current users language identifier." />
		</method>		

		<method name="GetCurrentUserUUID" description="Returns the current user UUID.">
			<param name="UserUUID" type="string" pass="return" description="Returns the current user UUID." />
		</method>		

		<method name="CreateUserManagement" description="Returns a user management handler instance.">
			<param name="UserManagementInstance" type="class" class="UserManagementHandler" pass="return" description="Returns a user management handler." />
		</method>	
		
		<method name="GetCurrentJournal" description="Returns the journal instance of the current session.">
			<param name="JournalHandler" type="class" class="JournalHandler" pass="return" description="Journal instance." />
		</method>	

		
		<method name="CreateSceneHandler" description="Creates a new 3D scene handler instance.">
			<param name="Instance" type="class" class="SceneHandler" pass="return" description="Scene Handler instance." />
		</method>	
				
		<method name="CreateDataSeries" description="Creates a new empty data series object.">
			<param name="Name" type="string" pass="in" description="Name to use for this data series. MUST NOT be an empty string." />
			<param name="BoundToLogin" type="bool" pass="in" description="If true, the data series is tied to the current user login session. If false, the data series will persist until explicitely released. This can be dangerous for the overall machine stability." />
			<param name="Instance" type="class" class="DataSeries" pass="return" description="Data series instance." />
		</method>	

		<method name="HasDataSeries" description="Checks if a data series exist.">
			<param name="DataSeriesUUID" type="string" pass="in" description="UUID to find." />
			<param name="DataSeriesExists" type="bool" pass="return" description="returns true if series exists." />
		</method>	

		<method name="FindDataSeries" description="Finds a data series. Fails if data series does not exist.">
			<param name="DataSeriesUUID" type="string" pass="in" description="UUID to find." />
			<param name="Instance" type="class" class="DataSeries" pass="return" description="Data series instance." />
		</method>	

		<method name="ReleaseDataSeries" description="Releases the memory of a data series. Fails if data series does not exist.">
			<param name="DataSeriesUUID" type="string" pass="in" description="UUID to release." />
		</method>	
		
		<method name="CreateAlert" description="creates a new alert">
			<param name="Identifier" type="string" pass="in" description="Alert type identifier. Call fails if identifier is not registered." />
			<param name="ReadableContextInformation" type="string" pass="in" description="Context information string that can be displayed to the user." />
			<param name="AutomaticLogEntry" type="bool" pass="in" description="If this flag is set to true, an automatic message will be posted to the system log." />
			<param name="Alert" type="class" class="Alert" pass="return" description="Alert instance." />
		</method>

		<method name="FindAlert" description="finds an alert by UUID. Fails if alert does not exist.">
			<param name="UUID" type="string" pass="in" description="UUID of the alert to return." />
			<param name="Alert" type="class" class="Alert" pass="return" description="Alert instance." />
		</method>

		<method name="AlertExists" description="Checks if a certain alert exists.">
			<param name="UUID" type="string" pass="in" description="UUID of the alert to return." />
			<param name="Value" type="bool" pass="return" description="True if alert exists." />
		</method>

		<method name="RetrieveAlerts" description="Retrieves all or all active alerts.">
			<param name="OnlyActive" type="bool" pass="in" description="If true, only active alerts will be returned." />	
			<param name="IteratorInstance" type="class" class="AlertIterator" pass="return" description="AlertIterator Instance" />	
		</method>	

		<method name="RetrieveAlertsByType" description="Retrieves alerts of a certain type identifier.">
			<param name="Identifier" type="string" pass="in" description="Alert Identifier to look for. Fails if empty." />	
			<param name="OnlyActive" type="bool" pass="in" description="If true, only active alerts will be returned." />	
			<param name="IteratorInstance" type="class" class="AlertIterator" pass="return" description="AlertIterator Instance" />	
		</method>				

		<method name="HasAlertOfType" description="Checks, if an alert of a certain type identifier exists.">
			<param name="Identifier" type="string" pass="in" description="Alert Identifier to look for. Fails if empty." />	
			<param name="OnlyActive" type="bool" pass="in" description="If true, only active alerts will be taken into account." />	
			<param name="HasAlert" type="bool" pass="return" description="Flag, if the alert exists." />	
		</method>				

		<method name="CreateCryptoContext" description="Creates a crypto context.">
			<param name="Context" type="class" class="CryptoContext" pass="return" description="Cryptographic context instance" />
		</method>

		<method name="CreateTemporaryStream" description="Creates a new writer to store temporary data. This data will be attached to the current journal.">
			<param name="Name" type="string" pass="in" description="Name of the storage stream." />
			<param name="MIMEType" type="string" pass="in" description="Mime type of the data." />
			<param name="TempStreamInstance" type="class" class="TempStreamWriter" pass="return" description="Temp stream writer instance" />
		</method>

		<method name="CreateZIPStream" description="Creates a new ZIP writer to store temporary data. This data will be attached to the current journal. MIME Type will be application/zip">
			<param name="Name" type="string" pass="in" description="Name of the storage stream." />
			<param name="ZIPStreamInstance" type="class" class="ZIPStreamWriter" pass="return" description="ZIP stream writer instance" />
		</method>

		<method name="LoadStream" description="Loads a stream in the storage system.">
			<param name="UUID" type="string" pass="in" description="UUID of the storage stream." />
			<param name="MustExist" type="bool" pass="in" description="If true, the call fails if the stream does not exist." />
			<param name="StreamInstance" type="optionalclass" class="StreamReader" pass="return" description="Stream Instance. Will return null if not found and MustExists is false." />
		</method>

		<method name="GetCurrentDateTime" description="Returns the current time as DateTime object instance.">
			<param name="DateTime" type="class" class="DateTime" pass="return" description="Date Time Instance." />
		</method>

		<method name="GetCustomDateTime" description="Returns a custom time as DateTime object instance. Fails if the values are not a valid time from January first 1970 to year 1 million.">
			<param name="Year" type="uint32" pass="in" description="Year. Must be larger or equal than 1970." />
			<param name="Month" type="uint32" pass="in" description="Month. Must be between 1 and 12." />
			<param name="Day" type="uint32" pass="in" description="Day. Must be between 1 and 31." />
			<param name="Hour" type="uint32" pass="in" description="Hour. Must be between 0 and 23." />
			<param name="Minute" type="uint32" pass="in" description="Minute. Must be between 0 and 59." />
			<param name="Second" type="uint32" pass="in" description="Second. Must be between 0 and 59." />
			<param name="Microsecond" type="uint32" pass="in" description="Microsecond. Must be between 0 and 999999." />
			<param name="DateTime" type="class" class="DateTime" pass="return" description="Date Time Instance." />
		</method>

		<method name="GetStartDateTime" description="Returns the startup time of the system as DateTime object instance. All Timer values are counted from there.">
			<param name="DateTime" type="class" class="DateTime" pass="return" description="Date Time Instance." />
		</method>

		<method name="Sleep" description="Puts the current request to sleep for a definite amount of time. MUST be used instead of a blocking sleep call.">
			<param name="Delay" type="uint32" pass="in" description="Milliseconds to sleeps" />
		</method>

		<method name="HasExternalEventParameter" description="Checks if an external event parameter exists. DEPRECIATED, use GetExternalEventParameters instead.">
			<param name="ParameterName" type="string" pass="in" description="The name of the parameter. MUST be an alphanumeric ASCII string (with optional _ and -)" />
			<param name="ParameterExists" type="bool" pass="return" description="Flag if the parameter exists." />
		</method>
		
		<method name="GetExternalEventParameter" description="Returns an external event string parameter. Fails if it does not exists or is not of type string. DEPRECIATED, use GetExternalEventParameters instead.">
			<param name="ParameterName" type="string" pass="in" description="The name of the parameter. MUST be an alphanumeric ASCII string (with optional _ and -)" />
			<param name="ParameterValue" type="string" pass="return" description="Parameter value." />
		</method>
		
		<method name="AddExternalEventResultValue" description="Adds a return string value to return to the external event caller. DEPRECIATED, use GetExternalEventParameters instead.">
			<param name="ReturnValueName" type="string" pass="in" description="The name of the return parameter. MUST be an alphanumeric ASCII string (with optional _ and -)" />
			<param name="ReturnValue" type="string" pass="in" description="Return value." />
		</method>
		
		<method name="GetExternalEventParameters" description="Returns the external event parameters. This JSON Object was passed on from the external API.">
			<param name="ParameterValue" type="class" class="JSONObject" pass="return" description="Parameter value." />
		</method>

		<method name="GetExternalEventResults" description="Returns the external event results. This JSON Object will be passed on to an ext">
			<param name="ParameterValue" type="class" class="JSONObject" pass="return" description="Parameter value." />
		</method>

	</class>



		
	<global baseclassname="Base" 
		stringoutclassname="Base" releasemethod="ReleaseInstance" acquiremethod="AcquireInstance" versionmethod="GetVersion" errormethod="GetLastError" symbollookupmethod="GetSymbolLookupMethod">
		
		<method name="GetVersion" description = "retrieves the binary version of this library.">
			<param name="Major" type="uint32" pass="out" description="returns the major version of this library" />
			<param name="Minor" type="uint32" pass="out" description="returns the minor version of this library" />
			<param name="Micro" type="uint32" pass="out" description="returns the micro version of this library" />
		</method>
		<method name="GetLastError" description="Returns the last error recorded on this object">
			<param name="Instance" type="class" class="Base" pass="in" description="Instance Handle" />
			<param name="ErrorMessage" type="string" pass="out" description="Message of the last error" />
			<param name="HasError" type="bool" pass="return" description="Is there a last error to query" />
		</method>
		<method name="ReleaseInstance" description="Releases shared ownership of an Instance">
			<param name="Instance" type="class" class="Base" pass="in" description="Instance Handle" />
		</method>
		<method name="AcquireInstance" description="Acquires shared ownership of an Instance">
			<param name="Instance" type="class" class="Base" pass="in" description="Instance Handle" />
		</method>
		<method name="GetSymbolLookupMethod" description="Returns the address of the SymbolLookupMethod">
			<param name="SymbolLookupMethod" type="pointer" pass="return" description="Address of the SymbolAddressMethod" />
		</method>		
		
	</global>
	
	
</component>

