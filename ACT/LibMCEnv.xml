<?xml version="1.0" encoding="UTF-8"?>
<component xmlns="http://schemas.autodesk.com/netfabb/automaticcomponenttoolkit/2018" 
	libraryname="MC Environment Interface" namespace="LibMCEnv" copyright="Autodesk Inc." year="2020" basename="libmcenv"
	version="1.0.0">

	<license>
		<line value="All rights reserved." />
		<line value="" />
		<line value="Redistribution and use in source and binary forms, with or without" />
		<line value="modification, are permitted provided that the following conditions are met:" />
		<line value="    * Redistributions of source code must retain the above copyright" />
		<line value="      notice, this list of conditions and the following disclaimer." />
		<line value="    * Redistributions in binary form must reproduce the above copyright" />
		<line value="      notice, this list of conditions and the following disclaimer in the" />
		<line value="      documentation and/or other materials provided with the distribution." />
		<line value="    * Neither the name of the Autodesk Inc. nor the" />
		<line value="      names of its contributors may be used to endorse or promote products" />
		<line value="      derived from this software without specific prior written permission." />
		<line value="" />
		<line value="THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND" />
		<line value="ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED" />
		<line value="WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE" />
		<line value="DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY" />
		<line value="DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES" />
		<line value="(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;" />
		<line value="LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND" />
		<line value="ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT" />
		<line value="(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS" />
		<line value="SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." />
		<line value="" />
	</license>
	
	<bindings>
		<binding language="CppDynamic" indentation="tabs" />
	</bindings>
	<implementations>
		<implementation language="Cpp" indentation="tabs"/>
	</implementations>
	
		
	<errors>
		<error name="NOTIMPLEMENTED" code="1" description="functionality not implemented" />
		<error name="INVALIDPARAM" code="2" description="an invalid parameter was passed" />
		<error name="INVALIDCAST" code="3" description="a type cast failed" />
		<error name="BUFFERTOOSMALL" code="4" description="a provided buffer is too small" />
		<error name="GENERICEXCEPTION" code="5" description="a generic exception occurred" />
		<error name="COULDNOTLOADLIBRARY" code="6" description="the library could not be loaded" />
		<error name="COULDNOTFINDLIBRARYEXPORT" code="7" description="a required exported symbol could not be found in the library" />
		<error name="INCOMPATIBLEBINARYVERSION" code="8" description="the version of the binary interface does not match the bindings interface" />				
		<error name="PARAMETERGROUPNOTFOUND" code="9" description="Parameter group not found" />
		<error name="PARAMETERNOTFOUND" code="10" description="Parameter not found" />
		<error name="COULDNOTFINDSIGNALDEFINITON" code="11" description="Could not find signal definition" />
		<error name="COULDNOTTRIGGERSIGNAL" code="12" description="Could not trigger signal" />
		<error name="SIGNALNOTFOUND" code="13" description="Signal not found" />
		<error name="TERMINATED" code="14" description="operation has been terminated." />
		<error name="SIGNALHASTRIGGEREDTWICE" code="15" description="signal has been triggered twice." />
		<error name="SIGNALHASNOTBEENTRIGGERED" code="16" description="signal has not been triggered." />
		<error name="DRIVERISNOTINITIALISING" code="17" description="driver is not in initialisation mode." />
		<error name="RESOURCEENTRYNOTFOUND" code="18" description="resource entry not found." />
		<error name="INTERNALERROR" code="19" description="internal error." />
		<error name="INVALIDCHARACTERINFILENAME" code="20" description="invalid character in filename." />
		<error name="WORKINGDIRECTORYHASBEENCLEANED" code="21" description="working directory has been cleaned." />
		<error name="INVALIDITERATOR" code="22" description="invalid iterator." />
			
	</errors>
	
	<enum name="ToolpathSegmentType">
		<option name="Unknown" value="0" />
		<option name="Hatch" value="1" />
		<option name="Loop" value="2" />
		<option name="Polyline" value="3" />
	</enum>

	<enum name="ToolpathProfileValueType">
		<option name="Custom" value="0" />
		<option name="Speed" value="1" />
		<option name="JumpSpeed" value="2" />
		<option name="ExtrusionFactor" value="3" />
		<option name="LaserPower" value="4" />
		<option name="StartDelay" value="5" />
		<option name="EndDelay" value="6" />
		<option name="PolyDelay" value="7" />
		<option name="PolyDelayAngleDependent" value="8" />
		<option name="LaserOnDelay" value="9" />
		<option name="LaserOffDelay" value="10" />
		<option name="JumpDelay" value="11" />
		<option name="MarkDelay" value="12" />
	</enum>
	
	<struct name="Position2D">
		<member name="Coordinates" type="int32" rows="2"/>
	</struct>
	
	<class name="Base">
	</class>


	<class name="Iterator">
		<method name="MoveNext" description="Iterates to the next object in the list.">
			<param name="HasNext" type="bool" pass="return" description="Iterates to the next object in the list."/>
		</method>
		<method name="MovePrevious" description="Iterates to the previous object in the list.">
			<param name="HasPrevious" type="bool" pass="return" description="Iterates to the previous object in the list."/>
		</method>
		<method name="GetCurrent" description="Returns the object the iterator points at.">
			<param name="Instance" type="handle" class="Base" pass="return" description="returns the object instance."/>
		</method>
		<method name="Clone" description="Creates a new object iterator with the same object list.">
			<param name="OutIterator" type="handle" class="Iterator" pass="return" description="returns the cloned Iterator instance"/>
		</method>
		<method name="Count" description="Returns the number of resoucres the iterator captures.">
			<param name="Count" type="uint64" pass="return" description="returns the number of objects the iterator captures."/>
		</method>
	</class>

	<class name="ToolpathLayer" parent="Base">
	  
		<method name="GetLayerDataUUID" description="Retrieves the layerdata's uuid">
			<param name="UUID" type="string" pass="return" description="Returns the uuid value." />
		</method>
		
		<method name="GetSegmentCount" description="Retrieves the count of segments.">
			<param name="Count" type="uint32" pass="return" description="Count" />
		</method>
		
		<method name="GetSegmentInfo" description="Retrieves the segment type information .">
			<param name="Index" type="uint32" pass="in" description="Index. Must be between 0 and Count - 1." />
			<param name="Type" type="enum" class="ToolpathSegmentType" pass="out" description="Segment Type" />
			<param name="PointCount" type="uint32" pass="out" description="Point count of segment." />
		</method>
				
		<method name="GetSegmentProfileUUID" description="Retrieves the assigned segment profile uuid.">
			<param name="Index" type="uint32" pass="in" description="Index. Must be between 0 and Count - 1." />
			<param name="ProfileUUID" type="string" pass="return" description="Segment Profile UUID" />
		</method>

		<method name="GetSegmentProfileValue" description="Retrieves an assigned profile custom value.">
			<param name="Index" type="uint32" pass="in" description="Index. Must be between 0 and Count - 1." />
			<param name="ValueName" type="string" pass="in" description="Value Name to query for." />
			<param name="Value" type="string" pass="return" description="String Value." />
		</method>

		<method name="GetSegmentProfileTypedValue" description="Retrieves an assigned profile value of a standard type.">
			<param name="Index" type="uint32" pass="in" description="Index. Must be between 0 and Count - 1." />
			<param name="ValueType" type="enum" class="ToolpathProfileValueType" pass="in" description="Enum to query for. MUST NOT be custom." />
			<param name="Value" type="double" pass="return" description="Double Value" />
		</method>

		
		<method name="GetSegmentPartUUID" description="Retrieves the assigned segment part uuid.">
			<param name="Index" type="uint32" pass="in" description="Index. Must be between 0 and Count - 1." />
			<param name="PartUUID" type="string" pass="return" description="Segment Part UUID" />
		</method>
		
		<method name="GetSegmentPointData" description="Retrieves the assigned segment point list. For type hatch, the points are taken pairwise.">
			<param name="Index" type="uint32" pass="in" description="Index. Must be between 0 and Count - 1." />
			<param name="PointData" type="structarray" class="Position2D" pass="out" description="The point data array. Positions are absolute in units." />
		</method>
		
		<method name="GetZValue" description="Retrieves the layers Z Value in units.">
			<param name="ZValue" type="int32" pass="return" description="Z Value of the layer in units." />
		</method>
		
		<method name="GetUnits" description="Retrieves the toolpath units in mm.">
			<param name="Units" type="double" pass="return" description="Toolpath units." />
		</method>
		
	</class>


	<class name="ToolpathAccessor" parent="Base">
	
		<method name="GetStorageUUID" description="Returns Toolpath storage UUID.">
			<param name="StorageUUID" type="string" pass="return" description="Returns toolpath storage uuid." />
		</method>
	
		<method name="GetLayerCount" description="Returns layer count.">
			<param name="LayerCount" type="uint32" pass="return" description="Returns layer count." />
		</method>

		<method name="LoadLayer" description="Reads and returns a layer object.">
			<param name="LayerIndex" type="uint32" pass="in" description="Layer Index." />
			<param name="LayerData" type="class" class="ToolpathLayer" pass="return" description="Toolpath layer object." />
		</method>
		
		<method name="GetUnits" description="Retrieves the toolpath units in mm.">
			<param name="Units" type="double" pass="return" description="Toolpath units." />
		</method>
			
	</class>


	<class name="Build" parent="Base" description="Build instance to access build files">

		<method name="GetName" description="Returns name of the build.">
			<param name="Name" type="string" pass="return" description="Name of the build." />
		</method>

		<method name="GetBuildUUID" description="Returns uuid of the build.">
			<param name="BuildUUID" type="string" pass="return" description="UUID of the build." />
		</method>

		<method name="GetStorageUUID" description="Returns storage uuid of the build.">
			<param name="StorageUUID" type="string" pass="return" description="Storage UUID of the build." />
		</method>

		<method name="GetStorageSHA256" description="Returns SHA256 of the build stream.">
			<param name="SHA256" type="string" pass="return" description="SHA256 of the build stream." />
		</method>

		<method name="GetLayerCount" description="Returns cached layer count of the toolpath.">
			<param name="LayerCount" type="uint32" pass="return" description="Returns layer count." />
		</method>

		<method name="LoadToolpath" description="loads the a toolpath into memory">
		</method>

		<method name="UnloadToolpath" description="unloads the a toolpath from memory, if it has been loaded before.">
		</method>

		<method name="ToolpathIsLoaded" description="checks, if a toolpath object is loaded to memory.">
			<param name="IsLoaded" type="bool" pass="return" description="returns if toolpath is loaded." />
		</method>

		<method name="CreateToolpathAccessor" description="Creates an accessor object for a toolpath. Toolpath MUST have been loaded with LoadToolpath before.">
			<param name="ToolpathInstance" type="class" class="ToolpathAccessor" pass="return" description="Toolpath instance." />
		</method>

		<method name="AddBinaryData" description="Adds binary data to store with the build.">
			<param name="Name" type="string" pass="in" description="Name of the attache data block." />
			<param name="MIMEType" type="string" pass="in" description="Mime type of the data." />
			<param name="Content" type="basicarray" class="uint8" pass="in" description="Stream content to store" />
			<param name="DataUUID" type="string" pass="return" description="Data UUID of the attachment." />
		</method>

				
	</class>
	
	
	<class name="WorkingFileExecution" parent="Base" description="Working File Execution Object">

		<method name="GetStatus" description = "Returns the execution status">
		</method>

		<method name="ReturnStdOut" description = "Returns the output of the executable as string buffer">
			<param name="StringBuffer" type="string" pass="return" description="stdout buffer" />
		</method>


	</class>


	<class name="WorkingFile" parent="Base" description="Working File Access Object">

		<method name="GetAbsoluteFileName" description = "Retrieves absolute file name of the working file">
			<param name="FileName" type="string" pass="return" description="global path of the file" />
		</method>

		<method name="GetSize" description = "Returns the size of temporary file.">
			<param name="FileSize" type="uint64" pass="return" description="file size" />
		</method>

		<method name="CalculateSHA2" description = "Calculates the SHA256 checksum of the file.">
			<param name="SHA2" type="string" pass="return" description="sha256 checksum" />
		</method>

		<method name="ExecuteFile" description = "Executes the temporary file, if it is an executable.">
			<param name="Execution" type="class" class="WorkingFileExecution" pass="return" description="execution object" />
		</method>

		<method name="IsManaged" description = "Returns if the file is managed.">
			<param name="FileIsManaged" type="bool" pass="return" description="returns if the file is managed." />
		</method>

		<method name="MakeManaged" description = "Makes the file managed if it is not managed yet.">
		</method>

		<method name="FileExists" description = "Returns if the file exists on disk.">
			<param name="FileDoesExist" type="bool" pass="return" description="returns if the file exists." />
		</method>

		<method name="DeleteFromDisk" description = "Deletes the temporary file.">
			<param name="Success" type="bool" pass="return" description="returns if deletion was successful or file did not exist in the first place." />
		</method>

	</class>

	<class name="WorkingFileIterator" parent="Iterator">
		<method name="GetCurrentFile" description="Returns the working file the iterator points at.">
			<param name="WorkingFile" type="handle" class="WorkingFile" pass="return" description="returns the WorkingFile instance."/>
		</method>
	</class>


	<class name="WorkingDirectory" parent="Base" description="Working Directory Access Object">

		<method name="IsActive" description = "Working directory is active.">
			<param name="IsActive" type="bool" pass="return" description="returns true if files can be read and written to the directory." />
		</method>

		<method name="GetAbsoluteFilePath" description = "Retrieves absolute file path.">
			<param name="FilePath" type="string" pass="return" description="global path of the directory, including path delimiter." />
		</method>

		<method name="StoreCustomData" description = "Stores a data buffer in a temporary file.">
			<param name="FileName" type="string" pass="in" description="filename to store to. Can not include any path delimiters or .." />
			<param name="DataBuffer" type="basicarray" class="uint8" pass="in" description="file data to store to." />
			<param name="WorkingFile" type="class" class="WorkingFile" pass="return" description="working file instance." />
		</method>

		<method name="StoreDriverData" description = "Stores attached driver data in a temporary file.">
			<param name="FileName" type="string" pass="in" description="filename to store to. Can not include any path delimiters or .." />
			<param name="Identifier" type="string" pass="in" description="identifier of the binary data in the driver package." />
			<param name="WorkingFile" type="class" class="WorkingFile" pass="return" description="working file instance." />
		</method>

		<method name="CleanUp" description = "Deletes all managed files in the directory and the directory. No storing is possible after a cleanup.">
			<param name="Success" type="bool" pass="return" description="returns if deletion was successful." />
		</method>

		<method name="AddManagedFile" description = "Adds a managed filename in the directory (i.e. this file will be deleted at CleanUp). Subdirectories are not allowed.">
			<param name="FileName" type="string" pass="in" description="Filename to manage. The file does not need to exist yet." />
			<param name="WorkingFile" type="class" class="WorkingFile" pass="return" description="working file instance." />
		</method>

		<method name="HasUnmanagedFiles" description = "Returns if the working directory has unmanaged files. A clean implementation will never deal with unmanaged files.">
			<param name="HasUnmanagedFiles" type="bool" pass="return" description="returns if there are unmanaged files." />
		</method>

		<method name="RetrieveUnmanagedFiles" description = "Returns a list of unmanaged files." >
			<param name="IteratorInstance" type="class" class="WorkingFileIterator" pass="return" description="working file iterator instance." />
		</method>

		<method name="RetrieveManagedFiles" description = "Returns a list of managed files." >
			<param name="IteratorInstance" type="class" class="WorkingFileIterator" pass="return" description="working file iterator instance." />
		</method>

		<method name="RetrieveAllFiles" description = "Returns a list of all files in the directory." >
			<param name="IteratorInstance" type="class" class="WorkingFileIterator" pass="return" description="working file iterator instance." />
		</method>

	</class>

	<class name="DriverEnvironment" parent="Base" description="Environment of the driver">
	  
		<method name="CreateWorkingDirectory" description = "creates a temporary working directory.">
			<param name="WorkingDirectory" type="class" class="WorkingDirectory" pass="return" description="creates a working directory" />
		</method>

		<method name="RetrieveDriverData" description = "retrieves attached driver data into a memory buffer.">
			<param name="Identifier" type="string" pass="in" description="identifier of the binary data in the driver package." />
			<param name="DataBuffer" type="basicarray" class="uint8" pass="out" description="buffer data." />
		</method>
		
		<method name="CreateToolpathAccessor" description="Creates an accessor object for a toolpath. Toolpath MUST have been loaded into memory before.">
			<param name="StreamUUID" type="string" pass="in" description="UUID of the stream." />
			<param name="ToolpathInstance" type="class" class="ToolpathAccessor" pass="return" description="Toolpath instance." />
		</method>
		
		
		<method name="RegisterStringParameter" description="registers a string parameter. Must only be called during driver creation.">
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Description" type="string" pass="in" description="Parameter Description" />
			<param name="DefaultValue" type="string" pass="in" description="default value to set" />
		</method>

		<method name="RegisterUUIDParameter" description="registers a uuid parameter. Must only be called during driver creation.">
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Description" type="string" pass="in" description="Parameter Description" />
			<param name="DefaultValue" type="string" pass="in" description="default value to set" />
		</method>

		<method name="RegisterDoubleParameter" description="registers a double parameter. Must only be called during driver creation.">
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Description" type="string" pass="in" description="Parameter Description" />
			<param name="DefaultValue" type="double" pass="in" description="default value to set" />
		</method>

		<method name="RegisterIntegerParameter" description="registers an int parameter. Must only be called during driver creation.">
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Description" type="string" pass="in" description="Parameter Description" />
			<param name="DefaultValue" type="int64" pass="in" description="default value to set" />
		</method>

		<method name="RegisterBoolParameter" description="registers a bool parameter. Must only be called during driver creation.">
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Description" type="string" pass="in" description="Parameter Description" />
			<param name="DefaultValue" type="bool" pass="in" description="default value to set" />
		</method>
		
		
		<method name="SetStringParameter" description="sets a string parameter">
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Value" type="string" pass="in" description="Value to set" />
		</method>

		<method name="SetUUIDParameter" description="sets a uuid parameter">
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Value" type="string" pass="in" description="Value to set" />
		</method>

		<method name="SetDoubleParameter" description="sets a double parameter">
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Value" type="double" pass="in" description="Value to set" />
		</method>

		<method name="SetIntegerParameter" description="sets an int parameter">
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Value" type="int64" pass="in" description="Value to set" />
		</method>

		<method name="SetBoolParameter" description="sets a bool parameter">
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Value" type="bool" pass="in" description="Value to set" />
		</method>
		
		<method name="Sleep" description="Puts the current instance to sleep for a definite amount of time. MUST be used instead of a blocking sleep call.">
			<param name="Delay" type="uint32" pass="in" description="Milliseconds to sleeps" />
		</method>

		<method name="GetGlobalTimerInMilliseconds" description="Returns the global timer in milliseconds.">
			<param name="TimerValue" type="uint64" pass="return" description="Timer value in Milliseconds" />
		</method>

	</class>
	
	

	<class name="SignalTrigger" parent="Base" description="Class for signal triggering">

		<method name="CanTrigger" description="Returns, if signal channel is available.">
			<param name="ChannelIsAvailable" type="bool" pass="return" description="Returns true, if signal channel is available." />
		</method>

		<method name="Trigger" description="Triggers a signal, if signal channel is available.">
		</method>

		<method name="WaitForHandling" description="Waits until the signal is reset.">
			<param name="TimeOut" type="uint32" pass="in" description="Timeout in Milliseconds. 0 for Immediate return." />			
			<param name="Success" type="bool" pass="return" description="Flag if signal handling has been handled." />
		</method>
		
		<method name="GetName" description="Returns the signal name.">
			<param name="SignalName" type="string" pass="return" description="Name Of Signal" />
		</method>
		
		<method name="GetStateMachine" description="Returns the signal state machine instance.">
			<param name="StateMachineName" type="string" pass="return" description="Name Of State Machine" />
		</method>

		<method name="SetString" description="sets a string value">
			<param name="Name" type="string" pass="in" description="Name" />
			<param name="Value" type="string" pass="in" description="Value" />
		</method>

		<method name="SetUUID" description="sets a uuid value">
			<param name="Name" type="string" pass="in" description="Name" />
			<param name="Value" type="string" pass="in" description="Value" />
		</method>

		<method name="SetDouble" description="sets a double">
			<param name="Name" type="string" pass="in" description="Name" />
			<param name="Value" type="double" pass="in" description="Value" />
		</method>

		<method name="SetInteger" description="sets an int.">
			<param name="Name" type="string" pass="in" description="Name" />
			<param name="Value" type="int64" pass="in" description="Value" />
		</method>

		<method name="SetBool" description="sets a bool">
			<param name="Name" type="string" pass="in" description="Name" />
			<param name="Value" type="bool" pass="in" description="Value" />
		</method>

		<method name="GetStringResult" description="returns a string value of the result">
			<param name="Name" type="string" pass="in" description="Name" />
			<param name="Value" type="string" pass="return" description="Value" />
		</method>

		<method name="GetUUIDResult" description="returns a uuid value of the result">
			<param name="Name" type="string" pass="in" description="Name" />
			<param name="Value" type="string" pass="return" description="Value" />
		</method>

		<method name="GetDoubleResult" description="returns a string value of the result">
			<param name="Name" type="string" pass="in" description="Name" />
			<param name="Value" type="double" pass="return" description="Value" />
		</method>

		<method name="GetIntegerResult" description="returns an int value of the result.">
			<param name="Name" type="string" pass="in" description="Name" />
			<param name="Value" type="int64" pass="return" description="Value" />
		</method>

		<method name="GetBoolResult" description="returns a bool value of the result.">
			<param name="Name" type="string" pass="in" description="Name" />
			<param name="Value" type="bool" pass="return" description="Value" />
		</method>

	</class>



	<class name="SignalHandler" parent="Base" description="Class for signal handling">

		<method name="SignalHandled" description="Marks signal as handled and resets signal channel.">
		</method>
		
		<method name="GetName" description="Returns the signal name.">
			<param name="SignalName" type="string" pass="return" description="Name Of Signal" />
		</method>

		<method name="GetSignalID" description="Returns the signal id.">
			<param name="SignalID" type="string" pass="return" description="Signal Identifier" />
		</method>
		
		<method name="GetStateMachine" description="Returns the signal state machine instance.">
			<param name="StateMachineName" type="string" pass="return" description="Name Of State Machine" />
		</method>

		<method name="GetString" description="gets a string value">
			<param name="Name" type="string" pass="in" description="Name" />
			<param name="Value" type="string" pass="return" description="Value" />
		</method>

		<method name="GetUUID" description="gets a uuid value">
			<param name="Name" type="string" pass="in" description="Name" />
			<param name="Value" type="string" pass="return" description="Value" />
		</method>


		<method name="GetDouble" description="gets a double">
			<param name="Name" type="string" pass="in" description="Name" />
			<param name="Value" type="double" pass="return" description="Value" />
		</method>

		<method name="GetInteger" description="gets an int.">
			<param name="Name" type="string" pass="in" description="Name" />
			<param name="Value" type="int64" pass="return" description="Value" />
		</method>

		<method name="GetBool" description="gets a bool">
			<param name="Name" type="string" pass="in" description="Name" />
			<param name="Value" type="bool" pass="return" description="Value" />
		</method>

		<method name="SetStringResult" description="returns a string value of the result">
			<param name="Name" type="string" pass="in" description="Name" />
			<param name="Value" type="string" pass="in" description="Value" />
		</method>

		<method name="SetUUIDResult" description="returns a uuid value of the result">
			<param name="Name" type="string" pass="in" description="Name" />
			<param name="Value" type="string" pass="in" description="Value" />
		</method>

		<method name="SetDoubleResult" description="returns a string value of the result">
			<param name="Name" type="string" pass="in" description="Name" />
			<param name="Value" type="double" pass="in" description="Value" />
		</method>

		<method name="SetIntegerResult" description="sets an int.">
			<param name="Name" type="string" pass="in" description="Name" />
			<param name="Value" type="int64" pass="in" description="Value" />
		</method>

		<method name="SetBoolResult" description="sets a bool">
			<param name="Name" type="string" pass="in" description="Name" />
			<param name="Value" type="bool" pass="in" description="Value" />
		</method>

	</class>


	<class name="StateEnvironment" parent="Base" description="Environment of the state">
	  
		<method name="PrepareSignal" description="prepares a signal object to trigger later.">
			<param name="MachineInstance" type="string" pass="in" description="State machine instance name" />
			<param name="SignalName" type="string" pass="in" description="Name Of signal channel." />
			<param name="SignalInstance" type="class" class="SignalTrigger" pass="return" description="Signal trigger object." />
		</method>
	  
		<method name="WaitForSignal" description="waits for a signal.">
			<param name="SignalName" type="string" pass="in" description="Name Of Signal" />
			<param name="TimeOut" type="uint32" pass="in" description="Timeout in Milliseconds. 0 for Immediate return." />			
			<param name="HandlerInstance" type="optionalclass" class="SignalHandler" pass="out" description="Signal object. If Success is false, the Signal Handler Object will be null." />
			<param name="Success" type="bool" pass="return" description="Signal has been triggered" />
		</method>		

		<method name="GetDriverLibrary" description="Returns the driver type and library lookup for a specific registered driver.">
			<param name="DriverName" type="string" pass="in" description="Name identifier of the driver." />
			<param name="DriverType" type="string" pass="out" description="returns type identifier of the driver." />
			<param name="DriverLookup" type="pointer" pass="out" description="GetProcAddress Handle of the driver." />
		</method>

		<method name="CreateDriverAccess" description="Accesses and locks a driver for the execution of the current state.">
			<param name="DriverName" type="string" pass="in" description="Name identifier of the driver." />
			<param name="DriverHandle" type="pointer" pass="out" description="Handle of the driver." />
		</method>

		<method name="GetBuildJob" description="Returns a instance of a build object.">
			<param name="BuildUUID" type="string" pass="in" description="UUID of the build entity." />
			<param name="BuildInstance" type="class" class="Build" pass="return" description="Build instance" />
		</method>

		<method name="UnloadAllToolpathes" description="unloads all toolpath in memory to clean up">
		</method>


		<method name="SetNextState" description="sets the next state">
			<param name="StateName" type="string" pass="in" description="Name of next state" />
		</method>

		<method name="LogMessage" description="logs a string as message">
			<param name="LogString" type="string" pass="in" description="String to Log" />
		</method>

		<method name="LogWarning" description="logs a string as warning">
			<param name="LogString" type="string" pass="in" description="String to Log" />
		</method>

		<method name="LogInfo" description="logs a string as info">
			<param name="LogString" type="string" pass="in" description="String to Log" />
		</method>

		<method name="Sleep" description="Puts the current instance to sleep for a definite amount of time. MUST be used instead of a blocking sleep call.">
			<param name="Delay" type="uint32" pass="in" description="Milliseconds to sleeps" />
		</method>

		<method name="CheckForTermination" description="checks environment for termination signal. MUST be called frequently in longer-running operations.">
			<param name="ShallTerminate" type="bool" pass="return" description="Returns if termination shall appear" />
		</method>


		<method name="StoreSignal" description="stores a signal handler in the current state machine">
			<param name="Name" type="string" pass="in" description="Name" />
			<param name="Handler" type="class" class="SignalHandler" pass="in" description="Signal handler to store." />
		</method>

		<method name="RetrieveSignal" description="retrieves a signal handler from the current state machine. Fails if value has not been stored before or signal has been already handled.">
			<param name="Name" type="string" pass="in" description="Name" />
			<param name="Handler" type="class" class="SignalHandler" pass="return" description="Signal handler instance." />
		</method>

		<method name="ClearStoredValue" description="deletes a value from the data store.">
			<param name="Name" type="string" pass="in" description="Name" />
		</method>
		
		
		<method name="SetStringParameter" description="sets a string parameter">
			<param name="ParameterGroup" type="string" pass="in" description="Parameter Group" />
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Value" type="string" pass="in" description="Value to set" />
		</method>

		<method name="SetUUIDParameter" description="sets a uuid parameter">
			<param name="ParameterGroup" type="string" pass="in" description="Parameter Group" />
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Value" type="string" pass="in" description="Value to set" />
		</method>

		<method name="SetDoubleParameter" description="sets a double parameter">
			<param name="ParameterGroup" type="string" pass="in" description="Parameter Group" />
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Value" type="double" pass="in" description="Value to set" />
		</method>

		<method name="SetIntegerParameter" description="sets an int parameter">
			<param name="ParameterGroup" type="string" pass="in" description="Parameter Group" />
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Value" type="int64" pass="in" description="Value to set" />
		</method>

		<method name="SetBoolParameter" description="sets a bool parameter">
			<param name="ParameterGroup" type="string" pass="in" description="Parameter Group" />
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Value" type="bool" pass="in" description="Value to set" />
		</method>

		<method name="GetStringParameter" description="returns a string parameter">
			<param name="ParameterGroup" type="string" pass="in" description="Parameter Group" />
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Value" type="string" pass="return" description="Value to set" />
		</method>

		<method name="GetUUIDParameter" description="returns a uuid parameter">
			<param name="ParameterGroup" type="string" pass="in" description="Parameter Group" />
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Value" type="string" pass="return" description="Value to set" />
		</method>

		<method name="GetDoubleParameter" description="returns a double parameter">
			<param name="ParameterGroup" type="string" pass="in" description="Parameter Group" />
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Value" type="double" pass="return" description="Value to set" />
		</method>

		<method name="GetIntegerParameter" description="returns an int parameter">
			<param name="ParameterGroup" type="string" pass="in" description="Parameter Group" />
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Value" type="int64" pass="return" description="Value to set" />
		</method>

		<method name="GetBoolParameter" description="returns a bool parameter">
			<param name="ParameterGroup" type="string" pass="in" description="Parameter Group" />
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Value" type="bool" pass="return" description="Value to set" />
		</method>
		

		<method name="LoadResourceData" description="loads a plugin resource file into memory.">
			<param name="ResourceName" type="string" pass="in" description="Name of the resource." />
			<param name="ResourceData" type="basicarray" class="uint8" pass="out" description="Resource Data Buffer." />
		</method>


	</class>




	<class name="UIEnvironment" parent="Base" description="Environment of the UI">
	  
		<method name="PrepareSignal" description="prepares a signal object to trigger later.">
			<param name="MachineInstance" type="string" pass="in" description="State machine instance name" />
			<param name="SignalName" type="string" pass="in" description="Name Of signal channel." />
			<param name="SignalInstance" type="class" class="SignalTrigger" pass="return" description="Signal trigger object." />
		</method>
	  
		
		<method name="GetMachineState" description="Retrieves the machine state">
			<param name="MachineInstance" type="string" pass="in" description="State machine instance name" />
			<param name="StateName" type="string" pass="return" description="Name of current state" />
		</method>

		<method name="LogMessage" description="logs a string as message">
			<param name="LogString" type="string" pass="in" description="String to Log" />
		</method>

		<method name="LogWarning" description="logs a string as warning">
			<param name="LogString" type="string" pass="in" description="String to Log" />
		</method>

		<method name="LogInfo" description="logs a string as info">
			<param name="LogString" type="string" pass="in" description="String to Log" />
		</method>
				
		<method name="GetStringParameter" description="returns a string parameter">
			<param name="MachineInstance" type="string" pass="in" description="State machine instance name" />
			<param name="ParameterGroup" type="string" pass="in" description="Parameter Group" />
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Value" type="string" pass="return" description="Value to set" />
		</method>

		<method name="GetUUIDParameter" description="returns a uuid parameter">
			<param name="MachineInstance" type="string" pass="in" description="State machine instance name" />
			<param name="ParameterGroup" type="string" pass="in" description="Parameter Group" />
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Value" type="string" pass="return" description="Value to set" />
		</method>

		<method name="GetDoubleParameter" description="returns a double parameter">
			<param name="MachineInstance" type="string" pass="in" description="State machine instance name" />
			<param name="ParameterGroup" type="string" pass="in" description="Parameter Group" />
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Value" type="double" pass="return" description="Value to set" />
		</method>

		<method name="GetIntegerParameter" description="returns an int parameter">
			<param name="MachineInstance" type="string" pass="in" description="State machine instance name" />
			<param name="ParameterGroup" type="string" pass="in" description="Parameter Group" />
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Value" type="int64" pass="return" description="Value to set" />
		</method>

		<method name="GetBoolParameter" description="returns a bool parameter">
			<param name="MachineInstance" type="string" pass="in" description="State machine instance name" />
			<param name="ParameterGroup" type="string" pass="in" description="Parameter Group" />
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Value" type="bool" pass="return" description="Value to set" />
		</method>
		
		<method name="GetEventContext" description="returns the event context uuid as string">
			<param name="ContextUUID" type="string" pass="return" description="Context UUID" />
		</method>
		

	</class>



		
	<global baseclassname="Base" 
		stringoutclassname="Base" releasemethod="ReleaseInstance" acquiremethod="AcquireInstance" versionmethod="GetVersion" errormethod="GetLastError" symbollookupmethod="GetSymbolLookupMethod">
		
		<method name="GetVersion" description = "retrieves the binary version of this library.">
			<param name="Major" type="uint32" pass="out" description="returns the major version of this library" />
			<param name="Minor" type="uint32" pass="out" description="returns the minor version of this library" />
			<param name="Micro" type="uint32" pass="out" description="returns the micro version of this library" />
		</method>
		<method name="GetLastError" description="Returns the last error recorded on this object">
			<param name="Instance" type="class" class="Base" pass="in" description="Instance Handle" />
			<param name="ErrorMessage" type="string" pass="out" description="Message of the last error" />
			<param name="HasError" type="bool" pass="return" description="Is there a last error to query" />
		</method>
		<method name="ReleaseInstance" description="Releases shared ownership of an Instance">
			<param name="Instance" type="class" class="Base" pass="in" description="Instance Handle" />
		</method>
		<method name="AcquireInstance" description="Acquires shared ownership of an Instance">
			<param name="Instance" type="class" class="Base" pass="in" description="Instance Handle" />
		</method>
		<method name="GetSymbolLookupMethod" description="Returns the address of the SymbolLookupMethod">
			<param name="SymbolLookupMethod" type="pointer" pass="return" description="Address of the SymbolAddressMethod" />
		</method>		
		
	</global>
	
	
</component>

