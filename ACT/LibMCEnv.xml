<?xml version="1.0" encoding="UTF-8"?>
<component xmlns="http://schemas.autodesk.com/netfabb/automaticcomponenttoolkit/2018" 
	libraryname="MC Environment Interface" namespace="LibMCEnv" copyright="Autodesk Inc." year="2020" basename="libmcenv"
	version="1.0.0">

	<license>
		<line value="All rights reserved." />
		<line value="" />
		<line value="Redistribution and use in source and binary forms, with or without" />
		<line value="modification, are permitted provided that the following conditions are met:" />
		<line value="    * Redistributions of source code must retain the above copyright" />
		<line value="      notice, this list of conditions and the following disclaimer." />
		<line value="    * Redistributions in binary form must reproduce the above copyright" />
		<line value="      notice, this list of conditions and the following disclaimer in the" />
		<line value="      documentation and/or other materials provided with the distribution." />
		<line value="    * Neither the name of the Autodesk Inc. nor the" />
		<line value="      names of its contributors may be used to endorse or promote products" />
		<line value="      derived from this software without specific prior written permission." />
		<line value="" />
		<line value="THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND" />
		<line value="ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED" />
		<line value="WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE" />
		<line value="DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY" />
		<line value="DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES" />
		<line value="(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;" />
		<line value="LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND" />
		<line value="ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT" />
		<line value="(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS" />
		<line value="SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." />
		<line value="" />
	</license>
	
	<bindings>
		<binding language="CppDynamic" indentation="tabs" documentation="true" />
	</bindings>
	<implementations>
		<implementation language="Cpp" indentation="tabs"/>
	</implementations>
	
		
	<errors>
		<error name="NOTIMPLEMENTED" code="10001" description="functionality not implemented" />
		<error name="INVALIDPARAM" code="10002" description="an invalid parameter was passed" />
		<error name="INVALIDCAST" code="10003" description="a type cast failed" />
		<error name="BUFFERTOOSMALL" code="10004" description="a provided buffer is too small" />
		<error name="GENERICEXCEPTION" code="10005" description="a generic exception occurred" />
		<error name="COULDNOTLOADLIBRARY" code="10006" description="the library could not be loaded" />
		<error name="COULDNOTFINDLIBRARYEXPORT" code="10007" description="a required exported symbol could not be found in the library" />
		<error name="INCOMPATIBLEBINARYVERSION" code="10008" description="the version of the binary interface does not match the bindings interface" />				
		<error name="PARAMETERGROUPNOTFOUND" code="10009" description="Parameter group not found" />
		<error name="PARAMETERNOTFOUND" code="10010" description="Parameter not found" />
		<error name="COULDNOTFINDSIGNALDEFINITON" code="10011" description="Could not find signal definition" />
		<error name="COULDNOTTRIGGERSIGNAL" code="10012" description="Could not trigger signal" />
		<error name="SIGNALNOTFOUND" code="10013" description="Signal not found" />
		<error name="TERMINATED" code="10014" description="operation has been terminated." />
		<error name="SIGNALHASTRIGGEREDTWICE" code="10015" description="signal has been triggered twice." />
		<error name="SIGNALHASNOTBEENTRIGGERED" code="10016" description="signal has not been triggered." />
		<error name="DRIVERISNOTINITIALISING" code="10017" description="driver is not in initialisation mode." />
		<error name="RESOURCEENTRYNOTFOUND" code="10018" description="resource entry not found." />
		<error name="INTERNALERROR" code="10019" description="internal error." />
		<error name="INVALIDCHARACTERINFILENAME" code="10020" description="invalid character in filename." />
		<error name="WORKINGDIRECTORYHASBEENCLEANED" code="10021" description="working directory has been cleaned." />
		<error name="INVALIDITERATOR" code="10022" description="invalid iterator." />
		<error name="FORMVALUENOTFOUND" code="10023" description="Form value not found." />
		<error name="INVALIDDOUBLEFORMVALUE" code="10024" description="Invalid double form value." />
		<error name="INVALIDINTEGERFORMVALUE" code="10025" description="Invalid integer form value." />
		<error name="COULDNNOTACCESSCLIENTVARIABLES" code="10026" description="Could not access client variables." />
		<error name="INVALIDPIXELCOUNT" code="10027" description="Invalid pixel count." />
		<error name="INVALIDDPIVALUE" code="10028" description="Invalid dpi value." />
		<error name="COULDNOTCOMPRESSPNGIMAGE" code="10029" description="Could not compress PNG image." />
		<error name="COULDNOTSTOREPNGIMAGE" code="10030" description="Could not store PNG image." />
		<error name="EMPTYPNGIMAGEDATA" code="10031" description="Empty PNG image data." />
		<error name="INVALIDXCOORDINATE" code="10032" description="Invalid X coordinate." />
		<error name="INVALIDYCOORDINATE" code="10033" description="Invalid Y coordinate." />
		<error name="INVALIDXCOORDINATERANGE" code="10034" description="Invalid X coordinate range." />
		<error name="INVALIDYCOORDINATERANGE" code="10035" description="Invalid Y coordinate range." />
		<error name="INVALIDPIXELDATACOUNT" code="10036" description="Invalid pixel data count." />
		<error name="INVALIDIMAGEBUFFER" code="10037" description="Invalid image buffer." />
		<error name="INVALIDPIXELFORMAT" code="10038" description="Invalid pixel format." />
		<error name="INVALIDTESTOUTPUTNAME" code="10039" description="Invalid test output name." />		
		<error name="TOOLPATHNOTLOADED" code="10040" description="Toolpath has not been loaded." />
		<error name="INVALIDLAYERINDEX" code="10041" description="Invalid layer index." />
		<error name="INVALIDHATCHCOUNT" code="10042" description="Invalid hatch count." />
		<error name="SEGMENTISNOTOFTYPEHATCH" code="10043" description="Segment is not of type hatch." />		
		<error name="TEMPFILEEXTENSIONEXCEEDS64CHARACTERS" code="10044" description="Temp file extension exceeds 64 characters." />
		<error name="TEMPFILEEXTENSIONCONTAINSINVALIDCHARACTERS" code="10045" description="Temp file extension contains invalid characters." />
		<error name="COULDNOTGENERATETEMPFILENAME" code="10046" description="Could not generate temp file name." />
		<error name="EMPTYTCPIPPACKET" code="10047" description="Empty TCP/IP Packet." />		
		<error name="COULDNOTGETADDRESSINFO" code="10048" description="Could not get address info." />
		<error name="COULDNOTCREATESOCKET" code="10049" description="Could not create socket." />
		<error name="COULDNOTCONNECT" code="10050" description="Could not connect." />
		<error name="SENDERROR" code="10051" description="Send error." />
		<error name="RECEIVECOUNTEXCEEDSMAXIMUM" code="10052" description="Receive count exceeds maximum." />
		<error name="CONNECTIONCLOSED" code="10053" description="Connection closed." />
		<error name="RECEIVEERROR" code="10054" description="Receive error." />
		<error name="SENDCOUNTEXCEEDSMAXIMUM" code="10055" description="Send count exceeds maximum." />
		<error name="SOCKETNOTCONNECTED" code="10056" description="Socket not connected." />
		<error name="INVALIDSENDBUFFER" code="10057" description="Invalid send buffer." />
		<error name="INVALIDMODBUSTCPPAYLOADSIZE" code="10058" description="Invalid modbus TCP payload size" />
		<error name="INVALIDMODBUSTCPREQUEST" code="10059" description="Invalid modbus TCP request" />
		<error name="INSUFFICIENTMODBUSTCPRESPONSEHEADER" code="10060" description="Insufficient modbus tcp response header" />
		<error name="MODBUSTCPRESPONSEOVERFLOW" code="10061" description="modbus tcp response overflow" />
		<error name="INVALIDMODBUSTCPTRANSACTIONIDRESPONSE" code="10062" description="invalid modbus tcp transaction ID response" />
		<error name="INVALIDMODBUSTCPPROTOCOLIDRESPONSE" code="10063" description="invalid modbus tcp protocol ID response" />
		<error name="INVALIDMODBUSTCPUNITIDENTIFIERRESPONSE" code="10064" description="invalid modbus tcp unit identifier response" />
		<error name="MODBUSTCPRESPONSELENGTHMISMATCH" code="10065" description="modbus tcp response length mismatch" />		
		<error name="MODBUSTCPINVALIDCOILSTATUSBITCOUNT" code="10066" description="modbus TCP Invalid coils status bit count." />
		<error name="MODBUSTCPINVALIDCOILSTATUSRESPONSE" code="10067" description="modbus TCP Invalid coils status response." />
		<error name="MODBUSTCPCOILSTATUSRESPONSEEMPTY" code="10068" description="modbus TCP coils status response empty." />
		<error name="MODBUSTCPINVALIDCOILSTATUSRESPONSESIZE" code="10069" description="modbus TCP invalid coil status response size." />
		<error name="MODBUSTCPINVALIDINPUTSTATUSBITCOUNT" code="10070" description="modbus TCP invalid input status bit count." />
		<error name="MODBUSTCPINVALIDINPUTSTATUSRESPONSE" code="10071" description="modbus TCP invalid input status response." />
		<error name="MODBUSTCPINPUTSTATUSRESPONSEEMPTY" code="10072" description="modbus TCP input status response empty." />		
		<error name="MODBUSTCPINVALIDINPUTSTATUSRESPONSESIZE" code="10073" description="modbus TCP invalid input status response size." />
		<error name="INVALIDMODBUSTCPCOILCOUNT" code="10074" description="invalid modbus tcp coil count." />
		<error name="INVALIDMODBUSTCPREGISTERCOUNT" code="10075" description="invalid modbus tcp register count." />
		<error name="INVALIDMODBUSIOINDEX" code="10076" description="invalid modbus IO index." />
		<error name="MODBUSIOSTATUSEMPTY" code="10077" description="modbus io status empty." />
		<error name="INVALIDMODBUSREGISTERINDEX" code="10078" description="invalid modbus register index." />
		<error name="MODBUSREGISTERSTATUSEMPTY" code="10079" description="modbus register status empty." />		
		<error name="MODBUSTCPINVALIDINPUTREGISTERSRESPONSE" code="10080" description="modbus TCP invalid input registers response" />
		<error name="MODBUSTCPINPUTREGISTERSRESPONSEEMPTY" code="10081" description="modbus TCP input registers response empty" />
		<error name="MODBUSTCPINVALIDINPUTREGISTERSRESPONSESIZE" code="10083" description="modbus TCP invalid input registers response size" />
		<error name="MODBUSTCPINVALIDHOLDINGREGISTERSRESPONSE" code="10084" description="modbus TCP invalid holding registers response" />
		<error name="MODBUSTCPHOLDINGREGISTERSRESPONSEEMPTY" code="10085" description="modbus TCP holding registers response empty" />
		<error name="MODBUSTCPINVALIDHOLDINGREGISTERSRESPONSESIZE" code="10086" description="modbus TCP invalid holding registers response size" />
		<error name="SIGNALUUIDNOTACTIVE" code="10087" description="signal UUID not active." />		
		<error name="COULDNOTPARSEXMLSTRING" code="10088" description="could not parse XML string." />		
		<error name="COULDNOTPARSEXMLDATA" code="10089" description="could not parse XML data." />		
		<error name="INVALIDPROFILEVALUETYPE" code="10090" description="Invalid profile value type." />		
		<error name="XMLDOCUMENTMISMATCH" code="10091" description="XML Document mismatch." />				
		<error name="INVALIDINTEGERVALUEATTRIBUTE" code="10092" description="Invalid integer value attribute." />				
		<error name="INTEGERVALUEATTRIBUTEOUTOFRANGE" code="10093" description="Integer value attribute out of range." />				
		<error name="INVALIDDOUBLEVALUEATTRIBUTE" code="10094" description="Invalid double value attribute." />				
		<error name="DOUBLEVALUEATTRIBUTEOUTOFRANGE" code="10095" description="Double value attribute out of range." />						
		<error name="INVALIDDEFAULTIMAGEVALUE" code="10096" description="Invalid default image value." />
		<error name="INVALIDPIXELMEMORYSIZE" code="10097" description="Invalid pixel memory size." />
		<error name="INVALIDFIELDBUFFER" code="10098" description="Invalid field buffer." />
		<error name="INTERNALFIELDSIZEERROR" code="10099" description="Internal field size error." />
		<error name="INVALIDFIELDSIZE" code="10100" description="Invalid field size." />
		<error name="INVALIDFIELDSCALINGFACTOR" code="10101" description="Invalid field scaling factor." />
		<error name="SCALINGEXCEEDSMAXIMUMPIXELCOUNT" code="10102" description="Scaling exceeds maximum pixel count." />
		<error name="INTERNALSCALINGERROR" code="10103" description="Internal scaling error." />
		<error name="INVALIDCOLORRANGE" code="10104" description="Invalid color range." />
		<error name="EMPTYJOURNALVARIABLENAME" code="10105" description="Empty journal variable name." />
		<error name="INVALIDJOURNALVARIABLEINTERVAL" code="10106" description="Invalid journal variable interval." />
		<error name="JOURNALVARIABLENOTFOUND" code="10107" description="Journal variable not found." />
		<error name="COMPUTATIONOUTSIDEOFJOURNALDATA" code="10108" description="Computation outside of journal data." />
		<error name="INVALIDJOURNALCOMPUTEINTERVAL" code="10109" description="Invalid Journal compute interval." />
		<error name="INVALIDJOURNALCOMPUTEDATA" code="10110" description="Invalid Journal compute data." />
		<error name="INVALIDSEGMENTATTRIBUTETYPE" code="10111" description="Invalid Segment Attribute Type." />
		<error name="SEGMENTATTRIBUTENOTFOUND" code="10112" description="Segment Attribute not Found." />
		<error name="UNSUPPORTEDFIELDSAMPLINGMODE" code="10113" description="Unsupported field sampling mode." />
		<error name="SAMPLEPOINTCOUNTEXCEEDSMAXIMUM" code="10114" description="Sample point count exceeds maximum"/>
		<error name="INVALIDCLAMPINTERVAL" code="10115" description="Invalid clamp interval"/>
		<error name="COULDNOTRETRIEVEPNGSTREAM" code="10116" description="Could not retrieve PNG stream"/>
		<error name="COULDNOTSTOREFIELDDATA" code="10117" description="Could not store field data"/>
		<error name="DISCRETEFIELDDATANOTFOUND" code="10118" description="Discrete field data not found"/>
		<error name="EMPTYUSERLOGIN" code="10119" description="Empty user login"/>
		<error name="INVALIDUSERLOGIN" code="10120" description="Invalid user login"/>
		<error name="EMPTYPERMISSIONIDENTIFIER" code="10121" description="Empty permission identifier"/>
		<error name="INVALIDPERMISSIONIDENTIFIER" code="10122" description="Invalid permission identifier"/>
		<error name="EMPTYUSERROLE" code="10123" description="Empty user role"/>
		<error name="INVALIDUSERROLE" code="10124" description="Invalid user role"/>
		<error name="EMPTYUSERLANGUAGE" code="10125" description="Empty user language"/>
		<error name="INVALIDUSERLANGUAGE" code="10126" description="Invalid user language"/>
		<error name="ORIGINOUTOFRANGE" code="10127" description="Origin out of range"/>
		<error name="RAWPIXELDATASIZEMISMATCH" code="10128" description="Raw pixel data size mismatch"/>		
		<error name="EMPTYPNGSTREAM" code="10129" description="Empty PNG Stream"/>
		<error name="COULDNOTLOADPNGIMAGE" code="10130" description="Could not load PNG image"/>
		<error name="INVALIDPIXELSIZE" code="10131" description="Invalid pixel size"/>
		<error name="MESHISNOTREGISTERED" code="10132" description="Mesh is not registered"/>
		<error name="INVALIDUSERINDEX" code="10133" description="Invalid user index"/>
		

	</errors>


	<enum name="ImagePixelFormat">
		<option name="Unknown" value="0" />
		<option name="GreyScale8bit" value="1" />
		<option name="RGB24bit" value="2" />
		<option name="RGBA32bit" value="3" />
	</enum>
	
	<enum name="FieldSamplingMode">
		<option name="Unknown" value="0" description="Field sampling mode is invalid." />
		<option name="FloorCoordinate" value="1" description="Point Coordinates are rounded down to the nearest pixel and the point value is fully attached to this pixel. Points on a border will be attached to the pixel which is nearer to the origin." />
		<option name="CeilCoordinate" value="2" description="Point Coordinates are rounded up to the nearest pixel and the point value is fully attached to this pixel. Points on a border will be attached to the pixel which is farer from the origin." />
		<option name="WeightByRectangleArea" value="3" description="Point values are valued by a rectangle shape area and its overlap with each pixel (with the center as the given coordinate)." />
		<option name="WeightByEllipseArea" value="4" description="Point values are valued by a ellipse shape area that its overlap with each pixel (with the center as the given coordinate)." />
	</enum>
	
	
	<enum name="ToolpathSegmentType">
		<option name="Unknown" value="0" />
		<option name="Hatch" value="1" />
		<option name="Loop" value="2" />
		<option name="Polyline" value="3" />
	</enum>
	
	<enum name="ToolpathAttributeType">
		<option name="Unknown" value="0" />
		<option name="Integer" value="1" />
		<option name="Double" value="2" />
	</enum>

	<enum name="ToolpathProfileValueType">
		<option name="Custom" value="0" />
		<option name="Speed" value="1" />
		<option name="JumpSpeed" value="2" />
		<option name="ExtrusionFactor" value="3" />
		<option name="LaserPower" value="4" />
		<option name="StartDelay" value="5" />
		<option name="EndDelay" value="6" />
		<option name="PolyDelay" value="7" />
		<option name="PolyDelayAngleDependent" value="8" />
		<option name="LaserOnDelay" value="9" />
		<option name="LaserOffDelay" value="10" />
		<option name="JumpDelay" value="11" />
		<option name="MarkDelay" value="12" />
		<option name="LaserFocus" value="13" />
	</enum>
	
	<enum name="MessageDialogType">
		<option name="Unknown" value="0" />
		<option name="DialogOK" value="1" />
		<option name="DialogOKCancel" value="2" />
		<option name="DialogYesNo" value="3" />
		<option name="DialogYesNoCancel" value="4" />
	</enum>
	
	
	<struct name="Position2D">
		<member name="Coordinates" type="int32" rows="2"/>
	</struct>

	<struct name="Hatch2D">
		<member name="X1" type="int32" />
		<member name="Y1" type="int32" />
		<member name="X2" type="int32" />
		<member name="Y2" type="int32" />
	</struct>

	<struct name="FloatPosition2D">
		<member name="Coordinates" type="double" rows="2"/>
	</struct>

	<struct name="FieldData2DPoint">
		<member name="Coordinates" type="double" rows="2"/>
		<member name="Value" type="double" />
	</struct>

	<struct name="FieldData3DPoint">
		<member name="Coordinates" type="double" rows="3"/>
		<member name="Value" type="double" />
	</struct>

	<struct name="FloatHatch2D">
		<member name="X1" type="double" />
		<member name="Y1" type="double" />
		<member name="X2" type="double" />
		<member name="Y2" type="double" />
	</struct>


	<struct name="ToolpathPartTransform">
		<member name="Matrix" type="double" rows="3" columns="3"/>
		<member name="Translation" type="double" rows="3"/>
	</struct>

	<struct name="ColorRGB">
		<member name="Red" type="double" description="Red value of color (0..1)" />
		<member name="Green" type="double" description="Green value of color (0..1)"/>
		<member name="Blue" type="double" description="Blue value of color (0..1)" />
	</struct>

	<struct name="TimeStreamEntry" description="Entry of a time stream.">
		<member name="TimestampInMS" type="uint64" />
		<member name="Value" type="double" />
	</struct>

	
	<class name="Base">
	</class>


	<class name="Iterator" parent="Base">
		<method name="MoveNext" description="Iterates to the next object in the list.">
			<param name="HasNext" type="bool" pass="return" description="Iterates to the next object in the list."/>
		</method>
		<method name="MovePrevious" description="Iterates to the previous object in the list.">
			<param name="HasPrevious" type="bool" pass="return" description="Iterates to the previous object in the list."/>
		</method>
		<method name="GetCurrent" description="Returns the object the iterator points at.">
			<param name="Instance" type="handle" class="Base" pass="return" description="returns the object instance."/>
		</method>
		<method name="Clone" description="Creates a new object iterator with the same object list.">
			<param name="OutIterator" type="handle" class="Iterator" pass="return" description="returns the cloned Iterator instance"/>
		</method>
		<method name="Count" description="Returns the number of resoucres the iterator captures.">
			<param name="Count" type="uint64" pass="return" description="returns the number of objects the iterator captures."/>
		</method>
	</class>

	
	<class name="TestEnvironment" parent="Base">
	
		<method name="WriteTestOutput" description="Write output file to test directory.">
			<param name="OutputName" type="string" pass="in" description="Output file name. Only alphanumeric characters, point, underscore and hypen are allowed."/>
			<param name="Data" type="basicarray" class="uint8" pass="in" description="Test data to write into output directory."/>
		</method>
		
	</class>

	
	<class name="PNGImageStoreOptions" parent="Base" description="Option class to parametrize saving of PNG Images.">
	
		<method name="ResetToDefaults" description="Resets Options to default.">
		</method>	
	
	</class>
	
	
	<class name="PNGImageData" parent="Base" description="Binary representation of PNG Data.">

		<method name="GetSizeInPixels" description="Returns image pixel sizes.">
			<param name="PixelSizeX" type="uint32" pass="out" description="Number of pixels in X" />
			<param name="PixelSizeY" type="uint32" pass="out" description="Number of pixels in Y" />
		</method>		

		<method name="GetPNGDataStream" description="Retrieves encoded data stream of image object.">
			<param name="PNGData" type="basicarray" class="uint8" pass="out" description="PNG Data stream." />
		</method>

	</class>
	
	<class name="ImageData" parent="Base" description="In memory representation of an image.">

		<method name="GetPixelFormat" description="Returns Pixel format of the image.">
			<param name="PixelFormat" type="enum" class="ImagePixelFormat" pass="return" description="Pixel Format of image" />
		</method>

		<method name="ChangePixelFormat" description="Changes Pixel format of the image. Might lose alpha or color information during the process.">
			<param name="PixelFormat" type="enum" class="ImagePixelFormat" pass="in" description="new Pixel Format of image" />
		</method>

		<method name="GetDPI" description="Returns DPI values in X and Y.">
			<param name="DPIValueX" type="double" pass="out" description="DPI value in X" />
			<param name="DPIValueY" type="double" pass="out" description="DPI value in Y" />
		</method>

		<method name="SetDPI" description="Sets DPI values in X and Y.">
			<param name="DPIValueX" type="double" pass="in" description="new DPI value in X" />
			<param name="DPIValueY" type="double" pass="in" description="new DPI value in Y" />
		</method>
		
		<method name="GetSizeInMM" description="Returns image sizes inmm.">
			<param name="SizeX" type="double" pass="out" description="Size in X in mm" />
			<param name="SizeY" type="double" pass="out" description="Size in Y in mm" />
		</method>

		<method name="GetSizeInPixels" description="Returns image pixel sizes.">
			<param name="PixelSizeX" type="uint32" pass="out" description="Number of pixels in X" />
			<param name="PixelSizeY" type="uint32" pass="out" description="Number of pixels in Y" />
		</method>		

		<method name="ResizeImage" description="Resizes Image pixel data.">
			<param name="PixelSizeX" type="uint32" pass="out" description="Number of pixels in X" />
			<param name="PixelSizeY" type="uint32" pass="out" description="Number of pixels in Y" />
		</method>		

		<method name="LoadPNG" description="Loads a PNG from a binary array. Supports RGB, RGBA and Greyscale images.">
			<param name="PNGData" type="basicarray" class="uint8" pass="in" description="PNG Data stream." />
		</method>		

		<method name="CreatePNGImage" description="Creates PNG Image out of the pixel data.">		
			<param name="PNGStorageOptions" type="optionalclass" class="PNGImageStoreOptions" pass="in" description="Optional encoding options for the image." />		
			<param name="PNGImage" type="class" class="PNGImageData" pass="return" description="Image data." />		
		</method>

		<method name="EncodePNG" description="Depreciated. DO NOT USE. Encodes PNG and stores data stream in image object.">
		</method>

		<method name="GetEncodedPNGData" description="Depreciated. DO NOT USE. Retrieves encoded data stream of image object. MUST have been encoded with EncodePNG before.">
			<param name="PNGData" type="basicarray" class="uint8" pass="out" description="PNG Data stream." />
		</method>
		
		<method name="ClearEncodedPNGData" description="Depreciated. DO NOT USE. Releases encoded data stream of image object. Depreciated.">
		</method>
		
		<method name="Clear" description="Sets all pixels to a single value.">
			<param name="Value" type="uint32" pass="in" description="Pixel value." />
		</method>		

		<method name="GetPixel" description="Returns one pixel of an image.">
			<param name="X" type="uint32" pass="in" description="Pixel coordinate in X" />
			<param name="Y" type="uint32" pass="in" description="Pixel coordinate in Y" />
			<param name="Value" type="uint32" pass="return" description="Pixel value at this position" />
		</method>		

		<method name="SetPixel" description="Sets one pixel of an image.">
			<param name="X" type="uint32" pass="in" description="Pixel coordinate in X" />
			<param name="Y" type="uint32" pass="in" description="Pixel coordinate in Y" />
			<param name="Value" type="uint32" pass="in" description="New Pixel value at this position" />
		</method>		

		<method name="GetPixelRange" description="Returns a subset of an image or the whole image data.">
			<param name="XMin" type="uint32" pass="in" description="Min Pixel coordinate in X. MUST be within image bounds." />
			<param name="YMin" type="uint32" pass="in" description="Min Pixel coordinate in Y. MUST be within image bounds." />
			<param name="XMax" type="uint32" pass="in" description="Max Pixel coordinate in X. MUST be within image bounds. MUST be larger or equal than MinX" />
			<param name="YMax" type="uint32" pass="in" description="Max Pixel coordinate in Y. MUST be within image bounds. MUST be larger or equal than MinY" />
			<param name="Value" type="basicarray" class="uint8" pass="out" description="Pixel values of the rectangle, rowwise array. Will return the exact number of pixels in size and 1, 3 or 4 bytes per pixel, depending on pixel format." />
		</method>		

		<method name="SetPixelRange" description="Exchanges a subset of an image or the whole image data.">
			<param name="XMin" type="uint32" pass="in" description="Min Pixel coordinate in X. MUST be within image bounds." />
			<param name="YMin" type="uint32" pass="in" description="Min Pixel coordinate in Y. MUST be within image bounds." />
			<param name="XMax" type="uint32" pass="in" description="Max Pixel coordinate in X. MUST be within image bounds. MUST be larger or equal than MinX" />
			<param name="YMax" type="uint32" pass="in" description="Max Pixel coordinate in Y. MUST be within image bounds. MUST be larger or equal than MinY" />
			<param name="Value" type="basicarray" class="uint8" pass="in" description="New pixel values of the rectangle, rowwise array. MUST have the exact number of pixels in size and 1, 3 or 4 bytes per pixel, depending on pixel format." />
		</method>
	
	</class>
	
	<class name="DiscreteFieldData2DStoreOptions" parent="Base" description="Option class to parametrize saving of Field Data.">
	
		<method name="ResetToDefaults" description="Resets Options to default.">
		</method>	
	
	</class>


	<class name="DiscreteFieldData2D" parent="Base" description="In-memory representation of discrete field in space.">

		<method name="GetDPI" description="Returns DPI values in X and Y.">
			<param name="DPIValueX" type="double" pass="out" description="DPI value in X" />
			<param name="DPIValueY" type="double" pass="out" description="DPI value in Y" />
		</method>

		<method name="SetDPI" description="Sets DPI values in X and Y.">
			<param name="DPIValueX" type="double" pass="in" description="new DPI value in X. MUST be positive." />
			<param name="DPIValueY" type="double" pass="in" description="new DPI value in Y. MUST be positive." />
		</method>

		<method name="GetOriginInMM" description="Returns field origin in mm.">
			<param name="OriginX" type="double" pass="out" description="Origin in X in mm" />
			<param name="OriginY" type="double" pass="out" description="Origin in Y in mm" />
		</method>

		<method name="SetOriginInMM" description="Set field origin in mm.">
			<param name="OriginX" type="double" pass="in" description="Origin in X in mm" />
			<param name="OriginY" type="double" pass="in" description="Origin in Y in mm" />
		</method>
		
		<method name="GetSizeInMM" description="Returns field sizes in mm.">
			<param name="SizeX" type="double" pass="out" description="Size in X in mm" />
			<param name="SizeY" type="double" pass="out" description="Size in Y in mm" />
		</method>

		<method name="GetSizeInPixels" description="Returns field pixel sizes.">
			<param name="PixelSizeX" type="uint32" pass="out" description="Number of pixels in X" />
			<param name="PixelSizeY" type="uint32" pass="out" description="Number of pixels in Y" />
		</method>		

		<method name="ResizeField" description="Resizes field pixel data.">
			<param name="PixelSizeX" type="uint32" pass="in" description="Number of pixels in X" />
			<param name="PixelSizeY" type="uint32" pass="in" description="Number of pixels in Y" />
			<param name="DefaultValue" type="double" pass="in" description="Default Pixel value." />
		</method>

		<method name="Clear" description="Sets all pixels to a single value.">
			<param name="Value" type="double" pass="in" description="Pixel value." />
		</method>		

		<method name="Clamp" description="Clamps all pixels to a certain interval.">
			<param name="MinValue" type="double" pass="in" description="Minimum value. MUST be smaller or equal than MaxValue." />
			<param name="MaxValue" type="double" pass="in" description="Maximum value. MUST be larger or equal than MinValue." />
		</method>		

		<method name="GetPixel" description="Returns one pixel of an field. Fails if outside of field size.">
			<param name="X" type="uint32" pass="in" description="Pixel coordinate in X" />
			<param name="Y" type="uint32" pass="in" description="Pixel coordinate in Y" />
			<param name="Value" type="double" pass="return" description="Pixel value at this position" />
		</method>		

		<method name="SetPixel" description="Sets one pixel of an field. Fails if outside of field size.">
			<param name="X" type="uint32" pass="in" description="Pixel coordinate in X" />
			<param name="Y" type="uint32" pass="in" description="Pixel coordinate in Y" />
			<param name="Value" type="double" pass="in" description="New Pixel value at this position" />
		</method>		

		<method name="GetPixelRange" description="Returns a subset of an field or the whole field data.">
			<param name="XMin" type="uint32" pass="in" description="Min Pixel coordinate in X. MUST be within field bounds." />
			<param name="YMin" type="uint32" pass="in" description="Min Pixel coordinate in Y. MUST be within field bounds." />
			<param name="XMax" type="uint32" pass="in" description="Max Pixel coordinate in X. MUST be within field bounds. MUST be larger or equal than MinX" />
			<param name="YMax" type="uint32" pass="in" description="Max Pixel coordinate in Y. MUST be within field bounds. MUST be larger or equal than MinY" />
			<param name="Value" type="basicarray" class="double" pass="out" description="Pixel values of the rectangle, rowwise array. Will return the exact number of pixels in size." />
		</method>		

		<method name="SetPixelRange" description="Exchanges a subset of an field or the whole field data.">
			<param name="XMin" type="uint32" pass="in" description="Min Pixel coordinate in X. MUST be within field bounds." />
			<param name="YMin" type="uint32" pass="in" description="Min Pixel coordinate in Y. MUST be within field bounds." />
			<param name="XMax" type="uint32" pass="in" description="Max Pixel coordinate in X. MUST be within field bounds. MUST be larger or equal than MinX" />
			<param name="YMax" type="uint32" pass="in" description="Max Pixel coordinate in Y. MUST be within field bounds. MUST be larger or equal than MinY" />
			<param name="Value" type="basicarray" class="double" pass="in" description="New pixel values of the rectangle, rowwise array. MUST have the exact number of pixels in size." />
		</method>
		
		<method name="RenderAveragePointValues" description="Renders and array of average point values into the field. ">
			<param name="DefaultValue" type="double" pass="in" description="If a pixel does not contain any value, fall back to this given value." />
			<param name="SamplingMode" type="enum" class="FieldSamplingMode" pass="in" description="Sampling mode of point values." />
			<param name="SampleSizeX" type="double" pass="in" description="How large a sample point should be drawn in Pixel widths. This determines the weighting when a point value overlaps multiple pixels. Ignored if SamplingMode is equal FloorCoordinate or CeilCoordinate. MUST be positive otherwise." />
			<param name="SampleSizeY" type="double" pass="in" description="How large a sample point should be drawn in Pixel heights. This determines the weighting when a point value overlaps multiple pixels. Ignored if SamplingMode is equal FloorCoordinate or CeilCoordinate. MUST be positive otherwise." />
			<param name="PointValues" type="structarray" class="FieldData2DPoint" pass="in" description="Array of Field Data Points that are sorted into the grid. If a point lies on a grid border, it will be counted to all adjacent pixels." />
		</method>
		
		<method name="ScaleFieldDown" description="Scales the field to a smaller size.">
			<param name="FactorX" type="uint32" pass="in" description="The new field will be this factor smaller in X. MUST be positive and smaller than PixelSizeX" />
			<param name="FactorY" type="uint32" pass="in" description="The new field will be this factor smaller in Y. MUST be positive and smaller than PixelSizeY" />
			<param name="NewField" type="class" class="DiscreteFieldData2D" pass="return" description="Scaled Field Instance" />
		</method>		
		
		<method name="ScaleFieldUp" description="Scales the field to a larger size.">
			<param name="FactorX" type="uint32" pass="in" description="The new field will be this factor larger in X. MUST be positive." />
			<param name="FactorY" type="uint32" pass="in" description="The new field will be this factor larger in Y. MUST be positive." />
			<param name="NewField" type="class" class="DiscreteFieldData2D" pass="return" description="Scaled Field Instance" />
		</method>		

		<method name="Discretize" description="Discretizes the field into a finite set of values. All field values will be set to the nearest value in the given array. Equivalent to DiscretizeWithMapping with two identical parameters.">
			<param name="DiscreteValues" type="basicarray" class="double" pass="in" description="An array of values. MUST NOT be empty." />
		</method>
		
		<method name="DiscretizeWithMapping" description="Discretizes the field into a finite set of DiscreteValues. For each field value the nearest DiscreteValue is determined, and the field is set to the element of NewValues with the same index.">
			<param name="DiscreteValues" type="basicarray" class="double" pass="in" description="An array of values. MUST NOT be empty.  " />
			<param name="NewValues" type="basicarray" class="double" pass="in" description="An array of values. MUST have the same cardinality as DiscreteValues." />
		</method>

		<method name="RenderToImageRaw" description="Renders the field into a PNG image. The colors will be linearly interpolated into a given color scheme.">
			<param name="MinValue" type="double" pass="in" description="Min point value. Values smaller than MinValue will be clamped to MinValue." />
			<param name="MinColor" type="struct" class="ColorRGB" pass="in" description="The color assigned to MinValue." />
			<param name="MidValue" type="double" pass="in" description="Mid point value. MUST be at least 1E-6 larger than MinValue." />
			<param name="MidColor" type="struct" class="ColorRGB" pass="in" description="The color assigned to MidValue" />
			<param name="MaxValue" type="double" pass="in" description="Max point value. MUST be at least 1E-6 larger than MidValue. Values larger than MaxValue will be clamped to MaxValue." />
			<param name="MaxColor" type="struct" class="ColorRGB" pass="in" description="The color assigned to MaxValue" />
			<param name="NewImage" type="class" class="ImageData" pass="return" description="New Image with the according data. Pixel size and DPI will be equal to the field. Pixel format will be RGB24bit." />
		</method>		
		
		<method name="TransformField" description="Scales the field values with a factor and a translation.">
			<param name="Scale" type="double" pass="in" description="A scaling factor will be applied to all values in the field." />
			<param name="Offset" type="double" pass="in" description="The offset will be applied to all values in the field after scaling." />
		</method>		

		<method name="AddField" description="Adds another field to the field. Both fields MUST have the same pixel extensions.">
			<param name="OtherField" type="class" class="DiscreteFieldData2D" pass="in" description="Field Instance to add" />
			<param name="Scale" type="double" pass="in" description="A scaling factor will be applied to all values in the other field before adding." />
			<param name="Offset" type="double" pass="in" description="The offset will be applied to all values in the field after scaling." />
		</method>		

		<method name="Duplicate" description="Creates a copy of the field.">
			<param name="NewField" type="class" class="DiscreteFieldData2D" pass="return" description="Scaled Field Instance" />
		</method>		

	</class>


	<class name="DataSeries" parent="Base" description="A data series of points.">
	
		<method name="GetName" description="Returns the name of the data series.">
			<param name="Name" type="string" pass="return" description="Returns the name." />
		</method>
	
		<method name="GetUUID" description="Returns the UUID of the data series.">
			<param name="UUID" type="string" pass="return" description="Returns uuid." />
		</method>

		<method name="Clear" description="Clears all entries of the data series.">
		</method>

		<method name="IsEmpty" description="Checks if data series is empty.">
			<param name="EmptyValue" type="bool" pass="return" description="Returns true if data series has no entries." />
		</method>

		<method name="GetMinimum" description="Returns the minimum time stamp of the data series. Fails if data series is empty.">
			<param name="Minimum" type="uint64" pass="return" description="Minimum time stamp in milliseconds." />
		</method>
		
		<method name="GetMaximum" description="Returns the maximum time stamp of the data series. Fails if data series is empty.">
			<param name="Maximum" type="uint64" pass="return" description="Maximum time stamp in milliseconds." />
		</method>
		
		<method name="GetAllEntries" description="Returns all entries of the data series. Fails if data series is empty.">
			<param name="EntryArray" type="structarray" class="TimeStreamEntry" pass="out" description="Data series entries will be written in this array." />
		</method>
		
		<method name="SetAllEntries" description="Sets all entries of the data series. The time stamp array MUST be sorted in incrementing order, with no two time stamps being equal.">
			<param name="EntryArray" type="structarray" class="TimeStreamEntry" pass="in" description="Data series entries to use." />
		</method>
		
		<method name="SampleJournalVariable" description="Samples a journal variable.">
			<param name="JournalVariable" type="class" class="JournalVariable" pass="in" description="Journal variable to sample." />
			<param name="NumberOfSamples" type="uint32" pass="in" description="Number of samples to generate." />
			<param name="MovingAverageDelta" type="double" pass="in" description="Each sample will be averaged from minus MovingAverageDelta to plus MovingAverageDelta." />
		</method>
		
		
	</class>



	<class name="MeshObject" parent="Base">
	
		<method name="GetName" description="Returns the name of the Mesh Object.">
			<param name="Name" type="string" pass="return" description="Returns the name of the mesh object." />
		</method>
	
		<method name="GetUUID" description="Returns the UUID of the mesh object.">
			<param name="UUID" type="string" pass="return" description="Returns mesh uuid." />
		</method>

		<method name="GetTriangleCount" description="Returns the number of triangles.">
			<param name="TriangleCount" type="uint32" pass="return" description="Number of triangles." />
		</method>
	
		<method name="GetVertexCount" description="Returns the number of vertices.">
			<param name="VertexCount" type="uint32" pass="return" description="Number of vertices." />
		</method>

	</class>


	<class name="ToolpathPart" parent="Base">
	
		<method name="GetName" description="Returns Part Name.">
			<param name="Name" type="string" pass="return" description="Returns toolpath part name." />
		</method>
	
		<method name="GetUUID" description="Returns Part UUID.">
			<param name="UUID" type="string" pass="return" description="Returns toolpath part uuid." />
		</method>

		<method name="GetMeshUUID" description="Returns Mesh UUID of the part.">
			<param name="MeshUUID" type="string" pass="return" description="Returns toolpath part mesh uuid." />
		</method>

		<method name="GetTransform" description="Returns Mesh Transform of the part.">
			<param name="MeshUUID" type="struct" class="ToolpathPartTransform" pass="return" description="Returns the mesh transform of the toolpath." />		
		</method>
	
	</class>


	<class name="ToolpathLayer" parent="Base">
	  
		<method name="GetLayerDataUUID" description="Retrieves the layerdata's uuid">
			<param name="UUID" type="string" pass="return" description="Returns the uuid value." />
		</method>
		
		<method name="GetSegmentCount" description="Retrieves the count of segments.">
			<param name="Count" type="uint32" pass="return" description="Count" />
		</method>
		
		<method name="GetSegmentInfo" description="Retrieves the segment type and point count information .">
			<param name="Index" type="uint32" pass="in" description="Index. Must be between 0 and Count - 1." />
			<param name="Type" type="enum" class="ToolpathSegmentType" pass="out" description="Segment Type" />
			<param name="PointCount" type="uint32" pass="out" description="Point count of segment." />
		</method>

		<method name="GetSegmentType" description="Retrieves the segment type.">
			<param name="Index" type="uint32" pass="in" description="Index. Must be between 0 and Count - 1." />
			<param name="Type" type="enum" class="ToolpathSegmentType" pass="return" description="Segment Type" />
		</method>

		<method name="GetSegmentIntegerAttribute" description="Retrieves the segment integer attribute with the corresponding ID. Fails if attribute does not exist or does have different type.">
			<param name="Index" type="uint32" pass="in" description="Segment Index. Must be between 0 and Count - 1." />
			<param name="AttributeID" type="uint32" pass="in" description="ID of the attribute." />
			<param name="Value" type="int64" pass="return" description="Attribute Value." />
		</method>

		<method name="GetSegmentDoubleAttribute" description="Retrieves the segment double attribute with the corresponding ID. Fails if attribute does not exist or does have different type.">
			<param name="Index" type="uint32" pass="in" description="Segment Index. Must be between 0 and Count - 1." />
			<param name="AttributeID" type="uint32" pass="in" description="ID of the attribute." />
			<param name="Value" type="double" pass="return" description="Attribute Value." />
		</method>

		<method name="HasCustomSegmentAttribute" description="Checks if a segment attribute is registered.">
			<param name="Namespace" type="string" pass="in" description="Namespace of the attribute." />
			<param name="AttributeName" type="string" pass="in" description="Name of the attribute." />
			<param name="ValueExists" type="bool" pass="return" description="Flag if attribute is registered." />
		</method>

		<method name="FindCustomSegmentAttributeID" description="Finds a segment attribute ID. Fails if attribute is not registered.">
			<param name="Namespace" type="string" pass="in" description="Namespace of the attribute." />
			<param name="AttributeName" type="string" pass="in" description="Name of the attribute." />
			<param name="AttributeID" type="uint32" pass="return" description="ID of the attribute." />
		</method>

		<method name="FindCustomSegmentAttributeType" description="Finds a segment attribute type. Fails if attribute is not registered.">
			<param name="Namespace" type="string" pass="in" description="Namespace of the attribute." />
			<param name="AttributeName" type="string" pass="in" description="Name of the attribute." />
			<param name="AttributeType" type="enum" class="ToolpathAttributeType" pass="return" description="Type of the attribute." />
		</method>

		<method name="FindCustomSegmentAttributeInfo" description="Finds a segment attribute ID and type. Fails if attribute is not registered.">
			<param name="Namespace" type="string" pass="in" description="Namespace of the attribute." />
			<param name="AttributeName" type="string" pass="in" description="Name of the attribute." />
			<param name="AttributeID" type="uint32" pass="out" description="ID of the attribute." />
			<param name="AttributeType" type="enum" class="ToolpathAttributeType" pass="out" description="Type of the attribute." />
		</method>

		<method name="GetSegmentPointCount" description="Retrieves the number of points in the segment. For type hatch, the points are taken pairwise.">
			<param name="Index" type="uint32" pass="in" description="Index. Must be between 0 and Count - 1." />
			<param name="HatchCount" type="uint32" pass="return" description="Hatch count of segment." />
		</method>
		
		<method name="GetSegmentHatchCount" description="Retrieves the number of hatches in the segment (i.e. PointCount / 2). Returns 0 if segment is not of type hatch.">
			<param name="Index" type="uint32" pass="in" description="Index. Must be between 0 and Count - 1." />
			<param name="HatchCount" type="uint32" pass="return" description="Hatch count of segment." />
		</method>
		
		<method name="GetSegmentProfileUUID" description="Retrieves the assigned segment profile uuid.">
			<param name="Index" type="uint32" pass="in" description="Index. Must be between 0 and Count - 1." />
			<param name="ProfileUUID" type="string" pass="return" description="Segment Profile UUID" />
		</method>

		<method name="SegmentProfileHasValue" description="Retrieves an assigned profile custom value.">
			<param name="Index" type="uint32" pass="in" description="Index. Must be between 0 and Count - 1." />
			<param name="Namespace" type="string" pass="in" description="Namespace to query for." />
			<param name="ValueName" type="string" pass="in" description="Value Name to query for." />
			<param name="HasValue" type="bool" pass="return" description="Returns true if value exist." />
		</method>

		<method name="GetSegmentProfileValue" description="Retrieves an assigned profile custom value. Fails if value does not exist.">
			<param name="Index" type="uint32" pass="in" description="Index. Must be between 0 and Count - 1." />
			<param name="Namespace" type="string" pass="in" description="Namespace to query for." />
			<param name="ValueName" type="string" pass="in" description="Value Name to query for." />
			<param name="Value" type="string" pass="return" description="String Value." />
		</method>

		<method name="GetSegmentProfileValueDef" description="Retrieves an assigned profile custom value.">
			<param name="Index" type="uint32" pass="in" description="Index. Must be between 0 and Count - 1." />
			<param name="Namespace" type="string" pass="in" description="Namespace to query for." />
			<param name="ValueName" type="string" pass="in" description="Value Name to query for." />
			<param name="DefaultValue" type="string" pass="in" description="Default value if value does not exist." />
			<param name="Value" type="string" pass="return" description="String Value." />
		</method>


		<method name="GetSegmentProfileDoubleValue" description="Retrieves an assigned profile custom double value. Fails if value does not exist or is not a double value.">
			<param name="Index" type="uint32" pass="in" description="Index. Must be between 0 and Count - 1." />
			<param name="Namespace" type="string" pass="in" description="Namespace to query for." />
			<param name="ValueName" type="string" pass="in" description="Value Name to query for." />
			<param name="Value" type="double" pass="return" description="Double Value." />
		</method>

		<method name="GetSegmentProfileDoubleValueDef" description="Retrieves an assigned profile custom double value. Fails if value exists but is not a double value.">
			<param name="Index" type="uint32" pass="in" description="Index. Must be between 0 and Count - 1." />
			<param name="Namespace" type="string" pass="in" description="Namespace to query for." />
			<param name="ValueName" type="string" pass="in" description="Value Name to query for." />
			<param name="DefaultValue" type="double" pass="in" description="Default value if value does not exist." />
			<param name="Value" type="double" pass="return" description="Double Value." />
		</method>

		<method name="GetSegmentProfileIntegerValue" description="Retrieves an assigned profile custom integer value. Fails if value does not exist or is not a integer value.">
			<param name="Index" type="uint32" pass="in" description="Index. Must be between 0 and Count - 1." />
			<param name="Namespace" type="string" pass="in" description="Namespace to query for." />
			<param name="ValueName" type="string" pass="in" description="Value Name to query for." />
			<param name="Value" type="int64" pass="return" description="Integer Value." />
		</method>

		<method name="GetSegmentProfileIntegerValueDef" description="Retrieves an assigned profile custom integer value. Fails if value exists but is not a integer value.">
			<param name="Index" type="uint32" pass="in" description="Index. Must be between 0 and Count - 1." />
			<param name="Namespace" type="string" pass="in" description="Namespace to query for." />
			<param name="ValueName" type="string" pass="in" description="Value Name to query for." />
			<param name="DefaultValue" type="int64" pass="in" description="Default value if value does not exist." />
			<param name="Value" type="int64" pass="return" description="Integer Value." />
		</method>


		<method name="GetSegmentProfileBoolValue" description="Retrieves an assigned profile custom boolean value. A Boolean value is either an integer value, or strings of the form true or false (case insensitive). Fails if value does not exist or is not a bool value.">
			<param name="Index" type="uint32" pass="in" description="Index. Must be between 0 and Count - 1." />
			<param name="Namespace" type="string" pass="in" description="Namespace to query for." />
			<param name="ValueName" type="string" pass="in" description="Value Name to query for." />
			<param name="Value" type="bool" pass="return" description="Boolean Value." />
		</method>

		<method name="GetSegmentProfileBoolValueDef" description="Retrieves an assigned profile custom boolean value. A Boolean value is either an integer value, or strings of the form true or false (case insensitive). Fails if value exists but is not a bool value.">
			<param name="Index" type="uint32" pass="in" description="Index. Must be between 0 and Count - 1." />
			<param name="Namespace" type="string" pass="in" description="Namespace to query for." />
			<param name="ValueName" type="string" pass="in" description="Value Name to query for." />
			<param name="DefaultValue" type="bool" pass="in" description="Default value if value does not exist." />
			<param name="Value" type="bool" pass="return" description="Boolean Value." />
		</method>

		<method name="GetSegmentProfileTypedValue" description="Retrieves an assigned profile value of a standard type. Fails if value does not exist or is not a double value.">
			<param name="Index" type="uint32" pass="in" description="Index. Must be between 0 and Count - 1." />
			<param name="ValueType" type="enum" class="ToolpathProfileValueType" pass="in" description="Enum to query for. MUST NOT be custom." />
			<param name="Value" type="double" pass="return" description="Double Value" />
		</method>

		<method name="GetSegmentProfileTypedValueDef" description="Retrieves an assigned profile value of a standard type. Fails if value exists but is not a double value.">
			<param name="Index" type="uint32" pass="in" description="Index. Must be between 0 and Count - 1." />
			<param name="ValueType" type="enum" class="ToolpathProfileValueType" pass="in" description="Enum to query for. MUST NOT be custom." />
			<param name="DefaultValue" type="double" pass="in" description="Default value if value does not exist." />
			<param name="Value" type="double" pass="return" description="Double Value" />
		</method>
		
		<method name="GetSegmentPartUUID" description="Retrieves the assigned segment part uuid.">
			<param name="Index" type="uint32" pass="in" description="Index. Must be between 0 and Count - 1." />
			<param name="PartUUID" type="string" pass="return" description="Segment Part UUID" />
		</method>
	
		<method name="GetSegmentPointData" description="Retrieves the assigned segment point list. For type hatch, the points are taken pairwise.">
			<param name="Index" type="uint32" pass="in" description="Index. Must be between 0 and Count - 1." />
			<param name="PointData" type="structarray" class="Position2D" pass="out" description="The point data array. Positions are absolute in units." />
		</method>
		
		<method name="GetSegmentHatchData" description="Retrieves the assigned segment hatch list. Fails if segment type is not hatch.">
			<param name="Index" type="uint32" pass="in" description="Index. Must be between 0 and Count - 1." />
			<param name="HatchData" type="structarray" class="Hatch2D" pass="out" description="The hatch data array. Positions are absolute in units." />
		</method>

		<method name="GetSegmentPointDataInMM" description="Retrieves the assigned segment point list. For type hatch, the points are taken pairwise.">
			<param name="Index" type="uint32" pass="in" description="Index. Must be between 0 and Count - 1." />
			<param name="PointData" type="structarray" class="FloatPosition2D" pass="out" description="The point data array. Positions are absolute in mm." />
		</method>
		
		<method name="GetSegmentHatchDataInMM" description="Retrieves the assigned segment hatch list. Fails if segment type is not hatch.">
			<param name="Index" type="uint32" pass="in" description="Index. Must be between 0 and Count - 1." />
			<param name="HatchData" type="structarray" class="FloatHatch2D" pass="out" description="The hatch data array. Positions are absolute in mm." />
		</method>
		
		<method name="GetZValue" description="Retrieves the layers Z Value in units.">
			<param name="ZValue" type="int32" pass="return" description="Z Value of the layer in units." />
		</method>

		<method name="GetZValueInMM" description="Retrieves the layers Z Value in mm.">
			<param name="ZValue" type="double" pass="return" description="Z Value of the layer in mm." />
		</method>
		
		<method name="GetUnits" description="Retrieves the toolpath units in mm.">
			<param name="Units" type="double" pass="return" description="Toolpath units." />
		</method>

		<method name="GetMetaDataCount" description="Retrieves the number of metadata nodes in the build file.">
			<param name="MetaDataCount" type="uint32" pass="return" description="Meta Data information." />
		</method>		

		<method name="GetMetaDataInfo" description="Returns the namespace and identifier of the given metadata index.">
			<param name="MetaDataIndex" type="uint32" pass="in" description="Index of metadata to return (0-based)." />
			<param name="Namespace" type="string" pass="out" description="Namespace of the metadata" />
			<param name="Name" type="string" pass="out" description="Name of the metadata" />
		</method>		

		<method name="GetMetaDataContent" description="Returns the metadata XML content of the given metadata index.">
			<param name="MetaDataIndex" type="uint32" pass="in" description="Index of metadata to return (0-based)." />
			<param name="XMLNode" type="class" class="XMLDocumentNode" pass="return" description="XML Metadata Object" />
		</method>		

		<method name="HasUniqueMetaData" description="Checks if a metadata exists in the build file.">
			<param name="Namespace" type="string" pass="in" description="Namespace of the metadata" />
			<param name="Name" type="string" pass="in" description="Name of the metadata" />
			<param name="MetaDataExists" type="bool" pass="return" description="Returns true if metadata exists and is unique." />
		</method>		

		<method name="FindUniqueMetaData" description="Returns the given metadata XML content of the build file. Fails if metadata content does not exist or is not unique.">
			<param name="Namespace" type="string" pass="in" description="Namespace of the metadata" />
			<param name="Name" type="string" pass="in" description="Name of the metadata" />
			<param name="XMLNode" type="class" class="XMLDocumentNode" pass="return" description="XML Metadata Object" />
		</method>		
		
	</class>


	<class name="ToolpathAccessor" parent="Base">
	
		<method name="GetStorageUUID" description="Returns Toolpath storage UUID.">
			<param name="StorageUUID" type="string" pass="return" description="Returns toolpath storage uuid." />
		</method>
	
		<method name="GetBuildUUID" description="Returns UUID of the toolpath's build file.">
			<param name="BuildUUID" type="string" pass="return" description="Returns build uuid." />
		</method>

		<method name="GetLayerCount" description="Returns layer count.">
			<param name="LayerCount" type="uint32" pass="return" description="Returns layer count." />
		</method>

		<method name="RegisterCustomSegmentAttribute" description="Registers a new custom segment attribute to be read.">
			<param name="NameSpace" type="string" pass="in" description="Namespace of the custom attribute." />
			<param name="AttributeName" type="string" pass="in" description="Name of the custom attribute." />
			<param name="AttributeType" type="enum" class="ToolpathAttributeType" pass="in" description="Attribute Type." />
		</method>

		<method name="LoadLayer" description="Reads and returns a layer object.">
			<param name="LayerIndex" type="uint32" pass="in" description="Layer Index." />
			<param name="LayerData" type="class" class="ToolpathLayer" pass="return" description="Toolpath layer object." />
		</method>
		
		<method name="GetUnits" description="Retrieves the toolpath units in mm.">
			<param name="Units" type="double" pass="return" description="Toolpath units." />
		</method>

		<method name="GetPartCount" description="Retrieves the number of parts in the toolpath.">
			<param name="PartCount" type="uint32" pass="return" description="Number of parts." />
		</method>

		<method name="GetPart" description="Retrieves the part information of a toolpath.">
			<param name="PartIndex" type="uint32" pass="in" description="Index of part. MUST be between 0 and PartCount-1" />
			<param name="Part" type="class" class="ToolpathPart" pass="return" description="Part Instance" />
		</method>

		<method name="FindPartByUUID" description="Finds the part information of a toolpath.">
			<param name="PartUUID" type="string" pass="in" description="UUID of part." />
			<param name="Part" type="optionalclass" class="ToolpathPart" pass="return" description="Part Instance. Returns null if part does not exist." />
		</method>
		
		<method name="GetBuildHeightInUnits" description="Retrieves the build height in units.">
			<param name="BuildHeight" type="int32" pass="return" description="Build height in units." />
		</method>

		<method name="GetZValueInUnits" description="Retrieves the layers Z Value in units.">
			<param name="LayerIndex" type="uint32" pass="in" description="Layer Index to return." />
			<param name="ZValue" type="int32" pass="return" description="Z Value of the layer in units." />
		</method>		
		
		<method name="GetBuildHeightInMM" description="Retrieves the build height in mm.">
			<param name="BuildHeight" type="double" pass="return" description="Build height in mm." />
		</method>

		<method name="GetZValueInMM" description="Retrieves the layers Z Value in mm.">
			<param name="LayerIndex" type="uint32" pass="in" description="Layer Index to return." />
			<param name="ZValue" type="double" pass="return" description="Z Value of the layer in mm." />
		</method>		

		<method name="GetMetaDataCount" description="Retrieves the number of metadata nodes in the build file.">
			<param name="MetaDataCount" type="uint32" pass="return" description="Meta Data information." />
		</method>		

		<method name="GetMetaDataInfo" description="Returns the namespace and identifier of the given metadata index.">
			<param name="MetaDataIndex" type="uint32" pass="in" description="Index of metadata to return (0-based)." />
			<param name="Namespace" type="string" pass="out" description="Namespace of the metadata" />
			<param name="Name" type="string" pass="out" description="Name of the metadata" />
		</method>		

		<method name="GetMetaDataContent" description="Returns the metadata XML content of the given metadata index.">
			<param name="MetaDataIndex" type="uint32" pass="in" description="Index of metadata to return (0-based)." />
			<param name="XMLNode" type="class" class="XMLDocumentNode" pass="return" description="XML Metadata Object" />
		</method>		

		<method name="HasUniqueMetaData" description="Checks if a metadata exists in the build file.">
			<param name="Namespace" type="string" pass="in" description="Namespace of the metadata" />
			<param name="Name" type="string" pass="in" description="Name of the metadata" />
			<param name="MetaDataExists" type="bool" pass="return" description="Returns true if metadata exists and is unique." />
		</method>		

		<method name="FindUniqueMetaData" description="Returns the given metadata XML content of the build file. Fails if metadata content does not exist or is not unique.">
			<param name="Namespace" type="string" pass="in" description="Namespace of the metadata" />
			<param name="Name" type="string" pass="in" description="Name of the metadata" />
			<param name="XMLNode" type="class" class="XMLDocumentNode" pass="return" description="XML Metadata Object" />
		</method>		


	</class>


	<class name="Build" parent="Base" description="Build instance to access build files">

		<method name="GetName" description="Returns name of the build.">
			<param name="Name" type="string" pass="return" description="Name of the build." />
		</method>

		<method name="GetBuildUUID" description="Returns uuid of the build.">
			<param name="BuildUUID" type="string" pass="return" description="UUID of the build." />
		</method>

		<method name="GetStorageUUID" description="Returns storage uuid of the build.">
			<param name="StorageUUID" type="string" pass="return" description="Storage UUID of the build." />
		</method>

		<method name="GetStorageSHA256" description="Returns SHA256 of the build stream.">
			<param name="SHA256" type="string" pass="return" description="SHA256 of the build stream." />
		</method>

		<method name="GetLayerCount" description="Returns cached layer count of the toolpath.">
			<param name="LayerCount" type="uint32" pass="return" description="Returns layer count." />
		</method>

		<method name="GetBuildHeightInMM" description="Retrieves the build height in mm.">
			<param name="BuildHeight" type="double" pass="return" description="Build height in mm." />
		</method>

		<method name="GetZValueInMM" description="Retrieves the layers Z Value in mm.">
			<param name="LayerIndex" type="uint32" pass="in" description="Layer Index to return." />
			<param name="ZValue" type="double" pass="return" description="Z Value of the layer in mm." />
		</method>

		<method name="LoadToolpath" description="loads the a toolpath into memory">
		</method>

		<method name="UnloadToolpath" description="unloads the a toolpath from memory, if it has been loaded before.">
		</method>

		<method name="ToolpathIsLoaded" description="checks, if a toolpath object is loaded to memory.">
			<param name="IsLoaded" type="bool" pass="return" description="returns if toolpath is loaded." />
		</method>

		<method name="CreateToolpathAccessor" description="Creates an accessor object for a toolpath. Toolpath MUST have been loaded with LoadToolpath before.">
			<param name="ToolpathInstance" type="class" class="ToolpathAccessor" pass="return" description="Toolpath instance." />
		</method>

		<method name="AddBinaryData" description="Adds binary data to store with the build.">
			<param name="Identifier" type="string" pass="in" description="Unique identifier of the attached data. Fails if ther already exists a binary data with the equal identifier." />
			<param name="Name" type="string" pass="in" description="Name of the attache data" />
			<param name="MIMEType" type="string" pass="in" description="Mime type of the data." />
			<param name="Content" type="basicarray" class="uint8" pass="in" description="Stream content to store" />
			<param name="DataUUID" type="string" pass="return" description="Data UUID of the attachment." />
		</method>
		
		<method name="LoadDiscreteField2DByIdentifier" description="Loads a discrete field by context identifier which was previously stored in the build job. MIME Type MUST be application/amcf-discretefield2d.">
			<param name="ContextIdentifier" type="string" pass="in" description="Unique name of the build attachment. Fails if name does not exist or has invalid Mime type." />
			<param name="FieldDataInstance" type="class" class="DiscreteFieldData2D" pass="return" description="Loaded field instance." />
		</method>	
		
		<method name="LoadDiscreteField2DByUUID" description="Loads a discrete field by uuid which previously stored in the build job. MIME Type MUST be application/amcf-discretefield2d.">
			<param name="DataUUID" type="string" pass="in" description="Data UUID of the attachment. Fails if name does not exist or has invalid Mime type." />
			<param name="FieldDataInstance" type="class" class="DiscreteFieldData2D" pass="return" description="Loaded field instance." />
		</method>	

		<method name="StoreDiscreteField2D" description="Stores a discrete field in the build job. MIME Type will be application/amcf-discretefield2d.">
			<param name="ContextIdentifier" type="string" pass="in" description="Unique name of the build attachment. Fails if name does not exist or has invalid Mime type." />
			<param name="Name" type="string" pass="in" description="Unique name of the build attachment. Fails if name does not exist or has invalid Mime type." />
			<param name="FieldDataInstance" type="class" class="DiscreteFieldData2D" pass="in" description="Field instance to store." />
			<param name="StoreOptions" type="optionalclass" class="DiscreteFieldData2DStoreOptions" pass="in" description="Field Data Store Options." />
			<param name="DataUUID" type="string" pass="return" description="Data UUID of the attachment." />
		</method>	

		<method name="LoadPNGImageByIdentifier" description="Loads a discrete field by context identifier which was previously stored in the build job. MIME Type MUST be image/png.">
			<param name="ContextIdentifier" type="string" pass="in" description="Unique name of the build attachment. Fails if name does not exist or has invalid Mime type." />
			<param name="ImageDataInstance" type="class" class="ImageData" pass="return" description="Image data instance." />
		</method>	
		
		<method name="LoadPNGImageByUUID" description="Loads a discrete field by uuid which was previously stored in the build job. MIME Type MUST be image/png.">
			<param name="DataUUID" type="string" pass="in" description="Data UUID of the attachment. Fails if name does not exist or has invalid Mime type." />
			<param name="ImageDataInstance" type="class" class="ImageData" pass="return" description="Image data instance." />
		</method>	

		<method name="StorePNGImage" description="Stores a discrete field in the build job. MIME Type will be image/png">
			<param name="ContextIdentifier" type="string" pass="in" description="Unique name of the build attachment. Fails if name does not exist or has invalid Mime type." />
			<param name="Name" type="string" pass="in" description="Unique name of the build attachment. Fails if name does not exist or has invalid Mime type." />
			<param name="ImageDataInstance" type="class" class="ImageData" pass="in" description="Image data instance." />
			<param name="StoreOptions" type="optionalclass" class="PNGImageStoreOptions" pass="in" description="PNG Store Options." />
			<param name="DataUUID" type="string" pass="return" description="Data UUID of the attachment." />
		</method>	

				
	</class>
	
	
	<class name="WorkingFileExecution" parent="Base" description="Working File Execution Object">

		<method name="GetStatus" description = "Returns the execution status">
		</method>

		<method name="ReturnStdOut" description = "Returns the output of the executable as string buffer">
			<param name="StringBuffer" type="string" pass="return" description="stdout buffer" />
		</method>


	</class>


	<class name="WorkingFile" parent="Base" description="Working File Access Object">

		<method name="GetAbsoluteFileName" description = "Retrieves absolute file name of the working file">
			<param name="FileName" type="string" pass="return" description="global path of the file" />
		</method>

		<method name="GetSize" description = "Returns the size of temporary file.">
			<param name="FileSize" type="uint64" pass="return" description="file size" />
		</method>

		<method name="CalculateSHA2" description = "Calculates the SHA256 checksum of the file.">
			<param name="SHA2" type="string" pass="return" description="sha256 checksum" />
		</method>

		<method name="ExecuteFile" description = "Executes the temporary file, if it is an executable.">
			<param name="Execution" type="class" class="WorkingFileExecution" pass="return" description="execution object" />
		</method>

		<method name="IsManaged" description = "Returns if the file is managed.">
			<param name="FileIsManaged" type="bool" pass="return" description="returns if the file is managed." />
		</method>

		<method name="MakeManaged" description = "Makes the file managed if it is not managed yet.">
		</method>

		<method name="FileExists" description = "Returns if the file exists on disk.">
			<param name="FileDoesExist" type="bool" pass="return" description="returns if the file exists." />
		</method>

		<method name="DeleteFromDisk" description = "Deletes the temporary file.">
			<param name="Success" type="bool" pass="return" description="returns if deletion was successful or file did not exist in the first place." />
		</method>
				
	</class>

	<class name="WorkingFileIterator" parent="Iterator">
		<method name="GetCurrentFile" description="Returns the working file the iterator points at.">
			<param name="WorkingFile" type="handle" class="WorkingFile" pass="return" description="returns the WorkingFile instance."/>
		</method>
	</class>


	<class name="WorkingDirectory" parent="Base" description="Working Directory Access Object">

		<method name="IsActive" description = "Working directory is active.">
			<param name="IsActive" type="bool" pass="return" description="returns true if files can be read and written to the directory." />
		</method>

		<method name="GetAbsoluteFilePath" description = "Retrieves absolute file path.">
			<param name="FilePath" type="string" pass="return" description="global path of the directory, including path delimiter." />
		</method>

		<method name="StoreCustomData" description = "Stores a data buffer in a temporary file with a given name.">
			<param name="FileName" type="string" pass="in" description="filename to store to. Can not include any path delimiters or .." />
			<param name="DataBuffer" type="basicarray" class="uint8" pass="in" description="file data to store to." />
			<param name="WorkingFile" type="class" class="WorkingFile" pass="return" description="working file instance." />
		</method>

		<method name="StoreCustomString" description = "Stores a string in a temporary file with a given name.">
			<param name="FileName" type="string" pass="in" description="filename to store to. Can not include any path delimiters or .." />
			<param name="DataString" type="string" pass="in" description="file data to store to." />
			<param name="WorkingFile" type="class" class="WorkingFile" pass="return" description="working file instance." />
		</method>

		<method name="StoreDriverData" description = "Stores attached driver data in a temporary file.">
			<param name="FileName" type="string" pass="in" description="filename to store to. Can not include any path delimiters or .." />
			<param name="Identifier" type="string" pass="in" description="identifier of the binary data in the driver package." />
			<param name="WorkingFile" type="class" class="WorkingFile" pass="return" description="working file instance." />
		</method>

		<method name="StoreCustomDataInTempFile" description = "Stores a data buffer in a temporary file with a generated name.">
			<param name="Extension" type="string" pass="in" description="extension of the file to store. MAY be an empty string. MUST only include up to 64 alphanumeric characters." />
			<param name="DataBuffer" type="basicarray" class="uint8" pass="in" description="file data to store to." />
			<param name="WorkingFile" type="class" class="WorkingFile" pass="return" description="working file instance." />
		</method>

		<method name="StoreCustomStringInTempFile" description = "Stores a string in a temporary file.">
			<param name="Extension" type="string" pass="in" description="extension of the file to store. MAY be an empty string. MUST only include up to 64 alphanumeric characters." />
			<param name="DataString" type="string" pass="in" description="file data to store to." />
			<param name="WorkingFile" type="class" class="WorkingFile" pass="return" description="working file instance." />
		</method>

		<method name="StoreDriverDataInTempFile" description = "Stores attached driver data in a temporary file.">
			<param name="Extension" type="string" pass="in" description="extension of the file to store. MAY be an empty string. MUST only include up to 64 alphanumeric characters." />
			<param name="Identifier" type="string" pass="in" description="identifier of the binary data in the driver package." />
			<param name="WorkingFile" type="class" class="WorkingFile" pass="return" description="working file instance." />
		</method>

		<method name="CleanUp" description = "Deletes all managed files in the directory and the directory. No storing is possible after a cleanup.">
			<param name="Success" type="bool" pass="return" description="returns if deletion was successful." />
		</method>

		<method name="AddManagedFile" description = "Adds a managed filename in the directory (i.e. this file will be deleted at CleanUp). Subdirectories are not allowed.">
			<param name="FileName" type="string" pass="in" description="Filename to manage. The file does not need to exist yet." />
			<param name="WorkingFile" type="class" class="WorkingFile" pass="return" description="working file instance." />
		</method>

		<method name="HasUnmanagedFiles" description = "Returns if the working directory has unmanaged files. A clean implementation will never deal with unmanaged files.">
			<param name="HasUnmanagedFiles" type="bool" pass="return" description="returns if there are unmanaged files." />
		</method>

		<method name="RetrieveUnmanagedFiles" description = "Returns a list of unmanaged files." >
			<param name="IteratorInstance" type="class" class="WorkingFileIterator" pass="return" description="working file iterator instance." />
		</method>

		<method name="RetrieveManagedFiles" description = "Returns a list of managed files." >
			<param name="IteratorInstance" type="class" class="WorkingFileIterator" pass="return" description="working file iterator instance." />
		</method>

		<method name="RetrieveAllFiles" description = "Returns a list of all files in the directory." >
			<param name="IteratorInstance" type="class" class="WorkingFileIterator" pass="return" description="working file iterator instance." />
		</method>

	</class>


	
	<class name="XMLDocumentAttribute" parent="Base" description="An XML document attribute.">

		<method name="GetNameSpace" description="Retrieves namespace of the attribute.">
			<param name="NameSpace" type="string" pass="return" description="returns the namespace of the attribute." />
		</method>

		<method name="GetName" description="Retrieves name of the attribute.">
			<param name="Name" type="string" pass="return" description="returns the name of the attribute." />
		</method>
				
		<method name="GetValue" description="Retrieves value of the attribute as string.">
			<param name="Value" type="string" pass="return" description="returns the value of the attribute." />
		</method>

		<method name="IsValidUUID" description="Checks if the value is a valid UUID string.">
			<param name="IsValid" type="bool" pass="return" description="returns if the value is a valid UUID string." />
		</method>
		
		<method name="GetUUIDValue" description="Retrieves value of the attribute as UUID string. Fails if value is not a UUID string.">
			<param name="Value" type="string" pass="return" description="returns the value of the attribute as normalized UUID string." />
		</method>

		<method name="IsValidInteger" description="Checks if the value is a valid integer in the given range.">
			<param name="MinValue" type="int64" pass="in" description="Minimum allowed value" />
			<param name="MaxValue" type="int64" pass="in" description="Maximum allowed value" />
			<param name="IsValid" type="bool" pass="return" description="returns if the value is a valid integer." />
		</method>

		<method name="GetIntegerValue" description="Returns the value as integer. Fails if the value is not a valid integer in the given range.">
			<param name="MinValue" type="int64" pass="in" description="Minimum allowed value" />
			<param name="MaxValue" type="int64" pass="in" description="Maximum allowed value" />
			<param name="Value" type="int64" pass="return" description="returns the value." />
		</method>


		<method name="IsValidDouble" description="Checks if the value is a valid double in the given range.">
			<param name="MinValue" type="double" pass="in" description="Minimum allowed value" />
			<param name="MaxValue" type="double" pass="in" description="Maximum allowed value" />
			<param name="IsValid" type="bool" pass="return" description="returns if the value is a valid double." />
		</method>

		<method name="GetDoubleValue" description="Returns the value as double. Fails if the value is not a valid double in the given range.">
			<param name="MinValue" type="double" pass="in" description="Minimum allowed value" />
			<param name="MaxValue" type="double" pass="in" description="Maximum allowed value" />
			<param name="Value" type="double" pass="return" description="returns the value ." />
		</method>
		
		<method name="IsValidBool" description="Checks if the value is a valid boolean value, meaning an integer or true or false as string. The value will be trimmed and any character will be converted to lowercase.">
			<param name="IsValid" type="bool" pass="return" description="returns if the value is a valid bool." />
		</method>

		<method name="GetBoolValue" description="Returns the value as bool. Fails if the value is not a valid boolean value, meaning an integer or true or false as string. The value will be trimmed and any character will be converted to lowercase.">
			<param name="Value" type="bool" pass="return" description="returns the value ." />
		</method>

		<method name="SetValue" description="Sets the value of the attribute as string.">
			<param name="Value" type="string" pass="in" description="new value of the attribute." />
		</method>
		
		<method name="SetUUIDValue" description="Sets the value of the attribute as UUID string.">
			<param name="Value" type="string" pass="in" description="new value of the attribute. Fails if Value is not a UUID." />
		</method>

		<method name="SetIntegerValue" description="Sets the value of the attribute as integer.">
			<param name="Value" type="int64" pass="in" description="new value of the attribute." />
		</method>

		<method name="SetDoubleValue" description="Sets the value of the attribute as double.">
			<param name="Value" type="double" pass="in" description="new value of the attribute." />
		</method>

		<method name="SetBoolValue" description="Sets the value of the attribute as bool.">
			<param name="Value" type="bool" pass="in" description="new value of the attribute." />
		</method>

		<method name="Remove" description="Removes the attribute from its parent node. All subsequent calls to the class will fail.">
		</method>
		
	</class>


	<class name="XMLDocumentNode" parent="Base" description="An XML document node.">

		<method name="GetName" description="Retrieves name of the node.">
			<param name="Name" type="string" pass="return" description="returns the name of the node." />
		</method>
				
		<method name="GetNameSpace" description="Retrieves namespace of the node.">
			<param name="NameSpace" type="string" pass="return" description="returns the namespace of the node." />
		</method>

		<method name="GetTextContent" description="Retrieves the text content of the node. A node with text content MUST NOT have children.">
			<param name="TextContent" type="string" pass="return" description="returns the text content of the node." />
		</method>

		<method name="SetTextContent" description="Sets the text content of the node. Call will fail if node has children.">
			<param name="TextContent" type="string" pass="in" description="the new text content of the node." />
		</method>

		<method name="GetAttributeCount" description="Returns number of attributes.">
			<param name="Count" type="uint64" pass="return" description="returns the number of attributes." />
		</method>
				
		<method name="GetAttribute" description="Returns attribute instance. Fails if Index is out of range.">
			<param name="Index" type="uint64" pass="in" description="Index of the attribute to return (0-based)." />
			<param name="AttributeInstance" type="class" class="XMLDocumentAttribute" pass="return" description="XML Document attribute." />
		</method>

		<method name="HasAttribute" description="Returns if attribute of a specific name exists.">
			<param name="NameSpace" type="string" pass="in" description="Namespace of the attribute. If empty, it inherits the namespace of the node." />
			<param name="Name" type="string" pass="in" description="Name of the attribute." />
			<param name="AttributeExists" type="bool" pass="return" description="Returns if the attribute exists." />
		</method>

		<method name="FindAttribute" description="Returns attribute instance of a specific name. ">
			<param name="NameSpace" type="string" pass="in" description="Namespace of the attribute. If empty, it inherits the namespace of the node." />
			<param name="Name" type="string" pass="in" description="Name of the attribute." />
			<param name="MustExist" type="bool" pass="in" description="If true, the call fails if attribute does not exist. If falls, the call will return null if the attribute does not exist." />			
			<param name="AttributeInstance" type="optionalclass" class="XMLDocumentAttribute" pass="return" description="XML Document attribute." />
		</method>

		<method name="GetAttributeValue" description="Returns string value of an attribute. Fails if attribute does not exist.">
			<param name="NameSpace" type="string" pass="in" description="Namespace of the attribute. If empty, it inherits the namespace of the node." />
			<param name="Name" type="string" pass="in" description="Name of the attribute." />
			<param name="Value" type="string" pass="return" description="Attribute value." />
		</method>

		<method name="GetAttributeIntegerValue" description="Returns integer value of an attribute. Fails if attribute does not exist or attribute is not an integer .">
			<param name="NameSpace" type="string" pass="in" description="Namespace of the attribute. If empty, it inherits the namespace of the node." />
			<param name="Name" type="string" pass="in" description="Name of the attribute." />
			<param name="MinValue" type="int64" pass="in" description="Minimum allowed value." />
			<param name="MaxValue" type="int64" pass="in" description="Maximum allowed value." />
			<param name="Value" type="int64" pass="return" description="Attribute value." />
		</method>

		<method name="GetAttributeDoubleValue" description="Returns double value of an attribute. Fails if attribute does not exist or attribute is not a double value.">
			<param name="NameSpace" type="string" pass="in" description="Namespace of the attribute. If empty, it inherits the namespace of the node." />
			<param name="Name" type="string" pass="in" description="Name of the attribute." />
			<param name="MinValue" type="double" pass="in" description="Minimum allowed value" />
			<param name="MaxValue" type="double" pass="in" description="Maximum allowed value" />
			<param name="Value" type="double" pass="return" description="Attribute value." />
		</method>

		<method name="GetAttributeBoolValue" description="Returns bool value of an attribute. Fails if attribute does not exist or attribute is not a boolean value.">
			<param name="NameSpace" type="string" pass="in" description="Namespace of the attribute. If empty, it inherits the namespace of the node." />
			<param name="Name" type="string" pass="in" description="Name of the attribute." />
			<param name="Value" type="bool" pass="return" description="Attribute value." />
		</method>

		<method name="GetAttributeUUIDValue" description="Returns UUID value of an attribute. Fails if attribute does not exist or attribute value is not a UUID.">
			<param name="NameSpace" type="string" pass="in" description="Namespace of the attribute. If empty, it inherits the namespace of the node." />
			<param name="Name" type="string" pass="in" description="Name of the attribute." />
			<param name="Value" type="string" pass="return" description="Attribute value." />
		</method>

		<method name="GetAttributeValueDef" description="Returns string value of an attribute. Returns default value if attribute does not exist.">
			<param name="NameSpace" type="string" pass="in" description="Namespace of the attribute. If empty, it inherits the namespace of the node." />
			<param name="Name" type="string" pass="in" description="Name of the attribute." />
			<param name="DefaultValue" type="string" pass="in" description="Default value." />
			<param name="Value" type="string" pass="return" description="Attribute value." />
		</method>

		<method name="GetAttributeIntegerValueDef" description="Returns integer value of an attribute. Returns default value if attribute does not exist or attribute is not an integer .">
			<param name="NameSpace" type="string" pass="in" description="Namespace of the attribute. If empty, it inherits the namespace of the node." />
			<param name="Name" type="string" pass="in" description="Name of the attribute." />
			<param name="MinValue" type="int64" pass="in" description="Minimum allowed value." />
			<param name="MaxValue" type="int64" pass="in" description="Maximum allowed value." />
			<param name="DefaultValue" type="int64" pass="in" description="Default value. MUST be in valid range." />
			<param name="Value" type="int64" pass="return" description="Attribute value." />
		</method>

		<method name="GetAttributeDoubleValueDef" description="Returns double value of an attribute. Returns default value if attribute does not exist or attribute is not a double value.">
			<param name="NameSpace" type="string" pass="in" description="Namespace of the attribute. If empty, it inherits the namespace of the node." />
			<param name="Name" type="string" pass="in" description="Name of the attribute." />
			<param name="MinValue" type="double" pass="in" description="Minimum allowed value" />
			<param name="MaxValue" type="double" pass="in" description="Maximum allowed value" />
			<param name="DefaultValue" type="double" pass="in" description="Default value. MUST be in valid range." />
			<param name="Value" type="double" pass="return" description="Attribute value." />
		</method>

		<method name="GetAttributeBoolValueDef" description="Returns bool value of an attribute. Returns default value if attribute does not exist or attribute is not a boolean value.">
			<param name="NameSpace" type="string" pass="in" description="Namespace of the attribute. If empty, it inherits the namespace of the node." />
			<param name="Name" type="string" pass="in" description="Name of the attribute." />
			<param name="DefaultValue" type="bool" pass="in" description="Default value." />
			<param name="Value" type="bool" pass="return" description="Attribute value." />
		</method>

		<method name="GetAttributeUUIDValueDef" description="Returns UUID value of an attribute. Returns default value if attribute does not exist or attribute value is not a UUID.">
			<param name="NameSpace" type="string" pass="in" description="Namespace of the attribute. If empty, it inherits the namespace of the node." />
			<param name="Name" type="string" pass="in" description="Name of the attribute." />
			<param name="DefaultValue" type="string" pass="in" description="Attribute value. MUST be a valid UUID" />
			<param name="Value" type="string" pass="return" description="Attribute value." />
		</method>

		<method name="RemoveAttribute" description="Removes the attribute with a specific name. Does nothing if attribute does not exist.">
			<param name="NameSpace" type="string" pass="in" description="Namespace of the attribute. If empty, it inherits the namespace of the node." />
			<param name="Name" type="string" pass="in" description="Name of the attribute." />
		</method>

		<method name="RemoveAttributeByIndex" description="Removes the attribute with a specific index. Does nothing if attribute does not exist.">
			<param name="Index" type="uint64" pass="in" description="Index of the attribute to remove (0-based)." />
		</method>

		<method name="AddAttribute" description="Adds an attribute with a specific name and string value. Fails if attribute already exists.">
			<param name="NameSpace" type="string" pass="in" description="New namespace of the attribute. MUST be either an empty string for the root namespace, or previously being registered with the document." />
			<param name="Name" type="string" pass="in" description="Name of the attribute." />
			<param name="Value" type="string" pass="in" description="Value of the attribute." />
		</method>

		<method name="AddIntegerAttribute" description="Adds an attribute with a specific name and integer value. Fails if attribute already exists.">
			<param name="NameSpace" type="string" pass="in" description="New namespace of the attribute. MUST be either an empty string for the root namespace, or previously being registered with the document." />
			<param name="Name" type="string" pass="in" description="Name of the attribute." />
			<param name="Value" type="int64" pass="in" description="Value of the attribute." />
		</method>

		<method name="AddDoubleAttribute" description="Adds an attribute with a specific name and double value. Fails if attribute already exists.">
			<param name="NameSpace" type="string" pass="in" description="New namespace of the child. MUST be either an empty string for the root namespace, or previously being registered with the document." />
			<param name="Name" type="string" pass="in" description="Name of the attribute." />
			<param name="Value" type="double" pass="in" description="Value of the attribute." />
		</method>

		<method name="AddBoolAttribute" description="Adds an attribute with a specific name and bool value. Fails if attribute already exists.">
			<param name="NameSpace" type="string" pass="in" description="New namespace of the child. MUST be either an empty string for the root namespace, or previously being registered with the document." />
			<param name="Name" type="string" pass="in" description="Name of the attribute." />
			<param name="Value" type="bool" pass="in" description="Value of the attribute." />
		</method>

		<method name="GetChildren" description="Returns all the child nodes of the XML Node.">
			<param name="ChildNodes" type="class" class="XMLDocumentNodes" pass="return" description="returns the list of child nodes." />
		</method>

		<method name="CountChildrenByName" description="Returns how many children of the XML Node have a specific name.">
			<param name="NameSpace" type="string" pass="in" description="New namespace of the child. MUST be either an empty string for the root namespace, or previously being registered with the document." />
			<param name="Name" type="string" pass="in" description="Name of the node." />
			<param name="Count" type="uint64" pass="return" description="returns the number children with the specified name." />
		</method>
				
		<method name="GetChildrenByName" description="Returns all the child nodes of the XML Node with a specific name.">
			<param name="NameSpace" type="string" pass="in" description="New namespace of the child. MUST be either an empty string for the root namespace, or previously being registered with the document." />
			<param name="Name" type="string" pass="in" description="Name of the child." />
			<param name="ChildNodes" type="class" class="XMLDocumentNodes" pass="return" description="returns the list of child nodes." />
		</method>

		<method name="HasChild" description="Returns if a child with a specific name exist.">
			<param name="NameSpace" type="string" pass="in" description="New namespace of the child. MUST be either an empty string for the root namespace, or previously being registered with the document." />
			<param name="Name" type="string" pass="in" description="Name of the child." />
			<param name="ChildExists" type="bool" pass="return" description="returns if a child with a specific name exists." />
		</method>

		<method name="HasUniqueChild" description="Returns if a child with a specific name exist once and only once.">
			<param name="NameSpace" type="string" pass="in" description="New namespace of the child. MUST be either an empty string for the root namespace, or previously being registered with the document." />
			<param name="Name" type="string" pass="in" description="Name of the child." />
			<param name="ChildExists" type="bool" pass="return" description="returns if a child with a specific name exists once and only once." />
		</method>

		<method name="FindChild" description="Returns child with a specific name. Throws an error if name does not exist once and only once.">
			<param name="NameSpace" type="string" pass="in" description="New namespace of the child. MUST be either an empty string for the root namespace, or previously being registered with the document." />
			<param name="Name" type="string" pass="in" description="Name of the child." />
			<param name="MustExist" type="bool" pass="in" description="If true, the call fails if child does not exist. If falls, the call will return null if the child does not exist." />			
			<param name="ChildInstance" type="optionalclass" class="XMLDocumentNode" pass="return" description="returns child instance or null." />
		</method>
		
		<method name="AddChild" description="Adds a new child with a specific name. Fails if node has a non-empty text content.">
			<param name="NameSpace" type="string" pass="in" description="New namespace of the child. MUST be either an empty string for the root namespace, or previously being registered with the document." />
			<param name="Name" type="string" pass="in" description="Name of the child." />
			<param name="ChildInstance" type="class" class="XMLDocumentNode" pass="return" description="returns child instance." />
		</method>

		<method name="AddChildText" description="Adds a new child with text content and a specific name. Fails if node has a non-empty text content.">
			<param name="NameSpace" type="string" pass="in" description="New namespace of the child. MUST be either an empty string for the root namespace, or previously being registered with the document." />
			<param name="Name" type="string" pass="in" description="Name of the child." />
			<param name="TextContent" type="string" pass="in" description="Text content of the child." />
			<param name="ChildInstance" type="class" class="XMLDocumentNode" pass="return" description="returns child instance." />
		</method>

		<method name="RemoveChild" description="Removes a child with a specific name. All subsequent calls to the child will fail after the call.">
			<param name="ChildInstance" type="class" class="XMLDocumentNode" pass="in" description="child instance to remove. Fails if given instance is not a child of the node." />
		</method>

		<method name="RemoveChildrenWithName" description="Removes all children with a specific name. Does nothing if no child with the name exists. . All subsequent calls to the deleted children will fail after the call.">
			<param name="NameSpace" type="string" pass="in" description="New namespace of the child. MUST be either an empty string for the root namespace, or previously being registered with the document." />
			<param name="Name" type="string" pass="in" description="Name of the children." />
		</method>

		<method name="Remove" description="Removes the node from its parent. The root node of the document can not be removed.">
		</method>

		
		
	</class>

	<class name="XMLDocumentNodes" parent="Base" description="An list of XML document nodes.">

		<method name="GetNodeCount" description="Returns number of nodes.">
			<param name="Count" type="uint64" pass="return" description="returns the number of nodes in the list." />
		</method>
				
		<method name="GetNode" description="Returns node instance. Fails if Index is out of range.">
			<param name="Index" type="uint64" pass="in" description="Index of the node to return (0-based)." />
			<param name="NodeInstance" type="class" class="XMLDocumentNode" pass="return" description="XML Node node." />
		</method>

		<method name="CountNodesByName" description="Returns how many nodes of the XML Node have a specific name.">
			<param name="NameSpace" type="string" pass="in" description="New namespace of the child. MUST be either an empty string for the root namespace, or previously being registered with the document." />
			<param name="Name" type="string" pass="in" description="Name of the node." />
			<param name="Count" type="uint64" pass="return" description="returns the number of nodes with the specified name." />
		</method>

		<method name="GetNodesByName" description="Returns all the nodes nodes of the XML Node with a specific name.">
			<param name="NameSpace" type="string" pass="in" description="New namespace of the child. MUST be either an empty string for the root namespace, or previously being registered with the document." />
			<param name="Name" type="string" pass="in" description="Name of the node." />
			<param name="Nodes" type="class" class="XMLDocumentNodes" pass="return" description="returns the list of node nodes." />
		</method>
				
		<method name="HasNode" description="Returns if a node with a specific name exist.">
			<param name="NameSpace" type="string" pass="in" description="New namespace of the child. MUST be either an empty string for the root namespace, or previously being registered with the document." />
			<param name="Name" type="string" pass="in" description="Name of the node." />
			<param name="NodeExists" type="bool" pass="return" description="returns if a node with a specific name exists." />
		</method>

		<method name="HasUniqueNode" description="Returns if a node with a specific name exist once and only once.">
			<param name="NameSpace" type="string" pass="in" description="New namespace of the child. MUST be either an empty string for the root namespace, or previously being registered with the document." />
			<param name="Name" type="string" pass="in" description="Name of the node." />
			<param name="NodeExists" type="bool" pass="return" description="returns if a node with a specific name exists once and only once." />
		</method>

		<method name="FindNode" description="Returns node with a specific name. Throws an error if name does not exist once and only once.">
			<param name="NameSpace" type="string" pass="in" description="New namespace of the child. MUST be either an empty string for the root namespace, or previously being registered with the document." />
			<param name="Name" type="string" pass="in" description="Name of the node." />
			<param name="MustExist" type="bool" pass="in" description="If true, the call fails if node does not exist. If falls, the call will return null if the node does not exist." />			
			<param name="NodeInstance" type="optionalclass" class="XMLDocumentNode" pass="return" description="returns node instance." />
		</method>


				
	</class>

	<class name="XMLDocument" parent="Base" description="An XML document instance.">
	
		<method name="GetDefaultNamespace" description="Returns default name space of the document.">
			<param name="Namespace" type="string" pass="return" description="name space of the document." />
		</method>	

		<method name="GetNamespaceCount" description="Returns the used number of name spaces of the document.">
			<param name="Count" type="uint64" pass="return" description="number of registered name spaces of the document." />
		</method>	

		<method name="GetNamespace" description="Returns a name space of the document. Will fail if index is invalid.">
			<param name="Index" type="uint64" pass="in" description="index of name space. 0-based." />
			<param name="Namespace" type="string" pass="out" description="name space of the document." />
			<param name="NamespacePrefix" type="string" pass="out" description="name space prefix of the document. Empty for root namespace." />
		</method>	

		<method name="HasNamespace" description="Returns if the document has a namespace.">
			<param name="Namespace" type="string" pass="in" description="Name space name." />
			<param name="NameSpaceIsRegistered" type="bool" pass="return" description="name space has been registered." />
		</method>	

		<method name="GetNamespacePrefix" description="Returns a name space of the document. Will fail if namespace is not registered.">
			<param name="Namespace" type="string" pass="in" description="name space of the document." />
			<param name="NamespacePrefix" type="string" pass="return" description="name space prefix of the document. Empty for root namespace." />
		</method>	

		<method name="RegisterNamespace" description="Registers a custom namespace prefix. Given Namespace MUST NOT have been in use before calling this function.">
			<param name="Namespace" type="string" pass="in" description="name space to register" />
			<param name="NamespacePrefix" type="string" pass="in" description="name space prefix to use for the namespace. MUST NOT be in use, MUST NOT be an empty string or contain non-alphanumeric characters." />
		</method>	

		<method name="ChangeNamespacePrefix" description="Changes the prefix of an existing Namespace. New Namespace MUST NOT have been in use before calling this function.">
			<param name="OldNamespacePrefix" type="string" pass="in" description="name space prefix that is currently in use." />
			<param name="NewNamespacePrefix" type="string" pass="in" description="name space prefix to use for the namespace. MUST NOT be in use, MUST NOT be an empty string or contain non-alphanumeric characters." />
		</method>	
			
		<method name="GetRootNode" description="Returns root node of the document.">
			<param name="RootNode" type="class" class="XMLDocumentNode" pass="return" description="Root node of the document." />
		</method>	

		<method name="SaveToString" description="Saves the XML document into a string.">
			<param name="AddLineBreaks" type="bool" pass="in" description="If true, line breaks and indentation will be added to the output string." />
			<param name="XMLString" type="string" pass="return" description="String with the XML Content." />
		</method>	
				
	</class>


	<class name="TCPIPPacket" parent="Base" description="Contains a received TCPIP packet data.">

		<method name="IsEmpty" description="Returns if packet is empty.">
			<param name="PacketIsEmpty" type="bool" pass="return" description="Flag if packet is empty." />
		</method>
	
		<method name="GetSize" description="Returns the size of the packet. Returns 0 if packet is empty.">
			<param name="PacketSize" type="uint32" pass="return" description="returns size of packet." />
		</method>

		<method name="GetData" description="Returns the data of the packet. Fails if packet is empty.">
			<param name="Buffer" type="basicarray" class="uint8" pass="out" description="packet data." />
		</method>
		
	</class>


	<class name="TCPIPConnection" parent="Base" description="A generic TCP/IP Connection.">

		<method name="GetIPAddress" description= "Returns the IP Address of the Connection.">
			<param name="IPAddress" type="string" pass="return" description="IP Address." />
		</method>

		<method name="GetPort" description= "Returns the Port of the Connection.">
			<param name="Port" type="uint32" pass="return" description="Port." />				
		</method>

		<method name="GetTimeout" description= "Returns the Timeout of the Connection.">
			<param name="Timeout" type="uint32" pass="return" description="Timeout in milliseconds." />				
		</method>

		<method name="IsConnected" description="Returns if the instance is connected.">		
			<param name="IsConnected" type="bool" pass="return" description="." />
		</method>	

		<method name="Disconnect" description= "Disconnects from the Server, if connected.">
		</method>

		<method name="Reconnect" description="Disconnects and Connects to the Server.">		
		</method>	

		<method name="SendBuffer" description= "Sends a buffer of bytes to the Server.">
			<param name="Buffer" type="basicarray" class="uint8" pass="in" description="packet payload." />		
		</method>

		<method name="WaitForData" description= "Waits for a server packet to arrive.">
			<param name="TimeOutInMS" type="uint32" pass="in" description="timeout in Milliseconds." />		
			<param name="DataAvailable" type="bool" pass="return" description="Flag if a new packet has arrived." />		
		</method>

		<method name="ReceiveFixedPacket" description= "Receives a fixed length packet. Blocks until expected number of bytes arrives or timeout is hit. Fails if there is a connection error. Returns empty packet if timeout is hit.">
			<param name="PacketSize" type="uint32" pass="in" description="Size of packet to receive. MUST be larger than 0." />	
			<param name="TimeOutInMS" type="uint32" pass="in" description="Timeout in Milliseconds." />		
			<param name="PacketInstance" type="class" class="TCPIPPacket" pass="return" description="Packet instance. Returns empty packet if timeout is hit" />
		</method>

		<method name="ReceiveData" description= "Receives data. Fails if there is a connection error. Returns empty packet if timeout is hit.">
			<param name="DataSize" type="uint32" pass="in" description="Size of data to receive." />	
			<param name="TimeOutInMS" type="uint32" pass="in" description="timeout in Milliseconds." />		
			<param name="PacketInstance" type="class" class="TCPIPPacket" pass="return" description="Packet instance. Size will be between 0 and DataSize." />
		</method>
				
	</class>

	<class name="ModbusTCPDigitalIOStatus" parent="Base" description="A Modbus TCP coil or input status object.">
	
		<method name="GetCount" description= "Returns the number of Digital IOs in the instance.">
			<param name="Count" type="uint32" pass="return" description="Count." />				
		</method>
		
		<method name="GetBaseAddress" description= "Returns the base address of Digital IOs in the instance.">
			<param name="Address" type="uint32" pass="return" description="Base Address." />				
		</method>

		<method name="GetValue" description= "Returns the cached state of the Digital IO in the instance.">
			<param name="Index" type="uint32" pass="in" description="Index of IO Value. 0-based." />
			<param name="State" type="bool" pass="return" description="State Value." />				
		</method>
		
		<method name="GetValues" description= "Returns all Digital IOs of the instance as byte array.">
			<param name="StateArray" type="basicarray" class="uint8" pass="out" description="State Value Array." />
		</method>
		
	</class>

	<class name="ModbusTCPRegisterStatus" parent="Base" description="A Modbus TCP register status object.">
	
		<method name="GetCount" description= "Returns the number of registers in the instance.">
			<param name="Count" type="uint32" pass="return" description="Count." />				
		</method>
		
		<method name="GetBaseAddress" description= "Returns the base address of registers in the instance.">
			<param name="Address" type="uint32" pass="return" description="Base Address." />				
		</method>

		<method name="GetValue" description= "Returns the cached state of the registers in the instance.">
			<param name="Index" type="uint32" pass="in" description="Index of IO Value. 0-based." />
			<param name="State" type="uint16" pass="return" description="State Value." />				
		</method>
		
		<method name="GetValues" description= "Returns all registers of the instance as word array.">
			<param name="StateArray" type="basicarray" class="uint16" pass="out" description="State Value Array." />
		</method>
		
	</class>

	<class name="ModbusTCPConnection" parent="Base" description="A generic Modbus TCP Connection.">

		<method name="GetIPAddress" description= "Returns the IP Address of the Connection.">
			<param name="IPAddress" type="string" pass="return" description="IP Address." />
		</method>

		<method name="GetPort" description= "Returns the Port of the Connection.">
			<param name="Port" type="uint32" pass="return" description="Port." />				
		</method>

		<method name="GetTimeout" description= "Returns the Timeout of the Connection.">
			<param name="Timeout" type="uint32" pass="return" description="Timeout in milliseconds." />				
		</method>

		<method name="IsConnected" description="Returns if the instance is connected.">		
			<param name="IsConnected" type="bool" pass="return" description="." />
		</method>	

		<method name="Disconnect" description= "Disconnects from the Server.">
		</method>

		<method name="Reconnect" description="Disconnects and Connects to the Server.">		
		</method>	

		<method name="DiagnosisCall" description= "Sends a diagnosis call to the Server.">
			<param name="SubFunction" type="uint16" pass="in" description="Modbus TCP Subfunction ID." />
			<param name="DataField" type="uint16" pass="in" description="Modbus TCP Data Field." />
			<param name="DataResponse" type="uint16" pass="return" description="Modbus TCP Data Response." />
		</method>

		<method name="ReadCoilStatus" description= "Reads coil status of Server.">
			<param name="StartAddress" type="uint32" pass="in" description="Start Address." />
			<param name="BitCount" type="uint32" pass="in" description="Number of coils to read. MUST be larger than 0." />
			<param name="CoilStatus" type="class" class="ModbusTCPDigitalIOStatus" pass="return" description="Coil status instance." />
		</method>
		
		<method name="ReadInputStatus" description= "Reads input status of Server.">
			<param name="StartAddress" type="uint32" pass="in" description="Start Address." />
			<param name="BitCount" type="uint32" pass="in" description="Number of inputs to read. MUST be larger than 0." />
-			<param name="InputStatus" type="class" class="ModbusTCPDigitalIOStatus" pass="return" description="Input status instance." />
		</method>
		
		<method name="ReadHoldingRegisters" description= "Reads holding registers of Server.">
			<param name="StartAddress" type="uint32" pass="in" description="Start Address." />
			<param name="RegisterCount" type="uint32" pass="in" description="Number of registers. MUST be larger than 0." />
			<param name="RegisterInstance" type="class" class="ModbusTCPRegisterStatus" pass="return" description="Holding register instance." />
		</method>
		
		<method name="ReadInputRegisters" description= "Reads input registers of Server.">
			<param name="StartAddress" type="uint32" pass="in" description="Start Address." />
			<param name="RegisterCount" type="uint32" pass="in" description="Number of registers. MUST be larger than 0." />
			<param name="RegisterInstance" type="class" class="ModbusTCPRegisterStatus" pass="return" description="Input register instance." />
		</method>
		
		<method name="ForceMultipleCoils" description= "Forces multiple coils on Server.">
			<param name="StartAddress" type="uint32" pass="in" description="Start Address." />
			<param name="Buffer" type="basicarray" class="uint8" pass="in" description="Input coil array. One byte per Input. MUST NOT be empty" />
		</method>

		<method name="PresetMultipleRegisters" description= "Forces multiple registers on Server.">
			<param name="StartAddress" type="uint32" pass="in" description="Start Address." />
			<param name="Buffer" type="basicarray" class="uint16" pass="in" description="Input register array. One word per Input. MUST NOT be empty" />
		</method>
		
	</class>	


	<class name="DriverStatusUpdateSession" parent="Base" description="Thread-safe class for updating the status variables of the driver">
	
		<method name="SetStringParameter" description="sets a string parameter">
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Value" type="string" pass="in" description="Value to set" />
		</method>

		<method name="SetUUIDParameter" description="sets a uuid parameter">
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Value" type="string" pass="in" description="Value to set" />
		</method>

		<method name="SetDoubleParameter" description="sets a double parameter">
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Value" type="double" pass="in" description="Value to set" />
		</method>

		<method name="SetIntegerParameter" description="sets an int parameter">
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Value" type="int64" pass="in" description="Value to set" />
		</method>

		<method name="SetBoolParameter" description="sets a bool parameter">
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Value" type="bool" pass="in" description="Value to set" />
		</method>	
		
		<method name="LogMessage" description="logs a string as message">
			<param name="LogString" type="string" pass="in" description="String to Log" />
		</method>

		<method name="LogWarning" description="logs a string as warning">
			<param name="LogString" type="string" pass="in" description="String to Log" />
		</method>

		<method name="LogInfo" description="logs a string as info">
			<param name="LogString" type="string" pass="in" description="String to Log" />
		</method>

		<method name="Sleep" description="Sleeps for a definite amount of time.">
			<param name="Delay" type="uint32" pass="in" description="Milliseconds to sleep." />
		</method>
		
	</class>


	<class name="DriverEnvironment" parent="Base" description="Environment of the driver. Method calls should be mutexed by the multithreading of the driver implementation.">
	  
		<method name="CreateStatusUpdateSession" description = "creates a status update object which can be easily called from an independent thread.">
			<param name="UpdateStatusInstance" type="class" class="DriverStatusUpdateSession" pass="return" description="creates a status update instance" />
		</method>

		<method name="CreateWorkingDirectory" description = "creates a temporary working directory.">
			<param name="WorkingDirectory" type="class" class="WorkingDirectory" pass="return" description="creates a working directory" />
		</method>

		<method name="CreateTCPIPConnection" description = "creates a TCP/IP Connection for a specific IP address and port.">
			<param name="IPAddress" type="string" pass="in" description="IP Address." />
			<param name="Port" type="uint32" pass="in" description="Port." />				
			<param name="TimeOutInMS" type="uint32" pass="in" description="timeout in Milliseconds." />		
			<param name="ConnectionInstance" type="class" class="TCPIPConnection" pass="return" description="connects to the given IP Address" />
		</method>

		<method name="CreateModbusTCPConnection" description = "creates a Modbus TCP Connection for a specific IP address and port.">
			<param name="IPAddress" type="string" pass="in" description="IP Address." />
			<param name="Port" type="uint32" pass="in" description="Port." />				
			<param name="TimeOutInMS" type="uint32" pass="in" description="timeout in Milliseconds." />		
			<param name="ConnectionInstance" type="class" class="ModbusTCPConnection" pass="return" description="connects to the given IP Address" />
		</method>

		<method name="CreateXMLDocument" description = "creates an empty XML Document.">
			<param name="RootNodeName" type="string" pass="in" description="Name of the root node. MUST be a valid XML Node Name string." />
			<param name="DefaultNamespace" type="string" pass="in" description="Default namespace of the document. MUST be a valid XML namespace string." />
			<param name="XMLDocument" type="class" class="XMLDocument" pass="return" description="XML Document Instance." />
		</method>

		<method name="ParseXMLString" description = "parses an XML String and returns an XML Document instance. Throws an error if XML is malformatted.">
			<param name="XMLString" type="string" pass="in" description="XML String." />
			<param name="XMLDocument" type="class" class="XMLDocument" pass="return" description="XML Document Instance." />
		</method>

		<method name="ParseXMLData" description = "parses a XML stored in a byte array and returns an XML Document instance. . Throws an error if XML is malformatted.">
			<param name="XMLData" type="basicarray" class="uint8" pass="in" description="XML Binary data." />
			<param name="XMLDocument" type="class" class="XMLDocument" pass="return" description="XML Document Instance." />
		</method>

		<method name="DriverHasResourceData" description = "retrieves if attached driver has data with the given identifier.">
			<param name="Identifier" type="string" pass="in" description="identifier of the binary data in the driver package." />
			<param name="HasResourceData" type="bool" pass="return" description="returns true if the resource exists in the machine resource package." />
		</method>

		<method name="MachineHasResourceData" description = "retrieves if attached driver has data with the given identifier.">
			<param name="Identifier" type="string" pass="in" description="identifier of the binary data in the driver package." />
			<param name="HasResourceData" type="bool" pass="return" description="returns true if the resource exists in the machine resource package." />
		</method>

		<method name="RetrieveDriverData" description = "retrieves attached driver resource data into a memory buffer. (depreciated, equivalent to RetrieveDriverResourceData)">
			<param name="Identifier" type="string" pass="in" description="identifier of the binary data in the driver package." />
			<param name="DataBuffer" type="basicarray" class="uint8" pass="out" description="buffer data." />
		</method>

		<method name="RetrieveDriverResourceData" description = "retrieves attached driver resource data into a memory buffer.">
			<param name="Identifier" type="string" pass="in" description="identifier of the binary data in the driver package." />
			<param name="DataBuffer" type="basicarray" class="uint8" pass="out" description="buffer data." />
		</method>

		<method name="RetrieveMachineResourceData" description = "retrieves a machine resource data (Plugins Directory) driver data into a memory buffer.">
			<param name="Identifier" type="string" pass="in" description="identifier of the binary data in the machine resource package." />
			<param name="DataBuffer" type="basicarray" class="uint8" pass="out" description="buffer data." />
		</method>
		
		<method name="CreateToolpathAccessor" description="Creates an accessor object for a toolpath. Toolpath MUST have been loaded into memory before.">
			<param name="StreamUUID" type="string" pass="in" description="UUID of the stream." />
			<param name="ToolpathInstance" type="class" class="ToolpathAccessor" pass="return" description="Toolpath instance." />
		</method>
		
		<method name="ParameterNameIsValid" description="checks if a name is a valid alphanumerical string for parameters.">
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="NameIsValid" type="bool" pass="return" description="returns true if the parameter name is a valid name." />
		</method>
		
		<method name="RegisterStringParameter" description="registers a string parameter. Must only be called during driver creation.">
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Description" type="string" pass="in" description="Parameter Description" />
			<param name="DefaultValue" type="string" pass="in" description="default value to set" />
		</method>

		<method name="RegisterUUIDParameter" description="registers a uuid parameter. Must only be called during driver creation.">
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Description" type="string" pass="in" description="Parameter Description" />
			<param name="DefaultValue" type="string" pass="in" description="default value to set" />
		</method>

		<method name="RegisterDoubleParameter" description="registers a double parameter. Must only be called during driver creation.">
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Description" type="string" pass="in" description="Parameter Description" />
			<param name="DefaultValue" type="double" pass="in" description="default value to set" />
		</method>

		<method name="RegisterIntegerParameter" description="registers an int parameter. Must only be called during driver creation.">
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Description" type="string" pass="in" description="Parameter Description" />
			<param name="DefaultValue" type="int64" pass="in" description="default value to set" />
		</method>

		<method name="RegisterBoolParameter" description="registers a bool parameter. Must only be called during driver creation.">
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Description" type="string" pass="in" description="Parameter Description" />
			<param name="DefaultValue" type="bool" pass="in" description="default value to set" />
		</method>
		
		
		<method name="SetStringParameter" description="sets a string parameter">
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Value" type="string" pass="in" description="Value to set" />
		</method>

		<method name="SetUUIDParameter" description="sets a uuid parameter">
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Value" type="string" pass="in" description="Value to set" />
		</method>

		<method name="SetDoubleParameter" description="sets a double parameter">
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Value" type="double" pass="in" description="Value to set" />
		</method>

		<method name="SetIntegerParameter" description="sets an int parameter">
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Value" type="int64" pass="in" description="Value to set" />
		</method>

		<method name="SetBoolParameter" description="sets a bool parameter">
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Value" type="bool" pass="in" description="Value to set" />
		</method>
		
		<method name="Sleep" description="Puts the current instance to sleep for a definite amount of time. MUST be used instead of a blocking sleep call.">
			<param name="Delay" type="uint32" pass="in" description="Milliseconds to sleeps" />
		</method>

		<method name="GetGlobalTimerInMilliseconds" description="Returns the global timer in milliseconds.">
			<param name="TimerValue" type="uint64" pass="return" description="Timer value in Milliseconds" />
		</method>

		<method name="LogMessage" description="logs a string as message">
			<param name="LogString" type="string" pass="in" description="String to Log" />
		</method>

		<method name="LogWarning" description="logs a string as warning">
			<param name="LogString" type="string" pass="in" description="String to Log" />
		</method>

		<method name="LogInfo" description="logs a string as info">
			<param name="LogString" type="string" pass="in" description="String to Log" />
		</method>
		
		<method name="CreateEmptyImage" description="creates an empty image object.">
			<param name="PixelSizeX" type="uint32" pass="in" description="Pixel size in X. MUST be positive." />
			<param name="PixelSizeY" type="uint32" pass="in" description="Pixel size in Y. MUST be positive." />
			<param name="DPIValueX" type="double" pass="in" description="DPI Value in X. MUST be positive." />
			<param name="DPIValueY" type="double" pass="in" description="DPI Value in Y. MUST be positive." />
			<param name="PixelFormat" type="enum" class="ImagePixelFormat" pass="in" description="Pixel format to use." />
			<param name="ImageDataInstance" type="class" class="ImageData" pass="return" description="Empty image instance." />
		</method>		
		
		<method name="LoadPNGImage" description="creates an image object from a PNG data stream.">
			<param name="PNGData" type="basicarray" class="uint8" pass="in" description="DPI Value in X. MUST be positive." />
			<param name="DPIValueX" type="double" pass="in" description="DPI Value in X. MUST be positive." />
			<param name="DPIValueY" type="double" pass="in" description="DPI Value in Y. MUST be positive." />
			<param name="PixelFormat" type="enum" class="ImagePixelFormat" pass="in" description="Pixel format to use. Might lose color and alpha information." />
			<param name="ImageDataInstance" type="class" class="ImageData" pass="return" description="Image instance containing the PNG image." />
		</method>

		<method name="CreateDiscreteField2D" description="Creates an empty discrete field.">
			<param name="PixelCountX" type="uint32" pass="in" description="Pixel count in X. MUST be positive." />
			<param name="PixelCountY" type="uint32" pass="in" description="Pixel count in Y. MUST be positive." />
			<param name="DPIValueX" type="double" pass="in" description="DPI Value in X. MUST be positive." />
			<param name="DPIValueY" type="double" pass="in" description="DPI Value in Y. MUST be positive." />
			<param name="OriginX" type="double" pass="in" description="Origin X of the field in mm." />
			<param name="OriginY" type="double" pass="in" description="Origin Y of the field in mm." />
			<param name="DefaultValue" type="double" pass="in" description="Default value of the field." />
			<param name="FieldDataInstance" type="class" class="DiscreteFieldData2D" pass="return" description="Empty field instance." />
		</method>	

		<method name="CreateDiscreteField2DFromImage" description="Creates a discrete field from the greyscale values of an image. RGB colors in the image will be averaged to obtain a greyscale color.">
			<param name="ImageDataInstance" type="class" class="ImageData" pass="in" description="Image instance containing the pixel data." />
			<param name="BlackValue" type="double" pass="in" description="Value that the minimum color (black) shall be mapped to." />
			<param name="WhiteValue" type="double" pass="in" description="Value that the maximum color (white) shall be mapped to." />
			<param name="OriginX" type="double" pass="in" description="Origin X of the field in mm." />
			<param name="OriginY" type="double" pass="in" description="Origin Y of the field in mm." />
			<param name="FieldDataInstance" type="class" class="DiscreteFieldData2D" pass="return" description="Empty field instance." />
		</method>	

		<method name="HasBuildJob" description="Returns if a build object exists. Fails if BuildUUID is not a valid UUID string.">
			<param name="BuildUUID" type="string" pass="in" description="UUID of the build entity." />
			<param name="BuildExists" type="bool" pass="return" description="Returns true if build exists" />
		</method>

		<method name="GetBuildJob" description="Returns a instance of a build object. Fails if build uuid does not exist.">
			<param name="BuildUUID" type="string" pass="in" description="UUID of the build entity." />
			<param name="BuildInstance" type="class" class="Build" pass="return" description="Build instance" />
		</method>

	</class>
	
	

	<class name="SignalTrigger" parent="Base" description="Class for signal triggering">

		<method name="CanTrigger" description="Returns, if signal channel is available.">
			<param name="ChannelIsAvailable" type="bool" pass="return" description="Returns true, if signal channel is available." />
		</method>

		<method name="Trigger" description="Triggers a signal, if signal channel is available.">
		</method>

		<method name="WaitForHandling" description="Waits until the signal is reset.">
			<param name="TimeOut" type="uint32" pass="in" description="Timeout in Milliseconds. 0 for Immediate return." />			
			<param name="Success" type="bool" pass="return" description="Flag if signal handling has been handled." />
		</method>
		
		<method name="GetName" description="Returns the signal name.">
			<param name="SignalName" type="string" pass="return" description="Name Of Signal" />
		</method>
		
		<method name="GetStateMachine" description="Returns the signal state machine instance.">
			<param name="StateMachineName" type="string" pass="return" description="Name Of State Machine" />
		</method>

		<method name="SetString" description="sets a string value">
			<param name="Name" type="string" pass="in" description="Name" />
			<param name="Value" type="string" pass="in" description="Value" />
		</method>

		<method name="SetUUID" description="sets a uuid value">
			<param name="Name" type="string" pass="in" description="Name" />
			<param name="Value" type="string" pass="in" description="Value" />
		</method>

		<method name="SetDouble" description="sets a double">
			<param name="Name" type="string" pass="in" description="Name" />
			<param name="Value" type="double" pass="in" description="Value" />
		</method>

		<method name="SetInteger" description="sets an int.">
			<param name="Name" type="string" pass="in" description="Name" />
			<param name="Value" type="int64" pass="in" description="Value" />
		</method>

		<method name="SetBool" description="sets a bool">
			<param name="Name" type="string" pass="in" description="Name" />
			<param name="Value" type="bool" pass="in" description="Value" />
		</method>

		<method name="GetStringResult" description="returns a string value of the result">
			<param name="Name" type="string" pass="in" description="Name" />
			<param name="Value" type="string" pass="return" description="Value" />
		</method>

		<method name="GetUUIDResult" description="returns a uuid value of the result">
			<param name="Name" type="string" pass="in" description="Name" />
			<param name="Value" type="string" pass="return" description="Value" />
		</method>

		<method name="GetDoubleResult" description="returns a string value of the result">
			<param name="Name" type="string" pass="in" description="Name" />
			<param name="Value" type="double" pass="return" description="Value" />
		</method>

		<method name="GetIntegerResult" description="returns an int value of the result.">
			<param name="Name" type="string" pass="in" description="Name" />
			<param name="Value" type="int64" pass="return" description="Value" />
		</method>

		<method name="GetBoolResult" description="returns a bool value of the result.">
			<param name="Name" type="string" pass="in" description="Name" />
			<param name="Value" type="bool" pass="return" description="Value" />
		</method>

	</class>



	<class name="SignalHandler" parent="Base" description="Class for signal handling">

		<method name="SignalHandled" description="Marks signal as handled and resets signal channel.">
		</method>
		
		<method name="GetName" description="Returns the signal name.">
			<param name="SignalName" type="string" pass="return" description="Name Of Signal" />
		</method>

		<method name="GetSignalID" description="Returns the signal id. Depreciated.">
			<param name="SignalID" type="string" pass="return" description="Signal Identifier" />
		</method>
		
		<method name="GetSignalUUID" description="Returns the signal uuid. Identical to GetSignalID.">
			<param name="SignalUUID" type="string" pass="return" description="Signal Identifier" />
		</method>

		<method name="GetStateMachine" description="Returns the signal state machine instance.">
			<param name="StateMachineName" type="string" pass="return" description="Name Of State Machine" />
		</method>

		<method name="GetString" description="gets a string value">
			<param name="Name" type="string" pass="in" description="Name" />
			<param name="Value" type="string" pass="return" description="Value" />
		</method>

		<method name="GetUUID" description="gets a uuid value">
			<param name="Name" type="string" pass="in" description="Name" />
			<param name="Value" type="string" pass="return" description="Value" />
		</method>


		<method name="GetDouble" description="gets a double">
			<param name="Name" type="string" pass="in" description="Name" />
			<param name="Value" type="double" pass="return" description="Value" />
		</method>

		<method name="GetInteger" description="gets an int.">
			<param name="Name" type="string" pass="in" description="Name" />
			<param name="Value" type="int64" pass="return" description="Value" />
		</method>

		<method name="GetBool" description="gets a bool">
			<param name="Name" type="string" pass="in" description="Name" />
			<param name="Value" type="bool" pass="return" description="Value" />
		</method>

		<method name="SetStringResult" description="returns a string value of the result">
			<param name="Name" type="string" pass="in" description="Name" />
			<param name="Value" type="string" pass="in" description="Value" />
		</method>

		<method name="SetUUIDResult" description="returns a uuid value of the result">
			<param name="Name" type="string" pass="in" description="Name" />
			<param name="Value" type="string" pass="in" description="Value" />
		</method>

		<method name="SetDoubleResult" description="returns a string value of the result">
			<param name="Name" type="string" pass="in" description="Name" />
			<param name="Value" type="double" pass="in" description="Value" />
		</method>

		<method name="SetIntegerResult" description="sets an int.">
			<param name="Name" type="string" pass="in" description="Name" />
			<param name="Value" type="int64" pass="in" description="Value" />
		</method>

		<method name="SetBoolResult" description="sets a bool">
			<param name="Name" type="string" pass="in" description="Name" />
			<param name="Value" type="bool" pass="in" description="Value" />
		</method>

	</class>


	<class name="UniformJournalSampling" parent="Base" description="Result class for Journal Sampling">

		<method name="GetVariableName" description="returns the name of the recorded variable.">
			<param name="Name" type="string" pass="return" description="Path or name." />
		</method>

		<method name="GetNumberOfSamples" description="Returns the number of samples in the interval.">
			<param name="NumberOfSamples" type="uint32" pass="return" description="Number of samples in the sampling." />
		</method>

		<method name="GetStartTimeStamp" description="Returns the beginning time stamp of the available data point.">
			<param name="StartTimeStampInMS" type="uint64" pass="return" description="Start Timestamp of Recording in ms." />
		</method>
	
		<method name="GetEndTimeStamp" description="Returns the beginning time stamp of the available data point.">
			<param name="EndTimeStampInMS" type="uint64" pass="return" description="End Timestamp of Recording in ms." />
		</method>

		<method name="GetSample" description="Returns the timestamp and value of the given sample.">
			<param name="Index" type="uint32" pass="in" description="Index of the sample. 0-based. MUST be smaller than NumberOfSamples." />
			<param name="TimeStamp" type="uint64" pass="out" description="TimeStamp of the sample in ms." />
			<param name="Value" type="double" pass="out" description="Value of the sample in ms." />
		</method>

		<method name="GetAllSamples" description="Returns all timestamps and values of the sampling.">
			<param name="Samples" type="structarray" class="TimeStreamEntry" pass="out" description="Array of Timestream entries, in increasing order." />
		</method>

	</class>


	<class name="JournalVariable" parent="Base" description="Class for accessing journal statistics">
	
		<method name="GetVariableName" description="returns the name of the recorded variable.">
			<param name="Name" type="string" pass="return" description="Path or name." />
		</method>
		
		<method name="GetStartTimeStamp" description="Returns the beginning time stamp of the available data point.">
			<param name="RecordingStartInMS" type="uint64" pass="return" description="Start Timestamp of Recording in ms." />
		</method>
	
		<method name="GetEndTimeStamp" description="Returns the beginning time stamp of the available data point.">
			<param name="RecordingEndInMS" type="uint64" pass="return" description="End Timestamp of Recording in ms." />
		</method>

		<method name="ComputeFullAverage" description="Calculates the average value over the full available time interval.">
			<param name="AverageValue" type="double" pass="return" description="Average value of the variable." />
		</method>
		
		<method name="ComputeAverage" description="Calculates the average value over a time interval. Fails if no data is available in this time interval.">
			<param name="StartTimeInMS" type="uint64" pass="in" description="Start Timestamp of the interval in ms." />
			<param name="EndTimeInMS" type="uint64" pass="in" description="End Timestamp of the interval in ms. MUST be larger than Timestamp." />
			<param name="ClampInterval" type="bool" pass="in" description="If ClampInterval is false, the Interval MUST be completely contained in the available recording time. If ClampInterval is false, the Interval will be reduced to the available recording time. If there is no overlap of the Interval with the Recording time at all, the call will fail." />
			<param name="AverageValue" type="double" pass="return" description="Average value of the variable." />
		</method>
		
		<method name="ComputeUniformAverageSamples" description="Retrieves sample values for an interval. Interval MUST be inside the available recording time.">
			<param name="StartTimeInMS" type="uint64" pass="in" description="Start Timestamp of the interval in ms." />
			<param name="EndTimeInMS" type="uint64" pass="in" description="End Timestamp of the interval in ms." />
			<param name="NumberOfSamples" type="uint32" pass="in" description="End Timestamp of the interval in ms. The Length of the Interval (StartTimeInMS - EndTimeInMS) MUST be a multiple of the Number of samples." />
			<param name="MovingAverageDelta" type="double" pass="in" description="Each sample will be averaged from minus MovingAverageDelta to plus MovingAverageDelta." />
			<param name="ClampInterval" type="bool" pass="in" description="If ClampInterval is false, each moving average interval MUST be completely contained in the available recording time. If ClampInterval is false, the moving average interval will be reduced to the available recording time. If there is no overlap of the Interval with the Recording time at all, the call will fail." />			
			<param name="JournalSampling" type="class" class="UniformJournalSampling" pass="return" description="Returns an instance with the sampling results." />			
		</method>

		<method name="ReceiveRawTimeStream" description="Retrieves the raw timestream data of the variable.">
			<param name="TimeStreamEntries" type="structarray" class="TimeStreamEntry" pass="out" description="All change events of the variable in the accessed interval." />
		</method>
		
	</class>



	<class name="JournalHandler" parent="Base" description="Class for accessing an AMCF journal.">

		<method name="RetrieveJournalVariable" description = "Retrieves the history of a given variable in the system journal.">
			<param name="VariableName" type="string" pass="in" description="Variable name to analyse. Fails if Variable does not exist." />
			<param name="TimeDeltaInMilliseconds" type="uint64" pass="in" description="How many milliseconds the journal should be retrieved in the past." />
			<param name="JournalVariable" type="class" class="JournalVariable" pass="return" description="Journal Instance." />
		</method>
				
		<method name="RetrieveJournalVariableFromTimeInterval" description = "Retrieves the history of a given variable in the system journal for an arbitrary time interval.">
			<param name="VariableName" type="string" pass="in" description="Variable name to analyse. Fails if Variable does not exist." />
			<param name="StartTimeInMilliseconds" type="uint64" pass="in" description="Start time stamp in milliseconds. MUST be smaller than EndTimeInMilliseconds. Fails if larger than recorded time interval." />
			<param name="EndTimeInMilliseconds" type="uint64" pass="in" description="End time stamp in milliseconds. MUST be larger than StartTimeInMilliseconds. Fails if larger than recorded time interval." />
			<param name="JournalVariable" type="class" class="JournalVariable" pass="return" description="Journal Instance." />
		</method>
				
		
		<method name="StoreJournalMarker" description="Stores a journal marker tag at the current time stamp.">
			<param name="MarkerType" type="string" pass="in" description="Marker type to store. MUST be an non-empty alphanumeric string (hypens and underscores are allowed.)" />
			<param name="MarkerName" type="string" pass="in" description="Marker name to store. MUST be an non-empty alphanumeric string (hypens and underscores are allowed.)" />
			<param name="MustBeUnique" type="bool" pass="in" description="If true, it checks for uniqueness of the marker name/type in the current journal." />
			<param name="TimeStamp" type="uint64" pass="return" description="Returns the stored time stamp in milliseconds." />
		</method>

		<method name="HasJournalMarker" description="Checks if a journal marker tag exists.">
			<param name="MarkerType" type="string" pass="in" description="Marker type to store. MUST be an non-empty alphanumeric string (hypens and underscores are allowed.)" />
			<param name="MarkerName" type="string" pass="in" description="Marker name to store. MUST be an non-empty alphanumeric string (hypens and underscores are allowed.)" />
			<param name="MarkerExists" type="bool" pass="return" description="Returns true if the marker exists." />
		</method>

		<method name="RetrieveJournalMarker" description="Retrieves the first existing journal marker time stamp. Fails if marker does not exist.">
			<param name="MarkerType" type="string" pass="in" description="Marker type to store. MUST be an non-empty alphanumeric string (hypens and underscores are allowed.)" />
			<param name="MarkerName" type="string" pass="in" description="Marker name to store. MUST be an non-empty alphanumeric string (hypens and underscores are allowed.)" />
			<param name="MustBeUnique" type="bool" pass="in" description="If true, it checks for uniqueness of the marker name/type in the current journal and fails if there are multiple." />
			<param name="TimeStamp" type="uint64" pass="return" description="Returns the time stamp in milliseconds." />
		</method>
		
		<method name="RetrieveJournalMarkers" description="Retrieves all existing journal marker time stamps. Fails if no marker exists.">
			<param name="MarkerType" type="string" pass="in" description="Marker type to store. MUST be an non-empty alphanumeric string (hypens and underscores are allowed.)" />
			<param name="MarkerName" type="string" pass="in" description="Marker name to store. MUST be an non-empty alphanumeric string (hypens and underscores are allowed.)" />
			<param name="TimeStamps" type="basicarray" class="uint64" pass="out" description="Returns an array of time stamps in milliseconds." />
		</method>
		
	
	</class>

	<class name="UserDetailList" parent="Base" description="List of user details at a certain snapshot time.">

		<method name="Count" description="Result Number of Users in the list.">
			<param name="UserCount" type="uint32" pass="return" description="Number of users in the list" />
		</method>

		<method name="GetUserProperties" description="Retrieves all the data of a user in the list. ">
			<param name="UserIndex" type="uint32" pass="in" description="Index of users in the list (0-based). Call will fail if invalid index is provided." />
			<param name="Username" type="string" pass="out" description="User name" />
			<param name="UUID" type="string" pass="out" description="UUID of the user." />
			<param name="Description" type="string" pass="out" description="Description of the user." />
			<param name="Role" type="string" pass="out" description="Role of the user." />
			<param name="LanguageIdentifier" type="string" pass="out" description="LanguageIdentifier of the user." />
		</method>
		
		<method name="GetUsername" description="Retrieves the user name of a user in the list. ">
			<param name="UserIndex" type="uint32" pass="in" description="Index of users in the list (0-based). Call will fail if invalid index is provided." />
			<param name="Username" type="string" pass="return" description="User name" />
		</method>

		<method name="GetUUID" description="Retrieves the UUID of a user in the list. ">
			<param name="UserIndex" type="uint32" pass="in" description="Index of users in the list (0-based). Call will fail if invalid index is provided." />
			<param name="UUID" type="string" pass="return" description="UUID of the user." />
		</method>

		<method name="GetDescription" description="Retrieves the description of a user in the list. ">
			<param name="UserIndex" type="uint32" pass="in" description="Index of users in the list (0-based). Call will fail if invalid index is provided." />
			<param name="Description" type="string" pass="return" description="Description of the user." />
		</method>

		<method name="GetRole" description="Retrieves the role of a user in the list. ">
			<param name="UserIndex" type="uint32" pass="in" description="Index of users in the list (0-based). Call will fail if invalid index is provided." />
			<param name="Role" type="string" pass="return" description="Role of the user." />
		</method>

		<method name="GetLanguage" description="Retrieves the language identifier of a user in the list. ">
			<param name="UserIndex" type="uint32" pass="in" description="Index of users in the list (0-based). Call will fail if invalid index is provided." />
			<param name="LanguageIdentifier" type="string" pass="return" description="Language Identifier of the user." />
		</method>
		
	</class>
	
	<class name="UserManagementHandler" parent="Base" description="Login handler instance">
	
		<method name="UserExists" description="Checks if a user exist.">
			<param name="Username" type="string" pass="in" description="User name" />
			<param name="UserExists" type="bool" pass="return" description="Flag if users exists" />
		</method>
	
		<method name="GetUserProperties" description="Retrieves all users data with one Transaction. Fails if user does not exist.">
			<param name="Username" type="string" pass="in" description="User name" />
			<param name="UUID" type="string" pass="out" description="UUID of the user." />
			<param name="Description" type="string" pass="out" description="Description of the user." />
			<param name="Role" type="string" pass="out" description="Role of the user." />
			<param name="LanguageIdentifier" type="string" pass="out" description="LanguageIdentifier of the user." />
		</method>

		<method name="GetUserPropertiesByUUID" description="Retrieves all users data with one Transaction. Fails if user does not exist.">
			<param name="UUID" type="string" pass="in" description="UUID of the user." />
			<param name="Username" type="string" pass="out" description="User name" />
			<param name="Description" type="string" pass="out" description="Description of the user." />
			<param name="Role" type="string" pass="out" description="Role of the user." />
			<param name="LanguageIdentifier" type="string" pass="out" description="LanguageIdentifier of the user." />
		</method>

		<method name="GetUsernameByUUID" description="Retrieves a users name with a given UUID. Fails if user does not exist.">
			<param name="UUID" type="string" pass="in" description="UUID of the user." />
			<param name="Username" type="string" pass="return" description="User name" />
		</method>

		<method name="GetUserUUID" description="Retrieves a users UUID. Fails if user does not exist.">
			<param name="Username" type="string" pass="in" description="User name" />
			<param name="UUID" type="string" pass="return" description="UUID of the user." />
		</method>

		<method name="GetUserDescription" description="Retrieves a users description. Fails if user does not exist.">
			<param name="Username" type="string" pass="in" description="User name" />
			<param name="Description" type="string" pass="return" description="Description of the user." />
		</method>

		<method name="GetUserDescriptionByUUID" description="Retrieves a users description by the user UUID. Fails if user does not exist.">
			<param name="UUID" type="string" pass="in" description="UUID of the user." />
			<param name="Description" type="string" pass="return" description="Description of the user." />
		</method>

		<method name="GetUserRole" description="Retrieves a users role. Fails if user does not exist.">
			<param name="Username" type="string" pass="in" description="User name" />
			<param name="Role" type="string" pass="return" description="Role of the user." />
		</method>

		<method name="GetUserRoleByUUID" description="Retrieves a users role by the user UUID. Fails if user does not exist.">
			<param name="UUID" type="string" pass="in" description="UUID of the user." />
			<param name="Role" type="string" pass="return" description="Role of the user." />
		</method>

		<method name="GetUserLanguage" description="Retrieves a users language preference. Fails if user does not exist.">
			<param name="Username" type="string" pass="in" description="User name" />
			<param name="LanguageIdentifier" type="string" pass="return" description="Language identifier of the user." />
		</method>
		
		<method name="GetUserLanguageByUUID" description="Retrieves a users language preference by user UUID. Fails if user does not exist.">
			<param name="UUID" type="string" pass="in" description="UUID of the user." />
			<param name="LanguageIdentifier" type="string" pass="return" description="Language identifier of the user." />
		</method>		

		<method name="CreateUser" description="Creates a new user. Fails if the user already exists.">
			<param name="Username" type="string" pass="in" description="User name to create. MUST be alphanumeric and not empty." />
			<param name="Role" type="string" pass="in" description="Role of the new user. MUST NOT be empty." />
			<param name="Salt" type="string" pass="in" description="Salt of the user. MUST NOT be empty. MUST be an SHA256 string." />
			<param name="HashedPassword" type="string" pass="in" description="Hashed Password. MUST be an SHA256 string. HashedPassword MUST NOT be the hash some of the given salt." />
			<param name="Description" type="string" pass="in" description="Description of the new user." />
			<param name="UUID" type="string" pass="return" description="UUID of the new user." />
		</method>

		<method name="SetUserLanguage" description="Updates a users language preference. Fails if user does not exist.">
			<param name="Username" type="string" pass="in" description="User name" />
			<param name="LanguageIdentifier" type="string" pass="in" description="New Language identifier of the user." />
		</method>
		
		<method name="SetUserRole" description="Updates a users role. Fails if user does not exist.">
			<param name="Username" type="string" pass="in" description="User name" />
			<param name="UserRole" type="string" pass="in" description="New Role identifier of the user." />
		</method>

		<method name="SetUserDescription" description="Updates a users description. Fails if user does not exist.">
			<param name="Username" type="string" pass="in" description="User name" />
			<param name="Description" type="string" pass="in" description="New Description of the user." />
		</method>
		
		<method name="SetUserPassword" description="Updates a users password. Fails if user does not exist.">
			<param name="Username" type="string" pass="in" description="User name" />
			<param name="Salt" type="string" pass="in" description="Salt of the user. MUST NOT be empty. MUST be an SHA256 string." />
			<param name="HashedPassword" type="string" pass="in" description="Hashed Password. MUST be an SHA256 string. HashedPassword MUST NOT be the hash some of the given salt." />
		</method>

		<method name="SetUserLanguageByUUID" description="Updates a users language preference. Fails if user does not exist.">
			<param name="UUID" type="string" pass="in" description="UUID of the user." />
			<param name="LanguageIdentifier" type="string" pass="in" description="New Language identifier of the user." />
		</method>
		
		<method name="SetUserRoleByUUID" description="Updates a users role. Fails if user does not exist.">
			<param name="UUID" type="string" pass="in" description="UUID of the user." />
			<param name="UserRole" type="string" pass="in" description="New Role identifier of the user." />
		</method>

		<method name="SetUserDescriptionByUUID" description="Updates a users description. Fails if user does not exist.">
			<param name="UUID" type="string" pass="in" description="UUID of the user." />
			<param name="Description" type="string" pass="in" description="New Description identifier of the user." />
		</method>
		
		<method name="SetUserPasswordByUUID" description="Updates a users password. Fails if user does not exist.">
			<param name="UUID" type="string" pass="in" description="UUID of the user." />
			<param name="Salt" type="string" pass="in" description="Salt of the user. MUST NOT be empty. MUST be an SHA256 string." />
			<param name="HashedPassword" type="string" pass="in" description="Hashed Password. MUST be an SHA256 string. HashedPassword MUST NOT be the hash some of the given salt." />
		</method>
		
		<method name="GetActiveUsers" description="Returns a list of all users.">
			<param name="ListInstance" type="class" class="UserDetailList" pass="return" description="Instance of active users." />		
		</method>
		

	</class>	

	<class name="StateEnvironment" parent="Base" description="Environment of the state">

		<method name="GetMachineState" description="Retrieves the machine state">
			<param name="MachineInstance" type="string" pass="in" description="State machine instance name" />
			<param name="StateName" type="string" pass="return" description="Name of current state" />
		</method>

	  
		<method name="PrepareSignal" description="prepares a signal object to trigger later.">
			<param name="MachineInstance" type="string" pass="in" description="State machine instance name" />
			<param name="SignalName" type="string" pass="in" description="Name Of signal channel." />
			<param name="SignalInstance" type="class" class="SignalTrigger" pass="return" description="Signal trigger object." />
		</method>
	  
		<method name="WaitForSignal" description="Waits for a signal for a certain amount of time.">
			<param name="SignalName" type="string" pass="in" description="Name Of Signal" />
			<param name="TimeOut" type="uint32" pass="in" description="Timeout in Milliseconds. 0 for Immediate return." />			
			<param name="HandlerInstance" type="optionalclass" class="SignalHandler" pass="out" description="Signal object. If Success is false, the Signal Handler Object will be null." />
			<param name="Success" type="bool" pass="return" description="Signal has been triggered" />
		</method>		

		<method name="GetUnhandledSignal" description="Retrieves an unhandled signal By signal type name.">
			<param name="SignalTypeName" type="string" pass="in" description="Name Of Signal to be returned" />
			<param name="HandlerInstance" type="optionalclass" class="SignalHandler" pass="return" description="Signal object. If no signal has been found the signal handler object will be null." />
		</method>		

		<method name="GetUnhandledSignalByUUID" description="retrieves an unhandled signal from the current state machine by UUID.">
			<param name="UUID" type="string" pass="in" description="Name" />
			<param name="MustExist" type="bool" pass="in" description="The call fails if MustExist is true and not signal with UUID does exist or a signal with UUID has been handled already." />
			<param name="Handler" type="optionalclass" class="SignalHandler" pass="return" description="Signal handler instance. Returns null, if signal does not exist." />
		</method>
		
		<method name="GetDriverLibrary" description="Returns the driver type and library lookup for a specific registered driver.">
			<param name="DriverName" type="string" pass="in" description="Name identifier of the driver." />
			<param name="DriverType" type="string" pass="out" description="returns type identifier of the driver." />
			<param name="DriverLookup" type="pointer" pass="out" description="GetProcAddress Handle of the driver." />
		</method>

		<method name="CreateDriverAccess" description="Accesses and locks a driver for the execution of the current state.">
			<param name="DriverName" type="string" pass="in" description="Name identifier of the driver." />
			<param name="DriverHandle" type="pointer" pass="out" description="Handle of the driver." />
		</method>

		<method name="HasBuildJob" description="Returns if a build object exists. Fails if BuildUUID is not a valid UUID string.">
			<param name="BuildUUID" type="string" pass="in" description="UUID of the build entity." />
			<param name="BuildExists" type="bool" pass="return" description="Returns true if build exists" />
		</method>

		<method name="GetBuildJob" description="Returns a instance of a build object. Fails if build uuid does not exist.">
			<param name="BuildUUID" type="string" pass="in" description="UUID of the build entity." />
			<param name="BuildInstance" type="class" class="Build" pass="return" description="Build instance" />
		</method>

		<method name="UnloadAllToolpathes" description="unloads all toolpath in memory to clean up">
		</method>


		<method name="SetNextState" description="sets the next state">
			<param name="StateName" type="string" pass="in" description="Name of next state" />
		</method>
				
		<method name="LogMessage" description="logs a string as message">
			<param name="LogString" type="string" pass="in" description="String to Log" />
		</method>

		<method name="LogWarning" description="logs a string as warning">
			<param name="LogString" type="string" pass="in" description="String to Log" />
		</method>

		<method name="LogInfo" description="logs a string as info">
			<param name="LogString" type="string" pass="in" description="String to Log" />
		</method>

		<method name="Sleep" description="Puts the current instance to sleep for a definite amount of time. MUST be used instead of a blocking sleep call.">
			<param name="Delay" type="uint32" pass="in" description="Milliseconds to sleeps" />
		</method>

		<method name="CheckForTermination" description="checks environment for termination signal. MUST be called frequently in longer-running operations.">
			<param name="ShallTerminate" type="bool" pass="return" description="Returns if termination shall appear" />
		</method>



		<method name="StoreSignal" description="DEPRECIATED: stores a signal handler in the current state machine">
			<param name="Name" type="string" pass="in" description="Name" />
			<param name="Handler" type="class" class="SignalHandler" pass="in" description="Signal handler to store." />
		</method>

		<method name="RetrieveSignal" description="DEPRECIATED: retrieves a signal handler from the current state machine. Fails if value has not been stored before or signal has been already handled.">
			<param name="Name" type="string" pass="in" description="Name" />
			<param name="Handler" type="class" class="SignalHandler" pass="return" description="Signal handler instance." />
		</method>

		<method name="ClearStoredValue" description="DEPRECIATED: deletes a value from the data store.">
			<param name="Name" type="string" pass="in" description="Name" />
		</method>
		
		
		<method name="SetStringParameter" description="sets a string parameter">
			<param name="ParameterGroup" type="string" pass="in" description="Parameter Group" />
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Value" type="string" pass="in" description="Value to set" />
		</method>

		<method name="SetUUIDParameter" description="sets a uuid parameter">
			<param name="ParameterGroup" type="string" pass="in" description="Parameter Group" />
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Value" type="string" pass="in" description="Value to set" />
		</method>

		<method name="SetDoubleParameter" description="sets a double parameter">
			<param name="ParameterGroup" type="string" pass="in" description="Parameter Group" />
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Value" type="double" pass="in" description="Value to set" />
		</method>

		<method name="SetIntegerParameter" description="sets an int parameter">
			<param name="ParameterGroup" type="string" pass="in" description="Parameter Group" />
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Value" type="int64" pass="in" description="Value to set" />
		</method>

		<method name="SetBoolParameter" description="sets a bool parameter">
			<param name="ParameterGroup" type="string" pass="in" description="Parameter Group" />
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Value" type="bool" pass="in" description="Value to set" />
		</method>

		<method name="GetStringParameter" description="returns a string parameter">
			<param name="ParameterGroup" type="string" pass="in" description="Parameter Group" />
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Value" type="string" pass="return" description="Value to set" />
		</method>

		<method name="GetUUIDParameter" description="returns a uuid parameter">
			<param name="ParameterGroup" type="string" pass="in" description="Parameter Group" />
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Value" type="string" pass="return" description="Value to set" />
		</method>

		<method name="GetDoubleParameter" description="returns a double parameter">
			<param name="ParameterGroup" type="string" pass="in" description="Parameter Group" />
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Value" type="double" pass="return" description="Value to set" />
		</method>

		<method name="GetIntegerParameter" description="returns an int parameter">
			<param name="ParameterGroup" type="string" pass="in" description="Parameter Group" />
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Value" type="int64" pass="return" description="Value to set" />
		</method>

		<method name="GetBoolParameter" description="returns a bool parameter">
			<param name="ParameterGroup" type="string" pass="in" description="Parameter Group" />
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Value" type="bool" pass="return" description="Value to set" />
		</method>
		

		<method name="LoadResourceData" description="loads a plugin resource file into memory.">
			<param name="ResourceName" type="string" pass="in" description="Name of the resource." />
			<param name="ResourceData" type="basicarray" class="uint8" pass="out" description="Resource Data Buffer." />
		</method>

		<method name="LoadResourceString" description="loads a plugin resource file into a string. Fails if content is not a valid UTF8 string.">
			<param name="ResourceName" type="string" pass="in" description="Name of the resource." />
			<param name="ResourceData" type="string" pass="return" description="Resource Data String." />
		</method>

		<method name="CreateEmptyImage" description="creates an empty image object.">
			<param name="PixelSizeX" type="uint32" pass="in" description="Pixel size in X. MUST be positive." />
			<param name="PixelSizeY" type="uint32" pass="in" description="Pixel size in Y. MUST be positive." />
			<param name="DPIValueX" type="double" pass="in" description="DPI Value in X. MUST be positive." />
			<param name="DPIValueY" type="double" pass="in" description="DPI Value in Y. MUST be positive." />
			<param name="PixelFormat" type="enum" class="ImagePixelFormat" pass="in" description="Pixel format to use." />
			<param name="ImageDataInstance" type="class" class="ImageData" pass="return" description="Empty image instance." />
		</method>		
		
		<method name="LoadPNGImage" description="creates an image object from a PNG data stream.">
			<param name="PNGData" type="basicarray" class="uint8" pass="in" description="DPI Value in X. MUST be positive." />
			<param name="DPIValueX" type="double" pass="in" description="DPI Value in X. MUST be positive." />
			<param name="DPIValueY" type="double" pass="in" description="DPI Value in Y. MUST be positive." />
			<param name="PixelFormat" type="enum" class="ImagePixelFormat" pass="in" description="Pixel format to use. Might lose color and alpha information." />
			<param name="ImageDataInstance" type="class" class="ImageData" pass="return" description="Image instance containing the PNG image." />	
		</method>

		<method name="CreateDiscreteField2D" description="Creates an empty discrete field.">
			<param name="PixelCountX" type="uint32" pass="in" description="Pixel count in X. MUST be positive." />
			<param name="PixelCountY" type="uint32" pass="in" description="Pixel count in Y. MUST be positive." />
			<param name="DPIValueX" type="double" pass="in" description="DPI Value in X. MUST be positive." />
			<param name="DPIValueY" type="double" pass="in" description="DPI Value in Y. MUST be positive." />
			<param name="OriginX" type="double" pass="in" description="Origin X of the field in mm." />
			<param name="OriginY" type="double" pass="in" description="Origin Y of the field in mm." />
			<param name="DefaultValue" type="double" pass="in" description="Default value of the field." />
			<param name="FieldDataInstance" type="class" class="DiscreteFieldData2D" pass="return" description="Empty field instance." />
		</method>	

		<method name="CreateDiscreteField2DFromImage" description="Creates a discrete field from the greyscale values of an image. RGB colors in the image will be averaged to obtain a greyscale color.">
			<param name="ImageDataInstance" type="class" class="ImageData" pass="in" description="Image instance containing the pixel data." />
			<param name="BlackValue" type="double" pass="in" description="Value that the minimum color (black) shall be mapped to." />
			<param name="WhiteValue" type="double" pass="in" description="Value that the maximum color (white) shall be mapped to." />
			<param name="OriginX" type="double" pass="in" description="Origin X of the field in mm." />
			<param name="OriginY" type="double" pass="in" description="Origin Y of the field in mm." />
			<param name="FieldDataInstance" type="class" class="DiscreteFieldData2D" pass="return" description="Empty field instance." />
		</method>
		
		<method name="GetGlobalTimerInMilliseconds" description="Returns the global timer in milliseconds.">
			<param name="TimerValue" type="uint64" pass="return" description="Timer value in Milliseconds" />
		</method>

		<method name="GetTestEnvironment" description="Returns a test environment instance.">
			<param name="TestEnvironment" type="class" class="TestEnvironment" pass="return" description="Test Environment Instance" />
		</method>
		
		<method name="CreateXMLDocument" description = "creates an empty XML Document.">
			<param name="RootNodeName" type="string" pass="in" description="Name of the root node. MUST be a valid XML Node Name string." />
			<param name="DefaultNamespace" type="string" pass="in" description="Default namespace of the document. MUST be a valid XML namespace string." />
			<param name="XMLDocument" type="class" class="XMLDocument" pass="return" description="XML Document Instance." />
		</method>

		<method name="ParseXMLString" description = "parses an XML String and returns an XML Document instance. Throws an error if XML is malformatted.">
			<param name="XMLString" type="string" pass="in" description="XML String." />
			<param name="XMLDocument" type="class" class="XMLDocument" pass="return" description="XML Document Instance." />
		</method>

		<method name="ParseXMLData" description = "parses a XML stored in a byte array and returns an XML Document instance. . Throws an error if XML is malformatted.">
			<param name="XMLData" type="basicarray" class="uint8" pass="in" description="XML Binary data." />
			<param name="XMLDocument" type="class" class="XMLDocument" pass="return" description="XML Document Instance." />
		</method>
		

		<method name="CheckUserPermission" description="Returns if the a user has a certain permission. Fails if user or permission is not known to the system.">
			<param name="UserLogin" type="string" pass="in" description="Login of user to check" />
			<param name="PermissionIdentifier" type="string" pass="in" description="Permission identifier" />
			<param name="UserHasPermission" type="bool" pass="return" description="Returns if the user has permission" />
		</method>
		
		<method name="CreateUserManagement" description="Returns a user management handler instance.">
			<param name="UserManagementInstance" type="class" class="UserManagementHandler" pass="return" description="Returns a user management handler." />
		</method>	
		
		<method name="GetCurrentJournal" description="Returns the journal instance of the current session.">
			<param name="JournalHandler" type="class" class="JournalHandler" pass="return" description="Journal instance." />
		</method>	
						
		<method name="RegisterMeshFrom3MFResource" description="Loads a from a 3MF Resource File. If 3MF contains multiple objects, it will merge them into one mesh.">
			<param name="ResourceName" type="string" pass="in" description="Resource name to load." />
			<param name="MeshObject" type="class" class="MeshObject" pass="return" description="Mesh Object instance." />
		</method>	

		<method name="MeshIsRegistered" description="Checks if a mesh uuid is registered.">
			<param name="MeshUUID" type="string" pass="in" description="Mesh UUID to load." />
			<param name="MeshIsRegistered" type="bool" pass="return" description="Flag is registered." />
		</method>	

		<method name="FindRegisteredMesh" description="Finds a registered mesh by its UUID. Fails if mesh UUID is not registered.">
			<param name="MeshUUID" type="string" pass="in" description="Mesh UUID to load." />
			<param name="MeshObject" type="class" class="MeshObject" pass="return" description="Mesh Object instance." />
		</method>	

	</class>

	<class name="UIItem" parent="Base" description="Base item that represents a user interface element.">
	
		<method name="GetName" description="Returns the name of the user interface item. MUST be unique within its siblings.">
			<param name="Name" type="string" pass="return" description="Returns the name." />
		</method>
	
		<method name="GetPath" description="Returns the full path of the user interface item. MUST be unique.">
			<param name="Path" type="string" pass="return" description="Returns the path." />
		</method>

		<method name="GetUUID" description="Returns the UUID of the time stream chart object.">
			<param name="UUID" type="string" pass="return" description="Returns uuid." />
		</method>
	
	</class>


	<class name="UIEnvironment" parent="Base" description="Environment of the UI">
	  
		<method name="ActivateModalDialog" description="activates a modal dialog on the client.">
			<param name="DialogName" type="string" pass="in" description="Name of the dialog to activate." />
		</method>

		<method name="CloseModalDialog" description="closes the active modal dialog on the client.">
		</method>
	  
		<method name="ActivatePage" description="changes the current page on the client.">
			<param name="PageName" type="string" pass="in" description="Name of the page to activate." />
		</method>

	  	<method name="LogOut" description="Logs out the client session.">
		</method>

		<method name="ShowHint" description="Shows a hint message in the user interface.">
			<param name="Hint" type="string" pass="in" description="Hint to show." />
			<param name="TimeoutInMS" type="uint32" pass="in" description="How many milliseconds the snackbar should be shown." />
		</method>

		<method name="ShowHintColored" description="Shows a hint message in the user interface in a certain color.">
			<param name="Hint" type="string" pass="in" description="Hint to show." />
			<param name="TimeoutInMS" type="uint32" pass="in" description="How many milliseconds the snackbar should be shown." />
			<param name="Color" type="struct" class="ColorRGB" pass="in" description="Background color of hint." />
			<param name="FontColor" type="struct" class="ColorRGB" pass="in" description="Font color of hint." />
		</method>

		<method name="HideHint" description="Hides hint if any is displayed.">
		</method>

		<method name="ShowMessageDlg" description="Shows a message dialog in the user interface.">
			<param name="Caption" type="string" pass="in" description="Caption of the dialog" />
			<param name="Title" type="string" pass="in" description="Title of the dialog" />
			<param name="DialogType" type="enum" class="MessageDialogType" pass="in" description="Which dialog type shall be shown." />
			<param name="YesEvent" type="string" pass="in" description="Event to be called when clicked yes or ok." />
			<param name="NoEvent" type="string" pass="in" description="Event to be called when clicked no." />
			<param name="CancelEvent" type="string" pass="in" description="Event to be called when dialog is closed or cancel is pressed." />
			<param name="DialogUUID" type="string" pass="return" description="Dialog UUID. Will be set as sender for triggered events." />
		</method>

		<method name="RetrieveEventSender" description="returns path of the UI control that triggered the event.">
			<param name="SenderPath" type="string" pass="return" description="Path of the sender element." />
		</method>

		<method name="RetrieveEventSenderPage" description="returns name of the page of the UI control that triggered the event.">
			<param name="PageName" type="string" pass="return" description="Page of the sender element." />
		</method>

		<method name="RetrieveEventSenderUUID" description="returns uuid of the UI control that triggered the event.">
			<param name="SenderUUID" type="string" pass="return" description="Name of the sender uuid." />
		</method>
				
	  
		<method name="PrepareSignal" description="prepares a signal object to trigger later.">
			<param name="MachineInstance" type="string" pass="in" description="State machine instance name" />
			<param name="SignalName" type="string" pass="in" description="Name Of signal channel." />
			<param name="SignalInstance" type="class" class="SignalTrigger" pass="return" description="Signal trigger object." />
		</method>		
	  		
		<method name="GetMachineState" description="Retrieves the machine state">
			<param name="MachineInstance" type="string" pass="in" description="State machine instance name" />
			<param name="StateName" type="string" pass="return" description="Name of current state" />
		</method>

		<method name="LogMessage" description="logs a string as message">
			<param name="LogString" type="string" pass="in" description="String to Log" />
		</method>

		<method name="LogWarning" description="logs a string as warning">
			<param name="LogString" type="string" pass="in" description="String to Log" />
		</method>

		<method name="LogInfo" description="logs a string as info">
			<param name="LogString" type="string" pass="in" description="String to Log" />
		</method>

								
		<method name="GetMachineParameter" description="returns a string parameter of a state machine">
			<param name="MachineInstance" type="string" pass="in" description="State machine instance name" />
			<param name="ParameterGroup" type="string" pass="in" description="Parameter Group" />
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Value" type="string" pass="return" description="Current Parameter Value" />
		</method>

		<method name="GetMachineParameterAsUUID" description="returns a uuid parameter of a state machine">
			<param name="MachineInstance" type="string" pass="in" description="State machine instance name" />
			<param name="ParameterGroup" type="string" pass="in" description="Parameter Group" />
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Value" type="string" pass="return" description="Current Parameter Value" />
		</method>

		<method name="GetMachineParameterAsDouble" description="returns a double parameter of a state machine">
			<param name="MachineInstance" type="string" pass="in" description="State machine instance name" />
			<param name="ParameterGroup" type="string" pass="in" description="Parameter Group" />
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Value" type="double" pass="return" description="Current Parameter Value" />
		</method>

		<method name="GetMachineParameterAsInteger" description="returns an int parameter of a state machine">
			<param name="MachineInstance" type="string" pass="in" description="State machine instance name" />
			<param name="ParameterGroup" type="string" pass="in" description="Parameter Group" />
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Value" type="int64" pass="return" description="Current Parameter Value" />
		</method>

		<method name="GetMachineParameterAsBool" description="returns a bool parameter of a state machine">
			<param name="MachineInstance" type="string" pass="in" description="State machine instance name" />
			<param name="ParameterGroup" type="string" pass="in" description="Parameter Group" />
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Value" type="bool" pass="return" description="Current Parameter Value" />
		</method>



		<method name="GetUIProperty" description="returns a string property of a UI element on the client">
			<param name="ElementPath" type="string" pass="in" description="Path of UI Element. Fails if element does not exist." />
			<param name="PropertyName" type="string" pass="in" description="Property name. Fails if property does not exist." />
			<param name="Value" type="string" pass="return" description="Current property Value" />
		</method>

		<method name="GetUIPropertyAsUUID" description="returns a uuid variable of a UI element on the client">
			<param name="ElementPath" type="string" pass="in" description="Path of UI Element. Fails if element does not exist." />
			<param name="PropertyName" type="string" pass="in" description="Property name. Fails if property does not exist." />
			<param name="Value" type="string" pass="return" description="Current property Value" />
		</method>

		<method name="GetUIPropertyAsDouble" description="returns a double variable of a UI element on the client">
			<param name="ElementPath" type="string" pass="in" description="Path of UI Element. Fails if element does not exist." />
			<param name="PropertyName" type="string" pass="in" description="Property name. Fails if property does not exist." />
			<param name="Value" type="double" pass="return" description="Current property Value" />
		</method>

		<method name="GetUIPropertyAsInteger" description="returns a integer variable of a UI element on the client">
			<param name="ElementPath" type="string" pass="in" description="Path of UI Element. Fails if element does not exist." />
			<param name="PropertyName" type="string" pass="in" description="Property name. Fails if property does not exist." />
			<param name="Value" type="int64" pass="return" description="Current property Value" />
		</method>

		<method name="GetUIPropertyAsBool" description="returns a integer variable of a UI element on the client">
			<param name="ElementPath" type="string" pass="in" description="Path of UI Element. Fails if element does not exist." />
			<param name="PropertyName" type="string" pass="in" description="Property name. Fails if property does not exist." />
			<param name="Value" type="bool" pass="return" description="Current property Value" />
		</method>


		<method name="SetUIProperty" description="sets a string property of a UI element on the client.">
			<param name="ElementPath" type="string" pass="in" description="Path of UI Element. Fails if element does not exist." />
			<param name="PropertyName" type="string" pass="in" description="Property name. Fails if property does not exist or is readonly." />
			<param name="Value" type="string" pass="in" description="New property Value" />
		</method>

		<method name="SetUIPropertyAsUUID" description="sets a uuid property of a UI element on the client.">
			<param name="ElementPath" type="string" pass="in" description="Path of UI Element. Fails if element does not exist." />
			<param name="PropertyName" type="string" pass="in" description="Property name. Fails if property does not exist or is readonly." />
			<param name="Value" type="string" pass="in" description="New property Value" />
		</method>

		<method name="SetUIPropertyAsDouble" description="sets a double property of a UI element on the client.">
			<param name="ElementPath" type="string" pass="in" description="Path of UI Element. Fails if element does not exist." />
			<param name="PropertyName" type="string" pass="in" description="Property name. Fails if property does not exist or is readonly." />
			<param name="Value" type="double" pass="in" description="New property Value" />
		</method>

		<method name="SetUIPropertyAsInteger" description="sets a integer property of a UI element on the client.">
			<param name="ElementPath" type="string" pass="in" description="Path of UI Element. Fails if element does not exist." />
			<param name="PropertyName" type="string" pass="in" description="Property name. Fails if property does not exist or is readonly." />
			<param name="Value" type="int64" pass="in" description="New property Value" />
		</method>

		<method name="SetUIPropertyAsBool" description="sets a bool property of a UI element on the client.">
			<param name="ElementPath" type="string" pass="in" description="Path of UI Element. Fails if element does not exist." />
			<param name="PropertyName" type="string" pass="in" description="Property name. Fails if property does not exist or is readonly." />
			<param name="Value" type="bool" pass="in" description="New property Value" />
		</method>
		
		<method name="CreateEmptyImage" description="creates an empty image object.">
			<param name="PixelSizeX" type="uint32" pass="in" description="Pixel size in X. MUST be positive." />
			<param name="PixelSizeY" type="uint32" pass="in" description="Pixel size in Y. MUST be positive." />
			<param name="DPIValueX" type="double" pass="in" description="DPI Value in X. MUST be positive." />
			<param name="DPIValueY" type="double" pass="in" description="DPI Value in Y. MUST be positive." />
			<param name="PixelFormat" type="enum" class="ImagePixelFormat" pass="in" description="Pixel format to use." />
			<param name="ImageDataInstance" type="class" class="ImageData" pass="return" description="Empty image instance." />
		</method>		
		
		<method name="LoadPNGImage" description="creates an image object from a PNG data stream.">
			<param name="PNGData" type="basicarray" class="uint8" pass="in" description="DPI Value in X. MUST be positive." />
			<param name="DPIValueX" type="double" pass="in" description="DPI Value in X. MUST be positive." />
			<param name="DPIValueY" type="double" pass="in" description="DPI Value in Y. MUST be positive." />
			<param name="PixelFormat" type="enum" class="ImagePixelFormat" pass="in" description="Pixel format to use. Might lose color and alpha information." />
			<param name="ImageDataInstance" type="class" class="ImageData" pass="return" description="Image instance containing the PNG image." />
		</method>

		<method name="GetGlobalTimerInMilliseconds" description="Returns the global timer in milliseconds.">
			<param name="TimerValue" type="uint64" pass="return" description="Timer value in Milliseconds" />
		</method>
		
		<method name="GetTestEnvironment" description="Returns a test environment instance.">
			<param name="TestEnvironment" type="class" class="TestEnvironment" pass="return" description="Test Environment Instance" />
		</method>
		
		<method name="CreateXMLDocument" description = "creates an empty XML Document.">
			<param name="RootNodeName" type="string" pass="in" description="Name of the root node. MUST be a valid XML Node Name string." />
			<param name="DefaultNamespace" type="string" pass="in" description="Default namespace of the document. MUST be a valid XML namespace string." />
			<param name="XMLDocument" type="class" class="XMLDocument" pass="return" description="XML Document Instance." />
		</method>

		<method name="ParseXMLString" description = "parses an XML String and returns an XML Document instance. Throws an error if XML is malformatted.">
			<param name="XMLString" type="string" pass="in" description="XML String." />
			<param name="XMLDocument" type="class" class="XMLDocument" pass="return" description="XML Document Instance." />
		</method>

		<method name="ParseXMLData" description = "parses a XML stored in a byte array and returns an XML Document instance. . Throws an error if XML is malformatted.">
			<param name="XMLData" type="basicarray" class="uint8" pass="in" description="XML Binary data." />
			<param name="XMLDocument" type="class" class="XMLDocument" pass="return" description="XML Document Instance." />
		</method>

		<method name="HasBuildJob" description="Returns if a build object exists. Fails if BuildUUID is not a valid UUID string.">
			<param name="BuildUUID" type="string" pass="in" description="UUID of the build entity." />
			<param name="BuildExists" type="bool" pass="return" description="Returns true if build exists" />
		</method>
		
		<method name="GetBuildJob" description="Returns a instance of a build object. Fails if build uuid does not exist.">
			<param name="BuildUUID" type="string" pass="in" description="UUID of the build entity." />
			<param name="BuildInstance" type="class" class="Build" pass="return" description="Build instance" />
		</method>		
	
		<method name="CreateDiscreteField2D" description="Creates an empty discrete field.">
			<param name="PixelCountX" type="uint32" pass="in" description="Pixel count in X. MUST be positive." />
			<param name="PixelCountY" type="uint32" pass="in" description="Pixel count in Y. MUST be positive." />
			<param name="DPIValueX" type="double" pass="in" description="DPI Value in X. MUST be positive." />
			<param name="DPIValueY" type="double" pass="in" description="DPI Value in Y. MUST be positive." />
			<param name="OriginX" type="double" pass="in" description="Origin X of the field in mm." />
			<param name="OriginY" type="double" pass="in" description="Origin Y of the field in mm." />
			<param name="DefaultValue" type="double" pass="in" description="Default value of the field." />
			<param name="FieldDataInstance" type="class" class="DiscreteFieldData2D" pass="return" description="Empty field instance." />
		</method>	

		<method name="CreateDiscreteField2DFromImage" description="Creates a discrete field from the greyscale values of an image. RGB colors in the image will be averaged to obtain a greyscale color.">
			<param name="ImageDataInstance" type="class" class="ImageData" pass="in" description="Image instance containing the pixel data." />
			<param name="BlackValue" type="double" pass="in" description="Value that the minimum color (black) shall be mapped to." />
			<param name="WhiteValue" type="double" pass="in" description="Value that the maximum color (white) shall be mapped to." />
			<param name="OriginX" type="double" pass="in" description="Origin X of the field in mm." />
			<param name="OriginY" type="double" pass="in" description="Origin Y of the field in mm." />
			<param name="FieldDataInstance" type="class" class="DiscreteFieldData2D" pass="return" description="Empty field instance." />
		</method>
		
		<method name="CheckPermission" description="Returns if the current user has a certain permission. Fails if permission is not known to the system.">
			<param name="PermissionIdentifier" type="string" pass="in" description="Permission identifier" />
			<param name="UserHasPermission" type="bool" pass="return" description="Returns if the user has permission" />
		</method>		
		
		<method name="GetCurrentUserLogin" description="Returns the current user login name.">
			<param name="UserLogin" type="string" pass="return" description="Returns the current users login name." />
		</method>	

		<method name="GetCurrentUserDescription" description="Returns the current user description.">
			<param name="UserDescription" type="string" pass="return" description="Returns the current users description." />
		</method>	

		<method name="GetCurrentUserRole" description="Returns the current user role identifier.">
			<param name="UserRole" type="string" pass="return" description="Returns the current users role identifier." />
		</method>		

		<method name="GetCurrentUserLanguage" description="Returns the current users language identifier.">
			<param name="UserLanguage" type="string" pass="return" description="Returns the current users language identifier." />
		</method>		

		<method name="GetCurrentUserUUID" description="Returns the current user UUID.">
			<param name="UserUUID" type="string" pass="return" description="Returns the current user UUID." />
		</method>		

		<method name="CreateUserManagement" description="Returns a user management handler instance.">
			<param name="UserManagementInstance" type="class" class="UserManagementHandler" pass="return" description="Returns a user management handler." />
		</method>	
		
		<method name="GetCurrentJournal" description="Returns the journal instance of the current session.">
			<param name="JournalHandler" type="class" class="JournalHandler" pass="return" description="Journal instance." />
		</method>	

		<method name="RegisterMeshFrom3MFResource" description="Loads a mesh from a 3MF Resource File. Fails if mesh UUID is already registered.">
			<param name="ResourceName" type="string" pass="in" description="Resource name to load." />
			<param name="MeshUUID" type="string" pass="in" description="Mesh UUID to load." />
			<param name="MeshObject" type="class" class="MeshObject" pass="return" description="Mesh Object instance." />
		</method>	

		<method name="MeshIsRegistered" description="Checks if a mesh uuid is registered.">
			<param name="MeshUUID" type="string" pass="in" description="Mesh UUID to load." />
			<param name="MeshIsRegistered" type="bool" pass="return" description="Flag is registered." />
		</method>	

		<method name="FindRegisteredMesh" description="Finds a registered mesh by its UUID. Fails if mesh UUID is not registered.">
			<param name="MeshUUID" type="string" pass="in" description="Mesh UUID to load." />
			<param name="MeshObject" type="class" class="MeshObject" pass="return" description="Mesh Object instance." />
		</method>	

		<method name="CreateDataSeries" description="Creates a new empty data series object.">
			<param name="Name" type="string" pass="in" description="Name to use for this data series. MUST NOT be an empty string." />
			<param name="BoundToLogin" type="bool" pass="in" description="If true, the data series is tied to the current user login session. If false, the data series will persist until explicitely released. This can be dangerous for the overall machine stability." />
			<param name="Instance" type="class" class="DataSeries" pass="return" description="Data series instance." />
		</method>	

		<method name="HasDataSeries" description="Checks if a data series exist.">
			<param name="DataSeriesUUID" type="string" pass="in" description="UUID to find." />
			<param name="DataSeriesExists" type="bool" pass="return" description="returns true if series exists." />
		</method>	

		<method name="FindDataSeries" description="Finds a data series. Fails if data series does not exist.">
			<param name="DataSeriesUUID" type="string" pass="in" description="UUID to find." />
			<param name="Instance" type="class" class="DataSeries" pass="return" description="Data series instance." />
		</method>	

		<method name="ReleaseDataSeries" description="Releases the memory of a data series. Fails if data series does not exist.">
			<param name="DataSeriesUUID" type="string" pass="in" description="UUID to release." />
		</method>	
		
	</class>



		
	<global baseclassname="Base" 
		stringoutclassname="Base" releasemethod="ReleaseInstance" acquiremethod="AcquireInstance" versionmethod="GetVersion" errormethod="GetLastError" symbollookupmethod="GetSymbolLookupMethod">
		
		<method name="GetVersion" description = "retrieves the binary version of this library.">
			<param name="Major" type="uint32" pass="out" description="returns the major version of this library" />
			<param name="Minor" type="uint32" pass="out" description="returns the minor version of this library" />
			<param name="Micro" type="uint32" pass="out" description="returns the micro version of this library" />
		</method>
		<method name="GetLastError" description="Returns the last error recorded on this object">
			<param name="Instance" type="class" class="Base" pass="in" description="Instance Handle" />
			<param name="ErrorMessage" type="string" pass="out" description="Message of the last error" />
			<param name="HasError" type="bool" pass="return" description="Is there a last error to query" />
		</method>
		<method name="ReleaseInstance" description="Releases shared ownership of an Instance">
			<param name="Instance" type="class" class="Base" pass="in" description="Instance Handle" />
		</method>
		<method name="AcquireInstance" description="Acquires shared ownership of an Instance">
			<param name="Instance" type="class" class="Base" pass="in" description="Instance Handle" />
		</method>
		<method name="GetSymbolLookupMethod" description="Returns the address of the SymbolLookupMethod">
			<param name="SymbolLookupMethod" type="pointer" pass="return" description="Address of the SymbolAddressMethod" />
		</method>		
		
	</global>
	
	
</component>

