<?xml version="1.0" encoding="UTF-8"?>
<component xmlns="http://schemas.autodesk.com/netfabb/automaticcomponenttoolkit/2018" 
	libraryname="MC Environment Interface" namespace="LibMCEnv" copyright="Autodesk Inc." year="2020" basename="libmcenv"
	version="1.0.0">

	<license>
		<line value="All rights reserved." />
		<line value="" />
		<line value="Redistribution and use in source and binary forms, with or without" />
		<line value="modification, are permitted provided that the following conditions are met:" />
		<line value="    * Redistributions of source code must retain the above copyright" />
		<line value="      notice, this list of conditions and the following disclaimer." />
		<line value="    * Redistributions in binary form must reproduce the above copyright" />
		<line value="      notice, this list of conditions and the following disclaimer in the" />
		<line value="      documentation and/or other materials provided with the distribution." />
		<line value="    * Neither the name of the Autodesk Inc. nor the" />
		<line value="      names of its contributors may be used to endorse or promote products" />
		<line value="      derived from this software without specific prior written permission." />
		<line value="" />
		<line value="THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND" />
		<line value="ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED" />
		<line value="WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE" />
		<line value="DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY" />
		<line value="DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES" />
		<line value="(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;" />
		<line value="LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND" />
		<line value="ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT" />
		<line value="(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS" />
		<line value="SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." />
		<line value="" />
	</license>
	
	<bindings>
		<binding language="CppDynamic" indentation="tabs" documentation="true" />
	</bindings>
	<implementations>
		<implementation language="Cpp" indentation="tabs"/>
	</implementations>
	
		
	<errors>
		<error name="NOTIMPLEMENTED" code="1" description="functionality not implemented" />
		<error name="INVALIDPARAM" code="2" description="an invalid parameter was passed" />
		<error name="INVALIDCAST" code="3" description="a type cast failed" />
		<error name="BUFFERTOOSMALL" code="4" description="a provided buffer is too small" />
		<error name="GENERICEXCEPTION" code="5" description="a generic exception occurred" />
		<error name="COULDNOTLOADLIBRARY" code="6" description="the library could not be loaded" />
		<error name="COULDNOTFINDLIBRARYEXPORT" code="7" description="a required exported symbol could not be found in the library" />
		<error name="INCOMPATIBLEBINARYVERSION" code="8" description="the version of the binary interface does not match the bindings interface" />				
		<error name="PARAMETERGROUPNOTFOUND" code="9" description="Parameter group not found" />
		<error name="PARAMETERNOTFOUND" code="10" description="Parameter not found" />
		<error name="COULDNOTFINDSIGNALDEFINITON" code="11" description="Could not find signal definition" />
		<error name="COULDNOTTRIGGERSIGNAL" code="12" description="Could not trigger signal" />
		<error name="SIGNALNOTFOUND" code="13" description="Signal not found" />
		<error name="TERMINATED" code="14" description="operation has been terminated." />
		<error name="SIGNALHASTRIGGEREDTWICE" code="15" description="signal has been triggered twice." />
		<error name="SIGNALHASNOTBEENTRIGGERED" code="16" description="signal has not been triggered." />
		<error name="DRIVERISNOTINITIALISING" code="17" description="driver is not in initialisation mode." />
		<error name="RESOURCEENTRYNOTFOUND" code="18" description="resource entry not found." />
		<error name="INTERNALERROR" code="19" description="internal error." />
		<error name="INVALIDCHARACTERINFILENAME" code="20" description="invalid character in filename." />
		<error name="WORKINGDIRECTORYHASBEENCLEANED" code="21" description="working directory has been cleaned." />
		<error name="INVALIDITERATOR" code="22" description="invalid iterator." />
		<error name="FORMVALUENOTFOUND" code="23" description="Form value not found." />
		<error name="INVALIDDOUBLEFORMVALUE" code="24" description="Invalid double form value." />
		<error name="INVALIDINTEGERFORMVALUE" code="25" description="Invalid integer form value." />
		<error name="COULDNNOTACCESSCLIENTVARIABLES" code="26" description="Could not access client variables." />
		<error name="INVALIDPIXELCOUNT" code="27" description="Invalid pixel count." />
		<error name="INVALIDDPIVALUE" code="28" description="Invalid dpi value." />
		<error name="COULDNOTCOMPRESSPNGIMAGE" code="29" description="Could not compress PNG image." />
		<error name="COULDNOTSTOREPNGIMAGE" code="30" description="Could not store PNG image." />
		<error name="EMPTYPNGIMAGEDATA" code="31" description="Empty PNG image data." />
		<error name="INVALIDXCOORDINATE" code="32" description="Invalid X coordinate." />
		<error name="INVALIDYCOORDINATE" code="33" description="Invalid Y coordinate." />
		<error name="INVALIDXCOORDINATERANGE" code="34" description="Invalid X coordinate range." />
		<error name="INVALIDYCOORDINATERANGE" code="35" description="Invalid Y coordinate range." />
		<error name="INVALIDPIXELDATACOUNT" code="36" description="Invalid pixel data count." />
		<error name="INVALIDIMAGEBUFFER" code="37" description="Invalid image buffer." />
		<error name="INVALIDPIXELFORMAT" code="38" description="Invalid pixel format." />
		<error name="INVALIDTESTOUTPUTNAME" code="39" description="Invalid test output name." />		
		<error name="TOOLPATHNOTLOADED" code="40" description="Toolpath has not been loaded." />
		<error name="INVALIDLAYERINDEX" code="41" description="Invalid layer index." />
		<error name="INVALIDHATCHCOUNT" code="42" description="Invalid hatch count." />
		<error name="SEGMENTISNOTOFTYPEHATCH" code="43" description="Segment is not of type hatch." />		
		<error name="TEMPFILEEXTENSIONEXCEEDS64CHARACTERS" code="44" description="Temp file extension exceeds 64 characters." />
		<error name="TEMPFILEEXTENSIONCONTAINSINVALIDCHARACTERS" code="45" description="Temp file extension contains invalid characters." />
		<error name="COULDNOTGENERATETEMPFILENAME" code="46" description="Could not generate temp file name." />
		<error name="EMPTYTCPIPPACKET" code="47" description="Empty TCP/IP Packet." />		
		<error name="COULDNOTGETADDRESSINFO" code="48" description="Could not get address info." />
		<error name="COULDNOTCREATESOCKET" code="49" description="Could not create socket." />
		<error name="COULDNOTCONNECT" code="50" description="Could not connect." />
		<error name="SENDERROR" code="51" description="Send error." />
		<error name="RECEIVECOUNTEXCEEDSMAXIMUM" code="52" description="Receive count exceeds maximum." />
		<error name="CONNECTIONCLOSED" code="53" description="Connection closed." />
		<error name="RECEIVEERROR" code="54" description="Receive error." />
		<error name="SENDCOUNTEXCEEDSMAXIMUM" code="55" description="Send count exceeds maximum." />
		<error name="SOCKETNOTCONNECTED" code="56" description="Socket not connected." />
		<error name="INVALIDSENDBUFFER" code="57" description="Invalid send buffer." />
		<error name="INVALIDMODBUSTCPPAYLOADSIZE" code="58" description="Invalid modbus TCP payload size" />
		<error name="INVALIDMODBUSTCPREQUEST" code="59" description="Invalid modbus TCP request" />
		<error name="INSUFFICIENTMODBUSTCPRESPONSEHEADER" code="60" description="Insufficient modbus tcp response header" />
		<error name="MODBUSTCPRESPONSEOVERFLOW" code="61" description="modbus tcp response overflow" />
		<error name="INVALIDMODBUSTCPTRANSACTIONIDRESPONSE" code="62" description="invalid modbus tcp transaction ID response" />
		<error name="INVALIDMODBUSTCPPROTOCOLIDRESPONSE" code="63" description="invalid modbus tcp protocol ID response" />
		<error name="INVALIDMODBUSTCPUNITIDENTIFIERRESPONSE" code="64" description="invalid modbus tcp unit identifier response" />
		<error name="MODBUSTCPRESPONSELENGTHMISMATCH" code="65" description="modbus tcp response length mismatch" />		
		<error name="MODBUSTCPINVALIDCOILSTATUSBITCOUNT" code="66" description="modbus TCP Invalid coils status bit count." />
		<error name="MODBUSTCPINVALIDCOILSTATUSRESPONSE" code="67" description="modbus TCP Invalid coils status response." />
		<error name="MODBUSTCPCOILSTATUSRESPONSEEMPTY" code="68" description="modbus TCP coils status response empty." />
		<error name="MODBUSTCPINVALIDCOILSTATUSRESPONSESIZE" code="69" description="modbus TCP invalid coil status response size." />
		<error name="MODBUSTCPINVALIDINPUTSTATUSBITCOUNT" code="70" description="modbus TCP invalid input status bit count." />
		<error name="MODBUSTCPINVALIDINPUTSTATUSRESPONSE" code="71" description="modbus TCP invalid input status response." />
		<error name="MODBUSTCPINPUTSTATUSRESPONSEEMPTY" code="72" description="modbus TCP input status response empty." />		
		<error name="MODBUSTCPINVALIDINPUTSTATUSRESPONSESIZE" code="73" description="modbus TCP invalid input status response size." />
		<error name="INVALIDMODBUSTCPCOILCOUNT" code="74" description="invalid modbus tcp coil count." />
		<error name="INVALIDMODBUSTCPREGISTERCOUNT" code="75" description="invalid modbus tcp register count." />
		<error name="INVALIDMODBUSIOINDEX" code="76" description="invalid modbus IO index." />
		<error name="MODBUSIOSTATUSEMPTY" code="77" description="modbus io status empty." />
		<error name="INVALIDMODBUSREGISTERINDEX" code="78" description="invalid modbus register index." />
		<error name="MODBUSREGISTERSTATUSEMPTY" code="79" description="modbus register status empty." />		
		<error name="MODBUSTCPINVALIDINPUTREGISTERSRESPONSE" code="80" description="modbus TCP invalid input registers response" />
		<error name="MODBUSTCPINPUTREGISTERSRESPONSEEMPTY" code="81" description="modbus TCP input registers response empty" />
		<error name="MODBUSTCPINVALIDINPUTREGISTERSRESPONSESIZE" code="83" description="modbus TCP invalid input registers response size" />
		<error name="MODBUSTCPINVALIDHOLDINGREGISTERSRESPONSE" code="84" description="modbus TCP invalid holding registers response" />
		<error name="MODBUSTCPHOLDINGREGISTERSRESPONSEEMPTY" code="85" description="modbus TCP holding registers response empty" />
		<error name="MODBUSTCPINVALIDHOLDINGREGISTERSRESPONSESIZE" code="86" description="modbus TCP invalid holding registers response size" />
						
					
							
	</errors>


	<enum name="ImagePixelFormat">
		<option name="Unknown" value="0" />
		<option name="GreyScale8bit" value="1" />
		<option name="RGB24bit" value="2" />
		<option name="RGBA32bit" value="3" />
	</enum>
	
	<enum name="ToolpathSegmentType">
		<option name="Unknown" value="0" />
		<option name="Hatch" value="1" />
		<option name="Loop" value="2" />
		<option name="Polyline" value="3" />
	</enum>
	
	<enum name="ToolpathProfileValueType">
		<option name="Custom" value="0" />
		<option name="Speed" value="1" />
		<option name="JumpSpeed" value="2" />
		<option name="ExtrusionFactor" value="3" />
		<option name="LaserPower" value="4" />
		<option name="StartDelay" value="5" />
		<option name="EndDelay" value="6" />
		<option name="PolyDelay" value="7" />
		<option name="PolyDelayAngleDependent" value="8" />
		<option name="LaserOnDelay" value="9" />
		<option name="LaserOffDelay" value="10" />
		<option name="JumpDelay" value="11" />
		<option name="MarkDelay" value="12" />
		<option name="LaserFocus" value="13" />
	</enum>
	
	<enum name="MessageDialogType">
		<option name="Unknown" value="0" />
		<option name="DialogOK" value="1" />
		<option name="DialogOKCancel" value="2" />
		<option name="DialogYesNo" value="3" />
		<option name="DialogYesNoCancel" value="4" />
	</enum>
	
	
	<struct name="Position2D">
		<member name="Coordinates" type="int32" rows="2"/>
	</struct>

	<struct name="Hatch2D">
		<member name="X1" type="int32" />
		<member name="Y1" type="int32" />
		<member name="X2" type="int32" />
		<member name="Y2" type="int32" />
	</struct>

	<struct name="FloatPosition2D">
		<member name="Coordinates" type="double" rows="2"/>
	</struct>

	<struct name="FloatHatch2D">
		<member name="X1" type="double" />
		<member name="Y1" type="double" />
		<member name="X2" type="double" />
		<member name="Y2" type="double" />
	</struct>


	<struct name="ToolpathPartTransform">
		<member name="Matrix" type="double" rows="3" columns="3"/>
		<member name="Translation" type="double" rows="3"/>
	</struct>

	<struct name="ColorRGB">
		<member name="Red" type="double" />
		<member name="Green" type="double" />
		<member name="Blue" type="double" />
	</struct>

	
	<class name="Base">
	</class>


	<class name="Iterator" parent="Base">
		<method name="MoveNext" description="Iterates to the next object in the list.">
			<param name="HasNext" type="bool" pass="return" description="Iterates to the next object in the list."/>
		</method>
		<method name="MovePrevious" description="Iterates to the previous object in the list.">
			<param name="HasPrevious" type="bool" pass="return" description="Iterates to the previous object in the list."/>
		</method>
		<method name="GetCurrent" description="Returns the object the iterator points at.">
			<param name="Instance" type="handle" class="Base" pass="return" description="returns the object instance."/>
		</method>
		<method name="Clone" description="Creates a new object iterator with the same object list.">
			<param name="OutIterator" type="handle" class="Iterator" pass="return" description="returns the cloned Iterator instance"/>
		</method>
		<method name="Count" description="Returns the number of resoucres the iterator captures.">
			<param name="Count" type="uint64" pass="return" description="returns the number of objects the iterator captures."/>
		</method>
	</class>

	
	<class name="TestEnvironment" parent="Base">
	
		<method name="WriteTestOutput" description="Write output file to test directory.">
			<param name="OutputName" type="string" pass="in" description="Output file name. Only alphanumeric characters, point, underscore and hypen are allowed."/>
			<param name="Data" type="basicarray" class="uint8" pass="in" description="Test data to write into output directory."/>
		</method>
		
	</class>

	
	<class name="ImageData" parent="Base" description="In memory representation of an image.">

		<method name="GetPixelFormat" description="Returns Pixel format of the image.">
			<param name="PixelFormat" type="enum" class="ImagePixelFormat" pass="return" description="Pixel Format of image" />
		</method>

		<method name="ChangePixelFormat" description="Changes Pixel format of the image. Might lose alpha or color information during the process.">
			<param name="PixelFormat" type="enum" class="ImagePixelFormat" pass="in" description="new Pixel Format of image" />
		</method>

		<method name="GetDPI" description="Returns DPI values in X and Y.">
			<param name="DPIValueX" type="double" pass="out" description="DPI value in X" />
			<param name="DPIValueY" type="double" pass="out" description="DPI value in Y" />
		</method>

		<method name="SetDPI" description="Sets DPI values in X and Y.">
			<param name="DPIValueX" type="double" pass="in" description="new DPI value in X" />
			<param name="DPIValueY" type="double" pass="in" description="new DPI value in Y" />
		</method>
		
		<method name="GetSizeInMM" description="Returns image sizes inmm.">
			<param name="SizeX" type="double" pass="out" description="Size in X in mm" />
			<param name="SizeY" type="double" pass="out" description="Size in Y in mm" />
		</method>

		<method name="GetSizeInPixels" description="Returns image pixel sizes.">
			<param name="PixelSizeX" type="uint32" pass="out" description="Number of pixels in X" />
			<param name="PixelSizeY" type="uint32" pass="out" description="Number of pixels in Y" />
		</method>		

		<method name="ResizeImage" description="Resizes Image pixel data.">
			<param name="PixelSizeX" type="uint32" pass="out" description="Number of pixels in X" />
			<param name="PixelSizeY" type="uint32" pass="out" description="Number of pixels in Y" />
		</method>		

		<method name="LoadPNG" description="Loads a PNG from a binary array. Supports RGB, RGBA and Greyscale images.">
			<param name="PNGData" type="basicarray" class="uint8" pass="out" description="PNG Data stream." />
		</method>		

		<method name="EncodePNG" description="Encodes PNG and stores data stream in image object.">
		</method>		

		<method name="GetEncodedPNGData" description="Retrieves encoded data stream of image object. MUST have been encoded with EncodePNG before.">
			<param name="PNGData" type="basicarray" class="uint8" pass="out" description="PNG Data stream." />
		</method>		
		
		<method name="ClearEncodedPNGData" description="Releases encoded data stream of image object.">
		</method>		
		
		<method name="Clear" description="Sets all pixels to a single value.">
			<param name="Value" type="uint32" pass="in" description="Pixel value." />
		</method>		

		<method name="GetPixel" description="Returns one pixel of an image.">
			<param name="X" type="uint32" pass="in" description="Pixel coordinate in X" />
			<param name="Y" type="uint32" pass="in" description="Pixel coordinate in Y" />
			<param name="Value" type="uint32" pass="return" description="Pixel value at this position" />
		</method>		

		<method name="SetPixel" description="Sets one pixel of an image.">
			<param name="X" type="uint32" pass="in" description="Pixel coordinate in X" />
			<param name="Y" type="uint32" pass="in" description="Pixel coordinate in Y" />
			<param name="Value" type="uint32" pass="in" description="New Pixel value at this position" />
		</method>		

		<method name="GetPixelRange" description="Returns a subset of an image or the whole image data.">
			<param name="XMin" type="uint32" pass="in" description="Min Pixel coordinate in X. MUST be within image bounds." />
			<param name="YMin" type="uint32" pass="in" description="Min Pixel coordinate in Y. MUST be within image bounds." />
			<param name="XMax" type="uint32" pass="in" description="Max Pixel coordinate in X. MUST be within image bounds. MUST be larger or equal than MinX" />
			<param name="YMax" type="uint32" pass="in" description="Max Pixel coordinate in Y. MUST be within image bounds. MUST be larger or equal than MinY" />
			<param name="Value" type="basicarray" class="uint8" pass="out" description="Pixel values of the rectangle, rowwise array. MUST have the exact number of pixels in size and 1, 3 or 4 bytes per pixel, depending on pixel format." />
		</method>		

		<method name="SetPixelRange" description="Exchanges a subset of an image or the whole image data.">
			<param name="XMin" type="uint32" pass="in" description="Min Pixel coordinate in X. MUST be within image bounds." />
			<param name="YMin" type="uint32" pass="in" description="Min Pixel coordinate in Y. MUST be within image bounds." />
			<param name="XMax" type="uint32" pass="in" description="Max Pixel coordinate in X. MUST be within image bounds. MUST be larger or equal than MinX" />
			<param name="YMax" type="uint32" pass="in" description="Max Pixel coordinate in Y. MUST be within image bounds. MUST be larger or equal than MinY" />
			<param name="Value" type="basicarray" class="uint8" pass="in" description="New pixel values of the rectangle, rowwise array. MUST have the exact number of pixels in size and 1, 3 or 4 bytes per pixel, depending on pixel format." />
		</method>
	
	</class>
	

	<class name="ToolpathPart" parent="Base">
	
		<method name="GetName" description="Returns Part Name.">
			<param name="Name" type="string" pass="return" description="Returns toolpath part name." />
		</method>
	
		<method name="GetUUID" description="Returns Part UUID.">
			<param name="UUID" type="string" pass="return" description="Returns toolpath part uuid." />
		</method>

		<method name="GetMeshUUID" description="Returns Mesh UUID of the part.">
			<param name="MeshUUID" type="string" pass="return" description="Returns toolpath part mesh uuid." />
		</method>

		<method name="GetTransform" description="Returns Mesh Transform of the part.">
			<param name="MeshUUID" type="struct" class="ToolpathPartTransform" pass="return" description="Returns the mesh transform of the toolpath." />		
		</method>
	
	</class>


	<class name="ToolpathLayer" parent="Base">
	  
		<method name="GetLayerDataUUID" description="Retrieves the layerdata's uuid">
			<param name="UUID" type="string" pass="return" description="Returns the uuid value." />
		</method>
		
		<method name="GetSegmentCount" description="Retrieves the count of segments.">
			<param name="Count" type="uint32" pass="return" description="Count" />
		</method>
		
		<method name="GetSegmentInfo" description="Retrieves the segment type and point count information .">
			<param name="Index" type="uint32" pass="in" description="Index. Must be between 0 and Count - 1." />
			<param name="Type" type="enum" class="ToolpathSegmentType" pass="out" description="Segment Type" />
			<param name="PointCount" type="uint32" pass="out" description="Point count of segment." />
		</method>

		<method name="GetSegmentType" description="Retrieves the segment type.">
			<param name="Index" type="uint32" pass="in" description="Index. Must be between 0 and Count - 1." />
			<param name="Type" type="enum" class="ToolpathSegmentType" pass="return" description="Segment Type" />
		</method>

		<method name="GetSegmentPointCount" description="Retrieves the number of points in the segment. For type hatch, the points are taken pairwise.">
			<param name="Index" type="uint32" pass="in" description="Index. Must be between 0 and Count - 1." />
			<param name="HatchCount" type="uint32" pass="return" description="Hatch count of segment." />
		</method>
		
		<method name="GetSegmentHatchCount" description="Retrieves the number of hatches in the segment (i.e. PointCount / 2). Returns 0 if segment is not of type hatch.">
			<param name="Index" type="uint32" pass="in" description="Index. Must be between 0 and Count - 1." />
			<param name="HatchCount" type="uint32" pass="return" description="Hatch count of segment." />
		</method>
		
		<method name="GetSegmentProfileUUID" description="Retrieves the assigned segment profile uuid.">
			<param name="Index" type="uint32" pass="in" description="Index. Must be between 0 and Count - 1." />
			<param name="ProfileUUID" type="string" pass="return" description="Segment Profile UUID" />
		</method>

		<method name="GetSegmentProfileValue" description="Retrieves an assigned profile custom value.">
			<param name="Index" type="uint32" pass="in" description="Index. Must be between 0 and Count - 1." />
			<param name="ValueName" type="string" pass="in" description="Value Name to query for." />
			<param name="Value" type="string" pass="return" description="String Value." />
		</method>

		<method name="GetSegmentProfileTypedValue" description="Retrieves an assigned profile value of a standard type.">
			<param name="Index" type="uint32" pass="in" description="Index. Must be between 0 and Count - 1." />
			<param name="ValueType" type="enum" class="ToolpathProfileValueType" pass="in" description="Enum to query for. MUST NOT be custom." />
			<param name="Value" type="double" pass="return" description="Double Value" />
		</method>

		<method name="GetSegmentPartUUID" description="Retrieves the assigned segment part uuid.">
			<param name="Index" type="uint32" pass="in" description="Index. Must be between 0 and Count - 1." />
			<param name="PartUUID" type="string" pass="return" description="Segment Part UUID" />
		</method>
	
		<method name="GetSegmentPointData" description="Retrieves the assigned segment point list. For type hatch, the points are taken pairwise.">
			<param name="Index" type="uint32" pass="in" description="Index. Must be between 0 and Count - 1." />
			<param name="PointData" type="structarray" class="Position2D" pass="out" description="The point data array. Positions are absolute in units." />
		</method>
		
		<method name="GetSegmentHatchData" description="Retrieves the assigned segment hatch list. Fails if segment type is not hatch.">
			<param name="Index" type="uint32" pass="in" description="Index. Must be between 0 and Count - 1." />
			<param name="HatchData" type="structarray" class="Hatch2D" pass="out" description="The hatch data array. Positions are absolute in units." />
		</method>

		<method name="GetSegmentPointDataInMM" description="Retrieves the assigned segment point list. For type hatch, the points are taken pairwise.">
			<param name="Index" type="uint32" pass="in" description="Index. Must be between 0 and Count - 1." />
			<param name="PointData" type="structarray" class="FloatPosition2D" pass="out" description="The point data array. Positions are absolute in mm." />
		</method>
		
		<method name="GetSegmentHatchDataInMM" description="Retrieves the assigned segment hatch list. Fails if segment type is not hatch.">
			<param name="Index" type="uint32" pass="in" description="Index. Must be between 0 and Count - 1." />
			<param name="HatchData" type="structarray" class="FloatHatch2D" pass="out" description="The hatch data array. Positions are absolute in mm." />
		</method>
		
		<method name="GetZValue" description="Retrieves the layers Z Value in units.">
			<param name="ZValue" type="int32" pass="return" description="Z Value of the layer in units." />
		</method>

		<method name="GetZValueInMM" description="Retrieves the layers Z Value in mm.">
			<param name="ZValue" type="double" pass="return" description="Z Value of the layer in mm." />
		</method>
		
		<method name="GetUnits" description="Retrieves the toolpath units in mm.">
			<param name="Units" type="double" pass="return" description="Toolpath units." />
		</method>
		
	</class>


	<class name="ToolpathAccessor" parent="Base">
	
		<method name="GetStorageUUID" description="Returns Toolpath storage UUID.">
			<param name="StorageUUID" type="string" pass="return" description="Returns toolpath storage uuid." />
		</method>
	
		<method name="GetLayerCount" description="Returns layer count.">
			<param name="LayerCount" type="uint32" pass="return" description="Returns layer count." />
		</method>

		<method name="LoadLayer" description="Reads and returns a layer object.">
			<param name="LayerIndex" type="uint32" pass="in" description="Layer Index." />
			<param name="LayerData" type="class" class="ToolpathLayer" pass="return" description="Toolpath layer object." />
		</method>
		
		<method name="GetUnits" description="Retrieves the toolpath units in mm.">
			<param name="Units" type="double" pass="return" description="Toolpath units." />
		</method>

		<method name="HasMetaData" description="Checks if a metadata value exists for this toolpath model.">
			<param name="NameSpace" type="string" pass="in" description="Namespace of metadata." />
			<param name="Name" type="string" pass="in" description="Name of metadata." />
			<param name="Exists" type="bool" pass="return" description="Returns if metadata exists." />
		</method>

		<method name="GetMetaDataValue" description="Returns the value of a metadata for this toolpath model.">
			<param name="NameSpace" type="string" pass="in" description="Namespace of metadata." />
			<param name="Name" type="string" pass="in" description="Name of metadata." />
			<param name="MetaDataValue" type="string" pass="return" description="Returns the value" />
		</method>
			
		<method name="GetMetaDataType" description="Returns the type of a metadata for this toolpath model.">
			<param name="NameSpace" type="string" pass="in" description="Namespace of metadata." />
			<param name="Name" type="string" pass="in" description="Name of metadata." />
			<param name="MetaDataType" type="string" pass="return" description="Returns the type" />
		</method>

		<method name="GetPartCount" description="Retrieves the number of parts in the toolpath.">
			<param name="PartCount" type="uint32" pass="return" description="Number of parts." />
		</method>

		<method name="GetPart" description="Retrieves the part information of a toolpath.">
			<param name="PartIndex" type="uint32" pass="in" description="Index of part. MUST be between 0 and PartCount-1" />
			<param name="Part" type="class" class="ToolpathPart" pass="return" description="Part Instance" />
		</method>

		<method name="FindPartByUUID" description="Finds the part information of a toolpath.">
			<param name="PartUUID" type="string" pass="in" description="UUID of part." />
			<param name="Part" type="optionalclass" class="ToolpathPart" pass="return" description="Part Instance. Returns null if part does not exist." />
		</method>
		
		<method name="GetBuildHeightInUnits" description="Retrieves the build height in units.">
			<param name="BuildHeight" type="int32" pass="return" description="Build height in units." />
		</method>

		<method name="GetZValueInUnits" description="Retrieves the layers Z Value in units.">
			<param name="LayerIndex" type="uint32" pass="in" description="Layer Index to return." />
			<param name="ZValue" type="int32" pass="return" description="Z Value of the layer in units." />
		</method>		
		
		<method name="GetBuildHeightInMM" description="Retrieves the build height in mm.">
			<param name="BuildHeight" type="double" pass="return" description="Build height in mm." />
		</method>

		<method name="GetZValueInMM" description="Retrieves the layers Z Value in mm.">
			<param name="LayerIndex" type="uint32" pass="in" description="Layer Index to return." />
			<param name="ZValue" type="double" pass="return" description="Z Value of the layer in mm." />
		</method>		

	</class>


	<class name="Build" parent="Base" description="Build instance to access build files">

		<method name="GetName" description="Returns name of the build.">
			<param name="Name" type="string" pass="return" description="Name of the build." />
		</method>

		<method name="GetBuildUUID" description="Returns uuid of the build.">
			<param name="BuildUUID" type="string" pass="return" description="UUID of the build." />
		</method>

		<method name="GetStorageUUID" description="Returns storage uuid of the build.">
			<param name="StorageUUID" type="string" pass="return" description="Storage UUID of the build." />
		</method>

		<method name="GetStorageSHA256" description="Returns SHA256 of the build stream.">
			<param name="SHA256" type="string" pass="return" description="SHA256 of the build stream." />
		</method>

		<method name="GetLayerCount" description="Returns cached layer count of the toolpath.">
			<param name="LayerCount" type="uint32" pass="return" description="Returns layer count." />
		</method>

		<method name="GetBuildHeightInMM" description="Retrieves the build height in mm.">
			<param name="BuildHeight" type="double" pass="return" description="Build height in mm." />
		</method>

		<method name="GetZValueInMM" description="Retrieves the layers Z Value in mm.">
			<param name="LayerIndex" type="uint32" pass="in" description="Layer Index to return." />
			<param name="ZValue" type="double" pass="return" description="Z Value of the layer in mm." />
		</method>

		<method name="LoadToolpath" description="loads the a toolpath into memory">
		</method>

		<method name="UnloadToolpath" description="unloads the a toolpath from memory, if it has been loaded before.">
		</method>

		<method name="ToolpathIsLoaded" description="checks, if a toolpath object is loaded to memory.">
			<param name="IsLoaded" type="bool" pass="return" description="returns if toolpath is loaded." />
		</method>

		<method name="CreateToolpathAccessor" description="Creates an accessor object for a toolpath. Toolpath MUST have been loaded with LoadToolpath before.">
			<param name="ToolpathInstance" type="class" class="ToolpathAccessor" pass="return" description="Toolpath instance." />
		</method>

		<method name="AddBinaryData" description="Adds binary data to store with the build.">
			<param name="Name" type="string" pass="in" description="Name of the attache data block." />
			<param name="MIMEType" type="string" pass="in" description="Mime type of the data." />
			<param name="Content" type="basicarray" class="uint8" pass="in" description="Stream content to store" />
			<param name="DataUUID" type="string" pass="return" description="Data UUID of the attachment." />
		</method>

				
	</class>
	
	
	<class name="WorkingFileExecution" parent="Base" description="Working File Execution Object">

		<method name="GetStatus" description = "Returns the execution status">
		</method>

		<method name="ReturnStdOut" description = "Returns the output of the executable as string buffer">
			<param name="StringBuffer" type="string" pass="return" description="stdout buffer" />
		</method>


	</class>


	<class name="WorkingFile" parent="Base" description="Working File Access Object">

		<method name="GetAbsoluteFileName" description = "Retrieves absolute file name of the working file">
			<param name="FileName" type="string" pass="return" description="global path of the file" />
		</method>

		<method name="GetSize" description = "Returns the size of temporary file.">
			<param name="FileSize" type="uint64" pass="return" description="file size" />
		</method>

		<method name="CalculateSHA2" description = "Calculates the SHA256 checksum of the file.">
			<param name="SHA2" type="string" pass="return" description="sha256 checksum" />
		</method>

		<method name="ExecuteFile" description = "Executes the temporary file, if it is an executable.">
			<param name="Execution" type="class" class="WorkingFileExecution" pass="return" description="execution object" />
		</method>

		<method name="IsManaged" description = "Returns if the file is managed.">
			<param name="FileIsManaged" type="bool" pass="return" description="returns if the file is managed." />
		</method>

		<method name="MakeManaged" description = "Makes the file managed if it is not managed yet.">
		</method>

		<method name="FileExists" description = "Returns if the file exists on disk.">
			<param name="FileDoesExist" type="bool" pass="return" description="returns if the file exists." />
		</method>

		<method name="DeleteFromDisk" description = "Deletes the temporary file.">
			<param name="Success" type="bool" pass="return" description="returns if deletion was successful or file did not exist in the first place." />
		</method>
				
	</class>

	<class name="WorkingFileIterator" parent="Iterator">
		<method name="GetCurrentFile" description="Returns the working file the iterator points at.">
			<param name="WorkingFile" type="handle" class="WorkingFile" pass="return" description="returns the WorkingFile instance."/>
		</method>
	</class>


	<class name="WorkingDirectory" parent="Base" description="Working Directory Access Object">

		<method name="IsActive" description = "Working directory is active.">
			<param name="IsActive" type="bool" pass="return" description="returns true if files can be read and written to the directory." />
		</method>

		<method name="GetAbsoluteFilePath" description = "Retrieves absolute file path.">
			<param name="FilePath" type="string" pass="return" description="global path of the directory, including path delimiter." />
		</method>

		<method name="StoreCustomData" description = "Stores a data buffer in a temporary file with a given name.">
			<param name="FileName" type="string" pass="in" description="filename to store to. Can not include any path delimiters or .." />
			<param name="DataBuffer" type="basicarray" class="uint8" pass="in" description="file data to store to." />
			<param name="WorkingFile" type="class" class="WorkingFile" pass="return" description="working file instance." />
		</method>

		<method name="StoreCustomString" description = "Stores a string in a temporary file with a given name.">
			<param name="FileName" type="string" pass="in" description="filename to store to. Can not include any path delimiters or .." />
			<param name="DataString" type="string" pass="in" description="file data to store to." />
			<param name="WorkingFile" type="class" class="WorkingFile" pass="return" description="working file instance." />
		</method>

		<method name="StoreDriverData" description = "Stores attached driver data in a temporary file.">
			<param name="FileName" type="string" pass="in" description="filename to store to. Can not include any path delimiters or .." />
			<param name="Identifier" type="string" pass="in" description="identifier of the binary data in the driver package." />
			<param name="WorkingFile" type="class" class="WorkingFile" pass="return" description="working file instance." />
		</method>

		<method name="StoreCustomDataInTempFile" description = "Stores a data buffer in a temporary file with a generated name.">
			<param name="Extension" type="string" pass="in" description="extension of the file to store. MAY be an empty string. MUST only include up to 64 alphanumeric characters." />
			<param name="DataBuffer" type="basicarray" class="uint8" pass="in" description="file data to store to." />
			<param name="WorkingFile" type="class" class="WorkingFile" pass="return" description="working file instance." />
		</method>

		<method name="StoreCustomStringInTempFile" description = "Stores a string in a temporary file.">
			<param name="Extension" type="string" pass="in" description="extension of the file to store. MAY be an empty string. MUST only include up to 64 alphanumeric characters." />
			<param name="DataString" type="string" pass="in" description="file data to store to." />
			<param name="WorkingFile" type="class" class="WorkingFile" pass="return" description="working file instance." />
		</method>

		<method name="StoreDriverDataInTempFile" description = "Stores attached driver data in a temporary file.">
			<param name="Extension" type="string" pass="in" description="extension of the file to store. MAY be an empty string. MUST only include up to 64 alphanumeric characters." />
			<param name="Identifier" type="string" pass="in" description="identifier of the binary data in the driver package." />
			<param name="WorkingFile" type="class" class="WorkingFile" pass="return" description="working file instance." />
		</method>

		<method name="CleanUp" description = "Deletes all managed files in the directory and the directory. No storing is possible after a cleanup.">
			<param name="Success" type="bool" pass="return" description="returns if deletion was successful." />
		</method>

		<method name="AddManagedFile" description = "Adds a managed filename in the directory (i.e. this file will be deleted at CleanUp). Subdirectories are not allowed.">
			<param name="FileName" type="string" pass="in" description="Filename to manage. The file does not need to exist yet." />
			<param name="WorkingFile" type="class" class="WorkingFile" pass="return" description="working file instance." />
		</method>

		<method name="HasUnmanagedFiles" description = "Returns if the working directory has unmanaged files. A clean implementation will never deal with unmanaged files.">
			<param name="HasUnmanagedFiles" type="bool" pass="return" description="returns if there are unmanaged files." />
		</method>

		<method name="RetrieveUnmanagedFiles" description = "Returns a list of unmanaged files." >
			<param name="IteratorInstance" type="class" class="WorkingFileIterator" pass="return" description="working file iterator instance." />
		</method>

		<method name="RetrieveManagedFiles" description = "Returns a list of managed files." >
			<param name="IteratorInstance" type="class" class="WorkingFileIterator" pass="return" description="working file iterator instance." />
		</method>

		<method name="RetrieveAllFiles" description = "Returns a list of all files in the directory." >
			<param name="IteratorInstance" type="class" class="WorkingFileIterator" pass="return" description="working file iterator instance." />
		</method>

	</class>


	<class name="TCPIPPacket" parent="Base" description="Contains a received TCPIP packet data.">

		<method name="IsEmpty" description="Returns if packet is empty.">
			<param name="PacketIsEmpty" type="bool" pass="return" description="Flag if packet is empty." />
		</method>
	
		<method name="GetSize" description="Returns the size of the packet. Returns 0 if packet is empty.">
			<param name="PacketSize" type="uint32" pass="return" description="returns size of packet." />
		</method>

		<method name="GetData" description="Returns the data of the packet. Fails if packet is empty.">
			<param name="Buffer" type="basicarray" class="uint8" pass="out" description="packet data." />
		</method>
		
	</class>


	<class name="TCPIPConnection" parent="Base" description="A generic TCP/IP Connection.">

		<method name="GetIPAddress" description= "Returns the IP Address of the Connection.">
			<param name="IPAddress" type="string" pass="return" description="IP Address." />
		</method>

		<method name="GetPort" description= "Returns the Port of the Connection.">
			<param name="Port" type="uint32" pass="return" description="Port." />				
		</method>

		<method name="GetTimeout" description= "Returns the Timeout of the Connection.">
			<param name="Timeout" type="uint32" pass="return" description="Timeout in milliseconds." />				
		</method>

		<method name="IsConnected" description="Returns if the instance is connected.">		
			<param name="IsConnected" type="bool" pass="return" description="." />
		</method>	

		<method name="Disconnect" description= "Disconnects from the Server, if connected.">
		</method>

		<method name="Reconnect" description="Disconnects and Connects to the Server.">		
		</method>	

		<method name="SendBuffer" description= "Sends a buffer of bytes to the Server.">
			<param name="Buffer" type="basicarray" class="uint8" pass="in" description="packet payload." />		
		</method>

		<method name="WaitForData" description= "Waits for a server packet to arrive.">
			<param name="TimeOutInMS" type="uint32" pass="in" description="timeout in Milliseconds." />		
			<param name="DataAvailable" type="bool" pass="return" description="Flag if a new packet has arrived." />		
		</method>

		<method name="ReceiveFixedPacket" description= "Receives a fixed length packet. Blocks until expected number of bytes arrives or timeout is hit. Fails if there is a connection error. Returns empty packet if timeout is hit.">
			<param name="PacketSize" type="uint32" pass="in" description="Size of packet to receive. MUST be larger than 0." />	
			<param name="TimeOutInMS" type="uint32" pass="in" description="Timeout in Milliseconds." />		
			<param name="PacketInstance" type="class" class="TCPIPPacket" pass="return" description="Packet instance. Returns empty packet if timeout is hit" />
		</method>

		<method name="ReceiveData" description= "Receives data. Fails if there is a connection error. Returns empty packet if timeout is hit.">
			<param name="DataSize" type="uint32" pass="in" description="Size of data to receive." />	
			<param name="TimeOutInMS" type="uint32" pass="in" description="timeout in Milliseconds." />		
			<param name="PacketInstance" type="class" class="TCPIPPacket" pass="return" description="Packet instance. Size will be between 0 and DataSize." />
		</method>
				
	</class>

	<class name="ModbusTCPDigitalIOStatus" parent="Base" description="A Modbus TCP coil or input status object.">
	
		<method name="GetCount" description= "Returns the number of Digital IOs in the instance.">
			<param name="Count" type="uint32" pass="return" description="Count." />				
		</method>
		
		<method name="GetBaseAddress" description= "Returns the base address of Digital IOs in the instance.">
			<param name="Address" type="uint32" pass="return" description="Base Address." />				
		</method>

		<method name="GetValue" description= "Returns the cached state of the Digital IO in the instance.">
			<param name="Index" type="uint32" pass="in" description="Index of IO Value. 0-based." />
			<param name="State" type="bool" pass="return" description="State Value." />				
		</method>
		
		<method name="GetValues" description= "Returns all Digital IOs of the instance as byte array.">
			<param name="StateArray" type="basicarray" class="uint8" pass="out" description="State Value Array." />
		</method>
		
	</class>

	<class name="ModbusTCPRegisterStatus" parent="Base" description="A Modbus TCP register status object.">
	
		<method name="GetCount" description= "Returns the number of registers in the instance.">
			<param name="Count" type="uint32" pass="return" description="Count." />				
		</method>
		
		<method name="GetBaseAddress" description= "Returns the base address of registers in the instance.">
			<param name="Address" type="uint32" pass="return" description="Base Address." />				
		</method>

		<method name="GetValue" description= "Returns the cached state of the registers in the instance.">
			<param name="Index" type="uint32" pass="in" description="Index of IO Value. 0-based." />
			<param name="State" type="uint16" pass="return" description="State Value." />				
		</method>
		
		<method name="GetValues" description= "Returns all registers of the instance as word array.">
			<param name="StateArray" type="basicarray" class="uint16" pass="out" description="State Value Array." />
		</method>
		
	</class>

	<class name="ModbusTCPConnection" parent="Base" description="A generic Modbus TCP Connection.">

		<method name="GetIPAddress" description= "Returns the IP Address of the Connection.">
			<param name="IPAddress" type="string" pass="return" description="IP Address." />
		</method>

		<method name="GetPort" description= "Returns the Port of the Connection.">
			<param name="Port" type="uint32" pass="return" description="Port." />				
		</method>

		<method name="GetTimeout" description= "Returns the Timeout of the Connection.">
			<param name="Timeout" type="uint32" pass="return" description="Timeout in milliseconds." />				
		</method>

		<method name="IsConnected" description="Returns if the instance is connected.">		
			<param name="IsConnected" type="bool" pass="return" description="." />
		</method>	

		<method name="Disconnect" description= "Disconnects from the Server.">
		</method>

		<method name="Reconnect" description="Disconnects and Connects to the Server.">		
		</method>	

		<method name="DiagnosisCall" description= "Sends a diagnosis call to the Server.">
			<param name="SubFunction" type="uint16" pass="in" description="Modbus TCP Subfunction ID." />
			<param name="DataField" type="uint16" pass="in" description="Modbus TCP Data Field." />
			<param name="DataResponse" type="uint16" pass="return" description="Modbus TCP Data Response." />
		</method>

		<method name="ReadCoilStatus" description= "Reads coil status of Server.">
			<param name="StartAddress" type="uint32" pass="in" description="Start Address." />
			<param name="BitCount" type="uint32" pass="in" description="Number of coils to read. MUST be larger than 0." />
			<param name="CoilStatus" type="class" class="ModbusTCPDigitalIOStatus" pass="return" description="Coil status instance." />
		</method>
		
		<method name="ReadInputStatus" description= "Reads input status of Server.">
			<param name="StartAddress" type="uint32" pass="in" description="Start Address." />
			<param name="BitCount" type="uint32" pass="in" description="Number of inputs to read. MUST be larger than 0." />
-			<param name="InputStatus" type="class" class="ModbusTCPDigitalIOStatus" pass="return" description="Input status instance." />
		</method>
		
		<method name="ReadHoldingRegisters" description= "Reads holding registers of Server.">
			<param name="StartAddress" type="uint32" pass="in" description="Start Address." />
			<param name="RegisterCount" type="uint32" pass="in" description="Number of registers. MUST be larger than 0." />
			<param name="RegisterInstance" type="class" class="ModbusTCPRegisterStatus" pass="return" description="Holding register instance." />
		</method>
		
		<method name="ReadInputRegisters" description= "Reads input registers of Server.">
			<param name="StartAddress" type="uint32" pass="in" description="Start Address." />
			<param name="RegisterCount" type="uint32" pass="in" description="Number of registers. MUST be larger than 0." />
			<param name="RegisterInstance" type="class" class="ModbusTCPRegisterStatus" pass="return" description="Input register instance." />
		</method>
		
		<method name="ForceMultipleCoils" description= "Forces multiple coils on Server.">
			<param name="StartAddress" type="uint32" pass="in" description="Start Address." />
			<param name="Buffer" type="basicarray" class="uint8" pass="in" description="Input coil array. One byte per Input. MUST NOT be empty" />
		</method>

		<method name="PresetMultipleRegisters" description= "Forces multiple registers on Server.">
			<param name="StartAddress" type="uint32" pass="in" description="Start Address." />
			<param name="Buffer" type="basicarray" class="uint16" pass="in" description="Input register array. One word per Input. MUST NOT be empty" />
		</method>
		
	</class>	


	<class name="DriverEnvironment" parent="Base" description="Environment of the driver">
	  
		<method name="CreateWorkingDirectory" description = "creates a temporary working directory.">
			<param name="WorkingDirectory" type="class" class="WorkingDirectory" pass="return" description="creates a working directory" />
		</method>

		<method name="CreateTCPIPConnection" description = "creates a TCP/IP Connection for a specific IP address and port.">
			<param name="IPAddress" type="string" pass="in" description="IP Address." />
			<param name="Port" type="uint32" pass="in" description="Port." />				
			<param name="TimeOutInMS" type="uint32" pass="in" description="timeout in Milliseconds." />		
			<param name="ConnectionInstance" type="class" class="TCPIPConnection" pass="return" description="connects to the given IP Address" />
		</method>

		<method name="CreateModbusTCPConnection" description = "creates a Modbus TCP Connection for a specific IP address and port.">
			<param name="IPAddress" type="string" pass="in" description="IP Address." />
			<param name="Port" type="uint32" pass="in" description="Port." />				
			<param name="TimeOutInMS" type="uint32" pass="in" description="timeout in Milliseconds." />		
			<param name="ConnectionInstance" type="class" class="ModbusTCPConnection" pass="return" description="connects to the given IP Address" />
		</method>

		<method name="DriverHasResourceData" description = "retrieves if attached driver has data with the given identifier.">
			<param name="Identifier" type="string" pass="in" description="identifier of the binary data in the driver package." />
			<param name="HasResourceData" type="bool" pass="return" description="returns true if the resource exists in the machine resource package." />
		</method>

		<method name="MachineHasResourceData" description = "retrieves if attached driver has data with the given identifier.">
			<param name="Identifier" type="string" pass="in" description="identifier of the binary data in the driver package." />
			<param name="HasResourceData" type="bool" pass="return" description="returns true if the resource exists in the machine resource package." />
		</method>

		<method name="RetrieveDriverData" description = "retrieves attached driver resource data into a memory buffer. (depreciated, equivalent to RetrieveDriverResourceData)">
			<param name="Identifier" type="string" pass="in" description="identifier of the binary data in the driver package." />
			<param name="DataBuffer" type="basicarray" class="uint8" pass="out" description="buffer data." />
		</method>

		<method name="RetrieveDriverResourceData" description = "retrieves attached driver resource data into a memory buffer.">
			<param name="Identifier" type="string" pass="in" description="identifier of the binary data in the driver package." />
			<param name="DataBuffer" type="basicarray" class="uint8" pass="out" description="buffer data." />
		</method>

		<method name="RetrieveMachineResourceData" description = "retrieves a machine resource data (Plugins Directory) driver data into a memory buffer.">
			<param name="Identifier" type="string" pass="in" description="identifier of the binary data in the machine resource package." />
			<param name="DataBuffer" type="basicarray" class="uint8" pass="out" description="buffer data." />
		</method>
		
		<method name="CreateToolpathAccessor" description="Creates an accessor object for a toolpath. Toolpath MUST have been loaded into memory before.">
			<param name="StreamUUID" type="string" pass="in" description="UUID of the stream." />
			<param name="ToolpathInstance" type="class" class="ToolpathAccessor" pass="return" description="Toolpath instance." />
		</method>
		
		
		<method name="RegisterStringParameter" description="registers a string parameter. Must only be called during driver creation.">
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Description" type="string" pass="in" description="Parameter Description" />
			<param name="DefaultValue" type="string" pass="in" description="default value to set" />
		</method>

		<method name="RegisterUUIDParameter" description="registers a uuid parameter. Must only be called during driver creation.">
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Description" type="string" pass="in" description="Parameter Description" />
			<param name="DefaultValue" type="string" pass="in" description="default value to set" />
		</method>

		<method name="RegisterDoubleParameter" description="registers a double parameter. Must only be called during driver creation.">
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Description" type="string" pass="in" description="Parameter Description" />
			<param name="DefaultValue" type="double" pass="in" description="default value to set" />
		</method>

		<method name="RegisterIntegerParameter" description="registers an int parameter. Must only be called during driver creation.">
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Description" type="string" pass="in" description="Parameter Description" />
			<param name="DefaultValue" type="int64" pass="in" description="default value to set" />
		</method>

		<method name="RegisterBoolParameter" description="registers a bool parameter. Must only be called during driver creation.">
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Description" type="string" pass="in" description="Parameter Description" />
			<param name="DefaultValue" type="bool" pass="in" description="default value to set" />
		</method>
		
		
		<method name="SetStringParameter" description="sets a string parameter">
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Value" type="string" pass="in" description="Value to set" />
		</method>

		<method name="SetUUIDParameter" description="sets a uuid parameter">
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Value" type="string" pass="in" description="Value to set" />
		</method>

		<method name="SetDoubleParameter" description="sets a double parameter">
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Value" type="double" pass="in" description="Value to set" />
		</method>

		<method name="SetIntegerParameter" description="sets an int parameter">
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Value" type="int64" pass="in" description="Value to set" />
		</method>

		<method name="SetBoolParameter" description="sets a bool parameter">
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Value" type="bool" pass="in" description="Value to set" />
		</method>
		
		<method name="Sleep" description="Puts the current instance to sleep for a definite amount of time. MUST be used instead of a blocking sleep call.">
			<param name="Delay" type="uint32" pass="in" description="Milliseconds to sleeps" />
		</method>

		<method name="GetGlobalTimerInMilliseconds" description="Returns the global timer in milliseconds.">
			<param name="TimerValue" type="uint64" pass="return" description="Timer value in Milliseconds" />
		</method>

		<method name="LogMessage" description="logs a string as message">
			<param name="LogString" type="string" pass="in" description="String to Log" />
		</method>

		<method name="LogWarning" description="logs a string as warning">
			<param name="LogString" type="string" pass="in" description="String to Log" />
		</method>

		<method name="LogInfo" description="logs a string as info">
			<param name="LogString" type="string" pass="in" description="String to Log" />
		</method>
		
		<method name="CreateEmptyImage" description="creates an empty image object.">
			<param name="PixelSizeX" type="uint32" pass="in" description="Pixel size in X. MUST be positive." />
			<param name="PixelSizeY" type="uint32" pass="in" description="Pixel size in Y. MUST be positive." />
			<param name="DPIValueX" type="double" pass="in" description="DPI Value in X. MUST be positive." />
			<param name="DPIValueY" type="double" pass="in" description="DPI Value in Y. MUST be positive." />
			<param name="PixelFormat" type="enum" class="ImagePixelFormat" pass="in" description="Pixel format to use." />
			<param name="ImageDataInstance" type="class" class="ImageData" pass="return" description="Empty image instance." />
		</method>		
		
		<method name="LoadPNGImage" description="creates an image object from a PNG data stream.">
			<param name="PNGData" type="basicarray" class="uint8" pass="in" description="DPI Value in X. MUST be positive." />
			<param name="DPIValueX" type="double" pass="in" description="DPI Value in X. MUST be positive." />
			<param name="DPIValueY" type="double" pass="in" description="DPI Value in Y. MUST be positive." />
			<param name="PixelFormat" type="enum" class="ImagePixelFormat" pass="in" description="Pixel format to use. Might lose color and alpha information." />
			<param name="ImageDataInstance" type="class" class="ImageData" pass="return" description="Image instance containing the PNG image." />
		</method>

	</class>
	
	

	<class name="SignalTrigger" parent="Base" description="Class for signal triggering">

		<method name="CanTrigger" description="Returns, if signal channel is available.">
			<param name="ChannelIsAvailable" type="bool" pass="return" description="Returns true, if signal channel is available." />
		</method>

		<method name="Trigger" description="Triggers a signal, if signal channel is available.">
		</method>

		<method name="WaitForHandling" description="Waits until the signal is reset.">
			<param name="TimeOut" type="uint32" pass="in" description="Timeout in Milliseconds. 0 for Immediate return." />			
			<param name="Success" type="bool" pass="return" description="Flag if signal handling has been handled." />
		</method>
		
		<method name="GetName" description="Returns the signal name.">
			<param name="SignalName" type="string" pass="return" description="Name Of Signal" />
		</method>
		
		<method name="GetStateMachine" description="Returns the signal state machine instance.">
			<param name="StateMachineName" type="string" pass="return" description="Name Of State Machine" />
		</method>

		<method name="SetString" description="sets a string value">
			<param name="Name" type="string" pass="in" description="Name" />
			<param name="Value" type="string" pass="in" description="Value" />
		</method>

		<method name="SetUUID" description="sets a uuid value">
			<param name="Name" type="string" pass="in" description="Name" />
			<param name="Value" type="string" pass="in" description="Value" />
		</method>

		<method name="SetDouble" description="sets a double">
			<param name="Name" type="string" pass="in" description="Name" />
			<param name="Value" type="double" pass="in" description="Value" />
		</method>

		<method name="SetInteger" description="sets an int.">
			<param name="Name" type="string" pass="in" description="Name" />
			<param name="Value" type="int64" pass="in" description="Value" />
		</method>

		<method name="SetBool" description="sets a bool">
			<param name="Name" type="string" pass="in" description="Name" />
			<param name="Value" type="bool" pass="in" description="Value" />
		</method>

		<method name="GetStringResult" description="returns a string value of the result">
			<param name="Name" type="string" pass="in" description="Name" />
			<param name="Value" type="string" pass="return" description="Value" />
		</method>

		<method name="GetUUIDResult" description="returns a uuid value of the result">
			<param name="Name" type="string" pass="in" description="Name" />
			<param name="Value" type="string" pass="return" description="Value" />
		</method>

		<method name="GetDoubleResult" description="returns a string value of the result">
			<param name="Name" type="string" pass="in" description="Name" />
			<param name="Value" type="double" pass="return" description="Value" />
		</method>

		<method name="GetIntegerResult" description="returns an int value of the result.">
			<param name="Name" type="string" pass="in" description="Name" />
			<param name="Value" type="int64" pass="return" description="Value" />
		</method>

		<method name="GetBoolResult" description="returns a bool value of the result.">
			<param name="Name" type="string" pass="in" description="Name" />
			<param name="Value" type="bool" pass="return" description="Value" />
		</method>

	</class>



	<class name="SignalHandler" parent="Base" description="Class for signal handling">

		<method name="SignalHandled" description="Marks signal as handled and resets signal channel.">
		</method>
		
		<method name="GetName" description="Returns the signal name.">
			<param name="SignalName" type="string" pass="return" description="Name Of Signal" />
		</method>

		<method name="GetSignalID" description="Returns the signal id.">
			<param name="SignalID" type="string" pass="return" description="Signal Identifier" />
		</method>
		
		<method name="GetStateMachine" description="Returns the signal state machine instance.">
			<param name="StateMachineName" type="string" pass="return" description="Name Of State Machine" />
		</method>

		<method name="GetString" description="gets a string value">
			<param name="Name" type="string" pass="in" description="Name" />
			<param name="Value" type="string" pass="return" description="Value" />
		</method>

		<method name="GetUUID" description="gets a uuid value">
			<param name="Name" type="string" pass="in" description="Name" />
			<param name="Value" type="string" pass="return" description="Value" />
		</method>


		<method name="GetDouble" description="gets a double">
			<param name="Name" type="string" pass="in" description="Name" />
			<param name="Value" type="double" pass="return" description="Value" />
		</method>

		<method name="GetInteger" description="gets an int.">
			<param name="Name" type="string" pass="in" description="Name" />
			<param name="Value" type="int64" pass="return" description="Value" />
		</method>

		<method name="GetBool" description="gets a bool">
			<param name="Name" type="string" pass="in" description="Name" />
			<param name="Value" type="bool" pass="return" description="Value" />
		</method>

		<method name="SetStringResult" description="returns a string value of the result">
			<param name="Name" type="string" pass="in" description="Name" />
			<param name="Value" type="string" pass="in" description="Value" />
		</method>

		<method name="SetUUIDResult" description="returns a uuid value of the result">
			<param name="Name" type="string" pass="in" description="Name" />
			<param name="Value" type="string" pass="in" description="Value" />
		</method>

		<method name="SetDoubleResult" description="returns a string value of the result">
			<param name="Name" type="string" pass="in" description="Name" />
			<param name="Value" type="double" pass="in" description="Value" />
		</method>

		<method name="SetIntegerResult" description="sets an int.">
			<param name="Name" type="string" pass="in" description="Name" />
			<param name="Value" type="int64" pass="in" description="Value" />
		</method>

		<method name="SetBoolResult" description="sets a bool">
			<param name="Name" type="string" pass="in" description="Name" />
			<param name="Value" type="bool" pass="in" description="Value" />
		</method>

	</class>


	<class name="StateEnvironment" parent="Base" description="Environment of the state">

		<method name="GetMachineState" description="Retrieves the machine state">
			<param name="MachineInstance" type="string" pass="in" description="State machine instance name" />
			<param name="StateName" type="string" pass="return" description="Name of current state" />
		</method>

	  
		<method name="PrepareSignal" description="prepares a signal object to trigger later.">
			<param name="MachineInstance" type="string" pass="in" description="State machine instance name" />
			<param name="SignalName" type="string" pass="in" description="Name Of signal channel." />
			<param name="SignalInstance" type="class" class="SignalTrigger" pass="return" description="Signal trigger object." />
		</method>
	  
		<method name="WaitForSignal" description="waits for a signal.">
			<param name="SignalName" type="string" pass="in" description="Name Of Signal" />
			<param name="TimeOut" type="uint32" pass="in" description="Timeout in Milliseconds. 0 for Immediate return." />			
			<param name="HandlerInstance" type="optionalclass" class="SignalHandler" pass="out" description="Signal object. If Success is false, the Signal Handler Object will be null." />
			<param name="Success" type="bool" pass="return" description="Signal has been triggered" />
		</method>		

		<method name="GetDriverLibrary" description="Returns the driver type and library lookup for a specific registered driver.">
			<param name="DriverName" type="string" pass="in" description="Name identifier of the driver." />
			<param name="DriverType" type="string" pass="out" description="returns type identifier of the driver." />
			<param name="DriverLookup" type="pointer" pass="out" description="GetProcAddress Handle of the driver." />
		</method>

		<method name="CreateDriverAccess" description="Accesses and locks a driver for the execution of the current state.">
			<param name="DriverName" type="string" pass="in" description="Name identifier of the driver." />
			<param name="DriverHandle" type="pointer" pass="out" description="Handle of the driver." />
		</method>

		<method name="GetBuildJob" description="Returns a instance of a build object.">
			<param name="BuildUUID" type="string" pass="in" description="UUID of the build entity." />
			<param name="BuildInstance" type="class" class="Build" pass="return" description="Build instance" />
		</method>

		<method name="UnloadAllToolpathes" description="unloads all toolpath in memory to clean up">
		</method>


		<method name="SetNextState" description="sets the next state">
			<param name="StateName" type="string" pass="in" description="Name of next state" />
		</method>
				
		<method name="LogMessage" description="logs a string as message">
			<param name="LogString" type="string" pass="in" description="String to Log" />
		</method>

		<method name="LogWarning" description="logs a string as warning">
			<param name="LogString" type="string" pass="in" description="String to Log" />
		</method>

		<method name="LogInfo" description="logs a string as info">
			<param name="LogString" type="string" pass="in" description="String to Log" />
		</method>

		<method name="Sleep" description="Puts the current instance to sleep for a definite amount of time. MUST be used instead of a blocking sleep call.">
			<param name="Delay" type="uint32" pass="in" description="Milliseconds to sleeps" />
		</method>

		<method name="CheckForTermination" description="checks environment for termination signal. MUST be called frequently in longer-running operations.">
			<param name="ShallTerminate" type="bool" pass="return" description="Returns if termination shall appear" />
		</method>


		<method name="StoreSignal" description="stores a signal handler in the current state machine">
			<param name="Name" type="string" pass="in" description="Name" />
			<param name="Handler" type="class" class="SignalHandler" pass="in" description="Signal handler to store." />
		</method>

		<method name="RetrieveSignal" description="retrieves a signal handler from the current state machine. Fails if value has not been stored before or signal has been already handled.">
			<param name="Name" type="string" pass="in" description="Name" />
			<param name="Handler" type="class" class="SignalHandler" pass="return" description="Signal handler instance." />
		</method>

		<method name="ClearStoredValue" description="deletes a value from the data store.">
			<param name="Name" type="string" pass="in" description="Name" />
		</method>
		
		
		<method name="SetStringParameter" description="sets a string parameter">
			<param name="ParameterGroup" type="string" pass="in" description="Parameter Group" />
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Value" type="string" pass="in" description="Value to set" />
		</method>

		<method name="SetUUIDParameter" description="sets a uuid parameter">
			<param name="ParameterGroup" type="string" pass="in" description="Parameter Group" />
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Value" type="string" pass="in" description="Value to set" />
		</method>

		<method name="SetDoubleParameter" description="sets a double parameter">
			<param name="ParameterGroup" type="string" pass="in" description="Parameter Group" />
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Value" type="double" pass="in" description="Value to set" />
		</method>

		<method name="SetIntegerParameter" description="sets an int parameter">
			<param name="ParameterGroup" type="string" pass="in" description="Parameter Group" />
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Value" type="int64" pass="in" description="Value to set" />
		</method>

		<method name="SetBoolParameter" description="sets a bool parameter">
			<param name="ParameterGroup" type="string" pass="in" description="Parameter Group" />
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Value" type="bool" pass="in" description="Value to set" />
		</method>

		<method name="GetStringParameter" description="returns a string parameter">
			<param name="ParameterGroup" type="string" pass="in" description="Parameter Group" />
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Value" type="string" pass="return" description="Value to set" />
		</method>

		<method name="GetUUIDParameter" description="returns a uuid parameter">
			<param name="ParameterGroup" type="string" pass="in" description="Parameter Group" />
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Value" type="string" pass="return" description="Value to set" />
		</method>

		<method name="GetDoubleParameter" description="returns a double parameter">
			<param name="ParameterGroup" type="string" pass="in" description="Parameter Group" />
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Value" type="double" pass="return" description="Value to set" />
		</method>

		<method name="GetIntegerParameter" description="returns an int parameter">
			<param name="ParameterGroup" type="string" pass="in" description="Parameter Group" />
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Value" type="int64" pass="return" description="Value to set" />
		</method>

		<method name="GetBoolParameter" description="returns a bool parameter">
			<param name="ParameterGroup" type="string" pass="in" description="Parameter Group" />
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Value" type="bool" pass="return" description="Value to set" />
		</method>
		

		<method name="LoadResourceData" description="loads a plugin resource file into memory.">
			<param name="ResourceName" type="string" pass="in" description="Name of the resource." />
			<param name="ResourceData" type="basicarray" class="uint8" pass="out" description="Resource Data Buffer." />
		</method>

		<method name="LoadResourceString" description="loads a plugin resource file into a string. Fails if content is not a valid UTF8 string.">
			<param name="ResourceName" type="string" pass="in" description="Name of the resource." />
			<param name="ResourceData" type="string" pass="return" description="Resource Data String." />
		</method>

		<method name="CreateEmptyImage" description="creates an empty image object.">
			<param name="PixelSizeX" type="uint32" pass="in" description="Pixel size in X. MUST be positive." />
			<param name="PixelSizeY" type="uint32" pass="in" description="Pixel size in Y. MUST be positive." />
			<param name="DPIValueX" type="double" pass="in" description="DPI Value in X. MUST be positive." />
			<param name="DPIValueY" type="double" pass="in" description="DPI Value in Y. MUST be positive." />
			<param name="PixelFormat" type="enum" class="ImagePixelFormat" pass="in" description="Pixel format to use." />
			<param name="ImageDataInstance" type="class" class="ImageData" pass="return" description="Empty image instance." />
		</method>		
		
		<method name="LoadPNGImage" description="creates an image object from a PNG data stream.">
			<param name="PNGData" type="basicarray" class="uint8" pass="in" description="DPI Value in X. MUST be positive." />
			<param name="DPIValueX" type="double" pass="in" description="DPI Value in X. MUST be positive." />
			<param name="DPIValueY" type="double" pass="in" description="DPI Value in Y. MUST be positive." />
			<param name="PixelFormat" type="enum" class="ImagePixelFormat" pass="in" description="Pixel format to use. Might lose color and alpha information." />
			<param name="ImageDataInstance" type="class" class="ImageData" pass="return" description="Image instance containing the PNG image." />	
		</method>

		<method name="GetGlobalTimerInMilliseconds" description="Returns the global timer in milliseconds.">
			<param name="TimerValue" type="uint64" pass="return" description="Timer value in Milliseconds" />
		</method>

		<method name="GetTestEnvironment" description="Returns a test environment instance.">
			<param name="TestEnvironment" type="class" class="TestEnvironment" pass="return" description="Test Environment Instance" />
		</method>

	</class>



	<class name="UIEnvironment" parent="Base" description="Environment of the UI">
	  
		<method name="ActivateModalDialog" description="activates a modal dialog on the client.">
			<param name="DialogName" type="string" pass="in" description="Name of the dialog to activate." />
		</method>

		<method name="CloseModalDialog" description="closes the active modal dialog on the client.">
		</method>
	  
		<method name="ActivatePage" description="changes the current page on the client.">
			<param name="PageName" type="string" pass="in" description="Name of the page to activate." />
		</method>

	  	<method name="LogOut" description="Logs out the client session.">
		</method>

		<method name="ShowHint" description="Shows a hint message in the user interface.">
			<param name="Hint" type="string" pass="in" description="Hint to show." />
			<param name="TimeoutInMS" type="uint32" pass="in" description="How many milliseconds the snackbar should be shown." />
		</method>

		<method name="ShowHintColored" description="Shows a hint message in the user interface in a certain color.">
			<param name="Hint" type="string" pass="in" description="Hint to show." />
			<param name="TimeoutInMS" type="uint32" pass="in" description="How many milliseconds the snackbar should be shown." />
			<param name="Color" type="struct" class="ColorRGB" pass="in" description="Background color of hint." />
			<param name="FontColor" type="struct" class="ColorRGB" pass="in" description="Font color of hint." />
		</method>

		<method name="HideHint" description="Hides hint if any is displayed.">
		</method>

		<method name="ShowMessageDlg" description="Shows a message dialog in the user interface.">
			<param name="Caption" type="string" pass="in" description="Caption of the dialog" />
			<param name="Title" type="string" pass="in" description="Title of the dialog" />
			<param name="DialogType" type="enum" class="MessageDialogType" pass="in" description="Which dialog type shall be shown." />
			<param name="YesEvent" type="string" pass="in" description="Event to be called when clicked yes or ok." />
			<param name="NoEvent" type="string" pass="in" description="Event to be called when clicked no." />
			<param name="CancelEvent" type="string" pass="in" description="Event to be called when dialog is closed or cancel is pressed." />
			<param name="DialogUUID" type="string" pass="return" description="Dialog UUID. Will be set as sender for triggered events." />
		</method>

		<method name="RetrieveEventSender" description="returns name of the UI control that triggered the event.">
			<param name="SenderName" type="string" pass="return" description="Name of the sender element." />
		</method>

		<method name="RetrieveEventSenderUUID" description="returns uuid of the UI control that triggered the event.">
			<param name="SenderUUID" type="string" pass="return" description="Name of the sender uuid." />
		</method>
	  
		<method name="PrepareSignal" description="prepares a signal object to trigger later.">
			<param name="MachineInstance" type="string" pass="in" description="State machine instance name" />
			<param name="SignalName" type="string" pass="in" description="Name Of signal channel." />
			<param name="SignalInstance" type="class" class="SignalTrigger" pass="return" description="Signal trigger object." />
		</method>		
	  		
		<method name="GetMachineState" description="Retrieves the machine state">
			<param name="MachineInstance" type="string" pass="in" description="State machine instance name" />
			<param name="StateName" type="string" pass="return" description="Name of current state" />
		</method>

		<method name="LogMessage" description="logs a string as message">
			<param name="LogString" type="string" pass="in" description="String to Log" />
		</method>

		<method name="LogWarning" description="logs a string as warning">
			<param name="LogString" type="string" pass="in" description="String to Log" />
		</method>

		<method name="LogInfo" description="logs a string as info">
			<param name="LogString" type="string" pass="in" description="String to Log" />
		</method>

								
		<method name="GetMachineParameter" description="returns a string parameter of a state machine">
			<param name="MachineInstance" type="string" pass="in" description="State machine instance name" />
			<param name="ParameterGroup" type="string" pass="in" description="Parameter Group" />
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Value" type="string" pass="return" description="Current Parameter Value" />
		</method>

		<method name="GetMachineParameterAsUUID" description="returns a uuid parameter of a state machine">
			<param name="MachineInstance" type="string" pass="in" description="State machine instance name" />
			<param name="ParameterGroup" type="string" pass="in" description="Parameter Group" />
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Value" type="string" pass="return" description="Current Parameter Value" />
		</method>

		<method name="GetMachineParameterAsDouble" description="returns a double parameter of a state machine">
			<param name="MachineInstance" type="string" pass="in" description="State machine instance name" />
			<param name="ParameterGroup" type="string" pass="in" description="Parameter Group" />
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Value" type="double" pass="return" description="Current Parameter Value" />
		</method>

		<method name="GetMachineParameterAsInteger" description="returns an int parameter of a state machine">
			<param name="MachineInstance" type="string" pass="in" description="State machine instance name" />
			<param name="ParameterGroup" type="string" pass="in" description="Parameter Group" />
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Value" type="int64" pass="return" description="Current Parameter Value" />
		</method>

		<method name="GetMachineParameterAsBool" description="returns a bool parameter of a state machine">
			<param name="MachineInstance" type="string" pass="in" description="State machine instance name" />
			<param name="ParameterGroup" type="string" pass="in" description="Parameter Group" />
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Value" type="bool" pass="return" description="Current Parameter Value" />
		</method>



		<method name="GetUIProperty" description="returns a string property of a UI element on the client">
			<param name="ElementPath" type="string" pass="in" description="Path of UI Element. Fails if element does not exist." />
			<param name="PropertyName" type="string" pass="in" description="Property name. Fails if property does not exist." />
			<param name="Value" type="string" pass="return" description="Current property Value" />
		</method>

		<method name="GetUIPropertyAsUUID" description="returns a uuid variable of a UI element on the client">
			<param name="ElementPath" type="string" pass="in" description="Path of UI Element. Fails if element does not exist." />
			<param name="PropertyName" type="string" pass="in" description="Property name. Fails if property does not exist." />
			<param name="Value" type="string" pass="return" description="Current property Value" />
		</method>

		<method name="GetUIPropertyAsDouble" description="returns a double variable of a UI element on the client">
			<param name="ElementPath" type="string" pass="in" description="Path of UI Element. Fails if element does not exist." />
			<param name="PropertyName" type="string" pass="in" description="Property name. Fails if property does not exist." />
			<param name="Value" type="double" pass="return" description="Current property Value" />
		</method>

		<method name="GetUIPropertyAsInteger" description="returns a integer variable of a UI element on the client">
			<param name="ElementPath" type="string" pass="in" description="Path of UI Element. Fails if element does not exist." />
			<param name="PropertyName" type="string" pass="in" description="Property name. Fails if property does not exist." />
			<param name="Value" type="int64" pass="return" description="Current property Value" />
		</method>

		<method name="GetUIPropertyAsBool" description="returns a integer variable of a UI element on the client">
			<param name="ElementPath" type="string" pass="in" description="Path of UI Element. Fails if element does not exist." />
			<param name="PropertyName" type="string" pass="in" description="Property name. Fails if property does not exist." />
			<param name="Value" type="bool" pass="return" description="Current property Value" />
		</method>


		<method name="SetUIProperty" description="sets a string property of a UI element on the client.">
			<param name="ElementPath" type="string" pass="in" description="Path of UI Element. Fails if element does not exist." />
			<param name="PropertyName" type="string" pass="in" description="Property name. Fails if property does not exist or is readonly." />
			<param name="Value" type="string" pass="in" description="New property Value" />
		</method>

		<method name="SetUIPropertyAsUUID" description="sets a uuid property of a UI element on the client.">
			<param name="ElementPath" type="string" pass="in" description="Path of UI Element. Fails if element does not exist." />
			<param name="PropertyName" type="string" pass="in" description="Property name. Fails if property does not exist or is readonly." />
			<param name="Value" type="string" pass="in" description="New property Value" />
		</method>

		<method name="SetUIPropertyAsDouble" description="sets a double property of a UI element on the client.">
			<param name="ElementPath" type="string" pass="in" description="Path of UI Element. Fails if element does not exist." />
			<param name="PropertyName" type="string" pass="in" description="Property name. Fails if property does not exist or is readonly." />
			<param name="Value" type="double" pass="in" description="New property Value" />
		</method>

		<method name="SetUIPropertyAsInteger" description="sets a integer property of a UI element on the client.">
			<param name="ElementPath" type="string" pass="in" description="Path of UI Element. Fails if element does not exist." />
			<param name="PropertyName" type="string" pass="in" description="Property name. Fails if property does not exist or is readonly." />
			<param name="Value" type="int64" pass="in" description="New property Value" />
		</method>

		<method name="SetUIPropertyAsBool" description="sets a bool property of a UI element on the client.">
			<param name="ElementPath" type="string" pass="in" description="Path of UI Element. Fails if element does not exist." />
			<param name="PropertyName" type="string" pass="in" description="Property name. Fails if property does not exist or is readonly." />
			<param name="Value" type="bool" pass="in" description="New property Value" />
		</method>
		
		<method name="CreateEmptyImage" description="creates an empty image object.">
			<param name="PixelSizeX" type="uint32" pass="in" description="Pixel size in X. MUST be positive." />
			<param name="PixelSizeY" type="uint32" pass="in" description="Pixel size in Y. MUST be positive." />
			<param name="DPIValueX" type="double" pass="in" description="DPI Value in X. MUST be positive." />
			<param name="DPIValueY" type="double" pass="in" description="DPI Value in Y. MUST be positive." />
			<param name="PixelFormat" type="enum" class="ImagePixelFormat" pass="in" description="Pixel format to use." />
			<param name="ImageDataInstance" type="class" class="ImageData" pass="return" description="Empty image instance." />
		</method>		
		
		<method name="LoadPNGImage" description="creates an image object from a PNG data stream.">
			<param name="PNGData" type="basicarray" class="uint8" pass="in" description="DPI Value in X. MUST be positive." />
			<param name="DPIValueX" type="double" pass="in" description="DPI Value in X. MUST be positive." />
			<param name="DPIValueY" type="double" pass="in" description="DPI Value in Y. MUST be positive." />
			<param name="PixelFormat" type="enum" class="ImagePixelFormat" pass="in" description="Pixel format to use. Might lose color and alpha information." />
			<param name="ImageDataInstance" type="class" class="ImageData" pass="return" description="Image instance containing the PNG image." />
		</method>

		<method name="GetGlobalTimerInMilliseconds" description="Returns the global timer in milliseconds.">
			<param name="TimerValue" type="uint64" pass="return" description="Timer value in Milliseconds" />
		</method>
		
		<method name="GetTestEnvironment" description="Returns a test environment instance.">
			<param name="TestEnvironment" type="class" class="TestEnvironment" pass="return" description="Test Environment Instance" />
		</method>
		
		
	</class>



		
	<global baseclassname="Base" 
		stringoutclassname="Base" releasemethod="ReleaseInstance" acquiremethod="AcquireInstance" versionmethod="GetVersion" errormethod="GetLastError" symbollookupmethod="GetSymbolLookupMethod">
		
		<method name="GetVersion" description = "retrieves the binary version of this library.">
			<param name="Major" type="uint32" pass="out" description="returns the major version of this library" />
			<param name="Minor" type="uint32" pass="out" description="returns the minor version of this library" />
			<param name="Micro" type="uint32" pass="out" description="returns the micro version of this library" />
		</method>
		<method name="GetLastError" description="Returns the last error recorded on this object">
			<param name="Instance" type="class" class="Base" pass="in" description="Instance Handle" />
			<param name="ErrorMessage" type="string" pass="out" description="Message of the last error" />
			<param name="HasError" type="bool" pass="return" description="Is there a last error to query" />
		</method>
		<method name="ReleaseInstance" description="Releases shared ownership of an Instance">
			<param name="Instance" type="class" class="Base" pass="in" description="Instance Handle" />
		</method>
		<method name="AcquireInstance" description="Acquires shared ownership of an Instance">
			<param name="Instance" type="class" class="Base" pass="in" description="Instance Handle" />
		</method>
		<method name="GetSymbolLookupMethod" description="Returns the address of the SymbolLookupMethod">
			<param name="SymbolLookupMethod" type="pointer" pass="return" description="Address of the SymbolAddressMethod" />
		</method>		
		
	</global>
	
	
</component>

