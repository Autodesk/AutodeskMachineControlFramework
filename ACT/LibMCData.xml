<?xml version="1.0" encoding="UTF-8"?>
<component xmlns="http://schemas.autodesk.com/netfabb/automaticcomponenttoolkit/2018" 
	libraryname="Machine Control data model library" namespace="LibMCData" copyright="Autodesk Inc." year="2020" basename="libmcdata"
	version="1.0.0">
	<license>
		<line value="All rights reserved." />
		<line value="" />
		<line value="Redistribution and use in source and binary forms, with or without" />
		<line value="modification, are permitted provided that the following conditions are met:" />
		<line value="    * Redistributions of source code must retain the above copyright" />
		<line value="      notice, this list of conditions and the following disclaimer." />
		<line value="    * Redistributions in binary form must reproduce the above copyright" />
		<line value="      notice, this list of conditions and the following disclaimer in the" />
		<line value="      documentation and/or other materials provided with the distribution." />
		<line value="    * Neither the name of the Autodesk Inc. nor the" />
		<line value="      names of its contributors may be used to endorse or promote products" />
		<line value="      derived from this software without specific prior written permission." />
		<line value="" />
		<line value="THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND" />
		<line value="ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED" />
		<line value="WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE" />
		<line value="DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY" />
		<line value="DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES" />
		<line value="(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;" />
		<line value="LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND" />
		<line value="ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT" />
		<line value="(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS" />
		<line value="SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." />
		<line value="" />
	</license>
	
	<bindings>
		<binding language="CppDynamic" indentation="tabs" />
		<binding language="Go" indentation="tabs" />		
	</bindings>
	<implementations>
		<implementation language="Cpp" indentation="tabs"/>
	</implementations>
	
	<errors>
		<error name="NOTIMPLEMENTED" code="1" description="functionality not implemented" />
		<error name="INVALIDPARAM" code="2" description="an invalid parameter was passed" />
		<error name="INVALIDCAST" code="3" description="a type cast failed" />
		<error name="BUFFERTOOSMALL" code="4" description="a provided buffer is too small" />
		<error name="GENERICEXCEPTION" code="5" description="a generic exception occurred" />
		<error name="COULDNOTLOADLIBRARY" code="6" description="the library could not be loaded" />
		<error name="COULDNOTFINDLIBRARYEXPORT" code="7" description="a required exported symbol could not be found in the library" />
		<error name="INCOMPATIBLEBINARYVERSION" code="8" description="the version of the binary interface does not match the bindings interface" />
		
		<error name="COULDNOTPARSECONFIGURATION" code="9" description="could not parse configuration" />
		<error name="DUPLICATESTATENAME" code="10" description="duplicate state name" />
		<error name="STATENOTFOUND" code="11" description="state not found" />
		<error name="DUPLICATEOUTSTATE" code="12" description="duplicate out state" />				
		<error name="MISSINGMACHINEDEFINITION" code="13" description="missing machine definition" />
		<error name="MISSINGINSTANCENAME" code="14" description="missing instance name" />				
		<error name="DUPLICATEMACHINEINSTANCE" code="15" description="duplicate machine instance" />
		<error name="MISSINGXMLSCHEMA" code="16" description="missing XML schema" />
		<error name="INVALIDXMLSCHEMA" code="17" description="invalid XML schema" />
		<error name="MISSINGSTATENAME" code="18" description="missing state name" />
		<error name="MISSINGOUTSTATETARGET" code="19" description="missing outstate target" />
		<error name="INVALIDOUTSTATETARGET" code="20" description="invalid outstate target" />
		
		<error name="NOINITSTATE" code="21" description="no init state" />
		<error name="NOFAILEDSTATE" code="22" description="no failed state" />
		<error name="INITSTATENOTFOUND" code="23" description="init state not found" />
		<error name="FAILEDSTATENOTFOUND" code="24" description="failed state not found" />
		<error name="MISSINGINITSTATE" code="25" description="missing init state" />
		<error name="MISSINGFAILEDSTATE" code="26" description="missing failed state" />		
		<error name="MISSINGPLUGINNAME" code="27" description="missing plugin name" />
		<error name="EMPTYINITSTATE" code="28" description="empty init state" />
		<error name="EMPTYFAILEDSTATE" code="29" description="empty failed state" />
		<error name="EMPTYPLUGINNAME" code="30" description="empty plugin name" />		
		<error name="COULDNOTCREATESTATEFACTORY" code="31" description="could not create state factory" />		
		<error name="INVALIDSTATENAME" code="32" description="invalid state name" />
		<error name="COULDNOTCREATESTATE" code="33" description="could not create state" />		
		<error name="COULDNOTINITIALIZEFACTORY" code="34" description="could not initialize factory" />		
		<error name="COULDNOTFINALIZEFACTORY" code="35" description="could not finalize factory" />		
		<error name="COULDNOTLOADPLUGIN" code="36" description="could not load plugin" />		
		<error name="NOCURRENTSTATE" code="37" description="no current state" />		
		<error name="NOPLUGINSTATE" code="38" description="no plugin state" />						
		<error name="COULDNOTEXECUTEPLUGIN" code="39" description="could not execute plugin" />
		<error name="TOOMANYMACHINEINSTANCES" code="40" description="too many machine instances" />						
		<error name="INVALIDINDEX" code="41" description="invalid index" />						

		<error name="NOOUTSTATEGIVEN" code="42" description="no new outstate has been given" />
		<error name="INVALIDOUTSTATEGIVEN" code="43" description="invalid outstate has been given" />
		<error name="INVALIDREPEATDELAY" code="44" description="invalid repeat delay" />
		<error name="INVALIDEXECUTIONDELAY" code="45" description="invalid execution delay" />
		<error name="MISSINGREPEATDELAY" code="46" description="missing repeat delay" />
		
		<error name="THREADISRUNNING" code="47" description="thread is running" />
		<error name="THREADISNOTRUNNING" code="48" description="thread is not running" />

		<error name="DUPLICATESIGNAL" code="49" description="duplicate signal" />
		<error name="INVALIDSIGNALNAME" code="50" description="invalid signal name" />
		<error name="MISSINGSIGNALNAME" code="51" description="missing signal name" />
		
		<error name="MISSINGSERVERNODE" code="52" description="missing server node" />
		<error name="MISSINGHOSTNAME" code="53" description="missing host name" />
		<error name="MISSINGPORT" code="54" description="missing port" />
		<error name="UUIDGENERATIONFAILED" code="55" description="uuid generation failed" />
		<error name="INVALIDBUFFERSIZE" code="56" description="invalid buffer size" />
		<error name="COULDNOTCONVERTTOUTF8" code="57" description="could not convert to utf8" />

		<error name="NOCOLUMNAVAILABLE" code="58" description="no column available" />
		<error name="INVALIDTEXTCOLUMN" code="59" description="invalid text column" />
		<error name="INVALIDCOLUMNTYPE" code="60" description="invalid column type" />
		
		<error name="TOOMANYREQUESTEDLOGS" code="61" description="too many requested logs" />
		<error name="MISSINGINSTANCEDESCRIPTION" code="62" description="missing instance description" />
		
		<error name="DUPLICATEPARAMETERGROUPNAME" code="63" description="duplicate parameter group name" />
		<error name="MISSINGPARAMETERGROUPNAME" code="64" description="missing parameter group name" />
		<error name="EMPTYPARAMETERGROUPNAME" code="65" description="empty parameter group name" />
		<error name="MISSINGPARAMETERGROUPDESCRIPTION" code="66" description="missing parameter group description" />
		<error name="EMPTYPARAMETERGROUPDESCRIPTION" code="67" description="empty parameter group description" />
		<error name="TOOMANYPARAMETERS" code="68" description="too many parameters" />
		<error name="TOOMANYPARAMETERGROUPS" code="69" description="too many parameter groups" />
		<error name="DUPLICATEPARAMETERNAME" code="70" description="duplicate parameter name" />
		<error name="MISSINGPARAMETERNAME" code="71" description="missing parameter name" />
		<error name="EMPTYPARAMETERNAME" code="72" description="empty parameter name" />
		<error name="MISSINGPARAMETERDESCRIPTION" code="73" description="missing parameter description" />
		<error name="EMPTYPARAMETERDESCRIPTION" code="74" description="empty parameter description" />
		<error name="PARAMETERNOTFOUND" code="75" description="parameter not found" />
		<error name="MISSINGPARAMETERDEFAULTVALUE" code="76" description="missing parameter default value" />
		
		<error name="MISSINGDATACONFIGNODE" code="77" description="missing data config node" />
		<error name="MISSINGDIRECTORY" code="78" description="missing directory" />
		<error name="MISSINGDATABASETYPE" code="79" description="missing database type" />
		<error name="MISSINGSQLITEINFO" code="80" description="missing sqlite info" />
		<error name="UNKNOWNDATABASETYPE" code="81" description="unknown database type" />		
		<error name="STORAGENOTINITIALISED" code="82" description="storage not initialised" />
		<error name="COULDNOTCONVERTTOUTF16" code="83" description="could not convert to utf 16" />
		
		<error name="COULDNOTCREATEFILE" code="84" description="could not create file" />
		<error name="COULDNOTSEEKSTREAM" code="85" description="could not seek stream" />
		<error name="COULDNOTGETSTREAMPOSITION" code="86" description="could not get stream position" />
		<error name="COULDNOTWRITESTREAM" code="87" description="could not write stream" />		
		<error name="INVALIDDATABASEMIGRATION" code="88" description="invalid database migration" />
		<error name="INTERNALERROR" code="89" description="internal error" />		
		<error name="COULDNOTSTORECONTENTSTREAM" code="90" description="could not store content stream" />
		<error name="DATABASENOTINITIALISED" code="91" description="database not initialised" />		
		<error name="PARAMETERGROUPNOTFOUND" code="92" description="parameter group not found" />		
		
		<error name="SIGNALNOTFOUND" code="93" description="signal not found" />		
		<error name="STATEMACHINENOTFOUND" code="94" description="state machine not found." />
		<error name="MISSINGPARAMETERTYPE" code="95" description="missing parameter type." />
		<error name="INVALIDPARAMETERTYPE" code="96" description="invalid parameter type." />
		<error name="COULDNOTPARSEJSON" code="97" description="could not parse json." />
		<error name="INVALIDJSONFORMAT" code="98" description="invalid json format." />
		
		<error name="URLNOTFOUND" code="99" description="url not found." />
		<error name="GENERICBADREQUEST" code="100" description="generic bad request." />
		
		
		
		<error name="SQLITE_ERROR" code="101" description="SQLite: Generic Error" />
		<error name="SQLITE_INTERNAL" code="102" description="SQLite: Internal logic error in SQLite" />
		<error name="SQLITE_PERM" code="103" description="SQLite: Access permission denied" />
		<error name="SQLITE_ABORT" code="104" description="SQLite: Callback routine requested an abort" />
		<error name="SQLITE_BUSY" code="105" description="SQLite: The database file is locked" />
		<error name="SQLITE_LOCKED" code="106" description="SQLite: A table in the database is locked" />
		<error name="SQLITE_NOMEM" code="107" description="SQLite: A malloc failed" />
		<error name="SQLITE_READONLY" code="108" description="SQLite: Attempt to write a readonly database" />
		<error name="SQLITE_INTERRUPT" code="109" description="SQLite: Operation terminated by sqlite3_interrupt" />
		<error name="SQLITE_IOERR" code="110" description="SQLite: Some kind of disk I/O error occurred" />
		<error name="SQLITE_CORRUPT" code="111" description="SQLite: The database disk image is malformed" />
		<error name="SQLITE_NOTFOUND" code="112" description="SQLite: Unknown opcode in sqlite3_file_control" />
		<error name="SQLITE_FULL" code="113" description="SQLite: Insertion failed because database is full" />
		<error name="SQLITE_CANTOPEN" code="114" description="SQLite: Unable to open the database file" />
		<error name="SQLITE_PROTOCOL" code="115" description="SQLite: Database lock protocol error" />
		<error name="SQLITE_SCHEMA" code="117" description="SQLite: The database schema changed" />
		<error name="SQLITE_TOOBIG" code="118" description="SQLite: String or BLOB exceeds size limit" />
		<error name="SQLITE_CONSTRAINT" code="119" description="SQLite: Abort due to constraint violation" />
		<error name="SQLITE_MISMATCH" code="120" description="SQLite: Data type mismatch" />
		<error name="SQLITE_MISUSE" code="121" description="SQLite: Library used incorrectly" />
		<error name="SQLITE_NOLFS" code="122" description="SQLite: Uses OS features not supported on host" />
		<error name="SQLITE_AUTH" code="123" description="SQLite: Authorization denied" />
		<error name="SQLITE_RANGE" code="125" description="SQLite: 2nd parameter to sqlite3_bind out of range" />
		<error name="SQLITE_NOTADB" code="126" description="SQLite: File opened that is not a database file" />
		<error name="SQLITE_NOTICE" code="127" description="SQLite: Notifications from sqlite3_log" />
		<error name="SQLITE_WARNING" code="128" description="SQLite: Warnings from sqlite3_log" />
		<error name="SQLITE_OTHER" code="130" description="SQLite: Other Error" />		
		<error name="SQLITE_TOOMANYRESULTROWS" code="131" description="too many result rows" />
		
		<error name="COULDNOTREADZIPFILE" code="200" description="Could not read ZIP file" />		
		<error name="COULDNOTOPENZIPFILE" code="201" description="Could not open ZIP file" />		
		<error name="COULDNOTGETZIPENTRIES" code="202" description="Could not get ZIP file entries" />		
		<error name="ZIPENTRYNOTFOUND" code="203" description="ZIP Entry not found" />		
		<error name="COULDNOTSTATZIPENTRY" code="204" description="Could not stat ZIP entry" />		
		<error name="COULDNOTOPENZIPENTRY" code="205" description="Could not open ZIP entry" />		
		<error name="COULDNOTREADZIPSTREAM" code="206" description="Could not read ZIP stream" />		
		<error name="COULDNOTREADFULLZIPDATA" code="207" description="Could not read full zip data" />		
		
		<error name="COULDNOTFINDRESOURCEINDEX" code="208" description="Could not find resource index." />		
		<error name="COULDNOTPARSERESOURCEINDEX" code="209" description="Could not parse resource index." />
		<error name="EMPTYRESOURCEINDEX" code="210" description="Empty resource index." />
		<error name="MISSINGRESOURCEINDEX" code="211" description="Missing resource index." />
		
		<error name="MISSINGRESOURCENAME" code="212" description="Missing resource name." />
		<error name="MISSINGRESOURCEFILENAME" code="213" description="Missing resource filename." />
		<error name="MISSINGRESOURCESIZE" code="214" description="Missing resource size." />
		<error name="MISSINGRESOURCECONTENTTYPE" code="215" description="Missing resource content type." />
		
		<error name="DRIVERALREADYREGISTERED" code="216" description="Driver already registered." />
		<error name="DRIVERNOTFOUND" code="217" description="Driver not found." />
		<error name="MISSINGDRIVERNAME" code="218" description="Missing driver name." />
		<error name="MISSINGDRIVERTYPE" code="219" description="Missing driver type." />
		<error name="MISSINGDRIVERLIBRARY" code="220" description="Missing driver library." />		
		
		<error name="DRIVERALREADYRESERVED" code="221" description="Driver has already been reserved by an instance." />		
		<error name="LIBRARYPATHNOTFOUND" code="222" description="Library path not found." />
		
		<error name="TOOLPATHENTITYNOTLOADED" code="223" description="Toolpath entity not loaded" />
		<error name="TOOLPATHENTITYREFERENCEERROR" code="224" description="Toolpath entity reference error" />
		<error name="TOOLPATHENTITYINVALIDFILE" code="225" description="Toolpath entity is invalid" />
		<error name="NO3MFLIBRARY" code="226" description="No 3MF Library specified" />
		
		<error name="INVALIDPOINTCOUNT" code="227" description="Invalid point count" />
		<error name="DUPLICATEJOBUUID" code="228" description="Duplicate job uuid" />
		<error name="INVALIDJOBSTATUS" code="229" description="Invalid job status" />
		<error name="INVALIDSTREAMCONTEXT" code="230" description="Invalid stream context" />		
		<error name="JOBUUIDNOTFOUND" code="231" description="Job uuid not found" />
		<error name="INVALIDJOBNAME" code="232" description="Invalid job name" />
		<error name="INVALIDJOBTIMESTAMP" code="233" description="Invalid job timestamp" />
		<error name="INVALIDUSERID" code="234" description="Invalid job name" />		
		<error name="INVALIDSTORAGECALLBACKSIGNATURE" code="235" description="Invalid storage callback signature" />
		<error name="INVALIDSTORAGECALLBACKSTREAM" code="236" description="Invalid storage callback stream" />
		<error name="INVALIDSTORAGEPATH" code="237" description="Invalid storage path" />		
		<error name="STORAGESTREAMNOTFOUND" code="238" description="Storage Stream not found" />
		<error name="DUPLICATESTORAGESTREAM" code="239" description="Duplicate Storage Stream" />
		<error name="INVALIDPARTIALUPLOAD" code="240" description="Invalid Partial Upload" />
		<error name="PARTIALUPLOADNOTFINISHED" code="241" description="Partial Upload not finished" />
		<error name="APIREQUESTNOTHANDLED" code="242" description="API Request not handled" />
		<error name="APIREQUESTALREADYHANDLED" code="243" description="API Request already handled" />
		<error name="INVALIDAPIREQUESTTYPE" code="244" description="Invalid API Request type" />
		<error name="INVALIDUPLOADSTREAM" code="245" description="Invalid Upload Stream" />
		<error name="COULDNOTPARSEJSONREQUEST" code="246" description="Could not parse JSON request" />
		
		<error name="INVALIDCONTEXTUUID" code="247" description="Invalid Context UUID" />
		<error name="INVALIDUPLOADNAME" code="248" description="Invalid Upload Name" />
		<error name="INVALIDMIMETYPE" code="249" description="Invalid Mime Type" />
		<error name="INVALIDSTREAMSIZE" code="250" description="Invalid Stream Size" />
		<error name="INVALIDSHA256SUM" code="251" description="Invalid SHA256 Sum" />
		<error name="INVALIDSTREAMUUID" code="252" description="Invalid Stream UUID" />
		<error name="INVALIDFIELDNAME" code="253" description="Invalid field name" />		
		<error name="UPLOADSIZEMISMATCH" code="254" description="Upload size mismatch" />
		<error name="CONTENTTYPENOTACCEPTED" code="255" description="Content type not accepted" />
		<error name="NOCURRENTUPLOAD" code="256" description="No current upload" />		
		<error name="UPLOADCHECKSUMMISMATCH" code="257" description="Upload checksum mismatch" />
		<error name="INVALIDSTORAGESTREAMSTATUS" code="258" description="Invalid storage stream status" />
		<error name="CONTEXTUUIDNOTACCEPTED" code="259" description="Context uuid not accepted" />
		<error name="INVALIDBUILDUUID" code="260" description="Invalid build uuid" />
		
		<error name="MISSINGTHREADCOUNT" code="261" description="Missing thread count" />
		<error name="INVALIDTHREADCOUNT" code="262" description="Invalid thread count" />		
		<error name="COULDNOTUPDATEBUILDSTATUS" code="263" description="Could not update build status" />							
		<error name="INVALIDITERATOR" code="264" description="Invalid iterator" />
		<error name="INVALIDDATATYPE" code="265" description="Invalid data type" />
		
		<error name="COULDNOTSENDSIGNAL" code="266" description="Could not send signal" />
		<error name="MISSINGSIGNALPARAMETER" code="267" description="Missing signal parameter" />
		<error name="NOUSERINTERFACEDEFINITION" code="268" description="No user interface definition" />
		
		<error name="MISSINGAPPNAME" code="269" description="Missing app name" />
		<error name="MISSINGCOPYRIGHT" code="270" description="Missing copyright" />
		<error name="MISSINGMAINPAGE" code="271" description="Missing main page" />
		<error name="MISSINGMENUITEMID" code="272" description="Missing menu item id" />
		<error name="MISSINGMENUITEMICON" code="273" description="Missing menu item icon" />
		<error name="MISSINGMENUITEMCAPTION" code="274" description="Missing menu item caption" />
		<error name="MISSINGTARGETPAGE" code="275" description="Missing menu item target page" />
		<error name="MISSINGMENUNODE" code="276" description="Missing menu node" />
		<error name="MISSINGTOOLBARNODE" code="277" description="Missing toolbar node" />
		<error name="MISSINGTOOLBARITEMID" code="278" description="Missing toolbar item id" />
		<error name="MISSINGTOOLBARITEMICON" code="279" description="Missing toolbar item icon" />
		<error name="MISSINGTOOLBARITEMCAPTION" code="280" description="Missing toolbar item caption" />
		<error name="MISSINGSERVICESNODE" code="281" description="Missing services node" />		

		<error name="INVALIDSESSIONUUID" code="282" description="Invalid session UUID" />
		<error name="INVALIDSESSIONKEY" code="283" description="Invalid session Key" />
		<error name="SESSIONNOTAUTHORIZED" code="284" description="Session not authorized" />
		<error name="INVALIDUSERNAME" code="285" description="Invalid user name" />
		<error name="INVALIDPASSWORD" code="286" description="Invalid password" />
		<error name="INVALIDAUTHORIZATION" code="287" description="Invalid Authorization" />
		<error name="USERALREADYAUTHORIZED" code="288" description="User already authorized" />
		<error name="INVALIDSESSIONTOKEN" code="289" description="Invalid session token" />	
		<error name="INVALIDCLIENTKEY" code="290" description="Invalid client key" />		
		<error name="INVALIDLOGIN" code="291" description="Invalid login credentials" />
		<error name="DUPLICATEPAGE" code="292" description="Duplicate page" />
		<error name="PAGENOTFOUND" code="293" description="Page not found" />
		<error name="MISSINGPAGENAME" code="294" description="Missing page name" />
		<error name="INVALIDPAGENAME" code="295" description="Invalid page name" />
		<error name="MODULENOTFOUND" code="296" description="Module not found" />
		<error name="DUPLICATEMODULE" code="297" description="Duplicate module" />
		<error name="INVALIDMODULENAME" code="298" description="Invalid module name" />
		<error name="INVALIDMODULETYPE" code="299" description="Invalid module type" />	
		<error name="INVALIDHEADLINE" code="300" description="Invalid headline" />
		<error name="USERNOTFOUND" code="301" description="User not found" />
		<error name="STREAMISNOTIMAGE" code="302" description="Stream is not image" />		
		<error name="TOOMANYCONTENTPARAMETERS" code="303" description="Too many content parameters" />
		<error name="MISSINGCONTENTSTATEMACHINENAME" code="304" description="Missing content state machine name" />
		<error name="MISSINGCONTENTGROUPNAME" code="305" description="Missing content group name" />
		<error name="INVALIDENTRIESPERPAGE" code="306" description="Invalid entries per page" />
		<error name="MODULEITEMNOTFOUND" code="307" description="Module item not found" />
		<error name="DERIVEDPARAMETERSREADONLY" code="308" description="Derived parameters are read only." />
		<error name="TOOMANYJOURNALVARIABLES" code="309" description="Too many journal variables" />
		<error name="JOURNALISNOTINITIALISING" code="310" description="Too many journal variables" />
		<error name="JOURNALISNOTRECORDING" code="311" description="Too many journal variables" />
		<error name="INVALIDVARIABLETYPE" code="312" description="Invalid variable type" />
		<error name="INVALIDVARIABLEUNITS" code="313" description="Invalid variable units" />
		<error name="UNITSHAVEALREADYBEENSET" code="314" description="Units have already been set" />
		<error name="UNITSHAVENOTBEENSET" code="315" description="Units have not been set" />
		<error name="INVALIDTIMESTAMP" code="316" description="Invalid time stamp" />
		<error name="NOCURRENTJOURNALCHUNK" code="317" description="No current journal chunk" />
		<error name="DUPLICATEJOURNALID" code="318" description="Duplicate journal id" />		
		<error name="RESOURCEENTRYNOTFOUND" code="319" description="Resource entry not found" />
		<error name="NOCORERESOURCEPACKAGE" code="320" description="No core resource package" />
		<error name="INVALIDASPECTRATIO" code="321" description="Invalid aspect ratio" />
		<error name="MISSINGLOGORESOURCE" code="322" description="Missing logo resource" />
		<error name="NOUSERINTERFACEPLUGIN" code="323" description="No user interface plugin" />
		<error name="COULDNOTLOADUILIBRARY" code="324" description="Could not load UI library" />
		<error name="EVENTNAMENOTFOUND" code="325" description="Event name not found" />
		<error name="INVALIDEVENTSENDER" code="326" description="Invalid event context" />
		<error name="INVALIDEVENTCONTEXT" code="327" description="Invalid event sender" />
		<error name="INVALIDLAYERINDEX" code="328" description="Invalid layer index" />
		<error name="TEMPBASEPATHEMPTY" code="329" description="Empty base path for temporary files" />
		<error name="BUILDJOBDATANOTFOUND" code="330" description="Build job data not found" />
		<error name="INVALIDNAMESTRING" code="331" description="Invalid name string" />
		<error name="NAMESTRINGMISMATCH" code="332" description="Name string mismatch" />
		<error name="DATATYPEMISMATCH" code="333" description="Datatype mismatch" />				
		<error name="COULDNOTFINDLOGENTRY" code="334" description="Could not find log entry" />			

		<error name="NOLOGCALLBACK" code="335" description="No log callback" />			
		<error name="EMPTYUSERNAME" code="336" description="Empty user name" />			
		<error name="EMPTYUSERUUID" code="337" description="Empty user UUID" />			
		<error name="USERNOTUNIQUE" code="338" description="User not unique" />
		
		<error name="EMPTYUSERROLE" code="339" description="Empty user role" />
		<error name="EMPTYUSERSALT" code="340" description="Empty user salt" />
		<error name="EMPTYUSERPASSWORD" code="341" description="Empty user password" />
		<error name="INVALIDUSERROLE" code="342" description="Invalid user role" />
		<error name="USERALREADYEXISTS" code="343" description="User already exists" />		
		<error name="INVALIDUSERLANGUAGE" code="344" description="Invalid user language" />
		<error name="COULDNOTUPDATEUSERLANGUAGE" code="345" description="Could not update user language" />
		<error name="COULDNOTUPDATEUSERROLE" code="346" description="Could not update user role" />
		<error name="COULDNOTUPDATEUSERDESCRIPTION" code="347" description="Could not update user description" />
		<error name="COULDNOTUPDATEUSERPASSWORD" code="348" description="Could not update user password" />
		<error name="INVALIDUSERINDEX" code="349" description="Invalid user index" />		
		<error name="INVALIDJOURNAL" code="350" description="Invalid journal" />
		
		<error name="EMPTYALERTIDENTIFIER" code="351" description="Empty alert identifier" />
		<error name="INVALIDALERTIDENTIFIER" code="352" description="Invalid alert identifier" />
		<error name="INVALIDALERTDESCRIPTIONIDENTIFIER" code="353" description="Invalid alert description identifier" />
		<error name="INVALIDALERTLEVEL" code="354" description="Invalid alert level" />
		<error name="ALERTNOTFOUND" code="355" description="Alert not found" />
		<error name="ALERTNOTACKNOWLEDGED" code="356" description="Alert has not been acknowledged." />		
		<error name="INVALIDSTORAGESTATE" code="357" description="Invalid storage state." />		
		<error name="STORAGEWRITERALREADYEXISTS" code="358" description="Storage writer already exists." />		
		<error name="STORAGEWRITERDOESNOTEXIST" code="359" description="Storage writer does not exist." />		
		<error name="STORAGESTREAMNOTPARTIAL" code="360" description="Storage stream is not partial." />		
		<error name="STORAGESTREAMNOTRANDOMACCESS" code="361" description="Storage stream is not random access." />				
		<error name="DOWNLOADTICKETNOTFOUND" code="362" description="Download ticket not found." />		
		<error name="EMPTYCLIENTFILENAME" code="363" description="Empty client file name." />		
		<error name="INVALIDCLIENTFILENAME" code="364" description="Invalid client file name." />		
										
	</errors>
	
		
	<struct name="JournalChunkVariableInfo">
		<member name="VariableIndex" type="uint32" />
		<member name="VariableType" type="uint32" />
		<member name="EntryStartIndex" type="uint32" />
		<member name="EntryCount" type="uint32" />
	</struct>

	<struct name="JournalChunkIntegerEntry">
		<member name="RelativeTimeStampInMicroseconds" type="uint32" />
		<member name="IntegerValue" type="int64" />
	</struct>

	<enum name="AlertLevel">
		<option name="FatalError" value="1"/>
		<option name="CriticalError" value="2"/>
		<option name="Warning" value="3"/>
		<option name="Message" value="4"/>
		<option name="Unknown" value="7"/>
	</enum>	

	<enum name="LogLevel">
		<option name="FatalError" value="1"/>
		<option name="CriticalError" value="2"/>
		<option name="Warning" value="3"/>
		<option name="Message" value="4"/>
		<option name="Info" value="5"/>
		<option name="Debug" value="6"/>
		<option name="Unknown" value="7"/>
	</enum>	
		
	<enum name="DataBaseType">
		<option name="Unknown" value="0"/>
		<option name="SqLite" value="1"/>
	</enum>	
	
	<functiontype name="LogCallback" description="A callback function for external logging systems">
		<param name="LogMessage" type="string" pass="in" description="Log message to be logged."/>
		<param name="SubSystem" type="string" pass="in" description="SubSystem of Log Message."/>
		<param name="LogLevel" type="enum" class="LogLevel" pass="in" description="Log Level to be used."/>
		<param name="Timestamp" type="string" pass="in" description="Timestamp of the log message."/>
		<param name="UserData" type="pointer" pass="in" description="Userdata that is passed to the callback function"/>
	</functiontype>
	

	<enum name="ParameterDataType">
		<option name="Unknown" value="0"/>
		<option name="String" value="1"/>
		<option name="UUID" value="2"/>
		<option name="Integer" value="3"/>
		<option name="Double" value="4"/>
		<option name="Bool" value="5"/>
	</enum>	
	
	<enum name="BuildJobStatus">
		<option name="Created" value="0"/>
		<option name="Validating" value="100"/>
		<option name="Validated" value="200"/>
		<option name="Archived" value="300"/>
		<option name="Deleted" value="400"/>
	</enum>	

	<enum name="BuildJobDataType">
		<option name="Unknown" value="0"/>
		<option name="Toolpath" value="1"/>
		<option name="PNGImage" value="2"/>
		<option name="JPEGImage" value="3"/>
		<option name="Thumbnail" value="4"/>
		<option name="Timeline" value="5"/>
		<option name="SVGImage" value="6"/>
		<option name="CustomBinaryData" value="100"/>
	</enum>		
	
	<functiontype name="StreamReadCallback" description="Callback to call for reading a data chunk">
		<param name="ByteData" type="pointer" pass="in" description="Pointer to a buffer to read data into"/>
		<param name="NumBytes" type="uint64" pass="in" description="Number of bytes to read"/>
		<param name="StreamHandle" type="pointer" pass="in" description="Handle of the stream to read."/>
		<param name="ErrorCode" type="uint32" pass="return" description="LibMCData return code (0 for success)"/>
	</functiontype>

	<functiontype name="StreamSeekCallback" description="Callback to call for seeking in the stream">
		<param name="Position" type="uint64" pass="in" description="Position in the stream to move to"/>
		<param name="StreamHandle" type="pointer" pass="in" description="Handle of the stream to read."/>
		<param name="ErrorCode" type="uint32" pass="return" description="LibMCData return code (0 for success)"/>
	</functiontype>

		
	<class name="Base">
	</class>


    <!-- The Iterator class is not thread safe and MUST ONLY be used in a single thread context... -->
 
	<class name="Iterator" parent="Base">
		<method name="MoveNext" description="Iterates to the next resource in the list.">
			<param name="HasNext" type="bool" pass="return" description="Iterates to the next resource in the list."/>
		</method>
		<method name="MovePrevious" description="Iterates to the previous resource in the list.">
			<param name="HasPrevious" type="bool" pass="return" description="Iterates to the previous resource in the list."/>
		</method>
		<method name="GetCurrent" description="Returns the resource the iterator points at.">
			<param name="CurrentInstance" type="handle" class="Base" pass="return" description="returns the resource instance."/>
		</method>
		<method name="Clone" description="Creates a new resource iterator with the same resource list.">
			<param name="OutIterator" type="handle" class="Iterator" pass="return" description="returns the cloned Iterator instance"/>
		</method>
		<method name="Count" description="Returns the number of resources the iterator captures.">
			<param name="Count" type="uint64" pass="return" description="returns the number of resources the iterator captures."/>
		</method>
	</class>

    <!-- The LogEntryList class is not thread safe and MUST ONLY be used in a single thread context... -->
	<class name="LogEntryList" parent="Base" description="List of retrieved log entries">
	
		<method name="Count" description="Returns the number of log entries in the list.">
			<param name="Count" type="uint32" pass="return" description="returns the number of retrieved log entries."/>
		</method>

		<method name="GetEntryByIndex" description="Returns a log entry in the list by its index.">
			<param name="Index" type="uint32" pass="in" description="Index of log entry, 0-based."/>
			<param name="ID" type="uint32" pass="out" description="ID of log entry."/>
			<param name="Message" type="string" pass="out" description="Log Message" />	
			<param name="SubSystem" type="string" pass="out" description="Sub System identifier" />	
			<param name="LogLevel" type="enum" class="LogLevel" pass="out" description="Log Level" />	
			<param name="Timestamp" type="string" pass="out" description="Timestamp in ISO8601 UTC format" />	
		</method>
		
		<method name="GetEntryByID" description="Returns a log entry in the list by its ID.">
			<param name="ID" type="uint32" pass="in" description="ID of log entry."/>
			<param name="Message" type="string" pass="out" description="Log Message" />	
			<param name="SubSystem" type="string" pass="out" description="Sub System identifier" />	
			<param name="LogLevel" type="enum" class="LogLevel" pass="out" description="Log Level" />	
			<param name="Timestamp" type="string" pass="out" description="Timestamp in ISO8601 UTC format" />	
		</method>

		<method name="HasEntry" description="Returns if a log entry in the list exists.">
			<param name="ID" type="uint32" pass="in" description="ID of log entry."/>
			<param name="Value" type="bool" pass="return" description="Returns if a list exists."/>
		</method>

	</class>

    <!-- The LogSession class is not thread safe and MUST ONLY be used in a single thread context... -->
	<class name="LogSession" parent="Base" description="Logging Instance">

		<method name="GetSessionUUID" description="retrieves the session UUID.">
			<param name="SessionUUID" type="string" pass="return" description="Session UUID" />	
		</method>	

		<method name="AddEntry" description="adds a new log entry.">
			<param name="Message" type="string" pass="in" description="Log Message" />	
			<param name="SubSystem" type="string" pass="in" description="Sub System identifier" />	
			<param name="LogLevel" type="enum" class="LogLevel" pass="in" description="Log Level" />	
			<param name="TimestampUTC" type="string" pass="in" description="Timestamp in ISO8601 UTC format" />	
		</method>	

		<method name="GetMaxLogEntryID" description="retrieves the maximum log entry ID in the log.">
			<param name="MaxLogID" type="uint32" pass="return" description="Log entry ID" />	
		</method>	

		<method name="RetrieveLogEntriesByID" description="retrieves an excerpt of the log.">
			<param name="MinLogID" type="uint32" pass="in" description="Minimum log entry ID to receive." />
			<param name="MaxLogID" type="uint32" pass="in" description="Maximum log entry ID to receive. MUST be between (MinLogID + 1) and (MinLogID + 65536)." />
			<param name="MinLogLevel" type="enum" class="LogLevel" pass="in" description="Minimum Log Level to return." />	
			<param name="LogEntryList" type="class" class="LogEntryList" pass="return" description="Log Entry List." />
		</method>	
						
	</class>


    <!-- The Alert class is not thread safe and MUST ONLY be used in a single thread context... -->
	<class name="Alert" parent="Base" description="Alert Instance. Snapshot of an alert at a certain time.">

		<method name="GetUUID" description="Returns the Alert UUID.">
			<param name="UUID" type="string" pass="return" description="Value." />	
		</method>	
		
		<method name="GetIdentifier" description="Returns the Alert Identifier.">
			<param name="Identifier" type="string" pass="return" description="Value." />	
		</method>	

		<method name="IsActive" description="Returns if the alert is actuve.">
			<param name="Active" type="bool" pass="return" description="Returns if the alert is active." />
		</method>

		<method name="GetLevel" description="Returns the Alert Level.">
			<param name="Level" type="enum" class="AlertLevel" pass="return" description="Value." />
		</method>	
		
		<method name="GetLevelString" description="Returns the Alert Level string.">
			<param name="LevelString" type="string" pass="return" description="Value." />
		</method>	
		
		<method name="GetDescription" description="Returns the Alert Description.">
			<param name="Description" type="string" pass="return" description="Value." />	
		</method>	
		
		<method name="GetDescriptionIdentifier" description="Returns the Alert DescriptionIdentifier.">
			<param name="DescriptionIdentifier" type="string" pass="return" description="Value." />	
		</method>	

		<method name="GetReadableContextInformation" description="Returns the Alert ReadableContextInformation.">
			<param name="ReadableContextInformation" type="string" pass="return" description="Value." />	
		</method>	

		<method name="GetNeedsAcknowledgement" description="Returns if the Alert needs acknowledgement.">
			<param name="NeedsAcknowledgement" type="bool" pass="return" description="Value." />	
		</method>	

		<method name="GetTimestampUTC" description="Returns the Alert Timestamp in UTC file format.">
			<param name="TimestampUTC" type="string" pass="return" description="Value." />	
		</method>	
		
		<method name="HasBeenAcknowledged" description="Checks if the alert has been acknowledged.">
			<param name="HasBeenAcknowledged" type="bool" pass="return" description="Flag if the alert has been acknowledged." />	
		</method>			
		
		<method name="GetAcknowledgementInformation" description="Returns details about the acknowledgement. Fails if the alert is not acknowledged.">
			<param name="UserUUID" type="string" pass="out" description="User who acknowledged the alert." />
			<param name="UserComment" type="string" pass="out" description="Comment of the acknowledgement." />
			<param name="AckTime" type="string" pass="out" description="Timestamp in ISO8601 UTC format." />
		</method>

		<method name="AcknowledgeForUser" description="Acknowledges an alert for a specific user and sets it inactive. ">
			<param name="UserUUID" type="string" pass="in" description="UUID of the user to acknowledge. Fails if user does not exist." />
			<param name="UserComment" type="string" pass="in" description="User comment to store. May be empty." />
			<param name="TimestampUTC" type="string" pass="in" description="Timestamp in UTC format." />
		</method>

		<method name="DeactivateAlert" description="Sets an alert inactive. It will not be marked as acknowledged by a certain user.">
		</method>
		
	</class>


    <!-- The AlertIterator class is not thread safe and MUST ONLY be used in a single thread context... -->
	<class name="AlertIterator" parent="Iterator">
		<method name="GetCurrentAlert" description="Returns the alert the iterator points at.">
			<param name="CurrentInstance" type="handle" class="Alert" pass="return" description="returns the Alert instance."/>
		</method>
	</class>


    <!-- The AlertSession class is not thread safe and MUST ONLY be used in a single thread context... -->
	<class name="AlertSession" parent="Base" description="Alert Session Instance">
	
		<method name="AddAlert" description="adds a new alert entry.">
			<param name="UUID" type="string" pass="in" description="Alert UUID" />	
			<param name="Identifier" type="string" pass="in" description="Alert Identifier" />	
			<param name="Level" type="enum" class="AlertLevel" pass="in" description="Alert level." />
			<param name="Description" type="string" pass="in" description="Alert Description in default language" />	
			<param name="DescriptionIdentifier" type="string" pass="in" description="Alert Description Identifier for internationalization. May be empty." />	
			<param name="ReadableContextInformation" type="string" pass="in" description="Readable Context Information in default language" />	
			<param name="NeedsAcknowledgement" type="bool" pass="in" description="Flag if acknowledgement is needed" />	
			<param name="TimestampUTC" type="string" pass="in" description="Timestamp in ISO8601 UTC format" />	
			<param name="AlertInstance" type="class" class="Alert" pass="return" description="Alert Instance" />	
		</method>	
		
		<method name="HasAlert" description="Checks if an alert with a certain UUID exists.">
			<param name="UUID" type="string" pass="in" description="Alert UUID. Fails if not a valid UUID is given." />	
			<param name="AlertExists" type="bool" pass="return" description="Flag if alert exists" />	
		</method>	

		<method name="GetAlertByUUID" description="Retrieves the alert object. Fails if alert does not exist.">
			<param name="UUID" type="string" pass="in" description="Alert UUID. Fails if not a valid UUID is given." />	
			<param name="AlertInstance" type="class" class="Alert" pass="return" description="Alert Instance" />	
		</method>	

		<method name="RetrieveAlerts" description="Retrieves all or all active alerts.">
			<param name="OnlyActive" type="bool" pass="in" description="If true, only active alerts will be returned." />	
			<param name="IteratorInstance" type="class" class="AlertIterator" pass="return" description="AlertIterator Instance" />	
		</method>	

		<method name="RetrieveAlertsByType" description="Retrieves alerts of a certain type identifier.">
			<param name="Identifier" type="string" pass="in" description="Alert Identifier to look for. Fails if empty." />	
			<param name="OnlyActive" type="bool" pass="in" description="If true, only active alerts will be returned." />	
			<param name="IteratorInstance" type="class" class="AlertIterator" pass="return" description="AlertIterator Instance" />	
		</method>				
		
	</class>


    <!-- The JournalSession class is not thread safe and MUST ONLY be used in a single thread context... -->
	<class name="JournalSession" parent="Base" description="Journaling Instance">

		<method name="GetSessionUUID" description="retrieves the session UUID.">
			<param name="SessionUUID" type="string" pass="return" description="Session UUID" />	
		</method>	

		<method name="WriteJournalChunkIntegerData" description="writes detailed journal state data to disk.">
			<param name="ChunkIndex" type="uint32" pass="in" description="Index of the Chunk to write" />	
			<param name="StartTimeStamp" type="uint64" pass="in" description="Start Timestamp of the chunk (in microseconds)" />	
			<param name="EndTimeStamp" type="uint64" pass="in" description="End Timestamp of the chunk (in microseconds)" />	
			<param name="VariableInfo" type="structarray" class="JournalChunkVariableInfo" pass="in" description="Variable information." />	
			<param name="EntryData" type="structarray" class="JournalChunkIntegerEntry" pass="in" description="Entry bulk data." />	
		</method>
		
		<method name="GetChunkCapacity" description="Returns the chunk capacity of the session journal.">
			<param name="ChunkCapacity" type="uint32" pass="return" description="Maximum Chunk Capacity in Journal in Bytes" />	
		</method>
		
		<method name="GetFlushInterval" description="Returns the flush interval of the session journal.">
			<param name="FlushInterval" type="uint32" pass="return" description="The interval determines how often a session journal chunk is written to disk. In Seconds." />	
		</method>
				
	</class>

    <!-- The StorageStream class is not thread safe and MUST ONLY be used in a single thread context... -->
	<class name="StorageStream" parent="Base" description="Storage Stream Instance">

		<method name="GetUUID" description="returns the uuid of a storage stream.">
			<param name="UUID" type="string" pass="return" description="UUID String" />	
		</method>
	
		<method name="GetTimeStamp" description="returns the timestamp of a storage stream.">
			<param name="Timestamp" type="string" pass="return" description="Timestamp in ISO8601 UTC format" />	
		</method>

		<method name="GetContextIdentifier" description="returns the context identifier of a storage stream.">
			<param name="ContextIdentifier" type="string" pass="return" description="Context Identifier String" />	
		</method>

		<method name="GetName" description="returns the name description of a storage stream.">
			<param name="Name" type="string" pass="return" description="Name String" />	
		</method>

		<method name="GetMIMEType" description="returns the mime type of a storage stream.">
			<param name="MimeType" type="string" pass="return" description="Mime Type String" />	
		</method>

		<method name="GetSHA2" description="returns the sha256 checksum of a storage stream.">
			<param name="SHA2" type="string" pass="return" description="SHA1 String" />	
		</method>

		<method name="GetSize" description="returns the size of a storage stream.">
			<param name="Size" type="uint64" pass="return" description="Size" />	
		</method>

		<method name="GetContent" description="returns the content of a storage stream.">
			<param name="Content" type="basicarray" class="uint8" pass="out" description="Byte Content of the stream" />	
		</method>

		<method name="GetCallbacks" description="returns direct read access to the storage stream. The callbacks are only valid throughout the existence of the StorageStream instance.">
			<param name="TheReadCallback" type="pointer" class="StreamReadCallback" pass="out" description="Callback to call for reading a data chunk"/>
			<param name="TheSeekCallback" type="pointer" class="StreamSeekCallback" pass="out" description="Callback to call for seeking in the stream."/>
			<param name="StreamHandle" type="pointer" pass="out" description="Handle of the stream."/>
		</method>
	
	</class>


    <!-- The Storage class is not thread safe and MUST ONLY be used in a single thread context... -->
	<class name="Storage" parent="Base" description="Storage Handler Instance">

		<method name="StreamIsReady" description="checks if a stream exists and is written to disk.">
			<param name="UUID" type="string" pass="in" description="UUID of storage stream." />	
			<param name="IsReady" type="bool" pass="return" description="Stream is ready." />
		</method>	

		<method name="RetrieveStream" description="retrieves an existing stream.">
			<param name="UUID" type="string" pass="in" description="UUID of storage stream." />	
			<param name="StreamInstance" type="class" class="StorageStream" pass="return" description="Stream Instance." />
		</method>	

		<method name="StoreNewStream" description="stores a new stream.">
			<param name="UUID" type="string" pass="in" description="UUID of storage stream. Must be unique and newly generated." />	
			<param name="ContextUUID" type="string" pass="in" description="DEPRECIATED and not used anymore. Streams MUST create ownership references manually!" />
			<param name="ContextIdentifier" type="string" pass="in" description="Identifier of the stream. MUST be unique within the given context." />
			<param name="Name" type="string" pass="in" description="Name Description of the stream." />
			<param name="MimeType" type="string" pass="in" description="Mime type of the content. MUST NOT be empty." />
			<param name="Content" type="basicarray" class="uint8" pass="in" description="Data of stream" />
			<param name="UserID" type="string" pass="in" description="Currently authenticated user" />
		</method>	

		<method name="BeginPartialStream" description="starts storing a stream with partial uploads.">
			<param name="UUID" type="string" pass="in" description="UUID of storage stream. MUST be unique and newly generated." />	
			<param name="ContextUUID" type="string" pass="in" description="DEPRECIATED and not used anymore. Streams MUST create ownership references manually!" />
			<param name="ContextIdentifier" type="string" pass="in" description="Identifier of the stream. MUST be unique within the given context." />
			<param name="Name" type="string" pass="in" description="Name of the stream." />	
			<param name="MimeType" type="string" pass="in" description="Mime type of the content. MUST NOT be empty." />	
			<param name="Size" type="uint64" pass="in" description="Final size of the stream. MUST NOT be 0." />	
			<param name="UserID" type="string" pass="in" description="Currently authenticated user" />
		</method>	

		<method name="StorePartialStream" description="stores data in a stream with partial uploads. Uploads should be sequential for optimal performance, but may be in arbitrary order.">
			<param name="UUID" type="string" pass="in" description="UUID of storage stream. MUST have been created with BeginPartialStream first." />	
			<param name="Offset" type="uint64" pass="in" description="Offset in stream to store to. Can be an arbitrary position, but storage MUST NOT override already uploaded data." />	
			<param name="Content" type="basicarray" class="uint8" pass="in" description="Data block to store in stream." />	
		</method>	
	
		<method name="FinishPartialStream" description="Finishes storing a stream.">
			<param name="UUID" type="string" pass="in" description="UUID of storage stream. MUST have been created with BeginPartialStream first." />	
			<param name="SHA2" type="string" pass="in" description="SHA256 of the uploaded data. If given initially, MUST be identical." />
		</method>	

		<method name="FinishPartialStreamBlockwiseSHA256" description="Finishes storing a stream with a 64k-Blockwise calculated Checksum.">
			<param name="UUID" type="string" pass="in" description="UUID of storage stream. MUST have been created with BeginPartialStream first." />	
			<param name="BlockwiseSHA2" type="string" pass="in" description="64kB hashlist SHA256 checksum of the uploaded data. If given initially, MUST be identical." />
		</method>	
		
		<method name="BeginRandomWriteStream" description="starts storing a stream with random write access. Checksums are not required.">
			<param name="UUID" type="string" pass="in" description="UUID of storage stream. MUST be unique and newly generated." />	
			<param name="ContextUUID" type="string" pass="in" description="DEPRECIATED and not used anymore. Streams MUST create ownership references manually!" />
			<param name="ContextIdentifier" type="string" pass="in" description="Identifier of the stream. MUST be unique within the given context." />
			<param name="Name" type="string" pass="in" description="Name of the stream." />	
			<param name="MimeType" type="string" pass="in" description="Mime type of the content. MUST NOT be empty." />	
			<param name="UserID" type="string" pass="in" description="Currently authenticated user" />
		</method>	

		<method name="StoreRandomWriteStream" description="stores data in a stream with random write access. Writing may be in arbitrary order.">
			<param name="UUID" type="string" pass="in" description="UUID of storage stream. MUST have been created with BeginRandomWriteStream first." />	
			<param name="Offset" type="uint64" pass="in" description="Offset in stream to store to. Can be an arbitrary position, but MUST be smaller or equal the current size." />	
			<param name="Content" type="basicarray" class="uint8" pass="in" description="Data block to store in stream." />	
		</method>	
		
		<method name="GetRandomWriteStreamSize" description="Returns the size random write stream .">
			<param name="UUID" type="string" pass="in" description="UUID of storage stream. MUST have been created with BeginRandomWriteStream first." />	
			<param name="CurrentSize" type="uint64" pass="return" description="Current size in bytes." />	
		</method>	

		<method name="FinishRandomWriteStream" description="Finishes storing a random write stream.">
			<param name="UUID" type="string" pass="in" description="UUID of storage stream. MUST have been created with BeginPartialStream first." />	
		</method>	

		<method name="GetMaxStreamSize" description="Returns the maximum stream size that the data model allows.">
			<param name="MaxStreamSize" type="uint64" pass="return" description="Maximum Stream Size in Bytes." />	
		</method>	
			
		<method name="ContentTypeIsAccepted" description="Returns if the given content type is an acceptable value.">
			<param name="ContentType" type="string" pass="in" description="Content type string (is taken case-insensitive)" />	
			<param name="Accepted" type="bool" pass="return" description="Content type is accepted." />	
		</method>	
	
		<method name="StreamIsImage" description="checks if a stream is an image.">
			<param name="UUID" type="string" pass="in" description="UUID of storage stream." />	
			<param name="IsImage" type="bool" pass="return" description="Returns if the stream is an image." />
		</method>	
		
		<method name="CreateDownloadTicket" description="Creates a new download ticket for a stream and a user.">
			<param name="TicketUUID" type="string" pass="in" description="UUID of download ticket." />	
			<param name="StreamUUID" type="string" pass="in" description="UUID of storage stream." />	
			<param name="ClientFileName" type="string" pass="in" description="ClientFileName of the ticket. MUST NOT be empty." />	
			<param name="SessionUUID" type="string" pass="in" description="UUID of user session." />	
			<param name="UserUUID" type="string" pass="in" description="UUID of user that created the ticket." />	
		</method>	
		
		<method name="RequestDownloadTicket" description="Returns the details of a download ticket and creates an entry in an access log with time stamp.">
			<param name="TicketUUID" type="string" pass="in" description="UUID of download ticket." />	
			<param name="IPAddress" type="string" pass="in" description="IP Address where the request came from." />	
			<param name="StreamUUID" type="string" pass="out" description="UUID of storage stream." />	
			<param name="ClientFileName" type="string" pass="out" description="ClientFileName of the ticket." />	
			<param name="SessionUUID" type="string" pass="out" description="UUID of user session." />	
			<param name="UserUUID" type="string" pass="out" description="UUID of user that created the ticket." />	
		</method>	

		<method name="AttachStreamToJournal" description="Attaches a stream to a journal as temporary stream.">
			<param name="StreamUUID" type="string" pass="in" description="UUID of stream. Call fails if stream does not exist." />	
			<param name="JournalUUID" type="string" pass="in" description="UUID of journal. Call fails if journal does not exist." />	
		</method>	

	</class>


    <!-- The BuildJobData class is not thread safe and MUST ONLY be used in a single thread context... -->
	<class name="BuildJobData" parent="Base" description="Build Job Data instance">

		<method name="GetDataUUID" description="returns the uuid of a build job data.">
			<param name="UUID" type="string" pass="return" description="UUID String" />	
		</method>

		<method name="GetJobUUID" description="returns the uuid of the parent build job.">
			<param name="UUID" type="string" pass="return" description="UUID String" />	
		</method>

		<method name="GetName" description="returns the name of the job data.">
			<param name="Name" type="string" pass="return" description="Name String" />	
		</method>

		<method name="GetContextIdentifier" description="returns the unique context identifier of the job data.">
			<param name="ContextIdentifier" type="string" pass="return" description="Context Identifier String" />	
		</method>

		<method name="GetTimeStamp" description="returns the timestamp when the job data was created.">
			<param name="Timestamp" type="string" pass="return" description="Timestamp in ISO8601 UTC format" />	
		</method>
				
		<method name="GetStorageStream" description="returns the storage stream of the build.">
			<param name="StreamInstance" type="class" class="StorageStream" pass="return" description="Stream Instance." />
		</method>

		<method name="GetStorageStreamSHA2" description="returns the checksum of the storage stream of the build.">
			<param name="SHA2" type="string" pass="return" description="SHA256 of the storage stream." />
		</method>

		<method name="GetStorageStreamSize" description="returns the size of the storage stream of the build.">
			<param name="Size" type="uint64" pass="return" description="size of the storage stream in bytes." />
		</method>

		<method name="GetDataType" description="returns the data type of the job data.">
			<param name="DataType" type="enum" class="BuildJobDataType" pass="return" description="Data type of the job data" />	
		</method>

		<method name="GetDataTypeAsString" description="returns the data type of the job data as string.">
			<param name="DataType" type="string" pass="return" description="Data type of the job data" />	
		</method>

		<method name="GetMIMEType" description="returns the mime type of a storage stream.">
			<param name="MimeType" type="string" pass="return" description="Mime Type String" />	
		</method>

	</class>

    <!-- The BuildJobDataIterator class is not thread safe and MUST ONLY be used in a single thread context... -->
	<class name="BuildJobDataIterator" parent="Iterator">
		<method name="GetCurrentJobData" description="Returns the build job data the iterator points at.">
			<param name="CurrentInstance" type="handle" class="BuildJobData" pass="return" description="returns the build job instance."/>
		</method>
	</class>


    <!-- The BuildJob class is not thread safe and MUST ONLY be used in a single thread context... -->
	<class name="BuildJob" parent="Base" description="Build Job instance">

		<method name="GetUUID" description="returns the uuid of a build job.">
			<param name="UUID" type="string" pass="return" description="UUID String" />	
		</method>
		
		<method name="GetName" description="returns the name of a build job.">
			<param name="Name" type="string" pass="return" description="Name String" />	
		</method>
		
		<method name="GetStatus" description="returns the status of a build job.">
			<param name="Status" type="enum" class="BuildJobStatus" pass="return" description="Status of build job." />	
		</method>

		<method name="GetLayerCount" description="returns the layer count of a build job.">
			<param name="LayerCount" type="uint32" pass="return" description="Layer Count of build job" />	
		</method>

		<method name="GetTimeStamp" description="returns the timestamp when the job was created.">
			<param name="Timestamp" type="string" pass="return" description="Timestamp in ISO8601 UTC format" />	
		</method>
				
		<method name="GetStorageStream" description="returns the storage stream of the build.">
			<param name="StreamInstance" type="class" class="StorageStream" pass="return" description="Stream Instance." />
		</method>

		<method name="GetStorageStreamUUID" description="returns the storage stream uuid of the build.">
			<param name="StreamUUID" type="string" pass="return" description="Stream UUID." />
		</method>	
		
		<method name="StartValidating" description="Starts validation of a build job.">
		</method>

		<method name="FinishValidating" description="Finishes validation of a build job.">
			<param name="LayerCount" type="uint32" pass="in" description="Layer count" />
		</method>

		<method name="ArchiveJob" description="Archives a Job. Job MUST not be opened in the system. Job MUST be of state validated.">
		</method>

		<method name="UnArchiveJob" description="Unarchives a Job. Job MUST be of state archived.">
		</method>

		<method name="DeleteJob" description="Deletes a Job permanently including all referencing data objects. Job MUST be of state archived to succeed.">
		</method>

		<method name="JobCanBeArchived" description="Returns if a job is opened.">
			<param name="CanBeArchived" type="bool" pass="return" description="returns if the job can be archived." />
		</method>

		<method name="AddJobData" description="Adds additional data to the Job. Job MUST be of state validated in order to add job data.">
			<param name="Identifier" type="string" pass="in" description="Unique identifier for the job data." />
			<param name="Name" type="string" pass="in" description="Name of the job data" />
			<param name="Stream" type="class" class="StorageStream" pass="in" description="Storage Stream Instance" />
			<param name="DataType" type="enum" class="BuildJobDataType" pass="in" description="Datatype of Job data" />
			<param name="UserID" type="string" pass="in" description="Currently authenticated user" />
		</method>

		<method name="ListJobDataByType" description="Retrieves a list of build job data objects, filtered by type.">
			<param name="DataType" type="enum" class="BuildJobDataType" pass="in" description="Datatype of Job data." />	
			<param name="IteratorInstance" type="class" class="BuildJobDataIterator" pass="return" description="Build Job Data Iterator Instance." />
		</method>

		<method name="ListJobData" description="Retrieves a list of build job data objects.">
			<param name="IteratorInstance" type="class" class="BuildJobDataIterator" pass="return" description="Build Job Data Iterator Instance." />
		</method>
		
		<method name="RetrieveJobData" description="Retrieves a build job data instance by its uuid.">
			<param name="DataUUID" type="string" pass="in" description="Job Data UUID." />	
			<param name="BuildJobData" type="class" class="BuildJobData" pass="return" description="Build Job Data Instance." />
		</method>
		
									
	</class>

    <!-- The BuildJobIterator class is not thread safe and MUST ONLY be used in a single thread context... -->
	<class name="BuildJobIterator" parent="Iterator">
		<method name="GetCurrentJob" description="Returns the build job the iterator points at.">
			<param name="CurrentInstance" type="handle" class="BuildJob" pass="return" description="returns the build job instance."/>
		</method>
	</class>


    <!-- The BuildJobHandler class is not thread safe and MUST ONLY be used in a single thread context... -->
	<class name="BuildJobHandler" parent="Base" description="Build Job handler">

		<method name="CreateJob" description="Creates a new build job.">
			<param name="JobUUID" type="string" pass="in" description="UUID String for the build job. Must be unique and newly generated." />	
			<param name="Name" type="string" pass="in" description="Name String" />	
			<param name="UserID" type="string" pass="in" description="Currently authenticated user" />
			<param name="StorageStreamUUID" type="string" pass="in" description="Storage stream uuid for the job. Needs not exist yet." />
			<param name="JobInstance" type="class" class="BuildJob" pass="return" description="Build Job Instance." />
		</method>

		<method name="RetrieveJob" description="Retrieves a job with a specific UUID.">
			<param name="JobUUID" type="string" pass="in" description="UUID String for the build job. Must be an existing Job." />	
			<param name="JobInstance" type="class" class="BuildJob" pass="return" description="Build Job Instance." />
		</method>

		<method name="FindJobOfData" description="Finds the parent build job of a given data uuid. Fails if data does not exist.">
			<param name="DataUUID" type="string" pass="in" description="Job Data UUID." />	
			<param name="BuildJobData" type="class" class="BuildJob" pass="return" description="Build Job Instance." />
		</method>

		<method name="ListJobsByStatus" description="Retrieves a list of build jobs, filtered by status.">
			<param name="Status" type="enum" class="BuildJobStatus" pass="in" description="Job Status to list." />	
			<param name="IteratorInstance" type="class" class="BuildJobIterator" pass="return" description="Build Job Iterator Instance." />
		</method>
		
		<method name="ConvertBuildStatusToString" description="Converts a status enum to a string identifier.">
			<param name="Status" type="enum" class="BuildJobStatus" pass="in" description="Status Enum." />	
			<param name="String" type="string" pass="return" description="String Identifier." />
		</method>

		<method name="ConvertStringToBuildStatus" description="Converts a string identifier to a status enum. Case sensitive. Fails if invalid.">
			<param name="String" type="string" pass="in" description="String Identifier." />
			<param name="Status" type="enum" class="BuildJobStatus" pass="return" description="Status Enum." />	
		</method>

			
	</class>



    <!-- The UserList class is not thread safe and MUST ONLY be used in a single thread context... -->
	<class name="UserList" parent="Base" description="List of users">
	
		<method name="Count" description="Result Number of Users in the list.">
			<param name="UserCount" type="uint32" pass="return" description="Number of users in the list" />
		</method>

		<method name="GetUserProperties" description="Retrieves all the data of a user in the list. ">
			<param name="UserIndex" type="uint32" pass="in" description="Index of users in the list (0-based). Call will fail if invalid index is provided." />
			<param name="Username" type="string" pass="out" description="User name" />
			<param name="UUID" type="string" pass="out" description="UUID of the user." />
			<param name="Description" type="string" pass="out" description="Description of the user." />
			<param name="Role" type="string" pass="out" description="Role of the user." />
			<param name="LanguageIdentifier" type="string" pass="out" description="LanguageIdentifier of the user." />
		</method>

	
	</class>

    <!-- The LoginHandler class is not thread safe and MUST ONLY be used in a single thread context... -->
	<class name="LoginHandler" parent="Base" description="Login handler instance" multithread="true">
	
		<method name="UserExists" description="Checks if a user exist.">
			<param name="Username" type="string" pass="in" description="User name" />
			<param name="UserExists" type="bool" pass="return" description="Flag if users exists" />
		</method>
	
		<method name="UserUUIDExists" description="Checks if a user UUID exist.">
			<param name="UUID" type="string" pass="in" description="UUID of the user." />
			<param name="UserExists" type="bool" pass="return" description="Flag if users exists" />
		</method>

		<method name="GetUserDetails" description="Retrieves login relevant users data. Fails if user does not exist.">
			<param name="Username" type="string" pass="in" description="User name" />
			<param name="Salt" type="string" pass="out" description="Salt of the user." />
			<param name="HashedPassword" type="string" pass="out" description="Hashed Password." />
		</method>

		<method name="GetUserProperties" description="Retrieves all users data with one Transaction. Fails if user does not exist.">
			<param name="Username" type="string" pass="in" description="User name" />
			<param name="UUID" type="string" pass="out" description="UUID of the user." />
			<param name="Description" type="string" pass="out" description="Description of the user." />
			<param name="Role" type="string" pass="out" description="Role of the user." />
			<param name="LanguageIdentifier" type="string" pass="out" description="LanguageIdentifier of the user." />
		</method>

		<method name="GetUserPropertiesByUUID" description="Retrieves all users data with one Transaction. Fails if user does not exist.">
			<param name="UUID" type="string" pass="in" description="UUID of the user." />
			<param name="Username" type="string" pass="out" description="User name" />
			<param name="Description" type="string" pass="out" description="Description of the user." />
			<param name="Role" type="string" pass="out" description="Role of the user." />
			<param name="LanguageIdentifier" type="string" pass="out" description="LanguageIdentifier of the user." />
		</method>

		<method name="GetUsernameByUUID" description="Retrieves a users name with a given UUID. Fails if user does not exist.">
			<param name="UUID" type="string" pass="in" description="UUID of the user." />
			<param name="Username" type="string" pass="return" description="User name" />
		</method>

		<method name="GetUserUUID" description="Retrieves a users UUID. Fails if user does not exist.">
			<param name="Username" type="string" pass="in" description="User name" />
			<param name="UUID" type="string" pass="return" description="UUID of the user." />
		</method>

		<method name="GetUserDescription" description="Retrieves a users description. Fails if user does not exist.">
			<param name="Username" type="string" pass="in" description="User name" />
			<param name="Description" type="string" pass="return" description="Description of the user." />
		</method>

		<method name="GetUserDescriptionByUUID" description="Retrieves a users description by the user UUID. Fails if user does not exist.">
			<param name="UUID" type="string" pass="in" description="UUID of the user." />
			<param name="Description" type="string" pass="return" description="Description of the user." />
		</method>

		<method name="GetUserRole" description="Retrieves a users role. Fails if user does not exist.">
			<param name="Username" type="string" pass="in" description="User name" />
			<param name="Role" type="string" pass="return" description="Role of the user." />
		</method>

		<method name="GetUserRoleByUUID" description="Retrieves a users role by the user UUID. Fails if user does not exist.">
			<param name="UUID" type="string" pass="in" description="UUID of the user." />
			<param name="Role" type="string" pass="return" description="Role of the user." />
		</method>

		<method name="GetUserLanguage" description="Retrieves a users language preference. Fails if user does not exist.">
			<param name="Username" type="string" pass="in" description="User name" />
			<param name="LanguageIdentifier" type="string" pass="return" description="Language identifier of the user." />
		</method>
		
		<method name="GetUserLanguageByUUID" description="Retrieves a users language preference by user UUID. Fails if user does not exist.">
			<param name="UUID" type="string" pass="in" description="UUID of the user." />
			<param name="LanguageIdentifier" type="string" pass="return" description="Language identifier of the user." />
		</method>		

		<method name="CreateUser" description="Creates a new user. Fails if the user already exists.">
			<param name="Username" type="string" pass="in" description="User name to create. MUST be alphanumeric and not empty." />
			<param name="Role" type="string" pass="in" description="Role of the new user. MUST NOT be empty." />
			<param name="Salt" type="string" pass="in" description="Salt of the user. MUST NOT be empty. MUST be an SHA256 string." />
			<param name="HashedPassword" type="string" pass="in" description="Hashed Password. MUST be an SHA256 string. HashedPassword MUST NOT be the hash some of the given salt." />
			<param name="Description" type="string" pass="in" description="Description of the new user." />
			<param name="UUID" type="string" pass="return" description="UUID of the new user." />
		</method>

		<method name="SetUserLanguage" description="Updates a users language preference. Fails if user does not exist.">
			<param name="Username" type="string" pass="in" description="User name" />
			<param name="LanguageIdentifier" type="string" pass="in" description="New Language identifier of the user." />
		</method>
		
		<method name="SetUserRole" description="Updates a users role. Fails if user does not exist.">
			<param name="Username" type="string" pass="in" description="User name" />
			<param name="Role" type="string" pass="in" description="New Role identifier of the user." />
		</method>

		<method name="SetUserDescription" description="Updates a users description. Fails if user does not exist.">
			<param name="Username" type="string" pass="in" description="User name" />
			<param name="Description" type="string" pass="in" description="New Description of the user." />
		</method>
		
		<method name="SetUserPassword" description="Updates a users password. Fails if user does not exist.">
			<param name="Username" type="string" pass="in" description="User name" />
			<param name="Salt" type="string" pass="in" description="Salt of the user. MUST NOT be empty. MUST be an SHA256 string." />
			<param name="HashedPassword" type="string" pass="in" description="Hashed Password. MUST be an SHA256 string. HashedPassword MUST NOT be the hash some of the given salt." />
		</method>

		<method name="SetUserLanguageByUUID" description="Updates a users language preference. Fails if user does not exist.">
			<param name="UUID" type="string" pass="in" description="UUID of the user." />
			<param name="LanguageIdentifier" type="string" pass="in" description="New Language identifier of the user." />
		</method>
		
		<method name="SetUserRoleByUUID" description="Updates a users role. Fails if user does not exist.">
			<param name="UUID" type="string" pass="in" description="UUID of the user." />
			<param name="Role" type="string" pass="in" description="New Role identifier of the user." />
		</method>

		<method name="SetUserDescriptionByUUID" description="Updates a users description. Fails if user does not exist.">
			<param name="UUID" type="string" pass="in" description="UUID of the user." />
			<param name="Description" type="string" pass="in" description="New Language identifier of the user." />
		</method>
		
		<method name="SetUserPasswordByUUID" description="Updates a users password. Fails if user does not exist.">
			<param name="UUID" type="string" pass="in" description="UUID of the user." />
			<param name="Salt" type="string" pass="in" description="Salt of the user. MUST NOT be empty. MUST be an SHA256 string." />
			<param name="HashedPassword" type="string" pass="in" description="Hashed Password. MUST be an SHA256 string. HashedPassword MUST NOT be the hash some of the given salt." />
		</method>

		<method name="GetActiveUsers" description="Returns a list of active users.">
			<param name="ActiveUsers" type="class" class="UserList" pass="return" description="New instance of active users." />
		</method>

	</class>


    <!-- The PersistencyHandler class is not thread safe and MUST ONLY be used in a single thread context... -->
	<class name="PersistencyHandler" parent="Base" description="Persistent parameter handler instance">
		
		<method name="HasPersistentParameter" description="Retrieves if a persistent parameter has been stored.">
			<param name="UUID" type="string" pass="in" description="UUID of the parameter" />
			<param name="ParameterExists" type="bool" pass="return" description="returns if parameter exists." />
		</method>

		<method name="GetPersistentParameterDetails" description="Retrieves details of a persistent parameter. Fails if parameter does not exist.">
			<param name="UUID" type="string" pass="in" description="UUID of the parameter" />
			<param name="Name" type="string" pass="out" description="Returns name of the parameter" />
			<param name="DataType" type="enum" class="ParameterDataType" pass="out" description="Returns data type of the parameter" />
		</method>

		<method name="DeletePersistentParameter" description="Removes a persistent parameter from database. Does nothing if parameter does not exist.">
			<param name="UUID" type="string" pass="in" description="UUID of the parameter" />
			<param name="ParameterExisted" type="bool" pass="return" description="returns if parameter existed." />
		</method>

		<method name="StorePersistentParameter" description="Stores a persistent parameter in the database. Creates a new parameter if not existing.">
			<param name="UUID" type="string" pass="in" description="UUID of the parameter" />
			<param name="Name" type="string" pass="in" description="Name of the parameter. If parameter exists, MUST be the same as the stored parameter name." />
			<param name="DataType" type="enum" class="ParameterDataType" pass="in" description="Data type of the parameter. If parameter exists, MUST be the same as the stored parameter data type." />
			<param name="Value" type="string" pass="in" description="Value of the parameter. MUST be of appropriate type." />
		</method>

		<method name="StorePersistentStringParameter" description="Stores a persistent parameter in the database. Creates a new parameter if not existing.">
			<param name="UUID" type="string" pass="in" description="UUID of the parameter" />
			<param name="Name" type="string" pass="in" description="Name of the parameter. If parameter exists, MUST be the same as the stored parameter name." />
			<param name="Value" type="string" pass="in" description="Value of the parameter." />
		</method>

		<method name="StorePersistentUUIDParameter" description="Stores a persistent parameter in the database. Creates a new parameter if not existing.">
			<param name="UUID" type="string" pass="in" description="UUID of the parameter" />
			<param name="Name" type="string" pass="in" description="Name of the parameter. If parameter exists, MUST be the same as the stored parameter name." />
			<param name="Value" type="string" pass="in" description="Value of the parameter. MUST be of appropriate type." />
		</method>

		<method name="StorePersistentDoubleParameter" description="Stores a persistent parameter in the database. Creates a new parameter if not existing.">
			<param name="UUID" type="string" pass="in" description="UUID of the parameter" />
			<param name="Name" type="string" pass="in" description="Name of the parameter. If parameter exists, MUST be the same as the stored parameter name." />
			<param name="Value" type="double" pass="in" description="Value of the parameter." />
		</method>

		<method name="StorePersistentIntegerParameter" description="Stores a persistent parameter in the database. Creates a new parameter if not existing.">
			<param name="UUID" type="string" pass="in" description="UUID of the parameter" />
			<param name="Name" type="string" pass="in" description="Name of the parameter. If parameter exists, MUST be the same as the stored parameter name." />
			<param name="Value" type="int64" pass="in" description="Value of the parameter." />
		</method>

		<method name="StorePersistentBoolParameter" description="Stores a persistent parameter in the database. Creates a new parameter if not existing.">
			<param name="UUID" type="string" pass="in" description="UUID of the parameter" />
			<param name="Name" type="string" pass="in" description="Name of the parameter. If parameter exists, MUST be the same as the stored parameter name." />
			<param name="Value" type="bool" pass="in" description="Value of the parameter." />
		</method>


		<method name="RetrievePersistentStringParameter" description="Retrieves a persistent parameter in the database. Fails if not existing or invalid type.">
			<param name="UUID" type="string" pass="in" description="UUID of the parameter" />
			<param name="Value" type="string" pass="return" description="Value of the parameter." />
		</method>

		<method name="RetrievePersistentUUIDParameter" description="Retrieves a persistent parameter in the database. Fails if not existing or invalid type.">
			<param name="UUID" type="string" pass="in" description="UUID of the parameter" />
			<param name="Value" type="string" pass="return" description="Value of the parameter." />
		</method>

		<method name="RetrievePersistentDoubleParameter" description="Retrieves a persistent parameter in the database. Fails if not existing or invalid type.">
			<param name="UUID" type="string" pass="in" description="UUID of the parameter" />
			<param name="Value" type="double" pass="return" description="Value of the parameter." />
		</method>

		<method name="RetrievePersistentIntegerParameter" description="Retrieves a persistent parameter in the database. Fails if not existing or invalid type.">
			<param name="UUID" type="string" pass="in" description="UUID of the parameter" />
			<param name="Value" type="int64" pass="return" description="Value of the parameter." />
		</method>

		<method name="RetrievePersistentBoolParameter" description="Retrieves a persistent parameter in the database. Fails if not existing or invalid type.">
			<param name="UUID" type="string" pass="in" description="UUID of the parameter" />
			<param name="Value" type="bool" pass="return" description="Value of the parameter." />
		</method>


	</class>

    <!-- The InstallationInformation class is not thread safe and MUST ONLY be used in a single thread context... -->
	<class name="InstallationInformation" parent="Base" description="Installation information instance. Gives a snapshot of the installation information at creation of the instance. Does not update in the unlikely event of them changing.">
	
		<method name="GetInstallationUUID" description="Returns the installation UUID.">
			<param name="InstallationUUID" type="string" pass="return" description="Installation UUID. Public value to document which installation was used for something." />	
		</method>

		<method name="GetInstallationSecret" description="Returns the installation Secret.">
			<param name="InstallationSecret" type="string" pass="return" description="Secret SHA256 key for seeding external-facing pseudo-randomness. MUST NOT be given outside of the application." />	
		</method>

		<method name="GetBaseTempDirectory" description="Returns a custom base temp directory. An empty string defaults to the system temp directory.">
			<param name="TempDirectory" type="string" pass="return" description="Temp directory path." />	
		</method>
		
	</class>


    <!-- The DataModel class is supposed to be thread safe. A methode MUST NOT return or out a string or a basicarray ever. -->
	<class name="DataModel" parent="Base" description="MC DataModel Instance">

		<method name="InitialiseDatabase" description="initializes the database connection.">
			<param name="DataDirectory" type="string" pass="in" description="Directory that stores the data." />	
			<param name="DataBaseType" type="enum" class="DataBaseType" pass="in" description="Type of database." />
			<param name="ConnectionString" type="string" pass="in" description="Connection string." />				
		</method>

		<method name="GetDataModelVersion" description="returns the linear data model version.">
			<param name="Version" type="uint32" pass="return" description="Data model version." />	
		</method>

		<method name="GetInstallationInformation" description="DEPRECIATED. Only used for backwards compatibility. NEVER USE because of thread safety issues.. Use GetInstallationInformationObject instead.">
			<param name="DEPRECIATEDInstallationUUID" type="string" pass="out" description="DEPRECIATED Installation UUID. Public value to document which installation was used for something." />	
			<param name="DEPRECIATEDInstallationSecret" type="string" pass="out" description="DEPRECIATED Secret SHA256 key for seeding external-facing pseudo-randomness. MUST NOT be given outside of the application." />	
		</method>

		<method name="GetInstallationInformationObject" description="returns unique identifiers for the current installation. MUST be used instead of depreciated functionality.">
			<param name="InstallationInformation" type="class" class="InstallationInformation" pass="return" description="Installation information instance." />	
		</method>

		<method name="CreateStorage" description="creates a storage access class.">
			<param name="Storage" type="class" class="Storage" pass="return" description="Storage class instance." />	
		</method>

		<method name="CreateBuildJobHandler" description="creates a build job access class.">
			<param name="BuildJobHandler" type="class" class="BuildJobHandler" pass="return" description="BuildJobHandler class instance." />	
		</method>
		
		<method name="CreateNewLogSession" description="creates a global log session access class.">
			<param name="LogSession" type="class" class="LogSession" pass="return" description="LogSession class instance." />	
		</method>
		
		<method name="CreateJournalSession" description="creates a global journal session access class.">
			<param name="JournalSession" type="class" class="JournalSession" pass="return" description="JournalSession class instance." />	
		</method>

		<method name="CreateAlertSession" description="creates a global alert session access class.">
			<param name="AlertSession" type="class" class="AlertSession" pass="return" description="AlertSession class instance." />	
		</method>

		<method name="CreateLoginHandler" description="creates a login handler instance.">
			<param name="LoginHandler" type="class" class="LoginHandler" pass="return" description="LoginHandler instance." />	
		</method>
		
		<method name="CreatePersistencyHandler" description="creates a persistency handler instance.">
			<param name="PersistencyHandler" type="class" class="PersistencyHandler" pass="return" description="PersistencyHandler instance." />	
		</method>
		
		<method name="SetBaseTempDirectory" description="Sets a custom base temp directory. An empty string defaults to the system temp directory.">
			<param name="TempDirectory" type="string" pass="in" description="Temp directory path to use. SHOULD be an absolute path, if not empty. Directory MUST exist, if not empty." />	
		</method>

		<method name="GetBaseTempDirectory" description="DEPRECIATED. Only used for backwards compatibility. NEVER USE because of thread safety issues.. USE GetInstallationInformationObject instead.">
			<param name="TempDirectory" type="string" pass="return" description="Temp directory path." />	
		</method>

		<method name="SetLogCallback" description="Sets a log callback to be used for the execution.">
			<param name="LogCallback" type="functiontype" class="LogCallback" pass="in" description="LogCallback." />	
			<param name="UserData" type="pointer" pass="in" description="Userdata that is passed to the callback function"/>
		</method>

		<method name="ClearLogCallback" description="Resets the log callback to be used for the execution.">
		</method>
		
		<method name="HasLogCallback" description="Returns if a log callback has been set.">
			<param name="HasCallback" type="bool" pass="return" description="Flag if log callback has been set." />	
		</method>
		
		<method name="TriggerLogCallback" description="Triggers the log callback. Fails if no log callback has been set.">
			<param name="LogMessage" type="string" pass="in" description="Log message to be logged."/>
			<param name="SubSystem" type="string" pass="in" description="SubSystem of Log Message."/>
			<param name="LogLevel" type="enum" class="LogLevel" pass="in" description="Log Level to be used."/>
			<param name="Timestamp" type="string" pass="in" description="Timestamp of the log message."/>
		</method>
		
	</class>

		
	<global baseclassname="Base" stringoutclassname="Base" releasemethod="ReleaseInstance" acquiremethod="AcquireInstance" versionmethod="GetVersion" errormethod="GetLastError" symbollookupmethod="GetSymbolLookupMethod">
		
		<method name="GetVersion" description = "retrieves the binary version of this library.">
			<param name="Major" type="uint32" pass="out" description="returns the major version of this library" />
			<param name="Minor" type="uint32" pass="out" description="returns the minor version of this library" />
			<param name="Micro" type="uint32" pass="out" description="returns the micro version of this library" />
		</method>
		<method name="GetLastError" description="Returns the last error recorded on this object">
			<param name="Instance" type="class" class="Base" pass="in" description="Instance Handle" />
			<param name="ErrorMessage" type="string" pass="out" description="Message of the last error" />
			<param name="HasError" type="bool" pass="return" description="Is there a last error to query" />
		</method>
		<method name="ReleaseInstance" description="Releases shared ownership of an Instance">
			<param name="Instance" type="class" class="Base" pass="in" description="Instance Handle" />
		</method>
		<method name="AcquireInstance" description="Acquires shared ownership of an Instance">
			<param name="Instance" type="class" class="Base" pass="in" description="Instance Handle" />
		</method>
		<method name="GetSymbolLookupMethod" description="Returns the address of the SymbolLookupMethod">
			<param name="SymbolLookupMethod" type="pointer" pass="return" description="Address of the SymbolAddressMethod" />
		</method>		
		
		<method name="CreateDataModelInstance" description="Creates and initializes new MC DataModel Instance.">
			<param name="Instance" type="class" class="DataModel" pass="return" description="New DataModel instance" />
		</method>
	</global>
	
	
</component>

