<?xml version="1.0" encoding="UTF-8"?>
<component xmlns="http://schemas.autodesk.com/netfabb/automaticcomponenttoolkit/2018" 
	libraryname="MC Driver Environment Interface" namespace="LibMCDriverEnv" copyright="Autodesk Inc." year="2020" basename="libmcdriverenv"
	version="1.0.0">

	<license>
		<line value="All rights reserved." />
		<line value="" />
		<line value="Redistribution and use in source and binary forms, with or without" />
		<line value="modification, are permitted provided that the following conditions are met:" />
		<line value="    * Redistributions of source code must retain the above copyright" />
		<line value="      notice, this list of conditions and the following disclaimer." />
		<line value="    * Redistributions in binary form must reproduce the above copyright" />
		<line value="      notice, this list of conditions and the following disclaimer in the" />
		<line value="      documentation and/or other materials provided with the distribution." />
		<line value="    * Neither the name of the Autodesk Inc. nor the" />
		<line value="      names of its contributors may be used to endorse or promote products" />
		<line value="      derived from this software without specific prior written permission." />
		<line value="" />
		<line value="THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND" />
		<line value="ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED" />
		<line value="WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE" />
		<line value="DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY" />
		<line value="DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES" />
		<line value="(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;" />
		<line value="LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND" />
		<line value="ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT" />
		<line value="(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS" />
		<line value="SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." />
		<line value="" />
	</license>
	
	<bindings>
		<binding language="CppDynamic" indentation="tabs" />
	</bindings>
	<implementations>
		<implementation language="Cpp" indentation="tabs"/>
	</implementations>
	
		
	<errors>
		<error name="NOTIMPLEMENTED" code="1" description="functionality not implemented" />
		<error name="INVALIDPARAM" code="2" description="an invalid parameter was passed" />
		<error name="INVALIDCAST" code="3" description="a type cast failed" />
		<error name="BUFFERTOOSMALL" code="4" description="a provided buffer is too small" />
		<error name="GENERICEXCEPTION" code="5" description="a generic exception occurred" />
		<error name="COULDNOTLOADLIBRARY" code="6" description="the library could not be loaded" />
		<error name="COULDNOTFINDLIBRARYEXPORT" code="7" description="a required exported symbol could not be found in the library" />
		<error name="INCOMPATIBLEBINARYVERSION" code="8" description="the version of the binary interface does not match the bindings interface" />				
		<error name="PARAMETERGROUPNOTFOUND" code="9" description="Parameter group not found" />
		<error name="PARAMETERNOTFOUND" code="10" description="Parameter not found" />
		<error name="COULDNOTFINDSIGNALDEFINITON" code="11" description="Could not find signal definition" />
		<error name="COULDNOTTRIGGERSIGNAL" code="12" description="Could not trigger signal" />
		<error name="SIGNALNOTFOUND" code="13" description="Signal not found" />
		<error name="TERMINATED" code="14" description="operation has been terminated." />
		<error name="SIGNALHASTRIGGEREDTWICE" code="15" description="signal has been triggered twice." />
		<error name="SIGNALHASNOTBEENTRIGGERED" code="16" description="signal has not been triggered." />
		<error name="DRIVERISNOTINITIALISING" code="17" description="driver is not in initialisation mode." />
	
		
	</errors>
	


	<class name="Base">
	</class>


	<class name="WorkingFileExecution" parent="Base" description="Working File Execution Object">

		<method name="GetStatus" description = "Returns the execution status">
		</method>

		<method name="ReturnStdOut" description = "Returns the output of the executable as string buffer">
			<param name="StringBuffer" type="string" pass="return" description="stdout buffer" />
		</method>


	</class>


	<class name="WorkingFile" parent="Base" description="Working File Access Object">

		<method name="GetAbsoluteFileName" description = "Retrieves absolute file name of the working file">
			<param name="FileName" type="string" pass="return" description="global path of the file" />
		</method>

		<method name="GetSize" description = "Returns the size of temporary file.">
			<param name="FileSize" type="uint64" pass="return" description="file size" />
		</method>

		<method name="CalculateSHA2" description = "Calculates the SHA256 checksum of the file.">
			<param name="SHA2" type="string" pass="return" description="sha256 checksum" />
		</method>

		<method name="DeleteFile" description = "Deletes the temporary file.">
		</method>

		<method name="ExecuteFile" description = "Executes the temporary file, if it is an executable.">
			<param name="Execution" type="class" class="WorkingFileExecution" pass="return" description="execution object" />
		</method>

	</class>



	<class name="WorkingDirectory" parent="Base" description="Working Directory Access Object">

		<method name="GetAbsoluteFilePath" description = "Retrieves absolute file path.">
			<param name="FilePath" type="string" pass="return" description="global path of the directory, including path delimiter." />
		</method>

		<method name="StoreCustomData" description = "Stores a data buffer in a temporary file.">
			<param name="FileName" type="string" pass="in" description="filename to store to. Can not include any path delimiters or .." />
			<param name="DataBuffer" type="basicarray" class="uint8" pass="in" description="file data to store to." />
			<param name="WorkingFile" type="class" class="WorkingFile" pass="return" description="working file instance." />
		</method>

		<method name="StoreDriverData" description = "Stores attached driver data in a temporary file.">
			<param name="FileName" type="string" pass="in" description="filename to store to. Can not include any path delimiters or .." />
			<param name="Identifier" type="string" pass="in" description="identifier of the binary data in the driver package." />
			<param name="WorkingFile" type="class" class="WorkingFile" pass="return" description="working file instance." />
		</method>

	</class>

	<class name="DriverEnvironment" parent="Base" description="Environment of the driver">
	  
		<method name="CreateWorkingDirectory" description = "creates a temporary working directory.">
			<param name="WorkingDirectory" type="class" class="WorkingDirectory" pass="return" description="creates a working directory" />
		</method>

		<method name="RetrieveDriverData" description = "retrieves attached driver data into a memory buffer.">
			<param name="Identifier" type="string" pass="in" description="identifier of the binary data in the driver package." />
			<param name="DataBuffer" type="basicarray" class="uint8" pass="out" description="buffer data." />
		</method>
		
		
		<method name="RegisterStringParameter" description="registers a string parameter. Must only be called during driver creation.">
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Description" type="string" pass="in" description="Parameter Description" />
			<param name="DefaultValue" type="string" pass="in" description="default value to set" />
		</method>

		<method name="RegisterUUIDParameter" description="registers a uuid parameter. Must only be called during driver creation.">
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Description" type="string" pass="in" description="Parameter Description" />
			<param name="DefaultValue" type="string" pass="in" description="default value to set" />
		</method>

		<method name="RegisterDoubleParameter" description="registers a double parameter. Must only be called during driver creation.">
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Description" type="string" pass="in" description="Parameter Description" />
			<param name="DefaultValue" type="double" pass="in" description="default value to set" />
		</method>

		<method name="RegisterIntegerParameter" description="registers an int parameter. Must only be called during driver creation.">
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Description" type="string" pass="in" description="Parameter Description" />
			<param name="DefaultValue" type="int64" pass="in" description="default value to set" />
		</method>

		<method name="RegisterBoolParameter" description="registers a bool parameter. Must only be called during driver creation.">
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Description" type="string" pass="in" description="Parameter Description" />
			<param name="DefaultValue" type="bool" pass="in" description="default value to set" />
		</method>
		
		
		<method name="SetStringParameter" description="sets a string parameter">
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Value" type="string" pass="in" description="Value to set" />
		</method>

		<method name="SetUUIDParameter" description="sets a uuid parameter">
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Value" type="string" pass="in" description="Value to set" />
		</method>

		<method name="SetDoubleParameter" description="sets a double parameter">
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Value" type="double" pass="in" description="Value to set" />
		</method>

		<method name="SetIntegerParameter" description="sets an int parameter">
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Value" type="int64" pass="in" description="Value to set" />
		</method>

		<method name="SetBoolParameter" description="sets a bool parameter">
			<param name="ParameterName" type="string" pass="in" description="Parameter Name" />
			<param name="Value" type="bool" pass="in" description="Value to set" />
		</method>
		

	</class>

		
	<global baseclassname="Base" stringoutclassname="Base" releasemethod="ReleaseInstance" acquiremethod="AcquireInstance" versionmethod="GetVersion" errormethod="GetLastError" symbollookupmethod="GetSymbolLookupMethod">
		
		<method name="GetVersion" description = "retrieves the binary version of this library.">
			<param name="Major" type="uint32" pass="out" description="returns the major version of this library" />
			<param name="Minor" type="uint32" pass="out" description="returns the minor version of this library" />
			<param name="Micro" type="uint32" pass="out" description="returns the micro version of this library" />
		</method>
		
		<method name="GetLastError" description="Returns the last error recorded on this object">
			<param name="Instance" type="class" class="Base" pass="in" description="Instance Handle" />
			<param name="ErrorMessage" type="string" pass="out" description="Message of the last error" />
			<param name="HasError" type="bool" pass="return" description="Is there a last error to query" />
		</method>
		<method name="ReleaseInstance" description="Releases shared ownership of an Instance">
			<param name="Instance" type="class" class="Base" pass="in" description="Instance Handle" />
		</method>
		<method name="AcquireInstance" description="Acquires shared ownership of an Instance">
			<param name="Instance" type="class" class="Base" pass="in" description="Instance Handle" />
		</method>
		
		<method name="GetSymbolLookupMethod" description="Returns the address of the SymbolLookupMethod">
			<param name="SymbolLookupMethod" type="pointer" pass="return" description="Address of the SymbolAddressMethod" />
		</method>		
		
	</global>
	
	
</component>

