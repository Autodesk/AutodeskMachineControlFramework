/*++

Copyright (C) 2021 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.7.0-develop.

Abstract: This is an autogenerated C++-Header file with basic types in
order to allow an easy use of LibRasterizer

Interface version: 1.0.0

*/

#ifndef __LIBRASTERIZER_TYPES_HEADER_CPP
#define __LIBRASTERIZER_TYPES_HEADER_CPP


/*************************************************************************************************************************
 Scalar types definition
**************************************************************************************************************************/

#ifdef LIBRASTERIZER_USELEGACYINTEGERTYPES

typedef unsigned char LibRasterizer_uint8;
typedef unsigned short LibRasterizer_uint16 ;
typedef unsigned int LibRasterizer_uint32;
typedef unsigned long long LibRasterizer_uint64;
typedef char LibRasterizer_int8;
typedef short LibRasterizer_int16;
typedef int LibRasterizer_int32;
typedef long long LibRasterizer_int64;

#else // LIBRASTERIZER_USELEGACYINTEGERTYPES

#include <stdint.h>

typedef uint8_t LibRasterizer_uint8;
typedef uint16_t LibRasterizer_uint16;
typedef uint32_t LibRasterizer_uint32;
typedef uint64_t LibRasterizer_uint64;
typedef int8_t LibRasterizer_int8;
typedef int16_t LibRasterizer_int16;
typedef int32_t LibRasterizer_int32;
typedef int64_t LibRasterizer_int64 ;

#endif // LIBRASTERIZER_USELEGACYINTEGERTYPES

typedef float LibRasterizer_single;
typedef double LibRasterizer_double;

/*************************************************************************************************************************
 General type definitions
**************************************************************************************************************************/

typedef LibRasterizer_int32 LibRasterizerResult;
typedef void * LibRasterizerHandle;
typedef void * LibRasterizer_pvoid;

/*************************************************************************************************************************
 Version for LibRasterizer
**************************************************************************************************************************/

#define LIBRASTERIZER_VERSION_MAJOR 1
#define LIBRASTERIZER_VERSION_MINOR 0
#define LIBRASTERIZER_VERSION_MICRO 0
#define LIBRASTERIZER_VERSION_PRERELEASEINFO ""
#define LIBRASTERIZER_VERSION_BUILDINFO ""

/*************************************************************************************************************************
 Error constants for LibRasterizer
**************************************************************************************************************************/

#define LIBRASTERIZER_SUCCESS 0
#define LIBRASTERIZER_ERROR_NOTIMPLEMENTED 1
#define LIBRASTERIZER_ERROR_INVALIDPARAM 2
#define LIBRASTERIZER_ERROR_INVALIDCAST 3
#define LIBRASTERIZER_ERROR_BUFFERTOOSMALL 4
#define LIBRASTERIZER_ERROR_GENERICEXCEPTION 5
#define LIBRASTERIZER_ERROR_COULDNOTLOADLIBRARY 6
#define LIBRASTERIZER_ERROR_COULDNOTFINDLIBRARYEXPORT 7
#define LIBRASTERIZER_ERROR_INCOMPATIBLEBINARYVERSION 8
#define LIBRASTERIZER_ERROR_INVALIDSUBSAMPLING 9
#define LIBRASTERIZER_ERROR_COULDNOTCOMPRESSPNGIMAGE 10
#define LIBRASTERIZER_ERROR_EMPTYPNGIMAGEDATA 11
#define LIBRASTERIZER_ERROR_COULDNOTSTOREPNGIMAGE 12
#define LIBRASTERIZER_ERROR_INVALIDXCOORDINATE 13
#define LIBRASTERIZER_ERROR_INVALIDYCOORDINATE 14
#define LIBRASTERIZER_ERROR_INVALIDXCOORDINATERANGE 15
#define LIBRASTERIZER_ERROR_INVALIDYCOORDINATERANGE 16
#define LIBRASTERIZER_ERROR_INVALIDPIXELDATACOUNT 17

/*************************************************************************************************************************
 Error strings for LibRasterizer
**************************************************************************************************************************/

inline const char * LIBRASTERIZER_GETERRORSTRING (LibRasterizerResult nErrorCode) {
  switch (nErrorCode) {
    case LIBRASTERIZER_SUCCESS: return "no error";
    case LIBRASTERIZER_ERROR_NOTIMPLEMENTED: return "functionality not implemented";
    case LIBRASTERIZER_ERROR_INVALIDPARAM: return "an invalid parameter was passed";
    case LIBRASTERIZER_ERROR_INVALIDCAST: return "a type cast failed";
    case LIBRASTERIZER_ERROR_BUFFERTOOSMALL: return "a provided buffer is too small";
    case LIBRASTERIZER_ERROR_GENERICEXCEPTION: return "a generic exception occurred";
    case LIBRASTERIZER_ERROR_COULDNOTLOADLIBRARY: return "the library could not be loaded";
    case LIBRASTERIZER_ERROR_COULDNOTFINDLIBRARYEXPORT: return "a required exported symbol could not be found in the library";
    case LIBRASTERIZER_ERROR_INCOMPATIBLEBINARYVERSION: return "the version of the binary interface does not match the bindings interface";
    case LIBRASTERIZER_ERROR_INVALIDSUBSAMPLING: return "invalid subsampling";
    case LIBRASTERIZER_ERROR_COULDNOTCOMPRESSPNGIMAGE: return "could not compress png image";
    case LIBRASTERIZER_ERROR_EMPTYPNGIMAGEDATA: return "empty png image data";
    case LIBRASTERIZER_ERROR_COULDNOTSTOREPNGIMAGE: return "could not store png image";
    case LIBRASTERIZER_ERROR_INVALIDXCOORDINATE: return "invalid x coordinate";
    case LIBRASTERIZER_ERROR_INVALIDYCOORDINATE: return "invalid y coordinate";
    case LIBRASTERIZER_ERROR_INVALIDXCOORDINATERANGE: return "invalid x coordinate range";
    case LIBRASTERIZER_ERROR_INVALIDYCOORDINATERANGE: return "invalid y coordinate range";
    case LIBRASTERIZER_ERROR_INVALIDPIXELDATACOUNT: return "invalid pixel data count";
    default: return "unknown error";
  }
}

/*************************************************************************************************************************
 Declaration of handle classes 
**************************************************************************************************************************/

typedef LibRasterizerHandle LibRasterizer_Base;
typedef LibRasterizerHandle LibRasterizer_ImageObject;
typedef LibRasterizerHandle LibRasterizer_LayerObject;
typedef LibRasterizerHandle LibRasterizer_Rasterizer;
typedef LibRasterizerHandle LibRasterizer_SliceStack;
typedef LibRasterizerHandle LibRasterizer_Context;

namespace LibRasterizer {

  /*************************************************************************************************************************
   Declaration of enums
  **************************************************************************************************************************/
  
  enum class eGeometryType : LibRasterizer_int32 {
    Unknown = 0,
    SolidGeometry = 1,
    OpenPolyline = 2,
    OpenHatches = 3
  };
  
  /*************************************************************************************************************************
   Declaration of structs
  **************************************************************************************************************************/
  
  #pragma pack (1)
  
  typedef struct {
      LibRasterizer_double m_Coordinates[2];
  } sPosition2D;
  
  #pragma pack ()
  
  /*************************************************************************************************************************
   Declaration of function pointers 
  **************************************************************************************************************************/
  
  /**
  * DistortionCallback - A callback function for distorting a layer
  *
  * @param[in] dOrigX - Original X Value
  * @param[in] dOrigY - Original Y Value
  * @param[out] pNewX - Distorted X Value
  * @param[out] pNewY - Distorted Y Value
  * @param[in] pUserData - User Data
  */
  typedef void(*DistortionCallback)(LibRasterizer_double, LibRasterizer_double, LibRasterizer_double *, LibRasterizer_double *, LibRasterizer_pvoid);
  
} // namespace LibRasterizer;

// define legacy C-names for enums, structs and function types
typedef LibRasterizer::eGeometryType eLibRasterizerGeometryType;
typedef LibRasterizer::sPosition2D sLibRasterizerPosition2D;
typedef LibRasterizer::DistortionCallback LibRasterizerDistortionCallback;

#endif // __LIBRASTERIZER_TYPES_HEADER_CPP
