/*++

Copyright (C) 2021 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.7.0-develop.

Abstract: This is an autogenerated C++ header file in order to allow easy
development of LibRasterizer. The implementer of LibRasterizer needs to
derive concrete classes from the abstract classes in this header.

Interface version: 1.0.0

*/


#ifndef __LIBRASTERIZER_CPPINTERFACES
#define __LIBRASTERIZER_CPPINTERFACES

#include <string>
#include <memory>

#include "librasterizer_types.hpp"



namespace LibRasterizer {
namespace Impl {

/**
 Forward declarations of class interfaces
*/
class IBase;
class IImageObject;
class ILayerObject;
class IRasterizer;
class ISliceStack;
class IContext;



/*************************************************************************************************************************
 Parameter Cache definitions
**************************************************************************************************************************/

class ParameterCache {
	public:
		virtual ~ParameterCache() {}
};

template <class T1> class ParameterCache_1 : public ParameterCache {
	private:
		T1 m_param1;
	public:
		ParameterCache_1 (const T1 & param1)
			: m_param1 (param1)
		{
		}

		void retrieveData (T1 & param1)
		{
			param1 = m_param1;
		}
};

template <class T1, class T2> class ParameterCache_2 : public ParameterCache {
	private:
		T1 m_param1;
		T2 m_param2;
	public:
		ParameterCache_2 (const T1 & param1, const T2 & param2)
			: m_param1 (param1), m_param2 (param2)
		{
		}

		void retrieveData (T1 & param1, T2 & param2)
		{
			param1 = m_param1;
			param2 = m_param2;
		}
};

template <class T1, class T2, class T3> class ParameterCache_3 : public ParameterCache {
	private:
		T1 m_param1;
		T2 m_param2;
		T3 m_param3;
	public:
		ParameterCache_3 (const T1 & param1, const T2 & param2, const T3 & param3)
			: m_param1 (param1), m_param2 (param2), m_param3 (param3)
		{
		}

		void retrieveData (T1 & param1, T2 & param2, T3 & param3)
		{
			param1 = m_param1;
			param2 = m_param2;
			param3 = m_param3;
		}
};


/*************************************************************************************************************************
 Class interface for Base 
**************************************************************************************************************************/

class IBase {
private:
	std::unique_ptr<ParameterCache> m_ParameterCache;
public:
	/**
	* IBase::~IBase - virtual destructor of IBase
	*/
	virtual ~IBase() {};

	/**
	* IBase::ReleaseBaseClassInterface - Releases ownership of a base class interface. Deletes the reference, if necessary.
	* @param[in] pIBase - The base class instance to release
	*/
	static void ReleaseBaseClassInterface(IBase* pIBase)
	{
		if (pIBase) {
			pIBase->DecRefCount();
		}
	};

	/**
	* IBase::AcquireBaseClassInterface - Acquires shared ownership of a base class interface.
	* @param[in] pIBase - The base class instance to acquire
	*/
	static void AcquireBaseClassInterface(IBase* pIBase)
	{
		if (pIBase) {
			pIBase->IncRefCount();
		}
	};


	/**
	* IBase::GetLastErrorMessage - Returns the last error registered of this class instance
	* @param[out] sErrorMessage - Message of the last error registered
	* @return Has an error been registered already
	*/
	virtual bool GetLastErrorMessage(std::string & sErrorMessage) = 0;

	/**
	* IBase::ClearErrorMessages - Clears all registered messages of this class instance
	*/
	virtual void ClearErrorMessages() = 0;

	/**
	* IBase::RegisterErrorMessage - Registers an error message with this class instance
	* @param[in] sErrorMessage - Error message to register
	*/
	virtual void RegisterErrorMessage(const std::string & sErrorMessage) = 0;

	/**
	* IBase::IncRefCount - Increases the reference count of a class instance
	*/
	virtual void IncRefCount() = 0;

	/**
	* IBase::DecRefCount - Decreases the reference count of a class instance and free releases it, if the last reference has been removed
	* @return Has the object been released
	*/
	virtual bool DecRefCount() = 0;

	/**
	* IBase::_setCache - set parameter cache of object
	*/
	void _setCache(ParameterCache * pCache)
	{
		m_ParameterCache.reset(pCache);
	}

	/**
	* IBase::_getCache - returns parameter cache of object
	*/
	ParameterCache* _getCache()
	{
		return m_ParameterCache.get();
	}

};


/**
 Definition of a shared pointer class for IBase
*/
template<class T>
class IBaseSharedPtr : public std::shared_ptr<T>
{
public:
	explicit IBaseSharedPtr(T* t = nullptr)
		: std::shared_ptr<T>(t, IBase::ReleaseBaseClassInterface)
	{
		t->IncRefCount();
	}

	// Reset function, as it also needs to properly set the deleter.
	void reset(T* t = nullptr)
	{
		std::shared_ptr<T>::reset(t, IBase::ReleaseBaseClassInterface);
	}

	// Get-function that increases the Base class's reference count
	T* getCoOwningPtr()
	{
		T* t = this->get();
		t->IncRefCount();
		return t;
	}
};


typedef IBaseSharedPtr<IBase> PIBase;


/*************************************************************************************************************************
 Class interface for ImageObject 
**************************************************************************************************************************/

class IImageObject : public virtual IBase {
public:
	/**
	* IImageObject::GetDPI - Returns DPI values in X and Y.
	* @param[out] dDPIValueX - DPI value in X
	* @param[out] dDPIValueY - DPI value in Y
	*/
	virtual void GetDPI(LibRasterizer_double & dDPIValueX, LibRasterizer_double & dDPIValueY) = 0;

	/**
	* IImageObject::GetSize - Returns image sizes.
	* @param[out] dSizeX - Size in X in mm
	* @param[out] dSizeY - Size in Y in mm
	*/
	virtual void GetSize(LibRasterizer_double & dSizeX, LibRasterizer_double & dSizeY) = 0;

	/**
	* IImageObject::GetPixelSize - Returns image pixel sizes.
	* @param[out] nPixelSizeX - Number of pixels in X
	* @param[out] nPixelSizeY - Number of pixels in Y
	*/
	virtual void GetPixelSize(LibRasterizer_uint32 & nPixelSizeX, LibRasterizer_uint32 & nPixelSizeY) = 0;

	/**
	* IImageObject::SaveToPNG - Saves image in a PNG file.
	* @param[in] sFileName - Filename to save image to.
	*/
	virtual void SaveToPNG(const std::string & sFileName) = 0;

	/**
	* IImageObject::Clear - Sets all pixels to a single value.
	* @param[in] nValue - Pixel value.
	*/
	virtual void Clear(const LibRasterizer_uint8 nValue) = 0;

	/**
	* IImageObject::GetPixel - Returns one pixel of an image.
	* @param[in] nX - Pixel coordinate in X
	* @param[in] nY - Pixel coordinate in Y
	* @return Pixel value at this position
	*/
	virtual LibRasterizer_uint8 GetPixel(const LibRasterizer_uint32 nX, const LibRasterizer_uint32 nY) = 0;

	/**
	* IImageObject::SetPixel - Sets one pixel of an image.
	* @param[in] nX - Pixel coordinate in X
	* @param[in] nY - Pixel coordinate in Y
	* @param[in] nValue - New Pixel value at this position
	*/
	virtual void SetPixel(const LibRasterizer_uint32 nX, const LibRasterizer_uint32 nY, const LibRasterizer_uint8 nValue) = 0;

	/**
	* IImageObject::GetPixelRange - Returns a subset of an image or the whole image data.
	* @param[in] nXMin - Min Pixel coordinate in X. MUST be within image bounds.
	* @param[in] nYMin - Min Pixel coordinate in Y. MUST be within image bounds.
	* @param[in] nXMax - Max Pixel coordinate in X. MUST be within image bounds. MUST be larger or equal than MinX
	* @param[in] nYMax - Max Pixel coordinate in Y. MUST be within image bounds. MUST be larger or equal than MinY
	* @param[in] nValueBufferSize - Number of elements in buffer
	* @param[out] pValueNeededCount - will be filled with the count of the written structs, or needed buffer size.
	* @param[out] pValueBuffer - uint8 buffer of Pixel values of the rectangle, rowwise array. MUST have the exact number of pixels in size.
	*/
	virtual void GetPixelRange(const LibRasterizer_uint32 nXMin, const LibRasterizer_uint32 nYMin, const LibRasterizer_uint32 nXMax, const LibRasterizer_uint32 nYMax, LibRasterizer_uint64 nValueBufferSize, LibRasterizer_uint64* pValueNeededCount, LibRasterizer_uint8 * pValueBuffer) = 0;

	/**
	* IImageObject::SetPixelRange - Exchanges a subset of an image or the whole image data.
	* @param[in] nXMin - Min Pixel coordinate in X. MUST be within image bounds.
	* @param[in] nYMin - Min Pixel coordinate in Y. MUST be within image bounds.
	* @param[in] nXMax - Max Pixel coordinate in X. MUST be within image bounds. MUST be larger or equal than MinX
	* @param[in] nYMax - Max Pixel coordinate in Y. MUST be within image bounds. MUST be larger or equal than MinY
	* @param[in] nValueBufferSize - Number of elements in buffer
	* @param[in] pValueBuffer - New pixel values of the rectangle, rowwise array. MUST have the exact number of pixels in size.
	*/
	virtual void SetPixelRange(const LibRasterizer_uint32 nXMin, const LibRasterizer_uint32 nYMin, const LibRasterizer_uint32 nXMax, const LibRasterizer_uint32 nYMax, const LibRasterizer_uint64 nValueBufferSize, const LibRasterizer_uint8 * pValueBuffer) = 0;

};

typedef IBaseSharedPtr<IImageObject> PIImageObject;


/*************************************************************************************************************************
 Class interface for LayerObject 
**************************************************************************************************************************/

class ILayerObject : public virtual IBase {
public:
	/**
	* ILayerObject::GetEntityCount - Returns count of Entity in Layer.
	* @return Number of entity in layer.
	*/
	virtual LibRasterizer_uint32 GetEntityCount() = 0;

	/**
	* ILayerObject::GetEntity - Returns a entity in a layer.
	* @param[in] nEntityIndex - Index of entity in layer.
	* @param[out] eGeometryType - Geometry type of Entity.
	* @param[in] nPointsBufferSize - Number of elements in buffer
	* @param[out] pPointsNeededCount - will be filled with the count of the written structs, or needed buffer size.
	* @param[out] pPointsBuffer - Position2D buffer of Points of Entity.
	*/
	virtual void GetEntity(const LibRasterizer_uint32 nEntityIndex, LibRasterizer::eGeometryType & eGeometryType, LibRasterizer_uint64 nPointsBufferSize, LibRasterizer_uint64* pPointsNeededCount, LibRasterizer::sPosition2D * pPointsBuffer) = 0;

	/**
	* ILayerObject::AddEntity - Adds a entity to a layer.
	* @param[in] nPointsBufferSize - Number of elements in buffer
	* @param[in] pPointsBuffer - Points of Entity.
	* @param[in] eGeometryType - Geometry type of Entity.
	* @return Index of entity in layer.
	*/
	virtual LibRasterizer_uint32 AddEntity(const LibRasterizer_uint64 nPointsBufferSize, const LibRasterizer::sPosition2D * pPointsBuffer, const LibRasterizer::eGeometryType eGeometryType) = 0;

	/**
	* ILayerObject::RemoveSelfIntersections - Removes self-intersections of a layer.
	* @return New Layer Object Instance
	*/
	virtual ILayerObject * RemoveSelfIntersections() = 0;

	/**
	* ILayerObject::MergeInto - Merges layer into another layer object.
	* @param[in] pOtherLayerObject - Layer object to modify.
	*/
	virtual void MergeInto(ILayerObject* pOtherLayerObject) = 0;

	/**
	* ILayerObject::CalculateOffset - Calculates an offset to a layer.
	* @param[in] dOffsetValue - Offset in mm
	* @return Offsetted Layer Object Instance
	*/
	virtual ILayerObject * CalculateOffset(const LibRasterizer_double dOffsetValue) = 0;

	/**
	* ILayerObject::ThickenPolylines - Thickens up polylines of a layer.
	* @param[in] dThickness - Thickness in mm
	* @return Offsetted Layer Object Instance
	*/
	virtual ILayerObject * ThickenPolylines(const LibRasterizer_double dThickness) = 0;

	/**
	* ILayerObject::ThickenHatches - Thickens up hatches of a layer.
	* @param[in] dThickness - Thickness in mm
	* @return Offsetted Layer Object Instance
	*/
	virtual ILayerObject * ThickenHatches(const LibRasterizer_double dThickness) = 0;

	/**
	* ILayerObject::DistortLayer - Distorts a layer with a callback function
	* @param[in] dRefinementValue - Lines longer than this value are split up in smaller segments to not loose distortion information.
	* @param[in] pDistortionCallback - callback function
	* @param[in] nUserData - pointer to arbitrary user data that is passed without modification to the callback.
	* @return Offsetted Layer Object Instance
	*/
	virtual ILayerObject * DistortLayer(const LibRasterizer_double dRefinementValue, const LibRasterizer::DistortionCallback pDistortionCallback, const LibRasterizer_pvoid pUserData) = 0;

};

typedef IBaseSharedPtr<ILayerObject> PILayerObject;


/*************************************************************************************************************************
 Class interface for Rasterizer 
**************************************************************************************************************************/

class IRasterizer : public virtual IBase {
public:
	/**
	* IRasterizer::GetDPI - Returns DPI values in X and Y.
	* @param[out] dDPIValueX - DPI value in X
	* @param[out] dDPIValueY - DPI value in Y
	*/
	virtual void GetDPI(LibRasterizer_double & dDPIValueX, LibRasterizer_double & dDPIValueY) = 0;

	/**
	* IRasterizer::GetSize - Returns image sizes.
	* @param[out] dSizeX - Size in X in mm
	* @param[out] dSizeY - Size in Y in mm
	*/
	virtual void GetSize(LibRasterizer_double & dSizeX, LibRasterizer_double & dSizeY) = 0;

	/**
	* IRasterizer::GetPixelSize - Returns image pixel sizes.
	* @param[out] nPixelSizeX - Number of pixels in X
	* @param[out] nPixelSizeY - Number of pixels in Y
	*/
	virtual void GetPixelSize(LibRasterizer_uint32 & nPixelSizeX, LibRasterizer_uint32 & nPixelSizeY) = 0;

	/**
	* IRasterizer::GetPosition - Returns image position.
	* @param[out] dPositionX - Position in X in mm
	* @param[out] dPositionY - Position in Y in mm
	*/
	virtual void GetPosition(LibRasterizer_double & dPositionX, LibRasterizer_double & dPositionY) = 0;

	/**
	* IRasterizer::SetPosition - Sets image position.
	* @param[in] dPositionX - Position in X in mm
	* @param[in] dPositionY - Position in Y in mm
	*/
	virtual void SetPosition(const LibRasterizer_double dPositionX, const LibRasterizer_double dPositionY) = 0;

	/**
	* IRasterizer::SetSubsampling - Set subsampling values in X and Y.
	* @param[in] nSubsamplingX - Subsampling in X
	* @param[in] nSubsamplingY - Subsampling in Y
	*/
	virtual void SetSubsampling(const LibRasterizer_uint32 nSubsamplingX, const LibRasterizer_uint32 nSubsamplingY) = 0;

	/**
	* IRasterizer::GetSubsampling - Returns subsampling values in X and Y.
	* @param[out] nSubsamplingX - Subsampling in X
	* @param[out] nSubsamplingY - Subsampling in Y
	*/
	virtual void GetSubsampling(LibRasterizer_uint32 & nSubsamplingX, LibRasterizer_uint32 & nSubsamplingY) = 0;

	/**
	* IRasterizer::AddLayer - Adds a layer object to subsample.
	* @param[in] pLayerObject - Layer object instance.
	*/
	virtual void AddLayer(ILayerObject* pLayerObject) = 0;

	/**
	* IRasterizer::CalculateImage - Calculates the image.
	* @param[in] bAntialiased - Image output is greyscale if true, black and white with 0.5 threshold if false.
	* @return ImageObject Instance
	*/
	virtual IImageObject * CalculateImage(const bool bAntialiased) = 0;

};

typedef IBaseSharedPtr<IRasterizer> PIRasterizer;


/*************************************************************************************************************************
 Class interface for SliceStack 
**************************************************************************************************************************/

class ISliceStack : public virtual IBase {
public:
	/**
	* ISliceStack::GetLayerCount - Returns layer count of slice stack.
	* @return Returns number of layers
	*/
	virtual LibRasterizer_uint32 GetLayerCount() = 0;

	/**
	* ISliceStack::GetLayerThickness - Returns layer thickness of slice stack.
	* @return Returns layer thickness in mm
	*/
	virtual LibRasterizer_double GetLayerThickness() = 0;

	/**
	* ISliceStack::GetBottomZ - Returns Z value of bottom of slice stack in mm.
	* @return Z-Value of bottom of slice stack
	*/
	virtual LibRasterizer_double GetBottomZ() = 0;

	/**
	* ISliceStack::GetTopZ - Returns Z value of top of slice stack in mm.
	* @return Z-Value of top of slice stack
	*/
	virtual LibRasterizer_double GetTopZ() = 0;

	/**
	* ISliceStack::GetLayer - Returns layer object for a given Z Value.
	* @param[in] nLayerIndex - Index of layer.
	* @return LayerObject Instance
	*/
	virtual ILayerObject * GetLayer(const LibRasterizer_uint32 nLayerIndex) = 0;

};

typedef IBaseSharedPtr<ISliceStack> PISliceStack;


/*************************************************************************************************************************
 Class interface for Context 
**************************************************************************************************************************/

class IContext : public virtual IBase {
public:
	/**
	* IContext::CreateSliceStack - creates an empty slice stack.
	* @param[in] nLayerCount - Number of layers. MUST be positive.
	* @param[in] dLayerThickness - Layerthickness in mm. MUST be positive.
	* @param[in] dBottomZ - Bottom Z value in mm.
	* @return Instance of Slice Stack
	*/
	virtual ISliceStack * CreateSliceStack(const LibRasterizer_uint32 nLayerCount, const LibRasterizer_double dLayerThickness, const LibRasterizer_double dBottomZ) = 0;

	/**
	* IContext::CreateEmptyLayer - creates an empty layer object.
	* @return Instance of a Layer Object
	*/
	virtual ILayerObject * CreateEmptyLayer() = 0;

	/**
	* IContext::CreateRasterizer - creates a rasterizer object.
	* @param[in] nPixelSizeX - Pixel size in X. MUST be positive.
	* @param[in] nPixelSizeY - Pixel size in Y. MUST be positive.
	* @param[in] dDPIX - DPI in X. MUST be positive.
	* @param[in] dDPIY - DPI in Y. MUST be positive.
	* @return Instance of Rasterizer
	*/
	virtual IRasterizer * CreateRasterizer(const LibRasterizer_uint32 nPixelSizeX, const LibRasterizer_uint32 nPixelSizeY, const LibRasterizer_double dDPIX, const LibRasterizer_double dDPIY) = 0;

};

typedef IBaseSharedPtr<IContext> PIContext;


/*************************************************************************************************************************
 Global functions declarations
**************************************************************************************************************************/
class CWrapper {
public:
	/**
	* Ilibrasterizer::GetVersion - retrieves the binary version of this library.
	* @param[out] nMajor - returns the major version of this library
	* @param[out] nMinor - returns the minor version of this library
	* @param[out] nMicro - returns the micro version of this library
	*/
	static void GetVersion(LibRasterizer_uint32 & nMajor, LibRasterizer_uint32 & nMinor, LibRasterizer_uint32 & nMicro);

	/**
	* Ilibrasterizer::GetLastError - Returns the last error recorded on this object
	* @param[in] pInstance - Instance Handle
	* @param[out] sErrorMessage - Message of the last error
	* @return Is there a last error to query
	*/
	static bool GetLastError(IBase* pInstance, std::string & sErrorMessage);

	/**
	* Ilibrasterizer::ReleaseInstance - Releases shared ownership of an Instance
	* @param[in] pInstance - Instance Handle
	*/
	static void ReleaseInstance(IBase* pInstance);

	/**
	* Ilibrasterizer::AcquireInstance - Acquires shared ownership of an Instance
	* @param[in] pInstance - Instance Handle
	*/
	static void AcquireInstance(IBase* pInstance);

	/**
	* Ilibrasterizer::CreateContext - Creates a new context.
	* @return New Context instance
	*/
	static IContext * CreateContext();

};

LibRasterizerResult LibRasterizer_GetProcAddress (const char * pProcName, void ** ppProcAddress);

} // namespace Impl
} // namespace LibRasterizer

#endif // __LIBRASTERIZER_CPPINTERFACES
