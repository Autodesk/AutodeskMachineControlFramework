/*++

Copyright (C) 2021 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.7.0-develop.

Abstract: This is an autogenerated C++-Header file in order to allow an easy
 use of LibRasterizer

Interface version: 1.0.0

*/

#ifndef __LIBRASTERIZER_DYNAMICHEADER_CPPTYPES
#define __LIBRASTERIZER_DYNAMICHEADER_CPPTYPES

#include "librasterizer_types.hpp"



/*************************************************************************************************************************
 Class definition for Base
**************************************************************************************************************************/

/*************************************************************************************************************************
 Class definition for ImageObject
**************************************************************************************************************************/

/**
* Returns DPI values in X and Y.
*
* @param[in] pImageObject - ImageObject instance.
* @param[out] pDPIValueX - DPI value in X
* @param[out] pDPIValueY - DPI value in Y
* @return error code or 0 (success)
*/
typedef LibRasterizerResult (*PLibRasterizerImageObject_GetDPIPtr) (LibRasterizer_ImageObject pImageObject, LibRasterizer_double * pDPIValueX, LibRasterizer_double * pDPIValueY);

/**
* Returns image sizes.
*
* @param[in] pImageObject - ImageObject instance.
* @param[out] pSizeX - Size in X in mm
* @param[out] pSizeY - Size in Y in mm
* @return error code or 0 (success)
*/
typedef LibRasterizerResult (*PLibRasterizerImageObject_GetSizePtr) (LibRasterizer_ImageObject pImageObject, LibRasterizer_double * pSizeX, LibRasterizer_double * pSizeY);

/**
* Returns image pixel sizes.
*
* @param[in] pImageObject - ImageObject instance.
* @param[out] pPixelSizeX - Number of pixels in X
* @param[out] pPixelSizeY - Number of pixels in Y
* @return error code or 0 (success)
*/
typedef LibRasterizerResult (*PLibRasterizerImageObject_GetPixelSizePtr) (LibRasterizer_ImageObject pImageObject, LibRasterizer_uint32 * pPixelSizeX, LibRasterizer_uint32 * pPixelSizeY);

/**
* Saves image in a PNG file.
*
* @param[in] pImageObject - ImageObject instance.
* @param[in] pFileName - Filename to save image to.
* @return error code or 0 (success)
*/
typedef LibRasterizerResult (*PLibRasterizerImageObject_SaveToPNGPtr) (LibRasterizer_ImageObject pImageObject, const char * pFileName);

/**
* Sets all pixels to a single value.
*
* @param[in] pImageObject - ImageObject instance.
* @param[in] nValue - Pixel value.
* @return error code or 0 (success)
*/
typedef LibRasterizerResult (*PLibRasterizerImageObject_ClearPtr) (LibRasterizer_ImageObject pImageObject, LibRasterizer_uint8 nValue);

/**
* Returns one pixel of an image.
*
* @param[in] pImageObject - ImageObject instance.
* @param[in] nX - Pixel coordinate in X
* @param[in] nY - Pixel coordinate in Y
* @param[out] pValue - Pixel value at this position
* @return error code or 0 (success)
*/
typedef LibRasterizerResult (*PLibRasterizerImageObject_GetPixelPtr) (LibRasterizer_ImageObject pImageObject, LibRasterizer_uint32 nX, LibRasterizer_uint32 nY, LibRasterizer_uint8 * pValue);

/**
* Sets one pixel of an image.
*
* @param[in] pImageObject - ImageObject instance.
* @param[in] nX - Pixel coordinate in X
* @param[in] nY - Pixel coordinate in Y
* @param[in] nValue - New Pixel value at this position
* @return error code or 0 (success)
*/
typedef LibRasterizerResult (*PLibRasterizerImageObject_SetPixelPtr) (LibRasterizer_ImageObject pImageObject, LibRasterizer_uint32 nX, LibRasterizer_uint32 nY, LibRasterizer_uint8 nValue);

/**
* Returns a subset of an image or the whole image data.
*
* @param[in] pImageObject - ImageObject instance.
* @param[in] nXMin - Min Pixel coordinate in X. MUST be within image bounds.
* @param[in] nYMin - Min Pixel coordinate in Y. MUST be within image bounds.
* @param[in] nXMax - Max Pixel coordinate in X. MUST be within image bounds. MUST be larger or equal than MinX
* @param[in] nYMax - Max Pixel coordinate in Y. MUST be within image bounds. MUST be larger or equal than MinY
* @param[in] nValueBufferSize - Number of elements in buffer
* @param[out] pValueNeededCount - will be filled with the count of the written elements, or needed buffer size.
* @param[out] pValueBuffer - uint8 buffer of Pixel values of the rectangle, rowwise array. MUST have the exact number of pixels in size.
* @return error code or 0 (success)
*/
typedef LibRasterizerResult (*PLibRasterizerImageObject_GetPixelRangePtr) (LibRasterizer_ImageObject pImageObject, LibRasterizer_uint32 nXMin, LibRasterizer_uint32 nYMin, LibRasterizer_uint32 nXMax, LibRasterizer_uint32 nYMax, const LibRasterizer_uint64 nValueBufferSize, LibRasterizer_uint64* pValueNeededCount, LibRasterizer_uint8 * pValueBuffer);

/**
* Exchanges a subset of an image or the whole image data.
*
* @param[in] pImageObject - ImageObject instance.
* @param[in] nXMin - Min Pixel coordinate in X. MUST be within image bounds.
* @param[in] nYMin - Min Pixel coordinate in Y. MUST be within image bounds.
* @param[in] nXMax - Max Pixel coordinate in X. MUST be within image bounds. MUST be larger or equal than MinX
* @param[in] nYMax - Max Pixel coordinate in Y. MUST be within image bounds. MUST be larger or equal than MinY
* @param[in] nValueBufferSize - Number of elements in buffer
* @param[in] pValueBuffer - uint8 buffer of New pixel values of the rectangle, rowwise array. MUST have the exact number of pixels in size.
* @return error code or 0 (success)
*/
typedef LibRasterizerResult (*PLibRasterizerImageObject_SetPixelRangePtr) (LibRasterizer_ImageObject pImageObject, LibRasterizer_uint32 nXMin, LibRasterizer_uint32 nYMin, LibRasterizer_uint32 nXMax, LibRasterizer_uint32 nYMax, LibRasterizer_uint64 nValueBufferSize, const LibRasterizer_uint8 * pValueBuffer);

/*************************************************************************************************************************
 Class definition for LayerObject
**************************************************************************************************************************/

/**
* Returns count of Entity in Layer.
*
* @param[in] pLayerObject - LayerObject instance.
* @param[out] pEntityCount - Number of entity in layer.
* @return error code or 0 (success)
*/
typedef LibRasterizerResult (*PLibRasterizerLayerObject_GetEntityCountPtr) (LibRasterizer_LayerObject pLayerObject, LibRasterizer_uint32 * pEntityCount);

/**
* Returns a entity in a layer.
*
* @param[in] pLayerObject - LayerObject instance.
* @param[in] nEntityIndex - Index of entity in layer.
* @param[out] pGeometryType - Geometry type of Entity.
* @param[in] nPointsBufferSize - Number of elements in buffer
* @param[out] pPointsNeededCount - will be filled with the count of the written elements, or needed buffer size.
* @param[out] pPointsBuffer - Position2D buffer of Points of Entity.
* @return error code or 0 (success)
*/
typedef LibRasterizerResult (*PLibRasterizerLayerObject_GetEntityPtr) (LibRasterizer_LayerObject pLayerObject, LibRasterizer_uint32 nEntityIndex, LibRasterizer::eGeometryType * pGeometryType, const LibRasterizer_uint64 nPointsBufferSize, LibRasterizer_uint64* pPointsNeededCount, LibRasterizer::sPosition2D * pPointsBuffer);

/**
* Adds a entity to a layer.
*
* @param[in] pLayerObject - LayerObject instance.
* @param[in] nPointsBufferSize - Number of elements in buffer
* @param[in] pPointsBuffer - Position2D buffer of Points of Entity.
* @param[in] eGeometryType - Geometry type of Entity.
* @param[out] pEntityIndex - Index of entity in layer.
* @return error code or 0 (success)
*/
typedef LibRasterizerResult (*PLibRasterizerLayerObject_AddEntityPtr) (LibRasterizer_LayerObject pLayerObject, LibRasterizer_uint64 nPointsBufferSize, const LibRasterizer::sPosition2D * pPointsBuffer, LibRasterizer::eGeometryType eGeometryType, LibRasterizer_uint32 * pEntityIndex);

/**
* Removes self-intersections of a layer.
*
* @param[in] pLayerObject - LayerObject instance.
* @param[out] pLayerObjectInstance - New Layer Object Instance
* @return error code or 0 (success)
*/
typedef LibRasterizerResult (*PLibRasterizerLayerObject_RemoveSelfIntersectionsPtr) (LibRasterizer_LayerObject pLayerObject, LibRasterizer_LayerObject * pLayerObjectInstance);

/**
* Merges layer into another layer object.
*
* @param[in] pLayerObject - LayerObject instance.
* @param[in] pOtherLayerObject - Layer object to modify.
* @return error code or 0 (success)
*/
typedef LibRasterizerResult (*PLibRasterizerLayerObject_MergeIntoPtr) (LibRasterizer_LayerObject pLayerObject, LibRasterizer_LayerObject pOtherLayerObject);

/**
* Calculates an offset to a layer.
*
* @param[in] pLayerObject - LayerObject instance.
* @param[in] dOffsetValue - Offset in mm
* @param[out] pLayerObjectInstance - Offsetted Layer Object Instance
* @return error code or 0 (success)
*/
typedef LibRasterizerResult (*PLibRasterizerLayerObject_CalculateOffsetPtr) (LibRasterizer_LayerObject pLayerObject, LibRasterizer_double dOffsetValue, LibRasterizer_LayerObject * pLayerObjectInstance);

/**
* Thickens up polylines of a layer.
*
* @param[in] pLayerObject - LayerObject instance.
* @param[in] dThickness - Thickness in mm
* @param[out] pLayerObjectInstance - Offsetted Layer Object Instance
* @return error code or 0 (success)
*/
typedef LibRasterizerResult (*PLibRasterizerLayerObject_ThickenPolylinesPtr) (LibRasterizer_LayerObject pLayerObject, LibRasterizer_double dThickness, LibRasterizer_LayerObject * pLayerObjectInstance);

/**
* Thickens up hatches of a layer.
*
* @param[in] pLayerObject - LayerObject instance.
* @param[in] dThickness - Thickness in mm
* @param[out] pLayerObjectInstance - Offsetted Layer Object Instance
* @return error code or 0 (success)
*/
typedef LibRasterizerResult (*PLibRasterizerLayerObject_ThickenHatchesPtr) (LibRasterizer_LayerObject pLayerObject, LibRasterizer_double dThickness, LibRasterizer_LayerObject * pLayerObjectInstance);

/**
* Distorts a layer with a callback function
*
* @param[in] pLayerObject - LayerObject instance.
* @param[in] dRefinementValue - Lines longer than this value are split up in smaller segments to not loose distortion information.
* @param[in] pDistortionCallback - pointer to the callback function.
* @param[in] pUserData - pointer to arbitrary user data that is passed without modification to the callback.
* @param[out] pLayerObjectInstance - Offsetted Layer Object Instance
* @return error code or 0 (success)
*/
typedef LibRasterizerResult (*PLibRasterizerLayerObject_DistortLayerPtr) (LibRasterizer_LayerObject pLayerObject, LibRasterizer_double dRefinementValue, LibRasterizer::DistortionCallback pDistortionCallback, LibRasterizer_pvoid pUserData, LibRasterizer_LayerObject * pLayerObjectInstance);

/*************************************************************************************************************************
 Class definition for Rasterizer
**************************************************************************************************************************/

/**
* Returns DPI values in X and Y.
*
* @param[in] pRasterizer - Rasterizer instance.
* @param[out] pDPIValueX - DPI value in X
* @param[out] pDPIValueY - DPI value in Y
* @return error code or 0 (success)
*/
typedef LibRasterizerResult (*PLibRasterizerRasterizer_GetDPIPtr) (LibRasterizer_Rasterizer pRasterizer, LibRasterizer_double * pDPIValueX, LibRasterizer_double * pDPIValueY);

/**
* Returns image sizes.
*
* @param[in] pRasterizer - Rasterizer instance.
* @param[out] pSizeX - Size in X in mm
* @param[out] pSizeY - Size in Y in mm
* @return error code or 0 (success)
*/
typedef LibRasterizerResult (*PLibRasterizerRasterizer_GetSizePtr) (LibRasterizer_Rasterizer pRasterizer, LibRasterizer_double * pSizeX, LibRasterizer_double * pSizeY);

/**
* Returns image pixel sizes.
*
* @param[in] pRasterizer - Rasterizer instance.
* @param[out] pPixelSizeX - Number of pixels in X
* @param[out] pPixelSizeY - Number of pixels in Y
* @return error code or 0 (success)
*/
typedef LibRasterizerResult (*PLibRasterizerRasterizer_GetPixelSizePtr) (LibRasterizer_Rasterizer pRasterizer, LibRasterizer_uint32 * pPixelSizeX, LibRasterizer_uint32 * pPixelSizeY);

/**
* Returns image position.
*
* @param[in] pRasterizer - Rasterizer instance.
* @param[out] pPositionX - Position in X in mm
* @param[out] pPositionY - Position in Y in mm
* @return error code or 0 (success)
*/
typedef LibRasterizerResult (*PLibRasterizerRasterizer_GetPositionPtr) (LibRasterizer_Rasterizer pRasterizer, LibRasterizer_double * pPositionX, LibRasterizer_double * pPositionY);

/**
* Sets image position.
*
* @param[in] pRasterizer - Rasterizer instance.
* @param[in] dPositionX - Position in X in mm
* @param[in] dPositionY - Position in Y in mm
* @return error code or 0 (success)
*/
typedef LibRasterizerResult (*PLibRasterizerRasterizer_SetPositionPtr) (LibRasterizer_Rasterizer pRasterizer, LibRasterizer_double dPositionX, LibRasterizer_double dPositionY);

/**
* Set subsampling values in X and Y.
*
* @param[in] pRasterizer - Rasterizer instance.
* @param[in] nSubsamplingX - Subsampling in X
* @param[in] nSubsamplingY - Subsampling in Y
* @return error code or 0 (success)
*/
typedef LibRasterizerResult (*PLibRasterizerRasterizer_SetSubsamplingPtr) (LibRasterizer_Rasterizer pRasterizer, LibRasterizer_uint32 nSubsamplingX, LibRasterizer_uint32 nSubsamplingY);

/**
* Returns subsampling values in X and Y.
*
* @param[in] pRasterizer - Rasterizer instance.
* @param[out] pSubsamplingX - Subsampling in X
* @param[out] pSubsamplingY - Subsampling in Y
* @return error code or 0 (success)
*/
typedef LibRasterizerResult (*PLibRasterizerRasterizer_GetSubsamplingPtr) (LibRasterizer_Rasterizer pRasterizer, LibRasterizer_uint32 * pSubsamplingX, LibRasterizer_uint32 * pSubsamplingY);

/**
* Adds a layer object to subsample.
*
* @param[in] pRasterizer - Rasterizer instance.
* @param[in] pLayerObject - Layer object instance.
* @return error code or 0 (success)
*/
typedef LibRasterizerResult (*PLibRasterizerRasterizer_AddLayerPtr) (LibRasterizer_Rasterizer pRasterizer, LibRasterizer_LayerObject pLayerObject);

/**
* Calculates the image.
*
* @param[in] pRasterizer - Rasterizer instance.
* @param[in] bAntialiased - Image output is greyscale if true, black and white with 0.5 threshold if false.
* @param[out] pImageObject - ImageObject Instance
* @return error code or 0 (success)
*/
typedef LibRasterizerResult (*PLibRasterizerRasterizer_CalculateImagePtr) (LibRasterizer_Rasterizer pRasterizer, bool bAntialiased, LibRasterizer_ImageObject * pImageObject);

/*************************************************************************************************************************
 Class definition for SliceStack
**************************************************************************************************************************/

/**
* Returns layer count of slice stack.
*
* @param[in] pSliceStack - SliceStack instance.
* @param[out] pLayerCount - Returns number of layers
* @return error code or 0 (success)
*/
typedef LibRasterizerResult (*PLibRasterizerSliceStack_GetLayerCountPtr) (LibRasterizer_SliceStack pSliceStack, LibRasterizer_uint32 * pLayerCount);

/**
* Returns layer thickness of slice stack.
*
* @param[in] pSliceStack - SliceStack instance.
* @param[out] pLayerThickness - Returns layer thickness in mm
* @return error code or 0 (success)
*/
typedef LibRasterizerResult (*PLibRasterizerSliceStack_GetLayerThicknessPtr) (LibRasterizer_SliceStack pSliceStack, LibRasterizer_double * pLayerThickness);

/**
* Returns Z value of bottom of slice stack in mm.
*
* @param[in] pSliceStack - SliceStack instance.
* @param[out] pZValue - Z-Value of bottom of slice stack
* @return error code or 0 (success)
*/
typedef LibRasterizerResult (*PLibRasterizerSliceStack_GetBottomZPtr) (LibRasterizer_SliceStack pSliceStack, LibRasterizer_double * pZValue);

/**
* Returns Z value of top of slice stack in mm.
*
* @param[in] pSliceStack - SliceStack instance.
* @param[out] pZValue - Z-Value of top of slice stack
* @return error code or 0 (success)
*/
typedef LibRasterizerResult (*PLibRasterizerSliceStack_GetTopZPtr) (LibRasterizer_SliceStack pSliceStack, LibRasterizer_double * pZValue);

/**
* Returns layer object for a given Z Value.
*
* @param[in] pSliceStack - SliceStack instance.
* @param[in] nLayerIndex - Index of layer.
* @param[out] pLayerObject - LayerObject Instance
* @return error code or 0 (success)
*/
typedef LibRasterizerResult (*PLibRasterizerSliceStack_GetLayerPtr) (LibRasterizer_SliceStack pSliceStack, LibRasterizer_uint32 nLayerIndex, LibRasterizer_LayerObject * pLayerObject);

/*************************************************************************************************************************
 Class definition for Context
**************************************************************************************************************************/

/**
* creates an empty slice stack.
*
* @param[in] pContext - Context instance.
* @param[in] nLayerCount - Number of layers. MUST be positive.
* @param[in] dLayerThickness - Layerthickness in mm. MUST be positive.
* @param[in] dBottomZ - Bottom Z value in mm.
* @param[out] pSliceStackInstance - Instance of Slice Stack
* @return error code or 0 (success)
*/
typedef LibRasterizerResult (*PLibRasterizerContext_CreateSliceStackPtr) (LibRasterizer_Context pContext, LibRasterizer_uint32 nLayerCount, LibRasterizer_double dLayerThickness, LibRasterizer_double dBottomZ, LibRasterizer_SliceStack * pSliceStackInstance);

/**
* creates an empty layer object.
*
* @param[in] pContext - Context instance.
* @param[out] pLayerObject - Instance of a Layer Object
* @return error code or 0 (success)
*/
typedef LibRasterizerResult (*PLibRasterizerContext_CreateEmptyLayerPtr) (LibRasterizer_Context pContext, LibRasterizer_LayerObject * pLayerObject);

/**
* creates a rasterizer object.
*
* @param[in] pContext - Context instance.
* @param[in] nPixelSizeX - Pixel size in X. MUST be positive.
* @param[in] nPixelSizeY - Pixel size in Y. MUST be positive.
* @param[in] dDPIX - DPI in X. MUST be positive.
* @param[in] dDPIY - DPI in Y. MUST be positive.
* @param[out] pRasterizerInstance - Instance of Rasterizer
* @return error code or 0 (success)
*/
typedef LibRasterizerResult (*PLibRasterizerContext_CreateRasterizerPtr) (LibRasterizer_Context pContext, LibRasterizer_uint32 nPixelSizeX, LibRasterizer_uint32 nPixelSizeY, LibRasterizer_double dDPIX, LibRasterizer_double dDPIY, LibRasterizer_Rasterizer * pRasterizerInstance);

/*************************************************************************************************************************
 Global functions
**************************************************************************************************************************/

/**
* retrieves the binary version of this library.
*
* @param[out] pMajor - returns the major version of this library
* @param[out] pMinor - returns the minor version of this library
* @param[out] pMicro - returns the micro version of this library
* @return error code or 0 (success)
*/
typedef LibRasterizerResult (*PLibRasterizerGetVersionPtr) (LibRasterizer_uint32 * pMajor, LibRasterizer_uint32 * pMinor, LibRasterizer_uint32 * pMicro);

/**
* Returns the last error recorded on this object
*
* @param[in] pInstance - Instance Handle
* @param[in] nErrorMessageBufferSize - size of the buffer (including trailing 0)
* @param[out] pErrorMessageNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pErrorMessageBuffer -  buffer of Message of the last error, may be NULL
* @param[out] pHasError - Is there a last error to query
* @return error code or 0 (success)
*/
typedef LibRasterizerResult (*PLibRasterizerGetLastErrorPtr) (LibRasterizer_Base pInstance, const LibRasterizer_uint32 nErrorMessageBufferSize, LibRasterizer_uint32* pErrorMessageNeededChars, char * pErrorMessageBuffer, bool * pHasError);

/**
* Releases shared ownership of an Instance
*
* @param[in] pInstance - Instance Handle
* @return error code or 0 (success)
*/
typedef LibRasterizerResult (*PLibRasterizerReleaseInstancePtr) (LibRasterizer_Base pInstance);

/**
* Acquires shared ownership of an Instance
*
* @param[in] pInstance - Instance Handle
* @return error code or 0 (success)
*/
typedef LibRasterizerResult (*PLibRasterizerAcquireInstancePtr) (LibRasterizer_Base pInstance);

/**
* Injects an imported component for usage within this component
*
* @param[in] pNameSpace - NameSpace of the injected component
* @param[in] pSymbolAddressMethod - Address of the SymbolAddressMethod of the injected component
* @return error code or 0 (success)
*/
typedef LibRasterizerResult (*PLibRasterizerInjectComponentPtr) (const char * pNameSpace, LibRasterizer_pvoid pSymbolAddressMethod);

/**
* Returns the address of the SymbolLookupMethod
*
* @param[out] pSymbolLookupMethod - Address of the SymbolAddressMethod
* @return error code or 0 (success)
*/
typedef LibRasterizerResult (*PLibRasterizerGetSymbolLookupMethodPtr) (LibRasterizer_pvoid * pSymbolLookupMethod);

/**
* Creates a new context.
*
* @param[out] pInstance - New Context instance
* @return error code or 0 (success)
*/
typedef LibRasterizerResult (*PLibRasterizerCreateContextPtr) (LibRasterizer_Context * pInstance);

/*************************************************************************************************************************
 Function Table Structure
**************************************************************************************************************************/

typedef struct {
	void * m_LibraryHandle;
	PLibRasterizerImageObject_GetDPIPtr m_ImageObject_GetDPI;
	PLibRasterizerImageObject_GetSizePtr m_ImageObject_GetSize;
	PLibRasterizerImageObject_GetPixelSizePtr m_ImageObject_GetPixelSize;
	PLibRasterizerImageObject_SaveToPNGPtr m_ImageObject_SaveToPNG;
	PLibRasterizerImageObject_ClearPtr m_ImageObject_Clear;
	PLibRasterizerImageObject_GetPixelPtr m_ImageObject_GetPixel;
	PLibRasterizerImageObject_SetPixelPtr m_ImageObject_SetPixel;
	PLibRasterizerImageObject_GetPixelRangePtr m_ImageObject_GetPixelRange;
	PLibRasterizerImageObject_SetPixelRangePtr m_ImageObject_SetPixelRange;
	PLibRasterizerLayerObject_GetEntityCountPtr m_LayerObject_GetEntityCount;
	PLibRasterizerLayerObject_GetEntityPtr m_LayerObject_GetEntity;
	PLibRasterizerLayerObject_AddEntityPtr m_LayerObject_AddEntity;
	PLibRasterizerLayerObject_RemoveSelfIntersectionsPtr m_LayerObject_RemoveSelfIntersections;
	PLibRasterizerLayerObject_MergeIntoPtr m_LayerObject_MergeInto;
	PLibRasterizerLayerObject_CalculateOffsetPtr m_LayerObject_CalculateOffset;
	PLibRasterizerLayerObject_ThickenPolylinesPtr m_LayerObject_ThickenPolylines;
	PLibRasterizerLayerObject_ThickenHatchesPtr m_LayerObject_ThickenHatches;
	PLibRasterizerLayerObject_DistortLayerPtr m_LayerObject_DistortLayer;
	PLibRasterizerRasterizer_GetDPIPtr m_Rasterizer_GetDPI;
	PLibRasterizerRasterizer_GetSizePtr m_Rasterizer_GetSize;
	PLibRasterizerRasterizer_GetPixelSizePtr m_Rasterizer_GetPixelSize;
	PLibRasterizerRasterizer_GetPositionPtr m_Rasterizer_GetPosition;
	PLibRasterizerRasterizer_SetPositionPtr m_Rasterizer_SetPosition;
	PLibRasterizerRasterizer_SetSubsamplingPtr m_Rasterizer_SetSubsampling;
	PLibRasterizerRasterizer_GetSubsamplingPtr m_Rasterizer_GetSubsampling;
	PLibRasterizerRasterizer_AddLayerPtr m_Rasterizer_AddLayer;
	PLibRasterizerRasterizer_CalculateImagePtr m_Rasterizer_CalculateImage;
	PLibRasterizerSliceStack_GetLayerCountPtr m_SliceStack_GetLayerCount;
	PLibRasterizerSliceStack_GetLayerThicknessPtr m_SliceStack_GetLayerThickness;
	PLibRasterizerSliceStack_GetBottomZPtr m_SliceStack_GetBottomZ;
	PLibRasterizerSliceStack_GetTopZPtr m_SliceStack_GetTopZ;
	PLibRasterizerSliceStack_GetLayerPtr m_SliceStack_GetLayer;
	PLibRasterizerContext_CreateSliceStackPtr m_Context_CreateSliceStack;
	PLibRasterizerContext_CreateEmptyLayerPtr m_Context_CreateEmptyLayer;
	PLibRasterizerContext_CreateRasterizerPtr m_Context_CreateRasterizer;
	PLibRasterizerGetVersionPtr m_GetVersion;
	PLibRasterizerGetLastErrorPtr m_GetLastError;
	PLibRasterizerReleaseInstancePtr m_ReleaseInstance;
	PLibRasterizerAcquireInstancePtr m_AcquireInstance;
	PLibRasterizerInjectComponentPtr m_InjectComponent;
	PLibRasterizerGetSymbolLookupMethodPtr m_GetSymbolLookupMethod;
	PLibRasterizerCreateContextPtr m_CreateContext;
} sLibRasterizerDynamicWrapperTable;

#endif // __LIBRASTERIZER_DYNAMICHEADER_CPPTYPES

