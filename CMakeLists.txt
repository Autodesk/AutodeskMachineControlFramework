#[[++

Copyright (C) 2020 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
	* Redistributions of source code must retain the above copyright
	  notice, this list of conditions and the following disclaimer.
	* Redistributions in binary form must reproduce the above copyright
	  notice, this list of conditions and the following disclaimer in the
	  documentation and/or other materials provided with the distribution.
	* Neither the name of the Autodesk Inc. nor the
	  names of its contributors may be used to endorse or promote products
	  derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

]]


cmake_minimum_required(VERSION 3.5)

project(LibMC)

add_subdirectory(Drivers)
add_subdirectory(Plugins)

if(INCLUDE_TESTS)
add_subdirectory(Tests)
endif()

set (CMAKE_CXX_STANDARD 17)

# The location of autogenerated interfaces
set(CMAKE_CURRENT_AUTOGENERATED_DIR ${CMAKE_CURRENT_SOURCE_DIR}/Framework/InterfacesCore)
set(CMAKE_CURRENT_HEADERS_CORE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/Framework/HeadersCore/CppDynamic)
set(CMAKE_CURRENT_HEADERS_DEV_DIR ${CMAKE_CURRENT_SOURCE_DIR}/Framework/HeadersDev/CppDynamic)

if(OVERRIDE_BUILDRESOURCES)
	set(BUILDRESOURCES_EXECUTABLE ${PROJECT_BINARY_DIR}/DevPackage/Framework/buildresources.${OVERRIDE_BUILDRESOURCES})

else()

	if(WIN32)
		set(BUILDRESOURCES_EXECUTABLE ${PROJECT_BINARY_DIR}/DevPackage/Framework/buildresources.exe)
	endif()


	if(UNIX)
		if (CMAKE_SYSTEM_PROCESSOR MATCHES ".*arm.*")
			message("arm detected")
			set(BUILDRESOURCES_EXECUTABLE ${PROJECT_BINARY_DIR}/DevPackage/Framework/buildresources.arm)
						
		else()
			set(BUILDRESOURCES_EXECUTABLE ${PROJECT_BINARY_DIR}/DevPackage/Framework/buildresources.linux64)
						
		endif()
	endif()

endif()

file(STRINGS ${PROJECT_BINARY_DIR}/githash.txt GLOBALGITHASH)
message(STATUS "Global git hash: \"${GLOBALGITHASH}\"")

file(STRINGS ${PROJECT_BINARY_DIR}/clientdirhash.txt CLIENTDIRHASH)
message(STATUS "Client hash: \"${CLIENTDIRHASH}\"")


#[[++

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++ SQLite Dependency
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

]]

if(WIN32)
if(NOT MSVC)
	add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/Libraries/SQLite)
endif()

elseif(UNIX AND NOT APPLE)
	add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/Libraries/SQLite)
endif()

#[[++

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++ Copy Framework Target
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

]]


add_custom_target(copy_framework ALL)

file (GLOB framework_files_dev LIST_DIRECTORIES false "${CMAKE_CURRENT_SOURCE_DIR}/Framework/HeadersDev/CppDynamic/*.*")
foreach(framework_file_dev ${framework_files_dev})

	get_filename_component(framework_file_devname ${framework_file_dev} NAME)
	
	add_custom_command(
        TARGET copy_framework PRE_BUILD
        COMMAND ${CMAKE_COMMAND} -E echo "copying ${framework_file_dev}...")

	add_custom_command(
        TARGET copy_framework PRE_BUILD
        COMMAND ${CMAKE_COMMAND} -E copy
                ${framework_file_dev}
                ${CMAKE_CURRENT_BINARY_DIR}/Framework/HeadersDev/CppDynamic/${framework_file_devname})
				
				
endforeach()


file (GLOB framework_files_intfdev LIST_DIRECTORIES false "${CMAKE_CURRENT_SOURCE_DIR}/Framework/InterfacesDev/*.*")
foreach(framework_file_intfdev ${framework_files_intfdev})

	get_filename_component(framework_file_intfdevname ${framework_file_intfdev} NAME)
	
	add_custom_command(
        TARGET copy_framework PRE_BUILD
        COMMAND ${CMAKE_COMMAND} -E echo "copying ${framework_file_intfdev}...")

	add_custom_command(
        TARGET copy_framework PRE_BUILD
        COMMAND ${CMAKE_COMMAND} -E copy
                ${framework_file_intfdev}
                ${CMAKE_CURRENT_BINARY_DIR}/Framework/InterfacesDev/${framework_file_intfdevname})				
				
endforeach()


file (GLOB framework_files_plugincpp LIST_DIRECTORIES false "${CMAKE_CURRENT_SOURCE_DIR}/Framework/PluginCpp/*.*")
foreach(framework_file_plugincpp ${framework_files_plugincpp})

	get_filename_component(framework_file_plugincppname ${framework_file_plugincpp} NAME)
	
	add_custom_command(
        TARGET copy_framework PRE_BUILD
        COMMAND ${CMAKE_COMMAND} -E echo "copying ${framework_file_plugincpp}...")

	add_custom_command(
        TARGET copy_framework PRE_BUILD
        COMMAND ${CMAKE_COMMAND} -E copy
                ${framework_file_plugincpp}
                ${CMAKE_CURRENT_BINARY_DIR}/Framework/PluginCpp/${framework_file_plugincppname})				
				
endforeach()


#[[++

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++ LibMC Core Library
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

]]

file(GLOB LIBMC_SRC_CORE
	${CMAKE_CURRENT_SOURCE_DIR}/Implementation/Core/*.cpp 
)

file(GLOB LIBMC_SRC_COMMON
	${CMAKE_CURRENT_SOURCE_DIR}/Implementation/Common/*.cpp 
)

file(GLOB LIBMC_SRC_API
	${CMAKE_CURRENT_SOURCE_DIR}/Implementation/API/*.cpp
)

file(GLOB LIBMC_SRC_UI
	${CMAKE_CURRENT_SOURCE_DIR}/Implementation/UI/*.cpp
)

file(GLOB LIBMC_SRC_LIBMC
	${CMAKE_CURRENT_SOURCE_DIR}/Implementation/LibMC/*.cpp
	${CMAKE_CURRENT_AUTOGENERATED_DIR}/libmc_interfaceexception.cpp
	${CMAKE_CURRENT_AUTOGENERATED_DIR}/libmc_interfacewrapper.cpp
)
file(GLOB LIBMC_SRC_LIBMCENV
	${CMAKE_CURRENT_SOURCE_DIR}/Implementation/LibMCEnv/*.cpp
	${CMAKE_CURRENT_AUTOGENERATED_DIR}/libmcenv_interfaceexception.cpp
	${CMAKE_CURRENT_AUTOGENERATED_DIR}/libmcenv_interfacewrapper.cpp
)
file(GLOB LIBMC_SRC_DEP_ZIP
	${CMAKE_CURRENT_SOURCE_DIR}/Libraries/libzip/*.c
)
file(GLOB LIBMC_SRC_DEP_ZLIB
	${CMAKE_CURRENT_SOURCE_DIR}/Libraries/zlib/*.c
)
file(GLOB LIBMC_SRC_DEP_PUGIXML
	${CMAKE_CURRENT_SOURCE_DIR}/Libraries/PugiXML/pugixml.cpp
)

file(GLOB LIBMC_SRC_DEP_CROSSGUID
	${CMAKE_CURRENT_SOURCE_DIR}/Libraries/crossguid/guid.cpp
)
file(GLOB LIBMC_SRC_DEP_LODEPNG
	${CMAKE_CURRENT_SOURCE_DIR}/Libraries/LodePNG/lodepng.cpp
)
source_group("core" FILES ${LIBMC_SRC_CORE})
source_group("common" FILES ${LIBMC_SRC_COMMON})
source_group("api" FILES ${LIBMC_SRC_API})
source_group("ui" FILES ${LIBMC_SRC_UI})
source_group("libmc" FILES ${LIBMC_SRC_LIBMC})
source_group("libmcenv" FILES ${LIBMC_SRC_LIBMCENV})
source_group("dependencies\\crossguid" FILES ${LIBMC_SRC_DEP_CROSSGUID})
source_group("dependencies\\zip" FILES ${LIBMC_SRC_DEP_ZIP})
source_group("dependencies\\zlib" FILES ${LIBMC_SRC_DEP_ZLIB})
source_group("dependencies\\pugixml" FILES ${LIBMC_SRC_DEP_PUGIXML})
source_group("dependencies\\lodepng" FILES ${LIBMC_SRC_DEP_LODEPNG})


set(LIBMC_SRC 
  ${LIBMC_SRC_CORE} 
  ${LIBMC_SRC_COMMON}
  ${LIBMC_SRC_API}
  ${LIBMC_SRC_UI}
  ${LIBMC_SRC_LIBMC}
  ${LIBMC_SRC_LIBMCENV}
  ${LIBMC_SRC_DEP_ZIP}
  ${LIBMC_SRC_DEP_ZLIB}
  ${LIBMC_SRC_DEP_PUGIXML}
  ${LIBMC_SRC_DEP_CROSSGUID}
  ${LIBMC_SRC_DEP_LODEPNG}
)

add_library(libmc SHARED ${LIBMC_SRC})
add_dependencies(libmc copy_framework)

# Do not prefix the binary's name with "lib" on Unix systems:
set_target_properties(libmc PROPERTIES PREFIX "" IMPORT_PREFIX "" )
# The following two properties are crucial to reduce the number of undesirably exported symbols
set_target_properties(libmc PROPERTIES CXX_VISIBILITY_PRESET hidden)
set_target_properties(libmc PROPERTIES VISIBILITY_INLINES_HIDDEN ON)

# This makes sure symbols are exported
target_compile_options(libmc PRIVATE "-D__LIBMC_EXPORTS")
target_compile_options(libmc PRIVATE "-D__GITHASH=${GLOBALGITHASH}")
target_compile_options(libmc PRIVATE "-D__CLIENTHASH=${CLIENTDIRHASH}")
target_include_directories(libmc PRIVATE ${CMAKE_CURRENT_AUTOGENERATED_DIR})
target_include_directories(libmc PRIVATE ${CMAKE_CURRENT_HEADERS_CORE_DIR})
target_include_directories(libmc PRIVATE ${CMAKE_CURRENT_HEADERS_DEV_DIR})
target_include_directories(libmc PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/Implementation)
target_include_directories(libmc PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/Implementation/API)
target_include_directories(libmc PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/Implementation/Core)
target_include_directories(libmc PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/Implementation/Common)
target_include_directories(libmc PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/Implementation/UI)
target_include_directories(libmc PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/Implementation/LibMC)
target_include_directories(libmc PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/Implementation/LibMCEnv)
target_include_directories(libmc PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/Libraries/PugiXML)
target_include_directories(libmc PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/Libraries/PicoSHA2)
target_include_directories(libmc PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/Libraries/libzip)
target_include_directories(libmc PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/Libraries)
target_include_directories(libmc PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/)


if(WIN32)

	if (MSVC)
		target_link_libraries(libmc Winmm.lib)
		target_link_libraries(libmc Shlwapi.lib)
		target_link_libraries(libmc ws2_32.lib)
	else()
		target_link_libraries(libmc winmm.lib)
		target_link_libraries(libmc shlwapi.lib)
		target_link_libraries(libmc ws2_32.lib)
		target_link_options(libmc PRIVATE -static-libgcc -static-libstdc++ --static )
	endif (MSVC)
	
elseif(UNIX AND NOT APPLE)

endif()


set_target_properties(libmc
    PROPERTIES
    RUNTIME_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/Output"
    RUNTIME_OUTPUT_DIRECTORY_DEBUG "${PROJECT_BINARY_DIR}/Output"
    RUNTIME_OUTPUT_DIRECTORY_RELEASE "${PROJECT_BINARY_DIR}/Output"
	LIBRARY_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/Output"
	OUTPUT_NAME "${GLOBALGITHASH}_core_libmc"
	
	VS_DEBUGGER_COMMAND "${PROJECT_BINARY_DIR}/Output/amc_server.exe"
	VS_DEBUGGER_WORKING_DIRECTORY "${PROJECT_BINARY_DIR}/Output"	
    
)

#[[++

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++ LibMC Data Model Library
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

]]

file(GLOB LIBMCDATA_SRC_DATAMODEL
	${CMAKE_CURRENT_SOURCE_DIR}/Implementation/DataModel/*.cpp
)

file(GLOB LIBMCDATA_SRC_COMMON
	${CMAKE_CURRENT_SOURCE_DIR}/Implementation/Common/*.cpp
)

file(GLOB LIBMCDATA_SRC_LIBMCDATA
	${CMAKE_CURRENT_SOURCE_DIR}/Implementation/LibMCData/*.cpp
	${CMAKE_CURRENT_AUTOGENERATED_DIR}/libmcdata_interfaceexception.cpp
	${CMAKE_CURRENT_AUTOGENERATED_DIR}/libmcdata_interfacewrapper.cpp
)

file(GLOB LIBMCDATA_SRC_DEP_CROSSGUID
	${CMAKE_CURRENT_SOURCE_DIR}/Libraries/crossguid/guid.cpp
)

set(LIBMCDATA_SRC ${LIBMCDATA_SRC_DATAMODEL} ${LIBMCDATA_SRC_LIBMCDATA} ${LIBMCDATA_SRC_COMMON} ${LIBMCDATA_SRC_DEP_CROSSGUID})

source_group("common" FILES ${LIBMCDATA_SRC_COMMON})
source_group("datamodel" FILES ${LIBMCDATA_SRC_DATAMODEL})
source_group("libmcdata" FILES ${LIBMCDATA_SRC_LIBMCDATA})
source_group("dependencies\\crossguid" FILES ${LIBMCDATA_SRC_DEP_CROSSGUID})

add_library(libmcdata SHARED ${LIBMCDATA_SRC})
add_dependencies(libmcdata copy_framework)

# Do not prefix the binary's name with "lib" on Unix systems:
set_target_properties(libmcdata PROPERTIES PREFIX "" IMPORT_PREFIX "" )
# The following two properties are crucial to reduce the number of undesirably exported symbols
set_target_properties(libmcdata PROPERTIES CXX_VISIBILITY_PRESET hidden)
set_target_properties(libmcdata PROPERTIES VISIBILITY_INLINES_HIDDEN ON)



if(WIN32)

if (MSVC)
	target_link_libraries(libmcdata Winmm.lib)
	target_link_libraries(libmcdata Shlwapi.lib)
	target_link_libraries(libmcdata ${CMAKE_CURRENT_SOURCE_DIR}/Libraries/SQLite/sqlite3.lib)
else()
	target_link_libraries(libmcdata winmm.lib)
	target_link_libraries(libmcdata shlwapi.lib)
	target_link_libraries(libmcdata SQLite3)
	target_link_options(libmcdata PRIVATE -static-libgcc -static-libstdc++ --static )
endif (MSVC)

elseif(UNIX AND NOT APPLE)
	target_link_libraries(libmcdata SQLite3)
endif()

# This makes sure symbols are exported
target_compile_options(libmcdata PRIVATE "-D__LIBMCDATA_EXPORTS")
target_compile_options(libmcdata PRIVATE "-D__GITHASH=${GLOBALGITHASH}")

if(UNIX)
	find_library(LIBUUID_PATH uuid)
	if(NOT LIBUUID_PATH)
		message(FATAL_ERROR "libuuid not found")
	endif()
	target_link_libraries(libmc ${LIBUUID_PATH})
	target_link_libraries(libmcdata ${LIBUUID_PATH})
endif()

target_include_directories(libmcdata PRIVATE ${CMAKE_CURRENT_AUTOGENERATED_DIR})
target_include_directories(libmcdata PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/Libraries/SQLite)
target_include_directories(libmcdata PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/Libraries)
target_include_directories(libmcdata PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/Implementation/LibMCData)
target_include_directories(libmcdata PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/Implementation/DataModel)
target_include_directories(libmcdata PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/Implementation/Common)

set_target_properties(libmcdata
    PROPERTIES
    RUNTIME_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/Output"
    RUNTIME_OUTPUT_DIRECTORY_DEBUG "${PROJECT_BINARY_DIR}/Output"
    RUNTIME_OUTPUT_DIRECTORY_RELEASE "${PROJECT_BINARY_DIR}/Output"
	LIBRARY_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/Output"
	
	OUTPUT_NAME "${GLOBALGITHASH}_core_libmcdata"
	
	VS_DEBUGGER_COMMAND "${PROJECT_BINARY_DIR}/Output/amc_server.exe"
	VS_DEBUGGER_WORKING_DIRECTORY "${PROJECT_BINARY_DIR}/Output"	
    
)

#[[++

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++ Configuration XML Target
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

]]


add_custom_target(configuration_xml ALL DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/Plugins/config.xml)

set_property(TARGET configuration_xml APPEND PROPERTY SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/Plugins/config.xml)

add_custom_command(
	TARGET configuration_xml PRE_BUILD
	COMMAND ${CMAKE_COMMAND} -E echo "creating output directory")

add_custom_command(
	TARGET configuration_xml PRE_BUILD
	COMMAND ${CMAKE_COMMAND} -E make_directory			
			${CMAKE_CURRENT_BINARY_DIR}/Output)

add_custom_command(
	TARGET configuration_xml PRE_BUILD
	COMMAND ${CMAKE_COMMAND} -E echo "copying config.xml...")


add_custom_command(
	TARGET configuration_xml PRE_BUILD
	COMMAND ${CMAKE_COMMAND} -E copy
			${CMAKE_CURRENT_SOURCE_DIR}/Plugins/config.xml
			${PROJECT_BINARY_DIR}/Output/${GLOBALGITHASH}_config.xml)

#[[++

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++ Copy Distribution Libraries Target
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

]]

add_custom_target(copy_distribution_libraries ALL)
add_dependencies(copy_distribution_libraries copy_framework)

add_custom_command(
	TARGET copy_distribution_libraries POST_BUILD
	COMMAND ${CMAKE_COMMAND} -E echo "creating output directory")

if(WIN32)
add_custom_command(
	TARGET copy_distribution_libraries POST_BUILD
	COMMAND ${CMAKE_COMMAND} -E copy
			${CMAKE_CURRENT_SOURCE_DIR}/Artifacts/lib3mf/lib3mf_win64.dll
			${PROJECT_BINARY_DIR}/Output/${GLOBALGITHASH}_core_lib3mf.dll)
endif()

if(UNIX)
if (CMAKE_SYSTEM_PROCESSOR MATCHES ".*arm.*")

add_custom_command(
	TARGET copy_distribution_libraries POST_BUILD
	COMMAND ${CMAKE_COMMAND} -E copy
			${CMAKE_CURRENT_SOURCE_DIR}/Artifacts/lib3mf/lib3mf_arm32.so
			${PROJECT_BINARY_DIR}/Output/${GLOBALGITHASH}_core_lib3mf.so)

else()

add_custom_command(
	TARGET copy_distribution_libraries POST_BUILD
	COMMAND ${CMAKE_COMMAND} -E copy
			${CMAKE_CURRENT_SOURCE_DIR}/Artifacts/lib3mf/lib3mf_linux64.so
			${PROJECT_BINARY_DIR}/Output/${GLOBALGITHASH}_core_lib3mf.so)

endif()
endif()


			

add_custom_target(create_core_resources ALL)
add_custom_command(
	TARGET create_core_resources POST_BUILD
	COMMAND ${CMAKE_COMMAND} -E echo "creating core resources")

add_custom_command(
	TARGET create_core_resources POST_BUILD
	COMMAND ${BUILDRESOURCES_EXECUTABLE}
			${CMAKE_CURRENT_SOURCE_DIR}/Plugins/Resources/
			${PROJECT_BINARY_DIR}/Output/${GLOBALGITHASH}_core.data)

#[[++

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++ AMC Server Target
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

]]


file(GLOB SERVER_SRC
	${CMAKE_CURRENT_SOURCE_DIR}/Implementation/Server/amc_server.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/Implementation/Server/amc_server_console.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/Implementation/Server/amc_server_io.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/Implementation/Server/amc_server_configuration.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/Libraries/PugiXML/pugixml.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/Libraries/zlib/*.c
	${CMAKE_CURRENT_SOURCE_DIR}/Implementation/Common/common_utils.cpp 
	${CMAKE_CURRENT_SOURCE_DIR}/Implementation/Common/common_importstream_native.cpp 
	${CMAKE_CURRENT_SOURCE_DIR}/Implementation/Common/common_exportstream_native.cpp 
)

add_executable(amc_server ${SERVER_SRC})

target_include_directories(amc_server PRIVATE ${CMAKE_CURRENT_HEADERS_CORE_DIR})
target_include_directories(amc_server PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/Libraries/PugiXML)
target_include_directories(amc_server PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/Libraries/)
target_include_directories(amc_server PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/Libraries/zlib)
target_include_directories(amc_server PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/Libraries/libressl)
target_include_directories(amc_server PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/Implementation/Common)
target_include_directories(amc_server PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/)
target_compile_options(amc_server PRIVATE "-D__GITHASH=${GLOBALGITHASH}")
target_compile_options(amc_server PRIVATE "-DLIBUS_NO_SSL")

if(WIN32)

	target_link_libraries(amc_server shlwapi.lib)
	target_link_libraries(amc_server ws2_32.lib)
	target_link_libraries(amc_server userenv.lib)
	target_link_libraries(amc_server psapi.lib)
	target_link_libraries(amc_server bcrypt.lib)	
	target_link_libraries(amc_server iphlpapi.lib)

if(MSVC)
	target_link_libraries(amc_server ${CMAKE_CURRENT_SOURCE_DIR}/Libraries/libressl/win64/tls-24.lib)
	target_link_libraries(amc_server ${CMAKE_CURRENT_SOURCE_DIR}/Libraries/libressl/win64/crypto-49.lib)
	target_link_libraries(amc_server ${CMAKE_CURRENT_SOURCE_DIR}/Libraries/libressl/win64/ssl-52.lib)
endif()

else()

	find_package(Threads REQUIRED)
	if(THREADS_HAVE_PTHREAD_ARG)
	  target_compile_options(amc_server PUBLIC "-pthread")
	endif()
	if(CMAKE_THREAD_LIBS_INIT)
	  target_link_libraries(amc_server "${CMAKE_THREAD_LIBS_INIT}")
	endif()

	target_link_libraries(amc_server dl)

endif(WIN32)

set_target_properties(amc_server
    PROPERTIES
    RUNTIME_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/Output"
    RUNTIME_OUTPUT_DIRECTORY_DEBUG "${PROJECT_BINARY_DIR}/Output"
    RUNTIME_OUTPUT_DIRECTORY_RELEASE "${PROJECT_BINARY_DIR}/Output"
	LIBRARY_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/Output"
	
	OUTPUT_NAME "amc_server"	

	VS_DEBUGGER_WORKING_DIRECTORY "${PROJECT_BINARY_DIR}/Output"	
    
)


#[[++

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++ AMC Win32 Target
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

]]

if(WIN32)
if(MSVC)

file(GLOB SERVER_WIN32_SRC
	${CMAKE_CURRENT_SOURCE_DIR}/Implementation/Server/amc_server.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/Implementation/Server/amc_server_win32.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/Implementation/Server/amc_server_io.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/Implementation/Server/amc_server_configuration.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/Implementation/Server/amc_win32.rc
	${CMAKE_CURRENT_SOURCE_DIR}/Libraries/PugiXML/pugixml.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/Libraries/zlib/*.c
	${CMAKE_CURRENT_SOURCE_DIR}/Implementation/Common/common_utils.cpp 
	${CMAKE_CURRENT_SOURCE_DIR}/Implementation/Common/common_importstream_native.cpp 
	${CMAKE_CURRENT_SOURCE_DIR}/Implementation/Common/common_exportstream_native.cpp 
)


add_executable(amc_win32 WIN32 ${SERVER_WIN32_SRC})

target_include_directories(amc_win32 PRIVATE ${CMAKE_CURRENT_HEADERS_CORE_DIR})
target_include_directories(amc_win32 PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/Libraries/PugiXML)
target_include_directories(amc_win32 PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/Libraries/)
target_include_directories(amc_win32 PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/Libraries/zlib)
target_include_directories(amc_win32 PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/Libraries/libressl)
target_include_directories(amc_win32 PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/Implementation/Common)
target_include_directories(amc_win32 PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/)
target_compile_options(amc_win32 PRIVATE "-D__GITHASH=${GLOBALGITHASH}")
target_compile_options(amc_win32 PRIVATE "-DLIBUS_NO_SSL")
target_compile_options(amc_win32 PRIVATE "-DUNICODE")
target_compile_options(amc_win32 PRIVATE "-D_UNICODE")

	target_link_libraries(amc_win32 shlwapi.lib)
	target_link_libraries(amc_win32 ws2_32.lib)
	target_link_libraries(amc_win32 userenv.lib)
	target_link_libraries(amc_win32 psapi.lib)
	target_link_libraries(amc_win32 bcrypt.lib)	
	target_link_libraries(amc_win32 iphlpapi.lib)

if(MSVC)
	target_link_libraries(amc_win32 ${CMAKE_CURRENT_SOURCE_DIR}/Libraries/libressl/win64/tls-24.lib)
	target_link_libraries(amc_win32 ${CMAKE_CURRENT_SOURCE_DIR}/Libraries/libressl/win64/crypto-49.lib)
	target_link_libraries(amc_win32 ${CMAKE_CURRENT_SOURCE_DIR}/Libraries/libressl/win64/ssl-52.lib)
endif()

set_target_properties(amc_win32
    PROPERTIES
    RUNTIME_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/Output"
    RUNTIME_OUTPUT_DIRECTORY_DEBUG "${PROJECT_BINARY_DIR}/Output"
    RUNTIME_OUTPUT_DIRECTORY_RELEASE "${PROJECT_BINARY_DIR}/Output"
	LIBRARY_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/Output"
	
	OUTPUT_NAME "amc_win32"	

	VS_DEBUGGER_WORKING_DIRECTORY "${PROJECT_BINARY_DIR}/Output"	
    
)


endif(MSVC)
endif(WIN32)


#[[++

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++ AMC Test Target
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

]]


file(GLOB TEST_SRC
	${CMAKE_CURRENT_SOURCE_DIR}/Implementation/Test/amc_test.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/Implementation/Test/amc_test_library.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/Implementation/Test/amc_test_console.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/Implementation/Test/amc_test_definition.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/Implementation/Test/amc_test_io.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/Libraries/PugiXML/pugixml.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/Libraries/zlib/*.c
	${CMAKE_CURRENT_SOURCE_DIR}/Implementation/Common/common_utils.cpp 
	${CMAKE_CURRENT_SOURCE_DIR}/Implementation/Common/common_importstream_native.cpp 
	${CMAKE_CURRENT_SOURCE_DIR}/Implementation/Common/common_exportstream_native.cpp 
)

add_executable(amc_test ${TEST_SRC})

target_include_directories(amc_test PRIVATE ${CMAKE_CURRENT_HEADERS_CORE_DIR})
target_include_directories(amc_test PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/Libraries/PugiXML)
target_include_directories(amc_test PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/Libraries/)
target_include_directories(amc_test PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/Libraries/zlib)
target_include_directories(amc_test PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/Implementation/Common)
target_include_directories(amc_test PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/)
target_compile_options(amc_test PRIVATE "-D__GITHASH=${GLOBALGITHASH}")

if(WIN32)
	target_link_libraries(amc_test shlwapi.lib)
	target_link_libraries(amc_test ws2_32.lib)
else()

	find_package(Threads REQUIRED)
	if(THREADS_HAVE_PTHREAD_ARG)
	  target_compile_options(amc_test PUBLIC "-pthread")
	endif()
	if(CMAKE_THREAD_LIBS_INIT)
	  target_link_libraries(amc_test "${CMAKE_THREAD_LIBS_INIT}")
	endif()

	target_link_libraries(amc_test dl)

endif(WIN32)

set_target_properties(amc_test
    PROPERTIES
    RUNTIME_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/Output"
    RUNTIME_OUTPUT_DIRECTORY_DEBUG "${PROJECT_BINARY_DIR}/Output"
    RUNTIME_OUTPUT_DIRECTORY_RELEASE "${PROJECT_BINARY_DIR}/Output"
	LIBRARY_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/Output"
	
	OUTPUT_NAME "amc_test"	

	VS_DEBUGGER_WORKING_DIRECTORY "${PROJECT_BINARY_DIR}/Output"	
    
)

set_property(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT amc_win32)


#[[++

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++ create_package Target
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

]]


file(GLOB CREATE_PACKAGE_SRC
	${CMAKE_CURRENT_SOURCE_DIR}/BuildScripts/createPackageXML.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/Implementation/Common/common_utils.cpp 
	${CMAKE_CURRENT_SOURCE_DIR}/Implementation/Common/common_importstream_native.cpp 
	${CMAKE_CURRENT_SOURCE_DIR}/Implementation/Common/common_exportstream_native.cpp 
	${CMAKE_CURRENT_SOURCE_DIR}/Libraries/crossguid/guid.cpp
)

add_executable(create_package_xml ${CREATE_PACKAGE_SRC} ${LIBMC_SRC_DEP_PUGIXML})

target_include_directories(create_package_xml PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/Implementation/Common)
target_include_directories(create_package_xml PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/Libraries)

set_target_properties(create_package_xml
    PROPERTIES
    RUNTIME_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/DevPackage/Framework"
    RUNTIME_OUTPUT_DIRECTORY_DEBUG "${PROJECT_BINARY_DIR}/DevPackage/Framework"
    RUNTIME_OUTPUT_DIRECTORY_RELEASE "${PROJECT_BINARY_DIR}/DevPackage/Framework"
	LIBRARY_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/DevPackage/Framework"
	
	OUTPUT_NAME "create_package_xml"	

	VS_DEBUGGER_WORKING_DIRECTORY "${PROJECT_BINARY_DIR}/Output"	    
)


if(WIN32)
	target_link_libraries(create_package_xml shlwapi.lib)
	target_link_libraries(create_package_xml ws2_32.lib)
endif(WIN32)

if(UNIX)
	if(NOT LIBUUID_PATH)
		message(FATAL_ERROR "libuuid not found")
	endif()
	target_link_libraries(create_package_xml ${LIBUUID_PATH})
endif()


