/*++

Copyright (C) 2020 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.8.0-develop.

Abstract: This is an autogenerated C++-Header file in order to allow an easy
 use of MC Environment Interface

Interface version: 1.0.0

*/

#ifndef __LIBMCENV_CPPHEADER_IMPLICIT_CPP
#define __LIBMCENV_CPPHEADER_IMPLICIT_CPP

#include "libmcenv_types.hpp"
#include "libmcenv_abi.hpp"


#ifdef _WIN32
#include <windows.h>
#else // _WIN32
#include <dlfcn.h>
#endif // _WIN32
#include <string>
#include <memory>
#include <vector>
#include <exception>

namespace LibMCEnv {

/*************************************************************************************************************************
 Forward Declaration of all classes
**************************************************************************************************************************/
class CWrapper;
class CBase;
class CIterator;
class CTestEnvironment;
class CImageData;
class CToolpathPart;
class CToolpathLayer;
class CToolpathAccessor;
class CBuild;
class CWorkingFileExecution;
class CWorkingFile;
class CWorkingFileIterator;
class CWorkingDirectory;
class CDriverEnvironment;
class CSignalTrigger;
class CSignalHandler;
class CStateEnvironment;
class CUIEnvironment;

/*************************************************************************************************************************
 Declaration of deprecated class types
**************************************************************************************************************************/
typedef CWrapper CLibMCEnvWrapper;
typedef CBase CLibMCEnvBase;
typedef CIterator CLibMCEnvIterator;
typedef CTestEnvironment CLibMCEnvTestEnvironment;
typedef CImageData CLibMCEnvImageData;
typedef CToolpathPart CLibMCEnvToolpathPart;
typedef CToolpathLayer CLibMCEnvToolpathLayer;
typedef CToolpathAccessor CLibMCEnvToolpathAccessor;
typedef CBuild CLibMCEnvBuild;
typedef CWorkingFileExecution CLibMCEnvWorkingFileExecution;
typedef CWorkingFile CLibMCEnvWorkingFile;
typedef CWorkingFileIterator CLibMCEnvWorkingFileIterator;
typedef CWorkingDirectory CLibMCEnvWorkingDirectory;
typedef CDriverEnvironment CLibMCEnvDriverEnvironment;
typedef CSignalTrigger CLibMCEnvSignalTrigger;
typedef CSignalHandler CLibMCEnvSignalHandler;
typedef CStateEnvironment CLibMCEnvStateEnvironment;
typedef CUIEnvironment CLibMCEnvUIEnvironment;

/*************************************************************************************************************************
 Declaration of shared pointer types
**************************************************************************************************************************/
typedef std::shared_ptr<CWrapper> PWrapper;
typedef std::shared_ptr<CBase> PBase;
typedef std::shared_ptr<CIterator> PIterator;
typedef std::shared_ptr<CTestEnvironment> PTestEnvironment;
typedef std::shared_ptr<CImageData> PImageData;
typedef std::shared_ptr<CToolpathPart> PToolpathPart;
typedef std::shared_ptr<CToolpathLayer> PToolpathLayer;
typedef std::shared_ptr<CToolpathAccessor> PToolpathAccessor;
typedef std::shared_ptr<CBuild> PBuild;
typedef std::shared_ptr<CWorkingFileExecution> PWorkingFileExecution;
typedef std::shared_ptr<CWorkingFile> PWorkingFile;
typedef std::shared_ptr<CWorkingFileIterator> PWorkingFileIterator;
typedef std::shared_ptr<CWorkingDirectory> PWorkingDirectory;
typedef std::shared_ptr<CDriverEnvironment> PDriverEnvironment;
typedef std::shared_ptr<CSignalTrigger> PSignalTrigger;
typedef std::shared_ptr<CSignalHandler> PSignalHandler;
typedef std::shared_ptr<CStateEnvironment> PStateEnvironment;
typedef std::shared_ptr<CUIEnvironment> PUIEnvironment;

/*************************************************************************************************************************
 Declaration of deprecated shared pointer types
**************************************************************************************************************************/
typedef PWrapper PLibMCEnvWrapper;
typedef PBase PLibMCEnvBase;
typedef PIterator PLibMCEnvIterator;
typedef PTestEnvironment PLibMCEnvTestEnvironment;
typedef PImageData PLibMCEnvImageData;
typedef PToolpathPart PLibMCEnvToolpathPart;
typedef PToolpathLayer PLibMCEnvToolpathLayer;
typedef PToolpathAccessor PLibMCEnvToolpathAccessor;
typedef PBuild PLibMCEnvBuild;
typedef PWorkingFileExecution PLibMCEnvWorkingFileExecution;
typedef PWorkingFile PLibMCEnvWorkingFile;
typedef PWorkingFileIterator PLibMCEnvWorkingFileIterator;
typedef PWorkingDirectory PLibMCEnvWorkingDirectory;
typedef PDriverEnvironment PLibMCEnvDriverEnvironment;
typedef PSignalTrigger PLibMCEnvSignalTrigger;
typedef PSignalHandler PLibMCEnvSignalHandler;
typedef PStateEnvironment PLibMCEnvStateEnvironment;
typedef PUIEnvironment PLibMCEnvUIEnvironment;


/*************************************************************************************************************************
 classParam Definition
**************************************************************************************************************************/

template<class T> class classParam {
private:
	const T* m_ptr;

public:
	classParam(const T* ptr)
		: m_ptr (ptr)
	{
	}

	classParam(std::shared_ptr <T> sharedPtr)
		: m_ptr (sharedPtr.get())
	{
	}

	LibMCEnvHandle GetHandle()
	{
		if (m_ptr != nullptr)
			return m_ptr->handle();
		return nullptr;
	}
};

/*************************************************************************************************************************
 Class ELibMCEnvException 
**************************************************************************************************************************/
class ELibMCEnvException : public std::exception {
protected:
	/**
	* Error code for the Exception.
	*/
	LibMCEnvResult m_errorCode;
	/**
	* Error message for the Exception.
	*/
	std::string m_errorMessage;
	std::string m_originalErrorMessage;

public:
	/**
	* Exception Constructor.
	*/
	ELibMCEnvException(LibMCEnvResult errorCode, const std::string & sErrorMessage)
		: m_errorCode(errorCode), m_originalErrorMessage(sErrorMessage)
	{
		m_errorMessage = buildErrorMessage();
	}

	/**
	* Returns error code
	*/
	LibMCEnvResult getErrorCode() const noexcept
	{
		return m_errorCode;
	}

	/**
	* Returns error message
	*/
	const char* what() const noexcept
	{
		return m_errorMessage.c_str();
	}

	const char* getErrorMessage() const noexcept
	{
		return m_originalErrorMessage.c_str();
	}

	const char* getErrorName() const noexcept
	{
		switch(getErrorCode()) {
			case LIBMCENV_SUCCESS: return "SUCCESS";
			case LIBMCENV_ERROR_NOTIMPLEMENTED: return "NOTIMPLEMENTED";
			case LIBMCENV_ERROR_INVALIDPARAM: return "INVALIDPARAM";
			case LIBMCENV_ERROR_INVALIDCAST: return "INVALIDCAST";
			case LIBMCENV_ERROR_BUFFERTOOSMALL: return "BUFFERTOOSMALL";
			case LIBMCENV_ERROR_GENERICEXCEPTION: return "GENERICEXCEPTION";
			case LIBMCENV_ERROR_COULDNOTLOADLIBRARY: return "COULDNOTLOADLIBRARY";
			case LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT: return "COULDNOTFINDLIBRARYEXPORT";
			case LIBMCENV_ERROR_INCOMPATIBLEBINARYVERSION: return "INCOMPATIBLEBINARYVERSION";
			case LIBMCENV_ERROR_PARAMETERGROUPNOTFOUND: return "PARAMETERGROUPNOTFOUND";
			case LIBMCENV_ERROR_PARAMETERNOTFOUND: return "PARAMETERNOTFOUND";
			case LIBMCENV_ERROR_COULDNOTFINDSIGNALDEFINITON: return "COULDNOTFINDSIGNALDEFINITON";
			case LIBMCENV_ERROR_COULDNOTTRIGGERSIGNAL: return "COULDNOTTRIGGERSIGNAL";
			case LIBMCENV_ERROR_SIGNALNOTFOUND: return "SIGNALNOTFOUND";
			case LIBMCENV_ERROR_TERMINATED: return "TERMINATED";
			case LIBMCENV_ERROR_SIGNALHASTRIGGEREDTWICE: return "SIGNALHASTRIGGEREDTWICE";
			case LIBMCENV_ERROR_SIGNALHASNOTBEENTRIGGERED: return "SIGNALHASNOTBEENTRIGGERED";
			case LIBMCENV_ERROR_DRIVERISNOTINITIALISING: return "DRIVERISNOTINITIALISING";
			case LIBMCENV_ERROR_RESOURCEENTRYNOTFOUND: return "RESOURCEENTRYNOTFOUND";
			case LIBMCENV_ERROR_INTERNALERROR: return "INTERNALERROR";
			case LIBMCENV_ERROR_INVALIDCHARACTERINFILENAME: return "INVALIDCHARACTERINFILENAME";
			case LIBMCENV_ERROR_WORKINGDIRECTORYHASBEENCLEANED: return "WORKINGDIRECTORYHASBEENCLEANED";
			case LIBMCENV_ERROR_INVALIDITERATOR: return "INVALIDITERATOR";
			case LIBMCENV_ERROR_FORMVALUENOTFOUND: return "FORMVALUENOTFOUND";
			case LIBMCENV_ERROR_INVALIDDOUBLEFORMVALUE: return "INVALIDDOUBLEFORMVALUE";
			case LIBMCENV_ERROR_INVALIDINTEGERFORMVALUE: return "INVALIDINTEGERFORMVALUE";
			case LIBMCENV_ERROR_COULDNNOTACCESSCLIENTVARIABLES: return "COULDNNOTACCESSCLIENTVARIABLES";
			case LIBMCENV_ERROR_INVALIDPIXELCOUNT: return "INVALIDPIXELCOUNT";
			case LIBMCENV_ERROR_INVALIDDPIVALUE: return "INVALIDDPIVALUE";
			case LIBMCENV_ERROR_COULDNOTCOMPRESSPNGIMAGE: return "COULDNOTCOMPRESSPNGIMAGE";
			case LIBMCENV_ERROR_COULDNOTSTOREPNGIMAGE: return "COULDNOTSTOREPNGIMAGE";
			case LIBMCENV_ERROR_EMPTYPNGIMAGEDATA: return "EMPTYPNGIMAGEDATA";
			case LIBMCENV_ERROR_INVALIDXCOORDINATE: return "INVALIDXCOORDINATE";
			case LIBMCENV_ERROR_INVALIDYCOORDINATE: return "INVALIDYCOORDINATE";
			case LIBMCENV_ERROR_INVALIDXCOORDINATERANGE: return "INVALIDXCOORDINATERANGE";
			case LIBMCENV_ERROR_INVALIDYCOORDINATERANGE: return "INVALIDYCOORDINATERANGE";
			case LIBMCENV_ERROR_INVALIDPIXELDATACOUNT: return "INVALIDPIXELDATACOUNT";
			case LIBMCENV_ERROR_INVALIDIMAGEBUFFER: return "INVALIDIMAGEBUFFER";
			case LIBMCENV_ERROR_INVALIDPIXELFORMAT: return "INVALIDPIXELFORMAT";
			case LIBMCENV_ERROR_INVALIDTESTOUTPUTNAME: return "INVALIDTESTOUTPUTNAME";
		}
		return "UNKNOWN";
	}

	const char* getErrorDescription() const noexcept
	{
		switch(getErrorCode()) {
			case LIBMCENV_SUCCESS: return "success";
			case LIBMCENV_ERROR_NOTIMPLEMENTED: return "functionality not implemented";
			case LIBMCENV_ERROR_INVALIDPARAM: return "an invalid parameter was passed";
			case LIBMCENV_ERROR_INVALIDCAST: return "a type cast failed";
			case LIBMCENV_ERROR_BUFFERTOOSMALL: return "a provided buffer is too small";
			case LIBMCENV_ERROR_GENERICEXCEPTION: return "a generic exception occurred";
			case LIBMCENV_ERROR_COULDNOTLOADLIBRARY: return "the library could not be loaded";
			case LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT: return "a required exported symbol could not be found in the library";
			case LIBMCENV_ERROR_INCOMPATIBLEBINARYVERSION: return "the version of the binary interface does not match the bindings interface";
			case LIBMCENV_ERROR_PARAMETERGROUPNOTFOUND: return "Parameter group not found";
			case LIBMCENV_ERROR_PARAMETERNOTFOUND: return "Parameter not found";
			case LIBMCENV_ERROR_COULDNOTFINDSIGNALDEFINITON: return "Could not find signal definition";
			case LIBMCENV_ERROR_COULDNOTTRIGGERSIGNAL: return "Could not trigger signal";
			case LIBMCENV_ERROR_SIGNALNOTFOUND: return "Signal not found";
			case LIBMCENV_ERROR_TERMINATED: return "operation has been terminated.";
			case LIBMCENV_ERROR_SIGNALHASTRIGGEREDTWICE: return "signal has been triggered twice.";
			case LIBMCENV_ERROR_SIGNALHASNOTBEENTRIGGERED: return "signal has not been triggered.";
			case LIBMCENV_ERROR_DRIVERISNOTINITIALISING: return "driver is not in initialisation mode.";
			case LIBMCENV_ERROR_RESOURCEENTRYNOTFOUND: return "resource entry not found.";
			case LIBMCENV_ERROR_INTERNALERROR: return "internal error.";
			case LIBMCENV_ERROR_INVALIDCHARACTERINFILENAME: return "invalid character in filename.";
			case LIBMCENV_ERROR_WORKINGDIRECTORYHASBEENCLEANED: return "working directory has been cleaned.";
			case LIBMCENV_ERROR_INVALIDITERATOR: return "invalid iterator.";
			case LIBMCENV_ERROR_FORMVALUENOTFOUND: return "Form value not found.";
			case LIBMCENV_ERROR_INVALIDDOUBLEFORMVALUE: return "Invalid double form value.";
			case LIBMCENV_ERROR_INVALIDINTEGERFORMVALUE: return "Invalid integer form value.";
			case LIBMCENV_ERROR_COULDNNOTACCESSCLIENTVARIABLES: return "Could not access client variables.";
			case LIBMCENV_ERROR_INVALIDPIXELCOUNT: return "Invalid pixel count.";
			case LIBMCENV_ERROR_INVALIDDPIVALUE: return "Invalid dpi value.";
			case LIBMCENV_ERROR_COULDNOTCOMPRESSPNGIMAGE: return "Could not compress PNG image.";
			case LIBMCENV_ERROR_COULDNOTSTOREPNGIMAGE: return "Could not store PNG image.";
			case LIBMCENV_ERROR_EMPTYPNGIMAGEDATA: return "Empty PNG image data.";
			case LIBMCENV_ERROR_INVALIDXCOORDINATE: return "Invalid X coordinate.";
			case LIBMCENV_ERROR_INVALIDYCOORDINATE: return "Invalid Y coordinate.";
			case LIBMCENV_ERROR_INVALIDXCOORDINATERANGE: return "Invalid X coordinate range.";
			case LIBMCENV_ERROR_INVALIDYCOORDINATERANGE: return "Invalid Y coordinate range.";
			case LIBMCENV_ERROR_INVALIDPIXELDATACOUNT: return "Invalid pixel data count.";
			case LIBMCENV_ERROR_INVALIDIMAGEBUFFER: return "Invalid image buffer.";
			case LIBMCENV_ERROR_INVALIDPIXELFORMAT: return "Invalid pixel format.";
			case LIBMCENV_ERROR_INVALIDTESTOUTPUTNAME: return "Invalid test output name.";
		}
		return "unknown error";
	}

private:

	std::string buildErrorMessage() const noexcept
	{
		std::string msg = m_originalErrorMessage;
		if (msg.empty()) {
			msg = getErrorDescription();
		}
		return std::string("Error: ") + getErrorName() + ": " + msg;
	}
};

/*************************************************************************************************************************
 Class CInputVector
**************************************************************************************************************************/
template <typename T>
class CInputVector {
private:
	
	const T* m_data;
	size_t m_size;
	
public:
	
	CInputVector(const std::vector<T>& vec)
		: m_data( vec.data() ), m_size( vec.size() )
	{
	}
	
	CInputVector(const T* in_data, size_t in_size)
		: m_data( in_data ), m_size(in_size )
	{
	}
	
	const T* data() const
	{
		return m_data;
	}
	
	size_t size() const
	{
		return m_size;
	}
	
};

// declare deprecated class name
template<typename T>
using CLibMCEnvInputVector = CInputVector<T>;

/*************************************************************************************************************************
 Class CWrapper 
**************************************************************************************************************************/
class CWrapper {
public:
	
	CWrapper()
	{
	}
	
	~CWrapper()
	{
	}
	static inline PWrapper loadLibrary()
	{
		return std::make_shared<CWrapper>();
	}
	
	inline void CheckError(CBase * pBaseClass, LibMCEnvResult nResult);

	inline void GetVersion(LibMCEnv_uint32 & nMajor, LibMCEnv_uint32 & nMinor, LibMCEnv_uint32 & nMicro);
	inline bool GetLastError(classParam<CBase> pInstance, std::string & sErrorMessage);
	inline void ReleaseInstance(classParam<CBase> pInstance);
	inline void AcquireInstance(classParam<CBase> pInstance);
	inline LibMCEnv_pvoid GetSymbolLookupMethod();

private:
	
	LibMCEnvResult checkBinaryVersion()
	{
		LibMCEnv_uint32 nMajor, nMinor, nMicro;
		GetVersion(nMajor, nMinor, nMicro);
		if (nMajor != LIBMCENV_VERSION_MAJOR) {
			return LIBMCENV_ERROR_INCOMPATIBLEBINARYVERSION;
		}
		return LIBMCENV_SUCCESS;
	}

	friend class CBase;
	friend class CIterator;
	friend class CTestEnvironment;
	friend class CImageData;
	friend class CToolpathPart;
	friend class CToolpathLayer;
	friend class CToolpathAccessor;
	friend class CBuild;
	friend class CWorkingFileExecution;
	friend class CWorkingFile;
	friend class CWorkingFileIterator;
	friend class CWorkingDirectory;
	friend class CDriverEnvironment;
	friend class CSignalTrigger;
	friend class CSignalHandler;
	friend class CStateEnvironment;
	friend class CUIEnvironment;

};

	
/*************************************************************************************************************************
 Class CBase 
**************************************************************************************************************************/
class CBase {
public:
	
protected:
	/* Wrapper Object that created the class. */
	CWrapper * m_pWrapper;
	/* Handle to Instance in library*/
	LibMCEnvHandle m_pHandle;

	/* Checks for an Error code and raises Exceptions */
	void CheckError(LibMCEnvResult nResult)
	{
		if (m_pWrapper != nullptr)
			m_pWrapper->CheckError(this, nResult);
	}
public:
	/**
	* CBase::CBase - Constructor for Base class.
	*/
	CBase(CWrapper * pWrapper, LibMCEnvHandle pHandle)
		: m_pWrapper(pWrapper), m_pHandle(pHandle)
	{
	}

	/**
	* CBase::~CBase - Destructor for Base class.
	*/
	virtual ~CBase()
	{
		if (m_pWrapper != nullptr)
			m_pWrapper->ReleaseInstance(this);
		m_pWrapper = nullptr;
	}

	/**
	* CBase::handle - Returns handle to instance.
	*/
	LibMCEnvHandle handle() const
	{
		return m_pHandle;
	}

	/**
	* CBase::wrapper - Returns wrapper instance.
	*/
	CWrapper * wrapper() const
	{
		return m_pWrapper;
	}
	
	friend class CWrapper;
};
	
/*************************************************************************************************************************
 Class CIterator 
**************************************************************************************************************************/
class CIterator : public CBase {
public:
	
	/**
	* CIterator::CIterator - Constructor for Iterator class.
	*/
	CIterator(CWrapper* pWrapper, LibMCEnvHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline bool MoveNext();
	inline bool MovePrevious();
	inline PBase GetCurrent();
	inline PIterator Clone();
	inline LibMCEnv_uint64 Count();
};
	
/*************************************************************************************************************************
 Class CTestEnvironment 
**************************************************************************************************************************/
class CTestEnvironment : public CBase {
public:
	
	/**
	* CTestEnvironment::CTestEnvironment - Constructor for TestEnvironment class.
	*/
	CTestEnvironment(CWrapper* pWrapper, LibMCEnvHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline void WriteTestOutput(const std::string & sOutputName, const CInputVector<LibMCEnv_uint8> & DataBuffer);
};
	
/*************************************************************************************************************************
 Class CImageData 
**************************************************************************************************************************/
class CImageData : public CBase {
public:
	
	/**
	* CImageData::CImageData - Constructor for ImageData class.
	*/
	CImageData(CWrapper* pWrapper, LibMCEnvHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline eImagePixelFormat GetPixelFormat();
	inline void ChangePixelFormat(const eImagePixelFormat ePixelFormat);
	inline void GetDPI(LibMCEnv_double & dDPIValueX, LibMCEnv_double & dDPIValueY);
	inline void SetDPI(const LibMCEnv_double dDPIValueX, const LibMCEnv_double dDPIValueY);
	inline void GetSizeInMM(LibMCEnv_double & dSizeX, LibMCEnv_double & dSizeY);
	inline void GetSizeInPixels(LibMCEnv_uint32 & nPixelSizeX, LibMCEnv_uint32 & nPixelSizeY);
	inline void ResizeImage(LibMCEnv_uint32 & nPixelSizeX, LibMCEnv_uint32 & nPixelSizeY);
	inline void LoadPNG(std::vector<LibMCEnv_uint8> & PNGDataBuffer);
	inline void EncodePNG();
	inline void GetEncodedPNGData(std::vector<LibMCEnv_uint8> & PNGDataBuffer);
	inline void ClearEncodedPNGData();
	inline void Clear(const LibMCEnv_uint32 nValue);
	inline LibMCEnv_uint32 GetPixel(const LibMCEnv_uint32 nX, const LibMCEnv_uint32 nY);
	inline void SetPixel(const LibMCEnv_uint32 nX, const LibMCEnv_uint32 nY, const LibMCEnv_uint32 nValue);
	inline void GetPixelRange(const LibMCEnv_uint32 nXMin, const LibMCEnv_uint32 nYMin, const LibMCEnv_uint32 nXMax, const LibMCEnv_uint32 nYMax, std::vector<LibMCEnv_uint8> & ValueBuffer);
	inline void SetPixelRange(const LibMCEnv_uint32 nXMin, const LibMCEnv_uint32 nYMin, const LibMCEnv_uint32 nXMax, const LibMCEnv_uint32 nYMax, const CInputVector<LibMCEnv_uint8> & ValueBuffer);
};
	
/*************************************************************************************************************************
 Class CToolpathPart 
**************************************************************************************************************************/
class CToolpathPart : public CBase {
public:
	
	/**
	* CToolpathPart::CToolpathPart - Constructor for ToolpathPart class.
	*/
	CToolpathPart(CWrapper* pWrapper, LibMCEnvHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline std::string GetName();
	inline std::string GetUUID();
	inline std::string GetMeshUUID();
	inline sToolpathPartTransform GetTransform();
};
	
/*************************************************************************************************************************
 Class CToolpathLayer 
**************************************************************************************************************************/
class CToolpathLayer : public CBase {
public:
	
	/**
	* CToolpathLayer::CToolpathLayer - Constructor for ToolpathLayer class.
	*/
	CToolpathLayer(CWrapper* pWrapper, LibMCEnvHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline std::string GetLayerDataUUID();
	inline LibMCEnv_uint32 GetSegmentCount();
	inline void GetSegmentInfo(const LibMCEnv_uint32 nIndex, eToolpathSegmentType & eType, LibMCEnv_uint32 & nPointCount);
	inline std::string GetSegmentProfileUUID(const LibMCEnv_uint32 nIndex);
	inline std::string GetSegmentProfileValue(const LibMCEnv_uint32 nIndex, const std::string & sValueName);
	inline LibMCEnv_double GetSegmentProfileTypedValue(const LibMCEnv_uint32 nIndex, const eToolpathProfileValueType eValueType);
	inline std::string GetSegmentPartUUID(const LibMCEnv_uint32 nIndex);
	inline void GetSegmentPointData(const LibMCEnv_uint32 nIndex, std::vector<sPosition2D> & PointDataBuffer);
	inline LibMCEnv_int32 GetZValue();
	inline LibMCEnv_double GetUnits();
};
	
/*************************************************************************************************************************
 Class CToolpathAccessor 
**************************************************************************************************************************/
class CToolpathAccessor : public CBase {
public:
	
	/**
	* CToolpathAccessor::CToolpathAccessor - Constructor for ToolpathAccessor class.
	*/
	CToolpathAccessor(CWrapper* pWrapper, LibMCEnvHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline std::string GetStorageUUID();
	inline LibMCEnv_uint32 GetLayerCount();
	inline PToolpathLayer LoadLayer(const LibMCEnv_uint32 nLayerIndex);
	inline LibMCEnv_double GetUnits();
	inline bool HasMetaData(const std::string & sNameSpace, const std::string & sName);
	inline std::string GetMetaDataValue(const std::string & sNameSpace, const std::string & sName);
	inline std::string GetMetaDataType(const std::string & sNameSpace, const std::string & sName);
	inline LibMCEnv_uint32 GetPartCount();
	inline PToolpathPart GetPart(const LibMCEnv_uint32 nPartIndex);
	inline PToolpathPart FindPartByUUID(const std::string & sPartUUID);
};
	
/*************************************************************************************************************************
 Class CBuild 
**************************************************************************************************************************/
class CBuild : public CBase {
public:
	
	/**
	* CBuild::CBuild - Constructor for Build class.
	*/
	CBuild(CWrapper* pWrapper, LibMCEnvHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline std::string GetName();
	inline std::string GetBuildUUID();
	inline std::string GetStorageUUID();
	inline std::string GetStorageSHA256();
	inline LibMCEnv_uint32 GetLayerCount();
	inline void LoadToolpath();
	inline void UnloadToolpath();
	inline bool ToolpathIsLoaded();
	inline PToolpathAccessor CreateToolpathAccessor();
	inline std::string AddBinaryData(const std::string & sName, const std::string & sMIMEType, const CInputVector<LibMCEnv_uint8> & ContentBuffer);
};
	
/*************************************************************************************************************************
 Class CWorkingFileExecution 
**************************************************************************************************************************/
class CWorkingFileExecution : public CBase {
public:
	
	/**
	* CWorkingFileExecution::CWorkingFileExecution - Constructor for WorkingFileExecution class.
	*/
	CWorkingFileExecution(CWrapper* pWrapper, LibMCEnvHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline void GetStatus();
	inline std::string ReturnStdOut();
};
	
/*************************************************************************************************************************
 Class CWorkingFile 
**************************************************************************************************************************/
class CWorkingFile : public CBase {
public:
	
	/**
	* CWorkingFile::CWorkingFile - Constructor for WorkingFile class.
	*/
	CWorkingFile(CWrapper* pWrapper, LibMCEnvHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline std::string GetAbsoluteFileName();
	inline LibMCEnv_uint64 GetSize();
	inline std::string CalculateSHA2();
	inline PWorkingFileExecution ExecuteFile();
	inline bool IsManaged();
	inline void MakeManaged();
	inline bool FileExists();
	inline bool DeleteFromDisk();
};
	
/*************************************************************************************************************************
 Class CWorkingFileIterator 
**************************************************************************************************************************/
class CWorkingFileIterator : public CIterator {
public:
	
	/**
	* CWorkingFileIterator::CWorkingFileIterator - Constructor for WorkingFileIterator class.
	*/
	CWorkingFileIterator(CWrapper* pWrapper, LibMCEnvHandle pHandle)
		: CIterator(pWrapper, pHandle)
	{
	}
	
	inline PWorkingFile GetCurrentFile();
};
	
/*************************************************************************************************************************
 Class CWorkingDirectory 
**************************************************************************************************************************/
class CWorkingDirectory : public CBase {
public:
	
	/**
	* CWorkingDirectory::CWorkingDirectory - Constructor for WorkingDirectory class.
	*/
	CWorkingDirectory(CWrapper* pWrapper, LibMCEnvHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline bool IsActive();
	inline std::string GetAbsoluteFilePath();
	inline PWorkingFile StoreCustomData(const std::string & sFileName, const CInputVector<LibMCEnv_uint8> & DataBufferBuffer);
	inline PWorkingFile StoreCustomString(const std::string & sFileName, const std::string & sDataString);
	inline PWorkingFile StoreDriverData(const std::string & sFileName, const std::string & sIdentifier);
	inline bool CleanUp();
	inline PWorkingFile AddManagedFile(const std::string & sFileName);
	inline bool HasUnmanagedFiles();
	inline PWorkingFileIterator RetrieveUnmanagedFiles();
	inline PWorkingFileIterator RetrieveManagedFiles();
	inline PWorkingFileIterator RetrieveAllFiles();
};
	
/*************************************************************************************************************************
 Class CDriverEnvironment 
**************************************************************************************************************************/
class CDriverEnvironment : public CBase {
public:
	
	/**
	* CDriverEnvironment::CDriverEnvironment - Constructor for DriverEnvironment class.
	*/
	CDriverEnvironment(CWrapper* pWrapper, LibMCEnvHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline PWorkingDirectory CreateWorkingDirectory();
	inline void RetrieveDriverData(const std::string & sIdentifier, std::vector<LibMCEnv_uint8> & DataBufferBuffer);
	inline PToolpathAccessor CreateToolpathAccessor(const std::string & sStreamUUID);
	inline void RegisterStringParameter(const std::string & sParameterName, const std::string & sDescription, const std::string & sDefaultValue);
	inline void RegisterUUIDParameter(const std::string & sParameterName, const std::string & sDescription, const std::string & sDefaultValue);
	inline void RegisterDoubleParameter(const std::string & sParameterName, const std::string & sDescription, const LibMCEnv_double dDefaultValue);
	inline void RegisterIntegerParameter(const std::string & sParameterName, const std::string & sDescription, const LibMCEnv_int64 nDefaultValue);
	inline void RegisterBoolParameter(const std::string & sParameterName, const std::string & sDescription, const bool bDefaultValue);
	inline void SetStringParameter(const std::string & sParameterName, const std::string & sValue);
	inline void SetUUIDParameter(const std::string & sParameterName, const std::string & sValue);
	inline void SetDoubleParameter(const std::string & sParameterName, const LibMCEnv_double dValue);
	inline void SetIntegerParameter(const std::string & sParameterName, const LibMCEnv_int64 nValue);
	inline void SetBoolParameter(const std::string & sParameterName, const bool bValue);
	inline void Sleep(const LibMCEnv_uint32 nDelay);
	inline LibMCEnv_uint64 GetGlobalTimerInMilliseconds();
	inline void LogMessage(const std::string & sLogString);
	inline void LogWarning(const std::string & sLogString);
	inline void LogInfo(const std::string & sLogString);
	inline PImageData CreateEmptyImage(const LibMCEnv_uint32 nPixelSizeX, const LibMCEnv_uint32 nPixelSizeY, const LibMCEnv_double dDPIValueX, const LibMCEnv_double dDPIValueY, const eImagePixelFormat ePixelFormat);
	inline PImageData LoadPNGImage(const CInputVector<LibMCEnv_uint8> & PNGDataBuffer, const LibMCEnv_double dDPIValueX, const LibMCEnv_double dDPIValueY, const eImagePixelFormat ePixelFormat);
};
	
/*************************************************************************************************************************
 Class CSignalTrigger 
**************************************************************************************************************************/
class CSignalTrigger : public CBase {
public:
	
	/**
	* CSignalTrigger::CSignalTrigger - Constructor for SignalTrigger class.
	*/
	CSignalTrigger(CWrapper* pWrapper, LibMCEnvHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline bool CanTrigger();
	inline void Trigger();
	inline bool WaitForHandling(const LibMCEnv_uint32 nTimeOut);
	inline std::string GetName();
	inline std::string GetStateMachine();
	inline void SetString(const std::string & sName, const std::string & sValue);
	inline void SetUUID(const std::string & sName, const std::string & sValue);
	inline void SetDouble(const std::string & sName, const LibMCEnv_double dValue);
	inline void SetInteger(const std::string & sName, const LibMCEnv_int64 nValue);
	inline void SetBool(const std::string & sName, const bool bValue);
	inline std::string GetStringResult(const std::string & sName);
	inline std::string GetUUIDResult(const std::string & sName);
	inline LibMCEnv_double GetDoubleResult(const std::string & sName);
	inline LibMCEnv_int64 GetIntegerResult(const std::string & sName);
	inline bool GetBoolResult(const std::string & sName);
};
	
/*************************************************************************************************************************
 Class CSignalHandler 
**************************************************************************************************************************/
class CSignalHandler : public CBase {
public:
	
	/**
	* CSignalHandler::CSignalHandler - Constructor for SignalHandler class.
	*/
	CSignalHandler(CWrapper* pWrapper, LibMCEnvHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline void SignalHandled();
	inline std::string GetName();
	inline std::string GetSignalID();
	inline std::string GetStateMachine();
	inline std::string GetString(const std::string & sName);
	inline std::string GetUUID(const std::string & sName);
	inline LibMCEnv_double GetDouble(const std::string & sName);
	inline LibMCEnv_int64 GetInteger(const std::string & sName);
	inline bool GetBool(const std::string & sName);
	inline void SetStringResult(const std::string & sName, const std::string & sValue);
	inline void SetUUIDResult(const std::string & sName, const std::string & sValue);
	inline void SetDoubleResult(const std::string & sName, const LibMCEnv_double dValue);
	inline void SetIntegerResult(const std::string & sName, const LibMCEnv_int64 nValue);
	inline void SetBoolResult(const std::string & sName, const bool bValue);
};
	
/*************************************************************************************************************************
 Class CStateEnvironment 
**************************************************************************************************************************/
class CStateEnvironment : public CBase {
public:
	
	/**
	* CStateEnvironment::CStateEnvironment - Constructor for StateEnvironment class.
	*/
	CStateEnvironment(CWrapper* pWrapper, LibMCEnvHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline std::string GetMachineState(const std::string & sMachineInstance);
	inline PSignalTrigger PrepareSignal(const std::string & sMachineInstance, const std::string & sSignalName);
	inline bool WaitForSignal(const std::string & sSignalName, const LibMCEnv_uint32 nTimeOut, PSignalHandler & pHandlerInstance);
	inline void GetDriverLibrary(const std::string & sDriverName, std::string & sDriverType, LibMCEnv_pvoid & pDriverLookup);
	inline void CreateDriverAccess(const std::string & sDriverName, LibMCEnv_pvoid & pDriverHandle);
	inline PBuild GetBuildJob(const std::string & sBuildUUID);
	inline void UnloadAllToolpathes();
	inline void SetNextState(const std::string & sStateName);
	inline void LogMessage(const std::string & sLogString);
	inline void LogWarning(const std::string & sLogString);
	inline void LogInfo(const std::string & sLogString);
	inline void Sleep(const LibMCEnv_uint32 nDelay);
	inline bool CheckForTermination();
	inline void StoreSignal(const std::string & sName, classParam<CSignalHandler> pHandler);
	inline PSignalHandler RetrieveSignal(const std::string & sName);
	inline void ClearStoredValue(const std::string & sName);
	inline void SetStringParameter(const std::string & sParameterGroup, const std::string & sParameterName, const std::string & sValue);
	inline void SetUUIDParameter(const std::string & sParameterGroup, const std::string & sParameterName, const std::string & sValue);
	inline void SetDoubleParameter(const std::string & sParameterGroup, const std::string & sParameterName, const LibMCEnv_double dValue);
	inline void SetIntegerParameter(const std::string & sParameterGroup, const std::string & sParameterName, const LibMCEnv_int64 nValue);
	inline void SetBoolParameter(const std::string & sParameterGroup, const std::string & sParameterName, const bool bValue);
	inline std::string GetStringParameter(const std::string & sParameterGroup, const std::string & sParameterName);
	inline std::string GetUUIDParameter(const std::string & sParameterGroup, const std::string & sParameterName);
	inline LibMCEnv_double GetDoubleParameter(const std::string & sParameterGroup, const std::string & sParameterName);
	inline LibMCEnv_int64 GetIntegerParameter(const std::string & sParameterGroup, const std::string & sParameterName);
	inline bool GetBoolParameter(const std::string & sParameterGroup, const std::string & sParameterName);
	inline void LoadResourceData(const std::string & sResourceName, std::vector<LibMCEnv_uint8> & ResourceDataBuffer);
	inline PImageData CreateEmptyImage(const LibMCEnv_uint32 nPixelSizeX, const LibMCEnv_uint32 nPixelSizeY, const LibMCEnv_double dDPIValueX, const LibMCEnv_double dDPIValueY, const eImagePixelFormat ePixelFormat);
	inline PImageData LoadPNGImage(const CInputVector<LibMCEnv_uint8> & PNGDataBuffer, const LibMCEnv_double dDPIValueX, const LibMCEnv_double dDPIValueY, const eImagePixelFormat ePixelFormat);
	inline LibMCEnv_uint64 GetGlobalTimerInMilliseconds();
	inline PTestEnvironment GetTestEnvironment();
};
	
/*************************************************************************************************************************
 Class CUIEnvironment 
**************************************************************************************************************************/
class CUIEnvironment : public CBase {
public:
	
	/**
	* CUIEnvironment::CUIEnvironment - Constructor for UIEnvironment class.
	*/
	CUIEnvironment(CWrapper* pWrapper, LibMCEnvHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline void ActivateModalDialog(const std::string & sDialogName);
	inline void CloseModalDialog();
	inline void ActivatePage(const std::string & sPageName);
	inline void LogOut();
	inline void ShowHint(const std::string & sHint, const LibMCEnv_uint32 nTimeoutInMS);
	inline void ShowHintColored(const std::string & sHint, const LibMCEnv_uint32 nTimeoutInMS, const sColorRGB & Color, const sColorRGB & FontColor);
	inline void HideHint();
	inline std::string ShowMessageDlg(const std::string & sCaption, const std::string & sTitle, const eMessageDialogType eDialogType, const std::string & sYesEvent, const std::string & sNoEvent, const std::string & sCancelEvent);
	inline std::string RetrieveEventSender();
	inline std::string RetrieveEventSenderUUID();
	inline PSignalTrigger PrepareSignal(const std::string & sMachineInstance, const std::string & sSignalName);
	inline std::string GetMachineState(const std::string & sMachineInstance);
	inline void LogMessage(const std::string & sLogString);
	inline void LogWarning(const std::string & sLogString);
	inline void LogInfo(const std::string & sLogString);
	inline std::string GetMachineParameter(const std::string & sMachineInstance, const std::string & sParameterGroup, const std::string & sParameterName);
	inline std::string GetMachineParameterAsUUID(const std::string & sMachineInstance, const std::string & sParameterGroup, const std::string & sParameterName);
	inline LibMCEnv_double GetMachineParameterAsDouble(const std::string & sMachineInstance, const std::string & sParameterGroup, const std::string & sParameterName);
	inline LibMCEnv_int64 GetMachineParameterAsInteger(const std::string & sMachineInstance, const std::string & sParameterGroup, const std::string & sParameterName);
	inline bool GetMachineParameterAsBool(const std::string & sMachineInstance, const std::string & sParameterGroup, const std::string & sParameterName);
	inline std::string GetUIProperty(const std::string & sElementPath, const std::string & sPropertyName);
	inline std::string GetUIPropertyAsUUID(const std::string & sElementPath, const std::string & sPropertyName);
	inline LibMCEnv_double GetUIPropertyAsDouble(const std::string & sElementPath, const std::string & sPropertyName);
	inline LibMCEnv_int64 GetUIPropertyAsInteger(const std::string & sElementPath, const std::string & sPropertyName);
	inline bool GetUIPropertyAsBool(const std::string & sElementPath, const std::string & sPropertyName);
	inline void SetUIProperty(const std::string & sElementPath, const std::string & sPropertyName, const std::string & sValue);
	inline void SetUIPropertyAsUUID(const std::string & sElementPath, const std::string & sPropertyName, const std::string & sValue);
	inline void SetUIPropertyAsDouble(const std::string & sElementPath, const std::string & sPropertyName, const LibMCEnv_double dValue);
	inline void SetUIPropertyAsInteger(const std::string & sElementPath, const std::string & sPropertyName, const LibMCEnv_int64 nValue);
	inline void SetUIPropertyAsBool(const std::string & sElementPath, const std::string & sPropertyName, const bool bValue);
	inline PImageData CreateEmptyImage(const LibMCEnv_uint32 nPixelSizeX, const LibMCEnv_uint32 nPixelSizeY, const LibMCEnv_double dDPIValueX, const LibMCEnv_double dDPIValueY, const eImagePixelFormat ePixelFormat);
	inline PImageData LoadPNGImage(const CInputVector<LibMCEnv_uint8> & PNGDataBuffer, const LibMCEnv_double dDPIValueX, const LibMCEnv_double dDPIValueY, const eImagePixelFormat ePixelFormat);
	inline LibMCEnv_uint64 GetGlobalTimerInMilliseconds();
	inline PTestEnvironment GetTestEnvironment();
};
	
	/**
	* CWrapper::GetVersion - retrieves the binary version of this library.
	* @param[out] nMajor - returns the major version of this library
	* @param[out] nMinor - returns the minor version of this library
	* @param[out] nMicro - returns the micro version of this library
	*/
	inline void CWrapper::GetVersion(LibMCEnv_uint32 & nMajor, LibMCEnv_uint32 & nMinor, LibMCEnv_uint32 & nMicro)
	{
		CheckError(nullptr,libmcenv_getversion(&nMajor, &nMinor, &nMicro));
	}
	
	/**
	* CWrapper::GetLastError - Returns the last error recorded on this object
	* @param[in] pInstance - Instance Handle
	* @param[out] sErrorMessage - Message of the last error
	* @return Is there a last error to query
	*/
	inline bool CWrapper::GetLastError(classParam<CBase> pInstance, std::string & sErrorMessage)
	{
		LibMCEnvHandle hInstance = pInstance.GetHandle();
		LibMCEnv_uint32 bytesNeededErrorMessage = 0;
		LibMCEnv_uint32 bytesWrittenErrorMessage = 0;
		bool resultHasError = 0;
		CheckError(nullptr,libmcenv_getlasterror(hInstance, 0, &bytesNeededErrorMessage, nullptr, &resultHasError));
		std::vector<char> bufferErrorMessage(bytesNeededErrorMessage);
		CheckError(nullptr,libmcenv_getlasterror(hInstance, bytesNeededErrorMessage, &bytesWrittenErrorMessage, &bufferErrorMessage[0], &resultHasError));
		sErrorMessage = std::string(&bufferErrorMessage[0]);
		
		return resultHasError;
	}
	
	/**
	* CWrapper::ReleaseInstance - Releases shared ownership of an Instance
	* @param[in] pInstance - Instance Handle
	*/
	inline void CWrapper::ReleaseInstance(classParam<CBase> pInstance)
	{
		LibMCEnvHandle hInstance = pInstance.GetHandle();
		CheckError(nullptr,libmcenv_releaseinstance(hInstance));
	}
	
	/**
	* CWrapper::AcquireInstance - Acquires shared ownership of an Instance
	* @param[in] pInstance - Instance Handle
	*/
	inline void CWrapper::AcquireInstance(classParam<CBase> pInstance)
	{
		LibMCEnvHandle hInstance = pInstance.GetHandle();
		CheckError(nullptr,libmcenv_acquireinstance(hInstance));
	}
	
	/**
	* CWrapper::GetSymbolLookupMethod - Returns the address of the SymbolLookupMethod
	* @return Address of the SymbolAddressMethod
	*/
	inline LibMCEnv_pvoid CWrapper::GetSymbolLookupMethod()
	{
		LibMCEnv_pvoid resultSymbolLookupMethod = 0;
		CheckError(nullptr,libmcenv_getsymbollookupmethod(&resultSymbolLookupMethod));
		
		return resultSymbolLookupMethod;
	}
	
	inline void CWrapper::CheckError(CBase * pBaseClass, LibMCEnvResult nResult)
	{
		if (nResult != 0) {
			std::string sErrorMessage;
			if (pBaseClass != nullptr) {
				GetLastError(pBaseClass, sErrorMessage);
			}
			throw ELibMCEnvException(nResult, sErrorMessage);
		}
	}
	

	
	/**
	 * Method definitions for class CBase
	 */
	
	/**
	 * Method definitions for class CIterator
	 */
	
	/**
	* CIterator::MoveNext - Iterates to the next object in the list.
	* @return Iterates to the next object in the list.
	*/
	bool CIterator::MoveNext()
	{
		bool resultHasNext = 0;
		CheckError(libmcenv_iterator_movenext(m_pHandle, &resultHasNext));
		
		return resultHasNext;
	}
	
	/**
	* CIterator::MovePrevious - Iterates to the previous object in the list.
	* @return Iterates to the previous object in the list.
	*/
	bool CIterator::MovePrevious()
	{
		bool resultHasPrevious = 0;
		CheckError(libmcenv_iterator_moveprevious(m_pHandle, &resultHasPrevious));
		
		return resultHasPrevious;
	}
	
	/**
	* CIterator::GetCurrent - Returns the object the iterator points at.
	* @return returns the object instance.
	*/
	PBase CIterator::GetCurrent()
	{
		LibMCEnvHandle hInstance = nullptr;
		CheckError(libmcenv_iterator_getcurrent(m_pHandle, &hInstance));
		
		if (!hInstance) {
			CheckError(LIBMCENV_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CBase>(m_pWrapper, hInstance);
	}
	
	/**
	* CIterator::Clone - Creates a new object iterator with the same object list.
	* @return returns the cloned Iterator instance
	*/
	PIterator CIterator::Clone()
	{
		LibMCEnvHandle hOutIterator = nullptr;
		CheckError(libmcenv_iterator_clone(m_pHandle, &hOutIterator));
		
		if (!hOutIterator) {
			CheckError(LIBMCENV_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CIterator>(m_pWrapper, hOutIterator);
	}
	
	/**
	* CIterator::Count - Returns the number of resoucres the iterator captures.
	* @return returns the number of objects the iterator captures.
	*/
	LibMCEnv_uint64 CIterator::Count()
	{
		LibMCEnv_uint64 resultCount = 0;
		CheckError(libmcenv_iterator_count(m_pHandle, &resultCount));
		
		return resultCount;
	}
	
	/**
	 * Method definitions for class CTestEnvironment
	 */
	
	/**
	* CTestEnvironment::WriteTestOutput - Write output file to test directory.
	* @param[in] sOutputName - Output file name. Only alphanumeric characters, point, underscore and hypen are allowed.
	* @param[in] DataBuffer - Test data to write into output directory.
	*/
	void CTestEnvironment::WriteTestOutput(const std::string & sOutputName, const CInputVector<LibMCEnv_uint8> & DataBuffer)
	{
		CheckError(libmcenv_testenvironment_writetestoutput(m_pHandle, sOutputName.c_str(), (LibMCEnv_uint64)DataBuffer.size(), DataBuffer.data()));
	}
	
	/**
	 * Method definitions for class CImageData
	 */
	
	/**
	* CImageData::GetPixelFormat - Returns Pixel format of the image.
	* @return Pixel Format of image
	*/
	eImagePixelFormat CImageData::GetPixelFormat()
	{
		eImagePixelFormat resultPixelFormat = (eImagePixelFormat) 0;
		CheckError(libmcenv_imagedata_getpixelformat(m_pHandle, &resultPixelFormat));
		
		return resultPixelFormat;
	}
	
	/**
	* CImageData::ChangePixelFormat - Changes Pixel format of the image. Might lose alpha or color information during the process.
	* @param[in] ePixelFormat - new Pixel Format of image
	*/
	void CImageData::ChangePixelFormat(const eImagePixelFormat ePixelFormat)
	{
		CheckError(libmcenv_imagedata_changepixelformat(m_pHandle, ePixelFormat));
	}
	
	/**
	* CImageData::GetDPI - Returns DPI values in X and Y.
	* @param[out] dDPIValueX - DPI value in X
	* @param[out] dDPIValueY - DPI value in Y
	*/
	void CImageData::GetDPI(LibMCEnv_double & dDPIValueX, LibMCEnv_double & dDPIValueY)
	{
		CheckError(libmcenv_imagedata_getdpi(m_pHandle, &dDPIValueX, &dDPIValueY));
	}
	
	/**
	* CImageData::SetDPI - Sets DPI values in X and Y.
	* @param[in] dDPIValueX - new DPI value in X
	* @param[in] dDPIValueY - new DPI value in Y
	*/
	void CImageData::SetDPI(const LibMCEnv_double dDPIValueX, const LibMCEnv_double dDPIValueY)
	{
		CheckError(libmcenv_imagedata_setdpi(m_pHandle, dDPIValueX, dDPIValueY));
	}
	
	/**
	* CImageData::GetSizeInMM - Returns image sizes inmm.
	* @param[out] dSizeX - Size in X in mm
	* @param[out] dSizeY - Size in Y in mm
	*/
	void CImageData::GetSizeInMM(LibMCEnv_double & dSizeX, LibMCEnv_double & dSizeY)
	{
		CheckError(libmcenv_imagedata_getsizeinmm(m_pHandle, &dSizeX, &dSizeY));
	}
	
	/**
	* CImageData::GetSizeInPixels - Returns image pixel sizes.
	* @param[out] nPixelSizeX - Number of pixels in X
	* @param[out] nPixelSizeY - Number of pixels in Y
	*/
	void CImageData::GetSizeInPixels(LibMCEnv_uint32 & nPixelSizeX, LibMCEnv_uint32 & nPixelSizeY)
	{
		CheckError(libmcenv_imagedata_getsizeinpixels(m_pHandle, &nPixelSizeX, &nPixelSizeY));
	}
	
	/**
	* CImageData::ResizeImage - Resizes Image pixel data.
	* @param[out] nPixelSizeX - Number of pixels in X
	* @param[out] nPixelSizeY - Number of pixels in Y
	*/
	void CImageData::ResizeImage(LibMCEnv_uint32 & nPixelSizeX, LibMCEnv_uint32 & nPixelSizeY)
	{
		CheckError(libmcenv_imagedata_resizeimage(m_pHandle, &nPixelSizeX, &nPixelSizeY));
	}
	
	/**
	* CImageData::LoadPNG - Loads a PNG from a binary array. Supports RGB, RGBA and Greyscale images.
	* @param[out] PNGDataBuffer - PNG Data stream.
	*/
	void CImageData::LoadPNG(std::vector<LibMCEnv_uint8> & PNGDataBuffer)
	{
		LibMCEnv_uint64 elementsNeededPNGData = 0;
		LibMCEnv_uint64 elementsWrittenPNGData = 0;
		CheckError(libmcenv_imagedata_loadpng(m_pHandle, 0, &elementsNeededPNGData, nullptr));
		PNGDataBuffer.resize((size_t) elementsNeededPNGData);
		CheckError(libmcenv_imagedata_loadpng(m_pHandle, elementsNeededPNGData, &elementsWrittenPNGData, PNGDataBuffer.data()));
	}
	
	/**
	* CImageData::EncodePNG - Encodes PNG and stores data stream in image object.
	*/
	void CImageData::EncodePNG()
	{
		CheckError(libmcenv_imagedata_encodepng(m_pHandle));
	}
	
	/**
	* CImageData::GetEncodedPNGData - Retrieves encoded data stream of image object. MUST have been encoded with EncodePNG before.
	* @param[out] PNGDataBuffer - PNG Data stream.
	*/
	void CImageData::GetEncodedPNGData(std::vector<LibMCEnv_uint8> & PNGDataBuffer)
	{
		LibMCEnv_uint64 elementsNeededPNGData = 0;
		LibMCEnv_uint64 elementsWrittenPNGData = 0;
		CheckError(libmcenv_imagedata_getencodedpngdata(m_pHandle, 0, &elementsNeededPNGData, nullptr));
		PNGDataBuffer.resize((size_t) elementsNeededPNGData);
		CheckError(libmcenv_imagedata_getencodedpngdata(m_pHandle, elementsNeededPNGData, &elementsWrittenPNGData, PNGDataBuffer.data()));
	}
	
	/**
	* CImageData::ClearEncodedPNGData - Releases encoded data stream of image object.
	*/
	void CImageData::ClearEncodedPNGData()
	{
		CheckError(libmcenv_imagedata_clearencodedpngdata(m_pHandle));
	}
	
	/**
	* CImageData::Clear - Sets all pixels to a single value.
	* @param[in] nValue - Pixel value.
	*/
	void CImageData::Clear(const LibMCEnv_uint32 nValue)
	{
		CheckError(libmcenv_imagedata_clear(m_pHandle, nValue));
	}
	
	/**
	* CImageData::GetPixel - Returns one pixel of an image.
	* @param[in] nX - Pixel coordinate in X
	* @param[in] nY - Pixel coordinate in Y
	* @return Pixel value at this position
	*/
	LibMCEnv_uint32 CImageData::GetPixel(const LibMCEnv_uint32 nX, const LibMCEnv_uint32 nY)
	{
		LibMCEnv_uint32 resultValue = 0;
		CheckError(libmcenv_imagedata_getpixel(m_pHandle, nX, nY, &resultValue));
		
		return resultValue;
	}
	
	/**
	* CImageData::SetPixel - Sets one pixel of an image.
	* @param[in] nX - Pixel coordinate in X
	* @param[in] nY - Pixel coordinate in Y
	* @param[in] nValue - New Pixel value at this position
	*/
	void CImageData::SetPixel(const LibMCEnv_uint32 nX, const LibMCEnv_uint32 nY, const LibMCEnv_uint32 nValue)
	{
		CheckError(libmcenv_imagedata_setpixel(m_pHandle, nX, nY, nValue));
	}
	
	/**
	* CImageData::GetPixelRange - Returns a subset of an image or the whole image data.
	* @param[in] nXMin - Min Pixel coordinate in X. MUST be within image bounds.
	* @param[in] nYMin - Min Pixel coordinate in Y. MUST be within image bounds.
	* @param[in] nXMax - Max Pixel coordinate in X. MUST be within image bounds. MUST be larger or equal than MinX
	* @param[in] nYMax - Max Pixel coordinate in Y. MUST be within image bounds. MUST be larger or equal than MinY
	* @param[out] ValueBuffer - Pixel values of the rectangle, rowwise array. MUST have the exact number of pixels in size and 1, 3 or 4 bytes per pixel, depending on pixel format.
	*/
	void CImageData::GetPixelRange(const LibMCEnv_uint32 nXMin, const LibMCEnv_uint32 nYMin, const LibMCEnv_uint32 nXMax, const LibMCEnv_uint32 nYMax, std::vector<LibMCEnv_uint8> & ValueBuffer)
	{
		LibMCEnv_uint64 elementsNeededValue = 0;
		LibMCEnv_uint64 elementsWrittenValue = 0;
		CheckError(libmcenv_imagedata_getpixelrange(m_pHandle, nXMin, nYMin, nXMax, nYMax, 0, &elementsNeededValue, nullptr));
		ValueBuffer.resize((size_t) elementsNeededValue);
		CheckError(libmcenv_imagedata_getpixelrange(m_pHandle, nXMin, nYMin, nXMax, nYMax, elementsNeededValue, &elementsWrittenValue, ValueBuffer.data()));
	}
	
	/**
	* CImageData::SetPixelRange - Exchanges a subset of an image or the whole image data.
	* @param[in] nXMin - Min Pixel coordinate in X. MUST be within image bounds.
	* @param[in] nYMin - Min Pixel coordinate in Y. MUST be within image bounds.
	* @param[in] nXMax - Max Pixel coordinate in X. MUST be within image bounds. MUST be larger or equal than MinX
	* @param[in] nYMax - Max Pixel coordinate in Y. MUST be within image bounds. MUST be larger or equal than MinY
	* @param[in] ValueBuffer - New pixel values of the rectangle, rowwise array. MUST have the exact number of pixels in size and 1, 3 or 4 bytes per pixel, depending on pixel format.
	*/
	void CImageData::SetPixelRange(const LibMCEnv_uint32 nXMin, const LibMCEnv_uint32 nYMin, const LibMCEnv_uint32 nXMax, const LibMCEnv_uint32 nYMax, const CInputVector<LibMCEnv_uint8> & ValueBuffer)
	{
		CheckError(libmcenv_imagedata_setpixelrange(m_pHandle, nXMin, nYMin, nXMax, nYMax, (LibMCEnv_uint64)ValueBuffer.size(), ValueBuffer.data()));
	}
	
	/**
	 * Method definitions for class CToolpathPart
	 */
	
	/**
	* CToolpathPart::GetName - Returns Part Name.
	* @return Returns toolpath part name.
	*/
	std::string CToolpathPart::GetName()
	{
		LibMCEnv_uint32 bytesNeededName = 0;
		LibMCEnv_uint32 bytesWrittenName = 0;
		CheckError(libmcenv_toolpathpart_getname(m_pHandle, 0, &bytesNeededName, nullptr));
		std::vector<char> bufferName(bytesNeededName);
		CheckError(libmcenv_toolpathpart_getname(m_pHandle, bytesNeededName, &bytesWrittenName, &bufferName[0]));
		
		return std::string(&bufferName[0]);
	}
	
	/**
	* CToolpathPart::GetUUID - Returns Part UUID.
	* @return Returns toolpath part uuid.
	*/
	std::string CToolpathPart::GetUUID()
	{
		LibMCEnv_uint32 bytesNeededUUID = 0;
		LibMCEnv_uint32 bytesWrittenUUID = 0;
		CheckError(libmcenv_toolpathpart_getuuid(m_pHandle, 0, &bytesNeededUUID, nullptr));
		std::vector<char> bufferUUID(bytesNeededUUID);
		CheckError(libmcenv_toolpathpart_getuuid(m_pHandle, bytesNeededUUID, &bytesWrittenUUID, &bufferUUID[0]));
		
		return std::string(&bufferUUID[0]);
	}
	
	/**
	* CToolpathPart::GetMeshUUID - Returns Mesh UUID of the part.
	* @return Returns toolpath part mesh uuid.
	*/
	std::string CToolpathPart::GetMeshUUID()
	{
		LibMCEnv_uint32 bytesNeededMeshUUID = 0;
		LibMCEnv_uint32 bytesWrittenMeshUUID = 0;
		CheckError(libmcenv_toolpathpart_getmeshuuid(m_pHandle, 0, &bytesNeededMeshUUID, nullptr));
		std::vector<char> bufferMeshUUID(bytesNeededMeshUUID);
		CheckError(libmcenv_toolpathpart_getmeshuuid(m_pHandle, bytesNeededMeshUUID, &bytesWrittenMeshUUID, &bufferMeshUUID[0]));
		
		return std::string(&bufferMeshUUID[0]);
	}
	
	/**
	* CToolpathPart::GetTransform - Returns Mesh Transform of the part.
	* @return Returns the mesh transform of the toolpath.
	*/
	sToolpathPartTransform CToolpathPart::GetTransform()
	{
		sToolpathPartTransform resultMeshUUID;
		CheckError(libmcenv_toolpathpart_gettransform(m_pHandle, &resultMeshUUID));
		
		return resultMeshUUID;
	}
	
	/**
	 * Method definitions for class CToolpathLayer
	 */
	
	/**
	* CToolpathLayer::GetLayerDataUUID - Retrieves the layerdata's uuid
	* @return Returns the uuid value.
	*/
	std::string CToolpathLayer::GetLayerDataUUID()
	{
		LibMCEnv_uint32 bytesNeededUUID = 0;
		LibMCEnv_uint32 bytesWrittenUUID = 0;
		CheckError(libmcenv_toolpathlayer_getlayerdatauuid(m_pHandle, 0, &bytesNeededUUID, nullptr));
		std::vector<char> bufferUUID(bytesNeededUUID);
		CheckError(libmcenv_toolpathlayer_getlayerdatauuid(m_pHandle, bytesNeededUUID, &bytesWrittenUUID, &bufferUUID[0]));
		
		return std::string(&bufferUUID[0]);
	}
	
	/**
	* CToolpathLayer::GetSegmentCount - Retrieves the count of segments.
	* @return Count
	*/
	LibMCEnv_uint32 CToolpathLayer::GetSegmentCount()
	{
		LibMCEnv_uint32 resultCount = 0;
		CheckError(libmcenv_toolpathlayer_getsegmentcount(m_pHandle, &resultCount));
		
		return resultCount;
	}
	
	/**
	* CToolpathLayer::GetSegmentInfo - Retrieves the segment type information .
	* @param[in] nIndex - Index. Must be between 0 and Count - 1.
	* @param[out] eType - Segment Type
	* @param[out] nPointCount - Point count of segment.
	*/
	void CToolpathLayer::GetSegmentInfo(const LibMCEnv_uint32 nIndex, eToolpathSegmentType & eType, LibMCEnv_uint32 & nPointCount)
	{
		CheckError(libmcenv_toolpathlayer_getsegmentinfo(m_pHandle, nIndex, &eType, &nPointCount));
	}
	
	/**
	* CToolpathLayer::GetSegmentProfileUUID - Retrieves the assigned segment profile uuid.
	* @param[in] nIndex - Index. Must be between 0 and Count - 1.
	* @return Segment Profile UUID
	*/
	std::string CToolpathLayer::GetSegmentProfileUUID(const LibMCEnv_uint32 nIndex)
	{
		LibMCEnv_uint32 bytesNeededProfileUUID = 0;
		LibMCEnv_uint32 bytesWrittenProfileUUID = 0;
		CheckError(libmcenv_toolpathlayer_getsegmentprofileuuid(m_pHandle, nIndex, 0, &bytesNeededProfileUUID, nullptr));
		std::vector<char> bufferProfileUUID(bytesNeededProfileUUID);
		CheckError(libmcenv_toolpathlayer_getsegmentprofileuuid(m_pHandle, nIndex, bytesNeededProfileUUID, &bytesWrittenProfileUUID, &bufferProfileUUID[0]));
		
		return std::string(&bufferProfileUUID[0]);
	}
	
	/**
	* CToolpathLayer::GetSegmentProfileValue - Retrieves an assigned profile custom value.
	* @param[in] nIndex - Index. Must be between 0 and Count - 1.
	* @param[in] sValueName - Value Name to query for.
	* @return String Value.
	*/
	std::string CToolpathLayer::GetSegmentProfileValue(const LibMCEnv_uint32 nIndex, const std::string & sValueName)
	{
		LibMCEnv_uint32 bytesNeededValue = 0;
		LibMCEnv_uint32 bytesWrittenValue = 0;
		CheckError(libmcenv_toolpathlayer_getsegmentprofilevalue(m_pHandle, nIndex, sValueName.c_str(), 0, &bytesNeededValue, nullptr));
		std::vector<char> bufferValue(bytesNeededValue);
		CheckError(libmcenv_toolpathlayer_getsegmentprofilevalue(m_pHandle, nIndex, sValueName.c_str(), bytesNeededValue, &bytesWrittenValue, &bufferValue[0]));
		
		return std::string(&bufferValue[0]);
	}
	
	/**
	* CToolpathLayer::GetSegmentProfileTypedValue - Retrieves an assigned profile value of a standard type.
	* @param[in] nIndex - Index. Must be between 0 and Count - 1.
	* @param[in] eValueType - Enum to query for. MUST NOT be custom.
	* @return Double Value
	*/
	LibMCEnv_double CToolpathLayer::GetSegmentProfileTypedValue(const LibMCEnv_uint32 nIndex, const eToolpathProfileValueType eValueType)
	{
		LibMCEnv_double resultValue = 0;
		CheckError(libmcenv_toolpathlayer_getsegmentprofiletypedvalue(m_pHandle, nIndex, eValueType, &resultValue));
		
		return resultValue;
	}
	
	/**
	* CToolpathLayer::GetSegmentPartUUID - Retrieves the assigned segment part uuid.
	* @param[in] nIndex - Index. Must be between 0 and Count - 1.
	* @return Segment Part UUID
	*/
	std::string CToolpathLayer::GetSegmentPartUUID(const LibMCEnv_uint32 nIndex)
	{
		LibMCEnv_uint32 bytesNeededPartUUID = 0;
		LibMCEnv_uint32 bytesWrittenPartUUID = 0;
		CheckError(libmcenv_toolpathlayer_getsegmentpartuuid(m_pHandle, nIndex, 0, &bytesNeededPartUUID, nullptr));
		std::vector<char> bufferPartUUID(bytesNeededPartUUID);
		CheckError(libmcenv_toolpathlayer_getsegmentpartuuid(m_pHandle, nIndex, bytesNeededPartUUID, &bytesWrittenPartUUID, &bufferPartUUID[0]));
		
		return std::string(&bufferPartUUID[0]);
	}
	
	/**
	* CToolpathLayer::GetSegmentPointData - Retrieves the assigned segment point list. For type hatch, the points are taken pairwise.
	* @param[in] nIndex - Index. Must be between 0 and Count - 1.
	* @param[out] PointDataBuffer - The point data array. Positions are absolute in units.
	*/
	void CToolpathLayer::GetSegmentPointData(const LibMCEnv_uint32 nIndex, std::vector<sPosition2D> & PointDataBuffer)
	{
		LibMCEnv_uint64 elementsNeededPointData = 0;
		LibMCEnv_uint64 elementsWrittenPointData = 0;
		CheckError(libmcenv_toolpathlayer_getsegmentpointdata(m_pHandle, nIndex, 0, &elementsNeededPointData, nullptr));
		PointDataBuffer.resize((size_t) elementsNeededPointData);
		CheckError(libmcenv_toolpathlayer_getsegmentpointdata(m_pHandle, nIndex, elementsNeededPointData, &elementsWrittenPointData, PointDataBuffer.data()));
	}
	
	/**
	* CToolpathLayer::GetZValue - Retrieves the layers Z Value in units.
	* @return Z Value of the layer in units.
	*/
	LibMCEnv_int32 CToolpathLayer::GetZValue()
	{
		LibMCEnv_int32 resultZValue = 0;
		CheckError(libmcenv_toolpathlayer_getzvalue(m_pHandle, &resultZValue));
		
		return resultZValue;
	}
	
	/**
	* CToolpathLayer::GetUnits - Retrieves the toolpath units in mm.
	* @return Toolpath units.
	*/
	LibMCEnv_double CToolpathLayer::GetUnits()
	{
		LibMCEnv_double resultUnits = 0;
		CheckError(libmcenv_toolpathlayer_getunits(m_pHandle, &resultUnits));
		
		return resultUnits;
	}
	
	/**
	 * Method definitions for class CToolpathAccessor
	 */
	
	/**
	* CToolpathAccessor::GetStorageUUID - Returns Toolpath storage UUID.
	* @return Returns toolpath storage uuid.
	*/
	std::string CToolpathAccessor::GetStorageUUID()
	{
		LibMCEnv_uint32 bytesNeededStorageUUID = 0;
		LibMCEnv_uint32 bytesWrittenStorageUUID = 0;
		CheckError(libmcenv_toolpathaccessor_getstorageuuid(m_pHandle, 0, &bytesNeededStorageUUID, nullptr));
		std::vector<char> bufferStorageUUID(bytesNeededStorageUUID);
		CheckError(libmcenv_toolpathaccessor_getstorageuuid(m_pHandle, bytesNeededStorageUUID, &bytesWrittenStorageUUID, &bufferStorageUUID[0]));
		
		return std::string(&bufferStorageUUID[0]);
	}
	
	/**
	* CToolpathAccessor::GetLayerCount - Returns layer count.
	* @return Returns layer count.
	*/
	LibMCEnv_uint32 CToolpathAccessor::GetLayerCount()
	{
		LibMCEnv_uint32 resultLayerCount = 0;
		CheckError(libmcenv_toolpathaccessor_getlayercount(m_pHandle, &resultLayerCount));
		
		return resultLayerCount;
	}
	
	/**
	* CToolpathAccessor::LoadLayer - Reads and returns a layer object.
	* @param[in] nLayerIndex - Layer Index.
	* @return Toolpath layer object.
	*/
	PToolpathLayer CToolpathAccessor::LoadLayer(const LibMCEnv_uint32 nLayerIndex)
	{
		LibMCEnvHandle hLayerData = nullptr;
		CheckError(libmcenv_toolpathaccessor_loadlayer(m_pHandle, nLayerIndex, &hLayerData));
		
		if (!hLayerData) {
			CheckError(LIBMCENV_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CToolpathLayer>(m_pWrapper, hLayerData);
	}
	
	/**
	* CToolpathAccessor::GetUnits - Retrieves the toolpath units in mm.
	* @return Toolpath units.
	*/
	LibMCEnv_double CToolpathAccessor::GetUnits()
	{
		LibMCEnv_double resultUnits = 0;
		CheckError(libmcenv_toolpathaccessor_getunits(m_pHandle, &resultUnits));
		
		return resultUnits;
	}
	
	/**
	* CToolpathAccessor::HasMetaData - Checks if a metadata value exists for this toolpath model.
	* @param[in] sNameSpace - Namespace of metadata.
	* @param[in] sName - Name of metadata.
	* @return Returns if metadata exists.
	*/
	bool CToolpathAccessor::HasMetaData(const std::string & sNameSpace, const std::string & sName)
	{
		bool resultExists = 0;
		CheckError(libmcenv_toolpathaccessor_hasmetadata(m_pHandle, sNameSpace.c_str(), sName.c_str(), &resultExists));
		
		return resultExists;
	}
	
	/**
	* CToolpathAccessor::GetMetaDataValue - Returns the value of a metadata for this toolpath model.
	* @param[in] sNameSpace - Namespace of metadata.
	* @param[in] sName - Name of metadata.
	* @return Returns the value
	*/
	std::string CToolpathAccessor::GetMetaDataValue(const std::string & sNameSpace, const std::string & sName)
	{
		LibMCEnv_uint32 bytesNeededMetaDataValue = 0;
		LibMCEnv_uint32 bytesWrittenMetaDataValue = 0;
		CheckError(libmcenv_toolpathaccessor_getmetadatavalue(m_pHandle, sNameSpace.c_str(), sName.c_str(), 0, &bytesNeededMetaDataValue, nullptr));
		std::vector<char> bufferMetaDataValue(bytesNeededMetaDataValue);
		CheckError(libmcenv_toolpathaccessor_getmetadatavalue(m_pHandle, sNameSpace.c_str(), sName.c_str(), bytesNeededMetaDataValue, &bytesWrittenMetaDataValue, &bufferMetaDataValue[0]));
		
		return std::string(&bufferMetaDataValue[0]);
	}
	
	/**
	* CToolpathAccessor::GetMetaDataType - Returns the type of a metadata for this toolpath model.
	* @param[in] sNameSpace - Namespace of metadata.
	* @param[in] sName - Name of metadata.
	* @return Returns the type
	*/
	std::string CToolpathAccessor::GetMetaDataType(const std::string & sNameSpace, const std::string & sName)
	{
		LibMCEnv_uint32 bytesNeededMetaDataType = 0;
		LibMCEnv_uint32 bytesWrittenMetaDataType = 0;
		CheckError(libmcenv_toolpathaccessor_getmetadatatype(m_pHandle, sNameSpace.c_str(), sName.c_str(), 0, &bytesNeededMetaDataType, nullptr));
		std::vector<char> bufferMetaDataType(bytesNeededMetaDataType);
		CheckError(libmcenv_toolpathaccessor_getmetadatatype(m_pHandle, sNameSpace.c_str(), sName.c_str(), bytesNeededMetaDataType, &bytesWrittenMetaDataType, &bufferMetaDataType[0]));
		
		return std::string(&bufferMetaDataType[0]);
	}
	
	/**
	* CToolpathAccessor::GetPartCount - Retrieves the number of parts in the toolpath.
	* @return Number of parts.
	*/
	LibMCEnv_uint32 CToolpathAccessor::GetPartCount()
	{
		LibMCEnv_uint32 resultPartCount = 0;
		CheckError(libmcenv_toolpathaccessor_getpartcount(m_pHandle, &resultPartCount));
		
		return resultPartCount;
	}
	
	/**
	* CToolpathAccessor::GetPart - Retrieves the part information of a toolpath.
	* @param[in] nPartIndex - Index of part. MUST be between 0 and PartCount-1
	* @return Part Instance
	*/
	PToolpathPart CToolpathAccessor::GetPart(const LibMCEnv_uint32 nPartIndex)
	{
		LibMCEnvHandle hPart = nullptr;
		CheckError(libmcenv_toolpathaccessor_getpart(m_pHandle, nPartIndex, &hPart));
		
		if (!hPart) {
			CheckError(LIBMCENV_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CToolpathPart>(m_pWrapper, hPart);
	}
	
	/**
	* CToolpathAccessor::FindPartByUUID - Finds the part information of a toolpath.
	* @param[in] sPartUUID - UUID of part.
	* @return Part Instance. Returns null if part does not exist.
	*/
	PToolpathPart CToolpathAccessor::FindPartByUUID(const std::string & sPartUUID)
	{
		LibMCEnvHandle hPart = nullptr;
		CheckError(libmcenv_toolpathaccessor_findpartbyuuid(m_pHandle, sPartUUID.c_str(), &hPart));
		
		if (hPart) {
			return std::make_shared<CToolpathPart>(m_pWrapper, hPart);
		} else {
			return nullptr;
		}
	}
	
	/**
	 * Method definitions for class CBuild
	 */
	
	/**
	* CBuild::GetName - Returns name of the build.
	* @return Name of the build.
	*/
	std::string CBuild::GetName()
	{
		LibMCEnv_uint32 bytesNeededName = 0;
		LibMCEnv_uint32 bytesWrittenName = 0;
		CheckError(libmcenv_build_getname(m_pHandle, 0, &bytesNeededName, nullptr));
		std::vector<char> bufferName(bytesNeededName);
		CheckError(libmcenv_build_getname(m_pHandle, bytesNeededName, &bytesWrittenName, &bufferName[0]));
		
		return std::string(&bufferName[0]);
	}
	
	/**
	* CBuild::GetBuildUUID - Returns uuid of the build.
	* @return UUID of the build.
	*/
	std::string CBuild::GetBuildUUID()
	{
		LibMCEnv_uint32 bytesNeededBuildUUID = 0;
		LibMCEnv_uint32 bytesWrittenBuildUUID = 0;
		CheckError(libmcenv_build_getbuilduuid(m_pHandle, 0, &bytesNeededBuildUUID, nullptr));
		std::vector<char> bufferBuildUUID(bytesNeededBuildUUID);
		CheckError(libmcenv_build_getbuilduuid(m_pHandle, bytesNeededBuildUUID, &bytesWrittenBuildUUID, &bufferBuildUUID[0]));
		
		return std::string(&bufferBuildUUID[0]);
	}
	
	/**
	* CBuild::GetStorageUUID - Returns storage uuid of the build.
	* @return Storage UUID of the build.
	*/
	std::string CBuild::GetStorageUUID()
	{
		LibMCEnv_uint32 bytesNeededStorageUUID = 0;
		LibMCEnv_uint32 bytesWrittenStorageUUID = 0;
		CheckError(libmcenv_build_getstorageuuid(m_pHandle, 0, &bytesNeededStorageUUID, nullptr));
		std::vector<char> bufferStorageUUID(bytesNeededStorageUUID);
		CheckError(libmcenv_build_getstorageuuid(m_pHandle, bytesNeededStorageUUID, &bytesWrittenStorageUUID, &bufferStorageUUID[0]));
		
		return std::string(&bufferStorageUUID[0]);
	}
	
	/**
	* CBuild::GetStorageSHA256 - Returns SHA256 of the build stream.
	* @return SHA256 of the build stream.
	*/
	std::string CBuild::GetStorageSHA256()
	{
		LibMCEnv_uint32 bytesNeededSHA256 = 0;
		LibMCEnv_uint32 bytesWrittenSHA256 = 0;
		CheckError(libmcenv_build_getstoragesha256(m_pHandle, 0, &bytesNeededSHA256, nullptr));
		std::vector<char> bufferSHA256(bytesNeededSHA256);
		CheckError(libmcenv_build_getstoragesha256(m_pHandle, bytesNeededSHA256, &bytesWrittenSHA256, &bufferSHA256[0]));
		
		return std::string(&bufferSHA256[0]);
	}
	
	/**
	* CBuild::GetLayerCount - Returns cached layer count of the toolpath.
	* @return Returns layer count.
	*/
	LibMCEnv_uint32 CBuild::GetLayerCount()
	{
		LibMCEnv_uint32 resultLayerCount = 0;
		CheckError(libmcenv_build_getlayercount(m_pHandle, &resultLayerCount));
		
		return resultLayerCount;
	}
	
	/**
	* CBuild::LoadToolpath - loads the a toolpath into memory
	*/
	void CBuild::LoadToolpath()
	{
		CheckError(libmcenv_build_loadtoolpath(m_pHandle));
	}
	
	/**
	* CBuild::UnloadToolpath - unloads the a toolpath from memory, if it has been loaded before.
	*/
	void CBuild::UnloadToolpath()
	{
		CheckError(libmcenv_build_unloadtoolpath(m_pHandle));
	}
	
	/**
	* CBuild::ToolpathIsLoaded - checks, if a toolpath object is loaded to memory.
	* @return returns if toolpath is loaded.
	*/
	bool CBuild::ToolpathIsLoaded()
	{
		bool resultIsLoaded = 0;
		CheckError(libmcenv_build_toolpathisloaded(m_pHandle, &resultIsLoaded));
		
		return resultIsLoaded;
	}
	
	/**
	* CBuild::CreateToolpathAccessor - Creates an accessor object for a toolpath. Toolpath MUST have been loaded with LoadToolpath before.
	* @return Toolpath instance.
	*/
	PToolpathAccessor CBuild::CreateToolpathAccessor()
	{
		LibMCEnvHandle hToolpathInstance = nullptr;
		CheckError(libmcenv_build_createtoolpathaccessor(m_pHandle, &hToolpathInstance));
		
		if (!hToolpathInstance) {
			CheckError(LIBMCENV_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CToolpathAccessor>(m_pWrapper, hToolpathInstance);
	}
	
	/**
	* CBuild::AddBinaryData - Adds binary data to store with the build.
	* @param[in] sName - Name of the attache data block.
	* @param[in] sMIMEType - Mime type of the data.
	* @param[in] ContentBuffer - Stream content to store
	* @return Data UUID of the attachment.
	*/
	std::string CBuild::AddBinaryData(const std::string & sName, const std::string & sMIMEType, const CInputVector<LibMCEnv_uint8> & ContentBuffer)
	{
		LibMCEnv_uint32 bytesNeededDataUUID = 0;
		LibMCEnv_uint32 bytesWrittenDataUUID = 0;
		CheckError(libmcenv_build_addbinarydata(m_pHandle, sName.c_str(), sMIMEType.c_str(), (LibMCEnv_uint64)ContentBuffer.size(), ContentBuffer.data(), 0, &bytesNeededDataUUID, nullptr));
		std::vector<char> bufferDataUUID(bytesNeededDataUUID);
		CheckError(libmcenv_build_addbinarydata(m_pHandle, sName.c_str(), sMIMEType.c_str(), (LibMCEnv_uint64)ContentBuffer.size(), ContentBuffer.data(), bytesNeededDataUUID, &bytesWrittenDataUUID, &bufferDataUUID[0]));
		
		return std::string(&bufferDataUUID[0]);
	}
	
	/**
	 * Method definitions for class CWorkingFileExecution
	 */
	
	/**
	* CWorkingFileExecution::GetStatus - Returns the execution status
	*/
	void CWorkingFileExecution::GetStatus()
	{
		CheckError(libmcenv_workingfileexecution_getstatus(m_pHandle));
	}
	
	/**
	* CWorkingFileExecution::ReturnStdOut - Returns the output of the executable as string buffer
	* @return stdout buffer
	*/
	std::string CWorkingFileExecution::ReturnStdOut()
	{
		LibMCEnv_uint32 bytesNeededStringBuffer = 0;
		LibMCEnv_uint32 bytesWrittenStringBuffer = 0;
		CheckError(libmcenv_workingfileexecution_returnstdout(m_pHandle, 0, &bytesNeededStringBuffer, nullptr));
		std::vector<char> bufferStringBuffer(bytesNeededStringBuffer);
		CheckError(libmcenv_workingfileexecution_returnstdout(m_pHandle, bytesNeededStringBuffer, &bytesWrittenStringBuffer, &bufferStringBuffer[0]));
		
		return std::string(&bufferStringBuffer[0]);
	}
	
	/**
	 * Method definitions for class CWorkingFile
	 */
	
	/**
	* CWorkingFile::GetAbsoluteFileName - Retrieves absolute file name of the working file
	* @return global path of the file
	*/
	std::string CWorkingFile::GetAbsoluteFileName()
	{
		LibMCEnv_uint32 bytesNeededFileName = 0;
		LibMCEnv_uint32 bytesWrittenFileName = 0;
		CheckError(libmcenv_workingfile_getabsolutefilename(m_pHandle, 0, &bytesNeededFileName, nullptr));
		std::vector<char> bufferFileName(bytesNeededFileName);
		CheckError(libmcenv_workingfile_getabsolutefilename(m_pHandle, bytesNeededFileName, &bytesWrittenFileName, &bufferFileName[0]));
		
		return std::string(&bufferFileName[0]);
	}
	
	/**
	* CWorkingFile::GetSize - Returns the size of temporary file.
	* @return file size
	*/
	LibMCEnv_uint64 CWorkingFile::GetSize()
	{
		LibMCEnv_uint64 resultFileSize = 0;
		CheckError(libmcenv_workingfile_getsize(m_pHandle, &resultFileSize));
		
		return resultFileSize;
	}
	
	/**
	* CWorkingFile::CalculateSHA2 - Calculates the SHA256 checksum of the file.
	* @return sha256 checksum
	*/
	std::string CWorkingFile::CalculateSHA2()
	{
		LibMCEnv_uint32 bytesNeededSHA2 = 0;
		LibMCEnv_uint32 bytesWrittenSHA2 = 0;
		CheckError(libmcenv_workingfile_calculatesha2(m_pHandle, 0, &bytesNeededSHA2, nullptr));
		std::vector<char> bufferSHA2(bytesNeededSHA2);
		CheckError(libmcenv_workingfile_calculatesha2(m_pHandle, bytesNeededSHA2, &bytesWrittenSHA2, &bufferSHA2[0]));
		
		return std::string(&bufferSHA2[0]);
	}
	
	/**
	* CWorkingFile::ExecuteFile - Executes the temporary file, if it is an executable.
	* @return execution object
	*/
	PWorkingFileExecution CWorkingFile::ExecuteFile()
	{
		LibMCEnvHandle hExecution = nullptr;
		CheckError(libmcenv_workingfile_executefile(m_pHandle, &hExecution));
		
		if (!hExecution) {
			CheckError(LIBMCENV_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CWorkingFileExecution>(m_pWrapper, hExecution);
	}
	
	/**
	* CWorkingFile::IsManaged - Returns if the file is managed.
	* @return returns if the file is managed.
	*/
	bool CWorkingFile::IsManaged()
	{
		bool resultFileIsManaged = 0;
		CheckError(libmcenv_workingfile_ismanaged(m_pHandle, &resultFileIsManaged));
		
		return resultFileIsManaged;
	}
	
	/**
	* CWorkingFile::MakeManaged - Makes the file managed if it is not managed yet.
	*/
	void CWorkingFile::MakeManaged()
	{
		CheckError(libmcenv_workingfile_makemanaged(m_pHandle));
	}
	
	/**
	* CWorkingFile::FileExists - Returns if the file exists on disk.
	* @return returns if the file exists.
	*/
	bool CWorkingFile::FileExists()
	{
		bool resultFileDoesExist = 0;
		CheckError(libmcenv_workingfile_fileexists(m_pHandle, &resultFileDoesExist));
		
		return resultFileDoesExist;
	}
	
	/**
	* CWorkingFile::DeleteFromDisk - Deletes the temporary file.
	* @return returns if deletion was successful or file did not exist in the first place.
	*/
	bool CWorkingFile::DeleteFromDisk()
	{
		bool resultSuccess = 0;
		CheckError(libmcenv_workingfile_deletefromdisk(m_pHandle, &resultSuccess));
		
		return resultSuccess;
	}
	
	/**
	 * Method definitions for class CWorkingFileIterator
	 */
	
	/**
	* CWorkingFileIterator::GetCurrentFile - Returns the working file the iterator points at.
	* @return returns the WorkingFile instance.
	*/
	PWorkingFile CWorkingFileIterator::GetCurrentFile()
	{
		LibMCEnvHandle hWorkingFile = nullptr;
		CheckError(libmcenv_workingfileiterator_getcurrentfile(m_pHandle, &hWorkingFile));
		
		if (!hWorkingFile) {
			CheckError(LIBMCENV_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CWorkingFile>(m_pWrapper, hWorkingFile);
	}
	
	/**
	 * Method definitions for class CWorkingDirectory
	 */
	
	/**
	* CWorkingDirectory::IsActive - Working directory is active.
	* @return returns true if files can be read and written to the directory.
	*/
	bool CWorkingDirectory::IsActive()
	{
		bool resultIsActive = 0;
		CheckError(libmcenv_workingdirectory_isactive(m_pHandle, &resultIsActive));
		
		return resultIsActive;
	}
	
	/**
	* CWorkingDirectory::GetAbsoluteFilePath - Retrieves absolute file path.
	* @return global path of the directory, including path delimiter.
	*/
	std::string CWorkingDirectory::GetAbsoluteFilePath()
	{
		LibMCEnv_uint32 bytesNeededFilePath = 0;
		LibMCEnv_uint32 bytesWrittenFilePath = 0;
		CheckError(libmcenv_workingdirectory_getabsolutefilepath(m_pHandle, 0, &bytesNeededFilePath, nullptr));
		std::vector<char> bufferFilePath(bytesNeededFilePath);
		CheckError(libmcenv_workingdirectory_getabsolutefilepath(m_pHandle, bytesNeededFilePath, &bytesWrittenFilePath, &bufferFilePath[0]));
		
		return std::string(&bufferFilePath[0]);
	}
	
	/**
	* CWorkingDirectory::StoreCustomData - Stores a data buffer in a temporary file.
	* @param[in] sFileName - filename to store to. Can not include any path delimiters or ..
	* @param[in] DataBufferBuffer - file data to store to.
	* @return working file instance.
	*/
	PWorkingFile CWorkingDirectory::StoreCustomData(const std::string & sFileName, const CInputVector<LibMCEnv_uint8> & DataBufferBuffer)
	{
		LibMCEnvHandle hWorkingFile = nullptr;
		CheckError(libmcenv_workingdirectory_storecustomdata(m_pHandle, sFileName.c_str(), (LibMCEnv_uint64)DataBufferBuffer.size(), DataBufferBuffer.data(), &hWorkingFile));
		
		if (!hWorkingFile) {
			CheckError(LIBMCENV_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CWorkingFile>(m_pWrapper, hWorkingFile);
	}
	
	/**
	* CWorkingDirectory::StoreCustomString - Stores a string in a temporary file.
	* @param[in] sFileName - filename to store to. Can not include any path delimiters or ..
	* @param[in] sDataString - file data to store to.
	* @return working file instance.
	*/
	PWorkingFile CWorkingDirectory::StoreCustomString(const std::string & sFileName, const std::string & sDataString)
	{
		LibMCEnvHandle hWorkingFile = nullptr;
		CheckError(libmcenv_workingdirectory_storecustomstring(m_pHandle, sFileName.c_str(), sDataString.c_str(), &hWorkingFile));
		
		if (!hWorkingFile) {
			CheckError(LIBMCENV_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CWorkingFile>(m_pWrapper, hWorkingFile);
	}
	
	/**
	* CWorkingDirectory::StoreDriverData - Stores attached driver data in a temporary file.
	* @param[in] sFileName - filename to store to. Can not include any path delimiters or ..
	* @param[in] sIdentifier - identifier of the binary data in the driver package.
	* @return working file instance.
	*/
	PWorkingFile CWorkingDirectory::StoreDriverData(const std::string & sFileName, const std::string & sIdentifier)
	{
		LibMCEnvHandle hWorkingFile = nullptr;
		CheckError(libmcenv_workingdirectory_storedriverdata(m_pHandle, sFileName.c_str(), sIdentifier.c_str(), &hWorkingFile));
		
		if (!hWorkingFile) {
			CheckError(LIBMCENV_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CWorkingFile>(m_pWrapper, hWorkingFile);
	}
	
	/**
	* CWorkingDirectory::CleanUp - Deletes all managed files in the directory and the directory. No storing is possible after a cleanup.
	* @return returns if deletion was successful.
	*/
	bool CWorkingDirectory::CleanUp()
	{
		bool resultSuccess = 0;
		CheckError(libmcenv_workingdirectory_cleanup(m_pHandle, &resultSuccess));
		
		return resultSuccess;
	}
	
	/**
	* CWorkingDirectory::AddManagedFile - Adds a managed filename in the directory (i.e. this file will be deleted at CleanUp). Subdirectories are not allowed.
	* @param[in] sFileName - Filename to manage. The file does not need to exist yet.
	* @return working file instance.
	*/
	PWorkingFile CWorkingDirectory::AddManagedFile(const std::string & sFileName)
	{
		LibMCEnvHandle hWorkingFile = nullptr;
		CheckError(libmcenv_workingdirectory_addmanagedfile(m_pHandle, sFileName.c_str(), &hWorkingFile));
		
		if (!hWorkingFile) {
			CheckError(LIBMCENV_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CWorkingFile>(m_pWrapper, hWorkingFile);
	}
	
	/**
	* CWorkingDirectory::HasUnmanagedFiles - Returns if the working directory has unmanaged files. A clean implementation will never deal with unmanaged files.
	* @return returns if there are unmanaged files.
	*/
	bool CWorkingDirectory::HasUnmanagedFiles()
	{
		bool resultHasUnmanagedFiles = 0;
		CheckError(libmcenv_workingdirectory_hasunmanagedfiles(m_pHandle, &resultHasUnmanagedFiles));
		
		return resultHasUnmanagedFiles;
	}
	
	/**
	* CWorkingDirectory::RetrieveUnmanagedFiles - Returns a list of unmanaged files.
	* @return working file iterator instance.
	*/
	PWorkingFileIterator CWorkingDirectory::RetrieveUnmanagedFiles()
	{
		LibMCEnvHandle hIteratorInstance = nullptr;
		CheckError(libmcenv_workingdirectory_retrieveunmanagedfiles(m_pHandle, &hIteratorInstance));
		
		if (!hIteratorInstance) {
			CheckError(LIBMCENV_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CWorkingFileIterator>(m_pWrapper, hIteratorInstance);
	}
	
	/**
	* CWorkingDirectory::RetrieveManagedFiles - Returns a list of managed files.
	* @return working file iterator instance.
	*/
	PWorkingFileIterator CWorkingDirectory::RetrieveManagedFiles()
	{
		LibMCEnvHandle hIteratorInstance = nullptr;
		CheckError(libmcenv_workingdirectory_retrievemanagedfiles(m_pHandle, &hIteratorInstance));
		
		if (!hIteratorInstance) {
			CheckError(LIBMCENV_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CWorkingFileIterator>(m_pWrapper, hIteratorInstance);
	}
	
	/**
	* CWorkingDirectory::RetrieveAllFiles - Returns a list of all files in the directory.
	* @return working file iterator instance.
	*/
	PWorkingFileIterator CWorkingDirectory::RetrieveAllFiles()
	{
		LibMCEnvHandle hIteratorInstance = nullptr;
		CheckError(libmcenv_workingdirectory_retrieveallfiles(m_pHandle, &hIteratorInstance));
		
		if (!hIteratorInstance) {
			CheckError(LIBMCENV_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CWorkingFileIterator>(m_pWrapper, hIteratorInstance);
	}
	
	/**
	 * Method definitions for class CDriverEnvironment
	 */
	
	/**
	* CDriverEnvironment::CreateWorkingDirectory - creates a temporary working directory.
	* @return creates a working directory
	*/
	PWorkingDirectory CDriverEnvironment::CreateWorkingDirectory()
	{
		LibMCEnvHandle hWorkingDirectory = nullptr;
		CheckError(libmcenv_driverenvironment_createworkingdirectory(m_pHandle, &hWorkingDirectory));
		
		if (!hWorkingDirectory) {
			CheckError(LIBMCENV_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CWorkingDirectory>(m_pWrapper, hWorkingDirectory);
	}
	
	/**
	* CDriverEnvironment::RetrieveDriverData - retrieves attached driver data into a memory buffer.
	* @param[in] sIdentifier - identifier of the binary data in the driver package.
	* @param[out] DataBufferBuffer - buffer data.
	*/
	void CDriverEnvironment::RetrieveDriverData(const std::string & sIdentifier, std::vector<LibMCEnv_uint8> & DataBufferBuffer)
	{
		LibMCEnv_uint64 elementsNeededDataBuffer = 0;
		LibMCEnv_uint64 elementsWrittenDataBuffer = 0;
		CheckError(libmcenv_driverenvironment_retrievedriverdata(m_pHandle, sIdentifier.c_str(), 0, &elementsNeededDataBuffer, nullptr));
		DataBufferBuffer.resize((size_t) elementsNeededDataBuffer);
		CheckError(libmcenv_driverenvironment_retrievedriverdata(m_pHandle, sIdentifier.c_str(), elementsNeededDataBuffer, &elementsWrittenDataBuffer, DataBufferBuffer.data()));
	}
	
	/**
	* CDriverEnvironment::CreateToolpathAccessor - Creates an accessor object for a toolpath. Toolpath MUST have been loaded into memory before.
	* @param[in] sStreamUUID - UUID of the stream.
	* @return Toolpath instance.
	*/
	PToolpathAccessor CDriverEnvironment::CreateToolpathAccessor(const std::string & sStreamUUID)
	{
		LibMCEnvHandle hToolpathInstance = nullptr;
		CheckError(libmcenv_driverenvironment_createtoolpathaccessor(m_pHandle, sStreamUUID.c_str(), &hToolpathInstance));
		
		if (!hToolpathInstance) {
			CheckError(LIBMCENV_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CToolpathAccessor>(m_pWrapper, hToolpathInstance);
	}
	
	/**
	* CDriverEnvironment::RegisterStringParameter - registers a string parameter. Must only be called during driver creation.
	* @param[in] sParameterName - Parameter Name
	* @param[in] sDescription - Parameter Description
	* @param[in] sDefaultValue - default value to set
	*/
	void CDriverEnvironment::RegisterStringParameter(const std::string & sParameterName, const std::string & sDescription, const std::string & sDefaultValue)
	{
		CheckError(libmcenv_driverenvironment_registerstringparameter(m_pHandle, sParameterName.c_str(), sDescription.c_str(), sDefaultValue.c_str()));
	}
	
	/**
	* CDriverEnvironment::RegisterUUIDParameter - registers a uuid parameter. Must only be called during driver creation.
	* @param[in] sParameterName - Parameter Name
	* @param[in] sDescription - Parameter Description
	* @param[in] sDefaultValue - default value to set
	*/
	void CDriverEnvironment::RegisterUUIDParameter(const std::string & sParameterName, const std::string & sDescription, const std::string & sDefaultValue)
	{
		CheckError(libmcenv_driverenvironment_registeruuidparameter(m_pHandle, sParameterName.c_str(), sDescription.c_str(), sDefaultValue.c_str()));
	}
	
	/**
	* CDriverEnvironment::RegisterDoubleParameter - registers a double parameter. Must only be called during driver creation.
	* @param[in] sParameterName - Parameter Name
	* @param[in] sDescription - Parameter Description
	* @param[in] dDefaultValue - default value to set
	*/
	void CDriverEnvironment::RegisterDoubleParameter(const std::string & sParameterName, const std::string & sDescription, const LibMCEnv_double dDefaultValue)
	{
		CheckError(libmcenv_driverenvironment_registerdoubleparameter(m_pHandle, sParameterName.c_str(), sDescription.c_str(), dDefaultValue));
	}
	
	/**
	* CDriverEnvironment::RegisterIntegerParameter - registers an int parameter. Must only be called during driver creation.
	* @param[in] sParameterName - Parameter Name
	* @param[in] sDescription - Parameter Description
	* @param[in] nDefaultValue - default value to set
	*/
	void CDriverEnvironment::RegisterIntegerParameter(const std::string & sParameterName, const std::string & sDescription, const LibMCEnv_int64 nDefaultValue)
	{
		CheckError(libmcenv_driverenvironment_registerintegerparameter(m_pHandle, sParameterName.c_str(), sDescription.c_str(), nDefaultValue));
	}
	
	/**
	* CDriverEnvironment::RegisterBoolParameter - registers a bool parameter. Must only be called during driver creation.
	* @param[in] sParameterName - Parameter Name
	* @param[in] sDescription - Parameter Description
	* @param[in] bDefaultValue - default value to set
	*/
	void CDriverEnvironment::RegisterBoolParameter(const std::string & sParameterName, const std::string & sDescription, const bool bDefaultValue)
	{
		CheckError(libmcenv_driverenvironment_registerboolparameter(m_pHandle, sParameterName.c_str(), sDescription.c_str(), bDefaultValue));
	}
	
	/**
	* CDriverEnvironment::SetStringParameter - sets a string parameter
	* @param[in] sParameterName - Parameter Name
	* @param[in] sValue - Value to set
	*/
	void CDriverEnvironment::SetStringParameter(const std::string & sParameterName, const std::string & sValue)
	{
		CheckError(libmcenv_driverenvironment_setstringparameter(m_pHandle, sParameterName.c_str(), sValue.c_str()));
	}
	
	/**
	* CDriverEnvironment::SetUUIDParameter - sets a uuid parameter
	* @param[in] sParameterName - Parameter Name
	* @param[in] sValue - Value to set
	*/
	void CDriverEnvironment::SetUUIDParameter(const std::string & sParameterName, const std::string & sValue)
	{
		CheckError(libmcenv_driverenvironment_setuuidparameter(m_pHandle, sParameterName.c_str(), sValue.c_str()));
	}
	
	/**
	* CDriverEnvironment::SetDoubleParameter - sets a double parameter
	* @param[in] sParameterName - Parameter Name
	* @param[in] dValue - Value to set
	*/
	void CDriverEnvironment::SetDoubleParameter(const std::string & sParameterName, const LibMCEnv_double dValue)
	{
		CheckError(libmcenv_driverenvironment_setdoubleparameter(m_pHandle, sParameterName.c_str(), dValue));
	}
	
	/**
	* CDriverEnvironment::SetIntegerParameter - sets an int parameter
	* @param[in] sParameterName - Parameter Name
	* @param[in] nValue - Value to set
	*/
	void CDriverEnvironment::SetIntegerParameter(const std::string & sParameterName, const LibMCEnv_int64 nValue)
	{
		CheckError(libmcenv_driverenvironment_setintegerparameter(m_pHandle, sParameterName.c_str(), nValue));
	}
	
	/**
	* CDriverEnvironment::SetBoolParameter - sets a bool parameter
	* @param[in] sParameterName - Parameter Name
	* @param[in] bValue - Value to set
	*/
	void CDriverEnvironment::SetBoolParameter(const std::string & sParameterName, const bool bValue)
	{
		CheckError(libmcenv_driverenvironment_setboolparameter(m_pHandle, sParameterName.c_str(), bValue));
	}
	
	/**
	* CDriverEnvironment::Sleep - Puts the current instance to sleep for a definite amount of time. MUST be used instead of a blocking sleep call.
	* @param[in] nDelay - Milliseconds to sleeps
	*/
	void CDriverEnvironment::Sleep(const LibMCEnv_uint32 nDelay)
	{
		CheckError(libmcenv_driverenvironment_sleep(m_pHandle, nDelay));
	}
	
	/**
	* CDriverEnvironment::GetGlobalTimerInMilliseconds - Returns the global timer in milliseconds.
	* @return Timer value in Milliseconds
	*/
	LibMCEnv_uint64 CDriverEnvironment::GetGlobalTimerInMilliseconds()
	{
		LibMCEnv_uint64 resultTimerValue = 0;
		CheckError(libmcenv_driverenvironment_getglobaltimerinmilliseconds(m_pHandle, &resultTimerValue));
		
		return resultTimerValue;
	}
	
	/**
	* CDriverEnvironment::LogMessage - logs a string as message
	* @param[in] sLogString - String to Log
	*/
	void CDriverEnvironment::LogMessage(const std::string & sLogString)
	{
		CheckError(libmcenv_driverenvironment_logmessage(m_pHandle, sLogString.c_str()));
	}
	
	/**
	* CDriverEnvironment::LogWarning - logs a string as warning
	* @param[in] sLogString - String to Log
	*/
	void CDriverEnvironment::LogWarning(const std::string & sLogString)
	{
		CheckError(libmcenv_driverenvironment_logwarning(m_pHandle, sLogString.c_str()));
	}
	
	/**
	* CDriverEnvironment::LogInfo - logs a string as info
	* @param[in] sLogString - String to Log
	*/
	void CDriverEnvironment::LogInfo(const std::string & sLogString)
	{
		CheckError(libmcenv_driverenvironment_loginfo(m_pHandle, sLogString.c_str()));
	}
	
	/**
	* CDriverEnvironment::CreateEmptyImage - creates an empty image object.
	* @param[in] nPixelSizeX - Pixel size in X. MUST be positive.
	* @param[in] nPixelSizeY - Pixel size in Y. MUST be positive.
	* @param[in] dDPIValueX - DPI Value in X. MUST be positive.
	* @param[in] dDPIValueY - DPI Value in Y. MUST be positive.
	* @param[in] ePixelFormat - Pixel format to use.
	* @return Empty image instance.
	*/
	PImageData CDriverEnvironment::CreateEmptyImage(const LibMCEnv_uint32 nPixelSizeX, const LibMCEnv_uint32 nPixelSizeY, const LibMCEnv_double dDPIValueX, const LibMCEnv_double dDPIValueY, const eImagePixelFormat ePixelFormat)
	{
		LibMCEnvHandle hImageDataInstance = nullptr;
		CheckError(libmcenv_driverenvironment_createemptyimage(m_pHandle, nPixelSizeX, nPixelSizeY, dDPIValueX, dDPIValueY, ePixelFormat, &hImageDataInstance));
		
		if (!hImageDataInstance) {
			CheckError(LIBMCENV_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CImageData>(m_pWrapper, hImageDataInstance);
	}
	
	/**
	* CDriverEnvironment::LoadPNGImage - creates an image object from a PNG data stream.
	* @param[in] PNGDataBuffer - DPI Value in X. MUST be positive.
	* @param[in] dDPIValueX - DPI Value in X. MUST be positive.
	* @param[in] dDPIValueY - DPI Value in Y. MUST be positive.
	* @param[in] ePixelFormat - Pixel format to use. Might lose color and alpha information.
	* @return Image instance containing the PNG image.
	*/
	PImageData CDriverEnvironment::LoadPNGImage(const CInputVector<LibMCEnv_uint8> & PNGDataBuffer, const LibMCEnv_double dDPIValueX, const LibMCEnv_double dDPIValueY, const eImagePixelFormat ePixelFormat)
	{
		LibMCEnvHandle hImageDataInstance = nullptr;
		CheckError(libmcenv_driverenvironment_loadpngimage(m_pHandle, (LibMCEnv_uint64)PNGDataBuffer.size(), PNGDataBuffer.data(), dDPIValueX, dDPIValueY, ePixelFormat, &hImageDataInstance));
		
		if (!hImageDataInstance) {
			CheckError(LIBMCENV_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CImageData>(m_pWrapper, hImageDataInstance);
	}
	
	/**
	 * Method definitions for class CSignalTrigger
	 */
	
	/**
	* CSignalTrigger::CanTrigger - Returns, if signal channel is available.
	* @return Returns true, if signal channel is available.
	*/
	bool CSignalTrigger::CanTrigger()
	{
		bool resultChannelIsAvailable = 0;
		CheckError(libmcenv_signaltrigger_cantrigger(m_pHandle, &resultChannelIsAvailable));
		
		return resultChannelIsAvailable;
	}
	
	/**
	* CSignalTrigger::Trigger - Triggers a signal, if signal channel is available.
	*/
	void CSignalTrigger::Trigger()
	{
		CheckError(libmcenv_signaltrigger_trigger(m_pHandle));
	}
	
	/**
	* CSignalTrigger::WaitForHandling - Waits until the signal is reset.
	* @param[in] nTimeOut - Timeout in Milliseconds. 0 for Immediate return.
	* @return Flag if signal handling has been handled.
	*/
	bool CSignalTrigger::WaitForHandling(const LibMCEnv_uint32 nTimeOut)
	{
		bool resultSuccess = 0;
		CheckError(libmcenv_signaltrigger_waitforhandling(m_pHandle, nTimeOut, &resultSuccess));
		
		return resultSuccess;
	}
	
	/**
	* CSignalTrigger::GetName - Returns the signal name.
	* @return Name Of Signal
	*/
	std::string CSignalTrigger::GetName()
	{
		LibMCEnv_uint32 bytesNeededSignalName = 0;
		LibMCEnv_uint32 bytesWrittenSignalName = 0;
		CheckError(libmcenv_signaltrigger_getname(m_pHandle, 0, &bytesNeededSignalName, nullptr));
		std::vector<char> bufferSignalName(bytesNeededSignalName);
		CheckError(libmcenv_signaltrigger_getname(m_pHandle, bytesNeededSignalName, &bytesWrittenSignalName, &bufferSignalName[0]));
		
		return std::string(&bufferSignalName[0]);
	}
	
	/**
	* CSignalTrigger::GetStateMachine - Returns the signal state machine instance.
	* @return Name Of State Machine
	*/
	std::string CSignalTrigger::GetStateMachine()
	{
		LibMCEnv_uint32 bytesNeededStateMachineName = 0;
		LibMCEnv_uint32 bytesWrittenStateMachineName = 0;
		CheckError(libmcenv_signaltrigger_getstatemachine(m_pHandle, 0, &bytesNeededStateMachineName, nullptr));
		std::vector<char> bufferStateMachineName(bytesNeededStateMachineName);
		CheckError(libmcenv_signaltrigger_getstatemachine(m_pHandle, bytesNeededStateMachineName, &bytesWrittenStateMachineName, &bufferStateMachineName[0]));
		
		return std::string(&bufferStateMachineName[0]);
	}
	
	/**
	* CSignalTrigger::SetString - sets a string value
	* @param[in] sName - Name
	* @param[in] sValue - Value
	*/
	void CSignalTrigger::SetString(const std::string & sName, const std::string & sValue)
	{
		CheckError(libmcenv_signaltrigger_setstring(m_pHandle, sName.c_str(), sValue.c_str()));
	}
	
	/**
	* CSignalTrigger::SetUUID - sets a uuid value
	* @param[in] sName - Name
	* @param[in] sValue - Value
	*/
	void CSignalTrigger::SetUUID(const std::string & sName, const std::string & sValue)
	{
		CheckError(libmcenv_signaltrigger_setuuid(m_pHandle, sName.c_str(), sValue.c_str()));
	}
	
	/**
	* CSignalTrigger::SetDouble - sets a double
	* @param[in] sName - Name
	* @param[in] dValue - Value
	*/
	void CSignalTrigger::SetDouble(const std::string & sName, const LibMCEnv_double dValue)
	{
		CheckError(libmcenv_signaltrigger_setdouble(m_pHandle, sName.c_str(), dValue));
	}
	
	/**
	* CSignalTrigger::SetInteger - sets an int.
	* @param[in] sName - Name
	* @param[in] nValue - Value
	*/
	void CSignalTrigger::SetInteger(const std::string & sName, const LibMCEnv_int64 nValue)
	{
		CheckError(libmcenv_signaltrigger_setinteger(m_pHandle, sName.c_str(), nValue));
	}
	
	/**
	* CSignalTrigger::SetBool - sets a bool
	* @param[in] sName - Name
	* @param[in] bValue - Value
	*/
	void CSignalTrigger::SetBool(const std::string & sName, const bool bValue)
	{
		CheckError(libmcenv_signaltrigger_setbool(m_pHandle, sName.c_str(), bValue));
	}
	
	/**
	* CSignalTrigger::GetStringResult - returns a string value of the result
	* @param[in] sName - Name
	* @return Value
	*/
	std::string CSignalTrigger::GetStringResult(const std::string & sName)
	{
		LibMCEnv_uint32 bytesNeededValue = 0;
		LibMCEnv_uint32 bytesWrittenValue = 0;
		CheckError(libmcenv_signaltrigger_getstringresult(m_pHandle, sName.c_str(), 0, &bytesNeededValue, nullptr));
		std::vector<char> bufferValue(bytesNeededValue);
		CheckError(libmcenv_signaltrigger_getstringresult(m_pHandle, sName.c_str(), bytesNeededValue, &bytesWrittenValue, &bufferValue[0]));
		
		return std::string(&bufferValue[0]);
	}
	
	/**
	* CSignalTrigger::GetUUIDResult - returns a uuid value of the result
	* @param[in] sName - Name
	* @return Value
	*/
	std::string CSignalTrigger::GetUUIDResult(const std::string & sName)
	{
		LibMCEnv_uint32 bytesNeededValue = 0;
		LibMCEnv_uint32 bytesWrittenValue = 0;
		CheckError(libmcenv_signaltrigger_getuuidresult(m_pHandle, sName.c_str(), 0, &bytesNeededValue, nullptr));
		std::vector<char> bufferValue(bytesNeededValue);
		CheckError(libmcenv_signaltrigger_getuuidresult(m_pHandle, sName.c_str(), bytesNeededValue, &bytesWrittenValue, &bufferValue[0]));
		
		return std::string(&bufferValue[0]);
	}
	
	/**
	* CSignalTrigger::GetDoubleResult - returns a string value of the result
	* @param[in] sName - Name
	* @return Value
	*/
	LibMCEnv_double CSignalTrigger::GetDoubleResult(const std::string & sName)
	{
		LibMCEnv_double resultValue = 0;
		CheckError(libmcenv_signaltrigger_getdoubleresult(m_pHandle, sName.c_str(), &resultValue));
		
		return resultValue;
	}
	
	/**
	* CSignalTrigger::GetIntegerResult - returns an int value of the result.
	* @param[in] sName - Name
	* @return Value
	*/
	LibMCEnv_int64 CSignalTrigger::GetIntegerResult(const std::string & sName)
	{
		LibMCEnv_int64 resultValue = 0;
		CheckError(libmcenv_signaltrigger_getintegerresult(m_pHandle, sName.c_str(), &resultValue));
		
		return resultValue;
	}
	
	/**
	* CSignalTrigger::GetBoolResult - returns a bool value of the result.
	* @param[in] sName - Name
	* @return Value
	*/
	bool CSignalTrigger::GetBoolResult(const std::string & sName)
	{
		bool resultValue = 0;
		CheckError(libmcenv_signaltrigger_getboolresult(m_pHandle, sName.c_str(), &resultValue));
		
		return resultValue;
	}
	
	/**
	 * Method definitions for class CSignalHandler
	 */
	
	/**
	* CSignalHandler::SignalHandled - Marks signal as handled and resets signal channel.
	*/
	void CSignalHandler::SignalHandled()
	{
		CheckError(libmcenv_signalhandler_signalhandled(m_pHandle));
	}
	
	/**
	* CSignalHandler::GetName - Returns the signal name.
	* @return Name Of Signal
	*/
	std::string CSignalHandler::GetName()
	{
		LibMCEnv_uint32 bytesNeededSignalName = 0;
		LibMCEnv_uint32 bytesWrittenSignalName = 0;
		CheckError(libmcenv_signalhandler_getname(m_pHandle, 0, &bytesNeededSignalName, nullptr));
		std::vector<char> bufferSignalName(bytesNeededSignalName);
		CheckError(libmcenv_signalhandler_getname(m_pHandle, bytesNeededSignalName, &bytesWrittenSignalName, &bufferSignalName[0]));
		
		return std::string(&bufferSignalName[0]);
	}
	
	/**
	* CSignalHandler::GetSignalID - Returns the signal id.
	* @return Signal Identifier
	*/
	std::string CSignalHandler::GetSignalID()
	{
		LibMCEnv_uint32 bytesNeededSignalID = 0;
		LibMCEnv_uint32 bytesWrittenSignalID = 0;
		CheckError(libmcenv_signalhandler_getsignalid(m_pHandle, 0, &bytesNeededSignalID, nullptr));
		std::vector<char> bufferSignalID(bytesNeededSignalID);
		CheckError(libmcenv_signalhandler_getsignalid(m_pHandle, bytesNeededSignalID, &bytesWrittenSignalID, &bufferSignalID[0]));
		
		return std::string(&bufferSignalID[0]);
	}
	
	/**
	* CSignalHandler::GetStateMachine - Returns the signal state machine instance.
	* @return Name Of State Machine
	*/
	std::string CSignalHandler::GetStateMachine()
	{
		LibMCEnv_uint32 bytesNeededStateMachineName = 0;
		LibMCEnv_uint32 bytesWrittenStateMachineName = 0;
		CheckError(libmcenv_signalhandler_getstatemachine(m_pHandle, 0, &bytesNeededStateMachineName, nullptr));
		std::vector<char> bufferStateMachineName(bytesNeededStateMachineName);
		CheckError(libmcenv_signalhandler_getstatemachine(m_pHandle, bytesNeededStateMachineName, &bytesWrittenStateMachineName, &bufferStateMachineName[0]));
		
		return std::string(&bufferStateMachineName[0]);
	}
	
	/**
	* CSignalHandler::GetString - gets a string value
	* @param[in] sName - Name
	* @return Value
	*/
	std::string CSignalHandler::GetString(const std::string & sName)
	{
		LibMCEnv_uint32 bytesNeededValue = 0;
		LibMCEnv_uint32 bytesWrittenValue = 0;
		CheckError(libmcenv_signalhandler_getstring(m_pHandle, sName.c_str(), 0, &bytesNeededValue, nullptr));
		std::vector<char> bufferValue(bytesNeededValue);
		CheckError(libmcenv_signalhandler_getstring(m_pHandle, sName.c_str(), bytesNeededValue, &bytesWrittenValue, &bufferValue[0]));
		
		return std::string(&bufferValue[0]);
	}
	
	/**
	* CSignalHandler::GetUUID - gets a uuid value
	* @param[in] sName - Name
	* @return Value
	*/
	std::string CSignalHandler::GetUUID(const std::string & sName)
	{
		LibMCEnv_uint32 bytesNeededValue = 0;
		LibMCEnv_uint32 bytesWrittenValue = 0;
		CheckError(libmcenv_signalhandler_getuuid(m_pHandle, sName.c_str(), 0, &bytesNeededValue, nullptr));
		std::vector<char> bufferValue(bytesNeededValue);
		CheckError(libmcenv_signalhandler_getuuid(m_pHandle, sName.c_str(), bytesNeededValue, &bytesWrittenValue, &bufferValue[0]));
		
		return std::string(&bufferValue[0]);
	}
	
	/**
	* CSignalHandler::GetDouble - gets a double
	* @param[in] sName - Name
	* @return Value
	*/
	LibMCEnv_double CSignalHandler::GetDouble(const std::string & sName)
	{
		LibMCEnv_double resultValue = 0;
		CheckError(libmcenv_signalhandler_getdouble(m_pHandle, sName.c_str(), &resultValue));
		
		return resultValue;
	}
	
	/**
	* CSignalHandler::GetInteger - gets an int.
	* @param[in] sName - Name
	* @return Value
	*/
	LibMCEnv_int64 CSignalHandler::GetInteger(const std::string & sName)
	{
		LibMCEnv_int64 resultValue = 0;
		CheckError(libmcenv_signalhandler_getinteger(m_pHandle, sName.c_str(), &resultValue));
		
		return resultValue;
	}
	
	/**
	* CSignalHandler::GetBool - gets a bool
	* @param[in] sName - Name
	* @return Value
	*/
	bool CSignalHandler::GetBool(const std::string & sName)
	{
		bool resultValue = 0;
		CheckError(libmcenv_signalhandler_getbool(m_pHandle, sName.c_str(), &resultValue));
		
		return resultValue;
	}
	
	/**
	* CSignalHandler::SetStringResult - returns a string value of the result
	* @param[in] sName - Name
	* @param[in] sValue - Value
	*/
	void CSignalHandler::SetStringResult(const std::string & sName, const std::string & sValue)
	{
		CheckError(libmcenv_signalhandler_setstringresult(m_pHandle, sName.c_str(), sValue.c_str()));
	}
	
	/**
	* CSignalHandler::SetUUIDResult - returns a uuid value of the result
	* @param[in] sName - Name
	* @param[in] sValue - Value
	*/
	void CSignalHandler::SetUUIDResult(const std::string & sName, const std::string & sValue)
	{
		CheckError(libmcenv_signalhandler_setuuidresult(m_pHandle, sName.c_str(), sValue.c_str()));
	}
	
	/**
	* CSignalHandler::SetDoubleResult - returns a string value of the result
	* @param[in] sName - Name
	* @param[in] dValue - Value
	*/
	void CSignalHandler::SetDoubleResult(const std::string & sName, const LibMCEnv_double dValue)
	{
		CheckError(libmcenv_signalhandler_setdoubleresult(m_pHandle, sName.c_str(), dValue));
	}
	
	/**
	* CSignalHandler::SetIntegerResult - sets an int.
	* @param[in] sName - Name
	* @param[in] nValue - Value
	*/
	void CSignalHandler::SetIntegerResult(const std::string & sName, const LibMCEnv_int64 nValue)
	{
		CheckError(libmcenv_signalhandler_setintegerresult(m_pHandle, sName.c_str(), nValue));
	}
	
	/**
	* CSignalHandler::SetBoolResult - sets a bool
	* @param[in] sName - Name
	* @param[in] bValue - Value
	*/
	void CSignalHandler::SetBoolResult(const std::string & sName, const bool bValue)
	{
		CheckError(libmcenv_signalhandler_setboolresult(m_pHandle, sName.c_str(), bValue));
	}
	
	/**
	 * Method definitions for class CStateEnvironment
	 */
	
	/**
	* CStateEnvironment::GetMachineState - Retrieves the machine state
	* @param[in] sMachineInstance - State machine instance name
	* @return Name of current state
	*/
	std::string CStateEnvironment::GetMachineState(const std::string & sMachineInstance)
	{
		LibMCEnv_uint32 bytesNeededStateName = 0;
		LibMCEnv_uint32 bytesWrittenStateName = 0;
		CheckError(libmcenv_stateenvironment_getmachinestate(m_pHandle, sMachineInstance.c_str(), 0, &bytesNeededStateName, nullptr));
		std::vector<char> bufferStateName(bytesNeededStateName);
		CheckError(libmcenv_stateenvironment_getmachinestate(m_pHandle, sMachineInstance.c_str(), bytesNeededStateName, &bytesWrittenStateName, &bufferStateName[0]));
		
		return std::string(&bufferStateName[0]);
	}
	
	/**
	* CStateEnvironment::PrepareSignal - prepares a signal object to trigger later.
	* @param[in] sMachineInstance - State machine instance name
	* @param[in] sSignalName - Name Of signal channel.
	* @return Signal trigger object.
	*/
	PSignalTrigger CStateEnvironment::PrepareSignal(const std::string & sMachineInstance, const std::string & sSignalName)
	{
		LibMCEnvHandle hSignalInstance = nullptr;
		CheckError(libmcenv_stateenvironment_preparesignal(m_pHandle, sMachineInstance.c_str(), sSignalName.c_str(), &hSignalInstance));
		
		if (!hSignalInstance) {
			CheckError(LIBMCENV_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CSignalTrigger>(m_pWrapper, hSignalInstance);
	}
	
	/**
	* CStateEnvironment::WaitForSignal - waits for a signal.
	* @param[in] sSignalName - Name Of Signal
	* @param[in] nTimeOut - Timeout in Milliseconds. 0 for Immediate return.
	* @param[out] pHandlerInstance - Signal object. If Success is false, the Signal Handler Object will be null.
	* @return Signal has been triggered
	*/
	bool CStateEnvironment::WaitForSignal(const std::string & sSignalName, const LibMCEnv_uint32 nTimeOut, PSignalHandler & pHandlerInstance)
	{
		LibMCEnvHandle hHandlerInstance = nullptr;
		bool resultSuccess = 0;
		CheckError(libmcenv_stateenvironment_waitforsignal(m_pHandle, sSignalName.c_str(), nTimeOut, &hHandlerInstance, &resultSuccess));
		if (hHandlerInstance) {
			pHandlerInstance = std::make_shared<CSignalHandler>(m_pWrapper, hHandlerInstance);
		} else {
			pHandlerInstance = nullptr;
		}
		
		return resultSuccess;
	}
	
	/**
	* CStateEnvironment::GetDriverLibrary - Returns the driver type and library lookup for a specific registered driver.
	* @param[in] sDriverName - Name identifier of the driver.
	* @param[out] sDriverType - returns type identifier of the driver.
	* @param[out] pDriverLookup - GetProcAddress Handle of the driver.
	*/
	void CStateEnvironment::GetDriverLibrary(const std::string & sDriverName, std::string & sDriverType, LibMCEnv_pvoid & pDriverLookup)
	{
		LibMCEnv_uint32 bytesNeededDriverType = 0;
		LibMCEnv_uint32 bytesWrittenDriverType = 0;
		CheckError(libmcenv_stateenvironment_getdriverlibrary(m_pHandle, sDriverName.c_str(), 0, &bytesNeededDriverType, nullptr, &pDriverLookup));
		std::vector<char> bufferDriverType(bytesNeededDriverType);
		CheckError(libmcenv_stateenvironment_getdriverlibrary(m_pHandle, sDriverName.c_str(), bytesNeededDriverType, &bytesWrittenDriverType, &bufferDriverType[0], &pDriverLookup));
		sDriverType = std::string(&bufferDriverType[0]);
	}
	
	/**
	* CStateEnvironment::CreateDriverAccess - Accesses and locks a driver for the execution of the current state.
	* @param[in] sDriverName - Name identifier of the driver.
	* @param[out] pDriverHandle - Handle of the driver.
	*/
	void CStateEnvironment::CreateDriverAccess(const std::string & sDriverName, LibMCEnv_pvoid & pDriverHandle)
	{
		CheckError(libmcenv_stateenvironment_createdriveraccess(m_pHandle, sDriverName.c_str(), &pDriverHandle));
	}
	
	/**
	* CStateEnvironment::GetBuildJob - Returns a instance of a build object.
	* @param[in] sBuildUUID - UUID of the build entity.
	* @return Build instance
	*/
	PBuild CStateEnvironment::GetBuildJob(const std::string & sBuildUUID)
	{
		LibMCEnvHandle hBuildInstance = nullptr;
		CheckError(libmcenv_stateenvironment_getbuildjob(m_pHandle, sBuildUUID.c_str(), &hBuildInstance));
		
		if (!hBuildInstance) {
			CheckError(LIBMCENV_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CBuild>(m_pWrapper, hBuildInstance);
	}
	
	/**
	* CStateEnvironment::UnloadAllToolpathes - unloads all toolpath in memory to clean up
	*/
	void CStateEnvironment::UnloadAllToolpathes()
	{
		CheckError(libmcenv_stateenvironment_unloadalltoolpathes(m_pHandle));
	}
	
	/**
	* CStateEnvironment::SetNextState - sets the next state
	* @param[in] sStateName - Name of next state
	*/
	void CStateEnvironment::SetNextState(const std::string & sStateName)
	{
		CheckError(libmcenv_stateenvironment_setnextstate(m_pHandle, sStateName.c_str()));
	}
	
	/**
	* CStateEnvironment::LogMessage - logs a string as message
	* @param[in] sLogString - String to Log
	*/
	void CStateEnvironment::LogMessage(const std::string & sLogString)
	{
		CheckError(libmcenv_stateenvironment_logmessage(m_pHandle, sLogString.c_str()));
	}
	
	/**
	* CStateEnvironment::LogWarning - logs a string as warning
	* @param[in] sLogString - String to Log
	*/
	void CStateEnvironment::LogWarning(const std::string & sLogString)
	{
		CheckError(libmcenv_stateenvironment_logwarning(m_pHandle, sLogString.c_str()));
	}
	
	/**
	* CStateEnvironment::LogInfo - logs a string as info
	* @param[in] sLogString - String to Log
	*/
	void CStateEnvironment::LogInfo(const std::string & sLogString)
	{
		CheckError(libmcenv_stateenvironment_loginfo(m_pHandle, sLogString.c_str()));
	}
	
	/**
	* CStateEnvironment::Sleep - Puts the current instance to sleep for a definite amount of time. MUST be used instead of a blocking sleep call.
	* @param[in] nDelay - Milliseconds to sleeps
	*/
	void CStateEnvironment::Sleep(const LibMCEnv_uint32 nDelay)
	{
		CheckError(libmcenv_stateenvironment_sleep(m_pHandle, nDelay));
	}
	
	/**
	* CStateEnvironment::CheckForTermination - checks environment for termination signal. MUST be called frequently in longer-running operations.
	* @return Returns if termination shall appear
	*/
	bool CStateEnvironment::CheckForTermination()
	{
		bool resultShallTerminate = 0;
		CheckError(libmcenv_stateenvironment_checkfortermination(m_pHandle, &resultShallTerminate));
		
		return resultShallTerminate;
	}
	
	/**
	* CStateEnvironment::StoreSignal - stores a signal handler in the current state machine
	* @param[in] sName - Name
	* @param[in] pHandler - Signal handler to store.
	*/
	void CStateEnvironment::StoreSignal(const std::string & sName, classParam<CSignalHandler> pHandler)
	{
		LibMCEnvHandle hHandler = pHandler.GetHandle();
		CheckError(libmcenv_stateenvironment_storesignal(m_pHandle, sName.c_str(), hHandler));
	}
	
	/**
	* CStateEnvironment::RetrieveSignal - retrieves a signal handler from the current state machine. Fails if value has not been stored before or signal has been already handled.
	* @param[in] sName - Name
	* @return Signal handler instance.
	*/
	PSignalHandler CStateEnvironment::RetrieveSignal(const std::string & sName)
	{
		LibMCEnvHandle hHandler = nullptr;
		CheckError(libmcenv_stateenvironment_retrievesignal(m_pHandle, sName.c_str(), &hHandler));
		
		if (!hHandler) {
			CheckError(LIBMCENV_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CSignalHandler>(m_pWrapper, hHandler);
	}
	
	/**
	* CStateEnvironment::ClearStoredValue - deletes a value from the data store.
	* @param[in] sName - Name
	*/
	void CStateEnvironment::ClearStoredValue(const std::string & sName)
	{
		CheckError(libmcenv_stateenvironment_clearstoredvalue(m_pHandle, sName.c_str()));
	}
	
	/**
	* CStateEnvironment::SetStringParameter - sets a string parameter
	* @param[in] sParameterGroup - Parameter Group
	* @param[in] sParameterName - Parameter Name
	* @param[in] sValue - Value to set
	*/
	void CStateEnvironment::SetStringParameter(const std::string & sParameterGroup, const std::string & sParameterName, const std::string & sValue)
	{
		CheckError(libmcenv_stateenvironment_setstringparameter(m_pHandle, sParameterGroup.c_str(), sParameterName.c_str(), sValue.c_str()));
	}
	
	/**
	* CStateEnvironment::SetUUIDParameter - sets a uuid parameter
	* @param[in] sParameterGroup - Parameter Group
	* @param[in] sParameterName - Parameter Name
	* @param[in] sValue - Value to set
	*/
	void CStateEnvironment::SetUUIDParameter(const std::string & sParameterGroup, const std::string & sParameterName, const std::string & sValue)
	{
		CheckError(libmcenv_stateenvironment_setuuidparameter(m_pHandle, sParameterGroup.c_str(), sParameterName.c_str(), sValue.c_str()));
	}
	
	/**
	* CStateEnvironment::SetDoubleParameter - sets a double parameter
	* @param[in] sParameterGroup - Parameter Group
	* @param[in] sParameterName - Parameter Name
	* @param[in] dValue - Value to set
	*/
	void CStateEnvironment::SetDoubleParameter(const std::string & sParameterGroup, const std::string & sParameterName, const LibMCEnv_double dValue)
	{
		CheckError(libmcenv_stateenvironment_setdoubleparameter(m_pHandle, sParameterGroup.c_str(), sParameterName.c_str(), dValue));
	}
	
	/**
	* CStateEnvironment::SetIntegerParameter - sets an int parameter
	* @param[in] sParameterGroup - Parameter Group
	* @param[in] sParameterName - Parameter Name
	* @param[in] nValue - Value to set
	*/
	void CStateEnvironment::SetIntegerParameter(const std::string & sParameterGroup, const std::string & sParameterName, const LibMCEnv_int64 nValue)
	{
		CheckError(libmcenv_stateenvironment_setintegerparameter(m_pHandle, sParameterGroup.c_str(), sParameterName.c_str(), nValue));
	}
	
	/**
	* CStateEnvironment::SetBoolParameter - sets a bool parameter
	* @param[in] sParameterGroup - Parameter Group
	* @param[in] sParameterName - Parameter Name
	* @param[in] bValue - Value to set
	*/
	void CStateEnvironment::SetBoolParameter(const std::string & sParameterGroup, const std::string & sParameterName, const bool bValue)
	{
		CheckError(libmcenv_stateenvironment_setboolparameter(m_pHandle, sParameterGroup.c_str(), sParameterName.c_str(), bValue));
	}
	
	/**
	* CStateEnvironment::GetStringParameter - returns a string parameter
	* @param[in] sParameterGroup - Parameter Group
	* @param[in] sParameterName - Parameter Name
	* @return Value to set
	*/
	std::string CStateEnvironment::GetStringParameter(const std::string & sParameterGroup, const std::string & sParameterName)
	{
		LibMCEnv_uint32 bytesNeededValue = 0;
		LibMCEnv_uint32 bytesWrittenValue = 0;
		CheckError(libmcenv_stateenvironment_getstringparameter(m_pHandle, sParameterGroup.c_str(), sParameterName.c_str(), 0, &bytesNeededValue, nullptr));
		std::vector<char> bufferValue(bytesNeededValue);
		CheckError(libmcenv_stateenvironment_getstringparameter(m_pHandle, sParameterGroup.c_str(), sParameterName.c_str(), bytesNeededValue, &bytesWrittenValue, &bufferValue[0]));
		
		return std::string(&bufferValue[0]);
	}
	
	/**
	* CStateEnvironment::GetUUIDParameter - returns a uuid parameter
	* @param[in] sParameterGroup - Parameter Group
	* @param[in] sParameterName - Parameter Name
	* @return Value to set
	*/
	std::string CStateEnvironment::GetUUIDParameter(const std::string & sParameterGroup, const std::string & sParameterName)
	{
		LibMCEnv_uint32 bytesNeededValue = 0;
		LibMCEnv_uint32 bytesWrittenValue = 0;
		CheckError(libmcenv_stateenvironment_getuuidparameter(m_pHandle, sParameterGroup.c_str(), sParameterName.c_str(), 0, &bytesNeededValue, nullptr));
		std::vector<char> bufferValue(bytesNeededValue);
		CheckError(libmcenv_stateenvironment_getuuidparameter(m_pHandle, sParameterGroup.c_str(), sParameterName.c_str(), bytesNeededValue, &bytesWrittenValue, &bufferValue[0]));
		
		return std::string(&bufferValue[0]);
	}
	
	/**
	* CStateEnvironment::GetDoubleParameter - returns a double parameter
	* @param[in] sParameterGroup - Parameter Group
	* @param[in] sParameterName - Parameter Name
	* @return Value to set
	*/
	LibMCEnv_double CStateEnvironment::GetDoubleParameter(const std::string & sParameterGroup, const std::string & sParameterName)
	{
		LibMCEnv_double resultValue = 0;
		CheckError(libmcenv_stateenvironment_getdoubleparameter(m_pHandle, sParameterGroup.c_str(), sParameterName.c_str(), &resultValue));
		
		return resultValue;
	}
	
	/**
	* CStateEnvironment::GetIntegerParameter - returns an int parameter
	* @param[in] sParameterGroup - Parameter Group
	* @param[in] sParameterName - Parameter Name
	* @return Value to set
	*/
	LibMCEnv_int64 CStateEnvironment::GetIntegerParameter(const std::string & sParameterGroup, const std::string & sParameterName)
	{
		LibMCEnv_int64 resultValue = 0;
		CheckError(libmcenv_stateenvironment_getintegerparameter(m_pHandle, sParameterGroup.c_str(), sParameterName.c_str(), &resultValue));
		
		return resultValue;
	}
	
	/**
	* CStateEnvironment::GetBoolParameter - returns a bool parameter
	* @param[in] sParameterGroup - Parameter Group
	* @param[in] sParameterName - Parameter Name
	* @return Value to set
	*/
	bool CStateEnvironment::GetBoolParameter(const std::string & sParameterGroup, const std::string & sParameterName)
	{
		bool resultValue = 0;
		CheckError(libmcenv_stateenvironment_getboolparameter(m_pHandle, sParameterGroup.c_str(), sParameterName.c_str(), &resultValue));
		
		return resultValue;
	}
	
	/**
	* CStateEnvironment::LoadResourceData - loads a plugin resource file into memory.
	* @param[in] sResourceName - Name of the resource.
	* @param[out] ResourceDataBuffer - Resource Data Buffer.
	*/
	void CStateEnvironment::LoadResourceData(const std::string & sResourceName, std::vector<LibMCEnv_uint8> & ResourceDataBuffer)
	{
		LibMCEnv_uint64 elementsNeededResourceData = 0;
		LibMCEnv_uint64 elementsWrittenResourceData = 0;
		CheckError(libmcenv_stateenvironment_loadresourcedata(m_pHandle, sResourceName.c_str(), 0, &elementsNeededResourceData, nullptr));
		ResourceDataBuffer.resize((size_t) elementsNeededResourceData);
		CheckError(libmcenv_stateenvironment_loadresourcedata(m_pHandle, sResourceName.c_str(), elementsNeededResourceData, &elementsWrittenResourceData, ResourceDataBuffer.data()));
	}
	
	/**
	* CStateEnvironment::CreateEmptyImage - creates an empty image object.
	* @param[in] nPixelSizeX - Pixel size in X. MUST be positive.
	* @param[in] nPixelSizeY - Pixel size in Y. MUST be positive.
	* @param[in] dDPIValueX - DPI Value in X. MUST be positive.
	* @param[in] dDPIValueY - DPI Value in Y. MUST be positive.
	* @param[in] ePixelFormat - Pixel format to use.
	* @return Empty image instance.
	*/
	PImageData CStateEnvironment::CreateEmptyImage(const LibMCEnv_uint32 nPixelSizeX, const LibMCEnv_uint32 nPixelSizeY, const LibMCEnv_double dDPIValueX, const LibMCEnv_double dDPIValueY, const eImagePixelFormat ePixelFormat)
	{
		LibMCEnvHandle hImageDataInstance = nullptr;
		CheckError(libmcenv_stateenvironment_createemptyimage(m_pHandle, nPixelSizeX, nPixelSizeY, dDPIValueX, dDPIValueY, ePixelFormat, &hImageDataInstance));
		
		if (!hImageDataInstance) {
			CheckError(LIBMCENV_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CImageData>(m_pWrapper, hImageDataInstance);
	}
	
	/**
	* CStateEnvironment::LoadPNGImage - creates an image object from a PNG data stream.
	* @param[in] PNGDataBuffer - DPI Value in X. MUST be positive.
	* @param[in] dDPIValueX - DPI Value in X. MUST be positive.
	* @param[in] dDPIValueY - DPI Value in Y. MUST be positive.
	* @param[in] ePixelFormat - Pixel format to use. Might lose color and alpha information.
	* @return Image instance containing the PNG image.
	*/
	PImageData CStateEnvironment::LoadPNGImage(const CInputVector<LibMCEnv_uint8> & PNGDataBuffer, const LibMCEnv_double dDPIValueX, const LibMCEnv_double dDPIValueY, const eImagePixelFormat ePixelFormat)
	{
		LibMCEnvHandle hImageDataInstance = nullptr;
		CheckError(libmcenv_stateenvironment_loadpngimage(m_pHandle, (LibMCEnv_uint64)PNGDataBuffer.size(), PNGDataBuffer.data(), dDPIValueX, dDPIValueY, ePixelFormat, &hImageDataInstance));
		
		if (!hImageDataInstance) {
			CheckError(LIBMCENV_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CImageData>(m_pWrapper, hImageDataInstance);
	}
	
	/**
	* CStateEnvironment::GetGlobalTimerInMilliseconds - Returns the global timer in milliseconds.
	* @return Timer value in Milliseconds
	*/
	LibMCEnv_uint64 CStateEnvironment::GetGlobalTimerInMilliseconds()
	{
		LibMCEnv_uint64 resultTimerValue = 0;
		CheckError(libmcenv_stateenvironment_getglobaltimerinmilliseconds(m_pHandle, &resultTimerValue));
		
		return resultTimerValue;
	}
	
	/**
	* CStateEnvironment::GetTestEnvironment - Returns a test environment instance.
	* @return Test Environment Instance
	*/
	PTestEnvironment CStateEnvironment::GetTestEnvironment()
	{
		LibMCEnvHandle hTestEnvironment = nullptr;
		CheckError(libmcenv_stateenvironment_gettestenvironment(m_pHandle, &hTestEnvironment));
		
		if (!hTestEnvironment) {
			CheckError(LIBMCENV_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CTestEnvironment>(m_pWrapper, hTestEnvironment);
	}
	
	/**
	 * Method definitions for class CUIEnvironment
	 */
	
	/**
	* CUIEnvironment::ActivateModalDialog - activates a modal dialog on the client.
	* @param[in] sDialogName - Name of the dialog to activate.
	*/
	void CUIEnvironment::ActivateModalDialog(const std::string & sDialogName)
	{
		CheckError(libmcenv_uienvironment_activatemodaldialog(m_pHandle, sDialogName.c_str()));
	}
	
	/**
	* CUIEnvironment::CloseModalDialog - closes the active modal dialog on the client.
	*/
	void CUIEnvironment::CloseModalDialog()
	{
		CheckError(libmcenv_uienvironment_closemodaldialog(m_pHandle));
	}
	
	/**
	* CUIEnvironment::ActivatePage - changes the current page on the client.
	* @param[in] sPageName - Name of the page to activate.
	*/
	void CUIEnvironment::ActivatePage(const std::string & sPageName)
	{
		CheckError(libmcenv_uienvironment_activatepage(m_pHandle, sPageName.c_str()));
	}
	
	/**
	* CUIEnvironment::LogOut - Logs out the client session.
	*/
	void CUIEnvironment::LogOut()
	{
		CheckError(libmcenv_uienvironment_logout(m_pHandle));
	}
	
	/**
	* CUIEnvironment::ShowHint - Shows a hint message in the user interface.
	* @param[in] sHint - Hint to show.
	* @param[in] nTimeoutInMS - How many milliseconds the snackbar should be shown.
	*/
	void CUIEnvironment::ShowHint(const std::string & sHint, const LibMCEnv_uint32 nTimeoutInMS)
	{
		CheckError(libmcenv_uienvironment_showhint(m_pHandle, sHint.c_str(), nTimeoutInMS));
	}
	
	/**
	* CUIEnvironment::ShowHintColored - Shows a hint message in the user interface in a certain color.
	* @param[in] sHint - Hint to show.
	* @param[in] nTimeoutInMS - How many milliseconds the snackbar should be shown.
	* @param[in] Color - Background color of hint.
	* @param[in] FontColor - Font color of hint.
	*/
	void CUIEnvironment::ShowHintColored(const std::string & sHint, const LibMCEnv_uint32 nTimeoutInMS, const sColorRGB & Color, const sColorRGB & FontColor)
	{
		CheckError(libmcenv_uienvironment_showhintcolored(m_pHandle, sHint.c_str(), nTimeoutInMS, &Color, &FontColor));
	}
	
	/**
	* CUIEnvironment::HideHint - Hides hint if any is displayed.
	*/
	void CUIEnvironment::HideHint()
	{
		CheckError(libmcenv_uienvironment_hidehint(m_pHandle));
	}
	
	/**
	* CUIEnvironment::ShowMessageDlg - Shows a message dialog in the user interface.
	* @param[in] sCaption - Caption of the dialog
	* @param[in] sTitle - Title of the dialog
	* @param[in] eDialogType - Which dialog type shall be shown.
	* @param[in] sYesEvent - Event to be called when clicked yes or ok.
	* @param[in] sNoEvent - Event to be called when clicked no.
	* @param[in] sCancelEvent - Event to be called when dialog is closed or cancel is pressed.
	* @return Dialog UUID. Will be set as sender for triggered events.
	*/
	std::string CUIEnvironment::ShowMessageDlg(const std::string & sCaption, const std::string & sTitle, const eMessageDialogType eDialogType, const std::string & sYesEvent, const std::string & sNoEvent, const std::string & sCancelEvent)
	{
		LibMCEnv_uint32 bytesNeededDialogUUID = 0;
		LibMCEnv_uint32 bytesWrittenDialogUUID = 0;
		CheckError(libmcenv_uienvironment_showmessagedlg(m_pHandle, sCaption.c_str(), sTitle.c_str(), eDialogType, sYesEvent.c_str(), sNoEvent.c_str(), sCancelEvent.c_str(), 0, &bytesNeededDialogUUID, nullptr));
		std::vector<char> bufferDialogUUID(bytesNeededDialogUUID);
		CheckError(libmcenv_uienvironment_showmessagedlg(m_pHandle, sCaption.c_str(), sTitle.c_str(), eDialogType, sYesEvent.c_str(), sNoEvent.c_str(), sCancelEvent.c_str(), bytesNeededDialogUUID, &bytesWrittenDialogUUID, &bufferDialogUUID[0]));
		
		return std::string(&bufferDialogUUID[0]);
	}
	
	/**
	* CUIEnvironment::RetrieveEventSender - returns name of the UI control that triggered the event.
	* @return Name of the sender element.
	*/
	std::string CUIEnvironment::RetrieveEventSender()
	{
		LibMCEnv_uint32 bytesNeededSenderName = 0;
		LibMCEnv_uint32 bytesWrittenSenderName = 0;
		CheckError(libmcenv_uienvironment_retrieveeventsender(m_pHandle, 0, &bytesNeededSenderName, nullptr));
		std::vector<char> bufferSenderName(bytesNeededSenderName);
		CheckError(libmcenv_uienvironment_retrieveeventsender(m_pHandle, bytesNeededSenderName, &bytesWrittenSenderName, &bufferSenderName[0]));
		
		return std::string(&bufferSenderName[0]);
	}
	
	/**
	* CUIEnvironment::RetrieveEventSenderUUID - returns uuid of the UI control that triggered the event.
	* @return Name of the sender uuid.
	*/
	std::string CUIEnvironment::RetrieveEventSenderUUID()
	{
		LibMCEnv_uint32 bytesNeededSenderUUID = 0;
		LibMCEnv_uint32 bytesWrittenSenderUUID = 0;
		CheckError(libmcenv_uienvironment_retrieveeventsenderuuid(m_pHandle, 0, &bytesNeededSenderUUID, nullptr));
		std::vector<char> bufferSenderUUID(bytesNeededSenderUUID);
		CheckError(libmcenv_uienvironment_retrieveeventsenderuuid(m_pHandle, bytesNeededSenderUUID, &bytesWrittenSenderUUID, &bufferSenderUUID[0]));
		
		return std::string(&bufferSenderUUID[0]);
	}
	
	/**
	* CUIEnvironment::PrepareSignal - prepares a signal object to trigger later.
	* @param[in] sMachineInstance - State machine instance name
	* @param[in] sSignalName - Name Of signal channel.
	* @return Signal trigger object.
	*/
	PSignalTrigger CUIEnvironment::PrepareSignal(const std::string & sMachineInstance, const std::string & sSignalName)
	{
		LibMCEnvHandle hSignalInstance = nullptr;
		CheckError(libmcenv_uienvironment_preparesignal(m_pHandle, sMachineInstance.c_str(), sSignalName.c_str(), &hSignalInstance));
		
		if (!hSignalInstance) {
			CheckError(LIBMCENV_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CSignalTrigger>(m_pWrapper, hSignalInstance);
	}
	
	/**
	* CUIEnvironment::GetMachineState - Retrieves the machine state
	* @param[in] sMachineInstance - State machine instance name
	* @return Name of current state
	*/
	std::string CUIEnvironment::GetMachineState(const std::string & sMachineInstance)
	{
		LibMCEnv_uint32 bytesNeededStateName = 0;
		LibMCEnv_uint32 bytesWrittenStateName = 0;
		CheckError(libmcenv_uienvironment_getmachinestate(m_pHandle, sMachineInstance.c_str(), 0, &bytesNeededStateName, nullptr));
		std::vector<char> bufferStateName(bytesNeededStateName);
		CheckError(libmcenv_uienvironment_getmachinestate(m_pHandle, sMachineInstance.c_str(), bytesNeededStateName, &bytesWrittenStateName, &bufferStateName[0]));
		
		return std::string(&bufferStateName[0]);
	}
	
	/**
	* CUIEnvironment::LogMessage - logs a string as message
	* @param[in] sLogString - String to Log
	*/
	void CUIEnvironment::LogMessage(const std::string & sLogString)
	{
		CheckError(libmcenv_uienvironment_logmessage(m_pHandle, sLogString.c_str()));
	}
	
	/**
	* CUIEnvironment::LogWarning - logs a string as warning
	* @param[in] sLogString - String to Log
	*/
	void CUIEnvironment::LogWarning(const std::string & sLogString)
	{
		CheckError(libmcenv_uienvironment_logwarning(m_pHandle, sLogString.c_str()));
	}
	
	/**
	* CUIEnvironment::LogInfo - logs a string as info
	* @param[in] sLogString - String to Log
	*/
	void CUIEnvironment::LogInfo(const std::string & sLogString)
	{
		CheckError(libmcenv_uienvironment_loginfo(m_pHandle, sLogString.c_str()));
	}
	
	/**
	* CUIEnvironment::GetMachineParameter - returns a string parameter of a state machine
	* @param[in] sMachineInstance - State machine instance name
	* @param[in] sParameterGroup - Parameter Group
	* @param[in] sParameterName - Parameter Name
	* @return Current Parameter Value
	*/
	std::string CUIEnvironment::GetMachineParameter(const std::string & sMachineInstance, const std::string & sParameterGroup, const std::string & sParameterName)
	{
		LibMCEnv_uint32 bytesNeededValue = 0;
		LibMCEnv_uint32 bytesWrittenValue = 0;
		CheckError(libmcenv_uienvironment_getmachineparameter(m_pHandle, sMachineInstance.c_str(), sParameterGroup.c_str(), sParameterName.c_str(), 0, &bytesNeededValue, nullptr));
		std::vector<char> bufferValue(bytesNeededValue);
		CheckError(libmcenv_uienvironment_getmachineparameter(m_pHandle, sMachineInstance.c_str(), sParameterGroup.c_str(), sParameterName.c_str(), bytesNeededValue, &bytesWrittenValue, &bufferValue[0]));
		
		return std::string(&bufferValue[0]);
	}
	
	/**
	* CUIEnvironment::GetMachineParameterAsUUID - returns a uuid parameter of a state machine
	* @param[in] sMachineInstance - State machine instance name
	* @param[in] sParameterGroup - Parameter Group
	* @param[in] sParameterName - Parameter Name
	* @return Current Parameter Value
	*/
	std::string CUIEnvironment::GetMachineParameterAsUUID(const std::string & sMachineInstance, const std::string & sParameterGroup, const std::string & sParameterName)
	{
		LibMCEnv_uint32 bytesNeededValue = 0;
		LibMCEnv_uint32 bytesWrittenValue = 0;
		CheckError(libmcenv_uienvironment_getmachineparameterasuuid(m_pHandle, sMachineInstance.c_str(), sParameterGroup.c_str(), sParameterName.c_str(), 0, &bytesNeededValue, nullptr));
		std::vector<char> bufferValue(bytesNeededValue);
		CheckError(libmcenv_uienvironment_getmachineparameterasuuid(m_pHandle, sMachineInstance.c_str(), sParameterGroup.c_str(), sParameterName.c_str(), bytesNeededValue, &bytesWrittenValue, &bufferValue[0]));
		
		return std::string(&bufferValue[0]);
	}
	
	/**
	* CUIEnvironment::GetMachineParameterAsDouble - returns a double parameter of a state machine
	* @param[in] sMachineInstance - State machine instance name
	* @param[in] sParameterGroup - Parameter Group
	* @param[in] sParameterName - Parameter Name
	* @return Current Parameter Value
	*/
	LibMCEnv_double CUIEnvironment::GetMachineParameterAsDouble(const std::string & sMachineInstance, const std::string & sParameterGroup, const std::string & sParameterName)
	{
		LibMCEnv_double resultValue = 0;
		CheckError(libmcenv_uienvironment_getmachineparameterasdouble(m_pHandle, sMachineInstance.c_str(), sParameterGroup.c_str(), sParameterName.c_str(), &resultValue));
		
		return resultValue;
	}
	
	/**
	* CUIEnvironment::GetMachineParameterAsInteger - returns an int parameter of a state machine
	* @param[in] sMachineInstance - State machine instance name
	* @param[in] sParameterGroup - Parameter Group
	* @param[in] sParameterName - Parameter Name
	* @return Current Parameter Value
	*/
	LibMCEnv_int64 CUIEnvironment::GetMachineParameterAsInteger(const std::string & sMachineInstance, const std::string & sParameterGroup, const std::string & sParameterName)
	{
		LibMCEnv_int64 resultValue = 0;
		CheckError(libmcenv_uienvironment_getmachineparameterasinteger(m_pHandle, sMachineInstance.c_str(), sParameterGroup.c_str(), sParameterName.c_str(), &resultValue));
		
		return resultValue;
	}
	
	/**
	* CUIEnvironment::GetMachineParameterAsBool - returns a bool parameter of a state machine
	* @param[in] sMachineInstance - State machine instance name
	* @param[in] sParameterGroup - Parameter Group
	* @param[in] sParameterName - Parameter Name
	* @return Current Parameter Value
	*/
	bool CUIEnvironment::GetMachineParameterAsBool(const std::string & sMachineInstance, const std::string & sParameterGroup, const std::string & sParameterName)
	{
		bool resultValue = 0;
		CheckError(libmcenv_uienvironment_getmachineparameterasbool(m_pHandle, sMachineInstance.c_str(), sParameterGroup.c_str(), sParameterName.c_str(), &resultValue));
		
		return resultValue;
	}
	
	/**
	* CUIEnvironment::GetUIProperty - returns a string property of a UI element on the client
	* @param[in] sElementPath - Path of UI Element. Fails if element does not exist.
	* @param[in] sPropertyName - Property name. Fails if property does not exist.
	* @return Current property Value
	*/
	std::string CUIEnvironment::GetUIProperty(const std::string & sElementPath, const std::string & sPropertyName)
	{
		LibMCEnv_uint32 bytesNeededValue = 0;
		LibMCEnv_uint32 bytesWrittenValue = 0;
		CheckError(libmcenv_uienvironment_getuiproperty(m_pHandle, sElementPath.c_str(), sPropertyName.c_str(), 0, &bytesNeededValue, nullptr));
		std::vector<char> bufferValue(bytesNeededValue);
		CheckError(libmcenv_uienvironment_getuiproperty(m_pHandle, sElementPath.c_str(), sPropertyName.c_str(), bytesNeededValue, &bytesWrittenValue, &bufferValue[0]));
		
		return std::string(&bufferValue[0]);
	}
	
	/**
	* CUIEnvironment::GetUIPropertyAsUUID - returns a uuid variable of a UI element on the client
	* @param[in] sElementPath - Path of UI Element. Fails if element does not exist.
	* @param[in] sPropertyName - Property name. Fails if property does not exist.
	* @return Current property Value
	*/
	std::string CUIEnvironment::GetUIPropertyAsUUID(const std::string & sElementPath, const std::string & sPropertyName)
	{
		LibMCEnv_uint32 bytesNeededValue = 0;
		LibMCEnv_uint32 bytesWrittenValue = 0;
		CheckError(libmcenv_uienvironment_getuipropertyasuuid(m_pHandle, sElementPath.c_str(), sPropertyName.c_str(), 0, &bytesNeededValue, nullptr));
		std::vector<char> bufferValue(bytesNeededValue);
		CheckError(libmcenv_uienvironment_getuipropertyasuuid(m_pHandle, sElementPath.c_str(), sPropertyName.c_str(), bytesNeededValue, &bytesWrittenValue, &bufferValue[0]));
		
		return std::string(&bufferValue[0]);
	}
	
	/**
	* CUIEnvironment::GetUIPropertyAsDouble - returns a double variable of a UI element on the client
	* @param[in] sElementPath - Path of UI Element. Fails if element does not exist.
	* @param[in] sPropertyName - Property name. Fails if property does not exist.
	* @return Current property Value
	*/
	LibMCEnv_double CUIEnvironment::GetUIPropertyAsDouble(const std::string & sElementPath, const std::string & sPropertyName)
	{
		LibMCEnv_double resultValue = 0;
		CheckError(libmcenv_uienvironment_getuipropertyasdouble(m_pHandle, sElementPath.c_str(), sPropertyName.c_str(), &resultValue));
		
		return resultValue;
	}
	
	/**
	* CUIEnvironment::GetUIPropertyAsInteger - returns a integer variable of a UI element on the client
	* @param[in] sElementPath - Path of UI Element. Fails if element does not exist.
	* @param[in] sPropertyName - Property name. Fails if property does not exist.
	* @return Current property Value
	*/
	LibMCEnv_int64 CUIEnvironment::GetUIPropertyAsInteger(const std::string & sElementPath, const std::string & sPropertyName)
	{
		LibMCEnv_int64 resultValue = 0;
		CheckError(libmcenv_uienvironment_getuipropertyasinteger(m_pHandle, sElementPath.c_str(), sPropertyName.c_str(), &resultValue));
		
		return resultValue;
	}
	
	/**
	* CUIEnvironment::GetUIPropertyAsBool - returns a integer variable of a UI element on the client
	* @param[in] sElementPath - Path of UI Element. Fails if element does not exist.
	* @param[in] sPropertyName - Property name. Fails if property does not exist.
	* @return Current property Value
	*/
	bool CUIEnvironment::GetUIPropertyAsBool(const std::string & sElementPath, const std::string & sPropertyName)
	{
		bool resultValue = 0;
		CheckError(libmcenv_uienvironment_getuipropertyasbool(m_pHandle, sElementPath.c_str(), sPropertyName.c_str(), &resultValue));
		
		return resultValue;
	}
	
	/**
	* CUIEnvironment::SetUIProperty - sets a string property of a UI element on the client.
	* @param[in] sElementPath - Path of UI Element. Fails if element does not exist.
	* @param[in] sPropertyName - Property name. Fails if property does not exist or is readonly.
	* @param[in] sValue - New property Value
	*/
	void CUIEnvironment::SetUIProperty(const std::string & sElementPath, const std::string & sPropertyName, const std::string & sValue)
	{
		CheckError(libmcenv_uienvironment_setuiproperty(m_pHandle, sElementPath.c_str(), sPropertyName.c_str(), sValue.c_str()));
	}
	
	/**
	* CUIEnvironment::SetUIPropertyAsUUID - sets a uuid property of a UI element on the client.
	* @param[in] sElementPath - Path of UI Element. Fails if element does not exist.
	* @param[in] sPropertyName - Property name. Fails if property does not exist or is readonly.
	* @param[in] sValue - New property Value
	*/
	void CUIEnvironment::SetUIPropertyAsUUID(const std::string & sElementPath, const std::string & sPropertyName, const std::string & sValue)
	{
		CheckError(libmcenv_uienvironment_setuipropertyasuuid(m_pHandle, sElementPath.c_str(), sPropertyName.c_str(), sValue.c_str()));
	}
	
	/**
	* CUIEnvironment::SetUIPropertyAsDouble - sets a double property of a UI element on the client.
	* @param[in] sElementPath - Path of UI Element. Fails if element does not exist.
	* @param[in] sPropertyName - Property name. Fails if property does not exist or is readonly.
	* @param[in] dValue - New property Value
	*/
	void CUIEnvironment::SetUIPropertyAsDouble(const std::string & sElementPath, const std::string & sPropertyName, const LibMCEnv_double dValue)
	{
		CheckError(libmcenv_uienvironment_setuipropertyasdouble(m_pHandle, sElementPath.c_str(), sPropertyName.c_str(), dValue));
	}
	
	/**
	* CUIEnvironment::SetUIPropertyAsInteger - sets a integer property of a UI element on the client.
	* @param[in] sElementPath - Path of UI Element. Fails if element does not exist.
	* @param[in] sPropertyName - Property name. Fails if property does not exist or is readonly.
	* @param[in] nValue - New property Value
	*/
	void CUIEnvironment::SetUIPropertyAsInteger(const std::string & sElementPath, const std::string & sPropertyName, const LibMCEnv_int64 nValue)
	{
		CheckError(libmcenv_uienvironment_setuipropertyasinteger(m_pHandle, sElementPath.c_str(), sPropertyName.c_str(), nValue));
	}
	
	/**
	* CUIEnvironment::SetUIPropertyAsBool - sets a bool property of a UI element on the client.
	* @param[in] sElementPath - Path of UI Element. Fails if element does not exist.
	* @param[in] sPropertyName - Property name. Fails if property does not exist or is readonly.
	* @param[in] bValue - New property Value
	*/
	void CUIEnvironment::SetUIPropertyAsBool(const std::string & sElementPath, const std::string & sPropertyName, const bool bValue)
	{
		CheckError(libmcenv_uienvironment_setuipropertyasbool(m_pHandle, sElementPath.c_str(), sPropertyName.c_str(), bValue));
	}
	
	/**
	* CUIEnvironment::CreateEmptyImage - creates an empty image object.
	* @param[in] nPixelSizeX - Pixel size in X. MUST be positive.
	* @param[in] nPixelSizeY - Pixel size in Y. MUST be positive.
	* @param[in] dDPIValueX - DPI Value in X. MUST be positive.
	* @param[in] dDPIValueY - DPI Value in Y. MUST be positive.
	* @param[in] ePixelFormat - Pixel format to use.
	* @return Empty image instance.
	*/
	PImageData CUIEnvironment::CreateEmptyImage(const LibMCEnv_uint32 nPixelSizeX, const LibMCEnv_uint32 nPixelSizeY, const LibMCEnv_double dDPIValueX, const LibMCEnv_double dDPIValueY, const eImagePixelFormat ePixelFormat)
	{
		LibMCEnvHandle hImageDataInstance = nullptr;
		CheckError(libmcenv_uienvironment_createemptyimage(m_pHandle, nPixelSizeX, nPixelSizeY, dDPIValueX, dDPIValueY, ePixelFormat, &hImageDataInstance));
		
		if (!hImageDataInstance) {
			CheckError(LIBMCENV_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CImageData>(m_pWrapper, hImageDataInstance);
	}
	
	/**
	* CUIEnvironment::LoadPNGImage - creates an image object from a PNG data stream.
	* @param[in] PNGDataBuffer - DPI Value in X. MUST be positive.
	* @param[in] dDPIValueX - DPI Value in X. MUST be positive.
	* @param[in] dDPIValueY - DPI Value in Y. MUST be positive.
	* @param[in] ePixelFormat - Pixel format to use. Might lose color and alpha information.
	* @return Image instance containing the PNG image.
	*/
	PImageData CUIEnvironment::LoadPNGImage(const CInputVector<LibMCEnv_uint8> & PNGDataBuffer, const LibMCEnv_double dDPIValueX, const LibMCEnv_double dDPIValueY, const eImagePixelFormat ePixelFormat)
	{
		LibMCEnvHandle hImageDataInstance = nullptr;
		CheckError(libmcenv_uienvironment_loadpngimage(m_pHandle, (LibMCEnv_uint64)PNGDataBuffer.size(), PNGDataBuffer.data(), dDPIValueX, dDPIValueY, ePixelFormat, &hImageDataInstance));
		
		if (!hImageDataInstance) {
			CheckError(LIBMCENV_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CImageData>(m_pWrapper, hImageDataInstance);
	}
	
	/**
	* CUIEnvironment::GetGlobalTimerInMilliseconds - Returns the global timer in milliseconds.
	* @return Timer value in Milliseconds
	*/
	LibMCEnv_uint64 CUIEnvironment::GetGlobalTimerInMilliseconds()
	{
		LibMCEnv_uint64 resultTimerValue = 0;
		CheckError(libmcenv_uienvironment_getglobaltimerinmilliseconds(m_pHandle, &resultTimerValue));
		
		return resultTimerValue;
	}
	
	/**
	* CUIEnvironment::GetTestEnvironment - Returns a test environment instance.
	* @return Test Environment Instance
	*/
	PTestEnvironment CUIEnvironment::GetTestEnvironment()
	{
		LibMCEnvHandle hTestEnvironment = nullptr;
		CheckError(libmcenv_uienvironment_gettestenvironment(m_pHandle, &hTestEnvironment));
		
		if (!hTestEnvironment) {
			CheckError(LIBMCENV_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CTestEnvironment>(m_pWrapper, hTestEnvironment);
	}

} // namespace LibMCEnv

#endif // __LIBMCENV_CPPHEADER_IMPLICIT_CPP

