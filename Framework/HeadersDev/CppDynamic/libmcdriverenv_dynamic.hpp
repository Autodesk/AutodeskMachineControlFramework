/*++

Copyright (C) 2020 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.7.0-develop.

Abstract: This is an autogenerated C++-Header file in order to allow an easy
 use of MC Driver Environment Interface

Interface version: 1.0.0

*/

#ifndef __LIBMCDRIVERENV_CPPHEADER_DYNAMIC_CPP
#define __LIBMCDRIVERENV_CPPHEADER_DYNAMIC_CPP

#include "libmcdriverenv_types.hpp"
#include "libmcdriverenv_dynamic.h"


#ifdef _WIN32
#include <windows.h>
#else // _WIN32
#include <dlfcn.h>
#endif // _WIN32
#include <string>
#include <memory>
#include <vector>
#include <exception>

namespace LibMCDriverEnv {

/*************************************************************************************************************************
 Forward Declaration of all classes
**************************************************************************************************************************/
class CWrapper;
class CBase;
class CWorkingFileExecution;
class CWorkingFile;
class CWorkingDirectory;
class CDriverEnvironment;

/*************************************************************************************************************************
 Declaration of deprecated class types
**************************************************************************************************************************/
typedef CWrapper CLibMCDriverEnvWrapper;
typedef CBase CLibMCDriverEnvBase;
typedef CWorkingFileExecution CLibMCDriverEnvWorkingFileExecution;
typedef CWorkingFile CLibMCDriverEnvWorkingFile;
typedef CWorkingDirectory CLibMCDriverEnvWorkingDirectory;
typedef CDriverEnvironment CLibMCDriverEnvDriverEnvironment;

/*************************************************************************************************************************
 Declaration of shared pointer types
**************************************************************************************************************************/
typedef std::shared_ptr<CWrapper> PWrapper;
typedef std::shared_ptr<CBase> PBase;
typedef std::shared_ptr<CWorkingFileExecution> PWorkingFileExecution;
typedef std::shared_ptr<CWorkingFile> PWorkingFile;
typedef std::shared_ptr<CWorkingDirectory> PWorkingDirectory;
typedef std::shared_ptr<CDriverEnvironment> PDriverEnvironment;

/*************************************************************************************************************************
 Declaration of deprecated shared pointer types
**************************************************************************************************************************/
typedef PWrapper PLibMCDriverEnvWrapper;
typedef PBase PLibMCDriverEnvBase;
typedef PWorkingFileExecution PLibMCDriverEnvWorkingFileExecution;
typedef PWorkingFile PLibMCDriverEnvWorkingFile;
typedef PWorkingDirectory PLibMCDriverEnvWorkingDirectory;
typedef PDriverEnvironment PLibMCDriverEnvDriverEnvironment;


/*************************************************************************************************************************
 classParam Definition
**************************************************************************************************************************/

template<class T> class classParam {
private:
	const T* m_ptr;

public:
	classParam(const T* ptr)
		: m_ptr (ptr)
	{
	}

	classParam(std::shared_ptr <T> sharedPtr)
		: m_ptr (sharedPtr.get())
	{
	}

	LibMCDriverEnvHandle GetHandle()
	{
		if (m_ptr != nullptr)
			return m_ptr->handle();
		return nullptr;
	}
};

/*************************************************************************************************************************
 Class ELibMCDriverEnvException 
**************************************************************************************************************************/
class ELibMCDriverEnvException : public std::exception {
protected:
	/**
	* Error code for the Exception.
	*/
	LibMCDriverEnvResult m_errorCode;
	/**
	* Error message for the Exception.
	*/
	std::string m_errorMessage;

public:
	/**
	* Exception Constructor.
	*/
	ELibMCDriverEnvException(LibMCDriverEnvResult errorCode, const std::string & sErrorMessage)
		: m_errorMessage("LibMCDriverEnv Error " + std::to_string(errorCode) + " (" + sErrorMessage + ")")
	{
		m_errorCode = errorCode;
	}

	/**
	* Returns error code
	*/
	LibMCDriverEnvResult getErrorCode() const noexcept
	{
		return m_errorCode;
	}

	/**
	* Returns error message
	*/
	const char* what() const noexcept
	{
		return m_errorMessage.c_str();
	}

};

/*************************************************************************************************************************
 Class CInputVector
**************************************************************************************************************************/
template <typename T>
class CInputVector {
private:
	
	const T* m_data;
	size_t m_size;
	
public:
	
	CInputVector( const std::vector<T>& vec)
		: m_data( vec.data() ), m_size( vec.size() )
	{
	}
	
	CInputVector( const T* in_data, size_t in_size)
		: m_data( in_data ), m_size(in_size )
	{
	}
	
	const T* data() const
	{
		return m_data;
	}
	
	size_t size() const
	{
		return m_size;
	}
	
};

// declare deprecated class name
template<typename T>
using CLibMCDriverEnvInputVector = CInputVector<T>;

/*************************************************************************************************************************
 Class CWrapper 
**************************************************************************************************************************/
class CWrapper {
public:
	
	CWrapper(void* pSymbolLookupMethod)
	{
		CheckError(nullptr, initWrapperTable(&m_WrapperTable));
		CheckError(nullptr, loadWrapperTableFromSymbolLookupMethod(&m_WrapperTable, pSymbolLookupMethod));
		
		CheckError(nullptr, checkBinaryVersion());
	}
	
	CWrapper(const std::string &sFileName)
	{
		CheckError(nullptr, initWrapperTable(&m_WrapperTable));
		CheckError(nullptr, loadWrapperTable(&m_WrapperTable, sFileName.c_str()));
		
		CheckError(nullptr, checkBinaryVersion());
	}
	
	static PWrapper loadLibrary(const std::string &sFileName)
	{
		return std::make_shared<CWrapper>(sFileName);
	}
	
	static PWrapper loadLibraryFromSymbolLookupMethod(void* pSymbolLookupMethod)
	{
		return std::make_shared<CWrapper>(pSymbolLookupMethod);
	}
	
	~CWrapper()
	{
		releaseWrapperTable(&m_WrapperTable);
	}
	
	inline void CheckError(CBase * pBaseClass, LibMCDriverEnvResult nResult);

	inline void GetVersion(LibMCDriverEnv_uint32 & nMajor, LibMCDriverEnv_uint32 & nMinor, LibMCDriverEnv_uint32 & nMicro);
	inline bool GetLastError(classParam<CBase> pInstance, std::string & sErrorMessage);
	inline void ReleaseInstance(classParam<CBase> pInstance);
	inline void AcquireInstance(classParam<CBase> pInstance);
	inline LibMCDriverEnv_pvoid GetSymbolLookupMethod();

private:
	sLibMCDriverEnvDynamicWrapperTable m_WrapperTable;
	
	LibMCDriverEnvResult checkBinaryVersion()
	{
		LibMCDriverEnv_uint32 nMajor, nMinor, nMicro;
		GetVersion(nMajor, nMinor, nMicro);
		if ( (nMajor != LIBMCDRIVERENV_VERSION_MAJOR) || (nMinor < LIBMCDRIVERENV_VERSION_MINOR) ) {
			return LIBMCDRIVERENV_ERROR_INCOMPATIBLEBINARYVERSION;
		}
		return LIBMCDRIVERENV_SUCCESS;
	}
	LibMCDriverEnvResult initWrapperTable(sLibMCDriverEnvDynamicWrapperTable * pWrapperTable);
	LibMCDriverEnvResult releaseWrapperTable(sLibMCDriverEnvDynamicWrapperTable * pWrapperTable);
	LibMCDriverEnvResult loadWrapperTable(sLibMCDriverEnvDynamicWrapperTable * pWrapperTable, const char * pLibraryFileName);
	LibMCDriverEnvResult loadWrapperTableFromSymbolLookupMethod(sLibMCDriverEnvDynamicWrapperTable * pWrapperTable, void* pSymbolLookupMethod);

	friend class CBase;
	friend class CWorkingFileExecution;
	friend class CWorkingFile;
	friend class CWorkingDirectory;
	friend class CDriverEnvironment;

};

	
/*************************************************************************************************************************
 Class CBase 
**************************************************************************************************************************/
class CBase {
public:
	
protected:
	/* Wrapper Object that created the class. */
	CWrapper * m_pWrapper;
	/* Handle to Instance in library*/
	LibMCDriverEnvHandle m_pHandle;

	/* Checks for an Error code and raises Exceptions */
	void CheckError(LibMCDriverEnvResult nResult)
	{
		if (m_pWrapper != nullptr)
			m_pWrapper->CheckError(this, nResult);
	}
public:
	/**
	* CBase::CBase - Constructor for Base class.
	*/
	CBase(CWrapper * pWrapper, LibMCDriverEnvHandle pHandle)
		: m_pWrapper(pWrapper), m_pHandle(pHandle)
	{
	}

	/**
	* CBase::~CBase - Destructor for Base class.
	*/
	virtual ~CBase()
	{
		if (m_pWrapper != nullptr)
			m_pWrapper->ReleaseInstance(this);
		m_pWrapper = nullptr;
	}

	/**
	* CBase::handle - Returns handle to instance.
	*/
	LibMCDriverEnvHandle handle() const
	{
		return m_pHandle;
	}

	/**
	* CBase::wrapper - Returns wrapper instance.
	*/
	CWrapper * wrapper() const
	{
		return m_pWrapper;
	}
	
	friend class CWrapper;
};
	
/*************************************************************************************************************************
 Class CWorkingFileExecution 
**************************************************************************************************************************/
class CWorkingFileExecution : public CBase {
public:
	
	/**
	* CWorkingFileExecution::CWorkingFileExecution - Constructor for WorkingFileExecution class.
	*/
	CWorkingFileExecution(CWrapper* pWrapper, LibMCDriverEnvHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline void GetStatus();
	inline std::string ReturnStdOut();
};
	
/*************************************************************************************************************************
 Class CWorkingFile 
**************************************************************************************************************************/
class CWorkingFile : public CBase {
public:
	
	/**
	* CWorkingFile::CWorkingFile - Constructor for WorkingFile class.
	*/
	CWorkingFile(CWrapper* pWrapper, LibMCDriverEnvHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline std::string GetAbsoluteFileName();
	inline LibMCDriverEnv_uint64 GetSize();
	inline std::string CalculateSHA2();
	inline void DeleteFile();
	inline PWorkingFileExecution ExecuteFile();
};
	
/*************************************************************************************************************************
 Class CWorkingDirectory 
**************************************************************************************************************************/
class CWorkingDirectory : public CBase {
public:
	
	/**
	* CWorkingDirectory::CWorkingDirectory - Constructor for WorkingDirectory class.
	*/
	CWorkingDirectory(CWrapper* pWrapper, LibMCDriverEnvHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline std::string GetAbsoluteFilePath();
	inline PWorkingFile StoreCustomData(const std::string & sFileName, const CInputVector<LibMCDriverEnv_uint8> & DataBufferBuffer);
	inline PWorkingFile StoreDriverData(const std::string & sFileName, const std::string & sIdentifier);
};
	
/*************************************************************************************************************************
 Class CDriverEnvironment 
**************************************************************************************************************************/
class CDriverEnvironment : public CBase {
public:
	
	/**
	* CDriverEnvironment::CDriverEnvironment - Constructor for DriverEnvironment class.
	*/
	CDriverEnvironment(CWrapper* pWrapper, LibMCDriverEnvHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline PWorkingDirectory CreateWorkingDirectory();
	inline void RetrieveDriverData(const std::string & sIdentifier, std::vector<LibMCDriverEnv_uint8> & DataBufferBuffer);
	inline void RegisterStringParameter(const std::string & sParameterName, const std::string & sDescription, const std::string & sDefaultValue);
	inline void RegisterUUIDParameter(const std::string & sParameterName, const std::string & sDescription, const std::string & sDefaultValue);
	inline void RegisterDoubleParameter(const std::string & sParameterName, const std::string & sDescription, const LibMCDriverEnv_double dDefaultValue);
	inline void RegisterIntegerParameter(const std::string & sParameterName, const std::string & sDescription, const LibMCDriverEnv_int64 nDefaultValue);
	inline void RegisterBoolParameter(const std::string & sParameterName, const std::string & sDescription, const bool bDefaultValue);
	inline void SetStringParameter(const std::string & sParameterName, const std::string & sValue);
	inline void SetUUIDParameter(const std::string & sParameterName, const std::string & sValue);
	inline void SetDoubleParameter(const std::string & sParameterName, const LibMCDriverEnv_double dValue);
	inline void SetIntegerParameter(const std::string & sParameterName, const LibMCDriverEnv_int64 nValue);
	inline void SetBoolParameter(const std::string & sParameterName, const bool bValue);
};
	
	/**
	* CWrapper::GetVersion - retrieves the binary version of this library.
	* @param[out] nMajor - returns the major version of this library
	* @param[out] nMinor - returns the minor version of this library
	* @param[out] nMicro - returns the micro version of this library
	*/
	inline void CWrapper::GetVersion(LibMCDriverEnv_uint32 & nMajor, LibMCDriverEnv_uint32 & nMinor, LibMCDriverEnv_uint32 & nMicro)
	{
		CheckError(nullptr,m_WrapperTable.m_GetVersion(&nMajor, &nMinor, &nMicro));
	}
	
	/**
	* CWrapper::GetLastError - Returns the last error recorded on this object
	* @param[in] pInstance - Instance Handle
	* @param[out] sErrorMessage - Message of the last error
	* @return Is there a last error to query
	*/
	inline bool CWrapper::GetLastError(classParam<CBase> pInstance, std::string & sErrorMessage)
	{
		LibMCDriverEnvHandle hInstance = pInstance.GetHandle();
		LibMCDriverEnv_uint32 bytesNeededErrorMessage = 0;
		LibMCDriverEnv_uint32 bytesWrittenErrorMessage = 0;
		bool resultHasError = 0;
		CheckError(nullptr,m_WrapperTable.m_GetLastError(hInstance, 0, &bytesNeededErrorMessage, nullptr, &resultHasError));
		std::vector<char> bufferErrorMessage(bytesNeededErrorMessage);
		CheckError(nullptr,m_WrapperTable.m_GetLastError(hInstance, bytesNeededErrorMessage, &bytesWrittenErrorMessage, &bufferErrorMessage[0], &resultHasError));
		sErrorMessage = std::string(&bufferErrorMessage[0]);
		
		return resultHasError;
	}
	
	/**
	* CWrapper::ReleaseInstance - Releases shared ownership of an Instance
	* @param[in] pInstance - Instance Handle
	*/
	inline void CWrapper::ReleaseInstance(classParam<CBase> pInstance)
	{
		LibMCDriverEnvHandle hInstance = pInstance.GetHandle();
		CheckError(nullptr,m_WrapperTable.m_ReleaseInstance(hInstance));
	}
	
	/**
	* CWrapper::AcquireInstance - Acquires shared ownership of an Instance
	* @param[in] pInstance - Instance Handle
	*/
	inline void CWrapper::AcquireInstance(classParam<CBase> pInstance)
	{
		LibMCDriverEnvHandle hInstance = pInstance.GetHandle();
		CheckError(nullptr,m_WrapperTable.m_AcquireInstance(hInstance));
	}
	
	/**
	* CWrapper::GetSymbolLookupMethod - Returns the address of the SymbolLookupMethod
	* @return Address of the SymbolAddressMethod
	*/
	inline LibMCDriverEnv_pvoid CWrapper::GetSymbolLookupMethod()
	{
		LibMCDriverEnv_pvoid resultSymbolLookupMethod = 0;
		CheckError(nullptr,m_WrapperTable.m_GetSymbolLookupMethod(&resultSymbolLookupMethod));
		
		return resultSymbolLookupMethod;
	}
	
	inline void CWrapper::CheckError(CBase * pBaseClass, LibMCDriverEnvResult nResult)
	{
		if (nResult != 0) {
			std::string sErrorMessage;
			if (pBaseClass != nullptr) {
				GetLastError(pBaseClass, sErrorMessage);
			}
			throw ELibMCDriverEnvException(nResult, sErrorMessage);
		}
	}
	

	inline LibMCDriverEnvResult CWrapper::initWrapperTable(sLibMCDriverEnvDynamicWrapperTable * pWrapperTable)
	{
		if (pWrapperTable == nullptr)
			return LIBMCDRIVERENV_ERROR_INVALIDPARAM;
		
		pWrapperTable->m_LibraryHandle = nullptr;
		pWrapperTable->m_WorkingFileExecution_GetStatus = nullptr;
		pWrapperTable->m_WorkingFileExecution_ReturnStdOut = nullptr;
		pWrapperTable->m_WorkingFile_GetAbsoluteFileName = nullptr;
		pWrapperTable->m_WorkingFile_GetSize = nullptr;
		pWrapperTable->m_WorkingFile_CalculateSHA2 = nullptr;
		pWrapperTable->m_WorkingFile_DeleteFile = nullptr;
		pWrapperTable->m_WorkingFile_ExecuteFile = nullptr;
		pWrapperTable->m_WorkingDirectory_GetAbsoluteFilePath = nullptr;
		pWrapperTable->m_WorkingDirectory_StoreCustomData = nullptr;
		pWrapperTable->m_WorkingDirectory_StoreDriverData = nullptr;
		pWrapperTable->m_DriverEnvironment_CreateWorkingDirectory = nullptr;
		pWrapperTable->m_DriverEnvironment_RetrieveDriverData = nullptr;
		pWrapperTable->m_DriverEnvironment_RegisterStringParameter = nullptr;
		pWrapperTable->m_DriverEnvironment_RegisterUUIDParameter = nullptr;
		pWrapperTable->m_DriverEnvironment_RegisterDoubleParameter = nullptr;
		pWrapperTable->m_DriverEnvironment_RegisterIntegerParameter = nullptr;
		pWrapperTable->m_DriverEnvironment_RegisterBoolParameter = nullptr;
		pWrapperTable->m_DriverEnvironment_SetStringParameter = nullptr;
		pWrapperTable->m_DriverEnvironment_SetUUIDParameter = nullptr;
		pWrapperTable->m_DriverEnvironment_SetDoubleParameter = nullptr;
		pWrapperTable->m_DriverEnvironment_SetIntegerParameter = nullptr;
		pWrapperTable->m_DriverEnvironment_SetBoolParameter = nullptr;
		pWrapperTable->m_GetVersion = nullptr;
		pWrapperTable->m_GetLastError = nullptr;
		pWrapperTable->m_ReleaseInstance = nullptr;
		pWrapperTable->m_AcquireInstance = nullptr;
		pWrapperTable->m_GetSymbolLookupMethod = nullptr;
		
		return LIBMCDRIVERENV_SUCCESS;
	}

	inline LibMCDriverEnvResult CWrapper::releaseWrapperTable(sLibMCDriverEnvDynamicWrapperTable * pWrapperTable)
	{
		if (pWrapperTable == nullptr)
			return LIBMCDRIVERENV_ERROR_INVALIDPARAM;
		
		if (pWrapperTable->m_LibraryHandle != nullptr) {
		#ifdef _WIN32
			HMODULE hModule = (HMODULE) pWrapperTable->m_LibraryHandle;
			FreeLibrary(hModule);
		#else // _WIN32
			dlclose(pWrapperTable->m_LibraryHandle);
		#endif // _WIN32
			return initWrapperTable(pWrapperTable);
		}
		
		return LIBMCDRIVERENV_SUCCESS;
	}

	inline LibMCDriverEnvResult CWrapper::loadWrapperTable(sLibMCDriverEnvDynamicWrapperTable * pWrapperTable, const char * pLibraryFileName)
	{
		if (pWrapperTable == nullptr)
			return LIBMCDRIVERENV_ERROR_INVALIDPARAM;
		if (pLibraryFileName == nullptr)
			return LIBMCDRIVERENV_ERROR_INVALIDPARAM;
		
		#ifdef _WIN32
		// Convert filename to UTF16-string
		int nLength = (int)strlen(pLibraryFileName);
		int nBufferSize = nLength * 2 + 2;
		std::vector<wchar_t> wsLibraryFileName(nBufferSize);
		int nResult = MultiByteToWideChar(CP_UTF8, 0, pLibraryFileName, nLength, &wsLibraryFileName[0], nBufferSize);
		if (nResult == 0)
			return LIBMCDRIVERENV_ERROR_COULDNOTLOADLIBRARY;
		
		HMODULE hLibrary = LoadLibraryW(wsLibraryFileName.data());
		if (hLibrary == 0) 
			return LIBMCDRIVERENV_ERROR_COULDNOTLOADLIBRARY;
		#else // _WIN32
		void* hLibrary = dlopen(pLibraryFileName, RTLD_LAZY);
		if (hLibrary == 0) 
			return LIBMCDRIVERENV_ERROR_COULDNOTLOADLIBRARY;
		dlerror();
		#endif // _WIN32
		
		#ifdef _WIN32
		pWrapperTable->m_WorkingFileExecution_GetStatus = (PLibMCDriverEnvWorkingFileExecution_GetStatusPtr) GetProcAddress(hLibrary, "libmcdriverenv_workingfileexecution_getstatus");
		#else // _WIN32
		pWrapperTable->m_WorkingFileExecution_GetStatus = (PLibMCDriverEnvWorkingFileExecution_GetStatusPtr) dlsym(hLibrary, "libmcdriverenv_workingfileexecution_getstatus");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_WorkingFileExecution_GetStatus == nullptr)
			return LIBMCDRIVERENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_WorkingFileExecution_ReturnStdOut = (PLibMCDriverEnvWorkingFileExecution_ReturnStdOutPtr) GetProcAddress(hLibrary, "libmcdriverenv_workingfileexecution_returnstdout");
		#else // _WIN32
		pWrapperTable->m_WorkingFileExecution_ReturnStdOut = (PLibMCDriverEnvWorkingFileExecution_ReturnStdOutPtr) dlsym(hLibrary, "libmcdriverenv_workingfileexecution_returnstdout");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_WorkingFileExecution_ReturnStdOut == nullptr)
			return LIBMCDRIVERENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_WorkingFile_GetAbsoluteFileName = (PLibMCDriverEnvWorkingFile_GetAbsoluteFileNamePtr) GetProcAddress(hLibrary, "libmcdriverenv_workingfile_getabsolutefilename");
		#else // _WIN32
		pWrapperTable->m_WorkingFile_GetAbsoluteFileName = (PLibMCDriverEnvWorkingFile_GetAbsoluteFileNamePtr) dlsym(hLibrary, "libmcdriverenv_workingfile_getabsolutefilename");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_WorkingFile_GetAbsoluteFileName == nullptr)
			return LIBMCDRIVERENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_WorkingFile_GetSize = (PLibMCDriverEnvWorkingFile_GetSizePtr) GetProcAddress(hLibrary, "libmcdriverenv_workingfile_getsize");
		#else // _WIN32
		pWrapperTable->m_WorkingFile_GetSize = (PLibMCDriverEnvWorkingFile_GetSizePtr) dlsym(hLibrary, "libmcdriverenv_workingfile_getsize");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_WorkingFile_GetSize == nullptr)
			return LIBMCDRIVERENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_WorkingFile_CalculateSHA2 = (PLibMCDriverEnvWorkingFile_CalculateSHA2Ptr) GetProcAddress(hLibrary, "libmcdriverenv_workingfile_calculatesha2");
		#else // _WIN32
		pWrapperTable->m_WorkingFile_CalculateSHA2 = (PLibMCDriverEnvWorkingFile_CalculateSHA2Ptr) dlsym(hLibrary, "libmcdriverenv_workingfile_calculatesha2");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_WorkingFile_CalculateSHA2 == nullptr)
			return LIBMCDRIVERENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_WorkingFile_DeleteFile = (PLibMCDriverEnvWorkingFile_DeleteFilePtr) GetProcAddress(hLibrary, "libmcdriverenv_workingfile_deletefile");
		#else // _WIN32
		pWrapperTable->m_WorkingFile_DeleteFile = (PLibMCDriverEnvWorkingFile_DeleteFilePtr) dlsym(hLibrary, "libmcdriverenv_workingfile_deletefile");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_WorkingFile_DeleteFile == nullptr)
			return LIBMCDRIVERENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_WorkingFile_ExecuteFile = (PLibMCDriverEnvWorkingFile_ExecuteFilePtr) GetProcAddress(hLibrary, "libmcdriverenv_workingfile_executefile");
		#else // _WIN32
		pWrapperTable->m_WorkingFile_ExecuteFile = (PLibMCDriverEnvWorkingFile_ExecuteFilePtr) dlsym(hLibrary, "libmcdriverenv_workingfile_executefile");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_WorkingFile_ExecuteFile == nullptr)
			return LIBMCDRIVERENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_WorkingDirectory_GetAbsoluteFilePath = (PLibMCDriverEnvWorkingDirectory_GetAbsoluteFilePathPtr) GetProcAddress(hLibrary, "libmcdriverenv_workingdirectory_getabsolutefilepath");
		#else // _WIN32
		pWrapperTable->m_WorkingDirectory_GetAbsoluteFilePath = (PLibMCDriverEnvWorkingDirectory_GetAbsoluteFilePathPtr) dlsym(hLibrary, "libmcdriverenv_workingdirectory_getabsolutefilepath");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_WorkingDirectory_GetAbsoluteFilePath == nullptr)
			return LIBMCDRIVERENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_WorkingDirectory_StoreCustomData = (PLibMCDriverEnvWorkingDirectory_StoreCustomDataPtr) GetProcAddress(hLibrary, "libmcdriverenv_workingdirectory_storecustomdata");
		#else // _WIN32
		pWrapperTable->m_WorkingDirectory_StoreCustomData = (PLibMCDriverEnvWorkingDirectory_StoreCustomDataPtr) dlsym(hLibrary, "libmcdriverenv_workingdirectory_storecustomdata");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_WorkingDirectory_StoreCustomData == nullptr)
			return LIBMCDRIVERENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_WorkingDirectory_StoreDriverData = (PLibMCDriverEnvWorkingDirectory_StoreDriverDataPtr) GetProcAddress(hLibrary, "libmcdriverenv_workingdirectory_storedriverdata");
		#else // _WIN32
		pWrapperTable->m_WorkingDirectory_StoreDriverData = (PLibMCDriverEnvWorkingDirectory_StoreDriverDataPtr) dlsym(hLibrary, "libmcdriverenv_workingdirectory_storedriverdata");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_WorkingDirectory_StoreDriverData == nullptr)
			return LIBMCDRIVERENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_DriverEnvironment_CreateWorkingDirectory = (PLibMCDriverEnvDriverEnvironment_CreateWorkingDirectoryPtr) GetProcAddress(hLibrary, "libmcdriverenv_driverenvironment_createworkingdirectory");
		#else // _WIN32
		pWrapperTable->m_DriverEnvironment_CreateWorkingDirectory = (PLibMCDriverEnvDriverEnvironment_CreateWorkingDirectoryPtr) dlsym(hLibrary, "libmcdriverenv_driverenvironment_createworkingdirectory");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_DriverEnvironment_CreateWorkingDirectory == nullptr)
			return LIBMCDRIVERENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_DriverEnvironment_RetrieveDriverData = (PLibMCDriverEnvDriverEnvironment_RetrieveDriverDataPtr) GetProcAddress(hLibrary, "libmcdriverenv_driverenvironment_retrievedriverdata");
		#else // _WIN32
		pWrapperTable->m_DriverEnvironment_RetrieveDriverData = (PLibMCDriverEnvDriverEnvironment_RetrieveDriverDataPtr) dlsym(hLibrary, "libmcdriverenv_driverenvironment_retrievedriverdata");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_DriverEnvironment_RetrieveDriverData == nullptr)
			return LIBMCDRIVERENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_DriverEnvironment_RegisterStringParameter = (PLibMCDriverEnvDriverEnvironment_RegisterStringParameterPtr) GetProcAddress(hLibrary, "libmcdriverenv_driverenvironment_registerstringparameter");
		#else // _WIN32
		pWrapperTable->m_DriverEnvironment_RegisterStringParameter = (PLibMCDriverEnvDriverEnvironment_RegisterStringParameterPtr) dlsym(hLibrary, "libmcdriverenv_driverenvironment_registerstringparameter");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_DriverEnvironment_RegisterStringParameter == nullptr)
			return LIBMCDRIVERENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_DriverEnvironment_RegisterUUIDParameter = (PLibMCDriverEnvDriverEnvironment_RegisterUUIDParameterPtr) GetProcAddress(hLibrary, "libmcdriverenv_driverenvironment_registeruuidparameter");
		#else // _WIN32
		pWrapperTable->m_DriverEnvironment_RegisterUUIDParameter = (PLibMCDriverEnvDriverEnvironment_RegisterUUIDParameterPtr) dlsym(hLibrary, "libmcdriverenv_driverenvironment_registeruuidparameter");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_DriverEnvironment_RegisterUUIDParameter == nullptr)
			return LIBMCDRIVERENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_DriverEnvironment_RegisterDoubleParameter = (PLibMCDriverEnvDriverEnvironment_RegisterDoubleParameterPtr) GetProcAddress(hLibrary, "libmcdriverenv_driverenvironment_registerdoubleparameter");
		#else // _WIN32
		pWrapperTable->m_DriverEnvironment_RegisterDoubleParameter = (PLibMCDriverEnvDriverEnvironment_RegisterDoubleParameterPtr) dlsym(hLibrary, "libmcdriverenv_driverenvironment_registerdoubleparameter");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_DriverEnvironment_RegisterDoubleParameter == nullptr)
			return LIBMCDRIVERENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_DriverEnvironment_RegisterIntegerParameter = (PLibMCDriverEnvDriverEnvironment_RegisterIntegerParameterPtr) GetProcAddress(hLibrary, "libmcdriverenv_driverenvironment_registerintegerparameter");
		#else // _WIN32
		pWrapperTable->m_DriverEnvironment_RegisterIntegerParameter = (PLibMCDriverEnvDriverEnvironment_RegisterIntegerParameterPtr) dlsym(hLibrary, "libmcdriverenv_driverenvironment_registerintegerparameter");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_DriverEnvironment_RegisterIntegerParameter == nullptr)
			return LIBMCDRIVERENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_DriverEnvironment_RegisterBoolParameter = (PLibMCDriverEnvDriverEnvironment_RegisterBoolParameterPtr) GetProcAddress(hLibrary, "libmcdriverenv_driverenvironment_registerboolparameter");
		#else // _WIN32
		pWrapperTable->m_DriverEnvironment_RegisterBoolParameter = (PLibMCDriverEnvDriverEnvironment_RegisterBoolParameterPtr) dlsym(hLibrary, "libmcdriverenv_driverenvironment_registerboolparameter");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_DriverEnvironment_RegisterBoolParameter == nullptr)
			return LIBMCDRIVERENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_DriverEnvironment_SetStringParameter = (PLibMCDriverEnvDriverEnvironment_SetStringParameterPtr) GetProcAddress(hLibrary, "libmcdriverenv_driverenvironment_setstringparameter");
		#else // _WIN32
		pWrapperTable->m_DriverEnvironment_SetStringParameter = (PLibMCDriverEnvDriverEnvironment_SetStringParameterPtr) dlsym(hLibrary, "libmcdriverenv_driverenvironment_setstringparameter");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_DriverEnvironment_SetStringParameter == nullptr)
			return LIBMCDRIVERENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_DriverEnvironment_SetUUIDParameter = (PLibMCDriverEnvDriverEnvironment_SetUUIDParameterPtr) GetProcAddress(hLibrary, "libmcdriverenv_driverenvironment_setuuidparameter");
		#else // _WIN32
		pWrapperTable->m_DriverEnvironment_SetUUIDParameter = (PLibMCDriverEnvDriverEnvironment_SetUUIDParameterPtr) dlsym(hLibrary, "libmcdriverenv_driverenvironment_setuuidparameter");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_DriverEnvironment_SetUUIDParameter == nullptr)
			return LIBMCDRIVERENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_DriverEnvironment_SetDoubleParameter = (PLibMCDriverEnvDriverEnvironment_SetDoubleParameterPtr) GetProcAddress(hLibrary, "libmcdriverenv_driverenvironment_setdoubleparameter");
		#else // _WIN32
		pWrapperTable->m_DriverEnvironment_SetDoubleParameter = (PLibMCDriverEnvDriverEnvironment_SetDoubleParameterPtr) dlsym(hLibrary, "libmcdriverenv_driverenvironment_setdoubleparameter");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_DriverEnvironment_SetDoubleParameter == nullptr)
			return LIBMCDRIVERENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_DriverEnvironment_SetIntegerParameter = (PLibMCDriverEnvDriverEnvironment_SetIntegerParameterPtr) GetProcAddress(hLibrary, "libmcdriverenv_driverenvironment_setintegerparameter");
		#else // _WIN32
		pWrapperTable->m_DriverEnvironment_SetIntegerParameter = (PLibMCDriverEnvDriverEnvironment_SetIntegerParameterPtr) dlsym(hLibrary, "libmcdriverenv_driverenvironment_setintegerparameter");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_DriverEnvironment_SetIntegerParameter == nullptr)
			return LIBMCDRIVERENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_DriverEnvironment_SetBoolParameter = (PLibMCDriverEnvDriverEnvironment_SetBoolParameterPtr) GetProcAddress(hLibrary, "libmcdriverenv_driverenvironment_setboolparameter");
		#else // _WIN32
		pWrapperTable->m_DriverEnvironment_SetBoolParameter = (PLibMCDriverEnvDriverEnvironment_SetBoolParameterPtr) dlsym(hLibrary, "libmcdriverenv_driverenvironment_setboolparameter");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_DriverEnvironment_SetBoolParameter == nullptr)
			return LIBMCDRIVERENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GetVersion = (PLibMCDriverEnvGetVersionPtr) GetProcAddress(hLibrary, "libmcdriverenv_getversion");
		#else // _WIN32
		pWrapperTable->m_GetVersion = (PLibMCDriverEnvGetVersionPtr) dlsym(hLibrary, "libmcdriverenv_getversion");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GetVersion == nullptr)
			return LIBMCDRIVERENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GetLastError = (PLibMCDriverEnvGetLastErrorPtr) GetProcAddress(hLibrary, "libmcdriverenv_getlasterror");
		#else // _WIN32
		pWrapperTable->m_GetLastError = (PLibMCDriverEnvGetLastErrorPtr) dlsym(hLibrary, "libmcdriverenv_getlasterror");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GetLastError == nullptr)
			return LIBMCDRIVERENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ReleaseInstance = (PLibMCDriverEnvReleaseInstancePtr) GetProcAddress(hLibrary, "libmcdriverenv_releaseinstance");
		#else // _WIN32
		pWrapperTable->m_ReleaseInstance = (PLibMCDriverEnvReleaseInstancePtr) dlsym(hLibrary, "libmcdriverenv_releaseinstance");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ReleaseInstance == nullptr)
			return LIBMCDRIVERENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_AcquireInstance = (PLibMCDriverEnvAcquireInstancePtr) GetProcAddress(hLibrary, "libmcdriverenv_acquireinstance");
		#else // _WIN32
		pWrapperTable->m_AcquireInstance = (PLibMCDriverEnvAcquireInstancePtr) dlsym(hLibrary, "libmcdriverenv_acquireinstance");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_AcquireInstance == nullptr)
			return LIBMCDRIVERENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GetSymbolLookupMethod = (PLibMCDriverEnvGetSymbolLookupMethodPtr) GetProcAddress(hLibrary, "libmcdriverenv_getsymbollookupmethod");
		#else // _WIN32
		pWrapperTable->m_GetSymbolLookupMethod = (PLibMCDriverEnvGetSymbolLookupMethodPtr) dlsym(hLibrary, "libmcdriverenv_getsymbollookupmethod");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GetSymbolLookupMethod == nullptr)
			return LIBMCDRIVERENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		pWrapperTable->m_LibraryHandle = hLibrary;
		return LIBMCDRIVERENV_SUCCESS;
	}

	inline LibMCDriverEnvResult CWrapper::loadWrapperTableFromSymbolLookupMethod(sLibMCDriverEnvDynamicWrapperTable * pWrapperTable, void* pSymbolLookupMethod)
{
		if (pWrapperTable == nullptr)
			return LIBMCDRIVERENV_ERROR_INVALIDPARAM;
		if (pSymbolLookupMethod == nullptr)
			return LIBMCDRIVERENV_ERROR_INVALIDPARAM;
		
		typedef LibMCDriverEnvResult(*SymbolLookupType)(const char*, void**);
		
		SymbolLookupType pLookup = (SymbolLookupType)pSymbolLookupMethod;
		
		LibMCDriverEnvResult eLookupError = LIBMCDRIVERENV_SUCCESS;
		eLookupError = (*pLookup)("libmcdriverenv_workingfileexecution_getstatus", (void**)&(pWrapperTable->m_WorkingFileExecution_GetStatus));
		if ( (eLookupError != 0) || (pWrapperTable->m_WorkingFileExecution_GetStatus == nullptr) )
			return LIBMCDRIVERENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriverenv_workingfileexecution_returnstdout", (void**)&(pWrapperTable->m_WorkingFileExecution_ReturnStdOut));
		if ( (eLookupError != 0) || (pWrapperTable->m_WorkingFileExecution_ReturnStdOut == nullptr) )
			return LIBMCDRIVERENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriverenv_workingfile_getabsolutefilename", (void**)&(pWrapperTable->m_WorkingFile_GetAbsoluteFileName));
		if ( (eLookupError != 0) || (pWrapperTable->m_WorkingFile_GetAbsoluteFileName == nullptr) )
			return LIBMCDRIVERENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriverenv_workingfile_getsize", (void**)&(pWrapperTable->m_WorkingFile_GetSize));
		if ( (eLookupError != 0) || (pWrapperTable->m_WorkingFile_GetSize == nullptr) )
			return LIBMCDRIVERENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriverenv_workingfile_calculatesha2", (void**)&(pWrapperTable->m_WorkingFile_CalculateSHA2));
		if ( (eLookupError != 0) || (pWrapperTable->m_WorkingFile_CalculateSHA2 == nullptr) )
			return LIBMCDRIVERENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriverenv_workingfile_deletefile", (void**)&(pWrapperTable->m_WorkingFile_DeleteFile));
		if ( (eLookupError != 0) || (pWrapperTable->m_WorkingFile_DeleteFile == nullptr) )
			return LIBMCDRIVERENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriverenv_workingfile_executefile", (void**)&(pWrapperTable->m_WorkingFile_ExecuteFile));
		if ( (eLookupError != 0) || (pWrapperTable->m_WorkingFile_ExecuteFile == nullptr) )
			return LIBMCDRIVERENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriverenv_workingdirectory_getabsolutefilepath", (void**)&(pWrapperTable->m_WorkingDirectory_GetAbsoluteFilePath));
		if ( (eLookupError != 0) || (pWrapperTable->m_WorkingDirectory_GetAbsoluteFilePath == nullptr) )
			return LIBMCDRIVERENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriverenv_workingdirectory_storecustomdata", (void**)&(pWrapperTable->m_WorkingDirectory_StoreCustomData));
		if ( (eLookupError != 0) || (pWrapperTable->m_WorkingDirectory_StoreCustomData == nullptr) )
			return LIBMCDRIVERENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriverenv_workingdirectory_storedriverdata", (void**)&(pWrapperTable->m_WorkingDirectory_StoreDriverData));
		if ( (eLookupError != 0) || (pWrapperTable->m_WorkingDirectory_StoreDriverData == nullptr) )
			return LIBMCDRIVERENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriverenv_driverenvironment_createworkingdirectory", (void**)&(pWrapperTable->m_DriverEnvironment_CreateWorkingDirectory));
		if ( (eLookupError != 0) || (pWrapperTable->m_DriverEnvironment_CreateWorkingDirectory == nullptr) )
			return LIBMCDRIVERENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriverenv_driverenvironment_retrievedriverdata", (void**)&(pWrapperTable->m_DriverEnvironment_RetrieveDriverData));
		if ( (eLookupError != 0) || (pWrapperTable->m_DriverEnvironment_RetrieveDriverData == nullptr) )
			return LIBMCDRIVERENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriverenv_driverenvironment_registerstringparameter", (void**)&(pWrapperTable->m_DriverEnvironment_RegisterStringParameter));
		if ( (eLookupError != 0) || (pWrapperTable->m_DriverEnvironment_RegisterStringParameter == nullptr) )
			return LIBMCDRIVERENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriverenv_driverenvironment_registeruuidparameter", (void**)&(pWrapperTable->m_DriverEnvironment_RegisterUUIDParameter));
		if ( (eLookupError != 0) || (pWrapperTable->m_DriverEnvironment_RegisterUUIDParameter == nullptr) )
			return LIBMCDRIVERENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriverenv_driverenvironment_registerdoubleparameter", (void**)&(pWrapperTable->m_DriverEnvironment_RegisterDoubleParameter));
		if ( (eLookupError != 0) || (pWrapperTable->m_DriverEnvironment_RegisterDoubleParameter == nullptr) )
			return LIBMCDRIVERENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriverenv_driverenvironment_registerintegerparameter", (void**)&(pWrapperTable->m_DriverEnvironment_RegisterIntegerParameter));
		if ( (eLookupError != 0) || (pWrapperTable->m_DriverEnvironment_RegisterIntegerParameter == nullptr) )
			return LIBMCDRIVERENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriverenv_driverenvironment_registerboolparameter", (void**)&(pWrapperTable->m_DriverEnvironment_RegisterBoolParameter));
		if ( (eLookupError != 0) || (pWrapperTable->m_DriverEnvironment_RegisterBoolParameter == nullptr) )
			return LIBMCDRIVERENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriverenv_driverenvironment_setstringparameter", (void**)&(pWrapperTable->m_DriverEnvironment_SetStringParameter));
		if ( (eLookupError != 0) || (pWrapperTable->m_DriverEnvironment_SetStringParameter == nullptr) )
			return LIBMCDRIVERENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriverenv_driverenvironment_setuuidparameter", (void**)&(pWrapperTable->m_DriverEnvironment_SetUUIDParameter));
		if ( (eLookupError != 0) || (pWrapperTable->m_DriverEnvironment_SetUUIDParameter == nullptr) )
			return LIBMCDRIVERENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriverenv_driverenvironment_setdoubleparameter", (void**)&(pWrapperTable->m_DriverEnvironment_SetDoubleParameter));
		if ( (eLookupError != 0) || (pWrapperTable->m_DriverEnvironment_SetDoubleParameter == nullptr) )
			return LIBMCDRIVERENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriverenv_driverenvironment_setintegerparameter", (void**)&(pWrapperTable->m_DriverEnvironment_SetIntegerParameter));
		if ( (eLookupError != 0) || (pWrapperTable->m_DriverEnvironment_SetIntegerParameter == nullptr) )
			return LIBMCDRIVERENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriverenv_driverenvironment_setboolparameter", (void**)&(pWrapperTable->m_DriverEnvironment_SetBoolParameter));
		if ( (eLookupError != 0) || (pWrapperTable->m_DriverEnvironment_SetBoolParameter == nullptr) )
			return LIBMCDRIVERENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriverenv_getversion", (void**)&(pWrapperTable->m_GetVersion));
		if ( (eLookupError != 0) || (pWrapperTable->m_GetVersion == nullptr) )
			return LIBMCDRIVERENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriverenv_getlasterror", (void**)&(pWrapperTable->m_GetLastError));
		if ( (eLookupError != 0) || (pWrapperTable->m_GetLastError == nullptr) )
			return LIBMCDRIVERENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriverenv_releaseinstance", (void**)&(pWrapperTable->m_ReleaseInstance));
		if ( (eLookupError != 0) || (pWrapperTable->m_ReleaseInstance == nullptr) )
			return LIBMCDRIVERENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriverenv_acquireinstance", (void**)&(pWrapperTable->m_AcquireInstance));
		if ( (eLookupError != 0) || (pWrapperTable->m_AcquireInstance == nullptr) )
			return LIBMCDRIVERENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriverenv_getsymbollookupmethod", (void**)&(pWrapperTable->m_GetSymbolLookupMethod));
		if ( (eLookupError != 0) || (pWrapperTable->m_GetSymbolLookupMethod == nullptr) )
			return LIBMCDRIVERENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		return LIBMCDRIVERENV_SUCCESS;
}

	
	
	/**
	 * Method definitions for class CBase
	 */
	
	/**
	 * Method definitions for class CWorkingFileExecution
	 */
	
	/**
	* CWorkingFileExecution::GetStatus - Returns the execution status
	*/
	void CWorkingFileExecution::GetStatus()
	{
		CheckError(m_pWrapper->m_WrapperTable.m_WorkingFileExecution_GetStatus(m_pHandle));
	}
	
	/**
	* CWorkingFileExecution::ReturnStdOut - Returns the output of the executable as string buffer
	* @return stdout buffer
	*/
	std::string CWorkingFileExecution::ReturnStdOut()
	{
		LibMCDriverEnv_uint32 bytesNeededStringBuffer = 0;
		LibMCDriverEnv_uint32 bytesWrittenStringBuffer = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_WorkingFileExecution_ReturnStdOut(m_pHandle, 0, &bytesNeededStringBuffer, nullptr));
		std::vector<char> bufferStringBuffer(bytesNeededStringBuffer);
		CheckError(m_pWrapper->m_WrapperTable.m_WorkingFileExecution_ReturnStdOut(m_pHandle, bytesNeededStringBuffer, &bytesWrittenStringBuffer, &bufferStringBuffer[0]));
		
		return std::string(&bufferStringBuffer[0]);
	}
	
	/**
	 * Method definitions for class CWorkingFile
	 */
	
	/**
	* CWorkingFile::GetAbsoluteFileName - Retrieves absolute file name of the working file
	* @return global path of the file
	*/
	std::string CWorkingFile::GetAbsoluteFileName()
	{
		LibMCDriverEnv_uint32 bytesNeededFileName = 0;
		LibMCDriverEnv_uint32 bytesWrittenFileName = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_WorkingFile_GetAbsoluteFileName(m_pHandle, 0, &bytesNeededFileName, nullptr));
		std::vector<char> bufferFileName(bytesNeededFileName);
		CheckError(m_pWrapper->m_WrapperTable.m_WorkingFile_GetAbsoluteFileName(m_pHandle, bytesNeededFileName, &bytesWrittenFileName, &bufferFileName[0]));
		
		return std::string(&bufferFileName[0]);
	}
	
	/**
	* CWorkingFile::GetSize - Returns the size of temporary file.
	* @return file size
	*/
	LibMCDriverEnv_uint64 CWorkingFile::GetSize()
	{
		LibMCDriverEnv_uint64 resultFileSize = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_WorkingFile_GetSize(m_pHandle, &resultFileSize));
		
		return resultFileSize;
	}
	
	/**
	* CWorkingFile::CalculateSHA2 - Calculates the SHA256 checksum of the file.
	* @return sha256 checksum
	*/
	std::string CWorkingFile::CalculateSHA2()
	{
		LibMCDriverEnv_uint32 bytesNeededSHA2 = 0;
		LibMCDriverEnv_uint32 bytesWrittenSHA2 = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_WorkingFile_CalculateSHA2(m_pHandle, 0, &bytesNeededSHA2, nullptr));
		std::vector<char> bufferSHA2(bytesNeededSHA2);
		CheckError(m_pWrapper->m_WrapperTable.m_WorkingFile_CalculateSHA2(m_pHandle, bytesNeededSHA2, &bytesWrittenSHA2, &bufferSHA2[0]));
		
		return std::string(&bufferSHA2[0]);
	}
	
	/**
	* CWorkingFile::DeleteFile - Deletes the temporary file.
	*/
	void CWorkingFile::DeleteFile()
	{
		CheckError(m_pWrapper->m_WrapperTable.m_WorkingFile_DeleteFile(m_pHandle));
	}
	
	/**
	* CWorkingFile::ExecuteFile - Executes the temporary file, if it is an executable.
	* @return execution object
	*/
	PWorkingFileExecution CWorkingFile::ExecuteFile()
	{
		LibMCDriverEnvHandle hExecution = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_WorkingFile_ExecuteFile(m_pHandle, &hExecution));
		
		if (!hExecution) {
			CheckError(LIBMCDRIVERENV_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CWorkingFileExecution>(m_pWrapper, hExecution);
	}
	
	/**
	 * Method definitions for class CWorkingDirectory
	 */
	
	/**
	* CWorkingDirectory::GetAbsoluteFilePath - Retrieves absolute file path.
	* @return global path of the directory, including path delimiter.
	*/
	std::string CWorkingDirectory::GetAbsoluteFilePath()
	{
		LibMCDriverEnv_uint32 bytesNeededFilePath = 0;
		LibMCDriverEnv_uint32 bytesWrittenFilePath = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_WorkingDirectory_GetAbsoluteFilePath(m_pHandle, 0, &bytesNeededFilePath, nullptr));
		std::vector<char> bufferFilePath(bytesNeededFilePath);
		CheckError(m_pWrapper->m_WrapperTable.m_WorkingDirectory_GetAbsoluteFilePath(m_pHandle, bytesNeededFilePath, &bytesWrittenFilePath, &bufferFilePath[0]));
		
		return std::string(&bufferFilePath[0]);
	}
	
	/**
	* CWorkingDirectory::StoreCustomData - Stores a data buffer in a temporary file.
	* @param[in] sFileName - filename to store to. Can not include any path delimiters or ..
	* @param[in] DataBufferBuffer - file data to store to.
	* @return working file instance.
	*/
	PWorkingFile CWorkingDirectory::StoreCustomData(const std::string & sFileName, const CInputVector<LibMCDriverEnv_uint8> & DataBufferBuffer)
	{
		LibMCDriverEnvHandle hWorkingFile = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_WorkingDirectory_StoreCustomData(m_pHandle, sFileName.c_str(), (LibMCDriverEnv_uint64)DataBufferBuffer.size(), DataBufferBuffer.data(), &hWorkingFile));
		
		if (!hWorkingFile) {
			CheckError(LIBMCDRIVERENV_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CWorkingFile>(m_pWrapper, hWorkingFile);
	}
	
	/**
	* CWorkingDirectory::StoreDriverData - Stores attached driver data in a temporary file.
	* @param[in] sFileName - filename to store to. Can not include any path delimiters or ..
	* @param[in] sIdentifier - identifier of the binary data in the driver package.
	* @return working file instance.
	*/
	PWorkingFile CWorkingDirectory::StoreDriverData(const std::string & sFileName, const std::string & sIdentifier)
	{
		LibMCDriverEnvHandle hWorkingFile = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_WorkingDirectory_StoreDriverData(m_pHandle, sFileName.c_str(), sIdentifier.c_str(), &hWorkingFile));
		
		if (!hWorkingFile) {
			CheckError(LIBMCDRIVERENV_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CWorkingFile>(m_pWrapper, hWorkingFile);
	}
	
	/**
	 * Method definitions for class CDriverEnvironment
	 */
	
	/**
	* CDriverEnvironment::CreateWorkingDirectory - creates a temporary working directory.
	* @return creates a working directory
	*/
	PWorkingDirectory CDriverEnvironment::CreateWorkingDirectory()
	{
		LibMCDriverEnvHandle hWorkingDirectory = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_DriverEnvironment_CreateWorkingDirectory(m_pHandle, &hWorkingDirectory));
		
		if (!hWorkingDirectory) {
			CheckError(LIBMCDRIVERENV_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CWorkingDirectory>(m_pWrapper, hWorkingDirectory);
	}
	
	/**
	* CDriverEnvironment::RetrieveDriverData - retrieves attached driver data into a memory buffer.
	* @param[in] sIdentifier - identifier of the binary data in the driver package.
	* @param[out] DataBufferBuffer - buffer data.
	*/
	void CDriverEnvironment::RetrieveDriverData(const std::string & sIdentifier, std::vector<LibMCDriverEnv_uint8> & DataBufferBuffer)
	{
		LibMCDriverEnv_uint64 elementsNeededDataBuffer = 0;
		LibMCDriverEnv_uint64 elementsWrittenDataBuffer = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_DriverEnvironment_RetrieveDriverData(m_pHandle, sIdentifier.c_str(), 0, &elementsNeededDataBuffer, nullptr));
		DataBufferBuffer.resize((size_t) elementsNeededDataBuffer);
		CheckError(m_pWrapper->m_WrapperTable.m_DriverEnvironment_RetrieveDriverData(m_pHandle, sIdentifier.c_str(), elementsNeededDataBuffer, &elementsWrittenDataBuffer, DataBufferBuffer.data()));
	}
	
	/**
	* CDriverEnvironment::RegisterStringParameter - registers a string parameter. Must only be called during driver creation.
	* @param[in] sParameterName - Parameter Name
	* @param[in] sDescription - Parameter Description
	* @param[in] sDefaultValue - default value to set
	*/
	void CDriverEnvironment::RegisterStringParameter(const std::string & sParameterName, const std::string & sDescription, const std::string & sDefaultValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_DriverEnvironment_RegisterStringParameter(m_pHandle, sParameterName.c_str(), sDescription.c_str(), sDefaultValue.c_str()));
	}
	
	/**
	* CDriverEnvironment::RegisterUUIDParameter - registers a uuid parameter. Must only be called during driver creation.
	* @param[in] sParameterName - Parameter Name
	* @param[in] sDescription - Parameter Description
	* @param[in] sDefaultValue - default value to set
	*/
	void CDriverEnvironment::RegisterUUIDParameter(const std::string & sParameterName, const std::string & sDescription, const std::string & sDefaultValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_DriverEnvironment_RegisterUUIDParameter(m_pHandle, sParameterName.c_str(), sDescription.c_str(), sDefaultValue.c_str()));
	}
	
	/**
	* CDriverEnvironment::RegisterDoubleParameter - registers a double parameter. Must only be called during driver creation.
	* @param[in] sParameterName - Parameter Name
	* @param[in] sDescription - Parameter Description
	* @param[in] dDefaultValue - default value to set
	*/
	void CDriverEnvironment::RegisterDoubleParameter(const std::string & sParameterName, const std::string & sDescription, const LibMCDriverEnv_double dDefaultValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_DriverEnvironment_RegisterDoubleParameter(m_pHandle, sParameterName.c_str(), sDescription.c_str(), dDefaultValue));
	}
	
	/**
	* CDriverEnvironment::RegisterIntegerParameter - registers an int parameter. Must only be called during driver creation.
	* @param[in] sParameterName - Parameter Name
	* @param[in] sDescription - Parameter Description
	* @param[in] nDefaultValue - default value to set
	*/
	void CDriverEnvironment::RegisterIntegerParameter(const std::string & sParameterName, const std::string & sDescription, const LibMCDriverEnv_int64 nDefaultValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_DriverEnvironment_RegisterIntegerParameter(m_pHandle, sParameterName.c_str(), sDescription.c_str(), nDefaultValue));
	}
	
	/**
	* CDriverEnvironment::RegisterBoolParameter - registers a bool parameter. Must only be called during driver creation.
	* @param[in] sParameterName - Parameter Name
	* @param[in] sDescription - Parameter Description
	* @param[in] bDefaultValue - default value to set
	*/
	void CDriverEnvironment::RegisterBoolParameter(const std::string & sParameterName, const std::string & sDescription, const bool bDefaultValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_DriverEnvironment_RegisterBoolParameter(m_pHandle, sParameterName.c_str(), sDescription.c_str(), bDefaultValue));
	}
	
	/**
	* CDriverEnvironment::SetStringParameter - sets a string parameter
	* @param[in] sParameterName - Parameter Name
	* @param[in] sValue - Value to set
	*/
	void CDriverEnvironment::SetStringParameter(const std::string & sParameterName, const std::string & sValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_DriverEnvironment_SetStringParameter(m_pHandle, sParameterName.c_str(), sValue.c_str()));
	}
	
	/**
	* CDriverEnvironment::SetUUIDParameter - sets a uuid parameter
	* @param[in] sParameterName - Parameter Name
	* @param[in] sValue - Value to set
	*/
	void CDriverEnvironment::SetUUIDParameter(const std::string & sParameterName, const std::string & sValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_DriverEnvironment_SetUUIDParameter(m_pHandle, sParameterName.c_str(), sValue.c_str()));
	}
	
	/**
	* CDriverEnvironment::SetDoubleParameter - sets a double parameter
	* @param[in] sParameterName - Parameter Name
	* @param[in] dValue - Value to set
	*/
	void CDriverEnvironment::SetDoubleParameter(const std::string & sParameterName, const LibMCDriverEnv_double dValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_DriverEnvironment_SetDoubleParameter(m_pHandle, sParameterName.c_str(), dValue));
	}
	
	/**
	* CDriverEnvironment::SetIntegerParameter - sets an int parameter
	* @param[in] sParameterName - Parameter Name
	* @param[in] nValue - Value to set
	*/
	void CDriverEnvironment::SetIntegerParameter(const std::string & sParameterName, const LibMCDriverEnv_int64 nValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_DriverEnvironment_SetIntegerParameter(m_pHandle, sParameterName.c_str(), nValue));
	}
	
	/**
	* CDriverEnvironment::SetBoolParameter - sets a bool parameter
	* @param[in] sParameterName - Parameter Name
	* @param[in] bValue - Value to set
	*/
	void CDriverEnvironment::SetBoolParameter(const std::string & sParameterName, const bool bValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_DriverEnvironment_SetBoolParameter(m_pHandle, sParameterName.c_str(), bValue));
	}

} // namespace LibMCDriverEnv

#endif // __LIBMCDRIVERENV_CPPHEADER_DYNAMIC_CPP

