/*++

Copyright (C) 2020 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.8.0-develop.

Abstract: This is an autogenerated C++-Header file in order to allow an easy
 use of MC Environment Interface

Interface version: 1.0.0

*/

#ifndef __LIBMCENV_CPPHEADER_DYNAMIC_CPP
#define __LIBMCENV_CPPHEADER_DYNAMIC_CPP

#include "libmcenv_types.hpp"
#include "libmcenv_dynamic.h"


#ifdef _WIN32
#include <windows.h>
#else // _WIN32
#include <dlfcn.h>
#endif // _WIN32
#include <string>
#include <memory>
#include <vector>
#include <exception>

namespace LibMCEnv {

/*************************************************************************************************************************
 Forward Declaration of all classes
**************************************************************************************************************************/
class CWrapper;
class CBase;
class CIterator;
class CTestEnvironment;
class CImageData;
class CToolpathPart;
class CToolpathLayer;
class CToolpathAccessor;
class CBuild;
class CWorkingFileExecution;
class CWorkingFile;
class CWorkingFileIterator;
class CWorkingDirectory;
class CXMLDocumentAttribute;
class CXMLDocumentNode;
class CXMLDocumentNodes;
class CXMLDocument;
class CTCPIPPacket;
class CTCPIPConnection;
class CModbusTCPDigitalIOStatus;
class CModbusTCPRegisterStatus;
class CModbusTCPConnection;
class CDriverStatusUpdateSession;
class CDriverEnvironment;
class CSignalTrigger;
class CSignalHandler;
class CStateEnvironment;
class CUIEnvironment;

/*************************************************************************************************************************
 Declaration of deprecated class types
**************************************************************************************************************************/
typedef CWrapper CLibMCEnvWrapper;
typedef CBase CLibMCEnvBase;
typedef CIterator CLibMCEnvIterator;
typedef CTestEnvironment CLibMCEnvTestEnvironment;
typedef CImageData CLibMCEnvImageData;
typedef CToolpathPart CLibMCEnvToolpathPart;
typedef CToolpathLayer CLibMCEnvToolpathLayer;
typedef CToolpathAccessor CLibMCEnvToolpathAccessor;
typedef CBuild CLibMCEnvBuild;
typedef CWorkingFileExecution CLibMCEnvWorkingFileExecution;
typedef CWorkingFile CLibMCEnvWorkingFile;
typedef CWorkingFileIterator CLibMCEnvWorkingFileIterator;
typedef CWorkingDirectory CLibMCEnvWorkingDirectory;
typedef CXMLDocumentAttribute CLibMCEnvXMLDocumentAttribute;
typedef CXMLDocumentNode CLibMCEnvXMLDocumentNode;
typedef CXMLDocumentNodes CLibMCEnvXMLDocumentNodes;
typedef CXMLDocument CLibMCEnvXMLDocument;
typedef CTCPIPPacket CLibMCEnvTCPIPPacket;
typedef CTCPIPConnection CLibMCEnvTCPIPConnection;
typedef CModbusTCPDigitalIOStatus CLibMCEnvModbusTCPDigitalIOStatus;
typedef CModbusTCPRegisterStatus CLibMCEnvModbusTCPRegisterStatus;
typedef CModbusTCPConnection CLibMCEnvModbusTCPConnection;
typedef CDriverStatusUpdateSession CLibMCEnvDriverStatusUpdateSession;
typedef CDriverEnvironment CLibMCEnvDriverEnvironment;
typedef CSignalTrigger CLibMCEnvSignalTrigger;
typedef CSignalHandler CLibMCEnvSignalHandler;
typedef CStateEnvironment CLibMCEnvStateEnvironment;
typedef CUIEnvironment CLibMCEnvUIEnvironment;

/*************************************************************************************************************************
 Declaration of shared pointer types
**************************************************************************************************************************/
typedef std::shared_ptr<CWrapper> PWrapper;
typedef std::shared_ptr<CBase> PBase;
typedef std::shared_ptr<CIterator> PIterator;
typedef std::shared_ptr<CTestEnvironment> PTestEnvironment;
typedef std::shared_ptr<CImageData> PImageData;
typedef std::shared_ptr<CToolpathPart> PToolpathPart;
typedef std::shared_ptr<CToolpathLayer> PToolpathLayer;
typedef std::shared_ptr<CToolpathAccessor> PToolpathAccessor;
typedef std::shared_ptr<CBuild> PBuild;
typedef std::shared_ptr<CWorkingFileExecution> PWorkingFileExecution;
typedef std::shared_ptr<CWorkingFile> PWorkingFile;
typedef std::shared_ptr<CWorkingFileIterator> PWorkingFileIterator;
typedef std::shared_ptr<CWorkingDirectory> PWorkingDirectory;
typedef std::shared_ptr<CXMLDocumentAttribute> PXMLDocumentAttribute;
typedef std::shared_ptr<CXMLDocumentNode> PXMLDocumentNode;
typedef std::shared_ptr<CXMLDocumentNodes> PXMLDocumentNodes;
typedef std::shared_ptr<CXMLDocument> PXMLDocument;
typedef std::shared_ptr<CTCPIPPacket> PTCPIPPacket;
typedef std::shared_ptr<CTCPIPConnection> PTCPIPConnection;
typedef std::shared_ptr<CModbusTCPDigitalIOStatus> PModbusTCPDigitalIOStatus;
typedef std::shared_ptr<CModbusTCPRegisterStatus> PModbusTCPRegisterStatus;
typedef std::shared_ptr<CModbusTCPConnection> PModbusTCPConnection;
typedef std::shared_ptr<CDriverStatusUpdateSession> PDriverStatusUpdateSession;
typedef std::shared_ptr<CDriverEnvironment> PDriverEnvironment;
typedef std::shared_ptr<CSignalTrigger> PSignalTrigger;
typedef std::shared_ptr<CSignalHandler> PSignalHandler;
typedef std::shared_ptr<CStateEnvironment> PStateEnvironment;
typedef std::shared_ptr<CUIEnvironment> PUIEnvironment;

/*************************************************************************************************************************
 Declaration of deprecated shared pointer types
**************************************************************************************************************************/
typedef PWrapper PLibMCEnvWrapper;
typedef PBase PLibMCEnvBase;
typedef PIterator PLibMCEnvIterator;
typedef PTestEnvironment PLibMCEnvTestEnvironment;
typedef PImageData PLibMCEnvImageData;
typedef PToolpathPart PLibMCEnvToolpathPart;
typedef PToolpathLayer PLibMCEnvToolpathLayer;
typedef PToolpathAccessor PLibMCEnvToolpathAccessor;
typedef PBuild PLibMCEnvBuild;
typedef PWorkingFileExecution PLibMCEnvWorkingFileExecution;
typedef PWorkingFile PLibMCEnvWorkingFile;
typedef PWorkingFileIterator PLibMCEnvWorkingFileIterator;
typedef PWorkingDirectory PLibMCEnvWorkingDirectory;
typedef PXMLDocumentAttribute PLibMCEnvXMLDocumentAttribute;
typedef PXMLDocumentNode PLibMCEnvXMLDocumentNode;
typedef PXMLDocumentNodes PLibMCEnvXMLDocumentNodes;
typedef PXMLDocument PLibMCEnvXMLDocument;
typedef PTCPIPPacket PLibMCEnvTCPIPPacket;
typedef PTCPIPConnection PLibMCEnvTCPIPConnection;
typedef PModbusTCPDigitalIOStatus PLibMCEnvModbusTCPDigitalIOStatus;
typedef PModbusTCPRegisterStatus PLibMCEnvModbusTCPRegisterStatus;
typedef PModbusTCPConnection PLibMCEnvModbusTCPConnection;
typedef PDriverStatusUpdateSession PLibMCEnvDriverStatusUpdateSession;
typedef PDriverEnvironment PLibMCEnvDriverEnvironment;
typedef PSignalTrigger PLibMCEnvSignalTrigger;
typedef PSignalHandler PLibMCEnvSignalHandler;
typedef PStateEnvironment PLibMCEnvStateEnvironment;
typedef PUIEnvironment PLibMCEnvUIEnvironment;


/*************************************************************************************************************************
 classParam Definition
**************************************************************************************************************************/

template<class T> class classParam {
private:
	const T* m_ptr;

public:
	classParam(const T* ptr)
		: m_ptr (ptr)
	{
	}

	classParam(std::shared_ptr <T> sharedPtr)
		: m_ptr (sharedPtr.get())
	{
	}

	LibMCEnvHandle GetHandle()
	{
		if (m_ptr != nullptr)
			return m_ptr->handle();
		return nullptr;
	}
};

/*************************************************************************************************************************
 Class ELibMCEnvException 
**************************************************************************************************************************/
class ELibMCEnvException : public std::exception {
protected:
	/**
	* Error code for the Exception.
	*/
	LibMCEnvResult m_errorCode;
	/**
	* Error message for the Exception.
	*/
	std::string m_errorMessage;
	std::string m_originalErrorMessage;

public:
	/**
	* Exception Constructor.
	*/
	ELibMCEnvException(LibMCEnvResult errorCode, const std::string & sErrorMessage)
		: m_errorCode(errorCode), m_originalErrorMessage(sErrorMessage)
	{
		m_errorMessage = buildErrorMessage();
	}

	/**
	* Returns error code
	*/
	LibMCEnvResult getErrorCode() const noexcept
	{
		return m_errorCode;
	}

	/**
	* Returns error message
	*/
	const char* what() const noexcept
	{
		return m_errorMessage.c_str();
	}

	const char* getErrorMessage() const noexcept
	{
		return m_originalErrorMessage.c_str();
	}

	const char* getErrorName() const noexcept
	{
		switch(getErrorCode()) {
			case LIBMCENV_SUCCESS: return "SUCCESS";
			case LIBMCENV_ERROR_NOTIMPLEMENTED: return "NOTIMPLEMENTED";
			case LIBMCENV_ERROR_INVALIDPARAM: return "INVALIDPARAM";
			case LIBMCENV_ERROR_INVALIDCAST: return "INVALIDCAST";
			case LIBMCENV_ERROR_BUFFERTOOSMALL: return "BUFFERTOOSMALL";
			case LIBMCENV_ERROR_GENERICEXCEPTION: return "GENERICEXCEPTION";
			case LIBMCENV_ERROR_COULDNOTLOADLIBRARY: return "COULDNOTLOADLIBRARY";
			case LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT: return "COULDNOTFINDLIBRARYEXPORT";
			case LIBMCENV_ERROR_INCOMPATIBLEBINARYVERSION: return "INCOMPATIBLEBINARYVERSION";
			case LIBMCENV_ERROR_PARAMETERGROUPNOTFOUND: return "PARAMETERGROUPNOTFOUND";
			case LIBMCENV_ERROR_PARAMETERNOTFOUND: return "PARAMETERNOTFOUND";
			case LIBMCENV_ERROR_COULDNOTFINDSIGNALDEFINITON: return "COULDNOTFINDSIGNALDEFINITON";
			case LIBMCENV_ERROR_COULDNOTTRIGGERSIGNAL: return "COULDNOTTRIGGERSIGNAL";
			case LIBMCENV_ERROR_SIGNALNOTFOUND: return "SIGNALNOTFOUND";
			case LIBMCENV_ERROR_TERMINATED: return "TERMINATED";
			case LIBMCENV_ERROR_SIGNALHASTRIGGEREDTWICE: return "SIGNALHASTRIGGEREDTWICE";
			case LIBMCENV_ERROR_SIGNALHASNOTBEENTRIGGERED: return "SIGNALHASNOTBEENTRIGGERED";
			case LIBMCENV_ERROR_DRIVERISNOTINITIALISING: return "DRIVERISNOTINITIALISING";
			case LIBMCENV_ERROR_RESOURCEENTRYNOTFOUND: return "RESOURCEENTRYNOTFOUND";
			case LIBMCENV_ERROR_INTERNALERROR: return "INTERNALERROR";
			case LIBMCENV_ERROR_INVALIDCHARACTERINFILENAME: return "INVALIDCHARACTERINFILENAME";
			case LIBMCENV_ERROR_WORKINGDIRECTORYHASBEENCLEANED: return "WORKINGDIRECTORYHASBEENCLEANED";
			case LIBMCENV_ERROR_INVALIDITERATOR: return "INVALIDITERATOR";
			case LIBMCENV_ERROR_FORMVALUENOTFOUND: return "FORMVALUENOTFOUND";
			case LIBMCENV_ERROR_INVALIDDOUBLEFORMVALUE: return "INVALIDDOUBLEFORMVALUE";
			case LIBMCENV_ERROR_INVALIDINTEGERFORMVALUE: return "INVALIDINTEGERFORMVALUE";
			case LIBMCENV_ERROR_COULDNNOTACCESSCLIENTVARIABLES: return "COULDNNOTACCESSCLIENTVARIABLES";
			case LIBMCENV_ERROR_INVALIDPIXELCOUNT: return "INVALIDPIXELCOUNT";
			case LIBMCENV_ERROR_INVALIDDPIVALUE: return "INVALIDDPIVALUE";
			case LIBMCENV_ERROR_COULDNOTCOMPRESSPNGIMAGE: return "COULDNOTCOMPRESSPNGIMAGE";
			case LIBMCENV_ERROR_COULDNOTSTOREPNGIMAGE: return "COULDNOTSTOREPNGIMAGE";
			case LIBMCENV_ERROR_EMPTYPNGIMAGEDATA: return "EMPTYPNGIMAGEDATA";
			case LIBMCENV_ERROR_INVALIDXCOORDINATE: return "INVALIDXCOORDINATE";
			case LIBMCENV_ERROR_INVALIDYCOORDINATE: return "INVALIDYCOORDINATE";
			case LIBMCENV_ERROR_INVALIDXCOORDINATERANGE: return "INVALIDXCOORDINATERANGE";
			case LIBMCENV_ERROR_INVALIDYCOORDINATERANGE: return "INVALIDYCOORDINATERANGE";
			case LIBMCENV_ERROR_INVALIDPIXELDATACOUNT: return "INVALIDPIXELDATACOUNT";
			case LIBMCENV_ERROR_INVALIDIMAGEBUFFER: return "INVALIDIMAGEBUFFER";
			case LIBMCENV_ERROR_INVALIDPIXELFORMAT: return "INVALIDPIXELFORMAT";
			case LIBMCENV_ERROR_INVALIDTESTOUTPUTNAME: return "INVALIDTESTOUTPUTNAME";
			case LIBMCENV_ERROR_TOOLPATHNOTLOADED: return "TOOLPATHNOTLOADED";
			case LIBMCENV_ERROR_INVALIDLAYERINDEX: return "INVALIDLAYERINDEX";
			case LIBMCENV_ERROR_INVALIDHATCHCOUNT: return "INVALIDHATCHCOUNT";
			case LIBMCENV_ERROR_SEGMENTISNOTOFTYPEHATCH: return "SEGMENTISNOTOFTYPEHATCH";
			case LIBMCENV_ERROR_TEMPFILEEXTENSIONEXCEEDS64CHARACTERS: return "TEMPFILEEXTENSIONEXCEEDS64CHARACTERS";
			case LIBMCENV_ERROR_TEMPFILEEXTENSIONCONTAINSINVALIDCHARACTERS: return "TEMPFILEEXTENSIONCONTAINSINVALIDCHARACTERS";
			case LIBMCENV_ERROR_COULDNOTGENERATETEMPFILENAME: return "COULDNOTGENERATETEMPFILENAME";
			case LIBMCENV_ERROR_EMPTYTCPIPPACKET: return "EMPTYTCPIPPACKET";
			case LIBMCENV_ERROR_COULDNOTGETADDRESSINFO: return "COULDNOTGETADDRESSINFO";
			case LIBMCENV_ERROR_COULDNOTCREATESOCKET: return "COULDNOTCREATESOCKET";
			case LIBMCENV_ERROR_COULDNOTCONNECT: return "COULDNOTCONNECT";
			case LIBMCENV_ERROR_SENDERROR: return "SENDERROR";
			case LIBMCENV_ERROR_RECEIVECOUNTEXCEEDSMAXIMUM: return "RECEIVECOUNTEXCEEDSMAXIMUM";
			case LIBMCENV_ERROR_CONNECTIONCLOSED: return "CONNECTIONCLOSED";
			case LIBMCENV_ERROR_RECEIVEERROR: return "RECEIVEERROR";
			case LIBMCENV_ERROR_SENDCOUNTEXCEEDSMAXIMUM: return "SENDCOUNTEXCEEDSMAXIMUM";
			case LIBMCENV_ERROR_SOCKETNOTCONNECTED: return "SOCKETNOTCONNECTED";
			case LIBMCENV_ERROR_INVALIDSENDBUFFER: return "INVALIDSENDBUFFER";
			case LIBMCENV_ERROR_INVALIDMODBUSTCPPAYLOADSIZE: return "INVALIDMODBUSTCPPAYLOADSIZE";
			case LIBMCENV_ERROR_INVALIDMODBUSTCPREQUEST: return "INVALIDMODBUSTCPREQUEST";
			case LIBMCENV_ERROR_INSUFFICIENTMODBUSTCPRESPONSEHEADER: return "INSUFFICIENTMODBUSTCPRESPONSEHEADER";
			case LIBMCENV_ERROR_MODBUSTCPRESPONSEOVERFLOW: return "MODBUSTCPRESPONSEOVERFLOW";
			case LIBMCENV_ERROR_INVALIDMODBUSTCPTRANSACTIONIDRESPONSE: return "INVALIDMODBUSTCPTRANSACTIONIDRESPONSE";
			case LIBMCENV_ERROR_INVALIDMODBUSTCPPROTOCOLIDRESPONSE: return "INVALIDMODBUSTCPPROTOCOLIDRESPONSE";
			case LIBMCENV_ERROR_INVALIDMODBUSTCPUNITIDENTIFIERRESPONSE: return "INVALIDMODBUSTCPUNITIDENTIFIERRESPONSE";
			case LIBMCENV_ERROR_MODBUSTCPRESPONSELENGTHMISMATCH: return "MODBUSTCPRESPONSELENGTHMISMATCH";
			case LIBMCENV_ERROR_MODBUSTCPINVALIDCOILSTATUSBITCOUNT: return "MODBUSTCPINVALIDCOILSTATUSBITCOUNT";
			case LIBMCENV_ERROR_MODBUSTCPINVALIDCOILSTATUSRESPONSE: return "MODBUSTCPINVALIDCOILSTATUSRESPONSE";
			case LIBMCENV_ERROR_MODBUSTCPCOILSTATUSRESPONSEEMPTY: return "MODBUSTCPCOILSTATUSRESPONSEEMPTY";
			case LIBMCENV_ERROR_MODBUSTCPINVALIDCOILSTATUSRESPONSESIZE: return "MODBUSTCPINVALIDCOILSTATUSRESPONSESIZE";
			case LIBMCENV_ERROR_MODBUSTCPINVALIDINPUTSTATUSBITCOUNT: return "MODBUSTCPINVALIDINPUTSTATUSBITCOUNT";
			case LIBMCENV_ERROR_MODBUSTCPINVALIDINPUTSTATUSRESPONSE: return "MODBUSTCPINVALIDINPUTSTATUSRESPONSE";
			case LIBMCENV_ERROR_MODBUSTCPINPUTSTATUSRESPONSEEMPTY: return "MODBUSTCPINPUTSTATUSRESPONSEEMPTY";
			case LIBMCENV_ERROR_MODBUSTCPINVALIDINPUTSTATUSRESPONSESIZE: return "MODBUSTCPINVALIDINPUTSTATUSRESPONSESIZE";
			case LIBMCENV_ERROR_INVALIDMODBUSTCPCOILCOUNT: return "INVALIDMODBUSTCPCOILCOUNT";
			case LIBMCENV_ERROR_INVALIDMODBUSTCPREGISTERCOUNT: return "INVALIDMODBUSTCPREGISTERCOUNT";
			case LIBMCENV_ERROR_INVALIDMODBUSIOINDEX: return "INVALIDMODBUSIOINDEX";
			case LIBMCENV_ERROR_MODBUSIOSTATUSEMPTY: return "MODBUSIOSTATUSEMPTY";
			case LIBMCENV_ERROR_INVALIDMODBUSREGISTERINDEX: return "INVALIDMODBUSREGISTERINDEX";
			case LIBMCENV_ERROR_MODBUSREGISTERSTATUSEMPTY: return "MODBUSREGISTERSTATUSEMPTY";
			case LIBMCENV_ERROR_MODBUSTCPINVALIDINPUTREGISTERSRESPONSE: return "MODBUSTCPINVALIDINPUTREGISTERSRESPONSE";
			case LIBMCENV_ERROR_MODBUSTCPINPUTREGISTERSRESPONSEEMPTY: return "MODBUSTCPINPUTREGISTERSRESPONSEEMPTY";
			case LIBMCENV_ERROR_MODBUSTCPINVALIDINPUTREGISTERSRESPONSESIZE: return "MODBUSTCPINVALIDINPUTREGISTERSRESPONSESIZE";
			case LIBMCENV_ERROR_MODBUSTCPINVALIDHOLDINGREGISTERSRESPONSE: return "MODBUSTCPINVALIDHOLDINGREGISTERSRESPONSE";
			case LIBMCENV_ERROR_MODBUSTCPHOLDINGREGISTERSRESPONSEEMPTY: return "MODBUSTCPHOLDINGREGISTERSRESPONSEEMPTY";
			case LIBMCENV_ERROR_MODBUSTCPINVALIDHOLDINGREGISTERSRESPONSESIZE: return "MODBUSTCPINVALIDHOLDINGREGISTERSRESPONSESIZE";
			case LIBMCENV_ERROR_SIGNALUUIDNOTACTIVE: return "SIGNALUUIDNOTACTIVE";
			case LIBMCENV_ERROR_COULDNOTPARSEXMLSTRING: return "COULDNOTPARSEXMLSTRING";
			case LIBMCENV_ERROR_COULDNOTPARSEXMLDATA: return "COULDNOTPARSEXMLDATA";
			case LIBMCENV_ERROR_INVALIDPROFILEVALUETYPE: return "INVALIDPROFILEVALUETYPE";
			case LIBMCENV_ERROR_XMLDOCUMENTMISMATCH: return "XMLDOCUMENTMISMATCH";
			case LIBMCENV_ERROR_INVALIDINTEGERVALUEATTRIBUTE: return "INVALIDINTEGERVALUEATTRIBUTE";
			case LIBMCENV_ERROR_INTEGERVALUEATTRIBUTEOUTOFRANGE: return "INTEGERVALUEATTRIBUTEOUTOFRANGE";
			case LIBMCENV_ERROR_INVALIDDOUBLEVALUEATTRIBUTE: return "INVALIDDOUBLEVALUEATTRIBUTE";
			case LIBMCENV_ERROR_DOUBLEVALUEATTRIBUTEOUTOFRANGE: return "DOUBLEVALUEATTRIBUTEOUTOFRANGE";
		}
		return "UNKNOWN";
	}

	const char* getErrorDescription() const noexcept
	{
		switch(getErrorCode()) {
			case LIBMCENV_SUCCESS: return "success";
			case LIBMCENV_ERROR_NOTIMPLEMENTED: return "functionality not implemented";
			case LIBMCENV_ERROR_INVALIDPARAM: return "an invalid parameter was passed";
			case LIBMCENV_ERROR_INVALIDCAST: return "a type cast failed";
			case LIBMCENV_ERROR_BUFFERTOOSMALL: return "a provided buffer is too small";
			case LIBMCENV_ERROR_GENERICEXCEPTION: return "a generic exception occurred";
			case LIBMCENV_ERROR_COULDNOTLOADLIBRARY: return "the library could not be loaded";
			case LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT: return "a required exported symbol could not be found in the library";
			case LIBMCENV_ERROR_INCOMPATIBLEBINARYVERSION: return "the version of the binary interface does not match the bindings interface";
			case LIBMCENV_ERROR_PARAMETERGROUPNOTFOUND: return "Parameter group not found";
			case LIBMCENV_ERROR_PARAMETERNOTFOUND: return "Parameter not found";
			case LIBMCENV_ERROR_COULDNOTFINDSIGNALDEFINITON: return "Could not find signal definition";
			case LIBMCENV_ERROR_COULDNOTTRIGGERSIGNAL: return "Could not trigger signal";
			case LIBMCENV_ERROR_SIGNALNOTFOUND: return "Signal not found";
			case LIBMCENV_ERROR_TERMINATED: return "operation has been terminated.";
			case LIBMCENV_ERROR_SIGNALHASTRIGGEREDTWICE: return "signal has been triggered twice.";
			case LIBMCENV_ERROR_SIGNALHASNOTBEENTRIGGERED: return "signal has not been triggered.";
			case LIBMCENV_ERROR_DRIVERISNOTINITIALISING: return "driver is not in initialisation mode.";
			case LIBMCENV_ERROR_RESOURCEENTRYNOTFOUND: return "resource entry not found.";
			case LIBMCENV_ERROR_INTERNALERROR: return "internal error.";
			case LIBMCENV_ERROR_INVALIDCHARACTERINFILENAME: return "invalid character in filename.";
			case LIBMCENV_ERROR_WORKINGDIRECTORYHASBEENCLEANED: return "working directory has been cleaned.";
			case LIBMCENV_ERROR_INVALIDITERATOR: return "invalid iterator.";
			case LIBMCENV_ERROR_FORMVALUENOTFOUND: return "Form value not found.";
			case LIBMCENV_ERROR_INVALIDDOUBLEFORMVALUE: return "Invalid double form value.";
			case LIBMCENV_ERROR_INVALIDINTEGERFORMVALUE: return "Invalid integer form value.";
			case LIBMCENV_ERROR_COULDNNOTACCESSCLIENTVARIABLES: return "Could not access client variables.";
			case LIBMCENV_ERROR_INVALIDPIXELCOUNT: return "Invalid pixel count.";
			case LIBMCENV_ERROR_INVALIDDPIVALUE: return "Invalid dpi value.";
			case LIBMCENV_ERROR_COULDNOTCOMPRESSPNGIMAGE: return "Could not compress PNG image.";
			case LIBMCENV_ERROR_COULDNOTSTOREPNGIMAGE: return "Could not store PNG image.";
			case LIBMCENV_ERROR_EMPTYPNGIMAGEDATA: return "Empty PNG image data.";
			case LIBMCENV_ERROR_INVALIDXCOORDINATE: return "Invalid X coordinate.";
			case LIBMCENV_ERROR_INVALIDYCOORDINATE: return "Invalid Y coordinate.";
			case LIBMCENV_ERROR_INVALIDXCOORDINATERANGE: return "Invalid X coordinate range.";
			case LIBMCENV_ERROR_INVALIDYCOORDINATERANGE: return "Invalid Y coordinate range.";
			case LIBMCENV_ERROR_INVALIDPIXELDATACOUNT: return "Invalid pixel data count.";
			case LIBMCENV_ERROR_INVALIDIMAGEBUFFER: return "Invalid image buffer.";
			case LIBMCENV_ERROR_INVALIDPIXELFORMAT: return "Invalid pixel format.";
			case LIBMCENV_ERROR_INVALIDTESTOUTPUTNAME: return "Invalid test output name.";
			case LIBMCENV_ERROR_TOOLPATHNOTLOADED: return "Toolpath has not been loaded.";
			case LIBMCENV_ERROR_INVALIDLAYERINDEX: return "Invalid layer index.";
			case LIBMCENV_ERROR_INVALIDHATCHCOUNT: return "Invalid hatch count.";
			case LIBMCENV_ERROR_SEGMENTISNOTOFTYPEHATCH: return "Segment is not of type hatch.";
			case LIBMCENV_ERROR_TEMPFILEEXTENSIONEXCEEDS64CHARACTERS: return "Temp file extension exceeds 64 characters.";
			case LIBMCENV_ERROR_TEMPFILEEXTENSIONCONTAINSINVALIDCHARACTERS: return "Temp file extension contains invalid characters.";
			case LIBMCENV_ERROR_COULDNOTGENERATETEMPFILENAME: return "Could not generate temp file name.";
			case LIBMCENV_ERROR_EMPTYTCPIPPACKET: return "Empty TCP/IP Packet.";
			case LIBMCENV_ERROR_COULDNOTGETADDRESSINFO: return "Could not get address info.";
			case LIBMCENV_ERROR_COULDNOTCREATESOCKET: return "Could not create socket.";
			case LIBMCENV_ERROR_COULDNOTCONNECT: return "Could not connect.";
			case LIBMCENV_ERROR_SENDERROR: return "Send error.";
			case LIBMCENV_ERROR_RECEIVECOUNTEXCEEDSMAXIMUM: return "Receive count exceeds maximum.";
			case LIBMCENV_ERROR_CONNECTIONCLOSED: return "Connection closed.";
			case LIBMCENV_ERROR_RECEIVEERROR: return "Receive error.";
			case LIBMCENV_ERROR_SENDCOUNTEXCEEDSMAXIMUM: return "Send count exceeds maximum.";
			case LIBMCENV_ERROR_SOCKETNOTCONNECTED: return "Socket not connected.";
			case LIBMCENV_ERROR_INVALIDSENDBUFFER: return "Invalid send buffer.";
			case LIBMCENV_ERROR_INVALIDMODBUSTCPPAYLOADSIZE: return "Invalid modbus TCP payload size";
			case LIBMCENV_ERROR_INVALIDMODBUSTCPREQUEST: return "Invalid modbus TCP request";
			case LIBMCENV_ERROR_INSUFFICIENTMODBUSTCPRESPONSEHEADER: return "Insufficient modbus tcp response header";
			case LIBMCENV_ERROR_MODBUSTCPRESPONSEOVERFLOW: return "modbus tcp response overflow";
			case LIBMCENV_ERROR_INVALIDMODBUSTCPTRANSACTIONIDRESPONSE: return "invalid modbus tcp transaction ID response";
			case LIBMCENV_ERROR_INVALIDMODBUSTCPPROTOCOLIDRESPONSE: return "invalid modbus tcp protocol ID response";
			case LIBMCENV_ERROR_INVALIDMODBUSTCPUNITIDENTIFIERRESPONSE: return "invalid modbus tcp unit identifier response";
			case LIBMCENV_ERROR_MODBUSTCPRESPONSELENGTHMISMATCH: return "modbus tcp response length mismatch";
			case LIBMCENV_ERROR_MODBUSTCPINVALIDCOILSTATUSBITCOUNT: return "modbus TCP Invalid coils status bit count.";
			case LIBMCENV_ERROR_MODBUSTCPINVALIDCOILSTATUSRESPONSE: return "modbus TCP Invalid coils status response.";
			case LIBMCENV_ERROR_MODBUSTCPCOILSTATUSRESPONSEEMPTY: return "modbus TCP coils status response empty.";
			case LIBMCENV_ERROR_MODBUSTCPINVALIDCOILSTATUSRESPONSESIZE: return "modbus TCP invalid coil status response size.";
			case LIBMCENV_ERROR_MODBUSTCPINVALIDINPUTSTATUSBITCOUNT: return "modbus TCP invalid input status bit count.";
			case LIBMCENV_ERROR_MODBUSTCPINVALIDINPUTSTATUSRESPONSE: return "modbus TCP invalid input status response.";
			case LIBMCENV_ERROR_MODBUSTCPINPUTSTATUSRESPONSEEMPTY: return "modbus TCP input status response empty.";
			case LIBMCENV_ERROR_MODBUSTCPINVALIDINPUTSTATUSRESPONSESIZE: return "modbus TCP invalid input status response size.";
			case LIBMCENV_ERROR_INVALIDMODBUSTCPCOILCOUNT: return "invalid modbus tcp coil count.";
			case LIBMCENV_ERROR_INVALIDMODBUSTCPREGISTERCOUNT: return "invalid modbus tcp register count.";
			case LIBMCENV_ERROR_INVALIDMODBUSIOINDEX: return "invalid modbus IO index.";
			case LIBMCENV_ERROR_MODBUSIOSTATUSEMPTY: return "modbus io status empty.";
			case LIBMCENV_ERROR_INVALIDMODBUSREGISTERINDEX: return "invalid modbus register index.";
			case LIBMCENV_ERROR_MODBUSREGISTERSTATUSEMPTY: return "modbus register status empty.";
			case LIBMCENV_ERROR_MODBUSTCPINVALIDINPUTREGISTERSRESPONSE: return "modbus TCP invalid input registers response";
			case LIBMCENV_ERROR_MODBUSTCPINPUTREGISTERSRESPONSEEMPTY: return "modbus TCP input registers response empty";
			case LIBMCENV_ERROR_MODBUSTCPINVALIDINPUTREGISTERSRESPONSESIZE: return "modbus TCP invalid input registers response size";
			case LIBMCENV_ERROR_MODBUSTCPINVALIDHOLDINGREGISTERSRESPONSE: return "modbus TCP invalid holding registers response";
			case LIBMCENV_ERROR_MODBUSTCPHOLDINGREGISTERSRESPONSEEMPTY: return "modbus TCP holding registers response empty";
			case LIBMCENV_ERROR_MODBUSTCPINVALIDHOLDINGREGISTERSRESPONSESIZE: return "modbus TCP invalid holding registers response size";
			case LIBMCENV_ERROR_SIGNALUUIDNOTACTIVE: return "signal UUID not active.";
			case LIBMCENV_ERROR_COULDNOTPARSEXMLSTRING: return "could not parse XML string.";
			case LIBMCENV_ERROR_COULDNOTPARSEXMLDATA: return "could not parse XML data.";
			case LIBMCENV_ERROR_INVALIDPROFILEVALUETYPE: return "Invalid profile value type.";
			case LIBMCENV_ERROR_XMLDOCUMENTMISMATCH: return "XML Document mismatch.";
			case LIBMCENV_ERROR_INVALIDINTEGERVALUEATTRIBUTE: return "Invalid integer value attribute.";
			case LIBMCENV_ERROR_INTEGERVALUEATTRIBUTEOUTOFRANGE: return "Integer value attribute out of range.";
			case LIBMCENV_ERROR_INVALIDDOUBLEVALUEATTRIBUTE: return "Invalid double value attribute.";
			case LIBMCENV_ERROR_DOUBLEVALUEATTRIBUTEOUTOFRANGE: return "Double value attribute out of range.";
		}
		return "unknown error";
	}

private:

	std::string buildErrorMessage() const noexcept
	{
		std::string msg = m_originalErrorMessage;
		if (msg.empty()) {
			msg = getErrorDescription();
		}
		return std::string("Error: ") + getErrorName() + ": " + msg;
	}
};

/*************************************************************************************************************************
 Class CInputVector
**************************************************************************************************************************/
template <typename T>
class CInputVector {
private:
	
	const T* m_data;
	size_t m_size;
	
public:
	
	CInputVector(const std::vector<T>& vec)
		: m_data( vec.data() ), m_size( vec.size() )
	{
	}
	
	CInputVector(const T* in_data, size_t in_size)
		: m_data( in_data ), m_size(in_size )
	{
	}
	
	const T* data() const
	{
		return m_data;
	}
	
	size_t size() const
	{
		return m_size;
	}
	
};

// declare deprecated class name
template<typename T>
using CLibMCEnvInputVector = CInputVector<T>;

/*************************************************************************************************************************
 Class CWrapper 
**************************************************************************************************************************/
class CWrapper {
public:
	
	explicit CWrapper(void* pSymbolLookupMethod)
	{
		CheckError(nullptr, initWrapperTable(&m_WrapperTable));
		CheckError(nullptr, loadWrapperTableFromSymbolLookupMethod(&m_WrapperTable, pSymbolLookupMethod));
		
		CheckError(nullptr, checkBinaryVersion());
	}
	
	explicit CWrapper(const std::string &sFileName)
	{
		CheckError(nullptr, initWrapperTable(&m_WrapperTable));
		CheckError(nullptr, loadWrapperTable(&m_WrapperTable, sFileName.c_str()));
		
		CheckError(nullptr, checkBinaryVersion());
	}
	
	static PWrapper loadLibrary(const std::string &sFileName)
	{
		return std::make_shared<CWrapper>(sFileName);
	}
	
	static PWrapper loadLibraryFromSymbolLookupMethod(void* pSymbolLookupMethod)
	{
		return std::make_shared<CWrapper>(pSymbolLookupMethod);
	}
	
	~CWrapper()
	{
		releaseWrapperTable(&m_WrapperTable);
	}
	
	inline void CheckError(CBase * pBaseClass, LibMCEnvResult nResult);

	inline void GetVersion(LibMCEnv_uint32 & nMajor, LibMCEnv_uint32 & nMinor, LibMCEnv_uint32 & nMicro);
	inline bool GetLastError(classParam<CBase> pInstance, std::string & sErrorMessage);
	inline void ReleaseInstance(classParam<CBase> pInstance);
	inline void AcquireInstance(classParam<CBase> pInstance);
	inline LibMCEnv_pvoid GetSymbolLookupMethod();

private:
	sLibMCEnvDynamicWrapperTable m_WrapperTable;
	
	LibMCEnvResult checkBinaryVersion()
	{
		LibMCEnv_uint32 nMajor, nMinor, nMicro;
		GetVersion(nMajor, nMinor, nMicro);
		if (nMajor != LIBMCENV_VERSION_MAJOR) {
			return LIBMCENV_ERROR_INCOMPATIBLEBINARYVERSION;
		}
		return LIBMCENV_SUCCESS;
	}
	LibMCEnvResult initWrapperTable(sLibMCEnvDynamicWrapperTable * pWrapperTable);
	LibMCEnvResult releaseWrapperTable(sLibMCEnvDynamicWrapperTable * pWrapperTable);
	LibMCEnvResult loadWrapperTable(sLibMCEnvDynamicWrapperTable * pWrapperTable, const char * pLibraryFileName);
	LibMCEnvResult loadWrapperTableFromSymbolLookupMethod(sLibMCEnvDynamicWrapperTable * pWrapperTable, void* pSymbolLookupMethod);

	friend class CBase;
	friend class CIterator;
	friend class CTestEnvironment;
	friend class CImageData;
	friend class CToolpathPart;
	friend class CToolpathLayer;
	friend class CToolpathAccessor;
	friend class CBuild;
	friend class CWorkingFileExecution;
	friend class CWorkingFile;
	friend class CWorkingFileIterator;
	friend class CWorkingDirectory;
	friend class CXMLDocumentAttribute;
	friend class CXMLDocumentNode;
	friend class CXMLDocumentNodes;
	friend class CXMLDocument;
	friend class CTCPIPPacket;
	friend class CTCPIPConnection;
	friend class CModbusTCPDigitalIOStatus;
	friend class CModbusTCPRegisterStatus;
	friend class CModbusTCPConnection;
	friend class CDriverStatusUpdateSession;
	friend class CDriverEnvironment;
	friend class CSignalTrigger;
	friend class CSignalHandler;
	friend class CStateEnvironment;
	friend class CUIEnvironment;

};

	
/*************************************************************************************************************************
 Class CBase 
**************************************************************************************************************************/
class CBase {
public:
	
protected:
	/* Wrapper Object that created the class. */
	CWrapper * m_pWrapper;
	/* Handle to Instance in library*/
	LibMCEnvHandle m_pHandle;

	/* Checks for an Error code and raises Exceptions */
	void CheckError(LibMCEnvResult nResult)
	{
		if (m_pWrapper != nullptr)
			m_pWrapper->CheckError(this, nResult);
	}
public:
	/**
	* CBase::CBase - Constructor for Base class.
	*/
	CBase(CWrapper * pWrapper, LibMCEnvHandle pHandle)
		: m_pWrapper(pWrapper), m_pHandle(pHandle)
	{
	}

	/**
	* CBase::~CBase - Destructor for Base class.
	*/
	virtual ~CBase()
	{
		if (m_pWrapper != nullptr)
			m_pWrapper->ReleaseInstance(this);
		m_pWrapper = nullptr;
	}

	/**
	* CBase::handle - Returns handle to instance.
	*/
	LibMCEnvHandle handle() const
	{
		return m_pHandle;
	}

	/**
	* CBase::wrapper - Returns wrapper instance.
	*/
	CWrapper * wrapper() const
	{
		return m_pWrapper;
	}
	
	friend class CWrapper;
};
	
/*************************************************************************************************************************
 Class CIterator 
**************************************************************************************************************************/
class CIterator : public CBase {
public:
	
	/**
	* CIterator::CIterator - Constructor for Iterator class.
	*/
	CIterator(CWrapper* pWrapper, LibMCEnvHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline bool MoveNext();
	inline bool MovePrevious();
	inline PBase GetCurrent();
	inline PIterator Clone();
	inline LibMCEnv_uint64 Count();
};
	
/*************************************************************************************************************************
 Class CTestEnvironment 
**************************************************************************************************************************/
class CTestEnvironment : public CBase {
public:
	
	/**
	* CTestEnvironment::CTestEnvironment - Constructor for TestEnvironment class.
	*/
	CTestEnvironment(CWrapper* pWrapper, LibMCEnvHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline void WriteTestOutput(const std::string & sOutputName, const CInputVector<LibMCEnv_uint8> & DataBuffer);
};
	
/*************************************************************************************************************************
 Class CImageData 
**************************************************************************************************************************/
class CImageData : public CBase {
public:
	
	/**
	* CImageData::CImageData - Constructor for ImageData class.
	*/
	CImageData(CWrapper* pWrapper, LibMCEnvHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline eImagePixelFormat GetPixelFormat();
	inline void ChangePixelFormat(const eImagePixelFormat ePixelFormat);
	inline void GetDPI(LibMCEnv_double & dDPIValueX, LibMCEnv_double & dDPIValueY);
	inline void SetDPI(const LibMCEnv_double dDPIValueX, const LibMCEnv_double dDPIValueY);
	inline void GetSizeInMM(LibMCEnv_double & dSizeX, LibMCEnv_double & dSizeY);
	inline void GetSizeInPixels(LibMCEnv_uint32 & nPixelSizeX, LibMCEnv_uint32 & nPixelSizeY);
	inline void ResizeImage(LibMCEnv_uint32 & nPixelSizeX, LibMCEnv_uint32 & nPixelSizeY);
	inline void LoadPNG(std::vector<LibMCEnv_uint8> & PNGDataBuffer);
	inline void EncodePNG();
	inline void GetEncodedPNGData(std::vector<LibMCEnv_uint8> & PNGDataBuffer);
	inline void ClearEncodedPNGData();
	inline void Clear(const LibMCEnv_uint32 nValue);
	inline LibMCEnv_uint32 GetPixel(const LibMCEnv_uint32 nX, const LibMCEnv_uint32 nY);
	inline void SetPixel(const LibMCEnv_uint32 nX, const LibMCEnv_uint32 nY, const LibMCEnv_uint32 nValue);
	inline void GetPixelRange(const LibMCEnv_uint32 nXMin, const LibMCEnv_uint32 nYMin, const LibMCEnv_uint32 nXMax, const LibMCEnv_uint32 nYMax, std::vector<LibMCEnv_uint8> & ValueBuffer);
	inline void SetPixelRange(const LibMCEnv_uint32 nXMin, const LibMCEnv_uint32 nYMin, const LibMCEnv_uint32 nXMax, const LibMCEnv_uint32 nYMax, const CInputVector<LibMCEnv_uint8> & ValueBuffer);
};
	
/*************************************************************************************************************************
 Class CToolpathPart 
**************************************************************************************************************************/
class CToolpathPart : public CBase {
public:
	
	/**
	* CToolpathPart::CToolpathPart - Constructor for ToolpathPart class.
	*/
	CToolpathPart(CWrapper* pWrapper, LibMCEnvHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline std::string GetName();
	inline std::string GetUUID();
	inline std::string GetMeshUUID();
	inline sToolpathPartTransform GetTransform();
};
	
/*************************************************************************************************************************
 Class CToolpathLayer 
**************************************************************************************************************************/
class CToolpathLayer : public CBase {
public:
	
	/**
	* CToolpathLayer::CToolpathLayer - Constructor for ToolpathLayer class.
	*/
	CToolpathLayer(CWrapper* pWrapper, LibMCEnvHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline std::string GetLayerDataUUID();
	inline LibMCEnv_uint32 GetSegmentCount();
	inline void GetSegmentInfo(const LibMCEnv_uint32 nIndex, eToolpathSegmentType & eType, LibMCEnv_uint32 & nPointCount);
	inline eToolpathSegmentType GetSegmentType(const LibMCEnv_uint32 nIndex);
	inline LibMCEnv_uint32 GetSegmentPointCount(const LibMCEnv_uint32 nIndex);
	inline LibMCEnv_uint32 GetSegmentHatchCount(const LibMCEnv_uint32 nIndex);
	inline std::string GetSegmentProfileUUID(const LibMCEnv_uint32 nIndex);
	inline bool SegmentProfileHasValue(const LibMCEnv_uint32 nIndex, const std::string & sNamespace, const std::string & sValueName);
	inline std::string GetSegmentProfileValue(const LibMCEnv_uint32 nIndex, const std::string & sNamespace, const std::string & sValueName);
	inline std::string GetSegmentProfileValueDef(const LibMCEnv_uint32 nIndex, const std::string & sNamespace, const std::string & sValueName, const std::string & sDefaultValue);
	inline LibMCEnv_double GetSegmentProfileDoubleValue(const LibMCEnv_uint32 nIndex, const std::string & sNamespace, const std::string & sValueName);
	inline LibMCEnv_double GetSegmentProfileDoubleValueDef(const LibMCEnv_uint32 nIndex, const std::string & sNamespace, const std::string & sValueName, const LibMCEnv_double dDefaultValue);
	inline LibMCEnv_int64 GetSegmentProfileIntegerValue(const LibMCEnv_uint32 nIndex, const std::string & sNamespace, const std::string & sValueName);
	inline LibMCEnv_int64 GetSegmentProfileIntegerValueDef(const LibMCEnv_uint32 nIndex, const std::string & sNamespace, const std::string & sValueName, const LibMCEnv_int64 nDefaultValue);
	inline bool GetSegmentProfileBoolValue(const LibMCEnv_uint32 nIndex, const std::string & sNamespace, const std::string & sValueName);
	inline bool GetSegmentProfileBoolValueDef(const LibMCEnv_uint32 nIndex, const std::string & sNamespace, const std::string & sValueName, const bool bDefaultValue);
	inline LibMCEnv_double GetSegmentProfileTypedValue(const LibMCEnv_uint32 nIndex, const eToolpathProfileValueType eValueType);
	inline LibMCEnv_double GetSegmentProfileTypedValueDef(const LibMCEnv_uint32 nIndex, const eToolpathProfileValueType eValueType, const LibMCEnv_double dDefaultValue);
	inline std::string GetSegmentPartUUID(const LibMCEnv_uint32 nIndex);
	inline void GetSegmentPointData(const LibMCEnv_uint32 nIndex, std::vector<sPosition2D> & PointDataBuffer);
	inline void GetSegmentHatchData(const LibMCEnv_uint32 nIndex, std::vector<sHatch2D> & HatchDataBuffer);
	inline void GetSegmentPointDataInMM(const LibMCEnv_uint32 nIndex, std::vector<sFloatPosition2D> & PointDataBuffer);
	inline void GetSegmentHatchDataInMM(const LibMCEnv_uint32 nIndex, std::vector<sFloatHatch2D> & HatchDataBuffer);
	inline LibMCEnv_int32 GetZValue();
	inline LibMCEnv_double GetZValueInMM();
	inline LibMCEnv_double GetUnits();
};
	
/*************************************************************************************************************************
 Class CToolpathAccessor 
**************************************************************************************************************************/
class CToolpathAccessor : public CBase {
public:
	
	/**
	* CToolpathAccessor::CToolpathAccessor - Constructor for ToolpathAccessor class.
	*/
	CToolpathAccessor(CWrapper* pWrapper, LibMCEnvHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline std::string GetStorageUUID();
	inline LibMCEnv_uint32 GetLayerCount();
	inline PToolpathLayer LoadLayer(const LibMCEnv_uint32 nLayerIndex);
	inline LibMCEnv_double GetUnits();
	inline bool HasMetaData(const std::string & sNameSpace, const std::string & sName);
	inline std::string GetMetaDataValue(const std::string & sNameSpace, const std::string & sName);
	inline std::string GetMetaDataType(const std::string & sNameSpace, const std::string & sName);
	inline LibMCEnv_uint32 GetPartCount();
	inline PToolpathPart GetPart(const LibMCEnv_uint32 nPartIndex);
	inline PToolpathPart FindPartByUUID(const std::string & sPartUUID);
	inline LibMCEnv_int32 GetBuildHeightInUnits();
	inline LibMCEnv_int32 GetZValueInUnits(const LibMCEnv_uint32 nLayerIndex);
	inline LibMCEnv_double GetBuildHeightInMM();
	inline LibMCEnv_double GetZValueInMM(const LibMCEnv_uint32 nLayerIndex);
};
	
/*************************************************************************************************************************
 Class CBuild 
**************************************************************************************************************************/
class CBuild : public CBase {
public:
	
	/**
	* CBuild::CBuild - Constructor for Build class.
	*/
	CBuild(CWrapper* pWrapper, LibMCEnvHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline std::string GetName();
	inline std::string GetBuildUUID();
	inline std::string GetStorageUUID();
	inline std::string GetStorageSHA256();
	inline LibMCEnv_uint32 GetLayerCount();
	inline LibMCEnv_double GetBuildHeightInMM();
	inline LibMCEnv_double GetZValueInMM(const LibMCEnv_uint32 nLayerIndex);
	inline void LoadToolpath();
	inline void UnloadToolpath();
	inline bool ToolpathIsLoaded();
	inline PToolpathAccessor CreateToolpathAccessor();
	inline std::string AddBinaryData(const std::string & sName, const std::string & sMIMEType, const CInputVector<LibMCEnv_uint8> & ContentBuffer);
};
	
/*************************************************************************************************************************
 Class CWorkingFileExecution 
**************************************************************************************************************************/
class CWorkingFileExecution : public CBase {
public:
	
	/**
	* CWorkingFileExecution::CWorkingFileExecution - Constructor for WorkingFileExecution class.
	*/
	CWorkingFileExecution(CWrapper* pWrapper, LibMCEnvHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline void GetStatus();
	inline std::string ReturnStdOut();
};
	
/*************************************************************************************************************************
 Class CWorkingFile 
**************************************************************************************************************************/
class CWorkingFile : public CBase {
public:
	
	/**
	* CWorkingFile::CWorkingFile - Constructor for WorkingFile class.
	*/
	CWorkingFile(CWrapper* pWrapper, LibMCEnvHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline std::string GetAbsoluteFileName();
	inline LibMCEnv_uint64 GetSize();
	inline std::string CalculateSHA2();
	inline PWorkingFileExecution ExecuteFile();
	inline bool IsManaged();
	inline void MakeManaged();
	inline bool FileExists();
	inline bool DeleteFromDisk();
};
	
/*************************************************************************************************************************
 Class CWorkingFileIterator 
**************************************************************************************************************************/
class CWorkingFileIterator : public CIterator {
public:
	
	/**
	* CWorkingFileIterator::CWorkingFileIterator - Constructor for WorkingFileIterator class.
	*/
	CWorkingFileIterator(CWrapper* pWrapper, LibMCEnvHandle pHandle)
		: CIterator(pWrapper, pHandle)
	{
	}
	
	inline PWorkingFile GetCurrentFile();
};
	
/*************************************************************************************************************************
 Class CWorkingDirectory 
**************************************************************************************************************************/
class CWorkingDirectory : public CBase {
public:
	
	/**
	* CWorkingDirectory::CWorkingDirectory - Constructor for WorkingDirectory class.
	*/
	CWorkingDirectory(CWrapper* pWrapper, LibMCEnvHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline bool IsActive();
	inline std::string GetAbsoluteFilePath();
	inline PWorkingFile StoreCustomData(const std::string & sFileName, const CInputVector<LibMCEnv_uint8> & DataBufferBuffer);
	inline PWorkingFile StoreCustomString(const std::string & sFileName, const std::string & sDataString);
	inline PWorkingFile StoreDriverData(const std::string & sFileName, const std::string & sIdentifier);
	inline PWorkingFile StoreCustomDataInTempFile(const std::string & sExtension, const CInputVector<LibMCEnv_uint8> & DataBufferBuffer);
	inline PWorkingFile StoreCustomStringInTempFile(const std::string & sExtension, const std::string & sDataString);
	inline PWorkingFile StoreDriverDataInTempFile(const std::string & sExtension, const std::string & sIdentifier);
	inline bool CleanUp();
	inline PWorkingFile AddManagedFile(const std::string & sFileName);
	inline bool HasUnmanagedFiles();
	inline PWorkingFileIterator RetrieveUnmanagedFiles();
	inline PWorkingFileIterator RetrieveManagedFiles();
	inline PWorkingFileIterator RetrieveAllFiles();
};
	
/*************************************************************************************************************************
 Class CXMLDocumentAttribute 
**************************************************************************************************************************/
class CXMLDocumentAttribute : public CBase {
public:
	
	/**
	* CXMLDocumentAttribute::CXMLDocumentAttribute - Constructor for XMLDocumentAttribute class.
	*/
	CXMLDocumentAttribute(CWrapper* pWrapper, LibMCEnvHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline std::string GetNameSpace();
	inline std::string GetName();
	inline std::string GetValue();
	inline bool IsValidInteger(const LibMCEnv_int64 nMinValue, const LibMCEnv_int64 nMaxValue);
	inline LibMCEnv_int64 GetIntegerValue(const LibMCEnv_int64 nMinValue, const LibMCEnv_int64 nMaxValue);
	inline bool IsValidDouble(const LibMCEnv_double dMinValue, const LibMCEnv_double dMaxValue);
	inline LibMCEnv_double GetDoubleValue(const LibMCEnv_double dMinValue, const LibMCEnv_double dMaxValue);
	inline bool IsValidBool();
	inline bool GetBoolValue(const LibMCEnv_double dMinValue, const LibMCEnv_double dMaxValue);
	inline void SetValue(const std::string & sValue);
	inline void SetIntegerValue(const LibMCEnv_int64 nValue);
	inline void SetDoubleValue(const LibMCEnv_double dValue);
	inline void SetBoolValue(const bool bValue);
	inline void Remove();
};
	
/*************************************************************************************************************************
 Class CXMLDocumentNode 
**************************************************************************************************************************/
class CXMLDocumentNode : public CBase {
public:
	
	/**
	* CXMLDocumentNode::CXMLDocumentNode - Constructor for XMLDocumentNode class.
	*/
	CXMLDocumentNode(CWrapper* pWrapper, LibMCEnvHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline std::string GetName();
	inline std::string GetNameSpace();
	inline LibMCEnv_uint64 GetAttributeCount();
	inline PXMLDocumentAttribute GetAttribute(const LibMCEnv_uint64 nIndex);
	inline bool HasAttribute(const std::string & sNameSpace, const std::string & sName);
	inline PXMLDocumentAttribute FindAttribute(const std::string & sNameSpace, const std::string & sName, const bool bMustExist);
	inline void RemoveAttribute(const std::string & sNameSpace, const std::string & sName);
	inline void RemoveAttributeByIndex(const LibMCEnv_uint64 nIndex);
	inline void AddAttribute(const std::string & sNameSpace, const std::string & sName, const std::string & sValue);
	inline void AddIntegerAttribute(const std::string & sNameSpace, const std::string & sName, const LibMCEnv_int64 nValue);
	inline void AddDoubleAttribute(const std::string & sNameSpace, const std::string & sName, const LibMCEnv_double dValue);
	inline void AddBoolAttribute(const std::string & sNameSpace, const std::string & sName, const bool bValue);
	inline PXMLDocumentNodes GetChildren();
	inline LibMCEnv_uint64 CountChildrenByName(const std::string & sNameSpace, const std::string & sName);
	inline PXMLDocumentNodes GetChildrenByName(const std::string & sNameSpace, const std::string & sName);
	inline bool HasChild(const std::string & sNameSpace, const std::string & sName);
	inline bool HasUniqueChild(const std::string & sNameSpace, const std::string & sName);
	inline PXMLDocumentNode FindChild(const std::string & sNameSpace, const std::string & sName, const bool bMustExist);
	inline PXMLDocumentNode AddChild(const std::string & sNameSpace, const std::string & sName);
	inline void RemoveChild(classParam<CXMLDocumentNode> pChildInstance);
	inline void RemoveChildrenWithName(const std::string & sNameSpace, const std::string & sName);
	inline void Remove();
};
	
/*************************************************************************************************************************
 Class CXMLDocumentNodes 
**************************************************************************************************************************/
class CXMLDocumentNodes : public CBase {
public:
	
	/**
	* CXMLDocumentNodes::CXMLDocumentNodes - Constructor for XMLDocumentNodes class.
	*/
	CXMLDocumentNodes(CWrapper* pWrapper, LibMCEnvHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline LibMCEnv_uint64 GetNodeCount();
	inline PXMLDocumentNode GetNode(const LibMCEnv_uint64 nIndex);
	inline LibMCEnv_uint64 CountNodesByName(const std::string & sNameSpace, const std::string & sName);
	inline PXMLDocumentNodes GetNodesByName(const std::string & sNameSpace, const std::string & sName);
	inline bool HasNode(const std::string & sNameSpace, const std::string & sName);
	inline bool HasUniqueNode(const std::string & sNameSpace, const std::string & sName);
	inline PXMLDocumentNode FindNode(const std::string & sNameSpace, const std::string & sName, const bool bMustExist);
};
	
/*************************************************************************************************************************
 Class CXMLDocument 
**************************************************************************************************************************/
class CXMLDocument : public CBase {
public:
	
	/**
	* CXMLDocument::CXMLDocument - Constructor for XMLDocument class.
	*/
	CXMLDocument(CWrapper* pWrapper, LibMCEnvHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline std::string GetDefaultNamespace();
	inline LibMCEnv_uint64 GetNamespaceCount();
	inline void GetNamespace(const LibMCEnv_uint64 nIndex, std::string & sNamespace, std::string & sNamespacePrefix);
	inline bool HasNamespace(const std::string & sNamespace);
	inline std::string GetNamespacePrefix(const std::string & sNamespace);
	inline void RegisterNamespace(const std::string & sNamespace, const std::string & sNamespacePrefix);
	inline PXMLDocumentNode GetRootNode();
	inline std::string SaveToString(const bool bAddLineBreaks);
};
	
/*************************************************************************************************************************
 Class CTCPIPPacket 
**************************************************************************************************************************/
class CTCPIPPacket : public CBase {
public:
	
	/**
	* CTCPIPPacket::CTCPIPPacket - Constructor for TCPIPPacket class.
	*/
	CTCPIPPacket(CWrapper* pWrapper, LibMCEnvHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline bool IsEmpty();
	inline LibMCEnv_uint32 GetSize();
	inline void GetData(std::vector<LibMCEnv_uint8> & BufferBuffer);
};
	
/*************************************************************************************************************************
 Class CTCPIPConnection 
**************************************************************************************************************************/
class CTCPIPConnection : public CBase {
public:
	
	/**
	* CTCPIPConnection::CTCPIPConnection - Constructor for TCPIPConnection class.
	*/
	CTCPIPConnection(CWrapper* pWrapper, LibMCEnvHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline std::string GetIPAddress();
	inline LibMCEnv_uint32 GetPort();
	inline LibMCEnv_uint32 GetTimeout();
	inline bool IsConnected();
	inline void Disconnect();
	inline void Reconnect();
	inline void SendBuffer(const CInputVector<LibMCEnv_uint8> & BufferBuffer);
	inline bool WaitForData(const LibMCEnv_uint32 nTimeOutInMS);
	inline PTCPIPPacket ReceiveFixedPacket(const LibMCEnv_uint32 nPacketSize, const LibMCEnv_uint32 nTimeOutInMS);
	inline PTCPIPPacket ReceiveData(const LibMCEnv_uint32 nDataSize, const LibMCEnv_uint32 nTimeOutInMS);
};
	
/*************************************************************************************************************************
 Class CModbusTCPDigitalIOStatus 
**************************************************************************************************************************/
class CModbusTCPDigitalIOStatus : public CBase {
public:
	
	/**
	* CModbusTCPDigitalIOStatus::CModbusTCPDigitalIOStatus - Constructor for ModbusTCPDigitalIOStatus class.
	*/
	CModbusTCPDigitalIOStatus(CWrapper* pWrapper, LibMCEnvHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline LibMCEnv_uint32 GetCount();
	inline LibMCEnv_uint32 GetBaseAddress();
	inline bool GetValue(const LibMCEnv_uint32 nIndex);
	inline void GetValues(std::vector<LibMCEnv_uint8> & StateArrayBuffer);
};
	
/*************************************************************************************************************************
 Class CModbusTCPRegisterStatus 
**************************************************************************************************************************/
class CModbusTCPRegisterStatus : public CBase {
public:
	
	/**
	* CModbusTCPRegisterStatus::CModbusTCPRegisterStatus - Constructor for ModbusTCPRegisterStatus class.
	*/
	CModbusTCPRegisterStatus(CWrapper* pWrapper, LibMCEnvHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline LibMCEnv_uint32 GetCount();
	inline LibMCEnv_uint32 GetBaseAddress();
	inline LibMCEnv_uint16 GetValue(const LibMCEnv_uint32 nIndex);
	inline void GetValues(std::vector<LibMCEnv_uint16> & StateArrayBuffer);
};
	
/*************************************************************************************************************************
 Class CModbusTCPConnection 
**************************************************************************************************************************/
class CModbusTCPConnection : public CBase {
public:
	
	/**
	* CModbusTCPConnection::CModbusTCPConnection - Constructor for ModbusTCPConnection class.
	*/
	CModbusTCPConnection(CWrapper* pWrapper, LibMCEnvHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline std::string GetIPAddress();
	inline LibMCEnv_uint32 GetPort();
	inline LibMCEnv_uint32 GetTimeout();
	inline bool IsConnected();
	inline void Disconnect();
	inline void Reconnect();
	inline LibMCEnv_uint16 DiagnosisCall(const LibMCEnv_uint16 nSubFunction, const LibMCEnv_uint16 nDataField);
	inline PModbusTCPDigitalIOStatus ReadCoilStatus(const LibMCEnv_uint32 nStartAddress, const LibMCEnv_uint32 nBitCount);
	inline PModbusTCPDigitalIOStatus ReadInputStatus(const LibMCEnv_uint32 nStartAddress, const LibMCEnv_uint32 nBitCount);
	inline PModbusTCPRegisterStatus ReadHoldingRegisters(const LibMCEnv_uint32 nStartAddress, const LibMCEnv_uint32 nRegisterCount);
	inline PModbusTCPRegisterStatus ReadInputRegisters(const LibMCEnv_uint32 nStartAddress, const LibMCEnv_uint32 nRegisterCount);
	inline void ForceMultipleCoils(const LibMCEnv_uint32 nStartAddress, const CInputVector<LibMCEnv_uint8> & BufferBuffer);
	inline void PresetMultipleRegisters(const LibMCEnv_uint32 nStartAddress, const CInputVector<LibMCEnv_uint16> & BufferBuffer);
};
	
/*************************************************************************************************************************
 Class CDriverStatusUpdateSession 
**************************************************************************************************************************/
class CDriverStatusUpdateSession : public CBase {
public:
	
	/**
	* CDriverStatusUpdateSession::CDriverStatusUpdateSession - Constructor for DriverStatusUpdateSession class.
	*/
	CDriverStatusUpdateSession(CWrapper* pWrapper, LibMCEnvHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline void SetStringParameter(const std::string & sParameterName, const std::string & sValue);
	inline void SetUUIDParameter(const std::string & sParameterName, const std::string & sValue);
	inline void SetDoubleParameter(const std::string & sParameterName, const LibMCEnv_double dValue);
	inline void SetIntegerParameter(const std::string & sParameterName, const LibMCEnv_int64 nValue);
	inline void SetBoolParameter(const std::string & sParameterName, const bool bValue);
	inline void LogMessage(const std::string & sLogString);
	inline void LogWarning(const std::string & sLogString);
	inline void LogInfo(const std::string & sLogString);
	inline void Sleep(const LibMCEnv_uint32 nDelay);
};
	
/*************************************************************************************************************************
 Class CDriverEnvironment 
**************************************************************************************************************************/
class CDriverEnvironment : public CBase {
public:
	
	/**
	* CDriverEnvironment::CDriverEnvironment - Constructor for DriverEnvironment class.
	*/
	CDriverEnvironment(CWrapper* pWrapper, LibMCEnvHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline PDriverStatusUpdateSession CreateStatusUpdateSession();
	inline PWorkingDirectory CreateWorkingDirectory();
	inline PTCPIPConnection CreateTCPIPConnection(const std::string & sIPAddress, const LibMCEnv_uint32 nPort, const LibMCEnv_uint32 nTimeOutInMS);
	inline PModbusTCPConnection CreateModbusTCPConnection(const std::string & sIPAddress, const LibMCEnv_uint32 nPort, const LibMCEnv_uint32 nTimeOutInMS);
	inline PXMLDocument CreateXMLDocument(const std::string & sRootNodeName, const std::string & sDefaultNamespace);
	inline PXMLDocument ParseXMLString(const std::string & sXMLString);
	inline PXMLDocument ParseXMLData(const CInputVector<LibMCEnv_uint8> & XMLDataBuffer);
	inline bool DriverHasResourceData(const std::string & sIdentifier);
	inline bool MachineHasResourceData(const std::string & sIdentifier);
	inline void RetrieveDriverData(const std::string & sIdentifier, std::vector<LibMCEnv_uint8> & DataBufferBuffer);
	inline void RetrieveDriverResourceData(const std::string & sIdentifier, std::vector<LibMCEnv_uint8> & DataBufferBuffer);
	inline void RetrieveMachineResourceData(const std::string & sIdentifier, std::vector<LibMCEnv_uint8> & DataBufferBuffer);
	inline PToolpathAccessor CreateToolpathAccessor(const std::string & sStreamUUID);
	inline bool ParameterNameIsValid(const std::string & sParameterName);
	inline void RegisterStringParameter(const std::string & sParameterName, const std::string & sDescription, const std::string & sDefaultValue);
	inline void RegisterUUIDParameter(const std::string & sParameterName, const std::string & sDescription, const std::string & sDefaultValue);
	inline void RegisterDoubleParameter(const std::string & sParameterName, const std::string & sDescription, const LibMCEnv_double dDefaultValue);
	inline void RegisterIntegerParameter(const std::string & sParameterName, const std::string & sDescription, const LibMCEnv_int64 nDefaultValue);
	inline void RegisterBoolParameter(const std::string & sParameterName, const std::string & sDescription, const bool bDefaultValue);
	inline void SetStringParameter(const std::string & sParameterName, const std::string & sValue);
	inline void SetUUIDParameter(const std::string & sParameterName, const std::string & sValue);
	inline void SetDoubleParameter(const std::string & sParameterName, const LibMCEnv_double dValue);
	inline void SetIntegerParameter(const std::string & sParameterName, const LibMCEnv_int64 nValue);
	inline void SetBoolParameter(const std::string & sParameterName, const bool bValue);
	inline void Sleep(const LibMCEnv_uint32 nDelay);
	inline LibMCEnv_uint64 GetGlobalTimerInMilliseconds();
	inline void LogMessage(const std::string & sLogString);
	inline void LogWarning(const std::string & sLogString);
	inline void LogInfo(const std::string & sLogString);
	inline PImageData CreateEmptyImage(const LibMCEnv_uint32 nPixelSizeX, const LibMCEnv_uint32 nPixelSizeY, const LibMCEnv_double dDPIValueX, const LibMCEnv_double dDPIValueY, const eImagePixelFormat ePixelFormat);
	inline PImageData LoadPNGImage(const CInputVector<LibMCEnv_uint8> & PNGDataBuffer, const LibMCEnv_double dDPIValueX, const LibMCEnv_double dDPIValueY, const eImagePixelFormat ePixelFormat);
};
	
/*************************************************************************************************************************
 Class CSignalTrigger 
**************************************************************************************************************************/
class CSignalTrigger : public CBase {
public:
	
	/**
	* CSignalTrigger::CSignalTrigger - Constructor for SignalTrigger class.
	*/
	CSignalTrigger(CWrapper* pWrapper, LibMCEnvHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline bool CanTrigger();
	inline void Trigger();
	inline bool WaitForHandling(const LibMCEnv_uint32 nTimeOut);
	inline std::string GetName();
	inline std::string GetStateMachine();
	inline void SetString(const std::string & sName, const std::string & sValue);
	inline void SetUUID(const std::string & sName, const std::string & sValue);
	inline void SetDouble(const std::string & sName, const LibMCEnv_double dValue);
	inline void SetInteger(const std::string & sName, const LibMCEnv_int64 nValue);
	inline void SetBool(const std::string & sName, const bool bValue);
	inline std::string GetStringResult(const std::string & sName);
	inline std::string GetUUIDResult(const std::string & sName);
	inline LibMCEnv_double GetDoubleResult(const std::string & sName);
	inline LibMCEnv_int64 GetIntegerResult(const std::string & sName);
	inline bool GetBoolResult(const std::string & sName);
};
	
/*************************************************************************************************************************
 Class CSignalHandler 
**************************************************************************************************************************/
class CSignalHandler : public CBase {
public:
	
	/**
	* CSignalHandler::CSignalHandler - Constructor for SignalHandler class.
	*/
	CSignalHandler(CWrapper* pWrapper, LibMCEnvHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline void SignalHandled();
	inline std::string GetName();
	inline std::string GetSignalID();
	inline std::string GetSignalUUID();
	inline std::string GetStateMachine();
	inline std::string GetString(const std::string & sName);
	inline std::string GetUUID(const std::string & sName);
	inline LibMCEnv_double GetDouble(const std::string & sName);
	inline LibMCEnv_int64 GetInteger(const std::string & sName);
	inline bool GetBool(const std::string & sName);
	inline void SetStringResult(const std::string & sName, const std::string & sValue);
	inline void SetUUIDResult(const std::string & sName, const std::string & sValue);
	inline void SetDoubleResult(const std::string & sName, const LibMCEnv_double dValue);
	inline void SetIntegerResult(const std::string & sName, const LibMCEnv_int64 nValue);
	inline void SetBoolResult(const std::string & sName, const bool bValue);
};
	
/*************************************************************************************************************************
 Class CStateEnvironment 
**************************************************************************************************************************/
class CStateEnvironment : public CBase {
public:
	
	/**
	* CStateEnvironment::CStateEnvironment - Constructor for StateEnvironment class.
	*/
	CStateEnvironment(CWrapper* pWrapper, LibMCEnvHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline std::string GetMachineState(const std::string & sMachineInstance);
	inline PSignalTrigger PrepareSignal(const std::string & sMachineInstance, const std::string & sSignalName);
	inline bool WaitForSignal(const std::string & sSignalName, const LibMCEnv_uint32 nTimeOut, PSignalHandler & pHandlerInstance);
	inline PSignalHandler GetUnhandledSignal(const std::string & sSignalTypeName);
	inline PSignalHandler GetUnhandledSignalByUUID(const std::string & sUUID, const bool bMustExist);
	inline void GetDriverLibrary(const std::string & sDriverName, std::string & sDriverType, LibMCEnv_pvoid & pDriverLookup);
	inline void CreateDriverAccess(const std::string & sDriverName, LibMCEnv_pvoid & pDriverHandle);
	inline PBuild GetBuildJob(const std::string & sBuildUUID);
	inline void UnloadAllToolpathes();
	inline void SetNextState(const std::string & sStateName);
	inline void LogMessage(const std::string & sLogString);
	inline void LogWarning(const std::string & sLogString);
	inline void LogInfo(const std::string & sLogString);
	inline void Sleep(const LibMCEnv_uint32 nDelay);
	inline bool CheckForTermination();
	inline void StoreSignal(const std::string & sName, classParam<CSignalHandler> pHandler);
	inline PSignalHandler RetrieveSignal(const std::string & sName);
	inline void ClearStoredValue(const std::string & sName);
	inline void SetStringParameter(const std::string & sParameterGroup, const std::string & sParameterName, const std::string & sValue);
	inline void SetUUIDParameter(const std::string & sParameterGroup, const std::string & sParameterName, const std::string & sValue);
	inline void SetDoubleParameter(const std::string & sParameterGroup, const std::string & sParameterName, const LibMCEnv_double dValue);
	inline void SetIntegerParameter(const std::string & sParameterGroup, const std::string & sParameterName, const LibMCEnv_int64 nValue);
	inline void SetBoolParameter(const std::string & sParameterGroup, const std::string & sParameterName, const bool bValue);
	inline std::string GetStringParameter(const std::string & sParameterGroup, const std::string & sParameterName);
	inline std::string GetUUIDParameter(const std::string & sParameterGroup, const std::string & sParameterName);
	inline LibMCEnv_double GetDoubleParameter(const std::string & sParameterGroup, const std::string & sParameterName);
	inline LibMCEnv_int64 GetIntegerParameter(const std::string & sParameterGroup, const std::string & sParameterName);
	inline bool GetBoolParameter(const std::string & sParameterGroup, const std::string & sParameterName);
	inline void LoadResourceData(const std::string & sResourceName, std::vector<LibMCEnv_uint8> & ResourceDataBuffer);
	inline std::string LoadResourceString(const std::string & sResourceName);
	inline PImageData CreateEmptyImage(const LibMCEnv_uint32 nPixelSizeX, const LibMCEnv_uint32 nPixelSizeY, const LibMCEnv_double dDPIValueX, const LibMCEnv_double dDPIValueY, const eImagePixelFormat ePixelFormat);
	inline PImageData LoadPNGImage(const CInputVector<LibMCEnv_uint8> & PNGDataBuffer, const LibMCEnv_double dDPIValueX, const LibMCEnv_double dDPIValueY, const eImagePixelFormat ePixelFormat);
	inline LibMCEnv_uint64 GetGlobalTimerInMilliseconds();
	inline PTestEnvironment GetTestEnvironment();
	inline PXMLDocument CreateXMLDocument(const std::string & sRootNodeName, const std::string & sDefaultNamespace);
	inline PXMLDocument ParseXMLString(const std::string & sXMLString);
	inline PXMLDocument ParseXMLData(const CInputVector<LibMCEnv_uint8> & XMLDataBuffer);
};
	
/*************************************************************************************************************************
 Class CUIEnvironment 
**************************************************************************************************************************/
class CUIEnvironment : public CBase {
public:
	
	/**
	* CUIEnvironment::CUIEnvironment - Constructor for UIEnvironment class.
	*/
	CUIEnvironment(CWrapper* pWrapper, LibMCEnvHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline void ActivateModalDialog(const std::string & sDialogName);
	inline void CloseModalDialog();
	inline void ActivatePage(const std::string & sPageName);
	inline void LogOut();
	inline void ShowHint(const std::string & sHint, const LibMCEnv_uint32 nTimeoutInMS);
	inline void ShowHintColored(const std::string & sHint, const LibMCEnv_uint32 nTimeoutInMS, const sColorRGB & Color, const sColorRGB & FontColor);
	inline void HideHint();
	inline std::string ShowMessageDlg(const std::string & sCaption, const std::string & sTitle, const eMessageDialogType eDialogType, const std::string & sYesEvent, const std::string & sNoEvent, const std::string & sCancelEvent);
	inline std::string RetrieveEventSender();
	inline std::string RetrieveEventSenderUUID();
	inline PSignalTrigger PrepareSignal(const std::string & sMachineInstance, const std::string & sSignalName);
	inline std::string GetMachineState(const std::string & sMachineInstance);
	inline void LogMessage(const std::string & sLogString);
	inline void LogWarning(const std::string & sLogString);
	inline void LogInfo(const std::string & sLogString);
	inline std::string GetMachineParameter(const std::string & sMachineInstance, const std::string & sParameterGroup, const std::string & sParameterName);
	inline std::string GetMachineParameterAsUUID(const std::string & sMachineInstance, const std::string & sParameterGroup, const std::string & sParameterName);
	inline LibMCEnv_double GetMachineParameterAsDouble(const std::string & sMachineInstance, const std::string & sParameterGroup, const std::string & sParameterName);
	inline LibMCEnv_int64 GetMachineParameterAsInteger(const std::string & sMachineInstance, const std::string & sParameterGroup, const std::string & sParameterName);
	inline bool GetMachineParameterAsBool(const std::string & sMachineInstance, const std::string & sParameterGroup, const std::string & sParameterName);
	inline std::string GetUIProperty(const std::string & sElementPath, const std::string & sPropertyName);
	inline std::string GetUIPropertyAsUUID(const std::string & sElementPath, const std::string & sPropertyName);
	inline LibMCEnv_double GetUIPropertyAsDouble(const std::string & sElementPath, const std::string & sPropertyName);
	inline LibMCEnv_int64 GetUIPropertyAsInteger(const std::string & sElementPath, const std::string & sPropertyName);
	inline bool GetUIPropertyAsBool(const std::string & sElementPath, const std::string & sPropertyName);
	inline void SetUIProperty(const std::string & sElementPath, const std::string & sPropertyName, const std::string & sValue);
	inline void SetUIPropertyAsUUID(const std::string & sElementPath, const std::string & sPropertyName, const std::string & sValue);
	inline void SetUIPropertyAsDouble(const std::string & sElementPath, const std::string & sPropertyName, const LibMCEnv_double dValue);
	inline void SetUIPropertyAsInteger(const std::string & sElementPath, const std::string & sPropertyName, const LibMCEnv_int64 nValue);
	inline void SetUIPropertyAsBool(const std::string & sElementPath, const std::string & sPropertyName, const bool bValue);
	inline PImageData CreateEmptyImage(const LibMCEnv_uint32 nPixelSizeX, const LibMCEnv_uint32 nPixelSizeY, const LibMCEnv_double dDPIValueX, const LibMCEnv_double dDPIValueY, const eImagePixelFormat ePixelFormat);
	inline PImageData LoadPNGImage(const CInputVector<LibMCEnv_uint8> & PNGDataBuffer, const LibMCEnv_double dDPIValueX, const LibMCEnv_double dDPIValueY, const eImagePixelFormat ePixelFormat);
	inline LibMCEnv_uint64 GetGlobalTimerInMilliseconds();
	inline PTestEnvironment GetTestEnvironment();
	inline PXMLDocument CreateXMLDocument(const std::string & sRootNodeName, const std::string & sDefaultNamespace);
	inline PXMLDocument ParseXMLString(const std::string & sXMLString);
	inline PXMLDocument ParseXMLData(const CInputVector<LibMCEnv_uint8> & XMLDataBuffer);
};
	
	/**
	* CWrapper::GetVersion - retrieves the binary version of this library.
	* @param[out] nMajor - returns the major version of this library
	* @param[out] nMinor - returns the minor version of this library
	* @param[out] nMicro - returns the micro version of this library
	*/
	inline void CWrapper::GetVersion(LibMCEnv_uint32 & nMajor, LibMCEnv_uint32 & nMinor, LibMCEnv_uint32 & nMicro)
	{
		CheckError(nullptr,m_WrapperTable.m_GetVersion(&nMajor, &nMinor, &nMicro));
	}
	
	/**
	* CWrapper::GetLastError - Returns the last error recorded on this object
	* @param[in] pInstance - Instance Handle
	* @param[out] sErrorMessage - Message of the last error
	* @return Is there a last error to query
	*/
	inline bool CWrapper::GetLastError(classParam<CBase> pInstance, std::string & sErrorMessage)
	{
		LibMCEnvHandle hInstance = pInstance.GetHandle();
		LibMCEnv_uint32 bytesNeededErrorMessage = 0;
		LibMCEnv_uint32 bytesWrittenErrorMessage = 0;
		bool resultHasError = 0;
		CheckError(nullptr,m_WrapperTable.m_GetLastError(hInstance, 0, &bytesNeededErrorMessage, nullptr, &resultHasError));
		std::vector<char> bufferErrorMessage(bytesNeededErrorMessage);
		CheckError(nullptr,m_WrapperTable.m_GetLastError(hInstance, bytesNeededErrorMessage, &bytesWrittenErrorMessage, &bufferErrorMessage[0], &resultHasError));
		sErrorMessage = std::string(&bufferErrorMessage[0]);
		
		return resultHasError;
	}
	
	/**
	* CWrapper::ReleaseInstance - Releases shared ownership of an Instance
	* @param[in] pInstance - Instance Handle
	*/
	inline void CWrapper::ReleaseInstance(classParam<CBase> pInstance)
	{
		LibMCEnvHandle hInstance = pInstance.GetHandle();
		CheckError(nullptr,m_WrapperTable.m_ReleaseInstance(hInstance));
	}
	
	/**
	* CWrapper::AcquireInstance - Acquires shared ownership of an Instance
	* @param[in] pInstance - Instance Handle
	*/
	inline void CWrapper::AcquireInstance(classParam<CBase> pInstance)
	{
		LibMCEnvHandle hInstance = pInstance.GetHandle();
		CheckError(nullptr,m_WrapperTable.m_AcquireInstance(hInstance));
	}
	
	/**
	* CWrapper::GetSymbolLookupMethod - Returns the address of the SymbolLookupMethod
	* @return Address of the SymbolAddressMethod
	*/
	inline LibMCEnv_pvoid CWrapper::GetSymbolLookupMethod()
	{
		LibMCEnv_pvoid resultSymbolLookupMethod = 0;
		CheckError(nullptr,m_WrapperTable.m_GetSymbolLookupMethod(&resultSymbolLookupMethod));
		
		return resultSymbolLookupMethod;
	}
	
	inline void CWrapper::CheckError(CBase * pBaseClass, LibMCEnvResult nResult)
	{
		if (nResult != 0) {
			std::string sErrorMessage;
			if (pBaseClass != nullptr) {
				GetLastError(pBaseClass, sErrorMessage);
			}
			throw ELibMCEnvException(nResult, sErrorMessage);
		}
	}
	

	inline LibMCEnvResult CWrapper::initWrapperTable(sLibMCEnvDynamicWrapperTable * pWrapperTable)
	{
		if (pWrapperTable == nullptr)
			return LIBMCENV_ERROR_INVALIDPARAM;
		
		pWrapperTable->m_LibraryHandle = nullptr;
		pWrapperTable->m_Iterator_MoveNext = nullptr;
		pWrapperTable->m_Iterator_MovePrevious = nullptr;
		pWrapperTable->m_Iterator_GetCurrent = nullptr;
		pWrapperTable->m_Iterator_Clone = nullptr;
		pWrapperTable->m_Iterator_Count = nullptr;
		pWrapperTable->m_TestEnvironment_WriteTestOutput = nullptr;
		pWrapperTable->m_ImageData_GetPixelFormat = nullptr;
		pWrapperTable->m_ImageData_ChangePixelFormat = nullptr;
		pWrapperTable->m_ImageData_GetDPI = nullptr;
		pWrapperTable->m_ImageData_SetDPI = nullptr;
		pWrapperTable->m_ImageData_GetSizeInMM = nullptr;
		pWrapperTable->m_ImageData_GetSizeInPixels = nullptr;
		pWrapperTable->m_ImageData_ResizeImage = nullptr;
		pWrapperTable->m_ImageData_LoadPNG = nullptr;
		pWrapperTable->m_ImageData_EncodePNG = nullptr;
		pWrapperTable->m_ImageData_GetEncodedPNGData = nullptr;
		pWrapperTable->m_ImageData_ClearEncodedPNGData = nullptr;
		pWrapperTable->m_ImageData_Clear = nullptr;
		pWrapperTable->m_ImageData_GetPixel = nullptr;
		pWrapperTable->m_ImageData_SetPixel = nullptr;
		pWrapperTable->m_ImageData_GetPixelRange = nullptr;
		pWrapperTable->m_ImageData_SetPixelRange = nullptr;
		pWrapperTable->m_ToolpathPart_GetName = nullptr;
		pWrapperTable->m_ToolpathPart_GetUUID = nullptr;
		pWrapperTable->m_ToolpathPart_GetMeshUUID = nullptr;
		pWrapperTable->m_ToolpathPart_GetTransform = nullptr;
		pWrapperTable->m_ToolpathLayer_GetLayerDataUUID = nullptr;
		pWrapperTable->m_ToolpathLayer_GetSegmentCount = nullptr;
		pWrapperTable->m_ToolpathLayer_GetSegmentInfo = nullptr;
		pWrapperTable->m_ToolpathLayer_GetSegmentType = nullptr;
		pWrapperTable->m_ToolpathLayer_GetSegmentPointCount = nullptr;
		pWrapperTable->m_ToolpathLayer_GetSegmentHatchCount = nullptr;
		pWrapperTable->m_ToolpathLayer_GetSegmentProfileUUID = nullptr;
		pWrapperTable->m_ToolpathLayer_SegmentProfileHasValue = nullptr;
		pWrapperTable->m_ToolpathLayer_GetSegmentProfileValue = nullptr;
		pWrapperTable->m_ToolpathLayer_GetSegmentProfileValueDef = nullptr;
		pWrapperTable->m_ToolpathLayer_GetSegmentProfileDoubleValue = nullptr;
		pWrapperTable->m_ToolpathLayer_GetSegmentProfileDoubleValueDef = nullptr;
		pWrapperTable->m_ToolpathLayer_GetSegmentProfileIntegerValue = nullptr;
		pWrapperTable->m_ToolpathLayer_GetSegmentProfileIntegerValueDef = nullptr;
		pWrapperTable->m_ToolpathLayer_GetSegmentProfileBoolValue = nullptr;
		pWrapperTable->m_ToolpathLayer_GetSegmentProfileBoolValueDef = nullptr;
		pWrapperTable->m_ToolpathLayer_GetSegmentProfileTypedValue = nullptr;
		pWrapperTable->m_ToolpathLayer_GetSegmentProfileTypedValueDef = nullptr;
		pWrapperTable->m_ToolpathLayer_GetSegmentPartUUID = nullptr;
		pWrapperTable->m_ToolpathLayer_GetSegmentPointData = nullptr;
		pWrapperTable->m_ToolpathLayer_GetSegmentHatchData = nullptr;
		pWrapperTable->m_ToolpathLayer_GetSegmentPointDataInMM = nullptr;
		pWrapperTable->m_ToolpathLayer_GetSegmentHatchDataInMM = nullptr;
		pWrapperTable->m_ToolpathLayer_GetZValue = nullptr;
		pWrapperTable->m_ToolpathLayer_GetZValueInMM = nullptr;
		pWrapperTable->m_ToolpathLayer_GetUnits = nullptr;
		pWrapperTable->m_ToolpathAccessor_GetStorageUUID = nullptr;
		pWrapperTable->m_ToolpathAccessor_GetLayerCount = nullptr;
		pWrapperTable->m_ToolpathAccessor_LoadLayer = nullptr;
		pWrapperTable->m_ToolpathAccessor_GetUnits = nullptr;
		pWrapperTable->m_ToolpathAccessor_HasMetaData = nullptr;
		pWrapperTable->m_ToolpathAccessor_GetMetaDataValue = nullptr;
		pWrapperTable->m_ToolpathAccessor_GetMetaDataType = nullptr;
		pWrapperTable->m_ToolpathAccessor_GetPartCount = nullptr;
		pWrapperTable->m_ToolpathAccessor_GetPart = nullptr;
		pWrapperTable->m_ToolpathAccessor_FindPartByUUID = nullptr;
		pWrapperTable->m_ToolpathAccessor_GetBuildHeightInUnits = nullptr;
		pWrapperTable->m_ToolpathAccessor_GetZValueInUnits = nullptr;
		pWrapperTable->m_ToolpathAccessor_GetBuildHeightInMM = nullptr;
		pWrapperTable->m_ToolpathAccessor_GetZValueInMM = nullptr;
		pWrapperTable->m_Build_GetName = nullptr;
		pWrapperTable->m_Build_GetBuildUUID = nullptr;
		pWrapperTable->m_Build_GetStorageUUID = nullptr;
		pWrapperTable->m_Build_GetStorageSHA256 = nullptr;
		pWrapperTable->m_Build_GetLayerCount = nullptr;
		pWrapperTable->m_Build_GetBuildHeightInMM = nullptr;
		pWrapperTable->m_Build_GetZValueInMM = nullptr;
		pWrapperTable->m_Build_LoadToolpath = nullptr;
		pWrapperTable->m_Build_UnloadToolpath = nullptr;
		pWrapperTable->m_Build_ToolpathIsLoaded = nullptr;
		pWrapperTable->m_Build_CreateToolpathAccessor = nullptr;
		pWrapperTable->m_Build_AddBinaryData = nullptr;
		pWrapperTable->m_WorkingFileExecution_GetStatus = nullptr;
		pWrapperTable->m_WorkingFileExecution_ReturnStdOut = nullptr;
		pWrapperTable->m_WorkingFile_GetAbsoluteFileName = nullptr;
		pWrapperTable->m_WorkingFile_GetSize = nullptr;
		pWrapperTable->m_WorkingFile_CalculateSHA2 = nullptr;
		pWrapperTable->m_WorkingFile_ExecuteFile = nullptr;
		pWrapperTable->m_WorkingFile_IsManaged = nullptr;
		pWrapperTable->m_WorkingFile_MakeManaged = nullptr;
		pWrapperTable->m_WorkingFile_FileExists = nullptr;
		pWrapperTable->m_WorkingFile_DeleteFromDisk = nullptr;
		pWrapperTable->m_WorkingFileIterator_GetCurrentFile = nullptr;
		pWrapperTable->m_WorkingDirectory_IsActive = nullptr;
		pWrapperTable->m_WorkingDirectory_GetAbsoluteFilePath = nullptr;
		pWrapperTable->m_WorkingDirectory_StoreCustomData = nullptr;
		pWrapperTable->m_WorkingDirectory_StoreCustomString = nullptr;
		pWrapperTable->m_WorkingDirectory_StoreDriverData = nullptr;
		pWrapperTable->m_WorkingDirectory_StoreCustomDataInTempFile = nullptr;
		pWrapperTable->m_WorkingDirectory_StoreCustomStringInTempFile = nullptr;
		pWrapperTable->m_WorkingDirectory_StoreDriverDataInTempFile = nullptr;
		pWrapperTable->m_WorkingDirectory_CleanUp = nullptr;
		pWrapperTable->m_WorkingDirectory_AddManagedFile = nullptr;
		pWrapperTable->m_WorkingDirectory_HasUnmanagedFiles = nullptr;
		pWrapperTable->m_WorkingDirectory_RetrieveUnmanagedFiles = nullptr;
		pWrapperTable->m_WorkingDirectory_RetrieveManagedFiles = nullptr;
		pWrapperTable->m_WorkingDirectory_RetrieveAllFiles = nullptr;
		pWrapperTable->m_XMLDocumentAttribute_GetNameSpace = nullptr;
		pWrapperTable->m_XMLDocumentAttribute_GetName = nullptr;
		pWrapperTable->m_XMLDocumentAttribute_GetValue = nullptr;
		pWrapperTable->m_XMLDocumentAttribute_IsValidInteger = nullptr;
		pWrapperTable->m_XMLDocumentAttribute_GetIntegerValue = nullptr;
		pWrapperTable->m_XMLDocumentAttribute_IsValidDouble = nullptr;
		pWrapperTable->m_XMLDocumentAttribute_GetDoubleValue = nullptr;
		pWrapperTable->m_XMLDocumentAttribute_IsValidBool = nullptr;
		pWrapperTable->m_XMLDocumentAttribute_GetBoolValue = nullptr;
		pWrapperTable->m_XMLDocumentAttribute_SetValue = nullptr;
		pWrapperTable->m_XMLDocumentAttribute_SetIntegerValue = nullptr;
		pWrapperTable->m_XMLDocumentAttribute_SetDoubleValue = nullptr;
		pWrapperTable->m_XMLDocumentAttribute_SetBoolValue = nullptr;
		pWrapperTable->m_XMLDocumentAttribute_Remove = nullptr;
		pWrapperTable->m_XMLDocumentNode_GetName = nullptr;
		pWrapperTable->m_XMLDocumentNode_GetNameSpace = nullptr;
		pWrapperTable->m_XMLDocumentNode_GetAttributeCount = nullptr;
		pWrapperTable->m_XMLDocumentNode_GetAttribute = nullptr;
		pWrapperTable->m_XMLDocumentNode_HasAttribute = nullptr;
		pWrapperTable->m_XMLDocumentNode_FindAttribute = nullptr;
		pWrapperTable->m_XMLDocumentNode_RemoveAttribute = nullptr;
		pWrapperTable->m_XMLDocumentNode_RemoveAttributeByIndex = nullptr;
		pWrapperTable->m_XMLDocumentNode_AddAttribute = nullptr;
		pWrapperTable->m_XMLDocumentNode_AddIntegerAttribute = nullptr;
		pWrapperTable->m_XMLDocumentNode_AddDoubleAttribute = nullptr;
		pWrapperTable->m_XMLDocumentNode_AddBoolAttribute = nullptr;
		pWrapperTable->m_XMLDocumentNode_GetChildren = nullptr;
		pWrapperTable->m_XMLDocumentNode_CountChildrenByName = nullptr;
		pWrapperTable->m_XMLDocumentNode_GetChildrenByName = nullptr;
		pWrapperTable->m_XMLDocumentNode_HasChild = nullptr;
		pWrapperTable->m_XMLDocumentNode_HasUniqueChild = nullptr;
		pWrapperTable->m_XMLDocumentNode_FindChild = nullptr;
		pWrapperTable->m_XMLDocumentNode_AddChild = nullptr;
		pWrapperTable->m_XMLDocumentNode_RemoveChild = nullptr;
		pWrapperTable->m_XMLDocumentNode_RemoveChildrenWithName = nullptr;
		pWrapperTable->m_XMLDocumentNode_Remove = nullptr;
		pWrapperTable->m_XMLDocumentNodes_GetNodeCount = nullptr;
		pWrapperTable->m_XMLDocumentNodes_GetNode = nullptr;
		pWrapperTable->m_XMLDocumentNodes_CountNodesByName = nullptr;
		pWrapperTable->m_XMLDocumentNodes_GetNodesByName = nullptr;
		pWrapperTable->m_XMLDocumentNodes_HasNode = nullptr;
		pWrapperTable->m_XMLDocumentNodes_HasUniqueNode = nullptr;
		pWrapperTable->m_XMLDocumentNodes_FindNode = nullptr;
		pWrapperTable->m_XMLDocument_GetDefaultNamespace = nullptr;
		pWrapperTable->m_XMLDocument_GetNamespaceCount = nullptr;
		pWrapperTable->m_XMLDocument_GetNamespace = nullptr;
		pWrapperTable->m_XMLDocument_HasNamespace = nullptr;
		pWrapperTable->m_XMLDocument_GetNamespacePrefix = nullptr;
		pWrapperTable->m_XMLDocument_RegisterNamespace = nullptr;
		pWrapperTable->m_XMLDocument_GetRootNode = nullptr;
		pWrapperTable->m_XMLDocument_SaveToString = nullptr;
		pWrapperTable->m_TCPIPPacket_IsEmpty = nullptr;
		pWrapperTable->m_TCPIPPacket_GetSize = nullptr;
		pWrapperTable->m_TCPIPPacket_GetData = nullptr;
		pWrapperTable->m_TCPIPConnection_GetIPAddress = nullptr;
		pWrapperTable->m_TCPIPConnection_GetPort = nullptr;
		pWrapperTable->m_TCPIPConnection_GetTimeout = nullptr;
		pWrapperTable->m_TCPIPConnection_IsConnected = nullptr;
		pWrapperTable->m_TCPIPConnection_Disconnect = nullptr;
		pWrapperTable->m_TCPIPConnection_Reconnect = nullptr;
		pWrapperTable->m_TCPIPConnection_SendBuffer = nullptr;
		pWrapperTable->m_TCPIPConnection_WaitForData = nullptr;
		pWrapperTable->m_TCPIPConnection_ReceiveFixedPacket = nullptr;
		pWrapperTable->m_TCPIPConnection_ReceiveData = nullptr;
		pWrapperTable->m_ModbusTCPDigitalIOStatus_GetCount = nullptr;
		pWrapperTable->m_ModbusTCPDigitalIOStatus_GetBaseAddress = nullptr;
		pWrapperTable->m_ModbusTCPDigitalIOStatus_GetValue = nullptr;
		pWrapperTable->m_ModbusTCPDigitalIOStatus_GetValues = nullptr;
		pWrapperTable->m_ModbusTCPRegisterStatus_GetCount = nullptr;
		pWrapperTable->m_ModbusTCPRegisterStatus_GetBaseAddress = nullptr;
		pWrapperTable->m_ModbusTCPRegisterStatus_GetValue = nullptr;
		pWrapperTable->m_ModbusTCPRegisterStatus_GetValues = nullptr;
		pWrapperTable->m_ModbusTCPConnection_GetIPAddress = nullptr;
		pWrapperTable->m_ModbusTCPConnection_GetPort = nullptr;
		pWrapperTable->m_ModbusTCPConnection_GetTimeout = nullptr;
		pWrapperTable->m_ModbusTCPConnection_IsConnected = nullptr;
		pWrapperTable->m_ModbusTCPConnection_Disconnect = nullptr;
		pWrapperTable->m_ModbusTCPConnection_Reconnect = nullptr;
		pWrapperTable->m_ModbusTCPConnection_DiagnosisCall = nullptr;
		pWrapperTable->m_ModbusTCPConnection_ReadCoilStatus = nullptr;
		pWrapperTable->m_ModbusTCPConnection_ReadInputStatus = nullptr;
		pWrapperTable->m_ModbusTCPConnection_ReadHoldingRegisters = nullptr;
		pWrapperTable->m_ModbusTCPConnection_ReadInputRegisters = nullptr;
		pWrapperTable->m_ModbusTCPConnection_ForceMultipleCoils = nullptr;
		pWrapperTable->m_ModbusTCPConnection_PresetMultipleRegisters = nullptr;
		pWrapperTable->m_DriverStatusUpdateSession_SetStringParameter = nullptr;
		pWrapperTable->m_DriverStatusUpdateSession_SetUUIDParameter = nullptr;
		pWrapperTable->m_DriverStatusUpdateSession_SetDoubleParameter = nullptr;
		pWrapperTable->m_DriverStatusUpdateSession_SetIntegerParameter = nullptr;
		pWrapperTable->m_DriverStatusUpdateSession_SetBoolParameter = nullptr;
		pWrapperTable->m_DriverStatusUpdateSession_LogMessage = nullptr;
		pWrapperTable->m_DriverStatusUpdateSession_LogWarning = nullptr;
		pWrapperTable->m_DriverStatusUpdateSession_LogInfo = nullptr;
		pWrapperTable->m_DriverStatusUpdateSession_Sleep = nullptr;
		pWrapperTable->m_DriverEnvironment_CreateStatusUpdateSession = nullptr;
		pWrapperTable->m_DriverEnvironment_CreateWorkingDirectory = nullptr;
		pWrapperTable->m_DriverEnvironment_CreateTCPIPConnection = nullptr;
		pWrapperTable->m_DriverEnvironment_CreateModbusTCPConnection = nullptr;
		pWrapperTable->m_DriverEnvironment_CreateXMLDocument = nullptr;
		pWrapperTable->m_DriverEnvironment_ParseXMLString = nullptr;
		pWrapperTable->m_DriverEnvironment_ParseXMLData = nullptr;
		pWrapperTable->m_DriverEnvironment_DriverHasResourceData = nullptr;
		pWrapperTable->m_DriverEnvironment_MachineHasResourceData = nullptr;
		pWrapperTable->m_DriverEnvironment_RetrieveDriverData = nullptr;
		pWrapperTable->m_DriverEnvironment_RetrieveDriverResourceData = nullptr;
		pWrapperTable->m_DriverEnvironment_RetrieveMachineResourceData = nullptr;
		pWrapperTable->m_DriverEnvironment_CreateToolpathAccessor = nullptr;
		pWrapperTable->m_DriverEnvironment_ParameterNameIsValid = nullptr;
		pWrapperTable->m_DriverEnvironment_RegisterStringParameter = nullptr;
		pWrapperTable->m_DriverEnvironment_RegisterUUIDParameter = nullptr;
		pWrapperTable->m_DriverEnvironment_RegisterDoubleParameter = nullptr;
		pWrapperTable->m_DriverEnvironment_RegisterIntegerParameter = nullptr;
		pWrapperTable->m_DriverEnvironment_RegisterBoolParameter = nullptr;
		pWrapperTable->m_DriverEnvironment_SetStringParameter = nullptr;
		pWrapperTable->m_DriverEnvironment_SetUUIDParameter = nullptr;
		pWrapperTable->m_DriverEnvironment_SetDoubleParameter = nullptr;
		pWrapperTable->m_DriverEnvironment_SetIntegerParameter = nullptr;
		pWrapperTable->m_DriverEnvironment_SetBoolParameter = nullptr;
		pWrapperTable->m_DriverEnvironment_Sleep = nullptr;
		pWrapperTable->m_DriverEnvironment_GetGlobalTimerInMilliseconds = nullptr;
		pWrapperTable->m_DriverEnvironment_LogMessage = nullptr;
		pWrapperTable->m_DriverEnvironment_LogWarning = nullptr;
		pWrapperTable->m_DriverEnvironment_LogInfo = nullptr;
		pWrapperTable->m_DriverEnvironment_CreateEmptyImage = nullptr;
		pWrapperTable->m_DriverEnvironment_LoadPNGImage = nullptr;
		pWrapperTable->m_SignalTrigger_CanTrigger = nullptr;
		pWrapperTable->m_SignalTrigger_Trigger = nullptr;
		pWrapperTable->m_SignalTrigger_WaitForHandling = nullptr;
		pWrapperTable->m_SignalTrigger_GetName = nullptr;
		pWrapperTable->m_SignalTrigger_GetStateMachine = nullptr;
		pWrapperTable->m_SignalTrigger_SetString = nullptr;
		pWrapperTable->m_SignalTrigger_SetUUID = nullptr;
		pWrapperTable->m_SignalTrigger_SetDouble = nullptr;
		pWrapperTable->m_SignalTrigger_SetInteger = nullptr;
		pWrapperTable->m_SignalTrigger_SetBool = nullptr;
		pWrapperTable->m_SignalTrigger_GetStringResult = nullptr;
		pWrapperTable->m_SignalTrigger_GetUUIDResult = nullptr;
		pWrapperTable->m_SignalTrigger_GetDoubleResult = nullptr;
		pWrapperTable->m_SignalTrigger_GetIntegerResult = nullptr;
		pWrapperTable->m_SignalTrigger_GetBoolResult = nullptr;
		pWrapperTable->m_SignalHandler_SignalHandled = nullptr;
		pWrapperTable->m_SignalHandler_GetName = nullptr;
		pWrapperTable->m_SignalHandler_GetSignalID = nullptr;
		pWrapperTable->m_SignalHandler_GetSignalUUID = nullptr;
		pWrapperTable->m_SignalHandler_GetStateMachine = nullptr;
		pWrapperTable->m_SignalHandler_GetString = nullptr;
		pWrapperTable->m_SignalHandler_GetUUID = nullptr;
		pWrapperTable->m_SignalHandler_GetDouble = nullptr;
		pWrapperTable->m_SignalHandler_GetInteger = nullptr;
		pWrapperTable->m_SignalHandler_GetBool = nullptr;
		pWrapperTable->m_SignalHandler_SetStringResult = nullptr;
		pWrapperTable->m_SignalHandler_SetUUIDResult = nullptr;
		pWrapperTable->m_SignalHandler_SetDoubleResult = nullptr;
		pWrapperTable->m_SignalHandler_SetIntegerResult = nullptr;
		pWrapperTable->m_SignalHandler_SetBoolResult = nullptr;
		pWrapperTable->m_StateEnvironment_GetMachineState = nullptr;
		pWrapperTable->m_StateEnvironment_PrepareSignal = nullptr;
		pWrapperTable->m_StateEnvironment_WaitForSignal = nullptr;
		pWrapperTable->m_StateEnvironment_GetUnhandledSignal = nullptr;
		pWrapperTable->m_StateEnvironment_GetUnhandledSignalByUUID = nullptr;
		pWrapperTable->m_StateEnvironment_GetDriverLibrary = nullptr;
		pWrapperTable->m_StateEnvironment_CreateDriverAccess = nullptr;
		pWrapperTable->m_StateEnvironment_GetBuildJob = nullptr;
		pWrapperTable->m_StateEnvironment_UnloadAllToolpathes = nullptr;
		pWrapperTable->m_StateEnvironment_SetNextState = nullptr;
		pWrapperTable->m_StateEnvironment_LogMessage = nullptr;
		pWrapperTable->m_StateEnvironment_LogWarning = nullptr;
		pWrapperTable->m_StateEnvironment_LogInfo = nullptr;
		pWrapperTable->m_StateEnvironment_Sleep = nullptr;
		pWrapperTable->m_StateEnvironment_CheckForTermination = nullptr;
		pWrapperTable->m_StateEnvironment_StoreSignal = nullptr;
		pWrapperTable->m_StateEnvironment_RetrieveSignal = nullptr;
		pWrapperTable->m_StateEnvironment_ClearStoredValue = nullptr;
		pWrapperTable->m_StateEnvironment_SetStringParameter = nullptr;
		pWrapperTable->m_StateEnvironment_SetUUIDParameter = nullptr;
		pWrapperTable->m_StateEnvironment_SetDoubleParameter = nullptr;
		pWrapperTable->m_StateEnvironment_SetIntegerParameter = nullptr;
		pWrapperTable->m_StateEnvironment_SetBoolParameter = nullptr;
		pWrapperTable->m_StateEnvironment_GetStringParameter = nullptr;
		pWrapperTable->m_StateEnvironment_GetUUIDParameter = nullptr;
		pWrapperTable->m_StateEnvironment_GetDoubleParameter = nullptr;
		pWrapperTable->m_StateEnvironment_GetIntegerParameter = nullptr;
		pWrapperTable->m_StateEnvironment_GetBoolParameter = nullptr;
		pWrapperTable->m_StateEnvironment_LoadResourceData = nullptr;
		pWrapperTable->m_StateEnvironment_LoadResourceString = nullptr;
		pWrapperTable->m_StateEnvironment_CreateEmptyImage = nullptr;
		pWrapperTable->m_StateEnvironment_LoadPNGImage = nullptr;
		pWrapperTable->m_StateEnvironment_GetGlobalTimerInMilliseconds = nullptr;
		pWrapperTable->m_StateEnvironment_GetTestEnvironment = nullptr;
		pWrapperTable->m_StateEnvironment_CreateXMLDocument = nullptr;
		pWrapperTable->m_StateEnvironment_ParseXMLString = nullptr;
		pWrapperTable->m_StateEnvironment_ParseXMLData = nullptr;
		pWrapperTable->m_UIEnvironment_ActivateModalDialog = nullptr;
		pWrapperTable->m_UIEnvironment_CloseModalDialog = nullptr;
		pWrapperTable->m_UIEnvironment_ActivatePage = nullptr;
		pWrapperTable->m_UIEnvironment_LogOut = nullptr;
		pWrapperTable->m_UIEnvironment_ShowHint = nullptr;
		pWrapperTable->m_UIEnvironment_ShowHintColored = nullptr;
		pWrapperTable->m_UIEnvironment_HideHint = nullptr;
		pWrapperTable->m_UIEnvironment_ShowMessageDlg = nullptr;
		pWrapperTable->m_UIEnvironment_RetrieveEventSender = nullptr;
		pWrapperTable->m_UIEnvironment_RetrieveEventSenderUUID = nullptr;
		pWrapperTable->m_UIEnvironment_PrepareSignal = nullptr;
		pWrapperTable->m_UIEnvironment_GetMachineState = nullptr;
		pWrapperTable->m_UIEnvironment_LogMessage = nullptr;
		pWrapperTable->m_UIEnvironment_LogWarning = nullptr;
		pWrapperTable->m_UIEnvironment_LogInfo = nullptr;
		pWrapperTable->m_UIEnvironment_GetMachineParameter = nullptr;
		pWrapperTable->m_UIEnvironment_GetMachineParameterAsUUID = nullptr;
		pWrapperTable->m_UIEnvironment_GetMachineParameterAsDouble = nullptr;
		pWrapperTable->m_UIEnvironment_GetMachineParameterAsInteger = nullptr;
		pWrapperTable->m_UIEnvironment_GetMachineParameterAsBool = nullptr;
		pWrapperTable->m_UIEnvironment_GetUIProperty = nullptr;
		pWrapperTable->m_UIEnvironment_GetUIPropertyAsUUID = nullptr;
		pWrapperTable->m_UIEnvironment_GetUIPropertyAsDouble = nullptr;
		pWrapperTable->m_UIEnvironment_GetUIPropertyAsInteger = nullptr;
		pWrapperTable->m_UIEnvironment_GetUIPropertyAsBool = nullptr;
		pWrapperTable->m_UIEnvironment_SetUIProperty = nullptr;
		pWrapperTable->m_UIEnvironment_SetUIPropertyAsUUID = nullptr;
		pWrapperTable->m_UIEnvironment_SetUIPropertyAsDouble = nullptr;
		pWrapperTable->m_UIEnvironment_SetUIPropertyAsInteger = nullptr;
		pWrapperTable->m_UIEnvironment_SetUIPropertyAsBool = nullptr;
		pWrapperTable->m_UIEnvironment_CreateEmptyImage = nullptr;
		pWrapperTable->m_UIEnvironment_LoadPNGImage = nullptr;
		pWrapperTable->m_UIEnvironment_GetGlobalTimerInMilliseconds = nullptr;
		pWrapperTable->m_UIEnvironment_GetTestEnvironment = nullptr;
		pWrapperTable->m_UIEnvironment_CreateXMLDocument = nullptr;
		pWrapperTable->m_UIEnvironment_ParseXMLString = nullptr;
		pWrapperTable->m_UIEnvironment_ParseXMLData = nullptr;
		pWrapperTable->m_GetVersion = nullptr;
		pWrapperTable->m_GetLastError = nullptr;
		pWrapperTable->m_ReleaseInstance = nullptr;
		pWrapperTable->m_AcquireInstance = nullptr;
		pWrapperTable->m_GetSymbolLookupMethod = nullptr;
		
		return LIBMCENV_SUCCESS;
	}

	inline LibMCEnvResult CWrapper::releaseWrapperTable(sLibMCEnvDynamicWrapperTable * pWrapperTable)
	{
		if (pWrapperTable == nullptr)
			return LIBMCENV_ERROR_INVALIDPARAM;
		
		if (pWrapperTable->m_LibraryHandle != nullptr) {
		#ifdef _WIN32
			HMODULE hModule = (HMODULE) pWrapperTable->m_LibraryHandle;
			FreeLibrary(hModule);
		#else // _WIN32
			dlclose(pWrapperTable->m_LibraryHandle);
		#endif // _WIN32
			return initWrapperTable(pWrapperTable);
		}
		
		return LIBMCENV_SUCCESS;
	}

	inline LibMCEnvResult CWrapper::loadWrapperTable(sLibMCEnvDynamicWrapperTable * pWrapperTable, const char * pLibraryFileName)
	{
		if (pWrapperTable == nullptr)
			return LIBMCENV_ERROR_INVALIDPARAM;
		if (pLibraryFileName == nullptr)
			return LIBMCENV_ERROR_INVALIDPARAM;
		
		#ifdef _WIN32
		// Convert filename to UTF16-string
		int nLength = 0;
		while ((pLibraryFileName[nLength] != 0) && (nLength < MAX_PATH))
			nLength++;
		int nBufferSize = nLength * 2 + 2;
		std::vector<wchar_t> wsLibraryFileName(nBufferSize);
		int nResult = MultiByteToWideChar(CP_UTF8, 0, pLibraryFileName, nLength, &wsLibraryFileName[0], nBufferSize);
		if (nResult == 0)
			return LIBMCENV_ERROR_COULDNOTLOADLIBRARY;
		
		HMODULE hLibrary = LoadLibraryW(wsLibraryFileName.data());
		if (hLibrary == 0) 
			return LIBMCENV_ERROR_COULDNOTLOADLIBRARY;
		#else // _WIN32
		void* hLibrary = dlopen(pLibraryFileName, RTLD_LAZY);
		if (hLibrary == 0) 
			return LIBMCENV_ERROR_COULDNOTLOADLIBRARY;
		dlerror();
		#endif // _WIN32
		
		#ifdef _WIN32
		pWrapperTable->m_Iterator_MoveNext = (PLibMCEnvIterator_MoveNextPtr) GetProcAddress(hLibrary, "libmcenv_iterator_movenext");
		#else // _WIN32
		pWrapperTable->m_Iterator_MoveNext = (PLibMCEnvIterator_MoveNextPtr) dlsym(hLibrary, "libmcenv_iterator_movenext");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Iterator_MoveNext == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Iterator_MovePrevious = (PLibMCEnvIterator_MovePreviousPtr) GetProcAddress(hLibrary, "libmcenv_iterator_moveprevious");
		#else // _WIN32
		pWrapperTable->m_Iterator_MovePrevious = (PLibMCEnvIterator_MovePreviousPtr) dlsym(hLibrary, "libmcenv_iterator_moveprevious");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Iterator_MovePrevious == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Iterator_GetCurrent = (PLibMCEnvIterator_GetCurrentPtr) GetProcAddress(hLibrary, "libmcenv_iterator_getcurrent");
		#else // _WIN32
		pWrapperTable->m_Iterator_GetCurrent = (PLibMCEnvIterator_GetCurrentPtr) dlsym(hLibrary, "libmcenv_iterator_getcurrent");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Iterator_GetCurrent == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Iterator_Clone = (PLibMCEnvIterator_ClonePtr) GetProcAddress(hLibrary, "libmcenv_iterator_clone");
		#else // _WIN32
		pWrapperTable->m_Iterator_Clone = (PLibMCEnvIterator_ClonePtr) dlsym(hLibrary, "libmcenv_iterator_clone");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Iterator_Clone == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Iterator_Count = (PLibMCEnvIterator_CountPtr) GetProcAddress(hLibrary, "libmcenv_iterator_count");
		#else // _WIN32
		pWrapperTable->m_Iterator_Count = (PLibMCEnvIterator_CountPtr) dlsym(hLibrary, "libmcenv_iterator_count");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Iterator_Count == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_TestEnvironment_WriteTestOutput = (PLibMCEnvTestEnvironment_WriteTestOutputPtr) GetProcAddress(hLibrary, "libmcenv_testenvironment_writetestoutput");
		#else // _WIN32
		pWrapperTable->m_TestEnvironment_WriteTestOutput = (PLibMCEnvTestEnvironment_WriteTestOutputPtr) dlsym(hLibrary, "libmcenv_testenvironment_writetestoutput");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_TestEnvironment_WriteTestOutput == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ImageData_GetPixelFormat = (PLibMCEnvImageData_GetPixelFormatPtr) GetProcAddress(hLibrary, "libmcenv_imagedata_getpixelformat");
		#else // _WIN32
		pWrapperTable->m_ImageData_GetPixelFormat = (PLibMCEnvImageData_GetPixelFormatPtr) dlsym(hLibrary, "libmcenv_imagedata_getpixelformat");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ImageData_GetPixelFormat == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ImageData_ChangePixelFormat = (PLibMCEnvImageData_ChangePixelFormatPtr) GetProcAddress(hLibrary, "libmcenv_imagedata_changepixelformat");
		#else // _WIN32
		pWrapperTable->m_ImageData_ChangePixelFormat = (PLibMCEnvImageData_ChangePixelFormatPtr) dlsym(hLibrary, "libmcenv_imagedata_changepixelformat");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ImageData_ChangePixelFormat == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ImageData_GetDPI = (PLibMCEnvImageData_GetDPIPtr) GetProcAddress(hLibrary, "libmcenv_imagedata_getdpi");
		#else // _WIN32
		pWrapperTable->m_ImageData_GetDPI = (PLibMCEnvImageData_GetDPIPtr) dlsym(hLibrary, "libmcenv_imagedata_getdpi");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ImageData_GetDPI == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ImageData_SetDPI = (PLibMCEnvImageData_SetDPIPtr) GetProcAddress(hLibrary, "libmcenv_imagedata_setdpi");
		#else // _WIN32
		pWrapperTable->m_ImageData_SetDPI = (PLibMCEnvImageData_SetDPIPtr) dlsym(hLibrary, "libmcenv_imagedata_setdpi");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ImageData_SetDPI == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ImageData_GetSizeInMM = (PLibMCEnvImageData_GetSizeInMMPtr) GetProcAddress(hLibrary, "libmcenv_imagedata_getsizeinmm");
		#else // _WIN32
		pWrapperTable->m_ImageData_GetSizeInMM = (PLibMCEnvImageData_GetSizeInMMPtr) dlsym(hLibrary, "libmcenv_imagedata_getsizeinmm");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ImageData_GetSizeInMM == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ImageData_GetSizeInPixels = (PLibMCEnvImageData_GetSizeInPixelsPtr) GetProcAddress(hLibrary, "libmcenv_imagedata_getsizeinpixels");
		#else // _WIN32
		pWrapperTable->m_ImageData_GetSizeInPixels = (PLibMCEnvImageData_GetSizeInPixelsPtr) dlsym(hLibrary, "libmcenv_imagedata_getsizeinpixels");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ImageData_GetSizeInPixels == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ImageData_ResizeImage = (PLibMCEnvImageData_ResizeImagePtr) GetProcAddress(hLibrary, "libmcenv_imagedata_resizeimage");
		#else // _WIN32
		pWrapperTable->m_ImageData_ResizeImage = (PLibMCEnvImageData_ResizeImagePtr) dlsym(hLibrary, "libmcenv_imagedata_resizeimage");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ImageData_ResizeImage == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ImageData_LoadPNG = (PLibMCEnvImageData_LoadPNGPtr) GetProcAddress(hLibrary, "libmcenv_imagedata_loadpng");
		#else // _WIN32
		pWrapperTable->m_ImageData_LoadPNG = (PLibMCEnvImageData_LoadPNGPtr) dlsym(hLibrary, "libmcenv_imagedata_loadpng");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ImageData_LoadPNG == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ImageData_EncodePNG = (PLibMCEnvImageData_EncodePNGPtr) GetProcAddress(hLibrary, "libmcenv_imagedata_encodepng");
		#else // _WIN32
		pWrapperTable->m_ImageData_EncodePNG = (PLibMCEnvImageData_EncodePNGPtr) dlsym(hLibrary, "libmcenv_imagedata_encodepng");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ImageData_EncodePNG == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ImageData_GetEncodedPNGData = (PLibMCEnvImageData_GetEncodedPNGDataPtr) GetProcAddress(hLibrary, "libmcenv_imagedata_getencodedpngdata");
		#else // _WIN32
		pWrapperTable->m_ImageData_GetEncodedPNGData = (PLibMCEnvImageData_GetEncodedPNGDataPtr) dlsym(hLibrary, "libmcenv_imagedata_getencodedpngdata");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ImageData_GetEncodedPNGData == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ImageData_ClearEncodedPNGData = (PLibMCEnvImageData_ClearEncodedPNGDataPtr) GetProcAddress(hLibrary, "libmcenv_imagedata_clearencodedpngdata");
		#else // _WIN32
		pWrapperTable->m_ImageData_ClearEncodedPNGData = (PLibMCEnvImageData_ClearEncodedPNGDataPtr) dlsym(hLibrary, "libmcenv_imagedata_clearencodedpngdata");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ImageData_ClearEncodedPNGData == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ImageData_Clear = (PLibMCEnvImageData_ClearPtr) GetProcAddress(hLibrary, "libmcenv_imagedata_clear");
		#else // _WIN32
		pWrapperTable->m_ImageData_Clear = (PLibMCEnvImageData_ClearPtr) dlsym(hLibrary, "libmcenv_imagedata_clear");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ImageData_Clear == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ImageData_GetPixel = (PLibMCEnvImageData_GetPixelPtr) GetProcAddress(hLibrary, "libmcenv_imagedata_getpixel");
		#else // _WIN32
		pWrapperTable->m_ImageData_GetPixel = (PLibMCEnvImageData_GetPixelPtr) dlsym(hLibrary, "libmcenv_imagedata_getpixel");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ImageData_GetPixel == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ImageData_SetPixel = (PLibMCEnvImageData_SetPixelPtr) GetProcAddress(hLibrary, "libmcenv_imagedata_setpixel");
		#else // _WIN32
		pWrapperTable->m_ImageData_SetPixel = (PLibMCEnvImageData_SetPixelPtr) dlsym(hLibrary, "libmcenv_imagedata_setpixel");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ImageData_SetPixel == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ImageData_GetPixelRange = (PLibMCEnvImageData_GetPixelRangePtr) GetProcAddress(hLibrary, "libmcenv_imagedata_getpixelrange");
		#else // _WIN32
		pWrapperTable->m_ImageData_GetPixelRange = (PLibMCEnvImageData_GetPixelRangePtr) dlsym(hLibrary, "libmcenv_imagedata_getpixelrange");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ImageData_GetPixelRange == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ImageData_SetPixelRange = (PLibMCEnvImageData_SetPixelRangePtr) GetProcAddress(hLibrary, "libmcenv_imagedata_setpixelrange");
		#else // _WIN32
		pWrapperTable->m_ImageData_SetPixelRange = (PLibMCEnvImageData_SetPixelRangePtr) dlsym(hLibrary, "libmcenv_imagedata_setpixelrange");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ImageData_SetPixelRange == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ToolpathPart_GetName = (PLibMCEnvToolpathPart_GetNamePtr) GetProcAddress(hLibrary, "libmcenv_toolpathpart_getname");
		#else // _WIN32
		pWrapperTable->m_ToolpathPart_GetName = (PLibMCEnvToolpathPart_GetNamePtr) dlsym(hLibrary, "libmcenv_toolpathpart_getname");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ToolpathPart_GetName == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ToolpathPart_GetUUID = (PLibMCEnvToolpathPart_GetUUIDPtr) GetProcAddress(hLibrary, "libmcenv_toolpathpart_getuuid");
		#else // _WIN32
		pWrapperTable->m_ToolpathPart_GetUUID = (PLibMCEnvToolpathPart_GetUUIDPtr) dlsym(hLibrary, "libmcenv_toolpathpart_getuuid");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ToolpathPart_GetUUID == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ToolpathPart_GetMeshUUID = (PLibMCEnvToolpathPart_GetMeshUUIDPtr) GetProcAddress(hLibrary, "libmcenv_toolpathpart_getmeshuuid");
		#else // _WIN32
		pWrapperTable->m_ToolpathPart_GetMeshUUID = (PLibMCEnvToolpathPart_GetMeshUUIDPtr) dlsym(hLibrary, "libmcenv_toolpathpart_getmeshuuid");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ToolpathPart_GetMeshUUID == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ToolpathPart_GetTransform = (PLibMCEnvToolpathPart_GetTransformPtr) GetProcAddress(hLibrary, "libmcenv_toolpathpart_gettransform");
		#else // _WIN32
		pWrapperTable->m_ToolpathPart_GetTransform = (PLibMCEnvToolpathPart_GetTransformPtr) dlsym(hLibrary, "libmcenv_toolpathpart_gettransform");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ToolpathPart_GetTransform == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ToolpathLayer_GetLayerDataUUID = (PLibMCEnvToolpathLayer_GetLayerDataUUIDPtr) GetProcAddress(hLibrary, "libmcenv_toolpathlayer_getlayerdatauuid");
		#else // _WIN32
		pWrapperTable->m_ToolpathLayer_GetLayerDataUUID = (PLibMCEnvToolpathLayer_GetLayerDataUUIDPtr) dlsym(hLibrary, "libmcenv_toolpathlayer_getlayerdatauuid");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ToolpathLayer_GetLayerDataUUID == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ToolpathLayer_GetSegmentCount = (PLibMCEnvToolpathLayer_GetSegmentCountPtr) GetProcAddress(hLibrary, "libmcenv_toolpathlayer_getsegmentcount");
		#else // _WIN32
		pWrapperTable->m_ToolpathLayer_GetSegmentCount = (PLibMCEnvToolpathLayer_GetSegmentCountPtr) dlsym(hLibrary, "libmcenv_toolpathlayer_getsegmentcount");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ToolpathLayer_GetSegmentCount == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ToolpathLayer_GetSegmentInfo = (PLibMCEnvToolpathLayer_GetSegmentInfoPtr) GetProcAddress(hLibrary, "libmcenv_toolpathlayer_getsegmentinfo");
		#else // _WIN32
		pWrapperTable->m_ToolpathLayer_GetSegmentInfo = (PLibMCEnvToolpathLayer_GetSegmentInfoPtr) dlsym(hLibrary, "libmcenv_toolpathlayer_getsegmentinfo");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ToolpathLayer_GetSegmentInfo == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ToolpathLayer_GetSegmentType = (PLibMCEnvToolpathLayer_GetSegmentTypePtr) GetProcAddress(hLibrary, "libmcenv_toolpathlayer_getsegmenttype");
		#else // _WIN32
		pWrapperTable->m_ToolpathLayer_GetSegmentType = (PLibMCEnvToolpathLayer_GetSegmentTypePtr) dlsym(hLibrary, "libmcenv_toolpathlayer_getsegmenttype");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ToolpathLayer_GetSegmentType == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ToolpathLayer_GetSegmentPointCount = (PLibMCEnvToolpathLayer_GetSegmentPointCountPtr) GetProcAddress(hLibrary, "libmcenv_toolpathlayer_getsegmentpointcount");
		#else // _WIN32
		pWrapperTable->m_ToolpathLayer_GetSegmentPointCount = (PLibMCEnvToolpathLayer_GetSegmentPointCountPtr) dlsym(hLibrary, "libmcenv_toolpathlayer_getsegmentpointcount");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ToolpathLayer_GetSegmentPointCount == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ToolpathLayer_GetSegmentHatchCount = (PLibMCEnvToolpathLayer_GetSegmentHatchCountPtr) GetProcAddress(hLibrary, "libmcenv_toolpathlayer_getsegmenthatchcount");
		#else // _WIN32
		pWrapperTable->m_ToolpathLayer_GetSegmentHatchCount = (PLibMCEnvToolpathLayer_GetSegmentHatchCountPtr) dlsym(hLibrary, "libmcenv_toolpathlayer_getsegmenthatchcount");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ToolpathLayer_GetSegmentHatchCount == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ToolpathLayer_GetSegmentProfileUUID = (PLibMCEnvToolpathLayer_GetSegmentProfileUUIDPtr) GetProcAddress(hLibrary, "libmcenv_toolpathlayer_getsegmentprofileuuid");
		#else // _WIN32
		pWrapperTable->m_ToolpathLayer_GetSegmentProfileUUID = (PLibMCEnvToolpathLayer_GetSegmentProfileUUIDPtr) dlsym(hLibrary, "libmcenv_toolpathlayer_getsegmentprofileuuid");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ToolpathLayer_GetSegmentProfileUUID == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ToolpathLayer_SegmentProfileHasValue = (PLibMCEnvToolpathLayer_SegmentProfileHasValuePtr) GetProcAddress(hLibrary, "libmcenv_toolpathlayer_segmentprofilehasvalue");
		#else // _WIN32
		pWrapperTable->m_ToolpathLayer_SegmentProfileHasValue = (PLibMCEnvToolpathLayer_SegmentProfileHasValuePtr) dlsym(hLibrary, "libmcenv_toolpathlayer_segmentprofilehasvalue");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ToolpathLayer_SegmentProfileHasValue == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ToolpathLayer_GetSegmentProfileValue = (PLibMCEnvToolpathLayer_GetSegmentProfileValuePtr) GetProcAddress(hLibrary, "libmcenv_toolpathlayer_getsegmentprofilevalue");
		#else // _WIN32
		pWrapperTable->m_ToolpathLayer_GetSegmentProfileValue = (PLibMCEnvToolpathLayer_GetSegmentProfileValuePtr) dlsym(hLibrary, "libmcenv_toolpathlayer_getsegmentprofilevalue");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ToolpathLayer_GetSegmentProfileValue == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ToolpathLayer_GetSegmentProfileValueDef = (PLibMCEnvToolpathLayer_GetSegmentProfileValueDefPtr) GetProcAddress(hLibrary, "libmcenv_toolpathlayer_getsegmentprofilevaluedef");
		#else // _WIN32
		pWrapperTable->m_ToolpathLayer_GetSegmentProfileValueDef = (PLibMCEnvToolpathLayer_GetSegmentProfileValueDefPtr) dlsym(hLibrary, "libmcenv_toolpathlayer_getsegmentprofilevaluedef");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ToolpathLayer_GetSegmentProfileValueDef == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ToolpathLayer_GetSegmentProfileDoubleValue = (PLibMCEnvToolpathLayer_GetSegmentProfileDoubleValuePtr) GetProcAddress(hLibrary, "libmcenv_toolpathlayer_getsegmentprofiledoublevalue");
		#else // _WIN32
		pWrapperTable->m_ToolpathLayer_GetSegmentProfileDoubleValue = (PLibMCEnvToolpathLayer_GetSegmentProfileDoubleValuePtr) dlsym(hLibrary, "libmcenv_toolpathlayer_getsegmentprofiledoublevalue");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ToolpathLayer_GetSegmentProfileDoubleValue == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ToolpathLayer_GetSegmentProfileDoubleValueDef = (PLibMCEnvToolpathLayer_GetSegmentProfileDoubleValueDefPtr) GetProcAddress(hLibrary, "libmcenv_toolpathlayer_getsegmentprofiledoublevaluedef");
		#else // _WIN32
		pWrapperTable->m_ToolpathLayer_GetSegmentProfileDoubleValueDef = (PLibMCEnvToolpathLayer_GetSegmentProfileDoubleValueDefPtr) dlsym(hLibrary, "libmcenv_toolpathlayer_getsegmentprofiledoublevaluedef");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ToolpathLayer_GetSegmentProfileDoubleValueDef == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ToolpathLayer_GetSegmentProfileIntegerValue = (PLibMCEnvToolpathLayer_GetSegmentProfileIntegerValuePtr) GetProcAddress(hLibrary, "libmcenv_toolpathlayer_getsegmentprofileintegervalue");
		#else // _WIN32
		pWrapperTable->m_ToolpathLayer_GetSegmentProfileIntegerValue = (PLibMCEnvToolpathLayer_GetSegmentProfileIntegerValuePtr) dlsym(hLibrary, "libmcenv_toolpathlayer_getsegmentprofileintegervalue");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ToolpathLayer_GetSegmentProfileIntegerValue == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ToolpathLayer_GetSegmentProfileIntegerValueDef = (PLibMCEnvToolpathLayer_GetSegmentProfileIntegerValueDefPtr) GetProcAddress(hLibrary, "libmcenv_toolpathlayer_getsegmentprofileintegervaluedef");
		#else // _WIN32
		pWrapperTable->m_ToolpathLayer_GetSegmentProfileIntegerValueDef = (PLibMCEnvToolpathLayer_GetSegmentProfileIntegerValueDefPtr) dlsym(hLibrary, "libmcenv_toolpathlayer_getsegmentprofileintegervaluedef");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ToolpathLayer_GetSegmentProfileIntegerValueDef == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ToolpathLayer_GetSegmentProfileBoolValue = (PLibMCEnvToolpathLayer_GetSegmentProfileBoolValuePtr) GetProcAddress(hLibrary, "libmcenv_toolpathlayer_getsegmentprofileboolvalue");
		#else // _WIN32
		pWrapperTable->m_ToolpathLayer_GetSegmentProfileBoolValue = (PLibMCEnvToolpathLayer_GetSegmentProfileBoolValuePtr) dlsym(hLibrary, "libmcenv_toolpathlayer_getsegmentprofileboolvalue");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ToolpathLayer_GetSegmentProfileBoolValue == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ToolpathLayer_GetSegmentProfileBoolValueDef = (PLibMCEnvToolpathLayer_GetSegmentProfileBoolValueDefPtr) GetProcAddress(hLibrary, "libmcenv_toolpathlayer_getsegmentprofileboolvaluedef");
		#else // _WIN32
		pWrapperTable->m_ToolpathLayer_GetSegmentProfileBoolValueDef = (PLibMCEnvToolpathLayer_GetSegmentProfileBoolValueDefPtr) dlsym(hLibrary, "libmcenv_toolpathlayer_getsegmentprofileboolvaluedef");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ToolpathLayer_GetSegmentProfileBoolValueDef == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ToolpathLayer_GetSegmentProfileTypedValue = (PLibMCEnvToolpathLayer_GetSegmentProfileTypedValuePtr) GetProcAddress(hLibrary, "libmcenv_toolpathlayer_getsegmentprofiletypedvalue");
		#else // _WIN32
		pWrapperTable->m_ToolpathLayer_GetSegmentProfileTypedValue = (PLibMCEnvToolpathLayer_GetSegmentProfileTypedValuePtr) dlsym(hLibrary, "libmcenv_toolpathlayer_getsegmentprofiletypedvalue");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ToolpathLayer_GetSegmentProfileTypedValue == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ToolpathLayer_GetSegmentProfileTypedValueDef = (PLibMCEnvToolpathLayer_GetSegmentProfileTypedValueDefPtr) GetProcAddress(hLibrary, "libmcenv_toolpathlayer_getsegmentprofiletypedvaluedef");
		#else // _WIN32
		pWrapperTable->m_ToolpathLayer_GetSegmentProfileTypedValueDef = (PLibMCEnvToolpathLayer_GetSegmentProfileTypedValueDefPtr) dlsym(hLibrary, "libmcenv_toolpathlayer_getsegmentprofiletypedvaluedef");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ToolpathLayer_GetSegmentProfileTypedValueDef == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ToolpathLayer_GetSegmentPartUUID = (PLibMCEnvToolpathLayer_GetSegmentPartUUIDPtr) GetProcAddress(hLibrary, "libmcenv_toolpathlayer_getsegmentpartuuid");
		#else // _WIN32
		pWrapperTable->m_ToolpathLayer_GetSegmentPartUUID = (PLibMCEnvToolpathLayer_GetSegmentPartUUIDPtr) dlsym(hLibrary, "libmcenv_toolpathlayer_getsegmentpartuuid");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ToolpathLayer_GetSegmentPartUUID == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ToolpathLayer_GetSegmentPointData = (PLibMCEnvToolpathLayer_GetSegmentPointDataPtr) GetProcAddress(hLibrary, "libmcenv_toolpathlayer_getsegmentpointdata");
		#else // _WIN32
		pWrapperTable->m_ToolpathLayer_GetSegmentPointData = (PLibMCEnvToolpathLayer_GetSegmentPointDataPtr) dlsym(hLibrary, "libmcenv_toolpathlayer_getsegmentpointdata");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ToolpathLayer_GetSegmentPointData == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ToolpathLayer_GetSegmentHatchData = (PLibMCEnvToolpathLayer_GetSegmentHatchDataPtr) GetProcAddress(hLibrary, "libmcenv_toolpathlayer_getsegmenthatchdata");
		#else // _WIN32
		pWrapperTable->m_ToolpathLayer_GetSegmentHatchData = (PLibMCEnvToolpathLayer_GetSegmentHatchDataPtr) dlsym(hLibrary, "libmcenv_toolpathlayer_getsegmenthatchdata");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ToolpathLayer_GetSegmentHatchData == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ToolpathLayer_GetSegmentPointDataInMM = (PLibMCEnvToolpathLayer_GetSegmentPointDataInMMPtr) GetProcAddress(hLibrary, "libmcenv_toolpathlayer_getsegmentpointdatainmm");
		#else // _WIN32
		pWrapperTable->m_ToolpathLayer_GetSegmentPointDataInMM = (PLibMCEnvToolpathLayer_GetSegmentPointDataInMMPtr) dlsym(hLibrary, "libmcenv_toolpathlayer_getsegmentpointdatainmm");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ToolpathLayer_GetSegmentPointDataInMM == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ToolpathLayer_GetSegmentHatchDataInMM = (PLibMCEnvToolpathLayer_GetSegmentHatchDataInMMPtr) GetProcAddress(hLibrary, "libmcenv_toolpathlayer_getsegmenthatchdatainmm");
		#else // _WIN32
		pWrapperTable->m_ToolpathLayer_GetSegmentHatchDataInMM = (PLibMCEnvToolpathLayer_GetSegmentHatchDataInMMPtr) dlsym(hLibrary, "libmcenv_toolpathlayer_getsegmenthatchdatainmm");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ToolpathLayer_GetSegmentHatchDataInMM == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ToolpathLayer_GetZValue = (PLibMCEnvToolpathLayer_GetZValuePtr) GetProcAddress(hLibrary, "libmcenv_toolpathlayer_getzvalue");
		#else // _WIN32
		pWrapperTable->m_ToolpathLayer_GetZValue = (PLibMCEnvToolpathLayer_GetZValuePtr) dlsym(hLibrary, "libmcenv_toolpathlayer_getzvalue");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ToolpathLayer_GetZValue == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ToolpathLayer_GetZValueInMM = (PLibMCEnvToolpathLayer_GetZValueInMMPtr) GetProcAddress(hLibrary, "libmcenv_toolpathlayer_getzvalueinmm");
		#else // _WIN32
		pWrapperTable->m_ToolpathLayer_GetZValueInMM = (PLibMCEnvToolpathLayer_GetZValueInMMPtr) dlsym(hLibrary, "libmcenv_toolpathlayer_getzvalueinmm");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ToolpathLayer_GetZValueInMM == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ToolpathLayer_GetUnits = (PLibMCEnvToolpathLayer_GetUnitsPtr) GetProcAddress(hLibrary, "libmcenv_toolpathlayer_getunits");
		#else // _WIN32
		pWrapperTable->m_ToolpathLayer_GetUnits = (PLibMCEnvToolpathLayer_GetUnitsPtr) dlsym(hLibrary, "libmcenv_toolpathlayer_getunits");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ToolpathLayer_GetUnits == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ToolpathAccessor_GetStorageUUID = (PLibMCEnvToolpathAccessor_GetStorageUUIDPtr) GetProcAddress(hLibrary, "libmcenv_toolpathaccessor_getstorageuuid");
		#else // _WIN32
		pWrapperTable->m_ToolpathAccessor_GetStorageUUID = (PLibMCEnvToolpathAccessor_GetStorageUUIDPtr) dlsym(hLibrary, "libmcenv_toolpathaccessor_getstorageuuid");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ToolpathAccessor_GetStorageUUID == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ToolpathAccessor_GetLayerCount = (PLibMCEnvToolpathAccessor_GetLayerCountPtr) GetProcAddress(hLibrary, "libmcenv_toolpathaccessor_getlayercount");
		#else // _WIN32
		pWrapperTable->m_ToolpathAccessor_GetLayerCount = (PLibMCEnvToolpathAccessor_GetLayerCountPtr) dlsym(hLibrary, "libmcenv_toolpathaccessor_getlayercount");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ToolpathAccessor_GetLayerCount == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ToolpathAccessor_LoadLayer = (PLibMCEnvToolpathAccessor_LoadLayerPtr) GetProcAddress(hLibrary, "libmcenv_toolpathaccessor_loadlayer");
		#else // _WIN32
		pWrapperTable->m_ToolpathAccessor_LoadLayer = (PLibMCEnvToolpathAccessor_LoadLayerPtr) dlsym(hLibrary, "libmcenv_toolpathaccessor_loadlayer");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ToolpathAccessor_LoadLayer == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ToolpathAccessor_GetUnits = (PLibMCEnvToolpathAccessor_GetUnitsPtr) GetProcAddress(hLibrary, "libmcenv_toolpathaccessor_getunits");
		#else // _WIN32
		pWrapperTable->m_ToolpathAccessor_GetUnits = (PLibMCEnvToolpathAccessor_GetUnitsPtr) dlsym(hLibrary, "libmcenv_toolpathaccessor_getunits");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ToolpathAccessor_GetUnits == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ToolpathAccessor_HasMetaData = (PLibMCEnvToolpathAccessor_HasMetaDataPtr) GetProcAddress(hLibrary, "libmcenv_toolpathaccessor_hasmetadata");
		#else // _WIN32
		pWrapperTable->m_ToolpathAccessor_HasMetaData = (PLibMCEnvToolpathAccessor_HasMetaDataPtr) dlsym(hLibrary, "libmcenv_toolpathaccessor_hasmetadata");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ToolpathAccessor_HasMetaData == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ToolpathAccessor_GetMetaDataValue = (PLibMCEnvToolpathAccessor_GetMetaDataValuePtr) GetProcAddress(hLibrary, "libmcenv_toolpathaccessor_getmetadatavalue");
		#else // _WIN32
		pWrapperTable->m_ToolpathAccessor_GetMetaDataValue = (PLibMCEnvToolpathAccessor_GetMetaDataValuePtr) dlsym(hLibrary, "libmcenv_toolpathaccessor_getmetadatavalue");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ToolpathAccessor_GetMetaDataValue == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ToolpathAccessor_GetMetaDataType = (PLibMCEnvToolpathAccessor_GetMetaDataTypePtr) GetProcAddress(hLibrary, "libmcenv_toolpathaccessor_getmetadatatype");
		#else // _WIN32
		pWrapperTable->m_ToolpathAccessor_GetMetaDataType = (PLibMCEnvToolpathAccessor_GetMetaDataTypePtr) dlsym(hLibrary, "libmcenv_toolpathaccessor_getmetadatatype");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ToolpathAccessor_GetMetaDataType == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ToolpathAccessor_GetPartCount = (PLibMCEnvToolpathAccessor_GetPartCountPtr) GetProcAddress(hLibrary, "libmcenv_toolpathaccessor_getpartcount");
		#else // _WIN32
		pWrapperTable->m_ToolpathAccessor_GetPartCount = (PLibMCEnvToolpathAccessor_GetPartCountPtr) dlsym(hLibrary, "libmcenv_toolpathaccessor_getpartcount");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ToolpathAccessor_GetPartCount == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ToolpathAccessor_GetPart = (PLibMCEnvToolpathAccessor_GetPartPtr) GetProcAddress(hLibrary, "libmcenv_toolpathaccessor_getpart");
		#else // _WIN32
		pWrapperTable->m_ToolpathAccessor_GetPart = (PLibMCEnvToolpathAccessor_GetPartPtr) dlsym(hLibrary, "libmcenv_toolpathaccessor_getpart");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ToolpathAccessor_GetPart == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ToolpathAccessor_FindPartByUUID = (PLibMCEnvToolpathAccessor_FindPartByUUIDPtr) GetProcAddress(hLibrary, "libmcenv_toolpathaccessor_findpartbyuuid");
		#else // _WIN32
		pWrapperTable->m_ToolpathAccessor_FindPartByUUID = (PLibMCEnvToolpathAccessor_FindPartByUUIDPtr) dlsym(hLibrary, "libmcenv_toolpathaccessor_findpartbyuuid");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ToolpathAccessor_FindPartByUUID == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ToolpathAccessor_GetBuildHeightInUnits = (PLibMCEnvToolpathAccessor_GetBuildHeightInUnitsPtr) GetProcAddress(hLibrary, "libmcenv_toolpathaccessor_getbuildheightinunits");
		#else // _WIN32
		pWrapperTable->m_ToolpathAccessor_GetBuildHeightInUnits = (PLibMCEnvToolpathAccessor_GetBuildHeightInUnitsPtr) dlsym(hLibrary, "libmcenv_toolpathaccessor_getbuildheightinunits");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ToolpathAccessor_GetBuildHeightInUnits == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ToolpathAccessor_GetZValueInUnits = (PLibMCEnvToolpathAccessor_GetZValueInUnitsPtr) GetProcAddress(hLibrary, "libmcenv_toolpathaccessor_getzvalueinunits");
		#else // _WIN32
		pWrapperTable->m_ToolpathAccessor_GetZValueInUnits = (PLibMCEnvToolpathAccessor_GetZValueInUnitsPtr) dlsym(hLibrary, "libmcenv_toolpathaccessor_getzvalueinunits");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ToolpathAccessor_GetZValueInUnits == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ToolpathAccessor_GetBuildHeightInMM = (PLibMCEnvToolpathAccessor_GetBuildHeightInMMPtr) GetProcAddress(hLibrary, "libmcenv_toolpathaccessor_getbuildheightinmm");
		#else // _WIN32
		pWrapperTable->m_ToolpathAccessor_GetBuildHeightInMM = (PLibMCEnvToolpathAccessor_GetBuildHeightInMMPtr) dlsym(hLibrary, "libmcenv_toolpathaccessor_getbuildheightinmm");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ToolpathAccessor_GetBuildHeightInMM == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ToolpathAccessor_GetZValueInMM = (PLibMCEnvToolpathAccessor_GetZValueInMMPtr) GetProcAddress(hLibrary, "libmcenv_toolpathaccessor_getzvalueinmm");
		#else // _WIN32
		pWrapperTable->m_ToolpathAccessor_GetZValueInMM = (PLibMCEnvToolpathAccessor_GetZValueInMMPtr) dlsym(hLibrary, "libmcenv_toolpathaccessor_getzvalueinmm");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ToolpathAccessor_GetZValueInMM == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Build_GetName = (PLibMCEnvBuild_GetNamePtr) GetProcAddress(hLibrary, "libmcenv_build_getname");
		#else // _WIN32
		pWrapperTable->m_Build_GetName = (PLibMCEnvBuild_GetNamePtr) dlsym(hLibrary, "libmcenv_build_getname");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Build_GetName == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Build_GetBuildUUID = (PLibMCEnvBuild_GetBuildUUIDPtr) GetProcAddress(hLibrary, "libmcenv_build_getbuilduuid");
		#else // _WIN32
		pWrapperTable->m_Build_GetBuildUUID = (PLibMCEnvBuild_GetBuildUUIDPtr) dlsym(hLibrary, "libmcenv_build_getbuilduuid");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Build_GetBuildUUID == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Build_GetStorageUUID = (PLibMCEnvBuild_GetStorageUUIDPtr) GetProcAddress(hLibrary, "libmcenv_build_getstorageuuid");
		#else // _WIN32
		pWrapperTable->m_Build_GetStorageUUID = (PLibMCEnvBuild_GetStorageUUIDPtr) dlsym(hLibrary, "libmcenv_build_getstorageuuid");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Build_GetStorageUUID == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Build_GetStorageSHA256 = (PLibMCEnvBuild_GetStorageSHA256Ptr) GetProcAddress(hLibrary, "libmcenv_build_getstoragesha256");
		#else // _WIN32
		pWrapperTable->m_Build_GetStorageSHA256 = (PLibMCEnvBuild_GetStorageSHA256Ptr) dlsym(hLibrary, "libmcenv_build_getstoragesha256");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Build_GetStorageSHA256 == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Build_GetLayerCount = (PLibMCEnvBuild_GetLayerCountPtr) GetProcAddress(hLibrary, "libmcenv_build_getlayercount");
		#else // _WIN32
		pWrapperTable->m_Build_GetLayerCount = (PLibMCEnvBuild_GetLayerCountPtr) dlsym(hLibrary, "libmcenv_build_getlayercount");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Build_GetLayerCount == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Build_GetBuildHeightInMM = (PLibMCEnvBuild_GetBuildHeightInMMPtr) GetProcAddress(hLibrary, "libmcenv_build_getbuildheightinmm");
		#else // _WIN32
		pWrapperTable->m_Build_GetBuildHeightInMM = (PLibMCEnvBuild_GetBuildHeightInMMPtr) dlsym(hLibrary, "libmcenv_build_getbuildheightinmm");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Build_GetBuildHeightInMM == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Build_GetZValueInMM = (PLibMCEnvBuild_GetZValueInMMPtr) GetProcAddress(hLibrary, "libmcenv_build_getzvalueinmm");
		#else // _WIN32
		pWrapperTable->m_Build_GetZValueInMM = (PLibMCEnvBuild_GetZValueInMMPtr) dlsym(hLibrary, "libmcenv_build_getzvalueinmm");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Build_GetZValueInMM == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Build_LoadToolpath = (PLibMCEnvBuild_LoadToolpathPtr) GetProcAddress(hLibrary, "libmcenv_build_loadtoolpath");
		#else // _WIN32
		pWrapperTable->m_Build_LoadToolpath = (PLibMCEnvBuild_LoadToolpathPtr) dlsym(hLibrary, "libmcenv_build_loadtoolpath");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Build_LoadToolpath == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Build_UnloadToolpath = (PLibMCEnvBuild_UnloadToolpathPtr) GetProcAddress(hLibrary, "libmcenv_build_unloadtoolpath");
		#else // _WIN32
		pWrapperTable->m_Build_UnloadToolpath = (PLibMCEnvBuild_UnloadToolpathPtr) dlsym(hLibrary, "libmcenv_build_unloadtoolpath");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Build_UnloadToolpath == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Build_ToolpathIsLoaded = (PLibMCEnvBuild_ToolpathIsLoadedPtr) GetProcAddress(hLibrary, "libmcenv_build_toolpathisloaded");
		#else // _WIN32
		pWrapperTable->m_Build_ToolpathIsLoaded = (PLibMCEnvBuild_ToolpathIsLoadedPtr) dlsym(hLibrary, "libmcenv_build_toolpathisloaded");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Build_ToolpathIsLoaded == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Build_CreateToolpathAccessor = (PLibMCEnvBuild_CreateToolpathAccessorPtr) GetProcAddress(hLibrary, "libmcenv_build_createtoolpathaccessor");
		#else // _WIN32
		pWrapperTable->m_Build_CreateToolpathAccessor = (PLibMCEnvBuild_CreateToolpathAccessorPtr) dlsym(hLibrary, "libmcenv_build_createtoolpathaccessor");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Build_CreateToolpathAccessor == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Build_AddBinaryData = (PLibMCEnvBuild_AddBinaryDataPtr) GetProcAddress(hLibrary, "libmcenv_build_addbinarydata");
		#else // _WIN32
		pWrapperTable->m_Build_AddBinaryData = (PLibMCEnvBuild_AddBinaryDataPtr) dlsym(hLibrary, "libmcenv_build_addbinarydata");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Build_AddBinaryData == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_WorkingFileExecution_GetStatus = (PLibMCEnvWorkingFileExecution_GetStatusPtr) GetProcAddress(hLibrary, "libmcenv_workingfileexecution_getstatus");
		#else // _WIN32
		pWrapperTable->m_WorkingFileExecution_GetStatus = (PLibMCEnvWorkingFileExecution_GetStatusPtr) dlsym(hLibrary, "libmcenv_workingfileexecution_getstatus");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_WorkingFileExecution_GetStatus == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_WorkingFileExecution_ReturnStdOut = (PLibMCEnvWorkingFileExecution_ReturnStdOutPtr) GetProcAddress(hLibrary, "libmcenv_workingfileexecution_returnstdout");
		#else // _WIN32
		pWrapperTable->m_WorkingFileExecution_ReturnStdOut = (PLibMCEnvWorkingFileExecution_ReturnStdOutPtr) dlsym(hLibrary, "libmcenv_workingfileexecution_returnstdout");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_WorkingFileExecution_ReturnStdOut == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_WorkingFile_GetAbsoluteFileName = (PLibMCEnvWorkingFile_GetAbsoluteFileNamePtr) GetProcAddress(hLibrary, "libmcenv_workingfile_getabsolutefilename");
		#else // _WIN32
		pWrapperTable->m_WorkingFile_GetAbsoluteFileName = (PLibMCEnvWorkingFile_GetAbsoluteFileNamePtr) dlsym(hLibrary, "libmcenv_workingfile_getabsolutefilename");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_WorkingFile_GetAbsoluteFileName == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_WorkingFile_GetSize = (PLibMCEnvWorkingFile_GetSizePtr) GetProcAddress(hLibrary, "libmcenv_workingfile_getsize");
		#else // _WIN32
		pWrapperTable->m_WorkingFile_GetSize = (PLibMCEnvWorkingFile_GetSizePtr) dlsym(hLibrary, "libmcenv_workingfile_getsize");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_WorkingFile_GetSize == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_WorkingFile_CalculateSHA2 = (PLibMCEnvWorkingFile_CalculateSHA2Ptr) GetProcAddress(hLibrary, "libmcenv_workingfile_calculatesha2");
		#else // _WIN32
		pWrapperTable->m_WorkingFile_CalculateSHA2 = (PLibMCEnvWorkingFile_CalculateSHA2Ptr) dlsym(hLibrary, "libmcenv_workingfile_calculatesha2");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_WorkingFile_CalculateSHA2 == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_WorkingFile_ExecuteFile = (PLibMCEnvWorkingFile_ExecuteFilePtr) GetProcAddress(hLibrary, "libmcenv_workingfile_executefile");
		#else // _WIN32
		pWrapperTable->m_WorkingFile_ExecuteFile = (PLibMCEnvWorkingFile_ExecuteFilePtr) dlsym(hLibrary, "libmcenv_workingfile_executefile");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_WorkingFile_ExecuteFile == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_WorkingFile_IsManaged = (PLibMCEnvWorkingFile_IsManagedPtr) GetProcAddress(hLibrary, "libmcenv_workingfile_ismanaged");
		#else // _WIN32
		pWrapperTable->m_WorkingFile_IsManaged = (PLibMCEnvWorkingFile_IsManagedPtr) dlsym(hLibrary, "libmcenv_workingfile_ismanaged");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_WorkingFile_IsManaged == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_WorkingFile_MakeManaged = (PLibMCEnvWorkingFile_MakeManagedPtr) GetProcAddress(hLibrary, "libmcenv_workingfile_makemanaged");
		#else // _WIN32
		pWrapperTable->m_WorkingFile_MakeManaged = (PLibMCEnvWorkingFile_MakeManagedPtr) dlsym(hLibrary, "libmcenv_workingfile_makemanaged");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_WorkingFile_MakeManaged == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_WorkingFile_FileExists = (PLibMCEnvWorkingFile_FileExistsPtr) GetProcAddress(hLibrary, "libmcenv_workingfile_fileexists");
		#else // _WIN32
		pWrapperTable->m_WorkingFile_FileExists = (PLibMCEnvWorkingFile_FileExistsPtr) dlsym(hLibrary, "libmcenv_workingfile_fileexists");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_WorkingFile_FileExists == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_WorkingFile_DeleteFromDisk = (PLibMCEnvWorkingFile_DeleteFromDiskPtr) GetProcAddress(hLibrary, "libmcenv_workingfile_deletefromdisk");
		#else // _WIN32
		pWrapperTable->m_WorkingFile_DeleteFromDisk = (PLibMCEnvWorkingFile_DeleteFromDiskPtr) dlsym(hLibrary, "libmcenv_workingfile_deletefromdisk");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_WorkingFile_DeleteFromDisk == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_WorkingFileIterator_GetCurrentFile = (PLibMCEnvWorkingFileIterator_GetCurrentFilePtr) GetProcAddress(hLibrary, "libmcenv_workingfileiterator_getcurrentfile");
		#else // _WIN32
		pWrapperTable->m_WorkingFileIterator_GetCurrentFile = (PLibMCEnvWorkingFileIterator_GetCurrentFilePtr) dlsym(hLibrary, "libmcenv_workingfileiterator_getcurrentfile");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_WorkingFileIterator_GetCurrentFile == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_WorkingDirectory_IsActive = (PLibMCEnvWorkingDirectory_IsActivePtr) GetProcAddress(hLibrary, "libmcenv_workingdirectory_isactive");
		#else // _WIN32
		pWrapperTable->m_WorkingDirectory_IsActive = (PLibMCEnvWorkingDirectory_IsActivePtr) dlsym(hLibrary, "libmcenv_workingdirectory_isactive");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_WorkingDirectory_IsActive == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_WorkingDirectory_GetAbsoluteFilePath = (PLibMCEnvWorkingDirectory_GetAbsoluteFilePathPtr) GetProcAddress(hLibrary, "libmcenv_workingdirectory_getabsolutefilepath");
		#else // _WIN32
		pWrapperTable->m_WorkingDirectory_GetAbsoluteFilePath = (PLibMCEnvWorkingDirectory_GetAbsoluteFilePathPtr) dlsym(hLibrary, "libmcenv_workingdirectory_getabsolutefilepath");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_WorkingDirectory_GetAbsoluteFilePath == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_WorkingDirectory_StoreCustomData = (PLibMCEnvWorkingDirectory_StoreCustomDataPtr) GetProcAddress(hLibrary, "libmcenv_workingdirectory_storecustomdata");
		#else // _WIN32
		pWrapperTable->m_WorkingDirectory_StoreCustomData = (PLibMCEnvWorkingDirectory_StoreCustomDataPtr) dlsym(hLibrary, "libmcenv_workingdirectory_storecustomdata");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_WorkingDirectory_StoreCustomData == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_WorkingDirectory_StoreCustomString = (PLibMCEnvWorkingDirectory_StoreCustomStringPtr) GetProcAddress(hLibrary, "libmcenv_workingdirectory_storecustomstring");
		#else // _WIN32
		pWrapperTable->m_WorkingDirectory_StoreCustomString = (PLibMCEnvWorkingDirectory_StoreCustomStringPtr) dlsym(hLibrary, "libmcenv_workingdirectory_storecustomstring");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_WorkingDirectory_StoreCustomString == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_WorkingDirectory_StoreDriverData = (PLibMCEnvWorkingDirectory_StoreDriverDataPtr) GetProcAddress(hLibrary, "libmcenv_workingdirectory_storedriverdata");
		#else // _WIN32
		pWrapperTable->m_WorkingDirectory_StoreDriverData = (PLibMCEnvWorkingDirectory_StoreDriverDataPtr) dlsym(hLibrary, "libmcenv_workingdirectory_storedriverdata");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_WorkingDirectory_StoreDriverData == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_WorkingDirectory_StoreCustomDataInTempFile = (PLibMCEnvWorkingDirectory_StoreCustomDataInTempFilePtr) GetProcAddress(hLibrary, "libmcenv_workingdirectory_storecustomdataintempfile");
		#else // _WIN32
		pWrapperTable->m_WorkingDirectory_StoreCustomDataInTempFile = (PLibMCEnvWorkingDirectory_StoreCustomDataInTempFilePtr) dlsym(hLibrary, "libmcenv_workingdirectory_storecustomdataintempfile");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_WorkingDirectory_StoreCustomDataInTempFile == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_WorkingDirectory_StoreCustomStringInTempFile = (PLibMCEnvWorkingDirectory_StoreCustomStringInTempFilePtr) GetProcAddress(hLibrary, "libmcenv_workingdirectory_storecustomstringintempfile");
		#else // _WIN32
		pWrapperTable->m_WorkingDirectory_StoreCustomStringInTempFile = (PLibMCEnvWorkingDirectory_StoreCustomStringInTempFilePtr) dlsym(hLibrary, "libmcenv_workingdirectory_storecustomstringintempfile");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_WorkingDirectory_StoreCustomStringInTempFile == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_WorkingDirectory_StoreDriverDataInTempFile = (PLibMCEnvWorkingDirectory_StoreDriverDataInTempFilePtr) GetProcAddress(hLibrary, "libmcenv_workingdirectory_storedriverdataintempfile");
		#else // _WIN32
		pWrapperTable->m_WorkingDirectory_StoreDriverDataInTempFile = (PLibMCEnvWorkingDirectory_StoreDriverDataInTempFilePtr) dlsym(hLibrary, "libmcenv_workingdirectory_storedriverdataintempfile");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_WorkingDirectory_StoreDriverDataInTempFile == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_WorkingDirectory_CleanUp = (PLibMCEnvWorkingDirectory_CleanUpPtr) GetProcAddress(hLibrary, "libmcenv_workingdirectory_cleanup");
		#else // _WIN32
		pWrapperTable->m_WorkingDirectory_CleanUp = (PLibMCEnvWorkingDirectory_CleanUpPtr) dlsym(hLibrary, "libmcenv_workingdirectory_cleanup");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_WorkingDirectory_CleanUp == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_WorkingDirectory_AddManagedFile = (PLibMCEnvWorkingDirectory_AddManagedFilePtr) GetProcAddress(hLibrary, "libmcenv_workingdirectory_addmanagedfile");
		#else // _WIN32
		pWrapperTable->m_WorkingDirectory_AddManagedFile = (PLibMCEnvWorkingDirectory_AddManagedFilePtr) dlsym(hLibrary, "libmcenv_workingdirectory_addmanagedfile");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_WorkingDirectory_AddManagedFile == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_WorkingDirectory_HasUnmanagedFiles = (PLibMCEnvWorkingDirectory_HasUnmanagedFilesPtr) GetProcAddress(hLibrary, "libmcenv_workingdirectory_hasunmanagedfiles");
		#else // _WIN32
		pWrapperTable->m_WorkingDirectory_HasUnmanagedFiles = (PLibMCEnvWorkingDirectory_HasUnmanagedFilesPtr) dlsym(hLibrary, "libmcenv_workingdirectory_hasunmanagedfiles");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_WorkingDirectory_HasUnmanagedFiles == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_WorkingDirectory_RetrieveUnmanagedFiles = (PLibMCEnvWorkingDirectory_RetrieveUnmanagedFilesPtr) GetProcAddress(hLibrary, "libmcenv_workingdirectory_retrieveunmanagedfiles");
		#else // _WIN32
		pWrapperTable->m_WorkingDirectory_RetrieveUnmanagedFiles = (PLibMCEnvWorkingDirectory_RetrieveUnmanagedFilesPtr) dlsym(hLibrary, "libmcenv_workingdirectory_retrieveunmanagedfiles");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_WorkingDirectory_RetrieveUnmanagedFiles == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_WorkingDirectory_RetrieveManagedFiles = (PLibMCEnvWorkingDirectory_RetrieveManagedFilesPtr) GetProcAddress(hLibrary, "libmcenv_workingdirectory_retrievemanagedfiles");
		#else // _WIN32
		pWrapperTable->m_WorkingDirectory_RetrieveManagedFiles = (PLibMCEnvWorkingDirectory_RetrieveManagedFilesPtr) dlsym(hLibrary, "libmcenv_workingdirectory_retrievemanagedfiles");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_WorkingDirectory_RetrieveManagedFiles == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_WorkingDirectory_RetrieveAllFiles = (PLibMCEnvWorkingDirectory_RetrieveAllFilesPtr) GetProcAddress(hLibrary, "libmcenv_workingdirectory_retrieveallfiles");
		#else // _WIN32
		pWrapperTable->m_WorkingDirectory_RetrieveAllFiles = (PLibMCEnvWorkingDirectory_RetrieveAllFilesPtr) dlsym(hLibrary, "libmcenv_workingdirectory_retrieveallfiles");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_WorkingDirectory_RetrieveAllFiles == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_XMLDocumentAttribute_GetNameSpace = (PLibMCEnvXMLDocumentAttribute_GetNameSpacePtr) GetProcAddress(hLibrary, "libmcenv_xmldocumentattribute_getnamespace");
		#else // _WIN32
		pWrapperTable->m_XMLDocumentAttribute_GetNameSpace = (PLibMCEnvXMLDocumentAttribute_GetNameSpacePtr) dlsym(hLibrary, "libmcenv_xmldocumentattribute_getnamespace");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_XMLDocumentAttribute_GetNameSpace == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_XMLDocumentAttribute_GetName = (PLibMCEnvXMLDocumentAttribute_GetNamePtr) GetProcAddress(hLibrary, "libmcenv_xmldocumentattribute_getname");
		#else // _WIN32
		pWrapperTable->m_XMLDocumentAttribute_GetName = (PLibMCEnvXMLDocumentAttribute_GetNamePtr) dlsym(hLibrary, "libmcenv_xmldocumentattribute_getname");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_XMLDocumentAttribute_GetName == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_XMLDocumentAttribute_GetValue = (PLibMCEnvXMLDocumentAttribute_GetValuePtr) GetProcAddress(hLibrary, "libmcenv_xmldocumentattribute_getvalue");
		#else // _WIN32
		pWrapperTable->m_XMLDocumentAttribute_GetValue = (PLibMCEnvXMLDocumentAttribute_GetValuePtr) dlsym(hLibrary, "libmcenv_xmldocumentattribute_getvalue");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_XMLDocumentAttribute_GetValue == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_XMLDocumentAttribute_IsValidInteger = (PLibMCEnvXMLDocumentAttribute_IsValidIntegerPtr) GetProcAddress(hLibrary, "libmcenv_xmldocumentattribute_isvalidinteger");
		#else // _WIN32
		pWrapperTable->m_XMLDocumentAttribute_IsValidInteger = (PLibMCEnvXMLDocumentAttribute_IsValidIntegerPtr) dlsym(hLibrary, "libmcenv_xmldocumentattribute_isvalidinteger");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_XMLDocumentAttribute_IsValidInteger == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_XMLDocumentAttribute_GetIntegerValue = (PLibMCEnvXMLDocumentAttribute_GetIntegerValuePtr) GetProcAddress(hLibrary, "libmcenv_xmldocumentattribute_getintegervalue");
		#else // _WIN32
		pWrapperTable->m_XMLDocumentAttribute_GetIntegerValue = (PLibMCEnvXMLDocumentAttribute_GetIntegerValuePtr) dlsym(hLibrary, "libmcenv_xmldocumentattribute_getintegervalue");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_XMLDocumentAttribute_GetIntegerValue == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_XMLDocumentAttribute_IsValidDouble = (PLibMCEnvXMLDocumentAttribute_IsValidDoublePtr) GetProcAddress(hLibrary, "libmcenv_xmldocumentattribute_isvaliddouble");
		#else // _WIN32
		pWrapperTable->m_XMLDocumentAttribute_IsValidDouble = (PLibMCEnvXMLDocumentAttribute_IsValidDoublePtr) dlsym(hLibrary, "libmcenv_xmldocumentattribute_isvaliddouble");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_XMLDocumentAttribute_IsValidDouble == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_XMLDocumentAttribute_GetDoubleValue = (PLibMCEnvXMLDocumentAttribute_GetDoubleValuePtr) GetProcAddress(hLibrary, "libmcenv_xmldocumentattribute_getdoublevalue");
		#else // _WIN32
		pWrapperTable->m_XMLDocumentAttribute_GetDoubleValue = (PLibMCEnvXMLDocumentAttribute_GetDoubleValuePtr) dlsym(hLibrary, "libmcenv_xmldocumentattribute_getdoublevalue");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_XMLDocumentAttribute_GetDoubleValue == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_XMLDocumentAttribute_IsValidBool = (PLibMCEnvXMLDocumentAttribute_IsValidBoolPtr) GetProcAddress(hLibrary, "libmcenv_xmldocumentattribute_isvalidbool");
		#else // _WIN32
		pWrapperTable->m_XMLDocumentAttribute_IsValidBool = (PLibMCEnvXMLDocumentAttribute_IsValidBoolPtr) dlsym(hLibrary, "libmcenv_xmldocumentattribute_isvalidbool");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_XMLDocumentAttribute_IsValidBool == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_XMLDocumentAttribute_GetBoolValue = (PLibMCEnvXMLDocumentAttribute_GetBoolValuePtr) GetProcAddress(hLibrary, "libmcenv_xmldocumentattribute_getboolvalue");
		#else // _WIN32
		pWrapperTable->m_XMLDocumentAttribute_GetBoolValue = (PLibMCEnvXMLDocumentAttribute_GetBoolValuePtr) dlsym(hLibrary, "libmcenv_xmldocumentattribute_getboolvalue");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_XMLDocumentAttribute_GetBoolValue == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_XMLDocumentAttribute_SetValue = (PLibMCEnvXMLDocumentAttribute_SetValuePtr) GetProcAddress(hLibrary, "libmcenv_xmldocumentattribute_setvalue");
		#else // _WIN32
		pWrapperTable->m_XMLDocumentAttribute_SetValue = (PLibMCEnvXMLDocumentAttribute_SetValuePtr) dlsym(hLibrary, "libmcenv_xmldocumentattribute_setvalue");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_XMLDocumentAttribute_SetValue == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_XMLDocumentAttribute_SetIntegerValue = (PLibMCEnvXMLDocumentAttribute_SetIntegerValuePtr) GetProcAddress(hLibrary, "libmcenv_xmldocumentattribute_setintegervalue");
		#else // _WIN32
		pWrapperTable->m_XMLDocumentAttribute_SetIntegerValue = (PLibMCEnvXMLDocumentAttribute_SetIntegerValuePtr) dlsym(hLibrary, "libmcenv_xmldocumentattribute_setintegervalue");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_XMLDocumentAttribute_SetIntegerValue == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_XMLDocumentAttribute_SetDoubleValue = (PLibMCEnvXMLDocumentAttribute_SetDoubleValuePtr) GetProcAddress(hLibrary, "libmcenv_xmldocumentattribute_setdoublevalue");
		#else // _WIN32
		pWrapperTable->m_XMLDocumentAttribute_SetDoubleValue = (PLibMCEnvXMLDocumentAttribute_SetDoubleValuePtr) dlsym(hLibrary, "libmcenv_xmldocumentattribute_setdoublevalue");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_XMLDocumentAttribute_SetDoubleValue == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_XMLDocumentAttribute_SetBoolValue = (PLibMCEnvXMLDocumentAttribute_SetBoolValuePtr) GetProcAddress(hLibrary, "libmcenv_xmldocumentattribute_setboolvalue");
		#else // _WIN32
		pWrapperTable->m_XMLDocumentAttribute_SetBoolValue = (PLibMCEnvXMLDocumentAttribute_SetBoolValuePtr) dlsym(hLibrary, "libmcenv_xmldocumentattribute_setboolvalue");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_XMLDocumentAttribute_SetBoolValue == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_XMLDocumentAttribute_Remove = (PLibMCEnvXMLDocumentAttribute_RemovePtr) GetProcAddress(hLibrary, "libmcenv_xmldocumentattribute_remove");
		#else // _WIN32
		pWrapperTable->m_XMLDocumentAttribute_Remove = (PLibMCEnvXMLDocumentAttribute_RemovePtr) dlsym(hLibrary, "libmcenv_xmldocumentattribute_remove");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_XMLDocumentAttribute_Remove == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_XMLDocumentNode_GetName = (PLibMCEnvXMLDocumentNode_GetNamePtr) GetProcAddress(hLibrary, "libmcenv_xmldocumentnode_getname");
		#else // _WIN32
		pWrapperTable->m_XMLDocumentNode_GetName = (PLibMCEnvXMLDocumentNode_GetNamePtr) dlsym(hLibrary, "libmcenv_xmldocumentnode_getname");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_XMLDocumentNode_GetName == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_XMLDocumentNode_GetNameSpace = (PLibMCEnvXMLDocumentNode_GetNameSpacePtr) GetProcAddress(hLibrary, "libmcenv_xmldocumentnode_getnamespace");
		#else // _WIN32
		pWrapperTable->m_XMLDocumentNode_GetNameSpace = (PLibMCEnvXMLDocumentNode_GetNameSpacePtr) dlsym(hLibrary, "libmcenv_xmldocumentnode_getnamespace");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_XMLDocumentNode_GetNameSpace == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_XMLDocumentNode_GetAttributeCount = (PLibMCEnvXMLDocumentNode_GetAttributeCountPtr) GetProcAddress(hLibrary, "libmcenv_xmldocumentnode_getattributecount");
		#else // _WIN32
		pWrapperTable->m_XMLDocumentNode_GetAttributeCount = (PLibMCEnvXMLDocumentNode_GetAttributeCountPtr) dlsym(hLibrary, "libmcenv_xmldocumentnode_getattributecount");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_XMLDocumentNode_GetAttributeCount == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_XMLDocumentNode_GetAttribute = (PLibMCEnvXMLDocumentNode_GetAttributePtr) GetProcAddress(hLibrary, "libmcenv_xmldocumentnode_getattribute");
		#else // _WIN32
		pWrapperTable->m_XMLDocumentNode_GetAttribute = (PLibMCEnvXMLDocumentNode_GetAttributePtr) dlsym(hLibrary, "libmcenv_xmldocumentnode_getattribute");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_XMLDocumentNode_GetAttribute == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_XMLDocumentNode_HasAttribute = (PLibMCEnvXMLDocumentNode_HasAttributePtr) GetProcAddress(hLibrary, "libmcenv_xmldocumentnode_hasattribute");
		#else // _WIN32
		pWrapperTable->m_XMLDocumentNode_HasAttribute = (PLibMCEnvXMLDocumentNode_HasAttributePtr) dlsym(hLibrary, "libmcenv_xmldocumentnode_hasattribute");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_XMLDocumentNode_HasAttribute == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_XMLDocumentNode_FindAttribute = (PLibMCEnvXMLDocumentNode_FindAttributePtr) GetProcAddress(hLibrary, "libmcenv_xmldocumentnode_findattribute");
		#else // _WIN32
		pWrapperTable->m_XMLDocumentNode_FindAttribute = (PLibMCEnvXMLDocumentNode_FindAttributePtr) dlsym(hLibrary, "libmcenv_xmldocumentnode_findattribute");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_XMLDocumentNode_FindAttribute == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_XMLDocumentNode_RemoveAttribute = (PLibMCEnvXMLDocumentNode_RemoveAttributePtr) GetProcAddress(hLibrary, "libmcenv_xmldocumentnode_removeattribute");
		#else // _WIN32
		pWrapperTable->m_XMLDocumentNode_RemoveAttribute = (PLibMCEnvXMLDocumentNode_RemoveAttributePtr) dlsym(hLibrary, "libmcenv_xmldocumentnode_removeattribute");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_XMLDocumentNode_RemoveAttribute == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_XMLDocumentNode_RemoveAttributeByIndex = (PLibMCEnvXMLDocumentNode_RemoveAttributeByIndexPtr) GetProcAddress(hLibrary, "libmcenv_xmldocumentnode_removeattributebyindex");
		#else // _WIN32
		pWrapperTable->m_XMLDocumentNode_RemoveAttributeByIndex = (PLibMCEnvXMLDocumentNode_RemoveAttributeByIndexPtr) dlsym(hLibrary, "libmcenv_xmldocumentnode_removeattributebyindex");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_XMLDocumentNode_RemoveAttributeByIndex == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_XMLDocumentNode_AddAttribute = (PLibMCEnvXMLDocumentNode_AddAttributePtr) GetProcAddress(hLibrary, "libmcenv_xmldocumentnode_addattribute");
		#else // _WIN32
		pWrapperTable->m_XMLDocumentNode_AddAttribute = (PLibMCEnvXMLDocumentNode_AddAttributePtr) dlsym(hLibrary, "libmcenv_xmldocumentnode_addattribute");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_XMLDocumentNode_AddAttribute == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_XMLDocumentNode_AddIntegerAttribute = (PLibMCEnvXMLDocumentNode_AddIntegerAttributePtr) GetProcAddress(hLibrary, "libmcenv_xmldocumentnode_addintegerattribute");
		#else // _WIN32
		pWrapperTable->m_XMLDocumentNode_AddIntegerAttribute = (PLibMCEnvXMLDocumentNode_AddIntegerAttributePtr) dlsym(hLibrary, "libmcenv_xmldocumentnode_addintegerattribute");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_XMLDocumentNode_AddIntegerAttribute == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_XMLDocumentNode_AddDoubleAttribute = (PLibMCEnvXMLDocumentNode_AddDoubleAttributePtr) GetProcAddress(hLibrary, "libmcenv_xmldocumentnode_adddoubleattribute");
		#else // _WIN32
		pWrapperTable->m_XMLDocumentNode_AddDoubleAttribute = (PLibMCEnvXMLDocumentNode_AddDoubleAttributePtr) dlsym(hLibrary, "libmcenv_xmldocumentnode_adddoubleattribute");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_XMLDocumentNode_AddDoubleAttribute == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_XMLDocumentNode_AddBoolAttribute = (PLibMCEnvXMLDocumentNode_AddBoolAttributePtr) GetProcAddress(hLibrary, "libmcenv_xmldocumentnode_addboolattribute");
		#else // _WIN32
		pWrapperTable->m_XMLDocumentNode_AddBoolAttribute = (PLibMCEnvXMLDocumentNode_AddBoolAttributePtr) dlsym(hLibrary, "libmcenv_xmldocumentnode_addboolattribute");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_XMLDocumentNode_AddBoolAttribute == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_XMLDocumentNode_GetChildren = (PLibMCEnvXMLDocumentNode_GetChildrenPtr) GetProcAddress(hLibrary, "libmcenv_xmldocumentnode_getchildren");
		#else // _WIN32
		pWrapperTable->m_XMLDocumentNode_GetChildren = (PLibMCEnvXMLDocumentNode_GetChildrenPtr) dlsym(hLibrary, "libmcenv_xmldocumentnode_getchildren");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_XMLDocumentNode_GetChildren == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_XMLDocumentNode_CountChildrenByName = (PLibMCEnvXMLDocumentNode_CountChildrenByNamePtr) GetProcAddress(hLibrary, "libmcenv_xmldocumentnode_countchildrenbyname");
		#else // _WIN32
		pWrapperTable->m_XMLDocumentNode_CountChildrenByName = (PLibMCEnvXMLDocumentNode_CountChildrenByNamePtr) dlsym(hLibrary, "libmcenv_xmldocumentnode_countchildrenbyname");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_XMLDocumentNode_CountChildrenByName == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_XMLDocumentNode_GetChildrenByName = (PLibMCEnvXMLDocumentNode_GetChildrenByNamePtr) GetProcAddress(hLibrary, "libmcenv_xmldocumentnode_getchildrenbyname");
		#else // _WIN32
		pWrapperTable->m_XMLDocumentNode_GetChildrenByName = (PLibMCEnvXMLDocumentNode_GetChildrenByNamePtr) dlsym(hLibrary, "libmcenv_xmldocumentnode_getchildrenbyname");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_XMLDocumentNode_GetChildrenByName == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_XMLDocumentNode_HasChild = (PLibMCEnvXMLDocumentNode_HasChildPtr) GetProcAddress(hLibrary, "libmcenv_xmldocumentnode_haschild");
		#else // _WIN32
		pWrapperTable->m_XMLDocumentNode_HasChild = (PLibMCEnvXMLDocumentNode_HasChildPtr) dlsym(hLibrary, "libmcenv_xmldocumentnode_haschild");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_XMLDocumentNode_HasChild == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_XMLDocumentNode_HasUniqueChild = (PLibMCEnvXMLDocumentNode_HasUniqueChildPtr) GetProcAddress(hLibrary, "libmcenv_xmldocumentnode_hasuniquechild");
		#else // _WIN32
		pWrapperTable->m_XMLDocumentNode_HasUniqueChild = (PLibMCEnvXMLDocumentNode_HasUniqueChildPtr) dlsym(hLibrary, "libmcenv_xmldocumentnode_hasuniquechild");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_XMLDocumentNode_HasUniqueChild == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_XMLDocumentNode_FindChild = (PLibMCEnvXMLDocumentNode_FindChildPtr) GetProcAddress(hLibrary, "libmcenv_xmldocumentnode_findchild");
		#else // _WIN32
		pWrapperTable->m_XMLDocumentNode_FindChild = (PLibMCEnvXMLDocumentNode_FindChildPtr) dlsym(hLibrary, "libmcenv_xmldocumentnode_findchild");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_XMLDocumentNode_FindChild == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_XMLDocumentNode_AddChild = (PLibMCEnvXMLDocumentNode_AddChildPtr) GetProcAddress(hLibrary, "libmcenv_xmldocumentnode_addchild");
		#else // _WIN32
		pWrapperTable->m_XMLDocumentNode_AddChild = (PLibMCEnvXMLDocumentNode_AddChildPtr) dlsym(hLibrary, "libmcenv_xmldocumentnode_addchild");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_XMLDocumentNode_AddChild == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_XMLDocumentNode_RemoveChild = (PLibMCEnvXMLDocumentNode_RemoveChildPtr) GetProcAddress(hLibrary, "libmcenv_xmldocumentnode_removechild");
		#else // _WIN32
		pWrapperTable->m_XMLDocumentNode_RemoveChild = (PLibMCEnvXMLDocumentNode_RemoveChildPtr) dlsym(hLibrary, "libmcenv_xmldocumentnode_removechild");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_XMLDocumentNode_RemoveChild == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_XMLDocumentNode_RemoveChildrenWithName = (PLibMCEnvXMLDocumentNode_RemoveChildrenWithNamePtr) GetProcAddress(hLibrary, "libmcenv_xmldocumentnode_removechildrenwithname");
		#else // _WIN32
		pWrapperTable->m_XMLDocumentNode_RemoveChildrenWithName = (PLibMCEnvXMLDocumentNode_RemoveChildrenWithNamePtr) dlsym(hLibrary, "libmcenv_xmldocumentnode_removechildrenwithname");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_XMLDocumentNode_RemoveChildrenWithName == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_XMLDocumentNode_Remove = (PLibMCEnvXMLDocumentNode_RemovePtr) GetProcAddress(hLibrary, "libmcenv_xmldocumentnode_remove");
		#else // _WIN32
		pWrapperTable->m_XMLDocumentNode_Remove = (PLibMCEnvXMLDocumentNode_RemovePtr) dlsym(hLibrary, "libmcenv_xmldocumentnode_remove");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_XMLDocumentNode_Remove == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_XMLDocumentNodes_GetNodeCount = (PLibMCEnvXMLDocumentNodes_GetNodeCountPtr) GetProcAddress(hLibrary, "libmcenv_xmldocumentnodes_getnodecount");
		#else // _WIN32
		pWrapperTable->m_XMLDocumentNodes_GetNodeCount = (PLibMCEnvXMLDocumentNodes_GetNodeCountPtr) dlsym(hLibrary, "libmcenv_xmldocumentnodes_getnodecount");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_XMLDocumentNodes_GetNodeCount == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_XMLDocumentNodes_GetNode = (PLibMCEnvXMLDocumentNodes_GetNodePtr) GetProcAddress(hLibrary, "libmcenv_xmldocumentnodes_getnode");
		#else // _WIN32
		pWrapperTable->m_XMLDocumentNodes_GetNode = (PLibMCEnvXMLDocumentNodes_GetNodePtr) dlsym(hLibrary, "libmcenv_xmldocumentnodes_getnode");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_XMLDocumentNodes_GetNode == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_XMLDocumentNodes_CountNodesByName = (PLibMCEnvXMLDocumentNodes_CountNodesByNamePtr) GetProcAddress(hLibrary, "libmcenv_xmldocumentnodes_countnodesbyname");
		#else // _WIN32
		pWrapperTable->m_XMLDocumentNodes_CountNodesByName = (PLibMCEnvXMLDocumentNodes_CountNodesByNamePtr) dlsym(hLibrary, "libmcenv_xmldocumentnodes_countnodesbyname");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_XMLDocumentNodes_CountNodesByName == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_XMLDocumentNodes_GetNodesByName = (PLibMCEnvXMLDocumentNodes_GetNodesByNamePtr) GetProcAddress(hLibrary, "libmcenv_xmldocumentnodes_getnodesbyname");
		#else // _WIN32
		pWrapperTable->m_XMLDocumentNodes_GetNodesByName = (PLibMCEnvXMLDocumentNodes_GetNodesByNamePtr) dlsym(hLibrary, "libmcenv_xmldocumentnodes_getnodesbyname");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_XMLDocumentNodes_GetNodesByName == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_XMLDocumentNodes_HasNode = (PLibMCEnvXMLDocumentNodes_HasNodePtr) GetProcAddress(hLibrary, "libmcenv_xmldocumentnodes_hasnode");
		#else // _WIN32
		pWrapperTable->m_XMLDocumentNodes_HasNode = (PLibMCEnvXMLDocumentNodes_HasNodePtr) dlsym(hLibrary, "libmcenv_xmldocumentnodes_hasnode");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_XMLDocumentNodes_HasNode == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_XMLDocumentNodes_HasUniqueNode = (PLibMCEnvXMLDocumentNodes_HasUniqueNodePtr) GetProcAddress(hLibrary, "libmcenv_xmldocumentnodes_hasuniquenode");
		#else // _WIN32
		pWrapperTable->m_XMLDocumentNodes_HasUniqueNode = (PLibMCEnvXMLDocumentNodes_HasUniqueNodePtr) dlsym(hLibrary, "libmcenv_xmldocumentnodes_hasuniquenode");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_XMLDocumentNodes_HasUniqueNode == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_XMLDocumentNodes_FindNode = (PLibMCEnvXMLDocumentNodes_FindNodePtr) GetProcAddress(hLibrary, "libmcenv_xmldocumentnodes_findnode");
		#else // _WIN32
		pWrapperTable->m_XMLDocumentNodes_FindNode = (PLibMCEnvXMLDocumentNodes_FindNodePtr) dlsym(hLibrary, "libmcenv_xmldocumentnodes_findnode");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_XMLDocumentNodes_FindNode == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_XMLDocument_GetDefaultNamespace = (PLibMCEnvXMLDocument_GetDefaultNamespacePtr) GetProcAddress(hLibrary, "libmcenv_xmldocument_getdefaultnamespace");
		#else // _WIN32
		pWrapperTable->m_XMLDocument_GetDefaultNamespace = (PLibMCEnvXMLDocument_GetDefaultNamespacePtr) dlsym(hLibrary, "libmcenv_xmldocument_getdefaultnamespace");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_XMLDocument_GetDefaultNamespace == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_XMLDocument_GetNamespaceCount = (PLibMCEnvXMLDocument_GetNamespaceCountPtr) GetProcAddress(hLibrary, "libmcenv_xmldocument_getnamespacecount");
		#else // _WIN32
		pWrapperTable->m_XMLDocument_GetNamespaceCount = (PLibMCEnvXMLDocument_GetNamespaceCountPtr) dlsym(hLibrary, "libmcenv_xmldocument_getnamespacecount");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_XMLDocument_GetNamespaceCount == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_XMLDocument_GetNamespace = (PLibMCEnvXMLDocument_GetNamespacePtr) GetProcAddress(hLibrary, "libmcenv_xmldocument_getnamespace");
		#else // _WIN32
		pWrapperTable->m_XMLDocument_GetNamespace = (PLibMCEnvXMLDocument_GetNamespacePtr) dlsym(hLibrary, "libmcenv_xmldocument_getnamespace");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_XMLDocument_GetNamespace == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_XMLDocument_HasNamespace = (PLibMCEnvXMLDocument_HasNamespacePtr) GetProcAddress(hLibrary, "libmcenv_xmldocument_hasnamespace");
		#else // _WIN32
		pWrapperTable->m_XMLDocument_HasNamespace = (PLibMCEnvXMLDocument_HasNamespacePtr) dlsym(hLibrary, "libmcenv_xmldocument_hasnamespace");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_XMLDocument_HasNamespace == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_XMLDocument_GetNamespacePrefix = (PLibMCEnvXMLDocument_GetNamespacePrefixPtr) GetProcAddress(hLibrary, "libmcenv_xmldocument_getnamespaceprefix");
		#else // _WIN32
		pWrapperTable->m_XMLDocument_GetNamespacePrefix = (PLibMCEnvXMLDocument_GetNamespacePrefixPtr) dlsym(hLibrary, "libmcenv_xmldocument_getnamespaceprefix");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_XMLDocument_GetNamespacePrefix == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_XMLDocument_RegisterNamespace = (PLibMCEnvXMLDocument_RegisterNamespacePtr) GetProcAddress(hLibrary, "libmcenv_xmldocument_registernamespace");
		#else // _WIN32
		pWrapperTable->m_XMLDocument_RegisterNamespace = (PLibMCEnvXMLDocument_RegisterNamespacePtr) dlsym(hLibrary, "libmcenv_xmldocument_registernamespace");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_XMLDocument_RegisterNamespace == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_XMLDocument_GetRootNode = (PLibMCEnvXMLDocument_GetRootNodePtr) GetProcAddress(hLibrary, "libmcenv_xmldocument_getrootnode");
		#else // _WIN32
		pWrapperTable->m_XMLDocument_GetRootNode = (PLibMCEnvXMLDocument_GetRootNodePtr) dlsym(hLibrary, "libmcenv_xmldocument_getrootnode");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_XMLDocument_GetRootNode == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_XMLDocument_SaveToString = (PLibMCEnvXMLDocument_SaveToStringPtr) GetProcAddress(hLibrary, "libmcenv_xmldocument_savetostring");
		#else // _WIN32
		pWrapperTable->m_XMLDocument_SaveToString = (PLibMCEnvXMLDocument_SaveToStringPtr) dlsym(hLibrary, "libmcenv_xmldocument_savetostring");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_XMLDocument_SaveToString == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_TCPIPPacket_IsEmpty = (PLibMCEnvTCPIPPacket_IsEmptyPtr) GetProcAddress(hLibrary, "libmcenv_tcpippacket_isempty");
		#else // _WIN32
		pWrapperTable->m_TCPIPPacket_IsEmpty = (PLibMCEnvTCPIPPacket_IsEmptyPtr) dlsym(hLibrary, "libmcenv_tcpippacket_isempty");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_TCPIPPacket_IsEmpty == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_TCPIPPacket_GetSize = (PLibMCEnvTCPIPPacket_GetSizePtr) GetProcAddress(hLibrary, "libmcenv_tcpippacket_getsize");
		#else // _WIN32
		pWrapperTable->m_TCPIPPacket_GetSize = (PLibMCEnvTCPIPPacket_GetSizePtr) dlsym(hLibrary, "libmcenv_tcpippacket_getsize");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_TCPIPPacket_GetSize == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_TCPIPPacket_GetData = (PLibMCEnvTCPIPPacket_GetDataPtr) GetProcAddress(hLibrary, "libmcenv_tcpippacket_getdata");
		#else // _WIN32
		pWrapperTable->m_TCPIPPacket_GetData = (PLibMCEnvTCPIPPacket_GetDataPtr) dlsym(hLibrary, "libmcenv_tcpippacket_getdata");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_TCPIPPacket_GetData == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_TCPIPConnection_GetIPAddress = (PLibMCEnvTCPIPConnection_GetIPAddressPtr) GetProcAddress(hLibrary, "libmcenv_tcpipconnection_getipaddress");
		#else // _WIN32
		pWrapperTable->m_TCPIPConnection_GetIPAddress = (PLibMCEnvTCPIPConnection_GetIPAddressPtr) dlsym(hLibrary, "libmcenv_tcpipconnection_getipaddress");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_TCPIPConnection_GetIPAddress == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_TCPIPConnection_GetPort = (PLibMCEnvTCPIPConnection_GetPortPtr) GetProcAddress(hLibrary, "libmcenv_tcpipconnection_getport");
		#else // _WIN32
		pWrapperTable->m_TCPIPConnection_GetPort = (PLibMCEnvTCPIPConnection_GetPortPtr) dlsym(hLibrary, "libmcenv_tcpipconnection_getport");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_TCPIPConnection_GetPort == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_TCPIPConnection_GetTimeout = (PLibMCEnvTCPIPConnection_GetTimeoutPtr) GetProcAddress(hLibrary, "libmcenv_tcpipconnection_gettimeout");
		#else // _WIN32
		pWrapperTable->m_TCPIPConnection_GetTimeout = (PLibMCEnvTCPIPConnection_GetTimeoutPtr) dlsym(hLibrary, "libmcenv_tcpipconnection_gettimeout");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_TCPIPConnection_GetTimeout == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_TCPIPConnection_IsConnected = (PLibMCEnvTCPIPConnection_IsConnectedPtr) GetProcAddress(hLibrary, "libmcenv_tcpipconnection_isconnected");
		#else // _WIN32
		pWrapperTable->m_TCPIPConnection_IsConnected = (PLibMCEnvTCPIPConnection_IsConnectedPtr) dlsym(hLibrary, "libmcenv_tcpipconnection_isconnected");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_TCPIPConnection_IsConnected == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_TCPIPConnection_Disconnect = (PLibMCEnvTCPIPConnection_DisconnectPtr) GetProcAddress(hLibrary, "libmcenv_tcpipconnection_disconnect");
		#else // _WIN32
		pWrapperTable->m_TCPIPConnection_Disconnect = (PLibMCEnvTCPIPConnection_DisconnectPtr) dlsym(hLibrary, "libmcenv_tcpipconnection_disconnect");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_TCPIPConnection_Disconnect == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_TCPIPConnection_Reconnect = (PLibMCEnvTCPIPConnection_ReconnectPtr) GetProcAddress(hLibrary, "libmcenv_tcpipconnection_reconnect");
		#else // _WIN32
		pWrapperTable->m_TCPIPConnection_Reconnect = (PLibMCEnvTCPIPConnection_ReconnectPtr) dlsym(hLibrary, "libmcenv_tcpipconnection_reconnect");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_TCPIPConnection_Reconnect == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_TCPIPConnection_SendBuffer = (PLibMCEnvTCPIPConnection_SendBufferPtr) GetProcAddress(hLibrary, "libmcenv_tcpipconnection_sendbuffer");
		#else // _WIN32
		pWrapperTable->m_TCPIPConnection_SendBuffer = (PLibMCEnvTCPIPConnection_SendBufferPtr) dlsym(hLibrary, "libmcenv_tcpipconnection_sendbuffer");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_TCPIPConnection_SendBuffer == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_TCPIPConnection_WaitForData = (PLibMCEnvTCPIPConnection_WaitForDataPtr) GetProcAddress(hLibrary, "libmcenv_tcpipconnection_waitfordata");
		#else // _WIN32
		pWrapperTable->m_TCPIPConnection_WaitForData = (PLibMCEnvTCPIPConnection_WaitForDataPtr) dlsym(hLibrary, "libmcenv_tcpipconnection_waitfordata");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_TCPIPConnection_WaitForData == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_TCPIPConnection_ReceiveFixedPacket = (PLibMCEnvTCPIPConnection_ReceiveFixedPacketPtr) GetProcAddress(hLibrary, "libmcenv_tcpipconnection_receivefixedpacket");
		#else // _WIN32
		pWrapperTable->m_TCPIPConnection_ReceiveFixedPacket = (PLibMCEnvTCPIPConnection_ReceiveFixedPacketPtr) dlsym(hLibrary, "libmcenv_tcpipconnection_receivefixedpacket");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_TCPIPConnection_ReceiveFixedPacket == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_TCPIPConnection_ReceiveData = (PLibMCEnvTCPIPConnection_ReceiveDataPtr) GetProcAddress(hLibrary, "libmcenv_tcpipconnection_receivedata");
		#else // _WIN32
		pWrapperTable->m_TCPIPConnection_ReceiveData = (PLibMCEnvTCPIPConnection_ReceiveDataPtr) dlsym(hLibrary, "libmcenv_tcpipconnection_receivedata");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_TCPIPConnection_ReceiveData == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ModbusTCPDigitalIOStatus_GetCount = (PLibMCEnvModbusTCPDigitalIOStatus_GetCountPtr) GetProcAddress(hLibrary, "libmcenv_modbustcpdigitaliostatus_getcount");
		#else // _WIN32
		pWrapperTable->m_ModbusTCPDigitalIOStatus_GetCount = (PLibMCEnvModbusTCPDigitalIOStatus_GetCountPtr) dlsym(hLibrary, "libmcenv_modbustcpdigitaliostatus_getcount");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ModbusTCPDigitalIOStatus_GetCount == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ModbusTCPDigitalIOStatus_GetBaseAddress = (PLibMCEnvModbusTCPDigitalIOStatus_GetBaseAddressPtr) GetProcAddress(hLibrary, "libmcenv_modbustcpdigitaliostatus_getbaseaddress");
		#else // _WIN32
		pWrapperTable->m_ModbusTCPDigitalIOStatus_GetBaseAddress = (PLibMCEnvModbusTCPDigitalIOStatus_GetBaseAddressPtr) dlsym(hLibrary, "libmcenv_modbustcpdigitaliostatus_getbaseaddress");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ModbusTCPDigitalIOStatus_GetBaseAddress == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ModbusTCPDigitalIOStatus_GetValue = (PLibMCEnvModbusTCPDigitalIOStatus_GetValuePtr) GetProcAddress(hLibrary, "libmcenv_modbustcpdigitaliostatus_getvalue");
		#else // _WIN32
		pWrapperTable->m_ModbusTCPDigitalIOStatus_GetValue = (PLibMCEnvModbusTCPDigitalIOStatus_GetValuePtr) dlsym(hLibrary, "libmcenv_modbustcpdigitaliostatus_getvalue");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ModbusTCPDigitalIOStatus_GetValue == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ModbusTCPDigitalIOStatus_GetValues = (PLibMCEnvModbusTCPDigitalIOStatus_GetValuesPtr) GetProcAddress(hLibrary, "libmcenv_modbustcpdigitaliostatus_getvalues");
		#else // _WIN32
		pWrapperTable->m_ModbusTCPDigitalIOStatus_GetValues = (PLibMCEnvModbusTCPDigitalIOStatus_GetValuesPtr) dlsym(hLibrary, "libmcenv_modbustcpdigitaliostatus_getvalues");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ModbusTCPDigitalIOStatus_GetValues == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ModbusTCPRegisterStatus_GetCount = (PLibMCEnvModbusTCPRegisterStatus_GetCountPtr) GetProcAddress(hLibrary, "libmcenv_modbustcpregisterstatus_getcount");
		#else // _WIN32
		pWrapperTable->m_ModbusTCPRegisterStatus_GetCount = (PLibMCEnvModbusTCPRegisterStatus_GetCountPtr) dlsym(hLibrary, "libmcenv_modbustcpregisterstatus_getcount");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ModbusTCPRegisterStatus_GetCount == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ModbusTCPRegisterStatus_GetBaseAddress = (PLibMCEnvModbusTCPRegisterStatus_GetBaseAddressPtr) GetProcAddress(hLibrary, "libmcenv_modbustcpregisterstatus_getbaseaddress");
		#else // _WIN32
		pWrapperTable->m_ModbusTCPRegisterStatus_GetBaseAddress = (PLibMCEnvModbusTCPRegisterStatus_GetBaseAddressPtr) dlsym(hLibrary, "libmcenv_modbustcpregisterstatus_getbaseaddress");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ModbusTCPRegisterStatus_GetBaseAddress == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ModbusTCPRegisterStatus_GetValue = (PLibMCEnvModbusTCPRegisterStatus_GetValuePtr) GetProcAddress(hLibrary, "libmcenv_modbustcpregisterstatus_getvalue");
		#else // _WIN32
		pWrapperTable->m_ModbusTCPRegisterStatus_GetValue = (PLibMCEnvModbusTCPRegisterStatus_GetValuePtr) dlsym(hLibrary, "libmcenv_modbustcpregisterstatus_getvalue");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ModbusTCPRegisterStatus_GetValue == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ModbusTCPRegisterStatus_GetValues = (PLibMCEnvModbusTCPRegisterStatus_GetValuesPtr) GetProcAddress(hLibrary, "libmcenv_modbustcpregisterstatus_getvalues");
		#else // _WIN32
		pWrapperTable->m_ModbusTCPRegisterStatus_GetValues = (PLibMCEnvModbusTCPRegisterStatus_GetValuesPtr) dlsym(hLibrary, "libmcenv_modbustcpregisterstatus_getvalues");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ModbusTCPRegisterStatus_GetValues == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ModbusTCPConnection_GetIPAddress = (PLibMCEnvModbusTCPConnection_GetIPAddressPtr) GetProcAddress(hLibrary, "libmcenv_modbustcpconnection_getipaddress");
		#else // _WIN32
		pWrapperTable->m_ModbusTCPConnection_GetIPAddress = (PLibMCEnvModbusTCPConnection_GetIPAddressPtr) dlsym(hLibrary, "libmcenv_modbustcpconnection_getipaddress");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ModbusTCPConnection_GetIPAddress == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ModbusTCPConnection_GetPort = (PLibMCEnvModbusTCPConnection_GetPortPtr) GetProcAddress(hLibrary, "libmcenv_modbustcpconnection_getport");
		#else // _WIN32
		pWrapperTable->m_ModbusTCPConnection_GetPort = (PLibMCEnvModbusTCPConnection_GetPortPtr) dlsym(hLibrary, "libmcenv_modbustcpconnection_getport");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ModbusTCPConnection_GetPort == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ModbusTCPConnection_GetTimeout = (PLibMCEnvModbusTCPConnection_GetTimeoutPtr) GetProcAddress(hLibrary, "libmcenv_modbustcpconnection_gettimeout");
		#else // _WIN32
		pWrapperTable->m_ModbusTCPConnection_GetTimeout = (PLibMCEnvModbusTCPConnection_GetTimeoutPtr) dlsym(hLibrary, "libmcenv_modbustcpconnection_gettimeout");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ModbusTCPConnection_GetTimeout == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ModbusTCPConnection_IsConnected = (PLibMCEnvModbusTCPConnection_IsConnectedPtr) GetProcAddress(hLibrary, "libmcenv_modbustcpconnection_isconnected");
		#else // _WIN32
		pWrapperTable->m_ModbusTCPConnection_IsConnected = (PLibMCEnvModbusTCPConnection_IsConnectedPtr) dlsym(hLibrary, "libmcenv_modbustcpconnection_isconnected");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ModbusTCPConnection_IsConnected == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ModbusTCPConnection_Disconnect = (PLibMCEnvModbusTCPConnection_DisconnectPtr) GetProcAddress(hLibrary, "libmcenv_modbustcpconnection_disconnect");
		#else // _WIN32
		pWrapperTable->m_ModbusTCPConnection_Disconnect = (PLibMCEnvModbusTCPConnection_DisconnectPtr) dlsym(hLibrary, "libmcenv_modbustcpconnection_disconnect");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ModbusTCPConnection_Disconnect == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ModbusTCPConnection_Reconnect = (PLibMCEnvModbusTCPConnection_ReconnectPtr) GetProcAddress(hLibrary, "libmcenv_modbustcpconnection_reconnect");
		#else // _WIN32
		pWrapperTable->m_ModbusTCPConnection_Reconnect = (PLibMCEnvModbusTCPConnection_ReconnectPtr) dlsym(hLibrary, "libmcenv_modbustcpconnection_reconnect");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ModbusTCPConnection_Reconnect == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ModbusTCPConnection_DiagnosisCall = (PLibMCEnvModbusTCPConnection_DiagnosisCallPtr) GetProcAddress(hLibrary, "libmcenv_modbustcpconnection_diagnosiscall");
		#else // _WIN32
		pWrapperTable->m_ModbusTCPConnection_DiagnosisCall = (PLibMCEnvModbusTCPConnection_DiagnosisCallPtr) dlsym(hLibrary, "libmcenv_modbustcpconnection_diagnosiscall");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ModbusTCPConnection_DiagnosisCall == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ModbusTCPConnection_ReadCoilStatus = (PLibMCEnvModbusTCPConnection_ReadCoilStatusPtr) GetProcAddress(hLibrary, "libmcenv_modbustcpconnection_readcoilstatus");
		#else // _WIN32
		pWrapperTable->m_ModbusTCPConnection_ReadCoilStatus = (PLibMCEnvModbusTCPConnection_ReadCoilStatusPtr) dlsym(hLibrary, "libmcenv_modbustcpconnection_readcoilstatus");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ModbusTCPConnection_ReadCoilStatus == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ModbusTCPConnection_ReadInputStatus = (PLibMCEnvModbusTCPConnection_ReadInputStatusPtr) GetProcAddress(hLibrary, "libmcenv_modbustcpconnection_readinputstatus");
		#else // _WIN32
		pWrapperTable->m_ModbusTCPConnection_ReadInputStatus = (PLibMCEnvModbusTCPConnection_ReadInputStatusPtr) dlsym(hLibrary, "libmcenv_modbustcpconnection_readinputstatus");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ModbusTCPConnection_ReadInputStatus == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ModbusTCPConnection_ReadHoldingRegisters = (PLibMCEnvModbusTCPConnection_ReadHoldingRegistersPtr) GetProcAddress(hLibrary, "libmcenv_modbustcpconnection_readholdingregisters");
		#else // _WIN32
		pWrapperTable->m_ModbusTCPConnection_ReadHoldingRegisters = (PLibMCEnvModbusTCPConnection_ReadHoldingRegistersPtr) dlsym(hLibrary, "libmcenv_modbustcpconnection_readholdingregisters");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ModbusTCPConnection_ReadHoldingRegisters == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ModbusTCPConnection_ReadInputRegisters = (PLibMCEnvModbusTCPConnection_ReadInputRegistersPtr) GetProcAddress(hLibrary, "libmcenv_modbustcpconnection_readinputregisters");
		#else // _WIN32
		pWrapperTable->m_ModbusTCPConnection_ReadInputRegisters = (PLibMCEnvModbusTCPConnection_ReadInputRegistersPtr) dlsym(hLibrary, "libmcenv_modbustcpconnection_readinputregisters");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ModbusTCPConnection_ReadInputRegisters == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ModbusTCPConnection_ForceMultipleCoils = (PLibMCEnvModbusTCPConnection_ForceMultipleCoilsPtr) GetProcAddress(hLibrary, "libmcenv_modbustcpconnection_forcemultiplecoils");
		#else // _WIN32
		pWrapperTable->m_ModbusTCPConnection_ForceMultipleCoils = (PLibMCEnvModbusTCPConnection_ForceMultipleCoilsPtr) dlsym(hLibrary, "libmcenv_modbustcpconnection_forcemultiplecoils");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ModbusTCPConnection_ForceMultipleCoils == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ModbusTCPConnection_PresetMultipleRegisters = (PLibMCEnvModbusTCPConnection_PresetMultipleRegistersPtr) GetProcAddress(hLibrary, "libmcenv_modbustcpconnection_presetmultipleregisters");
		#else // _WIN32
		pWrapperTable->m_ModbusTCPConnection_PresetMultipleRegisters = (PLibMCEnvModbusTCPConnection_PresetMultipleRegistersPtr) dlsym(hLibrary, "libmcenv_modbustcpconnection_presetmultipleregisters");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ModbusTCPConnection_PresetMultipleRegisters == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_DriverStatusUpdateSession_SetStringParameter = (PLibMCEnvDriverStatusUpdateSession_SetStringParameterPtr) GetProcAddress(hLibrary, "libmcenv_driverstatusupdatesession_setstringparameter");
		#else // _WIN32
		pWrapperTable->m_DriverStatusUpdateSession_SetStringParameter = (PLibMCEnvDriverStatusUpdateSession_SetStringParameterPtr) dlsym(hLibrary, "libmcenv_driverstatusupdatesession_setstringparameter");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_DriverStatusUpdateSession_SetStringParameter == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_DriverStatusUpdateSession_SetUUIDParameter = (PLibMCEnvDriverStatusUpdateSession_SetUUIDParameterPtr) GetProcAddress(hLibrary, "libmcenv_driverstatusupdatesession_setuuidparameter");
		#else // _WIN32
		pWrapperTable->m_DriverStatusUpdateSession_SetUUIDParameter = (PLibMCEnvDriverStatusUpdateSession_SetUUIDParameterPtr) dlsym(hLibrary, "libmcenv_driverstatusupdatesession_setuuidparameter");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_DriverStatusUpdateSession_SetUUIDParameter == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_DriverStatusUpdateSession_SetDoubleParameter = (PLibMCEnvDriverStatusUpdateSession_SetDoubleParameterPtr) GetProcAddress(hLibrary, "libmcenv_driverstatusupdatesession_setdoubleparameter");
		#else // _WIN32
		pWrapperTable->m_DriverStatusUpdateSession_SetDoubleParameter = (PLibMCEnvDriverStatusUpdateSession_SetDoubleParameterPtr) dlsym(hLibrary, "libmcenv_driverstatusupdatesession_setdoubleparameter");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_DriverStatusUpdateSession_SetDoubleParameter == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_DriverStatusUpdateSession_SetIntegerParameter = (PLibMCEnvDriverStatusUpdateSession_SetIntegerParameterPtr) GetProcAddress(hLibrary, "libmcenv_driverstatusupdatesession_setintegerparameter");
		#else // _WIN32
		pWrapperTable->m_DriverStatusUpdateSession_SetIntegerParameter = (PLibMCEnvDriverStatusUpdateSession_SetIntegerParameterPtr) dlsym(hLibrary, "libmcenv_driverstatusupdatesession_setintegerparameter");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_DriverStatusUpdateSession_SetIntegerParameter == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_DriverStatusUpdateSession_SetBoolParameter = (PLibMCEnvDriverStatusUpdateSession_SetBoolParameterPtr) GetProcAddress(hLibrary, "libmcenv_driverstatusupdatesession_setboolparameter");
		#else // _WIN32
		pWrapperTable->m_DriverStatusUpdateSession_SetBoolParameter = (PLibMCEnvDriverStatusUpdateSession_SetBoolParameterPtr) dlsym(hLibrary, "libmcenv_driverstatusupdatesession_setboolparameter");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_DriverStatusUpdateSession_SetBoolParameter == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_DriverStatusUpdateSession_LogMessage = (PLibMCEnvDriverStatusUpdateSession_LogMessagePtr) GetProcAddress(hLibrary, "libmcenv_driverstatusupdatesession_logmessage");
		#else // _WIN32
		pWrapperTable->m_DriverStatusUpdateSession_LogMessage = (PLibMCEnvDriverStatusUpdateSession_LogMessagePtr) dlsym(hLibrary, "libmcenv_driverstatusupdatesession_logmessage");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_DriverStatusUpdateSession_LogMessage == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_DriverStatusUpdateSession_LogWarning = (PLibMCEnvDriverStatusUpdateSession_LogWarningPtr) GetProcAddress(hLibrary, "libmcenv_driverstatusupdatesession_logwarning");
		#else // _WIN32
		pWrapperTable->m_DriverStatusUpdateSession_LogWarning = (PLibMCEnvDriverStatusUpdateSession_LogWarningPtr) dlsym(hLibrary, "libmcenv_driverstatusupdatesession_logwarning");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_DriverStatusUpdateSession_LogWarning == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_DriverStatusUpdateSession_LogInfo = (PLibMCEnvDriverStatusUpdateSession_LogInfoPtr) GetProcAddress(hLibrary, "libmcenv_driverstatusupdatesession_loginfo");
		#else // _WIN32
		pWrapperTable->m_DriverStatusUpdateSession_LogInfo = (PLibMCEnvDriverStatusUpdateSession_LogInfoPtr) dlsym(hLibrary, "libmcenv_driverstatusupdatesession_loginfo");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_DriverStatusUpdateSession_LogInfo == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_DriverStatusUpdateSession_Sleep = (PLibMCEnvDriverStatusUpdateSession_SleepPtr) GetProcAddress(hLibrary, "libmcenv_driverstatusupdatesession_sleep");
		#else // _WIN32
		pWrapperTable->m_DriverStatusUpdateSession_Sleep = (PLibMCEnvDriverStatusUpdateSession_SleepPtr) dlsym(hLibrary, "libmcenv_driverstatusupdatesession_sleep");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_DriverStatusUpdateSession_Sleep == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_DriverEnvironment_CreateStatusUpdateSession = (PLibMCEnvDriverEnvironment_CreateStatusUpdateSessionPtr) GetProcAddress(hLibrary, "libmcenv_driverenvironment_createstatusupdatesession");
		#else // _WIN32
		pWrapperTable->m_DriverEnvironment_CreateStatusUpdateSession = (PLibMCEnvDriverEnvironment_CreateStatusUpdateSessionPtr) dlsym(hLibrary, "libmcenv_driverenvironment_createstatusupdatesession");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_DriverEnvironment_CreateStatusUpdateSession == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_DriverEnvironment_CreateWorkingDirectory = (PLibMCEnvDriverEnvironment_CreateWorkingDirectoryPtr) GetProcAddress(hLibrary, "libmcenv_driverenvironment_createworkingdirectory");
		#else // _WIN32
		pWrapperTable->m_DriverEnvironment_CreateWorkingDirectory = (PLibMCEnvDriverEnvironment_CreateWorkingDirectoryPtr) dlsym(hLibrary, "libmcenv_driverenvironment_createworkingdirectory");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_DriverEnvironment_CreateWorkingDirectory == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_DriverEnvironment_CreateTCPIPConnection = (PLibMCEnvDriverEnvironment_CreateTCPIPConnectionPtr) GetProcAddress(hLibrary, "libmcenv_driverenvironment_createtcpipconnection");
		#else // _WIN32
		pWrapperTable->m_DriverEnvironment_CreateTCPIPConnection = (PLibMCEnvDriverEnvironment_CreateTCPIPConnectionPtr) dlsym(hLibrary, "libmcenv_driverenvironment_createtcpipconnection");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_DriverEnvironment_CreateTCPIPConnection == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_DriverEnvironment_CreateModbusTCPConnection = (PLibMCEnvDriverEnvironment_CreateModbusTCPConnectionPtr) GetProcAddress(hLibrary, "libmcenv_driverenvironment_createmodbustcpconnection");
		#else // _WIN32
		pWrapperTable->m_DriverEnvironment_CreateModbusTCPConnection = (PLibMCEnvDriverEnvironment_CreateModbusTCPConnectionPtr) dlsym(hLibrary, "libmcenv_driverenvironment_createmodbustcpconnection");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_DriverEnvironment_CreateModbusTCPConnection == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_DriverEnvironment_CreateXMLDocument = (PLibMCEnvDriverEnvironment_CreateXMLDocumentPtr) GetProcAddress(hLibrary, "libmcenv_driverenvironment_createxmldocument");
		#else // _WIN32
		pWrapperTable->m_DriverEnvironment_CreateXMLDocument = (PLibMCEnvDriverEnvironment_CreateXMLDocumentPtr) dlsym(hLibrary, "libmcenv_driverenvironment_createxmldocument");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_DriverEnvironment_CreateXMLDocument == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_DriverEnvironment_ParseXMLString = (PLibMCEnvDriverEnvironment_ParseXMLStringPtr) GetProcAddress(hLibrary, "libmcenv_driverenvironment_parsexmlstring");
		#else // _WIN32
		pWrapperTable->m_DriverEnvironment_ParseXMLString = (PLibMCEnvDriverEnvironment_ParseXMLStringPtr) dlsym(hLibrary, "libmcenv_driverenvironment_parsexmlstring");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_DriverEnvironment_ParseXMLString == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_DriverEnvironment_ParseXMLData = (PLibMCEnvDriverEnvironment_ParseXMLDataPtr) GetProcAddress(hLibrary, "libmcenv_driverenvironment_parsexmldata");
		#else // _WIN32
		pWrapperTable->m_DriverEnvironment_ParseXMLData = (PLibMCEnvDriverEnvironment_ParseXMLDataPtr) dlsym(hLibrary, "libmcenv_driverenvironment_parsexmldata");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_DriverEnvironment_ParseXMLData == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_DriverEnvironment_DriverHasResourceData = (PLibMCEnvDriverEnvironment_DriverHasResourceDataPtr) GetProcAddress(hLibrary, "libmcenv_driverenvironment_driverhasresourcedata");
		#else // _WIN32
		pWrapperTable->m_DriverEnvironment_DriverHasResourceData = (PLibMCEnvDriverEnvironment_DriverHasResourceDataPtr) dlsym(hLibrary, "libmcenv_driverenvironment_driverhasresourcedata");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_DriverEnvironment_DriverHasResourceData == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_DriverEnvironment_MachineHasResourceData = (PLibMCEnvDriverEnvironment_MachineHasResourceDataPtr) GetProcAddress(hLibrary, "libmcenv_driverenvironment_machinehasresourcedata");
		#else // _WIN32
		pWrapperTable->m_DriverEnvironment_MachineHasResourceData = (PLibMCEnvDriverEnvironment_MachineHasResourceDataPtr) dlsym(hLibrary, "libmcenv_driverenvironment_machinehasresourcedata");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_DriverEnvironment_MachineHasResourceData == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_DriverEnvironment_RetrieveDriverData = (PLibMCEnvDriverEnvironment_RetrieveDriverDataPtr) GetProcAddress(hLibrary, "libmcenv_driverenvironment_retrievedriverdata");
		#else // _WIN32
		pWrapperTable->m_DriverEnvironment_RetrieveDriverData = (PLibMCEnvDriverEnvironment_RetrieveDriverDataPtr) dlsym(hLibrary, "libmcenv_driverenvironment_retrievedriverdata");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_DriverEnvironment_RetrieveDriverData == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_DriverEnvironment_RetrieveDriverResourceData = (PLibMCEnvDriverEnvironment_RetrieveDriverResourceDataPtr) GetProcAddress(hLibrary, "libmcenv_driverenvironment_retrievedriverresourcedata");
		#else // _WIN32
		pWrapperTable->m_DriverEnvironment_RetrieveDriverResourceData = (PLibMCEnvDriverEnvironment_RetrieveDriverResourceDataPtr) dlsym(hLibrary, "libmcenv_driverenvironment_retrievedriverresourcedata");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_DriverEnvironment_RetrieveDriverResourceData == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_DriverEnvironment_RetrieveMachineResourceData = (PLibMCEnvDriverEnvironment_RetrieveMachineResourceDataPtr) GetProcAddress(hLibrary, "libmcenv_driverenvironment_retrievemachineresourcedata");
		#else // _WIN32
		pWrapperTable->m_DriverEnvironment_RetrieveMachineResourceData = (PLibMCEnvDriverEnvironment_RetrieveMachineResourceDataPtr) dlsym(hLibrary, "libmcenv_driverenvironment_retrievemachineresourcedata");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_DriverEnvironment_RetrieveMachineResourceData == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_DriverEnvironment_CreateToolpathAccessor = (PLibMCEnvDriverEnvironment_CreateToolpathAccessorPtr) GetProcAddress(hLibrary, "libmcenv_driverenvironment_createtoolpathaccessor");
		#else // _WIN32
		pWrapperTable->m_DriverEnvironment_CreateToolpathAccessor = (PLibMCEnvDriverEnvironment_CreateToolpathAccessorPtr) dlsym(hLibrary, "libmcenv_driverenvironment_createtoolpathaccessor");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_DriverEnvironment_CreateToolpathAccessor == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_DriverEnvironment_ParameterNameIsValid = (PLibMCEnvDriverEnvironment_ParameterNameIsValidPtr) GetProcAddress(hLibrary, "libmcenv_driverenvironment_parameternameisvalid");
		#else // _WIN32
		pWrapperTable->m_DriverEnvironment_ParameterNameIsValid = (PLibMCEnvDriverEnvironment_ParameterNameIsValidPtr) dlsym(hLibrary, "libmcenv_driverenvironment_parameternameisvalid");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_DriverEnvironment_ParameterNameIsValid == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_DriverEnvironment_RegisterStringParameter = (PLibMCEnvDriverEnvironment_RegisterStringParameterPtr) GetProcAddress(hLibrary, "libmcenv_driverenvironment_registerstringparameter");
		#else // _WIN32
		pWrapperTable->m_DriverEnvironment_RegisterStringParameter = (PLibMCEnvDriverEnvironment_RegisterStringParameterPtr) dlsym(hLibrary, "libmcenv_driverenvironment_registerstringparameter");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_DriverEnvironment_RegisterStringParameter == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_DriverEnvironment_RegisterUUIDParameter = (PLibMCEnvDriverEnvironment_RegisterUUIDParameterPtr) GetProcAddress(hLibrary, "libmcenv_driverenvironment_registeruuidparameter");
		#else // _WIN32
		pWrapperTable->m_DriverEnvironment_RegisterUUIDParameter = (PLibMCEnvDriverEnvironment_RegisterUUIDParameterPtr) dlsym(hLibrary, "libmcenv_driverenvironment_registeruuidparameter");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_DriverEnvironment_RegisterUUIDParameter == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_DriverEnvironment_RegisterDoubleParameter = (PLibMCEnvDriverEnvironment_RegisterDoubleParameterPtr) GetProcAddress(hLibrary, "libmcenv_driverenvironment_registerdoubleparameter");
		#else // _WIN32
		pWrapperTable->m_DriverEnvironment_RegisterDoubleParameter = (PLibMCEnvDriverEnvironment_RegisterDoubleParameterPtr) dlsym(hLibrary, "libmcenv_driverenvironment_registerdoubleparameter");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_DriverEnvironment_RegisterDoubleParameter == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_DriverEnvironment_RegisterIntegerParameter = (PLibMCEnvDriverEnvironment_RegisterIntegerParameterPtr) GetProcAddress(hLibrary, "libmcenv_driverenvironment_registerintegerparameter");
		#else // _WIN32
		pWrapperTable->m_DriverEnvironment_RegisterIntegerParameter = (PLibMCEnvDriverEnvironment_RegisterIntegerParameterPtr) dlsym(hLibrary, "libmcenv_driverenvironment_registerintegerparameter");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_DriverEnvironment_RegisterIntegerParameter == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_DriverEnvironment_RegisterBoolParameter = (PLibMCEnvDriverEnvironment_RegisterBoolParameterPtr) GetProcAddress(hLibrary, "libmcenv_driverenvironment_registerboolparameter");
		#else // _WIN32
		pWrapperTable->m_DriverEnvironment_RegisterBoolParameter = (PLibMCEnvDriverEnvironment_RegisterBoolParameterPtr) dlsym(hLibrary, "libmcenv_driverenvironment_registerboolparameter");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_DriverEnvironment_RegisterBoolParameter == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_DriverEnvironment_SetStringParameter = (PLibMCEnvDriverEnvironment_SetStringParameterPtr) GetProcAddress(hLibrary, "libmcenv_driverenvironment_setstringparameter");
		#else // _WIN32
		pWrapperTable->m_DriverEnvironment_SetStringParameter = (PLibMCEnvDriverEnvironment_SetStringParameterPtr) dlsym(hLibrary, "libmcenv_driverenvironment_setstringparameter");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_DriverEnvironment_SetStringParameter == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_DriverEnvironment_SetUUIDParameter = (PLibMCEnvDriverEnvironment_SetUUIDParameterPtr) GetProcAddress(hLibrary, "libmcenv_driverenvironment_setuuidparameter");
		#else // _WIN32
		pWrapperTable->m_DriverEnvironment_SetUUIDParameter = (PLibMCEnvDriverEnvironment_SetUUIDParameterPtr) dlsym(hLibrary, "libmcenv_driverenvironment_setuuidparameter");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_DriverEnvironment_SetUUIDParameter == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_DriverEnvironment_SetDoubleParameter = (PLibMCEnvDriverEnvironment_SetDoubleParameterPtr) GetProcAddress(hLibrary, "libmcenv_driverenvironment_setdoubleparameter");
		#else // _WIN32
		pWrapperTable->m_DriverEnvironment_SetDoubleParameter = (PLibMCEnvDriverEnvironment_SetDoubleParameterPtr) dlsym(hLibrary, "libmcenv_driverenvironment_setdoubleparameter");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_DriverEnvironment_SetDoubleParameter == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_DriverEnvironment_SetIntegerParameter = (PLibMCEnvDriverEnvironment_SetIntegerParameterPtr) GetProcAddress(hLibrary, "libmcenv_driverenvironment_setintegerparameter");
		#else // _WIN32
		pWrapperTable->m_DriverEnvironment_SetIntegerParameter = (PLibMCEnvDriverEnvironment_SetIntegerParameterPtr) dlsym(hLibrary, "libmcenv_driverenvironment_setintegerparameter");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_DriverEnvironment_SetIntegerParameter == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_DriverEnvironment_SetBoolParameter = (PLibMCEnvDriverEnvironment_SetBoolParameterPtr) GetProcAddress(hLibrary, "libmcenv_driverenvironment_setboolparameter");
		#else // _WIN32
		pWrapperTable->m_DriverEnvironment_SetBoolParameter = (PLibMCEnvDriverEnvironment_SetBoolParameterPtr) dlsym(hLibrary, "libmcenv_driverenvironment_setboolparameter");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_DriverEnvironment_SetBoolParameter == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_DriverEnvironment_Sleep = (PLibMCEnvDriverEnvironment_SleepPtr) GetProcAddress(hLibrary, "libmcenv_driverenvironment_sleep");
		#else // _WIN32
		pWrapperTable->m_DriverEnvironment_Sleep = (PLibMCEnvDriverEnvironment_SleepPtr) dlsym(hLibrary, "libmcenv_driverenvironment_sleep");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_DriverEnvironment_Sleep == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_DriverEnvironment_GetGlobalTimerInMilliseconds = (PLibMCEnvDriverEnvironment_GetGlobalTimerInMillisecondsPtr) GetProcAddress(hLibrary, "libmcenv_driverenvironment_getglobaltimerinmilliseconds");
		#else // _WIN32
		pWrapperTable->m_DriverEnvironment_GetGlobalTimerInMilliseconds = (PLibMCEnvDriverEnvironment_GetGlobalTimerInMillisecondsPtr) dlsym(hLibrary, "libmcenv_driverenvironment_getglobaltimerinmilliseconds");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_DriverEnvironment_GetGlobalTimerInMilliseconds == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_DriverEnvironment_LogMessage = (PLibMCEnvDriverEnvironment_LogMessagePtr) GetProcAddress(hLibrary, "libmcenv_driverenvironment_logmessage");
		#else // _WIN32
		pWrapperTable->m_DriverEnvironment_LogMessage = (PLibMCEnvDriverEnvironment_LogMessagePtr) dlsym(hLibrary, "libmcenv_driverenvironment_logmessage");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_DriverEnvironment_LogMessage == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_DriverEnvironment_LogWarning = (PLibMCEnvDriverEnvironment_LogWarningPtr) GetProcAddress(hLibrary, "libmcenv_driverenvironment_logwarning");
		#else // _WIN32
		pWrapperTable->m_DriverEnvironment_LogWarning = (PLibMCEnvDriverEnvironment_LogWarningPtr) dlsym(hLibrary, "libmcenv_driverenvironment_logwarning");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_DriverEnvironment_LogWarning == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_DriverEnvironment_LogInfo = (PLibMCEnvDriverEnvironment_LogInfoPtr) GetProcAddress(hLibrary, "libmcenv_driverenvironment_loginfo");
		#else // _WIN32
		pWrapperTable->m_DriverEnvironment_LogInfo = (PLibMCEnvDriverEnvironment_LogInfoPtr) dlsym(hLibrary, "libmcenv_driverenvironment_loginfo");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_DriverEnvironment_LogInfo == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_DriverEnvironment_CreateEmptyImage = (PLibMCEnvDriverEnvironment_CreateEmptyImagePtr) GetProcAddress(hLibrary, "libmcenv_driverenvironment_createemptyimage");
		#else // _WIN32
		pWrapperTable->m_DriverEnvironment_CreateEmptyImage = (PLibMCEnvDriverEnvironment_CreateEmptyImagePtr) dlsym(hLibrary, "libmcenv_driverenvironment_createemptyimage");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_DriverEnvironment_CreateEmptyImage == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_DriverEnvironment_LoadPNGImage = (PLibMCEnvDriverEnvironment_LoadPNGImagePtr) GetProcAddress(hLibrary, "libmcenv_driverenvironment_loadpngimage");
		#else // _WIN32
		pWrapperTable->m_DriverEnvironment_LoadPNGImage = (PLibMCEnvDriverEnvironment_LoadPNGImagePtr) dlsym(hLibrary, "libmcenv_driverenvironment_loadpngimage");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_DriverEnvironment_LoadPNGImage == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_SignalTrigger_CanTrigger = (PLibMCEnvSignalTrigger_CanTriggerPtr) GetProcAddress(hLibrary, "libmcenv_signaltrigger_cantrigger");
		#else // _WIN32
		pWrapperTable->m_SignalTrigger_CanTrigger = (PLibMCEnvSignalTrigger_CanTriggerPtr) dlsym(hLibrary, "libmcenv_signaltrigger_cantrigger");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_SignalTrigger_CanTrigger == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_SignalTrigger_Trigger = (PLibMCEnvSignalTrigger_TriggerPtr) GetProcAddress(hLibrary, "libmcenv_signaltrigger_trigger");
		#else // _WIN32
		pWrapperTable->m_SignalTrigger_Trigger = (PLibMCEnvSignalTrigger_TriggerPtr) dlsym(hLibrary, "libmcenv_signaltrigger_trigger");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_SignalTrigger_Trigger == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_SignalTrigger_WaitForHandling = (PLibMCEnvSignalTrigger_WaitForHandlingPtr) GetProcAddress(hLibrary, "libmcenv_signaltrigger_waitforhandling");
		#else // _WIN32
		pWrapperTable->m_SignalTrigger_WaitForHandling = (PLibMCEnvSignalTrigger_WaitForHandlingPtr) dlsym(hLibrary, "libmcenv_signaltrigger_waitforhandling");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_SignalTrigger_WaitForHandling == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_SignalTrigger_GetName = (PLibMCEnvSignalTrigger_GetNamePtr) GetProcAddress(hLibrary, "libmcenv_signaltrigger_getname");
		#else // _WIN32
		pWrapperTable->m_SignalTrigger_GetName = (PLibMCEnvSignalTrigger_GetNamePtr) dlsym(hLibrary, "libmcenv_signaltrigger_getname");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_SignalTrigger_GetName == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_SignalTrigger_GetStateMachine = (PLibMCEnvSignalTrigger_GetStateMachinePtr) GetProcAddress(hLibrary, "libmcenv_signaltrigger_getstatemachine");
		#else // _WIN32
		pWrapperTable->m_SignalTrigger_GetStateMachine = (PLibMCEnvSignalTrigger_GetStateMachinePtr) dlsym(hLibrary, "libmcenv_signaltrigger_getstatemachine");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_SignalTrigger_GetStateMachine == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_SignalTrigger_SetString = (PLibMCEnvSignalTrigger_SetStringPtr) GetProcAddress(hLibrary, "libmcenv_signaltrigger_setstring");
		#else // _WIN32
		pWrapperTable->m_SignalTrigger_SetString = (PLibMCEnvSignalTrigger_SetStringPtr) dlsym(hLibrary, "libmcenv_signaltrigger_setstring");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_SignalTrigger_SetString == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_SignalTrigger_SetUUID = (PLibMCEnvSignalTrigger_SetUUIDPtr) GetProcAddress(hLibrary, "libmcenv_signaltrigger_setuuid");
		#else // _WIN32
		pWrapperTable->m_SignalTrigger_SetUUID = (PLibMCEnvSignalTrigger_SetUUIDPtr) dlsym(hLibrary, "libmcenv_signaltrigger_setuuid");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_SignalTrigger_SetUUID == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_SignalTrigger_SetDouble = (PLibMCEnvSignalTrigger_SetDoublePtr) GetProcAddress(hLibrary, "libmcenv_signaltrigger_setdouble");
		#else // _WIN32
		pWrapperTable->m_SignalTrigger_SetDouble = (PLibMCEnvSignalTrigger_SetDoublePtr) dlsym(hLibrary, "libmcenv_signaltrigger_setdouble");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_SignalTrigger_SetDouble == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_SignalTrigger_SetInteger = (PLibMCEnvSignalTrigger_SetIntegerPtr) GetProcAddress(hLibrary, "libmcenv_signaltrigger_setinteger");
		#else // _WIN32
		pWrapperTable->m_SignalTrigger_SetInteger = (PLibMCEnvSignalTrigger_SetIntegerPtr) dlsym(hLibrary, "libmcenv_signaltrigger_setinteger");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_SignalTrigger_SetInteger == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_SignalTrigger_SetBool = (PLibMCEnvSignalTrigger_SetBoolPtr) GetProcAddress(hLibrary, "libmcenv_signaltrigger_setbool");
		#else // _WIN32
		pWrapperTable->m_SignalTrigger_SetBool = (PLibMCEnvSignalTrigger_SetBoolPtr) dlsym(hLibrary, "libmcenv_signaltrigger_setbool");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_SignalTrigger_SetBool == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_SignalTrigger_GetStringResult = (PLibMCEnvSignalTrigger_GetStringResultPtr) GetProcAddress(hLibrary, "libmcenv_signaltrigger_getstringresult");
		#else // _WIN32
		pWrapperTable->m_SignalTrigger_GetStringResult = (PLibMCEnvSignalTrigger_GetStringResultPtr) dlsym(hLibrary, "libmcenv_signaltrigger_getstringresult");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_SignalTrigger_GetStringResult == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_SignalTrigger_GetUUIDResult = (PLibMCEnvSignalTrigger_GetUUIDResultPtr) GetProcAddress(hLibrary, "libmcenv_signaltrigger_getuuidresult");
		#else // _WIN32
		pWrapperTable->m_SignalTrigger_GetUUIDResult = (PLibMCEnvSignalTrigger_GetUUIDResultPtr) dlsym(hLibrary, "libmcenv_signaltrigger_getuuidresult");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_SignalTrigger_GetUUIDResult == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_SignalTrigger_GetDoubleResult = (PLibMCEnvSignalTrigger_GetDoubleResultPtr) GetProcAddress(hLibrary, "libmcenv_signaltrigger_getdoubleresult");
		#else // _WIN32
		pWrapperTable->m_SignalTrigger_GetDoubleResult = (PLibMCEnvSignalTrigger_GetDoubleResultPtr) dlsym(hLibrary, "libmcenv_signaltrigger_getdoubleresult");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_SignalTrigger_GetDoubleResult == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_SignalTrigger_GetIntegerResult = (PLibMCEnvSignalTrigger_GetIntegerResultPtr) GetProcAddress(hLibrary, "libmcenv_signaltrigger_getintegerresult");
		#else // _WIN32
		pWrapperTable->m_SignalTrigger_GetIntegerResult = (PLibMCEnvSignalTrigger_GetIntegerResultPtr) dlsym(hLibrary, "libmcenv_signaltrigger_getintegerresult");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_SignalTrigger_GetIntegerResult == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_SignalTrigger_GetBoolResult = (PLibMCEnvSignalTrigger_GetBoolResultPtr) GetProcAddress(hLibrary, "libmcenv_signaltrigger_getboolresult");
		#else // _WIN32
		pWrapperTable->m_SignalTrigger_GetBoolResult = (PLibMCEnvSignalTrigger_GetBoolResultPtr) dlsym(hLibrary, "libmcenv_signaltrigger_getboolresult");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_SignalTrigger_GetBoolResult == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_SignalHandler_SignalHandled = (PLibMCEnvSignalHandler_SignalHandledPtr) GetProcAddress(hLibrary, "libmcenv_signalhandler_signalhandled");
		#else // _WIN32
		pWrapperTable->m_SignalHandler_SignalHandled = (PLibMCEnvSignalHandler_SignalHandledPtr) dlsym(hLibrary, "libmcenv_signalhandler_signalhandled");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_SignalHandler_SignalHandled == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_SignalHandler_GetName = (PLibMCEnvSignalHandler_GetNamePtr) GetProcAddress(hLibrary, "libmcenv_signalhandler_getname");
		#else // _WIN32
		pWrapperTable->m_SignalHandler_GetName = (PLibMCEnvSignalHandler_GetNamePtr) dlsym(hLibrary, "libmcenv_signalhandler_getname");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_SignalHandler_GetName == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_SignalHandler_GetSignalID = (PLibMCEnvSignalHandler_GetSignalIDPtr) GetProcAddress(hLibrary, "libmcenv_signalhandler_getsignalid");
		#else // _WIN32
		pWrapperTable->m_SignalHandler_GetSignalID = (PLibMCEnvSignalHandler_GetSignalIDPtr) dlsym(hLibrary, "libmcenv_signalhandler_getsignalid");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_SignalHandler_GetSignalID == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_SignalHandler_GetSignalUUID = (PLibMCEnvSignalHandler_GetSignalUUIDPtr) GetProcAddress(hLibrary, "libmcenv_signalhandler_getsignaluuid");
		#else // _WIN32
		pWrapperTable->m_SignalHandler_GetSignalUUID = (PLibMCEnvSignalHandler_GetSignalUUIDPtr) dlsym(hLibrary, "libmcenv_signalhandler_getsignaluuid");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_SignalHandler_GetSignalUUID == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_SignalHandler_GetStateMachine = (PLibMCEnvSignalHandler_GetStateMachinePtr) GetProcAddress(hLibrary, "libmcenv_signalhandler_getstatemachine");
		#else // _WIN32
		pWrapperTable->m_SignalHandler_GetStateMachine = (PLibMCEnvSignalHandler_GetStateMachinePtr) dlsym(hLibrary, "libmcenv_signalhandler_getstatemachine");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_SignalHandler_GetStateMachine == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_SignalHandler_GetString = (PLibMCEnvSignalHandler_GetStringPtr) GetProcAddress(hLibrary, "libmcenv_signalhandler_getstring");
		#else // _WIN32
		pWrapperTable->m_SignalHandler_GetString = (PLibMCEnvSignalHandler_GetStringPtr) dlsym(hLibrary, "libmcenv_signalhandler_getstring");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_SignalHandler_GetString == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_SignalHandler_GetUUID = (PLibMCEnvSignalHandler_GetUUIDPtr) GetProcAddress(hLibrary, "libmcenv_signalhandler_getuuid");
		#else // _WIN32
		pWrapperTable->m_SignalHandler_GetUUID = (PLibMCEnvSignalHandler_GetUUIDPtr) dlsym(hLibrary, "libmcenv_signalhandler_getuuid");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_SignalHandler_GetUUID == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_SignalHandler_GetDouble = (PLibMCEnvSignalHandler_GetDoublePtr) GetProcAddress(hLibrary, "libmcenv_signalhandler_getdouble");
		#else // _WIN32
		pWrapperTable->m_SignalHandler_GetDouble = (PLibMCEnvSignalHandler_GetDoublePtr) dlsym(hLibrary, "libmcenv_signalhandler_getdouble");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_SignalHandler_GetDouble == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_SignalHandler_GetInteger = (PLibMCEnvSignalHandler_GetIntegerPtr) GetProcAddress(hLibrary, "libmcenv_signalhandler_getinteger");
		#else // _WIN32
		pWrapperTable->m_SignalHandler_GetInteger = (PLibMCEnvSignalHandler_GetIntegerPtr) dlsym(hLibrary, "libmcenv_signalhandler_getinteger");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_SignalHandler_GetInteger == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_SignalHandler_GetBool = (PLibMCEnvSignalHandler_GetBoolPtr) GetProcAddress(hLibrary, "libmcenv_signalhandler_getbool");
		#else // _WIN32
		pWrapperTable->m_SignalHandler_GetBool = (PLibMCEnvSignalHandler_GetBoolPtr) dlsym(hLibrary, "libmcenv_signalhandler_getbool");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_SignalHandler_GetBool == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_SignalHandler_SetStringResult = (PLibMCEnvSignalHandler_SetStringResultPtr) GetProcAddress(hLibrary, "libmcenv_signalhandler_setstringresult");
		#else // _WIN32
		pWrapperTable->m_SignalHandler_SetStringResult = (PLibMCEnvSignalHandler_SetStringResultPtr) dlsym(hLibrary, "libmcenv_signalhandler_setstringresult");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_SignalHandler_SetStringResult == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_SignalHandler_SetUUIDResult = (PLibMCEnvSignalHandler_SetUUIDResultPtr) GetProcAddress(hLibrary, "libmcenv_signalhandler_setuuidresult");
		#else // _WIN32
		pWrapperTable->m_SignalHandler_SetUUIDResult = (PLibMCEnvSignalHandler_SetUUIDResultPtr) dlsym(hLibrary, "libmcenv_signalhandler_setuuidresult");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_SignalHandler_SetUUIDResult == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_SignalHandler_SetDoubleResult = (PLibMCEnvSignalHandler_SetDoubleResultPtr) GetProcAddress(hLibrary, "libmcenv_signalhandler_setdoubleresult");
		#else // _WIN32
		pWrapperTable->m_SignalHandler_SetDoubleResult = (PLibMCEnvSignalHandler_SetDoubleResultPtr) dlsym(hLibrary, "libmcenv_signalhandler_setdoubleresult");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_SignalHandler_SetDoubleResult == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_SignalHandler_SetIntegerResult = (PLibMCEnvSignalHandler_SetIntegerResultPtr) GetProcAddress(hLibrary, "libmcenv_signalhandler_setintegerresult");
		#else // _WIN32
		pWrapperTable->m_SignalHandler_SetIntegerResult = (PLibMCEnvSignalHandler_SetIntegerResultPtr) dlsym(hLibrary, "libmcenv_signalhandler_setintegerresult");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_SignalHandler_SetIntegerResult == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_SignalHandler_SetBoolResult = (PLibMCEnvSignalHandler_SetBoolResultPtr) GetProcAddress(hLibrary, "libmcenv_signalhandler_setboolresult");
		#else // _WIN32
		pWrapperTable->m_SignalHandler_SetBoolResult = (PLibMCEnvSignalHandler_SetBoolResultPtr) dlsym(hLibrary, "libmcenv_signalhandler_setboolresult");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_SignalHandler_SetBoolResult == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_StateEnvironment_GetMachineState = (PLibMCEnvStateEnvironment_GetMachineStatePtr) GetProcAddress(hLibrary, "libmcenv_stateenvironment_getmachinestate");
		#else // _WIN32
		pWrapperTable->m_StateEnvironment_GetMachineState = (PLibMCEnvStateEnvironment_GetMachineStatePtr) dlsym(hLibrary, "libmcenv_stateenvironment_getmachinestate");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_StateEnvironment_GetMachineState == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_StateEnvironment_PrepareSignal = (PLibMCEnvStateEnvironment_PrepareSignalPtr) GetProcAddress(hLibrary, "libmcenv_stateenvironment_preparesignal");
		#else // _WIN32
		pWrapperTable->m_StateEnvironment_PrepareSignal = (PLibMCEnvStateEnvironment_PrepareSignalPtr) dlsym(hLibrary, "libmcenv_stateenvironment_preparesignal");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_StateEnvironment_PrepareSignal == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_StateEnvironment_WaitForSignal = (PLibMCEnvStateEnvironment_WaitForSignalPtr) GetProcAddress(hLibrary, "libmcenv_stateenvironment_waitforsignal");
		#else // _WIN32
		pWrapperTable->m_StateEnvironment_WaitForSignal = (PLibMCEnvStateEnvironment_WaitForSignalPtr) dlsym(hLibrary, "libmcenv_stateenvironment_waitforsignal");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_StateEnvironment_WaitForSignal == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_StateEnvironment_GetUnhandledSignal = (PLibMCEnvStateEnvironment_GetUnhandledSignalPtr) GetProcAddress(hLibrary, "libmcenv_stateenvironment_getunhandledsignal");
		#else // _WIN32
		pWrapperTable->m_StateEnvironment_GetUnhandledSignal = (PLibMCEnvStateEnvironment_GetUnhandledSignalPtr) dlsym(hLibrary, "libmcenv_stateenvironment_getunhandledsignal");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_StateEnvironment_GetUnhandledSignal == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_StateEnvironment_GetUnhandledSignalByUUID = (PLibMCEnvStateEnvironment_GetUnhandledSignalByUUIDPtr) GetProcAddress(hLibrary, "libmcenv_stateenvironment_getunhandledsignalbyuuid");
		#else // _WIN32
		pWrapperTable->m_StateEnvironment_GetUnhandledSignalByUUID = (PLibMCEnvStateEnvironment_GetUnhandledSignalByUUIDPtr) dlsym(hLibrary, "libmcenv_stateenvironment_getunhandledsignalbyuuid");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_StateEnvironment_GetUnhandledSignalByUUID == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_StateEnvironment_GetDriverLibrary = (PLibMCEnvStateEnvironment_GetDriverLibraryPtr) GetProcAddress(hLibrary, "libmcenv_stateenvironment_getdriverlibrary");
		#else // _WIN32
		pWrapperTable->m_StateEnvironment_GetDriverLibrary = (PLibMCEnvStateEnvironment_GetDriverLibraryPtr) dlsym(hLibrary, "libmcenv_stateenvironment_getdriverlibrary");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_StateEnvironment_GetDriverLibrary == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_StateEnvironment_CreateDriverAccess = (PLibMCEnvStateEnvironment_CreateDriverAccessPtr) GetProcAddress(hLibrary, "libmcenv_stateenvironment_createdriveraccess");
		#else // _WIN32
		pWrapperTable->m_StateEnvironment_CreateDriverAccess = (PLibMCEnvStateEnvironment_CreateDriverAccessPtr) dlsym(hLibrary, "libmcenv_stateenvironment_createdriveraccess");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_StateEnvironment_CreateDriverAccess == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_StateEnvironment_GetBuildJob = (PLibMCEnvStateEnvironment_GetBuildJobPtr) GetProcAddress(hLibrary, "libmcenv_stateenvironment_getbuildjob");
		#else // _WIN32
		pWrapperTable->m_StateEnvironment_GetBuildJob = (PLibMCEnvStateEnvironment_GetBuildJobPtr) dlsym(hLibrary, "libmcenv_stateenvironment_getbuildjob");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_StateEnvironment_GetBuildJob == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_StateEnvironment_UnloadAllToolpathes = (PLibMCEnvStateEnvironment_UnloadAllToolpathesPtr) GetProcAddress(hLibrary, "libmcenv_stateenvironment_unloadalltoolpathes");
		#else // _WIN32
		pWrapperTable->m_StateEnvironment_UnloadAllToolpathes = (PLibMCEnvStateEnvironment_UnloadAllToolpathesPtr) dlsym(hLibrary, "libmcenv_stateenvironment_unloadalltoolpathes");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_StateEnvironment_UnloadAllToolpathes == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_StateEnvironment_SetNextState = (PLibMCEnvStateEnvironment_SetNextStatePtr) GetProcAddress(hLibrary, "libmcenv_stateenvironment_setnextstate");
		#else // _WIN32
		pWrapperTable->m_StateEnvironment_SetNextState = (PLibMCEnvStateEnvironment_SetNextStatePtr) dlsym(hLibrary, "libmcenv_stateenvironment_setnextstate");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_StateEnvironment_SetNextState == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_StateEnvironment_LogMessage = (PLibMCEnvStateEnvironment_LogMessagePtr) GetProcAddress(hLibrary, "libmcenv_stateenvironment_logmessage");
		#else // _WIN32
		pWrapperTable->m_StateEnvironment_LogMessage = (PLibMCEnvStateEnvironment_LogMessagePtr) dlsym(hLibrary, "libmcenv_stateenvironment_logmessage");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_StateEnvironment_LogMessage == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_StateEnvironment_LogWarning = (PLibMCEnvStateEnvironment_LogWarningPtr) GetProcAddress(hLibrary, "libmcenv_stateenvironment_logwarning");
		#else // _WIN32
		pWrapperTable->m_StateEnvironment_LogWarning = (PLibMCEnvStateEnvironment_LogWarningPtr) dlsym(hLibrary, "libmcenv_stateenvironment_logwarning");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_StateEnvironment_LogWarning == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_StateEnvironment_LogInfo = (PLibMCEnvStateEnvironment_LogInfoPtr) GetProcAddress(hLibrary, "libmcenv_stateenvironment_loginfo");
		#else // _WIN32
		pWrapperTable->m_StateEnvironment_LogInfo = (PLibMCEnvStateEnvironment_LogInfoPtr) dlsym(hLibrary, "libmcenv_stateenvironment_loginfo");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_StateEnvironment_LogInfo == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_StateEnvironment_Sleep = (PLibMCEnvStateEnvironment_SleepPtr) GetProcAddress(hLibrary, "libmcenv_stateenvironment_sleep");
		#else // _WIN32
		pWrapperTable->m_StateEnvironment_Sleep = (PLibMCEnvStateEnvironment_SleepPtr) dlsym(hLibrary, "libmcenv_stateenvironment_sleep");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_StateEnvironment_Sleep == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_StateEnvironment_CheckForTermination = (PLibMCEnvStateEnvironment_CheckForTerminationPtr) GetProcAddress(hLibrary, "libmcenv_stateenvironment_checkfortermination");
		#else // _WIN32
		pWrapperTable->m_StateEnvironment_CheckForTermination = (PLibMCEnvStateEnvironment_CheckForTerminationPtr) dlsym(hLibrary, "libmcenv_stateenvironment_checkfortermination");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_StateEnvironment_CheckForTermination == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_StateEnvironment_StoreSignal = (PLibMCEnvStateEnvironment_StoreSignalPtr) GetProcAddress(hLibrary, "libmcenv_stateenvironment_storesignal");
		#else // _WIN32
		pWrapperTable->m_StateEnvironment_StoreSignal = (PLibMCEnvStateEnvironment_StoreSignalPtr) dlsym(hLibrary, "libmcenv_stateenvironment_storesignal");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_StateEnvironment_StoreSignal == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_StateEnvironment_RetrieveSignal = (PLibMCEnvStateEnvironment_RetrieveSignalPtr) GetProcAddress(hLibrary, "libmcenv_stateenvironment_retrievesignal");
		#else // _WIN32
		pWrapperTable->m_StateEnvironment_RetrieveSignal = (PLibMCEnvStateEnvironment_RetrieveSignalPtr) dlsym(hLibrary, "libmcenv_stateenvironment_retrievesignal");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_StateEnvironment_RetrieveSignal == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_StateEnvironment_ClearStoredValue = (PLibMCEnvStateEnvironment_ClearStoredValuePtr) GetProcAddress(hLibrary, "libmcenv_stateenvironment_clearstoredvalue");
		#else // _WIN32
		pWrapperTable->m_StateEnvironment_ClearStoredValue = (PLibMCEnvStateEnvironment_ClearStoredValuePtr) dlsym(hLibrary, "libmcenv_stateenvironment_clearstoredvalue");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_StateEnvironment_ClearStoredValue == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_StateEnvironment_SetStringParameter = (PLibMCEnvStateEnvironment_SetStringParameterPtr) GetProcAddress(hLibrary, "libmcenv_stateenvironment_setstringparameter");
		#else // _WIN32
		pWrapperTable->m_StateEnvironment_SetStringParameter = (PLibMCEnvStateEnvironment_SetStringParameterPtr) dlsym(hLibrary, "libmcenv_stateenvironment_setstringparameter");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_StateEnvironment_SetStringParameter == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_StateEnvironment_SetUUIDParameter = (PLibMCEnvStateEnvironment_SetUUIDParameterPtr) GetProcAddress(hLibrary, "libmcenv_stateenvironment_setuuidparameter");
		#else // _WIN32
		pWrapperTable->m_StateEnvironment_SetUUIDParameter = (PLibMCEnvStateEnvironment_SetUUIDParameterPtr) dlsym(hLibrary, "libmcenv_stateenvironment_setuuidparameter");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_StateEnvironment_SetUUIDParameter == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_StateEnvironment_SetDoubleParameter = (PLibMCEnvStateEnvironment_SetDoubleParameterPtr) GetProcAddress(hLibrary, "libmcenv_stateenvironment_setdoubleparameter");
		#else // _WIN32
		pWrapperTable->m_StateEnvironment_SetDoubleParameter = (PLibMCEnvStateEnvironment_SetDoubleParameterPtr) dlsym(hLibrary, "libmcenv_stateenvironment_setdoubleparameter");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_StateEnvironment_SetDoubleParameter == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_StateEnvironment_SetIntegerParameter = (PLibMCEnvStateEnvironment_SetIntegerParameterPtr) GetProcAddress(hLibrary, "libmcenv_stateenvironment_setintegerparameter");
		#else // _WIN32
		pWrapperTable->m_StateEnvironment_SetIntegerParameter = (PLibMCEnvStateEnvironment_SetIntegerParameterPtr) dlsym(hLibrary, "libmcenv_stateenvironment_setintegerparameter");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_StateEnvironment_SetIntegerParameter == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_StateEnvironment_SetBoolParameter = (PLibMCEnvStateEnvironment_SetBoolParameterPtr) GetProcAddress(hLibrary, "libmcenv_stateenvironment_setboolparameter");
		#else // _WIN32
		pWrapperTable->m_StateEnvironment_SetBoolParameter = (PLibMCEnvStateEnvironment_SetBoolParameterPtr) dlsym(hLibrary, "libmcenv_stateenvironment_setboolparameter");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_StateEnvironment_SetBoolParameter == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_StateEnvironment_GetStringParameter = (PLibMCEnvStateEnvironment_GetStringParameterPtr) GetProcAddress(hLibrary, "libmcenv_stateenvironment_getstringparameter");
		#else // _WIN32
		pWrapperTable->m_StateEnvironment_GetStringParameter = (PLibMCEnvStateEnvironment_GetStringParameterPtr) dlsym(hLibrary, "libmcenv_stateenvironment_getstringparameter");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_StateEnvironment_GetStringParameter == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_StateEnvironment_GetUUIDParameter = (PLibMCEnvStateEnvironment_GetUUIDParameterPtr) GetProcAddress(hLibrary, "libmcenv_stateenvironment_getuuidparameter");
		#else // _WIN32
		pWrapperTable->m_StateEnvironment_GetUUIDParameter = (PLibMCEnvStateEnvironment_GetUUIDParameterPtr) dlsym(hLibrary, "libmcenv_stateenvironment_getuuidparameter");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_StateEnvironment_GetUUIDParameter == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_StateEnvironment_GetDoubleParameter = (PLibMCEnvStateEnvironment_GetDoubleParameterPtr) GetProcAddress(hLibrary, "libmcenv_stateenvironment_getdoubleparameter");
		#else // _WIN32
		pWrapperTable->m_StateEnvironment_GetDoubleParameter = (PLibMCEnvStateEnvironment_GetDoubleParameterPtr) dlsym(hLibrary, "libmcenv_stateenvironment_getdoubleparameter");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_StateEnvironment_GetDoubleParameter == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_StateEnvironment_GetIntegerParameter = (PLibMCEnvStateEnvironment_GetIntegerParameterPtr) GetProcAddress(hLibrary, "libmcenv_stateenvironment_getintegerparameter");
		#else // _WIN32
		pWrapperTable->m_StateEnvironment_GetIntegerParameter = (PLibMCEnvStateEnvironment_GetIntegerParameterPtr) dlsym(hLibrary, "libmcenv_stateenvironment_getintegerparameter");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_StateEnvironment_GetIntegerParameter == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_StateEnvironment_GetBoolParameter = (PLibMCEnvStateEnvironment_GetBoolParameterPtr) GetProcAddress(hLibrary, "libmcenv_stateenvironment_getboolparameter");
		#else // _WIN32
		pWrapperTable->m_StateEnvironment_GetBoolParameter = (PLibMCEnvStateEnvironment_GetBoolParameterPtr) dlsym(hLibrary, "libmcenv_stateenvironment_getboolparameter");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_StateEnvironment_GetBoolParameter == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_StateEnvironment_LoadResourceData = (PLibMCEnvStateEnvironment_LoadResourceDataPtr) GetProcAddress(hLibrary, "libmcenv_stateenvironment_loadresourcedata");
		#else // _WIN32
		pWrapperTable->m_StateEnvironment_LoadResourceData = (PLibMCEnvStateEnvironment_LoadResourceDataPtr) dlsym(hLibrary, "libmcenv_stateenvironment_loadresourcedata");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_StateEnvironment_LoadResourceData == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_StateEnvironment_LoadResourceString = (PLibMCEnvStateEnvironment_LoadResourceStringPtr) GetProcAddress(hLibrary, "libmcenv_stateenvironment_loadresourcestring");
		#else // _WIN32
		pWrapperTable->m_StateEnvironment_LoadResourceString = (PLibMCEnvStateEnvironment_LoadResourceStringPtr) dlsym(hLibrary, "libmcenv_stateenvironment_loadresourcestring");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_StateEnvironment_LoadResourceString == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_StateEnvironment_CreateEmptyImage = (PLibMCEnvStateEnvironment_CreateEmptyImagePtr) GetProcAddress(hLibrary, "libmcenv_stateenvironment_createemptyimage");
		#else // _WIN32
		pWrapperTable->m_StateEnvironment_CreateEmptyImage = (PLibMCEnvStateEnvironment_CreateEmptyImagePtr) dlsym(hLibrary, "libmcenv_stateenvironment_createemptyimage");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_StateEnvironment_CreateEmptyImage == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_StateEnvironment_LoadPNGImage = (PLibMCEnvStateEnvironment_LoadPNGImagePtr) GetProcAddress(hLibrary, "libmcenv_stateenvironment_loadpngimage");
		#else // _WIN32
		pWrapperTable->m_StateEnvironment_LoadPNGImage = (PLibMCEnvStateEnvironment_LoadPNGImagePtr) dlsym(hLibrary, "libmcenv_stateenvironment_loadpngimage");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_StateEnvironment_LoadPNGImage == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_StateEnvironment_GetGlobalTimerInMilliseconds = (PLibMCEnvStateEnvironment_GetGlobalTimerInMillisecondsPtr) GetProcAddress(hLibrary, "libmcenv_stateenvironment_getglobaltimerinmilliseconds");
		#else // _WIN32
		pWrapperTable->m_StateEnvironment_GetGlobalTimerInMilliseconds = (PLibMCEnvStateEnvironment_GetGlobalTimerInMillisecondsPtr) dlsym(hLibrary, "libmcenv_stateenvironment_getglobaltimerinmilliseconds");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_StateEnvironment_GetGlobalTimerInMilliseconds == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_StateEnvironment_GetTestEnvironment = (PLibMCEnvStateEnvironment_GetTestEnvironmentPtr) GetProcAddress(hLibrary, "libmcenv_stateenvironment_gettestenvironment");
		#else // _WIN32
		pWrapperTable->m_StateEnvironment_GetTestEnvironment = (PLibMCEnvStateEnvironment_GetTestEnvironmentPtr) dlsym(hLibrary, "libmcenv_stateenvironment_gettestenvironment");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_StateEnvironment_GetTestEnvironment == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_StateEnvironment_CreateXMLDocument = (PLibMCEnvStateEnvironment_CreateXMLDocumentPtr) GetProcAddress(hLibrary, "libmcenv_stateenvironment_createxmldocument");
		#else // _WIN32
		pWrapperTable->m_StateEnvironment_CreateXMLDocument = (PLibMCEnvStateEnvironment_CreateXMLDocumentPtr) dlsym(hLibrary, "libmcenv_stateenvironment_createxmldocument");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_StateEnvironment_CreateXMLDocument == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_StateEnvironment_ParseXMLString = (PLibMCEnvStateEnvironment_ParseXMLStringPtr) GetProcAddress(hLibrary, "libmcenv_stateenvironment_parsexmlstring");
		#else // _WIN32
		pWrapperTable->m_StateEnvironment_ParseXMLString = (PLibMCEnvStateEnvironment_ParseXMLStringPtr) dlsym(hLibrary, "libmcenv_stateenvironment_parsexmlstring");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_StateEnvironment_ParseXMLString == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_StateEnvironment_ParseXMLData = (PLibMCEnvStateEnvironment_ParseXMLDataPtr) GetProcAddress(hLibrary, "libmcenv_stateenvironment_parsexmldata");
		#else // _WIN32
		pWrapperTable->m_StateEnvironment_ParseXMLData = (PLibMCEnvStateEnvironment_ParseXMLDataPtr) dlsym(hLibrary, "libmcenv_stateenvironment_parsexmldata");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_StateEnvironment_ParseXMLData == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_UIEnvironment_ActivateModalDialog = (PLibMCEnvUIEnvironment_ActivateModalDialogPtr) GetProcAddress(hLibrary, "libmcenv_uienvironment_activatemodaldialog");
		#else // _WIN32
		pWrapperTable->m_UIEnvironment_ActivateModalDialog = (PLibMCEnvUIEnvironment_ActivateModalDialogPtr) dlsym(hLibrary, "libmcenv_uienvironment_activatemodaldialog");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_UIEnvironment_ActivateModalDialog == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_UIEnvironment_CloseModalDialog = (PLibMCEnvUIEnvironment_CloseModalDialogPtr) GetProcAddress(hLibrary, "libmcenv_uienvironment_closemodaldialog");
		#else // _WIN32
		pWrapperTable->m_UIEnvironment_CloseModalDialog = (PLibMCEnvUIEnvironment_CloseModalDialogPtr) dlsym(hLibrary, "libmcenv_uienvironment_closemodaldialog");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_UIEnvironment_CloseModalDialog == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_UIEnvironment_ActivatePage = (PLibMCEnvUIEnvironment_ActivatePagePtr) GetProcAddress(hLibrary, "libmcenv_uienvironment_activatepage");
		#else // _WIN32
		pWrapperTable->m_UIEnvironment_ActivatePage = (PLibMCEnvUIEnvironment_ActivatePagePtr) dlsym(hLibrary, "libmcenv_uienvironment_activatepage");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_UIEnvironment_ActivatePage == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_UIEnvironment_LogOut = (PLibMCEnvUIEnvironment_LogOutPtr) GetProcAddress(hLibrary, "libmcenv_uienvironment_logout");
		#else // _WIN32
		pWrapperTable->m_UIEnvironment_LogOut = (PLibMCEnvUIEnvironment_LogOutPtr) dlsym(hLibrary, "libmcenv_uienvironment_logout");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_UIEnvironment_LogOut == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_UIEnvironment_ShowHint = (PLibMCEnvUIEnvironment_ShowHintPtr) GetProcAddress(hLibrary, "libmcenv_uienvironment_showhint");
		#else // _WIN32
		pWrapperTable->m_UIEnvironment_ShowHint = (PLibMCEnvUIEnvironment_ShowHintPtr) dlsym(hLibrary, "libmcenv_uienvironment_showhint");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_UIEnvironment_ShowHint == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_UIEnvironment_ShowHintColored = (PLibMCEnvUIEnvironment_ShowHintColoredPtr) GetProcAddress(hLibrary, "libmcenv_uienvironment_showhintcolored");
		#else // _WIN32
		pWrapperTable->m_UIEnvironment_ShowHintColored = (PLibMCEnvUIEnvironment_ShowHintColoredPtr) dlsym(hLibrary, "libmcenv_uienvironment_showhintcolored");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_UIEnvironment_ShowHintColored == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_UIEnvironment_HideHint = (PLibMCEnvUIEnvironment_HideHintPtr) GetProcAddress(hLibrary, "libmcenv_uienvironment_hidehint");
		#else // _WIN32
		pWrapperTable->m_UIEnvironment_HideHint = (PLibMCEnvUIEnvironment_HideHintPtr) dlsym(hLibrary, "libmcenv_uienvironment_hidehint");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_UIEnvironment_HideHint == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_UIEnvironment_ShowMessageDlg = (PLibMCEnvUIEnvironment_ShowMessageDlgPtr) GetProcAddress(hLibrary, "libmcenv_uienvironment_showmessagedlg");
		#else // _WIN32
		pWrapperTable->m_UIEnvironment_ShowMessageDlg = (PLibMCEnvUIEnvironment_ShowMessageDlgPtr) dlsym(hLibrary, "libmcenv_uienvironment_showmessagedlg");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_UIEnvironment_ShowMessageDlg == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_UIEnvironment_RetrieveEventSender = (PLibMCEnvUIEnvironment_RetrieveEventSenderPtr) GetProcAddress(hLibrary, "libmcenv_uienvironment_retrieveeventsender");
		#else // _WIN32
		pWrapperTable->m_UIEnvironment_RetrieveEventSender = (PLibMCEnvUIEnvironment_RetrieveEventSenderPtr) dlsym(hLibrary, "libmcenv_uienvironment_retrieveeventsender");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_UIEnvironment_RetrieveEventSender == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_UIEnvironment_RetrieveEventSenderUUID = (PLibMCEnvUIEnvironment_RetrieveEventSenderUUIDPtr) GetProcAddress(hLibrary, "libmcenv_uienvironment_retrieveeventsenderuuid");
		#else // _WIN32
		pWrapperTable->m_UIEnvironment_RetrieveEventSenderUUID = (PLibMCEnvUIEnvironment_RetrieveEventSenderUUIDPtr) dlsym(hLibrary, "libmcenv_uienvironment_retrieveeventsenderuuid");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_UIEnvironment_RetrieveEventSenderUUID == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_UIEnvironment_PrepareSignal = (PLibMCEnvUIEnvironment_PrepareSignalPtr) GetProcAddress(hLibrary, "libmcenv_uienvironment_preparesignal");
		#else // _WIN32
		pWrapperTable->m_UIEnvironment_PrepareSignal = (PLibMCEnvUIEnvironment_PrepareSignalPtr) dlsym(hLibrary, "libmcenv_uienvironment_preparesignal");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_UIEnvironment_PrepareSignal == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_UIEnvironment_GetMachineState = (PLibMCEnvUIEnvironment_GetMachineStatePtr) GetProcAddress(hLibrary, "libmcenv_uienvironment_getmachinestate");
		#else // _WIN32
		pWrapperTable->m_UIEnvironment_GetMachineState = (PLibMCEnvUIEnvironment_GetMachineStatePtr) dlsym(hLibrary, "libmcenv_uienvironment_getmachinestate");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_UIEnvironment_GetMachineState == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_UIEnvironment_LogMessage = (PLibMCEnvUIEnvironment_LogMessagePtr) GetProcAddress(hLibrary, "libmcenv_uienvironment_logmessage");
		#else // _WIN32
		pWrapperTable->m_UIEnvironment_LogMessage = (PLibMCEnvUIEnvironment_LogMessagePtr) dlsym(hLibrary, "libmcenv_uienvironment_logmessage");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_UIEnvironment_LogMessage == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_UIEnvironment_LogWarning = (PLibMCEnvUIEnvironment_LogWarningPtr) GetProcAddress(hLibrary, "libmcenv_uienvironment_logwarning");
		#else // _WIN32
		pWrapperTable->m_UIEnvironment_LogWarning = (PLibMCEnvUIEnvironment_LogWarningPtr) dlsym(hLibrary, "libmcenv_uienvironment_logwarning");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_UIEnvironment_LogWarning == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_UIEnvironment_LogInfo = (PLibMCEnvUIEnvironment_LogInfoPtr) GetProcAddress(hLibrary, "libmcenv_uienvironment_loginfo");
		#else // _WIN32
		pWrapperTable->m_UIEnvironment_LogInfo = (PLibMCEnvUIEnvironment_LogInfoPtr) dlsym(hLibrary, "libmcenv_uienvironment_loginfo");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_UIEnvironment_LogInfo == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_UIEnvironment_GetMachineParameter = (PLibMCEnvUIEnvironment_GetMachineParameterPtr) GetProcAddress(hLibrary, "libmcenv_uienvironment_getmachineparameter");
		#else // _WIN32
		pWrapperTable->m_UIEnvironment_GetMachineParameter = (PLibMCEnvUIEnvironment_GetMachineParameterPtr) dlsym(hLibrary, "libmcenv_uienvironment_getmachineparameter");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_UIEnvironment_GetMachineParameter == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_UIEnvironment_GetMachineParameterAsUUID = (PLibMCEnvUIEnvironment_GetMachineParameterAsUUIDPtr) GetProcAddress(hLibrary, "libmcenv_uienvironment_getmachineparameterasuuid");
		#else // _WIN32
		pWrapperTable->m_UIEnvironment_GetMachineParameterAsUUID = (PLibMCEnvUIEnvironment_GetMachineParameterAsUUIDPtr) dlsym(hLibrary, "libmcenv_uienvironment_getmachineparameterasuuid");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_UIEnvironment_GetMachineParameterAsUUID == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_UIEnvironment_GetMachineParameterAsDouble = (PLibMCEnvUIEnvironment_GetMachineParameterAsDoublePtr) GetProcAddress(hLibrary, "libmcenv_uienvironment_getmachineparameterasdouble");
		#else // _WIN32
		pWrapperTable->m_UIEnvironment_GetMachineParameterAsDouble = (PLibMCEnvUIEnvironment_GetMachineParameterAsDoublePtr) dlsym(hLibrary, "libmcenv_uienvironment_getmachineparameterasdouble");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_UIEnvironment_GetMachineParameterAsDouble == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_UIEnvironment_GetMachineParameterAsInteger = (PLibMCEnvUIEnvironment_GetMachineParameterAsIntegerPtr) GetProcAddress(hLibrary, "libmcenv_uienvironment_getmachineparameterasinteger");
		#else // _WIN32
		pWrapperTable->m_UIEnvironment_GetMachineParameterAsInteger = (PLibMCEnvUIEnvironment_GetMachineParameterAsIntegerPtr) dlsym(hLibrary, "libmcenv_uienvironment_getmachineparameterasinteger");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_UIEnvironment_GetMachineParameterAsInteger == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_UIEnvironment_GetMachineParameterAsBool = (PLibMCEnvUIEnvironment_GetMachineParameterAsBoolPtr) GetProcAddress(hLibrary, "libmcenv_uienvironment_getmachineparameterasbool");
		#else // _WIN32
		pWrapperTable->m_UIEnvironment_GetMachineParameterAsBool = (PLibMCEnvUIEnvironment_GetMachineParameterAsBoolPtr) dlsym(hLibrary, "libmcenv_uienvironment_getmachineparameterasbool");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_UIEnvironment_GetMachineParameterAsBool == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_UIEnvironment_GetUIProperty = (PLibMCEnvUIEnvironment_GetUIPropertyPtr) GetProcAddress(hLibrary, "libmcenv_uienvironment_getuiproperty");
		#else // _WIN32
		pWrapperTable->m_UIEnvironment_GetUIProperty = (PLibMCEnvUIEnvironment_GetUIPropertyPtr) dlsym(hLibrary, "libmcenv_uienvironment_getuiproperty");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_UIEnvironment_GetUIProperty == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_UIEnvironment_GetUIPropertyAsUUID = (PLibMCEnvUIEnvironment_GetUIPropertyAsUUIDPtr) GetProcAddress(hLibrary, "libmcenv_uienvironment_getuipropertyasuuid");
		#else // _WIN32
		pWrapperTable->m_UIEnvironment_GetUIPropertyAsUUID = (PLibMCEnvUIEnvironment_GetUIPropertyAsUUIDPtr) dlsym(hLibrary, "libmcenv_uienvironment_getuipropertyasuuid");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_UIEnvironment_GetUIPropertyAsUUID == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_UIEnvironment_GetUIPropertyAsDouble = (PLibMCEnvUIEnvironment_GetUIPropertyAsDoublePtr) GetProcAddress(hLibrary, "libmcenv_uienvironment_getuipropertyasdouble");
		#else // _WIN32
		pWrapperTable->m_UIEnvironment_GetUIPropertyAsDouble = (PLibMCEnvUIEnvironment_GetUIPropertyAsDoublePtr) dlsym(hLibrary, "libmcenv_uienvironment_getuipropertyasdouble");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_UIEnvironment_GetUIPropertyAsDouble == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_UIEnvironment_GetUIPropertyAsInteger = (PLibMCEnvUIEnvironment_GetUIPropertyAsIntegerPtr) GetProcAddress(hLibrary, "libmcenv_uienvironment_getuipropertyasinteger");
		#else // _WIN32
		pWrapperTable->m_UIEnvironment_GetUIPropertyAsInteger = (PLibMCEnvUIEnvironment_GetUIPropertyAsIntegerPtr) dlsym(hLibrary, "libmcenv_uienvironment_getuipropertyasinteger");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_UIEnvironment_GetUIPropertyAsInteger == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_UIEnvironment_GetUIPropertyAsBool = (PLibMCEnvUIEnvironment_GetUIPropertyAsBoolPtr) GetProcAddress(hLibrary, "libmcenv_uienvironment_getuipropertyasbool");
		#else // _WIN32
		pWrapperTable->m_UIEnvironment_GetUIPropertyAsBool = (PLibMCEnvUIEnvironment_GetUIPropertyAsBoolPtr) dlsym(hLibrary, "libmcenv_uienvironment_getuipropertyasbool");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_UIEnvironment_GetUIPropertyAsBool == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_UIEnvironment_SetUIProperty = (PLibMCEnvUIEnvironment_SetUIPropertyPtr) GetProcAddress(hLibrary, "libmcenv_uienvironment_setuiproperty");
		#else // _WIN32
		pWrapperTable->m_UIEnvironment_SetUIProperty = (PLibMCEnvUIEnvironment_SetUIPropertyPtr) dlsym(hLibrary, "libmcenv_uienvironment_setuiproperty");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_UIEnvironment_SetUIProperty == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_UIEnvironment_SetUIPropertyAsUUID = (PLibMCEnvUIEnvironment_SetUIPropertyAsUUIDPtr) GetProcAddress(hLibrary, "libmcenv_uienvironment_setuipropertyasuuid");
		#else // _WIN32
		pWrapperTable->m_UIEnvironment_SetUIPropertyAsUUID = (PLibMCEnvUIEnvironment_SetUIPropertyAsUUIDPtr) dlsym(hLibrary, "libmcenv_uienvironment_setuipropertyasuuid");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_UIEnvironment_SetUIPropertyAsUUID == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_UIEnvironment_SetUIPropertyAsDouble = (PLibMCEnvUIEnvironment_SetUIPropertyAsDoublePtr) GetProcAddress(hLibrary, "libmcenv_uienvironment_setuipropertyasdouble");
		#else // _WIN32
		pWrapperTable->m_UIEnvironment_SetUIPropertyAsDouble = (PLibMCEnvUIEnvironment_SetUIPropertyAsDoublePtr) dlsym(hLibrary, "libmcenv_uienvironment_setuipropertyasdouble");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_UIEnvironment_SetUIPropertyAsDouble == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_UIEnvironment_SetUIPropertyAsInteger = (PLibMCEnvUIEnvironment_SetUIPropertyAsIntegerPtr) GetProcAddress(hLibrary, "libmcenv_uienvironment_setuipropertyasinteger");
		#else // _WIN32
		pWrapperTable->m_UIEnvironment_SetUIPropertyAsInteger = (PLibMCEnvUIEnvironment_SetUIPropertyAsIntegerPtr) dlsym(hLibrary, "libmcenv_uienvironment_setuipropertyasinteger");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_UIEnvironment_SetUIPropertyAsInteger == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_UIEnvironment_SetUIPropertyAsBool = (PLibMCEnvUIEnvironment_SetUIPropertyAsBoolPtr) GetProcAddress(hLibrary, "libmcenv_uienvironment_setuipropertyasbool");
		#else // _WIN32
		pWrapperTable->m_UIEnvironment_SetUIPropertyAsBool = (PLibMCEnvUIEnvironment_SetUIPropertyAsBoolPtr) dlsym(hLibrary, "libmcenv_uienvironment_setuipropertyasbool");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_UIEnvironment_SetUIPropertyAsBool == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_UIEnvironment_CreateEmptyImage = (PLibMCEnvUIEnvironment_CreateEmptyImagePtr) GetProcAddress(hLibrary, "libmcenv_uienvironment_createemptyimage");
		#else // _WIN32
		pWrapperTable->m_UIEnvironment_CreateEmptyImage = (PLibMCEnvUIEnvironment_CreateEmptyImagePtr) dlsym(hLibrary, "libmcenv_uienvironment_createemptyimage");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_UIEnvironment_CreateEmptyImage == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_UIEnvironment_LoadPNGImage = (PLibMCEnvUIEnvironment_LoadPNGImagePtr) GetProcAddress(hLibrary, "libmcenv_uienvironment_loadpngimage");
		#else // _WIN32
		pWrapperTable->m_UIEnvironment_LoadPNGImage = (PLibMCEnvUIEnvironment_LoadPNGImagePtr) dlsym(hLibrary, "libmcenv_uienvironment_loadpngimage");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_UIEnvironment_LoadPNGImage == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_UIEnvironment_GetGlobalTimerInMilliseconds = (PLibMCEnvUIEnvironment_GetGlobalTimerInMillisecondsPtr) GetProcAddress(hLibrary, "libmcenv_uienvironment_getglobaltimerinmilliseconds");
		#else // _WIN32
		pWrapperTable->m_UIEnvironment_GetGlobalTimerInMilliseconds = (PLibMCEnvUIEnvironment_GetGlobalTimerInMillisecondsPtr) dlsym(hLibrary, "libmcenv_uienvironment_getglobaltimerinmilliseconds");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_UIEnvironment_GetGlobalTimerInMilliseconds == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_UIEnvironment_GetTestEnvironment = (PLibMCEnvUIEnvironment_GetTestEnvironmentPtr) GetProcAddress(hLibrary, "libmcenv_uienvironment_gettestenvironment");
		#else // _WIN32
		pWrapperTable->m_UIEnvironment_GetTestEnvironment = (PLibMCEnvUIEnvironment_GetTestEnvironmentPtr) dlsym(hLibrary, "libmcenv_uienvironment_gettestenvironment");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_UIEnvironment_GetTestEnvironment == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_UIEnvironment_CreateXMLDocument = (PLibMCEnvUIEnvironment_CreateXMLDocumentPtr) GetProcAddress(hLibrary, "libmcenv_uienvironment_createxmldocument");
		#else // _WIN32
		pWrapperTable->m_UIEnvironment_CreateXMLDocument = (PLibMCEnvUIEnvironment_CreateXMLDocumentPtr) dlsym(hLibrary, "libmcenv_uienvironment_createxmldocument");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_UIEnvironment_CreateXMLDocument == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_UIEnvironment_ParseXMLString = (PLibMCEnvUIEnvironment_ParseXMLStringPtr) GetProcAddress(hLibrary, "libmcenv_uienvironment_parsexmlstring");
		#else // _WIN32
		pWrapperTable->m_UIEnvironment_ParseXMLString = (PLibMCEnvUIEnvironment_ParseXMLStringPtr) dlsym(hLibrary, "libmcenv_uienvironment_parsexmlstring");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_UIEnvironment_ParseXMLString == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_UIEnvironment_ParseXMLData = (PLibMCEnvUIEnvironment_ParseXMLDataPtr) GetProcAddress(hLibrary, "libmcenv_uienvironment_parsexmldata");
		#else // _WIN32
		pWrapperTable->m_UIEnvironment_ParseXMLData = (PLibMCEnvUIEnvironment_ParseXMLDataPtr) dlsym(hLibrary, "libmcenv_uienvironment_parsexmldata");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_UIEnvironment_ParseXMLData == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GetVersion = (PLibMCEnvGetVersionPtr) GetProcAddress(hLibrary, "libmcenv_getversion");
		#else // _WIN32
		pWrapperTable->m_GetVersion = (PLibMCEnvGetVersionPtr) dlsym(hLibrary, "libmcenv_getversion");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GetVersion == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GetLastError = (PLibMCEnvGetLastErrorPtr) GetProcAddress(hLibrary, "libmcenv_getlasterror");
		#else // _WIN32
		pWrapperTable->m_GetLastError = (PLibMCEnvGetLastErrorPtr) dlsym(hLibrary, "libmcenv_getlasterror");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GetLastError == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ReleaseInstance = (PLibMCEnvReleaseInstancePtr) GetProcAddress(hLibrary, "libmcenv_releaseinstance");
		#else // _WIN32
		pWrapperTable->m_ReleaseInstance = (PLibMCEnvReleaseInstancePtr) dlsym(hLibrary, "libmcenv_releaseinstance");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ReleaseInstance == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_AcquireInstance = (PLibMCEnvAcquireInstancePtr) GetProcAddress(hLibrary, "libmcenv_acquireinstance");
		#else // _WIN32
		pWrapperTable->m_AcquireInstance = (PLibMCEnvAcquireInstancePtr) dlsym(hLibrary, "libmcenv_acquireinstance");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_AcquireInstance == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GetSymbolLookupMethod = (PLibMCEnvGetSymbolLookupMethodPtr) GetProcAddress(hLibrary, "libmcenv_getsymbollookupmethod");
		#else // _WIN32
		pWrapperTable->m_GetSymbolLookupMethod = (PLibMCEnvGetSymbolLookupMethodPtr) dlsym(hLibrary, "libmcenv_getsymbollookupmethod");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GetSymbolLookupMethod == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		pWrapperTable->m_LibraryHandle = hLibrary;
		return LIBMCENV_SUCCESS;
	}

	inline LibMCEnvResult CWrapper::loadWrapperTableFromSymbolLookupMethod(sLibMCEnvDynamicWrapperTable * pWrapperTable, void* pSymbolLookupMethod)
{
		if (pWrapperTable == nullptr)
			return LIBMCENV_ERROR_INVALIDPARAM;
		if (pSymbolLookupMethod == nullptr)
			return LIBMCENV_ERROR_INVALIDPARAM;
		
		typedef LibMCEnvResult(*SymbolLookupType)(const char*, void**);
		
		SymbolLookupType pLookup = (SymbolLookupType)pSymbolLookupMethod;
		
		LibMCEnvResult eLookupError = LIBMCENV_SUCCESS;
		eLookupError = (*pLookup)("libmcenv_iterator_movenext", (void**)&(pWrapperTable->m_Iterator_MoveNext));
		if ( (eLookupError != 0) || (pWrapperTable->m_Iterator_MoveNext == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_iterator_moveprevious", (void**)&(pWrapperTable->m_Iterator_MovePrevious));
		if ( (eLookupError != 0) || (pWrapperTable->m_Iterator_MovePrevious == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_iterator_getcurrent", (void**)&(pWrapperTable->m_Iterator_GetCurrent));
		if ( (eLookupError != 0) || (pWrapperTable->m_Iterator_GetCurrent == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_iterator_clone", (void**)&(pWrapperTable->m_Iterator_Clone));
		if ( (eLookupError != 0) || (pWrapperTable->m_Iterator_Clone == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_iterator_count", (void**)&(pWrapperTable->m_Iterator_Count));
		if ( (eLookupError != 0) || (pWrapperTable->m_Iterator_Count == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_testenvironment_writetestoutput", (void**)&(pWrapperTable->m_TestEnvironment_WriteTestOutput));
		if ( (eLookupError != 0) || (pWrapperTable->m_TestEnvironment_WriteTestOutput == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_imagedata_getpixelformat", (void**)&(pWrapperTable->m_ImageData_GetPixelFormat));
		if ( (eLookupError != 0) || (pWrapperTable->m_ImageData_GetPixelFormat == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_imagedata_changepixelformat", (void**)&(pWrapperTable->m_ImageData_ChangePixelFormat));
		if ( (eLookupError != 0) || (pWrapperTable->m_ImageData_ChangePixelFormat == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_imagedata_getdpi", (void**)&(pWrapperTable->m_ImageData_GetDPI));
		if ( (eLookupError != 0) || (pWrapperTable->m_ImageData_GetDPI == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_imagedata_setdpi", (void**)&(pWrapperTable->m_ImageData_SetDPI));
		if ( (eLookupError != 0) || (pWrapperTable->m_ImageData_SetDPI == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_imagedata_getsizeinmm", (void**)&(pWrapperTable->m_ImageData_GetSizeInMM));
		if ( (eLookupError != 0) || (pWrapperTable->m_ImageData_GetSizeInMM == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_imagedata_getsizeinpixels", (void**)&(pWrapperTable->m_ImageData_GetSizeInPixels));
		if ( (eLookupError != 0) || (pWrapperTable->m_ImageData_GetSizeInPixels == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_imagedata_resizeimage", (void**)&(pWrapperTable->m_ImageData_ResizeImage));
		if ( (eLookupError != 0) || (pWrapperTable->m_ImageData_ResizeImage == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_imagedata_loadpng", (void**)&(pWrapperTable->m_ImageData_LoadPNG));
		if ( (eLookupError != 0) || (pWrapperTable->m_ImageData_LoadPNG == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_imagedata_encodepng", (void**)&(pWrapperTable->m_ImageData_EncodePNG));
		if ( (eLookupError != 0) || (pWrapperTable->m_ImageData_EncodePNG == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_imagedata_getencodedpngdata", (void**)&(pWrapperTable->m_ImageData_GetEncodedPNGData));
		if ( (eLookupError != 0) || (pWrapperTable->m_ImageData_GetEncodedPNGData == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_imagedata_clearencodedpngdata", (void**)&(pWrapperTable->m_ImageData_ClearEncodedPNGData));
		if ( (eLookupError != 0) || (pWrapperTable->m_ImageData_ClearEncodedPNGData == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_imagedata_clear", (void**)&(pWrapperTable->m_ImageData_Clear));
		if ( (eLookupError != 0) || (pWrapperTable->m_ImageData_Clear == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_imagedata_getpixel", (void**)&(pWrapperTable->m_ImageData_GetPixel));
		if ( (eLookupError != 0) || (pWrapperTable->m_ImageData_GetPixel == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_imagedata_setpixel", (void**)&(pWrapperTable->m_ImageData_SetPixel));
		if ( (eLookupError != 0) || (pWrapperTable->m_ImageData_SetPixel == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_imagedata_getpixelrange", (void**)&(pWrapperTable->m_ImageData_GetPixelRange));
		if ( (eLookupError != 0) || (pWrapperTable->m_ImageData_GetPixelRange == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_imagedata_setpixelrange", (void**)&(pWrapperTable->m_ImageData_SetPixelRange));
		if ( (eLookupError != 0) || (pWrapperTable->m_ImageData_SetPixelRange == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_toolpathpart_getname", (void**)&(pWrapperTable->m_ToolpathPart_GetName));
		if ( (eLookupError != 0) || (pWrapperTable->m_ToolpathPart_GetName == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_toolpathpart_getuuid", (void**)&(pWrapperTable->m_ToolpathPart_GetUUID));
		if ( (eLookupError != 0) || (pWrapperTable->m_ToolpathPart_GetUUID == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_toolpathpart_getmeshuuid", (void**)&(pWrapperTable->m_ToolpathPart_GetMeshUUID));
		if ( (eLookupError != 0) || (pWrapperTable->m_ToolpathPart_GetMeshUUID == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_toolpathpart_gettransform", (void**)&(pWrapperTable->m_ToolpathPart_GetTransform));
		if ( (eLookupError != 0) || (pWrapperTable->m_ToolpathPart_GetTransform == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_toolpathlayer_getlayerdatauuid", (void**)&(pWrapperTable->m_ToolpathLayer_GetLayerDataUUID));
		if ( (eLookupError != 0) || (pWrapperTable->m_ToolpathLayer_GetLayerDataUUID == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_toolpathlayer_getsegmentcount", (void**)&(pWrapperTable->m_ToolpathLayer_GetSegmentCount));
		if ( (eLookupError != 0) || (pWrapperTable->m_ToolpathLayer_GetSegmentCount == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_toolpathlayer_getsegmentinfo", (void**)&(pWrapperTable->m_ToolpathLayer_GetSegmentInfo));
		if ( (eLookupError != 0) || (pWrapperTable->m_ToolpathLayer_GetSegmentInfo == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_toolpathlayer_getsegmenttype", (void**)&(pWrapperTable->m_ToolpathLayer_GetSegmentType));
		if ( (eLookupError != 0) || (pWrapperTable->m_ToolpathLayer_GetSegmentType == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_toolpathlayer_getsegmentpointcount", (void**)&(pWrapperTable->m_ToolpathLayer_GetSegmentPointCount));
		if ( (eLookupError != 0) || (pWrapperTable->m_ToolpathLayer_GetSegmentPointCount == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_toolpathlayer_getsegmenthatchcount", (void**)&(pWrapperTable->m_ToolpathLayer_GetSegmentHatchCount));
		if ( (eLookupError != 0) || (pWrapperTable->m_ToolpathLayer_GetSegmentHatchCount == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_toolpathlayer_getsegmentprofileuuid", (void**)&(pWrapperTable->m_ToolpathLayer_GetSegmentProfileUUID));
		if ( (eLookupError != 0) || (pWrapperTable->m_ToolpathLayer_GetSegmentProfileUUID == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_toolpathlayer_segmentprofilehasvalue", (void**)&(pWrapperTable->m_ToolpathLayer_SegmentProfileHasValue));
		if ( (eLookupError != 0) || (pWrapperTable->m_ToolpathLayer_SegmentProfileHasValue == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_toolpathlayer_getsegmentprofilevalue", (void**)&(pWrapperTable->m_ToolpathLayer_GetSegmentProfileValue));
		if ( (eLookupError != 0) || (pWrapperTable->m_ToolpathLayer_GetSegmentProfileValue == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_toolpathlayer_getsegmentprofilevaluedef", (void**)&(pWrapperTable->m_ToolpathLayer_GetSegmentProfileValueDef));
		if ( (eLookupError != 0) || (pWrapperTable->m_ToolpathLayer_GetSegmentProfileValueDef == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_toolpathlayer_getsegmentprofiledoublevalue", (void**)&(pWrapperTable->m_ToolpathLayer_GetSegmentProfileDoubleValue));
		if ( (eLookupError != 0) || (pWrapperTable->m_ToolpathLayer_GetSegmentProfileDoubleValue == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_toolpathlayer_getsegmentprofiledoublevaluedef", (void**)&(pWrapperTable->m_ToolpathLayer_GetSegmentProfileDoubleValueDef));
		if ( (eLookupError != 0) || (pWrapperTable->m_ToolpathLayer_GetSegmentProfileDoubleValueDef == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_toolpathlayer_getsegmentprofileintegervalue", (void**)&(pWrapperTable->m_ToolpathLayer_GetSegmentProfileIntegerValue));
		if ( (eLookupError != 0) || (pWrapperTable->m_ToolpathLayer_GetSegmentProfileIntegerValue == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_toolpathlayer_getsegmentprofileintegervaluedef", (void**)&(pWrapperTable->m_ToolpathLayer_GetSegmentProfileIntegerValueDef));
		if ( (eLookupError != 0) || (pWrapperTable->m_ToolpathLayer_GetSegmentProfileIntegerValueDef == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_toolpathlayer_getsegmentprofileboolvalue", (void**)&(pWrapperTable->m_ToolpathLayer_GetSegmentProfileBoolValue));
		if ( (eLookupError != 0) || (pWrapperTable->m_ToolpathLayer_GetSegmentProfileBoolValue == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_toolpathlayer_getsegmentprofileboolvaluedef", (void**)&(pWrapperTable->m_ToolpathLayer_GetSegmentProfileBoolValueDef));
		if ( (eLookupError != 0) || (pWrapperTable->m_ToolpathLayer_GetSegmentProfileBoolValueDef == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_toolpathlayer_getsegmentprofiletypedvalue", (void**)&(pWrapperTable->m_ToolpathLayer_GetSegmentProfileTypedValue));
		if ( (eLookupError != 0) || (pWrapperTable->m_ToolpathLayer_GetSegmentProfileTypedValue == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_toolpathlayer_getsegmentprofiletypedvaluedef", (void**)&(pWrapperTable->m_ToolpathLayer_GetSegmentProfileTypedValueDef));
		if ( (eLookupError != 0) || (pWrapperTable->m_ToolpathLayer_GetSegmentProfileTypedValueDef == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_toolpathlayer_getsegmentpartuuid", (void**)&(pWrapperTable->m_ToolpathLayer_GetSegmentPartUUID));
		if ( (eLookupError != 0) || (pWrapperTable->m_ToolpathLayer_GetSegmentPartUUID == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_toolpathlayer_getsegmentpointdata", (void**)&(pWrapperTable->m_ToolpathLayer_GetSegmentPointData));
		if ( (eLookupError != 0) || (pWrapperTable->m_ToolpathLayer_GetSegmentPointData == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_toolpathlayer_getsegmenthatchdata", (void**)&(pWrapperTable->m_ToolpathLayer_GetSegmentHatchData));
		if ( (eLookupError != 0) || (pWrapperTable->m_ToolpathLayer_GetSegmentHatchData == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_toolpathlayer_getsegmentpointdatainmm", (void**)&(pWrapperTable->m_ToolpathLayer_GetSegmentPointDataInMM));
		if ( (eLookupError != 0) || (pWrapperTable->m_ToolpathLayer_GetSegmentPointDataInMM == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_toolpathlayer_getsegmenthatchdatainmm", (void**)&(pWrapperTable->m_ToolpathLayer_GetSegmentHatchDataInMM));
		if ( (eLookupError != 0) || (pWrapperTable->m_ToolpathLayer_GetSegmentHatchDataInMM == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_toolpathlayer_getzvalue", (void**)&(pWrapperTable->m_ToolpathLayer_GetZValue));
		if ( (eLookupError != 0) || (pWrapperTable->m_ToolpathLayer_GetZValue == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_toolpathlayer_getzvalueinmm", (void**)&(pWrapperTable->m_ToolpathLayer_GetZValueInMM));
		if ( (eLookupError != 0) || (pWrapperTable->m_ToolpathLayer_GetZValueInMM == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_toolpathlayer_getunits", (void**)&(pWrapperTable->m_ToolpathLayer_GetUnits));
		if ( (eLookupError != 0) || (pWrapperTable->m_ToolpathLayer_GetUnits == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_toolpathaccessor_getstorageuuid", (void**)&(pWrapperTable->m_ToolpathAccessor_GetStorageUUID));
		if ( (eLookupError != 0) || (pWrapperTable->m_ToolpathAccessor_GetStorageUUID == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_toolpathaccessor_getlayercount", (void**)&(pWrapperTable->m_ToolpathAccessor_GetLayerCount));
		if ( (eLookupError != 0) || (pWrapperTable->m_ToolpathAccessor_GetLayerCount == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_toolpathaccessor_loadlayer", (void**)&(pWrapperTable->m_ToolpathAccessor_LoadLayer));
		if ( (eLookupError != 0) || (pWrapperTable->m_ToolpathAccessor_LoadLayer == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_toolpathaccessor_getunits", (void**)&(pWrapperTable->m_ToolpathAccessor_GetUnits));
		if ( (eLookupError != 0) || (pWrapperTable->m_ToolpathAccessor_GetUnits == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_toolpathaccessor_hasmetadata", (void**)&(pWrapperTable->m_ToolpathAccessor_HasMetaData));
		if ( (eLookupError != 0) || (pWrapperTable->m_ToolpathAccessor_HasMetaData == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_toolpathaccessor_getmetadatavalue", (void**)&(pWrapperTable->m_ToolpathAccessor_GetMetaDataValue));
		if ( (eLookupError != 0) || (pWrapperTable->m_ToolpathAccessor_GetMetaDataValue == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_toolpathaccessor_getmetadatatype", (void**)&(pWrapperTable->m_ToolpathAccessor_GetMetaDataType));
		if ( (eLookupError != 0) || (pWrapperTable->m_ToolpathAccessor_GetMetaDataType == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_toolpathaccessor_getpartcount", (void**)&(pWrapperTable->m_ToolpathAccessor_GetPartCount));
		if ( (eLookupError != 0) || (pWrapperTable->m_ToolpathAccessor_GetPartCount == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_toolpathaccessor_getpart", (void**)&(pWrapperTable->m_ToolpathAccessor_GetPart));
		if ( (eLookupError != 0) || (pWrapperTable->m_ToolpathAccessor_GetPart == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_toolpathaccessor_findpartbyuuid", (void**)&(pWrapperTable->m_ToolpathAccessor_FindPartByUUID));
		if ( (eLookupError != 0) || (pWrapperTable->m_ToolpathAccessor_FindPartByUUID == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_toolpathaccessor_getbuildheightinunits", (void**)&(pWrapperTable->m_ToolpathAccessor_GetBuildHeightInUnits));
		if ( (eLookupError != 0) || (pWrapperTable->m_ToolpathAccessor_GetBuildHeightInUnits == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_toolpathaccessor_getzvalueinunits", (void**)&(pWrapperTable->m_ToolpathAccessor_GetZValueInUnits));
		if ( (eLookupError != 0) || (pWrapperTable->m_ToolpathAccessor_GetZValueInUnits == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_toolpathaccessor_getbuildheightinmm", (void**)&(pWrapperTable->m_ToolpathAccessor_GetBuildHeightInMM));
		if ( (eLookupError != 0) || (pWrapperTable->m_ToolpathAccessor_GetBuildHeightInMM == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_toolpathaccessor_getzvalueinmm", (void**)&(pWrapperTable->m_ToolpathAccessor_GetZValueInMM));
		if ( (eLookupError != 0) || (pWrapperTable->m_ToolpathAccessor_GetZValueInMM == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_build_getname", (void**)&(pWrapperTable->m_Build_GetName));
		if ( (eLookupError != 0) || (pWrapperTable->m_Build_GetName == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_build_getbuilduuid", (void**)&(pWrapperTable->m_Build_GetBuildUUID));
		if ( (eLookupError != 0) || (pWrapperTable->m_Build_GetBuildUUID == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_build_getstorageuuid", (void**)&(pWrapperTable->m_Build_GetStorageUUID));
		if ( (eLookupError != 0) || (pWrapperTable->m_Build_GetStorageUUID == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_build_getstoragesha256", (void**)&(pWrapperTable->m_Build_GetStorageSHA256));
		if ( (eLookupError != 0) || (pWrapperTable->m_Build_GetStorageSHA256 == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_build_getlayercount", (void**)&(pWrapperTable->m_Build_GetLayerCount));
		if ( (eLookupError != 0) || (pWrapperTable->m_Build_GetLayerCount == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_build_getbuildheightinmm", (void**)&(pWrapperTable->m_Build_GetBuildHeightInMM));
		if ( (eLookupError != 0) || (pWrapperTable->m_Build_GetBuildHeightInMM == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_build_getzvalueinmm", (void**)&(pWrapperTable->m_Build_GetZValueInMM));
		if ( (eLookupError != 0) || (pWrapperTable->m_Build_GetZValueInMM == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_build_loadtoolpath", (void**)&(pWrapperTable->m_Build_LoadToolpath));
		if ( (eLookupError != 0) || (pWrapperTable->m_Build_LoadToolpath == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_build_unloadtoolpath", (void**)&(pWrapperTable->m_Build_UnloadToolpath));
		if ( (eLookupError != 0) || (pWrapperTable->m_Build_UnloadToolpath == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_build_toolpathisloaded", (void**)&(pWrapperTable->m_Build_ToolpathIsLoaded));
		if ( (eLookupError != 0) || (pWrapperTable->m_Build_ToolpathIsLoaded == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_build_createtoolpathaccessor", (void**)&(pWrapperTable->m_Build_CreateToolpathAccessor));
		if ( (eLookupError != 0) || (pWrapperTable->m_Build_CreateToolpathAccessor == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_build_addbinarydata", (void**)&(pWrapperTable->m_Build_AddBinaryData));
		if ( (eLookupError != 0) || (pWrapperTable->m_Build_AddBinaryData == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_workingfileexecution_getstatus", (void**)&(pWrapperTable->m_WorkingFileExecution_GetStatus));
		if ( (eLookupError != 0) || (pWrapperTable->m_WorkingFileExecution_GetStatus == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_workingfileexecution_returnstdout", (void**)&(pWrapperTable->m_WorkingFileExecution_ReturnStdOut));
		if ( (eLookupError != 0) || (pWrapperTable->m_WorkingFileExecution_ReturnStdOut == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_workingfile_getabsolutefilename", (void**)&(pWrapperTable->m_WorkingFile_GetAbsoluteFileName));
		if ( (eLookupError != 0) || (pWrapperTable->m_WorkingFile_GetAbsoluteFileName == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_workingfile_getsize", (void**)&(pWrapperTable->m_WorkingFile_GetSize));
		if ( (eLookupError != 0) || (pWrapperTable->m_WorkingFile_GetSize == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_workingfile_calculatesha2", (void**)&(pWrapperTable->m_WorkingFile_CalculateSHA2));
		if ( (eLookupError != 0) || (pWrapperTable->m_WorkingFile_CalculateSHA2 == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_workingfile_executefile", (void**)&(pWrapperTable->m_WorkingFile_ExecuteFile));
		if ( (eLookupError != 0) || (pWrapperTable->m_WorkingFile_ExecuteFile == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_workingfile_ismanaged", (void**)&(pWrapperTable->m_WorkingFile_IsManaged));
		if ( (eLookupError != 0) || (pWrapperTable->m_WorkingFile_IsManaged == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_workingfile_makemanaged", (void**)&(pWrapperTable->m_WorkingFile_MakeManaged));
		if ( (eLookupError != 0) || (pWrapperTable->m_WorkingFile_MakeManaged == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_workingfile_fileexists", (void**)&(pWrapperTable->m_WorkingFile_FileExists));
		if ( (eLookupError != 0) || (pWrapperTable->m_WorkingFile_FileExists == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_workingfile_deletefromdisk", (void**)&(pWrapperTable->m_WorkingFile_DeleteFromDisk));
		if ( (eLookupError != 0) || (pWrapperTable->m_WorkingFile_DeleteFromDisk == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_workingfileiterator_getcurrentfile", (void**)&(pWrapperTable->m_WorkingFileIterator_GetCurrentFile));
		if ( (eLookupError != 0) || (pWrapperTable->m_WorkingFileIterator_GetCurrentFile == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_workingdirectory_isactive", (void**)&(pWrapperTable->m_WorkingDirectory_IsActive));
		if ( (eLookupError != 0) || (pWrapperTable->m_WorkingDirectory_IsActive == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_workingdirectory_getabsolutefilepath", (void**)&(pWrapperTable->m_WorkingDirectory_GetAbsoluteFilePath));
		if ( (eLookupError != 0) || (pWrapperTable->m_WorkingDirectory_GetAbsoluteFilePath == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_workingdirectory_storecustomdata", (void**)&(pWrapperTable->m_WorkingDirectory_StoreCustomData));
		if ( (eLookupError != 0) || (pWrapperTable->m_WorkingDirectory_StoreCustomData == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_workingdirectory_storecustomstring", (void**)&(pWrapperTable->m_WorkingDirectory_StoreCustomString));
		if ( (eLookupError != 0) || (pWrapperTable->m_WorkingDirectory_StoreCustomString == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_workingdirectory_storedriverdata", (void**)&(pWrapperTable->m_WorkingDirectory_StoreDriverData));
		if ( (eLookupError != 0) || (pWrapperTable->m_WorkingDirectory_StoreDriverData == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_workingdirectory_storecustomdataintempfile", (void**)&(pWrapperTable->m_WorkingDirectory_StoreCustomDataInTempFile));
		if ( (eLookupError != 0) || (pWrapperTable->m_WorkingDirectory_StoreCustomDataInTempFile == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_workingdirectory_storecustomstringintempfile", (void**)&(pWrapperTable->m_WorkingDirectory_StoreCustomStringInTempFile));
		if ( (eLookupError != 0) || (pWrapperTable->m_WorkingDirectory_StoreCustomStringInTempFile == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_workingdirectory_storedriverdataintempfile", (void**)&(pWrapperTable->m_WorkingDirectory_StoreDriverDataInTempFile));
		if ( (eLookupError != 0) || (pWrapperTable->m_WorkingDirectory_StoreDriverDataInTempFile == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_workingdirectory_cleanup", (void**)&(pWrapperTable->m_WorkingDirectory_CleanUp));
		if ( (eLookupError != 0) || (pWrapperTable->m_WorkingDirectory_CleanUp == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_workingdirectory_addmanagedfile", (void**)&(pWrapperTable->m_WorkingDirectory_AddManagedFile));
		if ( (eLookupError != 0) || (pWrapperTable->m_WorkingDirectory_AddManagedFile == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_workingdirectory_hasunmanagedfiles", (void**)&(pWrapperTable->m_WorkingDirectory_HasUnmanagedFiles));
		if ( (eLookupError != 0) || (pWrapperTable->m_WorkingDirectory_HasUnmanagedFiles == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_workingdirectory_retrieveunmanagedfiles", (void**)&(pWrapperTable->m_WorkingDirectory_RetrieveUnmanagedFiles));
		if ( (eLookupError != 0) || (pWrapperTable->m_WorkingDirectory_RetrieveUnmanagedFiles == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_workingdirectory_retrievemanagedfiles", (void**)&(pWrapperTable->m_WorkingDirectory_RetrieveManagedFiles));
		if ( (eLookupError != 0) || (pWrapperTable->m_WorkingDirectory_RetrieveManagedFiles == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_workingdirectory_retrieveallfiles", (void**)&(pWrapperTable->m_WorkingDirectory_RetrieveAllFiles));
		if ( (eLookupError != 0) || (pWrapperTable->m_WorkingDirectory_RetrieveAllFiles == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_xmldocumentattribute_getnamespace", (void**)&(pWrapperTable->m_XMLDocumentAttribute_GetNameSpace));
		if ( (eLookupError != 0) || (pWrapperTable->m_XMLDocumentAttribute_GetNameSpace == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_xmldocumentattribute_getname", (void**)&(pWrapperTable->m_XMLDocumentAttribute_GetName));
		if ( (eLookupError != 0) || (pWrapperTable->m_XMLDocumentAttribute_GetName == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_xmldocumentattribute_getvalue", (void**)&(pWrapperTable->m_XMLDocumentAttribute_GetValue));
		if ( (eLookupError != 0) || (pWrapperTable->m_XMLDocumentAttribute_GetValue == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_xmldocumentattribute_isvalidinteger", (void**)&(pWrapperTable->m_XMLDocumentAttribute_IsValidInteger));
		if ( (eLookupError != 0) || (pWrapperTable->m_XMLDocumentAttribute_IsValidInteger == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_xmldocumentattribute_getintegervalue", (void**)&(pWrapperTable->m_XMLDocumentAttribute_GetIntegerValue));
		if ( (eLookupError != 0) || (pWrapperTable->m_XMLDocumentAttribute_GetIntegerValue == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_xmldocumentattribute_isvaliddouble", (void**)&(pWrapperTable->m_XMLDocumentAttribute_IsValidDouble));
		if ( (eLookupError != 0) || (pWrapperTable->m_XMLDocumentAttribute_IsValidDouble == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_xmldocumentattribute_getdoublevalue", (void**)&(pWrapperTable->m_XMLDocumentAttribute_GetDoubleValue));
		if ( (eLookupError != 0) || (pWrapperTable->m_XMLDocumentAttribute_GetDoubleValue == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_xmldocumentattribute_isvalidbool", (void**)&(pWrapperTable->m_XMLDocumentAttribute_IsValidBool));
		if ( (eLookupError != 0) || (pWrapperTable->m_XMLDocumentAttribute_IsValidBool == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_xmldocumentattribute_getboolvalue", (void**)&(pWrapperTable->m_XMLDocumentAttribute_GetBoolValue));
		if ( (eLookupError != 0) || (pWrapperTable->m_XMLDocumentAttribute_GetBoolValue == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_xmldocumentattribute_setvalue", (void**)&(pWrapperTable->m_XMLDocumentAttribute_SetValue));
		if ( (eLookupError != 0) || (pWrapperTable->m_XMLDocumentAttribute_SetValue == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_xmldocumentattribute_setintegervalue", (void**)&(pWrapperTable->m_XMLDocumentAttribute_SetIntegerValue));
		if ( (eLookupError != 0) || (pWrapperTable->m_XMLDocumentAttribute_SetIntegerValue == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_xmldocumentattribute_setdoublevalue", (void**)&(pWrapperTable->m_XMLDocumentAttribute_SetDoubleValue));
		if ( (eLookupError != 0) || (pWrapperTable->m_XMLDocumentAttribute_SetDoubleValue == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_xmldocumentattribute_setboolvalue", (void**)&(pWrapperTable->m_XMLDocumentAttribute_SetBoolValue));
		if ( (eLookupError != 0) || (pWrapperTable->m_XMLDocumentAttribute_SetBoolValue == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_xmldocumentattribute_remove", (void**)&(pWrapperTable->m_XMLDocumentAttribute_Remove));
		if ( (eLookupError != 0) || (pWrapperTable->m_XMLDocumentAttribute_Remove == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_xmldocumentnode_getname", (void**)&(pWrapperTable->m_XMLDocumentNode_GetName));
		if ( (eLookupError != 0) || (pWrapperTable->m_XMLDocumentNode_GetName == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_xmldocumentnode_getnamespace", (void**)&(pWrapperTable->m_XMLDocumentNode_GetNameSpace));
		if ( (eLookupError != 0) || (pWrapperTable->m_XMLDocumentNode_GetNameSpace == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_xmldocumentnode_getattributecount", (void**)&(pWrapperTable->m_XMLDocumentNode_GetAttributeCount));
		if ( (eLookupError != 0) || (pWrapperTable->m_XMLDocumentNode_GetAttributeCount == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_xmldocumentnode_getattribute", (void**)&(pWrapperTable->m_XMLDocumentNode_GetAttribute));
		if ( (eLookupError != 0) || (pWrapperTable->m_XMLDocumentNode_GetAttribute == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_xmldocumentnode_hasattribute", (void**)&(pWrapperTable->m_XMLDocumentNode_HasAttribute));
		if ( (eLookupError != 0) || (pWrapperTable->m_XMLDocumentNode_HasAttribute == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_xmldocumentnode_findattribute", (void**)&(pWrapperTable->m_XMLDocumentNode_FindAttribute));
		if ( (eLookupError != 0) || (pWrapperTable->m_XMLDocumentNode_FindAttribute == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_xmldocumentnode_removeattribute", (void**)&(pWrapperTable->m_XMLDocumentNode_RemoveAttribute));
		if ( (eLookupError != 0) || (pWrapperTable->m_XMLDocumentNode_RemoveAttribute == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_xmldocumentnode_removeattributebyindex", (void**)&(pWrapperTable->m_XMLDocumentNode_RemoveAttributeByIndex));
		if ( (eLookupError != 0) || (pWrapperTable->m_XMLDocumentNode_RemoveAttributeByIndex == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_xmldocumentnode_addattribute", (void**)&(pWrapperTable->m_XMLDocumentNode_AddAttribute));
		if ( (eLookupError != 0) || (pWrapperTable->m_XMLDocumentNode_AddAttribute == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_xmldocumentnode_addintegerattribute", (void**)&(pWrapperTable->m_XMLDocumentNode_AddIntegerAttribute));
		if ( (eLookupError != 0) || (pWrapperTable->m_XMLDocumentNode_AddIntegerAttribute == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_xmldocumentnode_adddoubleattribute", (void**)&(pWrapperTable->m_XMLDocumentNode_AddDoubleAttribute));
		if ( (eLookupError != 0) || (pWrapperTable->m_XMLDocumentNode_AddDoubleAttribute == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_xmldocumentnode_addboolattribute", (void**)&(pWrapperTable->m_XMLDocumentNode_AddBoolAttribute));
		if ( (eLookupError != 0) || (pWrapperTable->m_XMLDocumentNode_AddBoolAttribute == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_xmldocumentnode_getchildren", (void**)&(pWrapperTable->m_XMLDocumentNode_GetChildren));
		if ( (eLookupError != 0) || (pWrapperTable->m_XMLDocumentNode_GetChildren == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_xmldocumentnode_countchildrenbyname", (void**)&(pWrapperTable->m_XMLDocumentNode_CountChildrenByName));
		if ( (eLookupError != 0) || (pWrapperTable->m_XMLDocumentNode_CountChildrenByName == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_xmldocumentnode_getchildrenbyname", (void**)&(pWrapperTable->m_XMLDocumentNode_GetChildrenByName));
		if ( (eLookupError != 0) || (pWrapperTable->m_XMLDocumentNode_GetChildrenByName == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_xmldocumentnode_haschild", (void**)&(pWrapperTable->m_XMLDocumentNode_HasChild));
		if ( (eLookupError != 0) || (pWrapperTable->m_XMLDocumentNode_HasChild == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_xmldocumentnode_hasuniquechild", (void**)&(pWrapperTable->m_XMLDocumentNode_HasUniqueChild));
		if ( (eLookupError != 0) || (pWrapperTable->m_XMLDocumentNode_HasUniqueChild == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_xmldocumentnode_findchild", (void**)&(pWrapperTable->m_XMLDocumentNode_FindChild));
		if ( (eLookupError != 0) || (pWrapperTable->m_XMLDocumentNode_FindChild == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_xmldocumentnode_addchild", (void**)&(pWrapperTable->m_XMLDocumentNode_AddChild));
		if ( (eLookupError != 0) || (pWrapperTable->m_XMLDocumentNode_AddChild == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_xmldocumentnode_removechild", (void**)&(pWrapperTable->m_XMLDocumentNode_RemoveChild));
		if ( (eLookupError != 0) || (pWrapperTable->m_XMLDocumentNode_RemoveChild == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_xmldocumentnode_removechildrenwithname", (void**)&(pWrapperTable->m_XMLDocumentNode_RemoveChildrenWithName));
		if ( (eLookupError != 0) || (pWrapperTable->m_XMLDocumentNode_RemoveChildrenWithName == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_xmldocumentnode_remove", (void**)&(pWrapperTable->m_XMLDocumentNode_Remove));
		if ( (eLookupError != 0) || (pWrapperTable->m_XMLDocumentNode_Remove == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_xmldocumentnodes_getnodecount", (void**)&(pWrapperTable->m_XMLDocumentNodes_GetNodeCount));
		if ( (eLookupError != 0) || (pWrapperTable->m_XMLDocumentNodes_GetNodeCount == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_xmldocumentnodes_getnode", (void**)&(pWrapperTable->m_XMLDocumentNodes_GetNode));
		if ( (eLookupError != 0) || (pWrapperTable->m_XMLDocumentNodes_GetNode == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_xmldocumentnodes_countnodesbyname", (void**)&(pWrapperTable->m_XMLDocumentNodes_CountNodesByName));
		if ( (eLookupError != 0) || (pWrapperTable->m_XMLDocumentNodes_CountNodesByName == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_xmldocumentnodes_getnodesbyname", (void**)&(pWrapperTable->m_XMLDocumentNodes_GetNodesByName));
		if ( (eLookupError != 0) || (pWrapperTable->m_XMLDocumentNodes_GetNodesByName == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_xmldocumentnodes_hasnode", (void**)&(pWrapperTable->m_XMLDocumentNodes_HasNode));
		if ( (eLookupError != 0) || (pWrapperTable->m_XMLDocumentNodes_HasNode == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_xmldocumentnodes_hasuniquenode", (void**)&(pWrapperTable->m_XMLDocumentNodes_HasUniqueNode));
		if ( (eLookupError != 0) || (pWrapperTable->m_XMLDocumentNodes_HasUniqueNode == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_xmldocumentnodes_findnode", (void**)&(pWrapperTable->m_XMLDocumentNodes_FindNode));
		if ( (eLookupError != 0) || (pWrapperTable->m_XMLDocumentNodes_FindNode == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_xmldocument_getdefaultnamespace", (void**)&(pWrapperTable->m_XMLDocument_GetDefaultNamespace));
		if ( (eLookupError != 0) || (pWrapperTable->m_XMLDocument_GetDefaultNamespace == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_xmldocument_getnamespacecount", (void**)&(pWrapperTable->m_XMLDocument_GetNamespaceCount));
		if ( (eLookupError != 0) || (pWrapperTable->m_XMLDocument_GetNamespaceCount == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_xmldocument_getnamespace", (void**)&(pWrapperTable->m_XMLDocument_GetNamespace));
		if ( (eLookupError != 0) || (pWrapperTable->m_XMLDocument_GetNamespace == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_xmldocument_hasnamespace", (void**)&(pWrapperTable->m_XMLDocument_HasNamespace));
		if ( (eLookupError != 0) || (pWrapperTable->m_XMLDocument_HasNamespace == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_xmldocument_getnamespaceprefix", (void**)&(pWrapperTable->m_XMLDocument_GetNamespacePrefix));
		if ( (eLookupError != 0) || (pWrapperTable->m_XMLDocument_GetNamespacePrefix == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_xmldocument_registernamespace", (void**)&(pWrapperTable->m_XMLDocument_RegisterNamespace));
		if ( (eLookupError != 0) || (pWrapperTable->m_XMLDocument_RegisterNamespace == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_xmldocument_getrootnode", (void**)&(pWrapperTable->m_XMLDocument_GetRootNode));
		if ( (eLookupError != 0) || (pWrapperTable->m_XMLDocument_GetRootNode == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_xmldocument_savetostring", (void**)&(pWrapperTable->m_XMLDocument_SaveToString));
		if ( (eLookupError != 0) || (pWrapperTable->m_XMLDocument_SaveToString == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_tcpippacket_isempty", (void**)&(pWrapperTable->m_TCPIPPacket_IsEmpty));
		if ( (eLookupError != 0) || (pWrapperTable->m_TCPIPPacket_IsEmpty == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_tcpippacket_getsize", (void**)&(pWrapperTable->m_TCPIPPacket_GetSize));
		if ( (eLookupError != 0) || (pWrapperTable->m_TCPIPPacket_GetSize == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_tcpippacket_getdata", (void**)&(pWrapperTable->m_TCPIPPacket_GetData));
		if ( (eLookupError != 0) || (pWrapperTable->m_TCPIPPacket_GetData == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_tcpipconnection_getipaddress", (void**)&(pWrapperTable->m_TCPIPConnection_GetIPAddress));
		if ( (eLookupError != 0) || (pWrapperTable->m_TCPIPConnection_GetIPAddress == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_tcpipconnection_getport", (void**)&(pWrapperTable->m_TCPIPConnection_GetPort));
		if ( (eLookupError != 0) || (pWrapperTable->m_TCPIPConnection_GetPort == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_tcpipconnection_gettimeout", (void**)&(pWrapperTable->m_TCPIPConnection_GetTimeout));
		if ( (eLookupError != 0) || (pWrapperTable->m_TCPIPConnection_GetTimeout == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_tcpipconnection_isconnected", (void**)&(pWrapperTable->m_TCPIPConnection_IsConnected));
		if ( (eLookupError != 0) || (pWrapperTable->m_TCPIPConnection_IsConnected == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_tcpipconnection_disconnect", (void**)&(pWrapperTable->m_TCPIPConnection_Disconnect));
		if ( (eLookupError != 0) || (pWrapperTable->m_TCPIPConnection_Disconnect == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_tcpipconnection_reconnect", (void**)&(pWrapperTable->m_TCPIPConnection_Reconnect));
		if ( (eLookupError != 0) || (pWrapperTable->m_TCPIPConnection_Reconnect == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_tcpipconnection_sendbuffer", (void**)&(pWrapperTable->m_TCPIPConnection_SendBuffer));
		if ( (eLookupError != 0) || (pWrapperTable->m_TCPIPConnection_SendBuffer == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_tcpipconnection_waitfordata", (void**)&(pWrapperTable->m_TCPIPConnection_WaitForData));
		if ( (eLookupError != 0) || (pWrapperTable->m_TCPIPConnection_WaitForData == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_tcpipconnection_receivefixedpacket", (void**)&(pWrapperTable->m_TCPIPConnection_ReceiveFixedPacket));
		if ( (eLookupError != 0) || (pWrapperTable->m_TCPIPConnection_ReceiveFixedPacket == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_tcpipconnection_receivedata", (void**)&(pWrapperTable->m_TCPIPConnection_ReceiveData));
		if ( (eLookupError != 0) || (pWrapperTable->m_TCPIPConnection_ReceiveData == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_modbustcpdigitaliostatus_getcount", (void**)&(pWrapperTable->m_ModbusTCPDigitalIOStatus_GetCount));
		if ( (eLookupError != 0) || (pWrapperTable->m_ModbusTCPDigitalIOStatus_GetCount == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_modbustcpdigitaliostatus_getbaseaddress", (void**)&(pWrapperTable->m_ModbusTCPDigitalIOStatus_GetBaseAddress));
		if ( (eLookupError != 0) || (pWrapperTable->m_ModbusTCPDigitalIOStatus_GetBaseAddress == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_modbustcpdigitaliostatus_getvalue", (void**)&(pWrapperTable->m_ModbusTCPDigitalIOStatus_GetValue));
		if ( (eLookupError != 0) || (pWrapperTable->m_ModbusTCPDigitalIOStatus_GetValue == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_modbustcpdigitaliostatus_getvalues", (void**)&(pWrapperTable->m_ModbusTCPDigitalIOStatus_GetValues));
		if ( (eLookupError != 0) || (pWrapperTable->m_ModbusTCPDigitalIOStatus_GetValues == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_modbustcpregisterstatus_getcount", (void**)&(pWrapperTable->m_ModbusTCPRegisterStatus_GetCount));
		if ( (eLookupError != 0) || (pWrapperTable->m_ModbusTCPRegisterStatus_GetCount == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_modbustcpregisterstatus_getbaseaddress", (void**)&(pWrapperTable->m_ModbusTCPRegisterStatus_GetBaseAddress));
		if ( (eLookupError != 0) || (pWrapperTable->m_ModbusTCPRegisterStatus_GetBaseAddress == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_modbustcpregisterstatus_getvalue", (void**)&(pWrapperTable->m_ModbusTCPRegisterStatus_GetValue));
		if ( (eLookupError != 0) || (pWrapperTable->m_ModbusTCPRegisterStatus_GetValue == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_modbustcpregisterstatus_getvalues", (void**)&(pWrapperTable->m_ModbusTCPRegisterStatus_GetValues));
		if ( (eLookupError != 0) || (pWrapperTable->m_ModbusTCPRegisterStatus_GetValues == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_modbustcpconnection_getipaddress", (void**)&(pWrapperTable->m_ModbusTCPConnection_GetIPAddress));
		if ( (eLookupError != 0) || (pWrapperTable->m_ModbusTCPConnection_GetIPAddress == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_modbustcpconnection_getport", (void**)&(pWrapperTable->m_ModbusTCPConnection_GetPort));
		if ( (eLookupError != 0) || (pWrapperTable->m_ModbusTCPConnection_GetPort == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_modbustcpconnection_gettimeout", (void**)&(pWrapperTable->m_ModbusTCPConnection_GetTimeout));
		if ( (eLookupError != 0) || (pWrapperTable->m_ModbusTCPConnection_GetTimeout == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_modbustcpconnection_isconnected", (void**)&(pWrapperTable->m_ModbusTCPConnection_IsConnected));
		if ( (eLookupError != 0) || (pWrapperTable->m_ModbusTCPConnection_IsConnected == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_modbustcpconnection_disconnect", (void**)&(pWrapperTable->m_ModbusTCPConnection_Disconnect));
		if ( (eLookupError != 0) || (pWrapperTable->m_ModbusTCPConnection_Disconnect == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_modbustcpconnection_reconnect", (void**)&(pWrapperTable->m_ModbusTCPConnection_Reconnect));
		if ( (eLookupError != 0) || (pWrapperTable->m_ModbusTCPConnection_Reconnect == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_modbustcpconnection_diagnosiscall", (void**)&(pWrapperTable->m_ModbusTCPConnection_DiagnosisCall));
		if ( (eLookupError != 0) || (pWrapperTable->m_ModbusTCPConnection_DiagnosisCall == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_modbustcpconnection_readcoilstatus", (void**)&(pWrapperTable->m_ModbusTCPConnection_ReadCoilStatus));
		if ( (eLookupError != 0) || (pWrapperTable->m_ModbusTCPConnection_ReadCoilStatus == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_modbustcpconnection_readinputstatus", (void**)&(pWrapperTable->m_ModbusTCPConnection_ReadInputStatus));
		if ( (eLookupError != 0) || (pWrapperTable->m_ModbusTCPConnection_ReadInputStatus == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_modbustcpconnection_readholdingregisters", (void**)&(pWrapperTable->m_ModbusTCPConnection_ReadHoldingRegisters));
		if ( (eLookupError != 0) || (pWrapperTable->m_ModbusTCPConnection_ReadHoldingRegisters == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_modbustcpconnection_readinputregisters", (void**)&(pWrapperTable->m_ModbusTCPConnection_ReadInputRegisters));
		if ( (eLookupError != 0) || (pWrapperTable->m_ModbusTCPConnection_ReadInputRegisters == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_modbustcpconnection_forcemultiplecoils", (void**)&(pWrapperTable->m_ModbusTCPConnection_ForceMultipleCoils));
		if ( (eLookupError != 0) || (pWrapperTable->m_ModbusTCPConnection_ForceMultipleCoils == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_modbustcpconnection_presetmultipleregisters", (void**)&(pWrapperTable->m_ModbusTCPConnection_PresetMultipleRegisters));
		if ( (eLookupError != 0) || (pWrapperTable->m_ModbusTCPConnection_PresetMultipleRegisters == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_driverstatusupdatesession_setstringparameter", (void**)&(pWrapperTable->m_DriverStatusUpdateSession_SetStringParameter));
		if ( (eLookupError != 0) || (pWrapperTable->m_DriverStatusUpdateSession_SetStringParameter == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_driverstatusupdatesession_setuuidparameter", (void**)&(pWrapperTable->m_DriverStatusUpdateSession_SetUUIDParameter));
		if ( (eLookupError != 0) || (pWrapperTable->m_DriverStatusUpdateSession_SetUUIDParameter == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_driverstatusupdatesession_setdoubleparameter", (void**)&(pWrapperTable->m_DriverStatusUpdateSession_SetDoubleParameter));
		if ( (eLookupError != 0) || (pWrapperTable->m_DriverStatusUpdateSession_SetDoubleParameter == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_driverstatusupdatesession_setintegerparameter", (void**)&(pWrapperTable->m_DriverStatusUpdateSession_SetIntegerParameter));
		if ( (eLookupError != 0) || (pWrapperTable->m_DriverStatusUpdateSession_SetIntegerParameter == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_driverstatusupdatesession_setboolparameter", (void**)&(pWrapperTable->m_DriverStatusUpdateSession_SetBoolParameter));
		if ( (eLookupError != 0) || (pWrapperTable->m_DriverStatusUpdateSession_SetBoolParameter == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_driverstatusupdatesession_logmessage", (void**)&(pWrapperTable->m_DriverStatusUpdateSession_LogMessage));
		if ( (eLookupError != 0) || (pWrapperTable->m_DriverStatusUpdateSession_LogMessage == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_driverstatusupdatesession_logwarning", (void**)&(pWrapperTable->m_DriverStatusUpdateSession_LogWarning));
		if ( (eLookupError != 0) || (pWrapperTable->m_DriverStatusUpdateSession_LogWarning == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_driverstatusupdatesession_loginfo", (void**)&(pWrapperTable->m_DriverStatusUpdateSession_LogInfo));
		if ( (eLookupError != 0) || (pWrapperTable->m_DriverStatusUpdateSession_LogInfo == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_driverstatusupdatesession_sleep", (void**)&(pWrapperTable->m_DriverStatusUpdateSession_Sleep));
		if ( (eLookupError != 0) || (pWrapperTable->m_DriverStatusUpdateSession_Sleep == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_driverenvironment_createstatusupdatesession", (void**)&(pWrapperTable->m_DriverEnvironment_CreateStatusUpdateSession));
		if ( (eLookupError != 0) || (pWrapperTable->m_DriverEnvironment_CreateStatusUpdateSession == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_driverenvironment_createworkingdirectory", (void**)&(pWrapperTable->m_DriverEnvironment_CreateWorkingDirectory));
		if ( (eLookupError != 0) || (pWrapperTable->m_DriverEnvironment_CreateWorkingDirectory == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_driverenvironment_createtcpipconnection", (void**)&(pWrapperTable->m_DriverEnvironment_CreateTCPIPConnection));
		if ( (eLookupError != 0) || (pWrapperTable->m_DriverEnvironment_CreateTCPIPConnection == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_driverenvironment_createmodbustcpconnection", (void**)&(pWrapperTable->m_DriverEnvironment_CreateModbusTCPConnection));
		if ( (eLookupError != 0) || (pWrapperTable->m_DriverEnvironment_CreateModbusTCPConnection == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_driverenvironment_createxmldocument", (void**)&(pWrapperTable->m_DriverEnvironment_CreateXMLDocument));
		if ( (eLookupError != 0) || (pWrapperTable->m_DriverEnvironment_CreateXMLDocument == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_driverenvironment_parsexmlstring", (void**)&(pWrapperTable->m_DriverEnvironment_ParseXMLString));
		if ( (eLookupError != 0) || (pWrapperTable->m_DriverEnvironment_ParseXMLString == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_driverenvironment_parsexmldata", (void**)&(pWrapperTable->m_DriverEnvironment_ParseXMLData));
		if ( (eLookupError != 0) || (pWrapperTable->m_DriverEnvironment_ParseXMLData == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_driverenvironment_driverhasresourcedata", (void**)&(pWrapperTable->m_DriverEnvironment_DriverHasResourceData));
		if ( (eLookupError != 0) || (pWrapperTable->m_DriverEnvironment_DriverHasResourceData == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_driverenvironment_machinehasresourcedata", (void**)&(pWrapperTable->m_DriverEnvironment_MachineHasResourceData));
		if ( (eLookupError != 0) || (pWrapperTable->m_DriverEnvironment_MachineHasResourceData == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_driverenvironment_retrievedriverdata", (void**)&(pWrapperTable->m_DriverEnvironment_RetrieveDriverData));
		if ( (eLookupError != 0) || (pWrapperTable->m_DriverEnvironment_RetrieveDriverData == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_driverenvironment_retrievedriverresourcedata", (void**)&(pWrapperTable->m_DriverEnvironment_RetrieveDriverResourceData));
		if ( (eLookupError != 0) || (pWrapperTable->m_DriverEnvironment_RetrieveDriverResourceData == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_driverenvironment_retrievemachineresourcedata", (void**)&(pWrapperTable->m_DriverEnvironment_RetrieveMachineResourceData));
		if ( (eLookupError != 0) || (pWrapperTable->m_DriverEnvironment_RetrieveMachineResourceData == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_driverenvironment_createtoolpathaccessor", (void**)&(pWrapperTable->m_DriverEnvironment_CreateToolpathAccessor));
		if ( (eLookupError != 0) || (pWrapperTable->m_DriverEnvironment_CreateToolpathAccessor == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_driverenvironment_parameternameisvalid", (void**)&(pWrapperTable->m_DriverEnvironment_ParameterNameIsValid));
		if ( (eLookupError != 0) || (pWrapperTable->m_DriverEnvironment_ParameterNameIsValid == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_driverenvironment_registerstringparameter", (void**)&(pWrapperTable->m_DriverEnvironment_RegisterStringParameter));
		if ( (eLookupError != 0) || (pWrapperTable->m_DriverEnvironment_RegisterStringParameter == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_driverenvironment_registeruuidparameter", (void**)&(pWrapperTable->m_DriverEnvironment_RegisterUUIDParameter));
		if ( (eLookupError != 0) || (pWrapperTable->m_DriverEnvironment_RegisterUUIDParameter == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_driverenvironment_registerdoubleparameter", (void**)&(pWrapperTable->m_DriverEnvironment_RegisterDoubleParameter));
		if ( (eLookupError != 0) || (pWrapperTable->m_DriverEnvironment_RegisterDoubleParameter == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_driverenvironment_registerintegerparameter", (void**)&(pWrapperTable->m_DriverEnvironment_RegisterIntegerParameter));
		if ( (eLookupError != 0) || (pWrapperTable->m_DriverEnvironment_RegisterIntegerParameter == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_driverenvironment_registerboolparameter", (void**)&(pWrapperTable->m_DriverEnvironment_RegisterBoolParameter));
		if ( (eLookupError != 0) || (pWrapperTable->m_DriverEnvironment_RegisterBoolParameter == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_driverenvironment_setstringparameter", (void**)&(pWrapperTable->m_DriverEnvironment_SetStringParameter));
		if ( (eLookupError != 0) || (pWrapperTable->m_DriverEnvironment_SetStringParameter == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_driverenvironment_setuuidparameter", (void**)&(pWrapperTable->m_DriverEnvironment_SetUUIDParameter));
		if ( (eLookupError != 0) || (pWrapperTable->m_DriverEnvironment_SetUUIDParameter == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_driverenvironment_setdoubleparameter", (void**)&(pWrapperTable->m_DriverEnvironment_SetDoubleParameter));
		if ( (eLookupError != 0) || (pWrapperTable->m_DriverEnvironment_SetDoubleParameter == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_driverenvironment_setintegerparameter", (void**)&(pWrapperTable->m_DriverEnvironment_SetIntegerParameter));
		if ( (eLookupError != 0) || (pWrapperTable->m_DriverEnvironment_SetIntegerParameter == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_driverenvironment_setboolparameter", (void**)&(pWrapperTable->m_DriverEnvironment_SetBoolParameter));
		if ( (eLookupError != 0) || (pWrapperTable->m_DriverEnvironment_SetBoolParameter == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_driverenvironment_sleep", (void**)&(pWrapperTable->m_DriverEnvironment_Sleep));
		if ( (eLookupError != 0) || (pWrapperTable->m_DriverEnvironment_Sleep == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_driverenvironment_getglobaltimerinmilliseconds", (void**)&(pWrapperTable->m_DriverEnvironment_GetGlobalTimerInMilliseconds));
		if ( (eLookupError != 0) || (pWrapperTable->m_DriverEnvironment_GetGlobalTimerInMilliseconds == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_driverenvironment_logmessage", (void**)&(pWrapperTable->m_DriverEnvironment_LogMessage));
		if ( (eLookupError != 0) || (pWrapperTable->m_DriverEnvironment_LogMessage == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_driverenvironment_logwarning", (void**)&(pWrapperTable->m_DriverEnvironment_LogWarning));
		if ( (eLookupError != 0) || (pWrapperTable->m_DriverEnvironment_LogWarning == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_driverenvironment_loginfo", (void**)&(pWrapperTable->m_DriverEnvironment_LogInfo));
		if ( (eLookupError != 0) || (pWrapperTable->m_DriverEnvironment_LogInfo == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_driverenvironment_createemptyimage", (void**)&(pWrapperTable->m_DriverEnvironment_CreateEmptyImage));
		if ( (eLookupError != 0) || (pWrapperTable->m_DriverEnvironment_CreateEmptyImage == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_driverenvironment_loadpngimage", (void**)&(pWrapperTable->m_DriverEnvironment_LoadPNGImage));
		if ( (eLookupError != 0) || (pWrapperTable->m_DriverEnvironment_LoadPNGImage == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_signaltrigger_cantrigger", (void**)&(pWrapperTable->m_SignalTrigger_CanTrigger));
		if ( (eLookupError != 0) || (pWrapperTable->m_SignalTrigger_CanTrigger == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_signaltrigger_trigger", (void**)&(pWrapperTable->m_SignalTrigger_Trigger));
		if ( (eLookupError != 0) || (pWrapperTable->m_SignalTrigger_Trigger == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_signaltrigger_waitforhandling", (void**)&(pWrapperTable->m_SignalTrigger_WaitForHandling));
		if ( (eLookupError != 0) || (pWrapperTable->m_SignalTrigger_WaitForHandling == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_signaltrigger_getname", (void**)&(pWrapperTable->m_SignalTrigger_GetName));
		if ( (eLookupError != 0) || (pWrapperTable->m_SignalTrigger_GetName == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_signaltrigger_getstatemachine", (void**)&(pWrapperTable->m_SignalTrigger_GetStateMachine));
		if ( (eLookupError != 0) || (pWrapperTable->m_SignalTrigger_GetStateMachine == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_signaltrigger_setstring", (void**)&(pWrapperTable->m_SignalTrigger_SetString));
		if ( (eLookupError != 0) || (pWrapperTable->m_SignalTrigger_SetString == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_signaltrigger_setuuid", (void**)&(pWrapperTable->m_SignalTrigger_SetUUID));
		if ( (eLookupError != 0) || (pWrapperTable->m_SignalTrigger_SetUUID == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_signaltrigger_setdouble", (void**)&(pWrapperTable->m_SignalTrigger_SetDouble));
		if ( (eLookupError != 0) || (pWrapperTable->m_SignalTrigger_SetDouble == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_signaltrigger_setinteger", (void**)&(pWrapperTable->m_SignalTrigger_SetInteger));
		if ( (eLookupError != 0) || (pWrapperTable->m_SignalTrigger_SetInteger == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_signaltrigger_setbool", (void**)&(pWrapperTable->m_SignalTrigger_SetBool));
		if ( (eLookupError != 0) || (pWrapperTable->m_SignalTrigger_SetBool == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_signaltrigger_getstringresult", (void**)&(pWrapperTable->m_SignalTrigger_GetStringResult));
		if ( (eLookupError != 0) || (pWrapperTable->m_SignalTrigger_GetStringResult == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_signaltrigger_getuuidresult", (void**)&(pWrapperTable->m_SignalTrigger_GetUUIDResult));
		if ( (eLookupError != 0) || (pWrapperTable->m_SignalTrigger_GetUUIDResult == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_signaltrigger_getdoubleresult", (void**)&(pWrapperTable->m_SignalTrigger_GetDoubleResult));
		if ( (eLookupError != 0) || (pWrapperTable->m_SignalTrigger_GetDoubleResult == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_signaltrigger_getintegerresult", (void**)&(pWrapperTable->m_SignalTrigger_GetIntegerResult));
		if ( (eLookupError != 0) || (pWrapperTable->m_SignalTrigger_GetIntegerResult == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_signaltrigger_getboolresult", (void**)&(pWrapperTable->m_SignalTrigger_GetBoolResult));
		if ( (eLookupError != 0) || (pWrapperTable->m_SignalTrigger_GetBoolResult == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_signalhandler_signalhandled", (void**)&(pWrapperTable->m_SignalHandler_SignalHandled));
		if ( (eLookupError != 0) || (pWrapperTable->m_SignalHandler_SignalHandled == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_signalhandler_getname", (void**)&(pWrapperTable->m_SignalHandler_GetName));
		if ( (eLookupError != 0) || (pWrapperTable->m_SignalHandler_GetName == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_signalhandler_getsignalid", (void**)&(pWrapperTable->m_SignalHandler_GetSignalID));
		if ( (eLookupError != 0) || (pWrapperTable->m_SignalHandler_GetSignalID == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_signalhandler_getsignaluuid", (void**)&(pWrapperTable->m_SignalHandler_GetSignalUUID));
		if ( (eLookupError != 0) || (pWrapperTable->m_SignalHandler_GetSignalUUID == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_signalhandler_getstatemachine", (void**)&(pWrapperTable->m_SignalHandler_GetStateMachine));
		if ( (eLookupError != 0) || (pWrapperTable->m_SignalHandler_GetStateMachine == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_signalhandler_getstring", (void**)&(pWrapperTable->m_SignalHandler_GetString));
		if ( (eLookupError != 0) || (pWrapperTable->m_SignalHandler_GetString == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_signalhandler_getuuid", (void**)&(pWrapperTable->m_SignalHandler_GetUUID));
		if ( (eLookupError != 0) || (pWrapperTable->m_SignalHandler_GetUUID == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_signalhandler_getdouble", (void**)&(pWrapperTable->m_SignalHandler_GetDouble));
		if ( (eLookupError != 0) || (pWrapperTable->m_SignalHandler_GetDouble == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_signalhandler_getinteger", (void**)&(pWrapperTable->m_SignalHandler_GetInteger));
		if ( (eLookupError != 0) || (pWrapperTable->m_SignalHandler_GetInteger == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_signalhandler_getbool", (void**)&(pWrapperTable->m_SignalHandler_GetBool));
		if ( (eLookupError != 0) || (pWrapperTable->m_SignalHandler_GetBool == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_signalhandler_setstringresult", (void**)&(pWrapperTable->m_SignalHandler_SetStringResult));
		if ( (eLookupError != 0) || (pWrapperTable->m_SignalHandler_SetStringResult == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_signalhandler_setuuidresult", (void**)&(pWrapperTable->m_SignalHandler_SetUUIDResult));
		if ( (eLookupError != 0) || (pWrapperTable->m_SignalHandler_SetUUIDResult == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_signalhandler_setdoubleresult", (void**)&(pWrapperTable->m_SignalHandler_SetDoubleResult));
		if ( (eLookupError != 0) || (pWrapperTable->m_SignalHandler_SetDoubleResult == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_signalhandler_setintegerresult", (void**)&(pWrapperTable->m_SignalHandler_SetIntegerResult));
		if ( (eLookupError != 0) || (pWrapperTable->m_SignalHandler_SetIntegerResult == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_signalhandler_setboolresult", (void**)&(pWrapperTable->m_SignalHandler_SetBoolResult));
		if ( (eLookupError != 0) || (pWrapperTable->m_SignalHandler_SetBoolResult == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_stateenvironment_getmachinestate", (void**)&(pWrapperTable->m_StateEnvironment_GetMachineState));
		if ( (eLookupError != 0) || (pWrapperTable->m_StateEnvironment_GetMachineState == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_stateenvironment_preparesignal", (void**)&(pWrapperTable->m_StateEnvironment_PrepareSignal));
		if ( (eLookupError != 0) || (pWrapperTable->m_StateEnvironment_PrepareSignal == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_stateenvironment_waitforsignal", (void**)&(pWrapperTable->m_StateEnvironment_WaitForSignal));
		if ( (eLookupError != 0) || (pWrapperTable->m_StateEnvironment_WaitForSignal == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_stateenvironment_getunhandledsignal", (void**)&(pWrapperTable->m_StateEnvironment_GetUnhandledSignal));
		if ( (eLookupError != 0) || (pWrapperTable->m_StateEnvironment_GetUnhandledSignal == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_stateenvironment_getunhandledsignalbyuuid", (void**)&(pWrapperTable->m_StateEnvironment_GetUnhandledSignalByUUID));
		if ( (eLookupError != 0) || (pWrapperTable->m_StateEnvironment_GetUnhandledSignalByUUID == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_stateenvironment_getdriverlibrary", (void**)&(pWrapperTable->m_StateEnvironment_GetDriverLibrary));
		if ( (eLookupError != 0) || (pWrapperTable->m_StateEnvironment_GetDriverLibrary == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_stateenvironment_createdriveraccess", (void**)&(pWrapperTable->m_StateEnvironment_CreateDriverAccess));
		if ( (eLookupError != 0) || (pWrapperTable->m_StateEnvironment_CreateDriverAccess == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_stateenvironment_getbuildjob", (void**)&(pWrapperTable->m_StateEnvironment_GetBuildJob));
		if ( (eLookupError != 0) || (pWrapperTable->m_StateEnvironment_GetBuildJob == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_stateenvironment_unloadalltoolpathes", (void**)&(pWrapperTable->m_StateEnvironment_UnloadAllToolpathes));
		if ( (eLookupError != 0) || (pWrapperTable->m_StateEnvironment_UnloadAllToolpathes == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_stateenvironment_setnextstate", (void**)&(pWrapperTable->m_StateEnvironment_SetNextState));
		if ( (eLookupError != 0) || (pWrapperTable->m_StateEnvironment_SetNextState == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_stateenvironment_logmessage", (void**)&(pWrapperTable->m_StateEnvironment_LogMessage));
		if ( (eLookupError != 0) || (pWrapperTable->m_StateEnvironment_LogMessage == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_stateenvironment_logwarning", (void**)&(pWrapperTable->m_StateEnvironment_LogWarning));
		if ( (eLookupError != 0) || (pWrapperTable->m_StateEnvironment_LogWarning == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_stateenvironment_loginfo", (void**)&(pWrapperTable->m_StateEnvironment_LogInfo));
		if ( (eLookupError != 0) || (pWrapperTable->m_StateEnvironment_LogInfo == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_stateenvironment_sleep", (void**)&(pWrapperTable->m_StateEnvironment_Sleep));
		if ( (eLookupError != 0) || (pWrapperTable->m_StateEnvironment_Sleep == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_stateenvironment_checkfortermination", (void**)&(pWrapperTable->m_StateEnvironment_CheckForTermination));
		if ( (eLookupError != 0) || (pWrapperTable->m_StateEnvironment_CheckForTermination == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_stateenvironment_storesignal", (void**)&(pWrapperTable->m_StateEnvironment_StoreSignal));
		if ( (eLookupError != 0) || (pWrapperTable->m_StateEnvironment_StoreSignal == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_stateenvironment_retrievesignal", (void**)&(pWrapperTable->m_StateEnvironment_RetrieveSignal));
		if ( (eLookupError != 0) || (pWrapperTable->m_StateEnvironment_RetrieveSignal == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_stateenvironment_clearstoredvalue", (void**)&(pWrapperTable->m_StateEnvironment_ClearStoredValue));
		if ( (eLookupError != 0) || (pWrapperTable->m_StateEnvironment_ClearStoredValue == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_stateenvironment_setstringparameter", (void**)&(pWrapperTable->m_StateEnvironment_SetStringParameter));
		if ( (eLookupError != 0) || (pWrapperTable->m_StateEnvironment_SetStringParameter == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_stateenvironment_setuuidparameter", (void**)&(pWrapperTable->m_StateEnvironment_SetUUIDParameter));
		if ( (eLookupError != 0) || (pWrapperTable->m_StateEnvironment_SetUUIDParameter == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_stateenvironment_setdoubleparameter", (void**)&(pWrapperTable->m_StateEnvironment_SetDoubleParameter));
		if ( (eLookupError != 0) || (pWrapperTable->m_StateEnvironment_SetDoubleParameter == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_stateenvironment_setintegerparameter", (void**)&(pWrapperTable->m_StateEnvironment_SetIntegerParameter));
		if ( (eLookupError != 0) || (pWrapperTable->m_StateEnvironment_SetIntegerParameter == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_stateenvironment_setboolparameter", (void**)&(pWrapperTable->m_StateEnvironment_SetBoolParameter));
		if ( (eLookupError != 0) || (pWrapperTable->m_StateEnvironment_SetBoolParameter == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_stateenvironment_getstringparameter", (void**)&(pWrapperTable->m_StateEnvironment_GetStringParameter));
		if ( (eLookupError != 0) || (pWrapperTable->m_StateEnvironment_GetStringParameter == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_stateenvironment_getuuidparameter", (void**)&(pWrapperTable->m_StateEnvironment_GetUUIDParameter));
		if ( (eLookupError != 0) || (pWrapperTable->m_StateEnvironment_GetUUIDParameter == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_stateenvironment_getdoubleparameter", (void**)&(pWrapperTable->m_StateEnvironment_GetDoubleParameter));
		if ( (eLookupError != 0) || (pWrapperTable->m_StateEnvironment_GetDoubleParameter == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_stateenvironment_getintegerparameter", (void**)&(pWrapperTable->m_StateEnvironment_GetIntegerParameter));
		if ( (eLookupError != 0) || (pWrapperTable->m_StateEnvironment_GetIntegerParameter == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_stateenvironment_getboolparameter", (void**)&(pWrapperTable->m_StateEnvironment_GetBoolParameter));
		if ( (eLookupError != 0) || (pWrapperTable->m_StateEnvironment_GetBoolParameter == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_stateenvironment_loadresourcedata", (void**)&(pWrapperTable->m_StateEnvironment_LoadResourceData));
		if ( (eLookupError != 0) || (pWrapperTable->m_StateEnvironment_LoadResourceData == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_stateenvironment_loadresourcestring", (void**)&(pWrapperTable->m_StateEnvironment_LoadResourceString));
		if ( (eLookupError != 0) || (pWrapperTable->m_StateEnvironment_LoadResourceString == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_stateenvironment_createemptyimage", (void**)&(pWrapperTable->m_StateEnvironment_CreateEmptyImage));
		if ( (eLookupError != 0) || (pWrapperTable->m_StateEnvironment_CreateEmptyImage == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_stateenvironment_loadpngimage", (void**)&(pWrapperTable->m_StateEnvironment_LoadPNGImage));
		if ( (eLookupError != 0) || (pWrapperTable->m_StateEnvironment_LoadPNGImage == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_stateenvironment_getglobaltimerinmilliseconds", (void**)&(pWrapperTable->m_StateEnvironment_GetGlobalTimerInMilliseconds));
		if ( (eLookupError != 0) || (pWrapperTable->m_StateEnvironment_GetGlobalTimerInMilliseconds == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_stateenvironment_gettestenvironment", (void**)&(pWrapperTable->m_StateEnvironment_GetTestEnvironment));
		if ( (eLookupError != 0) || (pWrapperTable->m_StateEnvironment_GetTestEnvironment == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_stateenvironment_createxmldocument", (void**)&(pWrapperTable->m_StateEnvironment_CreateXMLDocument));
		if ( (eLookupError != 0) || (pWrapperTable->m_StateEnvironment_CreateXMLDocument == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_stateenvironment_parsexmlstring", (void**)&(pWrapperTable->m_StateEnvironment_ParseXMLString));
		if ( (eLookupError != 0) || (pWrapperTable->m_StateEnvironment_ParseXMLString == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_stateenvironment_parsexmldata", (void**)&(pWrapperTable->m_StateEnvironment_ParseXMLData));
		if ( (eLookupError != 0) || (pWrapperTable->m_StateEnvironment_ParseXMLData == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_uienvironment_activatemodaldialog", (void**)&(pWrapperTable->m_UIEnvironment_ActivateModalDialog));
		if ( (eLookupError != 0) || (pWrapperTable->m_UIEnvironment_ActivateModalDialog == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_uienvironment_closemodaldialog", (void**)&(pWrapperTable->m_UIEnvironment_CloseModalDialog));
		if ( (eLookupError != 0) || (pWrapperTable->m_UIEnvironment_CloseModalDialog == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_uienvironment_activatepage", (void**)&(pWrapperTable->m_UIEnvironment_ActivatePage));
		if ( (eLookupError != 0) || (pWrapperTable->m_UIEnvironment_ActivatePage == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_uienvironment_logout", (void**)&(pWrapperTable->m_UIEnvironment_LogOut));
		if ( (eLookupError != 0) || (pWrapperTable->m_UIEnvironment_LogOut == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_uienvironment_showhint", (void**)&(pWrapperTable->m_UIEnvironment_ShowHint));
		if ( (eLookupError != 0) || (pWrapperTable->m_UIEnvironment_ShowHint == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_uienvironment_showhintcolored", (void**)&(pWrapperTable->m_UIEnvironment_ShowHintColored));
		if ( (eLookupError != 0) || (pWrapperTable->m_UIEnvironment_ShowHintColored == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_uienvironment_hidehint", (void**)&(pWrapperTable->m_UIEnvironment_HideHint));
		if ( (eLookupError != 0) || (pWrapperTable->m_UIEnvironment_HideHint == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_uienvironment_showmessagedlg", (void**)&(pWrapperTable->m_UIEnvironment_ShowMessageDlg));
		if ( (eLookupError != 0) || (pWrapperTable->m_UIEnvironment_ShowMessageDlg == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_uienvironment_retrieveeventsender", (void**)&(pWrapperTable->m_UIEnvironment_RetrieveEventSender));
		if ( (eLookupError != 0) || (pWrapperTable->m_UIEnvironment_RetrieveEventSender == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_uienvironment_retrieveeventsenderuuid", (void**)&(pWrapperTable->m_UIEnvironment_RetrieveEventSenderUUID));
		if ( (eLookupError != 0) || (pWrapperTable->m_UIEnvironment_RetrieveEventSenderUUID == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_uienvironment_preparesignal", (void**)&(pWrapperTable->m_UIEnvironment_PrepareSignal));
		if ( (eLookupError != 0) || (pWrapperTable->m_UIEnvironment_PrepareSignal == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_uienvironment_getmachinestate", (void**)&(pWrapperTable->m_UIEnvironment_GetMachineState));
		if ( (eLookupError != 0) || (pWrapperTable->m_UIEnvironment_GetMachineState == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_uienvironment_logmessage", (void**)&(pWrapperTable->m_UIEnvironment_LogMessage));
		if ( (eLookupError != 0) || (pWrapperTable->m_UIEnvironment_LogMessage == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_uienvironment_logwarning", (void**)&(pWrapperTable->m_UIEnvironment_LogWarning));
		if ( (eLookupError != 0) || (pWrapperTable->m_UIEnvironment_LogWarning == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_uienvironment_loginfo", (void**)&(pWrapperTable->m_UIEnvironment_LogInfo));
		if ( (eLookupError != 0) || (pWrapperTable->m_UIEnvironment_LogInfo == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_uienvironment_getmachineparameter", (void**)&(pWrapperTable->m_UIEnvironment_GetMachineParameter));
		if ( (eLookupError != 0) || (pWrapperTable->m_UIEnvironment_GetMachineParameter == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_uienvironment_getmachineparameterasuuid", (void**)&(pWrapperTable->m_UIEnvironment_GetMachineParameterAsUUID));
		if ( (eLookupError != 0) || (pWrapperTable->m_UIEnvironment_GetMachineParameterAsUUID == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_uienvironment_getmachineparameterasdouble", (void**)&(pWrapperTable->m_UIEnvironment_GetMachineParameterAsDouble));
		if ( (eLookupError != 0) || (pWrapperTable->m_UIEnvironment_GetMachineParameterAsDouble == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_uienvironment_getmachineparameterasinteger", (void**)&(pWrapperTable->m_UIEnvironment_GetMachineParameterAsInteger));
		if ( (eLookupError != 0) || (pWrapperTable->m_UIEnvironment_GetMachineParameterAsInteger == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_uienvironment_getmachineparameterasbool", (void**)&(pWrapperTable->m_UIEnvironment_GetMachineParameterAsBool));
		if ( (eLookupError != 0) || (pWrapperTable->m_UIEnvironment_GetMachineParameterAsBool == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_uienvironment_getuiproperty", (void**)&(pWrapperTable->m_UIEnvironment_GetUIProperty));
		if ( (eLookupError != 0) || (pWrapperTable->m_UIEnvironment_GetUIProperty == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_uienvironment_getuipropertyasuuid", (void**)&(pWrapperTable->m_UIEnvironment_GetUIPropertyAsUUID));
		if ( (eLookupError != 0) || (pWrapperTable->m_UIEnvironment_GetUIPropertyAsUUID == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_uienvironment_getuipropertyasdouble", (void**)&(pWrapperTable->m_UIEnvironment_GetUIPropertyAsDouble));
		if ( (eLookupError != 0) || (pWrapperTable->m_UIEnvironment_GetUIPropertyAsDouble == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_uienvironment_getuipropertyasinteger", (void**)&(pWrapperTable->m_UIEnvironment_GetUIPropertyAsInteger));
		if ( (eLookupError != 0) || (pWrapperTable->m_UIEnvironment_GetUIPropertyAsInteger == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_uienvironment_getuipropertyasbool", (void**)&(pWrapperTable->m_UIEnvironment_GetUIPropertyAsBool));
		if ( (eLookupError != 0) || (pWrapperTable->m_UIEnvironment_GetUIPropertyAsBool == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_uienvironment_setuiproperty", (void**)&(pWrapperTable->m_UIEnvironment_SetUIProperty));
		if ( (eLookupError != 0) || (pWrapperTable->m_UIEnvironment_SetUIProperty == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_uienvironment_setuipropertyasuuid", (void**)&(pWrapperTable->m_UIEnvironment_SetUIPropertyAsUUID));
		if ( (eLookupError != 0) || (pWrapperTable->m_UIEnvironment_SetUIPropertyAsUUID == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_uienvironment_setuipropertyasdouble", (void**)&(pWrapperTable->m_UIEnvironment_SetUIPropertyAsDouble));
		if ( (eLookupError != 0) || (pWrapperTable->m_UIEnvironment_SetUIPropertyAsDouble == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_uienvironment_setuipropertyasinteger", (void**)&(pWrapperTable->m_UIEnvironment_SetUIPropertyAsInteger));
		if ( (eLookupError != 0) || (pWrapperTable->m_UIEnvironment_SetUIPropertyAsInteger == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_uienvironment_setuipropertyasbool", (void**)&(pWrapperTable->m_UIEnvironment_SetUIPropertyAsBool));
		if ( (eLookupError != 0) || (pWrapperTable->m_UIEnvironment_SetUIPropertyAsBool == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_uienvironment_createemptyimage", (void**)&(pWrapperTable->m_UIEnvironment_CreateEmptyImage));
		if ( (eLookupError != 0) || (pWrapperTable->m_UIEnvironment_CreateEmptyImage == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_uienvironment_loadpngimage", (void**)&(pWrapperTable->m_UIEnvironment_LoadPNGImage));
		if ( (eLookupError != 0) || (pWrapperTable->m_UIEnvironment_LoadPNGImage == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_uienvironment_getglobaltimerinmilliseconds", (void**)&(pWrapperTable->m_UIEnvironment_GetGlobalTimerInMilliseconds));
		if ( (eLookupError != 0) || (pWrapperTable->m_UIEnvironment_GetGlobalTimerInMilliseconds == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_uienvironment_gettestenvironment", (void**)&(pWrapperTable->m_UIEnvironment_GetTestEnvironment));
		if ( (eLookupError != 0) || (pWrapperTable->m_UIEnvironment_GetTestEnvironment == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_uienvironment_createxmldocument", (void**)&(pWrapperTable->m_UIEnvironment_CreateXMLDocument));
		if ( (eLookupError != 0) || (pWrapperTable->m_UIEnvironment_CreateXMLDocument == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_uienvironment_parsexmlstring", (void**)&(pWrapperTable->m_UIEnvironment_ParseXMLString));
		if ( (eLookupError != 0) || (pWrapperTable->m_UIEnvironment_ParseXMLString == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_uienvironment_parsexmldata", (void**)&(pWrapperTable->m_UIEnvironment_ParseXMLData));
		if ( (eLookupError != 0) || (pWrapperTable->m_UIEnvironment_ParseXMLData == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_getversion", (void**)&(pWrapperTable->m_GetVersion));
		if ( (eLookupError != 0) || (pWrapperTable->m_GetVersion == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_getlasterror", (void**)&(pWrapperTable->m_GetLastError));
		if ( (eLookupError != 0) || (pWrapperTable->m_GetLastError == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_releaseinstance", (void**)&(pWrapperTable->m_ReleaseInstance));
		if ( (eLookupError != 0) || (pWrapperTable->m_ReleaseInstance == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_acquireinstance", (void**)&(pWrapperTable->m_AcquireInstance));
		if ( (eLookupError != 0) || (pWrapperTable->m_AcquireInstance == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_getsymbollookupmethod", (void**)&(pWrapperTable->m_GetSymbolLookupMethod));
		if ( (eLookupError != 0) || (pWrapperTable->m_GetSymbolLookupMethod == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		return LIBMCENV_SUCCESS;
}

	
	
	/**
	 * Method definitions for class CBase
	 */
	
	/**
	 * Method definitions for class CIterator
	 */
	
	/**
	* CIterator::MoveNext - Iterates to the next object in the list.
	* @return Iterates to the next object in the list.
	*/
	bool CIterator::MoveNext()
	{
		bool resultHasNext = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Iterator_MoveNext(m_pHandle, &resultHasNext));
		
		return resultHasNext;
	}
	
	/**
	* CIterator::MovePrevious - Iterates to the previous object in the list.
	* @return Iterates to the previous object in the list.
	*/
	bool CIterator::MovePrevious()
	{
		bool resultHasPrevious = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Iterator_MovePrevious(m_pHandle, &resultHasPrevious));
		
		return resultHasPrevious;
	}
	
	/**
	* CIterator::GetCurrent - Returns the object the iterator points at.
	* @return returns the object instance.
	*/
	PBase CIterator::GetCurrent()
	{
		LibMCEnvHandle hInstance = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_Iterator_GetCurrent(m_pHandle, &hInstance));
		
		if (!hInstance) {
			CheckError(LIBMCENV_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CBase>(m_pWrapper, hInstance);
	}
	
	/**
	* CIterator::Clone - Creates a new object iterator with the same object list.
	* @return returns the cloned Iterator instance
	*/
	PIterator CIterator::Clone()
	{
		LibMCEnvHandle hOutIterator = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_Iterator_Clone(m_pHandle, &hOutIterator));
		
		if (!hOutIterator) {
			CheckError(LIBMCENV_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CIterator>(m_pWrapper, hOutIterator);
	}
	
	/**
	* CIterator::Count - Returns the number of resoucres the iterator captures.
	* @return returns the number of objects the iterator captures.
	*/
	LibMCEnv_uint64 CIterator::Count()
	{
		LibMCEnv_uint64 resultCount = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Iterator_Count(m_pHandle, &resultCount));
		
		return resultCount;
	}
	
	/**
	 * Method definitions for class CTestEnvironment
	 */
	
	/**
	* CTestEnvironment::WriteTestOutput - Write output file to test directory.
	* @param[in] sOutputName - Output file name. Only alphanumeric characters, point, underscore and hypen are allowed.
	* @param[in] DataBuffer - Test data to write into output directory.
	*/
	void CTestEnvironment::WriteTestOutput(const std::string & sOutputName, const CInputVector<LibMCEnv_uint8> & DataBuffer)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_TestEnvironment_WriteTestOutput(m_pHandle, sOutputName.c_str(), (LibMCEnv_uint64)DataBuffer.size(), DataBuffer.data()));
	}
	
	/**
	 * Method definitions for class CImageData
	 */
	
	/**
	* CImageData::GetPixelFormat - Returns Pixel format of the image.
	* @return Pixel Format of image
	*/
	eImagePixelFormat CImageData::GetPixelFormat()
	{
		eImagePixelFormat resultPixelFormat = (eImagePixelFormat) 0;
		CheckError(m_pWrapper->m_WrapperTable.m_ImageData_GetPixelFormat(m_pHandle, &resultPixelFormat));
		
		return resultPixelFormat;
	}
	
	/**
	* CImageData::ChangePixelFormat - Changes Pixel format of the image. Might lose alpha or color information during the process.
	* @param[in] ePixelFormat - new Pixel Format of image
	*/
	void CImageData::ChangePixelFormat(const eImagePixelFormat ePixelFormat)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_ImageData_ChangePixelFormat(m_pHandle, ePixelFormat));
	}
	
	/**
	* CImageData::GetDPI - Returns DPI values in X and Y.
	* @param[out] dDPIValueX - DPI value in X
	* @param[out] dDPIValueY - DPI value in Y
	*/
	void CImageData::GetDPI(LibMCEnv_double & dDPIValueX, LibMCEnv_double & dDPIValueY)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_ImageData_GetDPI(m_pHandle, &dDPIValueX, &dDPIValueY));
	}
	
	/**
	* CImageData::SetDPI - Sets DPI values in X and Y.
	* @param[in] dDPIValueX - new DPI value in X
	* @param[in] dDPIValueY - new DPI value in Y
	*/
	void CImageData::SetDPI(const LibMCEnv_double dDPIValueX, const LibMCEnv_double dDPIValueY)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_ImageData_SetDPI(m_pHandle, dDPIValueX, dDPIValueY));
	}
	
	/**
	* CImageData::GetSizeInMM - Returns image sizes inmm.
	* @param[out] dSizeX - Size in X in mm
	* @param[out] dSizeY - Size in Y in mm
	*/
	void CImageData::GetSizeInMM(LibMCEnv_double & dSizeX, LibMCEnv_double & dSizeY)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_ImageData_GetSizeInMM(m_pHandle, &dSizeX, &dSizeY));
	}
	
	/**
	* CImageData::GetSizeInPixels - Returns image pixel sizes.
	* @param[out] nPixelSizeX - Number of pixels in X
	* @param[out] nPixelSizeY - Number of pixels in Y
	*/
	void CImageData::GetSizeInPixels(LibMCEnv_uint32 & nPixelSizeX, LibMCEnv_uint32 & nPixelSizeY)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_ImageData_GetSizeInPixels(m_pHandle, &nPixelSizeX, &nPixelSizeY));
	}
	
	/**
	* CImageData::ResizeImage - Resizes Image pixel data.
	* @param[out] nPixelSizeX - Number of pixels in X
	* @param[out] nPixelSizeY - Number of pixels in Y
	*/
	void CImageData::ResizeImage(LibMCEnv_uint32 & nPixelSizeX, LibMCEnv_uint32 & nPixelSizeY)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_ImageData_ResizeImage(m_pHandle, &nPixelSizeX, &nPixelSizeY));
	}
	
	/**
	* CImageData::LoadPNG - Loads a PNG from a binary array. Supports RGB, RGBA and Greyscale images.
	* @param[out] PNGDataBuffer - PNG Data stream.
	*/
	void CImageData::LoadPNG(std::vector<LibMCEnv_uint8> & PNGDataBuffer)
	{
		LibMCEnv_uint64 elementsNeededPNGData = 0;
		LibMCEnv_uint64 elementsWrittenPNGData = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_ImageData_LoadPNG(m_pHandle, 0, &elementsNeededPNGData, nullptr));
		PNGDataBuffer.resize((size_t) elementsNeededPNGData);
		CheckError(m_pWrapper->m_WrapperTable.m_ImageData_LoadPNG(m_pHandle, elementsNeededPNGData, &elementsWrittenPNGData, PNGDataBuffer.data()));
	}
	
	/**
	* CImageData::EncodePNG - Encodes PNG and stores data stream in image object.
	*/
	void CImageData::EncodePNG()
	{
		CheckError(m_pWrapper->m_WrapperTable.m_ImageData_EncodePNG(m_pHandle));
	}
	
	/**
	* CImageData::GetEncodedPNGData - Retrieves encoded data stream of image object. MUST have been encoded with EncodePNG before.
	* @param[out] PNGDataBuffer - PNG Data stream.
	*/
	void CImageData::GetEncodedPNGData(std::vector<LibMCEnv_uint8> & PNGDataBuffer)
	{
		LibMCEnv_uint64 elementsNeededPNGData = 0;
		LibMCEnv_uint64 elementsWrittenPNGData = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_ImageData_GetEncodedPNGData(m_pHandle, 0, &elementsNeededPNGData, nullptr));
		PNGDataBuffer.resize((size_t) elementsNeededPNGData);
		CheckError(m_pWrapper->m_WrapperTable.m_ImageData_GetEncodedPNGData(m_pHandle, elementsNeededPNGData, &elementsWrittenPNGData, PNGDataBuffer.data()));
	}
	
	/**
	* CImageData::ClearEncodedPNGData - Releases encoded data stream of image object.
	*/
	void CImageData::ClearEncodedPNGData()
	{
		CheckError(m_pWrapper->m_WrapperTable.m_ImageData_ClearEncodedPNGData(m_pHandle));
	}
	
	/**
	* CImageData::Clear - Sets all pixels to a single value.
	* @param[in] nValue - Pixel value.
	*/
	void CImageData::Clear(const LibMCEnv_uint32 nValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_ImageData_Clear(m_pHandle, nValue));
	}
	
	/**
	* CImageData::GetPixel - Returns one pixel of an image.
	* @param[in] nX - Pixel coordinate in X
	* @param[in] nY - Pixel coordinate in Y
	* @return Pixel value at this position
	*/
	LibMCEnv_uint32 CImageData::GetPixel(const LibMCEnv_uint32 nX, const LibMCEnv_uint32 nY)
	{
		LibMCEnv_uint32 resultValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_ImageData_GetPixel(m_pHandle, nX, nY, &resultValue));
		
		return resultValue;
	}
	
	/**
	* CImageData::SetPixel - Sets one pixel of an image.
	* @param[in] nX - Pixel coordinate in X
	* @param[in] nY - Pixel coordinate in Y
	* @param[in] nValue - New Pixel value at this position
	*/
	void CImageData::SetPixel(const LibMCEnv_uint32 nX, const LibMCEnv_uint32 nY, const LibMCEnv_uint32 nValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_ImageData_SetPixel(m_pHandle, nX, nY, nValue));
	}
	
	/**
	* CImageData::GetPixelRange - Returns a subset of an image or the whole image data.
	* @param[in] nXMin - Min Pixel coordinate in X. MUST be within image bounds.
	* @param[in] nYMin - Min Pixel coordinate in Y. MUST be within image bounds.
	* @param[in] nXMax - Max Pixel coordinate in X. MUST be within image bounds. MUST be larger or equal than MinX
	* @param[in] nYMax - Max Pixel coordinate in Y. MUST be within image bounds. MUST be larger or equal than MinY
	* @param[out] ValueBuffer - Pixel values of the rectangle, rowwise array. MUST have the exact number of pixels in size and 1, 3 or 4 bytes per pixel, depending on pixel format.
	*/
	void CImageData::GetPixelRange(const LibMCEnv_uint32 nXMin, const LibMCEnv_uint32 nYMin, const LibMCEnv_uint32 nXMax, const LibMCEnv_uint32 nYMax, std::vector<LibMCEnv_uint8> & ValueBuffer)
	{
		LibMCEnv_uint64 elementsNeededValue = 0;
		LibMCEnv_uint64 elementsWrittenValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_ImageData_GetPixelRange(m_pHandle, nXMin, nYMin, nXMax, nYMax, 0, &elementsNeededValue, nullptr));
		ValueBuffer.resize((size_t) elementsNeededValue);
		CheckError(m_pWrapper->m_WrapperTable.m_ImageData_GetPixelRange(m_pHandle, nXMin, nYMin, nXMax, nYMax, elementsNeededValue, &elementsWrittenValue, ValueBuffer.data()));
	}
	
	/**
	* CImageData::SetPixelRange - Exchanges a subset of an image or the whole image data.
	* @param[in] nXMin - Min Pixel coordinate in X. MUST be within image bounds.
	* @param[in] nYMin - Min Pixel coordinate in Y. MUST be within image bounds.
	* @param[in] nXMax - Max Pixel coordinate in X. MUST be within image bounds. MUST be larger or equal than MinX
	* @param[in] nYMax - Max Pixel coordinate in Y. MUST be within image bounds. MUST be larger or equal than MinY
	* @param[in] ValueBuffer - New pixel values of the rectangle, rowwise array. MUST have the exact number of pixels in size and 1, 3 or 4 bytes per pixel, depending on pixel format.
	*/
	void CImageData::SetPixelRange(const LibMCEnv_uint32 nXMin, const LibMCEnv_uint32 nYMin, const LibMCEnv_uint32 nXMax, const LibMCEnv_uint32 nYMax, const CInputVector<LibMCEnv_uint8> & ValueBuffer)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_ImageData_SetPixelRange(m_pHandle, nXMin, nYMin, nXMax, nYMax, (LibMCEnv_uint64)ValueBuffer.size(), ValueBuffer.data()));
	}
	
	/**
	 * Method definitions for class CToolpathPart
	 */
	
	/**
	* CToolpathPart::GetName - Returns Part Name.
	* @return Returns toolpath part name.
	*/
	std::string CToolpathPart::GetName()
	{
		LibMCEnv_uint32 bytesNeededName = 0;
		LibMCEnv_uint32 bytesWrittenName = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_ToolpathPart_GetName(m_pHandle, 0, &bytesNeededName, nullptr));
		std::vector<char> bufferName(bytesNeededName);
		CheckError(m_pWrapper->m_WrapperTable.m_ToolpathPart_GetName(m_pHandle, bytesNeededName, &bytesWrittenName, &bufferName[0]));
		
		return std::string(&bufferName[0]);
	}
	
	/**
	* CToolpathPart::GetUUID - Returns Part UUID.
	* @return Returns toolpath part uuid.
	*/
	std::string CToolpathPart::GetUUID()
	{
		LibMCEnv_uint32 bytesNeededUUID = 0;
		LibMCEnv_uint32 bytesWrittenUUID = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_ToolpathPart_GetUUID(m_pHandle, 0, &bytesNeededUUID, nullptr));
		std::vector<char> bufferUUID(bytesNeededUUID);
		CheckError(m_pWrapper->m_WrapperTable.m_ToolpathPart_GetUUID(m_pHandle, bytesNeededUUID, &bytesWrittenUUID, &bufferUUID[0]));
		
		return std::string(&bufferUUID[0]);
	}
	
	/**
	* CToolpathPart::GetMeshUUID - Returns Mesh UUID of the part.
	* @return Returns toolpath part mesh uuid.
	*/
	std::string CToolpathPart::GetMeshUUID()
	{
		LibMCEnv_uint32 bytesNeededMeshUUID = 0;
		LibMCEnv_uint32 bytesWrittenMeshUUID = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_ToolpathPart_GetMeshUUID(m_pHandle, 0, &bytesNeededMeshUUID, nullptr));
		std::vector<char> bufferMeshUUID(bytesNeededMeshUUID);
		CheckError(m_pWrapper->m_WrapperTable.m_ToolpathPart_GetMeshUUID(m_pHandle, bytesNeededMeshUUID, &bytesWrittenMeshUUID, &bufferMeshUUID[0]));
		
		return std::string(&bufferMeshUUID[0]);
	}
	
	/**
	* CToolpathPart::GetTransform - Returns Mesh Transform of the part.
	* @return Returns the mesh transform of the toolpath.
	*/
	sToolpathPartTransform CToolpathPart::GetTransform()
	{
		sToolpathPartTransform resultMeshUUID;
		CheckError(m_pWrapper->m_WrapperTable.m_ToolpathPart_GetTransform(m_pHandle, &resultMeshUUID));
		
		return resultMeshUUID;
	}
	
	/**
	 * Method definitions for class CToolpathLayer
	 */
	
	/**
	* CToolpathLayer::GetLayerDataUUID - Retrieves the layerdata's uuid
	* @return Returns the uuid value.
	*/
	std::string CToolpathLayer::GetLayerDataUUID()
	{
		LibMCEnv_uint32 bytesNeededUUID = 0;
		LibMCEnv_uint32 bytesWrittenUUID = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_ToolpathLayer_GetLayerDataUUID(m_pHandle, 0, &bytesNeededUUID, nullptr));
		std::vector<char> bufferUUID(bytesNeededUUID);
		CheckError(m_pWrapper->m_WrapperTable.m_ToolpathLayer_GetLayerDataUUID(m_pHandle, bytesNeededUUID, &bytesWrittenUUID, &bufferUUID[0]));
		
		return std::string(&bufferUUID[0]);
	}
	
	/**
	* CToolpathLayer::GetSegmentCount - Retrieves the count of segments.
	* @return Count
	*/
	LibMCEnv_uint32 CToolpathLayer::GetSegmentCount()
	{
		LibMCEnv_uint32 resultCount = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_ToolpathLayer_GetSegmentCount(m_pHandle, &resultCount));
		
		return resultCount;
	}
	
	/**
	* CToolpathLayer::GetSegmentInfo - Retrieves the segment type and point count information .
	* @param[in] nIndex - Index. Must be between 0 and Count - 1.
	* @param[out] eType - Segment Type
	* @param[out] nPointCount - Point count of segment.
	*/
	void CToolpathLayer::GetSegmentInfo(const LibMCEnv_uint32 nIndex, eToolpathSegmentType & eType, LibMCEnv_uint32 & nPointCount)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_ToolpathLayer_GetSegmentInfo(m_pHandle, nIndex, &eType, &nPointCount));
	}
	
	/**
	* CToolpathLayer::GetSegmentType - Retrieves the segment type.
	* @param[in] nIndex - Index. Must be between 0 and Count - 1.
	* @return Segment Type
	*/
	eToolpathSegmentType CToolpathLayer::GetSegmentType(const LibMCEnv_uint32 nIndex)
	{
		eToolpathSegmentType resultType = (eToolpathSegmentType) 0;
		CheckError(m_pWrapper->m_WrapperTable.m_ToolpathLayer_GetSegmentType(m_pHandle, nIndex, &resultType));
		
		return resultType;
	}
	
	/**
	* CToolpathLayer::GetSegmentPointCount - Retrieves the number of points in the segment. For type hatch, the points are taken pairwise.
	* @param[in] nIndex - Index. Must be between 0 and Count - 1.
	* @return Hatch count of segment.
	*/
	LibMCEnv_uint32 CToolpathLayer::GetSegmentPointCount(const LibMCEnv_uint32 nIndex)
	{
		LibMCEnv_uint32 resultHatchCount = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_ToolpathLayer_GetSegmentPointCount(m_pHandle, nIndex, &resultHatchCount));
		
		return resultHatchCount;
	}
	
	/**
	* CToolpathLayer::GetSegmentHatchCount - Retrieves the number of hatches in the segment (i.e. PointCount / 2). Returns 0 if segment is not of type hatch.
	* @param[in] nIndex - Index. Must be between 0 and Count - 1.
	* @return Hatch count of segment.
	*/
	LibMCEnv_uint32 CToolpathLayer::GetSegmentHatchCount(const LibMCEnv_uint32 nIndex)
	{
		LibMCEnv_uint32 resultHatchCount = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_ToolpathLayer_GetSegmentHatchCount(m_pHandle, nIndex, &resultHatchCount));
		
		return resultHatchCount;
	}
	
	/**
	* CToolpathLayer::GetSegmentProfileUUID - Retrieves the assigned segment profile uuid.
	* @param[in] nIndex - Index. Must be between 0 and Count - 1.
	* @return Segment Profile UUID
	*/
	std::string CToolpathLayer::GetSegmentProfileUUID(const LibMCEnv_uint32 nIndex)
	{
		LibMCEnv_uint32 bytesNeededProfileUUID = 0;
		LibMCEnv_uint32 bytesWrittenProfileUUID = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_ToolpathLayer_GetSegmentProfileUUID(m_pHandle, nIndex, 0, &bytesNeededProfileUUID, nullptr));
		std::vector<char> bufferProfileUUID(bytesNeededProfileUUID);
		CheckError(m_pWrapper->m_WrapperTable.m_ToolpathLayer_GetSegmentProfileUUID(m_pHandle, nIndex, bytesNeededProfileUUID, &bytesWrittenProfileUUID, &bufferProfileUUID[0]));
		
		return std::string(&bufferProfileUUID[0]);
	}
	
	/**
	* CToolpathLayer::SegmentProfileHasValue - Retrieves an assigned profile custom value.
	* @param[in] nIndex - Index. Must be between 0 and Count - 1.
	* @param[in] sNamespace - Namespace to query for.
	* @param[in] sValueName - Value Name to query for.
	* @return Returns true if value exist.
	*/
	bool CToolpathLayer::SegmentProfileHasValue(const LibMCEnv_uint32 nIndex, const std::string & sNamespace, const std::string & sValueName)
	{
		bool resultHasValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_ToolpathLayer_SegmentProfileHasValue(m_pHandle, nIndex, sNamespace.c_str(), sValueName.c_str(), &resultHasValue));
		
		return resultHasValue;
	}
	
	/**
	* CToolpathLayer::GetSegmentProfileValue - Retrieves an assigned profile custom value. Fails if value does not exist.
	* @param[in] nIndex - Index. Must be between 0 and Count - 1.
	* @param[in] sNamespace - Namespace to query for.
	* @param[in] sValueName - Value Name to query for.
	* @return String Value.
	*/
	std::string CToolpathLayer::GetSegmentProfileValue(const LibMCEnv_uint32 nIndex, const std::string & sNamespace, const std::string & sValueName)
	{
		LibMCEnv_uint32 bytesNeededValue = 0;
		LibMCEnv_uint32 bytesWrittenValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_ToolpathLayer_GetSegmentProfileValue(m_pHandle, nIndex, sNamespace.c_str(), sValueName.c_str(), 0, &bytesNeededValue, nullptr));
		std::vector<char> bufferValue(bytesNeededValue);
		CheckError(m_pWrapper->m_WrapperTable.m_ToolpathLayer_GetSegmentProfileValue(m_pHandle, nIndex, sNamespace.c_str(), sValueName.c_str(), bytesNeededValue, &bytesWrittenValue, &bufferValue[0]));
		
		return std::string(&bufferValue[0]);
	}
	
	/**
	* CToolpathLayer::GetSegmentProfileValueDef - Retrieves an assigned profile custom value.
	* @param[in] nIndex - Index. Must be between 0 and Count - 1.
	* @param[in] sNamespace - Namespace to query for.
	* @param[in] sValueName - Value Name to query for.
	* @param[in] sDefaultValue - Default value if value does not exist.
	* @return String Value.
	*/
	std::string CToolpathLayer::GetSegmentProfileValueDef(const LibMCEnv_uint32 nIndex, const std::string & sNamespace, const std::string & sValueName, const std::string & sDefaultValue)
	{
		LibMCEnv_uint32 bytesNeededValue = 0;
		LibMCEnv_uint32 bytesWrittenValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_ToolpathLayer_GetSegmentProfileValueDef(m_pHandle, nIndex, sNamespace.c_str(), sValueName.c_str(), sDefaultValue.c_str(), 0, &bytesNeededValue, nullptr));
		std::vector<char> bufferValue(bytesNeededValue);
		CheckError(m_pWrapper->m_WrapperTable.m_ToolpathLayer_GetSegmentProfileValueDef(m_pHandle, nIndex, sNamespace.c_str(), sValueName.c_str(), sDefaultValue.c_str(), bytesNeededValue, &bytesWrittenValue, &bufferValue[0]));
		
		return std::string(&bufferValue[0]);
	}
	
	/**
	* CToolpathLayer::GetSegmentProfileDoubleValue - Retrieves an assigned profile custom double value. Fails if value does not exist or is not a double value.
	* @param[in] nIndex - Index. Must be between 0 and Count - 1.
	* @param[in] sNamespace - Namespace to query for.
	* @param[in] sValueName - Value Name to query for.
	* @return Double Value.
	*/
	LibMCEnv_double CToolpathLayer::GetSegmentProfileDoubleValue(const LibMCEnv_uint32 nIndex, const std::string & sNamespace, const std::string & sValueName)
	{
		LibMCEnv_double resultValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_ToolpathLayer_GetSegmentProfileDoubleValue(m_pHandle, nIndex, sNamespace.c_str(), sValueName.c_str(), &resultValue));
		
		return resultValue;
	}
	
	/**
	* CToolpathLayer::GetSegmentProfileDoubleValueDef - Retrieves an assigned profile custom double value. Fails if value exists but is not a double value.
	* @param[in] nIndex - Index. Must be between 0 and Count - 1.
	* @param[in] sNamespace - Namespace to query for.
	* @param[in] sValueName - Value Name to query for.
	* @param[in] dDefaultValue - Default value if value does not exist.
	* @return Double Value.
	*/
	LibMCEnv_double CToolpathLayer::GetSegmentProfileDoubleValueDef(const LibMCEnv_uint32 nIndex, const std::string & sNamespace, const std::string & sValueName, const LibMCEnv_double dDefaultValue)
	{
		LibMCEnv_double resultValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_ToolpathLayer_GetSegmentProfileDoubleValueDef(m_pHandle, nIndex, sNamespace.c_str(), sValueName.c_str(), dDefaultValue, &resultValue));
		
		return resultValue;
	}
	
	/**
	* CToolpathLayer::GetSegmentProfileIntegerValue - Retrieves an assigned profile custom integer value. Fails if value does not exist or is not a integer value.
	* @param[in] nIndex - Index. Must be between 0 and Count - 1.
	* @param[in] sNamespace - Namespace to query for.
	* @param[in] sValueName - Value Name to query for.
	* @return Integer Value.
	*/
	LibMCEnv_int64 CToolpathLayer::GetSegmentProfileIntegerValue(const LibMCEnv_uint32 nIndex, const std::string & sNamespace, const std::string & sValueName)
	{
		LibMCEnv_int64 resultValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_ToolpathLayer_GetSegmentProfileIntegerValue(m_pHandle, nIndex, sNamespace.c_str(), sValueName.c_str(), &resultValue));
		
		return resultValue;
	}
	
	/**
	* CToolpathLayer::GetSegmentProfileIntegerValueDef - Retrieves an assigned profile custom integer value. Fails if value exists but is not a integer value.
	* @param[in] nIndex - Index. Must be between 0 and Count - 1.
	* @param[in] sNamespace - Namespace to query for.
	* @param[in] sValueName - Value Name to query for.
	* @param[in] nDefaultValue - Default value if value does not exist.
	* @return Integer Value.
	*/
	LibMCEnv_int64 CToolpathLayer::GetSegmentProfileIntegerValueDef(const LibMCEnv_uint32 nIndex, const std::string & sNamespace, const std::string & sValueName, const LibMCEnv_int64 nDefaultValue)
	{
		LibMCEnv_int64 resultValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_ToolpathLayer_GetSegmentProfileIntegerValueDef(m_pHandle, nIndex, sNamespace.c_str(), sValueName.c_str(), nDefaultValue, &resultValue));
		
		return resultValue;
	}
	
	/**
	* CToolpathLayer::GetSegmentProfileBoolValue - Retrieves an assigned profile custom boolean value. A Boolean value is either an integer value, or strings of the form true or false (case insensitive). Fails if value does not exist or is not a bool value.
	* @param[in] nIndex - Index. Must be between 0 and Count - 1.
	* @param[in] sNamespace - Namespace to query for.
	* @param[in] sValueName - Value Name to query for.
	* @return Boolean Value.
	*/
	bool CToolpathLayer::GetSegmentProfileBoolValue(const LibMCEnv_uint32 nIndex, const std::string & sNamespace, const std::string & sValueName)
	{
		bool resultValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_ToolpathLayer_GetSegmentProfileBoolValue(m_pHandle, nIndex, sNamespace.c_str(), sValueName.c_str(), &resultValue));
		
		return resultValue;
	}
	
	/**
	* CToolpathLayer::GetSegmentProfileBoolValueDef - Retrieves an assigned profile custom boolean value. A Boolean value is either an integer value, or strings of the form true or false (case insensitive). Fails if value exists but is not a bool value.
	* @param[in] nIndex - Index. Must be between 0 and Count - 1.
	* @param[in] sNamespace - Namespace to query for.
	* @param[in] sValueName - Value Name to query for.
	* @param[in] bDefaultValue - Default value if value does not exist.
	* @return Boolean Value.
	*/
	bool CToolpathLayer::GetSegmentProfileBoolValueDef(const LibMCEnv_uint32 nIndex, const std::string & sNamespace, const std::string & sValueName, const bool bDefaultValue)
	{
		bool resultValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_ToolpathLayer_GetSegmentProfileBoolValueDef(m_pHandle, nIndex, sNamespace.c_str(), sValueName.c_str(), bDefaultValue, &resultValue));
		
		return resultValue;
	}
	
	/**
	* CToolpathLayer::GetSegmentProfileTypedValue - Retrieves an assigned profile value of a standard type. Fails if value does not exist or is not a double value.
	* @param[in] nIndex - Index. Must be between 0 and Count - 1.
	* @param[in] eValueType - Enum to query for. MUST NOT be custom.
	* @return Double Value
	*/
	LibMCEnv_double CToolpathLayer::GetSegmentProfileTypedValue(const LibMCEnv_uint32 nIndex, const eToolpathProfileValueType eValueType)
	{
		LibMCEnv_double resultValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_ToolpathLayer_GetSegmentProfileTypedValue(m_pHandle, nIndex, eValueType, &resultValue));
		
		return resultValue;
	}
	
	/**
	* CToolpathLayer::GetSegmentProfileTypedValueDef - Retrieves an assigned profile value of a standard type. Fails if value exists but is not a double value.
	* @param[in] nIndex - Index. Must be between 0 and Count - 1.
	* @param[in] eValueType - Enum to query for. MUST NOT be custom.
	* @param[in] dDefaultValue - Default value if value does not exist.
	* @return Double Value
	*/
	LibMCEnv_double CToolpathLayer::GetSegmentProfileTypedValueDef(const LibMCEnv_uint32 nIndex, const eToolpathProfileValueType eValueType, const LibMCEnv_double dDefaultValue)
	{
		LibMCEnv_double resultValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_ToolpathLayer_GetSegmentProfileTypedValueDef(m_pHandle, nIndex, eValueType, dDefaultValue, &resultValue));
		
		return resultValue;
	}
	
	/**
	* CToolpathLayer::GetSegmentPartUUID - Retrieves the assigned segment part uuid.
	* @param[in] nIndex - Index. Must be between 0 and Count - 1.
	* @return Segment Part UUID
	*/
	std::string CToolpathLayer::GetSegmentPartUUID(const LibMCEnv_uint32 nIndex)
	{
		LibMCEnv_uint32 bytesNeededPartUUID = 0;
		LibMCEnv_uint32 bytesWrittenPartUUID = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_ToolpathLayer_GetSegmentPartUUID(m_pHandle, nIndex, 0, &bytesNeededPartUUID, nullptr));
		std::vector<char> bufferPartUUID(bytesNeededPartUUID);
		CheckError(m_pWrapper->m_WrapperTable.m_ToolpathLayer_GetSegmentPartUUID(m_pHandle, nIndex, bytesNeededPartUUID, &bytesWrittenPartUUID, &bufferPartUUID[0]));
		
		return std::string(&bufferPartUUID[0]);
	}
	
	/**
	* CToolpathLayer::GetSegmentPointData - Retrieves the assigned segment point list. For type hatch, the points are taken pairwise.
	* @param[in] nIndex - Index. Must be between 0 and Count - 1.
	* @param[out] PointDataBuffer - The point data array. Positions are absolute in units.
	*/
	void CToolpathLayer::GetSegmentPointData(const LibMCEnv_uint32 nIndex, std::vector<sPosition2D> & PointDataBuffer)
	{
		LibMCEnv_uint64 elementsNeededPointData = 0;
		LibMCEnv_uint64 elementsWrittenPointData = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_ToolpathLayer_GetSegmentPointData(m_pHandle, nIndex, 0, &elementsNeededPointData, nullptr));
		PointDataBuffer.resize((size_t) elementsNeededPointData);
		CheckError(m_pWrapper->m_WrapperTable.m_ToolpathLayer_GetSegmentPointData(m_pHandle, nIndex, elementsNeededPointData, &elementsWrittenPointData, PointDataBuffer.data()));
	}
	
	/**
	* CToolpathLayer::GetSegmentHatchData - Retrieves the assigned segment hatch list. Fails if segment type is not hatch.
	* @param[in] nIndex - Index. Must be between 0 and Count - 1.
	* @param[out] HatchDataBuffer - The hatch data array. Positions are absolute in units.
	*/
	void CToolpathLayer::GetSegmentHatchData(const LibMCEnv_uint32 nIndex, std::vector<sHatch2D> & HatchDataBuffer)
	{
		LibMCEnv_uint64 elementsNeededHatchData = 0;
		LibMCEnv_uint64 elementsWrittenHatchData = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_ToolpathLayer_GetSegmentHatchData(m_pHandle, nIndex, 0, &elementsNeededHatchData, nullptr));
		HatchDataBuffer.resize((size_t) elementsNeededHatchData);
		CheckError(m_pWrapper->m_WrapperTable.m_ToolpathLayer_GetSegmentHatchData(m_pHandle, nIndex, elementsNeededHatchData, &elementsWrittenHatchData, HatchDataBuffer.data()));
	}
	
	/**
	* CToolpathLayer::GetSegmentPointDataInMM - Retrieves the assigned segment point list. For type hatch, the points are taken pairwise.
	* @param[in] nIndex - Index. Must be between 0 and Count - 1.
	* @param[out] PointDataBuffer - The point data array. Positions are absolute in mm.
	*/
	void CToolpathLayer::GetSegmentPointDataInMM(const LibMCEnv_uint32 nIndex, std::vector<sFloatPosition2D> & PointDataBuffer)
	{
		LibMCEnv_uint64 elementsNeededPointData = 0;
		LibMCEnv_uint64 elementsWrittenPointData = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_ToolpathLayer_GetSegmentPointDataInMM(m_pHandle, nIndex, 0, &elementsNeededPointData, nullptr));
		PointDataBuffer.resize((size_t) elementsNeededPointData);
		CheckError(m_pWrapper->m_WrapperTable.m_ToolpathLayer_GetSegmentPointDataInMM(m_pHandle, nIndex, elementsNeededPointData, &elementsWrittenPointData, PointDataBuffer.data()));
	}
	
	/**
	* CToolpathLayer::GetSegmentHatchDataInMM - Retrieves the assigned segment hatch list. Fails if segment type is not hatch.
	* @param[in] nIndex - Index. Must be between 0 and Count - 1.
	* @param[out] HatchDataBuffer - The hatch data array. Positions are absolute in mm.
	*/
	void CToolpathLayer::GetSegmentHatchDataInMM(const LibMCEnv_uint32 nIndex, std::vector<sFloatHatch2D> & HatchDataBuffer)
	{
		LibMCEnv_uint64 elementsNeededHatchData = 0;
		LibMCEnv_uint64 elementsWrittenHatchData = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_ToolpathLayer_GetSegmentHatchDataInMM(m_pHandle, nIndex, 0, &elementsNeededHatchData, nullptr));
		HatchDataBuffer.resize((size_t) elementsNeededHatchData);
		CheckError(m_pWrapper->m_WrapperTable.m_ToolpathLayer_GetSegmentHatchDataInMM(m_pHandle, nIndex, elementsNeededHatchData, &elementsWrittenHatchData, HatchDataBuffer.data()));
	}
	
	/**
	* CToolpathLayer::GetZValue - Retrieves the layers Z Value in units.
	* @return Z Value of the layer in units.
	*/
	LibMCEnv_int32 CToolpathLayer::GetZValue()
	{
		LibMCEnv_int32 resultZValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_ToolpathLayer_GetZValue(m_pHandle, &resultZValue));
		
		return resultZValue;
	}
	
	/**
	* CToolpathLayer::GetZValueInMM - Retrieves the layers Z Value in mm.
	* @return Z Value of the layer in mm.
	*/
	LibMCEnv_double CToolpathLayer::GetZValueInMM()
	{
		LibMCEnv_double resultZValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_ToolpathLayer_GetZValueInMM(m_pHandle, &resultZValue));
		
		return resultZValue;
	}
	
	/**
	* CToolpathLayer::GetUnits - Retrieves the toolpath units in mm.
	* @return Toolpath units.
	*/
	LibMCEnv_double CToolpathLayer::GetUnits()
	{
		LibMCEnv_double resultUnits = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_ToolpathLayer_GetUnits(m_pHandle, &resultUnits));
		
		return resultUnits;
	}
	
	/**
	 * Method definitions for class CToolpathAccessor
	 */
	
	/**
	* CToolpathAccessor::GetStorageUUID - Returns Toolpath storage UUID.
	* @return Returns toolpath storage uuid.
	*/
	std::string CToolpathAccessor::GetStorageUUID()
	{
		LibMCEnv_uint32 bytesNeededStorageUUID = 0;
		LibMCEnv_uint32 bytesWrittenStorageUUID = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_ToolpathAccessor_GetStorageUUID(m_pHandle, 0, &bytesNeededStorageUUID, nullptr));
		std::vector<char> bufferStorageUUID(bytesNeededStorageUUID);
		CheckError(m_pWrapper->m_WrapperTable.m_ToolpathAccessor_GetStorageUUID(m_pHandle, bytesNeededStorageUUID, &bytesWrittenStorageUUID, &bufferStorageUUID[0]));
		
		return std::string(&bufferStorageUUID[0]);
	}
	
	/**
	* CToolpathAccessor::GetLayerCount - Returns layer count.
	* @return Returns layer count.
	*/
	LibMCEnv_uint32 CToolpathAccessor::GetLayerCount()
	{
		LibMCEnv_uint32 resultLayerCount = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_ToolpathAccessor_GetLayerCount(m_pHandle, &resultLayerCount));
		
		return resultLayerCount;
	}
	
	/**
	* CToolpathAccessor::LoadLayer - Reads and returns a layer object.
	* @param[in] nLayerIndex - Layer Index.
	* @return Toolpath layer object.
	*/
	PToolpathLayer CToolpathAccessor::LoadLayer(const LibMCEnv_uint32 nLayerIndex)
	{
		LibMCEnvHandle hLayerData = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_ToolpathAccessor_LoadLayer(m_pHandle, nLayerIndex, &hLayerData));
		
		if (!hLayerData) {
			CheckError(LIBMCENV_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CToolpathLayer>(m_pWrapper, hLayerData);
	}
	
	/**
	* CToolpathAccessor::GetUnits - Retrieves the toolpath units in mm.
	* @return Toolpath units.
	*/
	LibMCEnv_double CToolpathAccessor::GetUnits()
	{
		LibMCEnv_double resultUnits = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_ToolpathAccessor_GetUnits(m_pHandle, &resultUnits));
		
		return resultUnits;
	}
	
	/**
	* CToolpathAccessor::HasMetaData - Checks if a metadata value exists for this toolpath model.
	* @param[in] sNameSpace - Namespace of metadata.
	* @param[in] sName - Name of metadata.
	* @return Returns if metadata exists.
	*/
	bool CToolpathAccessor::HasMetaData(const std::string & sNameSpace, const std::string & sName)
	{
		bool resultExists = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_ToolpathAccessor_HasMetaData(m_pHandle, sNameSpace.c_str(), sName.c_str(), &resultExists));
		
		return resultExists;
	}
	
	/**
	* CToolpathAccessor::GetMetaDataValue - Returns the value of a metadata for this toolpath model.
	* @param[in] sNameSpace - Namespace of metadata.
	* @param[in] sName - Name of metadata.
	* @return Returns the value
	*/
	std::string CToolpathAccessor::GetMetaDataValue(const std::string & sNameSpace, const std::string & sName)
	{
		LibMCEnv_uint32 bytesNeededMetaDataValue = 0;
		LibMCEnv_uint32 bytesWrittenMetaDataValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_ToolpathAccessor_GetMetaDataValue(m_pHandle, sNameSpace.c_str(), sName.c_str(), 0, &bytesNeededMetaDataValue, nullptr));
		std::vector<char> bufferMetaDataValue(bytesNeededMetaDataValue);
		CheckError(m_pWrapper->m_WrapperTable.m_ToolpathAccessor_GetMetaDataValue(m_pHandle, sNameSpace.c_str(), sName.c_str(), bytesNeededMetaDataValue, &bytesWrittenMetaDataValue, &bufferMetaDataValue[0]));
		
		return std::string(&bufferMetaDataValue[0]);
	}
	
	/**
	* CToolpathAccessor::GetMetaDataType - Returns the type of a metadata for this toolpath model.
	* @param[in] sNameSpace - Namespace of metadata.
	* @param[in] sName - Name of metadata.
	* @return Returns the type
	*/
	std::string CToolpathAccessor::GetMetaDataType(const std::string & sNameSpace, const std::string & sName)
	{
		LibMCEnv_uint32 bytesNeededMetaDataType = 0;
		LibMCEnv_uint32 bytesWrittenMetaDataType = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_ToolpathAccessor_GetMetaDataType(m_pHandle, sNameSpace.c_str(), sName.c_str(), 0, &bytesNeededMetaDataType, nullptr));
		std::vector<char> bufferMetaDataType(bytesNeededMetaDataType);
		CheckError(m_pWrapper->m_WrapperTable.m_ToolpathAccessor_GetMetaDataType(m_pHandle, sNameSpace.c_str(), sName.c_str(), bytesNeededMetaDataType, &bytesWrittenMetaDataType, &bufferMetaDataType[0]));
		
		return std::string(&bufferMetaDataType[0]);
	}
	
	/**
	* CToolpathAccessor::GetPartCount - Retrieves the number of parts in the toolpath.
	* @return Number of parts.
	*/
	LibMCEnv_uint32 CToolpathAccessor::GetPartCount()
	{
		LibMCEnv_uint32 resultPartCount = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_ToolpathAccessor_GetPartCount(m_pHandle, &resultPartCount));
		
		return resultPartCount;
	}
	
	/**
	* CToolpathAccessor::GetPart - Retrieves the part information of a toolpath.
	* @param[in] nPartIndex - Index of part. MUST be between 0 and PartCount-1
	* @return Part Instance
	*/
	PToolpathPart CToolpathAccessor::GetPart(const LibMCEnv_uint32 nPartIndex)
	{
		LibMCEnvHandle hPart = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_ToolpathAccessor_GetPart(m_pHandle, nPartIndex, &hPart));
		
		if (!hPart) {
			CheckError(LIBMCENV_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CToolpathPart>(m_pWrapper, hPart);
	}
	
	/**
	* CToolpathAccessor::FindPartByUUID - Finds the part information of a toolpath.
	* @param[in] sPartUUID - UUID of part.
	* @return Part Instance. Returns null if part does not exist.
	*/
	PToolpathPart CToolpathAccessor::FindPartByUUID(const std::string & sPartUUID)
	{
		LibMCEnvHandle hPart = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_ToolpathAccessor_FindPartByUUID(m_pHandle, sPartUUID.c_str(), &hPart));
		
		if (hPart) {
			return std::make_shared<CToolpathPart>(m_pWrapper, hPart);
		} else {
			return nullptr;
		}
	}
	
	/**
	* CToolpathAccessor::GetBuildHeightInUnits - Retrieves the build height in units.
	* @return Build height in units.
	*/
	LibMCEnv_int32 CToolpathAccessor::GetBuildHeightInUnits()
	{
		LibMCEnv_int32 resultBuildHeight = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_ToolpathAccessor_GetBuildHeightInUnits(m_pHandle, &resultBuildHeight));
		
		return resultBuildHeight;
	}
	
	/**
	* CToolpathAccessor::GetZValueInUnits - Retrieves the layers Z Value in units.
	* @param[in] nLayerIndex - Layer Index to return.
	* @return Z Value of the layer in units.
	*/
	LibMCEnv_int32 CToolpathAccessor::GetZValueInUnits(const LibMCEnv_uint32 nLayerIndex)
	{
		LibMCEnv_int32 resultZValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_ToolpathAccessor_GetZValueInUnits(m_pHandle, nLayerIndex, &resultZValue));
		
		return resultZValue;
	}
	
	/**
	* CToolpathAccessor::GetBuildHeightInMM - Retrieves the build height in mm.
	* @return Build height in mm.
	*/
	LibMCEnv_double CToolpathAccessor::GetBuildHeightInMM()
	{
		LibMCEnv_double resultBuildHeight = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_ToolpathAccessor_GetBuildHeightInMM(m_pHandle, &resultBuildHeight));
		
		return resultBuildHeight;
	}
	
	/**
	* CToolpathAccessor::GetZValueInMM - Retrieves the layers Z Value in mm.
	* @param[in] nLayerIndex - Layer Index to return.
	* @return Z Value of the layer in mm.
	*/
	LibMCEnv_double CToolpathAccessor::GetZValueInMM(const LibMCEnv_uint32 nLayerIndex)
	{
		LibMCEnv_double resultZValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_ToolpathAccessor_GetZValueInMM(m_pHandle, nLayerIndex, &resultZValue));
		
		return resultZValue;
	}
	
	/**
	 * Method definitions for class CBuild
	 */
	
	/**
	* CBuild::GetName - Returns name of the build.
	* @return Name of the build.
	*/
	std::string CBuild::GetName()
	{
		LibMCEnv_uint32 bytesNeededName = 0;
		LibMCEnv_uint32 bytesWrittenName = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Build_GetName(m_pHandle, 0, &bytesNeededName, nullptr));
		std::vector<char> bufferName(bytesNeededName);
		CheckError(m_pWrapper->m_WrapperTable.m_Build_GetName(m_pHandle, bytesNeededName, &bytesWrittenName, &bufferName[0]));
		
		return std::string(&bufferName[0]);
	}
	
	/**
	* CBuild::GetBuildUUID - Returns uuid of the build.
	* @return UUID of the build.
	*/
	std::string CBuild::GetBuildUUID()
	{
		LibMCEnv_uint32 bytesNeededBuildUUID = 0;
		LibMCEnv_uint32 bytesWrittenBuildUUID = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Build_GetBuildUUID(m_pHandle, 0, &bytesNeededBuildUUID, nullptr));
		std::vector<char> bufferBuildUUID(bytesNeededBuildUUID);
		CheckError(m_pWrapper->m_WrapperTable.m_Build_GetBuildUUID(m_pHandle, bytesNeededBuildUUID, &bytesWrittenBuildUUID, &bufferBuildUUID[0]));
		
		return std::string(&bufferBuildUUID[0]);
	}
	
	/**
	* CBuild::GetStorageUUID - Returns storage uuid of the build.
	* @return Storage UUID of the build.
	*/
	std::string CBuild::GetStorageUUID()
	{
		LibMCEnv_uint32 bytesNeededStorageUUID = 0;
		LibMCEnv_uint32 bytesWrittenStorageUUID = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Build_GetStorageUUID(m_pHandle, 0, &bytesNeededStorageUUID, nullptr));
		std::vector<char> bufferStorageUUID(bytesNeededStorageUUID);
		CheckError(m_pWrapper->m_WrapperTable.m_Build_GetStorageUUID(m_pHandle, bytesNeededStorageUUID, &bytesWrittenStorageUUID, &bufferStorageUUID[0]));
		
		return std::string(&bufferStorageUUID[0]);
	}
	
	/**
	* CBuild::GetStorageSHA256 - Returns SHA256 of the build stream.
	* @return SHA256 of the build stream.
	*/
	std::string CBuild::GetStorageSHA256()
	{
		LibMCEnv_uint32 bytesNeededSHA256 = 0;
		LibMCEnv_uint32 bytesWrittenSHA256 = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Build_GetStorageSHA256(m_pHandle, 0, &bytesNeededSHA256, nullptr));
		std::vector<char> bufferSHA256(bytesNeededSHA256);
		CheckError(m_pWrapper->m_WrapperTable.m_Build_GetStorageSHA256(m_pHandle, bytesNeededSHA256, &bytesWrittenSHA256, &bufferSHA256[0]));
		
		return std::string(&bufferSHA256[0]);
	}
	
	/**
	* CBuild::GetLayerCount - Returns cached layer count of the toolpath.
	* @return Returns layer count.
	*/
	LibMCEnv_uint32 CBuild::GetLayerCount()
	{
		LibMCEnv_uint32 resultLayerCount = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Build_GetLayerCount(m_pHandle, &resultLayerCount));
		
		return resultLayerCount;
	}
	
	/**
	* CBuild::GetBuildHeightInMM - Retrieves the build height in mm.
	* @return Build height in mm.
	*/
	LibMCEnv_double CBuild::GetBuildHeightInMM()
	{
		LibMCEnv_double resultBuildHeight = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Build_GetBuildHeightInMM(m_pHandle, &resultBuildHeight));
		
		return resultBuildHeight;
	}
	
	/**
	* CBuild::GetZValueInMM - Retrieves the layers Z Value in mm.
	* @param[in] nLayerIndex - Layer Index to return.
	* @return Z Value of the layer in mm.
	*/
	LibMCEnv_double CBuild::GetZValueInMM(const LibMCEnv_uint32 nLayerIndex)
	{
		LibMCEnv_double resultZValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Build_GetZValueInMM(m_pHandle, nLayerIndex, &resultZValue));
		
		return resultZValue;
	}
	
	/**
	* CBuild::LoadToolpath - loads the a toolpath into memory
	*/
	void CBuild::LoadToolpath()
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Build_LoadToolpath(m_pHandle));
	}
	
	/**
	* CBuild::UnloadToolpath - unloads the a toolpath from memory, if it has been loaded before.
	*/
	void CBuild::UnloadToolpath()
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Build_UnloadToolpath(m_pHandle));
	}
	
	/**
	* CBuild::ToolpathIsLoaded - checks, if a toolpath object is loaded to memory.
	* @return returns if toolpath is loaded.
	*/
	bool CBuild::ToolpathIsLoaded()
	{
		bool resultIsLoaded = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Build_ToolpathIsLoaded(m_pHandle, &resultIsLoaded));
		
		return resultIsLoaded;
	}
	
	/**
	* CBuild::CreateToolpathAccessor - Creates an accessor object for a toolpath. Toolpath MUST have been loaded with LoadToolpath before.
	* @return Toolpath instance.
	*/
	PToolpathAccessor CBuild::CreateToolpathAccessor()
	{
		LibMCEnvHandle hToolpathInstance = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_Build_CreateToolpathAccessor(m_pHandle, &hToolpathInstance));
		
		if (!hToolpathInstance) {
			CheckError(LIBMCENV_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CToolpathAccessor>(m_pWrapper, hToolpathInstance);
	}
	
	/**
	* CBuild::AddBinaryData - Adds binary data to store with the build.
	* @param[in] sName - Name of the attache data block.
	* @param[in] sMIMEType - Mime type of the data.
	* @param[in] ContentBuffer - Stream content to store
	* @return Data UUID of the attachment.
	*/
	std::string CBuild::AddBinaryData(const std::string & sName, const std::string & sMIMEType, const CInputVector<LibMCEnv_uint8> & ContentBuffer)
	{
		LibMCEnv_uint32 bytesNeededDataUUID = 0;
		LibMCEnv_uint32 bytesWrittenDataUUID = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Build_AddBinaryData(m_pHandle, sName.c_str(), sMIMEType.c_str(), (LibMCEnv_uint64)ContentBuffer.size(), ContentBuffer.data(), 0, &bytesNeededDataUUID, nullptr));
		std::vector<char> bufferDataUUID(bytesNeededDataUUID);
		CheckError(m_pWrapper->m_WrapperTable.m_Build_AddBinaryData(m_pHandle, sName.c_str(), sMIMEType.c_str(), (LibMCEnv_uint64)ContentBuffer.size(), ContentBuffer.data(), bytesNeededDataUUID, &bytesWrittenDataUUID, &bufferDataUUID[0]));
		
		return std::string(&bufferDataUUID[0]);
	}
	
	/**
	 * Method definitions for class CWorkingFileExecution
	 */
	
	/**
	* CWorkingFileExecution::GetStatus - Returns the execution status
	*/
	void CWorkingFileExecution::GetStatus()
	{
		CheckError(m_pWrapper->m_WrapperTable.m_WorkingFileExecution_GetStatus(m_pHandle));
	}
	
	/**
	* CWorkingFileExecution::ReturnStdOut - Returns the output of the executable as string buffer
	* @return stdout buffer
	*/
	std::string CWorkingFileExecution::ReturnStdOut()
	{
		LibMCEnv_uint32 bytesNeededStringBuffer = 0;
		LibMCEnv_uint32 bytesWrittenStringBuffer = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_WorkingFileExecution_ReturnStdOut(m_pHandle, 0, &bytesNeededStringBuffer, nullptr));
		std::vector<char> bufferStringBuffer(bytesNeededStringBuffer);
		CheckError(m_pWrapper->m_WrapperTable.m_WorkingFileExecution_ReturnStdOut(m_pHandle, bytesNeededStringBuffer, &bytesWrittenStringBuffer, &bufferStringBuffer[0]));
		
		return std::string(&bufferStringBuffer[0]);
	}
	
	/**
	 * Method definitions for class CWorkingFile
	 */
	
	/**
	* CWorkingFile::GetAbsoluteFileName - Retrieves absolute file name of the working file
	* @return global path of the file
	*/
	std::string CWorkingFile::GetAbsoluteFileName()
	{
		LibMCEnv_uint32 bytesNeededFileName = 0;
		LibMCEnv_uint32 bytesWrittenFileName = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_WorkingFile_GetAbsoluteFileName(m_pHandle, 0, &bytesNeededFileName, nullptr));
		std::vector<char> bufferFileName(bytesNeededFileName);
		CheckError(m_pWrapper->m_WrapperTable.m_WorkingFile_GetAbsoluteFileName(m_pHandle, bytesNeededFileName, &bytesWrittenFileName, &bufferFileName[0]));
		
		return std::string(&bufferFileName[0]);
	}
	
	/**
	* CWorkingFile::GetSize - Returns the size of temporary file.
	* @return file size
	*/
	LibMCEnv_uint64 CWorkingFile::GetSize()
	{
		LibMCEnv_uint64 resultFileSize = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_WorkingFile_GetSize(m_pHandle, &resultFileSize));
		
		return resultFileSize;
	}
	
	/**
	* CWorkingFile::CalculateSHA2 - Calculates the SHA256 checksum of the file.
	* @return sha256 checksum
	*/
	std::string CWorkingFile::CalculateSHA2()
	{
		LibMCEnv_uint32 bytesNeededSHA2 = 0;
		LibMCEnv_uint32 bytesWrittenSHA2 = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_WorkingFile_CalculateSHA2(m_pHandle, 0, &bytesNeededSHA2, nullptr));
		std::vector<char> bufferSHA2(bytesNeededSHA2);
		CheckError(m_pWrapper->m_WrapperTable.m_WorkingFile_CalculateSHA2(m_pHandle, bytesNeededSHA2, &bytesWrittenSHA2, &bufferSHA2[0]));
		
		return std::string(&bufferSHA2[0]);
	}
	
	/**
	* CWorkingFile::ExecuteFile - Executes the temporary file, if it is an executable.
	* @return execution object
	*/
	PWorkingFileExecution CWorkingFile::ExecuteFile()
	{
		LibMCEnvHandle hExecution = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_WorkingFile_ExecuteFile(m_pHandle, &hExecution));
		
		if (!hExecution) {
			CheckError(LIBMCENV_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CWorkingFileExecution>(m_pWrapper, hExecution);
	}
	
	/**
	* CWorkingFile::IsManaged - Returns if the file is managed.
	* @return returns if the file is managed.
	*/
	bool CWorkingFile::IsManaged()
	{
		bool resultFileIsManaged = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_WorkingFile_IsManaged(m_pHandle, &resultFileIsManaged));
		
		return resultFileIsManaged;
	}
	
	/**
	* CWorkingFile::MakeManaged - Makes the file managed if it is not managed yet.
	*/
	void CWorkingFile::MakeManaged()
	{
		CheckError(m_pWrapper->m_WrapperTable.m_WorkingFile_MakeManaged(m_pHandle));
	}
	
	/**
	* CWorkingFile::FileExists - Returns if the file exists on disk.
	* @return returns if the file exists.
	*/
	bool CWorkingFile::FileExists()
	{
		bool resultFileDoesExist = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_WorkingFile_FileExists(m_pHandle, &resultFileDoesExist));
		
		return resultFileDoesExist;
	}
	
	/**
	* CWorkingFile::DeleteFromDisk - Deletes the temporary file.
	* @return returns if deletion was successful or file did not exist in the first place.
	*/
	bool CWorkingFile::DeleteFromDisk()
	{
		bool resultSuccess = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_WorkingFile_DeleteFromDisk(m_pHandle, &resultSuccess));
		
		return resultSuccess;
	}
	
	/**
	 * Method definitions for class CWorkingFileIterator
	 */
	
	/**
	* CWorkingFileIterator::GetCurrentFile - Returns the working file the iterator points at.
	* @return returns the WorkingFile instance.
	*/
	PWorkingFile CWorkingFileIterator::GetCurrentFile()
	{
		LibMCEnvHandle hWorkingFile = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_WorkingFileIterator_GetCurrentFile(m_pHandle, &hWorkingFile));
		
		if (!hWorkingFile) {
			CheckError(LIBMCENV_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CWorkingFile>(m_pWrapper, hWorkingFile);
	}
	
	/**
	 * Method definitions for class CWorkingDirectory
	 */
	
	/**
	* CWorkingDirectory::IsActive - Working directory is active.
	* @return returns true if files can be read and written to the directory.
	*/
	bool CWorkingDirectory::IsActive()
	{
		bool resultIsActive = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_WorkingDirectory_IsActive(m_pHandle, &resultIsActive));
		
		return resultIsActive;
	}
	
	/**
	* CWorkingDirectory::GetAbsoluteFilePath - Retrieves absolute file path.
	* @return global path of the directory, including path delimiter.
	*/
	std::string CWorkingDirectory::GetAbsoluteFilePath()
	{
		LibMCEnv_uint32 bytesNeededFilePath = 0;
		LibMCEnv_uint32 bytesWrittenFilePath = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_WorkingDirectory_GetAbsoluteFilePath(m_pHandle, 0, &bytesNeededFilePath, nullptr));
		std::vector<char> bufferFilePath(bytesNeededFilePath);
		CheckError(m_pWrapper->m_WrapperTable.m_WorkingDirectory_GetAbsoluteFilePath(m_pHandle, bytesNeededFilePath, &bytesWrittenFilePath, &bufferFilePath[0]));
		
		return std::string(&bufferFilePath[0]);
	}
	
	/**
	* CWorkingDirectory::StoreCustomData - Stores a data buffer in a temporary file with a given name.
	* @param[in] sFileName - filename to store to. Can not include any path delimiters or ..
	* @param[in] DataBufferBuffer - file data to store to.
	* @return working file instance.
	*/
	PWorkingFile CWorkingDirectory::StoreCustomData(const std::string & sFileName, const CInputVector<LibMCEnv_uint8> & DataBufferBuffer)
	{
		LibMCEnvHandle hWorkingFile = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_WorkingDirectory_StoreCustomData(m_pHandle, sFileName.c_str(), (LibMCEnv_uint64)DataBufferBuffer.size(), DataBufferBuffer.data(), &hWorkingFile));
		
		if (!hWorkingFile) {
			CheckError(LIBMCENV_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CWorkingFile>(m_pWrapper, hWorkingFile);
	}
	
	/**
	* CWorkingDirectory::StoreCustomString - Stores a string in a temporary file with a given name.
	* @param[in] sFileName - filename to store to. Can not include any path delimiters or ..
	* @param[in] sDataString - file data to store to.
	* @return working file instance.
	*/
	PWorkingFile CWorkingDirectory::StoreCustomString(const std::string & sFileName, const std::string & sDataString)
	{
		LibMCEnvHandle hWorkingFile = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_WorkingDirectory_StoreCustomString(m_pHandle, sFileName.c_str(), sDataString.c_str(), &hWorkingFile));
		
		if (!hWorkingFile) {
			CheckError(LIBMCENV_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CWorkingFile>(m_pWrapper, hWorkingFile);
	}
	
	/**
	* CWorkingDirectory::StoreDriverData - Stores attached driver data in a temporary file.
	* @param[in] sFileName - filename to store to. Can not include any path delimiters or ..
	* @param[in] sIdentifier - identifier of the binary data in the driver package.
	* @return working file instance.
	*/
	PWorkingFile CWorkingDirectory::StoreDriverData(const std::string & sFileName, const std::string & sIdentifier)
	{
		LibMCEnvHandle hWorkingFile = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_WorkingDirectory_StoreDriverData(m_pHandle, sFileName.c_str(), sIdentifier.c_str(), &hWorkingFile));
		
		if (!hWorkingFile) {
			CheckError(LIBMCENV_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CWorkingFile>(m_pWrapper, hWorkingFile);
	}
	
	/**
	* CWorkingDirectory::StoreCustomDataInTempFile - Stores a data buffer in a temporary file with a generated name.
	* @param[in] sExtension - extension of the file to store. MAY be an empty string. MUST only include up to 64 alphanumeric characters.
	* @param[in] DataBufferBuffer - file data to store to.
	* @return working file instance.
	*/
	PWorkingFile CWorkingDirectory::StoreCustomDataInTempFile(const std::string & sExtension, const CInputVector<LibMCEnv_uint8> & DataBufferBuffer)
	{
		LibMCEnvHandle hWorkingFile = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_WorkingDirectory_StoreCustomDataInTempFile(m_pHandle, sExtension.c_str(), (LibMCEnv_uint64)DataBufferBuffer.size(), DataBufferBuffer.data(), &hWorkingFile));
		
		if (!hWorkingFile) {
			CheckError(LIBMCENV_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CWorkingFile>(m_pWrapper, hWorkingFile);
	}
	
	/**
	* CWorkingDirectory::StoreCustomStringInTempFile - Stores a string in a temporary file.
	* @param[in] sExtension - extension of the file to store. MAY be an empty string. MUST only include up to 64 alphanumeric characters.
	* @param[in] sDataString - file data to store to.
	* @return working file instance.
	*/
	PWorkingFile CWorkingDirectory::StoreCustomStringInTempFile(const std::string & sExtension, const std::string & sDataString)
	{
		LibMCEnvHandle hWorkingFile = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_WorkingDirectory_StoreCustomStringInTempFile(m_pHandle, sExtension.c_str(), sDataString.c_str(), &hWorkingFile));
		
		if (!hWorkingFile) {
			CheckError(LIBMCENV_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CWorkingFile>(m_pWrapper, hWorkingFile);
	}
	
	/**
	* CWorkingDirectory::StoreDriverDataInTempFile - Stores attached driver data in a temporary file.
	* @param[in] sExtension - extension of the file to store. MAY be an empty string. MUST only include up to 64 alphanumeric characters.
	* @param[in] sIdentifier - identifier of the binary data in the driver package.
	* @return working file instance.
	*/
	PWorkingFile CWorkingDirectory::StoreDriverDataInTempFile(const std::string & sExtension, const std::string & sIdentifier)
	{
		LibMCEnvHandle hWorkingFile = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_WorkingDirectory_StoreDriverDataInTempFile(m_pHandle, sExtension.c_str(), sIdentifier.c_str(), &hWorkingFile));
		
		if (!hWorkingFile) {
			CheckError(LIBMCENV_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CWorkingFile>(m_pWrapper, hWorkingFile);
	}
	
	/**
	* CWorkingDirectory::CleanUp - Deletes all managed files in the directory and the directory. No storing is possible after a cleanup.
	* @return returns if deletion was successful.
	*/
	bool CWorkingDirectory::CleanUp()
	{
		bool resultSuccess = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_WorkingDirectory_CleanUp(m_pHandle, &resultSuccess));
		
		return resultSuccess;
	}
	
	/**
	* CWorkingDirectory::AddManagedFile - Adds a managed filename in the directory (i.e. this file will be deleted at CleanUp). Subdirectories are not allowed.
	* @param[in] sFileName - Filename to manage. The file does not need to exist yet.
	* @return working file instance.
	*/
	PWorkingFile CWorkingDirectory::AddManagedFile(const std::string & sFileName)
	{
		LibMCEnvHandle hWorkingFile = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_WorkingDirectory_AddManagedFile(m_pHandle, sFileName.c_str(), &hWorkingFile));
		
		if (!hWorkingFile) {
			CheckError(LIBMCENV_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CWorkingFile>(m_pWrapper, hWorkingFile);
	}
	
	/**
	* CWorkingDirectory::HasUnmanagedFiles - Returns if the working directory has unmanaged files. A clean implementation will never deal with unmanaged files.
	* @return returns if there are unmanaged files.
	*/
	bool CWorkingDirectory::HasUnmanagedFiles()
	{
		bool resultHasUnmanagedFiles = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_WorkingDirectory_HasUnmanagedFiles(m_pHandle, &resultHasUnmanagedFiles));
		
		return resultHasUnmanagedFiles;
	}
	
	/**
	* CWorkingDirectory::RetrieveUnmanagedFiles - Returns a list of unmanaged files.
	* @return working file iterator instance.
	*/
	PWorkingFileIterator CWorkingDirectory::RetrieveUnmanagedFiles()
	{
		LibMCEnvHandle hIteratorInstance = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_WorkingDirectory_RetrieveUnmanagedFiles(m_pHandle, &hIteratorInstance));
		
		if (!hIteratorInstance) {
			CheckError(LIBMCENV_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CWorkingFileIterator>(m_pWrapper, hIteratorInstance);
	}
	
	/**
	* CWorkingDirectory::RetrieveManagedFiles - Returns a list of managed files.
	* @return working file iterator instance.
	*/
	PWorkingFileIterator CWorkingDirectory::RetrieveManagedFiles()
	{
		LibMCEnvHandle hIteratorInstance = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_WorkingDirectory_RetrieveManagedFiles(m_pHandle, &hIteratorInstance));
		
		if (!hIteratorInstance) {
			CheckError(LIBMCENV_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CWorkingFileIterator>(m_pWrapper, hIteratorInstance);
	}
	
	/**
	* CWorkingDirectory::RetrieveAllFiles - Returns a list of all files in the directory.
	* @return working file iterator instance.
	*/
	PWorkingFileIterator CWorkingDirectory::RetrieveAllFiles()
	{
		LibMCEnvHandle hIteratorInstance = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_WorkingDirectory_RetrieveAllFiles(m_pHandle, &hIteratorInstance));
		
		if (!hIteratorInstance) {
			CheckError(LIBMCENV_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CWorkingFileIterator>(m_pWrapper, hIteratorInstance);
	}
	
	/**
	 * Method definitions for class CXMLDocumentAttribute
	 */
	
	/**
	* CXMLDocumentAttribute::GetNameSpace - Retrieves namespace of the attribute.
	* @return returns the namespace of the attribute.
	*/
	std::string CXMLDocumentAttribute::GetNameSpace()
	{
		LibMCEnv_uint32 bytesNeededNameSpace = 0;
		LibMCEnv_uint32 bytesWrittenNameSpace = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_XMLDocumentAttribute_GetNameSpace(m_pHandle, 0, &bytesNeededNameSpace, nullptr));
		std::vector<char> bufferNameSpace(bytesNeededNameSpace);
		CheckError(m_pWrapper->m_WrapperTable.m_XMLDocumentAttribute_GetNameSpace(m_pHandle, bytesNeededNameSpace, &bytesWrittenNameSpace, &bufferNameSpace[0]));
		
		return std::string(&bufferNameSpace[0]);
	}
	
	/**
	* CXMLDocumentAttribute::GetName - Retrieves name of the attribute.
	* @return returns the name of the attribute.
	*/
	std::string CXMLDocumentAttribute::GetName()
	{
		LibMCEnv_uint32 bytesNeededName = 0;
		LibMCEnv_uint32 bytesWrittenName = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_XMLDocumentAttribute_GetName(m_pHandle, 0, &bytesNeededName, nullptr));
		std::vector<char> bufferName(bytesNeededName);
		CheckError(m_pWrapper->m_WrapperTable.m_XMLDocumentAttribute_GetName(m_pHandle, bytesNeededName, &bytesWrittenName, &bufferName[0]));
		
		return std::string(&bufferName[0]);
	}
	
	/**
	* CXMLDocumentAttribute::GetValue - Retrieves value of the attribute as string.
	* @return returns the value of the attribute.
	*/
	std::string CXMLDocumentAttribute::GetValue()
	{
		LibMCEnv_uint32 bytesNeededValue = 0;
		LibMCEnv_uint32 bytesWrittenValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_XMLDocumentAttribute_GetValue(m_pHandle, 0, &bytesNeededValue, nullptr));
		std::vector<char> bufferValue(bytesNeededValue);
		CheckError(m_pWrapper->m_WrapperTable.m_XMLDocumentAttribute_GetValue(m_pHandle, bytesNeededValue, &bytesWrittenValue, &bufferValue[0]));
		
		return std::string(&bufferValue[0]);
	}
	
	/**
	* CXMLDocumentAttribute::IsValidInteger - Checks if the value is a valid integer in the given range.
	* @param[in] nMinValue - Minimum allowed value
	* @param[in] nMaxValue - Maximum allowed value
	* @return returns if the value is a valid integer.
	*/
	bool CXMLDocumentAttribute::IsValidInteger(const LibMCEnv_int64 nMinValue, const LibMCEnv_int64 nMaxValue)
	{
		bool resultIsValid = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_XMLDocumentAttribute_IsValidInteger(m_pHandle, nMinValue, nMaxValue, &resultIsValid));
		
		return resultIsValid;
	}
	
	/**
	* CXMLDocumentAttribute::GetIntegerValue - Returns the value as integer. Fails if the value is not a valid integer in the given range.
	* @param[in] nMinValue - Minimum allowed value
	* @param[in] nMaxValue - Maximum allowed value
	* @return returns the value.
	*/
	LibMCEnv_int64 CXMLDocumentAttribute::GetIntegerValue(const LibMCEnv_int64 nMinValue, const LibMCEnv_int64 nMaxValue)
	{
		LibMCEnv_int64 resultValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_XMLDocumentAttribute_GetIntegerValue(m_pHandle, nMinValue, nMaxValue, &resultValue));
		
		return resultValue;
	}
	
	/**
	* CXMLDocumentAttribute::IsValidDouble - Checks if the value is a valid double in the given range.
	* @param[in] dMinValue - Minimum allowed value
	* @param[in] dMaxValue - Maximum allowed value
	* @return returns if the value is a valid double.
	*/
	bool CXMLDocumentAttribute::IsValidDouble(const LibMCEnv_double dMinValue, const LibMCEnv_double dMaxValue)
	{
		bool resultIsValid = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_XMLDocumentAttribute_IsValidDouble(m_pHandle, dMinValue, dMaxValue, &resultIsValid));
		
		return resultIsValid;
	}
	
	/**
	* CXMLDocumentAttribute::GetDoubleValue - Returns the value as double. Fails if the value is not a valid double in the given range.
	* @param[in] dMinValue - Minimum allowed value
	* @param[in] dMaxValue - Maximum allowed value
	* @return returns the value .
	*/
	LibMCEnv_double CXMLDocumentAttribute::GetDoubleValue(const LibMCEnv_double dMinValue, const LibMCEnv_double dMaxValue)
	{
		LibMCEnv_double resultValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_XMLDocumentAttribute_GetDoubleValue(m_pHandle, dMinValue, dMaxValue, &resultValue));
		
		return resultValue;
	}
	
	/**
	* CXMLDocumentAttribute::IsValidBool - Checks if the value is a valid boolean value, meaning an integer or true or false as string. The value will be trimmed and any character will be converted to lowercase.
	* @return returns if the value is a valid bool.
	*/
	bool CXMLDocumentAttribute::IsValidBool()
	{
		bool resultIsValid = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_XMLDocumentAttribute_IsValidBool(m_pHandle, &resultIsValid));
		
		return resultIsValid;
	}
	
	/**
	* CXMLDocumentAttribute::GetBoolValue - Returns the value as bool. Fails if the value is not a valid boolean value, meaning an integer or true or false as string. The value will be trimmed and any character will be converted to lowercase.
	* @param[in] dMinValue - Minimum allowed value
	* @param[in] dMaxValue - Maximum allowed value
	* @return returns the value .
	*/
	bool CXMLDocumentAttribute::GetBoolValue(const LibMCEnv_double dMinValue, const LibMCEnv_double dMaxValue)
	{
		bool resultValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_XMLDocumentAttribute_GetBoolValue(m_pHandle, dMinValue, dMaxValue, &resultValue));
		
		return resultValue;
	}
	
	/**
	* CXMLDocumentAttribute::SetValue - Sets the value of the attribute as string.
	* @param[in] sValue - new value of the attribute.
	*/
	void CXMLDocumentAttribute::SetValue(const std::string & sValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_XMLDocumentAttribute_SetValue(m_pHandle, sValue.c_str()));
	}
	
	/**
	* CXMLDocumentAttribute::SetIntegerValue - Sets the value of the attribute as integer.
	* @param[in] nValue - new value of the attribute.
	*/
	void CXMLDocumentAttribute::SetIntegerValue(const LibMCEnv_int64 nValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_XMLDocumentAttribute_SetIntegerValue(m_pHandle, nValue));
	}
	
	/**
	* CXMLDocumentAttribute::SetDoubleValue - Sets the value of the attribute as double.
	* @param[in] dValue - new value of the attribute.
	*/
	void CXMLDocumentAttribute::SetDoubleValue(const LibMCEnv_double dValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_XMLDocumentAttribute_SetDoubleValue(m_pHandle, dValue));
	}
	
	/**
	* CXMLDocumentAttribute::SetBoolValue - Sets the value of the attribute as bool.
	* @param[in] bValue - new value of the attribute.
	*/
	void CXMLDocumentAttribute::SetBoolValue(const bool bValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_XMLDocumentAttribute_SetBoolValue(m_pHandle, bValue));
	}
	
	/**
	* CXMLDocumentAttribute::Remove - Removes the attribute from its parent node. All subsequent calls to the class will fail.
	*/
	void CXMLDocumentAttribute::Remove()
	{
		CheckError(m_pWrapper->m_WrapperTable.m_XMLDocumentAttribute_Remove(m_pHandle));
	}
	
	/**
	 * Method definitions for class CXMLDocumentNode
	 */
	
	/**
	* CXMLDocumentNode::GetName - Retrieves name of the node.
	* @return returns the name of the node.
	*/
	std::string CXMLDocumentNode::GetName()
	{
		LibMCEnv_uint32 bytesNeededName = 0;
		LibMCEnv_uint32 bytesWrittenName = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_XMLDocumentNode_GetName(m_pHandle, 0, &bytesNeededName, nullptr));
		std::vector<char> bufferName(bytesNeededName);
		CheckError(m_pWrapper->m_WrapperTable.m_XMLDocumentNode_GetName(m_pHandle, bytesNeededName, &bytesWrittenName, &bufferName[0]));
		
		return std::string(&bufferName[0]);
	}
	
	/**
	* CXMLDocumentNode::GetNameSpace - Retrieves namespace of the node.
	* @return returns the namespace of the node.
	*/
	std::string CXMLDocumentNode::GetNameSpace()
	{
		LibMCEnv_uint32 bytesNeededNameSpace = 0;
		LibMCEnv_uint32 bytesWrittenNameSpace = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_XMLDocumentNode_GetNameSpace(m_pHandle, 0, &bytesNeededNameSpace, nullptr));
		std::vector<char> bufferNameSpace(bytesNeededNameSpace);
		CheckError(m_pWrapper->m_WrapperTable.m_XMLDocumentNode_GetNameSpace(m_pHandle, bytesNeededNameSpace, &bytesWrittenNameSpace, &bufferNameSpace[0]));
		
		return std::string(&bufferNameSpace[0]);
	}
	
	/**
	* CXMLDocumentNode::GetAttributeCount - Returns number of attributes.
	* @return returns the number of attributes.
	*/
	LibMCEnv_uint64 CXMLDocumentNode::GetAttributeCount()
	{
		LibMCEnv_uint64 resultCount = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_XMLDocumentNode_GetAttributeCount(m_pHandle, &resultCount));
		
		return resultCount;
	}
	
	/**
	* CXMLDocumentNode::GetAttribute - Returns attribute instance. Fails if Index is out of range.
	* @param[in] nIndex - Index of the attribute to return (0-based).
	* @return XML Document attribute.
	*/
	PXMLDocumentAttribute CXMLDocumentNode::GetAttribute(const LibMCEnv_uint64 nIndex)
	{
		LibMCEnvHandle hAttributeInstance = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_XMLDocumentNode_GetAttribute(m_pHandle, nIndex, &hAttributeInstance));
		
		if (!hAttributeInstance) {
			CheckError(LIBMCENV_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CXMLDocumentAttribute>(m_pWrapper, hAttributeInstance);
	}
	
	/**
	* CXMLDocumentNode::HasAttribute - Returns if attribute of a specific name exists.
	* @param[in] sNameSpace - Namespace of the attribute. If empty, it inherits the namespace of the node.
	* @param[in] sName - Name of the attribute.
	* @return Returns if the attribute exists.
	*/
	bool CXMLDocumentNode::HasAttribute(const std::string & sNameSpace, const std::string & sName)
	{
		bool resultAttributeExists = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_XMLDocumentNode_HasAttribute(m_pHandle, sNameSpace.c_str(), sName.c_str(), &resultAttributeExists));
		
		return resultAttributeExists;
	}
	
	/**
	* CXMLDocumentNode::FindAttribute - Returns attribute instance of a specific name. 
	* @param[in] sNameSpace - Namespace of the attribute. If empty, it inherits the namespace of the node.
	* @param[in] sName - Name of the attribute.
	* @param[in] bMustExist - If true, the call fails if attribute does not exist. If falls, the call will return null if the attribute does not exist.
	* @return XML Document attribute.
	*/
	PXMLDocumentAttribute CXMLDocumentNode::FindAttribute(const std::string & sNameSpace, const std::string & sName, const bool bMustExist)
	{
		LibMCEnvHandle hAttributeInstance = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_XMLDocumentNode_FindAttribute(m_pHandle, sNameSpace.c_str(), sName.c_str(), bMustExist, &hAttributeInstance));
		
		if (hAttributeInstance) {
			return std::make_shared<CXMLDocumentAttribute>(m_pWrapper, hAttributeInstance);
		} else {
			return nullptr;
		}
	}
	
	/**
	* CXMLDocumentNode::RemoveAttribute - Removes the attribute with a specific name. Does nothing if attribute does not exist.
	* @param[in] sNameSpace - Namespace of the attribute. If empty, it inherits the namespace of the node.
	* @param[in] sName - Name of the attribute.
	*/
	void CXMLDocumentNode::RemoveAttribute(const std::string & sNameSpace, const std::string & sName)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_XMLDocumentNode_RemoveAttribute(m_pHandle, sNameSpace.c_str(), sName.c_str()));
	}
	
	/**
	* CXMLDocumentNode::RemoveAttributeByIndex - Removes the attribute with a specific index. Does nothing if attribute does not exist.
	* @param[in] nIndex - Index of the attribute to remove (0-based).
	*/
	void CXMLDocumentNode::RemoveAttributeByIndex(const LibMCEnv_uint64 nIndex)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_XMLDocumentNode_RemoveAttributeByIndex(m_pHandle, nIndex));
	}
	
	/**
	* CXMLDocumentNode::AddAttribute - Adds an attribute with a specific name and string value. Fails if attribute already exists.
	* @param[in] sNameSpace - New namespace of the attribute. MUST be either an empty string for the root namespace, or previously being registered with the document.
	* @param[in] sName - Name of the attribute.
	* @param[in] sValue - Value of the attribute.
	*/
	void CXMLDocumentNode::AddAttribute(const std::string & sNameSpace, const std::string & sName, const std::string & sValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_XMLDocumentNode_AddAttribute(m_pHandle, sNameSpace.c_str(), sName.c_str(), sValue.c_str()));
	}
	
	/**
	* CXMLDocumentNode::AddIntegerAttribute - Adds an attribute with a specific name and integer value. Fails if attribute already exists.
	* @param[in] sNameSpace - New namespace of the attribute. MUST be either an empty string for the root namespace, or previously being registered with the document.
	* @param[in] sName - Name of the attribute.
	* @param[in] nValue - Value of the attribute.
	*/
	void CXMLDocumentNode::AddIntegerAttribute(const std::string & sNameSpace, const std::string & sName, const LibMCEnv_int64 nValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_XMLDocumentNode_AddIntegerAttribute(m_pHandle, sNameSpace.c_str(), sName.c_str(), nValue));
	}
	
	/**
	* CXMLDocumentNode::AddDoubleAttribute - Adds an attribute with a specific name and double value. Fails if attribute already exists.
	* @param[in] sNameSpace - New namespace of the child. MUST be either an empty string for the root namespace, or previously being registered with the document.
	* @param[in] sName - Name of the attribute.
	* @param[in] dValue - Value of the attribute.
	*/
	void CXMLDocumentNode::AddDoubleAttribute(const std::string & sNameSpace, const std::string & sName, const LibMCEnv_double dValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_XMLDocumentNode_AddDoubleAttribute(m_pHandle, sNameSpace.c_str(), sName.c_str(), dValue));
	}
	
	/**
	* CXMLDocumentNode::AddBoolAttribute - Adds an attribute with a specific name and bool value. Fails if attribute already exists.
	* @param[in] sNameSpace - New namespace of the child. MUST be either an empty string for the root namespace, or previously being registered with the document.
	* @param[in] sName - Name of the attribute.
	* @param[in] bValue - Value of the attribute.
	*/
	void CXMLDocumentNode::AddBoolAttribute(const std::string & sNameSpace, const std::string & sName, const bool bValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_XMLDocumentNode_AddBoolAttribute(m_pHandle, sNameSpace.c_str(), sName.c_str(), bValue));
	}
	
	/**
	* CXMLDocumentNode::GetChildren - Returns all the child nodes of the XML Node.
	* @return returns the list of child nodes.
	*/
	PXMLDocumentNodes CXMLDocumentNode::GetChildren()
	{
		LibMCEnvHandle hChildNodes = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_XMLDocumentNode_GetChildren(m_pHandle, &hChildNodes));
		
		if (!hChildNodes) {
			CheckError(LIBMCENV_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CXMLDocumentNodes>(m_pWrapper, hChildNodes);
	}
	
	/**
	* CXMLDocumentNode::CountChildrenByName - Returns how many children of the XML Node have a specific name.
	* @param[in] sNameSpace - New namespace of the child. MUST be either an empty string for the root namespace, or previously being registered with the document.
	* @param[in] sName - Name of the node.
	* @return returns the number children with the specified name.
	*/
	LibMCEnv_uint64 CXMLDocumentNode::CountChildrenByName(const std::string & sNameSpace, const std::string & sName)
	{
		LibMCEnv_uint64 resultCount = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_XMLDocumentNode_CountChildrenByName(m_pHandle, sNameSpace.c_str(), sName.c_str(), &resultCount));
		
		return resultCount;
	}
	
	/**
	* CXMLDocumentNode::GetChildrenByName - Returns all the child nodes of the XML Node with a specific name.
	* @param[in] sNameSpace - New namespace of the child. MUST be either an empty string for the root namespace, or previously being registered with the document.
	* @param[in] sName - Name of the child.
	* @return returns the list of child nodes.
	*/
	PXMLDocumentNodes CXMLDocumentNode::GetChildrenByName(const std::string & sNameSpace, const std::string & sName)
	{
		LibMCEnvHandle hChildNodes = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_XMLDocumentNode_GetChildrenByName(m_pHandle, sNameSpace.c_str(), sName.c_str(), &hChildNodes));
		
		if (!hChildNodes) {
			CheckError(LIBMCENV_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CXMLDocumentNodes>(m_pWrapper, hChildNodes);
	}
	
	/**
	* CXMLDocumentNode::HasChild - Returns if a child with a specific name exist.
	* @param[in] sNameSpace - New namespace of the child. MUST be either an empty string for the root namespace, or previously being registered with the document.
	* @param[in] sName - Name of the child.
	* @return returns if a child with a specific name exists.
	*/
	bool CXMLDocumentNode::HasChild(const std::string & sNameSpace, const std::string & sName)
	{
		bool resultChildExists = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_XMLDocumentNode_HasChild(m_pHandle, sNameSpace.c_str(), sName.c_str(), &resultChildExists));
		
		return resultChildExists;
	}
	
	/**
	* CXMLDocumentNode::HasUniqueChild - Returns if a child with a specific name exist once and only once.
	* @param[in] sNameSpace - New namespace of the child. MUST be either an empty string for the root namespace, or previously being registered with the document.
	* @param[in] sName - Name of the child.
	* @return returns if a child with a specific name exists once and only once.
	*/
	bool CXMLDocumentNode::HasUniqueChild(const std::string & sNameSpace, const std::string & sName)
	{
		bool resultChildExists = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_XMLDocumentNode_HasUniqueChild(m_pHandle, sNameSpace.c_str(), sName.c_str(), &resultChildExists));
		
		return resultChildExists;
	}
	
	/**
	* CXMLDocumentNode::FindChild - Returns child with a specific name. Throws an error if name does not exist once and only once.
	* @param[in] sNameSpace - New namespace of the child. MUST be either an empty string for the root namespace, or previously being registered with the document.
	* @param[in] sName - Name of the child.
	* @param[in] bMustExist - If true, the call fails if child does not exist. If falls, the call will return null if the child does not exist.
	* @return returns child instance or null.
	*/
	PXMLDocumentNode CXMLDocumentNode::FindChild(const std::string & sNameSpace, const std::string & sName, const bool bMustExist)
	{
		LibMCEnvHandle hChildInstance = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_XMLDocumentNode_FindChild(m_pHandle, sNameSpace.c_str(), sName.c_str(), bMustExist, &hChildInstance));
		
		if (hChildInstance) {
			return std::make_shared<CXMLDocumentNode>(m_pWrapper, hChildInstance);
		} else {
			return nullptr;
		}
	}
	
	/**
	* CXMLDocumentNode::AddChild - Adds a new child with a specific name.
	* @param[in] sNameSpace - New namespace of the child. MUST be either an empty string for the root namespace, or previously being registered with the document.
	* @param[in] sName - Name of the child.
	* @return returns child instance.
	*/
	PXMLDocumentNode CXMLDocumentNode::AddChild(const std::string & sNameSpace, const std::string & sName)
	{
		LibMCEnvHandle hChildInstance = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_XMLDocumentNode_AddChild(m_pHandle, sNameSpace.c_str(), sName.c_str(), &hChildInstance));
		
		if (!hChildInstance) {
			CheckError(LIBMCENV_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CXMLDocumentNode>(m_pWrapper, hChildInstance);
	}
	
	/**
	* CXMLDocumentNode::RemoveChild - Removes a child with a specific name. All subsequent calls to the child will fail after the call.
	* @param[in] pChildInstance - child instance to remove. Fails if given instance is not a child of the node.
	*/
	void CXMLDocumentNode::RemoveChild(classParam<CXMLDocumentNode> pChildInstance)
	{
		LibMCEnvHandle hChildInstance = pChildInstance.GetHandle();
		CheckError(m_pWrapper->m_WrapperTable.m_XMLDocumentNode_RemoveChild(m_pHandle, hChildInstance));
	}
	
	/**
	* CXMLDocumentNode::RemoveChildrenWithName - Removes all children with a specific name. Does nothing if no child with the name exists. . All subsequent calls to the deleted children will fail after the call.
	* @param[in] sNameSpace - New namespace of the child. MUST be either an empty string for the root namespace, or previously being registered with the document.
	* @param[in] sName - Name of the children.
	*/
	void CXMLDocumentNode::RemoveChildrenWithName(const std::string & sNameSpace, const std::string & sName)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_XMLDocumentNode_RemoveChildrenWithName(m_pHandle, sNameSpace.c_str(), sName.c_str()));
	}
	
	/**
	* CXMLDocumentNode::Remove - Removes the node from its parent. The root node of the document can not be removed.
	*/
	void CXMLDocumentNode::Remove()
	{
		CheckError(m_pWrapper->m_WrapperTable.m_XMLDocumentNode_Remove(m_pHandle));
	}
	
	/**
	 * Method definitions for class CXMLDocumentNodes
	 */
	
	/**
	* CXMLDocumentNodes::GetNodeCount - Returns number of nodes.
	* @return returns the number of nodes in the list.
	*/
	LibMCEnv_uint64 CXMLDocumentNodes::GetNodeCount()
	{
		LibMCEnv_uint64 resultCount = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_XMLDocumentNodes_GetNodeCount(m_pHandle, &resultCount));
		
		return resultCount;
	}
	
	/**
	* CXMLDocumentNodes::GetNode - Returns node instance. Fails if Index is out of range.
	* @param[in] nIndex - Index of the node to return (0-based).
	* @return XML Node node.
	*/
	PXMLDocumentNode CXMLDocumentNodes::GetNode(const LibMCEnv_uint64 nIndex)
	{
		LibMCEnvHandle hNodeInstance = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_XMLDocumentNodes_GetNode(m_pHandle, nIndex, &hNodeInstance));
		
		if (!hNodeInstance) {
			CheckError(LIBMCENV_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CXMLDocumentNode>(m_pWrapper, hNodeInstance);
	}
	
	/**
	* CXMLDocumentNodes::CountNodesByName - Returns how many nodes of the XML Node have a specific name.
	* @param[in] sNameSpace - New namespace of the child. MUST be either an empty string for the root namespace, or previously being registered with the document.
	* @param[in] sName - Name of the node.
	* @return returns the number of nodes with the specified name.
	*/
	LibMCEnv_uint64 CXMLDocumentNodes::CountNodesByName(const std::string & sNameSpace, const std::string & sName)
	{
		LibMCEnv_uint64 resultCount = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_XMLDocumentNodes_CountNodesByName(m_pHandle, sNameSpace.c_str(), sName.c_str(), &resultCount));
		
		return resultCount;
	}
	
	/**
	* CXMLDocumentNodes::GetNodesByName - Returns all the nodes nodes of the XML Node with a specific name.
	* @param[in] sNameSpace - New namespace of the child. MUST be either an empty string for the root namespace, or previously being registered with the document.
	* @param[in] sName - Name of the node.
	* @return returns the list of node nodes.
	*/
	PXMLDocumentNodes CXMLDocumentNodes::GetNodesByName(const std::string & sNameSpace, const std::string & sName)
	{
		LibMCEnvHandle hNodes = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_XMLDocumentNodes_GetNodesByName(m_pHandle, sNameSpace.c_str(), sName.c_str(), &hNodes));
		
		if (!hNodes) {
			CheckError(LIBMCENV_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CXMLDocumentNodes>(m_pWrapper, hNodes);
	}
	
	/**
	* CXMLDocumentNodes::HasNode - Returns if a node with a specific name exist.
	* @param[in] sNameSpace - New namespace of the child. MUST be either an empty string for the root namespace, or previously being registered with the document.
	* @param[in] sName - Name of the node.
	* @return returns if a node with a specific name exists.
	*/
	bool CXMLDocumentNodes::HasNode(const std::string & sNameSpace, const std::string & sName)
	{
		bool resultNodeExists = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_XMLDocumentNodes_HasNode(m_pHandle, sNameSpace.c_str(), sName.c_str(), &resultNodeExists));
		
		return resultNodeExists;
	}
	
	/**
	* CXMLDocumentNodes::HasUniqueNode - Returns if a node with a specific name exist once and only once.
	* @param[in] sNameSpace - New namespace of the child. MUST be either an empty string for the root namespace, or previously being registered with the document.
	* @param[in] sName - Name of the node.
	* @return returns if a node with a specific name exists once and only once.
	*/
	bool CXMLDocumentNodes::HasUniqueNode(const std::string & sNameSpace, const std::string & sName)
	{
		bool resultNodeExists = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_XMLDocumentNodes_HasUniqueNode(m_pHandle, sNameSpace.c_str(), sName.c_str(), &resultNodeExists));
		
		return resultNodeExists;
	}
	
	/**
	* CXMLDocumentNodes::FindNode - Returns node with a specific name. Throws an error if name does not exist once and only once.
	* @param[in] sNameSpace - New namespace of the child. MUST be either an empty string for the root namespace, or previously being registered with the document.
	* @param[in] sName - Name of the node.
	* @param[in] bMustExist - If true, the call fails if node does not exist. If falls, the call will return null if the node does not exist.
	* @return returns node instance.
	*/
	PXMLDocumentNode CXMLDocumentNodes::FindNode(const std::string & sNameSpace, const std::string & sName, const bool bMustExist)
	{
		LibMCEnvHandle hNodeInstance = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_XMLDocumentNodes_FindNode(m_pHandle, sNameSpace.c_str(), sName.c_str(), bMustExist, &hNodeInstance));
		
		if (hNodeInstance) {
			return std::make_shared<CXMLDocumentNode>(m_pWrapper, hNodeInstance);
		} else {
			return nullptr;
		}
	}
	
	/**
	 * Method definitions for class CXMLDocument
	 */
	
	/**
	* CXMLDocument::GetDefaultNamespace - Returns default name space of the document.
	* @return name space of the document.
	*/
	std::string CXMLDocument::GetDefaultNamespace()
	{
		LibMCEnv_uint32 bytesNeededNamespace = 0;
		LibMCEnv_uint32 bytesWrittenNamespace = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_XMLDocument_GetDefaultNamespace(m_pHandle, 0, &bytesNeededNamespace, nullptr));
		std::vector<char> bufferNamespace(bytesNeededNamespace);
		CheckError(m_pWrapper->m_WrapperTable.m_XMLDocument_GetDefaultNamespace(m_pHandle, bytesNeededNamespace, &bytesWrittenNamespace, &bufferNamespace[0]));
		
		return std::string(&bufferNamespace[0]);
	}
	
	/**
	* CXMLDocument::GetNamespaceCount - Returns the used number of name spaces of the document.
	* @return number of registered name spaces of the document.
	*/
	LibMCEnv_uint64 CXMLDocument::GetNamespaceCount()
	{
		LibMCEnv_uint64 resultCount = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_XMLDocument_GetNamespaceCount(m_pHandle, &resultCount));
		
		return resultCount;
	}
	
	/**
	* CXMLDocument::GetNamespace - Returns a name space of the document. Will fail if index is invalid.
	* @param[in] nIndex - index of name space. 0-based.
	* @param[out] sNamespace - name space of the document.
	* @param[out] sNamespacePrefix - name space prefix of the document. Empty for root namespace.
	*/
	void CXMLDocument::GetNamespace(const LibMCEnv_uint64 nIndex, std::string & sNamespace, std::string & sNamespacePrefix)
	{
		LibMCEnv_uint32 bytesNeededNamespace = 0;
		LibMCEnv_uint32 bytesWrittenNamespace = 0;
		LibMCEnv_uint32 bytesNeededNamespacePrefix = 0;
		LibMCEnv_uint32 bytesWrittenNamespacePrefix = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_XMLDocument_GetNamespace(m_pHandle, nIndex, 0, &bytesNeededNamespace, nullptr, 0, &bytesNeededNamespacePrefix, nullptr));
		std::vector<char> bufferNamespace(bytesNeededNamespace);
		std::vector<char> bufferNamespacePrefix(bytesNeededNamespacePrefix);
		CheckError(m_pWrapper->m_WrapperTable.m_XMLDocument_GetNamespace(m_pHandle, nIndex, bytesNeededNamespace, &bytesWrittenNamespace, &bufferNamespace[0], bytesNeededNamespacePrefix, &bytesWrittenNamespacePrefix, &bufferNamespacePrefix[0]));
		sNamespace = std::string(&bufferNamespace[0]);
		sNamespacePrefix = std::string(&bufferNamespacePrefix[0]);
	}
	
	/**
	* CXMLDocument::HasNamespace - Returns if the document has a namespace.
	* @param[in] sNamespace - Name space name.
	* @return name space has been registered.
	*/
	bool CXMLDocument::HasNamespace(const std::string & sNamespace)
	{
		bool resultNameSpaceIsRegistered = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_XMLDocument_HasNamespace(m_pHandle, sNamespace.c_str(), &resultNameSpaceIsRegistered));
		
		return resultNameSpaceIsRegistered;
	}
	
	/**
	* CXMLDocument::GetNamespacePrefix - Returns a name space of the document. Will fail if namespace is not registered.
	* @param[in] sNamespace - name space of the document.
	* @return name space prefix of the document. Empty for root namespace.
	*/
	std::string CXMLDocument::GetNamespacePrefix(const std::string & sNamespace)
	{
		LibMCEnv_uint32 bytesNeededNamespacePrefix = 0;
		LibMCEnv_uint32 bytesWrittenNamespacePrefix = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_XMLDocument_GetNamespacePrefix(m_pHandle, sNamespace.c_str(), 0, &bytesNeededNamespacePrefix, nullptr));
		std::vector<char> bufferNamespacePrefix(bytesNeededNamespacePrefix);
		CheckError(m_pWrapper->m_WrapperTable.m_XMLDocument_GetNamespacePrefix(m_pHandle, sNamespace.c_str(), bytesNeededNamespacePrefix, &bytesWrittenNamespacePrefix, &bufferNamespacePrefix[0]));
		
		return std::string(&bufferNamespacePrefix[0]);
	}
	
	/**
	* CXMLDocument::RegisterNamespace - Registers a custom namespace prefix. Given Namespace MUST NOT have been in use before calling this function.
	* @param[in] sNamespace - name space to register
	* @param[in] sNamespacePrefix - name space prefix to use for the namespace. MUST NOT be in use, MUST NOT be an empty string or contain non-alphanumeric characters.
	*/
	void CXMLDocument::RegisterNamespace(const std::string & sNamespace, const std::string & sNamespacePrefix)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_XMLDocument_RegisterNamespace(m_pHandle, sNamespace.c_str(), sNamespacePrefix.c_str()));
	}
	
	/**
	* CXMLDocument::GetRootNode - Returns root node of the document.
	* @return Root node of the document.
	*/
	PXMLDocumentNode CXMLDocument::GetRootNode()
	{
		LibMCEnvHandle hRootNode = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_XMLDocument_GetRootNode(m_pHandle, &hRootNode));
		
		if (!hRootNode) {
			CheckError(LIBMCENV_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CXMLDocumentNode>(m_pWrapper, hRootNode);
	}
	
	/**
	* CXMLDocument::SaveToString - Saves the XML document into a string.
	* @param[in] bAddLineBreaks - If true, line breaks and indentation will be added to the output string.
	* @return String with the XML Content.
	*/
	std::string CXMLDocument::SaveToString(const bool bAddLineBreaks)
	{
		LibMCEnv_uint32 bytesNeededXMLString = 0;
		LibMCEnv_uint32 bytesWrittenXMLString = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_XMLDocument_SaveToString(m_pHandle, bAddLineBreaks, 0, &bytesNeededXMLString, nullptr));
		std::vector<char> bufferXMLString(bytesNeededXMLString);
		CheckError(m_pWrapper->m_WrapperTable.m_XMLDocument_SaveToString(m_pHandle, bAddLineBreaks, bytesNeededXMLString, &bytesWrittenXMLString, &bufferXMLString[0]));
		
		return std::string(&bufferXMLString[0]);
	}
	
	/**
	 * Method definitions for class CTCPIPPacket
	 */
	
	/**
	* CTCPIPPacket::IsEmpty - Returns if packet is empty.
	* @return Flag if packet is empty.
	*/
	bool CTCPIPPacket::IsEmpty()
	{
		bool resultPacketIsEmpty = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_TCPIPPacket_IsEmpty(m_pHandle, &resultPacketIsEmpty));
		
		return resultPacketIsEmpty;
	}
	
	/**
	* CTCPIPPacket::GetSize - Returns the size of the packet. Returns 0 if packet is empty.
	* @return returns size of packet.
	*/
	LibMCEnv_uint32 CTCPIPPacket::GetSize()
	{
		LibMCEnv_uint32 resultPacketSize = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_TCPIPPacket_GetSize(m_pHandle, &resultPacketSize));
		
		return resultPacketSize;
	}
	
	/**
	* CTCPIPPacket::GetData - Returns the data of the packet. Fails if packet is empty.
	* @param[out] BufferBuffer - packet data.
	*/
	void CTCPIPPacket::GetData(std::vector<LibMCEnv_uint8> & BufferBuffer)
	{
		LibMCEnv_uint64 elementsNeededBuffer = 0;
		LibMCEnv_uint64 elementsWrittenBuffer = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_TCPIPPacket_GetData(m_pHandle, 0, &elementsNeededBuffer, nullptr));
		BufferBuffer.resize((size_t) elementsNeededBuffer);
		CheckError(m_pWrapper->m_WrapperTable.m_TCPIPPacket_GetData(m_pHandle, elementsNeededBuffer, &elementsWrittenBuffer, BufferBuffer.data()));
	}
	
	/**
	 * Method definitions for class CTCPIPConnection
	 */
	
	/**
	* CTCPIPConnection::GetIPAddress - Returns the IP Address of the Connection.
	* @return IP Address.
	*/
	std::string CTCPIPConnection::GetIPAddress()
	{
		LibMCEnv_uint32 bytesNeededIPAddress = 0;
		LibMCEnv_uint32 bytesWrittenIPAddress = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_TCPIPConnection_GetIPAddress(m_pHandle, 0, &bytesNeededIPAddress, nullptr));
		std::vector<char> bufferIPAddress(bytesNeededIPAddress);
		CheckError(m_pWrapper->m_WrapperTable.m_TCPIPConnection_GetIPAddress(m_pHandle, bytesNeededIPAddress, &bytesWrittenIPAddress, &bufferIPAddress[0]));
		
		return std::string(&bufferIPAddress[0]);
	}
	
	/**
	* CTCPIPConnection::GetPort - Returns the Port of the Connection.
	* @return Port.
	*/
	LibMCEnv_uint32 CTCPIPConnection::GetPort()
	{
		LibMCEnv_uint32 resultPort = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_TCPIPConnection_GetPort(m_pHandle, &resultPort));
		
		return resultPort;
	}
	
	/**
	* CTCPIPConnection::GetTimeout - Returns the Timeout of the Connection.
	* @return Timeout in milliseconds.
	*/
	LibMCEnv_uint32 CTCPIPConnection::GetTimeout()
	{
		LibMCEnv_uint32 resultTimeout = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_TCPIPConnection_GetTimeout(m_pHandle, &resultTimeout));
		
		return resultTimeout;
	}
	
	/**
	* CTCPIPConnection::IsConnected - Returns if the instance is connected.
	* @return .
	*/
	bool CTCPIPConnection::IsConnected()
	{
		bool resultIsConnected = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_TCPIPConnection_IsConnected(m_pHandle, &resultIsConnected));
		
		return resultIsConnected;
	}
	
	/**
	* CTCPIPConnection::Disconnect - Disconnects from the Server, if connected.
	*/
	void CTCPIPConnection::Disconnect()
	{
		CheckError(m_pWrapper->m_WrapperTable.m_TCPIPConnection_Disconnect(m_pHandle));
	}
	
	/**
	* CTCPIPConnection::Reconnect - Disconnects and Connects to the Server.
	*/
	void CTCPIPConnection::Reconnect()
	{
		CheckError(m_pWrapper->m_WrapperTable.m_TCPIPConnection_Reconnect(m_pHandle));
	}
	
	/**
	* CTCPIPConnection::SendBuffer - Sends a buffer of bytes to the Server.
	* @param[in] BufferBuffer - packet payload.
	*/
	void CTCPIPConnection::SendBuffer(const CInputVector<LibMCEnv_uint8> & BufferBuffer)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_TCPIPConnection_SendBuffer(m_pHandle, (LibMCEnv_uint64)BufferBuffer.size(), BufferBuffer.data()));
	}
	
	/**
	* CTCPIPConnection::WaitForData - Waits for a server packet to arrive.
	* @param[in] nTimeOutInMS - timeout in Milliseconds.
	* @return Flag if a new packet has arrived.
	*/
	bool CTCPIPConnection::WaitForData(const LibMCEnv_uint32 nTimeOutInMS)
	{
		bool resultDataAvailable = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_TCPIPConnection_WaitForData(m_pHandle, nTimeOutInMS, &resultDataAvailable));
		
		return resultDataAvailable;
	}
	
	/**
	* CTCPIPConnection::ReceiveFixedPacket - Receives a fixed length packet. Blocks until expected number of bytes arrives or timeout is hit. Fails if there is a connection error. Returns empty packet if timeout is hit.
	* @param[in] nPacketSize - Size of packet to receive. MUST be larger than 0.
	* @param[in] nTimeOutInMS - Timeout in Milliseconds.
	* @return Packet instance. Returns empty packet if timeout is hit
	*/
	PTCPIPPacket CTCPIPConnection::ReceiveFixedPacket(const LibMCEnv_uint32 nPacketSize, const LibMCEnv_uint32 nTimeOutInMS)
	{
		LibMCEnvHandle hPacketInstance = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_TCPIPConnection_ReceiveFixedPacket(m_pHandle, nPacketSize, nTimeOutInMS, &hPacketInstance));
		
		if (!hPacketInstance) {
			CheckError(LIBMCENV_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CTCPIPPacket>(m_pWrapper, hPacketInstance);
	}
	
	/**
	* CTCPIPConnection::ReceiveData - Receives data. Fails if there is a connection error. Returns empty packet if timeout is hit.
	* @param[in] nDataSize - Size of data to receive.
	* @param[in] nTimeOutInMS - timeout in Milliseconds.
	* @return Packet instance. Size will be between 0 and DataSize.
	*/
	PTCPIPPacket CTCPIPConnection::ReceiveData(const LibMCEnv_uint32 nDataSize, const LibMCEnv_uint32 nTimeOutInMS)
	{
		LibMCEnvHandle hPacketInstance = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_TCPIPConnection_ReceiveData(m_pHandle, nDataSize, nTimeOutInMS, &hPacketInstance));
		
		if (!hPacketInstance) {
			CheckError(LIBMCENV_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CTCPIPPacket>(m_pWrapper, hPacketInstance);
	}
	
	/**
	 * Method definitions for class CModbusTCPDigitalIOStatus
	 */
	
	/**
	* CModbusTCPDigitalIOStatus::GetCount - Returns the number of Digital IOs in the instance.
	* @return Count.
	*/
	LibMCEnv_uint32 CModbusTCPDigitalIOStatus::GetCount()
	{
		LibMCEnv_uint32 resultCount = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_ModbusTCPDigitalIOStatus_GetCount(m_pHandle, &resultCount));
		
		return resultCount;
	}
	
	/**
	* CModbusTCPDigitalIOStatus::GetBaseAddress - Returns the base address of Digital IOs in the instance.
	* @return Base Address.
	*/
	LibMCEnv_uint32 CModbusTCPDigitalIOStatus::GetBaseAddress()
	{
		LibMCEnv_uint32 resultAddress = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_ModbusTCPDigitalIOStatus_GetBaseAddress(m_pHandle, &resultAddress));
		
		return resultAddress;
	}
	
	/**
	* CModbusTCPDigitalIOStatus::GetValue - Returns the cached state of the Digital IO in the instance.
	* @param[in] nIndex - Index of IO Value. 0-based.
	* @return State Value.
	*/
	bool CModbusTCPDigitalIOStatus::GetValue(const LibMCEnv_uint32 nIndex)
	{
		bool resultState = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_ModbusTCPDigitalIOStatus_GetValue(m_pHandle, nIndex, &resultState));
		
		return resultState;
	}
	
	/**
	* CModbusTCPDigitalIOStatus::GetValues - Returns all Digital IOs of the instance as byte array.
	* @param[out] StateArrayBuffer - State Value Array.
	*/
	void CModbusTCPDigitalIOStatus::GetValues(std::vector<LibMCEnv_uint8> & StateArrayBuffer)
	{
		LibMCEnv_uint64 elementsNeededStateArray = 0;
		LibMCEnv_uint64 elementsWrittenStateArray = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_ModbusTCPDigitalIOStatus_GetValues(m_pHandle, 0, &elementsNeededStateArray, nullptr));
		StateArrayBuffer.resize((size_t) elementsNeededStateArray);
		CheckError(m_pWrapper->m_WrapperTable.m_ModbusTCPDigitalIOStatus_GetValues(m_pHandle, elementsNeededStateArray, &elementsWrittenStateArray, StateArrayBuffer.data()));
	}
	
	/**
	 * Method definitions for class CModbusTCPRegisterStatus
	 */
	
	/**
	* CModbusTCPRegisterStatus::GetCount - Returns the number of registers in the instance.
	* @return Count.
	*/
	LibMCEnv_uint32 CModbusTCPRegisterStatus::GetCount()
	{
		LibMCEnv_uint32 resultCount = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_ModbusTCPRegisterStatus_GetCount(m_pHandle, &resultCount));
		
		return resultCount;
	}
	
	/**
	* CModbusTCPRegisterStatus::GetBaseAddress - Returns the base address of registers in the instance.
	* @return Base Address.
	*/
	LibMCEnv_uint32 CModbusTCPRegisterStatus::GetBaseAddress()
	{
		LibMCEnv_uint32 resultAddress = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_ModbusTCPRegisterStatus_GetBaseAddress(m_pHandle, &resultAddress));
		
		return resultAddress;
	}
	
	/**
	* CModbusTCPRegisterStatus::GetValue - Returns the cached state of the registers in the instance.
	* @param[in] nIndex - Index of IO Value. 0-based.
	* @return State Value.
	*/
	LibMCEnv_uint16 CModbusTCPRegisterStatus::GetValue(const LibMCEnv_uint32 nIndex)
	{
		LibMCEnv_uint16 resultState = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_ModbusTCPRegisterStatus_GetValue(m_pHandle, nIndex, &resultState));
		
		return resultState;
	}
	
	/**
	* CModbusTCPRegisterStatus::GetValues - Returns all registers of the instance as word array.
	* @param[out] StateArrayBuffer - State Value Array.
	*/
	void CModbusTCPRegisterStatus::GetValues(std::vector<LibMCEnv_uint16> & StateArrayBuffer)
	{
		LibMCEnv_uint64 elementsNeededStateArray = 0;
		LibMCEnv_uint64 elementsWrittenStateArray = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_ModbusTCPRegisterStatus_GetValues(m_pHandle, 0, &elementsNeededStateArray, nullptr));
		StateArrayBuffer.resize((size_t) elementsNeededStateArray);
		CheckError(m_pWrapper->m_WrapperTable.m_ModbusTCPRegisterStatus_GetValues(m_pHandle, elementsNeededStateArray, &elementsWrittenStateArray, StateArrayBuffer.data()));
	}
	
	/**
	 * Method definitions for class CModbusTCPConnection
	 */
	
	/**
	* CModbusTCPConnection::GetIPAddress - Returns the IP Address of the Connection.
	* @return IP Address.
	*/
	std::string CModbusTCPConnection::GetIPAddress()
	{
		LibMCEnv_uint32 bytesNeededIPAddress = 0;
		LibMCEnv_uint32 bytesWrittenIPAddress = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_ModbusTCPConnection_GetIPAddress(m_pHandle, 0, &bytesNeededIPAddress, nullptr));
		std::vector<char> bufferIPAddress(bytesNeededIPAddress);
		CheckError(m_pWrapper->m_WrapperTable.m_ModbusTCPConnection_GetIPAddress(m_pHandle, bytesNeededIPAddress, &bytesWrittenIPAddress, &bufferIPAddress[0]));
		
		return std::string(&bufferIPAddress[0]);
	}
	
	/**
	* CModbusTCPConnection::GetPort - Returns the Port of the Connection.
	* @return Port.
	*/
	LibMCEnv_uint32 CModbusTCPConnection::GetPort()
	{
		LibMCEnv_uint32 resultPort = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_ModbusTCPConnection_GetPort(m_pHandle, &resultPort));
		
		return resultPort;
	}
	
	/**
	* CModbusTCPConnection::GetTimeout - Returns the Timeout of the Connection.
	* @return Timeout in milliseconds.
	*/
	LibMCEnv_uint32 CModbusTCPConnection::GetTimeout()
	{
		LibMCEnv_uint32 resultTimeout = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_ModbusTCPConnection_GetTimeout(m_pHandle, &resultTimeout));
		
		return resultTimeout;
	}
	
	/**
	* CModbusTCPConnection::IsConnected - Returns if the instance is connected.
	* @return .
	*/
	bool CModbusTCPConnection::IsConnected()
	{
		bool resultIsConnected = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_ModbusTCPConnection_IsConnected(m_pHandle, &resultIsConnected));
		
		return resultIsConnected;
	}
	
	/**
	* CModbusTCPConnection::Disconnect - Disconnects from the Server.
	*/
	void CModbusTCPConnection::Disconnect()
	{
		CheckError(m_pWrapper->m_WrapperTable.m_ModbusTCPConnection_Disconnect(m_pHandle));
	}
	
	/**
	* CModbusTCPConnection::Reconnect - Disconnects and Connects to the Server.
	*/
	void CModbusTCPConnection::Reconnect()
	{
		CheckError(m_pWrapper->m_WrapperTable.m_ModbusTCPConnection_Reconnect(m_pHandle));
	}
	
	/**
	* CModbusTCPConnection::DiagnosisCall - Sends a diagnosis call to the Server.
	* @param[in] nSubFunction - Modbus TCP Subfunction ID.
	* @param[in] nDataField - Modbus TCP Data Field.
	* @return Modbus TCP Data Response.
	*/
	LibMCEnv_uint16 CModbusTCPConnection::DiagnosisCall(const LibMCEnv_uint16 nSubFunction, const LibMCEnv_uint16 nDataField)
	{
		LibMCEnv_uint16 resultDataResponse = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_ModbusTCPConnection_DiagnosisCall(m_pHandle, nSubFunction, nDataField, &resultDataResponse));
		
		return resultDataResponse;
	}
	
	/**
	* CModbusTCPConnection::ReadCoilStatus - Reads coil status of Server.
	* @param[in] nStartAddress - Start Address.
	* @param[in] nBitCount - Number of coils to read. MUST be larger than 0.
	* @return Coil status instance.
	*/
	PModbusTCPDigitalIOStatus CModbusTCPConnection::ReadCoilStatus(const LibMCEnv_uint32 nStartAddress, const LibMCEnv_uint32 nBitCount)
	{
		LibMCEnvHandle hCoilStatus = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_ModbusTCPConnection_ReadCoilStatus(m_pHandle, nStartAddress, nBitCount, &hCoilStatus));
		
		if (!hCoilStatus) {
			CheckError(LIBMCENV_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CModbusTCPDigitalIOStatus>(m_pWrapper, hCoilStatus);
	}
	
	/**
	* CModbusTCPConnection::ReadInputStatus - Reads input status of Server.
	* @param[in] nStartAddress - Start Address.
	* @param[in] nBitCount - Number of inputs to read. MUST be larger than 0.
	* @return Input status instance.
	*/
	PModbusTCPDigitalIOStatus CModbusTCPConnection::ReadInputStatus(const LibMCEnv_uint32 nStartAddress, const LibMCEnv_uint32 nBitCount)
	{
		LibMCEnvHandle hInputStatus = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_ModbusTCPConnection_ReadInputStatus(m_pHandle, nStartAddress, nBitCount, &hInputStatus));
		
		if (!hInputStatus) {
			CheckError(LIBMCENV_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CModbusTCPDigitalIOStatus>(m_pWrapper, hInputStatus);
	}
	
	/**
	* CModbusTCPConnection::ReadHoldingRegisters - Reads holding registers of Server.
	* @param[in] nStartAddress - Start Address.
	* @param[in] nRegisterCount - Number of registers. MUST be larger than 0.
	* @return Holding register instance.
	*/
	PModbusTCPRegisterStatus CModbusTCPConnection::ReadHoldingRegisters(const LibMCEnv_uint32 nStartAddress, const LibMCEnv_uint32 nRegisterCount)
	{
		LibMCEnvHandle hRegisterInstance = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_ModbusTCPConnection_ReadHoldingRegisters(m_pHandle, nStartAddress, nRegisterCount, &hRegisterInstance));
		
		if (!hRegisterInstance) {
			CheckError(LIBMCENV_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CModbusTCPRegisterStatus>(m_pWrapper, hRegisterInstance);
	}
	
	/**
	* CModbusTCPConnection::ReadInputRegisters - Reads input registers of Server.
	* @param[in] nStartAddress - Start Address.
	* @param[in] nRegisterCount - Number of registers. MUST be larger than 0.
	* @return Input register instance.
	*/
	PModbusTCPRegisterStatus CModbusTCPConnection::ReadInputRegisters(const LibMCEnv_uint32 nStartAddress, const LibMCEnv_uint32 nRegisterCount)
	{
		LibMCEnvHandle hRegisterInstance = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_ModbusTCPConnection_ReadInputRegisters(m_pHandle, nStartAddress, nRegisterCount, &hRegisterInstance));
		
		if (!hRegisterInstance) {
			CheckError(LIBMCENV_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CModbusTCPRegisterStatus>(m_pWrapper, hRegisterInstance);
	}
	
	/**
	* CModbusTCPConnection::ForceMultipleCoils - Forces multiple coils on Server.
	* @param[in] nStartAddress - Start Address.
	* @param[in] BufferBuffer - Input coil array. One byte per Input. MUST NOT be empty
	*/
	void CModbusTCPConnection::ForceMultipleCoils(const LibMCEnv_uint32 nStartAddress, const CInputVector<LibMCEnv_uint8> & BufferBuffer)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_ModbusTCPConnection_ForceMultipleCoils(m_pHandle, nStartAddress, (LibMCEnv_uint64)BufferBuffer.size(), BufferBuffer.data()));
	}
	
	/**
	* CModbusTCPConnection::PresetMultipleRegisters - Forces multiple registers on Server.
	* @param[in] nStartAddress - Start Address.
	* @param[in] BufferBuffer - Input register array. One word per Input. MUST NOT be empty
	*/
	void CModbusTCPConnection::PresetMultipleRegisters(const LibMCEnv_uint32 nStartAddress, const CInputVector<LibMCEnv_uint16> & BufferBuffer)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_ModbusTCPConnection_PresetMultipleRegisters(m_pHandle, nStartAddress, (LibMCEnv_uint64)BufferBuffer.size(), BufferBuffer.data()));
	}
	
	/**
	 * Method definitions for class CDriverStatusUpdateSession
	 */
	
	/**
	* CDriverStatusUpdateSession::SetStringParameter - sets a string parameter
	* @param[in] sParameterName - Parameter Name
	* @param[in] sValue - Value to set
	*/
	void CDriverStatusUpdateSession::SetStringParameter(const std::string & sParameterName, const std::string & sValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_DriverStatusUpdateSession_SetStringParameter(m_pHandle, sParameterName.c_str(), sValue.c_str()));
	}
	
	/**
	* CDriverStatusUpdateSession::SetUUIDParameter - sets a uuid parameter
	* @param[in] sParameterName - Parameter Name
	* @param[in] sValue - Value to set
	*/
	void CDriverStatusUpdateSession::SetUUIDParameter(const std::string & sParameterName, const std::string & sValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_DriverStatusUpdateSession_SetUUIDParameter(m_pHandle, sParameterName.c_str(), sValue.c_str()));
	}
	
	/**
	* CDriverStatusUpdateSession::SetDoubleParameter - sets a double parameter
	* @param[in] sParameterName - Parameter Name
	* @param[in] dValue - Value to set
	*/
	void CDriverStatusUpdateSession::SetDoubleParameter(const std::string & sParameterName, const LibMCEnv_double dValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_DriverStatusUpdateSession_SetDoubleParameter(m_pHandle, sParameterName.c_str(), dValue));
	}
	
	/**
	* CDriverStatusUpdateSession::SetIntegerParameter - sets an int parameter
	* @param[in] sParameterName - Parameter Name
	* @param[in] nValue - Value to set
	*/
	void CDriverStatusUpdateSession::SetIntegerParameter(const std::string & sParameterName, const LibMCEnv_int64 nValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_DriverStatusUpdateSession_SetIntegerParameter(m_pHandle, sParameterName.c_str(), nValue));
	}
	
	/**
	* CDriverStatusUpdateSession::SetBoolParameter - sets a bool parameter
	* @param[in] sParameterName - Parameter Name
	* @param[in] bValue - Value to set
	*/
	void CDriverStatusUpdateSession::SetBoolParameter(const std::string & sParameterName, const bool bValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_DriverStatusUpdateSession_SetBoolParameter(m_pHandle, sParameterName.c_str(), bValue));
	}
	
	/**
	* CDriverStatusUpdateSession::LogMessage - logs a string as message
	* @param[in] sLogString - String to Log
	*/
	void CDriverStatusUpdateSession::LogMessage(const std::string & sLogString)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_DriverStatusUpdateSession_LogMessage(m_pHandle, sLogString.c_str()));
	}
	
	/**
	* CDriverStatusUpdateSession::LogWarning - logs a string as warning
	* @param[in] sLogString - String to Log
	*/
	void CDriverStatusUpdateSession::LogWarning(const std::string & sLogString)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_DriverStatusUpdateSession_LogWarning(m_pHandle, sLogString.c_str()));
	}
	
	/**
	* CDriverStatusUpdateSession::LogInfo - logs a string as info
	* @param[in] sLogString - String to Log
	*/
	void CDriverStatusUpdateSession::LogInfo(const std::string & sLogString)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_DriverStatusUpdateSession_LogInfo(m_pHandle, sLogString.c_str()));
	}
	
	/**
	* CDriverStatusUpdateSession::Sleep - Sleeps for a definite amount of time.
	* @param[in] nDelay - Milliseconds to sleep.
	*/
	void CDriverStatusUpdateSession::Sleep(const LibMCEnv_uint32 nDelay)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_DriverStatusUpdateSession_Sleep(m_pHandle, nDelay));
	}
	
	/**
	 * Method definitions for class CDriverEnvironment
	 */
	
	/**
	* CDriverEnvironment::CreateStatusUpdateSession - creates a status update object which can be easily called from an independent thread.
	* @return creates a status update instance
	*/
	PDriverStatusUpdateSession CDriverEnvironment::CreateStatusUpdateSession()
	{
		LibMCEnvHandle hUpdateStatusInstance = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_DriverEnvironment_CreateStatusUpdateSession(m_pHandle, &hUpdateStatusInstance));
		
		if (!hUpdateStatusInstance) {
			CheckError(LIBMCENV_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CDriverStatusUpdateSession>(m_pWrapper, hUpdateStatusInstance);
	}
	
	/**
	* CDriverEnvironment::CreateWorkingDirectory - creates a temporary working directory.
	* @return creates a working directory
	*/
	PWorkingDirectory CDriverEnvironment::CreateWorkingDirectory()
	{
		LibMCEnvHandle hWorkingDirectory = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_DriverEnvironment_CreateWorkingDirectory(m_pHandle, &hWorkingDirectory));
		
		if (!hWorkingDirectory) {
			CheckError(LIBMCENV_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CWorkingDirectory>(m_pWrapper, hWorkingDirectory);
	}
	
	/**
	* CDriverEnvironment::CreateTCPIPConnection - creates a TCP/IP Connection for a specific IP address and port.
	* @param[in] sIPAddress - IP Address.
	* @param[in] nPort - Port.
	* @param[in] nTimeOutInMS - timeout in Milliseconds.
	* @return connects to the given IP Address
	*/
	PTCPIPConnection CDriverEnvironment::CreateTCPIPConnection(const std::string & sIPAddress, const LibMCEnv_uint32 nPort, const LibMCEnv_uint32 nTimeOutInMS)
	{
		LibMCEnvHandle hConnectionInstance = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_DriverEnvironment_CreateTCPIPConnection(m_pHandle, sIPAddress.c_str(), nPort, nTimeOutInMS, &hConnectionInstance));
		
		if (!hConnectionInstance) {
			CheckError(LIBMCENV_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CTCPIPConnection>(m_pWrapper, hConnectionInstance);
	}
	
	/**
	* CDriverEnvironment::CreateModbusTCPConnection - creates a Modbus TCP Connection for a specific IP address and port.
	* @param[in] sIPAddress - IP Address.
	* @param[in] nPort - Port.
	* @param[in] nTimeOutInMS - timeout in Milliseconds.
	* @return connects to the given IP Address
	*/
	PModbusTCPConnection CDriverEnvironment::CreateModbusTCPConnection(const std::string & sIPAddress, const LibMCEnv_uint32 nPort, const LibMCEnv_uint32 nTimeOutInMS)
	{
		LibMCEnvHandle hConnectionInstance = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_DriverEnvironment_CreateModbusTCPConnection(m_pHandle, sIPAddress.c_str(), nPort, nTimeOutInMS, &hConnectionInstance));
		
		if (!hConnectionInstance) {
			CheckError(LIBMCENV_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CModbusTCPConnection>(m_pWrapper, hConnectionInstance);
	}
	
	/**
	* CDriverEnvironment::CreateXMLDocument - creates an empty XML Document.
	* @param[in] sRootNodeName - Name of the root node. MUST be a valid XML Node Name string.
	* @param[in] sDefaultNamespace - Default namespace of the document. MUST be a valid XML namespace string.
	* @return XML Document Instance.
	*/
	PXMLDocument CDriverEnvironment::CreateXMLDocument(const std::string & sRootNodeName, const std::string & sDefaultNamespace)
	{
		LibMCEnvHandle hXMLDocument = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_DriverEnvironment_CreateXMLDocument(m_pHandle, sRootNodeName.c_str(), sDefaultNamespace.c_str(), &hXMLDocument));
		
		if (!hXMLDocument) {
			CheckError(LIBMCENV_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CXMLDocument>(m_pWrapper, hXMLDocument);
	}
	
	/**
	* CDriverEnvironment::ParseXMLString - parses an XML String and returns an XML Document instance. Throws an error if XML is malformatted.
	* @param[in] sXMLString - XML String.
	* @return XML Document Instance.
	*/
	PXMLDocument CDriverEnvironment::ParseXMLString(const std::string & sXMLString)
	{
		LibMCEnvHandle hXMLDocument = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_DriverEnvironment_ParseXMLString(m_pHandle, sXMLString.c_str(), &hXMLDocument));
		
		if (!hXMLDocument) {
			CheckError(LIBMCENV_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CXMLDocument>(m_pWrapper, hXMLDocument);
	}
	
	/**
	* CDriverEnvironment::ParseXMLData - parses a XML stored in a byte array and returns an XML Document instance. . Throws an error if XML is malformatted.
	* @param[in] XMLDataBuffer - XML Binary data.
	* @return XML Document Instance.
	*/
	PXMLDocument CDriverEnvironment::ParseXMLData(const CInputVector<LibMCEnv_uint8> & XMLDataBuffer)
	{
		LibMCEnvHandle hXMLDocument = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_DriverEnvironment_ParseXMLData(m_pHandle, (LibMCEnv_uint64)XMLDataBuffer.size(), XMLDataBuffer.data(), &hXMLDocument));
		
		if (!hXMLDocument) {
			CheckError(LIBMCENV_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CXMLDocument>(m_pWrapper, hXMLDocument);
	}
	
	/**
	* CDriverEnvironment::DriverHasResourceData - retrieves if attached driver has data with the given identifier.
	* @param[in] sIdentifier - identifier of the binary data in the driver package.
	* @return returns true if the resource exists in the machine resource package.
	*/
	bool CDriverEnvironment::DriverHasResourceData(const std::string & sIdentifier)
	{
		bool resultHasResourceData = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_DriverEnvironment_DriverHasResourceData(m_pHandle, sIdentifier.c_str(), &resultHasResourceData));
		
		return resultHasResourceData;
	}
	
	/**
	* CDriverEnvironment::MachineHasResourceData - retrieves if attached driver has data with the given identifier.
	* @param[in] sIdentifier - identifier of the binary data in the driver package.
	* @return returns true if the resource exists in the machine resource package.
	*/
	bool CDriverEnvironment::MachineHasResourceData(const std::string & sIdentifier)
	{
		bool resultHasResourceData = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_DriverEnvironment_MachineHasResourceData(m_pHandle, sIdentifier.c_str(), &resultHasResourceData));
		
		return resultHasResourceData;
	}
	
	/**
	* CDriverEnvironment::RetrieveDriverData - retrieves attached driver resource data into a memory buffer. (depreciated, equivalent to RetrieveDriverResourceData)
	* @param[in] sIdentifier - identifier of the binary data in the driver package.
	* @param[out] DataBufferBuffer - buffer data.
	*/
	void CDriverEnvironment::RetrieveDriverData(const std::string & sIdentifier, std::vector<LibMCEnv_uint8> & DataBufferBuffer)
	{
		LibMCEnv_uint64 elementsNeededDataBuffer = 0;
		LibMCEnv_uint64 elementsWrittenDataBuffer = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_DriverEnvironment_RetrieveDriverData(m_pHandle, sIdentifier.c_str(), 0, &elementsNeededDataBuffer, nullptr));
		DataBufferBuffer.resize((size_t) elementsNeededDataBuffer);
		CheckError(m_pWrapper->m_WrapperTable.m_DriverEnvironment_RetrieveDriverData(m_pHandle, sIdentifier.c_str(), elementsNeededDataBuffer, &elementsWrittenDataBuffer, DataBufferBuffer.data()));
	}
	
	/**
	* CDriverEnvironment::RetrieveDriverResourceData - retrieves attached driver resource data into a memory buffer.
	* @param[in] sIdentifier - identifier of the binary data in the driver package.
	* @param[out] DataBufferBuffer - buffer data.
	*/
	void CDriverEnvironment::RetrieveDriverResourceData(const std::string & sIdentifier, std::vector<LibMCEnv_uint8> & DataBufferBuffer)
	{
		LibMCEnv_uint64 elementsNeededDataBuffer = 0;
		LibMCEnv_uint64 elementsWrittenDataBuffer = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_DriverEnvironment_RetrieveDriverResourceData(m_pHandle, sIdentifier.c_str(), 0, &elementsNeededDataBuffer, nullptr));
		DataBufferBuffer.resize((size_t) elementsNeededDataBuffer);
		CheckError(m_pWrapper->m_WrapperTable.m_DriverEnvironment_RetrieveDriverResourceData(m_pHandle, sIdentifier.c_str(), elementsNeededDataBuffer, &elementsWrittenDataBuffer, DataBufferBuffer.data()));
	}
	
	/**
	* CDriverEnvironment::RetrieveMachineResourceData - retrieves a machine resource data (Plugins Directory) driver data into a memory buffer.
	* @param[in] sIdentifier - identifier of the binary data in the machine resource package.
	* @param[out] DataBufferBuffer - buffer data.
	*/
	void CDriverEnvironment::RetrieveMachineResourceData(const std::string & sIdentifier, std::vector<LibMCEnv_uint8> & DataBufferBuffer)
	{
		LibMCEnv_uint64 elementsNeededDataBuffer = 0;
		LibMCEnv_uint64 elementsWrittenDataBuffer = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_DriverEnvironment_RetrieveMachineResourceData(m_pHandle, sIdentifier.c_str(), 0, &elementsNeededDataBuffer, nullptr));
		DataBufferBuffer.resize((size_t) elementsNeededDataBuffer);
		CheckError(m_pWrapper->m_WrapperTable.m_DriverEnvironment_RetrieveMachineResourceData(m_pHandle, sIdentifier.c_str(), elementsNeededDataBuffer, &elementsWrittenDataBuffer, DataBufferBuffer.data()));
	}
	
	/**
	* CDriverEnvironment::CreateToolpathAccessor - Creates an accessor object for a toolpath. Toolpath MUST have been loaded into memory before.
	* @param[in] sStreamUUID - UUID of the stream.
	* @return Toolpath instance.
	*/
	PToolpathAccessor CDriverEnvironment::CreateToolpathAccessor(const std::string & sStreamUUID)
	{
		LibMCEnvHandle hToolpathInstance = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_DriverEnvironment_CreateToolpathAccessor(m_pHandle, sStreamUUID.c_str(), &hToolpathInstance));
		
		if (!hToolpathInstance) {
			CheckError(LIBMCENV_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CToolpathAccessor>(m_pWrapper, hToolpathInstance);
	}
	
	/**
	* CDriverEnvironment::ParameterNameIsValid - checks if a name is a valid alphanumerical string for parameters.
	* @param[in] sParameterName - Parameter Name
	* @return returns true if the parameter name is a valid name.
	*/
	bool CDriverEnvironment::ParameterNameIsValid(const std::string & sParameterName)
	{
		bool resultNameIsValid = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_DriverEnvironment_ParameterNameIsValid(m_pHandle, sParameterName.c_str(), &resultNameIsValid));
		
		return resultNameIsValid;
	}
	
	/**
	* CDriverEnvironment::RegisterStringParameter - registers a string parameter. Must only be called during driver creation.
	* @param[in] sParameterName - Parameter Name
	* @param[in] sDescription - Parameter Description
	* @param[in] sDefaultValue - default value to set
	*/
	void CDriverEnvironment::RegisterStringParameter(const std::string & sParameterName, const std::string & sDescription, const std::string & sDefaultValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_DriverEnvironment_RegisterStringParameter(m_pHandle, sParameterName.c_str(), sDescription.c_str(), sDefaultValue.c_str()));
	}
	
	/**
	* CDriverEnvironment::RegisterUUIDParameter - registers a uuid parameter. Must only be called during driver creation.
	* @param[in] sParameterName - Parameter Name
	* @param[in] sDescription - Parameter Description
	* @param[in] sDefaultValue - default value to set
	*/
	void CDriverEnvironment::RegisterUUIDParameter(const std::string & sParameterName, const std::string & sDescription, const std::string & sDefaultValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_DriverEnvironment_RegisterUUIDParameter(m_pHandle, sParameterName.c_str(), sDescription.c_str(), sDefaultValue.c_str()));
	}
	
	/**
	* CDriverEnvironment::RegisterDoubleParameter - registers a double parameter. Must only be called during driver creation.
	* @param[in] sParameterName - Parameter Name
	* @param[in] sDescription - Parameter Description
	* @param[in] dDefaultValue - default value to set
	*/
	void CDriverEnvironment::RegisterDoubleParameter(const std::string & sParameterName, const std::string & sDescription, const LibMCEnv_double dDefaultValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_DriverEnvironment_RegisterDoubleParameter(m_pHandle, sParameterName.c_str(), sDescription.c_str(), dDefaultValue));
	}
	
	/**
	* CDriverEnvironment::RegisterIntegerParameter - registers an int parameter. Must only be called during driver creation.
	* @param[in] sParameterName - Parameter Name
	* @param[in] sDescription - Parameter Description
	* @param[in] nDefaultValue - default value to set
	*/
	void CDriverEnvironment::RegisterIntegerParameter(const std::string & sParameterName, const std::string & sDescription, const LibMCEnv_int64 nDefaultValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_DriverEnvironment_RegisterIntegerParameter(m_pHandle, sParameterName.c_str(), sDescription.c_str(), nDefaultValue));
	}
	
	/**
	* CDriverEnvironment::RegisterBoolParameter - registers a bool parameter. Must only be called during driver creation.
	* @param[in] sParameterName - Parameter Name
	* @param[in] sDescription - Parameter Description
	* @param[in] bDefaultValue - default value to set
	*/
	void CDriverEnvironment::RegisterBoolParameter(const std::string & sParameterName, const std::string & sDescription, const bool bDefaultValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_DriverEnvironment_RegisterBoolParameter(m_pHandle, sParameterName.c_str(), sDescription.c_str(), bDefaultValue));
	}
	
	/**
	* CDriverEnvironment::SetStringParameter - sets a string parameter
	* @param[in] sParameterName - Parameter Name
	* @param[in] sValue - Value to set
	*/
	void CDriverEnvironment::SetStringParameter(const std::string & sParameterName, const std::string & sValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_DriverEnvironment_SetStringParameter(m_pHandle, sParameterName.c_str(), sValue.c_str()));
	}
	
	/**
	* CDriverEnvironment::SetUUIDParameter - sets a uuid parameter
	* @param[in] sParameterName - Parameter Name
	* @param[in] sValue - Value to set
	*/
	void CDriverEnvironment::SetUUIDParameter(const std::string & sParameterName, const std::string & sValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_DriverEnvironment_SetUUIDParameter(m_pHandle, sParameterName.c_str(), sValue.c_str()));
	}
	
	/**
	* CDriverEnvironment::SetDoubleParameter - sets a double parameter
	* @param[in] sParameterName - Parameter Name
	* @param[in] dValue - Value to set
	*/
	void CDriverEnvironment::SetDoubleParameter(const std::string & sParameterName, const LibMCEnv_double dValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_DriverEnvironment_SetDoubleParameter(m_pHandle, sParameterName.c_str(), dValue));
	}
	
	/**
	* CDriverEnvironment::SetIntegerParameter - sets an int parameter
	* @param[in] sParameterName - Parameter Name
	* @param[in] nValue - Value to set
	*/
	void CDriverEnvironment::SetIntegerParameter(const std::string & sParameterName, const LibMCEnv_int64 nValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_DriverEnvironment_SetIntegerParameter(m_pHandle, sParameterName.c_str(), nValue));
	}
	
	/**
	* CDriverEnvironment::SetBoolParameter - sets a bool parameter
	* @param[in] sParameterName - Parameter Name
	* @param[in] bValue - Value to set
	*/
	void CDriverEnvironment::SetBoolParameter(const std::string & sParameterName, const bool bValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_DriverEnvironment_SetBoolParameter(m_pHandle, sParameterName.c_str(), bValue));
	}
	
	/**
	* CDriverEnvironment::Sleep - Puts the current instance to sleep for a definite amount of time. MUST be used instead of a blocking sleep call.
	* @param[in] nDelay - Milliseconds to sleeps
	*/
	void CDriverEnvironment::Sleep(const LibMCEnv_uint32 nDelay)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_DriverEnvironment_Sleep(m_pHandle, nDelay));
	}
	
	/**
	* CDriverEnvironment::GetGlobalTimerInMilliseconds - Returns the global timer in milliseconds.
	* @return Timer value in Milliseconds
	*/
	LibMCEnv_uint64 CDriverEnvironment::GetGlobalTimerInMilliseconds()
	{
		LibMCEnv_uint64 resultTimerValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_DriverEnvironment_GetGlobalTimerInMilliseconds(m_pHandle, &resultTimerValue));
		
		return resultTimerValue;
	}
	
	/**
	* CDriverEnvironment::LogMessage - logs a string as message
	* @param[in] sLogString - String to Log
	*/
	void CDriverEnvironment::LogMessage(const std::string & sLogString)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_DriverEnvironment_LogMessage(m_pHandle, sLogString.c_str()));
	}
	
	/**
	* CDriverEnvironment::LogWarning - logs a string as warning
	* @param[in] sLogString - String to Log
	*/
	void CDriverEnvironment::LogWarning(const std::string & sLogString)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_DriverEnvironment_LogWarning(m_pHandle, sLogString.c_str()));
	}
	
	/**
	* CDriverEnvironment::LogInfo - logs a string as info
	* @param[in] sLogString - String to Log
	*/
	void CDriverEnvironment::LogInfo(const std::string & sLogString)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_DriverEnvironment_LogInfo(m_pHandle, sLogString.c_str()));
	}
	
	/**
	* CDriverEnvironment::CreateEmptyImage - creates an empty image object.
	* @param[in] nPixelSizeX - Pixel size in X. MUST be positive.
	* @param[in] nPixelSizeY - Pixel size in Y. MUST be positive.
	* @param[in] dDPIValueX - DPI Value in X. MUST be positive.
	* @param[in] dDPIValueY - DPI Value in Y. MUST be positive.
	* @param[in] ePixelFormat - Pixel format to use.
	* @return Empty image instance.
	*/
	PImageData CDriverEnvironment::CreateEmptyImage(const LibMCEnv_uint32 nPixelSizeX, const LibMCEnv_uint32 nPixelSizeY, const LibMCEnv_double dDPIValueX, const LibMCEnv_double dDPIValueY, const eImagePixelFormat ePixelFormat)
	{
		LibMCEnvHandle hImageDataInstance = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_DriverEnvironment_CreateEmptyImage(m_pHandle, nPixelSizeX, nPixelSizeY, dDPIValueX, dDPIValueY, ePixelFormat, &hImageDataInstance));
		
		if (!hImageDataInstance) {
			CheckError(LIBMCENV_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CImageData>(m_pWrapper, hImageDataInstance);
	}
	
	/**
	* CDriverEnvironment::LoadPNGImage - creates an image object from a PNG data stream.
	* @param[in] PNGDataBuffer - DPI Value in X. MUST be positive.
	* @param[in] dDPIValueX - DPI Value in X. MUST be positive.
	* @param[in] dDPIValueY - DPI Value in Y. MUST be positive.
	* @param[in] ePixelFormat - Pixel format to use. Might lose color and alpha information.
	* @return Image instance containing the PNG image.
	*/
	PImageData CDriverEnvironment::LoadPNGImage(const CInputVector<LibMCEnv_uint8> & PNGDataBuffer, const LibMCEnv_double dDPIValueX, const LibMCEnv_double dDPIValueY, const eImagePixelFormat ePixelFormat)
	{
		LibMCEnvHandle hImageDataInstance = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_DriverEnvironment_LoadPNGImage(m_pHandle, (LibMCEnv_uint64)PNGDataBuffer.size(), PNGDataBuffer.data(), dDPIValueX, dDPIValueY, ePixelFormat, &hImageDataInstance));
		
		if (!hImageDataInstance) {
			CheckError(LIBMCENV_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CImageData>(m_pWrapper, hImageDataInstance);
	}
	
	/**
	 * Method definitions for class CSignalTrigger
	 */
	
	/**
	* CSignalTrigger::CanTrigger - Returns, if signal channel is available.
	* @return Returns true, if signal channel is available.
	*/
	bool CSignalTrigger::CanTrigger()
	{
		bool resultChannelIsAvailable = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_SignalTrigger_CanTrigger(m_pHandle, &resultChannelIsAvailable));
		
		return resultChannelIsAvailable;
	}
	
	/**
	* CSignalTrigger::Trigger - Triggers a signal, if signal channel is available.
	*/
	void CSignalTrigger::Trigger()
	{
		CheckError(m_pWrapper->m_WrapperTable.m_SignalTrigger_Trigger(m_pHandle));
	}
	
	/**
	* CSignalTrigger::WaitForHandling - Waits until the signal is reset.
	* @param[in] nTimeOut - Timeout in Milliseconds. 0 for Immediate return.
	* @return Flag if signal handling has been handled.
	*/
	bool CSignalTrigger::WaitForHandling(const LibMCEnv_uint32 nTimeOut)
	{
		bool resultSuccess = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_SignalTrigger_WaitForHandling(m_pHandle, nTimeOut, &resultSuccess));
		
		return resultSuccess;
	}
	
	/**
	* CSignalTrigger::GetName - Returns the signal name.
	* @return Name Of Signal
	*/
	std::string CSignalTrigger::GetName()
	{
		LibMCEnv_uint32 bytesNeededSignalName = 0;
		LibMCEnv_uint32 bytesWrittenSignalName = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_SignalTrigger_GetName(m_pHandle, 0, &bytesNeededSignalName, nullptr));
		std::vector<char> bufferSignalName(bytesNeededSignalName);
		CheckError(m_pWrapper->m_WrapperTable.m_SignalTrigger_GetName(m_pHandle, bytesNeededSignalName, &bytesWrittenSignalName, &bufferSignalName[0]));
		
		return std::string(&bufferSignalName[0]);
	}
	
	/**
	* CSignalTrigger::GetStateMachine - Returns the signal state machine instance.
	* @return Name Of State Machine
	*/
	std::string CSignalTrigger::GetStateMachine()
	{
		LibMCEnv_uint32 bytesNeededStateMachineName = 0;
		LibMCEnv_uint32 bytesWrittenStateMachineName = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_SignalTrigger_GetStateMachine(m_pHandle, 0, &bytesNeededStateMachineName, nullptr));
		std::vector<char> bufferStateMachineName(bytesNeededStateMachineName);
		CheckError(m_pWrapper->m_WrapperTable.m_SignalTrigger_GetStateMachine(m_pHandle, bytesNeededStateMachineName, &bytesWrittenStateMachineName, &bufferStateMachineName[0]));
		
		return std::string(&bufferStateMachineName[0]);
	}
	
	/**
	* CSignalTrigger::SetString - sets a string value
	* @param[in] sName - Name
	* @param[in] sValue - Value
	*/
	void CSignalTrigger::SetString(const std::string & sName, const std::string & sValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_SignalTrigger_SetString(m_pHandle, sName.c_str(), sValue.c_str()));
	}
	
	/**
	* CSignalTrigger::SetUUID - sets a uuid value
	* @param[in] sName - Name
	* @param[in] sValue - Value
	*/
	void CSignalTrigger::SetUUID(const std::string & sName, const std::string & sValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_SignalTrigger_SetUUID(m_pHandle, sName.c_str(), sValue.c_str()));
	}
	
	/**
	* CSignalTrigger::SetDouble - sets a double
	* @param[in] sName - Name
	* @param[in] dValue - Value
	*/
	void CSignalTrigger::SetDouble(const std::string & sName, const LibMCEnv_double dValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_SignalTrigger_SetDouble(m_pHandle, sName.c_str(), dValue));
	}
	
	/**
	* CSignalTrigger::SetInteger - sets an int.
	* @param[in] sName - Name
	* @param[in] nValue - Value
	*/
	void CSignalTrigger::SetInteger(const std::string & sName, const LibMCEnv_int64 nValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_SignalTrigger_SetInteger(m_pHandle, sName.c_str(), nValue));
	}
	
	/**
	* CSignalTrigger::SetBool - sets a bool
	* @param[in] sName - Name
	* @param[in] bValue - Value
	*/
	void CSignalTrigger::SetBool(const std::string & sName, const bool bValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_SignalTrigger_SetBool(m_pHandle, sName.c_str(), bValue));
	}
	
	/**
	* CSignalTrigger::GetStringResult - returns a string value of the result
	* @param[in] sName - Name
	* @return Value
	*/
	std::string CSignalTrigger::GetStringResult(const std::string & sName)
	{
		LibMCEnv_uint32 bytesNeededValue = 0;
		LibMCEnv_uint32 bytesWrittenValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_SignalTrigger_GetStringResult(m_pHandle, sName.c_str(), 0, &bytesNeededValue, nullptr));
		std::vector<char> bufferValue(bytesNeededValue);
		CheckError(m_pWrapper->m_WrapperTable.m_SignalTrigger_GetStringResult(m_pHandle, sName.c_str(), bytesNeededValue, &bytesWrittenValue, &bufferValue[0]));
		
		return std::string(&bufferValue[0]);
	}
	
	/**
	* CSignalTrigger::GetUUIDResult - returns a uuid value of the result
	* @param[in] sName - Name
	* @return Value
	*/
	std::string CSignalTrigger::GetUUIDResult(const std::string & sName)
	{
		LibMCEnv_uint32 bytesNeededValue = 0;
		LibMCEnv_uint32 bytesWrittenValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_SignalTrigger_GetUUIDResult(m_pHandle, sName.c_str(), 0, &bytesNeededValue, nullptr));
		std::vector<char> bufferValue(bytesNeededValue);
		CheckError(m_pWrapper->m_WrapperTable.m_SignalTrigger_GetUUIDResult(m_pHandle, sName.c_str(), bytesNeededValue, &bytesWrittenValue, &bufferValue[0]));
		
		return std::string(&bufferValue[0]);
	}
	
	/**
	* CSignalTrigger::GetDoubleResult - returns a string value of the result
	* @param[in] sName - Name
	* @return Value
	*/
	LibMCEnv_double CSignalTrigger::GetDoubleResult(const std::string & sName)
	{
		LibMCEnv_double resultValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_SignalTrigger_GetDoubleResult(m_pHandle, sName.c_str(), &resultValue));
		
		return resultValue;
	}
	
	/**
	* CSignalTrigger::GetIntegerResult - returns an int value of the result.
	* @param[in] sName - Name
	* @return Value
	*/
	LibMCEnv_int64 CSignalTrigger::GetIntegerResult(const std::string & sName)
	{
		LibMCEnv_int64 resultValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_SignalTrigger_GetIntegerResult(m_pHandle, sName.c_str(), &resultValue));
		
		return resultValue;
	}
	
	/**
	* CSignalTrigger::GetBoolResult - returns a bool value of the result.
	* @param[in] sName - Name
	* @return Value
	*/
	bool CSignalTrigger::GetBoolResult(const std::string & sName)
	{
		bool resultValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_SignalTrigger_GetBoolResult(m_pHandle, sName.c_str(), &resultValue));
		
		return resultValue;
	}
	
	/**
	 * Method definitions for class CSignalHandler
	 */
	
	/**
	* CSignalHandler::SignalHandled - Marks signal as handled and resets signal channel.
	*/
	void CSignalHandler::SignalHandled()
	{
		CheckError(m_pWrapper->m_WrapperTable.m_SignalHandler_SignalHandled(m_pHandle));
	}
	
	/**
	* CSignalHandler::GetName - Returns the signal name.
	* @return Name Of Signal
	*/
	std::string CSignalHandler::GetName()
	{
		LibMCEnv_uint32 bytesNeededSignalName = 0;
		LibMCEnv_uint32 bytesWrittenSignalName = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_SignalHandler_GetName(m_pHandle, 0, &bytesNeededSignalName, nullptr));
		std::vector<char> bufferSignalName(bytesNeededSignalName);
		CheckError(m_pWrapper->m_WrapperTable.m_SignalHandler_GetName(m_pHandle, bytesNeededSignalName, &bytesWrittenSignalName, &bufferSignalName[0]));
		
		return std::string(&bufferSignalName[0]);
	}
	
	/**
	* CSignalHandler::GetSignalID - Returns the signal id. Depreciated.
	* @return Signal Identifier
	*/
	std::string CSignalHandler::GetSignalID()
	{
		LibMCEnv_uint32 bytesNeededSignalID = 0;
		LibMCEnv_uint32 bytesWrittenSignalID = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_SignalHandler_GetSignalID(m_pHandle, 0, &bytesNeededSignalID, nullptr));
		std::vector<char> bufferSignalID(bytesNeededSignalID);
		CheckError(m_pWrapper->m_WrapperTable.m_SignalHandler_GetSignalID(m_pHandle, bytesNeededSignalID, &bytesWrittenSignalID, &bufferSignalID[0]));
		
		return std::string(&bufferSignalID[0]);
	}
	
	/**
	* CSignalHandler::GetSignalUUID - Returns the signal uuid. Identical to GetSignalID.
	* @return Signal Identifier
	*/
	std::string CSignalHandler::GetSignalUUID()
	{
		LibMCEnv_uint32 bytesNeededSignalUUID = 0;
		LibMCEnv_uint32 bytesWrittenSignalUUID = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_SignalHandler_GetSignalUUID(m_pHandle, 0, &bytesNeededSignalUUID, nullptr));
		std::vector<char> bufferSignalUUID(bytesNeededSignalUUID);
		CheckError(m_pWrapper->m_WrapperTable.m_SignalHandler_GetSignalUUID(m_pHandle, bytesNeededSignalUUID, &bytesWrittenSignalUUID, &bufferSignalUUID[0]));
		
		return std::string(&bufferSignalUUID[0]);
	}
	
	/**
	* CSignalHandler::GetStateMachine - Returns the signal state machine instance.
	* @return Name Of State Machine
	*/
	std::string CSignalHandler::GetStateMachine()
	{
		LibMCEnv_uint32 bytesNeededStateMachineName = 0;
		LibMCEnv_uint32 bytesWrittenStateMachineName = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_SignalHandler_GetStateMachine(m_pHandle, 0, &bytesNeededStateMachineName, nullptr));
		std::vector<char> bufferStateMachineName(bytesNeededStateMachineName);
		CheckError(m_pWrapper->m_WrapperTable.m_SignalHandler_GetStateMachine(m_pHandle, bytesNeededStateMachineName, &bytesWrittenStateMachineName, &bufferStateMachineName[0]));
		
		return std::string(&bufferStateMachineName[0]);
	}
	
	/**
	* CSignalHandler::GetString - gets a string value
	* @param[in] sName - Name
	* @return Value
	*/
	std::string CSignalHandler::GetString(const std::string & sName)
	{
		LibMCEnv_uint32 bytesNeededValue = 0;
		LibMCEnv_uint32 bytesWrittenValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_SignalHandler_GetString(m_pHandle, sName.c_str(), 0, &bytesNeededValue, nullptr));
		std::vector<char> bufferValue(bytesNeededValue);
		CheckError(m_pWrapper->m_WrapperTable.m_SignalHandler_GetString(m_pHandle, sName.c_str(), bytesNeededValue, &bytesWrittenValue, &bufferValue[0]));
		
		return std::string(&bufferValue[0]);
	}
	
	/**
	* CSignalHandler::GetUUID - gets a uuid value
	* @param[in] sName - Name
	* @return Value
	*/
	std::string CSignalHandler::GetUUID(const std::string & sName)
	{
		LibMCEnv_uint32 bytesNeededValue = 0;
		LibMCEnv_uint32 bytesWrittenValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_SignalHandler_GetUUID(m_pHandle, sName.c_str(), 0, &bytesNeededValue, nullptr));
		std::vector<char> bufferValue(bytesNeededValue);
		CheckError(m_pWrapper->m_WrapperTable.m_SignalHandler_GetUUID(m_pHandle, sName.c_str(), bytesNeededValue, &bytesWrittenValue, &bufferValue[0]));
		
		return std::string(&bufferValue[0]);
	}
	
	/**
	* CSignalHandler::GetDouble - gets a double
	* @param[in] sName - Name
	* @return Value
	*/
	LibMCEnv_double CSignalHandler::GetDouble(const std::string & sName)
	{
		LibMCEnv_double resultValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_SignalHandler_GetDouble(m_pHandle, sName.c_str(), &resultValue));
		
		return resultValue;
	}
	
	/**
	* CSignalHandler::GetInteger - gets an int.
	* @param[in] sName - Name
	* @return Value
	*/
	LibMCEnv_int64 CSignalHandler::GetInteger(const std::string & sName)
	{
		LibMCEnv_int64 resultValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_SignalHandler_GetInteger(m_pHandle, sName.c_str(), &resultValue));
		
		return resultValue;
	}
	
	/**
	* CSignalHandler::GetBool - gets a bool
	* @param[in] sName - Name
	* @return Value
	*/
	bool CSignalHandler::GetBool(const std::string & sName)
	{
		bool resultValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_SignalHandler_GetBool(m_pHandle, sName.c_str(), &resultValue));
		
		return resultValue;
	}
	
	/**
	* CSignalHandler::SetStringResult - returns a string value of the result
	* @param[in] sName - Name
	* @param[in] sValue - Value
	*/
	void CSignalHandler::SetStringResult(const std::string & sName, const std::string & sValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_SignalHandler_SetStringResult(m_pHandle, sName.c_str(), sValue.c_str()));
	}
	
	/**
	* CSignalHandler::SetUUIDResult - returns a uuid value of the result
	* @param[in] sName - Name
	* @param[in] sValue - Value
	*/
	void CSignalHandler::SetUUIDResult(const std::string & sName, const std::string & sValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_SignalHandler_SetUUIDResult(m_pHandle, sName.c_str(), sValue.c_str()));
	}
	
	/**
	* CSignalHandler::SetDoubleResult - returns a string value of the result
	* @param[in] sName - Name
	* @param[in] dValue - Value
	*/
	void CSignalHandler::SetDoubleResult(const std::string & sName, const LibMCEnv_double dValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_SignalHandler_SetDoubleResult(m_pHandle, sName.c_str(), dValue));
	}
	
	/**
	* CSignalHandler::SetIntegerResult - sets an int.
	* @param[in] sName - Name
	* @param[in] nValue - Value
	*/
	void CSignalHandler::SetIntegerResult(const std::string & sName, const LibMCEnv_int64 nValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_SignalHandler_SetIntegerResult(m_pHandle, sName.c_str(), nValue));
	}
	
	/**
	* CSignalHandler::SetBoolResult - sets a bool
	* @param[in] sName - Name
	* @param[in] bValue - Value
	*/
	void CSignalHandler::SetBoolResult(const std::string & sName, const bool bValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_SignalHandler_SetBoolResult(m_pHandle, sName.c_str(), bValue));
	}
	
	/**
	 * Method definitions for class CStateEnvironment
	 */
	
	/**
	* CStateEnvironment::GetMachineState - Retrieves the machine state
	* @param[in] sMachineInstance - State machine instance name
	* @return Name of current state
	*/
	std::string CStateEnvironment::GetMachineState(const std::string & sMachineInstance)
	{
		LibMCEnv_uint32 bytesNeededStateName = 0;
		LibMCEnv_uint32 bytesWrittenStateName = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_StateEnvironment_GetMachineState(m_pHandle, sMachineInstance.c_str(), 0, &bytesNeededStateName, nullptr));
		std::vector<char> bufferStateName(bytesNeededStateName);
		CheckError(m_pWrapper->m_WrapperTable.m_StateEnvironment_GetMachineState(m_pHandle, sMachineInstance.c_str(), bytesNeededStateName, &bytesWrittenStateName, &bufferStateName[0]));
		
		return std::string(&bufferStateName[0]);
	}
	
	/**
	* CStateEnvironment::PrepareSignal - prepares a signal object to trigger later.
	* @param[in] sMachineInstance - State machine instance name
	* @param[in] sSignalName - Name Of signal channel.
	* @return Signal trigger object.
	*/
	PSignalTrigger CStateEnvironment::PrepareSignal(const std::string & sMachineInstance, const std::string & sSignalName)
	{
		LibMCEnvHandle hSignalInstance = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_StateEnvironment_PrepareSignal(m_pHandle, sMachineInstance.c_str(), sSignalName.c_str(), &hSignalInstance));
		
		if (!hSignalInstance) {
			CheckError(LIBMCENV_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CSignalTrigger>(m_pWrapper, hSignalInstance);
	}
	
	/**
	* CStateEnvironment::WaitForSignal - Waits for a signal for a certain amount of time.
	* @param[in] sSignalName - Name Of Signal
	* @param[in] nTimeOut - Timeout in Milliseconds. 0 for Immediate return.
	* @param[out] pHandlerInstance - Signal object. If Success is false, the Signal Handler Object will be null.
	* @return Signal has been triggered
	*/
	bool CStateEnvironment::WaitForSignal(const std::string & sSignalName, const LibMCEnv_uint32 nTimeOut, PSignalHandler & pHandlerInstance)
	{
		LibMCEnvHandle hHandlerInstance = nullptr;
		bool resultSuccess = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_StateEnvironment_WaitForSignal(m_pHandle, sSignalName.c_str(), nTimeOut, &hHandlerInstance, &resultSuccess));
		if (hHandlerInstance) {
			pHandlerInstance = std::make_shared<CSignalHandler>(m_pWrapper, hHandlerInstance);
		} else {
			pHandlerInstance = nullptr;
		}
		
		return resultSuccess;
	}
	
	/**
	* CStateEnvironment::GetUnhandledSignal - Retrieves an unhandled signal By signal type name.
	* @param[in] sSignalTypeName - Name Of Signal to be returned
	* @return Signal object. If no signal has been found the signal handler object will be null.
	*/
	PSignalHandler CStateEnvironment::GetUnhandledSignal(const std::string & sSignalTypeName)
	{
		LibMCEnvHandle hHandlerInstance = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_StateEnvironment_GetUnhandledSignal(m_pHandle, sSignalTypeName.c_str(), &hHandlerInstance));
		
		if (hHandlerInstance) {
			return std::make_shared<CSignalHandler>(m_pWrapper, hHandlerInstance);
		} else {
			return nullptr;
		}
	}
	
	/**
	* CStateEnvironment::GetUnhandledSignalByUUID - retrieves an unhandled signal from the current state machine by UUID.
	* @param[in] sUUID - Name
	* @param[in] bMustExist - The call fails if MustExist is true and not signal with UUID does exist or a signal with UUID has been handled already.
	* @return Signal handler instance. Returns null, if signal does not exist.
	*/
	PSignalHandler CStateEnvironment::GetUnhandledSignalByUUID(const std::string & sUUID, const bool bMustExist)
	{
		LibMCEnvHandle hHandler = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_StateEnvironment_GetUnhandledSignalByUUID(m_pHandle, sUUID.c_str(), bMustExist, &hHandler));
		
		if (hHandler) {
			return std::make_shared<CSignalHandler>(m_pWrapper, hHandler);
		} else {
			return nullptr;
		}
	}
	
	/**
	* CStateEnvironment::GetDriverLibrary - Returns the driver type and library lookup for a specific registered driver.
	* @param[in] sDriverName - Name identifier of the driver.
	* @param[out] sDriverType - returns type identifier of the driver.
	* @param[out] pDriverLookup - GetProcAddress Handle of the driver.
	*/
	void CStateEnvironment::GetDriverLibrary(const std::string & sDriverName, std::string & sDriverType, LibMCEnv_pvoid & pDriverLookup)
	{
		LibMCEnv_uint32 bytesNeededDriverType = 0;
		LibMCEnv_uint32 bytesWrittenDriverType = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_StateEnvironment_GetDriverLibrary(m_pHandle, sDriverName.c_str(), 0, &bytesNeededDriverType, nullptr, &pDriverLookup));
		std::vector<char> bufferDriverType(bytesNeededDriverType);
		CheckError(m_pWrapper->m_WrapperTable.m_StateEnvironment_GetDriverLibrary(m_pHandle, sDriverName.c_str(), bytesNeededDriverType, &bytesWrittenDriverType, &bufferDriverType[0], &pDriverLookup));
		sDriverType = std::string(&bufferDriverType[0]);
	}
	
	/**
	* CStateEnvironment::CreateDriverAccess - Accesses and locks a driver for the execution of the current state.
	* @param[in] sDriverName - Name identifier of the driver.
	* @param[out] pDriverHandle - Handle of the driver.
	*/
	void CStateEnvironment::CreateDriverAccess(const std::string & sDriverName, LibMCEnv_pvoid & pDriverHandle)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_StateEnvironment_CreateDriverAccess(m_pHandle, sDriverName.c_str(), &pDriverHandle));
	}
	
	/**
	* CStateEnvironment::GetBuildJob - Returns a instance of a build object.
	* @param[in] sBuildUUID - UUID of the build entity.
	* @return Build instance
	*/
	PBuild CStateEnvironment::GetBuildJob(const std::string & sBuildUUID)
	{
		LibMCEnvHandle hBuildInstance = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_StateEnvironment_GetBuildJob(m_pHandle, sBuildUUID.c_str(), &hBuildInstance));
		
		if (!hBuildInstance) {
			CheckError(LIBMCENV_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CBuild>(m_pWrapper, hBuildInstance);
	}
	
	/**
	* CStateEnvironment::UnloadAllToolpathes - unloads all toolpath in memory to clean up
	*/
	void CStateEnvironment::UnloadAllToolpathes()
	{
		CheckError(m_pWrapper->m_WrapperTable.m_StateEnvironment_UnloadAllToolpathes(m_pHandle));
	}
	
	/**
	* CStateEnvironment::SetNextState - sets the next state
	* @param[in] sStateName - Name of next state
	*/
	void CStateEnvironment::SetNextState(const std::string & sStateName)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_StateEnvironment_SetNextState(m_pHandle, sStateName.c_str()));
	}
	
	/**
	* CStateEnvironment::LogMessage - logs a string as message
	* @param[in] sLogString - String to Log
	*/
	void CStateEnvironment::LogMessage(const std::string & sLogString)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_StateEnvironment_LogMessage(m_pHandle, sLogString.c_str()));
	}
	
	/**
	* CStateEnvironment::LogWarning - logs a string as warning
	* @param[in] sLogString - String to Log
	*/
	void CStateEnvironment::LogWarning(const std::string & sLogString)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_StateEnvironment_LogWarning(m_pHandle, sLogString.c_str()));
	}
	
	/**
	* CStateEnvironment::LogInfo - logs a string as info
	* @param[in] sLogString - String to Log
	*/
	void CStateEnvironment::LogInfo(const std::string & sLogString)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_StateEnvironment_LogInfo(m_pHandle, sLogString.c_str()));
	}
	
	/**
	* CStateEnvironment::Sleep - Puts the current instance to sleep for a definite amount of time. MUST be used instead of a blocking sleep call.
	* @param[in] nDelay - Milliseconds to sleeps
	*/
	void CStateEnvironment::Sleep(const LibMCEnv_uint32 nDelay)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_StateEnvironment_Sleep(m_pHandle, nDelay));
	}
	
	/**
	* CStateEnvironment::CheckForTermination - checks environment for termination signal. MUST be called frequently in longer-running operations.
	* @return Returns if termination shall appear
	*/
	bool CStateEnvironment::CheckForTermination()
	{
		bool resultShallTerminate = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_StateEnvironment_CheckForTermination(m_pHandle, &resultShallTerminate));
		
		return resultShallTerminate;
	}
	
	/**
	* CStateEnvironment::StoreSignal - DEPRECIATED: stores a signal handler in the current state machine
	* @param[in] sName - Name
	* @param[in] pHandler - Signal handler to store.
	*/
	void CStateEnvironment::StoreSignal(const std::string & sName, classParam<CSignalHandler> pHandler)
	{
		LibMCEnvHandle hHandler = pHandler.GetHandle();
		CheckError(m_pWrapper->m_WrapperTable.m_StateEnvironment_StoreSignal(m_pHandle, sName.c_str(), hHandler));
	}
	
	/**
	* CStateEnvironment::RetrieveSignal - DEPRECIATED: retrieves a signal handler from the current state machine. Fails if value has not been stored before or signal has been already handled.
	* @param[in] sName - Name
	* @return Signal handler instance.
	*/
	PSignalHandler CStateEnvironment::RetrieveSignal(const std::string & sName)
	{
		LibMCEnvHandle hHandler = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_StateEnvironment_RetrieveSignal(m_pHandle, sName.c_str(), &hHandler));
		
		if (!hHandler) {
			CheckError(LIBMCENV_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CSignalHandler>(m_pWrapper, hHandler);
	}
	
	/**
	* CStateEnvironment::ClearStoredValue - DEPRECIATED: deletes a value from the data store.
	* @param[in] sName - Name
	*/
	void CStateEnvironment::ClearStoredValue(const std::string & sName)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_StateEnvironment_ClearStoredValue(m_pHandle, sName.c_str()));
	}
	
	/**
	* CStateEnvironment::SetStringParameter - sets a string parameter
	* @param[in] sParameterGroup - Parameter Group
	* @param[in] sParameterName - Parameter Name
	* @param[in] sValue - Value to set
	*/
	void CStateEnvironment::SetStringParameter(const std::string & sParameterGroup, const std::string & sParameterName, const std::string & sValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_StateEnvironment_SetStringParameter(m_pHandle, sParameterGroup.c_str(), sParameterName.c_str(), sValue.c_str()));
	}
	
	/**
	* CStateEnvironment::SetUUIDParameter - sets a uuid parameter
	* @param[in] sParameterGroup - Parameter Group
	* @param[in] sParameterName - Parameter Name
	* @param[in] sValue - Value to set
	*/
	void CStateEnvironment::SetUUIDParameter(const std::string & sParameterGroup, const std::string & sParameterName, const std::string & sValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_StateEnvironment_SetUUIDParameter(m_pHandle, sParameterGroup.c_str(), sParameterName.c_str(), sValue.c_str()));
	}
	
	/**
	* CStateEnvironment::SetDoubleParameter - sets a double parameter
	* @param[in] sParameterGroup - Parameter Group
	* @param[in] sParameterName - Parameter Name
	* @param[in] dValue - Value to set
	*/
	void CStateEnvironment::SetDoubleParameter(const std::string & sParameterGroup, const std::string & sParameterName, const LibMCEnv_double dValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_StateEnvironment_SetDoubleParameter(m_pHandle, sParameterGroup.c_str(), sParameterName.c_str(), dValue));
	}
	
	/**
	* CStateEnvironment::SetIntegerParameter - sets an int parameter
	* @param[in] sParameterGroup - Parameter Group
	* @param[in] sParameterName - Parameter Name
	* @param[in] nValue - Value to set
	*/
	void CStateEnvironment::SetIntegerParameter(const std::string & sParameterGroup, const std::string & sParameterName, const LibMCEnv_int64 nValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_StateEnvironment_SetIntegerParameter(m_pHandle, sParameterGroup.c_str(), sParameterName.c_str(), nValue));
	}
	
	/**
	* CStateEnvironment::SetBoolParameter - sets a bool parameter
	* @param[in] sParameterGroup - Parameter Group
	* @param[in] sParameterName - Parameter Name
	* @param[in] bValue - Value to set
	*/
	void CStateEnvironment::SetBoolParameter(const std::string & sParameterGroup, const std::string & sParameterName, const bool bValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_StateEnvironment_SetBoolParameter(m_pHandle, sParameterGroup.c_str(), sParameterName.c_str(), bValue));
	}
	
	/**
	* CStateEnvironment::GetStringParameter - returns a string parameter
	* @param[in] sParameterGroup - Parameter Group
	* @param[in] sParameterName - Parameter Name
	* @return Value to set
	*/
	std::string CStateEnvironment::GetStringParameter(const std::string & sParameterGroup, const std::string & sParameterName)
	{
		LibMCEnv_uint32 bytesNeededValue = 0;
		LibMCEnv_uint32 bytesWrittenValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_StateEnvironment_GetStringParameter(m_pHandle, sParameterGroup.c_str(), sParameterName.c_str(), 0, &bytesNeededValue, nullptr));
		std::vector<char> bufferValue(bytesNeededValue);
		CheckError(m_pWrapper->m_WrapperTable.m_StateEnvironment_GetStringParameter(m_pHandle, sParameterGroup.c_str(), sParameterName.c_str(), bytesNeededValue, &bytesWrittenValue, &bufferValue[0]));
		
		return std::string(&bufferValue[0]);
	}
	
	/**
	* CStateEnvironment::GetUUIDParameter - returns a uuid parameter
	* @param[in] sParameterGroup - Parameter Group
	* @param[in] sParameterName - Parameter Name
	* @return Value to set
	*/
	std::string CStateEnvironment::GetUUIDParameter(const std::string & sParameterGroup, const std::string & sParameterName)
	{
		LibMCEnv_uint32 bytesNeededValue = 0;
		LibMCEnv_uint32 bytesWrittenValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_StateEnvironment_GetUUIDParameter(m_pHandle, sParameterGroup.c_str(), sParameterName.c_str(), 0, &bytesNeededValue, nullptr));
		std::vector<char> bufferValue(bytesNeededValue);
		CheckError(m_pWrapper->m_WrapperTable.m_StateEnvironment_GetUUIDParameter(m_pHandle, sParameterGroup.c_str(), sParameterName.c_str(), bytesNeededValue, &bytesWrittenValue, &bufferValue[0]));
		
		return std::string(&bufferValue[0]);
	}
	
	/**
	* CStateEnvironment::GetDoubleParameter - returns a double parameter
	* @param[in] sParameterGroup - Parameter Group
	* @param[in] sParameterName - Parameter Name
	* @return Value to set
	*/
	LibMCEnv_double CStateEnvironment::GetDoubleParameter(const std::string & sParameterGroup, const std::string & sParameterName)
	{
		LibMCEnv_double resultValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_StateEnvironment_GetDoubleParameter(m_pHandle, sParameterGroup.c_str(), sParameterName.c_str(), &resultValue));
		
		return resultValue;
	}
	
	/**
	* CStateEnvironment::GetIntegerParameter - returns an int parameter
	* @param[in] sParameterGroup - Parameter Group
	* @param[in] sParameterName - Parameter Name
	* @return Value to set
	*/
	LibMCEnv_int64 CStateEnvironment::GetIntegerParameter(const std::string & sParameterGroup, const std::string & sParameterName)
	{
		LibMCEnv_int64 resultValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_StateEnvironment_GetIntegerParameter(m_pHandle, sParameterGroup.c_str(), sParameterName.c_str(), &resultValue));
		
		return resultValue;
	}
	
	/**
	* CStateEnvironment::GetBoolParameter - returns a bool parameter
	* @param[in] sParameterGroup - Parameter Group
	* @param[in] sParameterName - Parameter Name
	* @return Value to set
	*/
	bool CStateEnvironment::GetBoolParameter(const std::string & sParameterGroup, const std::string & sParameterName)
	{
		bool resultValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_StateEnvironment_GetBoolParameter(m_pHandle, sParameterGroup.c_str(), sParameterName.c_str(), &resultValue));
		
		return resultValue;
	}
	
	/**
	* CStateEnvironment::LoadResourceData - loads a plugin resource file into memory.
	* @param[in] sResourceName - Name of the resource.
	* @param[out] ResourceDataBuffer - Resource Data Buffer.
	*/
	void CStateEnvironment::LoadResourceData(const std::string & sResourceName, std::vector<LibMCEnv_uint8> & ResourceDataBuffer)
	{
		LibMCEnv_uint64 elementsNeededResourceData = 0;
		LibMCEnv_uint64 elementsWrittenResourceData = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_StateEnvironment_LoadResourceData(m_pHandle, sResourceName.c_str(), 0, &elementsNeededResourceData, nullptr));
		ResourceDataBuffer.resize((size_t) elementsNeededResourceData);
		CheckError(m_pWrapper->m_WrapperTable.m_StateEnvironment_LoadResourceData(m_pHandle, sResourceName.c_str(), elementsNeededResourceData, &elementsWrittenResourceData, ResourceDataBuffer.data()));
	}
	
	/**
	* CStateEnvironment::LoadResourceString - loads a plugin resource file into a string. Fails if content is not a valid UTF8 string.
	* @param[in] sResourceName - Name of the resource.
	* @return Resource Data String.
	*/
	std::string CStateEnvironment::LoadResourceString(const std::string & sResourceName)
	{
		LibMCEnv_uint32 bytesNeededResourceData = 0;
		LibMCEnv_uint32 bytesWrittenResourceData = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_StateEnvironment_LoadResourceString(m_pHandle, sResourceName.c_str(), 0, &bytesNeededResourceData, nullptr));
		std::vector<char> bufferResourceData(bytesNeededResourceData);
		CheckError(m_pWrapper->m_WrapperTable.m_StateEnvironment_LoadResourceString(m_pHandle, sResourceName.c_str(), bytesNeededResourceData, &bytesWrittenResourceData, &bufferResourceData[0]));
		
		return std::string(&bufferResourceData[0]);
	}
	
	/**
	* CStateEnvironment::CreateEmptyImage - creates an empty image object.
	* @param[in] nPixelSizeX - Pixel size in X. MUST be positive.
	* @param[in] nPixelSizeY - Pixel size in Y. MUST be positive.
	* @param[in] dDPIValueX - DPI Value in X. MUST be positive.
	* @param[in] dDPIValueY - DPI Value in Y. MUST be positive.
	* @param[in] ePixelFormat - Pixel format to use.
	* @return Empty image instance.
	*/
	PImageData CStateEnvironment::CreateEmptyImage(const LibMCEnv_uint32 nPixelSizeX, const LibMCEnv_uint32 nPixelSizeY, const LibMCEnv_double dDPIValueX, const LibMCEnv_double dDPIValueY, const eImagePixelFormat ePixelFormat)
	{
		LibMCEnvHandle hImageDataInstance = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_StateEnvironment_CreateEmptyImage(m_pHandle, nPixelSizeX, nPixelSizeY, dDPIValueX, dDPIValueY, ePixelFormat, &hImageDataInstance));
		
		if (!hImageDataInstance) {
			CheckError(LIBMCENV_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CImageData>(m_pWrapper, hImageDataInstance);
	}
	
	/**
	* CStateEnvironment::LoadPNGImage - creates an image object from a PNG data stream.
	* @param[in] PNGDataBuffer - DPI Value in X. MUST be positive.
	* @param[in] dDPIValueX - DPI Value in X. MUST be positive.
	* @param[in] dDPIValueY - DPI Value in Y. MUST be positive.
	* @param[in] ePixelFormat - Pixel format to use. Might lose color and alpha information.
	* @return Image instance containing the PNG image.
	*/
	PImageData CStateEnvironment::LoadPNGImage(const CInputVector<LibMCEnv_uint8> & PNGDataBuffer, const LibMCEnv_double dDPIValueX, const LibMCEnv_double dDPIValueY, const eImagePixelFormat ePixelFormat)
	{
		LibMCEnvHandle hImageDataInstance = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_StateEnvironment_LoadPNGImage(m_pHandle, (LibMCEnv_uint64)PNGDataBuffer.size(), PNGDataBuffer.data(), dDPIValueX, dDPIValueY, ePixelFormat, &hImageDataInstance));
		
		if (!hImageDataInstance) {
			CheckError(LIBMCENV_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CImageData>(m_pWrapper, hImageDataInstance);
	}
	
	/**
	* CStateEnvironment::GetGlobalTimerInMilliseconds - Returns the global timer in milliseconds.
	* @return Timer value in Milliseconds
	*/
	LibMCEnv_uint64 CStateEnvironment::GetGlobalTimerInMilliseconds()
	{
		LibMCEnv_uint64 resultTimerValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_StateEnvironment_GetGlobalTimerInMilliseconds(m_pHandle, &resultTimerValue));
		
		return resultTimerValue;
	}
	
	/**
	* CStateEnvironment::GetTestEnvironment - Returns a test environment instance.
	* @return Test Environment Instance
	*/
	PTestEnvironment CStateEnvironment::GetTestEnvironment()
	{
		LibMCEnvHandle hTestEnvironment = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_StateEnvironment_GetTestEnvironment(m_pHandle, &hTestEnvironment));
		
		if (!hTestEnvironment) {
			CheckError(LIBMCENV_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CTestEnvironment>(m_pWrapper, hTestEnvironment);
	}
	
	/**
	* CStateEnvironment::CreateXMLDocument - creates an empty XML Document.
	* @param[in] sRootNodeName - Name of the root node. MUST be a valid XML Node Name string.
	* @param[in] sDefaultNamespace - Default namespace of the document. MUST be a valid XML namespace string.
	* @return XML Document Instance.
	*/
	PXMLDocument CStateEnvironment::CreateXMLDocument(const std::string & sRootNodeName, const std::string & sDefaultNamespace)
	{
		LibMCEnvHandle hXMLDocument = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_StateEnvironment_CreateXMLDocument(m_pHandle, sRootNodeName.c_str(), sDefaultNamespace.c_str(), &hXMLDocument));
		
		if (!hXMLDocument) {
			CheckError(LIBMCENV_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CXMLDocument>(m_pWrapper, hXMLDocument);
	}
	
	/**
	* CStateEnvironment::ParseXMLString - parses an XML String and returns an XML Document instance. Throws an error if XML is malformatted.
	* @param[in] sXMLString - XML String.
	* @return XML Document Instance.
	*/
	PXMLDocument CStateEnvironment::ParseXMLString(const std::string & sXMLString)
	{
		LibMCEnvHandle hXMLDocument = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_StateEnvironment_ParseXMLString(m_pHandle, sXMLString.c_str(), &hXMLDocument));
		
		if (!hXMLDocument) {
			CheckError(LIBMCENV_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CXMLDocument>(m_pWrapper, hXMLDocument);
	}
	
	/**
	* CStateEnvironment::ParseXMLData - parses a XML stored in a byte array and returns an XML Document instance. . Throws an error if XML is malformatted.
	* @param[in] XMLDataBuffer - XML Binary data.
	* @return XML Document Instance.
	*/
	PXMLDocument CStateEnvironment::ParseXMLData(const CInputVector<LibMCEnv_uint8> & XMLDataBuffer)
	{
		LibMCEnvHandle hXMLDocument = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_StateEnvironment_ParseXMLData(m_pHandle, (LibMCEnv_uint64)XMLDataBuffer.size(), XMLDataBuffer.data(), &hXMLDocument));
		
		if (!hXMLDocument) {
			CheckError(LIBMCENV_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CXMLDocument>(m_pWrapper, hXMLDocument);
	}
	
	/**
	 * Method definitions for class CUIEnvironment
	 */
	
	/**
	* CUIEnvironment::ActivateModalDialog - activates a modal dialog on the client.
	* @param[in] sDialogName - Name of the dialog to activate.
	*/
	void CUIEnvironment::ActivateModalDialog(const std::string & sDialogName)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_UIEnvironment_ActivateModalDialog(m_pHandle, sDialogName.c_str()));
	}
	
	/**
	* CUIEnvironment::CloseModalDialog - closes the active modal dialog on the client.
	*/
	void CUIEnvironment::CloseModalDialog()
	{
		CheckError(m_pWrapper->m_WrapperTable.m_UIEnvironment_CloseModalDialog(m_pHandle));
	}
	
	/**
	* CUIEnvironment::ActivatePage - changes the current page on the client.
	* @param[in] sPageName - Name of the page to activate.
	*/
	void CUIEnvironment::ActivatePage(const std::string & sPageName)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_UIEnvironment_ActivatePage(m_pHandle, sPageName.c_str()));
	}
	
	/**
	* CUIEnvironment::LogOut - Logs out the client session.
	*/
	void CUIEnvironment::LogOut()
	{
		CheckError(m_pWrapper->m_WrapperTable.m_UIEnvironment_LogOut(m_pHandle));
	}
	
	/**
	* CUIEnvironment::ShowHint - Shows a hint message in the user interface.
	* @param[in] sHint - Hint to show.
	* @param[in] nTimeoutInMS - How many milliseconds the snackbar should be shown.
	*/
	void CUIEnvironment::ShowHint(const std::string & sHint, const LibMCEnv_uint32 nTimeoutInMS)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_UIEnvironment_ShowHint(m_pHandle, sHint.c_str(), nTimeoutInMS));
	}
	
	/**
	* CUIEnvironment::ShowHintColored - Shows a hint message in the user interface in a certain color.
	* @param[in] sHint - Hint to show.
	* @param[in] nTimeoutInMS - How many milliseconds the snackbar should be shown.
	* @param[in] Color - Background color of hint.
	* @param[in] FontColor - Font color of hint.
	*/
	void CUIEnvironment::ShowHintColored(const std::string & sHint, const LibMCEnv_uint32 nTimeoutInMS, const sColorRGB & Color, const sColorRGB & FontColor)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_UIEnvironment_ShowHintColored(m_pHandle, sHint.c_str(), nTimeoutInMS, &Color, &FontColor));
	}
	
	/**
	* CUIEnvironment::HideHint - Hides hint if any is displayed.
	*/
	void CUIEnvironment::HideHint()
	{
		CheckError(m_pWrapper->m_WrapperTable.m_UIEnvironment_HideHint(m_pHandle));
	}
	
	/**
	* CUIEnvironment::ShowMessageDlg - Shows a message dialog in the user interface.
	* @param[in] sCaption - Caption of the dialog
	* @param[in] sTitle - Title of the dialog
	* @param[in] eDialogType - Which dialog type shall be shown.
	* @param[in] sYesEvent - Event to be called when clicked yes or ok.
	* @param[in] sNoEvent - Event to be called when clicked no.
	* @param[in] sCancelEvent - Event to be called when dialog is closed or cancel is pressed.
	* @return Dialog UUID. Will be set as sender for triggered events.
	*/
	std::string CUIEnvironment::ShowMessageDlg(const std::string & sCaption, const std::string & sTitle, const eMessageDialogType eDialogType, const std::string & sYesEvent, const std::string & sNoEvent, const std::string & sCancelEvent)
	{
		LibMCEnv_uint32 bytesNeededDialogUUID = 0;
		LibMCEnv_uint32 bytesWrittenDialogUUID = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_UIEnvironment_ShowMessageDlg(m_pHandle, sCaption.c_str(), sTitle.c_str(), eDialogType, sYesEvent.c_str(), sNoEvent.c_str(), sCancelEvent.c_str(), 0, &bytesNeededDialogUUID, nullptr));
		std::vector<char> bufferDialogUUID(bytesNeededDialogUUID);
		CheckError(m_pWrapper->m_WrapperTable.m_UIEnvironment_ShowMessageDlg(m_pHandle, sCaption.c_str(), sTitle.c_str(), eDialogType, sYesEvent.c_str(), sNoEvent.c_str(), sCancelEvent.c_str(), bytesNeededDialogUUID, &bytesWrittenDialogUUID, &bufferDialogUUID[0]));
		
		return std::string(&bufferDialogUUID[0]);
	}
	
	/**
	* CUIEnvironment::RetrieveEventSender - returns name of the UI control that triggered the event.
	* @return Name of the sender element.
	*/
	std::string CUIEnvironment::RetrieveEventSender()
	{
		LibMCEnv_uint32 bytesNeededSenderName = 0;
		LibMCEnv_uint32 bytesWrittenSenderName = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_UIEnvironment_RetrieveEventSender(m_pHandle, 0, &bytesNeededSenderName, nullptr));
		std::vector<char> bufferSenderName(bytesNeededSenderName);
		CheckError(m_pWrapper->m_WrapperTable.m_UIEnvironment_RetrieveEventSender(m_pHandle, bytesNeededSenderName, &bytesWrittenSenderName, &bufferSenderName[0]));
		
		return std::string(&bufferSenderName[0]);
	}
	
	/**
	* CUIEnvironment::RetrieveEventSenderUUID - returns uuid of the UI control that triggered the event.
	* @return Name of the sender uuid.
	*/
	std::string CUIEnvironment::RetrieveEventSenderUUID()
	{
		LibMCEnv_uint32 bytesNeededSenderUUID = 0;
		LibMCEnv_uint32 bytesWrittenSenderUUID = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_UIEnvironment_RetrieveEventSenderUUID(m_pHandle, 0, &bytesNeededSenderUUID, nullptr));
		std::vector<char> bufferSenderUUID(bytesNeededSenderUUID);
		CheckError(m_pWrapper->m_WrapperTable.m_UIEnvironment_RetrieveEventSenderUUID(m_pHandle, bytesNeededSenderUUID, &bytesWrittenSenderUUID, &bufferSenderUUID[0]));
		
		return std::string(&bufferSenderUUID[0]);
	}
	
	/**
	* CUIEnvironment::PrepareSignal - prepares a signal object to trigger later.
	* @param[in] sMachineInstance - State machine instance name
	* @param[in] sSignalName - Name Of signal channel.
	* @return Signal trigger object.
	*/
	PSignalTrigger CUIEnvironment::PrepareSignal(const std::string & sMachineInstance, const std::string & sSignalName)
	{
		LibMCEnvHandle hSignalInstance = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_UIEnvironment_PrepareSignal(m_pHandle, sMachineInstance.c_str(), sSignalName.c_str(), &hSignalInstance));
		
		if (!hSignalInstance) {
			CheckError(LIBMCENV_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CSignalTrigger>(m_pWrapper, hSignalInstance);
	}
	
	/**
	* CUIEnvironment::GetMachineState - Retrieves the machine state
	* @param[in] sMachineInstance - State machine instance name
	* @return Name of current state
	*/
	std::string CUIEnvironment::GetMachineState(const std::string & sMachineInstance)
	{
		LibMCEnv_uint32 bytesNeededStateName = 0;
		LibMCEnv_uint32 bytesWrittenStateName = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_UIEnvironment_GetMachineState(m_pHandle, sMachineInstance.c_str(), 0, &bytesNeededStateName, nullptr));
		std::vector<char> bufferStateName(bytesNeededStateName);
		CheckError(m_pWrapper->m_WrapperTable.m_UIEnvironment_GetMachineState(m_pHandle, sMachineInstance.c_str(), bytesNeededStateName, &bytesWrittenStateName, &bufferStateName[0]));
		
		return std::string(&bufferStateName[0]);
	}
	
	/**
	* CUIEnvironment::LogMessage - logs a string as message
	* @param[in] sLogString - String to Log
	*/
	void CUIEnvironment::LogMessage(const std::string & sLogString)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_UIEnvironment_LogMessage(m_pHandle, sLogString.c_str()));
	}
	
	/**
	* CUIEnvironment::LogWarning - logs a string as warning
	* @param[in] sLogString - String to Log
	*/
	void CUIEnvironment::LogWarning(const std::string & sLogString)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_UIEnvironment_LogWarning(m_pHandle, sLogString.c_str()));
	}
	
	/**
	* CUIEnvironment::LogInfo - logs a string as info
	* @param[in] sLogString - String to Log
	*/
	void CUIEnvironment::LogInfo(const std::string & sLogString)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_UIEnvironment_LogInfo(m_pHandle, sLogString.c_str()));
	}
	
	/**
	* CUIEnvironment::GetMachineParameter - returns a string parameter of a state machine
	* @param[in] sMachineInstance - State machine instance name
	* @param[in] sParameterGroup - Parameter Group
	* @param[in] sParameterName - Parameter Name
	* @return Current Parameter Value
	*/
	std::string CUIEnvironment::GetMachineParameter(const std::string & sMachineInstance, const std::string & sParameterGroup, const std::string & sParameterName)
	{
		LibMCEnv_uint32 bytesNeededValue = 0;
		LibMCEnv_uint32 bytesWrittenValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_UIEnvironment_GetMachineParameter(m_pHandle, sMachineInstance.c_str(), sParameterGroup.c_str(), sParameterName.c_str(), 0, &bytesNeededValue, nullptr));
		std::vector<char> bufferValue(bytesNeededValue);
		CheckError(m_pWrapper->m_WrapperTable.m_UIEnvironment_GetMachineParameter(m_pHandle, sMachineInstance.c_str(), sParameterGroup.c_str(), sParameterName.c_str(), bytesNeededValue, &bytesWrittenValue, &bufferValue[0]));
		
		return std::string(&bufferValue[0]);
	}
	
	/**
	* CUIEnvironment::GetMachineParameterAsUUID - returns a uuid parameter of a state machine
	* @param[in] sMachineInstance - State machine instance name
	* @param[in] sParameterGroup - Parameter Group
	* @param[in] sParameterName - Parameter Name
	* @return Current Parameter Value
	*/
	std::string CUIEnvironment::GetMachineParameterAsUUID(const std::string & sMachineInstance, const std::string & sParameterGroup, const std::string & sParameterName)
	{
		LibMCEnv_uint32 bytesNeededValue = 0;
		LibMCEnv_uint32 bytesWrittenValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_UIEnvironment_GetMachineParameterAsUUID(m_pHandle, sMachineInstance.c_str(), sParameterGroup.c_str(), sParameterName.c_str(), 0, &bytesNeededValue, nullptr));
		std::vector<char> bufferValue(bytesNeededValue);
		CheckError(m_pWrapper->m_WrapperTable.m_UIEnvironment_GetMachineParameterAsUUID(m_pHandle, sMachineInstance.c_str(), sParameterGroup.c_str(), sParameterName.c_str(), bytesNeededValue, &bytesWrittenValue, &bufferValue[0]));
		
		return std::string(&bufferValue[0]);
	}
	
	/**
	* CUIEnvironment::GetMachineParameterAsDouble - returns a double parameter of a state machine
	* @param[in] sMachineInstance - State machine instance name
	* @param[in] sParameterGroup - Parameter Group
	* @param[in] sParameterName - Parameter Name
	* @return Current Parameter Value
	*/
	LibMCEnv_double CUIEnvironment::GetMachineParameterAsDouble(const std::string & sMachineInstance, const std::string & sParameterGroup, const std::string & sParameterName)
	{
		LibMCEnv_double resultValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_UIEnvironment_GetMachineParameterAsDouble(m_pHandle, sMachineInstance.c_str(), sParameterGroup.c_str(), sParameterName.c_str(), &resultValue));
		
		return resultValue;
	}
	
	/**
	* CUIEnvironment::GetMachineParameterAsInteger - returns an int parameter of a state machine
	* @param[in] sMachineInstance - State machine instance name
	* @param[in] sParameterGroup - Parameter Group
	* @param[in] sParameterName - Parameter Name
	* @return Current Parameter Value
	*/
	LibMCEnv_int64 CUIEnvironment::GetMachineParameterAsInteger(const std::string & sMachineInstance, const std::string & sParameterGroup, const std::string & sParameterName)
	{
		LibMCEnv_int64 resultValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_UIEnvironment_GetMachineParameterAsInteger(m_pHandle, sMachineInstance.c_str(), sParameterGroup.c_str(), sParameterName.c_str(), &resultValue));
		
		return resultValue;
	}
	
	/**
	* CUIEnvironment::GetMachineParameterAsBool - returns a bool parameter of a state machine
	* @param[in] sMachineInstance - State machine instance name
	* @param[in] sParameterGroup - Parameter Group
	* @param[in] sParameterName - Parameter Name
	* @return Current Parameter Value
	*/
	bool CUIEnvironment::GetMachineParameterAsBool(const std::string & sMachineInstance, const std::string & sParameterGroup, const std::string & sParameterName)
	{
		bool resultValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_UIEnvironment_GetMachineParameterAsBool(m_pHandle, sMachineInstance.c_str(), sParameterGroup.c_str(), sParameterName.c_str(), &resultValue));
		
		return resultValue;
	}
	
	/**
	* CUIEnvironment::GetUIProperty - returns a string property of a UI element on the client
	* @param[in] sElementPath - Path of UI Element. Fails if element does not exist.
	* @param[in] sPropertyName - Property name. Fails if property does not exist.
	* @return Current property Value
	*/
	std::string CUIEnvironment::GetUIProperty(const std::string & sElementPath, const std::string & sPropertyName)
	{
		LibMCEnv_uint32 bytesNeededValue = 0;
		LibMCEnv_uint32 bytesWrittenValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_UIEnvironment_GetUIProperty(m_pHandle, sElementPath.c_str(), sPropertyName.c_str(), 0, &bytesNeededValue, nullptr));
		std::vector<char> bufferValue(bytesNeededValue);
		CheckError(m_pWrapper->m_WrapperTable.m_UIEnvironment_GetUIProperty(m_pHandle, sElementPath.c_str(), sPropertyName.c_str(), bytesNeededValue, &bytesWrittenValue, &bufferValue[0]));
		
		return std::string(&bufferValue[0]);
	}
	
	/**
	* CUIEnvironment::GetUIPropertyAsUUID - returns a uuid variable of a UI element on the client
	* @param[in] sElementPath - Path of UI Element. Fails if element does not exist.
	* @param[in] sPropertyName - Property name. Fails if property does not exist.
	* @return Current property Value
	*/
	std::string CUIEnvironment::GetUIPropertyAsUUID(const std::string & sElementPath, const std::string & sPropertyName)
	{
		LibMCEnv_uint32 bytesNeededValue = 0;
		LibMCEnv_uint32 bytesWrittenValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_UIEnvironment_GetUIPropertyAsUUID(m_pHandle, sElementPath.c_str(), sPropertyName.c_str(), 0, &bytesNeededValue, nullptr));
		std::vector<char> bufferValue(bytesNeededValue);
		CheckError(m_pWrapper->m_WrapperTable.m_UIEnvironment_GetUIPropertyAsUUID(m_pHandle, sElementPath.c_str(), sPropertyName.c_str(), bytesNeededValue, &bytesWrittenValue, &bufferValue[0]));
		
		return std::string(&bufferValue[0]);
	}
	
	/**
	* CUIEnvironment::GetUIPropertyAsDouble - returns a double variable of a UI element on the client
	* @param[in] sElementPath - Path of UI Element. Fails if element does not exist.
	* @param[in] sPropertyName - Property name. Fails if property does not exist.
	* @return Current property Value
	*/
	LibMCEnv_double CUIEnvironment::GetUIPropertyAsDouble(const std::string & sElementPath, const std::string & sPropertyName)
	{
		LibMCEnv_double resultValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_UIEnvironment_GetUIPropertyAsDouble(m_pHandle, sElementPath.c_str(), sPropertyName.c_str(), &resultValue));
		
		return resultValue;
	}
	
	/**
	* CUIEnvironment::GetUIPropertyAsInteger - returns a integer variable of a UI element on the client
	* @param[in] sElementPath - Path of UI Element. Fails if element does not exist.
	* @param[in] sPropertyName - Property name. Fails if property does not exist.
	* @return Current property Value
	*/
	LibMCEnv_int64 CUIEnvironment::GetUIPropertyAsInteger(const std::string & sElementPath, const std::string & sPropertyName)
	{
		LibMCEnv_int64 resultValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_UIEnvironment_GetUIPropertyAsInteger(m_pHandle, sElementPath.c_str(), sPropertyName.c_str(), &resultValue));
		
		return resultValue;
	}
	
	/**
	* CUIEnvironment::GetUIPropertyAsBool - returns a integer variable of a UI element on the client
	* @param[in] sElementPath - Path of UI Element. Fails if element does not exist.
	* @param[in] sPropertyName - Property name. Fails if property does not exist.
	* @return Current property Value
	*/
	bool CUIEnvironment::GetUIPropertyAsBool(const std::string & sElementPath, const std::string & sPropertyName)
	{
		bool resultValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_UIEnvironment_GetUIPropertyAsBool(m_pHandle, sElementPath.c_str(), sPropertyName.c_str(), &resultValue));
		
		return resultValue;
	}
	
	/**
	* CUIEnvironment::SetUIProperty - sets a string property of a UI element on the client.
	* @param[in] sElementPath - Path of UI Element. Fails if element does not exist.
	* @param[in] sPropertyName - Property name. Fails if property does not exist or is readonly.
	* @param[in] sValue - New property Value
	*/
	void CUIEnvironment::SetUIProperty(const std::string & sElementPath, const std::string & sPropertyName, const std::string & sValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_UIEnvironment_SetUIProperty(m_pHandle, sElementPath.c_str(), sPropertyName.c_str(), sValue.c_str()));
	}
	
	/**
	* CUIEnvironment::SetUIPropertyAsUUID - sets a uuid property of a UI element on the client.
	* @param[in] sElementPath - Path of UI Element. Fails if element does not exist.
	* @param[in] sPropertyName - Property name. Fails if property does not exist or is readonly.
	* @param[in] sValue - New property Value
	*/
	void CUIEnvironment::SetUIPropertyAsUUID(const std::string & sElementPath, const std::string & sPropertyName, const std::string & sValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_UIEnvironment_SetUIPropertyAsUUID(m_pHandle, sElementPath.c_str(), sPropertyName.c_str(), sValue.c_str()));
	}
	
	/**
	* CUIEnvironment::SetUIPropertyAsDouble - sets a double property of a UI element on the client.
	* @param[in] sElementPath - Path of UI Element. Fails if element does not exist.
	* @param[in] sPropertyName - Property name. Fails if property does not exist or is readonly.
	* @param[in] dValue - New property Value
	*/
	void CUIEnvironment::SetUIPropertyAsDouble(const std::string & sElementPath, const std::string & sPropertyName, const LibMCEnv_double dValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_UIEnvironment_SetUIPropertyAsDouble(m_pHandle, sElementPath.c_str(), sPropertyName.c_str(), dValue));
	}
	
	/**
	* CUIEnvironment::SetUIPropertyAsInteger - sets a integer property of a UI element on the client.
	* @param[in] sElementPath - Path of UI Element. Fails if element does not exist.
	* @param[in] sPropertyName - Property name. Fails if property does not exist or is readonly.
	* @param[in] nValue - New property Value
	*/
	void CUIEnvironment::SetUIPropertyAsInteger(const std::string & sElementPath, const std::string & sPropertyName, const LibMCEnv_int64 nValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_UIEnvironment_SetUIPropertyAsInteger(m_pHandle, sElementPath.c_str(), sPropertyName.c_str(), nValue));
	}
	
	/**
	* CUIEnvironment::SetUIPropertyAsBool - sets a bool property of a UI element on the client.
	* @param[in] sElementPath - Path of UI Element. Fails if element does not exist.
	* @param[in] sPropertyName - Property name. Fails if property does not exist or is readonly.
	* @param[in] bValue - New property Value
	*/
	void CUIEnvironment::SetUIPropertyAsBool(const std::string & sElementPath, const std::string & sPropertyName, const bool bValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_UIEnvironment_SetUIPropertyAsBool(m_pHandle, sElementPath.c_str(), sPropertyName.c_str(), bValue));
	}
	
	/**
	* CUIEnvironment::CreateEmptyImage - creates an empty image object.
	* @param[in] nPixelSizeX - Pixel size in X. MUST be positive.
	* @param[in] nPixelSizeY - Pixel size in Y. MUST be positive.
	* @param[in] dDPIValueX - DPI Value in X. MUST be positive.
	* @param[in] dDPIValueY - DPI Value in Y. MUST be positive.
	* @param[in] ePixelFormat - Pixel format to use.
	* @return Empty image instance.
	*/
	PImageData CUIEnvironment::CreateEmptyImage(const LibMCEnv_uint32 nPixelSizeX, const LibMCEnv_uint32 nPixelSizeY, const LibMCEnv_double dDPIValueX, const LibMCEnv_double dDPIValueY, const eImagePixelFormat ePixelFormat)
	{
		LibMCEnvHandle hImageDataInstance = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_UIEnvironment_CreateEmptyImage(m_pHandle, nPixelSizeX, nPixelSizeY, dDPIValueX, dDPIValueY, ePixelFormat, &hImageDataInstance));
		
		if (!hImageDataInstance) {
			CheckError(LIBMCENV_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CImageData>(m_pWrapper, hImageDataInstance);
	}
	
	/**
	* CUIEnvironment::LoadPNGImage - creates an image object from a PNG data stream.
	* @param[in] PNGDataBuffer - DPI Value in X. MUST be positive.
	* @param[in] dDPIValueX - DPI Value in X. MUST be positive.
	* @param[in] dDPIValueY - DPI Value in Y. MUST be positive.
	* @param[in] ePixelFormat - Pixel format to use. Might lose color and alpha information.
	* @return Image instance containing the PNG image.
	*/
	PImageData CUIEnvironment::LoadPNGImage(const CInputVector<LibMCEnv_uint8> & PNGDataBuffer, const LibMCEnv_double dDPIValueX, const LibMCEnv_double dDPIValueY, const eImagePixelFormat ePixelFormat)
	{
		LibMCEnvHandle hImageDataInstance = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_UIEnvironment_LoadPNGImage(m_pHandle, (LibMCEnv_uint64)PNGDataBuffer.size(), PNGDataBuffer.data(), dDPIValueX, dDPIValueY, ePixelFormat, &hImageDataInstance));
		
		if (!hImageDataInstance) {
			CheckError(LIBMCENV_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CImageData>(m_pWrapper, hImageDataInstance);
	}
	
	/**
	* CUIEnvironment::GetGlobalTimerInMilliseconds - Returns the global timer in milliseconds.
	* @return Timer value in Milliseconds
	*/
	LibMCEnv_uint64 CUIEnvironment::GetGlobalTimerInMilliseconds()
	{
		LibMCEnv_uint64 resultTimerValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_UIEnvironment_GetGlobalTimerInMilliseconds(m_pHandle, &resultTimerValue));
		
		return resultTimerValue;
	}
	
	/**
	* CUIEnvironment::GetTestEnvironment - Returns a test environment instance.
	* @return Test Environment Instance
	*/
	PTestEnvironment CUIEnvironment::GetTestEnvironment()
	{
		LibMCEnvHandle hTestEnvironment = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_UIEnvironment_GetTestEnvironment(m_pHandle, &hTestEnvironment));
		
		if (!hTestEnvironment) {
			CheckError(LIBMCENV_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CTestEnvironment>(m_pWrapper, hTestEnvironment);
	}
	
	/**
	* CUIEnvironment::CreateXMLDocument - creates an empty XML Document.
	* @param[in] sRootNodeName - Name of the root node. MUST be a valid XML Node Name string.
	* @param[in] sDefaultNamespace - Default namespace of the document. MUST be a valid XML namespace string.
	* @return XML Document Instance.
	*/
	PXMLDocument CUIEnvironment::CreateXMLDocument(const std::string & sRootNodeName, const std::string & sDefaultNamespace)
	{
		LibMCEnvHandle hXMLDocument = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_UIEnvironment_CreateXMLDocument(m_pHandle, sRootNodeName.c_str(), sDefaultNamespace.c_str(), &hXMLDocument));
		
		if (!hXMLDocument) {
			CheckError(LIBMCENV_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CXMLDocument>(m_pWrapper, hXMLDocument);
	}
	
	/**
	* CUIEnvironment::ParseXMLString - parses an XML String and returns an XML Document instance. Throws an error if XML is malformatted.
	* @param[in] sXMLString - XML String.
	* @return XML Document Instance.
	*/
	PXMLDocument CUIEnvironment::ParseXMLString(const std::string & sXMLString)
	{
		LibMCEnvHandle hXMLDocument = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_UIEnvironment_ParseXMLString(m_pHandle, sXMLString.c_str(), &hXMLDocument));
		
		if (!hXMLDocument) {
			CheckError(LIBMCENV_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CXMLDocument>(m_pWrapper, hXMLDocument);
	}
	
	/**
	* CUIEnvironment::ParseXMLData - parses a XML stored in a byte array and returns an XML Document instance. . Throws an error if XML is malformatted.
	* @param[in] XMLDataBuffer - XML Binary data.
	* @return XML Document Instance.
	*/
	PXMLDocument CUIEnvironment::ParseXMLData(const CInputVector<LibMCEnv_uint8> & XMLDataBuffer)
	{
		LibMCEnvHandle hXMLDocument = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_UIEnvironment_ParseXMLData(m_pHandle, (LibMCEnv_uint64)XMLDataBuffer.size(), XMLDataBuffer.data(), &hXMLDocument));
		
		if (!hXMLDocument) {
			CheckError(LIBMCENV_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CXMLDocument>(m_pWrapper, hXMLDocument);
	}

} // namespace LibMCEnv

#endif // __LIBMCENV_CPPHEADER_DYNAMIC_CPP

