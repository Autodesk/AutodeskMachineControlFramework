/*++

Copyright (C) 2020 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.7.0-develop.

Abstract: This is an autogenerated C++-Header file in order to allow an easy
 use of MC Environment Interface

Interface version: 1.0.0

*/

#ifndef __LIBMCENV_CPPHEADER_DYNAMIC_CPP
#define __LIBMCENV_CPPHEADER_DYNAMIC_CPP

#include "libmcenv_types.hpp"
#include "libmcenv_dynamic.h"


#ifdef _WIN32
#include <windows.h>
#else // _WIN32
#include <dlfcn.h>
#endif // _WIN32
#include <string>
#include <memory>
#include <vector>
#include <exception>

namespace LibMCEnv {

/*************************************************************************************************************************
 Forward Declaration of all classes
**************************************************************************************************************************/
class CWrapper;
class CBase;
class CToolpathLayer;
class CToolpathAccessor;
class CSignalTrigger;
class CSignalHandler;
class CStateEnvironment;

/*************************************************************************************************************************
 Declaration of deprecated class types
**************************************************************************************************************************/
typedef CWrapper CLibMCEnvWrapper;
typedef CBase CLibMCEnvBase;
typedef CToolpathLayer CLibMCEnvToolpathLayer;
typedef CToolpathAccessor CLibMCEnvToolpathAccessor;
typedef CSignalTrigger CLibMCEnvSignalTrigger;
typedef CSignalHandler CLibMCEnvSignalHandler;
typedef CStateEnvironment CLibMCEnvStateEnvironment;

/*************************************************************************************************************************
 Declaration of shared pointer types
**************************************************************************************************************************/
typedef std::shared_ptr<CWrapper> PWrapper;
typedef std::shared_ptr<CBase> PBase;
typedef std::shared_ptr<CToolpathLayer> PToolpathLayer;
typedef std::shared_ptr<CToolpathAccessor> PToolpathAccessor;
typedef std::shared_ptr<CSignalTrigger> PSignalTrigger;
typedef std::shared_ptr<CSignalHandler> PSignalHandler;
typedef std::shared_ptr<CStateEnvironment> PStateEnvironment;

/*************************************************************************************************************************
 Declaration of deprecated shared pointer types
**************************************************************************************************************************/
typedef PWrapper PLibMCEnvWrapper;
typedef PBase PLibMCEnvBase;
typedef PToolpathLayer PLibMCEnvToolpathLayer;
typedef PToolpathAccessor PLibMCEnvToolpathAccessor;
typedef PSignalTrigger PLibMCEnvSignalTrigger;
typedef PSignalHandler PLibMCEnvSignalHandler;
typedef PStateEnvironment PLibMCEnvStateEnvironment;


/*************************************************************************************************************************
 classParam Definition
**************************************************************************************************************************/

template<class T> class classParam {
private:
	const T* m_ptr;

public:
	classParam(const T* ptr)
		: m_ptr (ptr)
	{
	}

	classParam(std::shared_ptr <T> sharedPtr)
		: m_ptr (sharedPtr.get())
	{
	}

	LibMCEnvHandle GetHandle()
	{
		if (m_ptr != nullptr)
			return m_ptr->handle();
		return nullptr;
	}
};

/*************************************************************************************************************************
 Class ELibMCEnvException 
**************************************************************************************************************************/
class ELibMCEnvException : public std::exception {
protected:
	/**
	* Error code for the Exception.
	*/
	LibMCEnvResult m_errorCode;
	/**
	* Error message for the Exception.
	*/
	std::string m_errorMessage;

public:
	/**
	* Exception Constructor.
	*/
	ELibMCEnvException(LibMCEnvResult errorCode, const std::string & sErrorMessage)
		: m_errorMessage("LibMCEnv Error " + std::to_string(errorCode) + " (" + sErrorMessage + ")")
	{
		m_errorCode = errorCode;
	}

	/**
	* Returns error code
	*/
	LibMCEnvResult getErrorCode() const noexcept
	{
		return m_errorCode;
	}

	/**
	* Returns error message
	*/
	const char* what() const noexcept
	{
		return m_errorMessage.c_str();
	}

};

/*************************************************************************************************************************
 Class CInputVector
**************************************************************************************************************************/
template <typename T>
class CInputVector {
private:
	
	const T* m_data;
	size_t m_size;
	
public:
	
	CInputVector( const std::vector<T>& vec)
		: m_data( vec.data() ), m_size( vec.size() )
	{
	}
	
	CInputVector( const T* in_data, size_t in_size)
		: m_data( in_data ), m_size(in_size )
	{
	}
	
	const T* data() const
	{
		return m_data;
	}
	
	size_t size() const
	{
		return m_size;
	}
	
};

// declare deprecated class name
template<typename T>
using CLibMCEnvInputVector = CInputVector<T>;

/*************************************************************************************************************************
 Class CWrapper 
**************************************************************************************************************************/
class CWrapper {
public:
	
	CWrapper(void* pSymbolLookupMethod)
	{
		CheckError(nullptr, initWrapperTable(&m_WrapperTable));
		CheckError(nullptr, loadWrapperTableFromSymbolLookupMethod(&m_WrapperTable, pSymbolLookupMethod));
		
		CheckError(nullptr, checkBinaryVersion());
	}
	
	CWrapper(const std::string &sFileName)
	{
		CheckError(nullptr, initWrapperTable(&m_WrapperTable));
		CheckError(nullptr, loadWrapperTable(&m_WrapperTable, sFileName.c_str()));
		
		CheckError(nullptr, checkBinaryVersion());
	}
	
	static PWrapper loadLibrary(const std::string &sFileName)
	{
		return std::make_shared<CWrapper>(sFileName);
	}
	
	static PWrapper loadLibraryFromSymbolLookupMethod(void* pSymbolLookupMethod)
	{
		return std::make_shared<CWrapper>(pSymbolLookupMethod);
	}
	
	~CWrapper()
	{
		releaseWrapperTable(&m_WrapperTable);
	}
	
	inline void CheckError(CBase * pBaseClass, LibMCEnvResult nResult);

	inline void GetVersion(LibMCEnv_uint32 & nMajor, LibMCEnv_uint32 & nMinor, LibMCEnv_uint32 & nMicro);
	inline bool GetLastError(classParam<CBase> pInstance, std::string & sErrorMessage);
	inline void ReleaseInstance(classParam<CBase> pInstance);
	inline void AcquireInstance(classParam<CBase> pInstance);
	inline LibMCEnv_pvoid GetSymbolLookupMethod();

private:
	sLibMCEnvDynamicWrapperTable m_WrapperTable;
	
	LibMCEnvResult checkBinaryVersion()
	{
		LibMCEnv_uint32 nMajor, nMinor, nMicro;
		GetVersion(nMajor, nMinor, nMicro);
		if ( (nMajor != LIBMCENV_VERSION_MAJOR) || (nMinor < LIBMCENV_VERSION_MINOR) ) {
			return LIBMCENV_ERROR_INCOMPATIBLEBINARYVERSION;
		}
		return LIBMCENV_SUCCESS;
	}
	LibMCEnvResult initWrapperTable(sLibMCEnvDynamicWrapperTable * pWrapperTable);
	LibMCEnvResult releaseWrapperTable(sLibMCEnvDynamicWrapperTable * pWrapperTable);
	LibMCEnvResult loadWrapperTable(sLibMCEnvDynamicWrapperTable * pWrapperTable, const char * pLibraryFileName);
	LibMCEnvResult loadWrapperTableFromSymbolLookupMethod(sLibMCEnvDynamicWrapperTable * pWrapperTable, void* pSymbolLookupMethod);

	friend class CBase;
	friend class CToolpathLayer;
	friend class CToolpathAccessor;
	friend class CSignalTrigger;
	friend class CSignalHandler;
	friend class CStateEnvironment;

};

	
/*************************************************************************************************************************
 Class CBase 
**************************************************************************************************************************/
class CBase {
public:
	
protected:
	/* Wrapper Object that created the class. */
	CWrapper * m_pWrapper;
	/* Handle to Instance in library*/
	LibMCEnvHandle m_pHandle;

	/* Checks for an Error code and raises Exceptions */
	void CheckError(LibMCEnvResult nResult)
	{
		if (m_pWrapper != nullptr)
			m_pWrapper->CheckError(this, nResult);
	}
public:
	/**
	* CBase::CBase - Constructor for Base class.
	*/
	CBase(CWrapper * pWrapper, LibMCEnvHandle pHandle)
		: m_pWrapper(pWrapper), m_pHandle(pHandle)
	{
	}

	/**
	* CBase::~CBase - Destructor for Base class.
	*/
	virtual ~CBase()
	{
		if (m_pWrapper != nullptr)
			m_pWrapper->ReleaseInstance(this);
		m_pWrapper = nullptr;
	}

	/**
	* CBase::handle - Returns handle to instance.
	*/
	LibMCEnvHandle handle() const
	{
		return m_pHandle;
	}

	/**
	* CBase::wrapper - Returns wrapper instance.
	*/
	CWrapper * wrapper() const
	{
		return m_pWrapper;
	}
	
	friend class CWrapper;
};
	
/*************************************************************************************************************************
 Class CToolpathLayer 
**************************************************************************************************************************/
class CToolpathLayer : public CBase {
public:
	
	/**
	* CToolpathLayer::CToolpathLayer - Constructor for ToolpathLayer class.
	*/
	CToolpathLayer(CWrapper* pWrapper, LibMCEnvHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline std::string GetLayerDataUUID();
	inline LibMCEnv_uint32 GetSegmentCount();
	inline void GetSegmentInfo(const LibMCEnv_uint32 nIndex, eToolpathSegmentType & eType, LibMCEnv_uint32 & nPointCount);
	inline std::string GetSegmentProfileUUID(const LibMCEnv_uint32 nIndex);
	inline std::string GetSegmentPartUUID(const LibMCEnv_uint32 nIndex);
	inline void GetSegmentPointData(const LibMCEnv_uint32 nIndex, std::vector<sPosition2D> & PointDataBuffer);
	inline LibMCEnv_int32 GetZValue();
	inline LibMCEnv_double GetUnits();
};
	
/*************************************************************************************************************************
 Class CToolpathAccessor 
**************************************************************************************************************************/
class CToolpathAccessor : public CBase {
public:
	
	/**
	* CToolpathAccessor::CToolpathAccessor - Constructor for ToolpathAccessor class.
	*/
	CToolpathAccessor(CWrapper* pWrapper, LibMCEnvHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline std::string GetUUID();
	inline LibMCEnv_uint32 GetLayerCount();
	inline PToolpathLayer LoadLayer(const LibMCEnv_uint32 nLayerIndex);
	inline LibMCEnv_double GetUnits();
};
	
/*************************************************************************************************************************
 Class CSignalTrigger 
**************************************************************************************************************************/
class CSignalTrigger : public CBase {
public:
	
	/**
	* CSignalTrigger::CSignalTrigger - Constructor for SignalTrigger class.
	*/
	CSignalTrigger(CWrapper* pWrapper, LibMCEnvHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline bool CanTrigger();
	inline void Trigger();
	inline bool WaitForHandling(const LibMCEnv_uint32 nTimeOut);
	inline std::string GetName();
	inline std::string GetStateMachine();
	inline void SetString(const std::string & sName, const std::string & sValue);
	inline void SetUUID(const std::string & sName, const std::string & sValue);
	inline void SetDouble(const std::string & sName, const LibMCEnv_double dValue);
	inline void SetInteger(const std::string & sName, const LibMCEnv_int64 nValue);
	inline void SetBool(const std::string & sName, const bool bValue);
	inline std::string GetStringResult(const std::string & sName);
	inline std::string GetUUIDResult(const std::string & sName);
	inline LibMCEnv_double GetDoubleResult(const std::string & sName);
	inline LibMCEnv_int64 GetIntegerResult(const std::string & sName);
	inline bool GetBoolResult(const std::string & sName);
};
	
/*************************************************************************************************************************
 Class CSignalHandler 
**************************************************************************************************************************/
class CSignalHandler : public CBase {
public:
	
	/**
	* CSignalHandler::CSignalHandler - Constructor for SignalHandler class.
	*/
	CSignalHandler(CWrapper* pWrapper, LibMCEnvHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline void SignalHandled();
	inline std::string GetName();
	inline std::string GetSignalID();
	inline std::string GetStateMachine();
	inline std::string GetString(const std::string & sName);
	inline std::string GetUUID(const std::string & sName);
	inline LibMCEnv_double GetDouble(const std::string & sName);
	inline LibMCEnv_int64 GetInteger(const std::string & sName);
	inline bool GetBool(const std::string & sName);
	inline void SetStringResult(const std::string & sName, const std::string & sValue);
	inline void SetUUIDResult(const std::string & sName, const std::string & sValue);
	inline void SetDoubleResult(const std::string & sName, const LibMCEnv_double dValue);
	inline void SetIntegerResult(const std::string & sName, const LibMCEnv_int64 nValue);
	inline void SetBoolResult(const std::string & sName, const bool bValue);
};
	
/*************************************************************************************************************************
 Class CStateEnvironment 
**************************************************************************************************************************/
class CStateEnvironment : public CBase {
public:
	
	/**
	* CStateEnvironment::CStateEnvironment - Constructor for StateEnvironment class.
	*/
	CStateEnvironment(CWrapper* pWrapper, LibMCEnvHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline PSignalTrigger CreateSignal(const std::string & sMachineInstance, const std::string & sSignalName);
	inline bool WaitForSignal(const std::string & sSignalName, const LibMCEnv_uint32 nTimeOut, PSignalHandler & pHandlerInstance);
	inline void GetDriverLibrary(const std::string & sDriverName, std::string & sDriverType, LibMCEnv_pvoid & pDriverLookup);
	inline void CreateDriverAccess(const std::string & sDriverName, LibMCEnv_pvoid & pDriverHandle);
	inline void LoadToolpath(const std::string & sToolpathUUID);
	inline void UnloadToolpath(const std::string & sToolpathUUID);
	inline void UnloadAllToolpathes();
	inline PToolpathAccessor CreateToolpathAccessor(const std::string & sToolpathUUID);
	inline bool ToolpathIsLoaded(const std::string & sToolpathUUID);
	inline void SetNextState(const std::string & sStateName);
	inline void LogMessage(const std::string & sLogString);
	inline void LogWarning(const std::string & sLogString);
	inline void LogInfo(const std::string & sLogString);
	inline void Sleep(const LibMCEnv_uint32 nDelay);
	inline bool CheckForTermination();
	inline void StoreString(const std::string & sName, const std::string & sValue);
	inline void StoreUUID(const std::string & sName, const std::string & sValue);
	inline void StoreInteger(const std::string & sName, const LibMCEnv_int64 nValue);
	inline void StoreDouble(const std::string & sName, const LibMCEnv_double dValue);
	inline void StoreBool(const std::string & sName, const bool bValue);
	inline void StoreSignal(const std::string & sName, classParam<CSignalHandler> pHandler);
	inline std::string RetrieveString(const std::string & sName);
	inline std::string RetrieveUUID(const std::string & sName);
	inline LibMCEnv_int64 RetrieveInteger(const std::string & sName);
	inline LibMCEnv_double RetrieveDouble(const std::string & sName);
	inline bool RetrieveBool(const std::string & sName);
	inline PSignalHandler RetrieveSignal(const std::string & sName);
	inline void ClearStoredValue(const std::string & sName);
	inline void SetStringParameter(const std::string & sParameterGroup, const std::string & sParameterName, const std::string & sValue);
	inline void SetUUIDParameter(const std::string & sParameterGroup, const std::string & sParameterName, const std::string & sValue);
	inline void SetDoubleParameter(const std::string & sParameterGroup, const std::string & sParameterName, const LibMCEnv_double dValue);
	inline void SetIntegerParameter(const std::string & sParameterGroup, const std::string & sParameterName, const LibMCEnv_int64 nValue);
	inline void SetBoolParameter(const std::string & sParameterGroup, const std::string & sParameterName, const bool bValue);
	inline std::string GetStringParameter(const std::string & sParameterGroup, const std::string & sParameterName);
	inline std::string GetUUIDParameter(const std::string & sParameterGroup, const std::string & sParameterName);
	inline LibMCEnv_double GetDoubleParameter(const std::string & sParameterGroup, const std::string & sParameterName);
	inline LibMCEnv_int64 GetIntegerParameter(const std::string & sParameterGroup, const std::string & sParameterName);
	inline bool GetBoolParameter(const std::string & sParameterGroup, const std::string & sParameterName);
};
	
	/**
	* CWrapper::GetVersion - retrieves the binary version of this library.
	* @param[out] nMajor - returns the major version of this library
	* @param[out] nMinor - returns the minor version of this library
	* @param[out] nMicro - returns the micro version of this library
	*/
	inline void CWrapper::GetVersion(LibMCEnv_uint32 & nMajor, LibMCEnv_uint32 & nMinor, LibMCEnv_uint32 & nMicro)
	{
		CheckError(nullptr,m_WrapperTable.m_GetVersion(&nMajor, &nMinor, &nMicro));
	}
	
	/**
	* CWrapper::GetLastError - Returns the last error recorded on this object
	* @param[in] pInstance - Instance Handle
	* @param[out] sErrorMessage - Message of the last error
	* @return Is there a last error to query
	*/
	inline bool CWrapper::GetLastError(classParam<CBase> pInstance, std::string & sErrorMessage)
	{
		LibMCEnvHandle hInstance = pInstance.GetHandle();
		LibMCEnv_uint32 bytesNeededErrorMessage = 0;
		LibMCEnv_uint32 bytesWrittenErrorMessage = 0;
		bool resultHasError = 0;
		CheckError(nullptr,m_WrapperTable.m_GetLastError(hInstance, 0, &bytesNeededErrorMessage, nullptr, &resultHasError));
		std::vector<char> bufferErrorMessage(bytesNeededErrorMessage);
		CheckError(nullptr,m_WrapperTable.m_GetLastError(hInstance, bytesNeededErrorMessage, &bytesWrittenErrorMessage, &bufferErrorMessage[0], &resultHasError));
		sErrorMessage = std::string(&bufferErrorMessage[0]);
		
		return resultHasError;
	}
	
	/**
	* CWrapper::ReleaseInstance - Releases shared ownership of an Instance
	* @param[in] pInstance - Instance Handle
	*/
	inline void CWrapper::ReleaseInstance(classParam<CBase> pInstance)
	{
		LibMCEnvHandle hInstance = pInstance.GetHandle();
		CheckError(nullptr,m_WrapperTable.m_ReleaseInstance(hInstance));
	}
	
	/**
	* CWrapper::AcquireInstance - Acquires shared ownership of an Instance
	* @param[in] pInstance - Instance Handle
	*/
	inline void CWrapper::AcquireInstance(classParam<CBase> pInstance)
	{
		LibMCEnvHandle hInstance = pInstance.GetHandle();
		CheckError(nullptr,m_WrapperTable.m_AcquireInstance(hInstance));
	}
	
	/**
	* CWrapper::GetSymbolLookupMethod - Returns the address of the SymbolLookupMethod
	* @return Address of the SymbolAddressMethod
	*/
	inline LibMCEnv_pvoid CWrapper::GetSymbolLookupMethod()
	{
		LibMCEnv_pvoid resultSymbolLookupMethod = 0;
		CheckError(nullptr,m_WrapperTable.m_GetSymbolLookupMethod(&resultSymbolLookupMethod));
		
		return resultSymbolLookupMethod;
	}
	
	inline void CWrapper::CheckError(CBase * pBaseClass, LibMCEnvResult nResult)
	{
		if (nResult != 0) {
			std::string sErrorMessage;
			if (pBaseClass != nullptr) {
				GetLastError(pBaseClass, sErrorMessage);
			}
			throw ELibMCEnvException(nResult, sErrorMessage);
		}
	}
	

	inline LibMCEnvResult CWrapper::initWrapperTable(sLibMCEnvDynamicWrapperTable * pWrapperTable)
	{
		if (pWrapperTable == nullptr)
			return LIBMCENV_ERROR_INVALIDPARAM;
		
		pWrapperTable->m_LibraryHandle = nullptr;
		pWrapperTable->m_ToolpathLayer_GetLayerDataUUID = nullptr;
		pWrapperTable->m_ToolpathLayer_GetSegmentCount = nullptr;
		pWrapperTable->m_ToolpathLayer_GetSegmentInfo = nullptr;
		pWrapperTable->m_ToolpathLayer_GetSegmentProfileUUID = nullptr;
		pWrapperTable->m_ToolpathLayer_GetSegmentPartUUID = nullptr;
		pWrapperTable->m_ToolpathLayer_GetSegmentPointData = nullptr;
		pWrapperTable->m_ToolpathLayer_GetZValue = nullptr;
		pWrapperTable->m_ToolpathLayer_GetUnits = nullptr;
		pWrapperTable->m_ToolpathAccessor_GetUUID = nullptr;
		pWrapperTable->m_ToolpathAccessor_GetLayerCount = nullptr;
		pWrapperTable->m_ToolpathAccessor_LoadLayer = nullptr;
		pWrapperTable->m_ToolpathAccessor_GetUnits = nullptr;
		pWrapperTable->m_SignalTrigger_CanTrigger = nullptr;
		pWrapperTable->m_SignalTrigger_Trigger = nullptr;
		pWrapperTable->m_SignalTrigger_WaitForHandling = nullptr;
		pWrapperTable->m_SignalTrigger_GetName = nullptr;
		pWrapperTable->m_SignalTrigger_GetStateMachine = nullptr;
		pWrapperTable->m_SignalTrigger_SetString = nullptr;
		pWrapperTable->m_SignalTrigger_SetUUID = nullptr;
		pWrapperTable->m_SignalTrigger_SetDouble = nullptr;
		pWrapperTable->m_SignalTrigger_SetInteger = nullptr;
		pWrapperTable->m_SignalTrigger_SetBool = nullptr;
		pWrapperTable->m_SignalTrigger_GetStringResult = nullptr;
		pWrapperTable->m_SignalTrigger_GetUUIDResult = nullptr;
		pWrapperTable->m_SignalTrigger_GetDoubleResult = nullptr;
		pWrapperTable->m_SignalTrigger_GetIntegerResult = nullptr;
		pWrapperTable->m_SignalTrigger_GetBoolResult = nullptr;
		pWrapperTable->m_SignalHandler_SignalHandled = nullptr;
		pWrapperTable->m_SignalHandler_GetName = nullptr;
		pWrapperTable->m_SignalHandler_GetSignalID = nullptr;
		pWrapperTable->m_SignalHandler_GetStateMachine = nullptr;
		pWrapperTable->m_SignalHandler_GetString = nullptr;
		pWrapperTable->m_SignalHandler_GetUUID = nullptr;
		pWrapperTable->m_SignalHandler_GetDouble = nullptr;
		pWrapperTable->m_SignalHandler_GetInteger = nullptr;
		pWrapperTable->m_SignalHandler_GetBool = nullptr;
		pWrapperTable->m_SignalHandler_SetStringResult = nullptr;
		pWrapperTable->m_SignalHandler_SetUUIDResult = nullptr;
		pWrapperTable->m_SignalHandler_SetDoubleResult = nullptr;
		pWrapperTable->m_SignalHandler_SetIntegerResult = nullptr;
		pWrapperTable->m_SignalHandler_SetBoolResult = nullptr;
		pWrapperTable->m_StateEnvironment_CreateSignal = nullptr;
		pWrapperTable->m_StateEnvironment_WaitForSignal = nullptr;
		pWrapperTable->m_StateEnvironment_GetDriverLibrary = nullptr;
		pWrapperTable->m_StateEnvironment_CreateDriverAccess = nullptr;
		pWrapperTable->m_StateEnvironment_LoadToolpath = nullptr;
		pWrapperTable->m_StateEnvironment_UnloadToolpath = nullptr;
		pWrapperTable->m_StateEnvironment_UnloadAllToolpathes = nullptr;
		pWrapperTable->m_StateEnvironment_CreateToolpathAccessor = nullptr;
		pWrapperTable->m_StateEnvironment_ToolpathIsLoaded = nullptr;
		pWrapperTable->m_StateEnvironment_SetNextState = nullptr;
		pWrapperTable->m_StateEnvironment_LogMessage = nullptr;
		pWrapperTable->m_StateEnvironment_LogWarning = nullptr;
		pWrapperTable->m_StateEnvironment_LogInfo = nullptr;
		pWrapperTable->m_StateEnvironment_Sleep = nullptr;
		pWrapperTable->m_StateEnvironment_CheckForTermination = nullptr;
		pWrapperTable->m_StateEnvironment_StoreString = nullptr;
		pWrapperTable->m_StateEnvironment_StoreUUID = nullptr;
		pWrapperTable->m_StateEnvironment_StoreInteger = nullptr;
		pWrapperTable->m_StateEnvironment_StoreDouble = nullptr;
		pWrapperTable->m_StateEnvironment_StoreBool = nullptr;
		pWrapperTable->m_StateEnvironment_StoreSignal = nullptr;
		pWrapperTable->m_StateEnvironment_RetrieveString = nullptr;
		pWrapperTable->m_StateEnvironment_RetrieveUUID = nullptr;
		pWrapperTable->m_StateEnvironment_RetrieveInteger = nullptr;
		pWrapperTable->m_StateEnvironment_RetrieveDouble = nullptr;
		pWrapperTable->m_StateEnvironment_RetrieveBool = nullptr;
		pWrapperTable->m_StateEnvironment_RetrieveSignal = nullptr;
		pWrapperTable->m_StateEnvironment_ClearStoredValue = nullptr;
		pWrapperTable->m_StateEnvironment_SetStringParameter = nullptr;
		pWrapperTable->m_StateEnvironment_SetUUIDParameter = nullptr;
		pWrapperTable->m_StateEnvironment_SetDoubleParameter = nullptr;
		pWrapperTable->m_StateEnvironment_SetIntegerParameter = nullptr;
		pWrapperTable->m_StateEnvironment_SetBoolParameter = nullptr;
		pWrapperTable->m_StateEnvironment_GetStringParameter = nullptr;
		pWrapperTable->m_StateEnvironment_GetUUIDParameter = nullptr;
		pWrapperTable->m_StateEnvironment_GetDoubleParameter = nullptr;
		pWrapperTable->m_StateEnvironment_GetIntegerParameter = nullptr;
		pWrapperTable->m_StateEnvironment_GetBoolParameter = nullptr;
		pWrapperTable->m_GetVersion = nullptr;
		pWrapperTable->m_GetLastError = nullptr;
		pWrapperTable->m_ReleaseInstance = nullptr;
		pWrapperTable->m_AcquireInstance = nullptr;
		pWrapperTable->m_GetSymbolLookupMethod = nullptr;
		
		return LIBMCENV_SUCCESS;
	}

	inline LibMCEnvResult CWrapper::releaseWrapperTable(sLibMCEnvDynamicWrapperTable * pWrapperTable)
	{
		if (pWrapperTable == nullptr)
			return LIBMCENV_ERROR_INVALIDPARAM;
		
		if (pWrapperTable->m_LibraryHandle != nullptr) {
		#ifdef _WIN32
			HMODULE hModule = (HMODULE) pWrapperTable->m_LibraryHandle;
			FreeLibrary(hModule);
		#else // _WIN32
			dlclose(pWrapperTable->m_LibraryHandle);
		#endif // _WIN32
			return initWrapperTable(pWrapperTable);
		}
		
		return LIBMCENV_SUCCESS;
	}

	inline LibMCEnvResult CWrapper::loadWrapperTable(sLibMCEnvDynamicWrapperTable * pWrapperTable, const char * pLibraryFileName)
	{
		if (pWrapperTable == nullptr)
			return LIBMCENV_ERROR_INVALIDPARAM;
		if (pLibraryFileName == nullptr)
			return LIBMCENV_ERROR_INVALIDPARAM;
		
		#ifdef _WIN32
		// Convert filename to UTF16-string
		int nLength = (int)strlen(pLibraryFileName);
		int nBufferSize = nLength * 2 + 2;
		std::vector<wchar_t> wsLibraryFileName(nBufferSize);
		int nResult = MultiByteToWideChar(CP_UTF8, 0, pLibraryFileName, nLength, &wsLibraryFileName[0], nBufferSize);
		if (nResult == 0)
			return LIBMCENV_ERROR_COULDNOTLOADLIBRARY;
		
		HMODULE hLibrary = LoadLibraryW(wsLibraryFileName.data());
		if (hLibrary == 0) 
			return LIBMCENV_ERROR_COULDNOTLOADLIBRARY;
		#else // _WIN32
		void* hLibrary = dlopen(pLibraryFileName, RTLD_LAZY);
		if (hLibrary == 0) 
			return LIBMCENV_ERROR_COULDNOTLOADLIBRARY;
		dlerror();
		#endif // _WIN32
		
		#ifdef _WIN32
		pWrapperTable->m_ToolpathLayer_GetLayerDataUUID = (PLibMCEnvToolpathLayer_GetLayerDataUUIDPtr) GetProcAddress(hLibrary, "libmcenv_toolpathlayer_getlayerdatauuid");
		#else // _WIN32
		pWrapperTable->m_ToolpathLayer_GetLayerDataUUID = (PLibMCEnvToolpathLayer_GetLayerDataUUIDPtr) dlsym(hLibrary, "libmcenv_toolpathlayer_getlayerdatauuid");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ToolpathLayer_GetLayerDataUUID == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ToolpathLayer_GetSegmentCount = (PLibMCEnvToolpathLayer_GetSegmentCountPtr) GetProcAddress(hLibrary, "libmcenv_toolpathlayer_getsegmentcount");
		#else // _WIN32
		pWrapperTable->m_ToolpathLayer_GetSegmentCount = (PLibMCEnvToolpathLayer_GetSegmentCountPtr) dlsym(hLibrary, "libmcenv_toolpathlayer_getsegmentcount");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ToolpathLayer_GetSegmentCount == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ToolpathLayer_GetSegmentInfo = (PLibMCEnvToolpathLayer_GetSegmentInfoPtr) GetProcAddress(hLibrary, "libmcenv_toolpathlayer_getsegmentinfo");
		#else // _WIN32
		pWrapperTable->m_ToolpathLayer_GetSegmentInfo = (PLibMCEnvToolpathLayer_GetSegmentInfoPtr) dlsym(hLibrary, "libmcenv_toolpathlayer_getsegmentinfo");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ToolpathLayer_GetSegmentInfo == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ToolpathLayer_GetSegmentProfileUUID = (PLibMCEnvToolpathLayer_GetSegmentProfileUUIDPtr) GetProcAddress(hLibrary, "libmcenv_toolpathlayer_getsegmentprofileuuid");
		#else // _WIN32
		pWrapperTable->m_ToolpathLayer_GetSegmentProfileUUID = (PLibMCEnvToolpathLayer_GetSegmentProfileUUIDPtr) dlsym(hLibrary, "libmcenv_toolpathlayer_getsegmentprofileuuid");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ToolpathLayer_GetSegmentProfileUUID == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ToolpathLayer_GetSegmentPartUUID = (PLibMCEnvToolpathLayer_GetSegmentPartUUIDPtr) GetProcAddress(hLibrary, "libmcenv_toolpathlayer_getsegmentpartuuid");
		#else // _WIN32
		pWrapperTable->m_ToolpathLayer_GetSegmentPartUUID = (PLibMCEnvToolpathLayer_GetSegmentPartUUIDPtr) dlsym(hLibrary, "libmcenv_toolpathlayer_getsegmentpartuuid");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ToolpathLayer_GetSegmentPartUUID == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ToolpathLayer_GetSegmentPointData = (PLibMCEnvToolpathLayer_GetSegmentPointDataPtr) GetProcAddress(hLibrary, "libmcenv_toolpathlayer_getsegmentpointdata");
		#else // _WIN32
		pWrapperTable->m_ToolpathLayer_GetSegmentPointData = (PLibMCEnvToolpathLayer_GetSegmentPointDataPtr) dlsym(hLibrary, "libmcenv_toolpathlayer_getsegmentpointdata");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ToolpathLayer_GetSegmentPointData == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ToolpathLayer_GetZValue = (PLibMCEnvToolpathLayer_GetZValuePtr) GetProcAddress(hLibrary, "libmcenv_toolpathlayer_getzvalue");
		#else // _WIN32
		pWrapperTable->m_ToolpathLayer_GetZValue = (PLibMCEnvToolpathLayer_GetZValuePtr) dlsym(hLibrary, "libmcenv_toolpathlayer_getzvalue");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ToolpathLayer_GetZValue == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ToolpathLayer_GetUnits = (PLibMCEnvToolpathLayer_GetUnitsPtr) GetProcAddress(hLibrary, "libmcenv_toolpathlayer_getunits");
		#else // _WIN32
		pWrapperTable->m_ToolpathLayer_GetUnits = (PLibMCEnvToolpathLayer_GetUnitsPtr) dlsym(hLibrary, "libmcenv_toolpathlayer_getunits");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ToolpathLayer_GetUnits == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ToolpathAccessor_GetUUID = (PLibMCEnvToolpathAccessor_GetUUIDPtr) GetProcAddress(hLibrary, "libmcenv_toolpathaccessor_getuuid");
		#else // _WIN32
		pWrapperTable->m_ToolpathAccessor_GetUUID = (PLibMCEnvToolpathAccessor_GetUUIDPtr) dlsym(hLibrary, "libmcenv_toolpathaccessor_getuuid");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ToolpathAccessor_GetUUID == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ToolpathAccessor_GetLayerCount = (PLibMCEnvToolpathAccessor_GetLayerCountPtr) GetProcAddress(hLibrary, "libmcenv_toolpathaccessor_getlayercount");
		#else // _WIN32
		pWrapperTable->m_ToolpathAccessor_GetLayerCount = (PLibMCEnvToolpathAccessor_GetLayerCountPtr) dlsym(hLibrary, "libmcenv_toolpathaccessor_getlayercount");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ToolpathAccessor_GetLayerCount == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ToolpathAccessor_LoadLayer = (PLibMCEnvToolpathAccessor_LoadLayerPtr) GetProcAddress(hLibrary, "libmcenv_toolpathaccessor_loadlayer");
		#else // _WIN32
		pWrapperTable->m_ToolpathAccessor_LoadLayer = (PLibMCEnvToolpathAccessor_LoadLayerPtr) dlsym(hLibrary, "libmcenv_toolpathaccessor_loadlayer");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ToolpathAccessor_LoadLayer == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ToolpathAccessor_GetUnits = (PLibMCEnvToolpathAccessor_GetUnitsPtr) GetProcAddress(hLibrary, "libmcenv_toolpathaccessor_getunits");
		#else // _WIN32
		pWrapperTable->m_ToolpathAccessor_GetUnits = (PLibMCEnvToolpathAccessor_GetUnitsPtr) dlsym(hLibrary, "libmcenv_toolpathaccessor_getunits");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ToolpathAccessor_GetUnits == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_SignalTrigger_CanTrigger = (PLibMCEnvSignalTrigger_CanTriggerPtr) GetProcAddress(hLibrary, "libmcenv_signaltrigger_cantrigger");
		#else // _WIN32
		pWrapperTable->m_SignalTrigger_CanTrigger = (PLibMCEnvSignalTrigger_CanTriggerPtr) dlsym(hLibrary, "libmcenv_signaltrigger_cantrigger");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_SignalTrigger_CanTrigger == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_SignalTrigger_Trigger = (PLibMCEnvSignalTrigger_TriggerPtr) GetProcAddress(hLibrary, "libmcenv_signaltrigger_trigger");
		#else // _WIN32
		pWrapperTable->m_SignalTrigger_Trigger = (PLibMCEnvSignalTrigger_TriggerPtr) dlsym(hLibrary, "libmcenv_signaltrigger_trigger");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_SignalTrigger_Trigger == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_SignalTrigger_WaitForHandling = (PLibMCEnvSignalTrigger_WaitForHandlingPtr) GetProcAddress(hLibrary, "libmcenv_signaltrigger_waitforhandling");
		#else // _WIN32
		pWrapperTable->m_SignalTrigger_WaitForHandling = (PLibMCEnvSignalTrigger_WaitForHandlingPtr) dlsym(hLibrary, "libmcenv_signaltrigger_waitforhandling");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_SignalTrigger_WaitForHandling == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_SignalTrigger_GetName = (PLibMCEnvSignalTrigger_GetNamePtr) GetProcAddress(hLibrary, "libmcenv_signaltrigger_getname");
		#else // _WIN32
		pWrapperTable->m_SignalTrigger_GetName = (PLibMCEnvSignalTrigger_GetNamePtr) dlsym(hLibrary, "libmcenv_signaltrigger_getname");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_SignalTrigger_GetName == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_SignalTrigger_GetStateMachine = (PLibMCEnvSignalTrigger_GetStateMachinePtr) GetProcAddress(hLibrary, "libmcenv_signaltrigger_getstatemachine");
		#else // _WIN32
		pWrapperTable->m_SignalTrigger_GetStateMachine = (PLibMCEnvSignalTrigger_GetStateMachinePtr) dlsym(hLibrary, "libmcenv_signaltrigger_getstatemachine");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_SignalTrigger_GetStateMachine == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_SignalTrigger_SetString = (PLibMCEnvSignalTrigger_SetStringPtr) GetProcAddress(hLibrary, "libmcenv_signaltrigger_setstring");
		#else // _WIN32
		pWrapperTable->m_SignalTrigger_SetString = (PLibMCEnvSignalTrigger_SetStringPtr) dlsym(hLibrary, "libmcenv_signaltrigger_setstring");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_SignalTrigger_SetString == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_SignalTrigger_SetUUID = (PLibMCEnvSignalTrigger_SetUUIDPtr) GetProcAddress(hLibrary, "libmcenv_signaltrigger_setuuid");
		#else // _WIN32
		pWrapperTable->m_SignalTrigger_SetUUID = (PLibMCEnvSignalTrigger_SetUUIDPtr) dlsym(hLibrary, "libmcenv_signaltrigger_setuuid");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_SignalTrigger_SetUUID == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_SignalTrigger_SetDouble = (PLibMCEnvSignalTrigger_SetDoublePtr) GetProcAddress(hLibrary, "libmcenv_signaltrigger_setdouble");
		#else // _WIN32
		pWrapperTable->m_SignalTrigger_SetDouble = (PLibMCEnvSignalTrigger_SetDoublePtr) dlsym(hLibrary, "libmcenv_signaltrigger_setdouble");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_SignalTrigger_SetDouble == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_SignalTrigger_SetInteger = (PLibMCEnvSignalTrigger_SetIntegerPtr) GetProcAddress(hLibrary, "libmcenv_signaltrigger_setinteger");
		#else // _WIN32
		pWrapperTable->m_SignalTrigger_SetInteger = (PLibMCEnvSignalTrigger_SetIntegerPtr) dlsym(hLibrary, "libmcenv_signaltrigger_setinteger");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_SignalTrigger_SetInteger == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_SignalTrigger_SetBool = (PLibMCEnvSignalTrigger_SetBoolPtr) GetProcAddress(hLibrary, "libmcenv_signaltrigger_setbool");
		#else // _WIN32
		pWrapperTable->m_SignalTrigger_SetBool = (PLibMCEnvSignalTrigger_SetBoolPtr) dlsym(hLibrary, "libmcenv_signaltrigger_setbool");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_SignalTrigger_SetBool == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_SignalTrigger_GetStringResult = (PLibMCEnvSignalTrigger_GetStringResultPtr) GetProcAddress(hLibrary, "libmcenv_signaltrigger_getstringresult");
		#else // _WIN32
		pWrapperTable->m_SignalTrigger_GetStringResult = (PLibMCEnvSignalTrigger_GetStringResultPtr) dlsym(hLibrary, "libmcenv_signaltrigger_getstringresult");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_SignalTrigger_GetStringResult == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_SignalTrigger_GetUUIDResult = (PLibMCEnvSignalTrigger_GetUUIDResultPtr) GetProcAddress(hLibrary, "libmcenv_signaltrigger_getuuidresult");
		#else // _WIN32
		pWrapperTable->m_SignalTrigger_GetUUIDResult = (PLibMCEnvSignalTrigger_GetUUIDResultPtr) dlsym(hLibrary, "libmcenv_signaltrigger_getuuidresult");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_SignalTrigger_GetUUIDResult == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_SignalTrigger_GetDoubleResult = (PLibMCEnvSignalTrigger_GetDoubleResultPtr) GetProcAddress(hLibrary, "libmcenv_signaltrigger_getdoubleresult");
		#else // _WIN32
		pWrapperTable->m_SignalTrigger_GetDoubleResult = (PLibMCEnvSignalTrigger_GetDoubleResultPtr) dlsym(hLibrary, "libmcenv_signaltrigger_getdoubleresult");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_SignalTrigger_GetDoubleResult == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_SignalTrigger_GetIntegerResult = (PLibMCEnvSignalTrigger_GetIntegerResultPtr) GetProcAddress(hLibrary, "libmcenv_signaltrigger_getintegerresult");
		#else // _WIN32
		pWrapperTable->m_SignalTrigger_GetIntegerResult = (PLibMCEnvSignalTrigger_GetIntegerResultPtr) dlsym(hLibrary, "libmcenv_signaltrigger_getintegerresult");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_SignalTrigger_GetIntegerResult == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_SignalTrigger_GetBoolResult = (PLibMCEnvSignalTrigger_GetBoolResultPtr) GetProcAddress(hLibrary, "libmcenv_signaltrigger_getboolresult");
		#else // _WIN32
		pWrapperTable->m_SignalTrigger_GetBoolResult = (PLibMCEnvSignalTrigger_GetBoolResultPtr) dlsym(hLibrary, "libmcenv_signaltrigger_getboolresult");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_SignalTrigger_GetBoolResult == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_SignalHandler_SignalHandled = (PLibMCEnvSignalHandler_SignalHandledPtr) GetProcAddress(hLibrary, "libmcenv_signalhandler_signalhandled");
		#else // _WIN32
		pWrapperTable->m_SignalHandler_SignalHandled = (PLibMCEnvSignalHandler_SignalHandledPtr) dlsym(hLibrary, "libmcenv_signalhandler_signalhandled");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_SignalHandler_SignalHandled == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_SignalHandler_GetName = (PLibMCEnvSignalHandler_GetNamePtr) GetProcAddress(hLibrary, "libmcenv_signalhandler_getname");
		#else // _WIN32
		pWrapperTable->m_SignalHandler_GetName = (PLibMCEnvSignalHandler_GetNamePtr) dlsym(hLibrary, "libmcenv_signalhandler_getname");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_SignalHandler_GetName == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_SignalHandler_GetSignalID = (PLibMCEnvSignalHandler_GetSignalIDPtr) GetProcAddress(hLibrary, "libmcenv_signalhandler_getsignalid");
		#else // _WIN32
		pWrapperTable->m_SignalHandler_GetSignalID = (PLibMCEnvSignalHandler_GetSignalIDPtr) dlsym(hLibrary, "libmcenv_signalhandler_getsignalid");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_SignalHandler_GetSignalID == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_SignalHandler_GetStateMachine = (PLibMCEnvSignalHandler_GetStateMachinePtr) GetProcAddress(hLibrary, "libmcenv_signalhandler_getstatemachine");
		#else // _WIN32
		pWrapperTable->m_SignalHandler_GetStateMachine = (PLibMCEnvSignalHandler_GetStateMachinePtr) dlsym(hLibrary, "libmcenv_signalhandler_getstatemachine");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_SignalHandler_GetStateMachine == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_SignalHandler_GetString = (PLibMCEnvSignalHandler_GetStringPtr) GetProcAddress(hLibrary, "libmcenv_signalhandler_getstring");
		#else // _WIN32
		pWrapperTable->m_SignalHandler_GetString = (PLibMCEnvSignalHandler_GetStringPtr) dlsym(hLibrary, "libmcenv_signalhandler_getstring");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_SignalHandler_GetString == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_SignalHandler_GetUUID = (PLibMCEnvSignalHandler_GetUUIDPtr) GetProcAddress(hLibrary, "libmcenv_signalhandler_getuuid");
		#else // _WIN32
		pWrapperTable->m_SignalHandler_GetUUID = (PLibMCEnvSignalHandler_GetUUIDPtr) dlsym(hLibrary, "libmcenv_signalhandler_getuuid");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_SignalHandler_GetUUID == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_SignalHandler_GetDouble = (PLibMCEnvSignalHandler_GetDoublePtr) GetProcAddress(hLibrary, "libmcenv_signalhandler_getdouble");
		#else // _WIN32
		pWrapperTable->m_SignalHandler_GetDouble = (PLibMCEnvSignalHandler_GetDoublePtr) dlsym(hLibrary, "libmcenv_signalhandler_getdouble");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_SignalHandler_GetDouble == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_SignalHandler_GetInteger = (PLibMCEnvSignalHandler_GetIntegerPtr) GetProcAddress(hLibrary, "libmcenv_signalhandler_getinteger");
		#else // _WIN32
		pWrapperTable->m_SignalHandler_GetInteger = (PLibMCEnvSignalHandler_GetIntegerPtr) dlsym(hLibrary, "libmcenv_signalhandler_getinteger");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_SignalHandler_GetInteger == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_SignalHandler_GetBool = (PLibMCEnvSignalHandler_GetBoolPtr) GetProcAddress(hLibrary, "libmcenv_signalhandler_getbool");
		#else // _WIN32
		pWrapperTable->m_SignalHandler_GetBool = (PLibMCEnvSignalHandler_GetBoolPtr) dlsym(hLibrary, "libmcenv_signalhandler_getbool");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_SignalHandler_GetBool == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_SignalHandler_SetStringResult = (PLibMCEnvSignalHandler_SetStringResultPtr) GetProcAddress(hLibrary, "libmcenv_signalhandler_setstringresult");
		#else // _WIN32
		pWrapperTable->m_SignalHandler_SetStringResult = (PLibMCEnvSignalHandler_SetStringResultPtr) dlsym(hLibrary, "libmcenv_signalhandler_setstringresult");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_SignalHandler_SetStringResult == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_SignalHandler_SetUUIDResult = (PLibMCEnvSignalHandler_SetUUIDResultPtr) GetProcAddress(hLibrary, "libmcenv_signalhandler_setuuidresult");
		#else // _WIN32
		pWrapperTable->m_SignalHandler_SetUUIDResult = (PLibMCEnvSignalHandler_SetUUIDResultPtr) dlsym(hLibrary, "libmcenv_signalhandler_setuuidresult");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_SignalHandler_SetUUIDResult == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_SignalHandler_SetDoubleResult = (PLibMCEnvSignalHandler_SetDoubleResultPtr) GetProcAddress(hLibrary, "libmcenv_signalhandler_setdoubleresult");
		#else // _WIN32
		pWrapperTable->m_SignalHandler_SetDoubleResult = (PLibMCEnvSignalHandler_SetDoubleResultPtr) dlsym(hLibrary, "libmcenv_signalhandler_setdoubleresult");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_SignalHandler_SetDoubleResult == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_SignalHandler_SetIntegerResult = (PLibMCEnvSignalHandler_SetIntegerResultPtr) GetProcAddress(hLibrary, "libmcenv_signalhandler_setintegerresult");
		#else // _WIN32
		pWrapperTable->m_SignalHandler_SetIntegerResult = (PLibMCEnvSignalHandler_SetIntegerResultPtr) dlsym(hLibrary, "libmcenv_signalhandler_setintegerresult");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_SignalHandler_SetIntegerResult == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_SignalHandler_SetBoolResult = (PLibMCEnvSignalHandler_SetBoolResultPtr) GetProcAddress(hLibrary, "libmcenv_signalhandler_setboolresult");
		#else // _WIN32
		pWrapperTable->m_SignalHandler_SetBoolResult = (PLibMCEnvSignalHandler_SetBoolResultPtr) dlsym(hLibrary, "libmcenv_signalhandler_setboolresult");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_SignalHandler_SetBoolResult == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_StateEnvironment_CreateSignal = (PLibMCEnvStateEnvironment_CreateSignalPtr) GetProcAddress(hLibrary, "libmcenv_stateenvironment_createsignal");
		#else // _WIN32
		pWrapperTable->m_StateEnvironment_CreateSignal = (PLibMCEnvStateEnvironment_CreateSignalPtr) dlsym(hLibrary, "libmcenv_stateenvironment_createsignal");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_StateEnvironment_CreateSignal == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_StateEnvironment_WaitForSignal = (PLibMCEnvStateEnvironment_WaitForSignalPtr) GetProcAddress(hLibrary, "libmcenv_stateenvironment_waitforsignal");
		#else // _WIN32
		pWrapperTable->m_StateEnvironment_WaitForSignal = (PLibMCEnvStateEnvironment_WaitForSignalPtr) dlsym(hLibrary, "libmcenv_stateenvironment_waitforsignal");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_StateEnvironment_WaitForSignal == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_StateEnvironment_GetDriverLibrary = (PLibMCEnvStateEnvironment_GetDriverLibraryPtr) GetProcAddress(hLibrary, "libmcenv_stateenvironment_getdriverlibrary");
		#else // _WIN32
		pWrapperTable->m_StateEnvironment_GetDriverLibrary = (PLibMCEnvStateEnvironment_GetDriverLibraryPtr) dlsym(hLibrary, "libmcenv_stateenvironment_getdriverlibrary");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_StateEnvironment_GetDriverLibrary == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_StateEnvironment_CreateDriverAccess = (PLibMCEnvStateEnvironment_CreateDriverAccessPtr) GetProcAddress(hLibrary, "libmcenv_stateenvironment_createdriveraccess");
		#else // _WIN32
		pWrapperTable->m_StateEnvironment_CreateDriverAccess = (PLibMCEnvStateEnvironment_CreateDriverAccessPtr) dlsym(hLibrary, "libmcenv_stateenvironment_createdriveraccess");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_StateEnvironment_CreateDriverAccess == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_StateEnvironment_LoadToolpath = (PLibMCEnvStateEnvironment_LoadToolpathPtr) GetProcAddress(hLibrary, "libmcenv_stateenvironment_loadtoolpath");
		#else // _WIN32
		pWrapperTable->m_StateEnvironment_LoadToolpath = (PLibMCEnvStateEnvironment_LoadToolpathPtr) dlsym(hLibrary, "libmcenv_stateenvironment_loadtoolpath");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_StateEnvironment_LoadToolpath == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_StateEnvironment_UnloadToolpath = (PLibMCEnvStateEnvironment_UnloadToolpathPtr) GetProcAddress(hLibrary, "libmcenv_stateenvironment_unloadtoolpath");
		#else // _WIN32
		pWrapperTable->m_StateEnvironment_UnloadToolpath = (PLibMCEnvStateEnvironment_UnloadToolpathPtr) dlsym(hLibrary, "libmcenv_stateenvironment_unloadtoolpath");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_StateEnvironment_UnloadToolpath == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_StateEnvironment_UnloadAllToolpathes = (PLibMCEnvStateEnvironment_UnloadAllToolpathesPtr) GetProcAddress(hLibrary, "libmcenv_stateenvironment_unloadalltoolpathes");
		#else // _WIN32
		pWrapperTable->m_StateEnvironment_UnloadAllToolpathes = (PLibMCEnvStateEnvironment_UnloadAllToolpathesPtr) dlsym(hLibrary, "libmcenv_stateenvironment_unloadalltoolpathes");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_StateEnvironment_UnloadAllToolpathes == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_StateEnvironment_CreateToolpathAccessor = (PLibMCEnvStateEnvironment_CreateToolpathAccessorPtr) GetProcAddress(hLibrary, "libmcenv_stateenvironment_createtoolpathaccessor");
		#else // _WIN32
		pWrapperTable->m_StateEnvironment_CreateToolpathAccessor = (PLibMCEnvStateEnvironment_CreateToolpathAccessorPtr) dlsym(hLibrary, "libmcenv_stateenvironment_createtoolpathaccessor");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_StateEnvironment_CreateToolpathAccessor == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_StateEnvironment_ToolpathIsLoaded = (PLibMCEnvStateEnvironment_ToolpathIsLoadedPtr) GetProcAddress(hLibrary, "libmcenv_stateenvironment_toolpathisloaded");
		#else // _WIN32
		pWrapperTable->m_StateEnvironment_ToolpathIsLoaded = (PLibMCEnvStateEnvironment_ToolpathIsLoadedPtr) dlsym(hLibrary, "libmcenv_stateenvironment_toolpathisloaded");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_StateEnvironment_ToolpathIsLoaded == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_StateEnvironment_SetNextState = (PLibMCEnvStateEnvironment_SetNextStatePtr) GetProcAddress(hLibrary, "libmcenv_stateenvironment_setnextstate");
		#else // _WIN32
		pWrapperTable->m_StateEnvironment_SetNextState = (PLibMCEnvStateEnvironment_SetNextStatePtr) dlsym(hLibrary, "libmcenv_stateenvironment_setnextstate");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_StateEnvironment_SetNextState == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_StateEnvironment_LogMessage = (PLibMCEnvStateEnvironment_LogMessagePtr) GetProcAddress(hLibrary, "libmcenv_stateenvironment_logmessage");
		#else // _WIN32
		pWrapperTable->m_StateEnvironment_LogMessage = (PLibMCEnvStateEnvironment_LogMessagePtr) dlsym(hLibrary, "libmcenv_stateenvironment_logmessage");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_StateEnvironment_LogMessage == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_StateEnvironment_LogWarning = (PLibMCEnvStateEnvironment_LogWarningPtr) GetProcAddress(hLibrary, "libmcenv_stateenvironment_logwarning");
		#else // _WIN32
		pWrapperTable->m_StateEnvironment_LogWarning = (PLibMCEnvStateEnvironment_LogWarningPtr) dlsym(hLibrary, "libmcenv_stateenvironment_logwarning");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_StateEnvironment_LogWarning == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_StateEnvironment_LogInfo = (PLibMCEnvStateEnvironment_LogInfoPtr) GetProcAddress(hLibrary, "libmcenv_stateenvironment_loginfo");
		#else // _WIN32
		pWrapperTable->m_StateEnvironment_LogInfo = (PLibMCEnvStateEnvironment_LogInfoPtr) dlsym(hLibrary, "libmcenv_stateenvironment_loginfo");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_StateEnvironment_LogInfo == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_StateEnvironment_Sleep = (PLibMCEnvStateEnvironment_SleepPtr) GetProcAddress(hLibrary, "libmcenv_stateenvironment_sleep");
		#else // _WIN32
		pWrapperTable->m_StateEnvironment_Sleep = (PLibMCEnvStateEnvironment_SleepPtr) dlsym(hLibrary, "libmcenv_stateenvironment_sleep");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_StateEnvironment_Sleep == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_StateEnvironment_CheckForTermination = (PLibMCEnvStateEnvironment_CheckForTerminationPtr) GetProcAddress(hLibrary, "libmcenv_stateenvironment_checkfortermination");
		#else // _WIN32
		pWrapperTable->m_StateEnvironment_CheckForTermination = (PLibMCEnvStateEnvironment_CheckForTerminationPtr) dlsym(hLibrary, "libmcenv_stateenvironment_checkfortermination");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_StateEnvironment_CheckForTermination == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_StateEnvironment_StoreString = (PLibMCEnvStateEnvironment_StoreStringPtr) GetProcAddress(hLibrary, "libmcenv_stateenvironment_storestring");
		#else // _WIN32
		pWrapperTable->m_StateEnvironment_StoreString = (PLibMCEnvStateEnvironment_StoreStringPtr) dlsym(hLibrary, "libmcenv_stateenvironment_storestring");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_StateEnvironment_StoreString == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_StateEnvironment_StoreUUID = (PLibMCEnvStateEnvironment_StoreUUIDPtr) GetProcAddress(hLibrary, "libmcenv_stateenvironment_storeuuid");
		#else // _WIN32
		pWrapperTable->m_StateEnvironment_StoreUUID = (PLibMCEnvStateEnvironment_StoreUUIDPtr) dlsym(hLibrary, "libmcenv_stateenvironment_storeuuid");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_StateEnvironment_StoreUUID == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_StateEnvironment_StoreInteger = (PLibMCEnvStateEnvironment_StoreIntegerPtr) GetProcAddress(hLibrary, "libmcenv_stateenvironment_storeinteger");
		#else // _WIN32
		pWrapperTable->m_StateEnvironment_StoreInteger = (PLibMCEnvStateEnvironment_StoreIntegerPtr) dlsym(hLibrary, "libmcenv_stateenvironment_storeinteger");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_StateEnvironment_StoreInteger == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_StateEnvironment_StoreDouble = (PLibMCEnvStateEnvironment_StoreDoublePtr) GetProcAddress(hLibrary, "libmcenv_stateenvironment_storedouble");
		#else // _WIN32
		pWrapperTable->m_StateEnvironment_StoreDouble = (PLibMCEnvStateEnvironment_StoreDoublePtr) dlsym(hLibrary, "libmcenv_stateenvironment_storedouble");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_StateEnvironment_StoreDouble == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_StateEnvironment_StoreBool = (PLibMCEnvStateEnvironment_StoreBoolPtr) GetProcAddress(hLibrary, "libmcenv_stateenvironment_storebool");
		#else // _WIN32
		pWrapperTable->m_StateEnvironment_StoreBool = (PLibMCEnvStateEnvironment_StoreBoolPtr) dlsym(hLibrary, "libmcenv_stateenvironment_storebool");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_StateEnvironment_StoreBool == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_StateEnvironment_StoreSignal = (PLibMCEnvStateEnvironment_StoreSignalPtr) GetProcAddress(hLibrary, "libmcenv_stateenvironment_storesignal");
		#else // _WIN32
		pWrapperTable->m_StateEnvironment_StoreSignal = (PLibMCEnvStateEnvironment_StoreSignalPtr) dlsym(hLibrary, "libmcenv_stateenvironment_storesignal");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_StateEnvironment_StoreSignal == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_StateEnvironment_RetrieveString = (PLibMCEnvStateEnvironment_RetrieveStringPtr) GetProcAddress(hLibrary, "libmcenv_stateenvironment_retrievestring");
		#else // _WIN32
		pWrapperTable->m_StateEnvironment_RetrieveString = (PLibMCEnvStateEnvironment_RetrieveStringPtr) dlsym(hLibrary, "libmcenv_stateenvironment_retrievestring");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_StateEnvironment_RetrieveString == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_StateEnvironment_RetrieveUUID = (PLibMCEnvStateEnvironment_RetrieveUUIDPtr) GetProcAddress(hLibrary, "libmcenv_stateenvironment_retrieveuuid");
		#else // _WIN32
		pWrapperTable->m_StateEnvironment_RetrieveUUID = (PLibMCEnvStateEnvironment_RetrieveUUIDPtr) dlsym(hLibrary, "libmcenv_stateenvironment_retrieveuuid");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_StateEnvironment_RetrieveUUID == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_StateEnvironment_RetrieveInteger = (PLibMCEnvStateEnvironment_RetrieveIntegerPtr) GetProcAddress(hLibrary, "libmcenv_stateenvironment_retrieveinteger");
		#else // _WIN32
		pWrapperTable->m_StateEnvironment_RetrieveInteger = (PLibMCEnvStateEnvironment_RetrieveIntegerPtr) dlsym(hLibrary, "libmcenv_stateenvironment_retrieveinteger");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_StateEnvironment_RetrieveInteger == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_StateEnvironment_RetrieveDouble = (PLibMCEnvStateEnvironment_RetrieveDoublePtr) GetProcAddress(hLibrary, "libmcenv_stateenvironment_retrievedouble");
		#else // _WIN32
		pWrapperTable->m_StateEnvironment_RetrieveDouble = (PLibMCEnvStateEnvironment_RetrieveDoublePtr) dlsym(hLibrary, "libmcenv_stateenvironment_retrievedouble");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_StateEnvironment_RetrieveDouble == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_StateEnvironment_RetrieveBool = (PLibMCEnvStateEnvironment_RetrieveBoolPtr) GetProcAddress(hLibrary, "libmcenv_stateenvironment_retrievebool");
		#else // _WIN32
		pWrapperTable->m_StateEnvironment_RetrieveBool = (PLibMCEnvStateEnvironment_RetrieveBoolPtr) dlsym(hLibrary, "libmcenv_stateenvironment_retrievebool");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_StateEnvironment_RetrieveBool == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_StateEnvironment_RetrieveSignal = (PLibMCEnvStateEnvironment_RetrieveSignalPtr) GetProcAddress(hLibrary, "libmcenv_stateenvironment_retrievesignal");
		#else // _WIN32
		pWrapperTable->m_StateEnvironment_RetrieveSignal = (PLibMCEnvStateEnvironment_RetrieveSignalPtr) dlsym(hLibrary, "libmcenv_stateenvironment_retrievesignal");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_StateEnvironment_RetrieveSignal == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_StateEnvironment_ClearStoredValue = (PLibMCEnvStateEnvironment_ClearStoredValuePtr) GetProcAddress(hLibrary, "libmcenv_stateenvironment_clearstoredvalue");
		#else // _WIN32
		pWrapperTable->m_StateEnvironment_ClearStoredValue = (PLibMCEnvStateEnvironment_ClearStoredValuePtr) dlsym(hLibrary, "libmcenv_stateenvironment_clearstoredvalue");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_StateEnvironment_ClearStoredValue == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_StateEnvironment_SetStringParameter = (PLibMCEnvStateEnvironment_SetStringParameterPtr) GetProcAddress(hLibrary, "libmcenv_stateenvironment_setstringparameter");
		#else // _WIN32
		pWrapperTable->m_StateEnvironment_SetStringParameter = (PLibMCEnvStateEnvironment_SetStringParameterPtr) dlsym(hLibrary, "libmcenv_stateenvironment_setstringparameter");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_StateEnvironment_SetStringParameter == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_StateEnvironment_SetUUIDParameter = (PLibMCEnvStateEnvironment_SetUUIDParameterPtr) GetProcAddress(hLibrary, "libmcenv_stateenvironment_setuuidparameter");
		#else // _WIN32
		pWrapperTable->m_StateEnvironment_SetUUIDParameter = (PLibMCEnvStateEnvironment_SetUUIDParameterPtr) dlsym(hLibrary, "libmcenv_stateenvironment_setuuidparameter");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_StateEnvironment_SetUUIDParameter == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_StateEnvironment_SetDoubleParameter = (PLibMCEnvStateEnvironment_SetDoubleParameterPtr) GetProcAddress(hLibrary, "libmcenv_stateenvironment_setdoubleparameter");
		#else // _WIN32
		pWrapperTable->m_StateEnvironment_SetDoubleParameter = (PLibMCEnvStateEnvironment_SetDoubleParameterPtr) dlsym(hLibrary, "libmcenv_stateenvironment_setdoubleparameter");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_StateEnvironment_SetDoubleParameter == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_StateEnvironment_SetIntegerParameter = (PLibMCEnvStateEnvironment_SetIntegerParameterPtr) GetProcAddress(hLibrary, "libmcenv_stateenvironment_setintegerparameter");
		#else // _WIN32
		pWrapperTable->m_StateEnvironment_SetIntegerParameter = (PLibMCEnvStateEnvironment_SetIntegerParameterPtr) dlsym(hLibrary, "libmcenv_stateenvironment_setintegerparameter");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_StateEnvironment_SetIntegerParameter == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_StateEnvironment_SetBoolParameter = (PLibMCEnvStateEnvironment_SetBoolParameterPtr) GetProcAddress(hLibrary, "libmcenv_stateenvironment_setboolparameter");
		#else // _WIN32
		pWrapperTable->m_StateEnvironment_SetBoolParameter = (PLibMCEnvStateEnvironment_SetBoolParameterPtr) dlsym(hLibrary, "libmcenv_stateenvironment_setboolparameter");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_StateEnvironment_SetBoolParameter == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_StateEnvironment_GetStringParameter = (PLibMCEnvStateEnvironment_GetStringParameterPtr) GetProcAddress(hLibrary, "libmcenv_stateenvironment_getstringparameter");
		#else // _WIN32
		pWrapperTable->m_StateEnvironment_GetStringParameter = (PLibMCEnvStateEnvironment_GetStringParameterPtr) dlsym(hLibrary, "libmcenv_stateenvironment_getstringparameter");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_StateEnvironment_GetStringParameter == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_StateEnvironment_GetUUIDParameter = (PLibMCEnvStateEnvironment_GetUUIDParameterPtr) GetProcAddress(hLibrary, "libmcenv_stateenvironment_getuuidparameter");
		#else // _WIN32
		pWrapperTable->m_StateEnvironment_GetUUIDParameter = (PLibMCEnvStateEnvironment_GetUUIDParameterPtr) dlsym(hLibrary, "libmcenv_stateenvironment_getuuidparameter");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_StateEnvironment_GetUUIDParameter == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_StateEnvironment_GetDoubleParameter = (PLibMCEnvStateEnvironment_GetDoubleParameterPtr) GetProcAddress(hLibrary, "libmcenv_stateenvironment_getdoubleparameter");
		#else // _WIN32
		pWrapperTable->m_StateEnvironment_GetDoubleParameter = (PLibMCEnvStateEnvironment_GetDoubleParameterPtr) dlsym(hLibrary, "libmcenv_stateenvironment_getdoubleparameter");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_StateEnvironment_GetDoubleParameter == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_StateEnvironment_GetIntegerParameter = (PLibMCEnvStateEnvironment_GetIntegerParameterPtr) GetProcAddress(hLibrary, "libmcenv_stateenvironment_getintegerparameter");
		#else // _WIN32
		pWrapperTable->m_StateEnvironment_GetIntegerParameter = (PLibMCEnvStateEnvironment_GetIntegerParameterPtr) dlsym(hLibrary, "libmcenv_stateenvironment_getintegerparameter");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_StateEnvironment_GetIntegerParameter == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_StateEnvironment_GetBoolParameter = (PLibMCEnvStateEnvironment_GetBoolParameterPtr) GetProcAddress(hLibrary, "libmcenv_stateenvironment_getboolparameter");
		#else // _WIN32
		pWrapperTable->m_StateEnvironment_GetBoolParameter = (PLibMCEnvStateEnvironment_GetBoolParameterPtr) dlsym(hLibrary, "libmcenv_stateenvironment_getboolparameter");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_StateEnvironment_GetBoolParameter == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GetVersion = (PLibMCEnvGetVersionPtr) GetProcAddress(hLibrary, "libmcenv_getversion");
		#else // _WIN32
		pWrapperTable->m_GetVersion = (PLibMCEnvGetVersionPtr) dlsym(hLibrary, "libmcenv_getversion");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GetVersion == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GetLastError = (PLibMCEnvGetLastErrorPtr) GetProcAddress(hLibrary, "libmcenv_getlasterror");
		#else // _WIN32
		pWrapperTable->m_GetLastError = (PLibMCEnvGetLastErrorPtr) dlsym(hLibrary, "libmcenv_getlasterror");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GetLastError == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ReleaseInstance = (PLibMCEnvReleaseInstancePtr) GetProcAddress(hLibrary, "libmcenv_releaseinstance");
		#else // _WIN32
		pWrapperTable->m_ReleaseInstance = (PLibMCEnvReleaseInstancePtr) dlsym(hLibrary, "libmcenv_releaseinstance");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ReleaseInstance == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_AcquireInstance = (PLibMCEnvAcquireInstancePtr) GetProcAddress(hLibrary, "libmcenv_acquireinstance");
		#else // _WIN32
		pWrapperTable->m_AcquireInstance = (PLibMCEnvAcquireInstancePtr) dlsym(hLibrary, "libmcenv_acquireinstance");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_AcquireInstance == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GetSymbolLookupMethod = (PLibMCEnvGetSymbolLookupMethodPtr) GetProcAddress(hLibrary, "libmcenv_getsymbollookupmethod");
		#else // _WIN32
		pWrapperTable->m_GetSymbolLookupMethod = (PLibMCEnvGetSymbolLookupMethodPtr) dlsym(hLibrary, "libmcenv_getsymbollookupmethod");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GetSymbolLookupMethod == nullptr)
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		pWrapperTable->m_LibraryHandle = hLibrary;
		return LIBMCENV_SUCCESS;
	}

	inline LibMCEnvResult CWrapper::loadWrapperTableFromSymbolLookupMethod(sLibMCEnvDynamicWrapperTable * pWrapperTable, void* pSymbolLookupMethod)
{
		if (pWrapperTable == nullptr)
			return LIBMCENV_ERROR_INVALIDPARAM;
		if (pSymbolLookupMethod == nullptr)
			return LIBMCENV_ERROR_INVALIDPARAM;
		
		typedef LibMCEnvResult(*SymbolLookupType)(const char*, void**);
		
		SymbolLookupType pLookup = (SymbolLookupType)pSymbolLookupMethod;
		
		LibMCEnvResult eLookupError = LIBMCENV_SUCCESS;
		eLookupError = (*pLookup)("libmcenv_toolpathlayer_getlayerdatauuid", (void**)&(pWrapperTable->m_ToolpathLayer_GetLayerDataUUID));
		if ( (eLookupError != 0) || (pWrapperTable->m_ToolpathLayer_GetLayerDataUUID == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_toolpathlayer_getsegmentcount", (void**)&(pWrapperTable->m_ToolpathLayer_GetSegmentCount));
		if ( (eLookupError != 0) || (pWrapperTable->m_ToolpathLayer_GetSegmentCount == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_toolpathlayer_getsegmentinfo", (void**)&(pWrapperTable->m_ToolpathLayer_GetSegmentInfo));
		if ( (eLookupError != 0) || (pWrapperTable->m_ToolpathLayer_GetSegmentInfo == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_toolpathlayer_getsegmentprofileuuid", (void**)&(pWrapperTable->m_ToolpathLayer_GetSegmentProfileUUID));
		if ( (eLookupError != 0) || (pWrapperTable->m_ToolpathLayer_GetSegmentProfileUUID == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_toolpathlayer_getsegmentpartuuid", (void**)&(pWrapperTable->m_ToolpathLayer_GetSegmentPartUUID));
		if ( (eLookupError != 0) || (pWrapperTable->m_ToolpathLayer_GetSegmentPartUUID == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_toolpathlayer_getsegmentpointdata", (void**)&(pWrapperTable->m_ToolpathLayer_GetSegmentPointData));
		if ( (eLookupError != 0) || (pWrapperTable->m_ToolpathLayer_GetSegmentPointData == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_toolpathlayer_getzvalue", (void**)&(pWrapperTable->m_ToolpathLayer_GetZValue));
		if ( (eLookupError != 0) || (pWrapperTable->m_ToolpathLayer_GetZValue == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_toolpathlayer_getunits", (void**)&(pWrapperTable->m_ToolpathLayer_GetUnits));
		if ( (eLookupError != 0) || (pWrapperTable->m_ToolpathLayer_GetUnits == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_toolpathaccessor_getuuid", (void**)&(pWrapperTable->m_ToolpathAccessor_GetUUID));
		if ( (eLookupError != 0) || (pWrapperTable->m_ToolpathAccessor_GetUUID == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_toolpathaccessor_getlayercount", (void**)&(pWrapperTable->m_ToolpathAccessor_GetLayerCount));
		if ( (eLookupError != 0) || (pWrapperTable->m_ToolpathAccessor_GetLayerCount == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_toolpathaccessor_loadlayer", (void**)&(pWrapperTable->m_ToolpathAccessor_LoadLayer));
		if ( (eLookupError != 0) || (pWrapperTable->m_ToolpathAccessor_LoadLayer == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_toolpathaccessor_getunits", (void**)&(pWrapperTable->m_ToolpathAccessor_GetUnits));
		if ( (eLookupError != 0) || (pWrapperTable->m_ToolpathAccessor_GetUnits == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_signaltrigger_cantrigger", (void**)&(pWrapperTable->m_SignalTrigger_CanTrigger));
		if ( (eLookupError != 0) || (pWrapperTable->m_SignalTrigger_CanTrigger == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_signaltrigger_trigger", (void**)&(pWrapperTable->m_SignalTrigger_Trigger));
		if ( (eLookupError != 0) || (pWrapperTable->m_SignalTrigger_Trigger == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_signaltrigger_waitforhandling", (void**)&(pWrapperTable->m_SignalTrigger_WaitForHandling));
		if ( (eLookupError != 0) || (pWrapperTable->m_SignalTrigger_WaitForHandling == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_signaltrigger_getname", (void**)&(pWrapperTable->m_SignalTrigger_GetName));
		if ( (eLookupError != 0) || (pWrapperTable->m_SignalTrigger_GetName == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_signaltrigger_getstatemachine", (void**)&(pWrapperTable->m_SignalTrigger_GetStateMachine));
		if ( (eLookupError != 0) || (pWrapperTable->m_SignalTrigger_GetStateMachine == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_signaltrigger_setstring", (void**)&(pWrapperTable->m_SignalTrigger_SetString));
		if ( (eLookupError != 0) || (pWrapperTable->m_SignalTrigger_SetString == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_signaltrigger_setuuid", (void**)&(pWrapperTable->m_SignalTrigger_SetUUID));
		if ( (eLookupError != 0) || (pWrapperTable->m_SignalTrigger_SetUUID == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_signaltrigger_setdouble", (void**)&(pWrapperTable->m_SignalTrigger_SetDouble));
		if ( (eLookupError != 0) || (pWrapperTable->m_SignalTrigger_SetDouble == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_signaltrigger_setinteger", (void**)&(pWrapperTable->m_SignalTrigger_SetInteger));
		if ( (eLookupError != 0) || (pWrapperTable->m_SignalTrigger_SetInteger == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_signaltrigger_setbool", (void**)&(pWrapperTable->m_SignalTrigger_SetBool));
		if ( (eLookupError != 0) || (pWrapperTable->m_SignalTrigger_SetBool == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_signaltrigger_getstringresult", (void**)&(pWrapperTable->m_SignalTrigger_GetStringResult));
		if ( (eLookupError != 0) || (pWrapperTable->m_SignalTrigger_GetStringResult == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_signaltrigger_getuuidresult", (void**)&(pWrapperTable->m_SignalTrigger_GetUUIDResult));
		if ( (eLookupError != 0) || (pWrapperTable->m_SignalTrigger_GetUUIDResult == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_signaltrigger_getdoubleresult", (void**)&(pWrapperTable->m_SignalTrigger_GetDoubleResult));
		if ( (eLookupError != 0) || (pWrapperTable->m_SignalTrigger_GetDoubleResult == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_signaltrigger_getintegerresult", (void**)&(pWrapperTable->m_SignalTrigger_GetIntegerResult));
		if ( (eLookupError != 0) || (pWrapperTable->m_SignalTrigger_GetIntegerResult == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_signaltrigger_getboolresult", (void**)&(pWrapperTable->m_SignalTrigger_GetBoolResult));
		if ( (eLookupError != 0) || (pWrapperTable->m_SignalTrigger_GetBoolResult == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_signalhandler_signalhandled", (void**)&(pWrapperTable->m_SignalHandler_SignalHandled));
		if ( (eLookupError != 0) || (pWrapperTable->m_SignalHandler_SignalHandled == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_signalhandler_getname", (void**)&(pWrapperTable->m_SignalHandler_GetName));
		if ( (eLookupError != 0) || (pWrapperTable->m_SignalHandler_GetName == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_signalhandler_getsignalid", (void**)&(pWrapperTable->m_SignalHandler_GetSignalID));
		if ( (eLookupError != 0) || (pWrapperTable->m_SignalHandler_GetSignalID == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_signalhandler_getstatemachine", (void**)&(pWrapperTable->m_SignalHandler_GetStateMachine));
		if ( (eLookupError != 0) || (pWrapperTable->m_SignalHandler_GetStateMachine == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_signalhandler_getstring", (void**)&(pWrapperTable->m_SignalHandler_GetString));
		if ( (eLookupError != 0) || (pWrapperTable->m_SignalHandler_GetString == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_signalhandler_getuuid", (void**)&(pWrapperTable->m_SignalHandler_GetUUID));
		if ( (eLookupError != 0) || (pWrapperTable->m_SignalHandler_GetUUID == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_signalhandler_getdouble", (void**)&(pWrapperTable->m_SignalHandler_GetDouble));
		if ( (eLookupError != 0) || (pWrapperTable->m_SignalHandler_GetDouble == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_signalhandler_getinteger", (void**)&(pWrapperTable->m_SignalHandler_GetInteger));
		if ( (eLookupError != 0) || (pWrapperTable->m_SignalHandler_GetInteger == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_signalhandler_getbool", (void**)&(pWrapperTable->m_SignalHandler_GetBool));
		if ( (eLookupError != 0) || (pWrapperTable->m_SignalHandler_GetBool == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_signalhandler_setstringresult", (void**)&(pWrapperTable->m_SignalHandler_SetStringResult));
		if ( (eLookupError != 0) || (pWrapperTable->m_SignalHandler_SetStringResult == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_signalhandler_setuuidresult", (void**)&(pWrapperTable->m_SignalHandler_SetUUIDResult));
		if ( (eLookupError != 0) || (pWrapperTable->m_SignalHandler_SetUUIDResult == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_signalhandler_setdoubleresult", (void**)&(pWrapperTable->m_SignalHandler_SetDoubleResult));
		if ( (eLookupError != 0) || (pWrapperTable->m_SignalHandler_SetDoubleResult == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_signalhandler_setintegerresult", (void**)&(pWrapperTable->m_SignalHandler_SetIntegerResult));
		if ( (eLookupError != 0) || (pWrapperTable->m_SignalHandler_SetIntegerResult == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_signalhandler_setboolresult", (void**)&(pWrapperTable->m_SignalHandler_SetBoolResult));
		if ( (eLookupError != 0) || (pWrapperTable->m_SignalHandler_SetBoolResult == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_stateenvironment_createsignal", (void**)&(pWrapperTable->m_StateEnvironment_CreateSignal));
		if ( (eLookupError != 0) || (pWrapperTable->m_StateEnvironment_CreateSignal == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_stateenvironment_waitforsignal", (void**)&(pWrapperTable->m_StateEnvironment_WaitForSignal));
		if ( (eLookupError != 0) || (pWrapperTable->m_StateEnvironment_WaitForSignal == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_stateenvironment_getdriverlibrary", (void**)&(pWrapperTable->m_StateEnvironment_GetDriverLibrary));
		if ( (eLookupError != 0) || (pWrapperTable->m_StateEnvironment_GetDriverLibrary == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_stateenvironment_createdriveraccess", (void**)&(pWrapperTable->m_StateEnvironment_CreateDriverAccess));
		if ( (eLookupError != 0) || (pWrapperTable->m_StateEnvironment_CreateDriverAccess == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_stateenvironment_loadtoolpath", (void**)&(pWrapperTable->m_StateEnvironment_LoadToolpath));
		if ( (eLookupError != 0) || (pWrapperTable->m_StateEnvironment_LoadToolpath == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_stateenvironment_unloadtoolpath", (void**)&(pWrapperTable->m_StateEnvironment_UnloadToolpath));
		if ( (eLookupError != 0) || (pWrapperTable->m_StateEnvironment_UnloadToolpath == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_stateenvironment_unloadalltoolpathes", (void**)&(pWrapperTable->m_StateEnvironment_UnloadAllToolpathes));
		if ( (eLookupError != 0) || (pWrapperTable->m_StateEnvironment_UnloadAllToolpathes == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_stateenvironment_createtoolpathaccessor", (void**)&(pWrapperTable->m_StateEnvironment_CreateToolpathAccessor));
		if ( (eLookupError != 0) || (pWrapperTable->m_StateEnvironment_CreateToolpathAccessor == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_stateenvironment_toolpathisloaded", (void**)&(pWrapperTable->m_StateEnvironment_ToolpathIsLoaded));
		if ( (eLookupError != 0) || (pWrapperTable->m_StateEnvironment_ToolpathIsLoaded == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_stateenvironment_setnextstate", (void**)&(pWrapperTable->m_StateEnvironment_SetNextState));
		if ( (eLookupError != 0) || (pWrapperTable->m_StateEnvironment_SetNextState == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_stateenvironment_logmessage", (void**)&(pWrapperTable->m_StateEnvironment_LogMessage));
		if ( (eLookupError != 0) || (pWrapperTable->m_StateEnvironment_LogMessage == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_stateenvironment_logwarning", (void**)&(pWrapperTable->m_StateEnvironment_LogWarning));
		if ( (eLookupError != 0) || (pWrapperTable->m_StateEnvironment_LogWarning == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_stateenvironment_loginfo", (void**)&(pWrapperTable->m_StateEnvironment_LogInfo));
		if ( (eLookupError != 0) || (pWrapperTable->m_StateEnvironment_LogInfo == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_stateenvironment_sleep", (void**)&(pWrapperTable->m_StateEnvironment_Sleep));
		if ( (eLookupError != 0) || (pWrapperTable->m_StateEnvironment_Sleep == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_stateenvironment_checkfortermination", (void**)&(pWrapperTable->m_StateEnvironment_CheckForTermination));
		if ( (eLookupError != 0) || (pWrapperTable->m_StateEnvironment_CheckForTermination == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_stateenvironment_storestring", (void**)&(pWrapperTable->m_StateEnvironment_StoreString));
		if ( (eLookupError != 0) || (pWrapperTable->m_StateEnvironment_StoreString == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_stateenvironment_storeuuid", (void**)&(pWrapperTable->m_StateEnvironment_StoreUUID));
		if ( (eLookupError != 0) || (pWrapperTable->m_StateEnvironment_StoreUUID == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_stateenvironment_storeinteger", (void**)&(pWrapperTable->m_StateEnvironment_StoreInteger));
		if ( (eLookupError != 0) || (pWrapperTable->m_StateEnvironment_StoreInteger == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_stateenvironment_storedouble", (void**)&(pWrapperTable->m_StateEnvironment_StoreDouble));
		if ( (eLookupError != 0) || (pWrapperTable->m_StateEnvironment_StoreDouble == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_stateenvironment_storebool", (void**)&(pWrapperTable->m_StateEnvironment_StoreBool));
		if ( (eLookupError != 0) || (pWrapperTable->m_StateEnvironment_StoreBool == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_stateenvironment_storesignal", (void**)&(pWrapperTable->m_StateEnvironment_StoreSignal));
		if ( (eLookupError != 0) || (pWrapperTable->m_StateEnvironment_StoreSignal == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_stateenvironment_retrievestring", (void**)&(pWrapperTable->m_StateEnvironment_RetrieveString));
		if ( (eLookupError != 0) || (pWrapperTable->m_StateEnvironment_RetrieveString == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_stateenvironment_retrieveuuid", (void**)&(pWrapperTable->m_StateEnvironment_RetrieveUUID));
		if ( (eLookupError != 0) || (pWrapperTable->m_StateEnvironment_RetrieveUUID == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_stateenvironment_retrieveinteger", (void**)&(pWrapperTable->m_StateEnvironment_RetrieveInteger));
		if ( (eLookupError != 0) || (pWrapperTable->m_StateEnvironment_RetrieveInteger == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_stateenvironment_retrievedouble", (void**)&(pWrapperTable->m_StateEnvironment_RetrieveDouble));
		if ( (eLookupError != 0) || (pWrapperTable->m_StateEnvironment_RetrieveDouble == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_stateenvironment_retrievebool", (void**)&(pWrapperTable->m_StateEnvironment_RetrieveBool));
		if ( (eLookupError != 0) || (pWrapperTable->m_StateEnvironment_RetrieveBool == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_stateenvironment_retrievesignal", (void**)&(pWrapperTable->m_StateEnvironment_RetrieveSignal));
		if ( (eLookupError != 0) || (pWrapperTable->m_StateEnvironment_RetrieveSignal == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_stateenvironment_clearstoredvalue", (void**)&(pWrapperTable->m_StateEnvironment_ClearStoredValue));
		if ( (eLookupError != 0) || (pWrapperTable->m_StateEnvironment_ClearStoredValue == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_stateenvironment_setstringparameter", (void**)&(pWrapperTable->m_StateEnvironment_SetStringParameter));
		if ( (eLookupError != 0) || (pWrapperTable->m_StateEnvironment_SetStringParameter == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_stateenvironment_setuuidparameter", (void**)&(pWrapperTable->m_StateEnvironment_SetUUIDParameter));
		if ( (eLookupError != 0) || (pWrapperTable->m_StateEnvironment_SetUUIDParameter == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_stateenvironment_setdoubleparameter", (void**)&(pWrapperTable->m_StateEnvironment_SetDoubleParameter));
		if ( (eLookupError != 0) || (pWrapperTable->m_StateEnvironment_SetDoubleParameter == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_stateenvironment_setintegerparameter", (void**)&(pWrapperTable->m_StateEnvironment_SetIntegerParameter));
		if ( (eLookupError != 0) || (pWrapperTable->m_StateEnvironment_SetIntegerParameter == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_stateenvironment_setboolparameter", (void**)&(pWrapperTable->m_StateEnvironment_SetBoolParameter));
		if ( (eLookupError != 0) || (pWrapperTable->m_StateEnvironment_SetBoolParameter == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_stateenvironment_getstringparameter", (void**)&(pWrapperTable->m_StateEnvironment_GetStringParameter));
		if ( (eLookupError != 0) || (pWrapperTable->m_StateEnvironment_GetStringParameter == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_stateenvironment_getuuidparameter", (void**)&(pWrapperTable->m_StateEnvironment_GetUUIDParameter));
		if ( (eLookupError != 0) || (pWrapperTable->m_StateEnvironment_GetUUIDParameter == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_stateenvironment_getdoubleparameter", (void**)&(pWrapperTable->m_StateEnvironment_GetDoubleParameter));
		if ( (eLookupError != 0) || (pWrapperTable->m_StateEnvironment_GetDoubleParameter == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_stateenvironment_getintegerparameter", (void**)&(pWrapperTable->m_StateEnvironment_GetIntegerParameter));
		if ( (eLookupError != 0) || (pWrapperTable->m_StateEnvironment_GetIntegerParameter == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_stateenvironment_getboolparameter", (void**)&(pWrapperTable->m_StateEnvironment_GetBoolParameter));
		if ( (eLookupError != 0) || (pWrapperTable->m_StateEnvironment_GetBoolParameter == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_getversion", (void**)&(pWrapperTable->m_GetVersion));
		if ( (eLookupError != 0) || (pWrapperTable->m_GetVersion == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_getlasterror", (void**)&(pWrapperTable->m_GetLastError));
		if ( (eLookupError != 0) || (pWrapperTable->m_GetLastError == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_releaseinstance", (void**)&(pWrapperTable->m_ReleaseInstance));
		if ( (eLookupError != 0) || (pWrapperTable->m_ReleaseInstance == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_acquireinstance", (void**)&(pWrapperTable->m_AcquireInstance));
		if ( (eLookupError != 0) || (pWrapperTable->m_AcquireInstance == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcenv_getsymbollookupmethod", (void**)&(pWrapperTable->m_GetSymbolLookupMethod));
		if ( (eLookupError != 0) || (pWrapperTable->m_GetSymbolLookupMethod == nullptr) )
			return LIBMCENV_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		return LIBMCENV_SUCCESS;
}

	
	
	/**
	 * Method definitions for class CBase
	 */
	
	/**
	 * Method definitions for class CToolpathLayer
	 */
	
	/**
	* CToolpathLayer::GetLayerDataUUID - Retrieves the layerdata's uuid
	* @return Returns the uuid value.
	*/
	std::string CToolpathLayer::GetLayerDataUUID()
	{
		LibMCEnv_uint32 bytesNeededUUID = 0;
		LibMCEnv_uint32 bytesWrittenUUID = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_ToolpathLayer_GetLayerDataUUID(m_pHandle, 0, &bytesNeededUUID, nullptr));
		std::vector<char> bufferUUID(bytesNeededUUID);
		CheckError(m_pWrapper->m_WrapperTable.m_ToolpathLayer_GetLayerDataUUID(m_pHandle, bytesNeededUUID, &bytesWrittenUUID, &bufferUUID[0]));
		
		return std::string(&bufferUUID[0]);
	}
	
	/**
	* CToolpathLayer::GetSegmentCount - Retrieves the count of segments.
	* @return Count
	*/
	LibMCEnv_uint32 CToolpathLayer::GetSegmentCount()
	{
		LibMCEnv_uint32 resultCount = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_ToolpathLayer_GetSegmentCount(m_pHandle, &resultCount));
		
		return resultCount;
	}
	
	/**
	* CToolpathLayer::GetSegmentInfo - Retrieves the segment type information .
	* @param[in] nIndex - Index. Must be between 0 and Count - 1.
	* @param[out] eType - Segment Type
	* @param[out] nPointCount - Point count of segment.
	*/
	void CToolpathLayer::GetSegmentInfo(const LibMCEnv_uint32 nIndex, eToolpathSegmentType & eType, LibMCEnv_uint32 & nPointCount)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_ToolpathLayer_GetSegmentInfo(m_pHandle, nIndex, &eType, &nPointCount));
	}
	
	/**
	* CToolpathLayer::GetSegmentProfileUUID - Retrieves the assigned segment profile uuid.
	* @param[in] nIndex - Index. Must be between 0 and Count - 1.
	* @return Segment Profile UUID
	*/
	std::string CToolpathLayer::GetSegmentProfileUUID(const LibMCEnv_uint32 nIndex)
	{
		LibMCEnv_uint32 bytesNeededProfileUUID = 0;
		LibMCEnv_uint32 bytesWrittenProfileUUID = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_ToolpathLayer_GetSegmentProfileUUID(m_pHandle, nIndex, 0, &bytesNeededProfileUUID, nullptr));
		std::vector<char> bufferProfileUUID(bytesNeededProfileUUID);
		CheckError(m_pWrapper->m_WrapperTable.m_ToolpathLayer_GetSegmentProfileUUID(m_pHandle, nIndex, bytesNeededProfileUUID, &bytesWrittenProfileUUID, &bufferProfileUUID[0]));
		
		return std::string(&bufferProfileUUID[0]);
	}
	
	/**
	* CToolpathLayer::GetSegmentPartUUID - Retrieves the assigned segment part uuid.
	* @param[in] nIndex - Index. Must be between 0 and Count - 1.
	* @return Segment Part UUID
	*/
	std::string CToolpathLayer::GetSegmentPartUUID(const LibMCEnv_uint32 nIndex)
	{
		LibMCEnv_uint32 bytesNeededPartUUID = 0;
		LibMCEnv_uint32 bytesWrittenPartUUID = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_ToolpathLayer_GetSegmentPartUUID(m_pHandle, nIndex, 0, &bytesNeededPartUUID, nullptr));
		std::vector<char> bufferPartUUID(bytesNeededPartUUID);
		CheckError(m_pWrapper->m_WrapperTable.m_ToolpathLayer_GetSegmentPartUUID(m_pHandle, nIndex, bytesNeededPartUUID, &bytesWrittenPartUUID, &bufferPartUUID[0]));
		
		return std::string(&bufferPartUUID[0]);
	}
	
	/**
	* CToolpathLayer::GetSegmentPointData - Retrieves the assigned segment point list. For type hatch, the points are taken pairwise.
	* @param[in] nIndex - Index. Must be between 0 and Count - 1.
	* @param[out] PointDataBuffer - The point data array. Positions are absolute in units.
	*/
	void CToolpathLayer::GetSegmentPointData(const LibMCEnv_uint32 nIndex, std::vector<sPosition2D> & PointDataBuffer)
	{
		LibMCEnv_uint64 elementsNeededPointData = 0;
		LibMCEnv_uint64 elementsWrittenPointData = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_ToolpathLayer_GetSegmentPointData(m_pHandle, nIndex, 0, &elementsNeededPointData, nullptr));
		PointDataBuffer.resize((size_t) elementsNeededPointData);
		CheckError(m_pWrapper->m_WrapperTable.m_ToolpathLayer_GetSegmentPointData(m_pHandle, nIndex, elementsNeededPointData, &elementsWrittenPointData, PointDataBuffer.data()));
	}
	
	/**
	* CToolpathLayer::GetZValue - Retrieves the layers Z Value in units.
	* @return Z Value of the layer in units.
	*/
	LibMCEnv_int32 CToolpathLayer::GetZValue()
	{
		LibMCEnv_int32 resultZValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_ToolpathLayer_GetZValue(m_pHandle, &resultZValue));
		
		return resultZValue;
	}
	
	/**
	* CToolpathLayer::GetUnits - Retrieves the toolpath units in mm.
	* @return Toolpath units.
	*/
	LibMCEnv_double CToolpathLayer::GetUnits()
	{
		LibMCEnv_double resultUnits = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_ToolpathLayer_GetUnits(m_pHandle, &resultUnits));
		
		return resultUnits;
	}
	
	/**
	 * Method definitions for class CToolpathAccessor
	 */
	
	/**
	* CToolpathAccessor::GetUUID - Returns Toolpath data UUID.
	* @return Returns toolpath data uuid.
	*/
	std::string CToolpathAccessor::GetUUID()
	{
		LibMCEnv_uint32 bytesNeededUUID = 0;
		LibMCEnv_uint32 bytesWrittenUUID = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_ToolpathAccessor_GetUUID(m_pHandle, 0, &bytesNeededUUID, nullptr));
		std::vector<char> bufferUUID(bytesNeededUUID);
		CheckError(m_pWrapper->m_WrapperTable.m_ToolpathAccessor_GetUUID(m_pHandle, bytesNeededUUID, &bytesWrittenUUID, &bufferUUID[0]));
		
		return std::string(&bufferUUID[0]);
	}
	
	/**
	* CToolpathAccessor::GetLayerCount - Returns layer count.
	* @return Returns layer count.
	*/
	LibMCEnv_uint32 CToolpathAccessor::GetLayerCount()
	{
		LibMCEnv_uint32 resultLayerCount = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_ToolpathAccessor_GetLayerCount(m_pHandle, &resultLayerCount));
		
		return resultLayerCount;
	}
	
	/**
	* CToolpathAccessor::LoadLayer - Reads and returns a layer object.
	* @param[in] nLayerIndex - Layer Index.
	* @return Toolpath layer object.
	*/
	PToolpathLayer CToolpathAccessor::LoadLayer(const LibMCEnv_uint32 nLayerIndex)
	{
		LibMCEnvHandle hLayerData = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_ToolpathAccessor_LoadLayer(m_pHandle, nLayerIndex, &hLayerData));
		
		if (!hLayerData) {
			CheckError(LIBMCENV_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CToolpathLayer>(m_pWrapper, hLayerData);
	}
	
	/**
	* CToolpathAccessor::GetUnits - Retrieves the toolpath units in mm.
	* @return Toolpath units.
	*/
	LibMCEnv_double CToolpathAccessor::GetUnits()
	{
		LibMCEnv_double resultUnits = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_ToolpathAccessor_GetUnits(m_pHandle, &resultUnits));
		
		return resultUnits;
	}
	
	/**
	 * Method definitions for class CSignalTrigger
	 */
	
	/**
	* CSignalTrigger::CanTrigger - Returns, if signal channel is available.
	* @return Returns true, if signal channel is available.
	*/
	bool CSignalTrigger::CanTrigger()
	{
		bool resultChannelIsAvailable = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_SignalTrigger_CanTrigger(m_pHandle, &resultChannelIsAvailable));
		
		return resultChannelIsAvailable;
	}
	
	/**
	* CSignalTrigger::Trigger - Triggers a signal, if signal channel is available.
	*/
	void CSignalTrigger::Trigger()
	{
		CheckError(m_pWrapper->m_WrapperTable.m_SignalTrigger_Trigger(m_pHandle));
	}
	
	/**
	* CSignalTrigger::WaitForHandling - Waits until the signal is reset.
	* @param[in] nTimeOut - Timeout in Milliseconds. 0 for Immediate return.
	* @return Flag if signal handling has been handled.
	*/
	bool CSignalTrigger::WaitForHandling(const LibMCEnv_uint32 nTimeOut)
	{
		bool resultSuccess = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_SignalTrigger_WaitForHandling(m_pHandle, nTimeOut, &resultSuccess));
		
		return resultSuccess;
	}
	
	/**
	* CSignalTrigger::GetName - Returns the signal name.
	* @return Name Of Signal
	*/
	std::string CSignalTrigger::GetName()
	{
		LibMCEnv_uint32 bytesNeededSignalName = 0;
		LibMCEnv_uint32 bytesWrittenSignalName = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_SignalTrigger_GetName(m_pHandle, 0, &bytesNeededSignalName, nullptr));
		std::vector<char> bufferSignalName(bytesNeededSignalName);
		CheckError(m_pWrapper->m_WrapperTable.m_SignalTrigger_GetName(m_pHandle, bytesNeededSignalName, &bytesWrittenSignalName, &bufferSignalName[0]));
		
		return std::string(&bufferSignalName[0]);
	}
	
	/**
	* CSignalTrigger::GetStateMachine - Returns the signal state machine instance.
	* @return Name Of State Machine
	*/
	std::string CSignalTrigger::GetStateMachine()
	{
		LibMCEnv_uint32 bytesNeededStateMachineName = 0;
		LibMCEnv_uint32 bytesWrittenStateMachineName = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_SignalTrigger_GetStateMachine(m_pHandle, 0, &bytesNeededStateMachineName, nullptr));
		std::vector<char> bufferStateMachineName(bytesNeededStateMachineName);
		CheckError(m_pWrapper->m_WrapperTable.m_SignalTrigger_GetStateMachine(m_pHandle, bytesNeededStateMachineName, &bytesWrittenStateMachineName, &bufferStateMachineName[0]));
		
		return std::string(&bufferStateMachineName[0]);
	}
	
	/**
	* CSignalTrigger::SetString - sets a string value
	* @param[in] sName - Name
	* @param[in] sValue - Value
	*/
	void CSignalTrigger::SetString(const std::string & sName, const std::string & sValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_SignalTrigger_SetString(m_pHandle, sName.c_str(), sValue.c_str()));
	}
	
	/**
	* CSignalTrigger::SetUUID - sets a uuid value
	* @param[in] sName - Name
	* @param[in] sValue - Value
	*/
	void CSignalTrigger::SetUUID(const std::string & sName, const std::string & sValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_SignalTrigger_SetUUID(m_pHandle, sName.c_str(), sValue.c_str()));
	}
	
	/**
	* CSignalTrigger::SetDouble - sets a double
	* @param[in] sName - Name
	* @param[in] dValue - Value
	*/
	void CSignalTrigger::SetDouble(const std::string & sName, const LibMCEnv_double dValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_SignalTrigger_SetDouble(m_pHandle, sName.c_str(), dValue));
	}
	
	/**
	* CSignalTrigger::SetInteger - sets an int.
	* @param[in] sName - Name
	* @param[in] nValue - Value
	*/
	void CSignalTrigger::SetInteger(const std::string & sName, const LibMCEnv_int64 nValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_SignalTrigger_SetInteger(m_pHandle, sName.c_str(), nValue));
	}
	
	/**
	* CSignalTrigger::SetBool - sets a bool
	* @param[in] sName - Name
	* @param[in] bValue - Value
	*/
	void CSignalTrigger::SetBool(const std::string & sName, const bool bValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_SignalTrigger_SetBool(m_pHandle, sName.c_str(), bValue));
	}
	
	/**
	* CSignalTrigger::GetStringResult - returns a string value of the result
	* @param[in] sName - Name
	* @return Value
	*/
	std::string CSignalTrigger::GetStringResult(const std::string & sName)
	{
		LibMCEnv_uint32 bytesNeededValue = 0;
		LibMCEnv_uint32 bytesWrittenValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_SignalTrigger_GetStringResult(m_pHandle, sName.c_str(), 0, &bytesNeededValue, nullptr));
		std::vector<char> bufferValue(bytesNeededValue);
		CheckError(m_pWrapper->m_WrapperTable.m_SignalTrigger_GetStringResult(m_pHandle, sName.c_str(), bytesNeededValue, &bytesWrittenValue, &bufferValue[0]));
		
		return std::string(&bufferValue[0]);
	}
	
	/**
	* CSignalTrigger::GetUUIDResult - returns a uuid value of the result
	* @param[in] sName - Name
	* @return Value
	*/
	std::string CSignalTrigger::GetUUIDResult(const std::string & sName)
	{
		LibMCEnv_uint32 bytesNeededValue = 0;
		LibMCEnv_uint32 bytesWrittenValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_SignalTrigger_GetUUIDResult(m_pHandle, sName.c_str(), 0, &bytesNeededValue, nullptr));
		std::vector<char> bufferValue(bytesNeededValue);
		CheckError(m_pWrapper->m_WrapperTable.m_SignalTrigger_GetUUIDResult(m_pHandle, sName.c_str(), bytesNeededValue, &bytesWrittenValue, &bufferValue[0]));
		
		return std::string(&bufferValue[0]);
	}
	
	/**
	* CSignalTrigger::GetDoubleResult - returns a string value of the result
	* @param[in] sName - Name
	* @return Value
	*/
	LibMCEnv_double CSignalTrigger::GetDoubleResult(const std::string & sName)
	{
		LibMCEnv_double resultValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_SignalTrigger_GetDoubleResult(m_pHandle, sName.c_str(), &resultValue));
		
		return resultValue;
	}
	
	/**
	* CSignalTrigger::GetIntegerResult - returns an int value of the result.
	* @param[in] sName - Name
	* @return Value
	*/
	LibMCEnv_int64 CSignalTrigger::GetIntegerResult(const std::string & sName)
	{
		LibMCEnv_int64 resultValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_SignalTrigger_GetIntegerResult(m_pHandle, sName.c_str(), &resultValue));
		
		return resultValue;
	}
	
	/**
	* CSignalTrigger::GetBoolResult - returns a bool value of the result.
	* @param[in] sName - Name
	* @return Value
	*/
	bool CSignalTrigger::GetBoolResult(const std::string & sName)
	{
		bool resultValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_SignalTrigger_GetBoolResult(m_pHandle, sName.c_str(), &resultValue));
		
		return resultValue;
	}
	
	/**
	 * Method definitions for class CSignalHandler
	 */
	
	/**
	* CSignalHandler::SignalHandled - Marks signal as handled and resets signal channel.
	*/
	void CSignalHandler::SignalHandled()
	{
		CheckError(m_pWrapper->m_WrapperTable.m_SignalHandler_SignalHandled(m_pHandle));
	}
	
	/**
	* CSignalHandler::GetName - Returns the signal name.
	* @return Name Of Signal
	*/
	std::string CSignalHandler::GetName()
	{
		LibMCEnv_uint32 bytesNeededSignalName = 0;
		LibMCEnv_uint32 bytesWrittenSignalName = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_SignalHandler_GetName(m_pHandle, 0, &bytesNeededSignalName, nullptr));
		std::vector<char> bufferSignalName(bytesNeededSignalName);
		CheckError(m_pWrapper->m_WrapperTable.m_SignalHandler_GetName(m_pHandle, bytesNeededSignalName, &bytesWrittenSignalName, &bufferSignalName[0]));
		
		return std::string(&bufferSignalName[0]);
	}
	
	/**
	* CSignalHandler::GetSignalID - Returns the signal id.
	* @return Signal Identifier
	*/
	std::string CSignalHandler::GetSignalID()
	{
		LibMCEnv_uint32 bytesNeededSignalID = 0;
		LibMCEnv_uint32 bytesWrittenSignalID = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_SignalHandler_GetSignalID(m_pHandle, 0, &bytesNeededSignalID, nullptr));
		std::vector<char> bufferSignalID(bytesNeededSignalID);
		CheckError(m_pWrapper->m_WrapperTable.m_SignalHandler_GetSignalID(m_pHandle, bytesNeededSignalID, &bytesWrittenSignalID, &bufferSignalID[0]));
		
		return std::string(&bufferSignalID[0]);
	}
	
	/**
	* CSignalHandler::GetStateMachine - Returns the signal state machine instance.
	* @return Name Of State Machine
	*/
	std::string CSignalHandler::GetStateMachine()
	{
		LibMCEnv_uint32 bytesNeededStateMachineName = 0;
		LibMCEnv_uint32 bytesWrittenStateMachineName = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_SignalHandler_GetStateMachine(m_pHandle, 0, &bytesNeededStateMachineName, nullptr));
		std::vector<char> bufferStateMachineName(bytesNeededStateMachineName);
		CheckError(m_pWrapper->m_WrapperTable.m_SignalHandler_GetStateMachine(m_pHandle, bytesNeededStateMachineName, &bytesWrittenStateMachineName, &bufferStateMachineName[0]));
		
		return std::string(&bufferStateMachineName[0]);
	}
	
	/**
	* CSignalHandler::GetString - gets a string value
	* @param[in] sName - Name
	* @return Value
	*/
	std::string CSignalHandler::GetString(const std::string & sName)
	{
		LibMCEnv_uint32 bytesNeededValue = 0;
		LibMCEnv_uint32 bytesWrittenValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_SignalHandler_GetString(m_pHandle, sName.c_str(), 0, &bytesNeededValue, nullptr));
		std::vector<char> bufferValue(bytesNeededValue);
		CheckError(m_pWrapper->m_WrapperTable.m_SignalHandler_GetString(m_pHandle, sName.c_str(), bytesNeededValue, &bytesWrittenValue, &bufferValue[0]));
		
		return std::string(&bufferValue[0]);
	}
	
	/**
	* CSignalHandler::GetUUID - gets a uuid value
	* @param[in] sName - Name
	* @return Value
	*/
	std::string CSignalHandler::GetUUID(const std::string & sName)
	{
		LibMCEnv_uint32 bytesNeededValue = 0;
		LibMCEnv_uint32 bytesWrittenValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_SignalHandler_GetUUID(m_pHandle, sName.c_str(), 0, &bytesNeededValue, nullptr));
		std::vector<char> bufferValue(bytesNeededValue);
		CheckError(m_pWrapper->m_WrapperTable.m_SignalHandler_GetUUID(m_pHandle, sName.c_str(), bytesNeededValue, &bytesWrittenValue, &bufferValue[0]));
		
		return std::string(&bufferValue[0]);
	}
	
	/**
	* CSignalHandler::GetDouble - gets a double
	* @param[in] sName - Name
	* @return Value
	*/
	LibMCEnv_double CSignalHandler::GetDouble(const std::string & sName)
	{
		LibMCEnv_double resultValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_SignalHandler_GetDouble(m_pHandle, sName.c_str(), &resultValue));
		
		return resultValue;
	}
	
	/**
	* CSignalHandler::GetInteger - gets an int.
	* @param[in] sName - Name
	* @return Value
	*/
	LibMCEnv_int64 CSignalHandler::GetInteger(const std::string & sName)
	{
		LibMCEnv_int64 resultValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_SignalHandler_GetInteger(m_pHandle, sName.c_str(), &resultValue));
		
		return resultValue;
	}
	
	/**
	* CSignalHandler::GetBool - gets a bool
	* @param[in] sName - Name
	* @return Value
	*/
	bool CSignalHandler::GetBool(const std::string & sName)
	{
		bool resultValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_SignalHandler_GetBool(m_pHandle, sName.c_str(), &resultValue));
		
		return resultValue;
	}
	
	/**
	* CSignalHandler::SetStringResult - returns a string value of the result
	* @param[in] sName - Name
	* @param[in] sValue - Value
	*/
	void CSignalHandler::SetStringResult(const std::string & sName, const std::string & sValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_SignalHandler_SetStringResult(m_pHandle, sName.c_str(), sValue.c_str()));
	}
	
	/**
	* CSignalHandler::SetUUIDResult - returns a uuid value of the result
	* @param[in] sName - Name
	* @param[in] sValue - Value
	*/
	void CSignalHandler::SetUUIDResult(const std::string & sName, const std::string & sValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_SignalHandler_SetUUIDResult(m_pHandle, sName.c_str(), sValue.c_str()));
	}
	
	/**
	* CSignalHandler::SetDoubleResult - returns a string value of the result
	* @param[in] sName - Name
	* @param[in] dValue - Value
	*/
	void CSignalHandler::SetDoubleResult(const std::string & sName, const LibMCEnv_double dValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_SignalHandler_SetDoubleResult(m_pHandle, sName.c_str(), dValue));
	}
	
	/**
	* CSignalHandler::SetIntegerResult - sets an int.
	* @param[in] sName - Name
	* @param[in] nValue - Value
	*/
	void CSignalHandler::SetIntegerResult(const std::string & sName, const LibMCEnv_int64 nValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_SignalHandler_SetIntegerResult(m_pHandle, sName.c_str(), nValue));
	}
	
	/**
	* CSignalHandler::SetBoolResult - sets a bool
	* @param[in] sName - Name
	* @param[in] bValue - Value
	*/
	void CSignalHandler::SetBoolResult(const std::string & sName, const bool bValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_SignalHandler_SetBoolResult(m_pHandle, sName.c_str(), bValue));
	}
	
	/**
	 * Method definitions for class CStateEnvironment
	 */
	
	/**
	* CStateEnvironment::CreateSignal - creates a signal object to trigger.
	* @param[in] sMachineInstance - State machine instance name
	* @param[in] sSignalName - Name Of signal channel.
	* @return Signal trigger object.
	*/
	PSignalTrigger CStateEnvironment::CreateSignal(const std::string & sMachineInstance, const std::string & sSignalName)
	{
		LibMCEnvHandle hSignalInstance = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_StateEnvironment_CreateSignal(m_pHandle, sMachineInstance.c_str(), sSignalName.c_str(), &hSignalInstance));
		
		if (!hSignalInstance) {
			CheckError(LIBMCENV_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CSignalTrigger>(m_pWrapper, hSignalInstance);
	}
	
	/**
	* CStateEnvironment::WaitForSignal - waits for a signal.
	* @param[in] sSignalName - Name Of Signal
	* @param[in] nTimeOut - Timeout in Milliseconds. 0 for Immediate return.
	* @param[out] pHandlerInstance - Signal object. If Success is false, the Signal Handler Object will be null.
	* @return Signal has been triggered
	*/
	bool CStateEnvironment::WaitForSignal(const std::string & sSignalName, const LibMCEnv_uint32 nTimeOut, PSignalHandler & pHandlerInstance)
	{
		LibMCEnvHandle hHandlerInstance = nullptr;
		bool resultSuccess = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_StateEnvironment_WaitForSignal(m_pHandle, sSignalName.c_str(), nTimeOut, &hHandlerInstance, &resultSuccess));
		if (hHandlerInstance) {
			pHandlerInstance = std::make_shared<CSignalHandler>(m_pWrapper, hHandlerInstance);
		} else {
			pHandlerInstance = nullptr;
		}
		
		return resultSuccess;
	}
	
	/**
	* CStateEnvironment::GetDriverLibrary - Returns the driver type and library lookup for a specific registered driver.
	* @param[in] sDriverName - Name identifier of the driver.
	* @param[out] sDriverType - returns type identifier of the driver.
	* @param[out] pDriverLookup - GetProcAddress Handle of the driver.
	*/
	void CStateEnvironment::GetDriverLibrary(const std::string & sDriverName, std::string & sDriverType, LibMCEnv_pvoid & pDriverLookup)
	{
		LibMCEnv_uint32 bytesNeededDriverType = 0;
		LibMCEnv_uint32 bytesWrittenDriverType = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_StateEnvironment_GetDriverLibrary(m_pHandle, sDriverName.c_str(), 0, &bytesNeededDriverType, nullptr, &pDriverLookup));
		std::vector<char> bufferDriverType(bytesNeededDriverType);
		CheckError(m_pWrapper->m_WrapperTable.m_StateEnvironment_GetDriverLibrary(m_pHandle, sDriverName.c_str(), bytesNeededDriverType, &bytesWrittenDriverType, &bufferDriverType[0], &pDriverLookup));
		sDriverType = std::string(&bufferDriverType[0]);
	}
	
	/**
	* CStateEnvironment::CreateDriverAccess - Accesses and locks a driver for the execution of the current state.
	* @param[in] sDriverName - Name identifier of the driver.
	* @param[out] pDriverHandle - Handle of the driver.
	*/
	void CStateEnvironment::CreateDriverAccess(const std::string & sDriverName, LibMCEnv_pvoid & pDriverHandle)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_StateEnvironment_CreateDriverAccess(m_pHandle, sDriverName.c_str(), &pDriverHandle));
	}
	
	/**
	* CStateEnvironment::LoadToolpath - Loads a toolpath from disk into memory.
	* @param[in] sToolpathUUID - UUID of the toolpath entity.
	*/
	void CStateEnvironment::LoadToolpath(const std::string & sToolpathUUID)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_StateEnvironment_LoadToolpath(m_pHandle, sToolpathUUID.c_str()));
	}
	
	/**
	* CStateEnvironment::UnloadToolpath - unloads the a toolpath. It MUST have been loaded to memory before with LoadToolpath.
	* @param[in] sToolpathUUID - UUID of the toolpath entity.
	*/
	void CStateEnvironment::UnloadToolpath(const std::string & sToolpathUUID)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_StateEnvironment_UnloadToolpath(m_pHandle, sToolpathUUID.c_str()));
	}
	
	/**
	* CStateEnvironment::UnloadAllToolpathes - unloads all toolpath in memory to clean up
	*/
	void CStateEnvironment::UnloadAllToolpathes()
	{
		CheckError(m_pWrapper->m_WrapperTable.m_StateEnvironment_UnloadAllToolpathes(m_pHandle));
	}
	
	/**
	* CStateEnvironment::CreateToolpathAccessor - creates an accessor object for a toolpath, if loaded to memory before.
	* @param[in] sToolpathUUID - UUID of the toolpath entity.
	* @return UUID of the toolpath entity.
	*/
	PToolpathAccessor CStateEnvironment::CreateToolpathAccessor(const std::string & sToolpathUUID)
	{
		LibMCEnvHandle hToolpathInstance = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_StateEnvironment_CreateToolpathAccessor(m_pHandle, sToolpathUUID.c_str(), &hToolpathInstance));
		
		if (!hToolpathInstance) {
			CheckError(LIBMCENV_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CToolpathAccessor>(m_pWrapper, hToolpathInstance);
	}
	
	/**
	* CStateEnvironment::ToolpathIsLoaded - checks, if a toolpath object is loaded to memory.
	* @param[in] sToolpathUUID - UUID of the toolpath entity.
	* @return returns if toolpath is loaded.
	*/
	bool CStateEnvironment::ToolpathIsLoaded(const std::string & sToolpathUUID)
	{
		bool resultIsLoaded = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_StateEnvironment_ToolpathIsLoaded(m_pHandle, sToolpathUUID.c_str(), &resultIsLoaded));
		
		return resultIsLoaded;
	}
	
	/**
	* CStateEnvironment::SetNextState - sets the next state
	* @param[in] sStateName - Name of next state
	*/
	void CStateEnvironment::SetNextState(const std::string & sStateName)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_StateEnvironment_SetNextState(m_pHandle, sStateName.c_str()));
	}
	
	/**
	* CStateEnvironment::LogMessage - logs a string as message
	* @param[in] sLogString - String to Log
	*/
	void CStateEnvironment::LogMessage(const std::string & sLogString)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_StateEnvironment_LogMessage(m_pHandle, sLogString.c_str()));
	}
	
	/**
	* CStateEnvironment::LogWarning - logs a string as warning
	* @param[in] sLogString - String to Log
	*/
	void CStateEnvironment::LogWarning(const std::string & sLogString)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_StateEnvironment_LogWarning(m_pHandle, sLogString.c_str()));
	}
	
	/**
	* CStateEnvironment::LogInfo - logs a string as info
	* @param[in] sLogString - String to Log
	*/
	void CStateEnvironment::LogInfo(const std::string & sLogString)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_StateEnvironment_LogInfo(m_pHandle, sLogString.c_str()));
	}
	
	/**
	* CStateEnvironment::Sleep - Puts the current instance to sleep for a definite amount of time. MUST be used instead of a blocking sleep call.
	* @param[in] nDelay - Milliseconds to sleeps
	*/
	void CStateEnvironment::Sleep(const LibMCEnv_uint32 nDelay)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_StateEnvironment_Sleep(m_pHandle, nDelay));
	}
	
	/**
	* CStateEnvironment::CheckForTermination - checks environment for termination signal. MUST be called frequently in longer-running operations.
	* @return Returns if termination shall appear
	*/
	bool CStateEnvironment::CheckForTermination()
	{
		bool resultShallTerminate = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_StateEnvironment_CheckForTermination(m_pHandle, &resultShallTerminate));
		
		return resultShallTerminate;
	}
	
	/**
	* CStateEnvironment::StoreString - stores a string in the current state machine
	* @param[in] sName - Name
	* @param[in] sValue - Value
	*/
	void CStateEnvironment::StoreString(const std::string & sName, const std::string & sValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_StateEnvironment_StoreString(m_pHandle, sName.c_str(), sValue.c_str()));
	}
	
	/**
	* CStateEnvironment::StoreUUID - stores a uuid in the current state machine
	* @param[in] sName - Name
	* @param[in] sValue - Value
	*/
	void CStateEnvironment::StoreUUID(const std::string & sName, const std::string & sValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_StateEnvironment_StoreUUID(m_pHandle, sName.c_str(), sValue.c_str()));
	}
	
	/**
	* CStateEnvironment::StoreInteger - stores a string in the current state machine
	* @param[in] sName - Name
	* @param[in] nValue - Value
	*/
	void CStateEnvironment::StoreInteger(const std::string & sName, const LibMCEnv_int64 nValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_StateEnvironment_StoreInteger(m_pHandle, sName.c_str(), nValue));
	}
	
	/**
	* CStateEnvironment::StoreDouble - stores a string in the current state machine
	* @param[in] sName - Name
	* @param[in] dValue - Value
	*/
	void CStateEnvironment::StoreDouble(const std::string & sName, const LibMCEnv_double dValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_StateEnvironment_StoreDouble(m_pHandle, sName.c_str(), dValue));
	}
	
	/**
	* CStateEnvironment::StoreBool - stores a string in the current state machine
	* @param[in] sName - Name
	* @param[in] bValue - Value
	*/
	void CStateEnvironment::StoreBool(const std::string & sName, const bool bValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_StateEnvironment_StoreBool(m_pHandle, sName.c_str(), bValue));
	}
	
	/**
	* CStateEnvironment::StoreSignal - stores a signal handler in the current state machine
	* @param[in] sName - Name
	* @param[in] pHandler - Signal handler to store.
	*/
	void CStateEnvironment::StoreSignal(const std::string & sName, classParam<CSignalHandler> pHandler)
	{
		LibMCEnvHandle hHandler = pHandler.GetHandle();
		CheckError(m_pWrapper->m_WrapperTable.m_StateEnvironment_StoreSignal(m_pHandle, sName.c_str(), hHandler));
	}
	
	/**
	* CStateEnvironment::RetrieveString - retrieves a string from the current state machine. Fails if value has not been stored before.
	* @param[in] sName - Name
	* @return Value
	*/
	std::string CStateEnvironment::RetrieveString(const std::string & sName)
	{
		LibMCEnv_uint32 bytesNeededValue = 0;
		LibMCEnv_uint32 bytesWrittenValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_StateEnvironment_RetrieveString(m_pHandle, sName.c_str(), 0, &bytesNeededValue, nullptr));
		std::vector<char> bufferValue(bytesNeededValue);
		CheckError(m_pWrapper->m_WrapperTable.m_StateEnvironment_RetrieveString(m_pHandle, sName.c_str(), bytesNeededValue, &bytesWrittenValue, &bufferValue[0]));
		
		return std::string(&bufferValue[0]);
	}
	
	/**
	* CStateEnvironment::RetrieveUUID - retrieves a uuid from the current state machine. Fails if value has not been stored before.
	* @param[in] sName - Name
	* @return Value
	*/
	std::string CStateEnvironment::RetrieveUUID(const std::string & sName)
	{
		LibMCEnv_uint32 bytesNeededValue = 0;
		LibMCEnv_uint32 bytesWrittenValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_StateEnvironment_RetrieveUUID(m_pHandle, sName.c_str(), 0, &bytesNeededValue, nullptr));
		std::vector<char> bufferValue(bytesNeededValue);
		CheckError(m_pWrapper->m_WrapperTable.m_StateEnvironment_RetrieveUUID(m_pHandle, sName.c_str(), bytesNeededValue, &bytesWrittenValue, &bufferValue[0]));
		
		return std::string(&bufferValue[0]);
	}
	
	/**
	* CStateEnvironment::RetrieveInteger - retrieves a string from the current state machine. Fails if value has not been stored before.
	* @param[in] sName - Name
	* @return Value
	*/
	LibMCEnv_int64 CStateEnvironment::RetrieveInteger(const std::string & sName)
	{
		LibMCEnv_int64 resultValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_StateEnvironment_RetrieveInteger(m_pHandle, sName.c_str(), &resultValue));
		
		return resultValue;
	}
	
	/**
	* CStateEnvironment::RetrieveDouble - retrieves a string from the current state machine. Fails if value has not been stored before.
	* @param[in] sName - Name
	* @return Value
	*/
	LibMCEnv_double CStateEnvironment::RetrieveDouble(const std::string & sName)
	{
		LibMCEnv_double resultValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_StateEnvironment_RetrieveDouble(m_pHandle, sName.c_str(), &resultValue));
		
		return resultValue;
	}
	
	/**
	* CStateEnvironment::RetrieveBool - retrieves a string from the current state machine. Fails if value has not been stored before.
	* @param[in] sName - Name
	* @return Value
	*/
	bool CStateEnvironment::RetrieveBool(const std::string & sName)
	{
		bool resultValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_StateEnvironment_RetrieveBool(m_pHandle, sName.c_str(), &resultValue));
		
		return resultValue;
	}
	
	/**
	* CStateEnvironment::RetrieveSignal - retrieves a signal handler from the current state machine. Fails if value has not been stored before or signal has been already handled.
	* @param[in] sName - Name
	* @return Signal handler instance.
	*/
	PSignalHandler CStateEnvironment::RetrieveSignal(const std::string & sName)
	{
		LibMCEnvHandle hHandler = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_StateEnvironment_RetrieveSignal(m_pHandle, sName.c_str(), &hHandler));
		
		if (!hHandler) {
			CheckError(LIBMCENV_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CSignalHandler>(m_pWrapper, hHandler);
	}
	
	/**
	* CStateEnvironment::ClearStoredValue - deletes a value from the data store.
	* @param[in] sName - Name
	*/
	void CStateEnvironment::ClearStoredValue(const std::string & sName)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_StateEnvironment_ClearStoredValue(m_pHandle, sName.c_str()));
	}
	
	/**
	* CStateEnvironment::SetStringParameter - sets a string parameter
	* @param[in] sParameterGroup - Parameter Group
	* @param[in] sParameterName - Parameter Name
	* @param[in] sValue - Value to set
	*/
	void CStateEnvironment::SetStringParameter(const std::string & sParameterGroup, const std::string & sParameterName, const std::string & sValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_StateEnvironment_SetStringParameter(m_pHandle, sParameterGroup.c_str(), sParameterName.c_str(), sValue.c_str()));
	}
	
	/**
	* CStateEnvironment::SetUUIDParameter - sets a uuid parameter
	* @param[in] sParameterGroup - Parameter Group
	* @param[in] sParameterName - Parameter Name
	* @param[in] sValue - Value to set
	*/
	void CStateEnvironment::SetUUIDParameter(const std::string & sParameterGroup, const std::string & sParameterName, const std::string & sValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_StateEnvironment_SetUUIDParameter(m_pHandle, sParameterGroup.c_str(), sParameterName.c_str(), sValue.c_str()));
	}
	
	/**
	* CStateEnvironment::SetDoubleParameter - sets a double parameter
	* @param[in] sParameterGroup - Parameter Group
	* @param[in] sParameterName - Parameter Name
	* @param[in] dValue - Value to set
	*/
	void CStateEnvironment::SetDoubleParameter(const std::string & sParameterGroup, const std::string & sParameterName, const LibMCEnv_double dValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_StateEnvironment_SetDoubleParameter(m_pHandle, sParameterGroup.c_str(), sParameterName.c_str(), dValue));
	}
	
	/**
	* CStateEnvironment::SetIntegerParameter - sets an int parameter
	* @param[in] sParameterGroup - Parameter Group
	* @param[in] sParameterName - Parameter Name
	* @param[in] nValue - Value to set
	*/
	void CStateEnvironment::SetIntegerParameter(const std::string & sParameterGroup, const std::string & sParameterName, const LibMCEnv_int64 nValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_StateEnvironment_SetIntegerParameter(m_pHandle, sParameterGroup.c_str(), sParameterName.c_str(), nValue));
	}
	
	/**
	* CStateEnvironment::SetBoolParameter - sets a bool parameter
	* @param[in] sParameterGroup - Parameter Group
	* @param[in] sParameterName - Parameter Name
	* @param[in] bValue - Value to set
	*/
	void CStateEnvironment::SetBoolParameter(const std::string & sParameterGroup, const std::string & sParameterName, const bool bValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_StateEnvironment_SetBoolParameter(m_pHandle, sParameterGroup.c_str(), sParameterName.c_str(), bValue));
	}
	
	/**
	* CStateEnvironment::GetStringParameter - returns a string parameter
	* @param[in] sParameterGroup - Parameter Group
	* @param[in] sParameterName - Parameter Name
	* @return Value to set
	*/
	std::string CStateEnvironment::GetStringParameter(const std::string & sParameterGroup, const std::string & sParameterName)
	{
		LibMCEnv_uint32 bytesNeededValue = 0;
		LibMCEnv_uint32 bytesWrittenValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_StateEnvironment_GetStringParameter(m_pHandle, sParameterGroup.c_str(), sParameterName.c_str(), 0, &bytesNeededValue, nullptr));
		std::vector<char> bufferValue(bytesNeededValue);
		CheckError(m_pWrapper->m_WrapperTable.m_StateEnvironment_GetStringParameter(m_pHandle, sParameterGroup.c_str(), sParameterName.c_str(), bytesNeededValue, &bytesWrittenValue, &bufferValue[0]));
		
		return std::string(&bufferValue[0]);
	}
	
	/**
	* CStateEnvironment::GetUUIDParameter - returns a uuid parameter
	* @param[in] sParameterGroup - Parameter Group
	* @param[in] sParameterName - Parameter Name
	* @return Value to set
	*/
	std::string CStateEnvironment::GetUUIDParameter(const std::string & sParameterGroup, const std::string & sParameterName)
	{
		LibMCEnv_uint32 bytesNeededValue = 0;
		LibMCEnv_uint32 bytesWrittenValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_StateEnvironment_GetUUIDParameter(m_pHandle, sParameterGroup.c_str(), sParameterName.c_str(), 0, &bytesNeededValue, nullptr));
		std::vector<char> bufferValue(bytesNeededValue);
		CheckError(m_pWrapper->m_WrapperTable.m_StateEnvironment_GetUUIDParameter(m_pHandle, sParameterGroup.c_str(), sParameterName.c_str(), bytesNeededValue, &bytesWrittenValue, &bufferValue[0]));
		
		return std::string(&bufferValue[0]);
	}
	
	/**
	* CStateEnvironment::GetDoubleParameter - returns a double parameter
	* @param[in] sParameterGroup - Parameter Group
	* @param[in] sParameterName - Parameter Name
	* @return Value to set
	*/
	LibMCEnv_double CStateEnvironment::GetDoubleParameter(const std::string & sParameterGroup, const std::string & sParameterName)
	{
		LibMCEnv_double resultValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_StateEnvironment_GetDoubleParameter(m_pHandle, sParameterGroup.c_str(), sParameterName.c_str(), &resultValue));
		
		return resultValue;
	}
	
	/**
	* CStateEnvironment::GetIntegerParameter - returns an int parameter
	* @param[in] sParameterGroup - Parameter Group
	* @param[in] sParameterName - Parameter Name
	* @return Value to set
	*/
	LibMCEnv_int64 CStateEnvironment::GetIntegerParameter(const std::string & sParameterGroup, const std::string & sParameterName)
	{
		LibMCEnv_int64 resultValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_StateEnvironment_GetIntegerParameter(m_pHandle, sParameterGroup.c_str(), sParameterName.c_str(), &resultValue));
		
		return resultValue;
	}
	
	/**
	* CStateEnvironment::GetBoolParameter - returns a bool parameter
	* @param[in] sParameterGroup - Parameter Group
	* @param[in] sParameterName - Parameter Name
	* @return Value to set
	*/
	bool CStateEnvironment::GetBoolParameter(const std::string & sParameterGroup, const std::string & sParameterName)
	{
		bool resultValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_StateEnvironment_GetBoolParameter(m_pHandle, sParameterGroup.c_str(), sParameterName.c_str(), &resultValue));
		
		return resultValue;
	}

} // namespace LibMCEnv

#endif // __LIBMCENV_CPPHEADER_DYNAMIC_CPP

