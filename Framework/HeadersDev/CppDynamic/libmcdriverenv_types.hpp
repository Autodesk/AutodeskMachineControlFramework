/*++

Copyright (C) 2020 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.7.0-develop.

Abstract: This is an autogenerated C++-Header file with basic types in
order to allow an easy use of MC Driver Environment Interface

Interface version: 1.0.0

*/

#ifndef __LIBMCDRIVERENV_TYPES_HEADER_CPP
#define __LIBMCDRIVERENV_TYPES_HEADER_CPP


/*************************************************************************************************************************
 Scalar types definition
**************************************************************************************************************************/

#ifdef LIBMCDRIVERENV_USELEGACYINTEGERTYPES

typedef unsigned char LibMCDriverEnv_uint8;
typedef unsigned short LibMCDriverEnv_uint16 ;
typedef unsigned int LibMCDriverEnv_uint32;
typedef unsigned long long LibMCDriverEnv_uint64;
typedef char LibMCDriverEnv_int8;
typedef short LibMCDriverEnv_int16;
typedef int LibMCDriverEnv_int32;
typedef long long LibMCDriverEnv_int64;

#else // LIBMCDRIVERENV_USELEGACYINTEGERTYPES

#include <stdint.h>

typedef uint8_t LibMCDriverEnv_uint8;
typedef uint16_t LibMCDriverEnv_uint16;
typedef uint32_t LibMCDriverEnv_uint32;
typedef uint64_t LibMCDriverEnv_uint64;
typedef int8_t LibMCDriverEnv_int8;
typedef int16_t LibMCDriverEnv_int16;
typedef int32_t LibMCDriverEnv_int32;
typedef int64_t LibMCDriverEnv_int64 ;

#endif // LIBMCDRIVERENV_USELEGACYINTEGERTYPES

typedef float LibMCDriverEnv_single;
typedef double LibMCDriverEnv_double;

/*************************************************************************************************************************
 General type definitions
**************************************************************************************************************************/

typedef LibMCDriverEnv_int32 LibMCDriverEnvResult;
typedef void * LibMCDriverEnvHandle;
typedef void * LibMCDriverEnv_pvoid;

/*************************************************************************************************************************
 Version for LibMCDriverEnv
**************************************************************************************************************************/

#define LIBMCDRIVERENV_VERSION_MAJOR 1
#define LIBMCDRIVERENV_VERSION_MINOR 0
#define LIBMCDRIVERENV_VERSION_MICRO 0
#define LIBMCDRIVERENV_VERSION_PRERELEASEINFO ""
#define LIBMCDRIVERENV_VERSION_BUILDINFO ""

/*************************************************************************************************************************
 Error constants for LibMCDriverEnv
**************************************************************************************************************************/

#define LIBMCDRIVERENV_SUCCESS 0
#define LIBMCDRIVERENV_ERROR_NOTIMPLEMENTED 1
#define LIBMCDRIVERENV_ERROR_INVALIDPARAM 2
#define LIBMCDRIVERENV_ERROR_INVALIDCAST 3
#define LIBMCDRIVERENV_ERROR_BUFFERTOOSMALL 4
#define LIBMCDRIVERENV_ERROR_GENERICEXCEPTION 5
#define LIBMCDRIVERENV_ERROR_COULDNOTLOADLIBRARY 6
#define LIBMCDRIVERENV_ERROR_COULDNOTFINDLIBRARYEXPORT 7
#define LIBMCDRIVERENV_ERROR_INCOMPATIBLEBINARYVERSION 8
#define LIBMCDRIVERENV_ERROR_PARAMETERGROUPNOTFOUND 9
#define LIBMCDRIVERENV_ERROR_PARAMETERNOTFOUND 10
#define LIBMCDRIVERENV_ERROR_COULDNOTFINDSIGNALDEFINITON 11
#define LIBMCDRIVERENV_ERROR_COULDNOTTRIGGERSIGNAL 12
#define LIBMCDRIVERENV_ERROR_SIGNALNOTFOUND 13
#define LIBMCDRIVERENV_ERROR_TERMINATED 14
#define LIBMCDRIVERENV_ERROR_SIGNALHASTRIGGEREDTWICE 15
#define LIBMCDRIVERENV_ERROR_SIGNALHASNOTBEENTRIGGERED 16
#define LIBMCDRIVERENV_ERROR_DRIVERISNOTINITIALISING 17

/*************************************************************************************************************************
 Error strings for LibMCDriverEnv
**************************************************************************************************************************/

inline const char * LIBMCDRIVERENV_GETERRORSTRING (LibMCDriverEnvResult nErrorCode) {
  switch (nErrorCode) {
    case LIBMCDRIVERENV_SUCCESS: return "no error";
    case LIBMCDRIVERENV_ERROR_NOTIMPLEMENTED: return "functionality not implemented";
    case LIBMCDRIVERENV_ERROR_INVALIDPARAM: return "an invalid parameter was passed";
    case LIBMCDRIVERENV_ERROR_INVALIDCAST: return "a type cast failed";
    case LIBMCDRIVERENV_ERROR_BUFFERTOOSMALL: return "a provided buffer is too small";
    case LIBMCDRIVERENV_ERROR_GENERICEXCEPTION: return "a generic exception occurred";
    case LIBMCDRIVERENV_ERROR_COULDNOTLOADLIBRARY: return "the library could not be loaded";
    case LIBMCDRIVERENV_ERROR_COULDNOTFINDLIBRARYEXPORT: return "a required exported symbol could not be found in the library";
    case LIBMCDRIVERENV_ERROR_INCOMPATIBLEBINARYVERSION: return "the version of the binary interface does not match the bindings interface";
    case LIBMCDRIVERENV_ERROR_PARAMETERGROUPNOTFOUND: return "Parameter group not found";
    case LIBMCDRIVERENV_ERROR_PARAMETERNOTFOUND: return "Parameter not found";
    case LIBMCDRIVERENV_ERROR_COULDNOTFINDSIGNALDEFINITON: return "Could not find signal definition";
    case LIBMCDRIVERENV_ERROR_COULDNOTTRIGGERSIGNAL: return "Could not trigger signal";
    case LIBMCDRIVERENV_ERROR_SIGNALNOTFOUND: return "Signal not found";
    case LIBMCDRIVERENV_ERROR_TERMINATED: return "operation has been terminated.";
    case LIBMCDRIVERENV_ERROR_SIGNALHASTRIGGEREDTWICE: return "signal has been triggered twice.";
    case LIBMCDRIVERENV_ERROR_SIGNALHASNOTBEENTRIGGERED: return "signal has not been triggered.";
    case LIBMCDRIVERENV_ERROR_DRIVERISNOTINITIALISING: return "driver is not in initialisation mode.";
    default: return "unknown error";
  }
}

/*************************************************************************************************************************
 Declaration of handle classes 
**************************************************************************************************************************/

typedef LibMCDriverEnvHandle LibMCDriverEnv_Base;
typedef LibMCDriverEnvHandle LibMCDriverEnv_WorkingFileExecution;
typedef LibMCDriverEnvHandle LibMCDriverEnv_WorkingFile;
typedef LibMCDriverEnvHandle LibMCDriverEnv_WorkingDirectory;
typedef LibMCDriverEnvHandle LibMCDriverEnv_DriverEnvironment;

namespace LibMCDriverEnv {

} // namespace LibMCDriverEnv;

// define legacy C-names for enums, structs and function types

#endif // __LIBMCDRIVERENV_TYPES_HEADER_CPP
