/*++

Copyright (C) 2020 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.8.0-develop.

Abstract: This is an autogenerated C++-Header file in order to allow an easy
 use of MC Environment Interface

Interface version: 1.0.0

*/

#ifndef __LIBMCENV_DYNAMICHEADER_CPPTYPES
#define __LIBMCENV_DYNAMICHEADER_CPPTYPES

#include "libmcenv_types.hpp"



/*************************************************************************************************************************
 Class definition for Base
**************************************************************************************************************************/

/*************************************************************************************************************************
 Class definition for Iterator
**************************************************************************************************************************/

/**
* Iterates to the next object in the list.
*
* @param[in] pIterator - Iterator instance.
* @param[out] pHasNext - Iterates to the next object in the list.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvIterator_MoveNextPtr) (LibMCEnv_Iterator pIterator, bool * pHasNext);

/**
* Iterates to the previous object in the list.
*
* @param[in] pIterator - Iterator instance.
* @param[out] pHasPrevious - Iterates to the previous object in the list.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvIterator_MovePreviousPtr) (LibMCEnv_Iterator pIterator, bool * pHasPrevious);

/**
* Returns the object the iterator points at.
*
* @param[in] pIterator - Iterator instance.
* @param[out] pInstance - returns the object instance.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvIterator_GetCurrentPtr) (LibMCEnv_Iterator pIterator, LibMCEnv_Base * pInstance);

/**
* Creates a new object iterator with the same object list.
*
* @param[in] pIterator - Iterator instance.
* @param[out] pOutIterator - returns the cloned Iterator instance
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvIterator_ClonePtr) (LibMCEnv_Iterator pIterator, LibMCEnv_Iterator * pOutIterator);

/**
* Returns the number of resoucres the iterator captures.
*
* @param[in] pIterator - Iterator instance.
* @param[out] pCount - returns the number of objects the iterator captures.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvIterator_CountPtr) (LibMCEnv_Iterator pIterator, LibMCEnv_uint64 * pCount);

/*************************************************************************************************************************
 Class definition for TestEnvironment
**************************************************************************************************************************/

/**
* Write output file to test directory.
*
* @param[in] pTestEnvironment - TestEnvironment instance.
* @param[in] pOutputName - Output file name. Only alphanumeric characters, point, underscore and hypen are allowed.
* @param[in] nDataBufferSize - Number of elements in buffer
* @param[in] pDataBuffer - uint8 buffer of Test data to write into output directory.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvTestEnvironment_WriteTestOutputPtr) (LibMCEnv_TestEnvironment pTestEnvironment, const char * pOutputName, LibMCEnv_uint64 nDataBufferSize, const LibMCEnv_uint8 * pDataBuffer);

/*************************************************************************************************************************
 Class definition for PNGImageStoreOptions
**************************************************************************************************************************/

/**
* Resets Options to default.
*
* @param[in] pPNGImageStoreOptions - PNGImageStoreOptions instance.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvPNGImageStoreOptions_ResetToDefaultsPtr) (LibMCEnv_PNGImageStoreOptions pPNGImageStoreOptions);

/*************************************************************************************************************************
 Class definition for PNGImageData
**************************************************************************************************************************/

/**
* Returns image pixel sizes.
*
* @param[in] pPNGImageData - PNGImageData instance.
* @param[out] pPixelSizeX - Number of pixels in X
* @param[out] pPixelSizeY - Number of pixels in Y
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvPNGImageData_GetSizeInPixelsPtr) (LibMCEnv_PNGImageData pPNGImageData, LibMCEnv_uint32 * pPixelSizeX, LibMCEnv_uint32 * pPixelSizeY);

/**
* Retrieves encoded data stream of image object.
*
* @param[in] pPNGImageData - PNGImageData instance.
* @param[in] nPNGDataBufferSize - Number of elements in buffer
* @param[out] pPNGDataNeededCount - will be filled with the count of the written elements, or needed buffer size.
* @param[out] pPNGDataBuffer - uint8  buffer of PNG Data stream.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvPNGImageData_GetPNGDataStreamPtr) (LibMCEnv_PNGImageData pPNGImageData, const LibMCEnv_uint64 nPNGDataBufferSize, LibMCEnv_uint64* pPNGDataNeededCount, LibMCEnv_uint8 * pPNGDataBuffer);

/*************************************************************************************************************************
 Class definition for ImageData
**************************************************************************************************************************/

/**
* Returns Pixel format of the image.
*
* @param[in] pImageData - ImageData instance.
* @param[out] pPixelFormat - Pixel Format of image
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvImageData_GetPixelFormatPtr) (LibMCEnv_ImageData pImageData, LibMCEnv::eImagePixelFormat * pPixelFormat);

/**
* Changes Pixel format of the image. Might lose alpha or color information during the process.
*
* @param[in] pImageData - ImageData instance.
* @param[in] ePixelFormat - new Pixel Format of image
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvImageData_ChangePixelFormatPtr) (LibMCEnv_ImageData pImageData, LibMCEnv::eImagePixelFormat ePixelFormat);

/**
* Returns DPI values in X and Y.
*
* @param[in] pImageData - ImageData instance.
* @param[out] pDPIValueX - DPI value in X
* @param[out] pDPIValueY - DPI value in Y
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvImageData_GetDPIPtr) (LibMCEnv_ImageData pImageData, LibMCEnv_double * pDPIValueX, LibMCEnv_double * pDPIValueY);

/**
* Sets DPI values in X and Y.
*
* @param[in] pImageData - ImageData instance.
* @param[in] dDPIValueX - new DPI value in X
* @param[in] dDPIValueY - new DPI value in Y
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvImageData_SetDPIPtr) (LibMCEnv_ImageData pImageData, LibMCEnv_double dDPIValueX, LibMCEnv_double dDPIValueY);

/**
* Returns image sizes inmm.
*
* @param[in] pImageData - ImageData instance.
* @param[out] pSizeX - Size in X in mm
* @param[out] pSizeY - Size in Y in mm
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvImageData_GetSizeInMMPtr) (LibMCEnv_ImageData pImageData, LibMCEnv_double * pSizeX, LibMCEnv_double * pSizeY);

/**
* Returns image pixel sizes.
*
* @param[in] pImageData - ImageData instance.
* @param[out] pPixelSizeX - Number of pixels in X
* @param[out] pPixelSizeY - Number of pixels in Y
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvImageData_GetSizeInPixelsPtr) (LibMCEnv_ImageData pImageData, LibMCEnv_uint32 * pPixelSizeX, LibMCEnv_uint32 * pPixelSizeY);

/**
* Resizes Image pixel data.
*
* @param[in] pImageData - ImageData instance.
* @param[out] pPixelSizeX - Number of pixels in X
* @param[out] pPixelSizeY - Number of pixels in Y
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvImageData_ResizeImagePtr) (LibMCEnv_ImageData pImageData, LibMCEnv_uint32 * pPixelSizeX, LibMCEnv_uint32 * pPixelSizeY);

/**
* Loads a PNG from a binary array. Supports RGB, RGBA and Greyscale images.
*
* @param[in] pImageData - ImageData instance.
* @param[in] nPNGDataBufferSize - Number of elements in buffer
* @param[in] pPNGDataBuffer - uint8 buffer of PNG Data stream.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvImageData_LoadPNGPtr) (LibMCEnv_ImageData pImageData, LibMCEnv_uint64 nPNGDataBufferSize, const LibMCEnv_uint8 * pPNGDataBuffer);

/**
* Creates PNG Image out of the pixel data.
*
* @param[in] pImageData - ImageData instance.
* @param[in] pPNGStorageOptions - Optional encoding options for the image.
* @param[out] pPNGImage - Image data.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvImageData_CreatePNGImagePtr) (LibMCEnv_ImageData pImageData, LibMCEnv_PNGImageStoreOptions pPNGStorageOptions, LibMCEnv_PNGImageData * pPNGImage);

/**
* Depreciated. DO NOT USE. Encodes PNG and stores data stream in image object.
*
* @param[in] pImageData - ImageData instance.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvImageData_EncodePNGPtr) (LibMCEnv_ImageData pImageData);

/**
* Depreciated. DO NOT USE. Retrieves encoded data stream of image object. MUST have been encoded with EncodePNG before.
*
* @param[in] pImageData - ImageData instance.
* @param[in] nPNGDataBufferSize - Number of elements in buffer
* @param[out] pPNGDataNeededCount - will be filled with the count of the written elements, or needed buffer size.
* @param[out] pPNGDataBuffer - uint8  buffer of PNG Data stream.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvImageData_GetEncodedPNGDataPtr) (LibMCEnv_ImageData pImageData, const LibMCEnv_uint64 nPNGDataBufferSize, LibMCEnv_uint64* pPNGDataNeededCount, LibMCEnv_uint8 * pPNGDataBuffer);

/**
* Depreciated. DO NOT USE. Releases encoded data stream of image object. Depreciated.
*
* @param[in] pImageData - ImageData instance.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvImageData_ClearEncodedPNGDataPtr) (LibMCEnv_ImageData pImageData);

/**
* Sets all pixels to a single value.
*
* @param[in] pImageData - ImageData instance.
* @param[in] nValue - Pixel value.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvImageData_ClearPtr) (LibMCEnv_ImageData pImageData, LibMCEnv_uint32 nValue);

/**
* Returns one pixel of an image.
*
* @param[in] pImageData - ImageData instance.
* @param[in] nX - Pixel coordinate in X
* @param[in] nY - Pixel coordinate in Y
* @param[out] pValue - Pixel value at this position
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvImageData_GetPixelPtr) (LibMCEnv_ImageData pImageData, LibMCEnv_uint32 nX, LibMCEnv_uint32 nY, LibMCEnv_uint32 * pValue);

/**
* Sets one pixel of an image.
*
* @param[in] pImageData - ImageData instance.
* @param[in] nX - Pixel coordinate in X
* @param[in] nY - Pixel coordinate in Y
* @param[in] nValue - New Pixel value at this position
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvImageData_SetPixelPtr) (LibMCEnv_ImageData pImageData, LibMCEnv_uint32 nX, LibMCEnv_uint32 nY, LibMCEnv_uint32 nValue);

/**
* Returns a subset of an image or the whole image data.
*
* @param[in] pImageData - ImageData instance.
* @param[in] nXMin - Min Pixel coordinate in X. MUST be within image bounds.
* @param[in] nYMin - Min Pixel coordinate in Y. MUST be within image bounds.
* @param[in] nXMax - Max Pixel coordinate in X. MUST be within image bounds. MUST be larger or equal than MinX
* @param[in] nYMax - Max Pixel coordinate in Y. MUST be within image bounds. MUST be larger or equal than MinY
* @param[in] nValueBufferSize - Number of elements in buffer
* @param[out] pValueNeededCount - will be filled with the count of the written elements, or needed buffer size.
* @param[out] pValueBuffer - uint8  buffer of Pixel values of the rectangle, rowwise array. Will return the exact number of pixels in size and 1, 3 or 4 bytes per pixel, depending on pixel format.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvImageData_GetPixelRangePtr) (LibMCEnv_ImageData pImageData, LibMCEnv_uint32 nXMin, LibMCEnv_uint32 nYMin, LibMCEnv_uint32 nXMax, LibMCEnv_uint32 nYMax, const LibMCEnv_uint64 nValueBufferSize, LibMCEnv_uint64* pValueNeededCount, LibMCEnv_uint8 * pValueBuffer);

/**
* Exchanges a subset of an image or the whole image data.
*
* @param[in] pImageData - ImageData instance.
* @param[in] nXMin - Min Pixel coordinate in X. MUST be within image bounds.
* @param[in] nYMin - Min Pixel coordinate in Y. MUST be within image bounds.
* @param[in] nXMax - Max Pixel coordinate in X. MUST be within image bounds. MUST be larger or equal than MinX
* @param[in] nYMax - Max Pixel coordinate in Y. MUST be within image bounds. MUST be larger or equal than MinY
* @param[in] nValueBufferSize - Number of elements in buffer
* @param[in] pValueBuffer - uint8 buffer of New pixel values of the rectangle, rowwise array. MUST have the exact number of pixels in size and 1, 3 or 4 bytes per pixel, depending on pixel format.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvImageData_SetPixelRangePtr) (LibMCEnv_ImageData pImageData, LibMCEnv_uint32 nXMin, LibMCEnv_uint32 nYMin, LibMCEnv_uint32 nXMax, LibMCEnv_uint32 nYMax, LibMCEnv_uint64 nValueBufferSize, const LibMCEnv_uint8 * pValueBuffer);

/*************************************************************************************************************************
 Class definition for DiscreteFieldData2DStoreOptions
**************************************************************************************************************************/

/**
* Resets Options to default.
*
* @param[in] pDiscreteFieldData2DStoreOptions - DiscreteFieldData2DStoreOptions instance.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvDiscreteFieldData2DStoreOptions_ResetToDefaultsPtr) (LibMCEnv_DiscreteFieldData2DStoreOptions pDiscreteFieldData2DStoreOptions);

/*************************************************************************************************************************
 Class definition for DiscreteFieldData2D
**************************************************************************************************************************/

/**
* Returns DPI values in X and Y.
*
* @param[in] pDiscreteFieldData2D - DiscreteFieldData2D instance.
* @param[out] pDPIValueX - DPI value in X
* @param[out] pDPIValueY - DPI value in Y
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvDiscreteFieldData2D_GetDPIPtr) (LibMCEnv_DiscreteFieldData2D pDiscreteFieldData2D, LibMCEnv_double * pDPIValueX, LibMCEnv_double * pDPIValueY);

/**
* Sets DPI values in X and Y.
*
* @param[in] pDiscreteFieldData2D - DiscreteFieldData2D instance.
* @param[in] dDPIValueX - new DPI value in X. MUST be positive.
* @param[in] dDPIValueY - new DPI value in Y. MUST be positive.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvDiscreteFieldData2D_SetDPIPtr) (LibMCEnv_DiscreteFieldData2D pDiscreteFieldData2D, LibMCEnv_double dDPIValueX, LibMCEnv_double dDPIValueY);

/**
* Returns field origin in mm.
*
* @param[in] pDiscreteFieldData2D - DiscreteFieldData2D instance.
* @param[out] pOriginX - Origin in X in mm
* @param[out] pOriginY - Origin in Y in mm
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvDiscreteFieldData2D_GetOriginInMMPtr) (LibMCEnv_DiscreteFieldData2D pDiscreteFieldData2D, LibMCEnv_double * pOriginX, LibMCEnv_double * pOriginY);

/**
* Set field origin in mm.
*
* @param[in] pDiscreteFieldData2D - DiscreteFieldData2D instance.
* @param[in] dOriginX - Origin in X in mm
* @param[in] dOriginY - Origin in Y in mm
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvDiscreteFieldData2D_SetOriginInMMPtr) (LibMCEnv_DiscreteFieldData2D pDiscreteFieldData2D, LibMCEnv_double dOriginX, LibMCEnv_double dOriginY);

/**
* Returns field sizes in mm.
*
* @param[in] pDiscreteFieldData2D - DiscreteFieldData2D instance.
* @param[out] pSizeX - Size in X in mm
* @param[out] pSizeY - Size in Y in mm
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvDiscreteFieldData2D_GetSizeInMMPtr) (LibMCEnv_DiscreteFieldData2D pDiscreteFieldData2D, LibMCEnv_double * pSizeX, LibMCEnv_double * pSizeY);

/**
* Returns field pixel sizes.
*
* @param[in] pDiscreteFieldData2D - DiscreteFieldData2D instance.
* @param[out] pPixelSizeX - Number of pixels in X
* @param[out] pPixelSizeY - Number of pixels in Y
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvDiscreteFieldData2D_GetSizeInPixelsPtr) (LibMCEnv_DiscreteFieldData2D pDiscreteFieldData2D, LibMCEnv_uint32 * pPixelSizeX, LibMCEnv_uint32 * pPixelSizeY);

/**
* Resizes field pixel data.
*
* @param[in] pDiscreteFieldData2D - DiscreteFieldData2D instance.
* @param[in] nPixelSizeX - Number of pixels in X
* @param[in] nPixelSizeY - Number of pixels in Y
* @param[in] dDefaultValue - Default Pixel value.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvDiscreteFieldData2D_ResizeFieldPtr) (LibMCEnv_DiscreteFieldData2D pDiscreteFieldData2D, LibMCEnv_uint32 nPixelSizeX, LibMCEnv_uint32 nPixelSizeY, LibMCEnv_double dDefaultValue);

/**
* Sets all pixels to a single value.
*
* @param[in] pDiscreteFieldData2D - DiscreteFieldData2D instance.
* @param[in] dValue - Pixel value.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvDiscreteFieldData2D_ClearPtr) (LibMCEnv_DiscreteFieldData2D pDiscreteFieldData2D, LibMCEnv_double dValue);

/**
* Clamps all pixels to a certain interval.
*
* @param[in] pDiscreteFieldData2D - DiscreteFieldData2D instance.
* @param[in] dMinValue - Minimum value. MUST be smaller or equal than MaxValue.
* @param[in] dMaxValue - Maximum value. MUST be larger or equal than MinValue.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvDiscreteFieldData2D_ClampPtr) (LibMCEnv_DiscreteFieldData2D pDiscreteFieldData2D, LibMCEnv_double dMinValue, LibMCEnv_double dMaxValue);

/**
* Returns one pixel of an field. Fails if outside of field size.
*
* @param[in] pDiscreteFieldData2D - DiscreteFieldData2D instance.
* @param[in] nX - Pixel coordinate in X
* @param[in] nY - Pixel coordinate in Y
* @param[out] pValue - Pixel value at this position
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvDiscreteFieldData2D_GetPixelPtr) (LibMCEnv_DiscreteFieldData2D pDiscreteFieldData2D, LibMCEnv_uint32 nX, LibMCEnv_uint32 nY, LibMCEnv_double * pValue);

/**
* Sets one pixel of an field. Fails if outside of field size.
*
* @param[in] pDiscreteFieldData2D - DiscreteFieldData2D instance.
* @param[in] nX - Pixel coordinate in X
* @param[in] nY - Pixel coordinate in Y
* @param[in] dValue - New Pixel value at this position
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvDiscreteFieldData2D_SetPixelPtr) (LibMCEnv_DiscreteFieldData2D pDiscreteFieldData2D, LibMCEnv_uint32 nX, LibMCEnv_uint32 nY, LibMCEnv_double dValue);

/**
* Returns a subset of an field or the whole field data.
*
* @param[in] pDiscreteFieldData2D - DiscreteFieldData2D instance.
* @param[in] nXMin - Min Pixel coordinate in X. MUST be within field bounds.
* @param[in] nYMin - Min Pixel coordinate in Y. MUST be within field bounds.
* @param[in] nXMax - Max Pixel coordinate in X. MUST be within field bounds. MUST be larger or equal than MinX
* @param[in] nYMax - Max Pixel coordinate in Y. MUST be within field bounds. MUST be larger or equal than MinY
* @param[in] nValueBufferSize - Number of elements in buffer
* @param[out] pValueNeededCount - will be filled with the count of the written elements, or needed buffer size.
* @param[out] pValueBuffer - double  buffer of Pixel values of the rectangle, rowwise array. Will return the exact number of pixels in size.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvDiscreteFieldData2D_GetPixelRangePtr) (LibMCEnv_DiscreteFieldData2D pDiscreteFieldData2D, LibMCEnv_uint32 nXMin, LibMCEnv_uint32 nYMin, LibMCEnv_uint32 nXMax, LibMCEnv_uint32 nYMax, const LibMCEnv_uint64 nValueBufferSize, LibMCEnv_uint64* pValueNeededCount, LibMCEnv_double * pValueBuffer);

/**
* Exchanges a subset of an field or the whole field data.
*
* @param[in] pDiscreteFieldData2D - DiscreteFieldData2D instance.
* @param[in] nXMin - Min Pixel coordinate in X. MUST be within field bounds.
* @param[in] nYMin - Min Pixel coordinate in Y. MUST be within field bounds.
* @param[in] nXMax - Max Pixel coordinate in X. MUST be within field bounds. MUST be larger or equal than MinX
* @param[in] nYMax - Max Pixel coordinate in Y. MUST be within field bounds. MUST be larger or equal than MinY
* @param[in] nValueBufferSize - Number of elements in buffer
* @param[in] pValueBuffer - double buffer of New pixel values of the rectangle, rowwise array. MUST have the exact number of pixels in size.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvDiscreteFieldData2D_SetPixelRangePtr) (LibMCEnv_DiscreteFieldData2D pDiscreteFieldData2D, LibMCEnv_uint32 nXMin, LibMCEnv_uint32 nYMin, LibMCEnv_uint32 nXMax, LibMCEnv_uint32 nYMax, LibMCEnv_uint64 nValueBufferSize, const LibMCEnv_double * pValueBuffer);

/**
* Renders and array of average point values into the field. 
*
* @param[in] pDiscreteFieldData2D - DiscreteFieldData2D instance.
* @param[in] dDefaultValue - If a pixel does not contain any value, fall back to this given value.
* @param[in] eSamplingMode - Sampling mode of point values.
* @param[in] dSampleSizeX - How large a sample point should be drawn in Pixel widths. This determines the weighting when a point value overlaps multiple pixels. Ignored if SamplingMode is equal FloorCoordinate or CeilCoordinate. MUST be positive otherwise.
* @param[in] dSampleSizeY - How large a sample point should be drawn in Pixel heights. This determines the weighting when a point value overlaps multiple pixels. Ignored if SamplingMode is equal FloorCoordinate or CeilCoordinate. MUST be positive otherwise.
* @param[in] nPointValuesBufferSize - Number of elements in buffer
* @param[in] pPointValuesBuffer - FieldData2DPoint buffer of Array of Field Data Points that are sorted into the grid. If a point lies on a grid border, it will be counted to all adjacent pixels.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvDiscreteFieldData2D_RenderAveragePointValuesPtr) (LibMCEnv_DiscreteFieldData2D pDiscreteFieldData2D, LibMCEnv_double dDefaultValue, LibMCEnv::eFieldSamplingMode eSamplingMode, LibMCEnv_double dSampleSizeX, LibMCEnv_double dSampleSizeY, LibMCEnv_uint64 nPointValuesBufferSize, const LibMCEnv::sFieldData2DPoint * pPointValuesBuffer);

/**
* Scales the field to a smaller size.
*
* @param[in] pDiscreteFieldData2D - DiscreteFieldData2D instance.
* @param[in] nFactorX - The new field will be this factor smaller in X. MUST be positive and smaller than PixelSizeX
* @param[in] nFactorY - The new field will be this factor smaller in Y. MUST be positive and smaller than PixelSizeY
* @param[out] pNewField - Scaled Field Instance
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvDiscreteFieldData2D_ScaleFieldDownPtr) (LibMCEnv_DiscreteFieldData2D pDiscreteFieldData2D, LibMCEnv_uint32 nFactorX, LibMCEnv_uint32 nFactorY, LibMCEnv_DiscreteFieldData2D * pNewField);

/**
* Scales the field to a larger size.
*
* @param[in] pDiscreteFieldData2D - DiscreteFieldData2D instance.
* @param[in] nFactorX - The new field will be this factor larger in X. MUST be positive.
* @param[in] nFactorY - The new field will be this factor larger in Y. MUST be positive.
* @param[out] pNewField - Scaled Field Instance
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvDiscreteFieldData2D_ScaleFieldUpPtr) (LibMCEnv_DiscreteFieldData2D pDiscreteFieldData2D, LibMCEnv_uint32 nFactorX, LibMCEnv_uint32 nFactorY, LibMCEnv_DiscreteFieldData2D * pNewField);

/**
* Discretizes the field into a finite set of values. All field values will be set to the nearest value in the given array. Equivalent to DiscretizeWithMapping with two identical parameters.
*
* @param[in] pDiscreteFieldData2D - DiscreteFieldData2D instance.
* @param[in] nDiscreteValuesBufferSize - Number of elements in buffer
* @param[in] pDiscreteValuesBuffer - double buffer of An array of values. MUST NOT be empty.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvDiscreteFieldData2D_DiscretizePtr) (LibMCEnv_DiscreteFieldData2D pDiscreteFieldData2D, LibMCEnv_uint64 nDiscreteValuesBufferSize, const LibMCEnv_double * pDiscreteValuesBuffer);

/**
* Discretizes the field into a finite set of DiscreteValues. For each field value the nearest DiscreteValue is determined, and the field is set to the element of NewValues with the same index.
*
* @param[in] pDiscreteFieldData2D - DiscreteFieldData2D instance.
* @param[in] nDiscreteValuesBufferSize - Number of elements in buffer
* @param[in] pDiscreteValuesBuffer - double buffer of An array of values. MUST NOT be empty.  
* @param[in] nNewValuesBufferSize - Number of elements in buffer
* @param[in] pNewValuesBuffer - double buffer of An array of values. MUST have the same cardinality as DiscreteValues.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvDiscreteFieldData2D_DiscretizeWithMappingPtr) (LibMCEnv_DiscreteFieldData2D pDiscreteFieldData2D, LibMCEnv_uint64 nDiscreteValuesBufferSize, const LibMCEnv_double * pDiscreteValuesBuffer, LibMCEnv_uint64 nNewValuesBufferSize, const LibMCEnv_double * pNewValuesBuffer);

/**
* Renders the field into a PNG image. The colors will be linearly interpolated into a given color scheme.
*
* @param[in] pDiscreteFieldData2D - DiscreteFieldData2D instance.
* @param[in] dMinValue - Min point value. Values smaller than MinValue will be clamped to MinValue.
* @param[in] pMinColor - The color assigned to MinValue.
* @param[in] dMidValue - Mid point value. MUST be at least 1E-6 larger than MinValue.
* @param[in] pMidColor - The color assigned to MidValue
* @param[in] dMaxValue - Max point value. MUST be at least 1E-6 larger than MidValue. Values larger than MaxValue will be clamped to MaxValue.
* @param[in] pMaxColor - The color assigned to MaxValue
* @param[out] pNewImage - New Image with the according data. Pixel size and DPI will be equal to the field. Pixel format will be RGB24bit.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvDiscreteFieldData2D_RenderToImageRawPtr) (LibMCEnv_DiscreteFieldData2D pDiscreteFieldData2D, LibMCEnv_double dMinValue, const LibMCEnv::sColorRGB * pMinColor, LibMCEnv_double dMidValue, const LibMCEnv::sColorRGB * pMidColor, LibMCEnv_double dMaxValue, const LibMCEnv::sColorRGB * pMaxColor, LibMCEnv_ImageData * pNewImage);

/**
* Scales the field values with a factor and a translation.
*
* @param[in] pDiscreteFieldData2D - DiscreteFieldData2D instance.
* @param[in] dScale - A scaling factor will be applied to all values in the field.
* @param[in] dOffset - The offset will be applied to all values in the field after scaling.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvDiscreteFieldData2D_TransformFieldPtr) (LibMCEnv_DiscreteFieldData2D pDiscreteFieldData2D, LibMCEnv_double dScale, LibMCEnv_double dOffset);

/**
* Adds another field to the field. Both fields MUST have the same pixel extensions.
*
* @param[in] pDiscreteFieldData2D - DiscreteFieldData2D instance.
* @param[in] pOtherField - Field Instance to add
* @param[in] dScale - A scaling factor will be applied to all values in the other field before adding.
* @param[in] dOffset - The offset will be applied to all values in the field after scaling.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvDiscreteFieldData2D_AddFieldPtr) (LibMCEnv_DiscreteFieldData2D pDiscreteFieldData2D, LibMCEnv_DiscreteFieldData2D pOtherField, LibMCEnv_double dScale, LibMCEnv_double dOffset);

/**
* Creates a copy of the field.
*
* @param[in] pDiscreteFieldData2D - DiscreteFieldData2D instance.
* @param[out] pNewField - Scaled Field Instance
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvDiscreteFieldData2D_DuplicatePtr) (LibMCEnv_DiscreteFieldData2D pDiscreteFieldData2D, LibMCEnv_DiscreteFieldData2D * pNewField);

/*************************************************************************************************************************
 Class definition for ToolpathPart
**************************************************************************************************************************/

/**
* Returns Part Name.
*
* @param[in] pToolpathPart - ToolpathPart instance.
* @param[in] nNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNameBuffer -  buffer of Returns toolpath part name., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvToolpathPart_GetNamePtr) (LibMCEnv_ToolpathPart pToolpathPart, const LibMCEnv_uint32 nNameBufferSize, LibMCEnv_uint32* pNameNeededChars, char * pNameBuffer);

/**
* Returns Part UUID.
*
* @param[in] pToolpathPart - ToolpathPart instance.
* @param[in] nUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pUUIDBuffer -  buffer of Returns toolpath part uuid., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvToolpathPart_GetUUIDPtr) (LibMCEnv_ToolpathPart pToolpathPart, const LibMCEnv_uint32 nUUIDBufferSize, LibMCEnv_uint32* pUUIDNeededChars, char * pUUIDBuffer);

/**
* Returns Mesh UUID of the part.
*
* @param[in] pToolpathPart - ToolpathPart instance.
* @param[in] nMeshUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pMeshUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pMeshUUIDBuffer -  buffer of Returns toolpath part mesh uuid., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvToolpathPart_GetMeshUUIDPtr) (LibMCEnv_ToolpathPart pToolpathPart, const LibMCEnv_uint32 nMeshUUIDBufferSize, LibMCEnv_uint32* pMeshUUIDNeededChars, char * pMeshUUIDBuffer);

/**
* Returns Mesh Transform of the part.
*
* @param[in] pToolpathPart - ToolpathPart instance.
* @param[out] pMeshUUID - Returns the mesh transform of the toolpath.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvToolpathPart_GetTransformPtr) (LibMCEnv_ToolpathPart pToolpathPart, LibMCEnv::sToolpathPartTransform * pMeshUUID);

/*************************************************************************************************************************
 Class definition for ToolpathLayer
**************************************************************************************************************************/

/**
* Retrieves the layerdata's uuid
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[in] nUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pUUIDBuffer -  buffer of Returns the uuid value., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvToolpathLayer_GetLayerDataUUIDPtr) (LibMCEnv_ToolpathLayer pToolpathLayer, const LibMCEnv_uint32 nUUIDBufferSize, LibMCEnv_uint32* pUUIDNeededChars, char * pUUIDBuffer);

/**
* Retrieves the count of segments.
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[out] pCount - Count
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvToolpathLayer_GetSegmentCountPtr) (LibMCEnv_ToolpathLayer pToolpathLayer, LibMCEnv_uint32 * pCount);

/**
* Retrieves the segment type and point count information .
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[in] nIndex - Index. Must be between 0 and Count - 1.
* @param[out] pType - Segment Type
* @param[out] pPointCount - Point count of segment.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvToolpathLayer_GetSegmentInfoPtr) (LibMCEnv_ToolpathLayer pToolpathLayer, LibMCEnv_uint32 nIndex, LibMCEnv::eToolpathSegmentType * pType, LibMCEnv_uint32 * pPointCount);

/**
* Retrieves the segment type.
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[in] nIndex - Index. Must be between 0 and Count - 1.
* @param[out] pType - Segment Type
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvToolpathLayer_GetSegmentTypePtr) (LibMCEnv_ToolpathLayer pToolpathLayer, LibMCEnv_uint32 nIndex, LibMCEnv::eToolpathSegmentType * pType);

/**
* Retrieves the segment integer attribute with the corresponding ID. Fails if attribute does not exist or does have different type.
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[in] nIndex - Segment Index. Must be between 0 and Count - 1.
* @param[in] nAttributeID - ID of the attribute.
* @param[out] pValue - Attribute Value.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvToolpathLayer_GetSegmentIntegerAttributePtr) (LibMCEnv_ToolpathLayer pToolpathLayer, LibMCEnv_uint32 nIndex, LibMCEnv_uint32 nAttributeID, LibMCEnv_int64 * pValue);

/**
* Retrieves the segment double attribute with the corresponding ID. Fails if attribute does not exist or does have different type.
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[in] nIndex - Segment Index. Must be between 0 and Count - 1.
* @param[in] nAttributeID - ID of the attribute.
* @param[out] pValue - Attribute Value.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvToolpathLayer_GetSegmentDoubleAttributePtr) (LibMCEnv_ToolpathLayer pToolpathLayer, LibMCEnv_uint32 nIndex, LibMCEnv_uint32 nAttributeID, LibMCEnv_double * pValue);

/**
* Checks if a segment attribute is registered.
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[in] pNamespace - Namespace of the attribute.
* @param[in] pAttributeName - Name of the attribute.
* @param[out] pValueExists - Flag if attribute is registered.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvToolpathLayer_HasCustomSegmentAttributePtr) (LibMCEnv_ToolpathLayer pToolpathLayer, const char * pNamespace, const char * pAttributeName, bool * pValueExists);

/**
* Finds a segment attribute ID. Fails if attribute is not registered.
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[in] pNamespace - Namespace of the attribute.
* @param[in] pAttributeName - Name of the attribute.
* @param[out] pAttributeID - ID of the attribute.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvToolpathLayer_FindCustomSegmentAttributeIDPtr) (LibMCEnv_ToolpathLayer pToolpathLayer, const char * pNamespace, const char * pAttributeName, LibMCEnv_uint32 * pAttributeID);

/**
* Finds a segment attribute type. Fails if attribute is not registered.
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[in] pNamespace - Namespace of the attribute.
* @param[in] pAttributeName - Name of the attribute.
* @param[out] pAttributeType - Type of the attribute.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvToolpathLayer_FindCustomSegmentAttributeTypePtr) (LibMCEnv_ToolpathLayer pToolpathLayer, const char * pNamespace, const char * pAttributeName, LibMCEnv::eToolpathAttributeType * pAttributeType);

/**
* Finds a segment attribute ID and type. Fails if attribute is not registered.
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[in] pNamespace - Namespace of the attribute.
* @param[in] pAttributeName - Name of the attribute.
* @param[out] pAttributeID - ID of the attribute.
* @param[out] pAttributeType - Type of the attribute.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvToolpathLayer_FindCustomSegmentAttributeInfoPtr) (LibMCEnv_ToolpathLayer pToolpathLayer, const char * pNamespace, const char * pAttributeName, LibMCEnv_uint32 * pAttributeID, LibMCEnv::eToolpathAttributeType * pAttributeType);

/**
* Retrieves the number of points in the segment. For type hatch, the points are taken pairwise.
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[in] nIndex - Index. Must be between 0 and Count - 1.
* @param[out] pHatchCount - Hatch count of segment.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvToolpathLayer_GetSegmentPointCountPtr) (LibMCEnv_ToolpathLayer pToolpathLayer, LibMCEnv_uint32 nIndex, LibMCEnv_uint32 * pHatchCount);

/**
* Retrieves the number of hatches in the segment (i.e. PointCount / 2). Returns 0 if segment is not of type hatch.
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[in] nIndex - Index. Must be between 0 and Count - 1.
* @param[out] pHatchCount - Hatch count of segment.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvToolpathLayer_GetSegmentHatchCountPtr) (LibMCEnv_ToolpathLayer pToolpathLayer, LibMCEnv_uint32 nIndex, LibMCEnv_uint32 * pHatchCount);

/**
* Retrieves the assigned segment profile uuid.
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[in] nIndex - Index. Must be between 0 and Count - 1.
* @param[in] nProfileUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pProfileUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pProfileUUIDBuffer -  buffer of Segment Profile UUID, may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvToolpathLayer_GetSegmentProfileUUIDPtr) (LibMCEnv_ToolpathLayer pToolpathLayer, LibMCEnv_uint32 nIndex, const LibMCEnv_uint32 nProfileUUIDBufferSize, LibMCEnv_uint32* pProfileUUIDNeededChars, char * pProfileUUIDBuffer);

/**
* Retrieves an assigned profile custom value.
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[in] nIndex - Index. Must be between 0 and Count - 1.
* @param[in] pNamespace - Namespace to query for.
* @param[in] pValueName - Value Name to query for.
* @param[out] pHasValue - Returns true if value exist.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvToolpathLayer_SegmentProfileHasValuePtr) (LibMCEnv_ToolpathLayer pToolpathLayer, LibMCEnv_uint32 nIndex, const char * pNamespace, const char * pValueName, bool * pHasValue);

/**
* Retrieves an assigned profile custom value. Fails if value does not exist.
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[in] nIndex - Index. Must be between 0 and Count - 1.
* @param[in] pNamespace - Namespace to query for.
* @param[in] pValueName - Value Name to query for.
* @param[in] nValueBufferSize - size of the buffer (including trailing 0)
* @param[out] pValueNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pValueBuffer -  buffer of String Value., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvToolpathLayer_GetSegmentProfileValuePtr) (LibMCEnv_ToolpathLayer pToolpathLayer, LibMCEnv_uint32 nIndex, const char * pNamespace, const char * pValueName, const LibMCEnv_uint32 nValueBufferSize, LibMCEnv_uint32* pValueNeededChars, char * pValueBuffer);

/**
* Retrieves an assigned profile custom value.
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[in] nIndex - Index. Must be between 0 and Count - 1.
* @param[in] pNamespace - Namespace to query for.
* @param[in] pValueName - Value Name to query for.
* @param[in] pDefaultValue - Default value if value does not exist.
* @param[in] nValueBufferSize - size of the buffer (including trailing 0)
* @param[out] pValueNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pValueBuffer -  buffer of String Value., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvToolpathLayer_GetSegmentProfileValueDefPtr) (LibMCEnv_ToolpathLayer pToolpathLayer, LibMCEnv_uint32 nIndex, const char * pNamespace, const char * pValueName, const char * pDefaultValue, const LibMCEnv_uint32 nValueBufferSize, LibMCEnv_uint32* pValueNeededChars, char * pValueBuffer);

/**
* Retrieves an assigned profile custom double value. Fails if value does not exist or is not a double value.
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[in] nIndex - Index. Must be between 0 and Count - 1.
* @param[in] pNamespace - Namespace to query for.
* @param[in] pValueName - Value Name to query for.
* @param[out] pValue - Double Value.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvToolpathLayer_GetSegmentProfileDoubleValuePtr) (LibMCEnv_ToolpathLayer pToolpathLayer, LibMCEnv_uint32 nIndex, const char * pNamespace, const char * pValueName, LibMCEnv_double * pValue);

/**
* Retrieves an assigned profile custom double value. Fails if value exists but is not a double value.
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[in] nIndex - Index. Must be between 0 and Count - 1.
* @param[in] pNamespace - Namespace to query for.
* @param[in] pValueName - Value Name to query for.
* @param[in] dDefaultValue - Default value if value does not exist.
* @param[out] pValue - Double Value.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvToolpathLayer_GetSegmentProfileDoubleValueDefPtr) (LibMCEnv_ToolpathLayer pToolpathLayer, LibMCEnv_uint32 nIndex, const char * pNamespace, const char * pValueName, LibMCEnv_double dDefaultValue, LibMCEnv_double * pValue);

/**
* Retrieves an assigned profile custom integer value. Fails if value does not exist or is not a integer value.
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[in] nIndex - Index. Must be between 0 and Count - 1.
* @param[in] pNamespace - Namespace to query for.
* @param[in] pValueName - Value Name to query for.
* @param[out] pValue - Integer Value.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvToolpathLayer_GetSegmentProfileIntegerValuePtr) (LibMCEnv_ToolpathLayer pToolpathLayer, LibMCEnv_uint32 nIndex, const char * pNamespace, const char * pValueName, LibMCEnv_int64 * pValue);

/**
* Retrieves an assigned profile custom integer value. Fails if value exists but is not a integer value.
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[in] nIndex - Index. Must be between 0 and Count - 1.
* @param[in] pNamespace - Namespace to query for.
* @param[in] pValueName - Value Name to query for.
* @param[in] nDefaultValue - Default value if value does not exist.
* @param[out] pValue - Integer Value.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvToolpathLayer_GetSegmentProfileIntegerValueDefPtr) (LibMCEnv_ToolpathLayer pToolpathLayer, LibMCEnv_uint32 nIndex, const char * pNamespace, const char * pValueName, LibMCEnv_int64 nDefaultValue, LibMCEnv_int64 * pValue);

/**
* Retrieves an assigned profile custom boolean value. A Boolean value is either an integer value, or strings of the form true or false (case insensitive). Fails if value does not exist or is not a bool value.
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[in] nIndex - Index. Must be between 0 and Count - 1.
* @param[in] pNamespace - Namespace to query for.
* @param[in] pValueName - Value Name to query for.
* @param[out] pValue - Boolean Value.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvToolpathLayer_GetSegmentProfileBoolValuePtr) (LibMCEnv_ToolpathLayer pToolpathLayer, LibMCEnv_uint32 nIndex, const char * pNamespace, const char * pValueName, bool * pValue);

/**
* Retrieves an assigned profile custom boolean value. A Boolean value is either an integer value, or strings of the form true or false (case insensitive). Fails if value exists but is not a bool value.
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[in] nIndex - Index. Must be between 0 and Count - 1.
* @param[in] pNamespace - Namespace to query for.
* @param[in] pValueName - Value Name to query for.
* @param[in] bDefaultValue - Default value if value does not exist.
* @param[out] pValue - Boolean Value.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvToolpathLayer_GetSegmentProfileBoolValueDefPtr) (LibMCEnv_ToolpathLayer pToolpathLayer, LibMCEnv_uint32 nIndex, const char * pNamespace, const char * pValueName, bool bDefaultValue, bool * pValue);

/**
* Retrieves an assigned profile value of a standard type. Fails if value does not exist or is not a double value.
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[in] nIndex - Index. Must be between 0 and Count - 1.
* @param[in] eValueType - Enum to query for. MUST NOT be custom.
* @param[out] pValue - Double Value
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvToolpathLayer_GetSegmentProfileTypedValuePtr) (LibMCEnv_ToolpathLayer pToolpathLayer, LibMCEnv_uint32 nIndex, LibMCEnv::eToolpathProfileValueType eValueType, LibMCEnv_double * pValue);

/**
* Retrieves an assigned profile value of a standard type. Fails if value exists but is not a double value.
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[in] nIndex - Index. Must be between 0 and Count - 1.
* @param[in] eValueType - Enum to query for. MUST NOT be custom.
* @param[in] dDefaultValue - Default value if value does not exist.
* @param[out] pValue - Double Value
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvToolpathLayer_GetSegmentProfileTypedValueDefPtr) (LibMCEnv_ToolpathLayer pToolpathLayer, LibMCEnv_uint32 nIndex, LibMCEnv::eToolpathProfileValueType eValueType, LibMCEnv_double dDefaultValue, LibMCEnv_double * pValue);

/**
* Retrieves the assigned segment part uuid.
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[in] nIndex - Index. Must be between 0 and Count - 1.
* @param[in] nPartUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pPartUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pPartUUIDBuffer -  buffer of Segment Part UUID, may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvToolpathLayer_GetSegmentPartUUIDPtr) (LibMCEnv_ToolpathLayer pToolpathLayer, LibMCEnv_uint32 nIndex, const LibMCEnv_uint32 nPartUUIDBufferSize, LibMCEnv_uint32* pPartUUIDNeededChars, char * pPartUUIDBuffer);

/**
* Retrieves the assigned segment point list. For type hatch, the points are taken pairwise.
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[in] nIndex - Index. Must be between 0 and Count - 1.
* @param[in] nPointDataBufferSize - Number of elements in buffer
* @param[out] pPointDataNeededCount - will be filled with the count of the written elements, or needed buffer size.
* @param[out] pPointDataBuffer - Position2D  buffer of The point data array. Positions are absolute in units.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvToolpathLayer_GetSegmentPointDataPtr) (LibMCEnv_ToolpathLayer pToolpathLayer, LibMCEnv_uint32 nIndex, const LibMCEnv_uint64 nPointDataBufferSize, LibMCEnv_uint64* pPointDataNeededCount, LibMCEnv::sPosition2D * pPointDataBuffer);

/**
* Retrieves the assigned segment hatch list. Fails if segment type is not hatch.
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[in] nIndex - Index. Must be between 0 and Count - 1.
* @param[in] nHatchDataBufferSize - Number of elements in buffer
* @param[out] pHatchDataNeededCount - will be filled with the count of the written elements, or needed buffer size.
* @param[out] pHatchDataBuffer - Hatch2D  buffer of The hatch data array. Positions are absolute in units.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvToolpathLayer_GetSegmentHatchDataPtr) (LibMCEnv_ToolpathLayer pToolpathLayer, LibMCEnv_uint32 nIndex, const LibMCEnv_uint64 nHatchDataBufferSize, LibMCEnv_uint64* pHatchDataNeededCount, LibMCEnv::sHatch2D * pHatchDataBuffer);

/**
* Retrieves the assigned segment point list. For type hatch, the points are taken pairwise.
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[in] nIndex - Index. Must be between 0 and Count - 1.
* @param[in] nPointDataBufferSize - Number of elements in buffer
* @param[out] pPointDataNeededCount - will be filled with the count of the written elements, or needed buffer size.
* @param[out] pPointDataBuffer - FloatPosition2D  buffer of The point data array. Positions are absolute in mm.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvToolpathLayer_GetSegmentPointDataInMMPtr) (LibMCEnv_ToolpathLayer pToolpathLayer, LibMCEnv_uint32 nIndex, const LibMCEnv_uint64 nPointDataBufferSize, LibMCEnv_uint64* pPointDataNeededCount, LibMCEnv::sFloatPosition2D * pPointDataBuffer);

/**
* Retrieves the assigned segment hatch list. Fails if segment type is not hatch.
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[in] nIndex - Index. Must be between 0 and Count - 1.
* @param[in] nHatchDataBufferSize - Number of elements in buffer
* @param[out] pHatchDataNeededCount - will be filled with the count of the written elements, or needed buffer size.
* @param[out] pHatchDataBuffer - FloatHatch2D  buffer of The hatch data array. Positions are absolute in mm.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvToolpathLayer_GetSegmentHatchDataInMMPtr) (LibMCEnv_ToolpathLayer pToolpathLayer, LibMCEnv_uint32 nIndex, const LibMCEnv_uint64 nHatchDataBufferSize, LibMCEnv_uint64* pHatchDataNeededCount, LibMCEnv::sFloatHatch2D * pHatchDataBuffer);

/**
* Retrieves the layers Z Value in units.
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[out] pZValue - Z Value of the layer in units.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvToolpathLayer_GetZValuePtr) (LibMCEnv_ToolpathLayer pToolpathLayer, LibMCEnv_int32 * pZValue);

/**
* Retrieves the layers Z Value in mm.
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[out] pZValue - Z Value of the layer in mm.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvToolpathLayer_GetZValueInMMPtr) (LibMCEnv_ToolpathLayer pToolpathLayer, LibMCEnv_double * pZValue);

/**
* Retrieves the toolpath units in mm.
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[out] pUnits - Toolpath units.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvToolpathLayer_GetUnitsPtr) (LibMCEnv_ToolpathLayer pToolpathLayer, LibMCEnv_double * pUnits);

/**
* Retrieves the number of metadata nodes in the build file.
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[out] pMetaDataCount - Meta Data information.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvToolpathLayer_GetMetaDataCountPtr) (LibMCEnv_ToolpathLayer pToolpathLayer, LibMCEnv_uint32 * pMetaDataCount);

/**
* Returns the namespace and identifier of the given metadata index.
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[in] nMetaDataIndex - Index of metadata to return (0-based).
* @param[in] nNamespaceBufferSize - size of the buffer (including trailing 0)
* @param[out] pNamespaceNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNamespaceBuffer -  buffer of Namespace of the metadata, may be NULL
* @param[in] nNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNameBuffer -  buffer of Name of the metadata, may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvToolpathLayer_GetMetaDataInfoPtr) (LibMCEnv_ToolpathLayer pToolpathLayer, LibMCEnv_uint32 nMetaDataIndex, const LibMCEnv_uint32 nNamespaceBufferSize, LibMCEnv_uint32* pNamespaceNeededChars, char * pNamespaceBuffer, const LibMCEnv_uint32 nNameBufferSize, LibMCEnv_uint32* pNameNeededChars, char * pNameBuffer);

/**
* Returns the metadata XML content of the given metadata index.
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[in] nMetaDataIndex - Index of metadata to return (0-based).
* @param[out] pXMLNode - XML Metadata Object
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvToolpathLayer_GetMetaDataContentPtr) (LibMCEnv_ToolpathLayer pToolpathLayer, LibMCEnv_uint32 nMetaDataIndex, LibMCEnv_XMLDocumentNode * pXMLNode);

/**
* Checks if a metadata exists in the build file.
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[in] pNamespace - Namespace of the metadata
* @param[in] pName - Name of the metadata
* @param[out] pMetaDataExists - Returns true if metadata exists and is unique.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvToolpathLayer_HasUniqueMetaDataPtr) (LibMCEnv_ToolpathLayer pToolpathLayer, const char * pNamespace, const char * pName, bool * pMetaDataExists);

/**
* Returns the given metadata XML content of the build file. Fails if metadata content does not exist or is not unique.
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[in] pNamespace - Namespace of the metadata
* @param[in] pName - Name of the metadata
* @param[out] pXMLNode - XML Metadata Object
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvToolpathLayer_FindUniqueMetaDataPtr) (LibMCEnv_ToolpathLayer pToolpathLayer, const char * pNamespace, const char * pName, LibMCEnv_XMLDocumentNode * pXMLNode);

/*************************************************************************************************************************
 Class definition for ToolpathAccessor
**************************************************************************************************************************/

/**
* Returns Toolpath storage UUID.
*
* @param[in] pToolpathAccessor - ToolpathAccessor instance.
* @param[in] nStorageUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pStorageUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pStorageUUIDBuffer -  buffer of Returns toolpath storage uuid., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvToolpathAccessor_GetStorageUUIDPtr) (LibMCEnv_ToolpathAccessor pToolpathAccessor, const LibMCEnv_uint32 nStorageUUIDBufferSize, LibMCEnv_uint32* pStorageUUIDNeededChars, char * pStorageUUIDBuffer);

/**
* Returns UUID of the toolpath's build file.
*
* @param[in] pToolpathAccessor - ToolpathAccessor instance.
* @param[in] nBuildUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pBuildUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pBuildUUIDBuffer -  buffer of Returns build uuid., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvToolpathAccessor_GetBuildUUIDPtr) (LibMCEnv_ToolpathAccessor pToolpathAccessor, const LibMCEnv_uint32 nBuildUUIDBufferSize, LibMCEnv_uint32* pBuildUUIDNeededChars, char * pBuildUUIDBuffer);

/**
* Returns layer count.
*
* @param[in] pToolpathAccessor - ToolpathAccessor instance.
* @param[out] pLayerCount - Returns layer count.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvToolpathAccessor_GetLayerCountPtr) (LibMCEnv_ToolpathAccessor pToolpathAccessor, LibMCEnv_uint32 * pLayerCount);

/**
* Registers a new custom segment attribute to be read.
*
* @param[in] pToolpathAccessor - ToolpathAccessor instance.
* @param[in] pNameSpace - Namespace of the custom attribute.
* @param[in] pAttributeName - Name of the custom attribute.
* @param[in] eAttributeType - Attribute Type.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvToolpathAccessor_RegisterCustomSegmentAttributePtr) (LibMCEnv_ToolpathAccessor pToolpathAccessor, const char * pNameSpace, const char * pAttributeName, LibMCEnv::eToolpathAttributeType eAttributeType);

/**
* Reads and returns a layer object.
*
* @param[in] pToolpathAccessor - ToolpathAccessor instance.
* @param[in] nLayerIndex - Layer Index.
* @param[out] pLayerData - Toolpath layer object.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvToolpathAccessor_LoadLayerPtr) (LibMCEnv_ToolpathAccessor pToolpathAccessor, LibMCEnv_uint32 nLayerIndex, LibMCEnv_ToolpathLayer * pLayerData);

/**
* Retrieves the toolpath units in mm.
*
* @param[in] pToolpathAccessor - ToolpathAccessor instance.
* @param[out] pUnits - Toolpath units.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvToolpathAccessor_GetUnitsPtr) (LibMCEnv_ToolpathAccessor pToolpathAccessor, LibMCEnv_double * pUnits);

/**
* Retrieves the number of parts in the toolpath.
*
* @param[in] pToolpathAccessor - ToolpathAccessor instance.
* @param[out] pPartCount - Number of parts.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvToolpathAccessor_GetPartCountPtr) (LibMCEnv_ToolpathAccessor pToolpathAccessor, LibMCEnv_uint32 * pPartCount);

/**
* Retrieves the part information of a toolpath.
*
* @param[in] pToolpathAccessor - ToolpathAccessor instance.
* @param[in] nPartIndex - Index of part. MUST be between 0 and PartCount-1
* @param[out] pPart - Part Instance
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvToolpathAccessor_GetPartPtr) (LibMCEnv_ToolpathAccessor pToolpathAccessor, LibMCEnv_uint32 nPartIndex, LibMCEnv_ToolpathPart * pPart);

/**
* Finds the part information of a toolpath.
*
* @param[in] pToolpathAccessor - ToolpathAccessor instance.
* @param[in] pPartUUID - UUID of part.
* @param[out] pPart - Part Instance. Returns null if part does not exist.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvToolpathAccessor_FindPartByUUIDPtr) (LibMCEnv_ToolpathAccessor pToolpathAccessor, const char * pPartUUID, LibMCEnv_ToolpathPart * pPart);

/**
* Retrieves the build height in units.
*
* @param[in] pToolpathAccessor - ToolpathAccessor instance.
* @param[out] pBuildHeight - Build height in units.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvToolpathAccessor_GetBuildHeightInUnitsPtr) (LibMCEnv_ToolpathAccessor pToolpathAccessor, LibMCEnv_int32 * pBuildHeight);

/**
* Retrieves the layers Z Value in units.
*
* @param[in] pToolpathAccessor - ToolpathAccessor instance.
* @param[in] nLayerIndex - Layer Index to return.
* @param[out] pZValue - Z Value of the layer in units.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvToolpathAccessor_GetZValueInUnitsPtr) (LibMCEnv_ToolpathAccessor pToolpathAccessor, LibMCEnv_uint32 nLayerIndex, LibMCEnv_int32 * pZValue);

/**
* Retrieves the build height in mm.
*
* @param[in] pToolpathAccessor - ToolpathAccessor instance.
* @param[out] pBuildHeight - Build height in mm.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvToolpathAccessor_GetBuildHeightInMMPtr) (LibMCEnv_ToolpathAccessor pToolpathAccessor, LibMCEnv_double * pBuildHeight);

/**
* Retrieves the layers Z Value in mm.
*
* @param[in] pToolpathAccessor - ToolpathAccessor instance.
* @param[in] nLayerIndex - Layer Index to return.
* @param[out] pZValue - Z Value of the layer in mm.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvToolpathAccessor_GetZValueInMMPtr) (LibMCEnv_ToolpathAccessor pToolpathAccessor, LibMCEnv_uint32 nLayerIndex, LibMCEnv_double * pZValue);

/**
* Retrieves the number of metadata nodes in the build file.
*
* @param[in] pToolpathAccessor - ToolpathAccessor instance.
* @param[out] pMetaDataCount - Meta Data information.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvToolpathAccessor_GetMetaDataCountPtr) (LibMCEnv_ToolpathAccessor pToolpathAccessor, LibMCEnv_uint32 * pMetaDataCount);

/**
* Returns the namespace and identifier of the given metadata index.
*
* @param[in] pToolpathAccessor - ToolpathAccessor instance.
* @param[in] nMetaDataIndex - Index of metadata to return (0-based).
* @param[in] nNamespaceBufferSize - size of the buffer (including trailing 0)
* @param[out] pNamespaceNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNamespaceBuffer -  buffer of Namespace of the metadata, may be NULL
* @param[in] nNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNameBuffer -  buffer of Name of the metadata, may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvToolpathAccessor_GetMetaDataInfoPtr) (LibMCEnv_ToolpathAccessor pToolpathAccessor, LibMCEnv_uint32 nMetaDataIndex, const LibMCEnv_uint32 nNamespaceBufferSize, LibMCEnv_uint32* pNamespaceNeededChars, char * pNamespaceBuffer, const LibMCEnv_uint32 nNameBufferSize, LibMCEnv_uint32* pNameNeededChars, char * pNameBuffer);

/**
* Returns the metadata XML content of the given metadata index.
*
* @param[in] pToolpathAccessor - ToolpathAccessor instance.
* @param[in] nMetaDataIndex - Index of metadata to return (0-based).
* @param[out] pXMLNode - XML Metadata Object
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvToolpathAccessor_GetMetaDataContentPtr) (LibMCEnv_ToolpathAccessor pToolpathAccessor, LibMCEnv_uint32 nMetaDataIndex, LibMCEnv_XMLDocumentNode * pXMLNode);

/**
* Checks if a metadata exists in the build file.
*
* @param[in] pToolpathAccessor - ToolpathAccessor instance.
* @param[in] pNamespace - Namespace of the metadata
* @param[in] pName - Name of the metadata
* @param[out] pMetaDataExists - Returns true if metadata exists and is unique.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvToolpathAccessor_HasUniqueMetaDataPtr) (LibMCEnv_ToolpathAccessor pToolpathAccessor, const char * pNamespace, const char * pName, bool * pMetaDataExists);

/**
* Returns the given metadata XML content of the build file. Fails if metadata content does not exist or is not unique.
*
* @param[in] pToolpathAccessor - ToolpathAccessor instance.
* @param[in] pNamespace - Namespace of the metadata
* @param[in] pName - Name of the metadata
* @param[out] pXMLNode - XML Metadata Object
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvToolpathAccessor_FindUniqueMetaDataPtr) (LibMCEnv_ToolpathAccessor pToolpathAccessor, const char * pNamespace, const char * pName, LibMCEnv_XMLDocumentNode * pXMLNode);

/*************************************************************************************************************************
 Class definition for Build
**************************************************************************************************************************/

/**
* Returns name of the build.
*
* @param[in] pBuild - Build instance.
* @param[in] nNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNameBuffer -  buffer of Name of the build., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvBuild_GetNamePtr) (LibMCEnv_Build pBuild, const LibMCEnv_uint32 nNameBufferSize, LibMCEnv_uint32* pNameNeededChars, char * pNameBuffer);

/**
* Returns uuid of the build.
*
* @param[in] pBuild - Build instance.
* @param[in] nBuildUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pBuildUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pBuildUUIDBuffer -  buffer of UUID of the build., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvBuild_GetBuildUUIDPtr) (LibMCEnv_Build pBuild, const LibMCEnv_uint32 nBuildUUIDBufferSize, LibMCEnv_uint32* pBuildUUIDNeededChars, char * pBuildUUIDBuffer);

/**
* Returns storage uuid of the build.
*
* @param[in] pBuild - Build instance.
* @param[in] nStorageUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pStorageUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pStorageUUIDBuffer -  buffer of Storage UUID of the build., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvBuild_GetStorageUUIDPtr) (LibMCEnv_Build pBuild, const LibMCEnv_uint32 nStorageUUIDBufferSize, LibMCEnv_uint32* pStorageUUIDNeededChars, char * pStorageUUIDBuffer);

/**
* Returns SHA256 of the build stream.
*
* @param[in] pBuild - Build instance.
* @param[in] nSHA256BufferSize - size of the buffer (including trailing 0)
* @param[out] pSHA256NeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pSHA256Buffer -  buffer of SHA256 of the build stream., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvBuild_GetStorageSHA256Ptr) (LibMCEnv_Build pBuild, const LibMCEnv_uint32 nSHA256BufferSize, LibMCEnv_uint32* pSHA256NeededChars, char * pSHA256Buffer);

/**
* Returns cached layer count of the toolpath.
*
* @param[in] pBuild - Build instance.
* @param[out] pLayerCount - Returns layer count.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvBuild_GetLayerCountPtr) (LibMCEnv_Build pBuild, LibMCEnv_uint32 * pLayerCount);

/**
* Retrieves the build height in mm.
*
* @param[in] pBuild - Build instance.
* @param[out] pBuildHeight - Build height in mm.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvBuild_GetBuildHeightInMMPtr) (LibMCEnv_Build pBuild, LibMCEnv_double * pBuildHeight);

/**
* Retrieves the layers Z Value in mm.
*
* @param[in] pBuild - Build instance.
* @param[in] nLayerIndex - Layer Index to return.
* @param[out] pZValue - Z Value of the layer in mm.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvBuild_GetZValueInMMPtr) (LibMCEnv_Build pBuild, LibMCEnv_uint32 nLayerIndex, LibMCEnv_double * pZValue);

/**
* loads the a toolpath into memory
*
* @param[in] pBuild - Build instance.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvBuild_LoadToolpathPtr) (LibMCEnv_Build pBuild);

/**
* unloads the a toolpath from memory, if it has been loaded before.
*
* @param[in] pBuild - Build instance.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvBuild_UnloadToolpathPtr) (LibMCEnv_Build pBuild);

/**
* checks, if a toolpath object is loaded to memory.
*
* @param[in] pBuild - Build instance.
* @param[out] pIsLoaded - returns if toolpath is loaded.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvBuild_ToolpathIsLoadedPtr) (LibMCEnv_Build pBuild, bool * pIsLoaded);

/**
* Creates an accessor object for a toolpath. Toolpath MUST have been loaded with LoadToolpath before.
*
* @param[in] pBuild - Build instance.
* @param[out] pToolpathInstance - Toolpath instance.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvBuild_CreateToolpathAccessorPtr) (LibMCEnv_Build pBuild, LibMCEnv_ToolpathAccessor * pToolpathInstance);

/**
* Adds binary data to store with the build.
*
* @param[in] pBuild - Build instance.
* @param[in] pIdentifier - Unique identifier of the attached data. Fails if ther already exists a binary data with the equal identifier.
* @param[in] pName - Name of the attache data
* @param[in] pMIMEType - Mime type of the data.
* @param[in] nContentBufferSize - Number of elements in buffer
* @param[in] pContentBuffer - uint8 buffer of Stream content to store
* @param[in] nDataUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pDataUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pDataUUIDBuffer -  buffer of Data UUID of the attachment., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvBuild_AddBinaryDataPtr) (LibMCEnv_Build pBuild, const char * pIdentifier, const char * pName, const char * pMIMEType, LibMCEnv_uint64 nContentBufferSize, const LibMCEnv_uint8 * pContentBuffer, const LibMCEnv_uint32 nDataUUIDBufferSize, LibMCEnv_uint32* pDataUUIDNeededChars, char * pDataUUIDBuffer);

/**
* Loads a discrete field by context identifier which was previously stored in the build job. MIME Type MUST be application/amcf-discretefield2d.
*
* @param[in] pBuild - Build instance.
* @param[in] pContextIdentifier - Unique name of the build attachment. Fails if name does not exist or has invalid Mime type.
* @param[out] pFieldDataInstance - Loaded field instance.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvBuild_LoadDiscreteField2DByIdentifierPtr) (LibMCEnv_Build pBuild, const char * pContextIdentifier, LibMCEnv_DiscreteFieldData2D * pFieldDataInstance);

/**
* Loads a discrete field by uuid which previously stored in the build job. MIME Type MUST be application/amcf-discretefield2d.
*
* @param[in] pBuild - Build instance.
* @param[in] pDataUUID - Data UUID of the attachment. Fails if name does not exist or has invalid Mime type.
* @param[out] pFieldDataInstance - Loaded field instance.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvBuild_LoadDiscreteField2DByUUIDPtr) (LibMCEnv_Build pBuild, const char * pDataUUID, LibMCEnv_DiscreteFieldData2D * pFieldDataInstance);

/**
* Stores a discrete field in the build job. MIME Type will be application/amcf-discretefield2d.
*
* @param[in] pBuild - Build instance.
* @param[in] pContextIdentifier - Unique name of the build attachment. Fails if name does not exist or has invalid Mime type.
* @param[in] pName - Unique name of the build attachment. Fails if name does not exist or has invalid Mime type.
* @param[in] pFieldDataInstance - Field instance to store.
* @param[in] pStoreOptions - Field Data Store Options.
* @param[in] nDataUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pDataUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pDataUUIDBuffer -  buffer of Data UUID of the attachment., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvBuild_StoreDiscreteField2DPtr) (LibMCEnv_Build pBuild, const char * pContextIdentifier, const char * pName, LibMCEnv_DiscreteFieldData2D pFieldDataInstance, LibMCEnv_DiscreteFieldData2DStoreOptions pStoreOptions, const LibMCEnv_uint32 nDataUUIDBufferSize, LibMCEnv_uint32* pDataUUIDNeededChars, char * pDataUUIDBuffer);

/**
* Loads a discrete field by context identifier which was previously stored in the build job. MIME Type MUST be image/png.
*
* @param[in] pBuild - Build instance.
* @param[in] pContextIdentifier - Unique name of the build attachment. Fails if name does not exist or has invalid Mime type.
* @param[out] pImageDataInstance - Image data instance.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvBuild_LoadPNGImageByIdentifierPtr) (LibMCEnv_Build pBuild, const char * pContextIdentifier, LibMCEnv_ImageData * pImageDataInstance);

/**
* Loads a discrete field by uuid which was previously stored in the build job. MIME Type MUST be image/png.
*
* @param[in] pBuild - Build instance.
* @param[in] pDataUUID - Data UUID of the attachment. Fails if name does not exist or has invalid Mime type.
* @param[out] pImageDataInstance - Image data instance.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvBuild_LoadPNGImageByUUIDPtr) (LibMCEnv_Build pBuild, const char * pDataUUID, LibMCEnv_ImageData * pImageDataInstance);

/**
* Stores a discrete field in the build job. MIME Type will be image/png
*
* @param[in] pBuild - Build instance.
* @param[in] pContextIdentifier - Unique name of the build attachment. Fails if name does not exist or has invalid Mime type.
* @param[in] pName - Unique name of the build attachment. Fails if name does not exist or has invalid Mime type.
* @param[in] pImageDataInstance - Image data instance.
* @param[in] pStoreOptions - PNG Store Options.
* @param[in] nDataUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pDataUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pDataUUIDBuffer -  buffer of Data UUID of the attachment., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvBuild_StorePNGImagePtr) (LibMCEnv_Build pBuild, const char * pContextIdentifier, const char * pName, LibMCEnv_ImageData pImageDataInstance, LibMCEnv_PNGImageStoreOptions pStoreOptions, const LibMCEnv_uint32 nDataUUIDBufferSize, LibMCEnv_uint32* pDataUUIDNeededChars, char * pDataUUIDBuffer);

/*************************************************************************************************************************
 Class definition for WorkingFileExecution
**************************************************************************************************************************/

/**
* Returns the execution status
*
* @param[in] pWorkingFileExecution - WorkingFileExecution instance.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvWorkingFileExecution_GetStatusPtr) (LibMCEnv_WorkingFileExecution pWorkingFileExecution);

/**
* Returns the output of the executable as string buffer
*
* @param[in] pWorkingFileExecution - WorkingFileExecution instance.
* @param[in] nStringBufferBufferSize - size of the buffer (including trailing 0)
* @param[out] pStringBufferNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pStringBufferBuffer -  buffer of stdout buffer, may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvWorkingFileExecution_ReturnStdOutPtr) (LibMCEnv_WorkingFileExecution pWorkingFileExecution, const LibMCEnv_uint32 nStringBufferBufferSize, LibMCEnv_uint32* pStringBufferNeededChars, char * pStringBufferBuffer);

/*************************************************************************************************************************
 Class definition for WorkingFile
**************************************************************************************************************************/

/**
* Retrieves absolute file name of the working file
*
* @param[in] pWorkingFile - WorkingFile instance.
* @param[in] nFileNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pFileNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pFileNameBuffer -  buffer of global path of the file, may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvWorkingFile_GetAbsoluteFileNamePtr) (LibMCEnv_WorkingFile pWorkingFile, const LibMCEnv_uint32 nFileNameBufferSize, LibMCEnv_uint32* pFileNameNeededChars, char * pFileNameBuffer);

/**
* Returns the size of temporary file.
*
* @param[in] pWorkingFile - WorkingFile instance.
* @param[out] pFileSize - file size
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvWorkingFile_GetSizePtr) (LibMCEnv_WorkingFile pWorkingFile, LibMCEnv_uint64 * pFileSize);

/**
* Calculates the SHA256 checksum of the file.
*
* @param[in] pWorkingFile - WorkingFile instance.
* @param[in] nSHA2BufferSize - size of the buffer (including trailing 0)
* @param[out] pSHA2NeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pSHA2Buffer -  buffer of sha256 checksum, may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvWorkingFile_CalculateSHA2Ptr) (LibMCEnv_WorkingFile pWorkingFile, const LibMCEnv_uint32 nSHA2BufferSize, LibMCEnv_uint32* pSHA2NeededChars, char * pSHA2Buffer);

/**
* Executes the temporary file, if it is an executable.
*
* @param[in] pWorkingFile - WorkingFile instance.
* @param[out] pExecution - execution object
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvWorkingFile_ExecuteFilePtr) (LibMCEnv_WorkingFile pWorkingFile, LibMCEnv_WorkingFileExecution * pExecution);

/**
* Returns if the file is managed.
*
* @param[in] pWorkingFile - WorkingFile instance.
* @param[out] pFileIsManaged - returns if the file is managed.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvWorkingFile_IsManagedPtr) (LibMCEnv_WorkingFile pWorkingFile, bool * pFileIsManaged);

/**
* Makes the file managed if it is not managed yet.
*
* @param[in] pWorkingFile - WorkingFile instance.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvWorkingFile_MakeManagedPtr) (LibMCEnv_WorkingFile pWorkingFile);

/**
* Returns if the file exists on disk.
*
* @param[in] pWorkingFile - WorkingFile instance.
* @param[out] pFileDoesExist - returns if the file exists.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvWorkingFile_FileExistsPtr) (LibMCEnv_WorkingFile pWorkingFile, bool * pFileDoesExist);

/**
* Deletes the temporary file.
*
* @param[in] pWorkingFile - WorkingFile instance.
* @param[out] pSuccess - returns if deletion was successful or file did not exist in the first place.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvWorkingFile_DeleteFromDiskPtr) (LibMCEnv_WorkingFile pWorkingFile, bool * pSuccess);

/*************************************************************************************************************************
 Class definition for WorkingFileIterator
**************************************************************************************************************************/

/**
* Returns the working file the iterator points at.
*
* @param[in] pWorkingFileIterator - WorkingFileIterator instance.
* @param[out] pWorkingFile - returns the WorkingFile instance.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvWorkingFileIterator_GetCurrentFilePtr) (LibMCEnv_WorkingFileIterator pWorkingFileIterator, LibMCEnv_WorkingFile * pWorkingFile);

/*************************************************************************************************************************
 Class definition for WorkingDirectory
**************************************************************************************************************************/

/**
* Working directory is active.
*
* @param[in] pWorkingDirectory - WorkingDirectory instance.
* @param[out] pIsActive - returns true if files can be read and written to the directory.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvWorkingDirectory_IsActivePtr) (LibMCEnv_WorkingDirectory pWorkingDirectory, bool * pIsActive);

/**
* Retrieves absolute file path.
*
* @param[in] pWorkingDirectory - WorkingDirectory instance.
* @param[in] nFilePathBufferSize - size of the buffer (including trailing 0)
* @param[out] pFilePathNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pFilePathBuffer -  buffer of global path of the directory, including path delimiter., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvWorkingDirectory_GetAbsoluteFilePathPtr) (LibMCEnv_WorkingDirectory pWorkingDirectory, const LibMCEnv_uint32 nFilePathBufferSize, LibMCEnv_uint32* pFilePathNeededChars, char * pFilePathBuffer);

/**
* Stores a data buffer in a temporary file with a given name.
*
* @param[in] pWorkingDirectory - WorkingDirectory instance.
* @param[in] pFileName - filename to store to. Can not include any path delimiters or ..
* @param[in] nDataBufferBufferSize - Number of elements in buffer
* @param[in] pDataBufferBuffer - uint8 buffer of file data to store to.
* @param[out] pWorkingFile - working file instance.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvWorkingDirectory_StoreCustomDataPtr) (LibMCEnv_WorkingDirectory pWorkingDirectory, const char * pFileName, LibMCEnv_uint64 nDataBufferBufferSize, const LibMCEnv_uint8 * pDataBufferBuffer, LibMCEnv_WorkingFile * pWorkingFile);

/**
* Stores a string in a temporary file with a given name.
*
* @param[in] pWorkingDirectory - WorkingDirectory instance.
* @param[in] pFileName - filename to store to. Can not include any path delimiters or ..
* @param[in] pDataString - file data to store to.
* @param[out] pWorkingFile - working file instance.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvWorkingDirectory_StoreCustomStringPtr) (LibMCEnv_WorkingDirectory pWorkingDirectory, const char * pFileName, const char * pDataString, LibMCEnv_WorkingFile * pWorkingFile);

/**
* Stores attached driver data in a temporary file.
*
* @param[in] pWorkingDirectory - WorkingDirectory instance.
* @param[in] pFileName - filename to store to. Can not include any path delimiters or ..
* @param[in] pIdentifier - identifier of the binary data in the driver package.
* @param[out] pWorkingFile - working file instance.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvWorkingDirectory_StoreDriverDataPtr) (LibMCEnv_WorkingDirectory pWorkingDirectory, const char * pFileName, const char * pIdentifier, LibMCEnv_WorkingFile * pWorkingFile);

/**
* Stores a data buffer in a temporary file with a generated name.
*
* @param[in] pWorkingDirectory - WorkingDirectory instance.
* @param[in] pExtension - extension of the file to store. MAY be an empty string. MUST only include up to 64 alphanumeric characters.
* @param[in] nDataBufferBufferSize - Number of elements in buffer
* @param[in] pDataBufferBuffer - uint8 buffer of file data to store to.
* @param[out] pWorkingFile - working file instance.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvWorkingDirectory_StoreCustomDataInTempFilePtr) (LibMCEnv_WorkingDirectory pWorkingDirectory, const char * pExtension, LibMCEnv_uint64 nDataBufferBufferSize, const LibMCEnv_uint8 * pDataBufferBuffer, LibMCEnv_WorkingFile * pWorkingFile);

/**
* Stores a string in a temporary file.
*
* @param[in] pWorkingDirectory - WorkingDirectory instance.
* @param[in] pExtension - extension of the file to store. MAY be an empty string. MUST only include up to 64 alphanumeric characters.
* @param[in] pDataString - file data to store to.
* @param[out] pWorkingFile - working file instance.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvWorkingDirectory_StoreCustomStringInTempFilePtr) (LibMCEnv_WorkingDirectory pWorkingDirectory, const char * pExtension, const char * pDataString, LibMCEnv_WorkingFile * pWorkingFile);

/**
* Stores attached driver data in a temporary file.
*
* @param[in] pWorkingDirectory - WorkingDirectory instance.
* @param[in] pExtension - extension of the file to store. MAY be an empty string. MUST only include up to 64 alphanumeric characters.
* @param[in] pIdentifier - identifier of the binary data in the driver package.
* @param[out] pWorkingFile - working file instance.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvWorkingDirectory_StoreDriverDataInTempFilePtr) (LibMCEnv_WorkingDirectory pWorkingDirectory, const char * pExtension, const char * pIdentifier, LibMCEnv_WorkingFile * pWorkingFile);

/**
* Deletes all managed files in the directory and the directory. No storing is possible after a cleanup.
*
* @param[in] pWorkingDirectory - WorkingDirectory instance.
* @param[out] pSuccess - returns if deletion was successful.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvWorkingDirectory_CleanUpPtr) (LibMCEnv_WorkingDirectory pWorkingDirectory, bool * pSuccess);

/**
* Adds a managed filename in the directory (i.e. this file will be deleted at CleanUp). Subdirectories are not allowed.
*
* @param[in] pWorkingDirectory - WorkingDirectory instance.
* @param[in] pFileName - Filename to manage. The file does not need to exist yet.
* @param[out] pWorkingFile - working file instance.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvWorkingDirectory_AddManagedFilePtr) (LibMCEnv_WorkingDirectory pWorkingDirectory, const char * pFileName, LibMCEnv_WorkingFile * pWorkingFile);

/**
* Returns if the working directory has unmanaged files. A clean implementation will never deal with unmanaged files.
*
* @param[in] pWorkingDirectory - WorkingDirectory instance.
* @param[out] pHasUnmanagedFiles - returns if there are unmanaged files.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvWorkingDirectory_HasUnmanagedFilesPtr) (LibMCEnv_WorkingDirectory pWorkingDirectory, bool * pHasUnmanagedFiles);

/**
* Returns a list of unmanaged files.
*
* @param[in] pWorkingDirectory - WorkingDirectory instance.
* @param[out] pIteratorInstance - working file iterator instance.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvWorkingDirectory_RetrieveUnmanagedFilesPtr) (LibMCEnv_WorkingDirectory pWorkingDirectory, LibMCEnv_WorkingFileIterator * pIteratorInstance);

/**
* Returns a list of managed files.
*
* @param[in] pWorkingDirectory - WorkingDirectory instance.
* @param[out] pIteratorInstance - working file iterator instance.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvWorkingDirectory_RetrieveManagedFilesPtr) (LibMCEnv_WorkingDirectory pWorkingDirectory, LibMCEnv_WorkingFileIterator * pIteratorInstance);

/**
* Returns a list of all files in the directory.
*
* @param[in] pWorkingDirectory - WorkingDirectory instance.
* @param[out] pIteratorInstance - working file iterator instance.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvWorkingDirectory_RetrieveAllFilesPtr) (LibMCEnv_WorkingDirectory pWorkingDirectory, LibMCEnv_WorkingFileIterator * pIteratorInstance);

/*************************************************************************************************************************
 Class definition for XMLDocumentAttribute
**************************************************************************************************************************/

/**
* Retrieves namespace of the attribute.
*
* @param[in] pXMLDocumentAttribute - XMLDocumentAttribute instance.
* @param[in] nNameSpaceBufferSize - size of the buffer (including trailing 0)
* @param[out] pNameSpaceNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNameSpaceBuffer -  buffer of returns the namespace of the attribute., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvXMLDocumentAttribute_GetNameSpacePtr) (LibMCEnv_XMLDocumentAttribute pXMLDocumentAttribute, const LibMCEnv_uint32 nNameSpaceBufferSize, LibMCEnv_uint32* pNameSpaceNeededChars, char * pNameSpaceBuffer);

/**
* Retrieves name of the attribute.
*
* @param[in] pXMLDocumentAttribute - XMLDocumentAttribute instance.
* @param[in] nNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNameBuffer -  buffer of returns the name of the attribute., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvXMLDocumentAttribute_GetNamePtr) (LibMCEnv_XMLDocumentAttribute pXMLDocumentAttribute, const LibMCEnv_uint32 nNameBufferSize, LibMCEnv_uint32* pNameNeededChars, char * pNameBuffer);

/**
* Retrieves value of the attribute as string.
*
* @param[in] pXMLDocumentAttribute - XMLDocumentAttribute instance.
* @param[in] nValueBufferSize - size of the buffer (including trailing 0)
* @param[out] pValueNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pValueBuffer -  buffer of returns the value of the attribute., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvXMLDocumentAttribute_GetValuePtr) (LibMCEnv_XMLDocumentAttribute pXMLDocumentAttribute, const LibMCEnv_uint32 nValueBufferSize, LibMCEnv_uint32* pValueNeededChars, char * pValueBuffer);

/**
* Checks if the value is a valid UUID string.
*
* @param[in] pXMLDocumentAttribute - XMLDocumentAttribute instance.
* @param[out] pIsValid - returns if the value is a valid UUID string.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvXMLDocumentAttribute_IsValidUUIDPtr) (LibMCEnv_XMLDocumentAttribute pXMLDocumentAttribute, bool * pIsValid);

/**
* Retrieves value of the attribute as UUID string. Fails if value is not a UUID string.
*
* @param[in] pXMLDocumentAttribute - XMLDocumentAttribute instance.
* @param[in] nValueBufferSize - size of the buffer (including trailing 0)
* @param[out] pValueNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pValueBuffer -  buffer of returns the value of the attribute as normalized UUID string., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvXMLDocumentAttribute_GetUUIDValuePtr) (LibMCEnv_XMLDocumentAttribute pXMLDocumentAttribute, const LibMCEnv_uint32 nValueBufferSize, LibMCEnv_uint32* pValueNeededChars, char * pValueBuffer);

/**
* Checks if the value is a valid integer in the given range.
*
* @param[in] pXMLDocumentAttribute - XMLDocumentAttribute instance.
* @param[in] nMinValue - Minimum allowed value
* @param[in] nMaxValue - Maximum allowed value
* @param[out] pIsValid - returns if the value is a valid integer.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvXMLDocumentAttribute_IsValidIntegerPtr) (LibMCEnv_XMLDocumentAttribute pXMLDocumentAttribute, LibMCEnv_int64 nMinValue, LibMCEnv_int64 nMaxValue, bool * pIsValid);

/**
* Returns the value as integer. Fails if the value is not a valid integer in the given range.
*
* @param[in] pXMLDocumentAttribute - XMLDocumentAttribute instance.
* @param[in] nMinValue - Minimum allowed value
* @param[in] nMaxValue - Maximum allowed value
* @param[out] pValue - returns the value.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvXMLDocumentAttribute_GetIntegerValuePtr) (LibMCEnv_XMLDocumentAttribute pXMLDocumentAttribute, LibMCEnv_int64 nMinValue, LibMCEnv_int64 nMaxValue, LibMCEnv_int64 * pValue);

/**
* Checks if the value is a valid double in the given range.
*
* @param[in] pXMLDocumentAttribute - XMLDocumentAttribute instance.
* @param[in] dMinValue - Minimum allowed value
* @param[in] dMaxValue - Maximum allowed value
* @param[out] pIsValid - returns if the value is a valid double.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvXMLDocumentAttribute_IsValidDoublePtr) (LibMCEnv_XMLDocumentAttribute pXMLDocumentAttribute, LibMCEnv_double dMinValue, LibMCEnv_double dMaxValue, bool * pIsValid);

/**
* Returns the value as double. Fails if the value is not a valid double in the given range.
*
* @param[in] pXMLDocumentAttribute - XMLDocumentAttribute instance.
* @param[in] dMinValue - Minimum allowed value
* @param[in] dMaxValue - Maximum allowed value
* @param[out] pValue - returns the value .
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvXMLDocumentAttribute_GetDoubleValuePtr) (LibMCEnv_XMLDocumentAttribute pXMLDocumentAttribute, LibMCEnv_double dMinValue, LibMCEnv_double dMaxValue, LibMCEnv_double * pValue);

/**
* Checks if the value is a valid boolean value, meaning an integer or true or false as string. The value will be trimmed and any character will be converted to lowercase.
*
* @param[in] pXMLDocumentAttribute - XMLDocumentAttribute instance.
* @param[out] pIsValid - returns if the value is a valid bool.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvXMLDocumentAttribute_IsValidBoolPtr) (LibMCEnv_XMLDocumentAttribute pXMLDocumentAttribute, bool * pIsValid);

/**
* Returns the value as bool. Fails if the value is not a valid boolean value, meaning an integer or true or false as string. The value will be trimmed and any character will be converted to lowercase.
*
* @param[in] pXMLDocumentAttribute - XMLDocumentAttribute instance.
* @param[out] pValue - returns the value .
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvXMLDocumentAttribute_GetBoolValuePtr) (LibMCEnv_XMLDocumentAttribute pXMLDocumentAttribute, bool * pValue);

/**
* Sets the value of the attribute as string.
*
* @param[in] pXMLDocumentAttribute - XMLDocumentAttribute instance.
* @param[in] pValue - new value of the attribute.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvXMLDocumentAttribute_SetValuePtr) (LibMCEnv_XMLDocumentAttribute pXMLDocumentAttribute, const char * pValue);

/**
* Sets the value of the attribute as UUID string.
*
* @param[in] pXMLDocumentAttribute - XMLDocumentAttribute instance.
* @param[in] pValue - new value of the attribute. Fails if Value is not a UUID.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvXMLDocumentAttribute_SetUUIDValuePtr) (LibMCEnv_XMLDocumentAttribute pXMLDocumentAttribute, const char * pValue);

/**
* Sets the value of the attribute as integer.
*
* @param[in] pXMLDocumentAttribute - XMLDocumentAttribute instance.
* @param[in] nValue - new value of the attribute.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvXMLDocumentAttribute_SetIntegerValuePtr) (LibMCEnv_XMLDocumentAttribute pXMLDocumentAttribute, LibMCEnv_int64 nValue);

/**
* Sets the value of the attribute as double.
*
* @param[in] pXMLDocumentAttribute - XMLDocumentAttribute instance.
* @param[in] dValue - new value of the attribute.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvXMLDocumentAttribute_SetDoubleValuePtr) (LibMCEnv_XMLDocumentAttribute pXMLDocumentAttribute, LibMCEnv_double dValue);

/**
* Sets the value of the attribute as bool.
*
* @param[in] pXMLDocumentAttribute - XMLDocumentAttribute instance.
* @param[in] bValue - new value of the attribute.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvXMLDocumentAttribute_SetBoolValuePtr) (LibMCEnv_XMLDocumentAttribute pXMLDocumentAttribute, bool bValue);

/**
* Removes the attribute from its parent node. All subsequent calls to the class will fail.
*
* @param[in] pXMLDocumentAttribute - XMLDocumentAttribute instance.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvXMLDocumentAttribute_RemovePtr) (LibMCEnv_XMLDocumentAttribute pXMLDocumentAttribute);

/*************************************************************************************************************************
 Class definition for XMLDocumentNode
**************************************************************************************************************************/

/**
* Retrieves name of the node.
*
* @param[in] pXMLDocumentNode - XMLDocumentNode instance.
* @param[in] nNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNameBuffer -  buffer of returns the name of the node., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvXMLDocumentNode_GetNamePtr) (LibMCEnv_XMLDocumentNode pXMLDocumentNode, const LibMCEnv_uint32 nNameBufferSize, LibMCEnv_uint32* pNameNeededChars, char * pNameBuffer);

/**
* Retrieves namespace of the node.
*
* @param[in] pXMLDocumentNode - XMLDocumentNode instance.
* @param[in] nNameSpaceBufferSize - size of the buffer (including trailing 0)
* @param[out] pNameSpaceNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNameSpaceBuffer -  buffer of returns the namespace of the node., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvXMLDocumentNode_GetNameSpacePtr) (LibMCEnv_XMLDocumentNode pXMLDocumentNode, const LibMCEnv_uint32 nNameSpaceBufferSize, LibMCEnv_uint32* pNameSpaceNeededChars, char * pNameSpaceBuffer);

/**
* Retrieves the text content of the node. A node with text content MUST NOT have children.
*
* @param[in] pXMLDocumentNode - XMLDocumentNode instance.
* @param[in] nTextContentBufferSize - size of the buffer (including trailing 0)
* @param[out] pTextContentNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pTextContentBuffer -  buffer of returns the text content of the node., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvXMLDocumentNode_GetTextContentPtr) (LibMCEnv_XMLDocumentNode pXMLDocumentNode, const LibMCEnv_uint32 nTextContentBufferSize, LibMCEnv_uint32* pTextContentNeededChars, char * pTextContentBuffer);

/**
* Sets the text content of the node. Call will fail if node has children.
*
* @param[in] pXMLDocumentNode - XMLDocumentNode instance.
* @param[in] pTextContent - the new text content of the node.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvXMLDocumentNode_SetTextContentPtr) (LibMCEnv_XMLDocumentNode pXMLDocumentNode, const char * pTextContent);

/**
* Returns number of attributes.
*
* @param[in] pXMLDocumentNode - XMLDocumentNode instance.
* @param[out] pCount - returns the number of attributes.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvXMLDocumentNode_GetAttributeCountPtr) (LibMCEnv_XMLDocumentNode pXMLDocumentNode, LibMCEnv_uint64 * pCount);

/**
* Returns attribute instance. Fails if Index is out of range.
*
* @param[in] pXMLDocumentNode - XMLDocumentNode instance.
* @param[in] nIndex - Index of the attribute to return (0-based).
* @param[out] pAttributeInstance - XML Document attribute.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvXMLDocumentNode_GetAttributePtr) (LibMCEnv_XMLDocumentNode pXMLDocumentNode, LibMCEnv_uint64 nIndex, LibMCEnv_XMLDocumentAttribute * pAttributeInstance);

/**
* Returns if attribute of a specific name exists.
*
* @param[in] pXMLDocumentNode - XMLDocumentNode instance.
* @param[in] pNameSpace - Namespace of the attribute. If empty, it inherits the namespace of the node.
* @param[in] pName - Name of the attribute.
* @param[out] pAttributeExists - Returns if the attribute exists.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvXMLDocumentNode_HasAttributePtr) (LibMCEnv_XMLDocumentNode pXMLDocumentNode, const char * pNameSpace, const char * pName, bool * pAttributeExists);

/**
* Returns attribute instance of a specific name. 
*
* @param[in] pXMLDocumentNode - XMLDocumentNode instance.
* @param[in] pNameSpace - Namespace of the attribute. If empty, it inherits the namespace of the node.
* @param[in] pName - Name of the attribute.
* @param[in] bMustExist - If true, the call fails if attribute does not exist. If falls, the call will return null if the attribute does not exist.
* @param[out] pAttributeInstance - XML Document attribute.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvXMLDocumentNode_FindAttributePtr) (LibMCEnv_XMLDocumentNode pXMLDocumentNode, const char * pNameSpace, const char * pName, bool bMustExist, LibMCEnv_XMLDocumentAttribute * pAttributeInstance);

/**
* Returns string value of an attribute. Fails if attribute does not exist.
*
* @param[in] pXMLDocumentNode - XMLDocumentNode instance.
* @param[in] pNameSpace - Namespace of the attribute. If empty, it inherits the namespace of the node.
* @param[in] pName - Name of the attribute.
* @param[in] nValueBufferSize - size of the buffer (including trailing 0)
* @param[out] pValueNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pValueBuffer -  buffer of Attribute value., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvXMLDocumentNode_GetAttributeValuePtr) (LibMCEnv_XMLDocumentNode pXMLDocumentNode, const char * pNameSpace, const char * pName, const LibMCEnv_uint32 nValueBufferSize, LibMCEnv_uint32* pValueNeededChars, char * pValueBuffer);

/**
* Returns integer value of an attribute. Fails if attribute does not exist or attribute is not an integer .
*
* @param[in] pXMLDocumentNode - XMLDocumentNode instance.
* @param[in] pNameSpace - Namespace of the attribute. If empty, it inherits the namespace of the node.
* @param[in] pName - Name of the attribute.
* @param[in] nMinValue - Minimum allowed value.
* @param[in] nMaxValue - Maximum allowed value.
* @param[out] pValue - Attribute value.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvXMLDocumentNode_GetAttributeIntegerValuePtr) (LibMCEnv_XMLDocumentNode pXMLDocumentNode, const char * pNameSpace, const char * pName, LibMCEnv_int64 nMinValue, LibMCEnv_int64 nMaxValue, LibMCEnv_int64 * pValue);

/**
* Returns double value of an attribute. Fails if attribute does not exist or attribute is not a double value.
*
* @param[in] pXMLDocumentNode - XMLDocumentNode instance.
* @param[in] pNameSpace - Namespace of the attribute. If empty, it inherits the namespace of the node.
* @param[in] pName - Name of the attribute.
* @param[in] dMinValue - Minimum allowed value
* @param[in] dMaxValue - Maximum allowed value
* @param[out] pValue - Attribute value.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvXMLDocumentNode_GetAttributeDoubleValuePtr) (LibMCEnv_XMLDocumentNode pXMLDocumentNode, const char * pNameSpace, const char * pName, LibMCEnv_double dMinValue, LibMCEnv_double dMaxValue, LibMCEnv_double * pValue);

/**
* Returns bool value of an attribute. Fails if attribute does not exist or attribute is not a boolean value.
*
* @param[in] pXMLDocumentNode - XMLDocumentNode instance.
* @param[in] pNameSpace - Namespace of the attribute. If empty, it inherits the namespace of the node.
* @param[in] pName - Name of the attribute.
* @param[out] pValue - Attribute value.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvXMLDocumentNode_GetAttributeBoolValuePtr) (LibMCEnv_XMLDocumentNode pXMLDocumentNode, const char * pNameSpace, const char * pName, bool * pValue);

/**
* Returns UUID value of an attribute. Fails if attribute does not exist or attribute value is not a UUID.
*
* @param[in] pXMLDocumentNode - XMLDocumentNode instance.
* @param[in] pNameSpace - Namespace of the attribute. If empty, it inherits the namespace of the node.
* @param[in] pName - Name of the attribute.
* @param[in] nValueBufferSize - size of the buffer (including trailing 0)
* @param[out] pValueNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pValueBuffer -  buffer of Attribute value., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvXMLDocumentNode_GetAttributeUUIDValuePtr) (LibMCEnv_XMLDocumentNode pXMLDocumentNode, const char * pNameSpace, const char * pName, const LibMCEnv_uint32 nValueBufferSize, LibMCEnv_uint32* pValueNeededChars, char * pValueBuffer);

/**
* Returns string value of an attribute. Returns default value if attribute does not exist.
*
* @param[in] pXMLDocumentNode - XMLDocumentNode instance.
* @param[in] pNameSpace - Namespace of the attribute. If empty, it inherits the namespace of the node.
* @param[in] pName - Name of the attribute.
* @param[in] pDefaultValue - Default value.
* @param[in] nValueBufferSize - size of the buffer (including trailing 0)
* @param[out] pValueNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pValueBuffer -  buffer of Attribute value., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvXMLDocumentNode_GetAttributeValueDefPtr) (LibMCEnv_XMLDocumentNode pXMLDocumentNode, const char * pNameSpace, const char * pName, const char * pDefaultValue, const LibMCEnv_uint32 nValueBufferSize, LibMCEnv_uint32* pValueNeededChars, char * pValueBuffer);

/**
* Returns integer value of an attribute. Returns default value if attribute does not exist or attribute is not an integer .
*
* @param[in] pXMLDocumentNode - XMLDocumentNode instance.
* @param[in] pNameSpace - Namespace of the attribute. If empty, it inherits the namespace of the node.
* @param[in] pName - Name of the attribute.
* @param[in] nMinValue - Minimum allowed value.
* @param[in] nMaxValue - Maximum allowed value.
* @param[in] nDefaultValue - Default value. MUST be in valid range.
* @param[out] pValue - Attribute value.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvXMLDocumentNode_GetAttributeIntegerValueDefPtr) (LibMCEnv_XMLDocumentNode pXMLDocumentNode, const char * pNameSpace, const char * pName, LibMCEnv_int64 nMinValue, LibMCEnv_int64 nMaxValue, LibMCEnv_int64 nDefaultValue, LibMCEnv_int64 * pValue);

/**
* Returns double value of an attribute. Returns default value if attribute does not exist or attribute is not a double value.
*
* @param[in] pXMLDocumentNode - XMLDocumentNode instance.
* @param[in] pNameSpace - Namespace of the attribute. If empty, it inherits the namespace of the node.
* @param[in] pName - Name of the attribute.
* @param[in] dMinValue - Minimum allowed value
* @param[in] dMaxValue - Maximum allowed value
* @param[in] dDefaultValue - Default value. MUST be in valid range.
* @param[out] pValue - Attribute value.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvXMLDocumentNode_GetAttributeDoubleValueDefPtr) (LibMCEnv_XMLDocumentNode pXMLDocumentNode, const char * pNameSpace, const char * pName, LibMCEnv_double dMinValue, LibMCEnv_double dMaxValue, LibMCEnv_double dDefaultValue, LibMCEnv_double * pValue);

/**
* Returns bool value of an attribute. Returns default value if attribute does not exist or attribute is not a boolean value.
*
* @param[in] pXMLDocumentNode - XMLDocumentNode instance.
* @param[in] pNameSpace - Namespace of the attribute. If empty, it inherits the namespace of the node.
* @param[in] pName - Name of the attribute.
* @param[in] bDefaultValue - Default value.
* @param[out] pValue - Attribute value.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvXMLDocumentNode_GetAttributeBoolValueDefPtr) (LibMCEnv_XMLDocumentNode pXMLDocumentNode, const char * pNameSpace, const char * pName, bool bDefaultValue, bool * pValue);

/**
* Returns UUID value of an attribute. Returns default value if attribute does not exist or attribute value is not a UUID.
*
* @param[in] pXMLDocumentNode - XMLDocumentNode instance.
* @param[in] pNameSpace - Namespace of the attribute. If empty, it inherits the namespace of the node.
* @param[in] pName - Name of the attribute.
* @param[in] pDefaultValue - Attribute value. MUST be a valid UUID
* @param[in] nValueBufferSize - size of the buffer (including trailing 0)
* @param[out] pValueNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pValueBuffer -  buffer of Attribute value., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvXMLDocumentNode_GetAttributeUUIDValueDefPtr) (LibMCEnv_XMLDocumentNode pXMLDocumentNode, const char * pNameSpace, const char * pName, const char * pDefaultValue, const LibMCEnv_uint32 nValueBufferSize, LibMCEnv_uint32* pValueNeededChars, char * pValueBuffer);

/**
* Removes the attribute with a specific name. Does nothing if attribute does not exist.
*
* @param[in] pXMLDocumentNode - XMLDocumentNode instance.
* @param[in] pNameSpace - Namespace of the attribute. If empty, it inherits the namespace of the node.
* @param[in] pName - Name of the attribute.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvXMLDocumentNode_RemoveAttributePtr) (LibMCEnv_XMLDocumentNode pXMLDocumentNode, const char * pNameSpace, const char * pName);

/**
* Removes the attribute with a specific index. Does nothing if attribute does not exist.
*
* @param[in] pXMLDocumentNode - XMLDocumentNode instance.
* @param[in] nIndex - Index of the attribute to remove (0-based).
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvXMLDocumentNode_RemoveAttributeByIndexPtr) (LibMCEnv_XMLDocumentNode pXMLDocumentNode, LibMCEnv_uint64 nIndex);

/**
* Adds an attribute with a specific name and string value. Fails if attribute already exists.
*
* @param[in] pXMLDocumentNode - XMLDocumentNode instance.
* @param[in] pNameSpace - New namespace of the attribute. MUST be either an empty string for the root namespace, or previously being registered with the document.
* @param[in] pName - Name of the attribute.
* @param[in] pValue - Value of the attribute.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvXMLDocumentNode_AddAttributePtr) (LibMCEnv_XMLDocumentNode pXMLDocumentNode, const char * pNameSpace, const char * pName, const char * pValue);

/**
* Adds an attribute with a specific name and integer value. Fails if attribute already exists.
*
* @param[in] pXMLDocumentNode - XMLDocumentNode instance.
* @param[in] pNameSpace - New namespace of the attribute. MUST be either an empty string for the root namespace, or previously being registered with the document.
* @param[in] pName - Name of the attribute.
* @param[in] nValue - Value of the attribute.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvXMLDocumentNode_AddIntegerAttributePtr) (LibMCEnv_XMLDocumentNode pXMLDocumentNode, const char * pNameSpace, const char * pName, LibMCEnv_int64 nValue);

/**
* Adds an attribute with a specific name and double value. Fails if attribute already exists.
*
* @param[in] pXMLDocumentNode - XMLDocumentNode instance.
* @param[in] pNameSpace - New namespace of the child. MUST be either an empty string for the root namespace, or previously being registered with the document.
* @param[in] pName - Name of the attribute.
* @param[in] dValue - Value of the attribute.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvXMLDocumentNode_AddDoubleAttributePtr) (LibMCEnv_XMLDocumentNode pXMLDocumentNode, const char * pNameSpace, const char * pName, LibMCEnv_double dValue);

/**
* Adds an attribute with a specific name and bool value. Fails if attribute already exists.
*
* @param[in] pXMLDocumentNode - XMLDocumentNode instance.
* @param[in] pNameSpace - New namespace of the child. MUST be either an empty string for the root namespace, or previously being registered with the document.
* @param[in] pName - Name of the attribute.
* @param[in] bValue - Value of the attribute.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvXMLDocumentNode_AddBoolAttributePtr) (LibMCEnv_XMLDocumentNode pXMLDocumentNode, const char * pNameSpace, const char * pName, bool bValue);

/**
* Returns all the child nodes of the XML Node.
*
* @param[in] pXMLDocumentNode - XMLDocumentNode instance.
* @param[out] pChildNodes - returns the list of child nodes.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvXMLDocumentNode_GetChildrenPtr) (LibMCEnv_XMLDocumentNode pXMLDocumentNode, LibMCEnv_XMLDocumentNodes * pChildNodes);

/**
* Returns how many children of the XML Node have a specific name.
*
* @param[in] pXMLDocumentNode - XMLDocumentNode instance.
* @param[in] pNameSpace - New namespace of the child. MUST be either an empty string for the root namespace, or previously being registered with the document.
* @param[in] pName - Name of the node.
* @param[out] pCount - returns the number children with the specified name.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvXMLDocumentNode_CountChildrenByNamePtr) (LibMCEnv_XMLDocumentNode pXMLDocumentNode, const char * pNameSpace, const char * pName, LibMCEnv_uint64 * pCount);

/**
* Returns all the child nodes of the XML Node with a specific name.
*
* @param[in] pXMLDocumentNode - XMLDocumentNode instance.
* @param[in] pNameSpace - New namespace of the child. MUST be either an empty string for the root namespace, or previously being registered with the document.
* @param[in] pName - Name of the child.
* @param[out] pChildNodes - returns the list of child nodes.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvXMLDocumentNode_GetChildrenByNamePtr) (LibMCEnv_XMLDocumentNode pXMLDocumentNode, const char * pNameSpace, const char * pName, LibMCEnv_XMLDocumentNodes * pChildNodes);

/**
* Returns if a child with a specific name exist.
*
* @param[in] pXMLDocumentNode - XMLDocumentNode instance.
* @param[in] pNameSpace - New namespace of the child. MUST be either an empty string for the root namespace, or previously being registered with the document.
* @param[in] pName - Name of the child.
* @param[out] pChildExists - returns if a child with a specific name exists.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvXMLDocumentNode_HasChildPtr) (LibMCEnv_XMLDocumentNode pXMLDocumentNode, const char * pNameSpace, const char * pName, bool * pChildExists);

/**
* Returns if a child with a specific name exist once and only once.
*
* @param[in] pXMLDocumentNode - XMLDocumentNode instance.
* @param[in] pNameSpace - New namespace of the child. MUST be either an empty string for the root namespace, or previously being registered with the document.
* @param[in] pName - Name of the child.
* @param[out] pChildExists - returns if a child with a specific name exists once and only once.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvXMLDocumentNode_HasUniqueChildPtr) (LibMCEnv_XMLDocumentNode pXMLDocumentNode, const char * pNameSpace, const char * pName, bool * pChildExists);

/**
* Returns child with a specific name. Throws an error if name does not exist once and only once.
*
* @param[in] pXMLDocumentNode - XMLDocumentNode instance.
* @param[in] pNameSpace - New namespace of the child. MUST be either an empty string for the root namespace, or previously being registered with the document.
* @param[in] pName - Name of the child.
* @param[in] bMustExist - If true, the call fails if child does not exist. If falls, the call will return null if the child does not exist.
* @param[out] pChildInstance - returns child instance or null.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvXMLDocumentNode_FindChildPtr) (LibMCEnv_XMLDocumentNode pXMLDocumentNode, const char * pNameSpace, const char * pName, bool bMustExist, LibMCEnv_XMLDocumentNode * pChildInstance);

/**
* Adds a new child with a specific name. Fails if node has a non-empty text content.
*
* @param[in] pXMLDocumentNode - XMLDocumentNode instance.
* @param[in] pNameSpace - New namespace of the child. MUST be either an empty string for the root namespace, or previously being registered with the document.
* @param[in] pName - Name of the child.
* @param[out] pChildInstance - returns child instance.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvXMLDocumentNode_AddChildPtr) (LibMCEnv_XMLDocumentNode pXMLDocumentNode, const char * pNameSpace, const char * pName, LibMCEnv_XMLDocumentNode * pChildInstance);

/**
* Adds a new child with text content and a specific name. Fails if node has a non-empty text content.
*
* @param[in] pXMLDocumentNode - XMLDocumentNode instance.
* @param[in] pNameSpace - New namespace of the child. MUST be either an empty string for the root namespace, or previously being registered with the document.
* @param[in] pName - Name of the child.
* @param[in] pTextContent - Text content of the child.
* @param[out] pChildInstance - returns child instance.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvXMLDocumentNode_AddChildTextPtr) (LibMCEnv_XMLDocumentNode pXMLDocumentNode, const char * pNameSpace, const char * pName, const char * pTextContent, LibMCEnv_XMLDocumentNode * pChildInstance);

/**
* Removes a child with a specific name. All subsequent calls to the child will fail after the call.
*
* @param[in] pXMLDocumentNode - XMLDocumentNode instance.
* @param[in] pChildInstance - child instance to remove. Fails if given instance is not a child of the node.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvXMLDocumentNode_RemoveChildPtr) (LibMCEnv_XMLDocumentNode pXMLDocumentNode, LibMCEnv_XMLDocumentNode pChildInstance);

/**
* Removes all children with a specific name. Does nothing if no child with the name exists. . All subsequent calls to the deleted children will fail after the call.
*
* @param[in] pXMLDocumentNode - XMLDocumentNode instance.
* @param[in] pNameSpace - New namespace of the child. MUST be either an empty string for the root namespace, or previously being registered with the document.
* @param[in] pName - Name of the children.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvXMLDocumentNode_RemoveChildrenWithNamePtr) (LibMCEnv_XMLDocumentNode pXMLDocumentNode, const char * pNameSpace, const char * pName);

/**
* Removes the node from its parent. The root node of the document can not be removed.
*
* @param[in] pXMLDocumentNode - XMLDocumentNode instance.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvXMLDocumentNode_RemovePtr) (LibMCEnv_XMLDocumentNode pXMLDocumentNode);

/*************************************************************************************************************************
 Class definition for XMLDocumentNodes
**************************************************************************************************************************/

/**
* Returns number of nodes.
*
* @param[in] pXMLDocumentNodes - XMLDocumentNodes instance.
* @param[out] pCount - returns the number of nodes in the list.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvXMLDocumentNodes_GetNodeCountPtr) (LibMCEnv_XMLDocumentNodes pXMLDocumentNodes, LibMCEnv_uint64 * pCount);

/**
* Returns node instance. Fails if Index is out of range.
*
* @param[in] pXMLDocumentNodes - XMLDocumentNodes instance.
* @param[in] nIndex - Index of the node to return (0-based).
* @param[out] pNodeInstance - XML Node node.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvXMLDocumentNodes_GetNodePtr) (LibMCEnv_XMLDocumentNodes pXMLDocumentNodes, LibMCEnv_uint64 nIndex, LibMCEnv_XMLDocumentNode * pNodeInstance);

/**
* Returns how many nodes of the XML Node have a specific name.
*
* @param[in] pXMLDocumentNodes - XMLDocumentNodes instance.
* @param[in] pNameSpace - New namespace of the child. MUST be either an empty string for the root namespace, or previously being registered with the document.
* @param[in] pName - Name of the node.
* @param[out] pCount - returns the number of nodes with the specified name.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvXMLDocumentNodes_CountNodesByNamePtr) (LibMCEnv_XMLDocumentNodes pXMLDocumentNodes, const char * pNameSpace, const char * pName, LibMCEnv_uint64 * pCount);

/**
* Returns all the nodes nodes of the XML Node with a specific name.
*
* @param[in] pXMLDocumentNodes - XMLDocumentNodes instance.
* @param[in] pNameSpace - New namespace of the child. MUST be either an empty string for the root namespace, or previously being registered with the document.
* @param[in] pName - Name of the node.
* @param[out] pNodes - returns the list of node nodes.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvXMLDocumentNodes_GetNodesByNamePtr) (LibMCEnv_XMLDocumentNodes pXMLDocumentNodes, const char * pNameSpace, const char * pName, LibMCEnv_XMLDocumentNodes * pNodes);

/**
* Returns if a node with a specific name exist.
*
* @param[in] pXMLDocumentNodes - XMLDocumentNodes instance.
* @param[in] pNameSpace - New namespace of the child. MUST be either an empty string for the root namespace, or previously being registered with the document.
* @param[in] pName - Name of the node.
* @param[out] pNodeExists - returns if a node with a specific name exists.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvXMLDocumentNodes_HasNodePtr) (LibMCEnv_XMLDocumentNodes pXMLDocumentNodes, const char * pNameSpace, const char * pName, bool * pNodeExists);

/**
* Returns if a node with a specific name exist once and only once.
*
* @param[in] pXMLDocumentNodes - XMLDocumentNodes instance.
* @param[in] pNameSpace - New namespace of the child. MUST be either an empty string for the root namespace, or previously being registered with the document.
* @param[in] pName - Name of the node.
* @param[out] pNodeExists - returns if a node with a specific name exists once and only once.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvXMLDocumentNodes_HasUniqueNodePtr) (LibMCEnv_XMLDocumentNodes pXMLDocumentNodes, const char * pNameSpace, const char * pName, bool * pNodeExists);

/**
* Returns node with a specific name. Throws an error if name does not exist once and only once.
*
* @param[in] pXMLDocumentNodes - XMLDocumentNodes instance.
* @param[in] pNameSpace - New namespace of the child. MUST be either an empty string for the root namespace, or previously being registered with the document.
* @param[in] pName - Name of the node.
* @param[in] bMustExist - If true, the call fails if node does not exist. If falls, the call will return null if the node does not exist.
* @param[out] pNodeInstance - returns node instance.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvXMLDocumentNodes_FindNodePtr) (LibMCEnv_XMLDocumentNodes pXMLDocumentNodes, const char * pNameSpace, const char * pName, bool bMustExist, LibMCEnv_XMLDocumentNode * pNodeInstance);

/*************************************************************************************************************************
 Class definition for XMLDocument
**************************************************************************************************************************/

/**
* Returns default name space of the document.
*
* @param[in] pXMLDocument - XMLDocument instance.
* @param[in] nNamespaceBufferSize - size of the buffer (including trailing 0)
* @param[out] pNamespaceNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNamespaceBuffer -  buffer of name space of the document., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvXMLDocument_GetDefaultNamespacePtr) (LibMCEnv_XMLDocument pXMLDocument, const LibMCEnv_uint32 nNamespaceBufferSize, LibMCEnv_uint32* pNamespaceNeededChars, char * pNamespaceBuffer);

/**
* Returns the used number of name spaces of the document.
*
* @param[in] pXMLDocument - XMLDocument instance.
* @param[out] pCount - number of registered name spaces of the document.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvXMLDocument_GetNamespaceCountPtr) (LibMCEnv_XMLDocument pXMLDocument, LibMCEnv_uint64 * pCount);

/**
* Returns a name space of the document. Will fail if index is invalid.
*
* @param[in] pXMLDocument - XMLDocument instance.
* @param[in] nIndex - index of name space. 0-based.
* @param[in] nNamespaceBufferSize - size of the buffer (including trailing 0)
* @param[out] pNamespaceNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNamespaceBuffer -  buffer of name space of the document., may be NULL
* @param[in] nNamespacePrefixBufferSize - size of the buffer (including trailing 0)
* @param[out] pNamespacePrefixNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNamespacePrefixBuffer -  buffer of name space prefix of the document. Empty for root namespace., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvXMLDocument_GetNamespacePtr) (LibMCEnv_XMLDocument pXMLDocument, LibMCEnv_uint64 nIndex, const LibMCEnv_uint32 nNamespaceBufferSize, LibMCEnv_uint32* pNamespaceNeededChars, char * pNamespaceBuffer, const LibMCEnv_uint32 nNamespacePrefixBufferSize, LibMCEnv_uint32* pNamespacePrefixNeededChars, char * pNamespacePrefixBuffer);

/**
* Returns if the document has a namespace.
*
* @param[in] pXMLDocument - XMLDocument instance.
* @param[in] pNamespace - Name space name.
* @param[out] pNameSpaceIsRegistered - name space has been registered.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvXMLDocument_HasNamespacePtr) (LibMCEnv_XMLDocument pXMLDocument, const char * pNamespace, bool * pNameSpaceIsRegistered);

/**
* Returns a name space of the document. Will fail if namespace is not registered.
*
* @param[in] pXMLDocument - XMLDocument instance.
* @param[in] pNamespace - name space of the document.
* @param[in] nNamespacePrefixBufferSize - size of the buffer (including trailing 0)
* @param[out] pNamespacePrefixNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNamespacePrefixBuffer -  buffer of name space prefix of the document. Empty for root namespace., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvXMLDocument_GetNamespacePrefixPtr) (LibMCEnv_XMLDocument pXMLDocument, const char * pNamespace, const LibMCEnv_uint32 nNamespacePrefixBufferSize, LibMCEnv_uint32* pNamespacePrefixNeededChars, char * pNamespacePrefixBuffer);

/**
* Registers a custom namespace prefix. Given Namespace MUST NOT have been in use before calling this function.
*
* @param[in] pXMLDocument - XMLDocument instance.
* @param[in] pNamespace - name space to register
* @param[in] pNamespacePrefix - name space prefix to use for the namespace. MUST NOT be in use, MUST NOT be an empty string or contain non-alphanumeric characters.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvXMLDocument_RegisterNamespacePtr) (LibMCEnv_XMLDocument pXMLDocument, const char * pNamespace, const char * pNamespacePrefix);

/**
* Changes the prefix of an existing Namespace. New Namespace MUST NOT have been in use before calling this function.
*
* @param[in] pXMLDocument - XMLDocument instance.
* @param[in] pOldNamespacePrefix - name space prefix that is currently in use.
* @param[in] pNewNamespacePrefix - name space prefix to use for the namespace. MUST NOT be in use, MUST NOT be an empty string or contain non-alphanumeric characters.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvXMLDocument_ChangeNamespacePrefixPtr) (LibMCEnv_XMLDocument pXMLDocument, const char * pOldNamespacePrefix, const char * pNewNamespacePrefix);

/**
* Returns root node of the document.
*
* @param[in] pXMLDocument - XMLDocument instance.
* @param[out] pRootNode - Root node of the document.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvXMLDocument_GetRootNodePtr) (LibMCEnv_XMLDocument pXMLDocument, LibMCEnv_XMLDocumentNode * pRootNode);

/**
* Saves the XML document into a string.
*
* @param[in] pXMLDocument - XMLDocument instance.
* @param[in] bAddLineBreaks - If true, line breaks and indentation will be added to the output string.
* @param[in] nXMLStringBufferSize - size of the buffer (including trailing 0)
* @param[out] pXMLStringNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pXMLStringBuffer -  buffer of String with the XML Content., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvXMLDocument_SaveToStringPtr) (LibMCEnv_XMLDocument pXMLDocument, bool bAddLineBreaks, const LibMCEnv_uint32 nXMLStringBufferSize, LibMCEnv_uint32* pXMLStringNeededChars, char * pXMLStringBuffer);

/*************************************************************************************************************************
 Class definition for TCPIPPacket
**************************************************************************************************************************/

/**
* Returns if packet is empty.
*
* @param[in] pTCPIPPacket - TCPIPPacket instance.
* @param[out] pPacketIsEmpty - Flag if packet is empty.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvTCPIPPacket_IsEmptyPtr) (LibMCEnv_TCPIPPacket pTCPIPPacket, bool * pPacketIsEmpty);

/**
* Returns the size of the packet. Returns 0 if packet is empty.
*
* @param[in] pTCPIPPacket - TCPIPPacket instance.
* @param[out] pPacketSize - returns size of packet.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvTCPIPPacket_GetSizePtr) (LibMCEnv_TCPIPPacket pTCPIPPacket, LibMCEnv_uint32 * pPacketSize);

/**
* Returns the data of the packet. Fails if packet is empty.
*
* @param[in] pTCPIPPacket - TCPIPPacket instance.
* @param[in] nBufferBufferSize - Number of elements in buffer
* @param[out] pBufferNeededCount - will be filled with the count of the written elements, or needed buffer size.
* @param[out] pBufferBuffer - uint8  buffer of packet data.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvTCPIPPacket_GetDataPtr) (LibMCEnv_TCPIPPacket pTCPIPPacket, const LibMCEnv_uint64 nBufferBufferSize, LibMCEnv_uint64* pBufferNeededCount, LibMCEnv_uint8 * pBufferBuffer);

/*************************************************************************************************************************
 Class definition for TCPIPConnection
**************************************************************************************************************************/

/**
* Returns the IP Address of the Connection.
*
* @param[in] pTCPIPConnection - TCPIPConnection instance.
* @param[in] nIPAddressBufferSize - size of the buffer (including trailing 0)
* @param[out] pIPAddressNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pIPAddressBuffer -  buffer of IP Address., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvTCPIPConnection_GetIPAddressPtr) (LibMCEnv_TCPIPConnection pTCPIPConnection, const LibMCEnv_uint32 nIPAddressBufferSize, LibMCEnv_uint32* pIPAddressNeededChars, char * pIPAddressBuffer);

/**
* Returns the Port of the Connection.
*
* @param[in] pTCPIPConnection - TCPIPConnection instance.
* @param[out] pPort - Port.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvTCPIPConnection_GetPortPtr) (LibMCEnv_TCPIPConnection pTCPIPConnection, LibMCEnv_uint32 * pPort);

/**
* Returns the Timeout of the Connection.
*
* @param[in] pTCPIPConnection - TCPIPConnection instance.
* @param[out] pTimeout - Timeout in milliseconds.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvTCPIPConnection_GetTimeoutPtr) (LibMCEnv_TCPIPConnection pTCPIPConnection, LibMCEnv_uint32 * pTimeout);

/**
* Returns if the instance is connected.
*
* @param[in] pTCPIPConnection - TCPIPConnection instance.
* @param[out] pIsConnected - .
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvTCPIPConnection_IsConnectedPtr) (LibMCEnv_TCPIPConnection pTCPIPConnection, bool * pIsConnected);

/**
* Disconnects from the Server, if connected.
*
* @param[in] pTCPIPConnection - TCPIPConnection instance.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvTCPIPConnection_DisconnectPtr) (LibMCEnv_TCPIPConnection pTCPIPConnection);

/**
* Disconnects and Connects to the Server.
*
* @param[in] pTCPIPConnection - TCPIPConnection instance.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvTCPIPConnection_ReconnectPtr) (LibMCEnv_TCPIPConnection pTCPIPConnection);

/**
* Sends a buffer of bytes to the Server.
*
* @param[in] pTCPIPConnection - TCPIPConnection instance.
* @param[in] nBufferBufferSize - Number of elements in buffer
* @param[in] pBufferBuffer - uint8 buffer of packet payload.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvTCPIPConnection_SendBufferPtr) (LibMCEnv_TCPIPConnection pTCPIPConnection, LibMCEnv_uint64 nBufferBufferSize, const LibMCEnv_uint8 * pBufferBuffer);

/**
* Waits for a server packet to arrive.
*
* @param[in] pTCPIPConnection - TCPIPConnection instance.
* @param[in] nTimeOutInMS - timeout in Milliseconds.
* @param[out] pDataAvailable - Flag if a new packet has arrived.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvTCPIPConnection_WaitForDataPtr) (LibMCEnv_TCPIPConnection pTCPIPConnection, LibMCEnv_uint32 nTimeOutInMS, bool * pDataAvailable);

/**
* Receives a fixed length packet. Blocks until expected number of bytes arrives or timeout is hit. Fails if there is a connection error. Returns empty packet if timeout is hit.
*
* @param[in] pTCPIPConnection - TCPIPConnection instance.
* @param[in] nPacketSize - Size of packet to receive. MUST be larger than 0.
* @param[in] nTimeOutInMS - Timeout in Milliseconds.
* @param[out] pPacketInstance - Packet instance. Returns empty packet if timeout is hit
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvTCPIPConnection_ReceiveFixedPacketPtr) (LibMCEnv_TCPIPConnection pTCPIPConnection, LibMCEnv_uint32 nPacketSize, LibMCEnv_uint32 nTimeOutInMS, LibMCEnv_TCPIPPacket * pPacketInstance);

/**
* Receives data. Fails if there is a connection error. Returns empty packet if timeout is hit.
*
* @param[in] pTCPIPConnection - TCPIPConnection instance.
* @param[in] nDataSize - Size of data to receive.
* @param[in] nTimeOutInMS - timeout in Milliseconds.
* @param[out] pPacketInstance - Packet instance. Size will be between 0 and DataSize.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvTCPIPConnection_ReceiveDataPtr) (LibMCEnv_TCPIPConnection pTCPIPConnection, LibMCEnv_uint32 nDataSize, LibMCEnv_uint32 nTimeOutInMS, LibMCEnv_TCPIPPacket * pPacketInstance);

/*************************************************************************************************************************
 Class definition for ModbusTCPDigitalIOStatus
**************************************************************************************************************************/

/**
* Returns the number of Digital IOs in the instance.
*
* @param[in] pModbusTCPDigitalIOStatus - ModbusTCPDigitalIOStatus instance.
* @param[out] pCount - Count.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvModbusTCPDigitalIOStatus_GetCountPtr) (LibMCEnv_ModbusTCPDigitalIOStatus pModbusTCPDigitalIOStatus, LibMCEnv_uint32 * pCount);

/**
* Returns the base address of Digital IOs in the instance.
*
* @param[in] pModbusTCPDigitalIOStatus - ModbusTCPDigitalIOStatus instance.
* @param[out] pAddress - Base Address.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvModbusTCPDigitalIOStatus_GetBaseAddressPtr) (LibMCEnv_ModbusTCPDigitalIOStatus pModbusTCPDigitalIOStatus, LibMCEnv_uint32 * pAddress);

/**
* Returns the cached state of the Digital IO in the instance.
*
* @param[in] pModbusTCPDigitalIOStatus - ModbusTCPDigitalIOStatus instance.
* @param[in] nIndex - Index of IO Value. 0-based.
* @param[out] pState - State Value.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvModbusTCPDigitalIOStatus_GetValuePtr) (LibMCEnv_ModbusTCPDigitalIOStatus pModbusTCPDigitalIOStatus, LibMCEnv_uint32 nIndex, bool * pState);

/**
* Returns all Digital IOs of the instance as byte array.
*
* @param[in] pModbusTCPDigitalIOStatus - ModbusTCPDigitalIOStatus instance.
* @param[in] nStateArrayBufferSize - Number of elements in buffer
* @param[out] pStateArrayNeededCount - will be filled with the count of the written elements, or needed buffer size.
* @param[out] pStateArrayBuffer - uint8  buffer of State Value Array.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvModbusTCPDigitalIOStatus_GetValuesPtr) (LibMCEnv_ModbusTCPDigitalIOStatus pModbusTCPDigitalIOStatus, const LibMCEnv_uint64 nStateArrayBufferSize, LibMCEnv_uint64* pStateArrayNeededCount, LibMCEnv_uint8 * pStateArrayBuffer);

/*************************************************************************************************************************
 Class definition for ModbusTCPRegisterStatus
**************************************************************************************************************************/

/**
* Returns the number of registers in the instance.
*
* @param[in] pModbusTCPRegisterStatus - ModbusTCPRegisterStatus instance.
* @param[out] pCount - Count.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvModbusTCPRegisterStatus_GetCountPtr) (LibMCEnv_ModbusTCPRegisterStatus pModbusTCPRegisterStatus, LibMCEnv_uint32 * pCount);

/**
* Returns the base address of registers in the instance.
*
* @param[in] pModbusTCPRegisterStatus - ModbusTCPRegisterStatus instance.
* @param[out] pAddress - Base Address.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvModbusTCPRegisterStatus_GetBaseAddressPtr) (LibMCEnv_ModbusTCPRegisterStatus pModbusTCPRegisterStatus, LibMCEnv_uint32 * pAddress);

/**
* Returns the cached state of the registers in the instance.
*
* @param[in] pModbusTCPRegisterStatus - ModbusTCPRegisterStatus instance.
* @param[in] nIndex - Index of IO Value. 0-based.
* @param[out] pState - State Value.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvModbusTCPRegisterStatus_GetValuePtr) (LibMCEnv_ModbusTCPRegisterStatus pModbusTCPRegisterStatus, LibMCEnv_uint32 nIndex, LibMCEnv_uint16 * pState);

/**
* Returns all registers of the instance as word array.
*
* @param[in] pModbusTCPRegisterStatus - ModbusTCPRegisterStatus instance.
* @param[in] nStateArrayBufferSize - Number of elements in buffer
* @param[out] pStateArrayNeededCount - will be filled with the count of the written elements, or needed buffer size.
* @param[out] pStateArrayBuffer - uint16  buffer of State Value Array.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvModbusTCPRegisterStatus_GetValuesPtr) (LibMCEnv_ModbusTCPRegisterStatus pModbusTCPRegisterStatus, const LibMCEnv_uint64 nStateArrayBufferSize, LibMCEnv_uint64* pStateArrayNeededCount, LibMCEnv_uint16 * pStateArrayBuffer);

/*************************************************************************************************************************
 Class definition for ModbusTCPConnection
**************************************************************************************************************************/

/**
* Returns the IP Address of the Connection.
*
* @param[in] pModbusTCPConnection - ModbusTCPConnection instance.
* @param[in] nIPAddressBufferSize - size of the buffer (including trailing 0)
* @param[out] pIPAddressNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pIPAddressBuffer -  buffer of IP Address., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvModbusTCPConnection_GetIPAddressPtr) (LibMCEnv_ModbusTCPConnection pModbusTCPConnection, const LibMCEnv_uint32 nIPAddressBufferSize, LibMCEnv_uint32* pIPAddressNeededChars, char * pIPAddressBuffer);

/**
* Returns the Port of the Connection.
*
* @param[in] pModbusTCPConnection - ModbusTCPConnection instance.
* @param[out] pPort - Port.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvModbusTCPConnection_GetPortPtr) (LibMCEnv_ModbusTCPConnection pModbusTCPConnection, LibMCEnv_uint32 * pPort);

/**
* Returns the Timeout of the Connection.
*
* @param[in] pModbusTCPConnection - ModbusTCPConnection instance.
* @param[out] pTimeout - Timeout in milliseconds.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvModbusTCPConnection_GetTimeoutPtr) (LibMCEnv_ModbusTCPConnection pModbusTCPConnection, LibMCEnv_uint32 * pTimeout);

/**
* Returns if the instance is connected.
*
* @param[in] pModbusTCPConnection - ModbusTCPConnection instance.
* @param[out] pIsConnected - .
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvModbusTCPConnection_IsConnectedPtr) (LibMCEnv_ModbusTCPConnection pModbusTCPConnection, bool * pIsConnected);

/**
* Disconnects from the Server.
*
* @param[in] pModbusTCPConnection - ModbusTCPConnection instance.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvModbusTCPConnection_DisconnectPtr) (LibMCEnv_ModbusTCPConnection pModbusTCPConnection);

/**
* Disconnects and Connects to the Server.
*
* @param[in] pModbusTCPConnection - ModbusTCPConnection instance.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvModbusTCPConnection_ReconnectPtr) (LibMCEnv_ModbusTCPConnection pModbusTCPConnection);

/**
* Sends a diagnosis call to the Server.
*
* @param[in] pModbusTCPConnection - ModbusTCPConnection instance.
* @param[in] nSubFunction - Modbus TCP Subfunction ID.
* @param[in] nDataField - Modbus TCP Data Field.
* @param[out] pDataResponse - Modbus TCP Data Response.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvModbusTCPConnection_DiagnosisCallPtr) (LibMCEnv_ModbusTCPConnection pModbusTCPConnection, LibMCEnv_uint16 nSubFunction, LibMCEnv_uint16 nDataField, LibMCEnv_uint16 * pDataResponse);

/**
* Reads coil status of Server.
*
* @param[in] pModbusTCPConnection - ModbusTCPConnection instance.
* @param[in] nStartAddress - Start Address.
* @param[in] nBitCount - Number of coils to read. MUST be larger than 0.
* @param[out] pCoilStatus - Coil status instance.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvModbusTCPConnection_ReadCoilStatusPtr) (LibMCEnv_ModbusTCPConnection pModbusTCPConnection, LibMCEnv_uint32 nStartAddress, LibMCEnv_uint32 nBitCount, LibMCEnv_ModbusTCPDigitalIOStatus * pCoilStatus);

/**
* Reads input status of Server.
*
* @param[in] pModbusTCPConnection - ModbusTCPConnection instance.
* @param[in] nStartAddress - Start Address.
* @param[in] nBitCount - Number of inputs to read. MUST be larger than 0.
* @param[out] pInputStatus - Input status instance.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvModbusTCPConnection_ReadInputStatusPtr) (LibMCEnv_ModbusTCPConnection pModbusTCPConnection, LibMCEnv_uint32 nStartAddress, LibMCEnv_uint32 nBitCount, LibMCEnv_ModbusTCPDigitalIOStatus * pInputStatus);

/**
* Reads holding registers of Server.
*
* @param[in] pModbusTCPConnection - ModbusTCPConnection instance.
* @param[in] nStartAddress - Start Address.
* @param[in] nRegisterCount - Number of registers. MUST be larger than 0.
* @param[out] pRegisterInstance - Holding register instance.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvModbusTCPConnection_ReadHoldingRegistersPtr) (LibMCEnv_ModbusTCPConnection pModbusTCPConnection, LibMCEnv_uint32 nStartAddress, LibMCEnv_uint32 nRegisterCount, LibMCEnv_ModbusTCPRegisterStatus * pRegisterInstance);

/**
* Reads input registers of Server.
*
* @param[in] pModbusTCPConnection - ModbusTCPConnection instance.
* @param[in] nStartAddress - Start Address.
* @param[in] nRegisterCount - Number of registers. MUST be larger than 0.
* @param[out] pRegisterInstance - Input register instance.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvModbusTCPConnection_ReadInputRegistersPtr) (LibMCEnv_ModbusTCPConnection pModbusTCPConnection, LibMCEnv_uint32 nStartAddress, LibMCEnv_uint32 nRegisterCount, LibMCEnv_ModbusTCPRegisterStatus * pRegisterInstance);

/**
* Forces multiple coils on Server.
*
* @param[in] pModbusTCPConnection - ModbusTCPConnection instance.
* @param[in] nStartAddress - Start Address.
* @param[in] nBufferBufferSize - Number of elements in buffer
* @param[in] pBufferBuffer - uint8 buffer of Input coil array. One byte per Input. MUST NOT be empty
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvModbusTCPConnection_ForceMultipleCoilsPtr) (LibMCEnv_ModbusTCPConnection pModbusTCPConnection, LibMCEnv_uint32 nStartAddress, LibMCEnv_uint64 nBufferBufferSize, const LibMCEnv_uint8 * pBufferBuffer);

/**
* Forces multiple registers on Server.
*
* @param[in] pModbusTCPConnection - ModbusTCPConnection instance.
* @param[in] nStartAddress - Start Address.
* @param[in] nBufferBufferSize - Number of elements in buffer
* @param[in] pBufferBuffer - uint16 buffer of Input register array. One word per Input. MUST NOT be empty
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvModbusTCPConnection_PresetMultipleRegistersPtr) (LibMCEnv_ModbusTCPConnection pModbusTCPConnection, LibMCEnv_uint32 nStartAddress, LibMCEnv_uint64 nBufferBufferSize, const LibMCEnv_uint16 * pBufferBuffer);

/*************************************************************************************************************************
 Class definition for DriverStatusUpdateSession
**************************************************************************************************************************/

/**
* sets a string parameter
*
* @param[in] pDriverStatusUpdateSession - DriverStatusUpdateSession instance.
* @param[in] pParameterName - Parameter Name
* @param[in] pValue - Value to set
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvDriverStatusUpdateSession_SetStringParameterPtr) (LibMCEnv_DriverStatusUpdateSession pDriverStatusUpdateSession, const char * pParameterName, const char * pValue);

/**
* sets a uuid parameter
*
* @param[in] pDriverStatusUpdateSession - DriverStatusUpdateSession instance.
* @param[in] pParameterName - Parameter Name
* @param[in] pValue - Value to set
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvDriverStatusUpdateSession_SetUUIDParameterPtr) (LibMCEnv_DriverStatusUpdateSession pDriverStatusUpdateSession, const char * pParameterName, const char * pValue);

/**
* sets a double parameter
*
* @param[in] pDriverStatusUpdateSession - DriverStatusUpdateSession instance.
* @param[in] pParameterName - Parameter Name
* @param[in] dValue - Value to set
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvDriverStatusUpdateSession_SetDoubleParameterPtr) (LibMCEnv_DriverStatusUpdateSession pDriverStatusUpdateSession, const char * pParameterName, LibMCEnv_double dValue);

/**
* sets an int parameter
*
* @param[in] pDriverStatusUpdateSession - DriverStatusUpdateSession instance.
* @param[in] pParameterName - Parameter Name
* @param[in] nValue - Value to set
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvDriverStatusUpdateSession_SetIntegerParameterPtr) (LibMCEnv_DriverStatusUpdateSession pDriverStatusUpdateSession, const char * pParameterName, LibMCEnv_int64 nValue);

/**
* sets a bool parameter
*
* @param[in] pDriverStatusUpdateSession - DriverStatusUpdateSession instance.
* @param[in] pParameterName - Parameter Name
* @param[in] bValue - Value to set
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvDriverStatusUpdateSession_SetBoolParameterPtr) (LibMCEnv_DriverStatusUpdateSession pDriverStatusUpdateSession, const char * pParameterName, bool bValue);

/**
* logs a string as message
*
* @param[in] pDriverStatusUpdateSession - DriverStatusUpdateSession instance.
* @param[in] pLogString - String to Log
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvDriverStatusUpdateSession_LogMessagePtr) (LibMCEnv_DriverStatusUpdateSession pDriverStatusUpdateSession, const char * pLogString);

/**
* logs a string as warning
*
* @param[in] pDriverStatusUpdateSession - DriverStatusUpdateSession instance.
* @param[in] pLogString - String to Log
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvDriverStatusUpdateSession_LogWarningPtr) (LibMCEnv_DriverStatusUpdateSession pDriverStatusUpdateSession, const char * pLogString);

/**
* logs a string as info
*
* @param[in] pDriverStatusUpdateSession - DriverStatusUpdateSession instance.
* @param[in] pLogString - String to Log
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvDriverStatusUpdateSession_LogInfoPtr) (LibMCEnv_DriverStatusUpdateSession pDriverStatusUpdateSession, const char * pLogString);

/**
* Sleeps for a definite amount of time.
*
* @param[in] pDriverStatusUpdateSession - DriverStatusUpdateSession instance.
* @param[in] nDelay - Milliseconds to sleep.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvDriverStatusUpdateSession_SleepPtr) (LibMCEnv_DriverStatusUpdateSession pDriverStatusUpdateSession, LibMCEnv_uint32 nDelay);

/*************************************************************************************************************************
 Class definition for DriverEnvironment
**************************************************************************************************************************/

/**
* creates a status update object which can be easily called from an independent thread.
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[out] pUpdateStatusInstance - creates a status update instance
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvDriverEnvironment_CreateStatusUpdateSessionPtr) (LibMCEnv_DriverEnvironment pDriverEnvironment, LibMCEnv_DriverStatusUpdateSession * pUpdateStatusInstance);

/**
* creates a temporary working directory.
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[out] pWorkingDirectory - creates a working directory
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvDriverEnvironment_CreateWorkingDirectoryPtr) (LibMCEnv_DriverEnvironment pDriverEnvironment, LibMCEnv_WorkingDirectory * pWorkingDirectory);

/**
* creates a TCP/IP Connection for a specific IP address and port.
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] pIPAddress - IP Address.
* @param[in] nPort - Port.
* @param[in] nTimeOutInMS - timeout in Milliseconds.
* @param[out] pConnectionInstance - connects to the given IP Address
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvDriverEnvironment_CreateTCPIPConnectionPtr) (LibMCEnv_DriverEnvironment pDriverEnvironment, const char * pIPAddress, LibMCEnv_uint32 nPort, LibMCEnv_uint32 nTimeOutInMS, LibMCEnv_TCPIPConnection * pConnectionInstance);

/**
* creates a Modbus TCP Connection for a specific IP address and port.
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] pIPAddress - IP Address.
* @param[in] nPort - Port.
* @param[in] nTimeOutInMS - timeout in Milliseconds.
* @param[out] pConnectionInstance - connects to the given IP Address
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvDriverEnvironment_CreateModbusTCPConnectionPtr) (LibMCEnv_DriverEnvironment pDriverEnvironment, const char * pIPAddress, LibMCEnv_uint32 nPort, LibMCEnv_uint32 nTimeOutInMS, LibMCEnv_ModbusTCPConnection * pConnectionInstance);

/**
* creates an empty XML Document.
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] pRootNodeName - Name of the root node. MUST be a valid XML Node Name string.
* @param[in] pDefaultNamespace - Default namespace of the document. MUST be a valid XML namespace string.
* @param[out] pXMLDocument - XML Document Instance.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvDriverEnvironment_CreateXMLDocumentPtr) (LibMCEnv_DriverEnvironment pDriverEnvironment, const char * pRootNodeName, const char * pDefaultNamespace, LibMCEnv_XMLDocument * pXMLDocument);

/**
* parses an XML String and returns an XML Document instance. Throws an error if XML is malformatted.
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] pXMLString - XML String.
* @param[out] pXMLDocument - XML Document Instance.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvDriverEnvironment_ParseXMLStringPtr) (LibMCEnv_DriverEnvironment pDriverEnvironment, const char * pXMLString, LibMCEnv_XMLDocument * pXMLDocument);

/**
* parses a XML stored in a byte array and returns an XML Document instance. . Throws an error if XML is malformatted.
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] nXMLDataBufferSize - Number of elements in buffer
* @param[in] pXMLDataBuffer - uint8 buffer of XML Binary data.
* @param[out] pXMLDocument - XML Document Instance.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvDriverEnvironment_ParseXMLDataPtr) (LibMCEnv_DriverEnvironment pDriverEnvironment, LibMCEnv_uint64 nXMLDataBufferSize, const LibMCEnv_uint8 * pXMLDataBuffer, LibMCEnv_XMLDocument * pXMLDocument);

/**
* retrieves if attached driver has data with the given identifier.
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] pIdentifier - identifier of the binary data in the driver package.
* @param[out] pHasResourceData - returns true if the resource exists in the machine resource package.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvDriverEnvironment_DriverHasResourceDataPtr) (LibMCEnv_DriverEnvironment pDriverEnvironment, const char * pIdentifier, bool * pHasResourceData);

/**
* retrieves if attached driver has data with the given identifier.
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] pIdentifier - identifier of the binary data in the driver package.
* @param[out] pHasResourceData - returns true if the resource exists in the machine resource package.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvDriverEnvironment_MachineHasResourceDataPtr) (LibMCEnv_DriverEnvironment pDriverEnvironment, const char * pIdentifier, bool * pHasResourceData);

/**
* retrieves attached driver resource data into a memory buffer. (depreciated, equivalent to RetrieveDriverResourceData)
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] pIdentifier - identifier of the binary data in the driver package.
* @param[in] nDataBufferBufferSize - Number of elements in buffer
* @param[out] pDataBufferNeededCount - will be filled with the count of the written elements, or needed buffer size.
* @param[out] pDataBufferBuffer - uint8  buffer of buffer data.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvDriverEnvironment_RetrieveDriverDataPtr) (LibMCEnv_DriverEnvironment pDriverEnvironment, const char * pIdentifier, const LibMCEnv_uint64 nDataBufferBufferSize, LibMCEnv_uint64* pDataBufferNeededCount, LibMCEnv_uint8 * pDataBufferBuffer);

/**
* retrieves attached driver resource data into a memory buffer.
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] pIdentifier - identifier of the binary data in the driver package.
* @param[in] nDataBufferBufferSize - Number of elements in buffer
* @param[out] pDataBufferNeededCount - will be filled with the count of the written elements, or needed buffer size.
* @param[out] pDataBufferBuffer - uint8  buffer of buffer data.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvDriverEnvironment_RetrieveDriverResourceDataPtr) (LibMCEnv_DriverEnvironment pDriverEnvironment, const char * pIdentifier, const LibMCEnv_uint64 nDataBufferBufferSize, LibMCEnv_uint64* pDataBufferNeededCount, LibMCEnv_uint8 * pDataBufferBuffer);

/**
* retrieves a machine resource data (Plugins Directory) driver data into a memory buffer.
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] pIdentifier - identifier of the binary data in the machine resource package.
* @param[in] nDataBufferBufferSize - Number of elements in buffer
* @param[out] pDataBufferNeededCount - will be filled with the count of the written elements, or needed buffer size.
* @param[out] pDataBufferBuffer - uint8  buffer of buffer data.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvDriverEnvironment_RetrieveMachineResourceDataPtr) (LibMCEnv_DriverEnvironment pDriverEnvironment, const char * pIdentifier, const LibMCEnv_uint64 nDataBufferBufferSize, LibMCEnv_uint64* pDataBufferNeededCount, LibMCEnv_uint8 * pDataBufferBuffer);

/**
* Creates an accessor object for a toolpath. Toolpath MUST have been loaded into memory before.
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] pStreamUUID - UUID of the stream.
* @param[out] pToolpathInstance - Toolpath instance.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvDriverEnvironment_CreateToolpathAccessorPtr) (LibMCEnv_DriverEnvironment pDriverEnvironment, const char * pStreamUUID, LibMCEnv_ToolpathAccessor * pToolpathInstance);

/**
* checks if a name is a valid alphanumerical string for parameters.
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] pParameterName - Parameter Name
* @param[out] pNameIsValid - returns true if the parameter name is a valid name.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvDriverEnvironment_ParameterNameIsValidPtr) (LibMCEnv_DriverEnvironment pDriverEnvironment, const char * pParameterName, bool * pNameIsValid);

/**
* registers a string parameter. Must only be called during driver creation.
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] pParameterName - Parameter Name
* @param[in] pDescription - Parameter Description
* @param[in] pDefaultValue - default value to set
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvDriverEnvironment_RegisterStringParameterPtr) (LibMCEnv_DriverEnvironment pDriverEnvironment, const char * pParameterName, const char * pDescription, const char * pDefaultValue);

/**
* registers a uuid parameter. Must only be called during driver creation.
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] pParameterName - Parameter Name
* @param[in] pDescription - Parameter Description
* @param[in] pDefaultValue - default value to set
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvDriverEnvironment_RegisterUUIDParameterPtr) (LibMCEnv_DriverEnvironment pDriverEnvironment, const char * pParameterName, const char * pDescription, const char * pDefaultValue);

/**
* registers a double parameter. Must only be called during driver creation.
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] pParameterName - Parameter Name
* @param[in] pDescription - Parameter Description
* @param[in] dDefaultValue - default value to set
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvDriverEnvironment_RegisterDoubleParameterPtr) (LibMCEnv_DriverEnvironment pDriverEnvironment, const char * pParameterName, const char * pDescription, LibMCEnv_double dDefaultValue);

/**
* registers an int parameter. Must only be called during driver creation.
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] pParameterName - Parameter Name
* @param[in] pDescription - Parameter Description
* @param[in] nDefaultValue - default value to set
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvDriverEnvironment_RegisterIntegerParameterPtr) (LibMCEnv_DriverEnvironment pDriverEnvironment, const char * pParameterName, const char * pDescription, LibMCEnv_int64 nDefaultValue);

/**
* registers a bool parameter. Must only be called during driver creation.
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] pParameterName - Parameter Name
* @param[in] pDescription - Parameter Description
* @param[in] bDefaultValue - default value to set
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvDriverEnvironment_RegisterBoolParameterPtr) (LibMCEnv_DriverEnvironment pDriverEnvironment, const char * pParameterName, const char * pDescription, bool bDefaultValue);

/**
* sets a string parameter
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] pParameterName - Parameter Name
* @param[in] pValue - Value to set
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvDriverEnvironment_SetStringParameterPtr) (LibMCEnv_DriverEnvironment pDriverEnvironment, const char * pParameterName, const char * pValue);

/**
* sets a uuid parameter
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] pParameterName - Parameter Name
* @param[in] pValue - Value to set
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvDriverEnvironment_SetUUIDParameterPtr) (LibMCEnv_DriverEnvironment pDriverEnvironment, const char * pParameterName, const char * pValue);

/**
* sets a double parameter
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] pParameterName - Parameter Name
* @param[in] dValue - Value to set
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvDriverEnvironment_SetDoubleParameterPtr) (LibMCEnv_DriverEnvironment pDriverEnvironment, const char * pParameterName, LibMCEnv_double dValue);

/**
* sets an int parameter
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] pParameterName - Parameter Name
* @param[in] nValue - Value to set
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvDriverEnvironment_SetIntegerParameterPtr) (LibMCEnv_DriverEnvironment pDriverEnvironment, const char * pParameterName, LibMCEnv_int64 nValue);

/**
* sets a bool parameter
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] pParameterName - Parameter Name
* @param[in] bValue - Value to set
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvDriverEnvironment_SetBoolParameterPtr) (LibMCEnv_DriverEnvironment pDriverEnvironment, const char * pParameterName, bool bValue);

/**
* Puts the current instance to sleep for a definite amount of time. MUST be used instead of a blocking sleep call.
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] nDelay - Milliseconds to sleeps
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvDriverEnvironment_SleepPtr) (LibMCEnv_DriverEnvironment pDriverEnvironment, LibMCEnv_uint32 nDelay);

/**
* Returns the global timer in milliseconds.
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[out] pTimerValue - Timer value in Milliseconds
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvDriverEnvironment_GetGlobalTimerInMillisecondsPtr) (LibMCEnv_DriverEnvironment pDriverEnvironment, LibMCEnv_uint64 * pTimerValue);

/**
* logs a string as message
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] pLogString - String to Log
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvDriverEnvironment_LogMessagePtr) (LibMCEnv_DriverEnvironment pDriverEnvironment, const char * pLogString);

/**
* logs a string as warning
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] pLogString - String to Log
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvDriverEnvironment_LogWarningPtr) (LibMCEnv_DriverEnvironment pDriverEnvironment, const char * pLogString);

/**
* logs a string as info
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] pLogString - String to Log
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvDriverEnvironment_LogInfoPtr) (LibMCEnv_DriverEnvironment pDriverEnvironment, const char * pLogString);

/**
* creates an empty image object.
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] nPixelSizeX - Pixel size in X. MUST be positive.
* @param[in] nPixelSizeY - Pixel size in Y. MUST be positive.
* @param[in] dDPIValueX - DPI Value in X. MUST be positive.
* @param[in] dDPIValueY - DPI Value in Y. MUST be positive.
* @param[in] ePixelFormat - Pixel format to use.
* @param[out] pImageDataInstance - Empty image instance.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvDriverEnvironment_CreateEmptyImagePtr) (LibMCEnv_DriverEnvironment pDriverEnvironment, LibMCEnv_uint32 nPixelSizeX, LibMCEnv_uint32 nPixelSizeY, LibMCEnv_double dDPIValueX, LibMCEnv_double dDPIValueY, LibMCEnv::eImagePixelFormat ePixelFormat, LibMCEnv_ImageData * pImageDataInstance);

/**
* creates an image object from a PNG data stream.
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] nPNGDataBufferSize - Number of elements in buffer
* @param[in] pPNGDataBuffer - uint8 buffer of DPI Value in X. MUST be positive.
* @param[in] dDPIValueX - DPI Value in X. MUST be positive.
* @param[in] dDPIValueY - DPI Value in Y. MUST be positive.
* @param[in] ePixelFormat - Pixel format to use. Might lose color and alpha information.
* @param[out] pImageDataInstance - Image instance containing the PNG image.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvDriverEnvironment_LoadPNGImagePtr) (LibMCEnv_DriverEnvironment pDriverEnvironment, LibMCEnv_uint64 nPNGDataBufferSize, const LibMCEnv_uint8 * pPNGDataBuffer, LibMCEnv_double dDPIValueX, LibMCEnv_double dDPIValueY, LibMCEnv::eImagePixelFormat ePixelFormat, LibMCEnv_ImageData * pImageDataInstance);

/**
* Creates an empty discrete field.
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] nPixelCountX - Pixel count in X. MUST be positive.
* @param[in] nPixelCountY - Pixel count in Y. MUST be positive.
* @param[in] dDPIValueX - DPI Value in X. MUST be positive.
* @param[in] dDPIValueY - DPI Value in Y. MUST be positive.
* @param[in] dOriginX - Origin X of the field in mm.
* @param[in] dOriginY - Origin Y of the field in mm.
* @param[in] dDefaultValue - Default value of the field.
* @param[out] pFieldDataInstance - Empty field instance.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvDriverEnvironment_CreateDiscreteField2DPtr) (LibMCEnv_DriverEnvironment pDriverEnvironment, LibMCEnv_uint32 nPixelCountX, LibMCEnv_uint32 nPixelCountY, LibMCEnv_double dDPIValueX, LibMCEnv_double dDPIValueY, LibMCEnv_double dOriginX, LibMCEnv_double dOriginY, LibMCEnv_double dDefaultValue, LibMCEnv_DiscreteFieldData2D * pFieldDataInstance);

/**
* Returns if a build object exists. Fails if BuildUUID is not a valid UUID string.
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] pBuildUUID - UUID of the build entity.
* @param[out] pBuildExists - Returns true if build exists
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvDriverEnvironment_HasBuildJobPtr) (LibMCEnv_DriverEnvironment pDriverEnvironment, const char * pBuildUUID, bool * pBuildExists);

/**
* Returns a instance of a build object. Fails if build uuid does not exist.
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] pBuildUUID - UUID of the build entity.
* @param[out] pBuildInstance - Build instance
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvDriverEnvironment_GetBuildJobPtr) (LibMCEnv_DriverEnvironment pDriverEnvironment, const char * pBuildUUID, LibMCEnv_Build * pBuildInstance);

/*************************************************************************************************************************
 Class definition for SignalTrigger
**************************************************************************************************************************/

/**
* Returns, if signal channel is available.
*
* @param[in] pSignalTrigger - SignalTrigger instance.
* @param[out] pChannelIsAvailable - Returns true, if signal channel is available.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvSignalTrigger_CanTriggerPtr) (LibMCEnv_SignalTrigger pSignalTrigger, bool * pChannelIsAvailable);

/**
* Triggers a signal, if signal channel is available.
*
* @param[in] pSignalTrigger - SignalTrigger instance.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvSignalTrigger_TriggerPtr) (LibMCEnv_SignalTrigger pSignalTrigger);

/**
* Waits until the signal is reset.
*
* @param[in] pSignalTrigger - SignalTrigger instance.
* @param[in] nTimeOut - Timeout in Milliseconds. 0 for Immediate return.
* @param[out] pSuccess - Flag if signal handling has been handled.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvSignalTrigger_WaitForHandlingPtr) (LibMCEnv_SignalTrigger pSignalTrigger, LibMCEnv_uint32 nTimeOut, bool * pSuccess);

/**
* Returns the signal name.
*
* @param[in] pSignalTrigger - SignalTrigger instance.
* @param[in] nSignalNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pSignalNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pSignalNameBuffer -  buffer of Name Of Signal, may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvSignalTrigger_GetNamePtr) (LibMCEnv_SignalTrigger pSignalTrigger, const LibMCEnv_uint32 nSignalNameBufferSize, LibMCEnv_uint32* pSignalNameNeededChars, char * pSignalNameBuffer);

/**
* Returns the signal state machine instance.
*
* @param[in] pSignalTrigger - SignalTrigger instance.
* @param[in] nStateMachineNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pStateMachineNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pStateMachineNameBuffer -  buffer of Name Of State Machine, may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvSignalTrigger_GetStateMachinePtr) (LibMCEnv_SignalTrigger pSignalTrigger, const LibMCEnv_uint32 nStateMachineNameBufferSize, LibMCEnv_uint32* pStateMachineNameNeededChars, char * pStateMachineNameBuffer);

/**
* sets a string value
*
* @param[in] pSignalTrigger - SignalTrigger instance.
* @param[in] pName - Name
* @param[in] pValue - Value
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvSignalTrigger_SetStringPtr) (LibMCEnv_SignalTrigger pSignalTrigger, const char * pName, const char * pValue);

/**
* sets a uuid value
*
* @param[in] pSignalTrigger - SignalTrigger instance.
* @param[in] pName - Name
* @param[in] pValue - Value
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvSignalTrigger_SetUUIDPtr) (LibMCEnv_SignalTrigger pSignalTrigger, const char * pName, const char * pValue);

/**
* sets a double
*
* @param[in] pSignalTrigger - SignalTrigger instance.
* @param[in] pName - Name
* @param[in] dValue - Value
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvSignalTrigger_SetDoublePtr) (LibMCEnv_SignalTrigger pSignalTrigger, const char * pName, LibMCEnv_double dValue);

/**
* sets an int.
*
* @param[in] pSignalTrigger - SignalTrigger instance.
* @param[in] pName - Name
* @param[in] nValue - Value
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvSignalTrigger_SetIntegerPtr) (LibMCEnv_SignalTrigger pSignalTrigger, const char * pName, LibMCEnv_int64 nValue);

/**
* sets a bool
*
* @param[in] pSignalTrigger - SignalTrigger instance.
* @param[in] pName - Name
* @param[in] bValue - Value
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvSignalTrigger_SetBoolPtr) (LibMCEnv_SignalTrigger pSignalTrigger, const char * pName, bool bValue);

/**
* returns a string value of the result
*
* @param[in] pSignalTrigger - SignalTrigger instance.
* @param[in] pName - Name
* @param[in] nValueBufferSize - size of the buffer (including trailing 0)
* @param[out] pValueNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pValueBuffer -  buffer of Value, may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvSignalTrigger_GetStringResultPtr) (LibMCEnv_SignalTrigger pSignalTrigger, const char * pName, const LibMCEnv_uint32 nValueBufferSize, LibMCEnv_uint32* pValueNeededChars, char * pValueBuffer);

/**
* returns a uuid value of the result
*
* @param[in] pSignalTrigger - SignalTrigger instance.
* @param[in] pName - Name
* @param[in] nValueBufferSize - size of the buffer (including trailing 0)
* @param[out] pValueNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pValueBuffer -  buffer of Value, may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvSignalTrigger_GetUUIDResultPtr) (LibMCEnv_SignalTrigger pSignalTrigger, const char * pName, const LibMCEnv_uint32 nValueBufferSize, LibMCEnv_uint32* pValueNeededChars, char * pValueBuffer);

/**
* returns a string value of the result
*
* @param[in] pSignalTrigger - SignalTrigger instance.
* @param[in] pName - Name
* @param[out] pValue - Value
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvSignalTrigger_GetDoubleResultPtr) (LibMCEnv_SignalTrigger pSignalTrigger, const char * pName, LibMCEnv_double * pValue);

/**
* returns an int value of the result.
*
* @param[in] pSignalTrigger - SignalTrigger instance.
* @param[in] pName - Name
* @param[out] pValue - Value
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvSignalTrigger_GetIntegerResultPtr) (LibMCEnv_SignalTrigger pSignalTrigger, const char * pName, LibMCEnv_int64 * pValue);

/**
* returns a bool value of the result.
*
* @param[in] pSignalTrigger - SignalTrigger instance.
* @param[in] pName - Name
* @param[out] pValue - Value
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvSignalTrigger_GetBoolResultPtr) (LibMCEnv_SignalTrigger pSignalTrigger, const char * pName, bool * pValue);

/*************************************************************************************************************************
 Class definition for SignalHandler
**************************************************************************************************************************/

/**
* Marks signal as handled and resets signal channel.
*
* @param[in] pSignalHandler - SignalHandler instance.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvSignalHandler_SignalHandledPtr) (LibMCEnv_SignalHandler pSignalHandler);

/**
* Returns the signal name.
*
* @param[in] pSignalHandler - SignalHandler instance.
* @param[in] nSignalNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pSignalNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pSignalNameBuffer -  buffer of Name Of Signal, may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvSignalHandler_GetNamePtr) (LibMCEnv_SignalHandler pSignalHandler, const LibMCEnv_uint32 nSignalNameBufferSize, LibMCEnv_uint32* pSignalNameNeededChars, char * pSignalNameBuffer);

/**
* Returns the signal id. Depreciated.
*
* @param[in] pSignalHandler - SignalHandler instance.
* @param[in] nSignalIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pSignalIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pSignalIDBuffer -  buffer of Signal Identifier, may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvSignalHandler_GetSignalIDPtr) (LibMCEnv_SignalHandler pSignalHandler, const LibMCEnv_uint32 nSignalIDBufferSize, LibMCEnv_uint32* pSignalIDNeededChars, char * pSignalIDBuffer);

/**
* Returns the signal uuid. Identical to GetSignalID.
*
* @param[in] pSignalHandler - SignalHandler instance.
* @param[in] nSignalUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pSignalUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pSignalUUIDBuffer -  buffer of Signal Identifier, may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvSignalHandler_GetSignalUUIDPtr) (LibMCEnv_SignalHandler pSignalHandler, const LibMCEnv_uint32 nSignalUUIDBufferSize, LibMCEnv_uint32* pSignalUUIDNeededChars, char * pSignalUUIDBuffer);

/**
* Returns the signal state machine instance.
*
* @param[in] pSignalHandler - SignalHandler instance.
* @param[in] nStateMachineNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pStateMachineNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pStateMachineNameBuffer -  buffer of Name Of State Machine, may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvSignalHandler_GetStateMachinePtr) (LibMCEnv_SignalHandler pSignalHandler, const LibMCEnv_uint32 nStateMachineNameBufferSize, LibMCEnv_uint32* pStateMachineNameNeededChars, char * pStateMachineNameBuffer);

/**
* gets a string value
*
* @param[in] pSignalHandler - SignalHandler instance.
* @param[in] pName - Name
* @param[in] nValueBufferSize - size of the buffer (including trailing 0)
* @param[out] pValueNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pValueBuffer -  buffer of Value, may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvSignalHandler_GetStringPtr) (LibMCEnv_SignalHandler pSignalHandler, const char * pName, const LibMCEnv_uint32 nValueBufferSize, LibMCEnv_uint32* pValueNeededChars, char * pValueBuffer);

/**
* gets a uuid value
*
* @param[in] pSignalHandler - SignalHandler instance.
* @param[in] pName - Name
* @param[in] nValueBufferSize - size of the buffer (including trailing 0)
* @param[out] pValueNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pValueBuffer -  buffer of Value, may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvSignalHandler_GetUUIDPtr) (LibMCEnv_SignalHandler pSignalHandler, const char * pName, const LibMCEnv_uint32 nValueBufferSize, LibMCEnv_uint32* pValueNeededChars, char * pValueBuffer);

/**
* gets a double
*
* @param[in] pSignalHandler - SignalHandler instance.
* @param[in] pName - Name
* @param[out] pValue - Value
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvSignalHandler_GetDoublePtr) (LibMCEnv_SignalHandler pSignalHandler, const char * pName, LibMCEnv_double * pValue);

/**
* gets an int.
*
* @param[in] pSignalHandler - SignalHandler instance.
* @param[in] pName - Name
* @param[out] pValue - Value
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvSignalHandler_GetIntegerPtr) (LibMCEnv_SignalHandler pSignalHandler, const char * pName, LibMCEnv_int64 * pValue);

/**
* gets a bool
*
* @param[in] pSignalHandler - SignalHandler instance.
* @param[in] pName - Name
* @param[out] pValue - Value
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvSignalHandler_GetBoolPtr) (LibMCEnv_SignalHandler pSignalHandler, const char * pName, bool * pValue);

/**
* returns a string value of the result
*
* @param[in] pSignalHandler - SignalHandler instance.
* @param[in] pName - Name
* @param[in] pValue - Value
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvSignalHandler_SetStringResultPtr) (LibMCEnv_SignalHandler pSignalHandler, const char * pName, const char * pValue);

/**
* returns a uuid value of the result
*
* @param[in] pSignalHandler - SignalHandler instance.
* @param[in] pName - Name
* @param[in] pValue - Value
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvSignalHandler_SetUUIDResultPtr) (LibMCEnv_SignalHandler pSignalHandler, const char * pName, const char * pValue);

/**
* returns a string value of the result
*
* @param[in] pSignalHandler - SignalHandler instance.
* @param[in] pName - Name
* @param[in] dValue - Value
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvSignalHandler_SetDoubleResultPtr) (LibMCEnv_SignalHandler pSignalHandler, const char * pName, LibMCEnv_double dValue);

/**
* sets an int.
*
* @param[in] pSignalHandler - SignalHandler instance.
* @param[in] pName - Name
* @param[in] nValue - Value
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvSignalHandler_SetIntegerResultPtr) (LibMCEnv_SignalHandler pSignalHandler, const char * pName, LibMCEnv_int64 nValue);

/**
* sets a bool
*
* @param[in] pSignalHandler - SignalHandler instance.
* @param[in] pName - Name
* @param[in] bValue - Value
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvSignalHandler_SetBoolResultPtr) (LibMCEnv_SignalHandler pSignalHandler, const char * pName, bool bValue);

/*************************************************************************************************************************
 Class definition for UniformJournalSampling
**************************************************************************************************************************/

/**
* returns the name of the recorded variable.
*
* @param[in] pUniformJournalSampling - UniformJournalSampling instance.
* @param[in] nNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNameBuffer -  buffer of Path or name., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvUniformJournalSampling_GetVariableNamePtr) (LibMCEnv_UniformJournalSampling pUniformJournalSampling, const LibMCEnv_uint32 nNameBufferSize, LibMCEnv_uint32* pNameNeededChars, char * pNameBuffer);

/**
* Returns the number of samples in the interval.
*
* @param[in] pUniformJournalSampling - UniformJournalSampling instance.
* @param[out] pNumberOfSamples - Number of samples in the sampling.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvUniformJournalSampling_GetNumberOfSamplesPtr) (LibMCEnv_UniformJournalSampling pUniformJournalSampling, LibMCEnv_uint32 * pNumberOfSamples);

/**
* Returns the beginning time stamp of the available data point.
*
* @param[in] pUniformJournalSampling - UniformJournalSampling instance.
* @param[out] pStartTimeStampInMS - Start Timestamp of Recording in ms.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvUniformJournalSampling_GetStartTimeStampPtr) (LibMCEnv_UniformJournalSampling pUniformJournalSampling, LibMCEnv_uint64 * pStartTimeStampInMS);

/**
* Returns the beginning time stamp of the available data point.
*
* @param[in] pUniformJournalSampling - UniformJournalSampling instance.
* @param[out] pEndTimeStampInMS - End Timestamp of Recording in ms.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvUniformJournalSampling_GetEndTimeStampPtr) (LibMCEnv_UniformJournalSampling pUniformJournalSampling, LibMCEnv_uint64 * pEndTimeStampInMS);

/**
* Returns the timestamp and value of the given sample.
*
* @param[in] pUniformJournalSampling - UniformJournalSampling instance.
* @param[in] nIndex - Index of the sample. 0-based. MUST be smaller than NumberOfSamples.
* @param[out] pTimeStamp - TimeStamp of the sample in ms.
* @param[out] pValue - Value of the sample in ms.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvUniformJournalSampling_GetSamplePtr) (LibMCEnv_UniformJournalSampling pUniformJournalSampling, LibMCEnv_uint32 nIndex, LibMCEnv_uint64 * pTimeStamp, LibMCEnv_double * pValue);

/**
* Returns all timestamps and values of the sampling.
*
* @param[in] pUniformJournalSampling - UniformJournalSampling instance.
* @param[in] nTimeStampsBufferSize - Number of elements in buffer
* @param[out] pTimeStampsNeededCount - will be filled with the count of the written elements, or needed buffer size.
* @param[out] pTimeStampsBuffer - uint64  buffer of Array of TimeStamps in ms, in increasing order.
* @param[in] nValuesBufferSize - Number of elements in buffer
* @param[out] pValuesNeededCount - will be filled with the count of the written elements, or needed buffer size.
* @param[out] pValuesBuffer - double  buffer of Array of the associated values of the samples at those timestamps. Cardinality will be equal to the TimeStamps array.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvUniformJournalSampling_GetAllSamplesPtr) (LibMCEnv_UniformJournalSampling pUniformJournalSampling, const LibMCEnv_uint64 nTimeStampsBufferSize, LibMCEnv_uint64* pTimeStampsNeededCount, LibMCEnv_uint64 * pTimeStampsBuffer, const LibMCEnv_uint64 nValuesBufferSize, LibMCEnv_uint64* pValuesNeededCount, LibMCEnv_double * pValuesBuffer);

/*************************************************************************************************************************
 Class definition for JournalVariable
**************************************************************************************************************************/

/**
* returns the name of the recorded variable.
*
* @param[in] pJournalVariable - JournalVariable instance.
* @param[in] nNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNameBuffer -  buffer of Path or name., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvJournalVariable_GetVariableNamePtr) (LibMCEnv_JournalVariable pJournalVariable, const LibMCEnv_uint32 nNameBufferSize, LibMCEnv_uint32* pNameNeededChars, char * pNameBuffer);

/**
* Returns the beginning time stamp of the available data point.
*
* @param[in] pJournalVariable - JournalVariable instance.
* @param[out] pRecordingStartInMS - Start Timestamp of Recording in ms.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvJournalVariable_GetStartTimeStampPtr) (LibMCEnv_JournalVariable pJournalVariable, LibMCEnv_uint64 * pRecordingStartInMS);

/**
* Returns the beginning time stamp of the available data point.
*
* @param[in] pJournalVariable - JournalVariable instance.
* @param[out] pRecordingEndInMS - End Timestamp of Recording in ms.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvJournalVariable_GetEndTimeStampPtr) (LibMCEnv_JournalVariable pJournalVariable, LibMCEnv_uint64 * pRecordingEndInMS);

/**
* Calculates the average value over a time interval. Fails if no data is available in this time interval.
*
* @param[in] pJournalVariable - JournalVariable instance.
* @param[in] nStartTimeInMS - Start Timestamp of the interval in ms.
* @param[in] nEndTimeInMS - End Timestamp of the interval in ms. MUST be larger than Timestamp.
* @param[in] bClampInterval - If ClampInterval is false, the Interval MUST be completely contained in the available recording time. If ClampInterval is false, the Interval will be reduced to the available recording time. If there is no overlap of the Interval with the Recording time at all, the call will fail.
* @param[out] pAverageValue - Average value of the variable.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvJournalVariable_ComputeAveragePtr) (LibMCEnv_JournalVariable pJournalVariable, LibMCEnv_uint64 nStartTimeInMS, LibMCEnv_uint64 nEndTimeInMS, bool bClampInterval, LibMCEnv_double * pAverageValue);

/**
* Retrieves sample values for an interval. Interval MUST be inside the available recording time.
*
* @param[in] pJournalVariable - JournalVariable instance.
* @param[in] nStartTimeInMS - Start Timestamp of the interval in ms.
* @param[in] nEndTimeInMS - End Timestamp of the interval in ms.
* @param[in] nNumberOfSamples - End Timestamp of the interval in ms. The Length of the Interval (StartTimeInMS - EndTimeInMS) MUST be a multiple of the Number of samples.
* @param[in] dMovingAverageDelta - Each sample will be averaged from minus MovingAverageDelta to plus MovingAverageDelta.
* @param[in] bClampInterval - If ClampInterval is false, each moving average interval MUST be completely contained in the available recording time. If ClampInterval is false, the moving average interval will be reduced to the available recording time. If there is no overlap of the Interval with the Recording time at all, the call will fail.
* @param[out] pJournalSampling - Returns an instance with the sampling results.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvJournalVariable_ComputeUniformAverageSamplesPtr) (LibMCEnv_JournalVariable pJournalVariable, LibMCEnv_uint64 nStartTimeInMS, LibMCEnv_uint64 nEndTimeInMS, LibMCEnv_uint32 nNumberOfSamples, LibMCEnv_double dMovingAverageDelta, bool bClampInterval, LibMCEnv_UniformJournalSampling * pJournalSampling);

/*************************************************************************************************************************
 Class definition for StateEnvironment
**************************************************************************************************************************/

/**
* Retrieves the machine state
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pMachineInstance - State machine instance name
* @param[in] nStateNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pStateNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pStateNameBuffer -  buffer of Name of current state, may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvStateEnvironment_GetMachineStatePtr) (LibMCEnv_StateEnvironment pStateEnvironment, const char * pMachineInstance, const LibMCEnv_uint32 nStateNameBufferSize, LibMCEnv_uint32* pStateNameNeededChars, char * pStateNameBuffer);

/**
* prepares a signal object to trigger later.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pMachineInstance - State machine instance name
* @param[in] pSignalName - Name Of signal channel.
* @param[out] pSignalInstance - Signal trigger object.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvStateEnvironment_PrepareSignalPtr) (LibMCEnv_StateEnvironment pStateEnvironment, const char * pMachineInstance, const char * pSignalName, LibMCEnv_SignalTrigger * pSignalInstance);

/**
* Waits for a signal for a certain amount of time.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pSignalName - Name Of Signal
* @param[in] nTimeOut - Timeout in Milliseconds. 0 for Immediate return.
* @param[out] pHandlerInstance - Signal object. If Success is false, the Signal Handler Object will be null.
* @param[out] pSuccess - Signal has been triggered
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvStateEnvironment_WaitForSignalPtr) (LibMCEnv_StateEnvironment pStateEnvironment, const char * pSignalName, LibMCEnv_uint32 nTimeOut, LibMCEnv_SignalHandler * pHandlerInstance, bool * pSuccess);

/**
* Retrieves an unhandled signal By signal type name.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pSignalTypeName - Name Of Signal to be returned
* @param[out] pHandlerInstance - Signal object. If no signal has been found the signal handler object will be null.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvStateEnvironment_GetUnhandledSignalPtr) (LibMCEnv_StateEnvironment pStateEnvironment, const char * pSignalTypeName, LibMCEnv_SignalHandler * pHandlerInstance);

/**
* retrieves an unhandled signal from the current state machine by UUID.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pUUID - Name
* @param[in] bMustExist - The call fails if MustExist is true and not signal with UUID does exist or a signal with UUID has been handled already.
* @param[out] pHandler - Signal handler instance. Returns null, if signal does not exist.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvStateEnvironment_GetUnhandledSignalByUUIDPtr) (LibMCEnv_StateEnvironment pStateEnvironment, const char * pUUID, bool bMustExist, LibMCEnv_SignalHandler * pHandler);

/**
* Returns the driver type and library lookup for a specific registered driver.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pDriverName - Name identifier of the driver.
* @param[in] nDriverTypeBufferSize - size of the buffer (including trailing 0)
* @param[out] pDriverTypeNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pDriverTypeBuffer -  buffer of returns type identifier of the driver., may be NULL
* @param[out] pDriverLookup - GetProcAddress Handle of the driver.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvStateEnvironment_GetDriverLibraryPtr) (LibMCEnv_StateEnvironment pStateEnvironment, const char * pDriverName, const LibMCEnv_uint32 nDriverTypeBufferSize, LibMCEnv_uint32* pDriverTypeNeededChars, char * pDriverTypeBuffer, LibMCEnv_pvoid * pDriverLookup);

/**
* Accesses and locks a driver for the execution of the current state.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pDriverName - Name identifier of the driver.
* @param[out] pDriverHandle - Handle of the driver.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvStateEnvironment_CreateDriverAccessPtr) (LibMCEnv_StateEnvironment pStateEnvironment, const char * pDriverName, LibMCEnv_pvoid * pDriverHandle);

/**
* Returns if a build object exists. Fails if BuildUUID is not a valid UUID string.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pBuildUUID - UUID of the build entity.
* @param[out] pBuildExists - Returns true if build exists
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvStateEnvironment_HasBuildJobPtr) (LibMCEnv_StateEnvironment pStateEnvironment, const char * pBuildUUID, bool * pBuildExists);

/**
* Returns a instance of a build object. Fails if build uuid does not exist.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pBuildUUID - UUID of the build entity.
* @param[out] pBuildInstance - Build instance
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvStateEnvironment_GetBuildJobPtr) (LibMCEnv_StateEnvironment pStateEnvironment, const char * pBuildUUID, LibMCEnv_Build * pBuildInstance);

/**
* unloads all toolpath in memory to clean up
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvStateEnvironment_UnloadAllToolpathesPtr) (LibMCEnv_StateEnvironment pStateEnvironment);

/**
* sets the next state
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pStateName - Name of next state
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvStateEnvironment_SetNextStatePtr) (LibMCEnv_StateEnvironment pStateEnvironment, const char * pStateName);

/**
* logs a string as message
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pLogString - String to Log
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvStateEnvironment_LogMessagePtr) (LibMCEnv_StateEnvironment pStateEnvironment, const char * pLogString);

/**
* logs a string as warning
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pLogString - String to Log
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvStateEnvironment_LogWarningPtr) (LibMCEnv_StateEnvironment pStateEnvironment, const char * pLogString);

/**
* logs a string as info
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pLogString - String to Log
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvStateEnvironment_LogInfoPtr) (LibMCEnv_StateEnvironment pStateEnvironment, const char * pLogString);

/**
* Puts the current instance to sleep for a definite amount of time. MUST be used instead of a blocking sleep call.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] nDelay - Milliseconds to sleeps
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvStateEnvironment_SleepPtr) (LibMCEnv_StateEnvironment pStateEnvironment, LibMCEnv_uint32 nDelay);

/**
* checks environment for termination signal. MUST be called frequently in longer-running operations.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[out] pShallTerminate - Returns if termination shall appear
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvStateEnvironment_CheckForTerminationPtr) (LibMCEnv_StateEnvironment pStateEnvironment, bool * pShallTerminate);

/**
* DEPRECIATED: stores a signal handler in the current state machine
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pName - Name
* @param[in] pHandler - Signal handler to store.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvStateEnvironment_StoreSignalPtr) (LibMCEnv_StateEnvironment pStateEnvironment, const char * pName, LibMCEnv_SignalHandler pHandler);

/**
* DEPRECIATED: retrieves a signal handler from the current state machine. Fails if value has not been stored before or signal has been already handled.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pName - Name
* @param[out] pHandler - Signal handler instance.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvStateEnvironment_RetrieveSignalPtr) (LibMCEnv_StateEnvironment pStateEnvironment, const char * pName, LibMCEnv_SignalHandler * pHandler);

/**
* DEPRECIATED: deletes a value from the data store.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pName - Name
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvStateEnvironment_ClearStoredValuePtr) (LibMCEnv_StateEnvironment pStateEnvironment, const char * pName);

/**
* sets a string parameter
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pParameterGroup - Parameter Group
* @param[in] pParameterName - Parameter Name
* @param[in] pValue - Value to set
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvStateEnvironment_SetStringParameterPtr) (LibMCEnv_StateEnvironment pStateEnvironment, const char * pParameterGroup, const char * pParameterName, const char * pValue);

/**
* sets a uuid parameter
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pParameterGroup - Parameter Group
* @param[in] pParameterName - Parameter Name
* @param[in] pValue - Value to set
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvStateEnvironment_SetUUIDParameterPtr) (LibMCEnv_StateEnvironment pStateEnvironment, const char * pParameterGroup, const char * pParameterName, const char * pValue);

/**
* sets a double parameter
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pParameterGroup - Parameter Group
* @param[in] pParameterName - Parameter Name
* @param[in] dValue - Value to set
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvStateEnvironment_SetDoubleParameterPtr) (LibMCEnv_StateEnvironment pStateEnvironment, const char * pParameterGroup, const char * pParameterName, LibMCEnv_double dValue);

/**
* sets an int parameter
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pParameterGroup - Parameter Group
* @param[in] pParameterName - Parameter Name
* @param[in] nValue - Value to set
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvStateEnvironment_SetIntegerParameterPtr) (LibMCEnv_StateEnvironment pStateEnvironment, const char * pParameterGroup, const char * pParameterName, LibMCEnv_int64 nValue);

/**
* sets a bool parameter
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pParameterGroup - Parameter Group
* @param[in] pParameterName - Parameter Name
* @param[in] bValue - Value to set
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvStateEnvironment_SetBoolParameterPtr) (LibMCEnv_StateEnvironment pStateEnvironment, const char * pParameterGroup, const char * pParameterName, bool bValue);

/**
* returns a string parameter
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pParameterGroup - Parameter Group
* @param[in] pParameterName - Parameter Name
* @param[in] nValueBufferSize - size of the buffer (including trailing 0)
* @param[out] pValueNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pValueBuffer -  buffer of Value to set, may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvStateEnvironment_GetStringParameterPtr) (LibMCEnv_StateEnvironment pStateEnvironment, const char * pParameterGroup, const char * pParameterName, const LibMCEnv_uint32 nValueBufferSize, LibMCEnv_uint32* pValueNeededChars, char * pValueBuffer);

/**
* returns a uuid parameter
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pParameterGroup - Parameter Group
* @param[in] pParameterName - Parameter Name
* @param[in] nValueBufferSize - size of the buffer (including trailing 0)
* @param[out] pValueNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pValueBuffer -  buffer of Value to set, may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvStateEnvironment_GetUUIDParameterPtr) (LibMCEnv_StateEnvironment pStateEnvironment, const char * pParameterGroup, const char * pParameterName, const LibMCEnv_uint32 nValueBufferSize, LibMCEnv_uint32* pValueNeededChars, char * pValueBuffer);

/**
* returns a double parameter
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pParameterGroup - Parameter Group
* @param[in] pParameterName - Parameter Name
* @param[out] pValue - Value to set
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvStateEnvironment_GetDoubleParameterPtr) (LibMCEnv_StateEnvironment pStateEnvironment, const char * pParameterGroup, const char * pParameterName, LibMCEnv_double * pValue);

/**
* returns an int parameter
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pParameterGroup - Parameter Group
* @param[in] pParameterName - Parameter Name
* @param[out] pValue - Value to set
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvStateEnvironment_GetIntegerParameterPtr) (LibMCEnv_StateEnvironment pStateEnvironment, const char * pParameterGroup, const char * pParameterName, LibMCEnv_int64 * pValue);

/**
* returns a bool parameter
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pParameterGroup - Parameter Group
* @param[in] pParameterName - Parameter Name
* @param[out] pValue - Value to set
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvStateEnvironment_GetBoolParameterPtr) (LibMCEnv_StateEnvironment pStateEnvironment, const char * pParameterGroup, const char * pParameterName, bool * pValue);

/**
* loads a plugin resource file into memory.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pResourceName - Name of the resource.
* @param[in] nResourceDataBufferSize - Number of elements in buffer
* @param[out] pResourceDataNeededCount - will be filled with the count of the written elements, or needed buffer size.
* @param[out] pResourceDataBuffer - uint8  buffer of Resource Data Buffer.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvStateEnvironment_LoadResourceDataPtr) (LibMCEnv_StateEnvironment pStateEnvironment, const char * pResourceName, const LibMCEnv_uint64 nResourceDataBufferSize, LibMCEnv_uint64* pResourceDataNeededCount, LibMCEnv_uint8 * pResourceDataBuffer);

/**
* loads a plugin resource file into a string. Fails if content is not a valid UTF8 string.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pResourceName - Name of the resource.
* @param[in] nResourceDataBufferSize - size of the buffer (including trailing 0)
* @param[out] pResourceDataNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pResourceDataBuffer -  buffer of Resource Data String., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvStateEnvironment_LoadResourceStringPtr) (LibMCEnv_StateEnvironment pStateEnvironment, const char * pResourceName, const LibMCEnv_uint32 nResourceDataBufferSize, LibMCEnv_uint32* pResourceDataNeededChars, char * pResourceDataBuffer);

/**
* creates an empty image object.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] nPixelSizeX - Pixel size in X. MUST be positive.
* @param[in] nPixelSizeY - Pixel size in Y. MUST be positive.
* @param[in] dDPIValueX - DPI Value in X. MUST be positive.
* @param[in] dDPIValueY - DPI Value in Y. MUST be positive.
* @param[in] ePixelFormat - Pixel format to use.
* @param[out] pImageDataInstance - Empty image instance.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvStateEnvironment_CreateEmptyImagePtr) (LibMCEnv_StateEnvironment pStateEnvironment, LibMCEnv_uint32 nPixelSizeX, LibMCEnv_uint32 nPixelSizeY, LibMCEnv_double dDPIValueX, LibMCEnv_double dDPIValueY, LibMCEnv::eImagePixelFormat ePixelFormat, LibMCEnv_ImageData * pImageDataInstance);

/**
* creates an image object from a PNG data stream.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] nPNGDataBufferSize - Number of elements in buffer
* @param[in] pPNGDataBuffer - uint8 buffer of DPI Value in X. MUST be positive.
* @param[in] dDPIValueX - DPI Value in X. MUST be positive.
* @param[in] dDPIValueY - DPI Value in Y. MUST be positive.
* @param[in] ePixelFormat - Pixel format to use. Might lose color and alpha information.
* @param[out] pImageDataInstance - Image instance containing the PNG image.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvStateEnvironment_LoadPNGImagePtr) (LibMCEnv_StateEnvironment pStateEnvironment, LibMCEnv_uint64 nPNGDataBufferSize, const LibMCEnv_uint8 * pPNGDataBuffer, LibMCEnv_double dDPIValueX, LibMCEnv_double dDPIValueY, LibMCEnv::eImagePixelFormat ePixelFormat, LibMCEnv_ImageData * pImageDataInstance);

/**
* Creates an empty discrete field.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] nPixelCountX - Pixel count in X. MUST be positive.
* @param[in] nPixelCountY - Pixel count in Y. MUST be positive.
* @param[in] dDPIValueX - DPI Value in X. MUST be positive.
* @param[in] dDPIValueY - DPI Value in Y. MUST be positive.
* @param[in] dOriginX - Origin X of the field in mm.
* @param[in] dOriginY - Origin Y of the field in mm.
* @param[in] dDefaultValue - Default value of the field.
* @param[out] pFieldDataInstance - Empty field instance.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvStateEnvironment_CreateDiscreteField2DPtr) (LibMCEnv_StateEnvironment pStateEnvironment, LibMCEnv_uint32 nPixelCountX, LibMCEnv_uint32 nPixelCountY, LibMCEnv_double dDPIValueX, LibMCEnv_double dDPIValueY, LibMCEnv_double dOriginX, LibMCEnv_double dOriginY, LibMCEnv_double dDefaultValue, LibMCEnv_DiscreteFieldData2D * pFieldDataInstance);

/**
* Returns the global timer in milliseconds.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[out] pTimerValue - Timer value in Milliseconds
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvStateEnvironment_GetGlobalTimerInMillisecondsPtr) (LibMCEnv_StateEnvironment pStateEnvironment, LibMCEnv_uint64 * pTimerValue);

/**
* Returns a test environment instance.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[out] pTestEnvironment - Test Environment Instance
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvStateEnvironment_GetTestEnvironmentPtr) (LibMCEnv_StateEnvironment pStateEnvironment, LibMCEnv_TestEnvironment * pTestEnvironment);

/**
* creates an empty XML Document.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pRootNodeName - Name of the root node. MUST be a valid XML Node Name string.
* @param[in] pDefaultNamespace - Default namespace of the document. MUST be a valid XML namespace string.
* @param[out] pXMLDocument - XML Document Instance.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvStateEnvironment_CreateXMLDocumentPtr) (LibMCEnv_StateEnvironment pStateEnvironment, const char * pRootNodeName, const char * pDefaultNamespace, LibMCEnv_XMLDocument * pXMLDocument);

/**
* parses an XML String and returns an XML Document instance. Throws an error if XML is malformatted.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pXMLString - XML String.
* @param[out] pXMLDocument - XML Document Instance.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvStateEnvironment_ParseXMLStringPtr) (LibMCEnv_StateEnvironment pStateEnvironment, const char * pXMLString, LibMCEnv_XMLDocument * pXMLDocument);

/**
* parses a XML stored in a byte array and returns an XML Document instance. . Throws an error if XML is malformatted.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] nXMLDataBufferSize - Number of elements in buffer
* @param[in] pXMLDataBuffer - uint8 buffer of XML Binary data.
* @param[out] pXMLDocument - XML Document Instance.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvStateEnvironment_ParseXMLDataPtr) (LibMCEnv_StateEnvironment pStateEnvironment, LibMCEnv_uint64 nXMLDataBufferSize, const LibMCEnv_uint8 * pXMLDataBuffer, LibMCEnv_XMLDocument * pXMLDocument);

/**
* Retrieves the history of a given variable in the system journal.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pVariableName - Variable name to analyse. Fails if Variable does not exist.
* @param[in] nTimeDeltaInMilliseconds - How many milliseconds the journal should be retrieved in the past.
* @param[out] pJournalVariable - Journal Instance.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvStateEnvironment_RetrieveJournalVariablePtr) (LibMCEnv_StateEnvironment pStateEnvironment, const char * pVariableName, LibMCEnv_uint64 nTimeDeltaInMilliseconds, LibMCEnv_JournalVariable * pJournalVariable);

/*************************************************************************************************************************
 Class definition for UIEnvironment
**************************************************************************************************************************/

/**
* activates a modal dialog on the client.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pDialogName - Name of the dialog to activate.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvUIEnvironment_ActivateModalDialogPtr) (LibMCEnv_UIEnvironment pUIEnvironment, const char * pDialogName);

/**
* closes the active modal dialog on the client.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvUIEnvironment_CloseModalDialogPtr) (LibMCEnv_UIEnvironment pUIEnvironment);

/**
* changes the current page on the client.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pPageName - Name of the page to activate.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvUIEnvironment_ActivatePagePtr) (LibMCEnv_UIEnvironment pUIEnvironment, const char * pPageName);

/**
* Logs out the client session.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvUIEnvironment_LogOutPtr) (LibMCEnv_UIEnvironment pUIEnvironment);

/**
* Shows a hint message in the user interface.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pHint - Hint to show.
* @param[in] nTimeoutInMS - How many milliseconds the snackbar should be shown.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvUIEnvironment_ShowHintPtr) (LibMCEnv_UIEnvironment pUIEnvironment, const char * pHint, LibMCEnv_uint32 nTimeoutInMS);

/**
* Shows a hint message in the user interface in a certain color.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pHint - Hint to show.
* @param[in] nTimeoutInMS - How many milliseconds the snackbar should be shown.
* @param[in] pColor - Background color of hint.
* @param[in] pFontColor - Font color of hint.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvUIEnvironment_ShowHintColoredPtr) (LibMCEnv_UIEnvironment pUIEnvironment, const char * pHint, LibMCEnv_uint32 nTimeoutInMS, const LibMCEnv::sColorRGB * pColor, const LibMCEnv::sColorRGB * pFontColor);

/**
* Hides hint if any is displayed.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvUIEnvironment_HideHintPtr) (LibMCEnv_UIEnvironment pUIEnvironment);

/**
* Shows a message dialog in the user interface.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pCaption - Caption of the dialog
* @param[in] pTitle - Title of the dialog
* @param[in] eDialogType - Which dialog type shall be shown.
* @param[in] pYesEvent - Event to be called when clicked yes or ok.
* @param[in] pNoEvent - Event to be called when clicked no.
* @param[in] pCancelEvent - Event to be called when dialog is closed or cancel is pressed.
* @param[in] nDialogUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pDialogUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pDialogUUIDBuffer -  buffer of Dialog UUID. Will be set as sender for triggered events., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvUIEnvironment_ShowMessageDlgPtr) (LibMCEnv_UIEnvironment pUIEnvironment, const char * pCaption, const char * pTitle, LibMCEnv::eMessageDialogType eDialogType, const char * pYesEvent, const char * pNoEvent, const char * pCancelEvent, const LibMCEnv_uint32 nDialogUUIDBufferSize, LibMCEnv_uint32* pDialogUUIDNeededChars, char * pDialogUUIDBuffer);

/**
* returns path of the UI control that triggered the event.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] nSenderPathBufferSize - size of the buffer (including trailing 0)
* @param[out] pSenderPathNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pSenderPathBuffer -  buffer of Path of the sender element., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvUIEnvironment_RetrieveEventSenderPtr) (LibMCEnv_UIEnvironment pUIEnvironment, const LibMCEnv_uint32 nSenderPathBufferSize, LibMCEnv_uint32* pSenderPathNeededChars, char * pSenderPathBuffer);

/**
* returns name of the page of the UI control that triggered the event.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] nPageNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pPageNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pPageNameBuffer -  buffer of Page of the sender element., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvUIEnvironment_RetrieveEventSenderPagePtr) (LibMCEnv_UIEnvironment pUIEnvironment, const LibMCEnv_uint32 nPageNameBufferSize, LibMCEnv_uint32* pPageNameNeededChars, char * pPageNameBuffer);

/**
* returns uuid of the UI control that triggered the event.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] nSenderUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pSenderUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pSenderUUIDBuffer -  buffer of Name of the sender uuid., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvUIEnvironment_RetrieveEventSenderUUIDPtr) (LibMCEnv_UIEnvironment pUIEnvironment, const LibMCEnv_uint32 nSenderUUIDBufferSize, LibMCEnv_uint32* pSenderUUIDNeededChars, char * pSenderUUIDBuffer);

/**
* prepares a signal object to trigger later.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pMachineInstance - State machine instance name
* @param[in] pSignalName - Name Of signal channel.
* @param[out] pSignalInstance - Signal trigger object.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvUIEnvironment_PrepareSignalPtr) (LibMCEnv_UIEnvironment pUIEnvironment, const char * pMachineInstance, const char * pSignalName, LibMCEnv_SignalTrigger * pSignalInstance);

/**
* Retrieves the machine state
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pMachineInstance - State machine instance name
* @param[in] nStateNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pStateNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pStateNameBuffer -  buffer of Name of current state, may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvUIEnvironment_GetMachineStatePtr) (LibMCEnv_UIEnvironment pUIEnvironment, const char * pMachineInstance, const LibMCEnv_uint32 nStateNameBufferSize, LibMCEnv_uint32* pStateNameNeededChars, char * pStateNameBuffer);

/**
* logs a string as message
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pLogString - String to Log
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvUIEnvironment_LogMessagePtr) (LibMCEnv_UIEnvironment pUIEnvironment, const char * pLogString);

/**
* logs a string as warning
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pLogString - String to Log
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvUIEnvironment_LogWarningPtr) (LibMCEnv_UIEnvironment pUIEnvironment, const char * pLogString);

/**
* logs a string as info
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pLogString - String to Log
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvUIEnvironment_LogInfoPtr) (LibMCEnv_UIEnvironment pUIEnvironment, const char * pLogString);

/**
* returns a string parameter of a state machine
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pMachineInstance - State machine instance name
* @param[in] pParameterGroup - Parameter Group
* @param[in] pParameterName - Parameter Name
* @param[in] nValueBufferSize - size of the buffer (including trailing 0)
* @param[out] pValueNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pValueBuffer -  buffer of Current Parameter Value, may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvUIEnvironment_GetMachineParameterPtr) (LibMCEnv_UIEnvironment pUIEnvironment, const char * pMachineInstance, const char * pParameterGroup, const char * pParameterName, const LibMCEnv_uint32 nValueBufferSize, LibMCEnv_uint32* pValueNeededChars, char * pValueBuffer);

/**
* returns a uuid parameter of a state machine
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pMachineInstance - State machine instance name
* @param[in] pParameterGroup - Parameter Group
* @param[in] pParameterName - Parameter Name
* @param[in] nValueBufferSize - size of the buffer (including trailing 0)
* @param[out] pValueNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pValueBuffer -  buffer of Current Parameter Value, may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvUIEnvironment_GetMachineParameterAsUUIDPtr) (LibMCEnv_UIEnvironment pUIEnvironment, const char * pMachineInstance, const char * pParameterGroup, const char * pParameterName, const LibMCEnv_uint32 nValueBufferSize, LibMCEnv_uint32* pValueNeededChars, char * pValueBuffer);

/**
* returns a double parameter of a state machine
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pMachineInstance - State machine instance name
* @param[in] pParameterGroup - Parameter Group
* @param[in] pParameterName - Parameter Name
* @param[out] pValue - Current Parameter Value
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvUIEnvironment_GetMachineParameterAsDoublePtr) (LibMCEnv_UIEnvironment pUIEnvironment, const char * pMachineInstance, const char * pParameterGroup, const char * pParameterName, LibMCEnv_double * pValue);

/**
* returns an int parameter of a state machine
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pMachineInstance - State machine instance name
* @param[in] pParameterGroup - Parameter Group
* @param[in] pParameterName - Parameter Name
* @param[out] pValue - Current Parameter Value
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvUIEnvironment_GetMachineParameterAsIntegerPtr) (LibMCEnv_UIEnvironment pUIEnvironment, const char * pMachineInstance, const char * pParameterGroup, const char * pParameterName, LibMCEnv_int64 * pValue);

/**
* returns a bool parameter of a state machine
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pMachineInstance - State machine instance name
* @param[in] pParameterGroup - Parameter Group
* @param[in] pParameterName - Parameter Name
* @param[out] pValue - Current Parameter Value
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvUIEnvironment_GetMachineParameterAsBoolPtr) (LibMCEnv_UIEnvironment pUIEnvironment, const char * pMachineInstance, const char * pParameterGroup, const char * pParameterName, bool * pValue);

/**
* returns a string property of a UI element on the client
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pElementPath - Path of UI Element. Fails if element does not exist.
* @param[in] pPropertyName - Property name. Fails if property does not exist.
* @param[in] nValueBufferSize - size of the buffer (including trailing 0)
* @param[out] pValueNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pValueBuffer -  buffer of Current property Value, may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvUIEnvironment_GetUIPropertyPtr) (LibMCEnv_UIEnvironment pUIEnvironment, const char * pElementPath, const char * pPropertyName, const LibMCEnv_uint32 nValueBufferSize, LibMCEnv_uint32* pValueNeededChars, char * pValueBuffer);

/**
* returns a uuid variable of a UI element on the client
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pElementPath - Path of UI Element. Fails if element does not exist.
* @param[in] pPropertyName - Property name. Fails if property does not exist.
* @param[in] nValueBufferSize - size of the buffer (including trailing 0)
* @param[out] pValueNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pValueBuffer -  buffer of Current property Value, may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvUIEnvironment_GetUIPropertyAsUUIDPtr) (LibMCEnv_UIEnvironment pUIEnvironment, const char * pElementPath, const char * pPropertyName, const LibMCEnv_uint32 nValueBufferSize, LibMCEnv_uint32* pValueNeededChars, char * pValueBuffer);

/**
* returns a double variable of a UI element on the client
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pElementPath - Path of UI Element. Fails if element does not exist.
* @param[in] pPropertyName - Property name. Fails if property does not exist.
* @param[out] pValue - Current property Value
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvUIEnvironment_GetUIPropertyAsDoublePtr) (LibMCEnv_UIEnvironment pUIEnvironment, const char * pElementPath, const char * pPropertyName, LibMCEnv_double * pValue);

/**
* returns a integer variable of a UI element on the client
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pElementPath - Path of UI Element. Fails if element does not exist.
* @param[in] pPropertyName - Property name. Fails if property does not exist.
* @param[out] pValue - Current property Value
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvUIEnvironment_GetUIPropertyAsIntegerPtr) (LibMCEnv_UIEnvironment pUIEnvironment, const char * pElementPath, const char * pPropertyName, LibMCEnv_int64 * pValue);

/**
* returns a integer variable of a UI element on the client
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pElementPath - Path of UI Element. Fails if element does not exist.
* @param[in] pPropertyName - Property name. Fails if property does not exist.
* @param[out] pValue - Current property Value
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvUIEnvironment_GetUIPropertyAsBoolPtr) (LibMCEnv_UIEnvironment pUIEnvironment, const char * pElementPath, const char * pPropertyName, bool * pValue);

/**
* sets a string property of a UI element on the client.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pElementPath - Path of UI Element. Fails if element does not exist.
* @param[in] pPropertyName - Property name. Fails if property does not exist or is readonly.
* @param[in] pValue - New property Value
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvUIEnvironment_SetUIPropertyPtr) (LibMCEnv_UIEnvironment pUIEnvironment, const char * pElementPath, const char * pPropertyName, const char * pValue);

/**
* sets a uuid property of a UI element on the client.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pElementPath - Path of UI Element. Fails if element does not exist.
* @param[in] pPropertyName - Property name. Fails if property does not exist or is readonly.
* @param[in] pValue - New property Value
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvUIEnvironment_SetUIPropertyAsUUIDPtr) (LibMCEnv_UIEnvironment pUIEnvironment, const char * pElementPath, const char * pPropertyName, const char * pValue);

/**
* sets a double property of a UI element on the client.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pElementPath - Path of UI Element. Fails if element does not exist.
* @param[in] pPropertyName - Property name. Fails if property does not exist or is readonly.
* @param[in] dValue - New property Value
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvUIEnvironment_SetUIPropertyAsDoublePtr) (LibMCEnv_UIEnvironment pUIEnvironment, const char * pElementPath, const char * pPropertyName, LibMCEnv_double dValue);

/**
* sets a integer property of a UI element on the client.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pElementPath - Path of UI Element. Fails if element does not exist.
* @param[in] pPropertyName - Property name. Fails if property does not exist or is readonly.
* @param[in] nValue - New property Value
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvUIEnvironment_SetUIPropertyAsIntegerPtr) (LibMCEnv_UIEnvironment pUIEnvironment, const char * pElementPath, const char * pPropertyName, LibMCEnv_int64 nValue);

/**
* sets a bool property of a UI element on the client.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pElementPath - Path of UI Element. Fails if element does not exist.
* @param[in] pPropertyName - Property name. Fails if property does not exist or is readonly.
* @param[in] bValue - New property Value
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvUIEnvironment_SetUIPropertyAsBoolPtr) (LibMCEnv_UIEnvironment pUIEnvironment, const char * pElementPath, const char * pPropertyName, bool bValue);

/**
* creates an empty image object.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] nPixelSizeX - Pixel size in X. MUST be positive.
* @param[in] nPixelSizeY - Pixel size in Y. MUST be positive.
* @param[in] dDPIValueX - DPI Value in X. MUST be positive.
* @param[in] dDPIValueY - DPI Value in Y. MUST be positive.
* @param[in] ePixelFormat - Pixel format to use.
* @param[out] pImageDataInstance - Empty image instance.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvUIEnvironment_CreateEmptyImagePtr) (LibMCEnv_UIEnvironment pUIEnvironment, LibMCEnv_uint32 nPixelSizeX, LibMCEnv_uint32 nPixelSizeY, LibMCEnv_double dDPIValueX, LibMCEnv_double dDPIValueY, LibMCEnv::eImagePixelFormat ePixelFormat, LibMCEnv_ImageData * pImageDataInstance);

/**
* creates an image object from a PNG data stream.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] nPNGDataBufferSize - Number of elements in buffer
* @param[in] pPNGDataBuffer - uint8 buffer of DPI Value in X. MUST be positive.
* @param[in] dDPIValueX - DPI Value in X. MUST be positive.
* @param[in] dDPIValueY - DPI Value in Y. MUST be positive.
* @param[in] ePixelFormat - Pixel format to use. Might lose color and alpha information.
* @param[out] pImageDataInstance - Image instance containing the PNG image.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvUIEnvironment_LoadPNGImagePtr) (LibMCEnv_UIEnvironment pUIEnvironment, LibMCEnv_uint64 nPNGDataBufferSize, const LibMCEnv_uint8 * pPNGDataBuffer, LibMCEnv_double dDPIValueX, LibMCEnv_double dDPIValueY, LibMCEnv::eImagePixelFormat ePixelFormat, LibMCEnv_ImageData * pImageDataInstance);

/**
* Returns the global timer in milliseconds.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[out] pTimerValue - Timer value in Milliseconds
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvUIEnvironment_GetGlobalTimerInMillisecondsPtr) (LibMCEnv_UIEnvironment pUIEnvironment, LibMCEnv_uint64 * pTimerValue);

/**
* Returns a test environment instance.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[out] pTestEnvironment - Test Environment Instance
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvUIEnvironment_GetTestEnvironmentPtr) (LibMCEnv_UIEnvironment pUIEnvironment, LibMCEnv_TestEnvironment * pTestEnvironment);

/**
* creates an empty XML Document.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pRootNodeName - Name of the root node. MUST be a valid XML Node Name string.
* @param[in] pDefaultNamespace - Default namespace of the document. MUST be a valid XML namespace string.
* @param[out] pXMLDocument - XML Document Instance.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvUIEnvironment_CreateXMLDocumentPtr) (LibMCEnv_UIEnvironment pUIEnvironment, const char * pRootNodeName, const char * pDefaultNamespace, LibMCEnv_XMLDocument * pXMLDocument);

/**
* parses an XML String and returns an XML Document instance. Throws an error if XML is malformatted.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pXMLString - XML String.
* @param[out] pXMLDocument - XML Document Instance.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvUIEnvironment_ParseXMLStringPtr) (LibMCEnv_UIEnvironment pUIEnvironment, const char * pXMLString, LibMCEnv_XMLDocument * pXMLDocument);

/**
* parses a XML stored in a byte array and returns an XML Document instance. . Throws an error if XML is malformatted.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] nXMLDataBufferSize - Number of elements in buffer
* @param[in] pXMLDataBuffer - uint8 buffer of XML Binary data.
* @param[out] pXMLDocument - XML Document Instance.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvUIEnvironment_ParseXMLDataPtr) (LibMCEnv_UIEnvironment pUIEnvironment, LibMCEnv_uint64 nXMLDataBufferSize, const LibMCEnv_uint8 * pXMLDataBuffer, LibMCEnv_XMLDocument * pXMLDocument);

/**
* Returns if a build object exists. Fails if BuildUUID is not a valid UUID string.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pBuildUUID - UUID of the build entity.
* @param[out] pBuildExists - Returns true if build exists
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvUIEnvironment_HasBuildJobPtr) (LibMCEnv_UIEnvironment pUIEnvironment, const char * pBuildUUID, bool * pBuildExists);

/**
* Returns a instance of a build object. Fails if build uuid does not exist.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pBuildUUID - UUID of the build entity.
* @param[out] pBuildInstance - Build instance
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvUIEnvironment_GetBuildJobPtr) (LibMCEnv_UIEnvironment pUIEnvironment, const char * pBuildUUID, LibMCEnv_Build * pBuildInstance);

/**
* Creates an empty discrete field.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] nPixelCountX - Pixel count in X. MUST be positive.
* @param[in] nPixelCountY - Pixel count in Y. MUST be positive.
* @param[in] dDPIValueX - DPI Value in X. MUST be positive.
* @param[in] dDPIValueY - DPI Value in Y. MUST be positive.
* @param[in] dOriginX - Origin X of the field in mm.
* @param[in] dOriginY - Origin Y of the field in mm.
* @param[in] dDefaultValue - Default value of the field.
* @param[out] pFieldDataInstance - Empty field instance.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvUIEnvironment_CreateDiscreteField2DPtr) (LibMCEnv_UIEnvironment pUIEnvironment, LibMCEnv_uint32 nPixelCountX, LibMCEnv_uint32 nPixelCountY, LibMCEnv_double dDPIValueX, LibMCEnv_double dDPIValueY, LibMCEnv_double dOriginX, LibMCEnv_double dOriginY, LibMCEnv_double dDefaultValue, LibMCEnv_DiscreteFieldData2D * pFieldDataInstance);

/**
* Retrieves the history of a given variable in the system journal.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pVariableName - Variable name to analyse. Fails if Variable does not exist.
* @param[in] nTimeDeltaInMilliseconds - How many milliseconds the journal should be retrieved in the past.
* @param[out] pJournalVariable - Journal Instance.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvUIEnvironment_RetrieveJournalVariablePtr) (LibMCEnv_UIEnvironment pUIEnvironment, const char * pVariableName, LibMCEnv_uint64 nTimeDeltaInMilliseconds, LibMCEnv_JournalVariable * pJournalVariable);

/*************************************************************************************************************************
 Global functions
**************************************************************************************************************************/

/**
* retrieves the binary version of this library.
*
* @param[out] pMajor - returns the major version of this library
* @param[out] pMinor - returns the minor version of this library
* @param[out] pMicro - returns the micro version of this library
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvGetVersionPtr) (LibMCEnv_uint32 * pMajor, LibMCEnv_uint32 * pMinor, LibMCEnv_uint32 * pMicro);

/**
* Returns the last error recorded on this object
*
* @param[in] pInstance - Instance Handle
* @param[in] nErrorMessageBufferSize - size of the buffer (including trailing 0)
* @param[out] pErrorMessageNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pErrorMessageBuffer -  buffer of Message of the last error, may be NULL
* @param[out] pHasError - Is there a last error to query
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvGetLastErrorPtr) (LibMCEnv_Base pInstance, const LibMCEnv_uint32 nErrorMessageBufferSize, LibMCEnv_uint32* pErrorMessageNeededChars, char * pErrorMessageBuffer, bool * pHasError);

/**
* Releases shared ownership of an Instance
*
* @param[in] pInstance - Instance Handle
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvReleaseInstancePtr) (LibMCEnv_Base pInstance);

/**
* Acquires shared ownership of an Instance
*
* @param[in] pInstance - Instance Handle
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvAcquireInstancePtr) (LibMCEnv_Base pInstance);

/**
* Returns the address of the SymbolLookupMethod
*
* @param[out] pSymbolLookupMethod - Address of the SymbolAddressMethod
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvGetSymbolLookupMethodPtr) (LibMCEnv_pvoid * pSymbolLookupMethod);

/*************************************************************************************************************************
 Function Table Structure
**************************************************************************************************************************/

typedef struct {
	void * m_LibraryHandle;
	PLibMCEnvIterator_MoveNextPtr m_Iterator_MoveNext;
	PLibMCEnvIterator_MovePreviousPtr m_Iterator_MovePrevious;
	PLibMCEnvIterator_GetCurrentPtr m_Iterator_GetCurrent;
	PLibMCEnvIterator_ClonePtr m_Iterator_Clone;
	PLibMCEnvIterator_CountPtr m_Iterator_Count;
	PLibMCEnvTestEnvironment_WriteTestOutputPtr m_TestEnvironment_WriteTestOutput;
	PLibMCEnvPNGImageStoreOptions_ResetToDefaultsPtr m_PNGImageStoreOptions_ResetToDefaults;
	PLibMCEnvPNGImageData_GetSizeInPixelsPtr m_PNGImageData_GetSizeInPixels;
	PLibMCEnvPNGImageData_GetPNGDataStreamPtr m_PNGImageData_GetPNGDataStream;
	PLibMCEnvImageData_GetPixelFormatPtr m_ImageData_GetPixelFormat;
	PLibMCEnvImageData_ChangePixelFormatPtr m_ImageData_ChangePixelFormat;
	PLibMCEnvImageData_GetDPIPtr m_ImageData_GetDPI;
	PLibMCEnvImageData_SetDPIPtr m_ImageData_SetDPI;
	PLibMCEnvImageData_GetSizeInMMPtr m_ImageData_GetSizeInMM;
	PLibMCEnvImageData_GetSizeInPixelsPtr m_ImageData_GetSizeInPixels;
	PLibMCEnvImageData_ResizeImagePtr m_ImageData_ResizeImage;
	PLibMCEnvImageData_LoadPNGPtr m_ImageData_LoadPNG;
	PLibMCEnvImageData_CreatePNGImagePtr m_ImageData_CreatePNGImage;
	PLibMCEnvImageData_EncodePNGPtr m_ImageData_EncodePNG;
	PLibMCEnvImageData_GetEncodedPNGDataPtr m_ImageData_GetEncodedPNGData;
	PLibMCEnvImageData_ClearEncodedPNGDataPtr m_ImageData_ClearEncodedPNGData;
	PLibMCEnvImageData_ClearPtr m_ImageData_Clear;
	PLibMCEnvImageData_GetPixelPtr m_ImageData_GetPixel;
	PLibMCEnvImageData_SetPixelPtr m_ImageData_SetPixel;
	PLibMCEnvImageData_GetPixelRangePtr m_ImageData_GetPixelRange;
	PLibMCEnvImageData_SetPixelRangePtr m_ImageData_SetPixelRange;
	PLibMCEnvDiscreteFieldData2DStoreOptions_ResetToDefaultsPtr m_DiscreteFieldData2DStoreOptions_ResetToDefaults;
	PLibMCEnvDiscreteFieldData2D_GetDPIPtr m_DiscreteFieldData2D_GetDPI;
	PLibMCEnvDiscreteFieldData2D_SetDPIPtr m_DiscreteFieldData2D_SetDPI;
	PLibMCEnvDiscreteFieldData2D_GetOriginInMMPtr m_DiscreteFieldData2D_GetOriginInMM;
	PLibMCEnvDiscreteFieldData2D_SetOriginInMMPtr m_DiscreteFieldData2D_SetOriginInMM;
	PLibMCEnvDiscreteFieldData2D_GetSizeInMMPtr m_DiscreteFieldData2D_GetSizeInMM;
	PLibMCEnvDiscreteFieldData2D_GetSizeInPixelsPtr m_DiscreteFieldData2D_GetSizeInPixels;
	PLibMCEnvDiscreteFieldData2D_ResizeFieldPtr m_DiscreteFieldData2D_ResizeField;
	PLibMCEnvDiscreteFieldData2D_ClearPtr m_DiscreteFieldData2D_Clear;
	PLibMCEnvDiscreteFieldData2D_ClampPtr m_DiscreteFieldData2D_Clamp;
	PLibMCEnvDiscreteFieldData2D_GetPixelPtr m_DiscreteFieldData2D_GetPixel;
	PLibMCEnvDiscreteFieldData2D_SetPixelPtr m_DiscreteFieldData2D_SetPixel;
	PLibMCEnvDiscreteFieldData2D_GetPixelRangePtr m_DiscreteFieldData2D_GetPixelRange;
	PLibMCEnvDiscreteFieldData2D_SetPixelRangePtr m_DiscreteFieldData2D_SetPixelRange;
	PLibMCEnvDiscreteFieldData2D_RenderAveragePointValuesPtr m_DiscreteFieldData2D_RenderAveragePointValues;
	PLibMCEnvDiscreteFieldData2D_ScaleFieldDownPtr m_DiscreteFieldData2D_ScaleFieldDown;
	PLibMCEnvDiscreteFieldData2D_ScaleFieldUpPtr m_DiscreteFieldData2D_ScaleFieldUp;
	PLibMCEnvDiscreteFieldData2D_DiscretizePtr m_DiscreteFieldData2D_Discretize;
	PLibMCEnvDiscreteFieldData2D_DiscretizeWithMappingPtr m_DiscreteFieldData2D_DiscretizeWithMapping;
	PLibMCEnvDiscreteFieldData2D_RenderToImageRawPtr m_DiscreteFieldData2D_RenderToImageRaw;
	PLibMCEnvDiscreteFieldData2D_TransformFieldPtr m_DiscreteFieldData2D_TransformField;
	PLibMCEnvDiscreteFieldData2D_AddFieldPtr m_DiscreteFieldData2D_AddField;
	PLibMCEnvDiscreteFieldData2D_DuplicatePtr m_DiscreteFieldData2D_Duplicate;
	PLibMCEnvToolpathPart_GetNamePtr m_ToolpathPart_GetName;
	PLibMCEnvToolpathPart_GetUUIDPtr m_ToolpathPart_GetUUID;
	PLibMCEnvToolpathPart_GetMeshUUIDPtr m_ToolpathPart_GetMeshUUID;
	PLibMCEnvToolpathPart_GetTransformPtr m_ToolpathPart_GetTransform;
	PLibMCEnvToolpathLayer_GetLayerDataUUIDPtr m_ToolpathLayer_GetLayerDataUUID;
	PLibMCEnvToolpathLayer_GetSegmentCountPtr m_ToolpathLayer_GetSegmentCount;
	PLibMCEnvToolpathLayer_GetSegmentInfoPtr m_ToolpathLayer_GetSegmentInfo;
	PLibMCEnvToolpathLayer_GetSegmentTypePtr m_ToolpathLayer_GetSegmentType;
	PLibMCEnvToolpathLayer_GetSegmentIntegerAttributePtr m_ToolpathLayer_GetSegmentIntegerAttribute;
	PLibMCEnvToolpathLayer_GetSegmentDoubleAttributePtr m_ToolpathLayer_GetSegmentDoubleAttribute;
	PLibMCEnvToolpathLayer_HasCustomSegmentAttributePtr m_ToolpathLayer_HasCustomSegmentAttribute;
	PLibMCEnvToolpathLayer_FindCustomSegmentAttributeIDPtr m_ToolpathLayer_FindCustomSegmentAttributeID;
	PLibMCEnvToolpathLayer_FindCustomSegmentAttributeTypePtr m_ToolpathLayer_FindCustomSegmentAttributeType;
	PLibMCEnvToolpathLayer_FindCustomSegmentAttributeInfoPtr m_ToolpathLayer_FindCustomSegmentAttributeInfo;
	PLibMCEnvToolpathLayer_GetSegmentPointCountPtr m_ToolpathLayer_GetSegmentPointCount;
	PLibMCEnvToolpathLayer_GetSegmentHatchCountPtr m_ToolpathLayer_GetSegmentHatchCount;
	PLibMCEnvToolpathLayer_GetSegmentProfileUUIDPtr m_ToolpathLayer_GetSegmentProfileUUID;
	PLibMCEnvToolpathLayer_SegmentProfileHasValuePtr m_ToolpathLayer_SegmentProfileHasValue;
	PLibMCEnvToolpathLayer_GetSegmentProfileValuePtr m_ToolpathLayer_GetSegmentProfileValue;
	PLibMCEnvToolpathLayer_GetSegmentProfileValueDefPtr m_ToolpathLayer_GetSegmentProfileValueDef;
	PLibMCEnvToolpathLayer_GetSegmentProfileDoubleValuePtr m_ToolpathLayer_GetSegmentProfileDoubleValue;
	PLibMCEnvToolpathLayer_GetSegmentProfileDoubleValueDefPtr m_ToolpathLayer_GetSegmentProfileDoubleValueDef;
	PLibMCEnvToolpathLayer_GetSegmentProfileIntegerValuePtr m_ToolpathLayer_GetSegmentProfileIntegerValue;
	PLibMCEnvToolpathLayer_GetSegmentProfileIntegerValueDefPtr m_ToolpathLayer_GetSegmentProfileIntegerValueDef;
	PLibMCEnvToolpathLayer_GetSegmentProfileBoolValuePtr m_ToolpathLayer_GetSegmentProfileBoolValue;
	PLibMCEnvToolpathLayer_GetSegmentProfileBoolValueDefPtr m_ToolpathLayer_GetSegmentProfileBoolValueDef;
	PLibMCEnvToolpathLayer_GetSegmentProfileTypedValuePtr m_ToolpathLayer_GetSegmentProfileTypedValue;
	PLibMCEnvToolpathLayer_GetSegmentProfileTypedValueDefPtr m_ToolpathLayer_GetSegmentProfileTypedValueDef;
	PLibMCEnvToolpathLayer_GetSegmentPartUUIDPtr m_ToolpathLayer_GetSegmentPartUUID;
	PLibMCEnvToolpathLayer_GetSegmentPointDataPtr m_ToolpathLayer_GetSegmentPointData;
	PLibMCEnvToolpathLayer_GetSegmentHatchDataPtr m_ToolpathLayer_GetSegmentHatchData;
	PLibMCEnvToolpathLayer_GetSegmentPointDataInMMPtr m_ToolpathLayer_GetSegmentPointDataInMM;
	PLibMCEnvToolpathLayer_GetSegmentHatchDataInMMPtr m_ToolpathLayer_GetSegmentHatchDataInMM;
	PLibMCEnvToolpathLayer_GetZValuePtr m_ToolpathLayer_GetZValue;
	PLibMCEnvToolpathLayer_GetZValueInMMPtr m_ToolpathLayer_GetZValueInMM;
	PLibMCEnvToolpathLayer_GetUnitsPtr m_ToolpathLayer_GetUnits;
	PLibMCEnvToolpathLayer_GetMetaDataCountPtr m_ToolpathLayer_GetMetaDataCount;
	PLibMCEnvToolpathLayer_GetMetaDataInfoPtr m_ToolpathLayer_GetMetaDataInfo;
	PLibMCEnvToolpathLayer_GetMetaDataContentPtr m_ToolpathLayer_GetMetaDataContent;
	PLibMCEnvToolpathLayer_HasUniqueMetaDataPtr m_ToolpathLayer_HasUniqueMetaData;
	PLibMCEnvToolpathLayer_FindUniqueMetaDataPtr m_ToolpathLayer_FindUniqueMetaData;
	PLibMCEnvToolpathAccessor_GetStorageUUIDPtr m_ToolpathAccessor_GetStorageUUID;
	PLibMCEnvToolpathAccessor_GetBuildUUIDPtr m_ToolpathAccessor_GetBuildUUID;
	PLibMCEnvToolpathAccessor_GetLayerCountPtr m_ToolpathAccessor_GetLayerCount;
	PLibMCEnvToolpathAccessor_RegisterCustomSegmentAttributePtr m_ToolpathAccessor_RegisterCustomSegmentAttribute;
	PLibMCEnvToolpathAccessor_LoadLayerPtr m_ToolpathAccessor_LoadLayer;
	PLibMCEnvToolpathAccessor_GetUnitsPtr m_ToolpathAccessor_GetUnits;
	PLibMCEnvToolpathAccessor_GetPartCountPtr m_ToolpathAccessor_GetPartCount;
	PLibMCEnvToolpathAccessor_GetPartPtr m_ToolpathAccessor_GetPart;
	PLibMCEnvToolpathAccessor_FindPartByUUIDPtr m_ToolpathAccessor_FindPartByUUID;
	PLibMCEnvToolpathAccessor_GetBuildHeightInUnitsPtr m_ToolpathAccessor_GetBuildHeightInUnits;
	PLibMCEnvToolpathAccessor_GetZValueInUnitsPtr m_ToolpathAccessor_GetZValueInUnits;
	PLibMCEnvToolpathAccessor_GetBuildHeightInMMPtr m_ToolpathAccessor_GetBuildHeightInMM;
	PLibMCEnvToolpathAccessor_GetZValueInMMPtr m_ToolpathAccessor_GetZValueInMM;
	PLibMCEnvToolpathAccessor_GetMetaDataCountPtr m_ToolpathAccessor_GetMetaDataCount;
	PLibMCEnvToolpathAccessor_GetMetaDataInfoPtr m_ToolpathAccessor_GetMetaDataInfo;
	PLibMCEnvToolpathAccessor_GetMetaDataContentPtr m_ToolpathAccessor_GetMetaDataContent;
	PLibMCEnvToolpathAccessor_HasUniqueMetaDataPtr m_ToolpathAccessor_HasUniqueMetaData;
	PLibMCEnvToolpathAccessor_FindUniqueMetaDataPtr m_ToolpathAccessor_FindUniqueMetaData;
	PLibMCEnvBuild_GetNamePtr m_Build_GetName;
	PLibMCEnvBuild_GetBuildUUIDPtr m_Build_GetBuildUUID;
	PLibMCEnvBuild_GetStorageUUIDPtr m_Build_GetStorageUUID;
	PLibMCEnvBuild_GetStorageSHA256Ptr m_Build_GetStorageSHA256;
	PLibMCEnvBuild_GetLayerCountPtr m_Build_GetLayerCount;
	PLibMCEnvBuild_GetBuildHeightInMMPtr m_Build_GetBuildHeightInMM;
	PLibMCEnvBuild_GetZValueInMMPtr m_Build_GetZValueInMM;
	PLibMCEnvBuild_LoadToolpathPtr m_Build_LoadToolpath;
	PLibMCEnvBuild_UnloadToolpathPtr m_Build_UnloadToolpath;
	PLibMCEnvBuild_ToolpathIsLoadedPtr m_Build_ToolpathIsLoaded;
	PLibMCEnvBuild_CreateToolpathAccessorPtr m_Build_CreateToolpathAccessor;
	PLibMCEnvBuild_AddBinaryDataPtr m_Build_AddBinaryData;
	PLibMCEnvBuild_LoadDiscreteField2DByIdentifierPtr m_Build_LoadDiscreteField2DByIdentifier;
	PLibMCEnvBuild_LoadDiscreteField2DByUUIDPtr m_Build_LoadDiscreteField2DByUUID;
	PLibMCEnvBuild_StoreDiscreteField2DPtr m_Build_StoreDiscreteField2D;
	PLibMCEnvBuild_LoadPNGImageByIdentifierPtr m_Build_LoadPNGImageByIdentifier;
	PLibMCEnvBuild_LoadPNGImageByUUIDPtr m_Build_LoadPNGImageByUUID;
	PLibMCEnvBuild_StorePNGImagePtr m_Build_StorePNGImage;
	PLibMCEnvWorkingFileExecution_GetStatusPtr m_WorkingFileExecution_GetStatus;
	PLibMCEnvWorkingFileExecution_ReturnStdOutPtr m_WorkingFileExecution_ReturnStdOut;
	PLibMCEnvWorkingFile_GetAbsoluteFileNamePtr m_WorkingFile_GetAbsoluteFileName;
	PLibMCEnvWorkingFile_GetSizePtr m_WorkingFile_GetSize;
	PLibMCEnvWorkingFile_CalculateSHA2Ptr m_WorkingFile_CalculateSHA2;
	PLibMCEnvWorkingFile_ExecuteFilePtr m_WorkingFile_ExecuteFile;
	PLibMCEnvWorkingFile_IsManagedPtr m_WorkingFile_IsManaged;
	PLibMCEnvWorkingFile_MakeManagedPtr m_WorkingFile_MakeManaged;
	PLibMCEnvWorkingFile_FileExistsPtr m_WorkingFile_FileExists;
	PLibMCEnvWorkingFile_DeleteFromDiskPtr m_WorkingFile_DeleteFromDisk;
	PLibMCEnvWorkingFileIterator_GetCurrentFilePtr m_WorkingFileIterator_GetCurrentFile;
	PLibMCEnvWorkingDirectory_IsActivePtr m_WorkingDirectory_IsActive;
	PLibMCEnvWorkingDirectory_GetAbsoluteFilePathPtr m_WorkingDirectory_GetAbsoluteFilePath;
	PLibMCEnvWorkingDirectory_StoreCustomDataPtr m_WorkingDirectory_StoreCustomData;
	PLibMCEnvWorkingDirectory_StoreCustomStringPtr m_WorkingDirectory_StoreCustomString;
	PLibMCEnvWorkingDirectory_StoreDriverDataPtr m_WorkingDirectory_StoreDriverData;
	PLibMCEnvWorkingDirectory_StoreCustomDataInTempFilePtr m_WorkingDirectory_StoreCustomDataInTempFile;
	PLibMCEnvWorkingDirectory_StoreCustomStringInTempFilePtr m_WorkingDirectory_StoreCustomStringInTempFile;
	PLibMCEnvWorkingDirectory_StoreDriverDataInTempFilePtr m_WorkingDirectory_StoreDriverDataInTempFile;
	PLibMCEnvWorkingDirectory_CleanUpPtr m_WorkingDirectory_CleanUp;
	PLibMCEnvWorkingDirectory_AddManagedFilePtr m_WorkingDirectory_AddManagedFile;
	PLibMCEnvWorkingDirectory_HasUnmanagedFilesPtr m_WorkingDirectory_HasUnmanagedFiles;
	PLibMCEnvWorkingDirectory_RetrieveUnmanagedFilesPtr m_WorkingDirectory_RetrieveUnmanagedFiles;
	PLibMCEnvWorkingDirectory_RetrieveManagedFilesPtr m_WorkingDirectory_RetrieveManagedFiles;
	PLibMCEnvWorkingDirectory_RetrieveAllFilesPtr m_WorkingDirectory_RetrieveAllFiles;
	PLibMCEnvXMLDocumentAttribute_GetNameSpacePtr m_XMLDocumentAttribute_GetNameSpace;
	PLibMCEnvXMLDocumentAttribute_GetNamePtr m_XMLDocumentAttribute_GetName;
	PLibMCEnvXMLDocumentAttribute_GetValuePtr m_XMLDocumentAttribute_GetValue;
	PLibMCEnvXMLDocumentAttribute_IsValidUUIDPtr m_XMLDocumentAttribute_IsValidUUID;
	PLibMCEnvXMLDocumentAttribute_GetUUIDValuePtr m_XMLDocumentAttribute_GetUUIDValue;
	PLibMCEnvXMLDocumentAttribute_IsValidIntegerPtr m_XMLDocumentAttribute_IsValidInteger;
	PLibMCEnvXMLDocumentAttribute_GetIntegerValuePtr m_XMLDocumentAttribute_GetIntegerValue;
	PLibMCEnvXMLDocumentAttribute_IsValidDoublePtr m_XMLDocumentAttribute_IsValidDouble;
	PLibMCEnvXMLDocumentAttribute_GetDoubleValuePtr m_XMLDocumentAttribute_GetDoubleValue;
	PLibMCEnvXMLDocumentAttribute_IsValidBoolPtr m_XMLDocumentAttribute_IsValidBool;
	PLibMCEnvXMLDocumentAttribute_GetBoolValuePtr m_XMLDocumentAttribute_GetBoolValue;
	PLibMCEnvXMLDocumentAttribute_SetValuePtr m_XMLDocumentAttribute_SetValue;
	PLibMCEnvXMLDocumentAttribute_SetUUIDValuePtr m_XMLDocumentAttribute_SetUUIDValue;
	PLibMCEnvXMLDocumentAttribute_SetIntegerValuePtr m_XMLDocumentAttribute_SetIntegerValue;
	PLibMCEnvXMLDocumentAttribute_SetDoubleValuePtr m_XMLDocumentAttribute_SetDoubleValue;
	PLibMCEnvXMLDocumentAttribute_SetBoolValuePtr m_XMLDocumentAttribute_SetBoolValue;
	PLibMCEnvXMLDocumentAttribute_RemovePtr m_XMLDocumentAttribute_Remove;
	PLibMCEnvXMLDocumentNode_GetNamePtr m_XMLDocumentNode_GetName;
	PLibMCEnvXMLDocumentNode_GetNameSpacePtr m_XMLDocumentNode_GetNameSpace;
	PLibMCEnvXMLDocumentNode_GetTextContentPtr m_XMLDocumentNode_GetTextContent;
	PLibMCEnvXMLDocumentNode_SetTextContentPtr m_XMLDocumentNode_SetTextContent;
	PLibMCEnvXMLDocumentNode_GetAttributeCountPtr m_XMLDocumentNode_GetAttributeCount;
	PLibMCEnvXMLDocumentNode_GetAttributePtr m_XMLDocumentNode_GetAttribute;
	PLibMCEnvXMLDocumentNode_HasAttributePtr m_XMLDocumentNode_HasAttribute;
	PLibMCEnvXMLDocumentNode_FindAttributePtr m_XMLDocumentNode_FindAttribute;
	PLibMCEnvXMLDocumentNode_GetAttributeValuePtr m_XMLDocumentNode_GetAttributeValue;
	PLibMCEnvXMLDocumentNode_GetAttributeIntegerValuePtr m_XMLDocumentNode_GetAttributeIntegerValue;
	PLibMCEnvXMLDocumentNode_GetAttributeDoubleValuePtr m_XMLDocumentNode_GetAttributeDoubleValue;
	PLibMCEnvXMLDocumentNode_GetAttributeBoolValuePtr m_XMLDocumentNode_GetAttributeBoolValue;
	PLibMCEnvXMLDocumentNode_GetAttributeUUIDValuePtr m_XMLDocumentNode_GetAttributeUUIDValue;
	PLibMCEnvXMLDocumentNode_GetAttributeValueDefPtr m_XMLDocumentNode_GetAttributeValueDef;
	PLibMCEnvXMLDocumentNode_GetAttributeIntegerValueDefPtr m_XMLDocumentNode_GetAttributeIntegerValueDef;
	PLibMCEnvXMLDocumentNode_GetAttributeDoubleValueDefPtr m_XMLDocumentNode_GetAttributeDoubleValueDef;
	PLibMCEnvXMLDocumentNode_GetAttributeBoolValueDefPtr m_XMLDocumentNode_GetAttributeBoolValueDef;
	PLibMCEnvXMLDocumentNode_GetAttributeUUIDValueDefPtr m_XMLDocumentNode_GetAttributeUUIDValueDef;
	PLibMCEnvXMLDocumentNode_RemoveAttributePtr m_XMLDocumentNode_RemoveAttribute;
	PLibMCEnvXMLDocumentNode_RemoveAttributeByIndexPtr m_XMLDocumentNode_RemoveAttributeByIndex;
	PLibMCEnvXMLDocumentNode_AddAttributePtr m_XMLDocumentNode_AddAttribute;
	PLibMCEnvXMLDocumentNode_AddIntegerAttributePtr m_XMLDocumentNode_AddIntegerAttribute;
	PLibMCEnvXMLDocumentNode_AddDoubleAttributePtr m_XMLDocumentNode_AddDoubleAttribute;
	PLibMCEnvXMLDocumentNode_AddBoolAttributePtr m_XMLDocumentNode_AddBoolAttribute;
	PLibMCEnvXMLDocumentNode_GetChildrenPtr m_XMLDocumentNode_GetChildren;
	PLibMCEnvXMLDocumentNode_CountChildrenByNamePtr m_XMLDocumentNode_CountChildrenByName;
	PLibMCEnvXMLDocumentNode_GetChildrenByNamePtr m_XMLDocumentNode_GetChildrenByName;
	PLibMCEnvXMLDocumentNode_HasChildPtr m_XMLDocumentNode_HasChild;
	PLibMCEnvXMLDocumentNode_HasUniqueChildPtr m_XMLDocumentNode_HasUniqueChild;
	PLibMCEnvXMLDocumentNode_FindChildPtr m_XMLDocumentNode_FindChild;
	PLibMCEnvXMLDocumentNode_AddChildPtr m_XMLDocumentNode_AddChild;
	PLibMCEnvXMLDocumentNode_AddChildTextPtr m_XMLDocumentNode_AddChildText;
	PLibMCEnvXMLDocumentNode_RemoveChildPtr m_XMLDocumentNode_RemoveChild;
	PLibMCEnvXMLDocumentNode_RemoveChildrenWithNamePtr m_XMLDocumentNode_RemoveChildrenWithName;
	PLibMCEnvXMLDocumentNode_RemovePtr m_XMLDocumentNode_Remove;
	PLibMCEnvXMLDocumentNodes_GetNodeCountPtr m_XMLDocumentNodes_GetNodeCount;
	PLibMCEnvXMLDocumentNodes_GetNodePtr m_XMLDocumentNodes_GetNode;
	PLibMCEnvXMLDocumentNodes_CountNodesByNamePtr m_XMLDocumentNodes_CountNodesByName;
	PLibMCEnvXMLDocumentNodes_GetNodesByNamePtr m_XMLDocumentNodes_GetNodesByName;
	PLibMCEnvXMLDocumentNodes_HasNodePtr m_XMLDocumentNodes_HasNode;
	PLibMCEnvXMLDocumentNodes_HasUniqueNodePtr m_XMLDocumentNodes_HasUniqueNode;
	PLibMCEnvXMLDocumentNodes_FindNodePtr m_XMLDocumentNodes_FindNode;
	PLibMCEnvXMLDocument_GetDefaultNamespacePtr m_XMLDocument_GetDefaultNamespace;
	PLibMCEnvXMLDocument_GetNamespaceCountPtr m_XMLDocument_GetNamespaceCount;
	PLibMCEnvXMLDocument_GetNamespacePtr m_XMLDocument_GetNamespace;
	PLibMCEnvXMLDocument_HasNamespacePtr m_XMLDocument_HasNamespace;
	PLibMCEnvXMLDocument_GetNamespacePrefixPtr m_XMLDocument_GetNamespacePrefix;
	PLibMCEnvXMLDocument_RegisterNamespacePtr m_XMLDocument_RegisterNamespace;
	PLibMCEnvXMLDocument_ChangeNamespacePrefixPtr m_XMLDocument_ChangeNamespacePrefix;
	PLibMCEnvXMLDocument_GetRootNodePtr m_XMLDocument_GetRootNode;
	PLibMCEnvXMLDocument_SaveToStringPtr m_XMLDocument_SaveToString;
	PLibMCEnvTCPIPPacket_IsEmptyPtr m_TCPIPPacket_IsEmpty;
	PLibMCEnvTCPIPPacket_GetSizePtr m_TCPIPPacket_GetSize;
	PLibMCEnvTCPIPPacket_GetDataPtr m_TCPIPPacket_GetData;
	PLibMCEnvTCPIPConnection_GetIPAddressPtr m_TCPIPConnection_GetIPAddress;
	PLibMCEnvTCPIPConnection_GetPortPtr m_TCPIPConnection_GetPort;
	PLibMCEnvTCPIPConnection_GetTimeoutPtr m_TCPIPConnection_GetTimeout;
	PLibMCEnvTCPIPConnection_IsConnectedPtr m_TCPIPConnection_IsConnected;
	PLibMCEnvTCPIPConnection_DisconnectPtr m_TCPIPConnection_Disconnect;
	PLibMCEnvTCPIPConnection_ReconnectPtr m_TCPIPConnection_Reconnect;
	PLibMCEnvTCPIPConnection_SendBufferPtr m_TCPIPConnection_SendBuffer;
	PLibMCEnvTCPIPConnection_WaitForDataPtr m_TCPIPConnection_WaitForData;
	PLibMCEnvTCPIPConnection_ReceiveFixedPacketPtr m_TCPIPConnection_ReceiveFixedPacket;
	PLibMCEnvTCPIPConnection_ReceiveDataPtr m_TCPIPConnection_ReceiveData;
	PLibMCEnvModbusTCPDigitalIOStatus_GetCountPtr m_ModbusTCPDigitalIOStatus_GetCount;
	PLibMCEnvModbusTCPDigitalIOStatus_GetBaseAddressPtr m_ModbusTCPDigitalIOStatus_GetBaseAddress;
	PLibMCEnvModbusTCPDigitalIOStatus_GetValuePtr m_ModbusTCPDigitalIOStatus_GetValue;
	PLibMCEnvModbusTCPDigitalIOStatus_GetValuesPtr m_ModbusTCPDigitalIOStatus_GetValues;
	PLibMCEnvModbusTCPRegisterStatus_GetCountPtr m_ModbusTCPRegisterStatus_GetCount;
	PLibMCEnvModbusTCPRegisterStatus_GetBaseAddressPtr m_ModbusTCPRegisterStatus_GetBaseAddress;
	PLibMCEnvModbusTCPRegisterStatus_GetValuePtr m_ModbusTCPRegisterStatus_GetValue;
	PLibMCEnvModbusTCPRegisterStatus_GetValuesPtr m_ModbusTCPRegisterStatus_GetValues;
	PLibMCEnvModbusTCPConnection_GetIPAddressPtr m_ModbusTCPConnection_GetIPAddress;
	PLibMCEnvModbusTCPConnection_GetPortPtr m_ModbusTCPConnection_GetPort;
	PLibMCEnvModbusTCPConnection_GetTimeoutPtr m_ModbusTCPConnection_GetTimeout;
	PLibMCEnvModbusTCPConnection_IsConnectedPtr m_ModbusTCPConnection_IsConnected;
	PLibMCEnvModbusTCPConnection_DisconnectPtr m_ModbusTCPConnection_Disconnect;
	PLibMCEnvModbusTCPConnection_ReconnectPtr m_ModbusTCPConnection_Reconnect;
	PLibMCEnvModbusTCPConnection_DiagnosisCallPtr m_ModbusTCPConnection_DiagnosisCall;
	PLibMCEnvModbusTCPConnection_ReadCoilStatusPtr m_ModbusTCPConnection_ReadCoilStatus;
	PLibMCEnvModbusTCPConnection_ReadInputStatusPtr m_ModbusTCPConnection_ReadInputStatus;
	PLibMCEnvModbusTCPConnection_ReadHoldingRegistersPtr m_ModbusTCPConnection_ReadHoldingRegisters;
	PLibMCEnvModbusTCPConnection_ReadInputRegistersPtr m_ModbusTCPConnection_ReadInputRegisters;
	PLibMCEnvModbusTCPConnection_ForceMultipleCoilsPtr m_ModbusTCPConnection_ForceMultipleCoils;
	PLibMCEnvModbusTCPConnection_PresetMultipleRegistersPtr m_ModbusTCPConnection_PresetMultipleRegisters;
	PLibMCEnvDriverStatusUpdateSession_SetStringParameterPtr m_DriverStatusUpdateSession_SetStringParameter;
	PLibMCEnvDriverStatusUpdateSession_SetUUIDParameterPtr m_DriverStatusUpdateSession_SetUUIDParameter;
	PLibMCEnvDriverStatusUpdateSession_SetDoubleParameterPtr m_DriverStatusUpdateSession_SetDoubleParameter;
	PLibMCEnvDriverStatusUpdateSession_SetIntegerParameterPtr m_DriverStatusUpdateSession_SetIntegerParameter;
	PLibMCEnvDriverStatusUpdateSession_SetBoolParameterPtr m_DriverStatusUpdateSession_SetBoolParameter;
	PLibMCEnvDriverStatusUpdateSession_LogMessagePtr m_DriverStatusUpdateSession_LogMessage;
	PLibMCEnvDriverStatusUpdateSession_LogWarningPtr m_DriverStatusUpdateSession_LogWarning;
	PLibMCEnvDriverStatusUpdateSession_LogInfoPtr m_DriverStatusUpdateSession_LogInfo;
	PLibMCEnvDriverStatusUpdateSession_SleepPtr m_DriverStatusUpdateSession_Sleep;
	PLibMCEnvDriverEnvironment_CreateStatusUpdateSessionPtr m_DriverEnvironment_CreateStatusUpdateSession;
	PLibMCEnvDriverEnvironment_CreateWorkingDirectoryPtr m_DriverEnvironment_CreateWorkingDirectory;
	PLibMCEnvDriverEnvironment_CreateTCPIPConnectionPtr m_DriverEnvironment_CreateTCPIPConnection;
	PLibMCEnvDriverEnvironment_CreateModbusTCPConnectionPtr m_DriverEnvironment_CreateModbusTCPConnection;
	PLibMCEnvDriverEnvironment_CreateXMLDocumentPtr m_DriverEnvironment_CreateXMLDocument;
	PLibMCEnvDriverEnvironment_ParseXMLStringPtr m_DriverEnvironment_ParseXMLString;
	PLibMCEnvDriverEnvironment_ParseXMLDataPtr m_DriverEnvironment_ParseXMLData;
	PLibMCEnvDriverEnvironment_DriverHasResourceDataPtr m_DriverEnvironment_DriverHasResourceData;
	PLibMCEnvDriverEnvironment_MachineHasResourceDataPtr m_DriverEnvironment_MachineHasResourceData;
	PLibMCEnvDriverEnvironment_RetrieveDriverDataPtr m_DriverEnvironment_RetrieveDriverData;
	PLibMCEnvDriverEnvironment_RetrieveDriverResourceDataPtr m_DriverEnvironment_RetrieveDriverResourceData;
	PLibMCEnvDriverEnvironment_RetrieveMachineResourceDataPtr m_DriverEnvironment_RetrieveMachineResourceData;
	PLibMCEnvDriverEnvironment_CreateToolpathAccessorPtr m_DriverEnvironment_CreateToolpathAccessor;
	PLibMCEnvDriverEnvironment_ParameterNameIsValidPtr m_DriverEnvironment_ParameterNameIsValid;
	PLibMCEnvDriverEnvironment_RegisterStringParameterPtr m_DriverEnvironment_RegisterStringParameter;
	PLibMCEnvDriverEnvironment_RegisterUUIDParameterPtr m_DriverEnvironment_RegisterUUIDParameter;
	PLibMCEnvDriverEnvironment_RegisterDoubleParameterPtr m_DriverEnvironment_RegisterDoubleParameter;
	PLibMCEnvDriverEnvironment_RegisterIntegerParameterPtr m_DriverEnvironment_RegisterIntegerParameter;
	PLibMCEnvDriverEnvironment_RegisterBoolParameterPtr m_DriverEnvironment_RegisterBoolParameter;
	PLibMCEnvDriverEnvironment_SetStringParameterPtr m_DriverEnvironment_SetStringParameter;
	PLibMCEnvDriverEnvironment_SetUUIDParameterPtr m_DriverEnvironment_SetUUIDParameter;
	PLibMCEnvDriverEnvironment_SetDoubleParameterPtr m_DriverEnvironment_SetDoubleParameter;
	PLibMCEnvDriverEnvironment_SetIntegerParameterPtr m_DriverEnvironment_SetIntegerParameter;
	PLibMCEnvDriverEnvironment_SetBoolParameterPtr m_DriverEnvironment_SetBoolParameter;
	PLibMCEnvDriverEnvironment_SleepPtr m_DriverEnvironment_Sleep;
	PLibMCEnvDriverEnvironment_GetGlobalTimerInMillisecondsPtr m_DriverEnvironment_GetGlobalTimerInMilliseconds;
	PLibMCEnvDriverEnvironment_LogMessagePtr m_DriverEnvironment_LogMessage;
	PLibMCEnvDriverEnvironment_LogWarningPtr m_DriverEnvironment_LogWarning;
	PLibMCEnvDriverEnvironment_LogInfoPtr m_DriverEnvironment_LogInfo;
	PLibMCEnvDriverEnvironment_CreateEmptyImagePtr m_DriverEnvironment_CreateEmptyImage;
	PLibMCEnvDriverEnvironment_LoadPNGImagePtr m_DriverEnvironment_LoadPNGImage;
	PLibMCEnvDriverEnvironment_CreateDiscreteField2DPtr m_DriverEnvironment_CreateDiscreteField2D;
	PLibMCEnvDriverEnvironment_HasBuildJobPtr m_DriverEnvironment_HasBuildJob;
	PLibMCEnvDriverEnvironment_GetBuildJobPtr m_DriverEnvironment_GetBuildJob;
	PLibMCEnvSignalTrigger_CanTriggerPtr m_SignalTrigger_CanTrigger;
	PLibMCEnvSignalTrigger_TriggerPtr m_SignalTrigger_Trigger;
	PLibMCEnvSignalTrigger_WaitForHandlingPtr m_SignalTrigger_WaitForHandling;
	PLibMCEnvSignalTrigger_GetNamePtr m_SignalTrigger_GetName;
	PLibMCEnvSignalTrigger_GetStateMachinePtr m_SignalTrigger_GetStateMachine;
	PLibMCEnvSignalTrigger_SetStringPtr m_SignalTrigger_SetString;
	PLibMCEnvSignalTrigger_SetUUIDPtr m_SignalTrigger_SetUUID;
	PLibMCEnvSignalTrigger_SetDoublePtr m_SignalTrigger_SetDouble;
	PLibMCEnvSignalTrigger_SetIntegerPtr m_SignalTrigger_SetInteger;
	PLibMCEnvSignalTrigger_SetBoolPtr m_SignalTrigger_SetBool;
	PLibMCEnvSignalTrigger_GetStringResultPtr m_SignalTrigger_GetStringResult;
	PLibMCEnvSignalTrigger_GetUUIDResultPtr m_SignalTrigger_GetUUIDResult;
	PLibMCEnvSignalTrigger_GetDoubleResultPtr m_SignalTrigger_GetDoubleResult;
	PLibMCEnvSignalTrigger_GetIntegerResultPtr m_SignalTrigger_GetIntegerResult;
	PLibMCEnvSignalTrigger_GetBoolResultPtr m_SignalTrigger_GetBoolResult;
	PLibMCEnvSignalHandler_SignalHandledPtr m_SignalHandler_SignalHandled;
	PLibMCEnvSignalHandler_GetNamePtr m_SignalHandler_GetName;
	PLibMCEnvSignalHandler_GetSignalIDPtr m_SignalHandler_GetSignalID;
	PLibMCEnvSignalHandler_GetSignalUUIDPtr m_SignalHandler_GetSignalUUID;
	PLibMCEnvSignalHandler_GetStateMachinePtr m_SignalHandler_GetStateMachine;
	PLibMCEnvSignalHandler_GetStringPtr m_SignalHandler_GetString;
	PLibMCEnvSignalHandler_GetUUIDPtr m_SignalHandler_GetUUID;
	PLibMCEnvSignalHandler_GetDoublePtr m_SignalHandler_GetDouble;
	PLibMCEnvSignalHandler_GetIntegerPtr m_SignalHandler_GetInteger;
	PLibMCEnvSignalHandler_GetBoolPtr m_SignalHandler_GetBool;
	PLibMCEnvSignalHandler_SetStringResultPtr m_SignalHandler_SetStringResult;
	PLibMCEnvSignalHandler_SetUUIDResultPtr m_SignalHandler_SetUUIDResult;
	PLibMCEnvSignalHandler_SetDoubleResultPtr m_SignalHandler_SetDoubleResult;
	PLibMCEnvSignalHandler_SetIntegerResultPtr m_SignalHandler_SetIntegerResult;
	PLibMCEnvSignalHandler_SetBoolResultPtr m_SignalHandler_SetBoolResult;
	PLibMCEnvUniformJournalSampling_GetVariableNamePtr m_UniformJournalSampling_GetVariableName;
	PLibMCEnvUniformJournalSampling_GetNumberOfSamplesPtr m_UniformJournalSampling_GetNumberOfSamples;
	PLibMCEnvUniformJournalSampling_GetStartTimeStampPtr m_UniformJournalSampling_GetStartTimeStamp;
	PLibMCEnvUniformJournalSampling_GetEndTimeStampPtr m_UniformJournalSampling_GetEndTimeStamp;
	PLibMCEnvUniformJournalSampling_GetSamplePtr m_UniformJournalSampling_GetSample;
	PLibMCEnvUniformJournalSampling_GetAllSamplesPtr m_UniformJournalSampling_GetAllSamples;
	PLibMCEnvJournalVariable_GetVariableNamePtr m_JournalVariable_GetVariableName;
	PLibMCEnvJournalVariable_GetStartTimeStampPtr m_JournalVariable_GetStartTimeStamp;
	PLibMCEnvJournalVariable_GetEndTimeStampPtr m_JournalVariable_GetEndTimeStamp;
	PLibMCEnvJournalVariable_ComputeAveragePtr m_JournalVariable_ComputeAverage;
	PLibMCEnvJournalVariable_ComputeUniformAverageSamplesPtr m_JournalVariable_ComputeUniformAverageSamples;
	PLibMCEnvStateEnvironment_GetMachineStatePtr m_StateEnvironment_GetMachineState;
	PLibMCEnvStateEnvironment_PrepareSignalPtr m_StateEnvironment_PrepareSignal;
	PLibMCEnvStateEnvironment_WaitForSignalPtr m_StateEnvironment_WaitForSignal;
	PLibMCEnvStateEnvironment_GetUnhandledSignalPtr m_StateEnvironment_GetUnhandledSignal;
	PLibMCEnvStateEnvironment_GetUnhandledSignalByUUIDPtr m_StateEnvironment_GetUnhandledSignalByUUID;
	PLibMCEnvStateEnvironment_GetDriverLibraryPtr m_StateEnvironment_GetDriverLibrary;
	PLibMCEnvStateEnvironment_CreateDriverAccessPtr m_StateEnvironment_CreateDriverAccess;
	PLibMCEnvStateEnvironment_HasBuildJobPtr m_StateEnvironment_HasBuildJob;
	PLibMCEnvStateEnvironment_GetBuildJobPtr m_StateEnvironment_GetBuildJob;
	PLibMCEnvStateEnvironment_UnloadAllToolpathesPtr m_StateEnvironment_UnloadAllToolpathes;
	PLibMCEnvStateEnvironment_SetNextStatePtr m_StateEnvironment_SetNextState;
	PLibMCEnvStateEnvironment_LogMessagePtr m_StateEnvironment_LogMessage;
	PLibMCEnvStateEnvironment_LogWarningPtr m_StateEnvironment_LogWarning;
	PLibMCEnvStateEnvironment_LogInfoPtr m_StateEnvironment_LogInfo;
	PLibMCEnvStateEnvironment_SleepPtr m_StateEnvironment_Sleep;
	PLibMCEnvStateEnvironment_CheckForTerminationPtr m_StateEnvironment_CheckForTermination;
	PLibMCEnvStateEnvironment_StoreSignalPtr m_StateEnvironment_StoreSignal;
	PLibMCEnvStateEnvironment_RetrieveSignalPtr m_StateEnvironment_RetrieveSignal;
	PLibMCEnvStateEnvironment_ClearStoredValuePtr m_StateEnvironment_ClearStoredValue;
	PLibMCEnvStateEnvironment_SetStringParameterPtr m_StateEnvironment_SetStringParameter;
	PLibMCEnvStateEnvironment_SetUUIDParameterPtr m_StateEnvironment_SetUUIDParameter;
	PLibMCEnvStateEnvironment_SetDoubleParameterPtr m_StateEnvironment_SetDoubleParameter;
	PLibMCEnvStateEnvironment_SetIntegerParameterPtr m_StateEnvironment_SetIntegerParameter;
	PLibMCEnvStateEnvironment_SetBoolParameterPtr m_StateEnvironment_SetBoolParameter;
	PLibMCEnvStateEnvironment_GetStringParameterPtr m_StateEnvironment_GetStringParameter;
	PLibMCEnvStateEnvironment_GetUUIDParameterPtr m_StateEnvironment_GetUUIDParameter;
	PLibMCEnvStateEnvironment_GetDoubleParameterPtr m_StateEnvironment_GetDoubleParameter;
	PLibMCEnvStateEnvironment_GetIntegerParameterPtr m_StateEnvironment_GetIntegerParameter;
	PLibMCEnvStateEnvironment_GetBoolParameterPtr m_StateEnvironment_GetBoolParameter;
	PLibMCEnvStateEnvironment_LoadResourceDataPtr m_StateEnvironment_LoadResourceData;
	PLibMCEnvStateEnvironment_LoadResourceStringPtr m_StateEnvironment_LoadResourceString;
	PLibMCEnvStateEnvironment_CreateEmptyImagePtr m_StateEnvironment_CreateEmptyImage;
	PLibMCEnvStateEnvironment_LoadPNGImagePtr m_StateEnvironment_LoadPNGImage;
	PLibMCEnvStateEnvironment_CreateDiscreteField2DPtr m_StateEnvironment_CreateDiscreteField2D;
	PLibMCEnvStateEnvironment_GetGlobalTimerInMillisecondsPtr m_StateEnvironment_GetGlobalTimerInMilliseconds;
	PLibMCEnvStateEnvironment_GetTestEnvironmentPtr m_StateEnvironment_GetTestEnvironment;
	PLibMCEnvStateEnvironment_CreateXMLDocumentPtr m_StateEnvironment_CreateXMLDocument;
	PLibMCEnvStateEnvironment_ParseXMLStringPtr m_StateEnvironment_ParseXMLString;
	PLibMCEnvStateEnvironment_ParseXMLDataPtr m_StateEnvironment_ParseXMLData;
	PLibMCEnvStateEnvironment_RetrieveJournalVariablePtr m_StateEnvironment_RetrieveJournalVariable;
	PLibMCEnvUIEnvironment_ActivateModalDialogPtr m_UIEnvironment_ActivateModalDialog;
	PLibMCEnvUIEnvironment_CloseModalDialogPtr m_UIEnvironment_CloseModalDialog;
	PLibMCEnvUIEnvironment_ActivatePagePtr m_UIEnvironment_ActivatePage;
	PLibMCEnvUIEnvironment_LogOutPtr m_UIEnvironment_LogOut;
	PLibMCEnvUIEnvironment_ShowHintPtr m_UIEnvironment_ShowHint;
	PLibMCEnvUIEnvironment_ShowHintColoredPtr m_UIEnvironment_ShowHintColored;
	PLibMCEnvUIEnvironment_HideHintPtr m_UIEnvironment_HideHint;
	PLibMCEnvUIEnvironment_ShowMessageDlgPtr m_UIEnvironment_ShowMessageDlg;
	PLibMCEnvUIEnvironment_RetrieveEventSenderPtr m_UIEnvironment_RetrieveEventSender;
	PLibMCEnvUIEnvironment_RetrieveEventSenderPagePtr m_UIEnvironment_RetrieveEventSenderPage;
	PLibMCEnvUIEnvironment_RetrieveEventSenderUUIDPtr m_UIEnvironment_RetrieveEventSenderUUID;
	PLibMCEnvUIEnvironment_PrepareSignalPtr m_UIEnvironment_PrepareSignal;
	PLibMCEnvUIEnvironment_GetMachineStatePtr m_UIEnvironment_GetMachineState;
	PLibMCEnvUIEnvironment_LogMessagePtr m_UIEnvironment_LogMessage;
	PLibMCEnvUIEnvironment_LogWarningPtr m_UIEnvironment_LogWarning;
	PLibMCEnvUIEnvironment_LogInfoPtr m_UIEnvironment_LogInfo;
	PLibMCEnvUIEnvironment_GetMachineParameterPtr m_UIEnvironment_GetMachineParameter;
	PLibMCEnvUIEnvironment_GetMachineParameterAsUUIDPtr m_UIEnvironment_GetMachineParameterAsUUID;
	PLibMCEnvUIEnvironment_GetMachineParameterAsDoublePtr m_UIEnvironment_GetMachineParameterAsDouble;
	PLibMCEnvUIEnvironment_GetMachineParameterAsIntegerPtr m_UIEnvironment_GetMachineParameterAsInteger;
	PLibMCEnvUIEnvironment_GetMachineParameterAsBoolPtr m_UIEnvironment_GetMachineParameterAsBool;
	PLibMCEnvUIEnvironment_GetUIPropertyPtr m_UIEnvironment_GetUIProperty;
	PLibMCEnvUIEnvironment_GetUIPropertyAsUUIDPtr m_UIEnvironment_GetUIPropertyAsUUID;
	PLibMCEnvUIEnvironment_GetUIPropertyAsDoublePtr m_UIEnvironment_GetUIPropertyAsDouble;
	PLibMCEnvUIEnvironment_GetUIPropertyAsIntegerPtr m_UIEnvironment_GetUIPropertyAsInteger;
	PLibMCEnvUIEnvironment_GetUIPropertyAsBoolPtr m_UIEnvironment_GetUIPropertyAsBool;
	PLibMCEnvUIEnvironment_SetUIPropertyPtr m_UIEnvironment_SetUIProperty;
	PLibMCEnvUIEnvironment_SetUIPropertyAsUUIDPtr m_UIEnvironment_SetUIPropertyAsUUID;
	PLibMCEnvUIEnvironment_SetUIPropertyAsDoublePtr m_UIEnvironment_SetUIPropertyAsDouble;
	PLibMCEnvUIEnvironment_SetUIPropertyAsIntegerPtr m_UIEnvironment_SetUIPropertyAsInteger;
	PLibMCEnvUIEnvironment_SetUIPropertyAsBoolPtr m_UIEnvironment_SetUIPropertyAsBool;
	PLibMCEnvUIEnvironment_CreateEmptyImagePtr m_UIEnvironment_CreateEmptyImage;
	PLibMCEnvUIEnvironment_LoadPNGImagePtr m_UIEnvironment_LoadPNGImage;
	PLibMCEnvUIEnvironment_GetGlobalTimerInMillisecondsPtr m_UIEnvironment_GetGlobalTimerInMilliseconds;
	PLibMCEnvUIEnvironment_GetTestEnvironmentPtr m_UIEnvironment_GetTestEnvironment;
	PLibMCEnvUIEnvironment_CreateXMLDocumentPtr m_UIEnvironment_CreateXMLDocument;
	PLibMCEnvUIEnvironment_ParseXMLStringPtr m_UIEnvironment_ParseXMLString;
	PLibMCEnvUIEnvironment_ParseXMLDataPtr m_UIEnvironment_ParseXMLData;
	PLibMCEnvUIEnvironment_HasBuildJobPtr m_UIEnvironment_HasBuildJob;
	PLibMCEnvUIEnvironment_GetBuildJobPtr m_UIEnvironment_GetBuildJob;
	PLibMCEnvUIEnvironment_CreateDiscreteField2DPtr m_UIEnvironment_CreateDiscreteField2D;
	PLibMCEnvUIEnvironment_RetrieveJournalVariablePtr m_UIEnvironment_RetrieveJournalVariable;
	PLibMCEnvGetVersionPtr m_GetVersion;
	PLibMCEnvGetLastErrorPtr m_GetLastError;
	PLibMCEnvReleaseInstancePtr m_ReleaseInstance;
	PLibMCEnvAcquireInstancePtr m_AcquireInstance;
	PLibMCEnvGetSymbolLookupMethodPtr m_GetSymbolLookupMethod;
} sLibMCEnvDynamicWrapperTable;

#endif // __LIBMCENV_DYNAMICHEADER_CPPTYPES

