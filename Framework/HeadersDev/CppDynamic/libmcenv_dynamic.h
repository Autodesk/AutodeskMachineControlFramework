/*++

Copyright (C) 2020 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.7.0-develop.

Abstract: This is an autogenerated C++-Header file in order to allow an easy
 use of MC Environment Interface

Interface version: 1.0.0

*/

#ifndef __LIBMCENV_DYNAMICHEADER_CPPTYPES
#define __LIBMCENV_DYNAMICHEADER_CPPTYPES

#include "libmcenv_types.hpp"



/*************************************************************************************************************************
 Class definition for Base
**************************************************************************************************************************/

/*************************************************************************************************************************
 Class definition for ToolpathLayer
**************************************************************************************************************************/

/**
* Retrieves the layerdata's uuid
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[in] nUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pUUIDBuffer -  buffer of Returns the uuid value., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvToolpathLayer_GetLayerDataUUIDPtr) (LibMCEnv_ToolpathLayer pToolpathLayer, const LibMCEnv_uint32 nUUIDBufferSize, LibMCEnv_uint32* pUUIDNeededChars, char * pUUIDBuffer);

/**
* Retrieves the count of segments.
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[out] pCount - Count
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvToolpathLayer_GetSegmentCountPtr) (LibMCEnv_ToolpathLayer pToolpathLayer, LibMCEnv_uint32 * pCount);

/**
* Retrieves the segment type information .
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[in] nIndex - Index. Must be between 0 and Count - 1.
* @param[out] pType - Segment Type
* @param[out] pPointCount - Point count of segment.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvToolpathLayer_GetSegmentInfoPtr) (LibMCEnv_ToolpathLayer pToolpathLayer, LibMCEnv_uint32 nIndex, LibMCEnv::eToolpathSegmentType * pType, LibMCEnv_uint32 * pPointCount);

/**
* Retrieves the assigned segment profile uuid.
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[in] nIndex - Index. Must be between 0 and Count - 1.
* @param[in] nProfileUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pProfileUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pProfileUUIDBuffer -  buffer of Segment Profile UUID, may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvToolpathLayer_GetSegmentProfileUUIDPtr) (LibMCEnv_ToolpathLayer pToolpathLayer, LibMCEnv_uint32 nIndex, const LibMCEnv_uint32 nProfileUUIDBufferSize, LibMCEnv_uint32* pProfileUUIDNeededChars, char * pProfileUUIDBuffer);

/**
* Retrieves the assigned segment part uuid.
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[in] nIndex - Index. Must be between 0 and Count - 1.
* @param[in] nPartUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pPartUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pPartUUIDBuffer -  buffer of Segment Part UUID, may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvToolpathLayer_GetSegmentPartUUIDPtr) (LibMCEnv_ToolpathLayer pToolpathLayer, LibMCEnv_uint32 nIndex, const LibMCEnv_uint32 nPartUUIDBufferSize, LibMCEnv_uint32* pPartUUIDNeededChars, char * pPartUUIDBuffer);

/**
* Retrieves the assigned segment point list. For type hatch, the points are taken pairwise.
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[in] nIndex - Index. Must be between 0 and Count - 1.
* @param[in] nPointDataBufferSize - Number of elements in buffer
* @param[out] pPointDataNeededCount - will be filled with the count of the written elements, or needed buffer size.
* @param[out] pPointDataBuffer - Position2D buffer of The point data array
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvToolpathLayer_GetSegmentPointDataPtr) (LibMCEnv_ToolpathLayer pToolpathLayer, LibMCEnv_uint32 nIndex, const LibMCEnv_uint64 nPointDataBufferSize, LibMCEnv_uint64* pPointDataNeededCount, LibMCEnv::sPosition2D * pPointDataBuffer);

/*************************************************************************************************************************
 Class definition for ToolpathAccessor
**************************************************************************************************************************/

/**
* Returns Toolpath data UUID.
*
* @param[in] pToolpathAccessor - ToolpathAccessor instance.
* @param[in] nUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pUUIDBuffer -  buffer of Returns toolpath data uuid., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvToolpathAccessor_GetUUIDPtr) (LibMCEnv_ToolpathAccessor pToolpathAccessor, const LibMCEnv_uint32 nUUIDBufferSize, LibMCEnv_uint32* pUUIDNeededChars, char * pUUIDBuffer);

/**
* Returns layer count.
*
* @param[in] pToolpathAccessor - ToolpathAccessor instance.
* @param[out] pLayerCount - Returns layer count.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvToolpathAccessor_GetLayerCountPtr) (LibMCEnv_ToolpathAccessor pToolpathAccessor, LibMCEnv_uint32 * pLayerCount);

/**
* Reads and returns a layer object.
*
* @param[in] pToolpathAccessor - ToolpathAccessor instance.
* @param[in] nLayerIndex - Layer Index.
* @param[out] pLayerData - Toolpath layer object.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvToolpathAccessor_LoadLayerPtr) (LibMCEnv_ToolpathAccessor pToolpathAccessor, LibMCEnv_uint32 nLayerIndex, LibMCEnv_ToolpathLayer * pLayerData);

/*************************************************************************************************************************
 Class definition for SignalTrigger
**************************************************************************************************************************/

/**
* Returns, if signal channel is available.
*
* @param[in] pSignalTrigger - SignalTrigger instance.
* @param[out] pChannelIsAvailable - Returns true, if signal channel is available.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvSignalTrigger_CanTriggerPtr) (LibMCEnv_SignalTrigger pSignalTrigger, bool * pChannelIsAvailable);

/**
* Triggers a signal, if signal channel is available.
*
* @param[in] pSignalTrigger - SignalTrigger instance.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvSignalTrigger_TriggerPtr) (LibMCEnv_SignalTrigger pSignalTrigger);

/**
* Waits until the signal is reset.
*
* @param[in] pSignalTrigger - SignalTrigger instance.
* @param[in] nTimeOut - Timeout in Milliseconds. 0 for Immediate return.
* @param[out] pSuccess - Flag if signal handling has been handled.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvSignalTrigger_WaitForHandlingPtr) (LibMCEnv_SignalTrigger pSignalTrigger, LibMCEnv_uint32 nTimeOut, bool * pSuccess);

/**
* Returns the signal name.
*
* @param[in] pSignalTrigger - SignalTrigger instance.
* @param[in] nSignalNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pSignalNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pSignalNameBuffer -  buffer of Name Of Signal, may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvSignalTrigger_GetNamePtr) (LibMCEnv_SignalTrigger pSignalTrigger, const LibMCEnv_uint32 nSignalNameBufferSize, LibMCEnv_uint32* pSignalNameNeededChars, char * pSignalNameBuffer);

/**
* Returns the signal state machine instance.
*
* @param[in] pSignalTrigger - SignalTrigger instance.
* @param[in] nStateMachineNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pStateMachineNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pStateMachineNameBuffer -  buffer of Name Of State Machine, may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvSignalTrigger_GetStateMachinePtr) (LibMCEnv_SignalTrigger pSignalTrigger, const LibMCEnv_uint32 nStateMachineNameBufferSize, LibMCEnv_uint32* pStateMachineNameNeededChars, char * pStateMachineNameBuffer);

/**
* sets a string value
*
* @param[in] pSignalTrigger - SignalTrigger instance.
* @param[in] pName - Name
* @param[in] pValue - Value
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvSignalTrigger_SetStringPtr) (LibMCEnv_SignalTrigger pSignalTrigger, const char * pName, const char * pValue);

/**
* sets a double
*
* @param[in] pSignalTrigger - SignalTrigger instance.
* @param[in] pName - Name
* @param[in] dValue - Value
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvSignalTrigger_SetDoublePtr) (LibMCEnv_SignalTrigger pSignalTrigger, const char * pName, LibMCEnv_double dValue);

/**
* sets an int.
*
* @param[in] pSignalTrigger - SignalTrigger instance.
* @param[in] pName - Name
* @param[in] nValue - Value
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvSignalTrigger_SetIntegerPtr) (LibMCEnv_SignalTrigger pSignalTrigger, const char * pName, LibMCEnv_int64 nValue);

/**
* sets a bool
*
* @param[in] pSignalTrigger - SignalTrigger instance.
* @param[in] pName - Name
* @param[in] bValue - Value
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvSignalTrigger_SetBoolPtr) (LibMCEnv_SignalTrigger pSignalTrigger, const char * pName, bool bValue);

/**
* returns a string value of the result
*
* @param[in] pSignalTrigger - SignalTrigger instance.
* @param[in] pName - Name
* @param[in] nValueBufferSize - size of the buffer (including trailing 0)
* @param[out] pValueNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pValueBuffer -  buffer of Value, may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvSignalTrigger_GetStringResultPtr) (LibMCEnv_SignalTrigger pSignalTrigger, const char * pName, const LibMCEnv_uint32 nValueBufferSize, LibMCEnv_uint32* pValueNeededChars, char * pValueBuffer);

/**
* returns a string value of the result
*
* @param[in] pSignalTrigger - SignalTrigger instance.
* @param[in] pName - Name
* @param[out] pValue - Value
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvSignalTrigger_GetDoubleResultPtr) (LibMCEnv_SignalTrigger pSignalTrigger, const char * pName, LibMCEnv_double * pValue);

/**
* returns an int value of the result.
*
* @param[in] pSignalTrigger - SignalTrigger instance.
* @param[in] pName - Name
* @param[out] pValue - Value
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvSignalTrigger_GetIntegerResultPtr) (LibMCEnv_SignalTrigger pSignalTrigger, const char * pName, LibMCEnv_int64 * pValue);

/**
* returns a bool value of the result.
*
* @param[in] pSignalTrigger - SignalTrigger instance.
* @param[in] pName - Name
* @param[out] pValue - Value
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvSignalTrigger_GetBoolResultPtr) (LibMCEnv_SignalTrigger pSignalTrigger, const char * pName, bool * pValue);

/*************************************************************************************************************************
 Class definition for SignalHandler
**************************************************************************************************************************/

/**
* Marks signal as handled and resets signal channel.
*
* @param[in] pSignalHandler - SignalHandler instance.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvSignalHandler_SignalHandledPtr) (LibMCEnv_SignalHandler pSignalHandler);

/**
* Returns the signal name.
*
* @param[in] pSignalHandler - SignalHandler instance.
* @param[in] nSignalNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pSignalNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pSignalNameBuffer -  buffer of Name Of Signal, may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvSignalHandler_GetNamePtr) (LibMCEnv_SignalHandler pSignalHandler, const LibMCEnv_uint32 nSignalNameBufferSize, LibMCEnv_uint32* pSignalNameNeededChars, char * pSignalNameBuffer);

/**
* Returns the signal id.
*
* @param[in] pSignalHandler - SignalHandler instance.
* @param[in] nSignalIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pSignalIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pSignalIDBuffer -  buffer of Signal Identifier, may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvSignalHandler_GetSignalIDPtr) (LibMCEnv_SignalHandler pSignalHandler, const LibMCEnv_uint32 nSignalIDBufferSize, LibMCEnv_uint32* pSignalIDNeededChars, char * pSignalIDBuffer);

/**
* Returns the signal state machine instance.
*
* @param[in] pSignalHandler - SignalHandler instance.
* @param[in] nStateMachineNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pStateMachineNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pStateMachineNameBuffer -  buffer of Name Of State Machine, may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvSignalHandler_GetStateMachinePtr) (LibMCEnv_SignalHandler pSignalHandler, const LibMCEnv_uint32 nStateMachineNameBufferSize, LibMCEnv_uint32* pStateMachineNameNeededChars, char * pStateMachineNameBuffer);

/**
* gets a string value
*
* @param[in] pSignalHandler - SignalHandler instance.
* @param[in] pName - Name
* @param[in] nValueBufferSize - size of the buffer (including trailing 0)
* @param[out] pValueNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pValueBuffer -  buffer of Value, may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvSignalHandler_GetStringPtr) (LibMCEnv_SignalHandler pSignalHandler, const char * pName, const LibMCEnv_uint32 nValueBufferSize, LibMCEnv_uint32* pValueNeededChars, char * pValueBuffer);

/**
* gets a double
*
* @param[in] pSignalHandler - SignalHandler instance.
* @param[in] pName - Name
* @param[out] pValue - Value
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvSignalHandler_GetDoublePtr) (LibMCEnv_SignalHandler pSignalHandler, const char * pName, LibMCEnv_double * pValue);

/**
* gets an int.
*
* @param[in] pSignalHandler - SignalHandler instance.
* @param[in] pName - Name
* @param[out] pValue - Value
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvSignalHandler_GetIntegerPtr) (LibMCEnv_SignalHandler pSignalHandler, const char * pName, LibMCEnv_int64 * pValue);

/**
* gets a bool
*
* @param[in] pSignalHandler - SignalHandler instance.
* @param[in] pName - Name
* @param[out] pValue - Value
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvSignalHandler_GetBoolPtr) (LibMCEnv_SignalHandler pSignalHandler, const char * pName, bool * pValue);

/**
* returns a string value of the result
*
* @param[in] pSignalHandler - SignalHandler instance.
* @param[in] pName - Name
* @param[in] pValue - Value
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvSignalHandler_SetStringResultPtr) (LibMCEnv_SignalHandler pSignalHandler, const char * pName, const char * pValue);

/**
* returns a string value of the result
*
* @param[in] pSignalHandler - SignalHandler instance.
* @param[in] pName - Name
* @param[in] dValue - Value
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvSignalHandler_SetDoubleResultPtr) (LibMCEnv_SignalHandler pSignalHandler, const char * pName, LibMCEnv_double dValue);

/**
* sets an int.
*
* @param[in] pSignalHandler - SignalHandler instance.
* @param[in] pName - Name
* @param[in] nValue - Value
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvSignalHandler_SetIntegerResultPtr) (LibMCEnv_SignalHandler pSignalHandler, const char * pName, LibMCEnv_int64 nValue);

/**
* sets a bool
*
* @param[in] pSignalHandler - SignalHandler instance.
* @param[in] pName - Name
* @param[in] bValue - Value
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvSignalHandler_SetBoolResultPtr) (LibMCEnv_SignalHandler pSignalHandler, const char * pName, bool bValue);

/*************************************************************************************************************************
 Class definition for StateEnvironment
**************************************************************************************************************************/

/**
* creates a signal object to trigger.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pMachineInstance - State machine instance name
* @param[in] pSignalName - Name Of signal channel.
* @param[out] pSignalInstance - Signal trigger object.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvStateEnvironment_CreateSignalPtr) (LibMCEnv_StateEnvironment pStateEnvironment, const char * pMachineInstance, const char * pSignalName, LibMCEnv_SignalTrigger * pSignalInstance);

/**
* waits for a signal.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pSignalName - Name Of Signal
* @param[in] nTimeOut - Timeout in Milliseconds. 0 for Immediate return.
* @param[out] pHandlerInstance - Signal object. If Success is false, the Signal Handler Object will be null.
* @param[out] pSuccess - Signal has been triggered
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvStateEnvironment_WaitForSignalPtr) (LibMCEnv_StateEnvironment pStateEnvironment, const char * pSignalName, LibMCEnv_uint32 nTimeOut, LibMCEnv_SignalHandler * pHandlerInstance, bool * pSuccess);

/**
* Returns the driver type and library lookup for a specific registered driver.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pDriverName - Name identifier of the driver.
* @param[in] nDriverTypeBufferSize - size of the buffer (including trailing 0)
* @param[out] pDriverTypeNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pDriverTypeBuffer -  buffer of returns type identifier of the driver., may be NULL
* @param[out] pDriverLookup - GetProcAddress Handle of the driver.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvStateEnvironment_GetDriverLibraryPtr) (LibMCEnv_StateEnvironment pStateEnvironment, const char * pDriverName, const LibMCEnv_uint32 nDriverTypeBufferSize, LibMCEnv_uint32* pDriverTypeNeededChars, char * pDriverTypeBuffer, LibMCEnv_pvoid * pDriverLookup);

/**
* Accesses and locks a driver for the execution of the current state.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pDriverName - Name identifier of the driver.
* @param[out] pDriverHandle - Handle of the driver.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvStateEnvironment_CreateDriverAccessPtr) (LibMCEnv_StateEnvironment pStateEnvironment, const char * pDriverName, LibMCEnv_pvoid * pDriverHandle);

/**
* Loads a toolpath from disk into memory.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pToolpathUUID - UUID of the toolpath entity.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvStateEnvironment_LoadToolpathPtr) (LibMCEnv_StateEnvironment pStateEnvironment, const char * pToolpathUUID);

/**
* unloads the a toolpath. It MUST have been loaded to memory before with LoadToolpath.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pToolpathUUID - UUID of the toolpath entity.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvStateEnvironment_UnloadToolpathPtr) (LibMCEnv_StateEnvironment pStateEnvironment, const char * pToolpathUUID);

/**
* unloads all toolpath in memory to clean up
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvStateEnvironment_UnloadAllToolpathesPtr) (LibMCEnv_StateEnvironment pStateEnvironment);

/**
* creates an accessor object for a toolpath, if loaded to memory before.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pToolpathUUID - UUID of the toolpath entity.
* @param[out] pToolpathInstance - UUID of the toolpath entity.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvStateEnvironment_CreateToolpathAccessorPtr) (LibMCEnv_StateEnvironment pStateEnvironment, const char * pToolpathUUID, LibMCEnv_ToolpathAccessor * pToolpathInstance);

/**
* checks, if a toolpath object is loaded to memory.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pToolpathUUID - UUID of the toolpath entity.
* @param[out] pIsLoaded - returns if toolpath is loaded.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvStateEnvironment_ToolpathIsLoadedPtr) (LibMCEnv_StateEnvironment pStateEnvironment, const char * pToolpathUUID, bool * pIsLoaded);

/**
* sets the next state
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pStateName - Name of next state
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvStateEnvironment_SetNextStatePtr) (LibMCEnv_StateEnvironment pStateEnvironment, const char * pStateName);

/**
* logs a string as message
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pLogString - String to Log
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvStateEnvironment_LogMessagePtr) (LibMCEnv_StateEnvironment pStateEnvironment, const char * pLogString);

/**
* logs a string as warning
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pLogString - String to Log
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvStateEnvironment_LogWarningPtr) (LibMCEnv_StateEnvironment pStateEnvironment, const char * pLogString);

/**
* logs a string as info
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pLogString - String to Log
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvStateEnvironment_LogInfoPtr) (LibMCEnv_StateEnvironment pStateEnvironment, const char * pLogString);

/**
* Puts the current instance to sleep for a definite amount of time. MUST be used instead of a blocking sleep call.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] nDelay - Milliseconds to sleeps
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvStateEnvironment_SleepPtr) (LibMCEnv_StateEnvironment pStateEnvironment, LibMCEnv_uint32 nDelay);

/**
* checks environment for termination signal. MUST be called frequently in longer-running operations.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[out] pShallTerminate - Returns if termination shall appear
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvStateEnvironment_CheckForTerminationPtr) (LibMCEnv_StateEnvironment pStateEnvironment, bool * pShallTerminate);

/**
* stores a string in the current state machine
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pName - Name
* @param[in] pValue - Value
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvStateEnvironment_StoreStringPtr) (LibMCEnv_StateEnvironment pStateEnvironment, const char * pName, const char * pValue);

/**
* stores a string in the current state machine
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pName - Name
* @param[in] nValue - Value
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvStateEnvironment_StoreIntegerPtr) (LibMCEnv_StateEnvironment pStateEnvironment, const char * pName, LibMCEnv_int64 nValue);

/**
* stores a string in the current state machine
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pName - Name
* @param[in] dValue - Value
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvStateEnvironment_StoreDoublePtr) (LibMCEnv_StateEnvironment pStateEnvironment, const char * pName, LibMCEnv_double dValue);

/**
* stores a string in the current state machine
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pName - Name
* @param[in] bValue - Value
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvStateEnvironment_StoreBoolPtr) (LibMCEnv_StateEnvironment pStateEnvironment, const char * pName, bool bValue);

/**
* stores a signal handler in the current state machine
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pName - Name
* @param[in] pHandler - Signal handler to store.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvStateEnvironment_StoreSignalPtr) (LibMCEnv_StateEnvironment pStateEnvironment, const char * pName, LibMCEnv_SignalHandler pHandler);

/**
* retrieves a string from the current state machine. Fails if value has not been stored before.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pName - Name
* @param[in] nValueBufferSize - size of the buffer (including trailing 0)
* @param[out] pValueNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pValueBuffer -  buffer of Value, may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvStateEnvironment_RetrieveStringPtr) (LibMCEnv_StateEnvironment pStateEnvironment, const char * pName, const LibMCEnv_uint32 nValueBufferSize, LibMCEnv_uint32* pValueNeededChars, char * pValueBuffer);

/**
* retrieves a string from the current state machine. Fails if value has not been stored before.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pName - Name
* @param[out] pValue - Value
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvStateEnvironment_RetrieveIntegerPtr) (LibMCEnv_StateEnvironment pStateEnvironment, const char * pName, LibMCEnv_int64 * pValue);

/**
* retrieves a string from the current state machine. Fails if value has not been stored before.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pName - Name
* @param[out] pValue - Value
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvStateEnvironment_RetrieveDoublePtr) (LibMCEnv_StateEnvironment pStateEnvironment, const char * pName, LibMCEnv_double * pValue);

/**
* retrieves a string from the current state machine. Fails if value has not been stored before.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pName - Name
* @param[out] pValue - Value
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvStateEnvironment_RetrieveBoolPtr) (LibMCEnv_StateEnvironment pStateEnvironment, const char * pName, bool * pValue);

/**
* retrieves a signal handler from the current state machine. Fails if value has not been stored before or signal has been already handled.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pName - Name
* @param[out] pHandler - Signal handler instance.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvStateEnvironment_RetrieveSignalPtr) (LibMCEnv_StateEnvironment pStateEnvironment, const char * pName, LibMCEnv_SignalHandler * pHandler);

/**
* deletes a value from the data store.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pName - Name
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvStateEnvironment_ClearStoredValuePtr) (LibMCEnv_StateEnvironment pStateEnvironment, const char * pName);

/**
* sets a string parameter
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pParameterGroup - Parameter Group
* @param[in] pParameterName - Parameter Name
* @param[in] pValue - Value to set
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvStateEnvironment_SetStringParameterPtr) (LibMCEnv_StateEnvironment pStateEnvironment, const char * pParameterGroup, const char * pParameterName, const char * pValue);

/**
* sets a double parameter
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pParameterGroup - Parameter Group
* @param[in] pParameterName - Parameter Name
* @param[in] dValue - Value to set
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvStateEnvironment_SetDoubleParameterPtr) (LibMCEnv_StateEnvironment pStateEnvironment, const char * pParameterGroup, const char * pParameterName, LibMCEnv_double dValue);

/**
* sets an int parameter
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pParameterGroup - Parameter Group
* @param[in] pParameterName - Parameter Name
* @param[in] nValue - Value to set
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvStateEnvironment_SetIntegerParameterPtr) (LibMCEnv_StateEnvironment pStateEnvironment, const char * pParameterGroup, const char * pParameterName, LibMCEnv_int64 nValue);

/**
* sets a bool parameter
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pParameterGroup - Parameter Group
* @param[in] pParameterName - Parameter Name
* @param[in] bValue - Value to set
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvStateEnvironment_SetBoolParameterPtr) (LibMCEnv_StateEnvironment pStateEnvironment, const char * pParameterGroup, const char * pParameterName, bool bValue);

/**
* returns a string parameter
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pParameterGroup - Parameter Group
* @param[in] pParameterName - Parameter Name
* @param[in] nValueBufferSize - size of the buffer (including trailing 0)
* @param[out] pValueNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pValueBuffer -  buffer of Value to set, may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvStateEnvironment_GetStringParameterPtr) (LibMCEnv_StateEnvironment pStateEnvironment, const char * pParameterGroup, const char * pParameterName, const LibMCEnv_uint32 nValueBufferSize, LibMCEnv_uint32* pValueNeededChars, char * pValueBuffer);

/**
* returns a double parameter
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pParameterGroup - Parameter Group
* @param[in] pParameterName - Parameter Name
* @param[out] pValue - Value to set
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvStateEnvironment_GetDoubleParameterPtr) (LibMCEnv_StateEnvironment pStateEnvironment, const char * pParameterGroup, const char * pParameterName, LibMCEnv_double * pValue);

/**
* returns an int parameter
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pParameterGroup - Parameter Group
* @param[in] pParameterName - Parameter Name
* @param[out] pValue - Value to set
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvStateEnvironment_GetIntegerParameterPtr) (LibMCEnv_StateEnvironment pStateEnvironment, const char * pParameterGroup, const char * pParameterName, LibMCEnv_int64 * pValue);

/**
* returns a bool parameter
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pParameterGroup - Parameter Group
* @param[in] pParameterName - Parameter Name
* @param[out] pValue - Value to set
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvStateEnvironment_GetBoolParameterPtr) (LibMCEnv_StateEnvironment pStateEnvironment, const char * pParameterGroup, const char * pParameterName, bool * pValue);

/*************************************************************************************************************************
 Global functions
**************************************************************************************************************************/

/**
* retrieves the binary version of this library.
*
* @param[out] pMajor - returns the major version of this library
* @param[out] pMinor - returns the minor version of this library
* @param[out] pMicro - returns the micro version of this library
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvGetVersionPtr) (LibMCEnv_uint32 * pMajor, LibMCEnv_uint32 * pMinor, LibMCEnv_uint32 * pMicro);

/**
* Returns the last error recorded on this object
*
* @param[in] pInstance - Instance Handle
* @param[in] nErrorMessageBufferSize - size of the buffer (including trailing 0)
* @param[out] pErrorMessageNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pErrorMessageBuffer -  buffer of Message of the last error, may be NULL
* @param[out] pHasError - Is there a last error to query
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvGetLastErrorPtr) (LibMCEnv_Base pInstance, const LibMCEnv_uint32 nErrorMessageBufferSize, LibMCEnv_uint32* pErrorMessageNeededChars, char * pErrorMessageBuffer, bool * pHasError);

/**
* Releases shared ownership of an Instance
*
* @param[in] pInstance - Instance Handle
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvReleaseInstancePtr) (LibMCEnv_Base pInstance);

/**
* Acquires shared ownership of an Instance
*
* @param[in] pInstance - Instance Handle
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvAcquireInstancePtr) (LibMCEnv_Base pInstance);

/**
* Returns the address of the SymbolLookupMethod
*
* @param[out] pSymbolLookupMethod - Address of the SymbolAddressMethod
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvGetSymbolLookupMethodPtr) (LibMCEnv_pvoid * pSymbolLookupMethod);

/*************************************************************************************************************************
 Function Table Structure
**************************************************************************************************************************/

typedef struct {
	void * m_LibraryHandle;
	PLibMCEnvToolpathLayer_GetLayerDataUUIDPtr m_ToolpathLayer_GetLayerDataUUID;
	PLibMCEnvToolpathLayer_GetSegmentCountPtr m_ToolpathLayer_GetSegmentCount;
	PLibMCEnvToolpathLayer_GetSegmentInfoPtr m_ToolpathLayer_GetSegmentInfo;
	PLibMCEnvToolpathLayer_GetSegmentProfileUUIDPtr m_ToolpathLayer_GetSegmentProfileUUID;
	PLibMCEnvToolpathLayer_GetSegmentPartUUIDPtr m_ToolpathLayer_GetSegmentPartUUID;
	PLibMCEnvToolpathLayer_GetSegmentPointDataPtr m_ToolpathLayer_GetSegmentPointData;
	PLibMCEnvToolpathAccessor_GetUUIDPtr m_ToolpathAccessor_GetUUID;
	PLibMCEnvToolpathAccessor_GetLayerCountPtr m_ToolpathAccessor_GetLayerCount;
	PLibMCEnvToolpathAccessor_LoadLayerPtr m_ToolpathAccessor_LoadLayer;
	PLibMCEnvSignalTrigger_CanTriggerPtr m_SignalTrigger_CanTrigger;
	PLibMCEnvSignalTrigger_TriggerPtr m_SignalTrigger_Trigger;
	PLibMCEnvSignalTrigger_WaitForHandlingPtr m_SignalTrigger_WaitForHandling;
	PLibMCEnvSignalTrigger_GetNamePtr m_SignalTrigger_GetName;
	PLibMCEnvSignalTrigger_GetStateMachinePtr m_SignalTrigger_GetStateMachine;
	PLibMCEnvSignalTrigger_SetStringPtr m_SignalTrigger_SetString;
	PLibMCEnvSignalTrigger_SetDoublePtr m_SignalTrigger_SetDouble;
	PLibMCEnvSignalTrigger_SetIntegerPtr m_SignalTrigger_SetInteger;
	PLibMCEnvSignalTrigger_SetBoolPtr m_SignalTrigger_SetBool;
	PLibMCEnvSignalTrigger_GetStringResultPtr m_SignalTrigger_GetStringResult;
	PLibMCEnvSignalTrigger_GetDoubleResultPtr m_SignalTrigger_GetDoubleResult;
	PLibMCEnvSignalTrigger_GetIntegerResultPtr m_SignalTrigger_GetIntegerResult;
	PLibMCEnvSignalTrigger_GetBoolResultPtr m_SignalTrigger_GetBoolResult;
	PLibMCEnvSignalHandler_SignalHandledPtr m_SignalHandler_SignalHandled;
	PLibMCEnvSignalHandler_GetNamePtr m_SignalHandler_GetName;
	PLibMCEnvSignalHandler_GetSignalIDPtr m_SignalHandler_GetSignalID;
	PLibMCEnvSignalHandler_GetStateMachinePtr m_SignalHandler_GetStateMachine;
	PLibMCEnvSignalHandler_GetStringPtr m_SignalHandler_GetString;
	PLibMCEnvSignalHandler_GetDoublePtr m_SignalHandler_GetDouble;
	PLibMCEnvSignalHandler_GetIntegerPtr m_SignalHandler_GetInteger;
	PLibMCEnvSignalHandler_GetBoolPtr m_SignalHandler_GetBool;
	PLibMCEnvSignalHandler_SetStringResultPtr m_SignalHandler_SetStringResult;
	PLibMCEnvSignalHandler_SetDoubleResultPtr m_SignalHandler_SetDoubleResult;
	PLibMCEnvSignalHandler_SetIntegerResultPtr m_SignalHandler_SetIntegerResult;
	PLibMCEnvSignalHandler_SetBoolResultPtr m_SignalHandler_SetBoolResult;
	PLibMCEnvStateEnvironment_CreateSignalPtr m_StateEnvironment_CreateSignal;
	PLibMCEnvStateEnvironment_WaitForSignalPtr m_StateEnvironment_WaitForSignal;
	PLibMCEnvStateEnvironment_GetDriverLibraryPtr m_StateEnvironment_GetDriverLibrary;
	PLibMCEnvStateEnvironment_CreateDriverAccessPtr m_StateEnvironment_CreateDriverAccess;
	PLibMCEnvStateEnvironment_LoadToolpathPtr m_StateEnvironment_LoadToolpath;
	PLibMCEnvStateEnvironment_UnloadToolpathPtr m_StateEnvironment_UnloadToolpath;
	PLibMCEnvStateEnvironment_UnloadAllToolpathesPtr m_StateEnvironment_UnloadAllToolpathes;
	PLibMCEnvStateEnvironment_CreateToolpathAccessorPtr m_StateEnvironment_CreateToolpathAccessor;
	PLibMCEnvStateEnvironment_ToolpathIsLoadedPtr m_StateEnvironment_ToolpathIsLoaded;
	PLibMCEnvStateEnvironment_SetNextStatePtr m_StateEnvironment_SetNextState;
	PLibMCEnvStateEnvironment_LogMessagePtr m_StateEnvironment_LogMessage;
	PLibMCEnvStateEnvironment_LogWarningPtr m_StateEnvironment_LogWarning;
	PLibMCEnvStateEnvironment_LogInfoPtr m_StateEnvironment_LogInfo;
	PLibMCEnvStateEnvironment_SleepPtr m_StateEnvironment_Sleep;
	PLibMCEnvStateEnvironment_CheckForTerminationPtr m_StateEnvironment_CheckForTermination;
	PLibMCEnvStateEnvironment_StoreStringPtr m_StateEnvironment_StoreString;
	PLibMCEnvStateEnvironment_StoreIntegerPtr m_StateEnvironment_StoreInteger;
	PLibMCEnvStateEnvironment_StoreDoublePtr m_StateEnvironment_StoreDouble;
	PLibMCEnvStateEnvironment_StoreBoolPtr m_StateEnvironment_StoreBool;
	PLibMCEnvStateEnvironment_StoreSignalPtr m_StateEnvironment_StoreSignal;
	PLibMCEnvStateEnvironment_RetrieveStringPtr m_StateEnvironment_RetrieveString;
	PLibMCEnvStateEnvironment_RetrieveIntegerPtr m_StateEnvironment_RetrieveInteger;
	PLibMCEnvStateEnvironment_RetrieveDoublePtr m_StateEnvironment_RetrieveDouble;
	PLibMCEnvStateEnvironment_RetrieveBoolPtr m_StateEnvironment_RetrieveBool;
	PLibMCEnvStateEnvironment_RetrieveSignalPtr m_StateEnvironment_RetrieveSignal;
	PLibMCEnvStateEnvironment_ClearStoredValuePtr m_StateEnvironment_ClearStoredValue;
	PLibMCEnvStateEnvironment_SetStringParameterPtr m_StateEnvironment_SetStringParameter;
	PLibMCEnvStateEnvironment_SetDoubleParameterPtr m_StateEnvironment_SetDoubleParameter;
	PLibMCEnvStateEnvironment_SetIntegerParameterPtr m_StateEnvironment_SetIntegerParameter;
	PLibMCEnvStateEnvironment_SetBoolParameterPtr m_StateEnvironment_SetBoolParameter;
	PLibMCEnvStateEnvironment_GetStringParameterPtr m_StateEnvironment_GetStringParameter;
	PLibMCEnvStateEnvironment_GetDoubleParameterPtr m_StateEnvironment_GetDoubleParameter;
	PLibMCEnvStateEnvironment_GetIntegerParameterPtr m_StateEnvironment_GetIntegerParameter;
	PLibMCEnvStateEnvironment_GetBoolParameterPtr m_StateEnvironment_GetBoolParameter;
	PLibMCEnvGetVersionPtr m_GetVersion;
	PLibMCEnvGetLastErrorPtr m_GetLastError;
	PLibMCEnvReleaseInstancePtr m_ReleaseInstance;
	PLibMCEnvAcquireInstancePtr m_AcquireInstance;
	PLibMCEnvGetSymbolLookupMethodPtr m_GetSymbolLookupMethod;
} sLibMCEnvDynamicWrapperTable;

#endif // __LIBMCENV_DYNAMICHEADER_CPPTYPES

