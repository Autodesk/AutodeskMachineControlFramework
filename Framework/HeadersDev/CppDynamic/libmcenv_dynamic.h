/*++

Copyright (C) 2020 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.7.0-develop.

Abstract: This is an autogenerated C++-Header file in order to allow an easy
 use of MC Environment Interface

Interface version: 1.0.0

*/

#ifndef __LIBMCENV_DYNAMICHEADER_CPPTYPES
#define __LIBMCENV_DYNAMICHEADER_CPPTYPES

#include "libmcenv_types.hpp"



/*************************************************************************************************************************
 Class definition for Base
**************************************************************************************************************************/

/*************************************************************************************************************************
 Class definition for Iterator
**************************************************************************************************************************/

/**
* Iterates to the next object in the list.
*
* @param[in] pIterator - Iterator instance.
* @param[out] pHasNext - Iterates to the next object in the list.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvIterator_MoveNextPtr) (LibMCEnv_Iterator pIterator, bool * pHasNext);

/**
* Iterates to the previous object in the list.
*
* @param[in] pIterator - Iterator instance.
* @param[out] pHasPrevious - Iterates to the previous object in the list.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvIterator_MovePreviousPtr) (LibMCEnv_Iterator pIterator, bool * pHasPrevious);

/**
* Returns the object the iterator points at.
*
* @param[in] pIterator - Iterator instance.
* @param[out] pInstance - returns the object instance.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvIterator_GetCurrentPtr) (LibMCEnv_Iterator pIterator, LibMCEnv_Base * pInstance);

/**
* Creates a new object iterator with the same object list.
*
* @param[in] pIterator - Iterator instance.
* @param[out] pOutIterator - returns the cloned Iterator instance
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvIterator_ClonePtr) (LibMCEnv_Iterator pIterator, LibMCEnv_Iterator * pOutIterator);

/**
* Returns the number of resoucres the iterator captures.
*
* @param[in] pIterator - Iterator instance.
* @param[out] pCount - returns the number of objects the iterator captures.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvIterator_CountPtr) (LibMCEnv_Iterator pIterator, LibMCEnv_uint64 * pCount);

/*************************************************************************************************************************
 Class definition for ToolpathPart
**************************************************************************************************************************/

/**
* Returns Part Name.
*
* @param[in] pToolpathPart - ToolpathPart instance.
* @param[in] nNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNameBuffer -  buffer of Returns toolpath part name., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvToolpathPart_GetNamePtr) (LibMCEnv_ToolpathPart pToolpathPart, const LibMCEnv_uint32 nNameBufferSize, LibMCEnv_uint32* pNameNeededChars, char * pNameBuffer);

/**
* Returns Part UUID.
*
* @param[in] pToolpathPart - ToolpathPart instance.
* @param[in] nUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pUUIDBuffer -  buffer of Returns toolpath part uuid., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvToolpathPart_GetUUIDPtr) (LibMCEnv_ToolpathPart pToolpathPart, const LibMCEnv_uint32 nUUIDBufferSize, LibMCEnv_uint32* pUUIDNeededChars, char * pUUIDBuffer);

/**
* Returns Mesh UUID of the part.
*
* @param[in] pToolpathPart - ToolpathPart instance.
* @param[in] nMeshUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pMeshUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pMeshUUIDBuffer -  buffer of Returns toolpath part mesh uuid., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvToolpathPart_GetMeshUUIDPtr) (LibMCEnv_ToolpathPart pToolpathPart, const LibMCEnv_uint32 nMeshUUIDBufferSize, LibMCEnv_uint32* pMeshUUIDNeededChars, char * pMeshUUIDBuffer);

/**
* Returns Mesh Transform of the part.
*
* @param[in] pToolpathPart - ToolpathPart instance.
* @param[out] pMeshUUID - Returns the mesh transform of the toolpath.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvToolpathPart_GetTransformPtr) (LibMCEnv_ToolpathPart pToolpathPart, LibMCEnv::sToolpathPartTransform * pMeshUUID);

/*************************************************************************************************************************
 Class definition for ToolpathLayer
**************************************************************************************************************************/

/**
* Retrieves the layerdata's uuid
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[in] nUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pUUIDBuffer -  buffer of Returns the uuid value., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvToolpathLayer_GetLayerDataUUIDPtr) (LibMCEnv_ToolpathLayer pToolpathLayer, const LibMCEnv_uint32 nUUIDBufferSize, LibMCEnv_uint32* pUUIDNeededChars, char * pUUIDBuffer);

/**
* Retrieves the count of segments.
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[out] pCount - Count
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvToolpathLayer_GetSegmentCountPtr) (LibMCEnv_ToolpathLayer pToolpathLayer, LibMCEnv_uint32 * pCount);

/**
* Retrieves the segment type information .
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[in] nIndex - Index. Must be between 0 and Count - 1.
* @param[out] pType - Segment Type
* @param[out] pPointCount - Point count of segment.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvToolpathLayer_GetSegmentInfoPtr) (LibMCEnv_ToolpathLayer pToolpathLayer, LibMCEnv_uint32 nIndex, LibMCEnv::eToolpathSegmentType * pType, LibMCEnv_uint32 * pPointCount);

/**
* Retrieves the assigned segment profile uuid.
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[in] nIndex - Index. Must be between 0 and Count - 1.
* @param[in] nProfileUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pProfileUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pProfileUUIDBuffer -  buffer of Segment Profile UUID, may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvToolpathLayer_GetSegmentProfileUUIDPtr) (LibMCEnv_ToolpathLayer pToolpathLayer, LibMCEnv_uint32 nIndex, const LibMCEnv_uint32 nProfileUUIDBufferSize, LibMCEnv_uint32* pProfileUUIDNeededChars, char * pProfileUUIDBuffer);

/**
* Retrieves an assigned profile custom value.
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[in] nIndex - Index. Must be between 0 and Count - 1.
* @param[in] pValueName - Value Name to query for.
* @param[in] nValueBufferSize - size of the buffer (including trailing 0)
* @param[out] pValueNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pValueBuffer -  buffer of String Value., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvToolpathLayer_GetSegmentProfileValuePtr) (LibMCEnv_ToolpathLayer pToolpathLayer, LibMCEnv_uint32 nIndex, const char * pValueName, const LibMCEnv_uint32 nValueBufferSize, LibMCEnv_uint32* pValueNeededChars, char * pValueBuffer);

/**
* Retrieves an assigned profile value of a standard type.
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[in] nIndex - Index. Must be between 0 and Count - 1.
* @param[in] eValueType - Enum to query for. MUST NOT be custom.
* @param[out] pValue - Double Value
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvToolpathLayer_GetSegmentProfileTypedValuePtr) (LibMCEnv_ToolpathLayer pToolpathLayer, LibMCEnv_uint32 nIndex, LibMCEnv::eToolpathProfileValueType eValueType, LibMCEnv_double * pValue);

/**
* Retrieves the assigned segment part uuid.
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[in] nIndex - Index. Must be between 0 and Count - 1.
* @param[in] nPartUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pPartUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pPartUUIDBuffer -  buffer of Segment Part UUID, may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvToolpathLayer_GetSegmentPartUUIDPtr) (LibMCEnv_ToolpathLayer pToolpathLayer, LibMCEnv_uint32 nIndex, const LibMCEnv_uint32 nPartUUIDBufferSize, LibMCEnv_uint32* pPartUUIDNeededChars, char * pPartUUIDBuffer);

/**
* Retrieves the assigned segment point list. For type hatch, the points are taken pairwise.
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[in] nIndex - Index. Must be between 0 and Count - 1.
* @param[in] nPointDataBufferSize - Number of elements in buffer
* @param[out] pPointDataNeededCount - will be filled with the count of the written elements, or needed buffer size.
* @param[out] pPointDataBuffer - Position2D buffer of The point data array. Positions are absolute in units.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvToolpathLayer_GetSegmentPointDataPtr) (LibMCEnv_ToolpathLayer pToolpathLayer, LibMCEnv_uint32 nIndex, const LibMCEnv_uint64 nPointDataBufferSize, LibMCEnv_uint64* pPointDataNeededCount, LibMCEnv::sPosition2D * pPointDataBuffer);

/**
* Retrieves the layers Z Value in units.
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[out] pZValue - Z Value of the layer in units.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvToolpathLayer_GetZValuePtr) (LibMCEnv_ToolpathLayer pToolpathLayer, LibMCEnv_int32 * pZValue);

/**
* Retrieves the toolpath units in mm.
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[out] pUnits - Toolpath units.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvToolpathLayer_GetUnitsPtr) (LibMCEnv_ToolpathLayer pToolpathLayer, LibMCEnv_double * pUnits);

/*************************************************************************************************************************
 Class definition for ToolpathAccessor
**************************************************************************************************************************/

/**
* Returns Toolpath storage UUID.
*
* @param[in] pToolpathAccessor - ToolpathAccessor instance.
* @param[in] nStorageUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pStorageUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pStorageUUIDBuffer -  buffer of Returns toolpath storage uuid., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvToolpathAccessor_GetStorageUUIDPtr) (LibMCEnv_ToolpathAccessor pToolpathAccessor, const LibMCEnv_uint32 nStorageUUIDBufferSize, LibMCEnv_uint32* pStorageUUIDNeededChars, char * pStorageUUIDBuffer);

/**
* Returns layer count.
*
* @param[in] pToolpathAccessor - ToolpathAccessor instance.
* @param[out] pLayerCount - Returns layer count.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvToolpathAccessor_GetLayerCountPtr) (LibMCEnv_ToolpathAccessor pToolpathAccessor, LibMCEnv_uint32 * pLayerCount);

/**
* Reads and returns a layer object.
*
* @param[in] pToolpathAccessor - ToolpathAccessor instance.
* @param[in] nLayerIndex - Layer Index.
* @param[out] pLayerData - Toolpath layer object.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvToolpathAccessor_LoadLayerPtr) (LibMCEnv_ToolpathAccessor pToolpathAccessor, LibMCEnv_uint32 nLayerIndex, LibMCEnv_ToolpathLayer * pLayerData);

/**
* Retrieves the toolpath units in mm.
*
* @param[in] pToolpathAccessor - ToolpathAccessor instance.
* @param[out] pUnits - Toolpath units.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvToolpathAccessor_GetUnitsPtr) (LibMCEnv_ToolpathAccessor pToolpathAccessor, LibMCEnv_double * pUnits);

/**
* Checks if a metadata value exists for this toolpath model.
*
* @param[in] pToolpathAccessor - ToolpathAccessor instance.
* @param[in] pNameSpace - Namespace of metadata.
* @param[in] pName - Name of metadata.
* @param[out] pExists - Returns if metadata exists.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvToolpathAccessor_HasMetaDataPtr) (LibMCEnv_ToolpathAccessor pToolpathAccessor, const char * pNameSpace, const char * pName, bool * pExists);

/**
* Returns the value of a metadata for this toolpath model.
*
* @param[in] pToolpathAccessor - ToolpathAccessor instance.
* @param[in] pNameSpace - Namespace of metadata.
* @param[in] pName - Name of metadata.
* @param[in] nMetaDataValueBufferSize - size of the buffer (including trailing 0)
* @param[out] pMetaDataValueNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pMetaDataValueBuffer -  buffer of Returns the value, may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvToolpathAccessor_GetMetaDataValuePtr) (LibMCEnv_ToolpathAccessor pToolpathAccessor, const char * pNameSpace, const char * pName, const LibMCEnv_uint32 nMetaDataValueBufferSize, LibMCEnv_uint32* pMetaDataValueNeededChars, char * pMetaDataValueBuffer);

/**
* Returns the type of a metadata for this toolpath model.
*
* @param[in] pToolpathAccessor - ToolpathAccessor instance.
* @param[in] pNameSpace - Namespace of metadata.
* @param[in] pName - Name of metadata.
* @param[in] nMetaDataTypeBufferSize - size of the buffer (including trailing 0)
* @param[out] pMetaDataTypeNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pMetaDataTypeBuffer -  buffer of Returns the type, may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvToolpathAccessor_GetMetaDataTypePtr) (LibMCEnv_ToolpathAccessor pToolpathAccessor, const char * pNameSpace, const char * pName, const LibMCEnv_uint32 nMetaDataTypeBufferSize, LibMCEnv_uint32* pMetaDataTypeNeededChars, char * pMetaDataTypeBuffer);

/**
* Retrieves the number of parts in the toolpath.
*
* @param[in] pToolpathAccessor - ToolpathAccessor instance.
* @param[out] pPartCount - Number of parts.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvToolpathAccessor_GetPartCountPtr) (LibMCEnv_ToolpathAccessor pToolpathAccessor, LibMCEnv_uint32 * pPartCount);

/**
* Retrieves the part information of a toolpath.
*
* @param[in] pToolpathAccessor - ToolpathAccessor instance.
* @param[in] nPartIndex - Index of part. MUST be between 0 and PartCount-1
* @param[out] pPart - Part Instance
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvToolpathAccessor_GetPartPtr) (LibMCEnv_ToolpathAccessor pToolpathAccessor, LibMCEnv_uint32 nPartIndex, LibMCEnv_ToolpathPart * pPart);

/**
* Finds the part information of a toolpath.
*
* @param[in] pToolpathAccessor - ToolpathAccessor instance.
* @param[in] pPartUUID - UUID of part.
* @param[out] pPart - Part Instance. Returns null if part does not exist.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvToolpathAccessor_FindPartByUUIDPtr) (LibMCEnv_ToolpathAccessor pToolpathAccessor, const char * pPartUUID, LibMCEnv_ToolpathPart * pPart);

/*************************************************************************************************************************
 Class definition for Build
**************************************************************************************************************************/

/**
* Returns name of the build.
*
* @param[in] pBuild - Build instance.
* @param[in] nNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNameBuffer -  buffer of Name of the build., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvBuild_GetNamePtr) (LibMCEnv_Build pBuild, const LibMCEnv_uint32 nNameBufferSize, LibMCEnv_uint32* pNameNeededChars, char * pNameBuffer);

/**
* Returns uuid of the build.
*
* @param[in] pBuild - Build instance.
* @param[in] nBuildUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pBuildUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pBuildUUIDBuffer -  buffer of UUID of the build., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvBuild_GetBuildUUIDPtr) (LibMCEnv_Build pBuild, const LibMCEnv_uint32 nBuildUUIDBufferSize, LibMCEnv_uint32* pBuildUUIDNeededChars, char * pBuildUUIDBuffer);

/**
* Returns storage uuid of the build.
*
* @param[in] pBuild - Build instance.
* @param[in] nStorageUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pStorageUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pStorageUUIDBuffer -  buffer of Storage UUID of the build., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvBuild_GetStorageUUIDPtr) (LibMCEnv_Build pBuild, const LibMCEnv_uint32 nStorageUUIDBufferSize, LibMCEnv_uint32* pStorageUUIDNeededChars, char * pStorageUUIDBuffer);

/**
* Returns SHA256 of the build stream.
*
* @param[in] pBuild - Build instance.
* @param[in] nSHA256BufferSize - size of the buffer (including trailing 0)
* @param[out] pSHA256NeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pSHA256Buffer -  buffer of SHA256 of the build stream., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvBuild_GetStorageSHA256Ptr) (LibMCEnv_Build pBuild, const LibMCEnv_uint32 nSHA256BufferSize, LibMCEnv_uint32* pSHA256NeededChars, char * pSHA256Buffer);

/**
* Returns cached layer count of the toolpath.
*
* @param[in] pBuild - Build instance.
* @param[out] pLayerCount - Returns layer count.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvBuild_GetLayerCountPtr) (LibMCEnv_Build pBuild, LibMCEnv_uint32 * pLayerCount);

/**
* loads the a toolpath into memory
*
* @param[in] pBuild - Build instance.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvBuild_LoadToolpathPtr) (LibMCEnv_Build pBuild);

/**
* unloads the a toolpath from memory, if it has been loaded before.
*
* @param[in] pBuild - Build instance.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvBuild_UnloadToolpathPtr) (LibMCEnv_Build pBuild);

/**
* checks, if a toolpath object is loaded to memory.
*
* @param[in] pBuild - Build instance.
* @param[out] pIsLoaded - returns if toolpath is loaded.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvBuild_ToolpathIsLoadedPtr) (LibMCEnv_Build pBuild, bool * pIsLoaded);

/**
* Creates an accessor object for a toolpath. Toolpath MUST have been loaded with LoadToolpath before.
*
* @param[in] pBuild - Build instance.
* @param[out] pToolpathInstance - Toolpath instance.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvBuild_CreateToolpathAccessorPtr) (LibMCEnv_Build pBuild, LibMCEnv_ToolpathAccessor * pToolpathInstance);

/**
* Adds binary data to store with the build.
*
* @param[in] pBuild - Build instance.
* @param[in] pName - Name of the attache data block.
* @param[in] pMIMEType - Mime type of the data.
* @param[in] nContentBufferSize - Number of elements in buffer
* @param[in] pContentBuffer - uint8 buffer of Stream content to store
* @param[in] nDataUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pDataUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pDataUUIDBuffer -  buffer of Data UUID of the attachment., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvBuild_AddBinaryDataPtr) (LibMCEnv_Build pBuild, const char * pName, const char * pMIMEType, LibMCEnv_uint64 nContentBufferSize, const LibMCEnv_uint8 * pContentBuffer, const LibMCEnv_uint32 nDataUUIDBufferSize, LibMCEnv_uint32* pDataUUIDNeededChars, char * pDataUUIDBuffer);

/*************************************************************************************************************************
 Class definition for WorkingFileExecution
**************************************************************************************************************************/

/**
* Returns the execution status
*
* @param[in] pWorkingFileExecution - WorkingFileExecution instance.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvWorkingFileExecution_GetStatusPtr) (LibMCEnv_WorkingFileExecution pWorkingFileExecution);

/**
* Returns the output of the executable as string buffer
*
* @param[in] pWorkingFileExecution - WorkingFileExecution instance.
* @param[in] nStringBufferBufferSize - size of the buffer (including trailing 0)
* @param[out] pStringBufferNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pStringBufferBuffer -  buffer of stdout buffer, may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvWorkingFileExecution_ReturnStdOutPtr) (LibMCEnv_WorkingFileExecution pWorkingFileExecution, const LibMCEnv_uint32 nStringBufferBufferSize, LibMCEnv_uint32* pStringBufferNeededChars, char * pStringBufferBuffer);

/*************************************************************************************************************************
 Class definition for WorkingFile
**************************************************************************************************************************/

/**
* Retrieves absolute file name of the working file
*
* @param[in] pWorkingFile - WorkingFile instance.
* @param[in] nFileNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pFileNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pFileNameBuffer -  buffer of global path of the file, may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvWorkingFile_GetAbsoluteFileNamePtr) (LibMCEnv_WorkingFile pWorkingFile, const LibMCEnv_uint32 nFileNameBufferSize, LibMCEnv_uint32* pFileNameNeededChars, char * pFileNameBuffer);

/**
* Returns the size of temporary file.
*
* @param[in] pWorkingFile - WorkingFile instance.
* @param[out] pFileSize - file size
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvWorkingFile_GetSizePtr) (LibMCEnv_WorkingFile pWorkingFile, LibMCEnv_uint64 * pFileSize);

/**
* Calculates the SHA256 checksum of the file.
*
* @param[in] pWorkingFile - WorkingFile instance.
* @param[in] nSHA2BufferSize - size of the buffer (including trailing 0)
* @param[out] pSHA2NeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pSHA2Buffer -  buffer of sha256 checksum, may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvWorkingFile_CalculateSHA2Ptr) (LibMCEnv_WorkingFile pWorkingFile, const LibMCEnv_uint32 nSHA2BufferSize, LibMCEnv_uint32* pSHA2NeededChars, char * pSHA2Buffer);

/**
* Executes the temporary file, if it is an executable.
*
* @param[in] pWorkingFile - WorkingFile instance.
* @param[out] pExecution - execution object
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvWorkingFile_ExecuteFilePtr) (LibMCEnv_WorkingFile pWorkingFile, LibMCEnv_WorkingFileExecution * pExecution);

/**
* Returns if the file is managed.
*
* @param[in] pWorkingFile - WorkingFile instance.
* @param[out] pFileIsManaged - returns if the file is managed.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvWorkingFile_IsManagedPtr) (LibMCEnv_WorkingFile pWorkingFile, bool * pFileIsManaged);

/**
* Makes the file managed if it is not managed yet.
*
* @param[in] pWorkingFile - WorkingFile instance.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvWorkingFile_MakeManagedPtr) (LibMCEnv_WorkingFile pWorkingFile);

/**
* Returns if the file exists on disk.
*
* @param[in] pWorkingFile - WorkingFile instance.
* @param[out] pFileDoesExist - returns if the file exists.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvWorkingFile_FileExistsPtr) (LibMCEnv_WorkingFile pWorkingFile, bool * pFileDoesExist);

/**
* Deletes the temporary file.
*
* @param[in] pWorkingFile - WorkingFile instance.
* @param[out] pSuccess - returns if deletion was successful or file did not exist in the first place.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvWorkingFile_DeleteFromDiskPtr) (LibMCEnv_WorkingFile pWorkingFile, bool * pSuccess);

/*************************************************************************************************************************
 Class definition for WorkingFileIterator
**************************************************************************************************************************/

/**
* Returns the working file the iterator points at.
*
* @param[in] pWorkingFileIterator - WorkingFileIterator instance.
* @param[out] pWorkingFile - returns the WorkingFile instance.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvWorkingFileIterator_GetCurrentFilePtr) (LibMCEnv_WorkingFileIterator pWorkingFileIterator, LibMCEnv_WorkingFile * pWorkingFile);

/*************************************************************************************************************************
 Class definition for WorkingDirectory
**************************************************************************************************************************/

/**
* Working directory is active.
*
* @param[in] pWorkingDirectory - WorkingDirectory instance.
* @param[out] pIsActive - returns true if files can be read and written to the directory.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvWorkingDirectory_IsActivePtr) (LibMCEnv_WorkingDirectory pWorkingDirectory, bool * pIsActive);

/**
* Retrieves absolute file path.
*
* @param[in] pWorkingDirectory - WorkingDirectory instance.
* @param[in] nFilePathBufferSize - size of the buffer (including trailing 0)
* @param[out] pFilePathNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pFilePathBuffer -  buffer of global path of the directory, including path delimiter., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvWorkingDirectory_GetAbsoluteFilePathPtr) (LibMCEnv_WorkingDirectory pWorkingDirectory, const LibMCEnv_uint32 nFilePathBufferSize, LibMCEnv_uint32* pFilePathNeededChars, char * pFilePathBuffer);

/**
* Stores a data buffer in a temporary file.
*
* @param[in] pWorkingDirectory - WorkingDirectory instance.
* @param[in] pFileName - filename to store to. Can not include any path delimiters or ..
* @param[in] nDataBufferBufferSize - Number of elements in buffer
* @param[in] pDataBufferBuffer - uint8 buffer of file data to store to.
* @param[out] pWorkingFile - working file instance.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvWorkingDirectory_StoreCustomDataPtr) (LibMCEnv_WorkingDirectory pWorkingDirectory, const char * pFileName, LibMCEnv_uint64 nDataBufferBufferSize, const LibMCEnv_uint8 * pDataBufferBuffer, LibMCEnv_WorkingFile * pWorkingFile);

/**
* Stores a string in a temporary file.
*
* @param[in] pWorkingDirectory - WorkingDirectory instance.
* @param[in] pFileName - filename to store to. Can not include any path delimiters or ..
* @param[in] pDataString - file data to store to.
* @param[out] pWorkingFile - working file instance.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvWorkingDirectory_StoreCustomStringPtr) (LibMCEnv_WorkingDirectory pWorkingDirectory, const char * pFileName, const char * pDataString, LibMCEnv_WorkingFile * pWorkingFile);

/**
* Stores attached driver data in a temporary file.
*
* @param[in] pWorkingDirectory - WorkingDirectory instance.
* @param[in] pFileName - filename to store to. Can not include any path delimiters or ..
* @param[in] pIdentifier - identifier of the binary data in the driver package.
* @param[out] pWorkingFile - working file instance.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvWorkingDirectory_StoreDriverDataPtr) (LibMCEnv_WorkingDirectory pWorkingDirectory, const char * pFileName, const char * pIdentifier, LibMCEnv_WorkingFile * pWorkingFile);

/**
* Deletes all managed files in the directory and the directory. No storing is possible after a cleanup.
*
* @param[in] pWorkingDirectory - WorkingDirectory instance.
* @param[out] pSuccess - returns if deletion was successful.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvWorkingDirectory_CleanUpPtr) (LibMCEnv_WorkingDirectory pWorkingDirectory, bool * pSuccess);

/**
* Adds a managed filename in the directory (i.e. this file will be deleted at CleanUp). Subdirectories are not allowed.
*
* @param[in] pWorkingDirectory - WorkingDirectory instance.
* @param[in] pFileName - Filename to manage. The file does not need to exist yet.
* @param[out] pWorkingFile - working file instance.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvWorkingDirectory_AddManagedFilePtr) (LibMCEnv_WorkingDirectory pWorkingDirectory, const char * pFileName, LibMCEnv_WorkingFile * pWorkingFile);

/**
* Returns if the working directory has unmanaged files. A clean implementation will never deal with unmanaged files.
*
* @param[in] pWorkingDirectory - WorkingDirectory instance.
* @param[out] pHasUnmanagedFiles - returns if there are unmanaged files.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvWorkingDirectory_HasUnmanagedFilesPtr) (LibMCEnv_WorkingDirectory pWorkingDirectory, bool * pHasUnmanagedFiles);

/**
* Returns a list of unmanaged files.
*
* @param[in] pWorkingDirectory - WorkingDirectory instance.
* @param[out] pIteratorInstance - working file iterator instance.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvWorkingDirectory_RetrieveUnmanagedFilesPtr) (LibMCEnv_WorkingDirectory pWorkingDirectory, LibMCEnv_WorkingFileIterator * pIteratorInstance);

/**
* Returns a list of managed files.
*
* @param[in] pWorkingDirectory - WorkingDirectory instance.
* @param[out] pIteratorInstance - working file iterator instance.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvWorkingDirectory_RetrieveManagedFilesPtr) (LibMCEnv_WorkingDirectory pWorkingDirectory, LibMCEnv_WorkingFileIterator * pIteratorInstance);

/**
* Returns a list of all files in the directory.
*
* @param[in] pWorkingDirectory - WorkingDirectory instance.
* @param[out] pIteratorInstance - working file iterator instance.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvWorkingDirectory_RetrieveAllFilesPtr) (LibMCEnv_WorkingDirectory pWorkingDirectory, LibMCEnv_WorkingFileIterator * pIteratorInstance);

/*************************************************************************************************************************
 Class definition for DriverEnvironment
**************************************************************************************************************************/

/**
* creates a temporary working directory.
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[out] pWorkingDirectory - creates a working directory
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvDriverEnvironment_CreateWorkingDirectoryPtr) (LibMCEnv_DriverEnvironment pDriverEnvironment, LibMCEnv_WorkingDirectory * pWorkingDirectory);

/**
* retrieves attached driver data into a memory buffer.
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] pIdentifier - identifier of the binary data in the driver package.
* @param[in] nDataBufferBufferSize - Number of elements in buffer
* @param[out] pDataBufferNeededCount - will be filled with the count of the written elements, or needed buffer size.
* @param[out] pDataBufferBuffer - uint8 buffer of buffer data.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvDriverEnvironment_RetrieveDriverDataPtr) (LibMCEnv_DriverEnvironment pDriverEnvironment, const char * pIdentifier, const LibMCEnv_uint64 nDataBufferBufferSize, LibMCEnv_uint64* pDataBufferNeededCount, LibMCEnv_uint8 * pDataBufferBuffer);

/**
* Creates an accessor object for a toolpath. Toolpath MUST have been loaded into memory before.
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] pStreamUUID - UUID of the stream.
* @param[out] pToolpathInstance - Toolpath instance.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvDriverEnvironment_CreateToolpathAccessorPtr) (LibMCEnv_DriverEnvironment pDriverEnvironment, const char * pStreamUUID, LibMCEnv_ToolpathAccessor * pToolpathInstance);

/**
* registers a string parameter. Must only be called during driver creation.
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] pParameterName - Parameter Name
* @param[in] pDescription - Parameter Description
* @param[in] pDefaultValue - default value to set
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvDriverEnvironment_RegisterStringParameterPtr) (LibMCEnv_DriverEnvironment pDriverEnvironment, const char * pParameterName, const char * pDescription, const char * pDefaultValue);

/**
* registers a uuid parameter. Must only be called during driver creation.
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] pParameterName - Parameter Name
* @param[in] pDescription - Parameter Description
* @param[in] pDefaultValue - default value to set
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvDriverEnvironment_RegisterUUIDParameterPtr) (LibMCEnv_DriverEnvironment pDriverEnvironment, const char * pParameterName, const char * pDescription, const char * pDefaultValue);

/**
* registers a double parameter. Must only be called during driver creation.
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] pParameterName - Parameter Name
* @param[in] pDescription - Parameter Description
* @param[in] dDefaultValue - default value to set
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvDriverEnvironment_RegisterDoubleParameterPtr) (LibMCEnv_DriverEnvironment pDriverEnvironment, const char * pParameterName, const char * pDescription, LibMCEnv_double dDefaultValue);

/**
* registers an int parameter. Must only be called during driver creation.
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] pParameterName - Parameter Name
* @param[in] pDescription - Parameter Description
* @param[in] nDefaultValue - default value to set
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvDriverEnvironment_RegisterIntegerParameterPtr) (LibMCEnv_DriverEnvironment pDriverEnvironment, const char * pParameterName, const char * pDescription, LibMCEnv_int64 nDefaultValue);

/**
* registers a bool parameter. Must only be called during driver creation.
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] pParameterName - Parameter Name
* @param[in] pDescription - Parameter Description
* @param[in] bDefaultValue - default value to set
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvDriverEnvironment_RegisterBoolParameterPtr) (LibMCEnv_DriverEnvironment pDriverEnvironment, const char * pParameterName, const char * pDescription, bool bDefaultValue);

/**
* sets a string parameter
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] pParameterName - Parameter Name
* @param[in] pValue - Value to set
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvDriverEnvironment_SetStringParameterPtr) (LibMCEnv_DriverEnvironment pDriverEnvironment, const char * pParameterName, const char * pValue);

/**
* sets a uuid parameter
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] pParameterName - Parameter Name
* @param[in] pValue - Value to set
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvDriverEnvironment_SetUUIDParameterPtr) (LibMCEnv_DriverEnvironment pDriverEnvironment, const char * pParameterName, const char * pValue);

/**
* sets a double parameter
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] pParameterName - Parameter Name
* @param[in] dValue - Value to set
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvDriverEnvironment_SetDoubleParameterPtr) (LibMCEnv_DriverEnvironment pDriverEnvironment, const char * pParameterName, LibMCEnv_double dValue);

/**
* sets an int parameter
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] pParameterName - Parameter Name
* @param[in] nValue - Value to set
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvDriverEnvironment_SetIntegerParameterPtr) (LibMCEnv_DriverEnvironment pDriverEnvironment, const char * pParameterName, LibMCEnv_int64 nValue);

/**
* sets a bool parameter
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] pParameterName - Parameter Name
* @param[in] bValue - Value to set
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvDriverEnvironment_SetBoolParameterPtr) (LibMCEnv_DriverEnvironment pDriverEnvironment, const char * pParameterName, bool bValue);

/**
* Puts the current instance to sleep for a definite amount of time. MUST be used instead of a blocking sleep call.
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] nDelay - Milliseconds to sleeps
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvDriverEnvironment_SleepPtr) (LibMCEnv_DriverEnvironment pDriverEnvironment, LibMCEnv_uint32 nDelay);

/**
* Returns the global timer in milliseconds.
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[out] pTimerValue - Timer value in Milliseconds
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvDriverEnvironment_GetGlobalTimerInMillisecondsPtr) (LibMCEnv_DriverEnvironment pDriverEnvironment, LibMCEnv_uint64 * pTimerValue);

/**
* logs a string as message
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] pLogString - String to Log
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvDriverEnvironment_LogMessagePtr) (LibMCEnv_DriverEnvironment pDriverEnvironment, const char * pLogString);

/**
* logs a string as warning
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] pLogString - String to Log
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvDriverEnvironment_LogWarningPtr) (LibMCEnv_DriverEnvironment pDriverEnvironment, const char * pLogString);

/**
* logs a string as info
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] pLogString - String to Log
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvDriverEnvironment_LogInfoPtr) (LibMCEnv_DriverEnvironment pDriverEnvironment, const char * pLogString);

/*************************************************************************************************************************
 Class definition for SignalTrigger
**************************************************************************************************************************/

/**
* Returns, if signal channel is available.
*
* @param[in] pSignalTrigger - SignalTrigger instance.
* @param[out] pChannelIsAvailable - Returns true, if signal channel is available.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvSignalTrigger_CanTriggerPtr) (LibMCEnv_SignalTrigger pSignalTrigger, bool * pChannelIsAvailable);

/**
* Triggers a signal, if signal channel is available.
*
* @param[in] pSignalTrigger - SignalTrigger instance.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvSignalTrigger_TriggerPtr) (LibMCEnv_SignalTrigger pSignalTrigger);

/**
* Waits until the signal is reset.
*
* @param[in] pSignalTrigger - SignalTrigger instance.
* @param[in] nTimeOut - Timeout in Milliseconds. 0 for Immediate return.
* @param[out] pSuccess - Flag if signal handling has been handled.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvSignalTrigger_WaitForHandlingPtr) (LibMCEnv_SignalTrigger pSignalTrigger, LibMCEnv_uint32 nTimeOut, bool * pSuccess);

/**
* Returns the signal name.
*
* @param[in] pSignalTrigger - SignalTrigger instance.
* @param[in] nSignalNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pSignalNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pSignalNameBuffer -  buffer of Name Of Signal, may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvSignalTrigger_GetNamePtr) (LibMCEnv_SignalTrigger pSignalTrigger, const LibMCEnv_uint32 nSignalNameBufferSize, LibMCEnv_uint32* pSignalNameNeededChars, char * pSignalNameBuffer);

/**
* Returns the signal state machine instance.
*
* @param[in] pSignalTrigger - SignalTrigger instance.
* @param[in] nStateMachineNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pStateMachineNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pStateMachineNameBuffer -  buffer of Name Of State Machine, may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvSignalTrigger_GetStateMachinePtr) (LibMCEnv_SignalTrigger pSignalTrigger, const LibMCEnv_uint32 nStateMachineNameBufferSize, LibMCEnv_uint32* pStateMachineNameNeededChars, char * pStateMachineNameBuffer);

/**
* sets a string value
*
* @param[in] pSignalTrigger - SignalTrigger instance.
* @param[in] pName - Name
* @param[in] pValue - Value
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvSignalTrigger_SetStringPtr) (LibMCEnv_SignalTrigger pSignalTrigger, const char * pName, const char * pValue);

/**
* sets a uuid value
*
* @param[in] pSignalTrigger - SignalTrigger instance.
* @param[in] pName - Name
* @param[in] pValue - Value
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvSignalTrigger_SetUUIDPtr) (LibMCEnv_SignalTrigger pSignalTrigger, const char * pName, const char * pValue);

/**
* sets a double
*
* @param[in] pSignalTrigger - SignalTrigger instance.
* @param[in] pName - Name
* @param[in] dValue - Value
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvSignalTrigger_SetDoublePtr) (LibMCEnv_SignalTrigger pSignalTrigger, const char * pName, LibMCEnv_double dValue);

/**
* sets an int.
*
* @param[in] pSignalTrigger - SignalTrigger instance.
* @param[in] pName - Name
* @param[in] nValue - Value
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvSignalTrigger_SetIntegerPtr) (LibMCEnv_SignalTrigger pSignalTrigger, const char * pName, LibMCEnv_int64 nValue);

/**
* sets a bool
*
* @param[in] pSignalTrigger - SignalTrigger instance.
* @param[in] pName - Name
* @param[in] bValue - Value
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvSignalTrigger_SetBoolPtr) (LibMCEnv_SignalTrigger pSignalTrigger, const char * pName, bool bValue);

/**
* returns a string value of the result
*
* @param[in] pSignalTrigger - SignalTrigger instance.
* @param[in] pName - Name
* @param[in] nValueBufferSize - size of the buffer (including trailing 0)
* @param[out] pValueNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pValueBuffer -  buffer of Value, may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvSignalTrigger_GetStringResultPtr) (LibMCEnv_SignalTrigger pSignalTrigger, const char * pName, const LibMCEnv_uint32 nValueBufferSize, LibMCEnv_uint32* pValueNeededChars, char * pValueBuffer);

/**
* returns a uuid value of the result
*
* @param[in] pSignalTrigger - SignalTrigger instance.
* @param[in] pName - Name
* @param[in] nValueBufferSize - size of the buffer (including trailing 0)
* @param[out] pValueNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pValueBuffer -  buffer of Value, may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvSignalTrigger_GetUUIDResultPtr) (LibMCEnv_SignalTrigger pSignalTrigger, const char * pName, const LibMCEnv_uint32 nValueBufferSize, LibMCEnv_uint32* pValueNeededChars, char * pValueBuffer);

/**
* returns a string value of the result
*
* @param[in] pSignalTrigger - SignalTrigger instance.
* @param[in] pName - Name
* @param[out] pValue - Value
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvSignalTrigger_GetDoubleResultPtr) (LibMCEnv_SignalTrigger pSignalTrigger, const char * pName, LibMCEnv_double * pValue);

/**
* returns an int value of the result.
*
* @param[in] pSignalTrigger - SignalTrigger instance.
* @param[in] pName - Name
* @param[out] pValue - Value
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvSignalTrigger_GetIntegerResultPtr) (LibMCEnv_SignalTrigger pSignalTrigger, const char * pName, LibMCEnv_int64 * pValue);

/**
* returns a bool value of the result.
*
* @param[in] pSignalTrigger - SignalTrigger instance.
* @param[in] pName - Name
* @param[out] pValue - Value
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvSignalTrigger_GetBoolResultPtr) (LibMCEnv_SignalTrigger pSignalTrigger, const char * pName, bool * pValue);

/*************************************************************************************************************************
 Class definition for SignalHandler
**************************************************************************************************************************/

/**
* Marks signal as handled and resets signal channel.
*
* @param[in] pSignalHandler - SignalHandler instance.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvSignalHandler_SignalHandledPtr) (LibMCEnv_SignalHandler pSignalHandler);

/**
* Returns the signal name.
*
* @param[in] pSignalHandler - SignalHandler instance.
* @param[in] nSignalNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pSignalNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pSignalNameBuffer -  buffer of Name Of Signal, may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvSignalHandler_GetNamePtr) (LibMCEnv_SignalHandler pSignalHandler, const LibMCEnv_uint32 nSignalNameBufferSize, LibMCEnv_uint32* pSignalNameNeededChars, char * pSignalNameBuffer);

/**
* Returns the signal id.
*
* @param[in] pSignalHandler - SignalHandler instance.
* @param[in] nSignalIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pSignalIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pSignalIDBuffer -  buffer of Signal Identifier, may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvSignalHandler_GetSignalIDPtr) (LibMCEnv_SignalHandler pSignalHandler, const LibMCEnv_uint32 nSignalIDBufferSize, LibMCEnv_uint32* pSignalIDNeededChars, char * pSignalIDBuffer);

/**
* Returns the signal state machine instance.
*
* @param[in] pSignalHandler - SignalHandler instance.
* @param[in] nStateMachineNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pStateMachineNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pStateMachineNameBuffer -  buffer of Name Of State Machine, may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvSignalHandler_GetStateMachinePtr) (LibMCEnv_SignalHandler pSignalHandler, const LibMCEnv_uint32 nStateMachineNameBufferSize, LibMCEnv_uint32* pStateMachineNameNeededChars, char * pStateMachineNameBuffer);

/**
* gets a string value
*
* @param[in] pSignalHandler - SignalHandler instance.
* @param[in] pName - Name
* @param[in] nValueBufferSize - size of the buffer (including trailing 0)
* @param[out] pValueNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pValueBuffer -  buffer of Value, may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvSignalHandler_GetStringPtr) (LibMCEnv_SignalHandler pSignalHandler, const char * pName, const LibMCEnv_uint32 nValueBufferSize, LibMCEnv_uint32* pValueNeededChars, char * pValueBuffer);

/**
* gets a uuid value
*
* @param[in] pSignalHandler - SignalHandler instance.
* @param[in] pName - Name
* @param[in] nValueBufferSize - size of the buffer (including trailing 0)
* @param[out] pValueNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pValueBuffer -  buffer of Value, may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvSignalHandler_GetUUIDPtr) (LibMCEnv_SignalHandler pSignalHandler, const char * pName, const LibMCEnv_uint32 nValueBufferSize, LibMCEnv_uint32* pValueNeededChars, char * pValueBuffer);

/**
* gets a double
*
* @param[in] pSignalHandler - SignalHandler instance.
* @param[in] pName - Name
* @param[out] pValue - Value
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvSignalHandler_GetDoublePtr) (LibMCEnv_SignalHandler pSignalHandler, const char * pName, LibMCEnv_double * pValue);

/**
* gets an int.
*
* @param[in] pSignalHandler - SignalHandler instance.
* @param[in] pName - Name
* @param[out] pValue - Value
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvSignalHandler_GetIntegerPtr) (LibMCEnv_SignalHandler pSignalHandler, const char * pName, LibMCEnv_int64 * pValue);

/**
* gets a bool
*
* @param[in] pSignalHandler - SignalHandler instance.
* @param[in] pName - Name
* @param[out] pValue - Value
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvSignalHandler_GetBoolPtr) (LibMCEnv_SignalHandler pSignalHandler, const char * pName, bool * pValue);

/**
* returns a string value of the result
*
* @param[in] pSignalHandler - SignalHandler instance.
* @param[in] pName - Name
* @param[in] pValue - Value
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvSignalHandler_SetStringResultPtr) (LibMCEnv_SignalHandler pSignalHandler, const char * pName, const char * pValue);

/**
* returns a uuid value of the result
*
* @param[in] pSignalHandler - SignalHandler instance.
* @param[in] pName - Name
* @param[in] pValue - Value
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvSignalHandler_SetUUIDResultPtr) (LibMCEnv_SignalHandler pSignalHandler, const char * pName, const char * pValue);

/**
* returns a string value of the result
*
* @param[in] pSignalHandler - SignalHandler instance.
* @param[in] pName - Name
* @param[in] dValue - Value
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvSignalHandler_SetDoubleResultPtr) (LibMCEnv_SignalHandler pSignalHandler, const char * pName, LibMCEnv_double dValue);

/**
* sets an int.
*
* @param[in] pSignalHandler - SignalHandler instance.
* @param[in] pName - Name
* @param[in] nValue - Value
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvSignalHandler_SetIntegerResultPtr) (LibMCEnv_SignalHandler pSignalHandler, const char * pName, LibMCEnv_int64 nValue);

/**
* sets a bool
*
* @param[in] pSignalHandler - SignalHandler instance.
* @param[in] pName - Name
* @param[in] bValue - Value
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvSignalHandler_SetBoolResultPtr) (LibMCEnv_SignalHandler pSignalHandler, const char * pName, bool bValue);

/*************************************************************************************************************************
 Class definition for StateEnvironment
**************************************************************************************************************************/

/**
* Retrieves the machine state
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pMachineInstance - State machine instance name
* @param[in] nStateNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pStateNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pStateNameBuffer -  buffer of Name of current state, may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvStateEnvironment_GetMachineStatePtr) (LibMCEnv_StateEnvironment pStateEnvironment, const char * pMachineInstance, const LibMCEnv_uint32 nStateNameBufferSize, LibMCEnv_uint32* pStateNameNeededChars, char * pStateNameBuffer);

/**
* prepares a signal object to trigger later.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pMachineInstance - State machine instance name
* @param[in] pSignalName - Name Of signal channel.
* @param[out] pSignalInstance - Signal trigger object.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvStateEnvironment_PrepareSignalPtr) (LibMCEnv_StateEnvironment pStateEnvironment, const char * pMachineInstance, const char * pSignalName, LibMCEnv_SignalTrigger * pSignalInstance);

/**
* waits for a signal.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pSignalName - Name Of Signal
* @param[in] nTimeOut - Timeout in Milliseconds. 0 for Immediate return.
* @param[out] pHandlerInstance - Signal object. If Success is false, the Signal Handler Object will be null.
* @param[out] pSuccess - Signal has been triggered
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvStateEnvironment_WaitForSignalPtr) (LibMCEnv_StateEnvironment pStateEnvironment, const char * pSignalName, LibMCEnv_uint32 nTimeOut, LibMCEnv_SignalHandler * pHandlerInstance, bool * pSuccess);

/**
* Returns the driver type and library lookup for a specific registered driver.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pDriverName - Name identifier of the driver.
* @param[in] nDriverTypeBufferSize - size of the buffer (including trailing 0)
* @param[out] pDriverTypeNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pDriverTypeBuffer -  buffer of returns type identifier of the driver., may be NULL
* @param[out] pDriverLookup - GetProcAddress Handle of the driver.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvStateEnvironment_GetDriverLibraryPtr) (LibMCEnv_StateEnvironment pStateEnvironment, const char * pDriverName, const LibMCEnv_uint32 nDriverTypeBufferSize, LibMCEnv_uint32* pDriverTypeNeededChars, char * pDriverTypeBuffer, LibMCEnv_pvoid * pDriverLookup);

/**
* Accesses and locks a driver for the execution of the current state.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pDriverName - Name identifier of the driver.
* @param[out] pDriverHandle - Handle of the driver.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvStateEnvironment_CreateDriverAccessPtr) (LibMCEnv_StateEnvironment pStateEnvironment, const char * pDriverName, LibMCEnv_pvoid * pDriverHandle);

/**
* Returns a instance of a build object.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pBuildUUID - UUID of the build entity.
* @param[out] pBuildInstance - Build instance
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvStateEnvironment_GetBuildJobPtr) (LibMCEnv_StateEnvironment pStateEnvironment, const char * pBuildUUID, LibMCEnv_Build * pBuildInstance);

/**
* unloads all toolpath in memory to clean up
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvStateEnvironment_UnloadAllToolpathesPtr) (LibMCEnv_StateEnvironment pStateEnvironment);

/**
* sets the next state
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pStateName - Name of next state
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvStateEnvironment_SetNextStatePtr) (LibMCEnv_StateEnvironment pStateEnvironment, const char * pStateName);

/**
* logs a string as message
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pLogString - String to Log
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvStateEnvironment_LogMessagePtr) (LibMCEnv_StateEnvironment pStateEnvironment, const char * pLogString);

/**
* logs a string as warning
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pLogString - String to Log
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvStateEnvironment_LogWarningPtr) (LibMCEnv_StateEnvironment pStateEnvironment, const char * pLogString);

/**
* logs a string as info
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pLogString - String to Log
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvStateEnvironment_LogInfoPtr) (LibMCEnv_StateEnvironment pStateEnvironment, const char * pLogString);

/**
* Puts the current instance to sleep for a definite amount of time. MUST be used instead of a blocking sleep call.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] nDelay - Milliseconds to sleeps
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvStateEnvironment_SleepPtr) (LibMCEnv_StateEnvironment pStateEnvironment, LibMCEnv_uint32 nDelay);

/**
* checks environment for termination signal. MUST be called frequently in longer-running operations.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[out] pShallTerminate - Returns if termination shall appear
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvStateEnvironment_CheckForTerminationPtr) (LibMCEnv_StateEnvironment pStateEnvironment, bool * pShallTerminate);

/**
* stores a signal handler in the current state machine
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pName - Name
* @param[in] pHandler - Signal handler to store.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvStateEnvironment_StoreSignalPtr) (LibMCEnv_StateEnvironment pStateEnvironment, const char * pName, LibMCEnv_SignalHandler pHandler);

/**
* retrieves a signal handler from the current state machine. Fails if value has not been stored before or signal has been already handled.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pName - Name
* @param[out] pHandler - Signal handler instance.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvStateEnvironment_RetrieveSignalPtr) (LibMCEnv_StateEnvironment pStateEnvironment, const char * pName, LibMCEnv_SignalHandler * pHandler);

/**
* deletes a value from the data store.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pName - Name
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvStateEnvironment_ClearStoredValuePtr) (LibMCEnv_StateEnvironment pStateEnvironment, const char * pName);

/**
* sets a string parameter
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pParameterGroup - Parameter Group
* @param[in] pParameterName - Parameter Name
* @param[in] pValue - Value to set
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvStateEnvironment_SetStringParameterPtr) (LibMCEnv_StateEnvironment pStateEnvironment, const char * pParameterGroup, const char * pParameterName, const char * pValue);

/**
* sets a uuid parameter
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pParameterGroup - Parameter Group
* @param[in] pParameterName - Parameter Name
* @param[in] pValue - Value to set
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvStateEnvironment_SetUUIDParameterPtr) (LibMCEnv_StateEnvironment pStateEnvironment, const char * pParameterGroup, const char * pParameterName, const char * pValue);

/**
* sets a double parameter
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pParameterGroup - Parameter Group
* @param[in] pParameterName - Parameter Name
* @param[in] dValue - Value to set
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvStateEnvironment_SetDoubleParameterPtr) (LibMCEnv_StateEnvironment pStateEnvironment, const char * pParameterGroup, const char * pParameterName, LibMCEnv_double dValue);

/**
* sets an int parameter
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pParameterGroup - Parameter Group
* @param[in] pParameterName - Parameter Name
* @param[in] nValue - Value to set
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvStateEnvironment_SetIntegerParameterPtr) (LibMCEnv_StateEnvironment pStateEnvironment, const char * pParameterGroup, const char * pParameterName, LibMCEnv_int64 nValue);

/**
* sets a bool parameter
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pParameterGroup - Parameter Group
* @param[in] pParameterName - Parameter Name
* @param[in] bValue - Value to set
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvStateEnvironment_SetBoolParameterPtr) (LibMCEnv_StateEnvironment pStateEnvironment, const char * pParameterGroup, const char * pParameterName, bool bValue);

/**
* returns a string parameter
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pParameterGroup - Parameter Group
* @param[in] pParameterName - Parameter Name
* @param[in] nValueBufferSize - size of the buffer (including trailing 0)
* @param[out] pValueNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pValueBuffer -  buffer of Value to set, may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvStateEnvironment_GetStringParameterPtr) (LibMCEnv_StateEnvironment pStateEnvironment, const char * pParameterGroup, const char * pParameterName, const LibMCEnv_uint32 nValueBufferSize, LibMCEnv_uint32* pValueNeededChars, char * pValueBuffer);

/**
* returns a uuid parameter
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pParameterGroup - Parameter Group
* @param[in] pParameterName - Parameter Name
* @param[in] nValueBufferSize - size of the buffer (including trailing 0)
* @param[out] pValueNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pValueBuffer -  buffer of Value to set, may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvStateEnvironment_GetUUIDParameterPtr) (LibMCEnv_StateEnvironment pStateEnvironment, const char * pParameterGroup, const char * pParameterName, const LibMCEnv_uint32 nValueBufferSize, LibMCEnv_uint32* pValueNeededChars, char * pValueBuffer);

/**
* returns a double parameter
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pParameterGroup - Parameter Group
* @param[in] pParameterName - Parameter Name
* @param[out] pValue - Value to set
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvStateEnvironment_GetDoubleParameterPtr) (LibMCEnv_StateEnvironment pStateEnvironment, const char * pParameterGroup, const char * pParameterName, LibMCEnv_double * pValue);

/**
* returns an int parameter
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pParameterGroup - Parameter Group
* @param[in] pParameterName - Parameter Name
* @param[out] pValue - Value to set
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvStateEnvironment_GetIntegerParameterPtr) (LibMCEnv_StateEnvironment pStateEnvironment, const char * pParameterGroup, const char * pParameterName, LibMCEnv_int64 * pValue);

/**
* returns a bool parameter
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pParameterGroup - Parameter Group
* @param[in] pParameterName - Parameter Name
* @param[out] pValue - Value to set
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvStateEnvironment_GetBoolParameterPtr) (LibMCEnv_StateEnvironment pStateEnvironment, const char * pParameterGroup, const char * pParameterName, bool * pValue);

/**
* loads a plugin resource file into memory.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pResourceName - Name of the resource.
* @param[in] nResourceDataBufferSize - Number of elements in buffer
* @param[out] pResourceDataNeededCount - will be filled with the count of the written elements, or needed buffer size.
* @param[out] pResourceDataBuffer - uint8 buffer of Resource Data Buffer.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvStateEnvironment_LoadResourceDataPtr) (LibMCEnv_StateEnvironment pStateEnvironment, const char * pResourceName, const LibMCEnv_uint64 nResourceDataBufferSize, LibMCEnv_uint64* pResourceDataNeededCount, LibMCEnv_uint8 * pResourceDataBuffer);

/*************************************************************************************************************************
 Class definition for UIEnvironment
**************************************************************************************************************************/

/**
* activates a modal dialog on the client.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pDialogName - Name of the dialog to activate.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvUIEnvironment_ActivateModalDialogPtr) (LibMCEnv_UIEnvironment pUIEnvironment, const char * pDialogName);

/**
* closes the active modal dialog on the client.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvUIEnvironment_CloseModalDialogPtr) (LibMCEnv_UIEnvironment pUIEnvironment);

/**
* changes the current page on the client.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pPageName - Name of the page to activate.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvUIEnvironment_ActivatePagePtr) (LibMCEnv_UIEnvironment pUIEnvironment, const char * pPageName);

/**
* returns name of the UI control that triggered the event.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] nSenderNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pSenderNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pSenderNameBuffer -  buffer of Name of the sender element., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvUIEnvironment_RetrieveEventSenderPtr) (LibMCEnv_UIEnvironment pUIEnvironment, const LibMCEnv_uint32 nSenderNameBufferSize, LibMCEnv_uint32* pSenderNameNeededChars, char * pSenderNameBuffer);

/**
* prepares a signal object to trigger later.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pMachineInstance - State machine instance name
* @param[in] pSignalName - Name Of signal channel.
* @param[out] pSignalInstance - Signal trigger object.
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvUIEnvironment_PrepareSignalPtr) (LibMCEnv_UIEnvironment pUIEnvironment, const char * pMachineInstance, const char * pSignalName, LibMCEnv_SignalTrigger * pSignalInstance);

/**
* Retrieves the machine state
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pMachineInstance - State machine instance name
* @param[in] nStateNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pStateNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pStateNameBuffer -  buffer of Name of current state, may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvUIEnvironment_GetMachineStatePtr) (LibMCEnv_UIEnvironment pUIEnvironment, const char * pMachineInstance, const LibMCEnv_uint32 nStateNameBufferSize, LibMCEnv_uint32* pStateNameNeededChars, char * pStateNameBuffer);

/**
* logs a string as message
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pLogString - String to Log
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvUIEnvironment_LogMessagePtr) (LibMCEnv_UIEnvironment pUIEnvironment, const char * pLogString);

/**
* logs a string as warning
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pLogString - String to Log
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvUIEnvironment_LogWarningPtr) (LibMCEnv_UIEnvironment pUIEnvironment, const char * pLogString);

/**
* logs a string as info
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pLogString - String to Log
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvUIEnvironment_LogInfoPtr) (LibMCEnv_UIEnvironment pUIEnvironment, const char * pLogString);

/**
* returns a string parameter of a state machine
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pMachineInstance - State machine instance name
* @param[in] pParameterGroup - Parameter Group
* @param[in] pParameterName - Parameter Name
* @param[in] nValueBufferSize - size of the buffer (including trailing 0)
* @param[out] pValueNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pValueBuffer -  buffer of Current Parameter Value, may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvUIEnvironment_GetMachineParameterPtr) (LibMCEnv_UIEnvironment pUIEnvironment, const char * pMachineInstance, const char * pParameterGroup, const char * pParameterName, const LibMCEnv_uint32 nValueBufferSize, LibMCEnv_uint32* pValueNeededChars, char * pValueBuffer);

/**
* returns a uuid parameter of a state machine
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pMachineInstance - State machine instance name
* @param[in] pParameterGroup - Parameter Group
* @param[in] pParameterName - Parameter Name
* @param[in] nValueBufferSize - size of the buffer (including trailing 0)
* @param[out] pValueNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pValueBuffer -  buffer of Current Parameter Value, may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvUIEnvironment_GetMachineParameterAsUUIDPtr) (LibMCEnv_UIEnvironment pUIEnvironment, const char * pMachineInstance, const char * pParameterGroup, const char * pParameterName, const LibMCEnv_uint32 nValueBufferSize, LibMCEnv_uint32* pValueNeededChars, char * pValueBuffer);

/**
* returns a double parameter of a state machine
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pMachineInstance - State machine instance name
* @param[in] pParameterGroup - Parameter Group
* @param[in] pParameterName - Parameter Name
* @param[out] pValue - Current Parameter Value
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvUIEnvironment_GetMachineParameterAsDoublePtr) (LibMCEnv_UIEnvironment pUIEnvironment, const char * pMachineInstance, const char * pParameterGroup, const char * pParameterName, LibMCEnv_double * pValue);

/**
* returns an int parameter of a state machine
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pMachineInstance - State machine instance name
* @param[in] pParameterGroup - Parameter Group
* @param[in] pParameterName - Parameter Name
* @param[out] pValue - Current Parameter Value
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvUIEnvironment_GetMachineParameterAsIntegerPtr) (LibMCEnv_UIEnvironment pUIEnvironment, const char * pMachineInstance, const char * pParameterGroup, const char * pParameterName, LibMCEnv_int64 * pValue);

/**
* returns a bool parameter of a state machine
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pMachineInstance - State machine instance name
* @param[in] pParameterGroup - Parameter Group
* @param[in] pParameterName - Parameter Name
* @param[out] pValue - Current Parameter Value
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvUIEnvironment_GetMachineParameterAsBoolPtr) (LibMCEnv_UIEnvironment pUIEnvironment, const char * pMachineInstance, const char * pParameterGroup, const char * pParameterName, bool * pValue);

/**
* returns a string property of a UI element on the client
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pElementPath - Path of UI Element. Fails if element does not exist.
* @param[in] pPropertyName - Property name. Fails if property does not exist.
* @param[in] nValueBufferSize - size of the buffer (including trailing 0)
* @param[out] pValueNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pValueBuffer -  buffer of Current property Value, may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvUIEnvironment_GetUIPropertyPtr) (LibMCEnv_UIEnvironment pUIEnvironment, const char * pElementPath, const char * pPropertyName, const LibMCEnv_uint32 nValueBufferSize, LibMCEnv_uint32* pValueNeededChars, char * pValueBuffer);

/**
* returns a uuid variable of a UI element on the client
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pElementPath - Path of UI Element. Fails if element does not exist.
* @param[in] pPropertyName - Property name. Fails if property does not exist.
* @param[in] nValueBufferSize - size of the buffer (including trailing 0)
* @param[out] pValueNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pValueBuffer -  buffer of Current property Value, may be NULL
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvUIEnvironment_GetUIPropertyAsUUIDPtr) (LibMCEnv_UIEnvironment pUIEnvironment, const char * pElementPath, const char * pPropertyName, const LibMCEnv_uint32 nValueBufferSize, LibMCEnv_uint32* pValueNeededChars, char * pValueBuffer);

/**
* returns a double variable of a UI element on the client
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pElementPath - Path of UI Element. Fails if element does not exist.
* @param[in] pPropertyName - Property name. Fails if property does not exist.
* @param[out] pValue - Current property Value
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvUIEnvironment_GetUIPropertyAsDoublePtr) (LibMCEnv_UIEnvironment pUIEnvironment, const char * pElementPath, const char * pPropertyName, LibMCEnv_double * pValue);

/**
* returns a integer variable of a UI element on the client
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pElementPath - Path of UI Element. Fails if element does not exist.
* @param[in] pPropertyName - Property name. Fails if property does not exist.
* @param[out] pValue - Current property Value
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvUIEnvironment_GetUIPropertyAsIntegerPtr) (LibMCEnv_UIEnvironment pUIEnvironment, const char * pElementPath, const char * pPropertyName, LibMCEnv_int64 * pValue);

/**
* returns a integer variable of a UI element on the client
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pElementPath - Path of UI Element. Fails if element does not exist.
* @param[in] pPropertyName - Property name. Fails if property does not exist.
* @param[out] pValue - Current property Value
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvUIEnvironment_GetUIPropertyAsBoolPtr) (LibMCEnv_UIEnvironment pUIEnvironment, const char * pElementPath, const char * pPropertyName, bool * pValue);

/**
* sets a string property of a UI element on the client.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pElementPath - Path of UI Element. Fails if element does not exist.
* @param[in] pPropertyName - Property name. Fails if property does not exist or is readonly.
* @param[in] pValue - New property Value
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvUIEnvironment_SetUIPropertyPtr) (LibMCEnv_UIEnvironment pUIEnvironment, const char * pElementPath, const char * pPropertyName, const char * pValue);

/**
* sets a uuid property of a UI element on the client.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pElementPath - Path of UI Element. Fails if element does not exist.
* @param[in] pPropertyName - Property name. Fails if property does not exist or is readonly.
* @param[in] pValue - New property Value
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvUIEnvironment_SetUIPropertyAsUUIDPtr) (LibMCEnv_UIEnvironment pUIEnvironment, const char * pElementPath, const char * pPropertyName, const char * pValue);

/**
* sets a double property of a UI element on the client.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pElementPath - Path of UI Element. Fails if element does not exist.
* @param[in] pPropertyName - Property name. Fails if property does not exist or is readonly.
* @param[in] dValue - New property Value
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvUIEnvironment_SetUIPropertyAsDoublePtr) (LibMCEnv_UIEnvironment pUIEnvironment, const char * pElementPath, const char * pPropertyName, LibMCEnv_double dValue);

/**
* sets a integer property of a UI element on the client.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pElementPath - Path of UI Element. Fails if element does not exist.
* @param[in] pPropertyName - Property name. Fails if property does not exist or is readonly.
* @param[in] nValue - New property Value
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvUIEnvironment_SetUIPropertyAsIntegerPtr) (LibMCEnv_UIEnvironment pUIEnvironment, const char * pElementPath, const char * pPropertyName, LibMCEnv_int64 nValue);

/**
* sets a bool property of a UI element on the client.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pElementPath - Path of UI Element. Fails if element does not exist.
* @param[in] pPropertyName - Property name. Fails if property does not exist or is readonly.
* @param[in] bValue - New property Value
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvUIEnvironment_SetUIPropertyAsBoolPtr) (LibMCEnv_UIEnvironment pUIEnvironment, const char * pElementPath, const char * pPropertyName, bool bValue);

/*************************************************************************************************************************
 Global functions
**************************************************************************************************************************/

/**
* retrieves the binary version of this library.
*
* @param[out] pMajor - returns the major version of this library
* @param[out] pMinor - returns the minor version of this library
* @param[out] pMicro - returns the micro version of this library
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvGetVersionPtr) (LibMCEnv_uint32 * pMajor, LibMCEnv_uint32 * pMinor, LibMCEnv_uint32 * pMicro);

/**
* Returns the last error recorded on this object
*
* @param[in] pInstance - Instance Handle
* @param[in] nErrorMessageBufferSize - size of the buffer (including trailing 0)
* @param[out] pErrorMessageNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pErrorMessageBuffer -  buffer of Message of the last error, may be NULL
* @param[out] pHasError - Is there a last error to query
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvGetLastErrorPtr) (LibMCEnv_Base pInstance, const LibMCEnv_uint32 nErrorMessageBufferSize, LibMCEnv_uint32* pErrorMessageNeededChars, char * pErrorMessageBuffer, bool * pHasError);

/**
* Releases shared ownership of an Instance
*
* @param[in] pInstance - Instance Handle
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvReleaseInstancePtr) (LibMCEnv_Base pInstance);

/**
* Acquires shared ownership of an Instance
*
* @param[in] pInstance - Instance Handle
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvAcquireInstancePtr) (LibMCEnv_Base pInstance);

/**
* Returns the address of the SymbolLookupMethod
*
* @param[out] pSymbolLookupMethod - Address of the SymbolAddressMethod
* @return error code or 0 (success)
*/
typedef LibMCEnvResult (*PLibMCEnvGetSymbolLookupMethodPtr) (LibMCEnv_pvoid * pSymbolLookupMethod);

/*************************************************************************************************************************
 Function Table Structure
**************************************************************************************************************************/

typedef struct {
	void * m_LibraryHandle;
	PLibMCEnvIterator_MoveNextPtr m_Iterator_MoveNext;
	PLibMCEnvIterator_MovePreviousPtr m_Iterator_MovePrevious;
	PLibMCEnvIterator_GetCurrentPtr m_Iterator_GetCurrent;
	PLibMCEnvIterator_ClonePtr m_Iterator_Clone;
	PLibMCEnvIterator_CountPtr m_Iterator_Count;
	PLibMCEnvToolpathPart_GetNamePtr m_ToolpathPart_GetName;
	PLibMCEnvToolpathPart_GetUUIDPtr m_ToolpathPart_GetUUID;
	PLibMCEnvToolpathPart_GetMeshUUIDPtr m_ToolpathPart_GetMeshUUID;
	PLibMCEnvToolpathPart_GetTransformPtr m_ToolpathPart_GetTransform;
	PLibMCEnvToolpathLayer_GetLayerDataUUIDPtr m_ToolpathLayer_GetLayerDataUUID;
	PLibMCEnvToolpathLayer_GetSegmentCountPtr m_ToolpathLayer_GetSegmentCount;
	PLibMCEnvToolpathLayer_GetSegmentInfoPtr m_ToolpathLayer_GetSegmentInfo;
	PLibMCEnvToolpathLayer_GetSegmentProfileUUIDPtr m_ToolpathLayer_GetSegmentProfileUUID;
	PLibMCEnvToolpathLayer_GetSegmentProfileValuePtr m_ToolpathLayer_GetSegmentProfileValue;
	PLibMCEnvToolpathLayer_GetSegmentProfileTypedValuePtr m_ToolpathLayer_GetSegmentProfileTypedValue;
	PLibMCEnvToolpathLayer_GetSegmentPartUUIDPtr m_ToolpathLayer_GetSegmentPartUUID;
	PLibMCEnvToolpathLayer_GetSegmentPointDataPtr m_ToolpathLayer_GetSegmentPointData;
	PLibMCEnvToolpathLayer_GetZValuePtr m_ToolpathLayer_GetZValue;
	PLibMCEnvToolpathLayer_GetUnitsPtr m_ToolpathLayer_GetUnits;
	PLibMCEnvToolpathAccessor_GetStorageUUIDPtr m_ToolpathAccessor_GetStorageUUID;
	PLibMCEnvToolpathAccessor_GetLayerCountPtr m_ToolpathAccessor_GetLayerCount;
	PLibMCEnvToolpathAccessor_LoadLayerPtr m_ToolpathAccessor_LoadLayer;
	PLibMCEnvToolpathAccessor_GetUnitsPtr m_ToolpathAccessor_GetUnits;
	PLibMCEnvToolpathAccessor_HasMetaDataPtr m_ToolpathAccessor_HasMetaData;
	PLibMCEnvToolpathAccessor_GetMetaDataValuePtr m_ToolpathAccessor_GetMetaDataValue;
	PLibMCEnvToolpathAccessor_GetMetaDataTypePtr m_ToolpathAccessor_GetMetaDataType;
	PLibMCEnvToolpathAccessor_GetPartCountPtr m_ToolpathAccessor_GetPartCount;
	PLibMCEnvToolpathAccessor_GetPartPtr m_ToolpathAccessor_GetPart;
	PLibMCEnvToolpathAccessor_FindPartByUUIDPtr m_ToolpathAccessor_FindPartByUUID;
	PLibMCEnvBuild_GetNamePtr m_Build_GetName;
	PLibMCEnvBuild_GetBuildUUIDPtr m_Build_GetBuildUUID;
	PLibMCEnvBuild_GetStorageUUIDPtr m_Build_GetStorageUUID;
	PLibMCEnvBuild_GetStorageSHA256Ptr m_Build_GetStorageSHA256;
	PLibMCEnvBuild_GetLayerCountPtr m_Build_GetLayerCount;
	PLibMCEnvBuild_LoadToolpathPtr m_Build_LoadToolpath;
	PLibMCEnvBuild_UnloadToolpathPtr m_Build_UnloadToolpath;
	PLibMCEnvBuild_ToolpathIsLoadedPtr m_Build_ToolpathIsLoaded;
	PLibMCEnvBuild_CreateToolpathAccessorPtr m_Build_CreateToolpathAccessor;
	PLibMCEnvBuild_AddBinaryDataPtr m_Build_AddBinaryData;
	PLibMCEnvWorkingFileExecution_GetStatusPtr m_WorkingFileExecution_GetStatus;
	PLibMCEnvWorkingFileExecution_ReturnStdOutPtr m_WorkingFileExecution_ReturnStdOut;
	PLibMCEnvWorkingFile_GetAbsoluteFileNamePtr m_WorkingFile_GetAbsoluteFileName;
	PLibMCEnvWorkingFile_GetSizePtr m_WorkingFile_GetSize;
	PLibMCEnvWorkingFile_CalculateSHA2Ptr m_WorkingFile_CalculateSHA2;
	PLibMCEnvWorkingFile_ExecuteFilePtr m_WorkingFile_ExecuteFile;
	PLibMCEnvWorkingFile_IsManagedPtr m_WorkingFile_IsManaged;
	PLibMCEnvWorkingFile_MakeManagedPtr m_WorkingFile_MakeManaged;
	PLibMCEnvWorkingFile_FileExistsPtr m_WorkingFile_FileExists;
	PLibMCEnvWorkingFile_DeleteFromDiskPtr m_WorkingFile_DeleteFromDisk;
	PLibMCEnvWorkingFileIterator_GetCurrentFilePtr m_WorkingFileIterator_GetCurrentFile;
	PLibMCEnvWorkingDirectory_IsActivePtr m_WorkingDirectory_IsActive;
	PLibMCEnvWorkingDirectory_GetAbsoluteFilePathPtr m_WorkingDirectory_GetAbsoluteFilePath;
	PLibMCEnvWorkingDirectory_StoreCustomDataPtr m_WorkingDirectory_StoreCustomData;
	PLibMCEnvWorkingDirectory_StoreCustomStringPtr m_WorkingDirectory_StoreCustomString;
	PLibMCEnvWorkingDirectory_StoreDriverDataPtr m_WorkingDirectory_StoreDriverData;
	PLibMCEnvWorkingDirectory_CleanUpPtr m_WorkingDirectory_CleanUp;
	PLibMCEnvWorkingDirectory_AddManagedFilePtr m_WorkingDirectory_AddManagedFile;
	PLibMCEnvWorkingDirectory_HasUnmanagedFilesPtr m_WorkingDirectory_HasUnmanagedFiles;
	PLibMCEnvWorkingDirectory_RetrieveUnmanagedFilesPtr m_WorkingDirectory_RetrieveUnmanagedFiles;
	PLibMCEnvWorkingDirectory_RetrieveManagedFilesPtr m_WorkingDirectory_RetrieveManagedFiles;
	PLibMCEnvWorkingDirectory_RetrieveAllFilesPtr m_WorkingDirectory_RetrieveAllFiles;
	PLibMCEnvDriverEnvironment_CreateWorkingDirectoryPtr m_DriverEnvironment_CreateWorkingDirectory;
	PLibMCEnvDriverEnvironment_RetrieveDriverDataPtr m_DriverEnvironment_RetrieveDriverData;
	PLibMCEnvDriverEnvironment_CreateToolpathAccessorPtr m_DriverEnvironment_CreateToolpathAccessor;
	PLibMCEnvDriverEnvironment_RegisterStringParameterPtr m_DriverEnvironment_RegisterStringParameter;
	PLibMCEnvDriverEnvironment_RegisterUUIDParameterPtr m_DriverEnvironment_RegisterUUIDParameter;
	PLibMCEnvDriverEnvironment_RegisterDoubleParameterPtr m_DriverEnvironment_RegisterDoubleParameter;
	PLibMCEnvDriverEnvironment_RegisterIntegerParameterPtr m_DriverEnvironment_RegisterIntegerParameter;
	PLibMCEnvDriverEnvironment_RegisterBoolParameterPtr m_DriverEnvironment_RegisterBoolParameter;
	PLibMCEnvDriverEnvironment_SetStringParameterPtr m_DriverEnvironment_SetStringParameter;
	PLibMCEnvDriverEnvironment_SetUUIDParameterPtr m_DriverEnvironment_SetUUIDParameter;
	PLibMCEnvDriverEnvironment_SetDoubleParameterPtr m_DriverEnvironment_SetDoubleParameter;
	PLibMCEnvDriverEnvironment_SetIntegerParameterPtr m_DriverEnvironment_SetIntegerParameter;
	PLibMCEnvDriverEnvironment_SetBoolParameterPtr m_DriverEnvironment_SetBoolParameter;
	PLibMCEnvDriverEnvironment_SleepPtr m_DriverEnvironment_Sleep;
	PLibMCEnvDriverEnvironment_GetGlobalTimerInMillisecondsPtr m_DriverEnvironment_GetGlobalTimerInMilliseconds;
	PLibMCEnvDriverEnvironment_LogMessagePtr m_DriverEnvironment_LogMessage;
	PLibMCEnvDriverEnvironment_LogWarningPtr m_DriverEnvironment_LogWarning;
	PLibMCEnvDriverEnvironment_LogInfoPtr m_DriverEnvironment_LogInfo;
	PLibMCEnvSignalTrigger_CanTriggerPtr m_SignalTrigger_CanTrigger;
	PLibMCEnvSignalTrigger_TriggerPtr m_SignalTrigger_Trigger;
	PLibMCEnvSignalTrigger_WaitForHandlingPtr m_SignalTrigger_WaitForHandling;
	PLibMCEnvSignalTrigger_GetNamePtr m_SignalTrigger_GetName;
	PLibMCEnvSignalTrigger_GetStateMachinePtr m_SignalTrigger_GetStateMachine;
	PLibMCEnvSignalTrigger_SetStringPtr m_SignalTrigger_SetString;
	PLibMCEnvSignalTrigger_SetUUIDPtr m_SignalTrigger_SetUUID;
	PLibMCEnvSignalTrigger_SetDoublePtr m_SignalTrigger_SetDouble;
	PLibMCEnvSignalTrigger_SetIntegerPtr m_SignalTrigger_SetInteger;
	PLibMCEnvSignalTrigger_SetBoolPtr m_SignalTrigger_SetBool;
	PLibMCEnvSignalTrigger_GetStringResultPtr m_SignalTrigger_GetStringResult;
	PLibMCEnvSignalTrigger_GetUUIDResultPtr m_SignalTrigger_GetUUIDResult;
	PLibMCEnvSignalTrigger_GetDoubleResultPtr m_SignalTrigger_GetDoubleResult;
	PLibMCEnvSignalTrigger_GetIntegerResultPtr m_SignalTrigger_GetIntegerResult;
	PLibMCEnvSignalTrigger_GetBoolResultPtr m_SignalTrigger_GetBoolResult;
	PLibMCEnvSignalHandler_SignalHandledPtr m_SignalHandler_SignalHandled;
	PLibMCEnvSignalHandler_GetNamePtr m_SignalHandler_GetName;
	PLibMCEnvSignalHandler_GetSignalIDPtr m_SignalHandler_GetSignalID;
	PLibMCEnvSignalHandler_GetStateMachinePtr m_SignalHandler_GetStateMachine;
	PLibMCEnvSignalHandler_GetStringPtr m_SignalHandler_GetString;
	PLibMCEnvSignalHandler_GetUUIDPtr m_SignalHandler_GetUUID;
	PLibMCEnvSignalHandler_GetDoublePtr m_SignalHandler_GetDouble;
	PLibMCEnvSignalHandler_GetIntegerPtr m_SignalHandler_GetInteger;
	PLibMCEnvSignalHandler_GetBoolPtr m_SignalHandler_GetBool;
	PLibMCEnvSignalHandler_SetStringResultPtr m_SignalHandler_SetStringResult;
	PLibMCEnvSignalHandler_SetUUIDResultPtr m_SignalHandler_SetUUIDResult;
	PLibMCEnvSignalHandler_SetDoubleResultPtr m_SignalHandler_SetDoubleResult;
	PLibMCEnvSignalHandler_SetIntegerResultPtr m_SignalHandler_SetIntegerResult;
	PLibMCEnvSignalHandler_SetBoolResultPtr m_SignalHandler_SetBoolResult;
	PLibMCEnvStateEnvironment_GetMachineStatePtr m_StateEnvironment_GetMachineState;
	PLibMCEnvStateEnvironment_PrepareSignalPtr m_StateEnvironment_PrepareSignal;
	PLibMCEnvStateEnvironment_WaitForSignalPtr m_StateEnvironment_WaitForSignal;
	PLibMCEnvStateEnvironment_GetDriverLibraryPtr m_StateEnvironment_GetDriverLibrary;
	PLibMCEnvStateEnvironment_CreateDriverAccessPtr m_StateEnvironment_CreateDriverAccess;
	PLibMCEnvStateEnvironment_GetBuildJobPtr m_StateEnvironment_GetBuildJob;
	PLibMCEnvStateEnvironment_UnloadAllToolpathesPtr m_StateEnvironment_UnloadAllToolpathes;
	PLibMCEnvStateEnvironment_SetNextStatePtr m_StateEnvironment_SetNextState;
	PLibMCEnvStateEnvironment_LogMessagePtr m_StateEnvironment_LogMessage;
	PLibMCEnvStateEnvironment_LogWarningPtr m_StateEnvironment_LogWarning;
	PLibMCEnvStateEnvironment_LogInfoPtr m_StateEnvironment_LogInfo;
	PLibMCEnvStateEnvironment_SleepPtr m_StateEnvironment_Sleep;
	PLibMCEnvStateEnvironment_CheckForTerminationPtr m_StateEnvironment_CheckForTermination;
	PLibMCEnvStateEnvironment_StoreSignalPtr m_StateEnvironment_StoreSignal;
	PLibMCEnvStateEnvironment_RetrieveSignalPtr m_StateEnvironment_RetrieveSignal;
	PLibMCEnvStateEnvironment_ClearStoredValuePtr m_StateEnvironment_ClearStoredValue;
	PLibMCEnvStateEnvironment_SetStringParameterPtr m_StateEnvironment_SetStringParameter;
	PLibMCEnvStateEnvironment_SetUUIDParameterPtr m_StateEnvironment_SetUUIDParameter;
	PLibMCEnvStateEnvironment_SetDoubleParameterPtr m_StateEnvironment_SetDoubleParameter;
	PLibMCEnvStateEnvironment_SetIntegerParameterPtr m_StateEnvironment_SetIntegerParameter;
	PLibMCEnvStateEnvironment_SetBoolParameterPtr m_StateEnvironment_SetBoolParameter;
	PLibMCEnvStateEnvironment_GetStringParameterPtr m_StateEnvironment_GetStringParameter;
	PLibMCEnvStateEnvironment_GetUUIDParameterPtr m_StateEnvironment_GetUUIDParameter;
	PLibMCEnvStateEnvironment_GetDoubleParameterPtr m_StateEnvironment_GetDoubleParameter;
	PLibMCEnvStateEnvironment_GetIntegerParameterPtr m_StateEnvironment_GetIntegerParameter;
	PLibMCEnvStateEnvironment_GetBoolParameterPtr m_StateEnvironment_GetBoolParameter;
	PLibMCEnvStateEnvironment_LoadResourceDataPtr m_StateEnvironment_LoadResourceData;
	PLibMCEnvUIEnvironment_ActivateModalDialogPtr m_UIEnvironment_ActivateModalDialog;
	PLibMCEnvUIEnvironment_CloseModalDialogPtr m_UIEnvironment_CloseModalDialog;
	PLibMCEnvUIEnvironment_ActivatePagePtr m_UIEnvironment_ActivatePage;
	PLibMCEnvUIEnvironment_RetrieveEventSenderPtr m_UIEnvironment_RetrieveEventSender;
	PLibMCEnvUIEnvironment_PrepareSignalPtr m_UIEnvironment_PrepareSignal;
	PLibMCEnvUIEnvironment_GetMachineStatePtr m_UIEnvironment_GetMachineState;
	PLibMCEnvUIEnvironment_LogMessagePtr m_UIEnvironment_LogMessage;
	PLibMCEnvUIEnvironment_LogWarningPtr m_UIEnvironment_LogWarning;
	PLibMCEnvUIEnvironment_LogInfoPtr m_UIEnvironment_LogInfo;
	PLibMCEnvUIEnvironment_GetMachineParameterPtr m_UIEnvironment_GetMachineParameter;
	PLibMCEnvUIEnvironment_GetMachineParameterAsUUIDPtr m_UIEnvironment_GetMachineParameterAsUUID;
	PLibMCEnvUIEnvironment_GetMachineParameterAsDoublePtr m_UIEnvironment_GetMachineParameterAsDouble;
	PLibMCEnvUIEnvironment_GetMachineParameterAsIntegerPtr m_UIEnvironment_GetMachineParameterAsInteger;
	PLibMCEnvUIEnvironment_GetMachineParameterAsBoolPtr m_UIEnvironment_GetMachineParameterAsBool;
	PLibMCEnvUIEnvironment_GetUIPropertyPtr m_UIEnvironment_GetUIProperty;
	PLibMCEnvUIEnvironment_GetUIPropertyAsUUIDPtr m_UIEnvironment_GetUIPropertyAsUUID;
	PLibMCEnvUIEnvironment_GetUIPropertyAsDoublePtr m_UIEnvironment_GetUIPropertyAsDouble;
	PLibMCEnvUIEnvironment_GetUIPropertyAsIntegerPtr m_UIEnvironment_GetUIPropertyAsInteger;
	PLibMCEnvUIEnvironment_GetUIPropertyAsBoolPtr m_UIEnvironment_GetUIPropertyAsBool;
	PLibMCEnvUIEnvironment_SetUIPropertyPtr m_UIEnvironment_SetUIProperty;
	PLibMCEnvUIEnvironment_SetUIPropertyAsUUIDPtr m_UIEnvironment_SetUIPropertyAsUUID;
	PLibMCEnvUIEnvironment_SetUIPropertyAsDoublePtr m_UIEnvironment_SetUIPropertyAsDouble;
	PLibMCEnvUIEnvironment_SetUIPropertyAsIntegerPtr m_UIEnvironment_SetUIPropertyAsInteger;
	PLibMCEnvUIEnvironment_SetUIPropertyAsBoolPtr m_UIEnvironment_SetUIPropertyAsBool;
	PLibMCEnvGetVersionPtr m_GetVersion;
	PLibMCEnvGetLastErrorPtr m_GetLastError;
	PLibMCEnvReleaseInstancePtr m_ReleaseInstance;
	PLibMCEnvAcquireInstancePtr m_AcquireInstance;
	PLibMCEnvGetSymbolLookupMethodPtr m_GetSymbolLookupMethod;
} sLibMCEnvDynamicWrapperTable;

#endif // __LIBMCENV_DYNAMICHEADER_CPPTYPES

