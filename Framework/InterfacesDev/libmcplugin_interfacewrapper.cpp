/*++

Copyright (C) 2020 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.8.0-develop.

Abstract: This is an autogenerated C++ implementation file in order to allow easy
development of MC Plugin Interface. The functions in this file need to be implemented. It needs to be generated only once.

Interface version: 1.0.0

*/

#include "libmcplugin_abi.hpp"
#include "libmcplugin_interfaces.hpp"
#include "libmcplugin_interfaceexception.hpp"

#include <map>

using namespace LibMCPlugin::Impl;

LibMCPluginResult handleLibMCPluginException(IBase * pIBaseClass, ELibMCPluginInterfaceException & Exception)
{
	LibMCPluginResult errorCode = Exception.getErrorCode();

	if (pIBaseClass != nullptr)
		pIBaseClass->RegisterErrorMessage(Exception.what());

	return errorCode;
}

LibMCPluginResult handleStdException(IBase * pIBaseClass, std::exception & Exception)
{
	LibMCPluginResult errorCode = LIBMCPLUGIN_ERROR_GENERICEXCEPTION;

	if (pIBaseClass != nullptr)
		pIBaseClass->RegisterErrorMessage(Exception.what());

	return errorCode;
}

LibMCPluginResult handleUnhandledException(IBase * pIBaseClass)
{
	LibMCPluginResult errorCode = LIBMCPLUGIN_ERROR_GENERICEXCEPTION;

	if (pIBaseClass != nullptr)
		pIBaseClass->RegisterErrorMessage("Unhandled Exception");

	return errorCode;
}



/*************************************************************************************************************************
 Class implementation for Base
**************************************************************************************************************************/

/*************************************************************************************************************************
 Class implementation for State
**************************************************************************************************************************/
LibMCPluginResult libmcplugin_state_execute(LibMCPlugin_State pState, LibMCEnv_StateEnvironment pStateEnvironment)
{
	IBase* pIBaseClass = (IBase *)pState;

	try {
		LibMCEnv::PStateEnvironment pIStateEnvironment = std::make_shared<LibMCEnv::CStateEnvironment>(CWrapper::sPLibMCEnvWrapper.get(), pStateEnvironment);
		CWrapper::sPLibMCEnvWrapper->AcquireInstance(pIStateEnvironment.get());
		if (!pIStateEnvironment)
			throw ELibMCPluginInterfaceException (LIBMCPLUGIN_ERROR_INVALIDCAST);
		
		IState* pIState = dynamic_cast<IState*>(pIBaseClass);
		if (!pIState)
			throw ELibMCPluginInterfaceException(LIBMCPLUGIN_ERROR_INVALIDCAST);
		
		pIState->Execute(pIStateEnvironment);

		return LIBMCPLUGIN_SUCCESS;
	}
	catch (ELibMCPluginInterfaceException & Exception) {
		return handleLibMCPluginException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}


/*************************************************************************************************************************
 Class implementation for StateFactory
**************************************************************************************************************************/
LibMCPluginResult libmcplugin_statefactory_createstate(LibMCPlugin_StateFactory pStateFactory, const char * pStateName, LibMCPlugin_State * pState)
{
	IBase* pIBaseClass = (IBase *)pStateFactory;

	try {
		if (pStateName == nullptr)
			throw ELibMCPluginInterfaceException (LIBMCPLUGIN_ERROR_INVALIDPARAM);
		if (pState == nullptr)
			throw ELibMCPluginInterfaceException (LIBMCPLUGIN_ERROR_INVALIDPARAM);
		std::string sStateName(pStateName);
		IBase* pBaseState(nullptr);
		IStateFactory* pIStateFactory = dynamic_cast<IStateFactory*>(pIBaseClass);
		if (!pIStateFactory)
			throw ELibMCPluginInterfaceException(LIBMCPLUGIN_ERROR_INVALIDCAST);
		
		pBaseState = pIStateFactory->CreateState(sStateName);

		*pState = (IBase*)(pBaseState);
		return LIBMCPLUGIN_SUCCESS;
	}
	catch (ELibMCPluginInterfaceException & Exception) {
		return handleLibMCPluginException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}



/*************************************************************************************************************************
 Function table lookup implementation
**************************************************************************************************************************/

LibMCPluginResult LibMCPlugin::Impl::LibMCPlugin_GetProcAddress (const char * pProcName, void ** ppProcAddress)
{
	if (pProcName == nullptr)
		return LIBMCPLUGIN_ERROR_INVALIDPARAM;
	if (ppProcAddress == nullptr)
		return LIBMCPLUGIN_ERROR_INVALIDPARAM;
	*ppProcAddress = nullptr;
	std::string sProcName (pProcName);
	
	if (sProcName == "libmcplugin_state_execute") 
		*ppProcAddress = (void*) &libmcplugin_state_execute;
	if (sProcName == "libmcplugin_statefactory_createstate") 
		*ppProcAddress = (void*) &libmcplugin_statefactory_createstate;
	if (sProcName == "libmcplugin_getversion") 
		*ppProcAddress = (void*) &libmcplugin_getversion;
	if (sProcName == "libmcplugin_getlasterror") 
		*ppProcAddress = (void*) &libmcplugin_getlasterror;
	if (sProcName == "libmcplugin_releaseinstance") 
		*ppProcAddress = (void*) &libmcplugin_releaseinstance;
	if (sProcName == "libmcplugin_acquireinstance") 
		*ppProcAddress = (void*) &libmcplugin_acquireinstance;
	if (sProcName == "libmcplugin_injectcomponent") 
		*ppProcAddress = (void*) &libmcplugin_injectcomponent;
	if (sProcName == "libmcplugin_createstatefactory") 
		*ppProcAddress = (void*) &libmcplugin_createstatefactory;
	
	if (*ppProcAddress == nullptr) 
		return LIBMCPLUGIN_ERROR_COULDNOTFINDLIBRARYEXPORT;
	return LIBMCPLUGIN_SUCCESS;
}

/*************************************************************************************************************************
 Global functions implementation
**************************************************************************************************************************/
LibMCPluginResult libmcplugin_getversion(LibMCPlugin_uint32 * pMajor, LibMCPlugin_uint32 * pMinor, LibMCPlugin_uint32 * pMicro)
{
	IBase* pIBaseClass = nullptr;

	try {
		if (!pMajor)
			throw ELibMCPluginInterfaceException (LIBMCPLUGIN_ERROR_INVALIDPARAM);
		if (!pMinor)
			throw ELibMCPluginInterfaceException (LIBMCPLUGIN_ERROR_INVALIDPARAM);
		if (!pMicro)
			throw ELibMCPluginInterfaceException (LIBMCPLUGIN_ERROR_INVALIDPARAM);
		CWrapper::GetVersion(*pMajor, *pMinor, *pMicro);

		return LIBMCPLUGIN_SUCCESS;
	}
	catch (ELibMCPluginInterfaceException & Exception) {
		return handleLibMCPluginException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCPluginResult libmcplugin_getlasterror(LibMCPlugin_Base pInstance, const LibMCPlugin_uint32 nErrorMessageBufferSize, LibMCPlugin_uint32* pErrorMessageNeededChars, char * pErrorMessageBuffer, bool * pHasError)
{
	IBase* pIBaseClass = nullptr;

	try {
		if ( (!pErrorMessageBuffer) && !(pErrorMessageNeededChars) )
			throw ELibMCPluginInterfaceException (LIBMCPLUGIN_ERROR_INVALIDPARAM);
		if (pHasError == nullptr)
			throw ELibMCPluginInterfaceException (LIBMCPLUGIN_ERROR_INVALIDPARAM);
		IBase* pIBaseClassInstance = (IBase *)pInstance;
		IBase* pIInstance = dynamic_cast<IBase*>(pIBaseClassInstance);
		if (!pIInstance)
			throw ELibMCPluginInterfaceException (LIBMCPLUGIN_ERROR_INVALIDCAST);
		
		std::string sErrorMessage("");
		*pHasError = CWrapper::GetLastError(pIInstance, sErrorMessage);

		if (pErrorMessageNeededChars)
			*pErrorMessageNeededChars = (LibMCPlugin_uint32) (sErrorMessage.size()+1);
		if (pErrorMessageBuffer) {
			if (sErrorMessage.size() >= nErrorMessageBufferSize)
				throw ELibMCPluginInterfaceException (LIBMCPLUGIN_ERROR_BUFFERTOOSMALL);
			for (size_t iErrorMessage = 0; iErrorMessage < sErrorMessage.size(); iErrorMessage++)
				pErrorMessageBuffer[iErrorMessage] = sErrorMessage[iErrorMessage];
			pErrorMessageBuffer[sErrorMessage.size()] = 0;
		}
		return LIBMCPLUGIN_SUCCESS;
	}
	catch (ELibMCPluginInterfaceException & Exception) {
		return handleLibMCPluginException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCPluginResult libmcplugin_releaseinstance(LibMCPlugin_Base pInstance)
{
	IBase* pIBaseClass = nullptr;

	try {
		IBase* pIBaseClassInstance = (IBase *)pInstance;
		IBase* pIInstance = dynamic_cast<IBase*>(pIBaseClassInstance);
		if (!pIInstance)
			throw ELibMCPluginInterfaceException (LIBMCPLUGIN_ERROR_INVALIDCAST);
		
		CWrapper::ReleaseInstance(pIInstance);

		return LIBMCPLUGIN_SUCCESS;
	}
	catch (ELibMCPluginInterfaceException & Exception) {
		return handleLibMCPluginException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCPluginResult libmcplugin_acquireinstance(LibMCPlugin_Base pInstance)
{
	IBase* pIBaseClass = nullptr;

	try {
		IBase* pIBaseClassInstance = (IBase *)pInstance;
		IBase* pIInstance = dynamic_cast<IBase*>(pIBaseClassInstance);
		if (!pIInstance)
			throw ELibMCPluginInterfaceException (LIBMCPLUGIN_ERROR_INVALIDCAST);
		
		CWrapper::AcquireInstance(pIInstance);

		return LIBMCPLUGIN_SUCCESS;
	}
	catch (ELibMCPluginInterfaceException & Exception) {
		return handleLibMCPluginException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCPluginResult libmcplugin_injectcomponent(const char * pNameSpace, LibMCPlugin_pvoid pSymbolAddressMethod)
{
	IBase* pIBaseClass = nullptr;

	try {
		if (pNameSpace == nullptr)
			throw ELibMCPluginInterfaceException (LIBMCPLUGIN_ERROR_INVALIDPARAM);
		std::string sNameSpace(pNameSpace);
		
		bool bNameSpaceFound = false;
		
		if (sNameSpace == "LibMCEnv") {
			if (CWrapper::sPLibMCEnvWrapper.get() != nullptr) {
				throw ELibMCPluginInterfaceException(LIBMCPLUGIN_ERROR_COULDNOTLOADLIBRARY);
			}
			CWrapper::sPLibMCEnvWrapper = LibMCEnv::CWrapper::loadLibraryFromSymbolLookupMethod(pSymbolAddressMethod);
			bNameSpaceFound = true;
		}
		
		if (!bNameSpaceFound)
			throw ELibMCPluginInterfaceException(LIBMCPLUGIN_ERROR_COULDNOTLOADLIBRARY);
		
		return LIBMCPLUGIN_SUCCESS;
	}
	catch (ELibMCPluginInterfaceException & Exception) {
		return handleLibMCPluginException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCPluginResult libmcplugin_createstatefactory(const char * pInstanceName, LibMCPlugin_StateFactory * pInstance)
{
	IBase* pIBaseClass = nullptr;

	try {
		if (pInstanceName == nullptr)
			throw ELibMCPluginInterfaceException (LIBMCPLUGIN_ERROR_INVALIDPARAM);
		if (pInstance == nullptr)
			throw ELibMCPluginInterfaceException (LIBMCPLUGIN_ERROR_INVALIDPARAM);
		std::string sInstanceName(pInstanceName);
		IBase* pBaseInstance(nullptr);
		pBaseInstance = CWrapper::CreateStateFactory(sInstanceName);

		*pInstance = (IBase*)(pBaseInstance);
		return LIBMCPLUGIN_SUCCESS;
	}
	catch (ELibMCPluginInterfaceException & Exception) {
		return handleLibMCPluginException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}


