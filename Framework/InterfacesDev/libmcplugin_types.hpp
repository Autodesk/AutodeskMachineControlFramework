/*++

Copyright (C) 2020 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.8.0-develop.

Abstract: This is an autogenerated C++-Header file with basic types in
order to allow an easy use of MC Plugin Interface

Interface version: 1.0.0

*/

#ifndef __LIBMCPLUGIN_TYPES_HEADER_CPP
#define __LIBMCPLUGIN_TYPES_HEADER_CPP


/*************************************************************************************************************************
 Scalar types definition
**************************************************************************************************************************/

#ifdef LIBMCPLUGIN_USELEGACYINTEGERTYPES

typedef unsigned char LibMCPlugin_uint8;
typedef unsigned short LibMCPlugin_uint16 ;
typedef unsigned int LibMCPlugin_uint32;
typedef unsigned long long LibMCPlugin_uint64;
typedef char LibMCPlugin_int8;
typedef short LibMCPlugin_int16;
typedef int LibMCPlugin_int32;
typedef long long LibMCPlugin_int64;

#else // LIBMCPLUGIN_USELEGACYINTEGERTYPES

#include <stdint.h>

typedef uint8_t LibMCPlugin_uint8;
typedef uint16_t LibMCPlugin_uint16;
typedef uint32_t LibMCPlugin_uint32;
typedef uint64_t LibMCPlugin_uint64;
typedef int8_t LibMCPlugin_int8;
typedef int16_t LibMCPlugin_int16;
typedef int32_t LibMCPlugin_int32;
typedef int64_t LibMCPlugin_int64 ;

#endif // LIBMCPLUGIN_USELEGACYINTEGERTYPES

typedef float LibMCPlugin_single;
typedef double LibMCPlugin_double;

/*************************************************************************************************************************
 General type definitions
**************************************************************************************************************************/

typedef LibMCPlugin_int32 LibMCPluginResult;
typedef void * LibMCPluginHandle;
typedef void * LibMCPlugin_pvoid;

/*************************************************************************************************************************
 Version for LibMCPlugin
**************************************************************************************************************************/

#define LIBMCPLUGIN_VERSION_MAJOR 1
#define LIBMCPLUGIN_VERSION_MINOR 0
#define LIBMCPLUGIN_VERSION_MICRO 0
#define LIBMCPLUGIN_VERSION_PRERELEASEINFO ""
#define LIBMCPLUGIN_VERSION_BUILDINFO ""

/*************************************************************************************************************************
 Error constants for LibMCPlugin
**************************************************************************************************************************/

#define LIBMCPLUGIN_SUCCESS 0
#define LIBMCPLUGIN_ERROR_NOTIMPLEMENTED 1 /** functionality not implemented */
#define LIBMCPLUGIN_ERROR_INVALIDPARAM 2 /** an invalid parameter was passed */
#define LIBMCPLUGIN_ERROR_INVALIDCAST 3 /** a type cast failed */
#define LIBMCPLUGIN_ERROR_BUFFERTOOSMALL 4 /** a provided buffer is too small */
#define LIBMCPLUGIN_ERROR_GENERICEXCEPTION 5 /** a generic exception occurred */
#define LIBMCPLUGIN_ERROR_COULDNOTLOADLIBRARY 6 /** the library could not be loaded */
#define LIBMCPLUGIN_ERROR_COULDNOTFINDLIBRARYEXPORT 7 /** a required exported symbol could not be found in the library */
#define LIBMCPLUGIN_ERROR_INCOMPATIBLEBINARYVERSION 8 /** the version of the binary interface does not match the bindings interface */
#define LIBMCPLUGIN_ERROR_INVALIDSTATENAME 9 /** invalid state name */
#define LIBMCPLUGIN_ERROR_PLUGINERROR 1000 /** a plugin error occured */

/*************************************************************************************************************************
 Error strings for LibMCPlugin
**************************************************************************************************************************/

inline const char * LIBMCPLUGIN_GETERRORSTRING (LibMCPluginResult nErrorCode) {
  switch (nErrorCode) {
    case LIBMCPLUGIN_SUCCESS: return "no error";
    case LIBMCPLUGIN_ERROR_NOTIMPLEMENTED: return "functionality not implemented";
    case LIBMCPLUGIN_ERROR_INVALIDPARAM: return "an invalid parameter was passed";
    case LIBMCPLUGIN_ERROR_INVALIDCAST: return "a type cast failed";
    case LIBMCPLUGIN_ERROR_BUFFERTOOSMALL: return "a provided buffer is too small";
    case LIBMCPLUGIN_ERROR_GENERICEXCEPTION: return "a generic exception occurred";
    case LIBMCPLUGIN_ERROR_COULDNOTLOADLIBRARY: return "the library could not be loaded";
    case LIBMCPLUGIN_ERROR_COULDNOTFINDLIBRARYEXPORT: return "a required exported symbol could not be found in the library";
    case LIBMCPLUGIN_ERROR_INCOMPATIBLEBINARYVERSION: return "the version of the binary interface does not match the bindings interface";
    case LIBMCPLUGIN_ERROR_INVALIDSTATENAME: return "invalid state name";
    case LIBMCPLUGIN_ERROR_PLUGINERROR: return "a plugin error occured";
    default: return "unknown error";
  }
}

/*************************************************************************************************************************
 Declaration of handle classes 
**************************************************************************************************************************/

typedef LibMCPluginHandle LibMCPlugin_Base;
typedef LibMCPluginHandle LibMCPlugin_State;
typedef LibMCPluginHandle LibMCPlugin_StateFactory;

namespace LibMCPlugin {

} // namespace LibMCPlugin;

// define legacy C-names for enums, structs and function types

#endif // __LIBMCPLUGIN_TYPES_HEADER_CPP
