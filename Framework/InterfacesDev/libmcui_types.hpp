/*++

Copyright (C) 2020 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.8.0-develop.

Abstract: This is an autogenerated C++-Header file with basic types in
order to allow an easy use of MC UI Plugin Interface

Interface version: 1.0.0

*/

#ifndef __LIBMCUI_TYPES_HEADER_CPP
#define __LIBMCUI_TYPES_HEADER_CPP


/*************************************************************************************************************************
 Scalar types definition
**************************************************************************************************************************/

#ifdef LIBMCUI_USELEGACYINTEGERTYPES

typedef unsigned char LibMCUI_uint8;
typedef unsigned short LibMCUI_uint16 ;
typedef unsigned int LibMCUI_uint32;
typedef unsigned long long LibMCUI_uint64;
typedef char LibMCUI_int8;
typedef short LibMCUI_int16;
typedef int LibMCUI_int32;
typedef long long LibMCUI_int64;

#else // LIBMCUI_USELEGACYINTEGERTYPES

#include <stdint.h>

typedef uint8_t LibMCUI_uint8;
typedef uint16_t LibMCUI_uint16;
typedef uint32_t LibMCUI_uint32;
typedef uint64_t LibMCUI_uint64;
typedef int8_t LibMCUI_int8;
typedef int16_t LibMCUI_int16;
typedef int32_t LibMCUI_int32;
typedef int64_t LibMCUI_int64 ;

#endif // LIBMCUI_USELEGACYINTEGERTYPES

typedef float LibMCUI_single;
typedef double LibMCUI_double;

/*************************************************************************************************************************
 General type definitions
**************************************************************************************************************************/

typedef LibMCUI_int32 LibMCUIResult;
typedef void * LibMCUIHandle;
typedef void * LibMCUI_pvoid;

/*************************************************************************************************************************
 Version for LibMCUI
**************************************************************************************************************************/

#define LIBMCUI_VERSION_MAJOR 1
#define LIBMCUI_VERSION_MINOR 0
#define LIBMCUI_VERSION_MICRO 0
#define LIBMCUI_VERSION_PRERELEASEINFO ""
#define LIBMCUI_VERSION_BUILDINFO ""

/*************************************************************************************************************************
 Error constants for LibMCUI
**************************************************************************************************************************/

#define LIBMCUI_SUCCESS 0
#define LIBMCUI_ERROR_NOTIMPLEMENTED 1 /** functionality not implemented */
#define LIBMCUI_ERROR_INVALIDPARAM 2 /** an invalid parameter was passed */
#define LIBMCUI_ERROR_INVALIDCAST 3 /** a type cast failed */
#define LIBMCUI_ERROR_BUFFERTOOSMALL 4 /** a provided buffer is too small */
#define LIBMCUI_ERROR_GENERICEXCEPTION 5 /** a generic exception occurred */
#define LIBMCUI_ERROR_COULDNOTLOADLIBRARY 6 /** the library could not be loaded */
#define LIBMCUI_ERROR_COULDNOTFINDLIBRARYEXPORT 7 /** a required exported symbol could not be found in the library */
#define LIBMCUI_ERROR_INCOMPATIBLEBINARYVERSION 8 /** the version of the binary interface does not match the bindings interface */
#define LIBMCUI_ERROR_UIERROR 2000 /** a ui error occured */
#define LIBMCUI_ERROR_INVALIDEVENTNAME 2001 /** invalid event name */

/*************************************************************************************************************************
 Error strings for LibMCUI
**************************************************************************************************************************/

inline const char * LIBMCUI_GETERRORSTRING (LibMCUIResult nErrorCode) {
  switch (nErrorCode) {
    case LIBMCUI_SUCCESS: return "no error";
    case LIBMCUI_ERROR_NOTIMPLEMENTED: return "functionality not implemented";
    case LIBMCUI_ERROR_INVALIDPARAM: return "an invalid parameter was passed";
    case LIBMCUI_ERROR_INVALIDCAST: return "a type cast failed";
    case LIBMCUI_ERROR_BUFFERTOOSMALL: return "a provided buffer is too small";
    case LIBMCUI_ERROR_GENERICEXCEPTION: return "a generic exception occurred";
    case LIBMCUI_ERROR_COULDNOTLOADLIBRARY: return "the library could not be loaded";
    case LIBMCUI_ERROR_COULDNOTFINDLIBRARYEXPORT: return "a required exported symbol could not be found in the library";
    case LIBMCUI_ERROR_INCOMPATIBLEBINARYVERSION: return "the version of the binary interface does not match the bindings interface";
    case LIBMCUI_ERROR_UIERROR: return "a ui error occured";
    case LIBMCUI_ERROR_INVALIDEVENTNAME: return "invalid event name";
    default: return "unknown error";
  }
}

/*************************************************************************************************************************
 Declaration of handle classes 
**************************************************************************************************************************/

typedef LibMCUIHandle LibMCUI_Base;
typedef LibMCUIHandle LibMCUI_Event;
typedef LibMCUIHandle LibMCUI_EventHandler;

namespace LibMCUI {

} // namespace LibMCUI;

// define legacy C-names for enums, structs and function types

#endif // __LIBMCUI_TYPES_HEADER_CPP
