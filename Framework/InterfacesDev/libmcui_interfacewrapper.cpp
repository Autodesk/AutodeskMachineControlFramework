/*++

Copyright (C) 2020 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.8.0-develop.

Abstract: This is an autogenerated C++ implementation file in order to allow easy
development of MC UI Plugin Interface. The functions in this file need to be implemented. It needs to be generated only once.

Interface version: 1.0.0

*/

#include "libmcui_abi.hpp"
#include "libmcui_interfaces.hpp"
#include "libmcui_interfaceexception.hpp"

#include <map>

using namespace LibMCUI::Impl;

LibMCUIResult handleLibMCUIException(IBase * pIBaseClass, ELibMCUIInterfaceException & Exception)
{
	LibMCUIResult errorCode = Exception.getErrorCode();

	if (pIBaseClass != nullptr)
		pIBaseClass->RegisterErrorMessage(Exception.what());

	return errorCode;
}

LibMCUIResult handleStdException(IBase * pIBaseClass, std::exception & Exception)
{
	LibMCUIResult errorCode = LIBMCUI_ERROR_GENERICEXCEPTION;

	if (pIBaseClass != nullptr)
		pIBaseClass->RegisterErrorMessage(Exception.what());

	return errorCode;
}

LibMCUIResult handleUnhandledException(IBase * pIBaseClass)
{
	LibMCUIResult errorCode = LIBMCUI_ERROR_GENERICEXCEPTION;

	if (pIBaseClass != nullptr)
		pIBaseClass->RegisterErrorMessage("Unhandled Exception");

	return errorCode;
}



/*************************************************************************************************************************
 Class implementation for Base
**************************************************************************************************************************/

/*************************************************************************************************************************
 Class implementation for Event
**************************************************************************************************************************/
LibMCUIResult libmcui_event_handle(LibMCUI_Event pEvent, LibMCEnv_UIEnvironment pUIEnvironment)
{
	IBase* pIBaseClass = (IBase *)pEvent;

	try {
		LibMCEnv::PUIEnvironment pIUIEnvironment = std::make_shared<LibMCEnv::CUIEnvironment>(CWrapper::sPLibMCEnvWrapper.get(), pUIEnvironment);
		CWrapper::sPLibMCEnvWrapper->AcquireInstance(pIUIEnvironment.get());
		if (!pIUIEnvironment)
			throw ELibMCUIInterfaceException (LIBMCUI_ERROR_INVALIDCAST);
		
		IEvent* pIEvent = dynamic_cast<IEvent*>(pIBaseClass);
		if (!pIEvent)
			throw ELibMCUIInterfaceException(LIBMCUI_ERROR_INVALIDCAST);
		
		pIEvent->Handle(pIUIEnvironment);

		return LIBMCUI_SUCCESS;
	}
	catch (ELibMCUIInterfaceException & Exception) {
		return handleLibMCUIException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}


/*************************************************************************************************************************
 Class implementation for EventHandler
**************************************************************************************************************************/
LibMCUIResult libmcui_eventhandler_createevent(LibMCUI_EventHandler pEventHandler, const char * pEventName, LibMCEnv_UIEnvironment pUIEnvironment, LibMCUI_Event * pInstance)
{
	IBase* pIBaseClass = (IBase *)pEventHandler;

	try {
		if (pEventName == nullptr)
			throw ELibMCUIInterfaceException (LIBMCUI_ERROR_INVALIDPARAM);
		if (pInstance == nullptr)
			throw ELibMCUIInterfaceException (LIBMCUI_ERROR_INVALIDPARAM);
		std::string sEventName(pEventName);
		LibMCEnv::PUIEnvironment pIUIEnvironment = std::make_shared<LibMCEnv::CUIEnvironment>(CWrapper::sPLibMCEnvWrapper.get(), pUIEnvironment);
		CWrapper::sPLibMCEnvWrapper->AcquireInstance(pIUIEnvironment.get());
		if (!pIUIEnvironment)
			throw ELibMCUIInterfaceException (LIBMCUI_ERROR_INVALIDCAST);
		
		IBase* pBaseInstance(nullptr);
		IEventHandler* pIEventHandler = dynamic_cast<IEventHandler*>(pIBaseClass);
		if (!pIEventHandler)
			throw ELibMCUIInterfaceException(LIBMCUI_ERROR_INVALIDCAST);
		
		pBaseInstance = pIEventHandler->CreateEvent(sEventName, pIUIEnvironment);

		*pInstance = (IBase*)(pBaseInstance);
		return LIBMCUI_SUCCESS;
	}
	catch (ELibMCUIInterfaceException & Exception) {
		return handleLibMCUIException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}



/*************************************************************************************************************************
 Function table lookup implementation
**************************************************************************************************************************/

LibMCUIResult LibMCUI::Impl::LibMCUI_GetProcAddress (const char * pProcName, void ** ppProcAddress)
{
	if (pProcName == nullptr)
		return LIBMCUI_ERROR_INVALIDPARAM;
	if (ppProcAddress == nullptr)
		return LIBMCUI_ERROR_INVALIDPARAM;
	*ppProcAddress = nullptr;
	std::string sProcName (pProcName);
	
	if (sProcName == "libmcui_event_handle") 
		*ppProcAddress = (void*) &libmcui_event_handle;
	if (sProcName == "libmcui_eventhandler_createevent") 
		*ppProcAddress = (void*) &libmcui_eventhandler_createevent;
	if (sProcName == "libmcui_getversion") 
		*ppProcAddress = (void*) &libmcui_getversion;
	if (sProcName == "libmcui_getlasterror") 
		*ppProcAddress = (void*) &libmcui_getlasterror;
	if (sProcName == "libmcui_releaseinstance") 
		*ppProcAddress = (void*) &libmcui_releaseinstance;
	if (sProcName == "libmcui_acquireinstance") 
		*ppProcAddress = (void*) &libmcui_acquireinstance;
	if (sProcName == "libmcui_injectcomponent") 
		*ppProcAddress = (void*) &libmcui_injectcomponent;
	if (sProcName == "libmcui_createeventhandler") 
		*ppProcAddress = (void*) &libmcui_createeventhandler;
	
	if (*ppProcAddress == nullptr) 
		return LIBMCUI_ERROR_COULDNOTFINDLIBRARYEXPORT;
	return LIBMCUI_SUCCESS;
}

/*************************************************************************************************************************
 Global functions implementation
**************************************************************************************************************************/
LibMCUIResult libmcui_getversion(LibMCUI_uint32 * pMajor, LibMCUI_uint32 * pMinor, LibMCUI_uint32 * pMicro)
{
	IBase* pIBaseClass = nullptr;

	try {
		if (!pMajor)
			throw ELibMCUIInterfaceException (LIBMCUI_ERROR_INVALIDPARAM);
		if (!pMinor)
			throw ELibMCUIInterfaceException (LIBMCUI_ERROR_INVALIDPARAM);
		if (!pMicro)
			throw ELibMCUIInterfaceException (LIBMCUI_ERROR_INVALIDPARAM);
		CWrapper::GetVersion(*pMajor, *pMinor, *pMicro);

		return LIBMCUI_SUCCESS;
	}
	catch (ELibMCUIInterfaceException & Exception) {
		return handleLibMCUIException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCUIResult libmcui_getlasterror(LibMCUI_Base pInstance, const LibMCUI_uint32 nErrorMessageBufferSize, LibMCUI_uint32* pErrorMessageNeededChars, char * pErrorMessageBuffer, bool * pHasError)
{
	IBase* pIBaseClass = nullptr;

	try {
		if ( (!pErrorMessageBuffer) && !(pErrorMessageNeededChars) )
			throw ELibMCUIInterfaceException (LIBMCUI_ERROR_INVALIDPARAM);
		if (pHasError == nullptr)
			throw ELibMCUIInterfaceException (LIBMCUI_ERROR_INVALIDPARAM);
		IBase* pIBaseClassInstance = (IBase *)pInstance;
		IBase* pIInstance = dynamic_cast<IBase*>(pIBaseClassInstance);
		if (!pIInstance)
			throw ELibMCUIInterfaceException (LIBMCUI_ERROR_INVALIDCAST);
		
		std::string sErrorMessage("");
		*pHasError = CWrapper::GetLastError(pIInstance, sErrorMessage);

		if (pErrorMessageNeededChars)
			*pErrorMessageNeededChars = (LibMCUI_uint32) (sErrorMessage.size()+1);
		if (pErrorMessageBuffer) {
			if (sErrorMessage.size() >= nErrorMessageBufferSize)
				throw ELibMCUIInterfaceException (LIBMCUI_ERROR_BUFFERTOOSMALL);
			for (size_t iErrorMessage = 0; iErrorMessage < sErrorMessage.size(); iErrorMessage++)
				pErrorMessageBuffer[iErrorMessage] = sErrorMessage[iErrorMessage];
			pErrorMessageBuffer[sErrorMessage.size()] = 0;
		}
		return LIBMCUI_SUCCESS;
	}
	catch (ELibMCUIInterfaceException & Exception) {
		return handleLibMCUIException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCUIResult libmcui_releaseinstance(LibMCUI_Base pInstance)
{
	IBase* pIBaseClass = nullptr;

	try {
		IBase* pIBaseClassInstance = (IBase *)pInstance;
		IBase* pIInstance = dynamic_cast<IBase*>(pIBaseClassInstance);
		if (!pIInstance)
			throw ELibMCUIInterfaceException (LIBMCUI_ERROR_INVALIDCAST);
		
		CWrapper::ReleaseInstance(pIInstance);

		return LIBMCUI_SUCCESS;
	}
	catch (ELibMCUIInterfaceException & Exception) {
		return handleLibMCUIException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCUIResult libmcui_acquireinstance(LibMCUI_Base pInstance)
{
	IBase* pIBaseClass = nullptr;

	try {
		IBase* pIBaseClassInstance = (IBase *)pInstance;
		IBase* pIInstance = dynamic_cast<IBase*>(pIBaseClassInstance);
		if (!pIInstance)
			throw ELibMCUIInterfaceException (LIBMCUI_ERROR_INVALIDCAST);
		
		CWrapper::AcquireInstance(pIInstance);

		return LIBMCUI_SUCCESS;
	}
	catch (ELibMCUIInterfaceException & Exception) {
		return handleLibMCUIException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCUIResult libmcui_injectcomponent(const char * pNameSpace, LibMCUI_pvoid pSymbolAddressMethod)
{
	IBase* pIBaseClass = nullptr;

	try {
		if (pNameSpace == nullptr)
			throw ELibMCUIInterfaceException (LIBMCUI_ERROR_INVALIDPARAM);
		std::string sNameSpace(pNameSpace);
		
		bool bNameSpaceFound = false;
		
		if (sNameSpace == "LibMCEnv") {
			if (CWrapper::sPLibMCEnvWrapper.get() != nullptr) {
				throw ELibMCUIInterfaceException(LIBMCUI_ERROR_COULDNOTLOADLIBRARY);
			}
			CWrapper::sPLibMCEnvWrapper = LibMCEnv::CWrapper::loadLibraryFromSymbolLookupMethod(pSymbolAddressMethod);
			bNameSpaceFound = true;
		}
		
		if (!bNameSpaceFound)
			throw ELibMCUIInterfaceException(LIBMCUI_ERROR_COULDNOTLOADLIBRARY);
		
		return LIBMCUI_SUCCESS;
	}
	catch (ELibMCUIInterfaceException & Exception) {
		return handleLibMCUIException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCUIResult libmcui_createeventhandler(LibMCUI_EventHandler * pInstance)
{
	IBase* pIBaseClass = nullptr;

	try {
		if (pInstance == nullptr)
			throw ELibMCUIInterfaceException (LIBMCUI_ERROR_INVALIDPARAM);
		IBase* pBaseInstance(nullptr);
		pBaseInstance = CWrapper::CreateEventHandler();

		*pInstance = (IBase*)(pBaseInstance);
		return LIBMCUI_SUCCESS;
	}
	catch (ELibMCUIInterfaceException & Exception) {
		return handleLibMCUIException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}


