/*++

Copyright (C) 2020 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.8.0-develop.

Abstract: This is an autogenerated C++-Header file in order to allow an easy
 use of MC UI Plugin Interface

Interface version: 1.0.0

*/

#ifndef __LIBMCUI_CPPHEADER_DYNAMIC_CPP
#define __LIBMCUI_CPPHEADER_DYNAMIC_CPP

#include "libmcui_types.hpp"
#include "libmcui_dynamic.h"

#include "libmcenv_dynamic.hpp"

#ifdef _WIN32
#include <windows.h>
#else // _WIN32
#include <dlfcn.h>
#endif // _WIN32
#include <string>
#include <memory>
#include <vector>
#include <exception>

namespace LibMCUI {

/*************************************************************************************************************************
 Forward Declaration of all classes
**************************************************************************************************************************/
class CWrapper;
class CBase;
class CEvent;
class CEventHandler;

/*************************************************************************************************************************
 Declaration of deprecated class types
**************************************************************************************************************************/
typedef CWrapper CLibMCUIWrapper;
typedef CBase CLibMCUIBase;
typedef CEvent CLibMCUIEvent;
typedef CEventHandler CLibMCUIEventHandler;

/*************************************************************************************************************************
 Declaration of shared pointer types
**************************************************************************************************************************/
typedef std::shared_ptr<CWrapper> PWrapper;
typedef std::shared_ptr<CBase> PBase;
typedef std::shared_ptr<CEvent> PEvent;
typedef std::shared_ptr<CEventHandler> PEventHandler;

/*************************************************************************************************************************
 Declaration of deprecated shared pointer types
**************************************************************************************************************************/
typedef PWrapper PLibMCUIWrapper;
typedef PBase PLibMCUIBase;
typedef PEvent PLibMCUIEvent;
typedef PEventHandler PLibMCUIEventHandler;


/*************************************************************************************************************************
 classParam Definition
**************************************************************************************************************************/

template<class T> class classParam {
private:
	const T* m_ptr;

public:
	classParam(const T* ptr)
		: m_ptr (ptr)
	{
	}

	classParam(std::shared_ptr <T> sharedPtr)
		: m_ptr (sharedPtr.get())
	{
	}

	LibMCUIHandle GetHandle()
	{
		if (m_ptr != nullptr)
			return m_ptr->handle();
		return nullptr;
	}
};

/*************************************************************************************************************************
 Class ELibMCUIException 
**************************************************************************************************************************/
class ELibMCUIException : public std::exception {
protected:
	/**
	* Error code for the Exception.
	*/
	LibMCUIResult m_errorCode;
	/**
	* Error message for the Exception.
	*/
	std::string m_errorMessage;
	std::string m_originalErrorMessage;

public:
	/**
	* Exception Constructor.
	*/
	ELibMCUIException(LibMCUIResult errorCode, const std::string & sErrorMessage)
		: m_errorCode(errorCode), m_originalErrorMessage(sErrorMessage)
	{
		m_errorMessage = buildErrorMessage();
	}

	/**
	* Returns error code
	*/
	LibMCUIResult getErrorCode() const noexcept
	{
		return m_errorCode;
	}

	/**
	* Returns error message
	*/
	const char* what() const noexcept
	{
		return m_errorMessage.c_str();
	}

	const char* getErrorMessage() const noexcept
	{
		return m_originalErrorMessage.c_str();
	}

	const char* getErrorName() const noexcept
	{
		switch(getErrorCode()) {
			case LIBMCUI_SUCCESS: return "SUCCESS";
			case LIBMCUI_ERROR_NOTIMPLEMENTED: return "NOTIMPLEMENTED";
			case LIBMCUI_ERROR_INVALIDPARAM: return "INVALIDPARAM";
			case LIBMCUI_ERROR_INVALIDCAST: return "INVALIDCAST";
			case LIBMCUI_ERROR_BUFFERTOOSMALL: return "BUFFERTOOSMALL";
			case LIBMCUI_ERROR_GENERICEXCEPTION: return "GENERICEXCEPTION";
			case LIBMCUI_ERROR_COULDNOTLOADLIBRARY: return "COULDNOTLOADLIBRARY";
			case LIBMCUI_ERROR_COULDNOTFINDLIBRARYEXPORT: return "COULDNOTFINDLIBRARYEXPORT";
			case LIBMCUI_ERROR_INCOMPATIBLEBINARYVERSION: return "INCOMPATIBLEBINARYVERSION";
			case LIBMCUI_ERROR_UIERROR: return "UIERROR";
			case LIBMCUI_ERROR_INVALIDEVENTNAME: return "INVALIDEVENTNAME";
		}
		return "UNKNOWN";
	}

	const char* getErrorDescription() const noexcept
	{
		switch(getErrorCode()) {
			case LIBMCUI_SUCCESS: return "success";
			case LIBMCUI_ERROR_NOTIMPLEMENTED: return "functionality not implemented";
			case LIBMCUI_ERROR_INVALIDPARAM: return "an invalid parameter was passed";
			case LIBMCUI_ERROR_INVALIDCAST: return "a type cast failed";
			case LIBMCUI_ERROR_BUFFERTOOSMALL: return "a provided buffer is too small";
			case LIBMCUI_ERROR_GENERICEXCEPTION: return "a generic exception occurred";
			case LIBMCUI_ERROR_COULDNOTLOADLIBRARY: return "the library could not be loaded";
			case LIBMCUI_ERROR_COULDNOTFINDLIBRARYEXPORT: return "a required exported symbol could not be found in the library";
			case LIBMCUI_ERROR_INCOMPATIBLEBINARYVERSION: return "the version of the binary interface does not match the bindings interface";
			case LIBMCUI_ERROR_UIERROR: return "a ui error occured";
			case LIBMCUI_ERROR_INVALIDEVENTNAME: return "invalid event name";
		}
		return "unknown error";
	}

private:

	std::string buildErrorMessage() const noexcept
	{
		std::string msg = m_originalErrorMessage;
		if (msg.empty()) {
			msg = getErrorDescription();
		}
		return std::string("Error: ") + getErrorName() + ": " + msg;
	}
};

/*************************************************************************************************************************
 Class CInputVector
**************************************************************************************************************************/
template <typename T>
class CInputVector {
private:
	
	const T* m_data;
	size_t m_size;
	
public:
	
	CInputVector(const std::vector<T>& vec)
		: m_data( vec.data() ), m_size( vec.size() )
	{
	}
	
	CInputVector(const T* in_data, size_t in_size)
		: m_data( in_data ), m_size(in_size )
	{
	}
	
	const T* data() const
	{
		return m_data;
	}
	
	size_t size() const
	{
		return m_size;
	}
	
};

// declare deprecated class name
template<typename T>
using CLibMCUIInputVector = CInputVector<T>;

/*************************************************************************************************************************
 Class CWrapper 
**************************************************************************************************************************/
class CWrapper {
public:
	
	explicit CWrapper(void* pSymbolLookupMethod)
	{
		CheckError(nullptr, initWrapperTable(&m_WrapperTable));
		CheckError(nullptr, loadWrapperTableFromSymbolLookupMethod(&m_WrapperTable, pSymbolLookupMethod));
		
		CheckError(nullptr, checkBinaryVersion());
	}
	
	explicit CWrapper(const std::string &sFileName)
	{
		CheckError(nullptr, initWrapperTable(&m_WrapperTable));
		CheckError(nullptr, loadWrapperTable(&m_WrapperTable, sFileName.c_str()));
		
		CheckError(nullptr, checkBinaryVersion());
	}
	
	static PWrapper loadLibrary(const std::string &sFileName)
	{
		return std::make_shared<CWrapper>(sFileName);
	}
	
	static PWrapper loadLibraryFromSymbolLookupMethod(void* pSymbolLookupMethod)
	{
		return std::make_shared<CWrapper>(pSymbolLookupMethod);
	}
	
	~CWrapper()
	{
		releaseWrapperTable(&m_WrapperTable);
	}
	
	inline void CheckError(CBase * pBaseClass, LibMCUIResult nResult);

	inline void GetVersion(LibMCUI_uint32 & nMajor, LibMCUI_uint32 & nMinor, LibMCUI_uint32 & nMicro);
	inline bool GetLastError(classParam<CBase> pInstance, std::string & sErrorMessage);
	inline void ReleaseInstance(classParam<CBase> pInstance);
	inline void AcquireInstance(classParam<CBase> pInstance);
	inline void InjectComponent(const std::string & sNameSpace, const LibMCUI_pvoid pSymbolAddressMethod);
	inline PEventHandler CreateEventHandler();

private:
	sLibMCUIDynamicWrapperTable m_WrapperTable;
	// Injected Components
	LibMCEnv::PWrapper m_pLibMCEnvWrapper;

	
	LibMCUIResult checkBinaryVersion()
	{
		LibMCUI_uint32 nMajor, nMinor, nMicro;
		GetVersion(nMajor, nMinor, nMicro);
		if (nMajor != LIBMCUI_VERSION_MAJOR) {
			return LIBMCUI_ERROR_INCOMPATIBLEBINARYVERSION;
		}
		return LIBMCUI_SUCCESS;
	}
	LibMCUIResult initWrapperTable(sLibMCUIDynamicWrapperTable * pWrapperTable);
	LibMCUIResult releaseWrapperTable(sLibMCUIDynamicWrapperTable * pWrapperTable);
	LibMCUIResult loadWrapperTable(sLibMCUIDynamicWrapperTable * pWrapperTable, const char * pLibraryFileName);
	LibMCUIResult loadWrapperTableFromSymbolLookupMethod(sLibMCUIDynamicWrapperTable * pWrapperTable, void* pSymbolLookupMethod);

	friend class CBase;
	friend class CEvent;
	friend class CEventHandler;

};

	
/*************************************************************************************************************************
 Class CBase 
**************************************************************************************************************************/
class CBase {
public:
	
protected:
	/* Wrapper Object that created the class. */
	CWrapper * m_pWrapper;
	/* Handle to Instance in library*/
	LibMCUIHandle m_pHandle;

	/* Checks for an Error code and raises Exceptions */
	void CheckError(LibMCUIResult nResult)
	{
		if (m_pWrapper != nullptr)
			m_pWrapper->CheckError(this, nResult);
	}
public:
	/**
	* CBase::CBase - Constructor for Base class.
	*/
	CBase(CWrapper * pWrapper, LibMCUIHandle pHandle)
		: m_pWrapper(pWrapper), m_pHandle(pHandle)
	{
	}

	/**
	* CBase::~CBase - Destructor for Base class.
	*/
	virtual ~CBase()
	{
		if (m_pWrapper != nullptr)
			m_pWrapper->ReleaseInstance(this);
		m_pWrapper = nullptr;
	}

	/**
	* CBase::handle - Returns handle to instance.
	*/
	LibMCUIHandle handle() const
	{
		return m_pHandle;
	}

	/**
	* CBase::wrapper - Returns wrapper instance.
	*/
	CWrapper * wrapper() const
	{
		return m_pWrapper;
	}
	
	friend class CWrapper;
};
	
/*************************************************************************************************************************
 Class CEvent 
**************************************************************************************************************************/
class CEvent : public CBase {
public:
	
	/**
	* CEvent::CEvent - Constructor for Event class.
	*/
	CEvent(CWrapper* pWrapper, LibMCUIHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline void Handle(classParam<LibMCEnv::CUIEnvironment> pUIEnvironment);
};
	
/*************************************************************************************************************************
 Class CEventHandler 
**************************************************************************************************************************/
class CEventHandler : public CBase {
public:
	
	/**
	* CEventHandler::CEventHandler - Constructor for EventHandler class.
	*/
	CEventHandler(CWrapper* pWrapper, LibMCUIHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline PEvent CreateEvent(const std::string & sEventName, classParam<LibMCEnv::CUIEnvironment> pUIEnvironment);
};
	
	/**
	* CWrapper::GetVersion - retrieves the binary version of this library.
	* @param[out] nMajor - returns the major version of this library
	* @param[out] nMinor - returns the minor version of this library
	* @param[out] nMicro - returns the micro version of this library
	*/
	inline void CWrapper::GetVersion(LibMCUI_uint32 & nMajor, LibMCUI_uint32 & nMinor, LibMCUI_uint32 & nMicro)
	{
		CheckError(nullptr,m_WrapperTable.m_GetVersion(&nMajor, &nMinor, &nMicro));
	}
	
	/**
	* CWrapper::GetLastError - Returns the last error recorded on this object
	* @param[in] pInstance - Instance Handle
	* @param[out] sErrorMessage - Message of the last error
	* @return Is there a last error to query
	*/
	inline bool CWrapper::GetLastError(classParam<CBase> pInstance, std::string & sErrorMessage)
	{
		LibMCUIHandle hInstance = pInstance.GetHandle();
		LibMCUI_uint32 bytesNeededErrorMessage = 0;
		LibMCUI_uint32 bytesWrittenErrorMessage = 0;
		bool resultHasError = 0;
		CheckError(nullptr,m_WrapperTable.m_GetLastError(hInstance, 0, &bytesNeededErrorMessage, nullptr, &resultHasError));
		std::vector<char> bufferErrorMessage(bytesNeededErrorMessage);
		CheckError(nullptr,m_WrapperTable.m_GetLastError(hInstance, bytesNeededErrorMessage, &bytesWrittenErrorMessage, &bufferErrorMessage[0], &resultHasError));
		sErrorMessage = std::string(&bufferErrorMessage[0]);
		
		return resultHasError;
	}
	
	/**
	* CWrapper::ReleaseInstance - Releases shared ownership of an Instance
	* @param[in] pInstance - Instance Handle
	*/
	inline void CWrapper::ReleaseInstance(classParam<CBase> pInstance)
	{
		LibMCUIHandle hInstance = pInstance.GetHandle();
		CheckError(nullptr,m_WrapperTable.m_ReleaseInstance(hInstance));
	}
	
	/**
	* CWrapper::AcquireInstance - Acquires shared ownership of an Instance
	* @param[in] pInstance - Instance Handle
	*/
	inline void CWrapper::AcquireInstance(classParam<CBase> pInstance)
	{
		LibMCUIHandle hInstance = pInstance.GetHandle();
		CheckError(nullptr,m_WrapperTable.m_AcquireInstance(hInstance));
	}
	
	/**
	* CWrapper::InjectComponent - Injects an imported component for usage within this component
	* @param[in] sNameSpace - NameSpace of the injected component
	* @param[in] pSymbolAddressMethod - Address of the SymbolAddressMethod of the injected component
	*/
	inline void CWrapper::InjectComponent(const std::string & sNameSpace, const LibMCUI_pvoid pSymbolAddressMethod)
	{
		CheckError(nullptr,m_WrapperTable.m_InjectComponent(sNameSpace.c_str(), pSymbolAddressMethod));
		
		bool bNameSpaceFound = false;
		if (sNameSpace == "LibMCEnv") {
			if (m_pLibMCEnvWrapper != nullptr) {
				throw ELibMCUIException(LIBMCUI_ERROR_COULDNOTLOADLIBRARY, "Library with namespace " + sNameSpace + " is already registered.");
			}
			m_pLibMCEnvWrapper = LibMCEnv::CWrapper::loadLibraryFromSymbolLookupMethod(pSymbolAddressMethod);
			bNameSpaceFound = true;
		}
		if (!bNameSpaceFound)
			throw ELibMCUIException(LIBMCUI_ERROR_COULDNOTLOADLIBRARY, "Unknown namespace " + sNameSpace);
	}
	
	/**
	* CWrapper::CreateEventHandler - Creates a event handler.
	* @return New Event Handler instance
	*/
	inline PEventHandler CWrapper::CreateEventHandler()
	{
		LibMCUIHandle hInstance = nullptr;
		CheckError(nullptr,m_WrapperTable.m_CreateEventHandler(&hInstance));
		
		if (!hInstance) {
			CheckError(nullptr,LIBMCUI_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CEventHandler>(this, hInstance);
	}
	
	inline void CWrapper::CheckError(CBase * pBaseClass, LibMCUIResult nResult)
	{
		if (nResult != 0) {
			std::string sErrorMessage;
			if (pBaseClass != nullptr) {
				GetLastError(pBaseClass, sErrorMessage);
			}
			throw ELibMCUIException(nResult, sErrorMessage);
		}
	}
	

	inline LibMCUIResult CWrapper::initWrapperTable(sLibMCUIDynamicWrapperTable * pWrapperTable)
	{
		if (pWrapperTable == nullptr)
			return LIBMCUI_ERROR_INVALIDPARAM;
		
		pWrapperTable->m_LibraryHandle = nullptr;
		pWrapperTable->m_Event_Handle = nullptr;
		pWrapperTable->m_EventHandler_CreateEvent = nullptr;
		pWrapperTable->m_GetVersion = nullptr;
		pWrapperTable->m_GetLastError = nullptr;
		pWrapperTable->m_ReleaseInstance = nullptr;
		pWrapperTable->m_AcquireInstance = nullptr;
		pWrapperTable->m_InjectComponent = nullptr;
		pWrapperTable->m_CreateEventHandler = nullptr;
		
		return LIBMCUI_SUCCESS;
	}

	inline LibMCUIResult CWrapper::releaseWrapperTable(sLibMCUIDynamicWrapperTable * pWrapperTable)
	{
		if (pWrapperTable == nullptr)
			return LIBMCUI_ERROR_INVALIDPARAM;
		
		if (pWrapperTable->m_LibraryHandle != nullptr) {
		#ifdef _WIN32
			HMODULE hModule = (HMODULE) pWrapperTable->m_LibraryHandle;
			FreeLibrary(hModule);
		#else // _WIN32
			dlclose(pWrapperTable->m_LibraryHandle);
		#endif // _WIN32
			return initWrapperTable(pWrapperTable);
		}
		
		return LIBMCUI_SUCCESS;
	}

	inline LibMCUIResult CWrapper::loadWrapperTable(sLibMCUIDynamicWrapperTable * pWrapperTable, const char * pLibraryFileName)
	{
		if (pWrapperTable == nullptr)
			return LIBMCUI_ERROR_INVALIDPARAM;
		if (pLibraryFileName == nullptr)
			return LIBMCUI_ERROR_INVALIDPARAM;
		
		#ifdef _WIN32
		// Convert filename to UTF16-string
		int nLength = 0;
		while ((pLibraryFileName[nLength] != 0) && (nLength < MAX_PATH))
			nLength++;
		int nBufferSize = nLength * 2 + 2;
		std::vector<wchar_t> wsLibraryFileName(nBufferSize);
		int nResult = MultiByteToWideChar(CP_UTF8, 0, pLibraryFileName, nLength, &wsLibraryFileName[0], nBufferSize);
		if (nResult == 0)
			return LIBMCUI_ERROR_COULDNOTLOADLIBRARY;
		
		HMODULE hLibrary = LoadLibraryW(wsLibraryFileName.data());
		if (hLibrary == 0) 
			return LIBMCUI_ERROR_COULDNOTLOADLIBRARY;
		#else // _WIN32
		void* hLibrary = dlopen(pLibraryFileName, RTLD_LAZY);
		if (hLibrary == 0) 
			return LIBMCUI_ERROR_COULDNOTLOADLIBRARY;
		dlerror();
		#endif // _WIN32
		
		#ifdef _WIN32
		pWrapperTable->m_Event_Handle = (PLibMCUIEvent_HandlePtr) GetProcAddress(hLibrary, "libmcui_event_handle");
		#else // _WIN32
		pWrapperTable->m_Event_Handle = (PLibMCUIEvent_HandlePtr) dlsym(hLibrary, "libmcui_event_handle");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Event_Handle == nullptr)
			return LIBMCUI_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_EventHandler_CreateEvent = (PLibMCUIEventHandler_CreateEventPtr) GetProcAddress(hLibrary, "libmcui_eventhandler_createevent");
		#else // _WIN32
		pWrapperTable->m_EventHandler_CreateEvent = (PLibMCUIEventHandler_CreateEventPtr) dlsym(hLibrary, "libmcui_eventhandler_createevent");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_EventHandler_CreateEvent == nullptr)
			return LIBMCUI_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GetVersion = (PLibMCUIGetVersionPtr) GetProcAddress(hLibrary, "libmcui_getversion");
		#else // _WIN32
		pWrapperTable->m_GetVersion = (PLibMCUIGetVersionPtr) dlsym(hLibrary, "libmcui_getversion");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GetVersion == nullptr)
			return LIBMCUI_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GetLastError = (PLibMCUIGetLastErrorPtr) GetProcAddress(hLibrary, "libmcui_getlasterror");
		#else // _WIN32
		pWrapperTable->m_GetLastError = (PLibMCUIGetLastErrorPtr) dlsym(hLibrary, "libmcui_getlasterror");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GetLastError == nullptr)
			return LIBMCUI_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ReleaseInstance = (PLibMCUIReleaseInstancePtr) GetProcAddress(hLibrary, "libmcui_releaseinstance");
		#else // _WIN32
		pWrapperTable->m_ReleaseInstance = (PLibMCUIReleaseInstancePtr) dlsym(hLibrary, "libmcui_releaseinstance");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ReleaseInstance == nullptr)
			return LIBMCUI_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_AcquireInstance = (PLibMCUIAcquireInstancePtr) GetProcAddress(hLibrary, "libmcui_acquireinstance");
		#else // _WIN32
		pWrapperTable->m_AcquireInstance = (PLibMCUIAcquireInstancePtr) dlsym(hLibrary, "libmcui_acquireinstance");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_AcquireInstance == nullptr)
			return LIBMCUI_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_InjectComponent = (PLibMCUIInjectComponentPtr) GetProcAddress(hLibrary, "libmcui_injectcomponent");
		#else // _WIN32
		pWrapperTable->m_InjectComponent = (PLibMCUIInjectComponentPtr) dlsym(hLibrary, "libmcui_injectcomponent");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_InjectComponent == nullptr)
			return LIBMCUI_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_CreateEventHandler = (PLibMCUICreateEventHandlerPtr) GetProcAddress(hLibrary, "libmcui_createeventhandler");
		#else // _WIN32
		pWrapperTable->m_CreateEventHandler = (PLibMCUICreateEventHandlerPtr) dlsym(hLibrary, "libmcui_createeventhandler");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_CreateEventHandler == nullptr)
			return LIBMCUI_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		pWrapperTable->m_LibraryHandle = hLibrary;
		return LIBMCUI_SUCCESS;
	}

	inline LibMCUIResult CWrapper::loadWrapperTableFromSymbolLookupMethod(sLibMCUIDynamicWrapperTable * pWrapperTable, void* pSymbolLookupMethod)
{
		if (pWrapperTable == nullptr)
			return LIBMCUI_ERROR_INVALIDPARAM;
		if (pSymbolLookupMethod == nullptr)
			return LIBMCUI_ERROR_INVALIDPARAM;
		
		typedef LibMCUIResult(*SymbolLookupType)(const char*, void**);
		
		SymbolLookupType pLookup = (SymbolLookupType)pSymbolLookupMethod;
		
		LibMCUIResult eLookupError = LIBMCUI_SUCCESS;
		eLookupError = (*pLookup)("libmcui_event_handle", (void**)&(pWrapperTable->m_Event_Handle));
		if ( (eLookupError != 0) || (pWrapperTable->m_Event_Handle == nullptr) )
			return LIBMCUI_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcui_eventhandler_createevent", (void**)&(pWrapperTable->m_EventHandler_CreateEvent));
		if ( (eLookupError != 0) || (pWrapperTable->m_EventHandler_CreateEvent == nullptr) )
			return LIBMCUI_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcui_getversion", (void**)&(pWrapperTable->m_GetVersion));
		if ( (eLookupError != 0) || (pWrapperTable->m_GetVersion == nullptr) )
			return LIBMCUI_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcui_getlasterror", (void**)&(pWrapperTable->m_GetLastError));
		if ( (eLookupError != 0) || (pWrapperTable->m_GetLastError == nullptr) )
			return LIBMCUI_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcui_releaseinstance", (void**)&(pWrapperTable->m_ReleaseInstance));
		if ( (eLookupError != 0) || (pWrapperTable->m_ReleaseInstance == nullptr) )
			return LIBMCUI_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcui_acquireinstance", (void**)&(pWrapperTable->m_AcquireInstance));
		if ( (eLookupError != 0) || (pWrapperTable->m_AcquireInstance == nullptr) )
			return LIBMCUI_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcui_injectcomponent", (void**)&(pWrapperTable->m_InjectComponent));
		if ( (eLookupError != 0) || (pWrapperTable->m_InjectComponent == nullptr) )
			return LIBMCUI_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcui_createeventhandler", (void**)&(pWrapperTable->m_CreateEventHandler));
		if ( (eLookupError != 0) || (pWrapperTable->m_CreateEventHandler == nullptr) )
			return LIBMCUI_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		return LIBMCUI_SUCCESS;
}

	
	
	/**
	 * Method definitions for class CBase
	 */
	
	/**
	 * Method definitions for class CEvent
	 */
	
	/**
	* CEvent::Handle - Handles the event.
	* @param[in] pUIEnvironment - Environment of this UI.
	*/
	void CEvent::Handle(classParam<LibMCEnv::CUIEnvironment> pUIEnvironment)
	{
		LibMCEnvHandle hUIEnvironment = pUIEnvironment.GetHandle();
		CheckError(m_pWrapper->m_WrapperTable.m_Event_Handle(m_pHandle, hUIEnvironment));
	}
	
	/**
	 * Method definitions for class CEventHandler
	 */
	
	/**
	* CEventHandler::CreateEvent - executes a user interface event.
	* @param[in] sEventName - Name of the event.
	* @param[in] pUIEnvironment - Environment of this UI.
	* @return New Event instance
	*/
	PEvent CEventHandler::CreateEvent(const std::string & sEventName, classParam<LibMCEnv::CUIEnvironment> pUIEnvironment)
	{
		LibMCEnvHandle hUIEnvironment = pUIEnvironment.GetHandle();
		LibMCUIHandle hInstance = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_EventHandler_CreateEvent(m_pHandle, sEventName.c_str(), hUIEnvironment, &hInstance));
		
		if (hInstance) {
			return std::make_shared<CEvent>(m_pWrapper, hInstance);
		} else {
			return nullptr;
		}
	}

} // namespace LibMCUI

#endif // __LIBMCUI_CPPHEADER_DYNAMIC_CPP

