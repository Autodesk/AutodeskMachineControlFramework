/*++

Copyright (C) 2020 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.7.0-develop.

Abstract: This is an autogenerated C++-Header file in order to allow an easy
 use of MC Plugin Interface

Interface version: 1.0.0

*/

#ifndef __LIBMCPLUGIN_CPPHEADER_DYNAMIC_CPP
#define __LIBMCPLUGIN_CPPHEADER_DYNAMIC_CPP

#include "libmcplugin_types.hpp"
#include "libmcplugin_dynamic.h"

#include "libmcenv_dynamic.hpp"

#ifdef _WIN32
#include <windows.h>
#else // _WIN32
#include <dlfcn.h>
#endif // _WIN32
#include <string>
#include <memory>
#include <vector>
#include <exception>

namespace LibMCPlugin {

/*************************************************************************************************************************
 Forward Declaration of all classes
**************************************************************************************************************************/
class CWrapper;
class CBase;
class CState;
class CStateFactory;

/*************************************************************************************************************************
 Declaration of deprecated class types
**************************************************************************************************************************/
typedef CWrapper CLibMCPluginWrapper;
typedef CBase CLibMCPluginBase;
typedef CState CLibMCPluginState;
typedef CStateFactory CLibMCPluginStateFactory;

/*************************************************************************************************************************
 Declaration of shared pointer types
**************************************************************************************************************************/
typedef std::shared_ptr<CWrapper> PWrapper;
typedef std::shared_ptr<CBase> PBase;
typedef std::shared_ptr<CState> PState;
typedef std::shared_ptr<CStateFactory> PStateFactory;

/*************************************************************************************************************************
 Declaration of deprecated shared pointer types
**************************************************************************************************************************/
typedef PWrapper PLibMCPluginWrapper;
typedef PBase PLibMCPluginBase;
typedef PState PLibMCPluginState;
typedef PStateFactory PLibMCPluginStateFactory;


/*************************************************************************************************************************
 classParam Definition
**************************************************************************************************************************/

template<class T> class classParam {
private:
	const T* m_ptr;

public:
	classParam(const T* ptr)
		: m_ptr (ptr)
	{
	}

	classParam(std::shared_ptr <T> sharedPtr)
		: m_ptr (sharedPtr.get())
	{
	}

	LibMCPluginHandle GetHandle()
	{
		if (m_ptr != nullptr)
			return m_ptr->handle();
		return nullptr;
	}
};

/*************************************************************************************************************************
 Class ELibMCPluginException 
**************************************************************************************************************************/
class ELibMCPluginException : public std::exception {
protected:
	/**
	* Error code for the Exception.
	*/
	LibMCPluginResult m_errorCode;
	/**
	* Error message for the Exception.
	*/
	std::string m_errorMessage;

public:
	/**
	* Exception Constructor.
	*/
	ELibMCPluginException(LibMCPluginResult errorCode, const std::string & sErrorMessage)
		: m_errorMessage("LibMCPlugin Error " + std::to_string(errorCode) + " (" + sErrorMessage + ")")
	{
		m_errorCode = errorCode;
	}

	/**
	* Returns error code
	*/
	LibMCPluginResult getErrorCode() const noexcept
	{
		return m_errorCode;
	}

	/**
	* Returns error message
	*/
	const char* what() const noexcept
	{
		return m_errorMessage.c_str();
	}

};

/*************************************************************************************************************************
 Class CInputVector
**************************************************************************************************************************/
template <typename T>
class CInputVector {
private:
	
	const T* m_data;
	size_t m_size;
	
public:
	
	CInputVector( const std::vector<T>& vec)
		: m_data( vec.data() ), m_size( vec.size() )
	{
	}
	
	CInputVector( const T* in_data, size_t in_size)
		: m_data( in_data ), m_size(in_size )
	{
	}
	
	const T* data() const
	{
		return m_data;
	}
	
	size_t size() const
	{
		return m_size;
	}
	
};

// declare deprecated class name
template<typename T>
using CLibMCPluginInputVector = CInputVector<T>;

/*************************************************************************************************************************
 Class CWrapper 
**************************************************************************************************************************/
class CWrapper {
public:
	
	CWrapper(void* pSymbolLookupMethod)
	{
		CheckError(nullptr, initWrapperTable(&m_WrapperTable));
		CheckError(nullptr, loadWrapperTableFromSymbolLookupMethod(&m_WrapperTable, pSymbolLookupMethod));
		
		CheckError(nullptr, checkBinaryVersion());
	}
	
	CWrapper(const std::string &sFileName)
	{
		CheckError(nullptr, initWrapperTable(&m_WrapperTable));
		CheckError(nullptr, loadWrapperTable(&m_WrapperTable, sFileName.c_str()));
		
		CheckError(nullptr, checkBinaryVersion());
	}
	
	static PWrapper loadLibrary(const std::string &sFileName)
	{
		return std::make_shared<CWrapper>(sFileName);
	}
	
	static PWrapper loadLibraryFromSymbolLookupMethod(void* pSymbolLookupMethod)
	{
		return std::make_shared<CWrapper>(pSymbolLookupMethod);
	}
	
	~CWrapper()
	{
		releaseWrapperTable(&m_WrapperTable);
	}
	
	inline void CheckError(CBase * pBaseClass, LibMCPluginResult nResult);

	inline void GetVersion(LibMCPlugin_uint32 & nMajor, LibMCPlugin_uint32 & nMinor, LibMCPlugin_uint32 & nMicro);
	inline bool GetLastError(classParam<CBase> pInstance, std::string & sErrorMessage);
	inline void ReleaseInstance(classParam<CBase> pInstance);
	inline void AcquireInstance(classParam<CBase> pInstance);
	inline void InjectComponent(const std::string & sNameSpace, const LibMCPlugin_pvoid pSymbolAddressMethod);
	inline PStateFactory CreateStateFactory(const std::string & sInstanceName);

private:
	sLibMCPluginDynamicWrapperTable m_WrapperTable;
	// Injected Components
	LibMCEnv::PWrapper m_pLibMCEnvWrapper;

	
	LibMCPluginResult checkBinaryVersion()
	{
		LibMCPlugin_uint32 nMajor, nMinor, nMicro;
		GetVersion(nMajor, nMinor, nMicro);
		if ( (nMajor != LIBMCPLUGIN_VERSION_MAJOR) || (nMinor < LIBMCPLUGIN_VERSION_MINOR) ) {
			return LIBMCPLUGIN_ERROR_INCOMPATIBLEBINARYVERSION;
		}
		return LIBMCPLUGIN_SUCCESS;
	}
	LibMCPluginResult initWrapperTable(sLibMCPluginDynamicWrapperTable * pWrapperTable);
	LibMCPluginResult releaseWrapperTable(sLibMCPluginDynamicWrapperTable * pWrapperTable);
	LibMCPluginResult loadWrapperTable(sLibMCPluginDynamicWrapperTable * pWrapperTable, const char * pLibraryFileName);
	LibMCPluginResult loadWrapperTableFromSymbolLookupMethod(sLibMCPluginDynamicWrapperTable * pWrapperTable, void* pSymbolLookupMethod);

	friend class CBase;
	friend class CState;
	friend class CStateFactory;

};

	
/*************************************************************************************************************************
 Class CBase 
**************************************************************************************************************************/
class CBase {
public:
	
protected:
	/* Wrapper Object that created the class. */
	CWrapper * m_pWrapper;
	/* Handle to Instance in library*/
	LibMCPluginHandle m_pHandle;

	/* Checks for an Error code and raises Exceptions */
	void CheckError(LibMCPluginResult nResult)
	{
		if (m_pWrapper != nullptr)
			m_pWrapper->CheckError(this, nResult);
	}
public:
	/**
	* CBase::CBase - Constructor for Base class.
	*/
	CBase(CWrapper * pWrapper, LibMCPluginHandle pHandle)
		: m_pWrapper(pWrapper), m_pHandle(pHandle)
	{
	}

	/**
	* CBase::~CBase - Destructor for Base class.
	*/
	virtual ~CBase()
	{
		if (m_pWrapper != nullptr)
			m_pWrapper->ReleaseInstance(this);
		m_pWrapper = nullptr;
	}

	/**
	* CBase::handle - Returns handle to instance.
	*/
	LibMCPluginHandle handle() const
	{
		return m_pHandle;
	}

	/**
	* CBase::wrapper - Returns wrapper instance.
	*/
	CWrapper * wrapper() const
	{
		return m_pWrapper;
	}
	
	friend class CWrapper;
};
	
/*************************************************************************************************************************
 Class CState 
**************************************************************************************************************************/
class CState : public CBase {
public:
	
	/**
	* CState::CState - Constructor for State class.
	*/
	CState(CWrapper* pWrapper, LibMCPluginHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline void Execute(classParam<LibMCEnv::CStateEnvironment> pStateEnvironment);
};
	
/*************************************************************************************************************************
 Class CStateFactory 
**************************************************************************************************************************/
class CStateFactory : public CBase {
public:
	
	/**
	* CStateFactory::CStateFactory - Constructor for StateFactory class.
	*/
	CStateFactory(CWrapper* pWrapper, LibMCPluginHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline PState CreateState(const std::string & sStateName);
};
	
	/**
	* CWrapper::GetVersion - retrieves the binary version of this library.
	* @param[out] nMajor - returns the major version of this library
	* @param[out] nMinor - returns the minor version of this library
	* @param[out] nMicro - returns the micro version of this library
	*/
	inline void CWrapper::GetVersion(LibMCPlugin_uint32 & nMajor, LibMCPlugin_uint32 & nMinor, LibMCPlugin_uint32 & nMicro)
	{
		CheckError(nullptr,m_WrapperTable.m_GetVersion(&nMajor, &nMinor, &nMicro));
	}
	
	/**
	* CWrapper::GetLastError - Returns the last error recorded on this object
	* @param[in] pInstance - Instance Handle
	* @param[out] sErrorMessage - Message of the last error
	* @return Is there a last error to query
	*/
	inline bool CWrapper::GetLastError(classParam<CBase> pInstance, std::string & sErrorMessage)
	{
		LibMCPluginHandle hInstance = pInstance.GetHandle();
		LibMCPlugin_uint32 bytesNeededErrorMessage = 0;
		LibMCPlugin_uint32 bytesWrittenErrorMessage = 0;
		bool resultHasError = 0;
		CheckError(nullptr,m_WrapperTable.m_GetLastError(hInstance, 0, &bytesNeededErrorMessage, nullptr, &resultHasError));
		std::vector<char> bufferErrorMessage(bytesNeededErrorMessage);
		CheckError(nullptr,m_WrapperTable.m_GetLastError(hInstance, bytesNeededErrorMessage, &bytesWrittenErrorMessage, &bufferErrorMessage[0], &resultHasError));
		sErrorMessage = std::string(&bufferErrorMessage[0]);
		
		return resultHasError;
	}
	
	/**
	* CWrapper::ReleaseInstance - Releases shared ownership of an Instance
	* @param[in] pInstance - Instance Handle
	*/
	inline void CWrapper::ReleaseInstance(classParam<CBase> pInstance)
	{
		LibMCPluginHandle hInstance = pInstance.GetHandle();
		CheckError(nullptr,m_WrapperTable.m_ReleaseInstance(hInstance));
	}
	
	/**
	* CWrapper::AcquireInstance - Acquires shared ownership of an Instance
	* @param[in] pInstance - Instance Handle
	*/
	inline void CWrapper::AcquireInstance(classParam<CBase> pInstance)
	{
		LibMCPluginHandle hInstance = pInstance.GetHandle();
		CheckError(nullptr,m_WrapperTable.m_AcquireInstance(hInstance));
	}
	
	/**
	* CWrapper::InjectComponent - Injects an imported component for usage within this component
	* @param[in] sNameSpace - NameSpace of the injected component
	* @param[in] pSymbolAddressMethod - Address of the SymbolAddressMethod of the injected component
	*/
	inline void CWrapper::InjectComponent(const std::string & sNameSpace, const LibMCPlugin_pvoid pSymbolAddressMethod)
	{
		CheckError(nullptr,m_WrapperTable.m_InjectComponent(sNameSpace.c_str(), pSymbolAddressMethod));
		
		bool bNameSpaceFound = false;
		if (sNameSpace == "LibMCEnv") {
			if (m_pLibMCEnvWrapper != nullptr) {
				throw ELibMCPluginException(LIBMCPLUGIN_ERROR_COULDNOTLOADLIBRARY, "Library with namespace " + sNameSpace + " is already registered.");
			}
			m_pLibMCEnvWrapper = LibMCEnv::CWrapper::loadLibraryFromSymbolLookupMethod(pSymbolAddressMethod);
			bNameSpaceFound = true;
		}
		if (!bNameSpaceFound)
			throw ELibMCPluginException(LIBMCPLUGIN_ERROR_COULDNOTLOADLIBRARY, "Unknown namespace " + sNameSpace);
	}
	
	/**
	* CWrapper::CreateStateFactory - Creates a main State factory.
	* @param[in] sInstanceName - Name of instance to be created.
	* @return New State Factory instance
	*/
	inline PStateFactory CWrapper::CreateStateFactory(const std::string & sInstanceName)
	{
		LibMCPluginHandle hInstance = nullptr;
		CheckError(nullptr,m_WrapperTable.m_CreateStateFactory(sInstanceName.c_str(), &hInstance));
		
		if (!hInstance) {
			CheckError(nullptr,LIBMCPLUGIN_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CStateFactory>(this, hInstance);
	}
	
	inline void CWrapper::CheckError(CBase * pBaseClass, LibMCPluginResult nResult)
	{
		if (nResult != 0) {
			std::string sErrorMessage;
			if (pBaseClass != nullptr) {
				GetLastError(pBaseClass, sErrorMessage);
			}
			throw ELibMCPluginException(nResult, sErrorMessage);
		}
	}
	

	inline LibMCPluginResult CWrapper::initWrapperTable(sLibMCPluginDynamicWrapperTable * pWrapperTable)
	{
		if (pWrapperTable == nullptr)
			return LIBMCPLUGIN_ERROR_INVALIDPARAM;
		
		pWrapperTable->m_LibraryHandle = nullptr;
		pWrapperTable->m_State_Execute = nullptr;
		pWrapperTable->m_StateFactory_CreateState = nullptr;
		pWrapperTable->m_GetVersion = nullptr;
		pWrapperTable->m_GetLastError = nullptr;
		pWrapperTable->m_ReleaseInstance = nullptr;
		pWrapperTable->m_AcquireInstance = nullptr;
		pWrapperTable->m_InjectComponent = nullptr;
		pWrapperTable->m_CreateStateFactory = nullptr;
		
		return LIBMCPLUGIN_SUCCESS;
	}

	inline LibMCPluginResult CWrapper::releaseWrapperTable(sLibMCPluginDynamicWrapperTable * pWrapperTable)
	{
		if (pWrapperTable == nullptr)
			return LIBMCPLUGIN_ERROR_INVALIDPARAM;
		
		if (pWrapperTable->m_LibraryHandle != nullptr) {
		#ifdef _WIN32
			HMODULE hModule = (HMODULE) pWrapperTable->m_LibraryHandle;
			FreeLibrary(hModule);
		#else // _WIN32
			dlclose(pWrapperTable->m_LibraryHandle);
		#endif // _WIN32
			return initWrapperTable(pWrapperTable);
		}
		
		return LIBMCPLUGIN_SUCCESS;
	}

	inline LibMCPluginResult CWrapper::loadWrapperTable(sLibMCPluginDynamicWrapperTable * pWrapperTable, const char * pLibraryFileName)
	{
		if (pWrapperTable == nullptr)
			return LIBMCPLUGIN_ERROR_INVALIDPARAM;
		if (pLibraryFileName == nullptr)
			return LIBMCPLUGIN_ERROR_INVALIDPARAM;
		
		#ifdef _WIN32
		// Convert filename to UTF16-string
		int nLength = (int)strlen(pLibraryFileName);
		int nBufferSize = nLength * 2 + 2;
		std::vector<wchar_t> wsLibraryFileName(nBufferSize);
		int nResult = MultiByteToWideChar(CP_UTF8, 0, pLibraryFileName, nLength, &wsLibraryFileName[0], nBufferSize);
		if (nResult == 0)
			return LIBMCPLUGIN_ERROR_COULDNOTLOADLIBRARY;
		
		HMODULE hLibrary = LoadLibraryW(wsLibraryFileName.data());
		if (hLibrary == 0) 
			return LIBMCPLUGIN_ERROR_COULDNOTLOADLIBRARY;
		#else // _WIN32
		void* hLibrary = dlopen(pLibraryFileName, RTLD_LAZY);
		if (hLibrary == 0) 
			return LIBMCPLUGIN_ERROR_COULDNOTLOADLIBRARY;
		dlerror();
		#endif // _WIN32
		
		#ifdef _WIN32
		pWrapperTable->m_State_Execute = (PLibMCPluginState_ExecutePtr) GetProcAddress(hLibrary, "libmcplugin_state_execute");
		#else // _WIN32
		pWrapperTable->m_State_Execute = (PLibMCPluginState_ExecutePtr) dlsym(hLibrary, "libmcplugin_state_execute");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_State_Execute == nullptr)
			return LIBMCPLUGIN_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_StateFactory_CreateState = (PLibMCPluginStateFactory_CreateStatePtr) GetProcAddress(hLibrary, "libmcplugin_statefactory_createstate");
		#else // _WIN32
		pWrapperTable->m_StateFactory_CreateState = (PLibMCPluginStateFactory_CreateStatePtr) dlsym(hLibrary, "libmcplugin_statefactory_createstate");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_StateFactory_CreateState == nullptr)
			return LIBMCPLUGIN_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GetVersion = (PLibMCPluginGetVersionPtr) GetProcAddress(hLibrary, "libmcplugin_getversion");
		#else // _WIN32
		pWrapperTable->m_GetVersion = (PLibMCPluginGetVersionPtr) dlsym(hLibrary, "libmcplugin_getversion");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GetVersion == nullptr)
			return LIBMCPLUGIN_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GetLastError = (PLibMCPluginGetLastErrorPtr) GetProcAddress(hLibrary, "libmcplugin_getlasterror");
		#else // _WIN32
		pWrapperTable->m_GetLastError = (PLibMCPluginGetLastErrorPtr) dlsym(hLibrary, "libmcplugin_getlasterror");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GetLastError == nullptr)
			return LIBMCPLUGIN_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ReleaseInstance = (PLibMCPluginReleaseInstancePtr) GetProcAddress(hLibrary, "libmcplugin_releaseinstance");
		#else // _WIN32
		pWrapperTable->m_ReleaseInstance = (PLibMCPluginReleaseInstancePtr) dlsym(hLibrary, "libmcplugin_releaseinstance");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ReleaseInstance == nullptr)
			return LIBMCPLUGIN_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_AcquireInstance = (PLibMCPluginAcquireInstancePtr) GetProcAddress(hLibrary, "libmcplugin_acquireinstance");
		#else // _WIN32
		pWrapperTable->m_AcquireInstance = (PLibMCPluginAcquireInstancePtr) dlsym(hLibrary, "libmcplugin_acquireinstance");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_AcquireInstance == nullptr)
			return LIBMCPLUGIN_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_InjectComponent = (PLibMCPluginInjectComponentPtr) GetProcAddress(hLibrary, "libmcplugin_injectcomponent");
		#else // _WIN32
		pWrapperTable->m_InjectComponent = (PLibMCPluginInjectComponentPtr) dlsym(hLibrary, "libmcplugin_injectcomponent");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_InjectComponent == nullptr)
			return LIBMCPLUGIN_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_CreateStateFactory = (PLibMCPluginCreateStateFactoryPtr) GetProcAddress(hLibrary, "libmcplugin_createstatefactory");
		#else // _WIN32
		pWrapperTable->m_CreateStateFactory = (PLibMCPluginCreateStateFactoryPtr) dlsym(hLibrary, "libmcplugin_createstatefactory");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_CreateStateFactory == nullptr)
			return LIBMCPLUGIN_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		pWrapperTable->m_LibraryHandle = hLibrary;
		return LIBMCPLUGIN_SUCCESS;
	}

	inline LibMCPluginResult CWrapper::loadWrapperTableFromSymbolLookupMethod(sLibMCPluginDynamicWrapperTable * pWrapperTable, void* pSymbolLookupMethod)
{
		if (pWrapperTable == nullptr)
			return LIBMCPLUGIN_ERROR_INVALIDPARAM;
		if (pSymbolLookupMethod == nullptr)
			return LIBMCPLUGIN_ERROR_INVALIDPARAM;
		
		typedef LibMCPluginResult(*SymbolLookupType)(const char*, void**);
		
		SymbolLookupType pLookup = (SymbolLookupType)pSymbolLookupMethod;
		
		LibMCPluginResult eLookupError = LIBMCPLUGIN_SUCCESS;
		eLookupError = (*pLookup)("libmcplugin_state_execute", (void**)&(pWrapperTable->m_State_Execute));
		if ( (eLookupError != 0) || (pWrapperTable->m_State_Execute == nullptr) )
			return LIBMCPLUGIN_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcplugin_statefactory_createstate", (void**)&(pWrapperTable->m_StateFactory_CreateState));
		if ( (eLookupError != 0) || (pWrapperTable->m_StateFactory_CreateState == nullptr) )
			return LIBMCPLUGIN_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcplugin_getversion", (void**)&(pWrapperTable->m_GetVersion));
		if ( (eLookupError != 0) || (pWrapperTable->m_GetVersion == nullptr) )
			return LIBMCPLUGIN_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcplugin_getlasterror", (void**)&(pWrapperTable->m_GetLastError));
		if ( (eLookupError != 0) || (pWrapperTable->m_GetLastError == nullptr) )
			return LIBMCPLUGIN_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcplugin_releaseinstance", (void**)&(pWrapperTable->m_ReleaseInstance));
		if ( (eLookupError != 0) || (pWrapperTable->m_ReleaseInstance == nullptr) )
			return LIBMCPLUGIN_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcplugin_acquireinstance", (void**)&(pWrapperTable->m_AcquireInstance));
		if ( (eLookupError != 0) || (pWrapperTable->m_AcquireInstance == nullptr) )
			return LIBMCPLUGIN_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcplugin_injectcomponent", (void**)&(pWrapperTable->m_InjectComponent));
		if ( (eLookupError != 0) || (pWrapperTable->m_InjectComponent == nullptr) )
			return LIBMCPLUGIN_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcplugin_createstatefactory", (void**)&(pWrapperTable->m_CreateStateFactory));
		if ( (eLookupError != 0) || (pWrapperTable->m_CreateStateFactory == nullptr) )
			return LIBMCPLUGIN_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		return LIBMCPLUGIN_SUCCESS;
}

	
	
	/**
	 * Method definitions for class CBase
	 */
	
	/**
	 * Method definitions for class CState
	 */
	
	/**
	* CState::Execute - executes the state.
	* @param[in] pStateEnvironment - Environment of this state.
	*/
	void CState::Execute(classParam<LibMCEnv::CStateEnvironment> pStateEnvironment)
	{
		LibMCEnvHandle hStateEnvironment = pStateEnvironment.GetHandle();
		CheckError(m_pWrapper->m_WrapperTable.m_State_Execute(m_pHandle, hStateEnvironment));
	}
	
	/**
	 * Method definitions for class CStateFactory
	 */
	
	/**
	* CStateFactory::CreateState - creates a state
	* @param[in] sStateName - Name of state to be created.
	* @return instance of the state.
	*/
	PState CStateFactory::CreateState(const std::string & sStateName)
	{
		LibMCPluginHandle hState = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_StateFactory_CreateState(m_pHandle, sStateName.c_str(), &hState));
		
		if (!hState) {
			CheckError(LIBMCPLUGIN_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CState>(m_pWrapper, hState);
	}

} // namespace LibMCPlugin

#endif // __LIBMCPLUGIN_CPPHEADER_DYNAMIC_CPP

