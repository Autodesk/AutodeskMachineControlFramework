/*++

Copyright (C) 2020 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.8.0-develop.

Abstract: This is an autogenerated C++-Header file with basic types in
order to allow an easy use of Machine Control data model library

Interface version: 1.0.0

*/

#ifndef __LIBMCDATA_TYPES_HEADER_CPP
#define __LIBMCDATA_TYPES_HEADER_CPP


/*************************************************************************************************************************
 Scalar types definition
**************************************************************************************************************************/

#ifdef LIBMCDATA_USELEGACYINTEGERTYPES

typedef unsigned char LibMCData_uint8;
typedef unsigned short LibMCData_uint16 ;
typedef unsigned int LibMCData_uint32;
typedef unsigned long long LibMCData_uint64;
typedef char LibMCData_int8;
typedef short LibMCData_int16;
typedef int LibMCData_int32;
typedef long long LibMCData_int64;

#else // LIBMCDATA_USELEGACYINTEGERTYPES

#include <stdint.h>

typedef uint8_t LibMCData_uint8;
typedef uint16_t LibMCData_uint16;
typedef uint32_t LibMCData_uint32;
typedef uint64_t LibMCData_uint64;
typedef int8_t LibMCData_int8;
typedef int16_t LibMCData_int16;
typedef int32_t LibMCData_int32;
typedef int64_t LibMCData_int64 ;

#endif // LIBMCDATA_USELEGACYINTEGERTYPES

typedef float LibMCData_single;
typedef double LibMCData_double;

/*************************************************************************************************************************
 General type definitions
**************************************************************************************************************************/

typedef LibMCData_int32 LibMCDataResult;
typedef void * LibMCDataHandle;
typedef void * LibMCData_pvoid;

/*************************************************************************************************************************
 Version for LibMCData
**************************************************************************************************************************/

#define LIBMCDATA_VERSION_MAJOR 1
#define LIBMCDATA_VERSION_MINOR 0
#define LIBMCDATA_VERSION_MICRO 0
#define LIBMCDATA_VERSION_PRERELEASEINFO ""
#define LIBMCDATA_VERSION_BUILDINFO ""

/*************************************************************************************************************************
 Error constants for LibMCData
**************************************************************************************************************************/

#define LIBMCDATA_SUCCESS 0
#define LIBMCDATA_ERROR_NOTIMPLEMENTED 1 /** functionality not implemented */
#define LIBMCDATA_ERROR_INVALIDPARAM 2 /** an invalid parameter was passed */
#define LIBMCDATA_ERROR_INVALIDCAST 3 /** a type cast failed */
#define LIBMCDATA_ERROR_BUFFERTOOSMALL 4 /** a provided buffer is too small */
#define LIBMCDATA_ERROR_GENERICEXCEPTION 5 /** a generic exception occurred */
#define LIBMCDATA_ERROR_COULDNOTLOADLIBRARY 6 /** the library could not be loaded */
#define LIBMCDATA_ERROR_COULDNOTFINDLIBRARYEXPORT 7 /** a required exported symbol could not be found in the library */
#define LIBMCDATA_ERROR_INCOMPATIBLEBINARYVERSION 8 /** the version of the binary interface does not match the bindings interface */
#define LIBMCDATA_ERROR_COULDNOTPARSECONFIGURATION 9 /** could not parse configuration */
#define LIBMCDATA_ERROR_DUPLICATESTATENAME 10 /** duplicate state name */
#define LIBMCDATA_ERROR_STATENOTFOUND 11 /** state not found */
#define LIBMCDATA_ERROR_DUPLICATEOUTSTATE 12 /** duplicate out state */
#define LIBMCDATA_ERROR_MISSINGMACHINEDEFINITION 13 /** missing machine definition */
#define LIBMCDATA_ERROR_MISSINGINSTANCENAME 14 /** missing instance name */
#define LIBMCDATA_ERROR_DUPLICATEMACHINEINSTANCE 15 /** duplicate machine instance */
#define LIBMCDATA_ERROR_MISSINGXMLSCHEMA 16 /** missing XML schema */
#define LIBMCDATA_ERROR_INVALIDXMLSCHEMA 17 /** invalid XML schema */
#define LIBMCDATA_ERROR_MISSINGSTATENAME 18 /** missing state name */
#define LIBMCDATA_ERROR_MISSINGOUTSTATETARGET 19 /** missing outstate target */
#define LIBMCDATA_ERROR_INVALIDOUTSTATETARGET 20 /** invalid outstate target */
#define LIBMCDATA_ERROR_NOINITSTATE 21 /** no init state */
#define LIBMCDATA_ERROR_NOFAILEDSTATE 22 /** no failed state */
#define LIBMCDATA_ERROR_INITSTATENOTFOUND 23 /** init state not found */
#define LIBMCDATA_ERROR_FAILEDSTATENOTFOUND 24 /** failed state not found */
#define LIBMCDATA_ERROR_MISSINGINITSTATE 25 /** missing init state */
#define LIBMCDATA_ERROR_MISSINGFAILEDSTATE 26 /** missing failed state */
#define LIBMCDATA_ERROR_MISSINGPLUGINNAME 27 /** missing plugin name */
#define LIBMCDATA_ERROR_EMPTYINITSTATE 28 /** empty init state */
#define LIBMCDATA_ERROR_EMPTYFAILEDSTATE 29 /** empty failed state */
#define LIBMCDATA_ERROR_EMPTYPLUGINNAME 30 /** empty plugin name */
#define LIBMCDATA_ERROR_COULDNOTCREATESTATEFACTORY 31 /** could not create state factory */
#define LIBMCDATA_ERROR_INVALIDSTATENAME 32 /** invalid state name */
#define LIBMCDATA_ERROR_COULDNOTCREATESTATE 33 /** could not create state */
#define LIBMCDATA_ERROR_COULDNOTINITIALIZEFACTORY 34 /** could not initialize factory */
#define LIBMCDATA_ERROR_COULDNOTFINALIZEFACTORY 35 /** could not finalize factory */
#define LIBMCDATA_ERROR_COULDNOTLOADPLUGIN 36 /** could not load plugin */
#define LIBMCDATA_ERROR_NOCURRENTSTATE 37 /** no current state */
#define LIBMCDATA_ERROR_NOPLUGINSTATE 38 /** no plugin state */
#define LIBMCDATA_ERROR_COULDNOTEXECUTEPLUGIN 39 /** could not execute plugin */
#define LIBMCDATA_ERROR_TOOMANYMACHINEINSTANCES 40 /** too many machine instances */
#define LIBMCDATA_ERROR_INVALIDINDEX 41 /** invalid index */
#define LIBMCDATA_ERROR_NOOUTSTATEGIVEN 42 /** no new outstate has been given */
#define LIBMCDATA_ERROR_INVALIDOUTSTATEGIVEN 43 /** invalid outstate has been given */
#define LIBMCDATA_ERROR_INVALIDREPEATDELAY 44 /** invalid repeat delay */
#define LIBMCDATA_ERROR_INVALIDEXECUTIONDELAY 45 /** invalid execution delay */
#define LIBMCDATA_ERROR_MISSINGREPEATDELAY 46 /** missing repeat delay */
#define LIBMCDATA_ERROR_THREADISRUNNING 47 /** thread is running */
#define LIBMCDATA_ERROR_THREADISNOTRUNNING 48 /** thread is not running */
#define LIBMCDATA_ERROR_DUPLICATESIGNAL 49 /** duplicate signal */
#define LIBMCDATA_ERROR_INVALIDSIGNALNAME 50 /** invalid signal name */
#define LIBMCDATA_ERROR_MISSINGSIGNALNAME 51 /** missing signal name */
#define LIBMCDATA_ERROR_MISSINGSERVERNODE 52 /** missing server node */
#define LIBMCDATA_ERROR_MISSINGHOSTNAME 53 /** missing host name */
#define LIBMCDATA_ERROR_MISSINGPORT 54 /** missing port */
#define LIBMCDATA_ERROR_UUIDGENERATIONFAILED 55 /** uuid generation failed */
#define LIBMCDATA_ERROR_INVALIDBUFFERSIZE 56 /** invalid buffer size */
#define LIBMCDATA_ERROR_COULDNOTCONVERTTOUTF8 57 /** could not convert to utf8 */
#define LIBMCDATA_ERROR_NOCOLUMNAVAILABLE 58 /** no column available */
#define LIBMCDATA_ERROR_INVALIDTEXTCOLUMN 59 /** invalid text column */
#define LIBMCDATA_ERROR_INVALIDCOLUMNTYPE 60 /** invalid column type */
#define LIBMCDATA_ERROR_TOOMANYREQUESTEDLOGS 61 /** too many requested logs */
#define LIBMCDATA_ERROR_MISSINGINSTANCEDESCRIPTION 62 /** missing instance description */
#define LIBMCDATA_ERROR_DUPLICATEPARAMETERGROUPNAME 63 /** duplicate parameter group name */
#define LIBMCDATA_ERROR_MISSINGPARAMETERGROUPNAME 64 /** missing parameter group name */
#define LIBMCDATA_ERROR_EMPTYPARAMETERGROUPNAME 65 /** empty parameter group name */
#define LIBMCDATA_ERROR_MISSINGPARAMETERGROUPDESCRIPTION 66 /** missing parameter group description */
#define LIBMCDATA_ERROR_EMPTYPARAMETERGROUPDESCRIPTION 67 /** empty parameter group description */
#define LIBMCDATA_ERROR_TOOMANYPARAMETERS 68 /** too many parameters */
#define LIBMCDATA_ERROR_TOOMANYPARAMETERGROUPS 69 /** too many parameter groups */
#define LIBMCDATA_ERROR_DUPLICATEPARAMETERNAME 70 /** duplicate parameter name */
#define LIBMCDATA_ERROR_MISSINGPARAMETERNAME 71 /** missing parameter name */
#define LIBMCDATA_ERROR_EMPTYPARAMETERNAME 72 /** empty parameter name */
#define LIBMCDATA_ERROR_MISSINGPARAMETERDESCRIPTION 73 /** missing parameter description */
#define LIBMCDATA_ERROR_EMPTYPARAMETERDESCRIPTION 74 /** empty parameter description */
#define LIBMCDATA_ERROR_PARAMETERNOTFOUND 75 /** parameter not found */
#define LIBMCDATA_ERROR_MISSINGPARAMETERDEFAULTVALUE 76 /** missing parameter default value */
#define LIBMCDATA_ERROR_MISSINGDATACONFIGNODE 77 /** missing data config node */
#define LIBMCDATA_ERROR_MISSINGDIRECTORY 78 /** missing directory */
#define LIBMCDATA_ERROR_MISSINGDATABASETYPE 79 /** missing database type */
#define LIBMCDATA_ERROR_MISSINGSQLITEINFO 80 /** missing sqlite info */
#define LIBMCDATA_ERROR_UNKNOWNDATABASETYPE 81 /** unknown database type */
#define LIBMCDATA_ERROR_STORAGENOTINITIALISED 82 /** storage not initialised */
#define LIBMCDATA_ERROR_COULDNOTCONVERTTOUTF16 83 /** could not convert to utf 16 */
#define LIBMCDATA_ERROR_COULDNOTCREATEFILE 84 /** could not create file */
#define LIBMCDATA_ERROR_COULDNOTSEEKSTREAM 85 /** could not seek stream */
#define LIBMCDATA_ERROR_COULDNOTGETSTREAMPOSITION 86 /** could not get stream position */
#define LIBMCDATA_ERROR_COULDNOTWRITESTREAM 87 /** could not write stream */
#define LIBMCDATA_ERROR_INVALIDDATABASEMIGRATION 88 /** invalid database migration */
#define LIBMCDATA_ERROR_INTERNALERROR 89 /** internal error */
#define LIBMCDATA_ERROR_COULDNOTSTORECONTENTSTREAM 90 /** could not store content stream */
#define LIBMCDATA_ERROR_DATABASENOTINITIALISED 91 /** database not initialised */
#define LIBMCDATA_ERROR_PARAMETERGROUPNOTFOUND 92 /** parameter group not found */
#define LIBMCDATA_ERROR_SIGNALNOTFOUND 93 /** signal not found */
#define LIBMCDATA_ERROR_STATEMACHINENOTFOUND 94 /** state machine not found. */
#define LIBMCDATA_ERROR_MISSINGPARAMETERTYPE 95 /** missing parameter type. */
#define LIBMCDATA_ERROR_INVALIDPARAMETERTYPE 96 /** invalid parameter type. */
#define LIBMCDATA_ERROR_COULDNOTPARSEJSON 97 /** could not parse json. */
#define LIBMCDATA_ERROR_INVALIDJSONFORMAT 98 /** invalid json format. */
#define LIBMCDATA_ERROR_URLNOTFOUND 99 /** url not found. */
#define LIBMCDATA_ERROR_GENERICBADREQUEST 100 /** generic bad request. */
#define LIBMCDATA_ERROR_SQLITE_ERROR 101 /** SQLite: Generic Error */
#define LIBMCDATA_ERROR_SQLITE_INTERNAL 102 /** SQLite: Internal logic error in SQLite */
#define LIBMCDATA_ERROR_SQLITE_PERM 103 /** SQLite: Access permission denied */
#define LIBMCDATA_ERROR_SQLITE_ABORT 104 /** SQLite: Callback routine requested an abort */
#define LIBMCDATA_ERROR_SQLITE_BUSY 105 /** SQLite: The database file is locked */
#define LIBMCDATA_ERROR_SQLITE_LOCKED 106 /** SQLite: A table in the database is locked */
#define LIBMCDATA_ERROR_SQLITE_NOMEM 107 /** SQLite: A malloc failed */
#define LIBMCDATA_ERROR_SQLITE_READONLY 108 /** SQLite: Attempt to write a readonly database */
#define LIBMCDATA_ERROR_SQLITE_INTERRUPT 109 /** SQLite: Operation terminated by sqlite3_interrupt */
#define LIBMCDATA_ERROR_SQLITE_IOERR 110 /** SQLite: Some kind of disk I/O error occurred */
#define LIBMCDATA_ERROR_SQLITE_CORRUPT 111 /** SQLite: The database disk image is malformed */
#define LIBMCDATA_ERROR_SQLITE_NOTFOUND 112 /** SQLite: Unknown opcode in sqlite3_file_control */
#define LIBMCDATA_ERROR_SQLITE_FULL 113 /** SQLite: Insertion failed because database is full */
#define LIBMCDATA_ERROR_SQLITE_CANTOPEN 114 /** SQLite: Unable to open the database file */
#define LIBMCDATA_ERROR_SQLITE_PROTOCOL 115 /** SQLite: Database lock protocol error */
#define LIBMCDATA_ERROR_SQLITE_SCHEMA 117 /** SQLite: The database schema changed */
#define LIBMCDATA_ERROR_SQLITE_TOOBIG 118 /** SQLite: String or BLOB exceeds size limit */
#define LIBMCDATA_ERROR_SQLITE_CONSTRAINT 119 /** SQLite: Abort due to constraint violation */
#define LIBMCDATA_ERROR_SQLITE_MISMATCH 120 /** SQLite: Data type mismatch */
#define LIBMCDATA_ERROR_SQLITE_MISUSE 121 /** SQLite: Library used incorrectly */
#define LIBMCDATA_ERROR_SQLITE_NOLFS 122 /** SQLite: Uses OS features not supported on host */
#define LIBMCDATA_ERROR_SQLITE_AUTH 123 /** SQLite: Authorization denied */
#define LIBMCDATA_ERROR_SQLITE_RANGE 125 /** SQLite: 2nd parameter to sqlite3_bind out of range */
#define LIBMCDATA_ERROR_SQLITE_NOTADB 126 /** SQLite: File opened that is not a database file */
#define LIBMCDATA_ERROR_SQLITE_NOTICE 127 /** SQLite: Notifications from sqlite3_log */
#define LIBMCDATA_ERROR_SQLITE_WARNING 128 /** SQLite: Warnings from sqlite3_log */
#define LIBMCDATA_ERROR_SQLITE_OTHER 130 /** SQLite: Other Error */
#define LIBMCDATA_ERROR_SQLITE_TOOMANYRESULTROWS 131 /** too many result rows */
#define LIBMCDATA_ERROR_COULDNOTREADZIPFILE 200 /** Could not read ZIP file */
#define LIBMCDATA_ERROR_COULDNOTOPENZIPFILE 201 /** Could not open ZIP file */
#define LIBMCDATA_ERROR_COULDNOTGETZIPENTRIES 202 /** Could not get ZIP file entries */
#define LIBMCDATA_ERROR_ZIPENTRYNOTFOUND 203 /** ZIP Entry not found */
#define LIBMCDATA_ERROR_COULDNOTSTATZIPENTRY 204 /** Could not stat ZIP entry */
#define LIBMCDATA_ERROR_COULDNOTOPENZIPENTRY 205 /** Could not open ZIP entry */
#define LIBMCDATA_ERROR_COULDNOTREADZIPSTREAM 206 /** Could not read ZIP stream */
#define LIBMCDATA_ERROR_COULDNOTREADFULLZIPDATA 207 /** Could not read full zip data */
#define LIBMCDATA_ERROR_COULDNOTFINDRESOURCEINDEX 208 /** Could not find resource index. */
#define LIBMCDATA_ERROR_COULDNOTPARSERESOURCEINDEX 209 /** Could not parse resource index. */
#define LIBMCDATA_ERROR_EMPTYRESOURCEINDEX 210 /** Empty resource index. */
#define LIBMCDATA_ERROR_MISSINGRESOURCEINDEX 211 /** Missing resource index. */
#define LIBMCDATA_ERROR_MISSINGRESOURCENAME 212 /** Missing resource name. */
#define LIBMCDATA_ERROR_MISSINGRESOURCEFILENAME 213 /** Missing resource filename. */
#define LIBMCDATA_ERROR_MISSINGRESOURCESIZE 214 /** Missing resource size. */
#define LIBMCDATA_ERROR_MISSINGRESOURCECONTENTTYPE 215 /** Missing resource content type. */
#define LIBMCDATA_ERROR_DRIVERALREADYREGISTERED 216 /** Driver already registered. */
#define LIBMCDATA_ERROR_DRIVERNOTFOUND 217 /** Driver not found. */
#define LIBMCDATA_ERROR_MISSINGDRIVERNAME 218 /** Missing driver name. */
#define LIBMCDATA_ERROR_MISSINGDRIVERTYPE 219 /** Missing driver type. */
#define LIBMCDATA_ERROR_MISSINGDRIVERLIBRARY 220 /** Missing driver library. */
#define LIBMCDATA_ERROR_DRIVERALREADYRESERVED 221 /** Driver has already been reserved by an instance. */
#define LIBMCDATA_ERROR_LIBRARYPATHNOTFOUND 222 /** Library path not found. */
#define LIBMCDATA_ERROR_TOOLPATHENTITYNOTLOADED 223 /** Toolpath entity not loaded */
#define LIBMCDATA_ERROR_TOOLPATHENTITYREFERENCEERROR 224 /** Toolpath entity reference error */
#define LIBMCDATA_ERROR_TOOLPATHENTITYINVALIDFILE 225 /** Toolpath entity is invalid */
#define LIBMCDATA_ERROR_NO3MFLIBRARY 226 /** No 3MF Library specified */
#define LIBMCDATA_ERROR_INVALIDPOINTCOUNT 227 /** Invalid point count */
#define LIBMCDATA_ERROR_DUPLICATEJOBUUID 228 /** Duplicate job uuid */
#define LIBMCDATA_ERROR_INVALIDJOBSTATUS 229 /** Invalid job status */
#define LIBMCDATA_ERROR_INVALIDSTREAMCONTEXT 230 /** Invalid stream context */
#define LIBMCDATA_ERROR_JOBUUIDNOTFOUND 231 /** Job uuid not found */
#define LIBMCDATA_ERROR_INVALIDJOBNAME 232 /** Invalid job name */
#define LIBMCDATA_ERROR_INVALIDJOBTIMESTAMP 233 /** Invalid job timestamp */
#define LIBMCDATA_ERROR_INVALIDUSERID 234 /** Invalid job name */
#define LIBMCDATA_ERROR_INVALIDSTORAGECALLBACKSIGNATURE 235 /** Invalid storage callback signature */
#define LIBMCDATA_ERROR_INVALIDSTORAGECALLBACKSTREAM 236 /** Invalid storage callback stream */
#define LIBMCDATA_ERROR_INVALIDSTORAGEPATH 237 /** Invalid storage path */
#define LIBMCDATA_ERROR_STORAGESTREAMNOTFOUND 238 /** Storage Stream not found */
#define LIBMCDATA_ERROR_DUPLICATESTORAGESTREAM 239 /** Duplicate Storage Stream */
#define LIBMCDATA_ERROR_INVALIDPARTIALUPLOAD 240 /** Invalid Partial Upload */
#define LIBMCDATA_ERROR_PARTIALUPLOADNOTFINISHED 241 /** Partial Upload not finished */
#define LIBMCDATA_ERROR_APIREQUESTNOTHANDLED 242 /** API Request not handled */
#define LIBMCDATA_ERROR_APIREQUESTALREADYHANDLED 243 /** API Request already handled */
#define LIBMCDATA_ERROR_INVALIDAPIREQUESTTYPE 244 /** Invalid API Request type */
#define LIBMCDATA_ERROR_INVALIDUPLOADSTREAM 245 /** Invalid Upload Stream */
#define LIBMCDATA_ERROR_COULDNOTPARSEJSONREQUEST 246 /** Could not parse JSON request */
#define LIBMCDATA_ERROR_INVALIDCONTEXTUUID 247 /** Invalid Context UUID */
#define LIBMCDATA_ERROR_INVALIDUPLOADNAME 248 /** Invalid Upload Name */
#define LIBMCDATA_ERROR_INVALIDMIMETYPE 249 /** Invalid Mime Type */
#define LIBMCDATA_ERROR_INVALIDSTREAMSIZE 250 /** Invalid Stream Size */
#define LIBMCDATA_ERROR_INVALIDSHA256SUM 251 /** Invalid SHA256 Sum */
#define LIBMCDATA_ERROR_INVALIDSTREAMUUID 252 /** Invalid Stream UUID */
#define LIBMCDATA_ERROR_INVALIDFIELDNAME 253 /** Invalid field name */
#define LIBMCDATA_ERROR_UPLOADSIZEMISMATCH 254 /** Upload size mismatch */
#define LIBMCDATA_ERROR_CONTENTTYPENOTACCEPTED 255 /** Content type not accepted */
#define LIBMCDATA_ERROR_NOCURRENTUPLOAD 256 /** No current upload */
#define LIBMCDATA_ERROR_UPLOADCHECKSUMMISMATCH 257 /** Upload checksum mismatch */
#define LIBMCDATA_ERROR_INVALIDSTORAGESTREAMSTATUS 258 /** Invalid storage stream status */
#define LIBMCDATA_ERROR_CONTEXTUUIDNOTACCEPTED 259 /** Context uuid not accepted */
#define LIBMCDATA_ERROR_INVALIDBUILDUUID 260 /** Invalid build uuid */
#define LIBMCDATA_ERROR_MISSINGTHREADCOUNT 261 /** Missing thread count */
#define LIBMCDATA_ERROR_INVALIDTHREADCOUNT 262 /** Invalid thread count */
#define LIBMCDATA_ERROR_COULDNOTUPDATEBUILDSTATUS 263 /** Could not update build status */
#define LIBMCDATA_ERROR_INVALIDITERATOR 264 /** Invalid iterator */
#define LIBMCDATA_ERROR_INVALIDDATATYPE 265 /** Invalid data type */
#define LIBMCDATA_ERROR_COULDNOTSENDSIGNAL 266 /** Could not send signal */
#define LIBMCDATA_ERROR_MISSINGSIGNALPARAMETER 267 /** Missing signal parameter */
#define LIBMCDATA_ERROR_NOUSERINTERFACEDEFINITION 268 /** No user interface definition */
#define LIBMCDATA_ERROR_MISSINGAPPNAME 269 /** Missing app name */
#define LIBMCDATA_ERROR_MISSINGCOPYRIGHT 270 /** Missing copyright */
#define LIBMCDATA_ERROR_MISSINGMAINPAGE 271 /** Missing main page */
#define LIBMCDATA_ERROR_MISSINGMENUITEMID 272 /** Missing menu item id */
#define LIBMCDATA_ERROR_MISSINGMENUITEMICON 273 /** Missing menu item icon */
#define LIBMCDATA_ERROR_MISSINGMENUITEMCAPTION 274 /** Missing menu item caption */
#define LIBMCDATA_ERROR_MISSINGTARGETPAGE 275 /** Missing menu item target page */
#define LIBMCDATA_ERROR_MISSINGMENUNODE 276 /** Missing menu node */
#define LIBMCDATA_ERROR_MISSINGTOOLBARNODE 277 /** Missing toolbar node */
#define LIBMCDATA_ERROR_MISSINGTOOLBARITEMID 278 /** Missing toolbar item id */
#define LIBMCDATA_ERROR_MISSINGTOOLBARITEMICON 279 /** Missing toolbar item icon */
#define LIBMCDATA_ERROR_MISSINGTOOLBARITEMCAPTION 280 /** Missing toolbar item caption */
#define LIBMCDATA_ERROR_MISSINGSERVICESNODE 281 /** Missing services node */
#define LIBMCDATA_ERROR_INVALIDSESSIONUUID 282 /** Invalid session UUID */
#define LIBMCDATA_ERROR_INVALIDSESSIONKEY 283 /** Invalid session Key */
#define LIBMCDATA_ERROR_SESSIONNOTAUTHORIZED 284 /** Session not authorized */
#define LIBMCDATA_ERROR_INVALIDUSERNAME 285 /** Invalid user name */
#define LIBMCDATA_ERROR_INVALIDPASSWORD 286 /** Invalid password */
#define LIBMCDATA_ERROR_INVALIDAUTHORIZATION 287 /** Invalid Authorization */
#define LIBMCDATA_ERROR_USERALREADYAUTHORIZED 288 /** User already authorized */
#define LIBMCDATA_ERROR_INVALIDSESSIONTOKEN 289 /** Invalid session token */
#define LIBMCDATA_ERROR_INVALIDCLIENTKEY 290 /** Invalid client key */
#define LIBMCDATA_ERROR_INVALIDLOGIN 291 /** Invalid login credentials */
#define LIBMCDATA_ERROR_DUPLICATEPAGE 292 /** Duplicate page */
#define LIBMCDATA_ERROR_PAGENOTFOUND 293 /** Page not found */
#define LIBMCDATA_ERROR_MISSINGPAGENAME 294 /** Missing page name */
#define LIBMCDATA_ERROR_INVALIDPAGENAME 295 /** Invalid page name */
#define LIBMCDATA_ERROR_MODULENOTFOUND 296 /** Module not found */
#define LIBMCDATA_ERROR_DUPLICATEMODULE 297 /** Duplicate module */
#define LIBMCDATA_ERROR_INVALIDMODULENAME 298 /** Invalid module name */
#define LIBMCDATA_ERROR_INVALIDMODULETYPE 299 /** Invalid module type */
#define LIBMCDATA_ERROR_INVALIDHEADLINE 300 /** Invalid headline */
#define LIBMCDATA_ERROR_USERNOTFOUND 301 /** User not found */
#define LIBMCDATA_ERROR_STREAMISNOTIMAGE 302 /** Stream is not image */
#define LIBMCDATA_ERROR_TOOMANYCONTENTPARAMETERS 303 /** Too many content parameters */
#define LIBMCDATA_ERROR_MISSINGCONTENTSTATEMACHINENAME 304 /** Missing content state machine name */
#define LIBMCDATA_ERROR_MISSINGCONTENTGROUPNAME 305 /** Missing content group name */
#define LIBMCDATA_ERROR_INVALIDENTRIESPERPAGE 306 /** Invalid entries per page */
#define LIBMCDATA_ERROR_MODULEITEMNOTFOUND 307 /** Module item not found */
#define LIBMCDATA_ERROR_DERIVEDPARAMETERSREADONLY 308 /** Derived parameters are read only. */
#define LIBMCDATA_ERROR_TOOMANYJOURNALVARIABLES 309 /** Too many journal variables */
#define LIBMCDATA_ERROR_JOURNALISNOTINITIALISING 310 /** Too many journal variables */
#define LIBMCDATA_ERROR_JOURNALISNOTRECORDING 311 /** Too many journal variables */
#define LIBMCDATA_ERROR_INVALIDVARIABLETYPE 312 /** Invalid variable type */
#define LIBMCDATA_ERROR_INVALIDVARIABLEUNITS 313 /** Invalid variable units */
#define LIBMCDATA_ERROR_UNITSHAVEALREADYBEENSET 314 /** Units have already been set */
#define LIBMCDATA_ERROR_UNITSHAVENOTBEENSET 315 /** Units have not been set */
#define LIBMCDATA_ERROR_INVALIDTIMESTAMP 316 /** Invalid time stamp */
#define LIBMCDATA_ERROR_NOCURRENTJOURNALCHUNK 317 /** No current journal chunk */
#define LIBMCDATA_ERROR_DUPLICATEJOURNALID 318 /** Duplicate journal id */
#define LIBMCDATA_ERROR_RESOURCEENTRYNOTFOUND 319 /** Resource entry not found */
#define LIBMCDATA_ERROR_NOCORERESOURCEPACKAGE 320 /** No core resource package */
#define LIBMCDATA_ERROR_INVALIDASPECTRATIO 321 /** Invalid aspect ratio */
#define LIBMCDATA_ERROR_MISSINGLOGORESOURCE 322 /** Missing logo resource */
#define LIBMCDATA_ERROR_NOUSERINTERFACEPLUGIN 323 /** No user interface plugin */
#define LIBMCDATA_ERROR_COULDNOTLOADUILIBRARY 324 /** Could not load UI library */
#define LIBMCDATA_ERROR_EVENTNAMENOTFOUND 325 /** Event name not found */
#define LIBMCDATA_ERROR_INVALIDEVENTSENDER 326 /** Invalid event context */
#define LIBMCDATA_ERROR_INVALIDEVENTCONTEXT 327 /** Invalid event sender */
#define LIBMCDATA_ERROR_INVALIDLAYERINDEX 328 /** Invalid layer index */
#define LIBMCDATA_ERROR_TEMPBASEPATHEMPTY 329 /** Empty base path for temporary files */
#define LIBMCDATA_ERROR_BUILDJOBDATANOTFOUND 330 /** Build job data not found */
#define LIBMCDATA_ERROR_INVALIDNAMESTRING 331 /** Invalid name string */
#define LIBMCDATA_ERROR_NAMESTRINGMISMATCH 332 /** Name string mismatch */
#define LIBMCDATA_ERROR_DATATYPEMISMATCH 333 /** Datatype mismatch */
#define LIBMCDATA_ERROR_COULDNOTFINDLOGENTRY 334 /** Could not find log entry */
#define LIBMCDATA_ERROR_NOLOGCALLBACK 335 /** No log callback */
#define LIBMCDATA_ERROR_EMPTYUSERNAME 336 /** Empty user name */
#define LIBMCDATA_ERROR_EMPTYUSERUUID 337 /** Empty user UUID */
#define LIBMCDATA_ERROR_USERNOTUNIQUE 338 /** User not unique */
#define LIBMCDATA_ERROR_EMPTYUSERROLE 339 /** Empty user role */
#define LIBMCDATA_ERROR_EMPTYUSERSALT 340 /** Empty user salt */
#define LIBMCDATA_ERROR_EMPTYUSERPASSWORD 341 /** Empty user password */
#define LIBMCDATA_ERROR_INVALIDUSERROLE 342 /** Invalid user role */
#define LIBMCDATA_ERROR_USERALREADYEXISTS 343 /** User already exists */
#define LIBMCDATA_ERROR_INVALIDUSERLANGUAGE 344 /** Invalid user language */
#define LIBMCDATA_ERROR_COULDNOTUPDATEUSERLANGUAGE 345 /** Could not update user language */
#define LIBMCDATA_ERROR_COULDNOTUPDATEUSERROLE 346 /** Could not update user role */
#define LIBMCDATA_ERROR_COULDNOTUPDATEUSERDESCRIPTION 347 /** Could not update user description */
#define LIBMCDATA_ERROR_COULDNOTUPDATEUSERPASSWORD 348 /** Could not update user password */
#define LIBMCDATA_ERROR_INVALIDUSERINDEX 349 /** Invalid user index */
#define LIBMCDATA_ERROR_INVALIDJOURNAL 350 /** Invalid journal */
#define LIBMCDATA_ERROR_EMPTYALERTIDENTIFIER 351 /** Empty alert identifier */
#define LIBMCDATA_ERROR_INVALIDALERTIDENTIFIER 352 /** Invalid alert identifier */
#define LIBMCDATA_ERROR_INVALIDALERTDESCRIPTIONIDENTIFIER 353 /** Invalid alert description identifier */
#define LIBMCDATA_ERROR_INVALIDALERTLEVEL 354 /** Invalid alert level */
#define LIBMCDATA_ERROR_ALERTNOTFOUND 355 /** Alert not found */
#define LIBMCDATA_ERROR_ALERTNOTACKNOWLEDGED 356 /** Alert has not been acknowledged. */
#define LIBMCDATA_ERROR_INVALIDSTORAGESTATE 357 /** Invalid storage state. */
#define LIBMCDATA_ERROR_STORAGEWRITERALREADYEXISTS 358 /** Storage writer already exists. */
#define LIBMCDATA_ERROR_STORAGEWRITERDOESNOTEXIST 359 /** Storage writer does not exist. */
#define LIBMCDATA_ERROR_STORAGESTREAMNOTPARTIAL 360 /** Storage stream is not partial. */
#define LIBMCDATA_ERROR_STORAGESTREAMNOTRANDOMACCESS 361 /** Storage stream is not random access. */
#define LIBMCDATA_ERROR_DOWNLOADTICKETNOTFOUND 362 /** Download ticket not found. */
#define LIBMCDATA_ERROR_EMPTYCLIENTFILENAME 363 /** Empty client file name. */
#define LIBMCDATA_ERROR_INVALIDCLIENTFILENAME 364 /** Invalid client file name. */

/*************************************************************************************************************************
 Error strings for LibMCData
**************************************************************************************************************************/

inline const char * LIBMCDATA_GETERRORSTRING (LibMCDataResult nErrorCode) {
  switch (nErrorCode) {
    case LIBMCDATA_SUCCESS: return "no error";
    case LIBMCDATA_ERROR_NOTIMPLEMENTED: return "functionality not implemented";
    case LIBMCDATA_ERROR_INVALIDPARAM: return "an invalid parameter was passed";
    case LIBMCDATA_ERROR_INVALIDCAST: return "a type cast failed";
    case LIBMCDATA_ERROR_BUFFERTOOSMALL: return "a provided buffer is too small";
    case LIBMCDATA_ERROR_GENERICEXCEPTION: return "a generic exception occurred";
    case LIBMCDATA_ERROR_COULDNOTLOADLIBRARY: return "the library could not be loaded";
    case LIBMCDATA_ERROR_COULDNOTFINDLIBRARYEXPORT: return "a required exported symbol could not be found in the library";
    case LIBMCDATA_ERROR_INCOMPATIBLEBINARYVERSION: return "the version of the binary interface does not match the bindings interface";
    case LIBMCDATA_ERROR_COULDNOTPARSECONFIGURATION: return "could not parse configuration";
    case LIBMCDATA_ERROR_DUPLICATESTATENAME: return "duplicate state name";
    case LIBMCDATA_ERROR_STATENOTFOUND: return "state not found";
    case LIBMCDATA_ERROR_DUPLICATEOUTSTATE: return "duplicate out state";
    case LIBMCDATA_ERROR_MISSINGMACHINEDEFINITION: return "missing machine definition";
    case LIBMCDATA_ERROR_MISSINGINSTANCENAME: return "missing instance name";
    case LIBMCDATA_ERROR_DUPLICATEMACHINEINSTANCE: return "duplicate machine instance";
    case LIBMCDATA_ERROR_MISSINGXMLSCHEMA: return "missing XML schema";
    case LIBMCDATA_ERROR_INVALIDXMLSCHEMA: return "invalid XML schema";
    case LIBMCDATA_ERROR_MISSINGSTATENAME: return "missing state name";
    case LIBMCDATA_ERROR_MISSINGOUTSTATETARGET: return "missing outstate target";
    case LIBMCDATA_ERROR_INVALIDOUTSTATETARGET: return "invalid outstate target";
    case LIBMCDATA_ERROR_NOINITSTATE: return "no init state";
    case LIBMCDATA_ERROR_NOFAILEDSTATE: return "no failed state";
    case LIBMCDATA_ERROR_INITSTATENOTFOUND: return "init state not found";
    case LIBMCDATA_ERROR_FAILEDSTATENOTFOUND: return "failed state not found";
    case LIBMCDATA_ERROR_MISSINGINITSTATE: return "missing init state";
    case LIBMCDATA_ERROR_MISSINGFAILEDSTATE: return "missing failed state";
    case LIBMCDATA_ERROR_MISSINGPLUGINNAME: return "missing plugin name";
    case LIBMCDATA_ERROR_EMPTYINITSTATE: return "empty init state";
    case LIBMCDATA_ERROR_EMPTYFAILEDSTATE: return "empty failed state";
    case LIBMCDATA_ERROR_EMPTYPLUGINNAME: return "empty plugin name";
    case LIBMCDATA_ERROR_COULDNOTCREATESTATEFACTORY: return "could not create state factory";
    case LIBMCDATA_ERROR_INVALIDSTATENAME: return "invalid state name";
    case LIBMCDATA_ERROR_COULDNOTCREATESTATE: return "could not create state";
    case LIBMCDATA_ERROR_COULDNOTINITIALIZEFACTORY: return "could not initialize factory";
    case LIBMCDATA_ERROR_COULDNOTFINALIZEFACTORY: return "could not finalize factory";
    case LIBMCDATA_ERROR_COULDNOTLOADPLUGIN: return "could not load plugin";
    case LIBMCDATA_ERROR_NOCURRENTSTATE: return "no current state";
    case LIBMCDATA_ERROR_NOPLUGINSTATE: return "no plugin state";
    case LIBMCDATA_ERROR_COULDNOTEXECUTEPLUGIN: return "could not execute plugin";
    case LIBMCDATA_ERROR_TOOMANYMACHINEINSTANCES: return "too many machine instances";
    case LIBMCDATA_ERROR_INVALIDINDEX: return "invalid index";
    case LIBMCDATA_ERROR_NOOUTSTATEGIVEN: return "no new outstate has been given";
    case LIBMCDATA_ERROR_INVALIDOUTSTATEGIVEN: return "invalid outstate has been given";
    case LIBMCDATA_ERROR_INVALIDREPEATDELAY: return "invalid repeat delay";
    case LIBMCDATA_ERROR_INVALIDEXECUTIONDELAY: return "invalid execution delay";
    case LIBMCDATA_ERROR_MISSINGREPEATDELAY: return "missing repeat delay";
    case LIBMCDATA_ERROR_THREADISRUNNING: return "thread is running";
    case LIBMCDATA_ERROR_THREADISNOTRUNNING: return "thread is not running";
    case LIBMCDATA_ERROR_DUPLICATESIGNAL: return "duplicate signal";
    case LIBMCDATA_ERROR_INVALIDSIGNALNAME: return "invalid signal name";
    case LIBMCDATA_ERROR_MISSINGSIGNALNAME: return "missing signal name";
    case LIBMCDATA_ERROR_MISSINGSERVERNODE: return "missing server node";
    case LIBMCDATA_ERROR_MISSINGHOSTNAME: return "missing host name";
    case LIBMCDATA_ERROR_MISSINGPORT: return "missing port";
    case LIBMCDATA_ERROR_UUIDGENERATIONFAILED: return "uuid generation failed";
    case LIBMCDATA_ERROR_INVALIDBUFFERSIZE: return "invalid buffer size";
    case LIBMCDATA_ERROR_COULDNOTCONVERTTOUTF8: return "could not convert to utf8";
    case LIBMCDATA_ERROR_NOCOLUMNAVAILABLE: return "no column available";
    case LIBMCDATA_ERROR_INVALIDTEXTCOLUMN: return "invalid text column";
    case LIBMCDATA_ERROR_INVALIDCOLUMNTYPE: return "invalid column type";
    case LIBMCDATA_ERROR_TOOMANYREQUESTEDLOGS: return "too many requested logs";
    case LIBMCDATA_ERROR_MISSINGINSTANCEDESCRIPTION: return "missing instance description";
    case LIBMCDATA_ERROR_DUPLICATEPARAMETERGROUPNAME: return "duplicate parameter group name";
    case LIBMCDATA_ERROR_MISSINGPARAMETERGROUPNAME: return "missing parameter group name";
    case LIBMCDATA_ERROR_EMPTYPARAMETERGROUPNAME: return "empty parameter group name";
    case LIBMCDATA_ERROR_MISSINGPARAMETERGROUPDESCRIPTION: return "missing parameter group description";
    case LIBMCDATA_ERROR_EMPTYPARAMETERGROUPDESCRIPTION: return "empty parameter group description";
    case LIBMCDATA_ERROR_TOOMANYPARAMETERS: return "too many parameters";
    case LIBMCDATA_ERROR_TOOMANYPARAMETERGROUPS: return "too many parameter groups";
    case LIBMCDATA_ERROR_DUPLICATEPARAMETERNAME: return "duplicate parameter name";
    case LIBMCDATA_ERROR_MISSINGPARAMETERNAME: return "missing parameter name";
    case LIBMCDATA_ERROR_EMPTYPARAMETERNAME: return "empty parameter name";
    case LIBMCDATA_ERROR_MISSINGPARAMETERDESCRIPTION: return "missing parameter description";
    case LIBMCDATA_ERROR_EMPTYPARAMETERDESCRIPTION: return "empty parameter description";
    case LIBMCDATA_ERROR_PARAMETERNOTFOUND: return "parameter not found";
    case LIBMCDATA_ERROR_MISSINGPARAMETERDEFAULTVALUE: return "missing parameter default value";
    case LIBMCDATA_ERROR_MISSINGDATACONFIGNODE: return "missing data config node";
    case LIBMCDATA_ERROR_MISSINGDIRECTORY: return "missing directory";
    case LIBMCDATA_ERROR_MISSINGDATABASETYPE: return "missing database type";
    case LIBMCDATA_ERROR_MISSINGSQLITEINFO: return "missing sqlite info";
    case LIBMCDATA_ERROR_UNKNOWNDATABASETYPE: return "unknown database type";
    case LIBMCDATA_ERROR_STORAGENOTINITIALISED: return "storage not initialised";
    case LIBMCDATA_ERROR_COULDNOTCONVERTTOUTF16: return "could not convert to utf 16";
    case LIBMCDATA_ERROR_COULDNOTCREATEFILE: return "could not create file";
    case LIBMCDATA_ERROR_COULDNOTSEEKSTREAM: return "could not seek stream";
    case LIBMCDATA_ERROR_COULDNOTGETSTREAMPOSITION: return "could not get stream position";
    case LIBMCDATA_ERROR_COULDNOTWRITESTREAM: return "could not write stream";
    case LIBMCDATA_ERROR_INVALIDDATABASEMIGRATION: return "invalid database migration";
    case LIBMCDATA_ERROR_INTERNALERROR: return "internal error";
    case LIBMCDATA_ERROR_COULDNOTSTORECONTENTSTREAM: return "could not store content stream";
    case LIBMCDATA_ERROR_DATABASENOTINITIALISED: return "database not initialised";
    case LIBMCDATA_ERROR_PARAMETERGROUPNOTFOUND: return "parameter group not found";
    case LIBMCDATA_ERROR_SIGNALNOTFOUND: return "signal not found";
    case LIBMCDATA_ERROR_STATEMACHINENOTFOUND: return "state machine not found.";
    case LIBMCDATA_ERROR_MISSINGPARAMETERTYPE: return "missing parameter type.";
    case LIBMCDATA_ERROR_INVALIDPARAMETERTYPE: return "invalid parameter type.";
    case LIBMCDATA_ERROR_COULDNOTPARSEJSON: return "could not parse json.";
    case LIBMCDATA_ERROR_INVALIDJSONFORMAT: return "invalid json format.";
    case LIBMCDATA_ERROR_URLNOTFOUND: return "url not found.";
    case LIBMCDATA_ERROR_GENERICBADREQUEST: return "generic bad request.";
    case LIBMCDATA_ERROR_SQLITE_ERROR: return "SQLite: Generic Error";
    case LIBMCDATA_ERROR_SQLITE_INTERNAL: return "SQLite: Internal logic error in SQLite";
    case LIBMCDATA_ERROR_SQLITE_PERM: return "SQLite: Access permission denied";
    case LIBMCDATA_ERROR_SQLITE_ABORT: return "SQLite: Callback routine requested an abort";
    case LIBMCDATA_ERROR_SQLITE_BUSY: return "SQLite: The database file is locked";
    case LIBMCDATA_ERROR_SQLITE_LOCKED: return "SQLite: A table in the database is locked";
    case LIBMCDATA_ERROR_SQLITE_NOMEM: return "SQLite: A malloc failed";
    case LIBMCDATA_ERROR_SQLITE_READONLY: return "SQLite: Attempt to write a readonly database";
    case LIBMCDATA_ERROR_SQLITE_INTERRUPT: return "SQLite: Operation terminated by sqlite3_interrupt";
    case LIBMCDATA_ERROR_SQLITE_IOERR: return "SQLite: Some kind of disk I/O error occurred";
    case LIBMCDATA_ERROR_SQLITE_CORRUPT: return "SQLite: The database disk image is malformed";
    case LIBMCDATA_ERROR_SQLITE_NOTFOUND: return "SQLite: Unknown opcode in sqlite3_file_control";
    case LIBMCDATA_ERROR_SQLITE_FULL: return "SQLite: Insertion failed because database is full";
    case LIBMCDATA_ERROR_SQLITE_CANTOPEN: return "SQLite: Unable to open the database file";
    case LIBMCDATA_ERROR_SQLITE_PROTOCOL: return "SQLite: Database lock protocol error";
    case LIBMCDATA_ERROR_SQLITE_SCHEMA: return "SQLite: The database schema changed";
    case LIBMCDATA_ERROR_SQLITE_TOOBIG: return "SQLite: String or BLOB exceeds size limit";
    case LIBMCDATA_ERROR_SQLITE_CONSTRAINT: return "SQLite: Abort due to constraint violation";
    case LIBMCDATA_ERROR_SQLITE_MISMATCH: return "SQLite: Data type mismatch";
    case LIBMCDATA_ERROR_SQLITE_MISUSE: return "SQLite: Library used incorrectly";
    case LIBMCDATA_ERROR_SQLITE_NOLFS: return "SQLite: Uses OS features not supported on host";
    case LIBMCDATA_ERROR_SQLITE_AUTH: return "SQLite: Authorization denied";
    case LIBMCDATA_ERROR_SQLITE_RANGE: return "SQLite: 2nd parameter to sqlite3_bind out of range";
    case LIBMCDATA_ERROR_SQLITE_NOTADB: return "SQLite: File opened that is not a database file";
    case LIBMCDATA_ERROR_SQLITE_NOTICE: return "SQLite: Notifications from sqlite3_log";
    case LIBMCDATA_ERROR_SQLITE_WARNING: return "SQLite: Warnings from sqlite3_log";
    case LIBMCDATA_ERROR_SQLITE_OTHER: return "SQLite: Other Error";
    case LIBMCDATA_ERROR_SQLITE_TOOMANYRESULTROWS: return "too many result rows";
    case LIBMCDATA_ERROR_COULDNOTREADZIPFILE: return "Could not read ZIP file";
    case LIBMCDATA_ERROR_COULDNOTOPENZIPFILE: return "Could not open ZIP file";
    case LIBMCDATA_ERROR_COULDNOTGETZIPENTRIES: return "Could not get ZIP file entries";
    case LIBMCDATA_ERROR_ZIPENTRYNOTFOUND: return "ZIP Entry not found";
    case LIBMCDATA_ERROR_COULDNOTSTATZIPENTRY: return "Could not stat ZIP entry";
    case LIBMCDATA_ERROR_COULDNOTOPENZIPENTRY: return "Could not open ZIP entry";
    case LIBMCDATA_ERROR_COULDNOTREADZIPSTREAM: return "Could not read ZIP stream";
    case LIBMCDATA_ERROR_COULDNOTREADFULLZIPDATA: return "Could not read full zip data";
    case LIBMCDATA_ERROR_COULDNOTFINDRESOURCEINDEX: return "Could not find resource index.";
    case LIBMCDATA_ERROR_COULDNOTPARSERESOURCEINDEX: return "Could not parse resource index.";
    case LIBMCDATA_ERROR_EMPTYRESOURCEINDEX: return "Empty resource index.";
    case LIBMCDATA_ERROR_MISSINGRESOURCEINDEX: return "Missing resource index.";
    case LIBMCDATA_ERROR_MISSINGRESOURCENAME: return "Missing resource name.";
    case LIBMCDATA_ERROR_MISSINGRESOURCEFILENAME: return "Missing resource filename.";
    case LIBMCDATA_ERROR_MISSINGRESOURCESIZE: return "Missing resource size.";
    case LIBMCDATA_ERROR_MISSINGRESOURCECONTENTTYPE: return "Missing resource content type.";
    case LIBMCDATA_ERROR_DRIVERALREADYREGISTERED: return "Driver already registered.";
    case LIBMCDATA_ERROR_DRIVERNOTFOUND: return "Driver not found.";
    case LIBMCDATA_ERROR_MISSINGDRIVERNAME: return "Missing driver name.";
    case LIBMCDATA_ERROR_MISSINGDRIVERTYPE: return "Missing driver type.";
    case LIBMCDATA_ERROR_MISSINGDRIVERLIBRARY: return "Missing driver library.";
    case LIBMCDATA_ERROR_DRIVERALREADYRESERVED: return "Driver has already been reserved by an instance.";
    case LIBMCDATA_ERROR_LIBRARYPATHNOTFOUND: return "Library path not found.";
    case LIBMCDATA_ERROR_TOOLPATHENTITYNOTLOADED: return "Toolpath entity not loaded";
    case LIBMCDATA_ERROR_TOOLPATHENTITYREFERENCEERROR: return "Toolpath entity reference error";
    case LIBMCDATA_ERROR_TOOLPATHENTITYINVALIDFILE: return "Toolpath entity is invalid";
    case LIBMCDATA_ERROR_NO3MFLIBRARY: return "No 3MF Library specified";
    case LIBMCDATA_ERROR_INVALIDPOINTCOUNT: return "Invalid point count";
    case LIBMCDATA_ERROR_DUPLICATEJOBUUID: return "Duplicate job uuid";
    case LIBMCDATA_ERROR_INVALIDJOBSTATUS: return "Invalid job status";
    case LIBMCDATA_ERROR_INVALIDSTREAMCONTEXT: return "Invalid stream context";
    case LIBMCDATA_ERROR_JOBUUIDNOTFOUND: return "Job uuid not found";
    case LIBMCDATA_ERROR_INVALIDJOBNAME: return "Invalid job name";
    case LIBMCDATA_ERROR_INVALIDJOBTIMESTAMP: return "Invalid job timestamp";
    case LIBMCDATA_ERROR_INVALIDUSERID: return "Invalid job name";
    case LIBMCDATA_ERROR_INVALIDSTORAGECALLBACKSIGNATURE: return "Invalid storage callback signature";
    case LIBMCDATA_ERROR_INVALIDSTORAGECALLBACKSTREAM: return "Invalid storage callback stream";
    case LIBMCDATA_ERROR_INVALIDSTORAGEPATH: return "Invalid storage path";
    case LIBMCDATA_ERROR_STORAGESTREAMNOTFOUND: return "Storage Stream not found";
    case LIBMCDATA_ERROR_DUPLICATESTORAGESTREAM: return "Duplicate Storage Stream";
    case LIBMCDATA_ERROR_INVALIDPARTIALUPLOAD: return "Invalid Partial Upload";
    case LIBMCDATA_ERROR_PARTIALUPLOADNOTFINISHED: return "Partial Upload not finished";
    case LIBMCDATA_ERROR_APIREQUESTNOTHANDLED: return "API Request not handled";
    case LIBMCDATA_ERROR_APIREQUESTALREADYHANDLED: return "API Request already handled";
    case LIBMCDATA_ERROR_INVALIDAPIREQUESTTYPE: return "Invalid API Request type";
    case LIBMCDATA_ERROR_INVALIDUPLOADSTREAM: return "Invalid Upload Stream";
    case LIBMCDATA_ERROR_COULDNOTPARSEJSONREQUEST: return "Could not parse JSON request";
    case LIBMCDATA_ERROR_INVALIDCONTEXTUUID: return "Invalid Context UUID";
    case LIBMCDATA_ERROR_INVALIDUPLOADNAME: return "Invalid Upload Name";
    case LIBMCDATA_ERROR_INVALIDMIMETYPE: return "Invalid Mime Type";
    case LIBMCDATA_ERROR_INVALIDSTREAMSIZE: return "Invalid Stream Size";
    case LIBMCDATA_ERROR_INVALIDSHA256SUM: return "Invalid SHA256 Sum";
    case LIBMCDATA_ERROR_INVALIDSTREAMUUID: return "Invalid Stream UUID";
    case LIBMCDATA_ERROR_INVALIDFIELDNAME: return "Invalid field name";
    case LIBMCDATA_ERROR_UPLOADSIZEMISMATCH: return "Upload size mismatch";
    case LIBMCDATA_ERROR_CONTENTTYPENOTACCEPTED: return "Content type not accepted";
    case LIBMCDATA_ERROR_NOCURRENTUPLOAD: return "No current upload";
    case LIBMCDATA_ERROR_UPLOADCHECKSUMMISMATCH: return "Upload checksum mismatch";
    case LIBMCDATA_ERROR_INVALIDSTORAGESTREAMSTATUS: return "Invalid storage stream status";
    case LIBMCDATA_ERROR_CONTEXTUUIDNOTACCEPTED: return "Context uuid not accepted";
    case LIBMCDATA_ERROR_INVALIDBUILDUUID: return "Invalid build uuid";
    case LIBMCDATA_ERROR_MISSINGTHREADCOUNT: return "Missing thread count";
    case LIBMCDATA_ERROR_INVALIDTHREADCOUNT: return "Invalid thread count";
    case LIBMCDATA_ERROR_COULDNOTUPDATEBUILDSTATUS: return "Could not update build status";
    case LIBMCDATA_ERROR_INVALIDITERATOR: return "Invalid iterator";
    case LIBMCDATA_ERROR_INVALIDDATATYPE: return "Invalid data type";
    case LIBMCDATA_ERROR_COULDNOTSENDSIGNAL: return "Could not send signal";
    case LIBMCDATA_ERROR_MISSINGSIGNALPARAMETER: return "Missing signal parameter";
    case LIBMCDATA_ERROR_NOUSERINTERFACEDEFINITION: return "No user interface definition";
    case LIBMCDATA_ERROR_MISSINGAPPNAME: return "Missing app name";
    case LIBMCDATA_ERROR_MISSINGCOPYRIGHT: return "Missing copyright";
    case LIBMCDATA_ERROR_MISSINGMAINPAGE: return "Missing main page";
    case LIBMCDATA_ERROR_MISSINGMENUITEMID: return "Missing menu item id";
    case LIBMCDATA_ERROR_MISSINGMENUITEMICON: return "Missing menu item icon";
    case LIBMCDATA_ERROR_MISSINGMENUITEMCAPTION: return "Missing menu item caption";
    case LIBMCDATA_ERROR_MISSINGTARGETPAGE: return "Missing menu item target page";
    case LIBMCDATA_ERROR_MISSINGMENUNODE: return "Missing menu node";
    case LIBMCDATA_ERROR_MISSINGTOOLBARNODE: return "Missing toolbar node";
    case LIBMCDATA_ERROR_MISSINGTOOLBARITEMID: return "Missing toolbar item id";
    case LIBMCDATA_ERROR_MISSINGTOOLBARITEMICON: return "Missing toolbar item icon";
    case LIBMCDATA_ERROR_MISSINGTOOLBARITEMCAPTION: return "Missing toolbar item caption";
    case LIBMCDATA_ERROR_MISSINGSERVICESNODE: return "Missing services node";
    case LIBMCDATA_ERROR_INVALIDSESSIONUUID: return "Invalid session UUID";
    case LIBMCDATA_ERROR_INVALIDSESSIONKEY: return "Invalid session Key";
    case LIBMCDATA_ERROR_SESSIONNOTAUTHORIZED: return "Session not authorized";
    case LIBMCDATA_ERROR_INVALIDUSERNAME: return "Invalid user name";
    case LIBMCDATA_ERROR_INVALIDPASSWORD: return "Invalid password";
    case LIBMCDATA_ERROR_INVALIDAUTHORIZATION: return "Invalid Authorization";
    case LIBMCDATA_ERROR_USERALREADYAUTHORIZED: return "User already authorized";
    case LIBMCDATA_ERROR_INVALIDSESSIONTOKEN: return "Invalid session token";
    case LIBMCDATA_ERROR_INVALIDCLIENTKEY: return "Invalid client key";
    case LIBMCDATA_ERROR_INVALIDLOGIN: return "Invalid login credentials";
    case LIBMCDATA_ERROR_DUPLICATEPAGE: return "Duplicate page";
    case LIBMCDATA_ERROR_PAGENOTFOUND: return "Page not found";
    case LIBMCDATA_ERROR_MISSINGPAGENAME: return "Missing page name";
    case LIBMCDATA_ERROR_INVALIDPAGENAME: return "Invalid page name";
    case LIBMCDATA_ERROR_MODULENOTFOUND: return "Module not found";
    case LIBMCDATA_ERROR_DUPLICATEMODULE: return "Duplicate module";
    case LIBMCDATA_ERROR_INVALIDMODULENAME: return "Invalid module name";
    case LIBMCDATA_ERROR_INVALIDMODULETYPE: return "Invalid module type";
    case LIBMCDATA_ERROR_INVALIDHEADLINE: return "Invalid headline";
    case LIBMCDATA_ERROR_USERNOTFOUND: return "User not found";
    case LIBMCDATA_ERROR_STREAMISNOTIMAGE: return "Stream is not image";
    case LIBMCDATA_ERROR_TOOMANYCONTENTPARAMETERS: return "Too many content parameters";
    case LIBMCDATA_ERROR_MISSINGCONTENTSTATEMACHINENAME: return "Missing content state machine name";
    case LIBMCDATA_ERROR_MISSINGCONTENTGROUPNAME: return "Missing content group name";
    case LIBMCDATA_ERROR_INVALIDENTRIESPERPAGE: return "Invalid entries per page";
    case LIBMCDATA_ERROR_MODULEITEMNOTFOUND: return "Module item not found";
    case LIBMCDATA_ERROR_DERIVEDPARAMETERSREADONLY: return "Derived parameters are read only.";
    case LIBMCDATA_ERROR_TOOMANYJOURNALVARIABLES: return "Too many journal variables";
    case LIBMCDATA_ERROR_JOURNALISNOTINITIALISING: return "Too many journal variables";
    case LIBMCDATA_ERROR_JOURNALISNOTRECORDING: return "Too many journal variables";
    case LIBMCDATA_ERROR_INVALIDVARIABLETYPE: return "Invalid variable type";
    case LIBMCDATA_ERROR_INVALIDVARIABLEUNITS: return "Invalid variable units";
    case LIBMCDATA_ERROR_UNITSHAVEALREADYBEENSET: return "Units have already been set";
    case LIBMCDATA_ERROR_UNITSHAVENOTBEENSET: return "Units have not been set";
    case LIBMCDATA_ERROR_INVALIDTIMESTAMP: return "Invalid time stamp";
    case LIBMCDATA_ERROR_NOCURRENTJOURNALCHUNK: return "No current journal chunk";
    case LIBMCDATA_ERROR_DUPLICATEJOURNALID: return "Duplicate journal id";
    case LIBMCDATA_ERROR_RESOURCEENTRYNOTFOUND: return "Resource entry not found";
    case LIBMCDATA_ERROR_NOCORERESOURCEPACKAGE: return "No core resource package";
    case LIBMCDATA_ERROR_INVALIDASPECTRATIO: return "Invalid aspect ratio";
    case LIBMCDATA_ERROR_MISSINGLOGORESOURCE: return "Missing logo resource";
    case LIBMCDATA_ERROR_NOUSERINTERFACEPLUGIN: return "No user interface plugin";
    case LIBMCDATA_ERROR_COULDNOTLOADUILIBRARY: return "Could not load UI library";
    case LIBMCDATA_ERROR_EVENTNAMENOTFOUND: return "Event name not found";
    case LIBMCDATA_ERROR_INVALIDEVENTSENDER: return "Invalid event context";
    case LIBMCDATA_ERROR_INVALIDEVENTCONTEXT: return "Invalid event sender";
    case LIBMCDATA_ERROR_INVALIDLAYERINDEX: return "Invalid layer index";
    case LIBMCDATA_ERROR_TEMPBASEPATHEMPTY: return "Empty base path for temporary files";
    case LIBMCDATA_ERROR_BUILDJOBDATANOTFOUND: return "Build job data not found";
    case LIBMCDATA_ERROR_INVALIDNAMESTRING: return "Invalid name string";
    case LIBMCDATA_ERROR_NAMESTRINGMISMATCH: return "Name string mismatch";
    case LIBMCDATA_ERROR_DATATYPEMISMATCH: return "Datatype mismatch";
    case LIBMCDATA_ERROR_COULDNOTFINDLOGENTRY: return "Could not find log entry";
    case LIBMCDATA_ERROR_NOLOGCALLBACK: return "No log callback";
    case LIBMCDATA_ERROR_EMPTYUSERNAME: return "Empty user name";
    case LIBMCDATA_ERROR_EMPTYUSERUUID: return "Empty user UUID";
    case LIBMCDATA_ERROR_USERNOTUNIQUE: return "User not unique";
    case LIBMCDATA_ERROR_EMPTYUSERROLE: return "Empty user role";
    case LIBMCDATA_ERROR_EMPTYUSERSALT: return "Empty user salt";
    case LIBMCDATA_ERROR_EMPTYUSERPASSWORD: return "Empty user password";
    case LIBMCDATA_ERROR_INVALIDUSERROLE: return "Invalid user role";
    case LIBMCDATA_ERROR_USERALREADYEXISTS: return "User already exists";
    case LIBMCDATA_ERROR_INVALIDUSERLANGUAGE: return "Invalid user language";
    case LIBMCDATA_ERROR_COULDNOTUPDATEUSERLANGUAGE: return "Could not update user language";
    case LIBMCDATA_ERROR_COULDNOTUPDATEUSERROLE: return "Could not update user role";
    case LIBMCDATA_ERROR_COULDNOTUPDATEUSERDESCRIPTION: return "Could not update user description";
    case LIBMCDATA_ERROR_COULDNOTUPDATEUSERPASSWORD: return "Could not update user password";
    case LIBMCDATA_ERROR_INVALIDUSERINDEX: return "Invalid user index";
    case LIBMCDATA_ERROR_INVALIDJOURNAL: return "Invalid journal";
    case LIBMCDATA_ERROR_EMPTYALERTIDENTIFIER: return "Empty alert identifier";
    case LIBMCDATA_ERROR_INVALIDALERTIDENTIFIER: return "Invalid alert identifier";
    case LIBMCDATA_ERROR_INVALIDALERTDESCRIPTIONIDENTIFIER: return "Invalid alert description identifier";
    case LIBMCDATA_ERROR_INVALIDALERTLEVEL: return "Invalid alert level";
    case LIBMCDATA_ERROR_ALERTNOTFOUND: return "Alert not found";
    case LIBMCDATA_ERROR_ALERTNOTACKNOWLEDGED: return "Alert has not been acknowledged.";
    case LIBMCDATA_ERROR_INVALIDSTORAGESTATE: return "Invalid storage state.";
    case LIBMCDATA_ERROR_STORAGEWRITERALREADYEXISTS: return "Storage writer already exists.";
    case LIBMCDATA_ERROR_STORAGEWRITERDOESNOTEXIST: return "Storage writer does not exist.";
    case LIBMCDATA_ERROR_STORAGESTREAMNOTPARTIAL: return "Storage stream is not partial.";
    case LIBMCDATA_ERROR_STORAGESTREAMNOTRANDOMACCESS: return "Storage stream is not random access.";
    case LIBMCDATA_ERROR_DOWNLOADTICKETNOTFOUND: return "Download ticket not found.";
    case LIBMCDATA_ERROR_EMPTYCLIENTFILENAME: return "Empty client file name.";
    case LIBMCDATA_ERROR_INVALIDCLIENTFILENAME: return "Invalid client file name.";
    default: return "unknown error";
  }
}

/*************************************************************************************************************************
 Declaration of handle classes 
**************************************************************************************************************************/

typedef LibMCDataHandle LibMCData_Base;
typedef LibMCDataHandle LibMCData_Iterator;
typedef LibMCDataHandle LibMCData_LogEntryList;
typedef LibMCDataHandle LibMCData_LogSession;
typedef LibMCDataHandle LibMCData_Alert;
typedef LibMCDataHandle LibMCData_AlertIterator;
typedef LibMCDataHandle LibMCData_AlertSession;
typedef LibMCDataHandle LibMCData_JournalSession;
typedef LibMCDataHandle LibMCData_StorageStream;
typedef LibMCDataHandle LibMCData_Storage;
typedef LibMCDataHandle LibMCData_BuildJobData;
typedef LibMCDataHandle LibMCData_BuildJobDataIterator;
typedef LibMCDataHandle LibMCData_BuildJob;
typedef LibMCDataHandle LibMCData_BuildJobIterator;
typedef LibMCDataHandle LibMCData_BuildJobHandler;
typedef LibMCDataHandle LibMCData_UserList;
typedef LibMCDataHandle LibMCData_LoginHandler;
typedef LibMCDataHandle LibMCData_PersistencyHandler;
typedef LibMCDataHandle LibMCData_InstallationInformation;
typedef LibMCDataHandle LibMCData_DataModel;

namespace LibMCData {

  /*************************************************************************************************************************
   Declaration of enums
  **************************************************************************************************************************/
  
  enum class eAlertLevel : LibMCData_int32 {
    FatalError = 1,
    CriticalError = 2,
    Warning = 3,
    Message = 4,
    Unknown = 7
  };
  
  enum class eLogLevel : LibMCData_int32 {
    FatalError = 1,
    CriticalError = 2,
    Warning = 3,
    Message = 4,
    Info = 5,
    Debug = 6,
    Unknown = 7
  };
  
  enum class eDataBaseType : LibMCData_int32 {
    Unknown = 0,
    SqLite = 1
  };
  
  enum class eParameterDataType : LibMCData_int32 {
    Unknown = 0,
    String = 1,
    UUID = 2,
    Integer = 3,
    Double = 4,
    Bool = 5
  };
  
  enum class eBuildJobStatus : LibMCData_int32 {
    Created = 0,
    Validating = 100,
    Validated = 200,
    Archived = 300,
    Deleted = 400
  };
  
  enum class eBuildJobDataType : LibMCData_int32 {
    Unknown = 0,
    Toolpath = 1,
    PNGImage = 2,
    JPEGImage = 3,
    Thumbnail = 4,
    Timeline = 5,
    SVGImage = 6,
    CustomBinaryData = 100
  };
  
  /*************************************************************************************************************************
   Declaration of structs
  **************************************************************************************************************************/
  
  #pragma pack (1)
  
  typedef struct sJournalChunkVariableInfo {
      LibMCData_uint32 m_VariableIndex;
      LibMCData_uint32 m_VariableType;
      LibMCData_uint32 m_EntryStartIndex;
      LibMCData_uint32 m_EntryCount;
  } sJournalChunkVariableInfo;
  
  typedef struct sJournalChunkIntegerEntry {
      LibMCData_uint32 m_RelativeTimeStampInMicroseconds;
      LibMCData_int64 m_IntegerValue;
  } sJournalChunkIntegerEntry;
  
  #pragma pack ()
  
  /*************************************************************************************************************************
   Declaration of function pointers 
  **************************************************************************************************************************/
  
  /**
  * LogCallback - A callback function for external logging systems
  *
  * @param[in] pLogMessage - Log message to be logged.
  * @param[in] pSubSystem - SubSystem of Log Message.
  * @param[in] eLogLevel - Log Level to be used.
  * @param[in] pTimestamp - Timestamp of the log message.
  * @param[in] pUserData - Userdata that is passed to the callback function
  */
  typedef void(*LogCallback)(const char *, const char *, LibMCData::eLogLevel, const char *, LibMCData_pvoid);
  
  /**
  * StreamReadCallback - Callback to call for reading a data chunk
  *
  * @param[in] pByteData - Pointer to a buffer to read data into
  * @param[in] nNumBytes - Number of bytes to read
  * @param[in] pStreamHandle - Handle of the stream to read.
  * @param[out] pErrorCode - LibMCData return code (0 for success)
  */
  typedef void(*StreamReadCallback)(LibMCData_pvoid, LibMCData_uint64, LibMCData_pvoid, LibMCData_uint32 *);
  
  /**
  * StreamSeekCallback - Callback to call for seeking in the stream
  *
  * @param[in] nPosition - Position in the stream to move to
  * @param[in] pStreamHandle - Handle of the stream to read.
  * @param[out] pErrorCode - LibMCData return code (0 for success)
  */
  typedef void(*StreamSeekCallback)(LibMCData_uint64, LibMCData_pvoid, LibMCData_uint32 *);
  
} // namespace LibMCData;

// define legacy C-names for enums, structs and function types
typedef LibMCData::eAlertLevel eLibMCDataAlertLevel;
typedef LibMCData::eLogLevel eLibMCDataLogLevel;
typedef LibMCData::eDataBaseType eLibMCDataDataBaseType;
typedef LibMCData::eParameterDataType eLibMCDataParameterDataType;
typedef LibMCData::eBuildJobStatus eLibMCDataBuildJobStatus;
typedef LibMCData::eBuildJobDataType eLibMCDataBuildJobDataType;
typedef LibMCData::sJournalChunkVariableInfo sLibMCDataJournalChunkVariableInfo;
typedef LibMCData::sJournalChunkIntegerEntry sLibMCDataJournalChunkIntegerEntry;
typedef LibMCData::LogCallback LibMCDataLogCallback;
typedef LibMCData::StreamReadCallback LibMCDataStreamReadCallback;
typedef LibMCData::StreamSeekCallback LibMCDataStreamSeekCallback;

#endif // __LIBMCDATA_TYPES_HEADER_CPP
