/*++

Copyright (C) 2020 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.7.0-develop.

Abstract: This is an autogenerated C++-Header file in order to allow an easy
 use of Machine Control data model library

Interface version: 1.0.0

*/

#ifndef __LIBMCDATA_DYNAMICHEADER_CPPTYPES
#define __LIBMCDATA_DYNAMICHEADER_CPPTYPES

#include "libmcdata_types.hpp"



/*************************************************************************************************************************
 Class definition for Base
**************************************************************************************************************************/

/*************************************************************************************************************************
 Class definition for Iterator
**************************************************************************************************************************/

/**
* Iterates to the next resource in the list.
*
* @param[in] pIterator - Iterator instance.
* @param[out] pHasNext - Iterates to the next resource in the list.
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataIterator_MoveNextPtr) (LibMCData_Iterator pIterator, bool * pHasNext);

/**
* Iterates to the previous resource in the list.
*
* @param[in] pIterator - Iterator instance.
* @param[out] pHasPrevious - Iterates to the previous resource in the list.
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataIterator_MovePreviousPtr) (LibMCData_Iterator pIterator, bool * pHasPrevious);

/**
* Returns the resource the iterator points at.
*
* @param[in] pIterator - Iterator instance.
* @param[out] pCurrentInstance - returns the resource instance.
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataIterator_GetCurrentPtr) (LibMCData_Iterator pIterator, LibMCData_Base * pCurrentInstance);

/**
* Creates a new resource iterator with the same resource list.
*
* @param[in] pIterator - Iterator instance.
* @param[out] pOutIterator - returns the cloned Iterator instance
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataIterator_ClonePtr) (LibMCData_Iterator pIterator, LibMCData_Iterator * pOutIterator);

/**
* Returns the number of resoucres the iterator captures.
*
* @param[in] pIterator - Iterator instance.
* @param[out] pCount - returns the number of resources the iterator captures.
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataIterator_CountPtr) (LibMCData_Iterator pIterator, LibMCData_uint64 * pCount);

/*************************************************************************************************************************
 Class definition for LogSession
**************************************************************************************************************************/

/**
* adds a new log entry.
*
* @param[in] pLogSession - LogSession instance.
* @param[in] pMessage - Log Message
* @param[in] pSubSystem - Sub System identifier
* @param[in] eLogLevel - Log Level
* @param[in] pTimestamp - Timestamp in ISO8601 UTC format
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataLogSession_AddEntryPtr) (LibMCData_LogSession pLogSession, const char * pMessage, const char * pSubSystem, LibMCData::eLogLevel eLogLevel, const char * pTimestamp);

/*************************************************************************************************************************
 Class definition for StorageStream
**************************************************************************************************************************/

/**
* returns the uuid of a storage stream.
*
* @param[in] pStorageStream - StorageStream instance.
* @param[in] nUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pUUIDBuffer -  buffer of UUID String, may be NULL
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataStorageStream_GetUUIDPtr) (LibMCData_StorageStream pStorageStream, const LibMCData_uint32 nUUIDBufferSize, LibMCData_uint32* pUUIDNeededChars, char * pUUIDBuffer);

/**
* returns the context uuid of a storage stream. Context might be for example a project uuid that this stream is part of.
*
* @param[in] pStorageStream - StorageStream instance.
* @param[in] nContextUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pContextUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pContextUUIDBuffer -  buffer of UUID String, may be NULL
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataStorageStream_GetContextUUIDPtr) (LibMCData_StorageStream pStorageStream, const LibMCData_uint32 nContextUUIDBufferSize, LibMCData_uint32* pContextUUIDNeededChars, char * pContextUUIDBuffer);

/**
* returns the timestamp of a storage stream.
*
* @param[in] pStorageStream - StorageStream instance.
* @param[in] nTimestampBufferSize - size of the buffer (including trailing 0)
* @param[out] pTimestampNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pTimestampBuffer -  buffer of Timestamp in ISO8601 UTC format, may be NULL
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataStorageStream_GetTimeStampPtr) (LibMCData_StorageStream pStorageStream, const LibMCData_uint32 nTimestampBufferSize, LibMCData_uint32* pTimestampNeededChars, char * pTimestampBuffer);

/**
* returns the name of a storage stream.
*
* @param[in] pStorageStream - StorageStream instance.
* @param[in] nNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNameBuffer -  buffer of Name String, may be NULL
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataStorageStream_GetNamePtr) (LibMCData_StorageStream pStorageStream, const LibMCData_uint32 nNameBufferSize, LibMCData_uint32* pNameNeededChars, char * pNameBuffer);

/**
* returns the mime type of a storage stream.
*
* @param[in] pStorageStream - StorageStream instance.
* @param[in] nMimeTypeBufferSize - size of the buffer (including trailing 0)
* @param[out] pMimeTypeNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pMimeTypeBuffer -  buffer of Mime Type String, may be NULL
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataStorageStream_GetMIMETypePtr) (LibMCData_StorageStream pStorageStream, const LibMCData_uint32 nMimeTypeBufferSize, LibMCData_uint32* pMimeTypeNeededChars, char * pMimeTypeBuffer);

/**
* returns the sha256 checksum of a storage stream.
*
* @param[in] pStorageStream - StorageStream instance.
* @param[in] nSHA2BufferSize - size of the buffer (including trailing 0)
* @param[out] pSHA2NeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pSHA2Buffer -  buffer of SHA1 String, may be NULL
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataStorageStream_GetSHA2Ptr) (LibMCData_StorageStream pStorageStream, const LibMCData_uint32 nSHA2BufferSize, LibMCData_uint32* pSHA2NeededChars, char * pSHA2Buffer);

/**
* returns the size of a storage stream.
*
* @param[in] pStorageStream - StorageStream instance.
* @param[out] pSize - Size
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataStorageStream_GetSizePtr) (LibMCData_StorageStream pStorageStream, LibMCData_uint64 * pSize);

/**
* returns the content of a storage stream.
*
* @param[in] pStorageStream - StorageStream instance.
* @param[in] nContentBufferSize - Number of elements in buffer
* @param[out] pContentNeededCount - will be filled with the count of the written elements, or needed buffer size.
* @param[out] pContentBuffer - uint8 buffer of Byte Content of the stream
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataStorageStream_GetContentPtr) (LibMCData_StorageStream pStorageStream, const LibMCData_uint64 nContentBufferSize, LibMCData_uint64* pContentNeededCount, LibMCData_uint8 * pContentBuffer);

/**
* returns direct read access to the storage stream. The callbacks are only valid throughout the existence of the StorageStream instance.
*
* @param[in] pStorageStream - StorageStream instance.
* @param[out] pTheReadCallback - Callback to call for reading a data chunk
* @param[out] pTheSeekCallback - Callback to call for seeking in the stream.
* @param[out] pStreamHandle - Handle of the stream.
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataStorageStream_GetCallbacksPtr) (LibMCData_StorageStream pStorageStream, LibMCData_pvoid * pTheReadCallback, LibMCData_pvoid * pTheSeekCallback, LibMCData_pvoid * pStreamHandle);

/*************************************************************************************************************************
 Class definition for Storage
**************************************************************************************************************************/

/**
* checks if a stream exists and is written to disk.
*
* @param[in] pStorage - Storage instance.
* @param[in] pUUID - UUID of storage stream.
* @param[out] pIsReady - Stream is ready.
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataStorage_StreamIsReadyPtr) (LibMCData_Storage pStorage, const char * pUUID, bool * pIsReady);

/**
* retrieves an existing stream.
*
* @param[in] pStorage - Storage instance.
* @param[in] pUUID - UUID of storage stream.
* @param[out] pStreamInstance - Stream Instance.
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataStorage_RetrieveStreamPtr) (LibMCData_Storage pStorage, const char * pUUID, LibMCData_StorageStream * pStreamInstance);

/**
* stores a new stream.
*
* @param[in] pStorage - Storage instance.
* @param[in] pUUID - UUID of storage stream. Must be unique and newly generated.
* @param[in] pContextUUID - Context UUID of storage stream. Important for ownership and deletion.
* @param[in] pName - Name of the stream.
* @param[in] pMimeType - Mime type of the content. MUST NOT be empty.
* @param[in] nContentBufferSize - Number of elements in buffer
* @param[in] pContentBuffer - uint8 buffer of Data of stream
* @param[in] pUserID - Currently authenticated user
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataStorage_StoreNewStreamPtr) (LibMCData_Storage pStorage, const char * pUUID, const char * pContextUUID, const char * pName, const char * pMimeType, LibMCData_uint64 nContentBufferSize, const LibMCData_uint8 * pContentBuffer, const char * pUserID);

/**
* starts storing a stream with partial uploads.
*
* @param[in] pStorage - Storage instance.
* @param[in] pUUID - UUID of storage stream. MUST be unique and newly generated.
* @param[in] pContextUUID - Context UUID of storage stream. Important for ownership and deletion.
* @param[in] pName - Name of the stream.
* @param[in] pMimeType - Mime type of the content. MUST NOT be empty.
* @param[in] nSize - Final size of the stream. MUST NOT be 0.
* @param[in] pSHA2 - SHA256 of the uploaded data.
* @param[in] pUserID - Currently authenticated user
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataStorage_BeginPartialStreamPtr) (LibMCData_Storage pStorage, const char * pUUID, const char * pContextUUID, const char * pName, const char * pMimeType, LibMCData_uint64 nSize, const char * pSHA2, const char * pUserID);

/**
* stores data in a stream with partial uploads. Uploads should be sequential for optimal performance, but may be in arbitrary order.
*
* @param[in] pStorage - Storage instance.
* @param[in] pUUID - UUID of storage stream. MUST have been created with BeginPartialStream first.
* @param[in] nOffset - Offset in stream to store to. Can be an arbitrary position, but storage MUST NOT override already uploaded data.
* @param[in] nContentBufferSize - Number of elements in buffer
* @param[in] pContentBuffer - uint8 buffer of Data block to store in stream.
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataStorage_StorePartialStreamPtr) (LibMCData_Storage pStorage, const char * pUUID, LibMCData_uint64 nOffset, LibMCData_uint64 nContentBufferSize, const LibMCData_uint8 * pContentBuffer);

/**
* Finishes storing a stream.
*
* @param[in] pStorage - Storage instance.
* @param[in] pUUID - UUID of storage stream. MUST have been created with BeginPartialStream first.
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataStorage_FinishPartialStreamPtr) (LibMCData_Storage pStorage, const char * pUUID);

/*************************************************************************************************************************
 Class definition for BuildJob
**************************************************************************************************************************/

/**
* returns the uuid of a build job.
*
* @param[in] pBuildJob - BuildJob instance.
* @param[in] nUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pUUIDBuffer -  buffer of UUID String, may be NULL
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataBuildJob_GetUUIDPtr) (LibMCData_BuildJob pBuildJob, const LibMCData_uint32 nUUIDBufferSize, LibMCData_uint32* pUUIDNeededChars, char * pUUIDBuffer);

/**
* returns the name of a build job.
*
* @param[in] pBuildJob - BuildJob instance.
* @param[in] nNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNameBuffer -  buffer of Name String, may be NULL
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataBuildJob_GetNamePtr) (LibMCData_BuildJob pBuildJob, const LibMCData_uint32 nNameBufferSize, LibMCData_uint32* pNameNeededChars, char * pNameBuffer);

/**
* returns the status of a build job.
*
* @param[in] pBuildJob - BuildJob instance.
* @param[out] pStatus - Status of build job.
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataBuildJob_GetStatusPtr) (LibMCData_BuildJob pBuildJob, LibMCData::eBuildJobStatus * pStatus);

/**
* returns the timestamp when the job was created.
*
* @param[in] pBuildJob - BuildJob instance.
* @param[in] nTimestampBufferSize - size of the buffer (including trailing 0)
* @param[out] pTimestampNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pTimestampBuffer -  buffer of Timestamp in ISO8601 UTC format, may be NULL
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataBuildJob_GetTimeStampPtr) (LibMCData_BuildJob pBuildJob, const LibMCData_uint32 nTimestampBufferSize, LibMCData_uint32* pTimestampNeededChars, char * pTimestampBuffer);

/**
* returns the storage stream of the build.
*
* @param[in] pBuildJob - BuildJob instance.
* @param[out] pStreamInstance - Stream Instance.
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataBuildJob_GetStorageStreamPtr) (LibMCData_BuildJob pBuildJob, LibMCData_StorageStream * pStreamInstance);

/**
* creates a build job log session access class.
*
* @param[in] pBuildJob - BuildJob instance.
* @param[out] pLogSession - LogSession class instance.
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataBuildJob_GetBuildJobLoggerPtr) (LibMCData_BuildJob pBuildJob, LibMCData_LogSession * pLogSession);

/*************************************************************************************************************************
 Class definition for BuildJobIterator
**************************************************************************************************************************/

/**
* Returns the build job the iterator points at.
*
* @param[in] pBuildJobIterator - BuildJobIterator instance.
* @param[out] pCurrentInstance - returns the build job instance.
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataBuildJobIterator_GetCurrentJobPtr) (LibMCData_BuildJobIterator pBuildJobIterator, LibMCData_BuildJob * pCurrentInstance);

/*************************************************************************************************************************
 Class definition for BuildJobHandler
**************************************************************************************************************************/

/**
* Creates a new build job.
*
* @param[in] pBuildJobHandler - BuildJobHandler instance.
* @param[in] pJobUUID - UUID String for the build job. Must be unique and newly generated.
* @param[in] pName - Name String
* @param[in] pUserID - Currently authenticated user
* @param[in] pStreamInstance - Storage stream to create the job from. ContextUUID of Stream MUST be the Job UUID.
* @param[out] pJobInstance - Build Job Instance.
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataBuildJobHandler_CreateJobPtr) (LibMCData_BuildJobHandler pBuildJobHandler, const char * pJobUUID, const char * pName, const char * pUserID, LibMCData_StorageStream pStreamInstance, LibMCData_BuildJob * pJobInstance);

/**
* Retrieves a job with a specific UUID.
*
* @param[in] pBuildJobHandler - BuildJobHandler instance.
* @param[in] pJobUUID - UUID String for the build job. Must be an existing Job.
* @param[out] pJobInstance - Build Job Instance.
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataBuildJobHandler_RetrieveJobPtr) (LibMCData_BuildJobHandler pBuildJobHandler, const char * pJobUUID, LibMCData_BuildJob * pJobInstance);

/**
* Retrieves a list of build jobs, filtered by status.
*
* @param[in] pBuildJobHandler - BuildJobHandler instance.
* @param[in] eStatus - Job Status to list.
* @param[out] pIteratorInstance - Build Job Iterator Instance.
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataBuildJobHandler_ListJobsByStatusPtr) (LibMCData_BuildJobHandler pBuildJobHandler, LibMCData::eBuildJobStatus eStatus, LibMCData_BuildJobIterator * pIteratorInstance);

/**
* Converts a status enum to a string identifier.
*
* @param[in] pBuildJobHandler - BuildJobHandler instance.
* @param[in] eStatus - Status Enum.
* @param[in] nStringBufferSize - size of the buffer (including trailing 0)
* @param[out] pStringNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pStringBuffer -  buffer of String Identifier., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataBuildJobHandler_ConvertBuildStatusToStringPtr) (LibMCData_BuildJobHandler pBuildJobHandler, LibMCData::eBuildJobStatus eStatus, const LibMCData_uint32 nStringBufferSize, LibMCData_uint32* pStringNeededChars, char * pStringBuffer);

/**
* Converts a string identifier to a status enum. Case sensitive. Fails if invalid.
*
* @param[in] pBuildJobHandler - BuildJobHandler instance.
* @param[in] pString - String Identifier.
* @param[out] pStatus - Status Enum.
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataBuildJobHandler_ConvertStringToBuildStatusPtr) (LibMCData_BuildJobHandler pBuildJobHandler, const char * pString, LibMCData::eBuildJobStatus * pStatus);

/*************************************************************************************************************************
 Class definition for DataModel
**************************************************************************************************************************/

/**
* initializes the database connection.
*
* @param[in] pDataModel - DataModel instance.
* @param[in] pDataDirectory - Directory that stores the data.
* @param[in] eDataBaseType - Type of database.
* @param[in] pConnectionString - Connection string.
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataDataModel_InitialiseDatabasePtr) (LibMCData_DataModel pDataModel, const char * pDataDirectory, LibMCData::eDataBaseType eDataBaseType, const char * pConnectionString);

/**
* returns the linear data model version.
*
* @param[in] pDataModel - DataModel instance.
* @param[out] pVersion - Data model version.
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataDataModel_GetDataModelVersionPtr) (LibMCData_DataModel pDataModel, LibMCData_uint32 * pVersion);

/**
* creates a storage access class.
*
* @param[in] pDataModel - DataModel instance.
* @param[out] pStorage - Storage class instance.
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataDataModel_CreateStoragePtr) (LibMCData_DataModel pDataModel, LibMCData_Storage * pStorage);

/**
* creates a build job access class.
*
* @param[in] pDataModel - DataModel instance.
* @param[out] pBuildJobHandler - BuildJobHandler class instance.
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataDataModel_CreateBuildJobHandlerPtr) (LibMCData_DataModel pDataModel, LibMCData_BuildJobHandler * pBuildJobHandler);

/**
* creates a global log session access class.
*
* @param[in] pDataModel - DataModel instance.
* @param[out] pLogSession - LogSession class instance.
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataDataModel_CreateNewLogSessionPtr) (LibMCData_DataModel pDataModel, LibMCData_LogSession * pLogSession);

/*************************************************************************************************************************
 Global functions
**************************************************************************************************************************/

/**
* retrieves the binary version of this library.
*
* @param[out] pMajor - returns the major version of this library
* @param[out] pMinor - returns the minor version of this library
* @param[out] pMicro - returns the micro version of this library
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataGetVersionPtr) (LibMCData_uint32 * pMajor, LibMCData_uint32 * pMinor, LibMCData_uint32 * pMicro);

/**
* Returns the last error recorded on this object
*
* @param[in] pInstance - Instance Handle
* @param[in] nErrorMessageBufferSize - size of the buffer (including trailing 0)
* @param[out] pErrorMessageNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pErrorMessageBuffer -  buffer of Message of the last error, may be NULL
* @param[out] pHasError - Is there a last error to query
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataGetLastErrorPtr) (LibMCData_Base pInstance, const LibMCData_uint32 nErrorMessageBufferSize, LibMCData_uint32* pErrorMessageNeededChars, char * pErrorMessageBuffer, bool * pHasError);

/**
* Releases shared ownership of an Instance
*
* @param[in] pInstance - Instance Handle
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataReleaseInstancePtr) (LibMCData_Base pInstance);

/**
* Acquires shared ownership of an Instance
*
* @param[in] pInstance - Instance Handle
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataAcquireInstancePtr) (LibMCData_Base pInstance);

/**
* Returns the address of the SymbolLookupMethod
*
* @param[out] pSymbolLookupMethod - Address of the SymbolAddressMethod
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataGetSymbolLookupMethodPtr) (LibMCData_pvoid * pSymbolLookupMethod);

/**
* Creates and initializes new MC DataModel Instance.
*
* @param[out] pInstance - New DataModel instance
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataCreateDataModelInstancePtr) (LibMCData_DataModel * pInstance);

/*************************************************************************************************************************
 Function Table Structure
**************************************************************************************************************************/

typedef struct {
	void * m_LibraryHandle;
	PLibMCDataIterator_MoveNextPtr m_Iterator_MoveNext;
	PLibMCDataIterator_MovePreviousPtr m_Iterator_MovePrevious;
	PLibMCDataIterator_GetCurrentPtr m_Iterator_GetCurrent;
	PLibMCDataIterator_ClonePtr m_Iterator_Clone;
	PLibMCDataIterator_CountPtr m_Iterator_Count;
	PLibMCDataLogSession_AddEntryPtr m_LogSession_AddEntry;
	PLibMCDataStorageStream_GetUUIDPtr m_StorageStream_GetUUID;
	PLibMCDataStorageStream_GetContextUUIDPtr m_StorageStream_GetContextUUID;
	PLibMCDataStorageStream_GetTimeStampPtr m_StorageStream_GetTimeStamp;
	PLibMCDataStorageStream_GetNamePtr m_StorageStream_GetName;
	PLibMCDataStorageStream_GetMIMETypePtr m_StorageStream_GetMIMEType;
	PLibMCDataStorageStream_GetSHA2Ptr m_StorageStream_GetSHA2;
	PLibMCDataStorageStream_GetSizePtr m_StorageStream_GetSize;
	PLibMCDataStorageStream_GetContentPtr m_StorageStream_GetContent;
	PLibMCDataStorageStream_GetCallbacksPtr m_StorageStream_GetCallbacks;
	PLibMCDataStorage_StreamIsReadyPtr m_Storage_StreamIsReady;
	PLibMCDataStorage_RetrieveStreamPtr m_Storage_RetrieveStream;
	PLibMCDataStorage_StoreNewStreamPtr m_Storage_StoreNewStream;
	PLibMCDataStorage_BeginPartialStreamPtr m_Storage_BeginPartialStream;
	PLibMCDataStorage_StorePartialStreamPtr m_Storage_StorePartialStream;
	PLibMCDataStorage_FinishPartialStreamPtr m_Storage_FinishPartialStream;
	PLibMCDataBuildJob_GetUUIDPtr m_BuildJob_GetUUID;
	PLibMCDataBuildJob_GetNamePtr m_BuildJob_GetName;
	PLibMCDataBuildJob_GetStatusPtr m_BuildJob_GetStatus;
	PLibMCDataBuildJob_GetTimeStampPtr m_BuildJob_GetTimeStamp;
	PLibMCDataBuildJob_GetStorageStreamPtr m_BuildJob_GetStorageStream;
	PLibMCDataBuildJob_GetBuildJobLoggerPtr m_BuildJob_GetBuildJobLogger;
	PLibMCDataBuildJobIterator_GetCurrentJobPtr m_BuildJobIterator_GetCurrentJob;
	PLibMCDataBuildJobHandler_CreateJobPtr m_BuildJobHandler_CreateJob;
	PLibMCDataBuildJobHandler_RetrieveJobPtr m_BuildJobHandler_RetrieveJob;
	PLibMCDataBuildJobHandler_ListJobsByStatusPtr m_BuildJobHandler_ListJobsByStatus;
	PLibMCDataBuildJobHandler_ConvertBuildStatusToStringPtr m_BuildJobHandler_ConvertBuildStatusToString;
	PLibMCDataBuildJobHandler_ConvertStringToBuildStatusPtr m_BuildJobHandler_ConvertStringToBuildStatus;
	PLibMCDataDataModel_InitialiseDatabasePtr m_DataModel_InitialiseDatabase;
	PLibMCDataDataModel_GetDataModelVersionPtr m_DataModel_GetDataModelVersion;
	PLibMCDataDataModel_CreateStoragePtr m_DataModel_CreateStorage;
	PLibMCDataDataModel_CreateBuildJobHandlerPtr m_DataModel_CreateBuildJobHandler;
	PLibMCDataDataModel_CreateNewLogSessionPtr m_DataModel_CreateNewLogSession;
	PLibMCDataGetVersionPtr m_GetVersion;
	PLibMCDataGetLastErrorPtr m_GetLastError;
	PLibMCDataReleaseInstancePtr m_ReleaseInstance;
	PLibMCDataAcquireInstancePtr m_AcquireInstance;
	PLibMCDataGetSymbolLookupMethodPtr m_GetSymbolLookupMethod;
	PLibMCDataCreateDataModelInstancePtr m_CreateDataModelInstance;
} sLibMCDataDynamicWrapperTable;

#endif // __LIBMCDATA_DYNAMICHEADER_CPPTYPES

