/*++

Copyright (C) 2020 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.8.0-develop.

Abstract: This is an autogenerated C++-Header file in order to allow an easy
 use of Machine Control data model library

Interface version: 1.0.0

*/

#ifndef __LIBMCDATA_DYNAMICHEADER_CPPTYPES
#define __LIBMCDATA_DYNAMICHEADER_CPPTYPES

#include "libmcdata_types.hpp"



/*************************************************************************************************************************
 Class definition for Base
**************************************************************************************************************************/

/*************************************************************************************************************************
 Class definition for Iterator
**************************************************************************************************************************/

/**
* Iterates to the next resource in the list.
*
* @param[in] pIterator - Iterator instance.
* @param[out] pHasNext - Iterates to the next resource in the list.
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataIterator_MoveNextPtr) (LibMCData_Iterator pIterator, bool * pHasNext);

/**
* Iterates to the previous resource in the list.
*
* @param[in] pIterator - Iterator instance.
* @param[out] pHasPrevious - Iterates to the previous resource in the list.
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataIterator_MovePreviousPtr) (LibMCData_Iterator pIterator, bool * pHasPrevious);

/**
* Returns the resource the iterator points at.
*
* @param[in] pIterator - Iterator instance.
* @param[out] pCurrentInstance - returns the resource instance.
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataIterator_GetCurrentPtr) (LibMCData_Iterator pIterator, LibMCData_Base * pCurrentInstance);

/**
* Creates a new resource iterator with the same resource list.
*
* @param[in] pIterator - Iterator instance.
* @param[out] pOutIterator - returns the cloned Iterator instance
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataIterator_ClonePtr) (LibMCData_Iterator pIterator, LibMCData_Iterator * pOutIterator);

/**
* Returns the number of resoucres the iterator captures.
*
* @param[in] pIterator - Iterator instance.
* @param[out] pCount - returns the number of resources the iterator captures.
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataIterator_CountPtr) (LibMCData_Iterator pIterator, LibMCData_uint64 * pCount);

/*************************************************************************************************************************
 Class definition for LogSession
**************************************************************************************************************************/

/**
* adds a new log entry.
*
* @param[in] pLogSession - LogSession instance.
* @param[in] pMessage - Log Message
* @param[in] pSubSystem - Sub System identifier
* @param[in] eLogLevel - Log Level
* @param[in] pTimestamp - Timestamp in ISO8601 UTC format
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataLogSession_AddEntryPtr) (LibMCData_LogSession pLogSession, const char * pMessage, const char * pSubSystem, LibMCData::eLogLevel eLogLevel, const char * pTimestamp);

/*************************************************************************************************************************
 Class definition for StorageStream
**************************************************************************************************************************/

/**
* returns the uuid of a storage stream.
*
* @param[in] pStorageStream - StorageStream instance.
* @param[in] nUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pUUIDBuffer -  buffer of UUID String, may be NULL
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataStorageStream_GetUUIDPtr) (LibMCData_StorageStream pStorageStream, const LibMCData_uint32 nUUIDBufferSize, LibMCData_uint32* pUUIDNeededChars, char * pUUIDBuffer);

/**
* returns the timestamp of a storage stream.
*
* @param[in] pStorageStream - StorageStream instance.
* @param[in] nTimestampBufferSize - size of the buffer (including trailing 0)
* @param[out] pTimestampNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pTimestampBuffer -  buffer of Timestamp in ISO8601 UTC format, may be NULL
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataStorageStream_GetTimeStampPtr) (LibMCData_StorageStream pStorageStream, const LibMCData_uint32 nTimestampBufferSize, LibMCData_uint32* pTimestampNeededChars, char * pTimestampBuffer);

/**
* returns the name of a storage stream.
*
* @param[in] pStorageStream - StorageStream instance.
* @param[in] nNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNameBuffer -  buffer of Name String, may be NULL
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataStorageStream_GetNamePtr) (LibMCData_StorageStream pStorageStream, const LibMCData_uint32 nNameBufferSize, LibMCData_uint32* pNameNeededChars, char * pNameBuffer);

/**
* returns the mime type of a storage stream.
*
* @param[in] pStorageStream - StorageStream instance.
* @param[in] nMimeTypeBufferSize - size of the buffer (including trailing 0)
* @param[out] pMimeTypeNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pMimeTypeBuffer -  buffer of Mime Type String, may be NULL
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataStorageStream_GetMIMETypePtr) (LibMCData_StorageStream pStorageStream, const LibMCData_uint32 nMimeTypeBufferSize, LibMCData_uint32* pMimeTypeNeededChars, char * pMimeTypeBuffer);

/**
* returns the sha256 checksum of a storage stream.
*
* @param[in] pStorageStream - StorageStream instance.
* @param[in] nSHA2BufferSize - size of the buffer (including trailing 0)
* @param[out] pSHA2NeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pSHA2Buffer -  buffer of SHA1 String, may be NULL
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataStorageStream_GetSHA2Ptr) (LibMCData_StorageStream pStorageStream, const LibMCData_uint32 nSHA2BufferSize, LibMCData_uint32* pSHA2NeededChars, char * pSHA2Buffer);

/**
* returns the size of a storage stream.
*
* @param[in] pStorageStream - StorageStream instance.
* @param[out] pSize - Size
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataStorageStream_GetSizePtr) (LibMCData_StorageStream pStorageStream, LibMCData_uint64 * pSize);

/**
* returns the content of a storage stream.
*
* @param[in] pStorageStream - StorageStream instance.
* @param[in] nContentBufferSize - Number of elements in buffer
* @param[out] pContentNeededCount - will be filled with the count of the written elements, or needed buffer size.
* @param[out] pContentBuffer - uint8  buffer of Byte Content of the stream
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataStorageStream_GetContentPtr) (LibMCData_StorageStream pStorageStream, const LibMCData_uint64 nContentBufferSize, LibMCData_uint64* pContentNeededCount, LibMCData_uint8 * pContentBuffer);

/**
* returns direct read access to the storage stream. The callbacks are only valid throughout the existence of the StorageStream instance.
*
* @param[in] pStorageStream - StorageStream instance.
* @param[out] pTheReadCallback - Callback to call for reading a data chunk
* @param[out] pTheSeekCallback - Callback to call for seeking in the stream.
* @param[out] pStreamHandle - Handle of the stream.
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataStorageStream_GetCallbacksPtr) (LibMCData_StorageStream pStorageStream, LibMCData_pvoid * pTheReadCallback, LibMCData_pvoid * pTheSeekCallback, LibMCData_pvoid * pStreamHandle);

/*************************************************************************************************************************
 Class definition for Storage
**************************************************************************************************************************/

/**
* checks if a stream exists and is written to disk.
*
* @param[in] pStorage - Storage instance.
* @param[in] pUUID - UUID of storage stream.
* @param[out] pIsReady - Stream is ready.
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataStorage_StreamIsReadyPtr) (LibMCData_Storage pStorage, const char * pUUID, bool * pIsReady);

/**
* retrieves an existing stream.
*
* @param[in] pStorage - Storage instance.
* @param[in] pUUID - UUID of storage stream.
* @param[out] pStreamInstance - Stream Instance.
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataStorage_RetrieveStreamPtr) (LibMCData_Storage pStorage, const char * pUUID, LibMCData_StorageStream * pStreamInstance);

/**
* stores a new stream.
*
* @param[in] pStorage - Storage instance.
* @param[in] pUUID - UUID of storage stream. Must be unique and newly generated.
* @param[in] pContextUUID - Context UUID of storage stream. Important for ownership and deletion.
* @param[in] pName - Name of the stream.
* @param[in] pMimeType - Mime type of the content. MUST NOT be empty.
* @param[in] nContentBufferSize - Number of elements in buffer
* @param[in] pContentBuffer - uint8 buffer of Data of stream
* @param[in] pUserID - Currently authenticated user
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataStorage_StoreNewStreamPtr) (LibMCData_Storage pStorage, const char * pUUID, const char * pContextUUID, const char * pName, const char * pMimeType, LibMCData_uint64 nContentBufferSize, const LibMCData_uint8 * pContentBuffer, const char * pUserID);

/**
* starts storing a stream with partial uploads.
*
* @param[in] pStorage - Storage instance.
* @param[in] pUUID - UUID of storage stream. MUST be unique and newly generated.
* @param[in] pContextUUID - Context UUID of storage stream. Important for ownership and deletion.
* @param[in] pName - Name of the stream.
* @param[in] pMimeType - Mime type of the content. MUST NOT be empty.
* @param[in] nSize - Final size of the stream. MUST NOT be 0.
* @param[in] pUserID - Currently authenticated user
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataStorage_BeginPartialStreamPtr) (LibMCData_Storage pStorage, const char * pUUID, const char * pContextUUID, const char * pName, const char * pMimeType, LibMCData_uint64 nSize, const char * pUserID);

/**
* stores data in a stream with partial uploads. Uploads should be sequential for optimal performance, but may be in arbitrary order.
*
* @param[in] pStorage - Storage instance.
* @param[in] pUUID - UUID of storage stream. MUST have been created with BeginPartialStream first.
* @param[in] nOffset - Offset in stream to store to. Can be an arbitrary position, but storage MUST NOT override already uploaded data.
* @param[in] nContentBufferSize - Number of elements in buffer
* @param[in] pContentBuffer - uint8 buffer of Data block to store in stream.
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataStorage_StorePartialStreamPtr) (LibMCData_Storage pStorage, const char * pUUID, LibMCData_uint64 nOffset, LibMCData_uint64 nContentBufferSize, const LibMCData_uint8 * pContentBuffer);

/**
* Finishes storing a stream.
*
* @param[in] pStorage - Storage instance.
* @param[in] pUUID - UUID of storage stream. MUST have been created with BeginPartialStream first.
* @param[in] pSHA2 - SHA256 of the uploaded data. If given initially, MUST be identical.
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataStorage_FinishPartialStreamPtr) (LibMCData_Storage pStorage, const char * pUUID, const char * pSHA2);

/**
* Finishes storing a stream with a 64k-Blockwise calculated Checksum.
*
* @param[in] pStorage - Storage instance.
* @param[in] pUUID - UUID of storage stream. MUST have been created with BeginPartialStream first.
* @param[in] pBlockwiseSHA2 - 64kB hashlist SHA256 checksum of the uploaded data. If given initially, MUST be identical.
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataStorage_FinishPartialStreamBlockwiseSHA256Ptr) (LibMCData_Storage pStorage, const char * pUUID, const char * pBlockwiseSHA2);

/**
* Returns the maximum stream size that the data model allows.
*
* @param[in] pStorage - Storage instance.
* @param[out] pMaxStreamSize - Maximum Stream Size in Bytes.
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataStorage_GetMaxStreamSizePtr) (LibMCData_Storage pStorage, LibMCData_uint64 * pMaxStreamSize);

/**
* Returns if the given content type is an acceptable value.
*
* @param[in] pStorage - Storage instance.
* @param[in] pContentType - Content type string (is taken case-insensitive)
* @param[out] pAccepted - Content type is accepted.
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataStorage_ContentTypeIsAcceptedPtr) (LibMCData_Storage pStorage, const char * pContentType, bool * pAccepted);

/**
* checks if a stream is an image.
*
* @param[in] pStorage - Storage instance.
* @param[in] pUUID - UUID of storage stream.
* @param[out] pIsImage - Returns if the stream is an image.
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataStorage_StreamIsImagePtr) (LibMCData_Storage pStorage, const char * pUUID, bool * pIsImage);

/*************************************************************************************************************************
 Class definition for BuildJobData
**************************************************************************************************************************/

/**
* returns the uuid of a build job data.
*
* @param[in] pBuildJobData - BuildJobData instance.
* @param[in] nUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pUUIDBuffer -  buffer of UUID String, may be NULL
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataBuildJobData_GetDataUUIDPtr) (LibMCData_BuildJobData pBuildJobData, const LibMCData_uint32 nUUIDBufferSize, LibMCData_uint32* pUUIDNeededChars, char * pUUIDBuffer);

/**
* returns the uuid of the parent build job.
*
* @param[in] pBuildJobData - BuildJobData instance.
* @param[in] nUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pUUIDBuffer -  buffer of UUID String, may be NULL
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataBuildJobData_GetJobUUIDPtr) (LibMCData_BuildJobData pBuildJobData, const LibMCData_uint32 nUUIDBufferSize, LibMCData_uint32* pUUIDNeededChars, char * pUUIDBuffer);

/**
* returns the name of a build job uuid.
*
* @param[in] pBuildJobData - BuildJobData instance.
* @param[in] nNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNameBuffer -  buffer of Name String, may be NULL
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataBuildJobData_GetNamePtr) (LibMCData_BuildJobData pBuildJobData, const LibMCData_uint32 nNameBufferSize, LibMCData_uint32* pNameNeededChars, char * pNameBuffer);

/**
* returns the timestamp when the job was created.
*
* @param[in] pBuildJobData - BuildJobData instance.
* @param[in] nTimestampBufferSize - size of the buffer (including trailing 0)
* @param[out] pTimestampNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pTimestampBuffer -  buffer of Timestamp in ISO8601 UTC format, may be NULL
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataBuildJobData_GetTimeStampPtr) (LibMCData_BuildJobData pBuildJobData, const LibMCData_uint32 nTimestampBufferSize, LibMCData_uint32* pTimestampNeededChars, char * pTimestampBuffer);

/**
* returns the storage stream of the build.
*
* @param[in] pBuildJobData - BuildJobData instance.
* @param[out] pStreamInstance - Stream Instance.
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataBuildJobData_GetStorageStreamPtr) (LibMCData_BuildJobData pBuildJobData, LibMCData_StorageStream * pStreamInstance);

/**
* returns the checksum of the storage stream of the build.
*
* @param[in] pBuildJobData - BuildJobData instance.
* @param[in] nSHA2BufferSize - size of the buffer (including trailing 0)
* @param[out] pSHA2NeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pSHA2Buffer -  buffer of SHA256 of the storage stream., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataBuildJobData_GetStorageStreamSHA2Ptr) (LibMCData_BuildJobData pBuildJobData, const LibMCData_uint32 nSHA2BufferSize, LibMCData_uint32* pSHA2NeededChars, char * pSHA2Buffer);

/**
* returns the size of the storage stream of the build.
*
* @param[in] pBuildJobData - BuildJobData instance.
* @param[out] pSize - size of the storage stream in bytes.
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataBuildJobData_GetStorageStreamSizePtr) (LibMCData_BuildJobData pBuildJobData, LibMCData_uint64 * pSize);

/**
* returns the data type of the job data.
*
* @param[in] pBuildJobData - BuildJobData instance.
* @param[out] pDataType - Data type of the job data
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataBuildJobData_GetDataTypePtr) (LibMCData_BuildJobData pBuildJobData, LibMCData::eBuildJobDataType * pDataType);

/**
* returns the data type of the job data as string.
*
* @param[in] pBuildJobData - BuildJobData instance.
* @param[in] nDataTypeBufferSize - size of the buffer (including trailing 0)
* @param[out] pDataTypeNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pDataTypeBuffer -  buffer of Data type of the job data, may be NULL
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataBuildJobData_GetDataTypeAsStringPtr) (LibMCData_BuildJobData pBuildJobData, const LibMCData_uint32 nDataTypeBufferSize, LibMCData_uint32* pDataTypeNeededChars, char * pDataTypeBuffer);

/**
* returns the mime type of a storage stream.
*
* @param[in] pBuildJobData - BuildJobData instance.
* @param[in] nMimeTypeBufferSize - size of the buffer (including trailing 0)
* @param[out] pMimeTypeNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pMimeTypeBuffer -  buffer of Mime Type String, may be NULL
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataBuildJobData_GetMIMETypePtr) (LibMCData_BuildJobData pBuildJobData, const LibMCData_uint32 nMimeTypeBufferSize, LibMCData_uint32* pMimeTypeNeededChars, char * pMimeTypeBuffer);

/*************************************************************************************************************************
 Class definition for BuildJobDataIterator
**************************************************************************************************************************/

/**
* Returns the build job data the iterator points at.
*
* @param[in] pBuildJobDataIterator - BuildJobDataIterator instance.
* @param[out] pCurrentInstance - returns the build job instance.
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataBuildJobDataIterator_GetCurrentJobDataPtr) (LibMCData_BuildJobDataIterator pBuildJobDataIterator, LibMCData_BuildJobData * pCurrentInstance);

/*************************************************************************************************************************
 Class definition for BuildJob
**************************************************************************************************************************/

/**
* returns the uuid of a build job.
*
* @param[in] pBuildJob - BuildJob instance.
* @param[in] nUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pUUIDBuffer -  buffer of UUID String, may be NULL
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataBuildJob_GetUUIDPtr) (LibMCData_BuildJob pBuildJob, const LibMCData_uint32 nUUIDBufferSize, LibMCData_uint32* pUUIDNeededChars, char * pUUIDBuffer);

/**
* returns the name of a build job.
*
* @param[in] pBuildJob - BuildJob instance.
* @param[in] nNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNameBuffer -  buffer of Name String, may be NULL
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataBuildJob_GetNamePtr) (LibMCData_BuildJob pBuildJob, const LibMCData_uint32 nNameBufferSize, LibMCData_uint32* pNameNeededChars, char * pNameBuffer);

/**
* returns the status of a build job.
*
* @param[in] pBuildJob - BuildJob instance.
* @param[out] pStatus - Status of build job.
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataBuildJob_GetStatusPtr) (LibMCData_BuildJob pBuildJob, LibMCData::eBuildJobStatus * pStatus);

/**
* returns the layer count of a build job.
*
* @param[in] pBuildJob - BuildJob instance.
* @param[out] pLayerCount - Layer Count of build job
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataBuildJob_GetLayerCountPtr) (LibMCData_BuildJob pBuildJob, LibMCData_uint32 * pLayerCount);

/**
* returns the timestamp when the job was created.
*
* @param[in] pBuildJob - BuildJob instance.
* @param[in] nTimestampBufferSize - size of the buffer (including trailing 0)
* @param[out] pTimestampNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pTimestampBuffer -  buffer of Timestamp in ISO8601 UTC format, may be NULL
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataBuildJob_GetTimeStampPtr) (LibMCData_BuildJob pBuildJob, const LibMCData_uint32 nTimestampBufferSize, LibMCData_uint32* pTimestampNeededChars, char * pTimestampBuffer);

/**
* returns the storage stream of the build.
*
* @param[in] pBuildJob - BuildJob instance.
* @param[out] pStreamInstance - Stream Instance.
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataBuildJob_GetStorageStreamPtr) (LibMCData_BuildJob pBuildJob, LibMCData_StorageStream * pStreamInstance);

/**
* returns the storage stream uuid of the build.
*
* @param[in] pBuildJob - BuildJob instance.
* @param[in] nStreamUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pStreamUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pStreamUUIDBuffer -  buffer of Stream UUID., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataBuildJob_GetStorageStreamUUIDPtr) (LibMCData_BuildJob pBuildJob, const LibMCData_uint32 nStreamUUIDBufferSize, LibMCData_uint32* pStreamUUIDNeededChars, char * pStreamUUIDBuffer);

/**
* creates a build job log session access class.
*
* @param[in] pBuildJob - BuildJob instance.
* @param[out] pLogSession - LogSession class instance.
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataBuildJob_GetBuildJobLoggerPtr) (LibMCData_BuildJob pBuildJob, LibMCData_LogSession * pLogSession);

/**
* Starts validation of a build job.
*
* @param[in] pBuildJob - BuildJob instance.
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataBuildJob_StartValidatingPtr) (LibMCData_BuildJob pBuildJob);

/**
* Finishes validation of a build job.
*
* @param[in] pBuildJob - BuildJob instance.
* @param[in] nLayerCount - Layer count
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataBuildJob_FinishValidatingPtr) (LibMCData_BuildJob pBuildJob, LibMCData_uint32 nLayerCount);

/**
* Archives a Job. Job MUST not be opened in the system. Job MUST be of state validated.
*
* @param[in] pBuildJob - BuildJob instance.
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataBuildJob_ArchiveJobPtr) (LibMCData_BuildJob pBuildJob);

/**
* Unarchives a Job. Job MUST be of state archived.
*
* @param[in] pBuildJob - BuildJob instance.
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataBuildJob_UnArchiveJobPtr) (LibMCData_BuildJob pBuildJob);

/**
* Deletes a Job permanently including all referencing data objects. Job MUST be of state archived to succeed.
*
* @param[in] pBuildJob - BuildJob instance.
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataBuildJob_DeleteJobPtr) (LibMCData_BuildJob pBuildJob);

/**
* Returns if a job is opened.
*
* @param[in] pBuildJob - BuildJob instance.
* @param[out] pCanBeArchived - returns if the job can be archived.
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataBuildJob_JobCanBeArchivedPtr) (LibMCData_BuildJob pBuildJob, bool * pCanBeArchived);

/**
* Adds additional data to the Job. Job MUST be of state validated in order to add job data.
*
* @param[in] pBuildJob - BuildJob instance.
* @param[in] pName - Name of the job
* @param[in] pStream - Storage Stream Instance
* @param[in] eDataType - Datatype of Job data
* @param[in] pUserID - Currently authenticated user
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataBuildJob_AddJobDataPtr) (LibMCData_BuildJob pBuildJob, const char * pName, LibMCData_StorageStream pStream, LibMCData::eBuildJobDataType eDataType, const char * pUserID);

/**
* Retrieves a list of build job data objects, filtered by type.
*
* @param[in] pBuildJob - BuildJob instance.
* @param[in] eDataType - Datatype of Job data.
* @param[out] pIteratorInstance - Build Job Data Iterator Instance.
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataBuildJob_ListJobDataByTypePtr) (LibMCData_BuildJob pBuildJob, LibMCData::eBuildJobDataType eDataType, LibMCData_BuildJobDataIterator * pIteratorInstance);

/**
* Retrieves a list of build job data objects.
*
* @param[in] pBuildJob - BuildJob instance.
* @param[out] pIteratorInstance - Build Job Data Iterator Instance.
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataBuildJob_ListJobDataPtr) (LibMCData_BuildJob pBuildJob, LibMCData_BuildJobDataIterator * pIteratorInstance);

/**
* Retrieves a build job data instance by its uuid.
*
* @param[in] pBuildJob - BuildJob instance.
* @param[in] pDataUUID - Job Data UUID.
* @param[out] pBuildJobData - Build Job Data Instance.
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataBuildJob_RetrieveJobDataPtr) (LibMCData_BuildJob pBuildJob, const char * pDataUUID, LibMCData_BuildJobData * pBuildJobData);

/*************************************************************************************************************************
 Class definition for BuildJobIterator
**************************************************************************************************************************/

/**
* Returns the build job the iterator points at.
*
* @param[in] pBuildJobIterator - BuildJobIterator instance.
* @param[out] pCurrentInstance - returns the build job instance.
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataBuildJobIterator_GetCurrentJobPtr) (LibMCData_BuildJobIterator pBuildJobIterator, LibMCData_BuildJob * pCurrentInstance);

/*************************************************************************************************************************
 Class definition for BuildJobHandler
**************************************************************************************************************************/

/**
* Creates a new build job.
*
* @param[in] pBuildJobHandler - BuildJobHandler instance.
* @param[in] pJobUUID - UUID String for the build job. Must be unique and newly generated.
* @param[in] pName - Name String
* @param[in] pUserID - Currently authenticated user
* @param[in] pStorageStreamUUID - Storage stream uuid for the job. Needs not exist yet.
* @param[out] pJobInstance - Build Job Instance.
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataBuildJobHandler_CreateJobPtr) (LibMCData_BuildJobHandler pBuildJobHandler, const char * pJobUUID, const char * pName, const char * pUserID, const char * pStorageStreamUUID, LibMCData_BuildJob * pJobInstance);

/**
* Retrieves a job with a specific UUID.
*
* @param[in] pBuildJobHandler - BuildJobHandler instance.
* @param[in] pJobUUID - UUID String for the build job. Must be an existing Job.
* @param[out] pJobInstance - Build Job Instance.
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataBuildJobHandler_RetrieveJobPtr) (LibMCData_BuildJobHandler pBuildJobHandler, const char * pJobUUID, LibMCData_BuildJob * pJobInstance);

/**
* Finds the parent build job of a given data uuid. Fails if data does not exist.
*
* @param[in] pBuildJobHandler - BuildJobHandler instance.
* @param[in] pDataUUID - Job Data UUID.
* @param[out] pBuildJobData - Build Job Instance.
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataBuildJobHandler_FindJobOfDataPtr) (LibMCData_BuildJobHandler pBuildJobHandler, const char * pDataUUID, LibMCData_BuildJob * pBuildJobData);

/**
* Retrieves a list of build jobs, filtered by status.
*
* @param[in] pBuildJobHandler - BuildJobHandler instance.
* @param[in] eStatus - Job Status to list.
* @param[out] pIteratorInstance - Build Job Iterator Instance.
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataBuildJobHandler_ListJobsByStatusPtr) (LibMCData_BuildJobHandler pBuildJobHandler, LibMCData::eBuildJobStatus eStatus, LibMCData_BuildJobIterator * pIteratorInstance);

/**
* Converts a status enum to a string identifier.
*
* @param[in] pBuildJobHandler - BuildJobHandler instance.
* @param[in] eStatus - Status Enum.
* @param[in] nStringBufferSize - size of the buffer (including trailing 0)
* @param[out] pStringNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pStringBuffer -  buffer of String Identifier., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataBuildJobHandler_ConvertBuildStatusToStringPtr) (LibMCData_BuildJobHandler pBuildJobHandler, LibMCData::eBuildJobStatus eStatus, const LibMCData_uint32 nStringBufferSize, LibMCData_uint32* pStringNeededChars, char * pStringBuffer);

/**
* Converts a string identifier to a status enum. Case sensitive. Fails if invalid.
*
* @param[in] pBuildJobHandler - BuildJobHandler instance.
* @param[in] pString - String Identifier.
* @param[out] pStatus - Status Enum.
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataBuildJobHandler_ConvertStringToBuildStatusPtr) (LibMCData_BuildJobHandler pBuildJobHandler, const char * pString, LibMCData::eBuildJobStatus * pStatus);

/*************************************************************************************************************************
 Class definition for LoginHandler
**************************************************************************************************************************/

/**
* Checks if a user exist.
*
* @param[in] pLoginHandler - LoginHandler instance.
* @param[in] pUsername - User name
* @param[out] pUserExists - Flag if users exists
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataLoginHandler_UserExistsPtr) (LibMCData_LoginHandler pLoginHandler, const char * pUsername, bool * pUserExists);

/**
* Retrieves a users data.
*
* @param[in] pLoginHandler - LoginHandler instance.
* @param[in] pUsername - User name
* @param[in] nSaltBufferSize - size of the buffer (including trailing 0)
* @param[out] pSaltNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pSaltBuffer -  buffer of Salt of the user., may be NULL
* @param[in] nHashedPasswordBufferSize - size of the buffer (including trailing 0)
* @param[out] pHashedPasswordNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pHashedPasswordBuffer -  buffer of Hashed Password., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataLoginHandler_GetUserDetailsPtr) (LibMCData_LoginHandler pLoginHandler, const char * pUsername, const LibMCData_uint32 nSaltBufferSize, LibMCData_uint32* pSaltNeededChars, char * pSaltBuffer, const LibMCData_uint32 nHashedPasswordBufferSize, LibMCData_uint32* pHashedPasswordNeededChars, char * pHashedPasswordBuffer);

/*************************************************************************************************************************
 Class definition for PersistencyHandler
**************************************************************************************************************************/

/**
* Retrieves if a persistent parameter has been stored.
*
* @param[in] pPersistencyHandler - PersistencyHandler instance.
* @param[in] pUUID - UUID of the parameter
* @param[out] pParameterExists - returns if parameter exists.
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataPersistencyHandler_HasPersistentParameterPtr) (LibMCData_PersistencyHandler pPersistencyHandler, const char * pUUID, bool * pParameterExists);

/**
* Retrieves details of a persistent parameter. Fails if parameter does not exist.
*
* @param[in] pPersistencyHandler - PersistencyHandler instance.
* @param[in] pUUID - UUID of the parameter
* @param[in] nNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNameBuffer -  buffer of Returns name of the parameter, may be NULL
* @param[out] pDataType - Returns data type of the parameter
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataPersistencyHandler_GetPersistentParameterDetailsPtr) (LibMCData_PersistencyHandler pPersistencyHandler, const char * pUUID, const LibMCData_uint32 nNameBufferSize, LibMCData_uint32* pNameNeededChars, char * pNameBuffer, LibMCData::eParameterDataType * pDataType);

/**
* Removes a persistent parameter from database. Does nothing if parameter does not exist.
*
* @param[in] pPersistencyHandler - PersistencyHandler instance.
* @param[in] pUUID - UUID of the parameter
* @param[out] pParameterExisted - returns if parameter existed.
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataPersistencyHandler_DeletePersistentParameterPtr) (LibMCData_PersistencyHandler pPersistencyHandler, const char * pUUID, bool * pParameterExisted);

/**
* Stores a persistent parameter in the database. Creates a new parameter if not existing.
*
* @param[in] pPersistencyHandler - PersistencyHandler instance.
* @param[in] pUUID - UUID of the parameter
* @param[in] pName - Name of the parameter. If parameter exists, MUST be the same as the stored parameter name.
* @param[in] eDataType - Data type of the parameter. If parameter exists, MUST be the same as the stored parameter data type.
* @param[in] pValue - Value of the parameter. MUST be of appropriate type.
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataPersistencyHandler_StorePersistentParameterPtr) (LibMCData_PersistencyHandler pPersistencyHandler, const char * pUUID, const char * pName, LibMCData::eParameterDataType eDataType, const char * pValue);

/**
* Stores a persistent parameter in the database. Creates a new parameter if not existing.
*
* @param[in] pPersistencyHandler - PersistencyHandler instance.
* @param[in] pUUID - UUID of the parameter
* @param[in] pName - Name of the parameter. If parameter exists, MUST be the same as the stored parameter name.
* @param[in] pValue - Value of the parameter.
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataPersistencyHandler_StorePersistentStringParameterPtr) (LibMCData_PersistencyHandler pPersistencyHandler, const char * pUUID, const char * pName, const char * pValue);

/**
* Stores a persistent parameter in the database. Creates a new parameter if not existing.
*
* @param[in] pPersistencyHandler - PersistencyHandler instance.
* @param[in] pUUID - UUID of the parameter
* @param[in] pName - Name of the parameter. If parameter exists, MUST be the same as the stored parameter name.
* @param[in] pValue - Value of the parameter. MUST be of appropriate type.
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataPersistencyHandler_StorePersistentUUIDParameterPtr) (LibMCData_PersistencyHandler pPersistencyHandler, const char * pUUID, const char * pName, const char * pValue);

/**
* Stores a persistent parameter in the database. Creates a new parameter if not existing.
*
* @param[in] pPersistencyHandler - PersistencyHandler instance.
* @param[in] pUUID - UUID of the parameter
* @param[in] pName - Name of the parameter. If parameter exists, MUST be the same as the stored parameter name.
* @param[in] dValue - Value of the parameter.
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataPersistencyHandler_StorePersistentDoubleParameterPtr) (LibMCData_PersistencyHandler pPersistencyHandler, const char * pUUID, const char * pName, LibMCData_double dValue);

/**
* Stores a persistent parameter in the database. Creates a new parameter if not existing.
*
* @param[in] pPersistencyHandler - PersistencyHandler instance.
* @param[in] pUUID - UUID of the parameter
* @param[in] pName - Name of the parameter. If parameter exists, MUST be the same as the stored parameter name.
* @param[in] nValue - Value of the parameter.
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataPersistencyHandler_StorePersistentIntegerParameterPtr) (LibMCData_PersistencyHandler pPersistencyHandler, const char * pUUID, const char * pName, LibMCData_int64 nValue);

/**
* Stores a persistent parameter in the database. Creates a new parameter if not existing.
*
* @param[in] pPersistencyHandler - PersistencyHandler instance.
* @param[in] pUUID - UUID of the parameter
* @param[in] pName - Name of the parameter. If parameter exists, MUST be the same as the stored parameter name.
* @param[in] bValue - Value of the parameter.
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataPersistencyHandler_StorePersistentBoolParameterPtr) (LibMCData_PersistencyHandler pPersistencyHandler, const char * pUUID, const char * pName, bool bValue);

/**
* Retrieves a persistent parameter in the database. Fails if not existing or invalid type.
*
* @param[in] pPersistencyHandler - PersistencyHandler instance.
* @param[in] pUUID - UUID of the parameter
* @param[in] nValueBufferSize - size of the buffer (including trailing 0)
* @param[out] pValueNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pValueBuffer -  buffer of Value of the parameter., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataPersistencyHandler_RetrievePersistentStringParameterPtr) (LibMCData_PersistencyHandler pPersistencyHandler, const char * pUUID, const LibMCData_uint32 nValueBufferSize, LibMCData_uint32* pValueNeededChars, char * pValueBuffer);

/**
* Retrieves a persistent parameter in the database. Fails if not existing or invalid type.
*
* @param[in] pPersistencyHandler - PersistencyHandler instance.
* @param[in] pUUID - UUID of the parameter
* @param[in] nValueBufferSize - size of the buffer (including trailing 0)
* @param[out] pValueNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pValueBuffer -  buffer of Value of the parameter., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataPersistencyHandler_RetrievePersistentUUIDParameterPtr) (LibMCData_PersistencyHandler pPersistencyHandler, const char * pUUID, const LibMCData_uint32 nValueBufferSize, LibMCData_uint32* pValueNeededChars, char * pValueBuffer);

/**
* Retrieves a persistent parameter in the database. Fails if not existing or invalid type.
*
* @param[in] pPersistencyHandler - PersistencyHandler instance.
* @param[in] pUUID - UUID of the parameter
* @param[out] pValue - Value of the parameter.
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataPersistencyHandler_RetrievePersistentDoubleParameterPtr) (LibMCData_PersistencyHandler pPersistencyHandler, const char * pUUID, LibMCData_double * pValue);

/**
* Retrieves a persistent parameter in the database. Fails if not existing or invalid type.
*
* @param[in] pPersistencyHandler - PersistencyHandler instance.
* @param[in] pUUID - UUID of the parameter
* @param[out] pValue - Value of the parameter.
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataPersistencyHandler_RetrievePersistentIntegerParameterPtr) (LibMCData_PersistencyHandler pPersistencyHandler, const char * pUUID, LibMCData_int64 * pValue);

/**
* Retrieves a persistent parameter in the database. Fails if not existing or invalid type.
*
* @param[in] pPersistencyHandler - PersistencyHandler instance.
* @param[in] pUUID - UUID of the parameter
* @param[out] pValue - Value of the parameter.
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataPersistencyHandler_RetrievePersistentBoolParameterPtr) (LibMCData_PersistencyHandler pPersistencyHandler, const char * pUUID, bool * pValue);

/*************************************************************************************************************************
 Class definition for DataModel
**************************************************************************************************************************/

/**
* initializes the database connection.
*
* @param[in] pDataModel - DataModel instance.
* @param[in] pDataDirectory - Directory that stores the data.
* @param[in] eDataBaseType - Type of database.
* @param[in] pConnectionString - Connection string.
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataDataModel_InitialiseDatabasePtr) (LibMCData_DataModel pDataModel, const char * pDataDirectory, LibMCData::eDataBaseType eDataBaseType, const char * pConnectionString);

/**
* returns the linear data model version.
*
* @param[in] pDataModel - DataModel instance.
* @param[out] pVersion - Data model version.
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataDataModel_GetDataModelVersionPtr) (LibMCData_DataModel pDataModel, LibMCData_uint32 * pVersion);

/**
* returns unique identifiers for the current installation.
*
* @param[in] pDataModel - DataModel instance.
* @param[in] nInstallationUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pInstallationUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pInstallationUUIDBuffer -  buffer of Installation UUID. Public value to document which installation was used for something., may be NULL
* @param[in] nInstallationSecretBufferSize - size of the buffer (including trailing 0)
* @param[out] pInstallationSecretNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pInstallationSecretBuffer -  buffer of Secret SHA256 key for seeding external-facing pseudo-randomness. MUST NOT be given outside of the application., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataDataModel_GetInstallationInformationPtr) (LibMCData_DataModel pDataModel, const LibMCData_uint32 nInstallationUUIDBufferSize, LibMCData_uint32* pInstallationUUIDNeededChars, char * pInstallationUUIDBuffer, const LibMCData_uint32 nInstallationSecretBufferSize, LibMCData_uint32* pInstallationSecretNeededChars, char * pInstallationSecretBuffer);

/**
* creates a storage access class.
*
* @param[in] pDataModel - DataModel instance.
* @param[out] pStorage - Storage class instance.
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataDataModel_CreateStoragePtr) (LibMCData_DataModel pDataModel, LibMCData_Storage * pStorage);

/**
* creates a build job access class.
*
* @param[in] pDataModel - DataModel instance.
* @param[out] pBuildJobHandler - BuildJobHandler class instance.
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataDataModel_CreateBuildJobHandlerPtr) (LibMCData_DataModel pDataModel, LibMCData_BuildJobHandler * pBuildJobHandler);

/**
* creates a global log session access class.
*
* @param[in] pDataModel - DataModel instance.
* @param[out] pLogSession - LogSession class instance.
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataDataModel_CreateNewLogSessionPtr) (LibMCData_DataModel pDataModel, LibMCData_LogSession * pLogSession);

/**
* creates a login handler instance.
*
* @param[in] pDataModel - DataModel instance.
* @param[out] pLoginHandler - LoginHandler instance.
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataDataModel_CreateLoginHandlerPtr) (LibMCData_DataModel pDataModel, LibMCData_LoginHandler * pLoginHandler);

/**
* creates a persistency handler instance.
*
* @param[in] pDataModel - DataModel instance.
* @param[out] pPersistencyHandler - PersistencyHandler instance.
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataDataModel_CreatePersistencyHandlerPtr) (LibMCData_DataModel pDataModel, LibMCData_PersistencyHandler * pPersistencyHandler);

/**
* Sets a custom base temp directory. An empty string defaults to the system temp directory.
*
* @param[in] pDataModel - DataModel instance.
* @param[in] pTempDirectory - Temp directory path to use. SHOULD be an absolute path, if not empty. Directory MUST exist, if not empty.
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataDataModel_SetBaseTempDirectoryPtr) (LibMCData_DataModel pDataModel, const char * pTempDirectory);

/**
* Returns a custom base temp directory. An empty string defaults to the system temp directory.
*
* @param[in] pDataModel - DataModel instance.
* @param[in] nTempDirectoryBufferSize - size of the buffer (including trailing 0)
* @param[out] pTempDirectoryNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pTempDirectoryBuffer -  buffer of Temp directory path., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataDataModel_GetBaseTempDirectoryPtr) (LibMCData_DataModel pDataModel, const LibMCData_uint32 nTempDirectoryBufferSize, LibMCData_uint32* pTempDirectoryNeededChars, char * pTempDirectoryBuffer);

/*************************************************************************************************************************
 Global functions
**************************************************************************************************************************/

/**
* retrieves the binary version of this library.
*
* @param[out] pMajor - returns the major version of this library
* @param[out] pMinor - returns the minor version of this library
* @param[out] pMicro - returns the micro version of this library
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataGetVersionPtr) (LibMCData_uint32 * pMajor, LibMCData_uint32 * pMinor, LibMCData_uint32 * pMicro);

/**
* Returns the last error recorded on this object
*
* @param[in] pInstance - Instance Handle
* @param[in] nErrorMessageBufferSize - size of the buffer (including trailing 0)
* @param[out] pErrorMessageNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pErrorMessageBuffer -  buffer of Message of the last error, may be NULL
* @param[out] pHasError - Is there a last error to query
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataGetLastErrorPtr) (LibMCData_Base pInstance, const LibMCData_uint32 nErrorMessageBufferSize, LibMCData_uint32* pErrorMessageNeededChars, char * pErrorMessageBuffer, bool * pHasError);

/**
* Releases shared ownership of an Instance
*
* @param[in] pInstance - Instance Handle
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataReleaseInstancePtr) (LibMCData_Base pInstance);

/**
* Acquires shared ownership of an Instance
*
* @param[in] pInstance - Instance Handle
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataAcquireInstancePtr) (LibMCData_Base pInstance);

/**
* Returns the address of the SymbolLookupMethod
*
* @param[out] pSymbolLookupMethod - Address of the SymbolAddressMethod
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataGetSymbolLookupMethodPtr) (LibMCData_pvoid * pSymbolLookupMethod);

/**
* Creates and initializes new MC DataModel Instance.
*
* @param[out] pInstance - New DataModel instance
* @return error code or 0 (success)
*/
typedef LibMCDataResult (*PLibMCDataCreateDataModelInstancePtr) (LibMCData_DataModel * pInstance);

/*************************************************************************************************************************
 Function Table Structure
**************************************************************************************************************************/

typedef struct {
	void * m_LibraryHandle;
	PLibMCDataIterator_MoveNextPtr m_Iterator_MoveNext;
	PLibMCDataIterator_MovePreviousPtr m_Iterator_MovePrevious;
	PLibMCDataIterator_GetCurrentPtr m_Iterator_GetCurrent;
	PLibMCDataIterator_ClonePtr m_Iterator_Clone;
	PLibMCDataIterator_CountPtr m_Iterator_Count;
	PLibMCDataLogSession_AddEntryPtr m_LogSession_AddEntry;
	PLibMCDataStorageStream_GetUUIDPtr m_StorageStream_GetUUID;
	PLibMCDataStorageStream_GetTimeStampPtr m_StorageStream_GetTimeStamp;
	PLibMCDataStorageStream_GetNamePtr m_StorageStream_GetName;
	PLibMCDataStorageStream_GetMIMETypePtr m_StorageStream_GetMIMEType;
	PLibMCDataStorageStream_GetSHA2Ptr m_StorageStream_GetSHA2;
	PLibMCDataStorageStream_GetSizePtr m_StorageStream_GetSize;
	PLibMCDataStorageStream_GetContentPtr m_StorageStream_GetContent;
	PLibMCDataStorageStream_GetCallbacksPtr m_StorageStream_GetCallbacks;
	PLibMCDataStorage_StreamIsReadyPtr m_Storage_StreamIsReady;
	PLibMCDataStorage_RetrieveStreamPtr m_Storage_RetrieveStream;
	PLibMCDataStorage_StoreNewStreamPtr m_Storage_StoreNewStream;
	PLibMCDataStorage_BeginPartialStreamPtr m_Storage_BeginPartialStream;
	PLibMCDataStorage_StorePartialStreamPtr m_Storage_StorePartialStream;
	PLibMCDataStorage_FinishPartialStreamPtr m_Storage_FinishPartialStream;
	PLibMCDataStorage_FinishPartialStreamBlockwiseSHA256Ptr m_Storage_FinishPartialStreamBlockwiseSHA256;
	PLibMCDataStorage_GetMaxStreamSizePtr m_Storage_GetMaxStreamSize;
	PLibMCDataStorage_ContentTypeIsAcceptedPtr m_Storage_ContentTypeIsAccepted;
	PLibMCDataStorage_StreamIsImagePtr m_Storage_StreamIsImage;
	PLibMCDataBuildJobData_GetDataUUIDPtr m_BuildJobData_GetDataUUID;
	PLibMCDataBuildJobData_GetJobUUIDPtr m_BuildJobData_GetJobUUID;
	PLibMCDataBuildJobData_GetNamePtr m_BuildJobData_GetName;
	PLibMCDataBuildJobData_GetTimeStampPtr m_BuildJobData_GetTimeStamp;
	PLibMCDataBuildJobData_GetStorageStreamPtr m_BuildJobData_GetStorageStream;
	PLibMCDataBuildJobData_GetStorageStreamSHA2Ptr m_BuildJobData_GetStorageStreamSHA2;
	PLibMCDataBuildJobData_GetStorageStreamSizePtr m_BuildJobData_GetStorageStreamSize;
	PLibMCDataBuildJobData_GetDataTypePtr m_BuildJobData_GetDataType;
	PLibMCDataBuildJobData_GetDataTypeAsStringPtr m_BuildJobData_GetDataTypeAsString;
	PLibMCDataBuildJobData_GetMIMETypePtr m_BuildJobData_GetMIMEType;
	PLibMCDataBuildJobDataIterator_GetCurrentJobDataPtr m_BuildJobDataIterator_GetCurrentJobData;
	PLibMCDataBuildJob_GetUUIDPtr m_BuildJob_GetUUID;
	PLibMCDataBuildJob_GetNamePtr m_BuildJob_GetName;
	PLibMCDataBuildJob_GetStatusPtr m_BuildJob_GetStatus;
	PLibMCDataBuildJob_GetLayerCountPtr m_BuildJob_GetLayerCount;
	PLibMCDataBuildJob_GetTimeStampPtr m_BuildJob_GetTimeStamp;
	PLibMCDataBuildJob_GetStorageStreamPtr m_BuildJob_GetStorageStream;
	PLibMCDataBuildJob_GetStorageStreamUUIDPtr m_BuildJob_GetStorageStreamUUID;
	PLibMCDataBuildJob_GetBuildJobLoggerPtr m_BuildJob_GetBuildJobLogger;
	PLibMCDataBuildJob_StartValidatingPtr m_BuildJob_StartValidating;
	PLibMCDataBuildJob_FinishValidatingPtr m_BuildJob_FinishValidating;
	PLibMCDataBuildJob_ArchiveJobPtr m_BuildJob_ArchiveJob;
	PLibMCDataBuildJob_UnArchiveJobPtr m_BuildJob_UnArchiveJob;
	PLibMCDataBuildJob_DeleteJobPtr m_BuildJob_DeleteJob;
	PLibMCDataBuildJob_JobCanBeArchivedPtr m_BuildJob_JobCanBeArchived;
	PLibMCDataBuildJob_AddJobDataPtr m_BuildJob_AddJobData;
	PLibMCDataBuildJob_ListJobDataByTypePtr m_BuildJob_ListJobDataByType;
	PLibMCDataBuildJob_ListJobDataPtr m_BuildJob_ListJobData;
	PLibMCDataBuildJob_RetrieveJobDataPtr m_BuildJob_RetrieveJobData;
	PLibMCDataBuildJobIterator_GetCurrentJobPtr m_BuildJobIterator_GetCurrentJob;
	PLibMCDataBuildJobHandler_CreateJobPtr m_BuildJobHandler_CreateJob;
	PLibMCDataBuildJobHandler_RetrieveJobPtr m_BuildJobHandler_RetrieveJob;
	PLibMCDataBuildJobHandler_FindJobOfDataPtr m_BuildJobHandler_FindJobOfData;
	PLibMCDataBuildJobHandler_ListJobsByStatusPtr m_BuildJobHandler_ListJobsByStatus;
	PLibMCDataBuildJobHandler_ConvertBuildStatusToStringPtr m_BuildJobHandler_ConvertBuildStatusToString;
	PLibMCDataBuildJobHandler_ConvertStringToBuildStatusPtr m_BuildJobHandler_ConvertStringToBuildStatus;
	PLibMCDataLoginHandler_UserExistsPtr m_LoginHandler_UserExists;
	PLibMCDataLoginHandler_GetUserDetailsPtr m_LoginHandler_GetUserDetails;
	PLibMCDataPersistencyHandler_HasPersistentParameterPtr m_PersistencyHandler_HasPersistentParameter;
	PLibMCDataPersistencyHandler_GetPersistentParameterDetailsPtr m_PersistencyHandler_GetPersistentParameterDetails;
	PLibMCDataPersistencyHandler_DeletePersistentParameterPtr m_PersistencyHandler_DeletePersistentParameter;
	PLibMCDataPersistencyHandler_StorePersistentParameterPtr m_PersistencyHandler_StorePersistentParameter;
	PLibMCDataPersistencyHandler_StorePersistentStringParameterPtr m_PersistencyHandler_StorePersistentStringParameter;
	PLibMCDataPersistencyHandler_StorePersistentUUIDParameterPtr m_PersistencyHandler_StorePersistentUUIDParameter;
	PLibMCDataPersistencyHandler_StorePersistentDoubleParameterPtr m_PersistencyHandler_StorePersistentDoubleParameter;
	PLibMCDataPersistencyHandler_StorePersistentIntegerParameterPtr m_PersistencyHandler_StorePersistentIntegerParameter;
	PLibMCDataPersistencyHandler_StorePersistentBoolParameterPtr m_PersistencyHandler_StorePersistentBoolParameter;
	PLibMCDataPersistencyHandler_RetrievePersistentStringParameterPtr m_PersistencyHandler_RetrievePersistentStringParameter;
	PLibMCDataPersistencyHandler_RetrievePersistentUUIDParameterPtr m_PersistencyHandler_RetrievePersistentUUIDParameter;
	PLibMCDataPersistencyHandler_RetrievePersistentDoubleParameterPtr m_PersistencyHandler_RetrievePersistentDoubleParameter;
	PLibMCDataPersistencyHandler_RetrievePersistentIntegerParameterPtr m_PersistencyHandler_RetrievePersistentIntegerParameter;
	PLibMCDataPersistencyHandler_RetrievePersistentBoolParameterPtr m_PersistencyHandler_RetrievePersistentBoolParameter;
	PLibMCDataDataModel_InitialiseDatabasePtr m_DataModel_InitialiseDatabase;
	PLibMCDataDataModel_GetDataModelVersionPtr m_DataModel_GetDataModelVersion;
	PLibMCDataDataModel_GetInstallationInformationPtr m_DataModel_GetInstallationInformation;
	PLibMCDataDataModel_CreateStoragePtr m_DataModel_CreateStorage;
	PLibMCDataDataModel_CreateBuildJobHandlerPtr m_DataModel_CreateBuildJobHandler;
	PLibMCDataDataModel_CreateNewLogSessionPtr m_DataModel_CreateNewLogSession;
	PLibMCDataDataModel_CreateLoginHandlerPtr m_DataModel_CreateLoginHandler;
	PLibMCDataDataModel_CreatePersistencyHandlerPtr m_DataModel_CreatePersistencyHandler;
	PLibMCDataDataModel_SetBaseTempDirectoryPtr m_DataModel_SetBaseTempDirectory;
	PLibMCDataDataModel_GetBaseTempDirectoryPtr m_DataModel_GetBaseTempDirectory;
	PLibMCDataGetVersionPtr m_GetVersion;
	PLibMCDataGetLastErrorPtr m_GetLastError;
	PLibMCDataReleaseInstancePtr m_ReleaseInstance;
	PLibMCDataAcquireInstancePtr m_AcquireInstance;
	PLibMCDataGetSymbolLookupMethodPtr m_GetSymbolLookupMethod;
	PLibMCDataCreateDataModelInstancePtr m_CreateDataModelInstance;
} sLibMCDataDynamicWrapperTable;

#endif // __LIBMCDATA_DYNAMICHEADER_CPPTYPES

