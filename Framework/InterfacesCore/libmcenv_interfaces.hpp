/*++

Copyright (C) 2020 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.7.0-develop.

Abstract: This is an autogenerated C++ header file in order to allow easy
development of MC Environment Interface. The implementer of MC Environment Interface needs to
derive concrete classes from the abstract classes in this header.

Interface version: 1.0.0

*/


#ifndef __LIBMCENV_CPPINTERFACES
#define __LIBMCENV_CPPINTERFACES

#include <string>
#include <memory>

#include "libmcenv_types.hpp"



namespace LibMCEnv {
namespace Impl {

/**
 Forward declarations of class interfaces
*/
class IBase;
class IToolpathLayer;
class IToolpathAccessor;
class IBuild;
class IWorkingFileExecution;
class IWorkingFile;
class IWorkingDirectory;
class IDriverEnvironment;
class ISignalTrigger;
class ISignalHandler;
class IStateEnvironment;



/*************************************************************************************************************************
 Parameter Cache definitions
**************************************************************************************************************************/

class ParameterCache {
	public:
		virtual ~ParameterCache() {}
};

template <class T1> class ParameterCache_1 : public ParameterCache {
	private:
		T1 m_param1;
	public:
		ParameterCache_1 (const T1 & param1)
			: m_param1 (param1)
		{
		}

		void retrieveData (T1 & param1)
		{
			param1 = m_param1;
		}
};

template <class T1, class T2> class ParameterCache_2 : public ParameterCache {
	private:
		T1 m_param1;
		T2 m_param2;
	public:
		ParameterCache_2 (const T1 & param1, const T2 & param2)
			: m_param1 (param1), m_param2 (param2)
		{
		}

		void retrieveData (T1 & param1, T2 & param2)
		{
			param1 = m_param1;
			param2 = m_param2;
		}
};

template <class T1, class T2, class T3> class ParameterCache_3 : public ParameterCache {
	private:
		T1 m_param1;
		T2 m_param2;
		T3 m_param3;
	public:
		ParameterCache_3 (const T1 & param1, const T2 & param2, const T3 & param3)
			: m_param1 (param1), m_param2 (param2), m_param3 (param3)
		{
		}

		void retrieveData (T1 & param1, T2 & param2, T3 & param3)
		{
			param1 = m_param1;
			param2 = m_param2;
			param3 = m_param3;
		}
};


/*************************************************************************************************************************
 Class interface for Base 
**************************************************************************************************************************/

class IBase {
private:
	std::unique_ptr<ParameterCache> m_ParameterCache;
public:
	/**
	* IBase::~IBase - virtual destructor of IBase
	*/
	virtual ~IBase() {};

	/**
	* IBase::ReleaseBaseClassInterface - Releases ownership of a base class interface. Deletes the reference, if necessary.
	* @param[in] pIBase - The base class instance to release
	*/
	static void ReleaseBaseClassInterface(IBase* pIBase)
	{
		if (pIBase) {
			pIBase->DecRefCount();
		}
	};

	/**
	* IBase::AcquireBaseClassInterface - Acquires shared ownership of a base class interface.
	* @param[in] pIBase - The base class instance to acquire
	*/
	static void AcquireBaseClassInterface(IBase* pIBase)
	{
		if (pIBase) {
			pIBase->IncRefCount();
		}
	};


	/**
	* IBase::GetLastErrorMessage - Returns the last error registered of this class instance
	* @param[out] sErrorMessage - Message of the last error registered
	* @return Has an error been registered already
	*/
	virtual bool GetLastErrorMessage(std::string & sErrorMessage) = 0;

	/**
	* IBase::ClearErrorMessages - Clears all registered messages of this class instance
	*/
	virtual void ClearErrorMessages() = 0;

	/**
	* IBase::RegisterErrorMessage - Registers an error message with this class instance
	* @param[in] sErrorMessage - Error message to register
	*/
	virtual void RegisterErrorMessage(const std::string & sErrorMessage) = 0;

	/**
	* IBase::IncRefCount - Increases the reference count of a class instance
	*/
	virtual void IncRefCount() = 0;

	/**
	* IBase::DecRefCount - Decreases the reference count of a class instance and free releases it, if the last reference has been removed
	* @return Has the object been released
	*/
	virtual bool DecRefCount() = 0;

	/**
	* IBase::_setCache - set parameter cache of object
	*/
	void _setCache(ParameterCache * pCache)
	{
		m_ParameterCache.reset(pCache);
	}

	/**
	* IBase::_getCache - returns parameter cache of object
	*/
	ParameterCache* _getCache()
	{
		return m_ParameterCache.get();
	}

};


/**
 Definition of a shared pointer class for IBase
*/
template<class T>
class IBaseSharedPtr : public std::shared_ptr<T>
{
public:
	explicit IBaseSharedPtr(T* t = nullptr)
		: std::shared_ptr<T>(t, IBase::ReleaseBaseClassInterface)
	{
		t->IncRefCount();
	}

	// Reset function, as it also needs to properly set the deleter.
	void reset(T* t = nullptr)
	{
		std::shared_ptr<T>::reset(t, IBase::ReleaseBaseClassInterface);
	}

	// Get-function that increases the Base class's reference count
	T* getCoOwningPtr()
	{
		T* t = this->get();
		t->IncRefCount();
		return t;
	}
};


typedef IBaseSharedPtr<IBase> PIBase;


/*************************************************************************************************************************
 Class interface for ToolpathLayer 
**************************************************************************************************************************/

class IToolpathLayer : public virtual IBase {
public:
	/**
	* IToolpathLayer::GetLayerDataUUID - Retrieves the layerdata's uuid
	* @return Returns the uuid value.
	*/
	virtual std::string GetLayerDataUUID() = 0;

	/**
	* IToolpathLayer::GetSegmentCount - Retrieves the count of segments.
	* @return Count
	*/
	virtual LibMCEnv_uint32 GetSegmentCount() = 0;

	/**
	* IToolpathLayer::GetSegmentInfo - Retrieves the segment type information .
	* @param[in] nIndex - Index. Must be between 0 and Count - 1.
	* @param[out] eType - Segment Type
	* @param[out] nPointCount - Point count of segment.
	*/
	virtual void GetSegmentInfo(const LibMCEnv_uint32 nIndex, LibMCEnv::eToolpathSegmentType & eType, LibMCEnv_uint32 & nPointCount) = 0;

	/**
	* IToolpathLayer::GetSegmentProfileUUID - Retrieves the assigned segment profile uuid.
	* @param[in] nIndex - Index. Must be between 0 and Count - 1.
	* @return Segment Profile UUID
	*/
	virtual std::string GetSegmentProfileUUID(const LibMCEnv_uint32 nIndex) = 0;

	/**
	* IToolpathLayer::GetSegmentProfileValue - Retrieves an assigned profile custom value.
	* @param[in] sValueName - Value Name to query for.
	* @return String Value.
	*/
	virtual std::string GetSegmentProfileValue(const std::string & sValueName) = 0;

	/**
	* IToolpathLayer::GetSegmentProfileTypedValue - Retrieves an assigned profile value of a standard type.
	* @param[in] eValueType - Enum to query for. MUST NOT be custom.
	* @return Double Value
	*/
	virtual LibMCEnv_double GetSegmentProfileTypedValue(const LibMCEnv::eToolpathProfileValueType eValueType) = 0;

	/**
	* IToolpathLayer::GetSegmentPartUUID - Retrieves the assigned segment part uuid.
	* @param[in] nIndex - Index. Must be between 0 and Count - 1.
	* @return Segment Part UUID
	*/
	virtual std::string GetSegmentPartUUID(const LibMCEnv_uint32 nIndex) = 0;

	/**
	* IToolpathLayer::GetSegmentPointData - Retrieves the assigned segment point list. For type hatch, the points are taken pairwise.
	* @param[in] nIndex - Index. Must be between 0 and Count - 1.
	* @param[in] nPointDataBufferSize - Number of elements in buffer
	* @param[out] pPointDataNeededCount - will be filled with the count of the written structs, or needed buffer size.
	* @param[out] pPointDataBuffer - Position2D buffer of The point data array. Positions are absolute in units.
	*/
	virtual void GetSegmentPointData(const LibMCEnv_uint32 nIndex, LibMCEnv_uint64 nPointDataBufferSize, LibMCEnv_uint64* pPointDataNeededCount, LibMCEnv::sPosition2D * pPointDataBuffer) = 0;

	/**
	* IToolpathLayer::GetZValue - Retrieves the layers Z Value in units.
	* @return Z Value of the layer in units.
	*/
	virtual LibMCEnv_int32 GetZValue() = 0;

	/**
	* IToolpathLayer::GetUnits - Retrieves the toolpath units in mm.
	* @return Toolpath units.
	*/
	virtual LibMCEnv_double GetUnits() = 0;

};

typedef IBaseSharedPtr<IToolpathLayer> PIToolpathLayer;


/*************************************************************************************************************************
 Class interface for ToolpathAccessor 
**************************************************************************************************************************/

class IToolpathAccessor : public virtual IBase {
public:
	/**
	* IToolpathAccessor::GetStorageUUID - Returns Toolpath storage UUID.
	* @return Returns toolpath storage uuid.
	*/
	virtual std::string GetStorageUUID() = 0;

	/**
	* IToolpathAccessor::GetLayerCount - Returns layer count.
	* @return Returns layer count.
	*/
	virtual LibMCEnv_uint32 GetLayerCount() = 0;

	/**
	* IToolpathAccessor::LoadLayer - Reads and returns a layer object.
	* @param[in] nLayerIndex - Layer Index.
	* @return Toolpath layer object.
	*/
	virtual IToolpathLayer * LoadLayer(const LibMCEnv_uint32 nLayerIndex) = 0;

	/**
	* IToolpathAccessor::GetUnits - Retrieves the toolpath units in mm.
	* @return Toolpath units.
	*/
	virtual LibMCEnv_double GetUnits() = 0;

};

typedef IBaseSharedPtr<IToolpathAccessor> PIToolpathAccessor;


/*************************************************************************************************************************
 Class interface for Build 
**************************************************************************************************************************/

class IBuild : public virtual IBase {
public:
	/**
	* IBuild::GetName - Returns name of the build.
	* @return Name of the build.
	*/
	virtual std::string GetName() = 0;

	/**
	* IBuild::GetBuildUUID - Returns uuid of the build.
	* @return UUID of the build.
	*/
	virtual std::string GetBuildUUID() = 0;

	/**
	* IBuild::GetStorageUUID - Returns storage uuid of the build.
	* @return Storage UUID of the build.
	*/
	virtual std::string GetStorageUUID() = 0;

	/**
	* IBuild::GetStorageSHA256 - Returns SHA256 of the build stream.
	* @return SHA256 of the build stream.
	*/
	virtual std::string GetStorageSHA256() = 0;

	/**
	* IBuild::GetLayerCount - Returns cached layer count of the toolpath.
	* @return Returns layer count.
	*/
	virtual LibMCEnv_uint32 GetLayerCount() = 0;

	/**
	* IBuild::LoadToolpath - loads the a toolpath into memory
	*/
	virtual void LoadToolpath() = 0;

	/**
	* IBuild::UnloadToolpath - unloads the a toolpath from memory, if it has been loaded before.
	*/
	virtual void UnloadToolpath() = 0;

	/**
	* IBuild::ToolpathIsLoaded - checks, if a toolpath object is loaded to memory.
	* @return returns if toolpath is loaded.
	*/
	virtual bool ToolpathIsLoaded() = 0;

	/**
	* IBuild::CreateToolpathAccessor - Creates an accessor object for a toolpath. Toolpath MUST have been loaded with LoadToolpath before.
	* @return Toolpath instance.
	*/
	virtual IToolpathAccessor * CreateToolpathAccessor() = 0;

	/**
	* IBuild::AddBinaryData - Adds binary data to store with the build.
	* @param[in] sName - Name of the attache data block.
	* @param[in] sMIMEType - Mime type of the data.
	* @param[in] nContentBufferSize - Number of elements in buffer
	* @param[in] pContentBuffer - Stream content to store
	* @return Data UUID of the attachment.
	*/
	virtual std::string AddBinaryData(const std::string & sName, const std::string & sMIMEType, const LibMCEnv_uint64 nContentBufferSize, const LibMCEnv_uint8 * pContentBuffer) = 0;

};

typedef IBaseSharedPtr<IBuild> PIBuild;


/*************************************************************************************************************************
 Class interface for WorkingFileExecution 
**************************************************************************************************************************/

class IWorkingFileExecution : public virtual IBase {
public:
	/**
	* IWorkingFileExecution::GetStatus - Returns the execution status
	*/
	virtual void GetStatus() = 0;

	/**
	* IWorkingFileExecution::ReturnStdOut - Returns the output of the executable as string buffer
	* @return stdout buffer
	*/
	virtual std::string ReturnStdOut() = 0;

};

typedef IBaseSharedPtr<IWorkingFileExecution> PIWorkingFileExecution;


/*************************************************************************************************************************
 Class interface for WorkingFile 
**************************************************************************************************************************/

class IWorkingFile : public virtual IBase {
public:
	/**
	* IWorkingFile::GetAbsoluteFileName - Retrieves absolute file name of the working file
	* @return global path of the file
	*/
	virtual std::string GetAbsoluteFileName() = 0;

	/**
	* IWorkingFile::GetSize - Returns the size of temporary file.
	* @return file size
	*/
	virtual LibMCEnv_uint64 GetSize() = 0;

	/**
	* IWorkingFile::CalculateSHA2 - Calculates the SHA256 checksum of the file.
	* @return sha256 checksum
	*/
	virtual std::string CalculateSHA2() = 0;

	/**
	* IWorkingFile::DeleteFile - Deletes the temporary file.
	*/
	virtual void DeleteFile() = 0;

	/**
	* IWorkingFile::ExecuteFile - Executes the temporary file, if it is an executable.
	* @return execution object
	*/
	virtual IWorkingFileExecution * ExecuteFile() = 0;

};

typedef IBaseSharedPtr<IWorkingFile> PIWorkingFile;


/*************************************************************************************************************************
 Class interface for WorkingDirectory 
**************************************************************************************************************************/

class IWorkingDirectory : public virtual IBase {
public:
	/**
	* IWorkingDirectory::GetAbsoluteFilePath - Retrieves absolute file path.
	* @return global path of the directory, including path delimiter.
	*/
	virtual std::string GetAbsoluteFilePath() = 0;

	/**
	* IWorkingDirectory::StoreCustomData - Stores a data buffer in a temporary file.
	* @param[in] sFileName - filename to store to. Can not include any path delimiters or ..
	* @param[in] nDataBufferBufferSize - Number of elements in buffer
	* @param[in] pDataBufferBuffer - file data to store to.
	* @return working file instance.
	*/
	virtual IWorkingFile * StoreCustomData(const std::string & sFileName, const LibMCEnv_uint64 nDataBufferBufferSize, const LibMCEnv_uint8 * pDataBufferBuffer) = 0;

	/**
	* IWorkingDirectory::StoreDriverData - Stores attached driver data in a temporary file.
	* @param[in] sFileName - filename to store to. Can not include any path delimiters or ..
	* @param[in] sIdentifier - identifier of the binary data in the driver package.
	* @return working file instance.
	*/
	virtual IWorkingFile * StoreDriverData(const std::string & sFileName, const std::string & sIdentifier) = 0;

};

typedef IBaseSharedPtr<IWorkingDirectory> PIWorkingDirectory;


/*************************************************************************************************************************
 Class interface for DriverEnvironment 
**************************************************************************************************************************/

class IDriverEnvironment : public virtual IBase {
public:
	/**
	* IDriverEnvironment::CreateWorkingDirectory - creates a temporary working directory.
	* @return creates a working directory
	*/
	virtual IWorkingDirectory * CreateWorkingDirectory() = 0;

	/**
	* IDriverEnvironment::RetrieveDriverData - retrieves attached driver data into a memory buffer.
	* @param[in] sIdentifier - identifier of the binary data in the driver package.
	* @param[in] nDataBufferBufferSize - Number of elements in buffer
	* @param[out] pDataBufferNeededCount - will be filled with the count of the written structs, or needed buffer size.
	* @param[out] pDataBufferBuffer - uint8 buffer of buffer data.
	*/
	virtual void RetrieveDriverData(const std::string & sIdentifier, LibMCEnv_uint64 nDataBufferBufferSize, LibMCEnv_uint64* pDataBufferNeededCount, LibMCEnv_uint8 * pDataBufferBuffer) = 0;

	/**
	* IDriverEnvironment::RegisterStringParameter - registers a string parameter. Must only be called during driver creation.
	* @param[in] sParameterName - Parameter Name
	* @param[in] sDescription - Parameter Description
	* @param[in] sDefaultValue - default value to set
	*/
	virtual void RegisterStringParameter(const std::string & sParameterName, const std::string & sDescription, const std::string & sDefaultValue) = 0;

	/**
	* IDriverEnvironment::RegisterUUIDParameter - registers a uuid parameter. Must only be called during driver creation.
	* @param[in] sParameterName - Parameter Name
	* @param[in] sDescription - Parameter Description
	* @param[in] sDefaultValue - default value to set
	*/
	virtual void RegisterUUIDParameter(const std::string & sParameterName, const std::string & sDescription, const std::string & sDefaultValue) = 0;

	/**
	* IDriverEnvironment::RegisterDoubleParameter - registers a double parameter. Must only be called during driver creation.
	* @param[in] sParameterName - Parameter Name
	* @param[in] sDescription - Parameter Description
	* @param[in] dDefaultValue - default value to set
	*/
	virtual void RegisterDoubleParameter(const std::string & sParameterName, const std::string & sDescription, const LibMCEnv_double dDefaultValue) = 0;

	/**
	* IDriverEnvironment::RegisterIntegerParameter - registers an int parameter. Must only be called during driver creation.
	* @param[in] sParameterName - Parameter Name
	* @param[in] sDescription - Parameter Description
	* @param[in] nDefaultValue - default value to set
	*/
	virtual void RegisterIntegerParameter(const std::string & sParameterName, const std::string & sDescription, const LibMCEnv_int64 nDefaultValue) = 0;

	/**
	* IDriverEnvironment::RegisterBoolParameter - registers a bool parameter. Must only be called during driver creation.
	* @param[in] sParameterName - Parameter Name
	* @param[in] sDescription - Parameter Description
	* @param[in] bDefaultValue - default value to set
	*/
	virtual void RegisterBoolParameter(const std::string & sParameterName, const std::string & sDescription, const bool bDefaultValue) = 0;

	/**
	* IDriverEnvironment::SetStringParameter - sets a string parameter
	* @param[in] sParameterName - Parameter Name
	* @param[in] sValue - Value to set
	*/
	virtual void SetStringParameter(const std::string & sParameterName, const std::string & sValue) = 0;

	/**
	* IDriverEnvironment::SetUUIDParameter - sets a uuid parameter
	* @param[in] sParameterName - Parameter Name
	* @param[in] sValue - Value to set
	*/
	virtual void SetUUIDParameter(const std::string & sParameterName, const std::string & sValue) = 0;

	/**
	* IDriverEnvironment::SetDoubleParameter - sets a double parameter
	* @param[in] sParameterName - Parameter Name
	* @param[in] dValue - Value to set
	*/
	virtual void SetDoubleParameter(const std::string & sParameterName, const LibMCEnv_double dValue) = 0;

	/**
	* IDriverEnvironment::SetIntegerParameter - sets an int parameter
	* @param[in] sParameterName - Parameter Name
	* @param[in] nValue - Value to set
	*/
	virtual void SetIntegerParameter(const std::string & sParameterName, const LibMCEnv_int64 nValue) = 0;

	/**
	* IDriverEnvironment::SetBoolParameter - sets a bool parameter
	* @param[in] sParameterName - Parameter Name
	* @param[in] bValue - Value to set
	*/
	virtual void SetBoolParameter(const std::string & sParameterName, const bool bValue) = 0;

};

typedef IBaseSharedPtr<IDriverEnvironment> PIDriverEnvironment;


/*************************************************************************************************************************
 Class interface for SignalTrigger 
**************************************************************************************************************************/

class ISignalTrigger : public virtual IBase {
public:
	/**
	* ISignalTrigger::CanTrigger - Returns, if signal channel is available.
	* @return Returns true, if signal channel is available.
	*/
	virtual bool CanTrigger() = 0;

	/**
	* ISignalTrigger::Trigger - Triggers a signal, if signal channel is available.
	*/
	virtual void Trigger() = 0;

	/**
	* ISignalTrigger::WaitForHandling - Waits until the signal is reset.
	* @param[in] nTimeOut - Timeout in Milliseconds. 0 for Immediate return.
	* @return Flag if signal handling has been handled.
	*/
	virtual bool WaitForHandling(const LibMCEnv_uint32 nTimeOut) = 0;

	/**
	* ISignalTrigger::GetName - Returns the signal name.
	* @return Name Of Signal
	*/
	virtual std::string GetName() = 0;

	/**
	* ISignalTrigger::GetStateMachine - Returns the signal state machine instance.
	* @return Name Of State Machine
	*/
	virtual std::string GetStateMachine() = 0;

	/**
	* ISignalTrigger::SetString - sets a string value
	* @param[in] sName - Name
	* @param[in] sValue - Value
	*/
	virtual void SetString(const std::string & sName, const std::string & sValue) = 0;

	/**
	* ISignalTrigger::SetUUID - sets a uuid value
	* @param[in] sName - Name
	* @param[in] sValue - Value
	*/
	virtual void SetUUID(const std::string & sName, const std::string & sValue) = 0;

	/**
	* ISignalTrigger::SetDouble - sets a double
	* @param[in] sName - Name
	* @param[in] dValue - Value
	*/
	virtual void SetDouble(const std::string & sName, const LibMCEnv_double dValue) = 0;

	/**
	* ISignalTrigger::SetInteger - sets an int.
	* @param[in] sName - Name
	* @param[in] nValue - Value
	*/
	virtual void SetInteger(const std::string & sName, const LibMCEnv_int64 nValue) = 0;

	/**
	* ISignalTrigger::SetBool - sets a bool
	* @param[in] sName - Name
	* @param[in] bValue - Value
	*/
	virtual void SetBool(const std::string & sName, const bool bValue) = 0;

	/**
	* ISignalTrigger::GetStringResult - returns a string value of the result
	* @param[in] sName - Name
	* @return Value
	*/
	virtual std::string GetStringResult(const std::string & sName) = 0;

	/**
	* ISignalTrigger::GetUUIDResult - returns a uuid value of the result
	* @param[in] sName - Name
	* @return Value
	*/
	virtual std::string GetUUIDResult(const std::string & sName) = 0;

	/**
	* ISignalTrigger::GetDoubleResult - returns a string value of the result
	* @param[in] sName - Name
	* @return Value
	*/
	virtual LibMCEnv_double GetDoubleResult(const std::string & sName) = 0;

	/**
	* ISignalTrigger::GetIntegerResult - returns an int value of the result.
	* @param[in] sName - Name
	* @return Value
	*/
	virtual LibMCEnv_int64 GetIntegerResult(const std::string & sName) = 0;

	/**
	* ISignalTrigger::GetBoolResult - returns a bool value of the result.
	* @param[in] sName - Name
	* @return Value
	*/
	virtual bool GetBoolResult(const std::string & sName) = 0;

};

typedef IBaseSharedPtr<ISignalTrigger> PISignalTrigger;


/*************************************************************************************************************************
 Class interface for SignalHandler 
**************************************************************************************************************************/

class ISignalHandler : public virtual IBase {
public:
	/**
	* ISignalHandler::SignalHandled - Marks signal as handled and resets signal channel.
	*/
	virtual void SignalHandled() = 0;

	/**
	* ISignalHandler::GetName - Returns the signal name.
	* @return Name Of Signal
	*/
	virtual std::string GetName() = 0;

	/**
	* ISignalHandler::GetSignalID - Returns the signal id.
	* @return Signal Identifier
	*/
	virtual std::string GetSignalID() = 0;

	/**
	* ISignalHandler::GetStateMachine - Returns the signal state machine instance.
	* @return Name Of State Machine
	*/
	virtual std::string GetStateMachine() = 0;

	/**
	* ISignalHandler::GetString - gets a string value
	* @param[in] sName - Name
	* @return Value
	*/
	virtual std::string GetString(const std::string & sName) = 0;

	/**
	* ISignalHandler::GetUUID - gets a uuid value
	* @param[in] sName - Name
	* @return Value
	*/
	virtual std::string GetUUID(const std::string & sName) = 0;

	/**
	* ISignalHandler::GetDouble - gets a double
	* @param[in] sName - Name
	* @return Value
	*/
	virtual LibMCEnv_double GetDouble(const std::string & sName) = 0;

	/**
	* ISignalHandler::GetInteger - gets an int.
	* @param[in] sName - Name
	* @return Value
	*/
	virtual LibMCEnv_int64 GetInteger(const std::string & sName) = 0;

	/**
	* ISignalHandler::GetBool - gets a bool
	* @param[in] sName - Name
	* @return Value
	*/
	virtual bool GetBool(const std::string & sName) = 0;

	/**
	* ISignalHandler::SetStringResult - returns a string value of the result
	* @param[in] sName - Name
	* @param[in] sValue - Value
	*/
	virtual void SetStringResult(const std::string & sName, const std::string & sValue) = 0;

	/**
	* ISignalHandler::SetUUIDResult - returns a uuid value of the result
	* @param[in] sName - Name
	* @param[in] sValue - Value
	*/
	virtual void SetUUIDResult(const std::string & sName, const std::string & sValue) = 0;

	/**
	* ISignalHandler::SetDoubleResult - returns a string value of the result
	* @param[in] sName - Name
	* @param[in] dValue - Value
	*/
	virtual void SetDoubleResult(const std::string & sName, const LibMCEnv_double dValue) = 0;

	/**
	* ISignalHandler::SetIntegerResult - sets an int.
	* @param[in] sName - Name
	* @param[in] nValue - Value
	*/
	virtual void SetIntegerResult(const std::string & sName, const LibMCEnv_int64 nValue) = 0;

	/**
	* ISignalHandler::SetBoolResult - sets a bool
	* @param[in] sName - Name
	* @param[in] bValue - Value
	*/
	virtual void SetBoolResult(const std::string & sName, const bool bValue) = 0;

};

typedef IBaseSharedPtr<ISignalHandler> PISignalHandler;


/*************************************************************************************************************************
 Class interface for StateEnvironment 
**************************************************************************************************************************/

class IStateEnvironment : public virtual IBase {
public:
	/**
	* IStateEnvironment::PrepareSignal - prepares a signal object to trigger later.
	* @param[in] sMachineInstance - State machine instance name
	* @param[in] sSignalName - Name Of signal channel.
	* @return Signal trigger object.
	*/
	virtual ISignalTrigger * PrepareSignal(const std::string & sMachineInstance, const std::string & sSignalName) = 0;

	/**
	* IStateEnvironment::WaitForSignal - waits for a signal.
	* @param[in] sSignalName - Name Of Signal
	* @param[in] nTimeOut - Timeout in Milliseconds. 0 for Immediate return.
	* @param[out] pHandlerInstance - Signal object. If Success is false, the Signal Handler Object will be null.
	* @return Signal has been triggered
	*/
	virtual bool WaitForSignal(const std::string & sSignalName, const LibMCEnv_uint32 nTimeOut, ISignalHandler*& pHandlerInstance) = 0;

	/**
	* IStateEnvironment::GetDriverLibrary - Returns the driver type and library lookup for a specific registered driver.
	* @param[in] sDriverName - Name identifier of the driver.
	* @param[out] sDriverType - returns type identifier of the driver.
	* @param[out] dDriverLookup - GetProcAddress Handle of the driver.
	*/
	virtual void GetDriverLibrary(const std::string & sDriverName, std::string & sDriverType, LibMCEnv_pvoid & pDriverLookup) = 0;

	/**
	* IStateEnvironment::CreateDriverAccess - Accesses and locks a driver for the execution of the current state.
	* @param[in] sDriverName - Name identifier of the driver.
	* @param[out] dDriverHandle - Handle of the driver.
	*/
	virtual void CreateDriverAccess(const std::string & sDriverName, LibMCEnv_pvoid & pDriverHandle) = 0;

	/**
	* IStateEnvironment::GetBuildJob - Returns a instance of a build object.
	* @param[in] sBuildUUID - UUID of the build entity.
	* @return Build instance
	*/
	virtual IBuild * GetBuildJob(const std::string & sBuildUUID) = 0;

	/**
	* IStateEnvironment::UnloadAllToolpathes - unloads all toolpath in memory to clean up
	*/
	virtual void UnloadAllToolpathes() = 0;

	/**
	* IStateEnvironment::SetNextState - sets the next state
	* @param[in] sStateName - Name of next state
	*/
	virtual void SetNextState(const std::string & sStateName) = 0;

	/**
	* IStateEnvironment::LogMessage - logs a string as message
	* @param[in] sLogString - String to Log
	*/
	virtual void LogMessage(const std::string & sLogString) = 0;

	/**
	* IStateEnvironment::LogWarning - logs a string as warning
	* @param[in] sLogString - String to Log
	*/
	virtual void LogWarning(const std::string & sLogString) = 0;

	/**
	* IStateEnvironment::LogInfo - logs a string as info
	* @param[in] sLogString - String to Log
	*/
	virtual void LogInfo(const std::string & sLogString) = 0;

	/**
	* IStateEnvironment::Sleep - Puts the current instance to sleep for a definite amount of time. MUST be used instead of a blocking sleep call.
	* @param[in] nDelay - Milliseconds to sleeps
	*/
	virtual void Sleep(const LibMCEnv_uint32 nDelay) = 0;

	/**
	* IStateEnvironment::CheckForTermination - checks environment for termination signal. MUST be called frequently in longer-running operations.
	* @return Returns if termination shall appear
	*/
	virtual bool CheckForTermination() = 0;

	/**
	* IStateEnvironment::StoreSignal - stores a signal handler in the current state machine
	* @param[in] sName - Name
	* @param[in] pHandler - Signal handler to store.
	*/
	virtual void StoreSignal(const std::string & sName, ISignalHandler* pHandler) = 0;

	/**
	* IStateEnvironment::RetrieveSignal - retrieves a signal handler from the current state machine. Fails if value has not been stored before or signal has been already handled.
	* @param[in] sName - Name
	* @return Signal handler instance.
	*/
	virtual ISignalHandler * RetrieveSignal(const std::string & sName) = 0;

	/**
	* IStateEnvironment::ClearStoredValue - deletes a value from the data store.
	* @param[in] sName - Name
	*/
	virtual void ClearStoredValue(const std::string & sName) = 0;

	/**
	* IStateEnvironment::SetStringParameter - sets a string parameter
	* @param[in] sParameterGroup - Parameter Group
	* @param[in] sParameterName - Parameter Name
	* @param[in] sValue - Value to set
	*/
	virtual void SetStringParameter(const std::string & sParameterGroup, const std::string & sParameterName, const std::string & sValue) = 0;

	/**
	* IStateEnvironment::SetUUIDParameter - sets a uuid parameter
	* @param[in] sParameterGroup - Parameter Group
	* @param[in] sParameterName - Parameter Name
	* @param[in] sValue - Value to set
	*/
	virtual void SetUUIDParameter(const std::string & sParameterGroup, const std::string & sParameterName, const std::string & sValue) = 0;

	/**
	* IStateEnvironment::SetDoubleParameter - sets a double parameter
	* @param[in] sParameterGroup - Parameter Group
	* @param[in] sParameterName - Parameter Name
	* @param[in] dValue - Value to set
	*/
	virtual void SetDoubleParameter(const std::string & sParameterGroup, const std::string & sParameterName, const LibMCEnv_double dValue) = 0;

	/**
	* IStateEnvironment::SetIntegerParameter - sets an int parameter
	* @param[in] sParameterGroup - Parameter Group
	* @param[in] sParameterName - Parameter Name
	* @param[in] nValue - Value to set
	*/
	virtual void SetIntegerParameter(const std::string & sParameterGroup, const std::string & sParameterName, const LibMCEnv_int64 nValue) = 0;

	/**
	* IStateEnvironment::SetBoolParameter - sets a bool parameter
	* @param[in] sParameterGroup - Parameter Group
	* @param[in] sParameterName - Parameter Name
	* @param[in] bValue - Value to set
	*/
	virtual void SetBoolParameter(const std::string & sParameterGroup, const std::string & sParameterName, const bool bValue) = 0;

	/**
	* IStateEnvironment::GetStringParameter - returns a string parameter
	* @param[in] sParameterGroup - Parameter Group
	* @param[in] sParameterName - Parameter Name
	* @return Value to set
	*/
	virtual std::string GetStringParameter(const std::string & sParameterGroup, const std::string & sParameterName) = 0;

	/**
	* IStateEnvironment::GetUUIDParameter - returns a uuid parameter
	* @param[in] sParameterGroup - Parameter Group
	* @param[in] sParameterName - Parameter Name
	* @return Value to set
	*/
	virtual std::string GetUUIDParameter(const std::string & sParameterGroup, const std::string & sParameterName) = 0;

	/**
	* IStateEnvironment::GetDoubleParameter - returns a double parameter
	* @param[in] sParameterGroup - Parameter Group
	* @param[in] sParameterName - Parameter Name
	* @return Value to set
	*/
	virtual LibMCEnv_double GetDoubleParameter(const std::string & sParameterGroup, const std::string & sParameterName) = 0;

	/**
	* IStateEnvironment::GetIntegerParameter - returns an int parameter
	* @param[in] sParameterGroup - Parameter Group
	* @param[in] sParameterName - Parameter Name
	* @return Value to set
	*/
	virtual LibMCEnv_int64 GetIntegerParameter(const std::string & sParameterGroup, const std::string & sParameterName) = 0;

	/**
	* IStateEnvironment::GetBoolParameter - returns a bool parameter
	* @param[in] sParameterGroup - Parameter Group
	* @param[in] sParameterName - Parameter Name
	* @return Value to set
	*/
	virtual bool GetBoolParameter(const std::string & sParameterGroup, const std::string & sParameterName) = 0;

};

typedef IBaseSharedPtr<IStateEnvironment> PIStateEnvironment;


/*************************************************************************************************************************
 Global functions declarations
**************************************************************************************************************************/
class CWrapper {
public:
	/**
	* Ilibmcenv::GetVersion - retrieves the binary version of this library.
	* @param[out] nMajor - returns the major version of this library
	* @param[out] nMinor - returns the minor version of this library
	* @param[out] nMicro - returns the micro version of this library
	*/
	static void GetVersion(LibMCEnv_uint32 & nMajor, LibMCEnv_uint32 & nMinor, LibMCEnv_uint32 & nMicro);

	/**
	* Ilibmcenv::GetLastError - Returns the last error recorded on this object
	* @param[in] pInstance - Instance Handle
	* @param[out] sErrorMessage - Message of the last error
	* @return Is there a last error to query
	*/
	static bool GetLastError(IBase* pInstance, std::string & sErrorMessage);

	/**
	* Ilibmcenv::ReleaseInstance - Releases shared ownership of an Instance
	* @param[in] pInstance - Instance Handle
	*/
	static void ReleaseInstance(IBase* pInstance);

	/**
	* Ilibmcenv::AcquireInstance - Acquires shared ownership of an Instance
	* @param[in] pInstance - Instance Handle
	*/
	static void AcquireInstance(IBase* pInstance);

};

LibMCEnvResult LibMCEnv_GetProcAddress (const char * pProcName, void ** ppProcAddress);

} // namespace Impl
} // namespace LibMCEnv

#endif // __LIBMCENV_CPPINTERFACES
