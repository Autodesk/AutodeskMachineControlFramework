/*++

Copyright (C) 2020 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.8.0-develop.

Abstract: This is an autogenerated C++ header file in order to allow easy
development of MC Environment Interface. The implementer of MC Environment Interface needs to
derive concrete classes from the abstract classes in this header.

Interface version: 1.0.0

*/


#ifndef __LIBMCENV_CPPINTERFACES
#define __LIBMCENV_CPPINTERFACES

#include <string>
#include <memory>

#include "libmcenv_types.hpp"



namespace LibMCEnv {
namespace Impl {

/**
 Forward declarations of class interfaces
*/
class IBase;
class IIterator;
class ITestEnvironment;
class IImageData;
class IToolpathPart;
class IToolpathLayer;
class IToolpathAccessor;
class IBuild;
class IWorkingFileExecution;
class IWorkingFile;
class IWorkingFileIterator;
class IWorkingDirectory;
class IDriverEnvironment;
class ISignalTrigger;
class ISignalHandler;
class IStateEnvironment;
class IUIEnvironment;



/*************************************************************************************************************************
 Parameter Cache definitions
**************************************************************************************************************************/

class ParameterCache {
	public:
		virtual ~ParameterCache() {}
};

template <class T1> class ParameterCache_1 : public ParameterCache {
	private:
		T1 m_param1;
	public:
		ParameterCache_1 (const T1 & param1)
			: m_param1 (param1)
		{
		}

		void retrieveData (T1 & param1)
		{
			param1 = m_param1;
		}
};

template <class T1, class T2> class ParameterCache_2 : public ParameterCache {
	private:
		T1 m_param1;
		T2 m_param2;
	public:
		ParameterCache_2 (const T1 & param1, const T2 & param2)
			: m_param1 (param1), m_param2 (param2)
		{
		}

		void retrieveData (T1 & param1, T2 & param2)
		{
			param1 = m_param1;
			param2 = m_param2;
		}
};

template <class T1, class T2, class T3> class ParameterCache_3 : public ParameterCache {
	private:
		T1 m_param1;
		T2 m_param2;
		T3 m_param3;
	public:
		ParameterCache_3 (const T1 & param1, const T2 & param2, const T3 & param3)
			: m_param1 (param1), m_param2 (param2), m_param3 (param3)
		{
		}

		void retrieveData (T1 & param1, T2 & param2, T3 & param3)
		{
			param1 = m_param1;
			param2 = m_param2;
			param3 = m_param3;
		}
};


/*************************************************************************************************************************
 Class interface for Base 
**************************************************************************************************************************/

class IBase {
private:
	std::unique_ptr<ParameterCache> m_ParameterCache;
public:
	/**
	* IBase::~IBase - virtual destructor of IBase
	*/
	virtual ~IBase() {};

	/**
	* IBase::ReleaseBaseClassInterface - Releases ownership of a base class interface. Deletes the reference, if necessary.
	* @param[in] pIBase - The base class instance to release
	*/
	static void ReleaseBaseClassInterface(IBase* pIBase)
	{
		if (pIBase) {
			pIBase->DecRefCount();
		}
	};

	/**
	* IBase::AcquireBaseClassInterface - Acquires shared ownership of a base class interface.
	* @param[in] pIBase - The base class instance to acquire
	*/
	static void AcquireBaseClassInterface(IBase* pIBase)
	{
		if (pIBase) {
			pIBase->IncRefCount();
		}
	};


	/**
	* IBase::GetLastErrorMessage - Returns the last error registered of this class instance
	* @param[out] sErrorMessage - Message of the last error registered
	* @return Has an error been registered already
	*/
	virtual bool GetLastErrorMessage(std::string & sErrorMessage) = 0;

	/**
	* IBase::ClearErrorMessages - Clears all registered messages of this class instance
	*/
	virtual void ClearErrorMessages() = 0;

	/**
	* IBase::RegisterErrorMessage - Registers an error message with this class instance
	* @param[in] sErrorMessage - Error message to register
	*/
	virtual void RegisterErrorMessage(const std::string & sErrorMessage) = 0;

	/**
	* IBase::IncRefCount - Increases the reference count of a class instance
	*/
	virtual void IncRefCount() = 0;

	/**
	* IBase::DecRefCount - Decreases the reference count of a class instance and free releases it, if the last reference has been removed
	* @return Has the object been released
	*/
	virtual bool DecRefCount() = 0;

	/**
	* IBase::_setCache - set parameter cache of object
	*/
	void _setCache(ParameterCache * pCache)
	{
		m_ParameterCache.reset(pCache);
	}

	/**
	* IBase::_getCache - returns parameter cache of object
	*/
	ParameterCache* _getCache()
	{
		return m_ParameterCache.get();
	}

};


/**
 Definition of a shared pointer class for IBase
*/
template<class T>
class IBaseSharedPtr : public std::shared_ptr<T>
{
public:
	explicit IBaseSharedPtr(T* t = nullptr)
		: std::shared_ptr<T>(t, IBase::ReleaseBaseClassInterface)
	{
		t->IncRefCount();
	}

	// Reset function, as it also needs to properly set the deleter.
	void reset(T* t = nullptr)
	{
		std::shared_ptr<T>::reset(t, IBase::ReleaseBaseClassInterface);
	}

	// Get-function that increases the Base class's reference count
	T* getCoOwningPtr()
	{
		T* t = this->get();
		t->IncRefCount();
		return t;
	}
};


typedef IBaseSharedPtr<IBase> PIBase;


/*************************************************************************************************************************
 Class interface for Iterator 
**************************************************************************************************************************/

class IIterator : public virtual IBase {
public:
	/**
	* IIterator::MoveNext - Iterates to the next object in the list.
	* @return Iterates to the next object in the list.
	*/
	virtual bool MoveNext() = 0;

	/**
	* IIterator::MovePrevious - Iterates to the previous object in the list.
	* @return Iterates to the previous object in the list.
	*/
	virtual bool MovePrevious() = 0;

	/**
	* IIterator::GetCurrent - Returns the object the iterator points at.
	* @return returns the object instance.
	*/
	virtual IBase * GetCurrent() = 0;

	/**
	* IIterator::Clone - Creates a new object iterator with the same object list.
	* @return returns the cloned Iterator instance
	*/
	virtual IIterator * Clone() = 0;

	/**
	* IIterator::Count - Returns the number of resoucres the iterator captures.
	* @return returns the number of objects the iterator captures.
	*/
	virtual LibMCEnv_uint64 Count() = 0;

};

typedef IBaseSharedPtr<IIterator> PIIterator;


/*************************************************************************************************************************
 Class interface for TestEnvironment 
**************************************************************************************************************************/

class ITestEnvironment : public virtual IBase {
public:
	/**
	* ITestEnvironment::WriteTestOutput - Write output file to test directory.
	* @param[in] sOutputName - Output file name. Only alphanumeric characters, point, underscore and hypen are allowed.
	* @param[in] nDataBufferSize - Number of elements in buffer
	* @param[in] pDataBuffer - Test data to write into output directory.
	*/
	virtual void WriteTestOutput(const std::string & sOutputName, const LibMCEnv_uint64 nDataBufferSize, const LibMCEnv_uint8 * pDataBuffer) = 0;

};

typedef IBaseSharedPtr<ITestEnvironment> PITestEnvironment;


/*************************************************************************************************************************
 Class interface for ImageData 
**************************************************************************************************************************/

class IImageData : public virtual IBase {
public:
	/**
	* IImageData::GetPixelFormat - Returns Pixel format of the image.
	* @return Pixel Format of image
	*/
	virtual LibMCEnv::eImagePixelFormat GetPixelFormat() = 0;

	/**
	* IImageData::ChangePixelFormat - Changes Pixel format of the image. Might lose alpha or color information during the process.
	* @param[in] ePixelFormat - new Pixel Format of image
	*/
	virtual void ChangePixelFormat(const LibMCEnv::eImagePixelFormat ePixelFormat) = 0;

	/**
	* IImageData::GetDPI - Returns DPI values in X and Y.
	* @param[out] dDPIValueX - DPI value in X
	* @param[out] dDPIValueY - DPI value in Y
	*/
	virtual void GetDPI(LibMCEnv_double & dDPIValueX, LibMCEnv_double & dDPIValueY) = 0;

	/**
	* IImageData::SetDPI - Sets DPI values in X and Y.
	* @param[in] dDPIValueX - new DPI value in X
	* @param[in] dDPIValueY - new DPI value in Y
	*/
	virtual void SetDPI(const LibMCEnv_double dDPIValueX, const LibMCEnv_double dDPIValueY) = 0;

	/**
	* IImageData::GetSizeInMM - Returns image sizes inmm.
	* @param[out] dSizeX - Size in X in mm
	* @param[out] dSizeY - Size in Y in mm
	*/
	virtual void GetSizeInMM(LibMCEnv_double & dSizeX, LibMCEnv_double & dSizeY) = 0;

	/**
	* IImageData::GetSizeInPixels - Returns image pixel sizes.
	* @param[out] nPixelSizeX - Number of pixels in X
	* @param[out] nPixelSizeY - Number of pixels in Y
	*/
	virtual void GetSizeInPixels(LibMCEnv_uint32 & nPixelSizeX, LibMCEnv_uint32 & nPixelSizeY) = 0;

	/**
	* IImageData::ResizeImage - Resizes Image pixel data.
	* @param[out] nPixelSizeX - Number of pixels in X
	* @param[out] nPixelSizeY - Number of pixels in Y
	*/
	virtual void ResizeImage(LibMCEnv_uint32 & nPixelSizeX, LibMCEnv_uint32 & nPixelSizeY) = 0;

	/**
	* IImageData::LoadPNG - Loads a PNG from a binary array. Supports RGB, RGBA and Greyscale images.
	* @param[in] nPNGDataBufferSize - Number of elements in buffer
	* @param[out] pPNGDataNeededCount - will be filled with the count of the written structs, or needed buffer size.
	* @param[out] pPNGDataBuffer - uint8 buffer of PNG Data stream.
	*/
	virtual void LoadPNG(LibMCEnv_uint64 nPNGDataBufferSize, LibMCEnv_uint64* pPNGDataNeededCount, LibMCEnv_uint8 * pPNGDataBuffer) = 0;

	/**
	* IImageData::EncodePNG - Encodes PNG and stores data stream in image object.
	*/
	virtual void EncodePNG() = 0;

	/**
	* IImageData::GetEncodedPNGData - Retrieves encoded data stream of image object. MUST have been encoded with EncodePNG before.
	* @param[in] nPNGDataBufferSize - Number of elements in buffer
	* @param[out] pPNGDataNeededCount - will be filled with the count of the written structs, or needed buffer size.
	* @param[out] pPNGDataBuffer - uint8 buffer of PNG Data stream.
	*/
	virtual void GetEncodedPNGData(LibMCEnv_uint64 nPNGDataBufferSize, LibMCEnv_uint64* pPNGDataNeededCount, LibMCEnv_uint8 * pPNGDataBuffer) = 0;

	/**
	* IImageData::ClearEncodedPNGData - Releases encoded data stream of image object.
	*/
	virtual void ClearEncodedPNGData() = 0;

	/**
	* IImageData::Clear - Sets all pixels to a single value.
	* @param[in] nValue - Pixel value.
	*/
	virtual void Clear(const LibMCEnv_uint32 nValue) = 0;

	/**
	* IImageData::GetPixel - Returns one pixel of an image.
	* @param[in] nX - Pixel coordinate in X
	* @param[in] nY - Pixel coordinate in Y
	* @return Pixel value at this position
	*/
	virtual LibMCEnv_uint32 GetPixel(const LibMCEnv_uint32 nX, const LibMCEnv_uint32 nY) = 0;

	/**
	* IImageData::SetPixel - Sets one pixel of an image.
	* @param[in] nX - Pixel coordinate in X
	* @param[in] nY - Pixel coordinate in Y
	* @param[in] nValue - New Pixel value at this position
	*/
	virtual void SetPixel(const LibMCEnv_uint32 nX, const LibMCEnv_uint32 nY, const LibMCEnv_uint32 nValue) = 0;

	/**
	* IImageData::GetPixelRange - Returns a subset of an image or the whole image data.
	* @param[in] nXMin - Min Pixel coordinate in X. MUST be within image bounds.
	* @param[in] nYMin - Min Pixel coordinate in Y. MUST be within image bounds.
	* @param[in] nXMax - Max Pixel coordinate in X. MUST be within image bounds. MUST be larger or equal than MinX
	* @param[in] nYMax - Max Pixel coordinate in Y. MUST be within image bounds. MUST be larger or equal than MinY
	* @param[in] nValueBufferSize - Number of elements in buffer
	* @param[out] pValueNeededCount - will be filled with the count of the written structs, or needed buffer size.
	* @param[out] pValueBuffer - uint8 buffer of Pixel values of the rectangle, rowwise array. MUST have the exact number of pixels in size and 1, 3 or 4 bytes per pixel, depending on pixel format.
	*/
	virtual void GetPixelRange(const LibMCEnv_uint32 nXMin, const LibMCEnv_uint32 nYMin, const LibMCEnv_uint32 nXMax, const LibMCEnv_uint32 nYMax, LibMCEnv_uint64 nValueBufferSize, LibMCEnv_uint64* pValueNeededCount, LibMCEnv_uint8 * pValueBuffer) = 0;

	/**
	* IImageData::SetPixelRange - Exchanges a subset of an image or the whole image data.
	* @param[in] nXMin - Min Pixel coordinate in X. MUST be within image bounds.
	* @param[in] nYMin - Min Pixel coordinate in Y. MUST be within image bounds.
	* @param[in] nXMax - Max Pixel coordinate in X. MUST be within image bounds. MUST be larger or equal than MinX
	* @param[in] nYMax - Max Pixel coordinate in Y. MUST be within image bounds. MUST be larger or equal than MinY
	* @param[in] nValueBufferSize - Number of elements in buffer
	* @param[in] pValueBuffer - New pixel values of the rectangle, rowwise array. MUST have the exact number of pixels in size and 1, 3 or 4 bytes per pixel, depending on pixel format.
	*/
	virtual void SetPixelRange(const LibMCEnv_uint32 nXMin, const LibMCEnv_uint32 nYMin, const LibMCEnv_uint32 nXMax, const LibMCEnv_uint32 nYMax, const LibMCEnv_uint64 nValueBufferSize, const LibMCEnv_uint8 * pValueBuffer) = 0;

};

typedef IBaseSharedPtr<IImageData> PIImageData;


/*************************************************************************************************************************
 Class interface for ToolpathPart 
**************************************************************************************************************************/

class IToolpathPart : public virtual IBase {
public:
	/**
	* IToolpathPart::GetName - Returns Part Name.
	* @return Returns toolpath part name.
	*/
	virtual std::string GetName() = 0;

	/**
	* IToolpathPart::GetUUID - Returns Part UUID.
	* @return Returns toolpath part uuid.
	*/
	virtual std::string GetUUID() = 0;

	/**
	* IToolpathPart::GetMeshUUID - Returns Mesh UUID of the part.
	* @return Returns toolpath part mesh uuid.
	*/
	virtual std::string GetMeshUUID() = 0;

	/**
	* IToolpathPart::GetTransform - Returns Mesh Transform of the part.
	* @return Returns the mesh transform of the toolpath.
	*/
	virtual LibMCEnv::sToolpathPartTransform GetTransform() = 0;

};

typedef IBaseSharedPtr<IToolpathPart> PIToolpathPart;


/*************************************************************************************************************************
 Class interface for ToolpathLayer 
**************************************************************************************************************************/

class IToolpathLayer : public virtual IBase {
public:
	/**
	* IToolpathLayer::GetLayerDataUUID - Retrieves the layerdata's uuid
	* @return Returns the uuid value.
	*/
	virtual std::string GetLayerDataUUID() = 0;

	/**
	* IToolpathLayer::GetSegmentCount - Retrieves the count of segments.
	* @return Count
	*/
	virtual LibMCEnv_uint32 GetSegmentCount() = 0;

	/**
	* IToolpathLayer::GetSegmentInfo - Retrieves the segment type and point count information .
	* @param[in] nIndex - Index. Must be between 0 and Count - 1.
	* @param[out] eType - Segment Type
	* @param[out] nPointCount - Point count of segment.
	*/
	virtual void GetSegmentInfo(const LibMCEnv_uint32 nIndex, LibMCEnv::eToolpathSegmentType & eType, LibMCEnv_uint32 & nPointCount) = 0;

	/**
	* IToolpathLayer::GetSegmentType - Retrieves the segment type.
	* @param[in] nIndex - Index. Must be between 0 and Count - 1.
	* @return Segment Type
	*/
	virtual LibMCEnv::eToolpathSegmentType GetSegmentType(const LibMCEnv_uint32 nIndex) = 0;

	/**
	* IToolpathLayer::GetSegmentPointCount - Retrieves the number of points in the segment. For type hatch, the points are taken pairwise.
	* @param[in] nIndex - Index. Must be between 0 and Count - 1.
	* @return Hatch count of segment.
	*/
	virtual LibMCEnv_uint32 GetSegmentPointCount(const LibMCEnv_uint32 nIndex) = 0;

	/**
	* IToolpathLayer::GetSegmentHatchCount - Retrieves the number of hatches in the segment (i.e. PointCount / 2). Returns 0 if segment is not of type hatch.
	* @param[in] nIndex - Index. Must be between 0 and Count - 1.
	* @return Hatch count of segment.
	*/
	virtual LibMCEnv_uint32 GetSegmentHatchCount(const LibMCEnv_uint32 nIndex) = 0;

	/**
	* IToolpathLayer::GetSegmentProfileUUID - Retrieves the assigned segment profile uuid.
	* @param[in] nIndex - Index. Must be between 0 and Count - 1.
	* @return Segment Profile UUID
	*/
	virtual std::string GetSegmentProfileUUID(const LibMCEnv_uint32 nIndex) = 0;

	/**
	* IToolpathLayer::GetSegmentProfileValue - Retrieves an assigned profile custom value.
	* @param[in] nIndex - Index. Must be between 0 and Count - 1.
	* @param[in] sValueName - Value Name to query for.
	* @return String Value.
	*/
	virtual std::string GetSegmentProfileValue(const LibMCEnv_uint32 nIndex, const std::string & sValueName) = 0;

	/**
	* IToolpathLayer::GetSegmentProfileTypedValue - Retrieves an assigned profile value of a standard type.
	* @param[in] nIndex - Index. Must be between 0 and Count - 1.
	* @param[in] eValueType - Enum to query for. MUST NOT be custom.
	* @return Double Value
	*/
	virtual LibMCEnv_double GetSegmentProfileTypedValue(const LibMCEnv_uint32 nIndex, const LibMCEnv::eToolpathProfileValueType eValueType) = 0;

	/**
	* IToolpathLayer::GetSegmentPartUUID - Retrieves the assigned segment part uuid.
	* @param[in] nIndex - Index. Must be between 0 and Count - 1.
	* @return Segment Part UUID
	*/
	virtual std::string GetSegmentPartUUID(const LibMCEnv_uint32 nIndex) = 0;

	/**
	* IToolpathLayer::GetSegmentPointData - Retrieves the assigned segment point list. For type hatch, the points are taken pairwise.
	* @param[in] nIndex - Index. Must be between 0 and Count - 1.
	* @param[in] nPointDataBufferSize - Number of elements in buffer
	* @param[out] pPointDataNeededCount - will be filled with the count of the written structs, or needed buffer size.
	* @param[out] pPointDataBuffer - Position2D buffer of The point data array. Positions are absolute in units.
	*/
	virtual void GetSegmentPointData(const LibMCEnv_uint32 nIndex, LibMCEnv_uint64 nPointDataBufferSize, LibMCEnv_uint64* pPointDataNeededCount, LibMCEnv::sPosition2D * pPointDataBuffer) = 0;

	/**
	* IToolpathLayer::GetSegmentHatchData - Retrieves the assigned segment hatch list. Fails if segment type is not hatch.
	* @param[in] nIndex - Index. Must be between 0 and Count - 1.
	* @param[in] nHatchDataBufferSize - Number of elements in buffer
	* @param[out] pHatchDataNeededCount - will be filled with the count of the written structs, or needed buffer size.
	* @param[out] pHatchDataBuffer - Hatch2D buffer of The hatch data array. Positions are absolute in units.
	*/
	virtual void GetSegmentHatchData(const LibMCEnv_uint32 nIndex, LibMCEnv_uint64 nHatchDataBufferSize, LibMCEnv_uint64* pHatchDataNeededCount, LibMCEnv::sHatch2D * pHatchDataBuffer) = 0;

	/**
	* IToolpathLayer::GetSegmentPointDataInMM - Retrieves the assigned segment point list. For type hatch, the points are taken pairwise.
	* @param[in] nIndex - Index. Must be between 0 and Count - 1.
	* @param[in] nPointDataBufferSize - Number of elements in buffer
	* @param[out] pPointDataNeededCount - will be filled with the count of the written structs, or needed buffer size.
	* @param[out] pPointDataBuffer - FloatPosition2D buffer of The point data array. Positions are absolute in mm.
	*/
	virtual void GetSegmentPointDataInMM(const LibMCEnv_uint32 nIndex, LibMCEnv_uint64 nPointDataBufferSize, LibMCEnv_uint64* pPointDataNeededCount, LibMCEnv::sFloatPosition2D * pPointDataBuffer) = 0;

	/**
	* IToolpathLayer::GetSegmentHatchDataInMM - Retrieves the assigned segment hatch list. Fails if segment type is not hatch.
	* @param[in] nIndex - Index. Must be between 0 and Count - 1.
	* @param[in] nHatchDataBufferSize - Number of elements in buffer
	* @param[out] pHatchDataNeededCount - will be filled with the count of the written structs, or needed buffer size.
	* @param[out] pHatchDataBuffer - FloatHatch2D buffer of The hatch data array. Positions are absolute in mm.
	*/
	virtual void GetSegmentHatchDataInMM(const LibMCEnv_uint32 nIndex, LibMCEnv_uint64 nHatchDataBufferSize, LibMCEnv_uint64* pHatchDataNeededCount, LibMCEnv::sFloatHatch2D * pHatchDataBuffer) = 0;

	/**
	* IToolpathLayer::GetZValue - Retrieves the layers Z Value in units.
	* @return Z Value of the layer in units.
	*/
	virtual LibMCEnv_int32 GetZValue() = 0;

	/**
	* IToolpathLayer::GetZValueInMM - Retrieves the layers Z Value in mm.
	* @return Z Value of the layer in mm.
	*/
	virtual LibMCEnv_double GetZValueInMM() = 0;

	/**
	* IToolpathLayer::GetUnits - Retrieves the toolpath units in mm.
	* @return Toolpath units.
	*/
	virtual LibMCEnv_double GetUnits() = 0;

};

typedef IBaseSharedPtr<IToolpathLayer> PIToolpathLayer;


/*************************************************************************************************************************
 Class interface for ToolpathAccessor 
**************************************************************************************************************************/

class IToolpathAccessor : public virtual IBase {
public:
	/**
	* IToolpathAccessor::GetStorageUUID - Returns Toolpath storage UUID.
	* @return Returns toolpath storage uuid.
	*/
	virtual std::string GetStorageUUID() = 0;

	/**
	* IToolpathAccessor::GetLayerCount - Returns layer count.
	* @return Returns layer count.
	*/
	virtual LibMCEnv_uint32 GetLayerCount() = 0;

	/**
	* IToolpathAccessor::LoadLayer - Reads and returns a layer object.
	* @param[in] nLayerIndex - Layer Index.
	* @return Toolpath layer object.
	*/
	virtual IToolpathLayer * LoadLayer(const LibMCEnv_uint32 nLayerIndex) = 0;

	/**
	* IToolpathAccessor::GetUnits - Retrieves the toolpath units in mm.
	* @return Toolpath units.
	*/
	virtual LibMCEnv_double GetUnits() = 0;

	/**
	* IToolpathAccessor::HasMetaData - Checks if a metadata value exists for this toolpath model.
	* @param[in] sNameSpace - Namespace of metadata.
	* @param[in] sName - Name of metadata.
	* @return Returns if metadata exists.
	*/
	virtual bool HasMetaData(const std::string & sNameSpace, const std::string & sName) = 0;

	/**
	* IToolpathAccessor::GetMetaDataValue - Returns the value of a metadata for this toolpath model.
	* @param[in] sNameSpace - Namespace of metadata.
	* @param[in] sName - Name of metadata.
	* @return Returns the value
	*/
	virtual std::string GetMetaDataValue(const std::string & sNameSpace, const std::string & sName) = 0;

	/**
	* IToolpathAccessor::GetMetaDataType - Returns the type of a metadata for this toolpath model.
	* @param[in] sNameSpace - Namespace of metadata.
	* @param[in] sName - Name of metadata.
	* @return Returns the type
	*/
	virtual std::string GetMetaDataType(const std::string & sNameSpace, const std::string & sName) = 0;

	/**
	* IToolpathAccessor::GetPartCount - Retrieves the number of parts in the toolpath.
	* @return Number of parts.
	*/
	virtual LibMCEnv_uint32 GetPartCount() = 0;

	/**
	* IToolpathAccessor::GetPart - Retrieves the part information of a toolpath.
	* @param[in] nPartIndex - Index of part. MUST be between 0 and PartCount-1
	* @return Part Instance
	*/
	virtual IToolpathPart * GetPart(const LibMCEnv_uint32 nPartIndex) = 0;

	/**
	* IToolpathAccessor::FindPartByUUID - Finds the part information of a toolpath.
	* @param[in] sPartUUID - UUID of part.
	* @return Part Instance. Returns null if part does not exist.
	*/
	virtual IToolpathPart * FindPartByUUID(const std::string & sPartUUID) = 0;

	/**
	* IToolpathAccessor::GetBuildHeightInUnits - Retrieves the build height in units.
	* @return Build height in units.
	*/
	virtual LibMCEnv_int32 GetBuildHeightInUnits() = 0;

	/**
	* IToolpathAccessor::GetZValueInUnits - Retrieves the layers Z Value in units.
	* @param[in] nLayerIndex - Layer Index to return.
	* @return Z Value of the layer in units.
	*/
	virtual LibMCEnv_int32 GetZValueInUnits(const LibMCEnv_uint32 nLayerIndex) = 0;

	/**
	* IToolpathAccessor::GetBuildHeightInMM - Retrieves the build height in mm.
	* @return Build height in mm.
	*/
	virtual LibMCEnv_double GetBuildHeightInMM() = 0;

	/**
	* IToolpathAccessor::GetZValueInMM - Retrieves the layers Z Value in mm.
	* @param[in] nLayerIndex - Layer Index to return.
	* @return Z Value of the layer in mm.
	*/
	virtual LibMCEnv_double GetZValueInMM(const LibMCEnv_uint32 nLayerIndex) = 0;

};

typedef IBaseSharedPtr<IToolpathAccessor> PIToolpathAccessor;


/*************************************************************************************************************************
 Class interface for Build 
**************************************************************************************************************************/

class IBuild : public virtual IBase {
public:
	/**
	* IBuild::GetName - Returns name of the build.
	* @return Name of the build.
	*/
	virtual std::string GetName() = 0;

	/**
	* IBuild::GetBuildUUID - Returns uuid of the build.
	* @return UUID of the build.
	*/
	virtual std::string GetBuildUUID() = 0;

	/**
	* IBuild::GetStorageUUID - Returns storage uuid of the build.
	* @return Storage UUID of the build.
	*/
	virtual std::string GetStorageUUID() = 0;

	/**
	* IBuild::GetStorageSHA256 - Returns SHA256 of the build stream.
	* @return SHA256 of the build stream.
	*/
	virtual std::string GetStorageSHA256() = 0;

	/**
	* IBuild::GetLayerCount - Returns cached layer count of the toolpath.
	* @return Returns layer count.
	*/
	virtual LibMCEnv_uint32 GetLayerCount() = 0;

	/**
	* IBuild::GetBuildHeightInMM - Retrieves the build height in mm.
	* @return Build height in mm.
	*/
	virtual LibMCEnv_double GetBuildHeightInMM() = 0;

	/**
	* IBuild::GetZValueInMM - Retrieves the layers Z Value in mm.
	* @param[in] nLayerIndex - Layer Index to return.
	* @return Z Value of the layer in mm.
	*/
	virtual LibMCEnv_double GetZValueInMM(const LibMCEnv_uint32 nLayerIndex) = 0;

	/**
	* IBuild::LoadToolpath - loads the a toolpath into memory
	*/
	virtual void LoadToolpath() = 0;

	/**
	* IBuild::UnloadToolpath - unloads the a toolpath from memory, if it has been loaded before.
	*/
	virtual void UnloadToolpath() = 0;

	/**
	* IBuild::ToolpathIsLoaded - checks, if a toolpath object is loaded to memory.
	* @return returns if toolpath is loaded.
	*/
	virtual bool ToolpathIsLoaded() = 0;

	/**
	* IBuild::CreateToolpathAccessor - Creates an accessor object for a toolpath. Toolpath MUST have been loaded with LoadToolpath before.
	* @return Toolpath instance.
	*/
	virtual IToolpathAccessor * CreateToolpathAccessor() = 0;

	/**
	* IBuild::AddBinaryData - Adds binary data to store with the build.
	* @param[in] sName - Name of the attache data block.
	* @param[in] sMIMEType - Mime type of the data.
	* @param[in] nContentBufferSize - Number of elements in buffer
	* @param[in] pContentBuffer - Stream content to store
	* @return Data UUID of the attachment.
	*/
	virtual std::string AddBinaryData(const std::string & sName, const std::string & sMIMEType, const LibMCEnv_uint64 nContentBufferSize, const LibMCEnv_uint8 * pContentBuffer) = 0;

};

typedef IBaseSharedPtr<IBuild> PIBuild;


/*************************************************************************************************************************
 Class interface for WorkingFileExecution 
**************************************************************************************************************************/

class IWorkingFileExecution : public virtual IBase {
public:
	/**
	* IWorkingFileExecution::GetStatus - Returns the execution status
	*/
	virtual void GetStatus() = 0;

	/**
	* IWorkingFileExecution::ReturnStdOut - Returns the output of the executable as string buffer
	* @return stdout buffer
	*/
	virtual std::string ReturnStdOut() = 0;

};

typedef IBaseSharedPtr<IWorkingFileExecution> PIWorkingFileExecution;


/*************************************************************************************************************************
 Class interface for WorkingFile 
**************************************************************************************************************************/

class IWorkingFile : public virtual IBase {
public:
	/**
	* IWorkingFile::GetAbsoluteFileName - Retrieves absolute file name of the working file
	* @return global path of the file
	*/
	virtual std::string GetAbsoluteFileName() = 0;

	/**
	* IWorkingFile::GetSize - Returns the size of temporary file.
	* @return file size
	*/
	virtual LibMCEnv_uint64 GetSize() = 0;

	/**
	* IWorkingFile::CalculateSHA2 - Calculates the SHA256 checksum of the file.
	* @return sha256 checksum
	*/
	virtual std::string CalculateSHA2() = 0;

	/**
	* IWorkingFile::ExecuteFile - Executes the temporary file, if it is an executable.
	* @return execution object
	*/
	virtual IWorkingFileExecution * ExecuteFile() = 0;

	/**
	* IWorkingFile::IsManaged - Returns if the file is managed.
	* @return returns if the file is managed.
	*/
	virtual bool IsManaged() = 0;

	/**
	* IWorkingFile::MakeManaged - Makes the file managed if it is not managed yet.
	*/
	virtual void MakeManaged() = 0;

	/**
	* IWorkingFile::FileExists - Returns if the file exists on disk.
	* @return returns if the file exists.
	*/
	virtual bool FileExists() = 0;

	/**
	* IWorkingFile::DeleteFromDisk - Deletes the temporary file.
	* @return returns if deletion was successful or file did not exist in the first place.
	*/
	virtual bool DeleteFromDisk() = 0;

};

typedef IBaseSharedPtr<IWorkingFile> PIWorkingFile;


/*************************************************************************************************************************
 Class interface for WorkingFileIterator 
**************************************************************************************************************************/

class IWorkingFileIterator : public virtual IIterator {
public:
	/**
	* IWorkingFileIterator::GetCurrentFile - Returns the working file the iterator points at.
	* @return returns the WorkingFile instance.
	*/
	virtual IWorkingFile * GetCurrentFile() = 0;

};

typedef IBaseSharedPtr<IWorkingFileIterator> PIWorkingFileIterator;


/*************************************************************************************************************************
 Class interface for WorkingDirectory 
**************************************************************************************************************************/

class IWorkingDirectory : public virtual IBase {
public:
	/**
	* IWorkingDirectory::IsActive - Working directory is active.
	* @return returns true if files can be read and written to the directory.
	*/
	virtual bool IsActive() = 0;

	/**
	* IWorkingDirectory::GetAbsoluteFilePath - Retrieves absolute file path.
	* @return global path of the directory, including path delimiter.
	*/
	virtual std::string GetAbsoluteFilePath() = 0;

	/**
	* IWorkingDirectory::StoreCustomData - Stores a data buffer in a temporary file with a given name.
	* @param[in] sFileName - filename to store to. Can not include any path delimiters or ..
	* @param[in] nDataBufferBufferSize - Number of elements in buffer
	* @param[in] pDataBufferBuffer - file data to store to.
	* @return working file instance.
	*/
	virtual IWorkingFile * StoreCustomData(const std::string & sFileName, const LibMCEnv_uint64 nDataBufferBufferSize, const LibMCEnv_uint8 * pDataBufferBuffer) = 0;

	/**
	* IWorkingDirectory::StoreCustomString - Stores a string in a temporary file with a given name.
	* @param[in] sFileName - filename to store to. Can not include any path delimiters or ..
	* @param[in] sDataString - file data to store to.
	* @return working file instance.
	*/
	virtual IWorkingFile * StoreCustomString(const std::string & sFileName, const std::string & sDataString) = 0;

	/**
	* IWorkingDirectory::StoreDriverData - Stores attached driver data in a temporary file.
	* @param[in] sFileName - filename to store to. Can not include any path delimiters or ..
	* @param[in] sIdentifier - identifier of the binary data in the driver package.
	* @return working file instance.
	*/
	virtual IWorkingFile * StoreDriverData(const std::string & sFileName, const std::string & sIdentifier) = 0;

	/**
	* IWorkingDirectory::StoreCustomDataInTempFile - Stores a data buffer in a temporary file with a generated name.
	* @param[in] sExtension - extension of the file to store. MAY be an empty string. MUST only include up to 64 alphanumeric characters.
	* @param[in] nDataBufferBufferSize - Number of elements in buffer
	* @param[in] pDataBufferBuffer - file data to store to.
	* @return working file instance.
	*/
	virtual IWorkingFile * StoreCustomDataInTempFile(const std::string & sExtension, const LibMCEnv_uint64 nDataBufferBufferSize, const LibMCEnv_uint8 * pDataBufferBuffer) = 0;

	/**
	* IWorkingDirectory::StoreCustomStringInTempFile - Stores a string in a temporary file.
	* @param[in] sExtension - extension of the file to store. MAY be an empty string. MUST only include up to 64 alphanumeric characters.
	* @param[in] sDataString - file data to store to.
	* @return working file instance.
	*/
	virtual IWorkingFile * StoreCustomStringInTempFile(const std::string & sExtension, const std::string & sDataString) = 0;

	/**
	* IWorkingDirectory::StoreDriverDataInTempFile - Stores attached driver data in a temporary file.
	* @param[in] sExtension - extension of the file to store. MAY be an empty string. MUST only include up to 64 alphanumeric characters.
	* @param[in] sIdentifier - identifier of the binary data in the driver package.
	* @return working file instance.
	*/
	virtual IWorkingFile * StoreDriverDataInTempFile(const std::string & sExtension, const std::string & sIdentifier) = 0;

	/**
	* IWorkingDirectory::CleanUp - Deletes all managed files in the directory and the directory. No storing is possible after a cleanup.
	* @return returns if deletion was successful.
	*/
	virtual bool CleanUp() = 0;

	/**
	* IWorkingDirectory::AddManagedFile - Adds a managed filename in the directory (i.e. this file will be deleted at CleanUp). Subdirectories are not allowed.
	* @param[in] sFileName - Filename to manage. The file does not need to exist yet.
	* @return working file instance.
	*/
	virtual IWorkingFile * AddManagedFile(const std::string & sFileName) = 0;

	/**
	* IWorkingDirectory::HasUnmanagedFiles - Returns if the working directory has unmanaged files. A clean implementation will never deal with unmanaged files.
	* @return returns if there are unmanaged files.
	*/
	virtual bool HasUnmanagedFiles() = 0;

	/**
	* IWorkingDirectory::RetrieveUnmanagedFiles - Returns a list of unmanaged files.
	* @return working file iterator instance.
	*/
	virtual IWorkingFileIterator * RetrieveUnmanagedFiles() = 0;

	/**
	* IWorkingDirectory::RetrieveManagedFiles - Returns a list of managed files.
	* @return working file iterator instance.
	*/
	virtual IWorkingFileIterator * RetrieveManagedFiles() = 0;

	/**
	* IWorkingDirectory::RetrieveAllFiles - Returns a list of all files in the directory.
	* @return working file iterator instance.
	*/
	virtual IWorkingFileIterator * RetrieveAllFiles() = 0;

};

typedef IBaseSharedPtr<IWorkingDirectory> PIWorkingDirectory;


/*************************************************************************************************************************
 Class interface for DriverEnvironment 
**************************************************************************************************************************/

class IDriverEnvironment : public virtual IBase {
public:
	/**
	* IDriverEnvironment::CreateWorkingDirectory - creates a temporary working directory.
	* @return creates a working directory
	*/
	virtual IWorkingDirectory * CreateWorkingDirectory() = 0;

	/**
	* IDriverEnvironment::DriverHasResourceData - retrieves if attached driver has data with the given identifier.
	* @param[in] sIdentifier - identifier of the binary data in the driver package.
	* @return returns true if the resource exists in the machine resource package.
	*/
	virtual bool DriverHasResourceData(const std::string & sIdentifier) = 0;

	/**
	* IDriverEnvironment::MachineHasResourceData - retrieves if attached driver has data with the given identifier.
	* @param[in] sIdentifier - identifier of the binary data in the driver package.
	* @return returns true if the resource exists in the machine resource package.
	*/
	virtual bool MachineHasResourceData(const std::string & sIdentifier) = 0;

	/**
	* IDriverEnvironment::RetrieveDriverData - retrieves attached driver resource data into a memory buffer. (depreciated, equivalent to RetrieveDriverResourceData)
	* @param[in] sIdentifier - identifier of the binary data in the driver package.
	* @param[in] nDataBufferBufferSize - Number of elements in buffer
	* @param[out] pDataBufferNeededCount - will be filled with the count of the written structs, or needed buffer size.
	* @param[out] pDataBufferBuffer - uint8 buffer of buffer data.
	*/
	virtual void RetrieveDriverData(const std::string & sIdentifier, LibMCEnv_uint64 nDataBufferBufferSize, LibMCEnv_uint64* pDataBufferNeededCount, LibMCEnv_uint8 * pDataBufferBuffer) = 0;

	/**
	* IDriverEnvironment::RetrieveDriverResourceData - retrieves attached driver resource data into a memory buffer.
	* @param[in] sIdentifier - identifier of the binary data in the driver package.
	* @param[in] nDataBufferBufferSize - Number of elements in buffer
	* @param[out] pDataBufferNeededCount - will be filled with the count of the written structs, or needed buffer size.
	* @param[out] pDataBufferBuffer - uint8 buffer of buffer data.
	*/
	virtual void RetrieveDriverResourceData(const std::string & sIdentifier, LibMCEnv_uint64 nDataBufferBufferSize, LibMCEnv_uint64* pDataBufferNeededCount, LibMCEnv_uint8 * pDataBufferBuffer) = 0;

	/**
	* IDriverEnvironment::RetrieveMachineResourceData - retrieves a machine resource data (Plugins Directory) driver data into a memory buffer.
	* @param[in] sIdentifier - identifier of the binary data in the machine resource package.
	* @param[in] nDataBufferBufferSize - Number of elements in buffer
	* @param[out] pDataBufferNeededCount - will be filled with the count of the written structs, or needed buffer size.
	* @param[out] pDataBufferBuffer - uint8 buffer of buffer data.
	*/
	virtual void RetrieveMachineResourceData(const std::string & sIdentifier, LibMCEnv_uint64 nDataBufferBufferSize, LibMCEnv_uint64* pDataBufferNeededCount, LibMCEnv_uint8 * pDataBufferBuffer) = 0;

	/**
	* IDriverEnvironment::CreateToolpathAccessor - Creates an accessor object for a toolpath. Toolpath MUST have been loaded into memory before.
	* @param[in] sStreamUUID - UUID of the stream.
	* @return Toolpath instance.
	*/
	virtual IToolpathAccessor * CreateToolpathAccessor(const std::string & sStreamUUID) = 0;

	/**
	* IDriverEnvironment::RegisterStringParameter - registers a string parameter. Must only be called during driver creation.
	* @param[in] sParameterName - Parameter Name
	* @param[in] sDescription - Parameter Description
	* @param[in] sDefaultValue - default value to set
	*/
	virtual void RegisterStringParameter(const std::string & sParameterName, const std::string & sDescription, const std::string & sDefaultValue) = 0;

	/**
	* IDriverEnvironment::RegisterUUIDParameter - registers a uuid parameter. Must only be called during driver creation.
	* @param[in] sParameterName - Parameter Name
	* @param[in] sDescription - Parameter Description
	* @param[in] sDefaultValue - default value to set
	*/
	virtual void RegisterUUIDParameter(const std::string & sParameterName, const std::string & sDescription, const std::string & sDefaultValue) = 0;

	/**
	* IDriverEnvironment::RegisterDoubleParameter - registers a double parameter. Must only be called during driver creation.
	* @param[in] sParameterName - Parameter Name
	* @param[in] sDescription - Parameter Description
	* @param[in] dDefaultValue - default value to set
	*/
	virtual void RegisterDoubleParameter(const std::string & sParameterName, const std::string & sDescription, const LibMCEnv_double dDefaultValue) = 0;

	/**
	* IDriverEnvironment::RegisterIntegerParameter - registers an int parameter. Must only be called during driver creation.
	* @param[in] sParameterName - Parameter Name
	* @param[in] sDescription - Parameter Description
	* @param[in] nDefaultValue - default value to set
	*/
	virtual void RegisterIntegerParameter(const std::string & sParameterName, const std::string & sDescription, const LibMCEnv_int64 nDefaultValue) = 0;

	/**
	* IDriverEnvironment::RegisterBoolParameter - registers a bool parameter. Must only be called during driver creation.
	* @param[in] sParameterName - Parameter Name
	* @param[in] sDescription - Parameter Description
	* @param[in] bDefaultValue - default value to set
	*/
	virtual void RegisterBoolParameter(const std::string & sParameterName, const std::string & sDescription, const bool bDefaultValue) = 0;

	/**
	* IDriverEnvironment::SetStringParameter - sets a string parameter
	* @param[in] sParameterName - Parameter Name
	* @param[in] sValue - Value to set
	*/
	virtual void SetStringParameter(const std::string & sParameterName, const std::string & sValue) = 0;

	/**
	* IDriverEnvironment::SetUUIDParameter - sets a uuid parameter
	* @param[in] sParameterName - Parameter Name
	* @param[in] sValue - Value to set
	*/
	virtual void SetUUIDParameter(const std::string & sParameterName, const std::string & sValue) = 0;

	/**
	* IDriverEnvironment::SetDoubleParameter - sets a double parameter
	* @param[in] sParameterName - Parameter Name
	* @param[in] dValue - Value to set
	*/
	virtual void SetDoubleParameter(const std::string & sParameterName, const LibMCEnv_double dValue) = 0;

	/**
	* IDriverEnvironment::SetIntegerParameter - sets an int parameter
	* @param[in] sParameterName - Parameter Name
	* @param[in] nValue - Value to set
	*/
	virtual void SetIntegerParameter(const std::string & sParameterName, const LibMCEnv_int64 nValue) = 0;

	/**
	* IDriverEnvironment::SetBoolParameter - sets a bool parameter
	* @param[in] sParameterName - Parameter Name
	* @param[in] bValue - Value to set
	*/
	virtual void SetBoolParameter(const std::string & sParameterName, const bool bValue) = 0;

	/**
	* IDriverEnvironment::Sleep - Puts the current instance to sleep for a definite amount of time. MUST be used instead of a blocking sleep call.
	* @param[in] nDelay - Milliseconds to sleeps
	*/
	virtual void Sleep(const LibMCEnv_uint32 nDelay) = 0;

	/**
	* IDriverEnvironment::GetGlobalTimerInMilliseconds - Returns the global timer in milliseconds.
	* @return Timer value in Milliseconds
	*/
	virtual LibMCEnv_uint64 GetGlobalTimerInMilliseconds() = 0;

	/**
	* IDriverEnvironment::LogMessage - logs a string as message
	* @param[in] sLogString - String to Log
	*/
	virtual void LogMessage(const std::string & sLogString) = 0;

	/**
	* IDriverEnvironment::LogWarning - logs a string as warning
	* @param[in] sLogString - String to Log
	*/
	virtual void LogWarning(const std::string & sLogString) = 0;

	/**
	* IDriverEnvironment::LogInfo - logs a string as info
	* @param[in] sLogString - String to Log
	*/
	virtual void LogInfo(const std::string & sLogString) = 0;

	/**
	* IDriverEnvironment::CreateEmptyImage - creates an empty image object.
	* @param[in] nPixelSizeX - Pixel size in X. MUST be positive.
	* @param[in] nPixelSizeY - Pixel size in Y. MUST be positive.
	* @param[in] dDPIValueX - DPI Value in X. MUST be positive.
	* @param[in] dDPIValueY - DPI Value in Y. MUST be positive.
	* @param[in] ePixelFormat - Pixel format to use.
	* @return Empty image instance.
	*/
	virtual IImageData * CreateEmptyImage(const LibMCEnv_uint32 nPixelSizeX, const LibMCEnv_uint32 nPixelSizeY, const LibMCEnv_double dDPIValueX, const LibMCEnv_double dDPIValueY, const LibMCEnv::eImagePixelFormat ePixelFormat) = 0;

	/**
	* IDriverEnvironment::LoadPNGImage - creates an image object from a PNG data stream.
	* @param[in] nPNGDataBufferSize - Number of elements in buffer
	* @param[in] pPNGDataBuffer - DPI Value in X. MUST be positive.
	* @param[in] dDPIValueX - DPI Value in X. MUST be positive.
	* @param[in] dDPIValueY - DPI Value in Y. MUST be positive.
	* @param[in] ePixelFormat - Pixel format to use. Might lose color and alpha information.
	* @return Image instance containing the PNG image.
	*/
	virtual IImageData * LoadPNGImage(const LibMCEnv_uint64 nPNGDataBufferSize, const LibMCEnv_uint8 * pPNGDataBuffer, const LibMCEnv_double dDPIValueX, const LibMCEnv_double dDPIValueY, const LibMCEnv::eImagePixelFormat ePixelFormat) = 0;

};

typedef IBaseSharedPtr<IDriverEnvironment> PIDriverEnvironment;


/*************************************************************************************************************************
 Class interface for SignalTrigger 
**************************************************************************************************************************/

class ISignalTrigger : public virtual IBase {
public:
	/**
	* ISignalTrigger::CanTrigger - Returns, if signal channel is available.
	* @return Returns true, if signal channel is available.
	*/
	virtual bool CanTrigger() = 0;

	/**
	* ISignalTrigger::Trigger - Triggers a signal, if signal channel is available.
	*/
	virtual void Trigger() = 0;

	/**
	* ISignalTrigger::WaitForHandling - Waits until the signal is reset.
	* @param[in] nTimeOut - Timeout in Milliseconds. 0 for Immediate return.
	* @return Flag if signal handling has been handled.
	*/
	virtual bool WaitForHandling(const LibMCEnv_uint32 nTimeOut) = 0;

	/**
	* ISignalTrigger::GetName - Returns the signal name.
	* @return Name Of Signal
	*/
	virtual std::string GetName() = 0;

	/**
	* ISignalTrigger::GetStateMachine - Returns the signal state machine instance.
	* @return Name Of State Machine
	*/
	virtual std::string GetStateMachine() = 0;

	/**
	* ISignalTrigger::SetString - sets a string value
	* @param[in] sName - Name
	* @param[in] sValue - Value
	*/
	virtual void SetString(const std::string & sName, const std::string & sValue) = 0;

	/**
	* ISignalTrigger::SetUUID - sets a uuid value
	* @param[in] sName - Name
	* @param[in] sValue - Value
	*/
	virtual void SetUUID(const std::string & sName, const std::string & sValue) = 0;

	/**
	* ISignalTrigger::SetDouble - sets a double
	* @param[in] sName - Name
	* @param[in] dValue - Value
	*/
	virtual void SetDouble(const std::string & sName, const LibMCEnv_double dValue) = 0;

	/**
	* ISignalTrigger::SetInteger - sets an int.
	* @param[in] sName - Name
	* @param[in] nValue - Value
	*/
	virtual void SetInteger(const std::string & sName, const LibMCEnv_int64 nValue) = 0;

	/**
	* ISignalTrigger::SetBool - sets a bool
	* @param[in] sName - Name
	* @param[in] bValue - Value
	*/
	virtual void SetBool(const std::string & sName, const bool bValue) = 0;

	/**
	* ISignalTrigger::GetStringResult - returns a string value of the result
	* @param[in] sName - Name
	* @return Value
	*/
	virtual std::string GetStringResult(const std::string & sName) = 0;

	/**
	* ISignalTrigger::GetUUIDResult - returns a uuid value of the result
	* @param[in] sName - Name
	* @return Value
	*/
	virtual std::string GetUUIDResult(const std::string & sName) = 0;

	/**
	* ISignalTrigger::GetDoubleResult - returns a string value of the result
	* @param[in] sName - Name
	* @return Value
	*/
	virtual LibMCEnv_double GetDoubleResult(const std::string & sName) = 0;

	/**
	* ISignalTrigger::GetIntegerResult - returns an int value of the result.
	* @param[in] sName - Name
	* @return Value
	*/
	virtual LibMCEnv_int64 GetIntegerResult(const std::string & sName) = 0;

	/**
	* ISignalTrigger::GetBoolResult - returns a bool value of the result.
	* @param[in] sName - Name
	* @return Value
	*/
	virtual bool GetBoolResult(const std::string & sName) = 0;

};

typedef IBaseSharedPtr<ISignalTrigger> PISignalTrigger;


/*************************************************************************************************************************
 Class interface for SignalHandler 
**************************************************************************************************************************/

class ISignalHandler : public virtual IBase {
public:
	/**
	* ISignalHandler::SignalHandled - Marks signal as handled and resets signal channel.
	*/
	virtual void SignalHandled() = 0;

	/**
	* ISignalHandler::GetName - Returns the signal name.
	* @return Name Of Signal
	*/
	virtual std::string GetName() = 0;

	/**
	* ISignalHandler::GetSignalID - Returns the signal id.
	* @return Signal Identifier
	*/
	virtual std::string GetSignalID() = 0;

	/**
	* ISignalHandler::GetStateMachine - Returns the signal state machine instance.
	* @return Name Of State Machine
	*/
	virtual std::string GetStateMachine() = 0;

	/**
	* ISignalHandler::GetString - gets a string value
	* @param[in] sName - Name
	* @return Value
	*/
	virtual std::string GetString(const std::string & sName) = 0;

	/**
	* ISignalHandler::GetUUID - gets a uuid value
	* @param[in] sName - Name
	* @return Value
	*/
	virtual std::string GetUUID(const std::string & sName) = 0;

	/**
	* ISignalHandler::GetDouble - gets a double
	* @param[in] sName - Name
	* @return Value
	*/
	virtual LibMCEnv_double GetDouble(const std::string & sName) = 0;

	/**
	* ISignalHandler::GetInteger - gets an int.
	* @param[in] sName - Name
	* @return Value
	*/
	virtual LibMCEnv_int64 GetInteger(const std::string & sName) = 0;

	/**
	* ISignalHandler::GetBool - gets a bool
	* @param[in] sName - Name
	* @return Value
	*/
	virtual bool GetBool(const std::string & sName) = 0;

	/**
	* ISignalHandler::SetStringResult - returns a string value of the result
	* @param[in] sName - Name
	* @param[in] sValue - Value
	*/
	virtual void SetStringResult(const std::string & sName, const std::string & sValue) = 0;

	/**
	* ISignalHandler::SetUUIDResult - returns a uuid value of the result
	* @param[in] sName - Name
	* @param[in] sValue - Value
	*/
	virtual void SetUUIDResult(const std::string & sName, const std::string & sValue) = 0;

	/**
	* ISignalHandler::SetDoubleResult - returns a string value of the result
	* @param[in] sName - Name
	* @param[in] dValue - Value
	*/
	virtual void SetDoubleResult(const std::string & sName, const LibMCEnv_double dValue) = 0;

	/**
	* ISignalHandler::SetIntegerResult - sets an int.
	* @param[in] sName - Name
	* @param[in] nValue - Value
	*/
	virtual void SetIntegerResult(const std::string & sName, const LibMCEnv_int64 nValue) = 0;

	/**
	* ISignalHandler::SetBoolResult - sets a bool
	* @param[in] sName - Name
	* @param[in] bValue - Value
	*/
	virtual void SetBoolResult(const std::string & sName, const bool bValue) = 0;

};

typedef IBaseSharedPtr<ISignalHandler> PISignalHandler;


/*************************************************************************************************************************
 Class interface for StateEnvironment 
**************************************************************************************************************************/

class IStateEnvironment : public virtual IBase {
public:
	/**
	* IStateEnvironment::GetMachineState - Retrieves the machine state
	* @param[in] sMachineInstance - State machine instance name
	* @return Name of current state
	*/
	virtual std::string GetMachineState(const std::string & sMachineInstance) = 0;

	/**
	* IStateEnvironment::PrepareSignal - prepares a signal object to trigger later.
	* @param[in] sMachineInstance - State machine instance name
	* @param[in] sSignalName - Name Of signal channel.
	* @return Signal trigger object.
	*/
	virtual ISignalTrigger * PrepareSignal(const std::string & sMachineInstance, const std::string & sSignalName) = 0;

	/**
	* IStateEnvironment::WaitForSignal - waits for a signal.
	* @param[in] sSignalName - Name Of Signal
	* @param[in] nTimeOut - Timeout in Milliseconds. 0 for Immediate return.
	* @param[out] pHandlerInstance - Signal object. If Success is false, the Signal Handler Object will be null.
	* @return Signal has been triggered
	*/
	virtual bool WaitForSignal(const std::string & sSignalName, const LibMCEnv_uint32 nTimeOut, ISignalHandler*& pHandlerInstance) = 0;

	/**
	* IStateEnvironment::GetDriverLibrary - Returns the driver type and library lookup for a specific registered driver.
	* @param[in] sDriverName - Name identifier of the driver.
	* @param[out] sDriverType - returns type identifier of the driver.
	* @param[out] dDriverLookup - GetProcAddress Handle of the driver.
	*/
	virtual void GetDriverLibrary(const std::string & sDriverName, std::string & sDriverType, LibMCEnv_pvoid & pDriverLookup) = 0;

	/**
	* IStateEnvironment::CreateDriverAccess - Accesses and locks a driver for the execution of the current state.
	* @param[in] sDriverName - Name identifier of the driver.
	* @param[out] dDriverHandle - Handle of the driver.
	*/
	virtual void CreateDriverAccess(const std::string & sDriverName, LibMCEnv_pvoid & pDriverHandle) = 0;

	/**
	* IStateEnvironment::GetBuildJob - Returns a instance of a build object.
	* @param[in] sBuildUUID - UUID of the build entity.
	* @return Build instance
	*/
	virtual IBuild * GetBuildJob(const std::string & sBuildUUID) = 0;

	/**
	* IStateEnvironment::UnloadAllToolpathes - unloads all toolpath in memory to clean up
	*/
	virtual void UnloadAllToolpathes() = 0;

	/**
	* IStateEnvironment::SetNextState - sets the next state
	* @param[in] sStateName - Name of next state
	*/
	virtual void SetNextState(const std::string & sStateName) = 0;

	/**
	* IStateEnvironment::LogMessage - logs a string as message
	* @param[in] sLogString - String to Log
	*/
	virtual void LogMessage(const std::string & sLogString) = 0;

	/**
	* IStateEnvironment::LogWarning - logs a string as warning
	* @param[in] sLogString - String to Log
	*/
	virtual void LogWarning(const std::string & sLogString) = 0;

	/**
	* IStateEnvironment::LogInfo - logs a string as info
	* @param[in] sLogString - String to Log
	*/
	virtual void LogInfo(const std::string & sLogString) = 0;

	/**
	* IStateEnvironment::Sleep - Puts the current instance to sleep for a definite amount of time. MUST be used instead of a blocking sleep call.
	* @param[in] nDelay - Milliseconds to sleeps
	*/
	virtual void Sleep(const LibMCEnv_uint32 nDelay) = 0;

	/**
	* IStateEnvironment::CheckForTermination - checks environment for termination signal. MUST be called frequently in longer-running operations.
	* @return Returns if termination shall appear
	*/
	virtual bool CheckForTermination() = 0;

	/**
	* IStateEnvironment::StoreSignal - stores a signal handler in the current state machine
	* @param[in] sName - Name
	* @param[in] pHandler - Signal handler to store.
	*/
	virtual void StoreSignal(const std::string & sName, ISignalHandler* pHandler) = 0;

	/**
	* IStateEnvironment::RetrieveSignal - retrieves a signal handler from the current state machine. Fails if value has not been stored before or signal has been already handled.
	* @param[in] sName - Name
	* @return Signal handler instance.
	*/
	virtual ISignalHandler * RetrieveSignal(const std::string & sName) = 0;

	/**
	* IStateEnvironment::ClearStoredValue - deletes a value from the data store.
	* @param[in] sName - Name
	*/
	virtual void ClearStoredValue(const std::string & sName) = 0;

	/**
	* IStateEnvironment::SetStringParameter - sets a string parameter
	* @param[in] sParameterGroup - Parameter Group
	* @param[in] sParameterName - Parameter Name
	* @param[in] sValue - Value to set
	*/
	virtual void SetStringParameter(const std::string & sParameterGroup, const std::string & sParameterName, const std::string & sValue) = 0;

	/**
	* IStateEnvironment::SetUUIDParameter - sets a uuid parameter
	* @param[in] sParameterGroup - Parameter Group
	* @param[in] sParameterName - Parameter Name
	* @param[in] sValue - Value to set
	*/
	virtual void SetUUIDParameter(const std::string & sParameterGroup, const std::string & sParameterName, const std::string & sValue) = 0;

	/**
	* IStateEnvironment::SetDoubleParameter - sets a double parameter
	* @param[in] sParameterGroup - Parameter Group
	* @param[in] sParameterName - Parameter Name
	* @param[in] dValue - Value to set
	*/
	virtual void SetDoubleParameter(const std::string & sParameterGroup, const std::string & sParameterName, const LibMCEnv_double dValue) = 0;

	/**
	* IStateEnvironment::SetIntegerParameter - sets an int parameter
	* @param[in] sParameterGroup - Parameter Group
	* @param[in] sParameterName - Parameter Name
	* @param[in] nValue - Value to set
	*/
	virtual void SetIntegerParameter(const std::string & sParameterGroup, const std::string & sParameterName, const LibMCEnv_int64 nValue) = 0;

	/**
	* IStateEnvironment::SetBoolParameter - sets a bool parameter
	* @param[in] sParameterGroup - Parameter Group
	* @param[in] sParameterName - Parameter Name
	* @param[in] bValue - Value to set
	*/
	virtual void SetBoolParameter(const std::string & sParameterGroup, const std::string & sParameterName, const bool bValue) = 0;

	/**
	* IStateEnvironment::GetStringParameter - returns a string parameter
	* @param[in] sParameterGroup - Parameter Group
	* @param[in] sParameterName - Parameter Name
	* @return Value to set
	*/
	virtual std::string GetStringParameter(const std::string & sParameterGroup, const std::string & sParameterName) = 0;

	/**
	* IStateEnvironment::GetUUIDParameter - returns a uuid parameter
	* @param[in] sParameterGroup - Parameter Group
	* @param[in] sParameterName - Parameter Name
	* @return Value to set
	*/
	virtual std::string GetUUIDParameter(const std::string & sParameterGroup, const std::string & sParameterName) = 0;

	/**
	* IStateEnvironment::GetDoubleParameter - returns a double parameter
	* @param[in] sParameterGroup - Parameter Group
	* @param[in] sParameterName - Parameter Name
	* @return Value to set
	*/
	virtual LibMCEnv_double GetDoubleParameter(const std::string & sParameterGroup, const std::string & sParameterName) = 0;

	/**
	* IStateEnvironment::GetIntegerParameter - returns an int parameter
	* @param[in] sParameterGroup - Parameter Group
	* @param[in] sParameterName - Parameter Name
	* @return Value to set
	*/
	virtual LibMCEnv_int64 GetIntegerParameter(const std::string & sParameterGroup, const std::string & sParameterName) = 0;

	/**
	* IStateEnvironment::GetBoolParameter - returns a bool parameter
	* @param[in] sParameterGroup - Parameter Group
	* @param[in] sParameterName - Parameter Name
	* @return Value to set
	*/
	virtual bool GetBoolParameter(const std::string & sParameterGroup, const std::string & sParameterName) = 0;

	/**
	* IStateEnvironment::LoadResourceData - loads a plugin resource file into memory.
	* @param[in] sResourceName - Name of the resource.
	* @param[in] nResourceDataBufferSize - Number of elements in buffer
	* @param[out] pResourceDataNeededCount - will be filled with the count of the written structs, or needed buffer size.
	* @param[out] pResourceDataBuffer - uint8 buffer of Resource Data Buffer.
	*/
	virtual void LoadResourceData(const std::string & sResourceName, LibMCEnv_uint64 nResourceDataBufferSize, LibMCEnv_uint64* pResourceDataNeededCount, LibMCEnv_uint8 * pResourceDataBuffer) = 0;

	/**
	* IStateEnvironment::LoadResourceString - loads a plugin resource file into a string. Fails if content is not a valid UTF8 string.
	* @param[in] sResourceName - Name of the resource.
	* @return Resource Data String.
	*/
	virtual std::string LoadResourceString(const std::string & sResourceName) = 0;

	/**
	* IStateEnvironment::CreateEmptyImage - creates an empty image object.
	* @param[in] nPixelSizeX - Pixel size in X. MUST be positive.
	* @param[in] nPixelSizeY - Pixel size in Y. MUST be positive.
	* @param[in] dDPIValueX - DPI Value in X. MUST be positive.
	* @param[in] dDPIValueY - DPI Value in Y. MUST be positive.
	* @param[in] ePixelFormat - Pixel format to use.
	* @return Empty image instance.
	*/
	virtual IImageData * CreateEmptyImage(const LibMCEnv_uint32 nPixelSizeX, const LibMCEnv_uint32 nPixelSizeY, const LibMCEnv_double dDPIValueX, const LibMCEnv_double dDPIValueY, const LibMCEnv::eImagePixelFormat ePixelFormat) = 0;

	/**
	* IStateEnvironment::LoadPNGImage - creates an image object from a PNG data stream.
	* @param[in] nPNGDataBufferSize - Number of elements in buffer
	* @param[in] pPNGDataBuffer - DPI Value in X. MUST be positive.
	* @param[in] dDPIValueX - DPI Value in X. MUST be positive.
	* @param[in] dDPIValueY - DPI Value in Y. MUST be positive.
	* @param[in] ePixelFormat - Pixel format to use. Might lose color and alpha information.
	* @return Image instance containing the PNG image.
	*/
	virtual IImageData * LoadPNGImage(const LibMCEnv_uint64 nPNGDataBufferSize, const LibMCEnv_uint8 * pPNGDataBuffer, const LibMCEnv_double dDPIValueX, const LibMCEnv_double dDPIValueY, const LibMCEnv::eImagePixelFormat ePixelFormat) = 0;

	/**
	* IStateEnvironment::GetGlobalTimerInMilliseconds - Returns the global timer in milliseconds.
	* @return Timer value in Milliseconds
	*/
	virtual LibMCEnv_uint64 GetGlobalTimerInMilliseconds() = 0;

	/**
	* IStateEnvironment::GetTestEnvironment - Returns a test environment instance.
	* @return Test Environment Instance
	*/
	virtual ITestEnvironment * GetTestEnvironment() = 0;

};

typedef IBaseSharedPtr<IStateEnvironment> PIStateEnvironment;


/*************************************************************************************************************************
 Class interface for UIEnvironment 
**************************************************************************************************************************/

class IUIEnvironment : public virtual IBase {
public:
	/**
	* IUIEnvironment::ActivateModalDialog - activates a modal dialog on the client.
	* @param[in] sDialogName - Name of the dialog to activate.
	*/
	virtual void ActivateModalDialog(const std::string & sDialogName) = 0;

	/**
	* IUIEnvironment::CloseModalDialog - closes the active modal dialog on the client.
	*/
	virtual void CloseModalDialog() = 0;

	/**
	* IUIEnvironment::ActivatePage - changes the current page on the client.
	* @param[in] sPageName - Name of the page to activate.
	*/
	virtual void ActivatePage(const std::string & sPageName) = 0;

	/**
	* IUIEnvironment::LogOut - Logs out the client session.
	*/
	virtual void LogOut() = 0;

	/**
	* IUIEnvironment::ShowHint - Shows a hint message in the user interface.
	* @param[in] sHint - Hint to show.
	* @param[in] nTimeoutInMS - How many milliseconds the snackbar should be shown.
	*/
	virtual void ShowHint(const std::string & sHint, const LibMCEnv_uint32 nTimeoutInMS) = 0;

	/**
	* IUIEnvironment::ShowHintColored - Shows a hint message in the user interface in a certain color.
	* @param[in] sHint - Hint to show.
	* @param[in] nTimeoutInMS - How many milliseconds the snackbar should be shown.
	* @param[in] Color - Background color of hint.
	* @param[in] FontColor - Font color of hint.
	*/
	virtual void ShowHintColored(const std::string & sHint, const LibMCEnv_uint32 nTimeoutInMS, const LibMCEnv::sColorRGB Color, const LibMCEnv::sColorRGB FontColor) = 0;

	/**
	* IUIEnvironment::HideHint - Hides hint if any is displayed.
	*/
	virtual void HideHint() = 0;

	/**
	* IUIEnvironment::ShowMessageDlg - Shows a message dialog in the user interface.
	* @param[in] sCaption - Caption of the dialog
	* @param[in] sTitle - Title of the dialog
	* @param[in] eDialogType - Which dialog type shall be shown.
	* @param[in] sYesEvent - Event to be called when clicked yes or ok.
	* @param[in] sNoEvent - Event to be called when clicked no.
	* @param[in] sCancelEvent - Event to be called when dialog is closed or cancel is pressed.
	* @return Dialog UUID. Will be set as sender for triggered events.
	*/
	virtual std::string ShowMessageDlg(const std::string & sCaption, const std::string & sTitle, const LibMCEnv::eMessageDialogType eDialogType, const std::string & sYesEvent, const std::string & sNoEvent, const std::string & sCancelEvent) = 0;

	/**
	* IUIEnvironment::RetrieveEventSender - returns name of the UI control that triggered the event.
	* @return Name of the sender element.
	*/
	virtual std::string RetrieveEventSender() = 0;

	/**
	* IUIEnvironment::RetrieveEventSenderUUID - returns uuid of the UI control that triggered the event.
	* @return Name of the sender uuid.
	*/
	virtual std::string RetrieveEventSenderUUID() = 0;

	/**
	* IUIEnvironment::PrepareSignal - prepares a signal object to trigger later.
	* @param[in] sMachineInstance - State machine instance name
	* @param[in] sSignalName - Name Of signal channel.
	* @return Signal trigger object.
	*/
	virtual ISignalTrigger * PrepareSignal(const std::string & sMachineInstance, const std::string & sSignalName) = 0;

	/**
	* IUIEnvironment::GetMachineState - Retrieves the machine state
	* @param[in] sMachineInstance - State machine instance name
	* @return Name of current state
	*/
	virtual std::string GetMachineState(const std::string & sMachineInstance) = 0;

	/**
	* IUIEnvironment::LogMessage - logs a string as message
	* @param[in] sLogString - String to Log
	*/
	virtual void LogMessage(const std::string & sLogString) = 0;

	/**
	* IUIEnvironment::LogWarning - logs a string as warning
	* @param[in] sLogString - String to Log
	*/
	virtual void LogWarning(const std::string & sLogString) = 0;

	/**
	* IUIEnvironment::LogInfo - logs a string as info
	* @param[in] sLogString - String to Log
	*/
	virtual void LogInfo(const std::string & sLogString) = 0;

	/**
	* IUIEnvironment::GetMachineParameter - returns a string parameter of a state machine
	* @param[in] sMachineInstance - State machine instance name
	* @param[in] sParameterGroup - Parameter Group
	* @param[in] sParameterName - Parameter Name
	* @return Current Parameter Value
	*/
	virtual std::string GetMachineParameter(const std::string & sMachineInstance, const std::string & sParameterGroup, const std::string & sParameterName) = 0;

	/**
	* IUIEnvironment::GetMachineParameterAsUUID - returns a uuid parameter of a state machine
	* @param[in] sMachineInstance - State machine instance name
	* @param[in] sParameterGroup - Parameter Group
	* @param[in] sParameterName - Parameter Name
	* @return Current Parameter Value
	*/
	virtual std::string GetMachineParameterAsUUID(const std::string & sMachineInstance, const std::string & sParameterGroup, const std::string & sParameterName) = 0;

	/**
	* IUIEnvironment::GetMachineParameterAsDouble - returns a double parameter of a state machine
	* @param[in] sMachineInstance - State machine instance name
	* @param[in] sParameterGroup - Parameter Group
	* @param[in] sParameterName - Parameter Name
	* @return Current Parameter Value
	*/
	virtual LibMCEnv_double GetMachineParameterAsDouble(const std::string & sMachineInstance, const std::string & sParameterGroup, const std::string & sParameterName) = 0;

	/**
	* IUIEnvironment::GetMachineParameterAsInteger - returns an int parameter of a state machine
	* @param[in] sMachineInstance - State machine instance name
	* @param[in] sParameterGroup - Parameter Group
	* @param[in] sParameterName - Parameter Name
	* @return Current Parameter Value
	*/
	virtual LibMCEnv_int64 GetMachineParameterAsInteger(const std::string & sMachineInstance, const std::string & sParameterGroup, const std::string & sParameterName) = 0;

	/**
	* IUIEnvironment::GetMachineParameterAsBool - returns a bool parameter of a state machine
	* @param[in] sMachineInstance - State machine instance name
	* @param[in] sParameterGroup - Parameter Group
	* @param[in] sParameterName - Parameter Name
	* @return Current Parameter Value
	*/
	virtual bool GetMachineParameterAsBool(const std::string & sMachineInstance, const std::string & sParameterGroup, const std::string & sParameterName) = 0;

	/**
	* IUIEnvironment::GetUIProperty - returns a string property of a UI element on the client
	* @param[in] sElementPath - Path of UI Element. Fails if element does not exist.
	* @param[in] sPropertyName - Property name. Fails if property does not exist.
	* @return Current property Value
	*/
	virtual std::string GetUIProperty(const std::string & sElementPath, const std::string & sPropertyName) = 0;

	/**
	* IUIEnvironment::GetUIPropertyAsUUID - returns a uuid variable of a UI element on the client
	* @param[in] sElementPath - Path of UI Element. Fails if element does not exist.
	* @param[in] sPropertyName - Property name. Fails if property does not exist.
	* @return Current property Value
	*/
	virtual std::string GetUIPropertyAsUUID(const std::string & sElementPath, const std::string & sPropertyName) = 0;

	/**
	* IUIEnvironment::GetUIPropertyAsDouble - returns a double variable of a UI element on the client
	* @param[in] sElementPath - Path of UI Element. Fails if element does not exist.
	* @param[in] sPropertyName - Property name. Fails if property does not exist.
	* @return Current property Value
	*/
	virtual LibMCEnv_double GetUIPropertyAsDouble(const std::string & sElementPath, const std::string & sPropertyName) = 0;

	/**
	* IUIEnvironment::GetUIPropertyAsInteger - returns a integer variable of a UI element on the client
	* @param[in] sElementPath - Path of UI Element. Fails if element does not exist.
	* @param[in] sPropertyName - Property name. Fails if property does not exist.
	* @return Current property Value
	*/
	virtual LibMCEnv_int64 GetUIPropertyAsInteger(const std::string & sElementPath, const std::string & sPropertyName) = 0;

	/**
	* IUIEnvironment::GetUIPropertyAsBool - returns a integer variable of a UI element on the client
	* @param[in] sElementPath - Path of UI Element. Fails if element does not exist.
	* @param[in] sPropertyName - Property name. Fails if property does not exist.
	* @return Current property Value
	*/
	virtual bool GetUIPropertyAsBool(const std::string & sElementPath, const std::string & sPropertyName) = 0;

	/**
	* IUIEnvironment::SetUIProperty - sets a string property of a UI element on the client.
	* @param[in] sElementPath - Path of UI Element. Fails if element does not exist.
	* @param[in] sPropertyName - Property name. Fails if property does not exist or is readonly.
	* @param[in] sValue - New property Value
	*/
	virtual void SetUIProperty(const std::string & sElementPath, const std::string & sPropertyName, const std::string & sValue) = 0;

	/**
	* IUIEnvironment::SetUIPropertyAsUUID - sets a uuid property of a UI element on the client.
	* @param[in] sElementPath - Path of UI Element. Fails if element does not exist.
	* @param[in] sPropertyName - Property name. Fails if property does not exist or is readonly.
	* @param[in] sValue - New property Value
	*/
	virtual void SetUIPropertyAsUUID(const std::string & sElementPath, const std::string & sPropertyName, const std::string & sValue) = 0;

	/**
	* IUIEnvironment::SetUIPropertyAsDouble - sets a double property of a UI element on the client.
	* @param[in] sElementPath - Path of UI Element. Fails if element does not exist.
	* @param[in] sPropertyName - Property name. Fails if property does not exist or is readonly.
	* @param[in] dValue - New property Value
	*/
	virtual void SetUIPropertyAsDouble(const std::string & sElementPath, const std::string & sPropertyName, const LibMCEnv_double dValue) = 0;

	/**
	* IUIEnvironment::SetUIPropertyAsInteger - sets a integer property of a UI element on the client.
	* @param[in] sElementPath - Path of UI Element. Fails if element does not exist.
	* @param[in] sPropertyName - Property name. Fails if property does not exist or is readonly.
	* @param[in] nValue - New property Value
	*/
	virtual void SetUIPropertyAsInteger(const std::string & sElementPath, const std::string & sPropertyName, const LibMCEnv_int64 nValue) = 0;

	/**
	* IUIEnvironment::SetUIPropertyAsBool - sets a bool property of a UI element on the client.
	* @param[in] sElementPath - Path of UI Element. Fails if element does not exist.
	* @param[in] sPropertyName - Property name. Fails if property does not exist or is readonly.
	* @param[in] bValue - New property Value
	*/
	virtual void SetUIPropertyAsBool(const std::string & sElementPath, const std::string & sPropertyName, const bool bValue) = 0;

	/**
	* IUIEnvironment::CreateEmptyImage - creates an empty image object.
	* @param[in] nPixelSizeX - Pixel size in X. MUST be positive.
	* @param[in] nPixelSizeY - Pixel size in Y. MUST be positive.
	* @param[in] dDPIValueX - DPI Value in X. MUST be positive.
	* @param[in] dDPIValueY - DPI Value in Y. MUST be positive.
	* @param[in] ePixelFormat - Pixel format to use.
	* @return Empty image instance.
	*/
	virtual IImageData * CreateEmptyImage(const LibMCEnv_uint32 nPixelSizeX, const LibMCEnv_uint32 nPixelSizeY, const LibMCEnv_double dDPIValueX, const LibMCEnv_double dDPIValueY, const LibMCEnv::eImagePixelFormat ePixelFormat) = 0;

	/**
	* IUIEnvironment::LoadPNGImage - creates an image object from a PNG data stream.
	* @param[in] nPNGDataBufferSize - Number of elements in buffer
	* @param[in] pPNGDataBuffer - DPI Value in X. MUST be positive.
	* @param[in] dDPIValueX - DPI Value in X. MUST be positive.
	* @param[in] dDPIValueY - DPI Value in Y. MUST be positive.
	* @param[in] ePixelFormat - Pixel format to use. Might lose color and alpha information.
	* @return Image instance containing the PNG image.
	*/
	virtual IImageData * LoadPNGImage(const LibMCEnv_uint64 nPNGDataBufferSize, const LibMCEnv_uint8 * pPNGDataBuffer, const LibMCEnv_double dDPIValueX, const LibMCEnv_double dDPIValueY, const LibMCEnv::eImagePixelFormat ePixelFormat) = 0;

	/**
	* IUIEnvironment::GetGlobalTimerInMilliseconds - Returns the global timer in milliseconds.
	* @return Timer value in Milliseconds
	*/
	virtual LibMCEnv_uint64 GetGlobalTimerInMilliseconds() = 0;

	/**
	* IUIEnvironment::GetTestEnvironment - Returns a test environment instance.
	* @return Test Environment Instance
	*/
	virtual ITestEnvironment * GetTestEnvironment() = 0;

};

typedef IBaseSharedPtr<IUIEnvironment> PIUIEnvironment;


/*************************************************************************************************************************
 Global functions declarations
**************************************************************************************************************************/
class CWrapper {
public:
	/**
	* Ilibmcenv::GetVersion - retrieves the binary version of this library.
	* @param[out] nMajor - returns the major version of this library
	* @param[out] nMinor - returns the minor version of this library
	* @param[out] nMicro - returns the micro version of this library
	*/
	static void GetVersion(LibMCEnv_uint32 & nMajor, LibMCEnv_uint32 & nMinor, LibMCEnv_uint32 & nMicro);

	/**
	* Ilibmcenv::GetLastError - Returns the last error recorded on this object
	* @param[in] pInstance - Instance Handle
	* @param[out] sErrorMessage - Message of the last error
	* @return Is there a last error to query
	*/
	static bool GetLastError(IBase* pInstance, std::string & sErrorMessage);

	/**
	* Ilibmcenv::ReleaseInstance - Releases shared ownership of an Instance
	* @param[in] pInstance - Instance Handle
	*/
	static void ReleaseInstance(IBase* pInstance);

	/**
	* Ilibmcenv::AcquireInstance - Acquires shared ownership of an Instance
	* @param[in] pInstance - Instance Handle
	*/
	static void AcquireInstance(IBase* pInstance);

};

LibMCEnvResult LibMCEnv_GetProcAddress (const char * pProcName, void ** ppProcAddress);

} // namespace Impl
} // namespace LibMCEnv

#endif // __LIBMCENV_CPPINTERFACES
