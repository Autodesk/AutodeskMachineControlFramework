/*++

Copyright (C) 2020 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.7.0-develop.

Abstract: This is an autogenerated C++ header file in order to allow easy
development of Machine Control library. The implementer of Machine Control library needs to
derive concrete classes from the abstract classes in this header.

Interface version: 1.0.0

*/


#ifndef __LIBMC_CPPINTERFACES
#define __LIBMC_CPPINTERFACES

#include <string>
#include <memory>

#include "libmc_types.hpp"


#include "libmcdata_dynamic.hpp"

namespace LibMC {
namespace Impl {

/**
 Forward declarations of class interfaces
*/
class IBase;
class IAPIRequestHandler;
class IMCContext;



/*************************************************************************************************************************
 Parameter Cache definitions
**************************************************************************************************************************/

class ParameterCache {
	public:
		virtual ~ParameterCache() {}
};

template <class T1> class ParameterCache_1 : public ParameterCache {
	private:
		T1 m_param1;
	public:
		ParameterCache_1 (const T1 & param1)
			: m_param1 (param1)
		{
		}

		void retrieveData (T1 & param1)
		{
			param1 = m_param1;
		}
};

template <class T1, class T2> class ParameterCache_2 : public ParameterCache {
	private:
		T1 m_param1;
		T2 m_param2;
	public:
		ParameterCache_2 (const T1 & param1, const T2 & param2)
			: m_param1 (param1), m_param2 (param2)
		{
		}

		void retrieveData (T1 & param1, T2 & param2)
		{
			param1 = m_param1;
			param2 = m_param2;
		}
};

template <class T1, class T2, class T3> class ParameterCache_3 : public ParameterCache {
	private:
		T1 m_param1;
		T2 m_param2;
		T3 m_param3;
	public:
		ParameterCache_3 (const T1 & param1, const T2 & param2, const T3 & param3)
			: m_param1 (param1), m_param2 (param2), m_param3 (param3)
		{
		}

		void retrieveData (T1 & param1, T2 & param2, T3 & param3)
		{
			param1 = m_param1;
			param2 = m_param2;
			param3 = m_param3;
		}
};


/*************************************************************************************************************************
 Class interface for Base 
**************************************************************************************************************************/

class IBase {
private:
	std::unique_ptr<ParameterCache> m_ParameterCache;
public:
	/**
	* IBase::~IBase - virtual destructor of IBase
	*/
	virtual ~IBase() {};

	/**
	* IBase::ReleaseBaseClassInterface - Releases ownership of a base class interface. Deletes the reference, if necessary.
	* @param[in] pIBase - The base class instance to release
	*/
	static void ReleaseBaseClassInterface(IBase* pIBase)
	{
		if (pIBase) {
			pIBase->DecRefCount();
		}
	};

	/**
	* IBase::AcquireBaseClassInterface - Acquires shared ownership of a base class interface.
	* @param[in] pIBase - The base class instance to acquire
	*/
	static void AcquireBaseClassInterface(IBase* pIBase)
	{
		if (pIBase) {
			pIBase->IncRefCount();
		}
	};


	/**
	* IBase::GetLastErrorMessage - Returns the last error registered of this class instance
	* @param[out] sErrorMessage - Message of the last error registered
	* @return Has an error been registered already
	*/
	virtual bool GetLastErrorMessage(std::string & sErrorMessage) = 0;

	/**
	* IBase::ClearErrorMessages - Clears all registered messages of this class instance
	*/
	virtual void ClearErrorMessages() = 0;

	/**
	* IBase::RegisterErrorMessage - Registers an error message with this class instance
	* @param[in] sErrorMessage - Error message to register
	*/
	virtual void RegisterErrorMessage(const std::string & sErrorMessage) = 0;

	/**
	* IBase::IncRefCount - Increases the reference count of a class instance
	*/
	virtual void IncRefCount() = 0;

	/**
	* IBase::DecRefCount - Decreases the reference count of a class instance and free releases it, if the last reference has been removed
	* @return Has the object been released
	*/
	virtual bool DecRefCount() = 0;

	/**
	* IBase::_setCache - set parameter cache of object
	*/
	void _setCache(ParameterCache * pCache)
	{
		m_ParameterCache.reset(pCache);
	}

	/**
	* IBase::_getCache - returns parameter cache of object
	*/
	ParameterCache* _getCache()
	{
		return m_ParameterCache.get();
	}

};


/**
 Definition of a shared pointer class for IBase
*/
template<class T>
class IBaseSharedPtr : public std::shared_ptr<T>
{
public:
	explicit IBaseSharedPtr(T* t = nullptr)
		: std::shared_ptr<T>(t, IBase::ReleaseBaseClassInterface)
	{
		t->IncRefCount();
	}

	// Reset function, as it also needs to properly set the deleter.
	void reset(T* t = nullptr)
	{
		std::shared_ptr<T>::reset(t, IBase::ReleaseBaseClassInterface);
	}

	// Get-function that increases the Base class's reference count
	T* getCoOwningPtr()
	{
		T* t = this->get();
		t->IncRefCount();
		return t;
	}
};


typedef IBaseSharedPtr<IBase> PIBase;


/*************************************************************************************************************************
 Class interface for APIRequestHandler 
**************************************************************************************************************************/

class IAPIRequestHandler : public virtual IBase {
public:
	/**
	* IAPIRequestHandler::ExpectsRawBody - checks if the raw body is needed to handle the request.
	* @return Flag, if the raw body is needed in the request.
	*/
	virtual bool ExpectsRawBody() = 0;

	/**
	* IAPIRequestHandler::ExpectsFormData - checks if the parsed form data is needed to handle the request.
	* @param[out] nFieldCount - Number of Form Data entries that are expected.
	* @return Flag, if the parsed form data is needed in the request.
	*/
	virtual bool ExpectsFormData(LibMC_uint32 & nFieldCount) = 0;

	/**
	* IAPIRequestHandler::GetFormDataDetails - returns details of expected form data.
	* @param[in] nFieldIndex - Index of Form Data Field (0..FieldCount - 1)
	* @param[out] sName - Name of the expected form data field.
	* @param[out] bIsFile - Flag, if the field Is a file field.
	* @param[out] bMandatory - Flag, if the field MUST be present.
	*/
	virtual void GetFormDataDetails(const LibMC_uint32 nFieldIndex, std::string & sName, bool & bIsFile, bool & bMandatory) = 0;

	/**
	* IAPIRequestHandler::SetFormDataField - passes the a form data field to the request handler. Call only, if ExpectsFormData returns true.
	* @param[in] sName - Name of the form data field.
	* @param[in] nDataFieldBufferSize - Number of elements in buffer
	* @param[in] pDataFieldBuffer - DataField that was sent.
	*/
	virtual void SetFormDataField(const std::string & sName, const LibMC_uint64 nDataFieldBufferSize, const LibMC_uint8 * pDataFieldBuffer) = 0;

	/**
	* IAPIRequestHandler::SetFormStringField - passes the a form string field to the request handler. Call only, if ExpectsFormData returns true.
	* @param[in] sName - Name of the form data field.
	* @param[in] sString - DataString that was sent.
	*/
	virtual void SetFormStringField(const std::string & sName, const std::string & sString) = 0;

	/**
	* IAPIRequestHandler::Handle - handles the request.
	* @param[in] nRawBodyBufferSize - Number of elements in buffer
	* @param[in] pRawBodyBuffer - Raw Body that was sent. Only necessary, if ExpectsRawBody returns true.
	* @param[out] sContentType - the resulting Content Type String of the data.
	* @param[out] nHTTPCode - the resulting HTTP Errorcode (200 for success).
	*/
	virtual void Handle(const LibMC_uint64 nRawBodyBufferSize, const LibMC_uint8 * pRawBodyBuffer, std::string & sContentType, LibMC_uint32 & nHTTPCode) = 0;

	/**
	* IAPIRequestHandler::GetResultData - returns the cached stream content of the resulting data. Call only after Handle().
	* @param[in] nDataBufferSize - Number of elements in buffer
	* @param[out] pDataNeededCount - will be filled with the count of the written structs, or needed buffer size.
	* @param[out] pDataBuffer - uint8 buffer of Binary stream data
	*/
	virtual void GetResultData(LibMC_uint64 nDataBufferSize, LibMC_uint64* pDataNeededCount, LibMC_uint8 * pDataBuffer) = 0;

};

typedef IBaseSharedPtr<IAPIRequestHandler> PIAPIRequestHandler;


/*************************************************************************************************************************
 Class interface for MCContext 
**************************************************************************************************************************/

class IMCContext : public virtual IBase {
public:
	/**
	* IMCContext::RegisterLibraryPath - registers a library for a given name.
	* @param[in] sLibraryName - Library Name.
	* @param[in] sLibraryPath - Path to the shared library.
	*/
	virtual void RegisterLibraryPath(const std::string & sLibraryName, const std::string & sLibraryPath) = 0;

	/**
	* IMCContext::ParseConfiguration - parses and initialises the state machines from a configuration XML.
	* @param[in] sXMLString - XML Configuration String.
	*/
	virtual void ParseConfiguration(const std::string & sXMLString) = 0;

	/**
	* IMCContext::StartAllThreads - starts the threads for all the state machines.
	*/
	virtual void StartAllThreads() = 0;

	/**
	* IMCContext::TerminateAllThreads - terminates the threads for all the state machines.
	*/
	virtual void TerminateAllThreads() = 0;

	/**
	* IMCContext::LoadClientPackage - load a client package to serve the client website.
	* @param[in] nZIPStreamBufferSize - Number of elements in buffer
	* @param[in] pZIPStreamBuffer - client package ZIP stream.
	*/
	virtual void LoadClientPackage(const LibMC_uint64 nZIPStreamBufferSize, const LibMC_uint8 * pZIPStreamBuffer) = 0;

	/**
	* IMCContext::Log - log message with a certain log level.
	* @param[in] sMessage - log message
	* @param[in] eSubsystem - log subsystem
	* @param[in] eLogLevel - log level
	*/
	virtual void Log(const std::string & sMessage, const LibMC::eLogSubSystem eSubsystem, const LibMC::eLogLevel eLogLevel) = 0;

	/**
	* IMCContext::CreateAPIRequestHandler - creates an API request handler.
	* @param[in] sURI - URI to serve
	* @param[in] sRequestMethod - Request Method
	* @param[in] sAuthorization - Authorization Header String
	* @return Request Handler instance.
	*/
	virtual IAPIRequestHandler * CreateAPIRequestHandler(const std::string & sURI, const std::string & sRequestMethod, const std::string & sAuthorization) = 0;

};

typedef IBaseSharedPtr<IMCContext> PIMCContext;


/*************************************************************************************************************************
 Global functions declarations
**************************************************************************************************************************/
class CWrapper {
public:
	// Injected Components
	static LibMCData::PWrapper sPLibMCDataWrapper;

	/**
	* Ilibmc::GetVersion - retrieves the binary version of this library.
	* @param[out] nMajor - returns the major version of this library
	* @param[out] nMinor - returns the minor version of this library
	* @param[out] nMicro - returns the micro version of this library
	*/
	static void GetVersion(LibMC_uint32 & nMajor, LibMC_uint32 & nMinor, LibMC_uint32 & nMicro);

	/**
	* Ilibmc::GetLastError - Returns the last error recorded on this object
	* @param[in] pInstance - Instance Handle
	* @param[out] sErrorMessage - Message of the last error
	* @return Is there a last error to query
	*/
	static bool GetLastError(IBase* pInstance, std::string & sErrorMessage);

	/**
	* Ilibmc::ReleaseInstance - Releases shared ownership of an Instance
	* @param[in] pInstance - Instance Handle
	*/
	static void ReleaseInstance(IBase* pInstance);

	/**
	* Ilibmc::AcquireInstance - Acquires shared ownership of an Instance
	* @param[in] pInstance - Instance Handle
	*/
	static void AcquireInstance(IBase* pInstance);

	/**
	* Ilibmc::CreateMCContext - Creates and initializes new MC Context.
	* @param[in] pDataModel - DataModel Object
	* @return New Context instance
	*/
	static IMCContext * CreateMCContext(LibMCData::PDataModel pDataModel);

};

LibMCResult LibMC_GetProcAddress (const char * pProcName, void ** ppProcAddress);

} // namespace Impl
} // namespace LibMC

#endif // __LIBMC_CPPINTERFACES
