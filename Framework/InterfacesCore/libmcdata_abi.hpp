/*++

Copyright (C) 2020 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.8.0-develop.

Abstract: This is an autogenerated C++-Header file in order to allow an easy
 use of Machine Control data model library

Interface version: 1.0.0

*/

#ifndef __LIBMCDATA_HEADER_CPP
#define __LIBMCDATA_HEADER_CPP

#ifdef __LIBMCDATA_EXPORTS
#ifdef _WIN32
#define LIBMCDATA_DECLSPEC __declspec (dllexport)
#else // _WIN32
#define LIBMCDATA_DECLSPEC __attribute__((visibility("default")))
#endif // _WIN32
#else // __LIBMCDATA_EXPORTS
#define LIBMCDATA_DECLSPEC
#endif // __LIBMCDATA_EXPORTS

#include "libmcdata_types.hpp"


#ifdef __cplusplus
extern "C" {
#endif

/*************************************************************************************************************************
 Class definition for Base
**************************************************************************************************************************/

/*************************************************************************************************************************
 Class definition for Iterator
**************************************************************************************************************************/

/**
* Iterates to the next resource in the list.
*
* @param[in] pIterator - Iterator instance.
* @param[out] pHasNext - Iterates to the next resource in the list.
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_iterator_movenext(LibMCData_Iterator pIterator, bool * pHasNext);

/**
* Iterates to the previous resource in the list.
*
* @param[in] pIterator - Iterator instance.
* @param[out] pHasPrevious - Iterates to the previous resource in the list.
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_iterator_moveprevious(LibMCData_Iterator pIterator, bool * pHasPrevious);

/**
* Returns the resource the iterator points at.
*
* @param[in] pIterator - Iterator instance.
* @param[out] pCurrentInstance - returns the resource instance.
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_iterator_getcurrent(LibMCData_Iterator pIterator, LibMCData_Base * pCurrentInstance);

/**
* Creates a new resource iterator with the same resource list.
*
* @param[in] pIterator - Iterator instance.
* @param[out] pOutIterator - returns the cloned Iterator instance
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_iterator_clone(LibMCData_Iterator pIterator, LibMCData_Iterator * pOutIterator);

/**
* Returns the number of resources the iterator captures.
*
* @param[in] pIterator - Iterator instance.
* @param[out] pCount - returns the number of resources the iterator captures.
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_iterator_count(LibMCData_Iterator pIterator, LibMCData_uint64 * pCount);

/*************************************************************************************************************************
 Class definition for LogEntryList
**************************************************************************************************************************/

/**
* Returns the number of log entries in the list.
*
* @param[in] pLogEntryList - LogEntryList instance.
* @param[out] pCount - returns the number of retrieved log entries.
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_logentrylist_count(LibMCData_LogEntryList pLogEntryList, LibMCData_uint32 * pCount);

/**
* Returns a log entry in the list by its index.
*
* @param[in] pLogEntryList - LogEntryList instance.
* @param[in] nIndex - Index of log entry, 0-based.
* @param[out] pID - ID of log entry.
* @param[in] nMessageBufferSize - size of the buffer (including trailing 0)
* @param[out] pMessageNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pMessageBuffer -  buffer of Log Message, may be NULL
* @param[in] nSubSystemBufferSize - size of the buffer (including trailing 0)
* @param[out] pSubSystemNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pSubSystemBuffer -  buffer of Sub System identifier, may be NULL
* @param[out] pLogLevel - Log Level
* @param[in] nTimestampBufferSize - size of the buffer (including trailing 0)
* @param[out] pTimestampNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pTimestampBuffer -  buffer of Timestamp in ISO8601 UTC format, may be NULL
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_logentrylist_getentrybyindex(LibMCData_LogEntryList pLogEntryList, LibMCData_uint32 nIndex, LibMCData_uint32 * pID, const LibMCData_uint32 nMessageBufferSize, LibMCData_uint32* pMessageNeededChars, char * pMessageBuffer, const LibMCData_uint32 nSubSystemBufferSize, LibMCData_uint32* pSubSystemNeededChars, char * pSubSystemBuffer, LibMCData::eLogLevel * pLogLevel, const LibMCData_uint32 nTimestampBufferSize, LibMCData_uint32* pTimestampNeededChars, char * pTimestampBuffer);

/**
* Returns a log entry in the list by its ID.
*
* @param[in] pLogEntryList - LogEntryList instance.
* @param[in] nID - ID of log entry.
* @param[in] nMessageBufferSize - size of the buffer (including trailing 0)
* @param[out] pMessageNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pMessageBuffer -  buffer of Log Message, may be NULL
* @param[in] nSubSystemBufferSize - size of the buffer (including trailing 0)
* @param[out] pSubSystemNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pSubSystemBuffer -  buffer of Sub System identifier, may be NULL
* @param[out] pLogLevel - Log Level
* @param[in] nTimestampBufferSize - size of the buffer (including trailing 0)
* @param[out] pTimestampNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pTimestampBuffer -  buffer of Timestamp in ISO8601 UTC format, may be NULL
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_logentrylist_getentrybyid(LibMCData_LogEntryList pLogEntryList, LibMCData_uint32 nID, const LibMCData_uint32 nMessageBufferSize, LibMCData_uint32* pMessageNeededChars, char * pMessageBuffer, const LibMCData_uint32 nSubSystemBufferSize, LibMCData_uint32* pSubSystemNeededChars, char * pSubSystemBuffer, LibMCData::eLogLevel * pLogLevel, const LibMCData_uint32 nTimestampBufferSize, LibMCData_uint32* pTimestampNeededChars, char * pTimestampBuffer);

/**
* Returns if a log entry in the list exists.
*
* @param[in] pLogEntryList - LogEntryList instance.
* @param[in] nID - ID of log entry.
* @param[out] pValue - Returns if a list exists.
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_logentrylist_hasentry(LibMCData_LogEntryList pLogEntryList, LibMCData_uint32 nID, bool * pValue);

/*************************************************************************************************************************
 Class definition for LogSession
**************************************************************************************************************************/

/**
* retrieves the session UUID.
*
* @param[in] pLogSession - LogSession instance.
* @param[in] nSessionUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pSessionUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pSessionUUIDBuffer -  buffer of Session UUID, may be NULL
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_logsession_getsessionuuid(LibMCData_LogSession pLogSession, const LibMCData_uint32 nSessionUUIDBufferSize, LibMCData_uint32* pSessionUUIDNeededChars, char * pSessionUUIDBuffer);

/**
* adds a new log entry.
*
* @param[in] pLogSession - LogSession instance.
* @param[in] pMessage - Log Message
* @param[in] pSubSystem - Sub System identifier
* @param[in] eLogLevel - Log Level
* @param[in] pTimestampUTC - Timestamp in ISO8601 UTC format
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_logsession_addentry(LibMCData_LogSession pLogSession, const char * pMessage, const char * pSubSystem, LibMCData::eLogLevel eLogLevel, const char * pTimestampUTC);

/**
* retrieves the maximum log entry ID in the log.
*
* @param[in] pLogSession - LogSession instance.
* @param[out] pMaxLogID - Log entry ID
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_logsession_getmaxlogentryid(LibMCData_LogSession pLogSession, LibMCData_uint32 * pMaxLogID);

/**
* retrieves an excerpt of the log.
*
* @param[in] pLogSession - LogSession instance.
* @param[in] nMinLogID - Minimum log entry ID to receive.
* @param[in] nMaxLogID - Maximum log entry ID to receive. MUST be between (MinLogID + 1) and (MinLogID + 65536).
* @param[in] eMinLogLevel - Minimum Log Level to return.
* @param[out] pLogEntryList - Log Entry List.
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_logsession_retrievelogentriesbyid(LibMCData_LogSession pLogSession, LibMCData_uint32 nMinLogID, LibMCData_uint32 nMaxLogID, LibMCData::eLogLevel eMinLogLevel, LibMCData_LogEntryList * pLogEntryList);

/*************************************************************************************************************************
 Class definition for Alert
**************************************************************************************************************************/

/**
* Returns the Alert UUID.
*
* @param[in] pAlert - Alert instance.
* @param[in] nUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pUUIDBuffer -  buffer of Value., may be NULL
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_alert_getuuid(LibMCData_Alert pAlert, const LibMCData_uint32 nUUIDBufferSize, LibMCData_uint32* pUUIDNeededChars, char * pUUIDBuffer);

/**
* Returns the Alert Identifier.
*
* @param[in] pAlert - Alert instance.
* @param[in] nIdentifierBufferSize - size of the buffer (including trailing 0)
* @param[out] pIdentifierNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pIdentifierBuffer -  buffer of Value., may be NULL
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_alert_getidentifier(LibMCData_Alert pAlert, const LibMCData_uint32 nIdentifierBufferSize, LibMCData_uint32* pIdentifierNeededChars, char * pIdentifierBuffer);

/**
* Returns if the alert is actuve.
*
* @param[in] pAlert - Alert instance.
* @param[out] pActive - Returns if the alert is active.
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_alert_isactive(LibMCData_Alert pAlert, bool * pActive);

/**
* Returns the Alert Level.
*
* @param[in] pAlert - Alert instance.
* @param[out] pLevel - Value.
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_alert_getlevel(LibMCData_Alert pAlert, LibMCData::eAlertLevel * pLevel);

/**
* Returns the Alert Level string.
*
* @param[in] pAlert - Alert instance.
* @param[in] nLevelStringBufferSize - size of the buffer (including trailing 0)
* @param[out] pLevelStringNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pLevelStringBuffer -  buffer of Value., may be NULL
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_alert_getlevelstring(LibMCData_Alert pAlert, const LibMCData_uint32 nLevelStringBufferSize, LibMCData_uint32* pLevelStringNeededChars, char * pLevelStringBuffer);

/**
* Returns the Alert Description.
*
* @param[in] pAlert - Alert instance.
* @param[in] nDescriptionBufferSize - size of the buffer (including trailing 0)
* @param[out] pDescriptionNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pDescriptionBuffer -  buffer of Value., may be NULL
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_alert_getdescription(LibMCData_Alert pAlert, const LibMCData_uint32 nDescriptionBufferSize, LibMCData_uint32* pDescriptionNeededChars, char * pDescriptionBuffer);

/**
* Returns the Alert DescriptionIdentifier.
*
* @param[in] pAlert - Alert instance.
* @param[in] nDescriptionIdentifierBufferSize - size of the buffer (including trailing 0)
* @param[out] pDescriptionIdentifierNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pDescriptionIdentifierBuffer -  buffer of Value., may be NULL
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_alert_getdescriptionidentifier(LibMCData_Alert pAlert, const LibMCData_uint32 nDescriptionIdentifierBufferSize, LibMCData_uint32* pDescriptionIdentifierNeededChars, char * pDescriptionIdentifierBuffer);

/**
* Returns the Alert ReadableContextInformation.
*
* @param[in] pAlert - Alert instance.
* @param[in] nReadableContextInformationBufferSize - size of the buffer (including trailing 0)
* @param[out] pReadableContextInformationNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pReadableContextInformationBuffer -  buffer of Value., may be NULL
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_alert_getreadablecontextinformation(LibMCData_Alert pAlert, const LibMCData_uint32 nReadableContextInformationBufferSize, LibMCData_uint32* pReadableContextInformationNeededChars, char * pReadableContextInformationBuffer);

/**
* Returns if the Alert needs acknowledgement.
*
* @param[in] pAlert - Alert instance.
* @param[out] pNeedsAcknowledgement - Value.
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_alert_getneedsacknowledgement(LibMCData_Alert pAlert, bool * pNeedsAcknowledgement);

/**
* Returns the Alert Timestamp in UTC file format.
*
* @param[in] pAlert - Alert instance.
* @param[in] nTimestampUTCBufferSize - size of the buffer (including trailing 0)
* @param[out] pTimestampUTCNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pTimestampUTCBuffer -  buffer of Value., may be NULL
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_alert_gettimestamputc(LibMCData_Alert pAlert, const LibMCData_uint32 nTimestampUTCBufferSize, LibMCData_uint32* pTimestampUTCNeededChars, char * pTimestampUTCBuffer);

/**
* Checks if the alert has been acknowledged.
*
* @param[in] pAlert - Alert instance.
* @param[out] pHasBeenAcknowledged - Flag if the alert has been acknowledged.
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_alert_hasbeenacknowledged(LibMCData_Alert pAlert, bool * pHasBeenAcknowledged);

/**
* Returns details about the acknowledgement. Fails if the alert is not acknowledged.
*
* @param[in] pAlert - Alert instance.
* @param[in] nUserUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pUserUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pUserUUIDBuffer -  buffer of User who acknowledged the alert., may be NULL
* @param[in] nUserCommentBufferSize - size of the buffer (including trailing 0)
* @param[out] pUserCommentNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pUserCommentBuffer -  buffer of Comment of the acknowledgement., may be NULL
* @param[in] nAckTimeBufferSize - size of the buffer (including trailing 0)
* @param[out] pAckTimeNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pAckTimeBuffer -  buffer of Timestamp in ISO8601 UTC format., may be NULL
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_alert_getacknowledgementinformation(LibMCData_Alert pAlert, const LibMCData_uint32 nUserUUIDBufferSize, LibMCData_uint32* pUserUUIDNeededChars, char * pUserUUIDBuffer, const LibMCData_uint32 nUserCommentBufferSize, LibMCData_uint32* pUserCommentNeededChars, char * pUserCommentBuffer, const LibMCData_uint32 nAckTimeBufferSize, LibMCData_uint32* pAckTimeNeededChars, char * pAckTimeBuffer);

/**
* Acknowledges an alert for a specific user and sets it inactive. 
*
* @param[in] pAlert - Alert instance.
* @param[in] pUserUUID - UUID of the user to acknowledge. Fails if user does not exist.
* @param[in] pUserComment - User comment to store. May be empty.
* @param[in] pTimestampUTC - Timestamp in UTC format.
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_alert_acknowledgeforuser(LibMCData_Alert pAlert, const char * pUserUUID, const char * pUserComment, const char * pTimestampUTC);

/**
* Sets an alert inactive. It will not be marked as acknowledged by a certain user.
*
* @param[in] pAlert - Alert instance.
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_alert_deactivatealert(LibMCData_Alert pAlert);

/*************************************************************************************************************************
 Class definition for AlertIterator
**************************************************************************************************************************/

/**
* Returns the alert the iterator points at.
*
* @param[in] pAlertIterator - AlertIterator instance.
* @param[out] pCurrentInstance - returns the Alert instance.
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_alertiterator_getcurrentalert(LibMCData_AlertIterator pAlertIterator, LibMCData_Alert * pCurrentInstance);

/*************************************************************************************************************************
 Class definition for AlertSession
**************************************************************************************************************************/

/**
* adds a new alert entry.
*
* @param[in] pAlertSession - AlertSession instance.
* @param[in] pUUID - Alert UUID
* @param[in] pIdentifier - Alert Identifier
* @param[in] eLevel - Alert level.
* @param[in] pDescription - Alert Description in default language
* @param[in] pDescriptionIdentifier - Alert Description Identifier for internationalization. May be empty.
* @param[in] pReadableContextInformation - Readable Context Information in default language
* @param[in] bNeedsAcknowledgement - Flag if acknowledgement is needed
* @param[in] pTimestampUTC - Timestamp in ISO8601 UTC format
* @param[out] pAlertInstance - Alert Instance
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_alertsession_addalert(LibMCData_AlertSession pAlertSession, const char * pUUID, const char * pIdentifier, LibMCData::eAlertLevel eLevel, const char * pDescription, const char * pDescriptionIdentifier, const char * pReadableContextInformation, bool bNeedsAcknowledgement, const char * pTimestampUTC, LibMCData_Alert * pAlertInstance);

/**
* Checks if an alert with a certain UUID exists.
*
* @param[in] pAlertSession - AlertSession instance.
* @param[in] pUUID - Alert UUID. Fails if not a valid UUID is given.
* @param[out] pAlertExists - Flag if alert exists
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_alertsession_hasalert(LibMCData_AlertSession pAlertSession, const char * pUUID, bool * pAlertExists);

/**
* Retrieves the alert object. Fails if alert does not exist.
*
* @param[in] pAlertSession - AlertSession instance.
* @param[in] pUUID - Alert UUID. Fails if not a valid UUID is given.
* @param[out] pAlertInstance - Alert Instance
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_alertsession_getalertbyuuid(LibMCData_AlertSession pAlertSession, const char * pUUID, LibMCData_Alert * pAlertInstance);

/**
* Retrieves all or all active alerts.
*
* @param[in] pAlertSession - AlertSession instance.
* @param[in] bOnlyActive - If true, only active alerts will be returned.
* @param[out] pIteratorInstance - AlertIterator Instance
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_alertsession_retrievealerts(LibMCData_AlertSession pAlertSession, bool bOnlyActive, LibMCData_AlertIterator * pIteratorInstance);

/**
* Retrieves alerts of a certain type identifier.
*
* @param[in] pAlertSession - AlertSession instance.
* @param[in] pIdentifier - Alert Identifier to look for. Fails if empty.
* @param[in] bOnlyActive - If true, only active alerts will be returned.
* @param[out] pIteratorInstance - AlertIterator Instance
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_alertsession_retrievealertsbytype(LibMCData_AlertSession pAlertSession, const char * pIdentifier, bool bOnlyActive, LibMCData_AlertIterator * pIteratorInstance);

/*************************************************************************************************************************
 Class definition for JournalSession
**************************************************************************************************************************/

/**
* retrieves the session UUID.
*
* @param[in] pJournalSession - JournalSession instance.
* @param[in] nSessionUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pSessionUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pSessionUUIDBuffer -  buffer of Session UUID, may be NULL
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_journalsession_getsessionuuid(LibMCData_JournalSession pJournalSession, const LibMCData_uint32 nSessionUUIDBufferSize, LibMCData_uint32* pSessionUUIDNeededChars, char * pSessionUUIDBuffer);

/**
* writes detailed journal state data to disk.
*
* @param[in] pJournalSession - JournalSession instance.
* @param[in] nChunkIndex - Index of the Chunk to write
* @param[in] nStartTimeStamp - Start Timestamp of the chunk (in microseconds)
* @param[in] nEndTimeStamp - End Timestamp of the chunk (in microseconds)
* @param[in] nVariableInfoBufferSize - Number of elements in buffer
* @param[in] pVariableInfoBuffer - JournalChunkVariableInfo buffer of Variable information.
* @param[in] nEntryDataBufferSize - Number of elements in buffer
* @param[in] pEntryDataBuffer - JournalChunkIntegerEntry buffer of Entry bulk data.
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_journalsession_writejournalchunkintegerdata(LibMCData_JournalSession pJournalSession, LibMCData_uint32 nChunkIndex, LibMCData_uint64 nStartTimeStamp, LibMCData_uint64 nEndTimeStamp, LibMCData_uint64 nVariableInfoBufferSize, const LibMCData::sJournalChunkVariableInfo * pVariableInfoBuffer, LibMCData_uint64 nEntryDataBufferSize, const LibMCData::sJournalChunkIntegerEntry * pEntryDataBuffer);

/**
* Returns the chunk capacity of the session journal.
*
* @param[in] pJournalSession - JournalSession instance.
* @param[out] pChunkCapacity - Maximum Chunk Capacity in Journal in Bytes
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_journalsession_getchunkcapacity(LibMCData_JournalSession pJournalSession, LibMCData_uint32 * pChunkCapacity);

/**
* Returns the flush interval of the session journal.
*
* @param[in] pJournalSession - JournalSession instance.
* @param[out] pFlushInterval - The interval determines how often a session journal chunk is written to disk. In Seconds.
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_journalsession_getflushinterval(LibMCData_JournalSession pJournalSession, LibMCData_uint32 * pFlushInterval);

/*************************************************************************************************************************
 Class definition for StorageStream
**************************************************************************************************************************/

/**
* returns the uuid of a storage stream.
*
* @param[in] pStorageStream - StorageStream instance.
* @param[in] nUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pUUIDBuffer -  buffer of UUID String, may be NULL
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_storagestream_getuuid(LibMCData_StorageStream pStorageStream, const LibMCData_uint32 nUUIDBufferSize, LibMCData_uint32* pUUIDNeededChars, char * pUUIDBuffer);

/**
* returns the timestamp of a storage stream.
*
* @param[in] pStorageStream - StorageStream instance.
* @param[in] nTimestampBufferSize - size of the buffer (including trailing 0)
* @param[out] pTimestampNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pTimestampBuffer -  buffer of Timestamp in ISO8601 UTC format, may be NULL
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_storagestream_gettimestamp(LibMCData_StorageStream pStorageStream, const LibMCData_uint32 nTimestampBufferSize, LibMCData_uint32* pTimestampNeededChars, char * pTimestampBuffer);

/**
* returns the context identifier of a storage stream.
*
* @param[in] pStorageStream - StorageStream instance.
* @param[in] nContextIdentifierBufferSize - size of the buffer (including trailing 0)
* @param[out] pContextIdentifierNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pContextIdentifierBuffer -  buffer of Context Identifier String, may be NULL
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_storagestream_getcontextidentifier(LibMCData_StorageStream pStorageStream, const LibMCData_uint32 nContextIdentifierBufferSize, LibMCData_uint32* pContextIdentifierNeededChars, char * pContextIdentifierBuffer);

/**
* returns the name description of a storage stream.
*
* @param[in] pStorageStream - StorageStream instance.
* @param[in] nNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNameBuffer -  buffer of Name String, may be NULL
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_storagestream_getname(LibMCData_StorageStream pStorageStream, const LibMCData_uint32 nNameBufferSize, LibMCData_uint32* pNameNeededChars, char * pNameBuffer);

/**
* returns the mime type of a storage stream.
*
* @param[in] pStorageStream - StorageStream instance.
* @param[in] nMimeTypeBufferSize - size of the buffer (including trailing 0)
* @param[out] pMimeTypeNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pMimeTypeBuffer -  buffer of Mime Type String, may be NULL
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_storagestream_getmimetype(LibMCData_StorageStream pStorageStream, const LibMCData_uint32 nMimeTypeBufferSize, LibMCData_uint32* pMimeTypeNeededChars, char * pMimeTypeBuffer);

/**
* returns the sha256 checksum of a storage stream.
*
* @param[in] pStorageStream - StorageStream instance.
* @param[in] nSHA2BufferSize - size of the buffer (including trailing 0)
* @param[out] pSHA2NeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pSHA2Buffer -  buffer of SHA1 String, may be NULL
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_storagestream_getsha2(LibMCData_StorageStream pStorageStream, const LibMCData_uint32 nSHA2BufferSize, LibMCData_uint32* pSHA2NeededChars, char * pSHA2Buffer);

/**
* returns the size of a storage stream.
*
* @param[in] pStorageStream - StorageStream instance.
* @param[out] pSize - Size
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_storagestream_getsize(LibMCData_StorageStream pStorageStream, LibMCData_uint64 * pSize);

/**
* returns the content of a storage stream.
*
* @param[in] pStorageStream - StorageStream instance.
* @param[in] nContentBufferSize - Number of elements in buffer
* @param[out] pContentNeededCount - will be filled with the count of the written elements, or needed buffer size.
* @param[out] pContentBuffer - uint8  buffer of Byte Content of the stream
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_storagestream_getcontent(LibMCData_StorageStream pStorageStream, const LibMCData_uint64 nContentBufferSize, LibMCData_uint64* pContentNeededCount, LibMCData_uint8 * pContentBuffer);

/**
* returns direct read access to the storage stream. The callbacks are only valid throughout the existence of the StorageStream instance.
*
* @param[in] pStorageStream - StorageStream instance.
* @param[out] pTheReadCallback - Callback to call for reading a data chunk
* @param[out] pTheSeekCallback - Callback to call for seeking in the stream.
* @param[out] pStreamHandle - Handle of the stream.
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_storagestream_getcallbacks(LibMCData_StorageStream pStorageStream, LibMCData_pvoid * pTheReadCallback, LibMCData_pvoid * pTheSeekCallback, LibMCData_pvoid * pStreamHandle);

/*************************************************************************************************************************
 Class definition for Storage
**************************************************************************************************************************/

/**
* checks if a stream exists and is written to disk.
*
* @param[in] pStorage - Storage instance.
* @param[in] pUUID - UUID of storage stream.
* @param[out] pIsReady - Stream is ready.
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_storage_streamisready(LibMCData_Storage pStorage, const char * pUUID, bool * pIsReady);

/**
* retrieves an existing stream.
*
* @param[in] pStorage - Storage instance.
* @param[in] pUUID - UUID of storage stream.
* @param[out] pStreamInstance - Stream Instance.
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_storage_retrievestream(LibMCData_Storage pStorage, const char * pUUID, LibMCData_StorageStream * pStreamInstance);

/**
* stores a new stream.
*
* @param[in] pStorage - Storage instance.
* @param[in] pUUID - UUID of storage stream. Must be unique and newly generated.
* @param[in] pContextUUID - Context UUID of storage stream. Important for ownership and deletion.
* @param[in] pContextIdentifier - Identifier of the stream. MUST be unique within the given context.
* @param[in] pName - Name Description of the stream.
* @param[in] pMimeType - Mime type of the content. MUST NOT be empty.
* @param[in] nContentBufferSize - Number of elements in buffer
* @param[in] pContentBuffer - uint8 buffer of Data of stream
* @param[in] pUserID - Currently authenticated user
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_storage_storenewstream(LibMCData_Storage pStorage, const char * pUUID, const char * pContextUUID, const char * pContextIdentifier, const char * pName, const char * pMimeType, LibMCData_uint64 nContentBufferSize, const LibMCData_uint8 * pContentBuffer, const char * pUserID);

/**
* starts storing a stream with partial uploads.
*
* @param[in] pStorage - Storage instance.
* @param[in] pUUID - UUID of storage stream. MUST be unique and newly generated.
* @param[in] pContextUUID - Context UUID of storage stream. Important for ownership and deletion.
* @param[in] pContextIdentifier - Identifier of the stream. MUST be unique within the given context.
* @param[in] pName - Name of the stream.
* @param[in] pMimeType - Mime type of the content. MUST NOT be empty.
* @param[in] nSize - Final size of the stream. MUST NOT be 0.
* @param[in] pUserID - Currently authenticated user
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_storage_beginpartialstream(LibMCData_Storage pStorage, const char * pUUID, const char * pContextUUID, const char * pContextIdentifier, const char * pName, const char * pMimeType, LibMCData_uint64 nSize, const char * pUserID);

/**
* stores data in a stream with partial uploads. Uploads should be sequential for optimal performance, but may be in arbitrary order.
*
* @param[in] pStorage - Storage instance.
* @param[in] pUUID - UUID of storage stream. MUST have been created with BeginPartialStream first.
* @param[in] nOffset - Offset in stream to store to. Can be an arbitrary position, but storage MUST NOT override already uploaded data.
* @param[in] nContentBufferSize - Number of elements in buffer
* @param[in] pContentBuffer - uint8 buffer of Data block to store in stream.
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_storage_storepartialstream(LibMCData_Storage pStorage, const char * pUUID, LibMCData_uint64 nOffset, LibMCData_uint64 nContentBufferSize, const LibMCData_uint8 * pContentBuffer);

/**
* Finishes storing a stream.
*
* @param[in] pStorage - Storage instance.
* @param[in] pUUID - UUID of storage stream. MUST have been created with BeginPartialStream first.
* @param[in] pSHA2 - SHA256 of the uploaded data. If given initially, MUST be identical.
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_storage_finishpartialstream(LibMCData_Storage pStorage, const char * pUUID, const char * pSHA2);

/**
* Finishes storing a stream with a 64k-Blockwise calculated Checksum.
*
* @param[in] pStorage - Storage instance.
* @param[in] pUUID - UUID of storage stream. MUST have been created with BeginPartialStream first.
* @param[in] pBlockwiseSHA2 - 64kB hashlist SHA256 checksum of the uploaded data. If given initially, MUST be identical.
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_storage_finishpartialstreamblockwisesha256(LibMCData_Storage pStorage, const char * pUUID, const char * pBlockwiseSHA2);

/**
* starts storing a stream with random write access. Checksums are not required.
*
* @param[in] pStorage - Storage instance.
* @param[in] pUUID - UUID of storage stream. MUST be unique and newly generated.
* @param[in] pContextUUID - Context UUID of storage stream. Important for ownership and deletion.
* @param[in] pContextIdentifier - Identifier of the stream. MUST be unique within the given context.
* @param[in] pName - Name of the stream.
* @param[in] pMimeType - Mime type of the content. MUST NOT be empty.
* @param[in] pUserID - Currently authenticated user
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_storage_beginrandomwritestream(LibMCData_Storage pStorage, const char * pUUID, const char * pContextUUID, const char * pContextIdentifier, const char * pName, const char * pMimeType, const char * pUserID);

/**
* stores data in a stream with random write access. Writing may be in arbitrary order.
*
* @param[in] pStorage - Storage instance.
* @param[in] pUUID - UUID of storage stream. MUST have been created with BeginRandomWriteStream first.
* @param[in] nOffset - Offset in stream to store to. Can be an arbitrary position, but MUST be smaller or equal the current size.
* @param[in] nContentBufferSize - Number of elements in buffer
* @param[in] pContentBuffer - uint8 buffer of Data block to store in stream.
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_storage_storerandomwritestream(LibMCData_Storage pStorage, const char * pUUID, LibMCData_uint64 nOffset, LibMCData_uint64 nContentBufferSize, const LibMCData_uint8 * pContentBuffer);

/**
* Returns the size random write stream .
*
* @param[in] pStorage - Storage instance.
* @param[in] pUUID - UUID of storage stream. MUST have been created with BeginRandomWriteStream first.
* @param[out] pCurrentSize - Current size in bytes.
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_storage_getrandomwritestreamsize(LibMCData_Storage pStorage, const char * pUUID, LibMCData_uint64 * pCurrentSize);

/**
* Finishes storing a random write stream.
*
* @param[in] pStorage - Storage instance.
* @param[in] pUUID - UUID of storage stream. MUST have been created with BeginPartialStream first.
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_storage_finishrandomwritestream(LibMCData_Storage pStorage, const char * pUUID);

/**
* Returns the maximum stream size that the data model allows.
*
* @param[in] pStorage - Storage instance.
* @param[out] pMaxStreamSize - Maximum Stream Size in Bytes.
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_storage_getmaxstreamsize(LibMCData_Storage pStorage, LibMCData_uint64 * pMaxStreamSize);

/**
* Returns if the given content type is an acceptable value.
*
* @param[in] pStorage - Storage instance.
* @param[in] pContentType - Content type string (is taken case-insensitive)
* @param[out] pAccepted - Content type is accepted.
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_storage_contenttypeisaccepted(LibMCData_Storage pStorage, const char * pContentType, bool * pAccepted);

/**
* checks if a stream is an image.
*
* @param[in] pStorage - Storage instance.
* @param[in] pUUID - UUID of storage stream.
* @param[out] pIsImage - Returns if the stream is an image.
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_storage_streamisimage(LibMCData_Storage pStorage, const char * pUUID, bool * pIsImage);

/**
* Creates a new download ticket for a stream and a user.
*
* @param[in] pStorage - Storage instance.
* @param[in] pTicketUUID - UUID of download ticket.
* @param[in] pStreamUUID - UUID of storage stream.
* @param[in] pClientFileName - ClientFileName of the ticket. MUST NOT be empty.
* @param[in] pSessionUUID - UUID of user session.
* @param[in] pUserUUID - UUID of user that created the ticket.
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_storage_createdownloadticket(LibMCData_Storage pStorage, const char * pTicketUUID, const char * pStreamUUID, const char * pClientFileName, const char * pSessionUUID, const char * pUserUUID);

/**
* Returns the details of a download ticket and creates an entry in an access log with time stamp.
*
* @param[in] pStorage - Storage instance.
* @param[in] pTicketUUID - UUID of download ticket.
* @param[in] pIPAddress - IP Address where the request came from.
* @param[in] nStreamUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pStreamUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pStreamUUIDBuffer -  buffer of UUID of storage stream., may be NULL
* @param[in] nClientFileNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pClientFileNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pClientFileNameBuffer -  buffer of ClientFileName of the ticket., may be NULL
* @param[in] nSessionUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pSessionUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pSessionUUIDBuffer -  buffer of UUID of user session., may be NULL
* @param[in] nUserUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pUserUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pUserUUIDBuffer -  buffer of UUID of user that created the ticket., may be NULL
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_storage_requestdownloadticket(LibMCData_Storage pStorage, const char * pTicketUUID, const char * pIPAddress, const LibMCData_uint32 nStreamUUIDBufferSize, LibMCData_uint32* pStreamUUIDNeededChars, char * pStreamUUIDBuffer, const LibMCData_uint32 nClientFileNameBufferSize, LibMCData_uint32* pClientFileNameNeededChars, char * pClientFileNameBuffer, const LibMCData_uint32 nSessionUUIDBufferSize, LibMCData_uint32* pSessionUUIDNeededChars, char * pSessionUUIDBuffer, const LibMCData_uint32 nUserUUIDBufferSize, LibMCData_uint32* pUserUUIDNeededChars, char * pUserUUIDBuffer);

/*************************************************************************************************************************
 Class definition for BuildJobData
**************************************************************************************************************************/

/**
* returns the uuid of a build job data.
*
* @param[in] pBuildJobData - BuildJobData instance.
* @param[in] nUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pUUIDBuffer -  buffer of UUID String, may be NULL
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_buildjobdata_getdatauuid(LibMCData_BuildJobData pBuildJobData, const LibMCData_uint32 nUUIDBufferSize, LibMCData_uint32* pUUIDNeededChars, char * pUUIDBuffer);

/**
* returns the uuid of the parent build job.
*
* @param[in] pBuildJobData - BuildJobData instance.
* @param[in] nUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pUUIDBuffer -  buffer of UUID String, may be NULL
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_buildjobdata_getjobuuid(LibMCData_BuildJobData pBuildJobData, const LibMCData_uint32 nUUIDBufferSize, LibMCData_uint32* pUUIDNeededChars, char * pUUIDBuffer);

/**
* returns the name of the job data.
*
* @param[in] pBuildJobData - BuildJobData instance.
* @param[in] nNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNameBuffer -  buffer of Name String, may be NULL
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_buildjobdata_getname(LibMCData_BuildJobData pBuildJobData, const LibMCData_uint32 nNameBufferSize, LibMCData_uint32* pNameNeededChars, char * pNameBuffer);

/**
* returns the unique context identifier of the job data.
*
* @param[in] pBuildJobData - BuildJobData instance.
* @param[in] nContextIdentifierBufferSize - size of the buffer (including trailing 0)
* @param[out] pContextIdentifierNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pContextIdentifierBuffer -  buffer of Context Identifier String, may be NULL
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_buildjobdata_getcontextidentifier(LibMCData_BuildJobData pBuildJobData, const LibMCData_uint32 nContextIdentifierBufferSize, LibMCData_uint32* pContextIdentifierNeededChars, char * pContextIdentifierBuffer);

/**
* returns the timestamp when the job data was created.
*
* @param[in] pBuildJobData - BuildJobData instance.
* @param[in] nTimestampBufferSize - size of the buffer (including trailing 0)
* @param[out] pTimestampNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pTimestampBuffer -  buffer of Timestamp in ISO8601 UTC format, may be NULL
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_buildjobdata_gettimestamp(LibMCData_BuildJobData pBuildJobData, const LibMCData_uint32 nTimestampBufferSize, LibMCData_uint32* pTimestampNeededChars, char * pTimestampBuffer);

/**
* returns the storage stream of the build.
*
* @param[in] pBuildJobData - BuildJobData instance.
* @param[out] pStreamInstance - Stream Instance.
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_buildjobdata_getstoragestream(LibMCData_BuildJobData pBuildJobData, LibMCData_StorageStream * pStreamInstance);

/**
* returns the checksum of the storage stream of the build.
*
* @param[in] pBuildJobData - BuildJobData instance.
* @param[in] nSHA2BufferSize - size of the buffer (including trailing 0)
* @param[out] pSHA2NeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pSHA2Buffer -  buffer of SHA256 of the storage stream., may be NULL
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_buildjobdata_getstoragestreamsha2(LibMCData_BuildJobData pBuildJobData, const LibMCData_uint32 nSHA2BufferSize, LibMCData_uint32* pSHA2NeededChars, char * pSHA2Buffer);

/**
* returns the size of the storage stream of the build.
*
* @param[in] pBuildJobData - BuildJobData instance.
* @param[out] pSize - size of the storage stream in bytes.
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_buildjobdata_getstoragestreamsize(LibMCData_BuildJobData pBuildJobData, LibMCData_uint64 * pSize);

/**
* returns the data type of the job data.
*
* @param[in] pBuildJobData - BuildJobData instance.
* @param[out] pDataType - Data type of the job data
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_buildjobdata_getdatatype(LibMCData_BuildJobData pBuildJobData, LibMCData::eBuildJobDataType * pDataType);

/**
* returns the data type of the job data as string.
*
* @param[in] pBuildJobData - BuildJobData instance.
* @param[in] nDataTypeBufferSize - size of the buffer (including trailing 0)
* @param[out] pDataTypeNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pDataTypeBuffer -  buffer of Data type of the job data, may be NULL
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_buildjobdata_getdatatypeasstring(LibMCData_BuildJobData pBuildJobData, const LibMCData_uint32 nDataTypeBufferSize, LibMCData_uint32* pDataTypeNeededChars, char * pDataTypeBuffer);

/**
* returns the mime type of a storage stream.
*
* @param[in] pBuildJobData - BuildJobData instance.
* @param[in] nMimeTypeBufferSize - size of the buffer (including trailing 0)
* @param[out] pMimeTypeNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pMimeTypeBuffer -  buffer of Mime Type String, may be NULL
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_buildjobdata_getmimetype(LibMCData_BuildJobData pBuildJobData, const LibMCData_uint32 nMimeTypeBufferSize, LibMCData_uint32* pMimeTypeNeededChars, char * pMimeTypeBuffer);

/*************************************************************************************************************************
 Class definition for BuildJobDataIterator
**************************************************************************************************************************/

/**
* Returns the build job data the iterator points at.
*
* @param[in] pBuildJobDataIterator - BuildJobDataIterator instance.
* @param[out] pCurrentInstance - returns the build job instance.
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_buildjobdataiterator_getcurrentjobdata(LibMCData_BuildJobDataIterator pBuildJobDataIterator, LibMCData_BuildJobData * pCurrentInstance);

/*************************************************************************************************************************
 Class definition for BuildJob
**************************************************************************************************************************/

/**
* returns the uuid of a build job.
*
* @param[in] pBuildJob - BuildJob instance.
* @param[in] nUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pUUIDBuffer -  buffer of UUID String, may be NULL
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_buildjob_getuuid(LibMCData_BuildJob pBuildJob, const LibMCData_uint32 nUUIDBufferSize, LibMCData_uint32* pUUIDNeededChars, char * pUUIDBuffer);

/**
* returns the name of a build job.
*
* @param[in] pBuildJob - BuildJob instance.
* @param[in] nNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNameBuffer -  buffer of Name String, may be NULL
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_buildjob_getname(LibMCData_BuildJob pBuildJob, const LibMCData_uint32 nNameBufferSize, LibMCData_uint32* pNameNeededChars, char * pNameBuffer);

/**
* returns the status of a build job.
*
* @param[in] pBuildJob - BuildJob instance.
* @param[out] pStatus - Status of build job.
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_buildjob_getstatus(LibMCData_BuildJob pBuildJob, LibMCData::eBuildJobStatus * pStatus);

/**
* returns the layer count of a build job.
*
* @param[in] pBuildJob - BuildJob instance.
* @param[out] pLayerCount - Layer Count of build job
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_buildjob_getlayercount(LibMCData_BuildJob pBuildJob, LibMCData_uint32 * pLayerCount);

/**
* returns the timestamp when the job was created.
*
* @param[in] pBuildJob - BuildJob instance.
* @param[in] nTimestampBufferSize - size of the buffer (including trailing 0)
* @param[out] pTimestampNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pTimestampBuffer -  buffer of Timestamp in ISO8601 UTC format, may be NULL
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_buildjob_gettimestamp(LibMCData_BuildJob pBuildJob, const LibMCData_uint32 nTimestampBufferSize, LibMCData_uint32* pTimestampNeededChars, char * pTimestampBuffer);

/**
* returns the storage stream of the build.
*
* @param[in] pBuildJob - BuildJob instance.
* @param[out] pStreamInstance - Stream Instance.
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_buildjob_getstoragestream(LibMCData_BuildJob pBuildJob, LibMCData_StorageStream * pStreamInstance);

/**
* returns the storage stream uuid of the build.
*
* @param[in] pBuildJob - BuildJob instance.
* @param[in] nStreamUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pStreamUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pStreamUUIDBuffer -  buffer of Stream UUID., may be NULL
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_buildjob_getstoragestreamuuid(LibMCData_BuildJob pBuildJob, const LibMCData_uint32 nStreamUUIDBufferSize, LibMCData_uint32* pStreamUUIDNeededChars, char * pStreamUUIDBuffer);

/**
* Starts validation of a build job.
*
* @param[in] pBuildJob - BuildJob instance.
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_buildjob_startvalidating(LibMCData_BuildJob pBuildJob);

/**
* Finishes validation of a build job.
*
* @param[in] pBuildJob - BuildJob instance.
* @param[in] nLayerCount - Layer count
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_buildjob_finishvalidating(LibMCData_BuildJob pBuildJob, LibMCData_uint32 nLayerCount);

/**
* Archives a Job. Job MUST not be opened in the system. Job MUST be of state validated.
*
* @param[in] pBuildJob - BuildJob instance.
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_buildjob_archivejob(LibMCData_BuildJob pBuildJob);

/**
* Unarchives a Job. Job MUST be of state archived.
*
* @param[in] pBuildJob - BuildJob instance.
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_buildjob_unarchivejob(LibMCData_BuildJob pBuildJob);

/**
* Deletes a Job permanently including all referencing data objects. Job MUST be of state archived to succeed.
*
* @param[in] pBuildJob - BuildJob instance.
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_buildjob_deletejob(LibMCData_BuildJob pBuildJob);

/**
* Returns if a job is opened.
*
* @param[in] pBuildJob - BuildJob instance.
* @param[out] pCanBeArchived - returns if the job can be archived.
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_buildjob_jobcanbearchived(LibMCData_BuildJob pBuildJob, bool * pCanBeArchived);

/**
* Adds additional data to the Job. Job MUST be of state validated in order to add job data.
*
* @param[in] pBuildJob - BuildJob instance.
* @param[in] pIdentifier - Unique identifier for the job data.
* @param[in] pName - Name of the job data
* @param[in] pStream - Storage Stream Instance
* @param[in] eDataType - Datatype of Job data
* @param[in] pUserID - Currently authenticated user
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_buildjob_addjobdata(LibMCData_BuildJob pBuildJob, const char * pIdentifier, const char * pName, LibMCData_StorageStream pStream, LibMCData::eBuildJobDataType eDataType, const char * pUserID);

/**
* Retrieves a list of build job data objects, filtered by type.
*
* @param[in] pBuildJob - BuildJob instance.
* @param[in] eDataType - Datatype of Job data.
* @param[out] pIteratorInstance - Build Job Data Iterator Instance.
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_buildjob_listjobdatabytype(LibMCData_BuildJob pBuildJob, LibMCData::eBuildJobDataType eDataType, LibMCData_BuildJobDataIterator * pIteratorInstance);

/**
* Retrieves a list of build job data objects.
*
* @param[in] pBuildJob - BuildJob instance.
* @param[out] pIteratorInstance - Build Job Data Iterator Instance.
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_buildjob_listjobdata(LibMCData_BuildJob pBuildJob, LibMCData_BuildJobDataIterator * pIteratorInstance);

/**
* Retrieves a build job data instance by its uuid.
*
* @param[in] pBuildJob - BuildJob instance.
* @param[in] pDataUUID - Job Data UUID.
* @param[out] pBuildJobData - Build Job Data Instance.
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_buildjob_retrievejobdata(LibMCData_BuildJob pBuildJob, const char * pDataUUID, LibMCData_BuildJobData * pBuildJobData);

/*************************************************************************************************************************
 Class definition for BuildJobIterator
**************************************************************************************************************************/

/**
* Returns the build job the iterator points at.
*
* @param[in] pBuildJobIterator - BuildJobIterator instance.
* @param[out] pCurrentInstance - returns the build job instance.
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_buildjobiterator_getcurrentjob(LibMCData_BuildJobIterator pBuildJobIterator, LibMCData_BuildJob * pCurrentInstance);

/*************************************************************************************************************************
 Class definition for BuildJobHandler
**************************************************************************************************************************/

/**
* Creates a new build job.
*
* @param[in] pBuildJobHandler - BuildJobHandler instance.
* @param[in] pJobUUID - UUID String for the build job. Must be unique and newly generated.
* @param[in] pName - Name String
* @param[in] pUserID - Currently authenticated user
* @param[in] pStorageStreamUUID - Storage stream uuid for the job. Needs not exist yet.
* @param[out] pJobInstance - Build Job Instance.
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_buildjobhandler_createjob(LibMCData_BuildJobHandler pBuildJobHandler, const char * pJobUUID, const char * pName, const char * pUserID, const char * pStorageStreamUUID, LibMCData_BuildJob * pJobInstance);

/**
* Retrieves a job with a specific UUID.
*
* @param[in] pBuildJobHandler - BuildJobHandler instance.
* @param[in] pJobUUID - UUID String for the build job. Must be an existing Job.
* @param[out] pJobInstance - Build Job Instance.
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_buildjobhandler_retrievejob(LibMCData_BuildJobHandler pBuildJobHandler, const char * pJobUUID, LibMCData_BuildJob * pJobInstance);

/**
* Finds the parent build job of a given data uuid. Fails if data does not exist.
*
* @param[in] pBuildJobHandler - BuildJobHandler instance.
* @param[in] pDataUUID - Job Data UUID.
* @param[out] pBuildJobData - Build Job Instance.
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_buildjobhandler_findjobofdata(LibMCData_BuildJobHandler pBuildJobHandler, const char * pDataUUID, LibMCData_BuildJob * pBuildJobData);

/**
* Retrieves a list of build jobs, filtered by status.
*
* @param[in] pBuildJobHandler - BuildJobHandler instance.
* @param[in] eStatus - Job Status to list.
* @param[out] pIteratorInstance - Build Job Iterator Instance.
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_buildjobhandler_listjobsbystatus(LibMCData_BuildJobHandler pBuildJobHandler, LibMCData::eBuildJobStatus eStatus, LibMCData_BuildJobIterator * pIteratorInstance);

/**
* Converts a status enum to a string identifier.
*
* @param[in] pBuildJobHandler - BuildJobHandler instance.
* @param[in] eStatus - Status Enum.
* @param[in] nStringBufferSize - size of the buffer (including trailing 0)
* @param[out] pStringNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pStringBuffer -  buffer of String Identifier., may be NULL
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_buildjobhandler_convertbuildstatustostring(LibMCData_BuildJobHandler pBuildJobHandler, LibMCData::eBuildJobStatus eStatus, const LibMCData_uint32 nStringBufferSize, LibMCData_uint32* pStringNeededChars, char * pStringBuffer);

/**
* Converts a string identifier to a status enum. Case sensitive. Fails if invalid.
*
* @param[in] pBuildJobHandler - BuildJobHandler instance.
* @param[in] pString - String Identifier.
* @param[out] pStatus - Status Enum.
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_buildjobhandler_convertstringtobuildstatus(LibMCData_BuildJobHandler pBuildJobHandler, const char * pString, LibMCData::eBuildJobStatus * pStatus);

/*************************************************************************************************************************
 Class definition for UserList
**************************************************************************************************************************/

/**
* Result Number of Users in the list.
*
* @param[in] pUserList - UserList instance.
* @param[out] pUserCount - Number of users in the list
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_userlist_count(LibMCData_UserList pUserList, LibMCData_uint32 * pUserCount);

/**
* Retrieves all the data of a user in the list. 
*
* @param[in] pUserList - UserList instance.
* @param[in] nUserIndex - Index of users in the list (0-based). Call will fail if invalid index is provided.
* @param[in] nUsernameBufferSize - size of the buffer (including trailing 0)
* @param[out] pUsernameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pUsernameBuffer -  buffer of User name, may be NULL
* @param[in] nUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pUUIDBuffer -  buffer of UUID of the user., may be NULL
* @param[in] nDescriptionBufferSize - size of the buffer (including trailing 0)
* @param[out] pDescriptionNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pDescriptionBuffer -  buffer of Description of the user., may be NULL
* @param[in] nRoleBufferSize - size of the buffer (including trailing 0)
* @param[out] pRoleNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pRoleBuffer -  buffer of Role of the user., may be NULL
* @param[in] nLanguageIdentifierBufferSize - size of the buffer (including trailing 0)
* @param[out] pLanguageIdentifierNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pLanguageIdentifierBuffer -  buffer of LanguageIdentifier of the user., may be NULL
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_userlist_getuserproperties(LibMCData_UserList pUserList, LibMCData_uint32 nUserIndex, const LibMCData_uint32 nUsernameBufferSize, LibMCData_uint32* pUsernameNeededChars, char * pUsernameBuffer, const LibMCData_uint32 nUUIDBufferSize, LibMCData_uint32* pUUIDNeededChars, char * pUUIDBuffer, const LibMCData_uint32 nDescriptionBufferSize, LibMCData_uint32* pDescriptionNeededChars, char * pDescriptionBuffer, const LibMCData_uint32 nRoleBufferSize, LibMCData_uint32* pRoleNeededChars, char * pRoleBuffer, const LibMCData_uint32 nLanguageIdentifierBufferSize, LibMCData_uint32* pLanguageIdentifierNeededChars, char * pLanguageIdentifierBuffer);

/*************************************************************************************************************************
 Class definition for LoginHandler
**************************************************************************************************************************/

/**
* Checks if a user exist.
*
* @param[in] pLoginHandler - LoginHandler instance.
* @param[in] pUsername - User name
* @param[out] pUserExists - Flag if users exists
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_loginhandler_userexists(LibMCData_LoginHandler pLoginHandler, const char * pUsername, bool * pUserExists);

/**
* Checks if a user UUID exist.
*
* @param[in] pLoginHandler - LoginHandler instance.
* @param[in] pUUID - UUID of the user.
* @param[out] pUserExists - Flag if users exists
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_loginhandler_useruuidexists(LibMCData_LoginHandler pLoginHandler, const char * pUUID, bool * pUserExists);

/**
* Retrieves login relevant users data. Fails if user does not exist.
*
* @param[in] pLoginHandler - LoginHandler instance.
* @param[in] pUsername - User name
* @param[in] nSaltBufferSize - size of the buffer (including trailing 0)
* @param[out] pSaltNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pSaltBuffer -  buffer of Salt of the user., may be NULL
* @param[in] nHashedPasswordBufferSize - size of the buffer (including trailing 0)
* @param[out] pHashedPasswordNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pHashedPasswordBuffer -  buffer of Hashed Password., may be NULL
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_loginhandler_getuserdetails(LibMCData_LoginHandler pLoginHandler, const char * pUsername, const LibMCData_uint32 nSaltBufferSize, LibMCData_uint32* pSaltNeededChars, char * pSaltBuffer, const LibMCData_uint32 nHashedPasswordBufferSize, LibMCData_uint32* pHashedPasswordNeededChars, char * pHashedPasswordBuffer);

/**
* Retrieves all users data with one Transaction. Fails if user does not exist.
*
* @param[in] pLoginHandler - LoginHandler instance.
* @param[in] pUsername - User name
* @param[in] nUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pUUIDBuffer -  buffer of UUID of the user., may be NULL
* @param[in] nDescriptionBufferSize - size of the buffer (including trailing 0)
* @param[out] pDescriptionNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pDescriptionBuffer -  buffer of Description of the user., may be NULL
* @param[in] nRoleBufferSize - size of the buffer (including trailing 0)
* @param[out] pRoleNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pRoleBuffer -  buffer of Role of the user., may be NULL
* @param[in] nLanguageIdentifierBufferSize - size of the buffer (including trailing 0)
* @param[out] pLanguageIdentifierNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pLanguageIdentifierBuffer -  buffer of LanguageIdentifier of the user., may be NULL
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_loginhandler_getuserproperties(LibMCData_LoginHandler pLoginHandler, const char * pUsername, const LibMCData_uint32 nUUIDBufferSize, LibMCData_uint32* pUUIDNeededChars, char * pUUIDBuffer, const LibMCData_uint32 nDescriptionBufferSize, LibMCData_uint32* pDescriptionNeededChars, char * pDescriptionBuffer, const LibMCData_uint32 nRoleBufferSize, LibMCData_uint32* pRoleNeededChars, char * pRoleBuffer, const LibMCData_uint32 nLanguageIdentifierBufferSize, LibMCData_uint32* pLanguageIdentifierNeededChars, char * pLanguageIdentifierBuffer);

/**
* Retrieves all users data with one Transaction. Fails if user does not exist.
*
* @param[in] pLoginHandler - LoginHandler instance.
* @param[in] pUUID - UUID of the user.
* @param[in] nUsernameBufferSize - size of the buffer (including trailing 0)
* @param[out] pUsernameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pUsernameBuffer -  buffer of User name, may be NULL
* @param[in] nDescriptionBufferSize - size of the buffer (including trailing 0)
* @param[out] pDescriptionNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pDescriptionBuffer -  buffer of Description of the user., may be NULL
* @param[in] nRoleBufferSize - size of the buffer (including trailing 0)
* @param[out] pRoleNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pRoleBuffer -  buffer of Role of the user., may be NULL
* @param[in] nLanguageIdentifierBufferSize - size of the buffer (including trailing 0)
* @param[out] pLanguageIdentifierNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pLanguageIdentifierBuffer -  buffer of LanguageIdentifier of the user., may be NULL
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_loginhandler_getuserpropertiesbyuuid(LibMCData_LoginHandler pLoginHandler, const char * pUUID, const LibMCData_uint32 nUsernameBufferSize, LibMCData_uint32* pUsernameNeededChars, char * pUsernameBuffer, const LibMCData_uint32 nDescriptionBufferSize, LibMCData_uint32* pDescriptionNeededChars, char * pDescriptionBuffer, const LibMCData_uint32 nRoleBufferSize, LibMCData_uint32* pRoleNeededChars, char * pRoleBuffer, const LibMCData_uint32 nLanguageIdentifierBufferSize, LibMCData_uint32* pLanguageIdentifierNeededChars, char * pLanguageIdentifierBuffer);

/**
* Retrieves a users name with a given UUID. Fails if user does not exist.
*
* @param[in] pLoginHandler - LoginHandler instance.
* @param[in] pUUID - UUID of the user.
* @param[in] nUsernameBufferSize - size of the buffer (including trailing 0)
* @param[out] pUsernameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pUsernameBuffer -  buffer of User name, may be NULL
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_loginhandler_getusernamebyuuid(LibMCData_LoginHandler pLoginHandler, const char * pUUID, const LibMCData_uint32 nUsernameBufferSize, LibMCData_uint32* pUsernameNeededChars, char * pUsernameBuffer);

/**
* Retrieves a users UUID. Fails if user does not exist.
*
* @param[in] pLoginHandler - LoginHandler instance.
* @param[in] pUsername - User name
* @param[in] nUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pUUIDBuffer -  buffer of UUID of the user., may be NULL
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_loginhandler_getuseruuid(LibMCData_LoginHandler pLoginHandler, const char * pUsername, const LibMCData_uint32 nUUIDBufferSize, LibMCData_uint32* pUUIDNeededChars, char * pUUIDBuffer);

/**
* Retrieves a users description. Fails if user does not exist.
*
* @param[in] pLoginHandler - LoginHandler instance.
* @param[in] pUsername - User name
* @param[in] nDescriptionBufferSize - size of the buffer (including trailing 0)
* @param[out] pDescriptionNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pDescriptionBuffer -  buffer of Description of the user., may be NULL
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_loginhandler_getuserdescription(LibMCData_LoginHandler pLoginHandler, const char * pUsername, const LibMCData_uint32 nDescriptionBufferSize, LibMCData_uint32* pDescriptionNeededChars, char * pDescriptionBuffer);

/**
* Retrieves a users description by the user UUID. Fails if user does not exist.
*
* @param[in] pLoginHandler - LoginHandler instance.
* @param[in] pUUID - UUID of the user.
* @param[in] nDescriptionBufferSize - size of the buffer (including trailing 0)
* @param[out] pDescriptionNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pDescriptionBuffer -  buffer of Description of the user., may be NULL
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_loginhandler_getuserdescriptionbyuuid(LibMCData_LoginHandler pLoginHandler, const char * pUUID, const LibMCData_uint32 nDescriptionBufferSize, LibMCData_uint32* pDescriptionNeededChars, char * pDescriptionBuffer);

/**
* Retrieves a users role. Fails if user does not exist.
*
* @param[in] pLoginHandler - LoginHandler instance.
* @param[in] pUsername - User name
* @param[in] nRoleBufferSize - size of the buffer (including trailing 0)
* @param[out] pRoleNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pRoleBuffer -  buffer of Role of the user., may be NULL
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_loginhandler_getuserrole(LibMCData_LoginHandler pLoginHandler, const char * pUsername, const LibMCData_uint32 nRoleBufferSize, LibMCData_uint32* pRoleNeededChars, char * pRoleBuffer);

/**
* Retrieves a users role by the user UUID. Fails if user does not exist.
*
* @param[in] pLoginHandler - LoginHandler instance.
* @param[in] pUUID - UUID of the user.
* @param[in] nRoleBufferSize - size of the buffer (including trailing 0)
* @param[out] pRoleNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pRoleBuffer -  buffer of Role of the user., may be NULL
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_loginhandler_getuserrolebyuuid(LibMCData_LoginHandler pLoginHandler, const char * pUUID, const LibMCData_uint32 nRoleBufferSize, LibMCData_uint32* pRoleNeededChars, char * pRoleBuffer);

/**
* Retrieves a users language preference. Fails if user does not exist.
*
* @param[in] pLoginHandler - LoginHandler instance.
* @param[in] pUsername - User name
* @param[in] nLanguageIdentifierBufferSize - size of the buffer (including trailing 0)
* @param[out] pLanguageIdentifierNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pLanguageIdentifierBuffer -  buffer of Language identifier of the user., may be NULL
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_loginhandler_getuserlanguage(LibMCData_LoginHandler pLoginHandler, const char * pUsername, const LibMCData_uint32 nLanguageIdentifierBufferSize, LibMCData_uint32* pLanguageIdentifierNeededChars, char * pLanguageIdentifierBuffer);

/**
* Retrieves a users language preference by user UUID. Fails if user does not exist.
*
* @param[in] pLoginHandler - LoginHandler instance.
* @param[in] pUUID - UUID of the user.
* @param[in] nLanguageIdentifierBufferSize - size of the buffer (including trailing 0)
* @param[out] pLanguageIdentifierNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pLanguageIdentifierBuffer -  buffer of Language identifier of the user., may be NULL
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_loginhandler_getuserlanguagebyuuid(LibMCData_LoginHandler pLoginHandler, const char * pUUID, const LibMCData_uint32 nLanguageIdentifierBufferSize, LibMCData_uint32* pLanguageIdentifierNeededChars, char * pLanguageIdentifierBuffer);

/**
* Creates a new user. Fails if the user already exists.
*
* @param[in] pLoginHandler - LoginHandler instance.
* @param[in] pUsername - User name to create. MUST be alphanumeric and not empty.
* @param[in] pRole - Role of the new user. MUST NOT be empty.
* @param[in] pSalt - Salt of the user. MUST NOT be empty. MUST be an SHA256 string.
* @param[in] pHashedPassword - Hashed Password. MUST be an SHA256 string. HashedPassword MUST NOT be the hash some of the given salt.
* @param[in] pDescription - Description of the new user.
* @param[in] nUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pUUIDBuffer -  buffer of UUID of the new user., may be NULL
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_loginhandler_createuser(LibMCData_LoginHandler pLoginHandler, const char * pUsername, const char * pRole, const char * pSalt, const char * pHashedPassword, const char * pDescription, const LibMCData_uint32 nUUIDBufferSize, LibMCData_uint32* pUUIDNeededChars, char * pUUIDBuffer);

/**
* Updates a users language preference. Fails if user does not exist.
*
* @param[in] pLoginHandler - LoginHandler instance.
* @param[in] pUsername - User name
* @param[in] pLanguageIdentifier - New Language identifier of the user.
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_loginhandler_setuserlanguage(LibMCData_LoginHandler pLoginHandler, const char * pUsername, const char * pLanguageIdentifier);

/**
* Updates a users role. Fails if user does not exist.
*
* @param[in] pLoginHandler - LoginHandler instance.
* @param[in] pUsername - User name
* @param[in] pRole - New Role identifier of the user.
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_loginhandler_setuserrole(LibMCData_LoginHandler pLoginHandler, const char * pUsername, const char * pRole);

/**
* Updates a users description. Fails if user does not exist.
*
* @param[in] pLoginHandler - LoginHandler instance.
* @param[in] pUsername - User name
* @param[in] pDescription - New Description of the user.
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_loginhandler_setuserdescription(LibMCData_LoginHandler pLoginHandler, const char * pUsername, const char * pDescription);

/**
* Updates a users password. Fails if user does not exist.
*
* @param[in] pLoginHandler - LoginHandler instance.
* @param[in] pUsername - User name
* @param[in] pSalt - Salt of the user. MUST NOT be empty. MUST be an SHA256 string.
* @param[in] pHashedPassword - Hashed Password. MUST be an SHA256 string. HashedPassword MUST NOT be the hash some of the given salt.
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_loginhandler_setuserpassword(LibMCData_LoginHandler pLoginHandler, const char * pUsername, const char * pSalt, const char * pHashedPassword);

/**
* Updates a users language preference. Fails if user does not exist.
*
* @param[in] pLoginHandler - LoginHandler instance.
* @param[in] pUUID - UUID of the user.
* @param[in] pLanguageIdentifier - New Language identifier of the user.
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_loginhandler_setuserlanguagebyuuid(LibMCData_LoginHandler pLoginHandler, const char * pUUID, const char * pLanguageIdentifier);

/**
* Updates a users role. Fails if user does not exist.
*
* @param[in] pLoginHandler - LoginHandler instance.
* @param[in] pUUID - UUID of the user.
* @param[in] pRole - New Role identifier of the user.
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_loginhandler_setuserrolebyuuid(LibMCData_LoginHandler pLoginHandler, const char * pUUID, const char * pRole);

/**
* Updates a users description. Fails if user does not exist.
*
* @param[in] pLoginHandler - LoginHandler instance.
* @param[in] pUUID - UUID of the user.
* @param[in] pDescription - New Language identifier of the user.
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_loginhandler_setuserdescriptionbyuuid(LibMCData_LoginHandler pLoginHandler, const char * pUUID, const char * pDescription);

/**
* Updates a users password. Fails if user does not exist.
*
* @param[in] pLoginHandler - LoginHandler instance.
* @param[in] pUUID - UUID of the user.
* @param[in] pSalt - Salt of the user. MUST NOT be empty. MUST be an SHA256 string.
* @param[in] pHashedPassword - Hashed Password. MUST be an SHA256 string. HashedPassword MUST NOT be the hash some of the given salt.
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_loginhandler_setuserpasswordbyuuid(LibMCData_LoginHandler pLoginHandler, const char * pUUID, const char * pSalt, const char * pHashedPassword);

/**
* Returns a list of active users.
*
* @param[in] pLoginHandler - LoginHandler instance.
* @param[out] pActiveUsers - New instance of active users.
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_loginhandler_getactiveusers(LibMCData_LoginHandler pLoginHandler, LibMCData_UserList * pActiveUsers);

/*************************************************************************************************************************
 Class definition for PersistencyHandler
**************************************************************************************************************************/

/**
* Retrieves if a persistent parameter has been stored.
*
* @param[in] pPersistencyHandler - PersistencyHandler instance.
* @param[in] pUUID - UUID of the parameter
* @param[out] pParameterExists - returns if parameter exists.
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_persistencyhandler_haspersistentparameter(LibMCData_PersistencyHandler pPersistencyHandler, const char * pUUID, bool * pParameterExists);

/**
* Retrieves details of a persistent parameter. Fails if parameter does not exist.
*
* @param[in] pPersistencyHandler - PersistencyHandler instance.
* @param[in] pUUID - UUID of the parameter
* @param[in] nNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNameBuffer -  buffer of Returns name of the parameter, may be NULL
* @param[out] pDataType - Returns data type of the parameter
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_persistencyhandler_getpersistentparameterdetails(LibMCData_PersistencyHandler pPersistencyHandler, const char * pUUID, const LibMCData_uint32 nNameBufferSize, LibMCData_uint32* pNameNeededChars, char * pNameBuffer, LibMCData::eParameterDataType * pDataType);

/**
* Removes a persistent parameter from database. Does nothing if parameter does not exist.
*
* @param[in] pPersistencyHandler - PersistencyHandler instance.
* @param[in] pUUID - UUID of the parameter
* @param[out] pParameterExisted - returns if parameter existed.
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_persistencyhandler_deletepersistentparameter(LibMCData_PersistencyHandler pPersistencyHandler, const char * pUUID, bool * pParameterExisted);

/**
* Stores a persistent parameter in the database. Creates a new parameter if not existing.
*
* @param[in] pPersistencyHandler - PersistencyHandler instance.
* @param[in] pUUID - UUID of the parameter
* @param[in] pName - Name of the parameter. If parameter exists, MUST be the same as the stored parameter name.
* @param[in] eDataType - Data type of the parameter. If parameter exists, MUST be the same as the stored parameter data type.
* @param[in] pValue - Value of the parameter. MUST be of appropriate type.
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_persistencyhandler_storepersistentparameter(LibMCData_PersistencyHandler pPersistencyHandler, const char * pUUID, const char * pName, LibMCData::eParameterDataType eDataType, const char * pValue);

/**
* Stores a persistent parameter in the database. Creates a new parameter if not existing.
*
* @param[in] pPersistencyHandler - PersistencyHandler instance.
* @param[in] pUUID - UUID of the parameter
* @param[in] pName - Name of the parameter. If parameter exists, MUST be the same as the stored parameter name.
* @param[in] pValue - Value of the parameter.
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_persistencyhandler_storepersistentstringparameter(LibMCData_PersistencyHandler pPersistencyHandler, const char * pUUID, const char * pName, const char * pValue);

/**
* Stores a persistent parameter in the database. Creates a new parameter if not existing.
*
* @param[in] pPersistencyHandler - PersistencyHandler instance.
* @param[in] pUUID - UUID of the parameter
* @param[in] pName - Name of the parameter. If parameter exists, MUST be the same as the stored parameter name.
* @param[in] pValue - Value of the parameter. MUST be of appropriate type.
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_persistencyhandler_storepersistentuuidparameter(LibMCData_PersistencyHandler pPersistencyHandler, const char * pUUID, const char * pName, const char * pValue);

/**
* Stores a persistent parameter in the database. Creates a new parameter if not existing.
*
* @param[in] pPersistencyHandler - PersistencyHandler instance.
* @param[in] pUUID - UUID of the parameter
* @param[in] pName - Name of the parameter. If parameter exists, MUST be the same as the stored parameter name.
* @param[in] dValue - Value of the parameter.
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_persistencyhandler_storepersistentdoubleparameter(LibMCData_PersistencyHandler pPersistencyHandler, const char * pUUID, const char * pName, LibMCData_double dValue);

/**
* Stores a persistent parameter in the database. Creates a new parameter if not existing.
*
* @param[in] pPersistencyHandler - PersistencyHandler instance.
* @param[in] pUUID - UUID of the parameter
* @param[in] pName - Name of the parameter. If parameter exists, MUST be the same as the stored parameter name.
* @param[in] nValue - Value of the parameter.
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_persistencyhandler_storepersistentintegerparameter(LibMCData_PersistencyHandler pPersistencyHandler, const char * pUUID, const char * pName, LibMCData_int64 nValue);

/**
* Stores a persistent parameter in the database. Creates a new parameter if not existing.
*
* @param[in] pPersistencyHandler - PersistencyHandler instance.
* @param[in] pUUID - UUID of the parameter
* @param[in] pName - Name of the parameter. If parameter exists, MUST be the same as the stored parameter name.
* @param[in] bValue - Value of the parameter.
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_persistencyhandler_storepersistentboolparameter(LibMCData_PersistencyHandler pPersistencyHandler, const char * pUUID, const char * pName, bool bValue);

/**
* Retrieves a persistent parameter in the database. Fails if not existing or invalid type.
*
* @param[in] pPersistencyHandler - PersistencyHandler instance.
* @param[in] pUUID - UUID of the parameter
* @param[in] nValueBufferSize - size of the buffer (including trailing 0)
* @param[out] pValueNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pValueBuffer -  buffer of Value of the parameter., may be NULL
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_persistencyhandler_retrievepersistentstringparameter(LibMCData_PersistencyHandler pPersistencyHandler, const char * pUUID, const LibMCData_uint32 nValueBufferSize, LibMCData_uint32* pValueNeededChars, char * pValueBuffer);

/**
* Retrieves a persistent parameter in the database. Fails if not existing or invalid type.
*
* @param[in] pPersistencyHandler - PersistencyHandler instance.
* @param[in] pUUID - UUID of the parameter
* @param[in] nValueBufferSize - size of the buffer (including trailing 0)
* @param[out] pValueNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pValueBuffer -  buffer of Value of the parameter., may be NULL
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_persistencyhandler_retrievepersistentuuidparameter(LibMCData_PersistencyHandler pPersistencyHandler, const char * pUUID, const LibMCData_uint32 nValueBufferSize, LibMCData_uint32* pValueNeededChars, char * pValueBuffer);

/**
* Retrieves a persistent parameter in the database. Fails if not existing or invalid type.
*
* @param[in] pPersistencyHandler - PersistencyHandler instance.
* @param[in] pUUID - UUID of the parameter
* @param[out] pValue - Value of the parameter.
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_persistencyhandler_retrievepersistentdoubleparameter(LibMCData_PersistencyHandler pPersistencyHandler, const char * pUUID, LibMCData_double * pValue);

/**
* Retrieves a persistent parameter in the database. Fails if not existing or invalid type.
*
* @param[in] pPersistencyHandler - PersistencyHandler instance.
* @param[in] pUUID - UUID of the parameter
* @param[out] pValue - Value of the parameter.
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_persistencyhandler_retrievepersistentintegerparameter(LibMCData_PersistencyHandler pPersistencyHandler, const char * pUUID, LibMCData_int64 * pValue);

/**
* Retrieves a persistent parameter in the database. Fails if not existing or invalid type.
*
* @param[in] pPersistencyHandler - PersistencyHandler instance.
* @param[in] pUUID - UUID of the parameter
* @param[out] pValue - Value of the parameter.
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_persistencyhandler_retrievepersistentboolparameter(LibMCData_PersistencyHandler pPersistencyHandler, const char * pUUID, bool * pValue);

/*************************************************************************************************************************
 Class definition for InstallationInformation
**************************************************************************************************************************/

/**
* Returns the installation UUID.
*
* @param[in] pInstallationInformation - InstallationInformation instance.
* @param[in] nInstallationUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pInstallationUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pInstallationUUIDBuffer -  buffer of Installation UUID. Public value to document which installation was used for something., may be NULL
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_installationinformation_getinstallationuuid(LibMCData_InstallationInformation pInstallationInformation, const LibMCData_uint32 nInstallationUUIDBufferSize, LibMCData_uint32* pInstallationUUIDNeededChars, char * pInstallationUUIDBuffer);

/**
* Returns the installation Secret.
*
* @param[in] pInstallationInformation - InstallationInformation instance.
* @param[in] nInstallationSecretBufferSize - size of the buffer (including trailing 0)
* @param[out] pInstallationSecretNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pInstallationSecretBuffer -  buffer of Secret SHA256 key for seeding external-facing pseudo-randomness. MUST NOT be given outside of the application., may be NULL
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_installationinformation_getinstallationsecret(LibMCData_InstallationInformation pInstallationInformation, const LibMCData_uint32 nInstallationSecretBufferSize, LibMCData_uint32* pInstallationSecretNeededChars, char * pInstallationSecretBuffer);

/**
* Returns a custom base temp directory. An empty string defaults to the system temp directory.
*
* @param[in] pInstallationInformation - InstallationInformation instance.
* @param[in] nTempDirectoryBufferSize - size of the buffer (including trailing 0)
* @param[out] pTempDirectoryNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pTempDirectoryBuffer -  buffer of Temp directory path., may be NULL
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_installationinformation_getbasetempdirectory(LibMCData_InstallationInformation pInstallationInformation, const LibMCData_uint32 nTempDirectoryBufferSize, LibMCData_uint32* pTempDirectoryNeededChars, char * pTempDirectoryBuffer);

/*************************************************************************************************************************
 Class definition for DataModel
**************************************************************************************************************************/

/**
* initializes the database connection.
*
* @param[in] pDataModel - DataModel instance.
* @param[in] pDataDirectory - Directory that stores the data.
* @param[in] eDataBaseType - Type of database.
* @param[in] pConnectionString - Connection string.
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_datamodel_initialisedatabase(LibMCData_DataModel pDataModel, const char * pDataDirectory, LibMCData::eDataBaseType eDataBaseType, const char * pConnectionString);

/**
* returns the linear data model version.
*
* @param[in] pDataModel - DataModel instance.
* @param[out] pVersion - Data model version.
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_datamodel_getdatamodelversion(LibMCData_DataModel pDataModel, LibMCData_uint32 * pVersion);

/**
* DEPRECIATED. Only used for backwards compatibility. NEVER USE because of thread safety issues.. Use GetInstallationInformationObject instead.
*
* @param[in] pDataModel - DataModel instance.
* @param[in] nDEPRECIATEDInstallationUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pDEPRECIATEDInstallationUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pDEPRECIATEDInstallationUUIDBuffer -  buffer of DEPRECIATED Installation UUID. Public value to document which installation was used for something., may be NULL
* @param[in] nDEPRECIATEDInstallationSecretBufferSize - size of the buffer (including trailing 0)
* @param[out] pDEPRECIATEDInstallationSecretNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pDEPRECIATEDInstallationSecretBuffer -  buffer of DEPRECIATED Secret SHA256 key for seeding external-facing pseudo-randomness. MUST NOT be given outside of the application., may be NULL
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_datamodel_getinstallationinformation(LibMCData_DataModel pDataModel, const LibMCData_uint32 nDEPRECIATEDInstallationUUIDBufferSize, LibMCData_uint32* pDEPRECIATEDInstallationUUIDNeededChars, char * pDEPRECIATEDInstallationUUIDBuffer, const LibMCData_uint32 nDEPRECIATEDInstallationSecretBufferSize, LibMCData_uint32* pDEPRECIATEDInstallationSecretNeededChars, char * pDEPRECIATEDInstallationSecretBuffer);

/**
* returns unique identifiers for the current installation. MUST be used instead of depreciated functionality.
*
* @param[in] pDataModel - DataModel instance.
* @param[out] pInstallationInformation - Installation information instance.
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_datamodel_getinstallationinformationobject(LibMCData_DataModel pDataModel, LibMCData_InstallationInformation * pInstallationInformation);

/**
* creates a storage access class.
*
* @param[in] pDataModel - DataModel instance.
* @param[out] pStorage - Storage class instance.
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_datamodel_createstorage(LibMCData_DataModel pDataModel, LibMCData_Storage * pStorage);

/**
* creates a build job access class.
*
* @param[in] pDataModel - DataModel instance.
* @param[out] pBuildJobHandler - BuildJobHandler class instance.
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_datamodel_createbuildjobhandler(LibMCData_DataModel pDataModel, LibMCData_BuildJobHandler * pBuildJobHandler);

/**
* creates a global log session access class.
*
* @param[in] pDataModel - DataModel instance.
* @param[out] pLogSession - LogSession class instance.
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_datamodel_createnewlogsession(LibMCData_DataModel pDataModel, LibMCData_LogSession * pLogSession);

/**
* creates a global journal session access class.
*
* @param[in] pDataModel - DataModel instance.
* @param[out] pJournalSession - JournalSession class instance.
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_datamodel_createjournalsession(LibMCData_DataModel pDataModel, LibMCData_JournalSession * pJournalSession);

/**
* creates a global alert session access class.
*
* @param[in] pDataModel - DataModel instance.
* @param[out] pAlertSession - AlertSession class instance.
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_datamodel_createalertsession(LibMCData_DataModel pDataModel, LibMCData_AlertSession * pAlertSession);

/**
* creates a login handler instance.
*
* @param[in] pDataModel - DataModel instance.
* @param[out] pLoginHandler - LoginHandler instance.
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_datamodel_createloginhandler(LibMCData_DataModel pDataModel, LibMCData_LoginHandler * pLoginHandler);

/**
* creates a persistency handler instance.
*
* @param[in] pDataModel - DataModel instance.
* @param[out] pPersistencyHandler - PersistencyHandler instance.
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_datamodel_createpersistencyhandler(LibMCData_DataModel pDataModel, LibMCData_PersistencyHandler * pPersistencyHandler);

/**
* Sets a custom base temp directory. An empty string defaults to the system temp directory.
*
* @param[in] pDataModel - DataModel instance.
* @param[in] pTempDirectory - Temp directory path to use. SHOULD be an absolute path, if not empty. Directory MUST exist, if not empty.
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_datamodel_setbasetempdirectory(LibMCData_DataModel pDataModel, const char * pTempDirectory);

/**
* DEPRECIATED. Only used for backwards compatibility. NEVER USE because of thread safety issues.. USE GetInstallationInformationObject instead.
*
* @param[in] pDataModel - DataModel instance.
* @param[in] nTempDirectoryBufferSize - size of the buffer (including trailing 0)
* @param[out] pTempDirectoryNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pTempDirectoryBuffer -  buffer of Temp directory path., may be NULL
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_datamodel_getbasetempdirectory(LibMCData_DataModel pDataModel, const LibMCData_uint32 nTempDirectoryBufferSize, LibMCData_uint32* pTempDirectoryNeededChars, char * pTempDirectoryBuffer);

/**
* Sets a log callback to be used for the execution.
*
* @param[in] pDataModel - DataModel instance.
* @param[in] pLogCallback - LogCallback.
* @param[in] pUserData - Userdata that is passed to the callback function
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_datamodel_setlogcallback(LibMCData_DataModel pDataModel, LibMCData::LogCallback pLogCallback, LibMCData_pvoid pUserData);

/**
* Resets the log callback to be used for the execution.
*
* @param[in] pDataModel - DataModel instance.
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_datamodel_clearlogcallback(LibMCData_DataModel pDataModel);

/**
* Returns if a log callback has been set.
*
* @param[in] pDataModel - DataModel instance.
* @param[out] pHasCallback - Flag if log callback has been set.
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_datamodel_haslogcallback(LibMCData_DataModel pDataModel, bool * pHasCallback);

/**
* Triggers the log callback. Fails if no log callback has been set.
*
* @param[in] pDataModel - DataModel instance.
* @param[in] pLogMessage - Log message to be logged.
* @param[in] pSubSystem - SubSystem of Log Message.
* @param[in] eLogLevel - Log Level to be used.
* @param[in] pTimestamp - Timestamp of the log message.
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_datamodel_triggerlogcallback(LibMCData_DataModel pDataModel, const char * pLogMessage, const char * pSubSystem, LibMCData::eLogLevel eLogLevel, const char * pTimestamp);

/*************************************************************************************************************************
 Global functions
**************************************************************************************************************************/

/**
* retrieves the binary version of this library.
*
* @param[out] pMajor - returns the major version of this library
* @param[out] pMinor - returns the minor version of this library
* @param[out] pMicro - returns the micro version of this library
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_getversion(LibMCData_uint32 * pMajor, LibMCData_uint32 * pMinor, LibMCData_uint32 * pMicro);

/**
* Returns the last error recorded on this object
*
* @param[in] pInstance - Instance Handle
* @param[in] nErrorMessageBufferSize - size of the buffer (including trailing 0)
* @param[out] pErrorMessageNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pErrorMessageBuffer -  buffer of Message of the last error, may be NULL
* @param[out] pHasError - Is there a last error to query
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_getlasterror(LibMCData_Base pInstance, const LibMCData_uint32 nErrorMessageBufferSize, LibMCData_uint32* pErrorMessageNeededChars, char * pErrorMessageBuffer, bool * pHasError);

/**
* Releases shared ownership of an Instance
*
* @param[in] pInstance - Instance Handle
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_releaseinstance(LibMCData_Base pInstance);

/**
* Acquires shared ownership of an Instance
*
* @param[in] pInstance - Instance Handle
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_acquireinstance(LibMCData_Base pInstance);

/**
* Returns the address of the SymbolLookupMethod
*
* @param[out] pSymbolLookupMethod - Address of the SymbolAddressMethod
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_getsymbollookupmethod(LibMCData_pvoid * pSymbolLookupMethod);

/**
* Creates and initializes new MC DataModel Instance.
*
* @param[out] pInstance - New DataModel instance
* @return error code or 0 (success)
*/
LIBMCDATA_DECLSPEC LibMCDataResult libmcdata_createdatamodelinstance(LibMCData_DataModel * pInstance);

#ifdef __cplusplus
}
#endif

#endif // __LIBMCDATA_HEADER_CPP

