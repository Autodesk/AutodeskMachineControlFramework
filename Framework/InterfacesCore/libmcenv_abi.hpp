/*++

Copyright (C) 2020 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.8.0-develop.

Abstract: This is an autogenerated C++-Header file in order to allow an easy
 use of MC Environment Interface

Interface version: 1.0.0

*/

#ifndef __LIBMCENV_HEADER_CPP
#define __LIBMCENV_HEADER_CPP

#ifdef __LIBMCENV_EXPORTS
#ifdef _WIN32
#define LIBMCENV_DECLSPEC __declspec (dllexport)
#else // _WIN32
#define LIBMCENV_DECLSPEC __attribute__((visibility("default")))
#endif // _WIN32
#else // __LIBMCENV_EXPORTS
#define LIBMCENV_DECLSPEC
#endif // __LIBMCENV_EXPORTS

#include "libmcenv_types.hpp"


#ifdef __cplusplus
extern "C" {
#endif

/*************************************************************************************************************************
 Class definition for Base
**************************************************************************************************************************/

/*************************************************************************************************************************
 Class definition for Iterator
**************************************************************************************************************************/

/**
* Iterates to the next object in the list.
*
* @param[in] pIterator - Iterator instance.
* @param[out] pHasNext - Iterates to the next object in the list.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_iterator_movenext(LibMCEnv_Iterator pIterator, bool * pHasNext);

/**
* Iterates to the previous object in the list.
*
* @param[in] pIterator - Iterator instance.
* @param[out] pHasPrevious - Iterates to the previous object in the list.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_iterator_moveprevious(LibMCEnv_Iterator pIterator, bool * pHasPrevious);

/**
* Returns the object the iterator points at.
*
* @param[in] pIterator - Iterator instance.
* @param[out] pInstance - returns the object instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_iterator_getcurrent(LibMCEnv_Iterator pIterator, LibMCEnv_Base * pInstance);

/**
* Creates a new object iterator with the same object list.
*
* @param[in] pIterator - Iterator instance.
* @param[out] pOutIterator - returns the cloned Iterator instance
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_iterator_clone(LibMCEnv_Iterator pIterator, LibMCEnv_Iterator * pOutIterator);

/**
* Returns the number of resoucres the iterator captures.
*
* @param[in] pIterator - Iterator instance.
* @param[out] pCount - returns the number of objects the iterator captures.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_iterator_count(LibMCEnv_Iterator pIterator, LibMCEnv_uint64 * pCount);

/*************************************************************************************************************************
 Class definition for TestEnvironment
**************************************************************************************************************************/

/**
* Write output file to test directory.
*
* @param[in] pTestEnvironment - TestEnvironment instance.
* @param[in] pOutputName - Output file name. Only alphanumeric characters, point, underscore and hypen are allowed.
* @param[in] nDataBufferSize - Number of elements in buffer
* @param[in] pDataBuffer - uint8 buffer of Test data to write into output directory.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_testenvironment_writetestoutput(LibMCEnv_TestEnvironment pTestEnvironment, const char * pOutputName, LibMCEnv_uint64 nDataBufferSize, const LibMCEnv_uint8 * pDataBuffer);

/*************************************************************************************************************************
 Class definition for CryptoContext
**************************************************************************************************************************/

/**
* Calculates SHA256 from a string. Fails if string is empty.
*
* @param[in] pCryptoContext - CryptoContext instance.
* @param[in] pValue - Input value.
* @param[in] nSHA256ValueBufferSize - size of the buffer (including trailing 0)
* @param[out] pSHA256ValueNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pSHA256ValueBuffer -  buffer of SHA256 Return value., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_cryptocontext_calculatesha256fromstring(LibMCEnv_CryptoContext pCryptoContext, const char * pValue, const LibMCEnv_uint32 nSHA256ValueBufferSize, LibMCEnv_uint32* pSHA256ValueNeededChars, char * pSHA256ValueBuffer);

/**
* Calculates SHA256 from a byte array. Fails if array is empty.
*
* @param[in] pCryptoContext - CryptoContext instance.
* @param[in] nValueBufferSize - Number of elements in buffer
* @param[in] pValueBuffer - uint8 buffer of Input value.
* @param[in] nSHA256ValueBufferSize - size of the buffer (including trailing 0)
* @param[out] pSHA256ValueNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pSHA256ValueBuffer -  buffer of SHA256 Return value., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_cryptocontext_calculatesha256frombytes(LibMCEnv_CryptoContext pCryptoContext, LibMCEnv_uint64 nValueBufferSize, const LibMCEnv_uint8 * pValueBuffer, const LibMCEnv_uint32 nSHA256ValueBufferSize, LibMCEnv_uint32* pSHA256ValueNeededChars, char * pSHA256ValueBuffer);

/**
* Normalizes a standard string into UUID format. Fails if string does not have a proper UUID format.
*
* @param[in] pCryptoContext - CryptoContext instance.
* @param[in] pValue - Input value.
* @param[in] nSHA256ValueBufferSize - size of the buffer (including trailing 0)
* @param[out] pSHA256ValueNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pSHA256ValueBuffer -  buffer of SHA256 Return value., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_cryptocontext_normalizesha256string(LibMCEnv_CryptoContext pCryptoContext, const char * pValue, const LibMCEnv_uint32 nSHA256ValueBufferSize, LibMCEnv_uint32* pSHA256ValueNeededChars, char * pSHA256ValueBuffer);

/**
* Generates a random SHA256 hash value with operating system APIs.
*
* @param[in] pCryptoContext - CryptoContext instance.
* @param[in] nSHA256ValueBufferSize - size of the buffer (including trailing 0)
* @param[out] pSHA256ValueNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pSHA256ValueBuffer -  buffer of SHA256 Return value., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_cryptocontext_createrandomsha256hash(LibMCEnv_CryptoContext pCryptoContext, const LibMCEnv_uint32 nSHA256ValueBufferSize, LibMCEnv_uint32* pSHA256ValueNeededChars, char * pSHA256ValueBuffer);

/**
* Generates a random UUID with operating system APIs.
*
* @param[in] pCryptoContext - CryptoContext instance.
* @param[in] nUUIDValueBufferSize - size of the buffer (including trailing 0)
* @param[out] pUUIDValueNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pUUIDValueBuffer -  buffer of UUID Return value., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_cryptocontext_createuuid(LibMCEnv_CryptoContext pCryptoContext, const LibMCEnv_uint32 nUUIDValueBufferSize, LibMCEnv_uint32* pUUIDValueNeededChars, char * pUUIDValueBuffer);

/**
* Normalizes a standard string into UUID format. Fails if string does not have a proper UUID format.
*
* @param[in] pCryptoContext - CryptoContext instance.
* @param[in] pValue - Input value.
* @param[in] nUUIDValueBufferSize - size of the buffer (including trailing 0)
* @param[out] pUUIDValueNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pUUIDValueBuffer -  buffer of UUID Return value., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_cryptocontext_normalizeuuidstring(LibMCEnv_CryptoContext pCryptoContext, const char * pValue, const LibMCEnv_uint32 nUUIDValueBufferSize, LibMCEnv_uint32* pUUIDValueNeededChars, char * pUUIDValueBuffer);

/*************************************************************************************************************************
 Class definition for PNGImageStoreOptions
**************************************************************************************************************************/

/**
* Resets Options to default.
*
* @param[in] pPNGImageStoreOptions - PNGImageStoreOptions instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_pngimagestoreoptions_resettodefaults(LibMCEnv_PNGImageStoreOptions pPNGImageStoreOptions);

/*************************************************************************************************************************
 Class definition for PNGImageData
**************************************************************************************************************************/

/**
* Returns image pixel sizes.
*
* @param[in] pPNGImageData - PNGImageData instance.
* @param[out] pPixelSizeX - Number of pixels in X
* @param[out] pPixelSizeY - Number of pixels in Y
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_pngimagedata_getsizeinpixels(LibMCEnv_PNGImageData pPNGImageData, LibMCEnv_uint32 * pPixelSizeX, LibMCEnv_uint32 * pPixelSizeY);

/**
* Retrieves encoded data stream of image object.
*
* @param[in] pPNGImageData - PNGImageData instance.
* @param[in] nPNGDataBufferSize - Number of elements in buffer
* @param[out] pPNGDataNeededCount - will be filled with the count of the written elements, or needed buffer size.
* @param[out] pPNGDataBuffer - uint8  buffer of PNG Data stream.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_pngimagedata_getpngdatastream(LibMCEnv_PNGImageData pPNGImageData, const LibMCEnv_uint64 nPNGDataBufferSize, LibMCEnv_uint64* pPNGDataNeededCount, LibMCEnv_uint8 * pPNGDataBuffer);

/*************************************************************************************************************************
 Class definition for ImageData
**************************************************************************************************************************/

/**
* Returns Pixel format of the image.
*
* @param[in] pImageData - ImageData instance.
* @param[out] pPixelFormat - Pixel Format of image
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_imagedata_getpixelformat(LibMCEnv_ImageData pImageData, LibMCEnv::eImagePixelFormat * pPixelFormat);

/**
* Changes Pixel format of the image. Might lose alpha or color information during the process.
*
* @param[in] pImageData - ImageData instance.
* @param[in] ePixelFormat - new Pixel Format of image
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_imagedata_changepixelformat(LibMCEnv_ImageData pImageData, LibMCEnv::eImagePixelFormat ePixelFormat);

/**
* Returns DPI values in X and Y.
*
* @param[in] pImageData - ImageData instance.
* @param[out] pDPIValueX - DPI value in X
* @param[out] pDPIValueY - DPI value in Y
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_imagedata_getdpi(LibMCEnv_ImageData pImageData, LibMCEnv_double * pDPIValueX, LibMCEnv_double * pDPIValueY);

/**
* Sets DPI values in X and Y.
*
* @param[in] pImageData - ImageData instance.
* @param[in] dDPIValueX - new DPI value in X
* @param[in] dDPIValueY - new DPI value in Y
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_imagedata_setdpi(LibMCEnv_ImageData pImageData, LibMCEnv_double dDPIValueX, LibMCEnv_double dDPIValueY);

/**
* Returns image sizes inmm.
*
* @param[in] pImageData - ImageData instance.
* @param[out] pSizeX - Size in X in mm
* @param[out] pSizeY - Size in Y in mm
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_imagedata_getsizeinmm(LibMCEnv_ImageData pImageData, LibMCEnv_double * pSizeX, LibMCEnv_double * pSizeY);

/**
* Returns image pixel sizes.
*
* @param[in] pImageData - ImageData instance.
* @param[out] pPixelSizeX - Number of pixels in X
* @param[out] pPixelSizeY - Number of pixels in Y
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_imagedata_getsizeinpixels(LibMCEnv_ImageData pImageData, LibMCEnv_uint32 * pPixelSizeX, LibMCEnv_uint32 * pPixelSizeY);

/**
* Resizes Image pixel data.
*
* @param[in] pImageData - ImageData instance.
* @param[out] pPixelSizeX - Number of pixels in X
* @param[out] pPixelSizeY - Number of pixels in Y
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_imagedata_resizeimage(LibMCEnv_ImageData pImageData, LibMCEnv_uint32 * pPixelSizeX, LibMCEnv_uint32 * pPixelSizeY);

/**
* Creates PNG Image out of the pixel data.
*
* @param[in] pImageData - ImageData instance.
* @param[in] pPNGStorageOptions - Optional encoding options for the image.
* @param[out] pPNGImage - Image data.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_imagedata_createpngimage(LibMCEnv_ImageData pImageData, LibMCEnv_PNGImageStoreOptions pPNGStorageOptions, LibMCEnv_PNGImageData * pPNGImage);

/**
* Depreciated. DO NOT USE. Encodes PNG and stores data stream in image object.
*
* @param[in] pImageData - ImageData instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_imagedata_encodepng(LibMCEnv_ImageData pImageData);

/**
* Depreciated. DO NOT USE. Retrieves encoded data stream of image object. MUST have been encoded with EncodePNG before.
*
* @param[in] pImageData - ImageData instance.
* @param[in] nPNGDataBufferSize - Number of elements in buffer
* @param[out] pPNGDataNeededCount - will be filled with the count of the written elements, or needed buffer size.
* @param[out] pPNGDataBuffer - uint8  buffer of PNG Data stream.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_imagedata_getencodedpngdata(LibMCEnv_ImageData pImageData, const LibMCEnv_uint64 nPNGDataBufferSize, LibMCEnv_uint64* pPNGDataNeededCount, LibMCEnv_uint8 * pPNGDataBuffer);

/**
* Depreciated. DO NOT USE. Releases encoded data stream of image object. Depreciated.
*
* @param[in] pImageData - ImageData instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_imagedata_clearencodedpngdata(LibMCEnv_ImageData pImageData);

/**
* Sets all pixels to a single value.
*
* @param[in] pImageData - ImageData instance.
* @param[in] nValue - Pixel value.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_imagedata_clear(LibMCEnv_ImageData pImageData, LibMCEnv_uint32 nValue);

/**
* Returns one pixel of an image.
*
* @param[in] pImageData - ImageData instance.
* @param[in] nX - Pixel coordinate in X
* @param[in] nY - Pixel coordinate in Y
* @param[out] pValue - Pixel value at this position
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_imagedata_getpixel(LibMCEnv_ImageData pImageData, LibMCEnv_uint32 nX, LibMCEnv_uint32 nY, LibMCEnv_uint32 * pValue);

/**
* Sets one pixel of an image.
*
* @param[in] pImageData - ImageData instance.
* @param[in] nX - Pixel coordinate in X
* @param[in] nY - Pixel coordinate in Y
* @param[in] nValue - New Pixel value at this position
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_imagedata_setpixel(LibMCEnv_ImageData pImageData, LibMCEnv_uint32 nX, LibMCEnv_uint32 nY, LibMCEnv_uint32 nValue);

/**
* Returns a subset of an image or the whole image data. DEPRECIATED.
*
* @param[in] pImageData - ImageData instance.
* @param[in] nXMin - Min Pixel coordinate in X. MUST be within image bounds.
* @param[in] nYMin - Min Pixel coordinate in Y. MUST be within image bounds.
* @param[in] nXMax - Max Pixel coordinate in X. MUST be within image bounds. MUST be larger or equal than MinX
* @param[in] nYMax - Max Pixel coordinate in Y. MUST be within image bounds. MUST be larger or equal than MinY
* @param[in] nValueBufferSize - Number of elements in buffer
* @param[out] pValueNeededCount - will be filled with the count of the written elements, or needed buffer size.
* @param[out] pValueBuffer - uint8  buffer of Pixel values of the rectangle, rowwise array. Will return the exact number of pixels in size and 1, 3 or 4 bytes per pixel, depending on pixel format.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_imagedata_getpixelrange(LibMCEnv_ImageData pImageData, LibMCEnv_uint32 nXMin, LibMCEnv_uint32 nYMin, LibMCEnv_uint32 nXMax, LibMCEnv_uint32 nYMax, const LibMCEnv_uint64 nValueBufferSize, LibMCEnv_uint64* pValueNeededCount, LibMCEnv_uint8 * pValueBuffer);

/**
* Exchanges a subset of an image or the whole image data. DEPRECIATED.
*
* @param[in] pImageData - ImageData instance.
* @param[in] nXMin - Min Pixel coordinate in X. MUST be within image bounds.
* @param[in] nYMin - Min Pixel coordinate in Y. MUST be within image bounds.
* @param[in] nXMax - Max Pixel coordinate in X. MUST be within image bounds. MUST be larger or equal than MinX
* @param[in] nYMax - Max Pixel coordinate in Y. MUST be within image bounds. MUST be larger or equal than MinY
* @param[in] nValueBufferSize - Number of elements in buffer
* @param[in] pValueBuffer - uint8 buffer of New pixel values of the rectangle, rowwise array. MUST have the exact number of pixels in size and 1, 3 or 4 bytes per pixel, depending on pixel format.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_imagedata_setpixelrange(LibMCEnv_ImageData pImageData, LibMCEnv_uint32 nXMin, LibMCEnv_uint32 nYMin, LibMCEnv_uint32 nXMax, LibMCEnv_uint32 nYMax, LibMCEnv_uint64 nValueBufferSize, const LibMCEnv_uint8 * pValueBuffer);

/*************************************************************************************************************************
 Class definition for DiscreteFieldData2DStoreOptions
**************************************************************************************************************************/

/**
* Resets Options to default.
*
* @param[in] pDiscreteFieldData2DStoreOptions - DiscreteFieldData2DStoreOptions instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_discretefielddata2dstoreoptions_resettodefaults(LibMCEnv_DiscreteFieldData2DStoreOptions pDiscreteFieldData2DStoreOptions);

/*************************************************************************************************************************
 Class definition for DiscreteFieldData2D
**************************************************************************************************************************/

/**
* Returns DPI values in X and Y.
*
* @param[in] pDiscreteFieldData2D - DiscreteFieldData2D instance.
* @param[out] pDPIValueX - DPI value in X
* @param[out] pDPIValueY - DPI value in Y
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_discretefielddata2d_getdpi(LibMCEnv_DiscreteFieldData2D pDiscreteFieldData2D, LibMCEnv_double * pDPIValueX, LibMCEnv_double * pDPIValueY);

/**
* Sets DPI values in X and Y.
*
* @param[in] pDiscreteFieldData2D - DiscreteFieldData2D instance.
* @param[in] dDPIValueX - new DPI value in X. MUST be positive.
* @param[in] dDPIValueY - new DPI value in Y. MUST be positive.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_discretefielddata2d_setdpi(LibMCEnv_DiscreteFieldData2D pDiscreteFieldData2D, LibMCEnv_double dDPIValueX, LibMCEnv_double dDPIValueY);

/**
* Returns field origin in mm.
*
* @param[in] pDiscreteFieldData2D - DiscreteFieldData2D instance.
* @param[out] pOriginX - Origin in X in mm
* @param[out] pOriginY - Origin in Y in mm
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_discretefielddata2d_getorigininmm(LibMCEnv_DiscreteFieldData2D pDiscreteFieldData2D, LibMCEnv_double * pOriginX, LibMCEnv_double * pOriginY);

/**
* Set field origin in mm.
*
* @param[in] pDiscreteFieldData2D - DiscreteFieldData2D instance.
* @param[in] dOriginX - Origin in X in mm
* @param[in] dOriginY - Origin in Y in mm
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_discretefielddata2d_setorigininmm(LibMCEnv_DiscreteFieldData2D pDiscreteFieldData2D, LibMCEnv_double dOriginX, LibMCEnv_double dOriginY);

/**
* Returns field sizes in mm.
*
* @param[in] pDiscreteFieldData2D - DiscreteFieldData2D instance.
* @param[out] pSizeX - Size in X in mm
* @param[out] pSizeY - Size in Y in mm
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_discretefielddata2d_getsizeinmm(LibMCEnv_DiscreteFieldData2D pDiscreteFieldData2D, LibMCEnv_double * pSizeX, LibMCEnv_double * pSizeY);

/**
* Returns field pixel sizes.
*
* @param[in] pDiscreteFieldData2D - DiscreteFieldData2D instance.
* @param[out] pPixelSizeX - Number of pixels in X
* @param[out] pPixelSizeY - Number of pixels in Y
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_discretefielddata2d_getsizeinpixels(LibMCEnv_DiscreteFieldData2D pDiscreteFieldData2D, LibMCEnv_uint32 * pPixelSizeX, LibMCEnv_uint32 * pPixelSizeY);

/**
* Resizes field pixel data.
*
* @param[in] pDiscreteFieldData2D - DiscreteFieldData2D instance.
* @param[in] nPixelSizeX - Number of pixels in X
* @param[in] nPixelSizeY - Number of pixels in Y
* @param[in] dDefaultValue - Default Pixel value.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_discretefielddata2d_resizefield(LibMCEnv_DiscreteFieldData2D pDiscreteFieldData2D, LibMCEnv_uint32 nPixelSizeX, LibMCEnv_uint32 nPixelSizeY, LibMCEnv_double dDefaultValue);

/**
* Sets all pixels to a single value.
*
* @param[in] pDiscreteFieldData2D - DiscreteFieldData2D instance.
* @param[in] dValue - Pixel value.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_discretefielddata2d_clear(LibMCEnv_DiscreteFieldData2D pDiscreteFieldData2D, LibMCEnv_double dValue);

/**
* Clamps all pixels to a certain interval.
*
* @param[in] pDiscreteFieldData2D - DiscreteFieldData2D instance.
* @param[in] dMinValue - Minimum value. MUST be smaller or equal than MaxValue.
* @param[in] dMaxValue - Maximum value. MUST be larger or equal than MinValue.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_discretefielddata2d_clamp(LibMCEnv_DiscreteFieldData2D pDiscreteFieldData2D, LibMCEnv_double dMinValue, LibMCEnv_double dMaxValue);

/**
* Returns one pixel of an field. Fails if outside of field size.
*
* @param[in] pDiscreteFieldData2D - DiscreteFieldData2D instance.
* @param[in] nX - Pixel coordinate in X
* @param[in] nY - Pixel coordinate in Y
* @param[out] pValue - Pixel value at this position
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_discretefielddata2d_getpixel(LibMCEnv_DiscreteFieldData2D pDiscreteFieldData2D, LibMCEnv_uint32 nX, LibMCEnv_uint32 nY, LibMCEnv_double * pValue);

/**
* Sets one pixel of an field. Fails if outside of field size.
*
* @param[in] pDiscreteFieldData2D - DiscreteFieldData2D instance.
* @param[in] nX - Pixel coordinate in X
* @param[in] nY - Pixel coordinate in Y
* @param[in] dValue - New Pixel value at this position
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_discretefielddata2d_setpixel(LibMCEnv_DiscreteFieldData2D pDiscreteFieldData2D, LibMCEnv_uint32 nX, LibMCEnv_uint32 nY, LibMCEnv_double dValue);

/**
* Returns a subset of an field or the whole field data.
*
* @param[in] pDiscreteFieldData2D - DiscreteFieldData2D instance.
* @param[in] nXMin - Min Pixel coordinate in X. MUST be within field bounds.
* @param[in] nYMin - Min Pixel coordinate in Y. MUST be within field bounds.
* @param[in] nXMax - Max Pixel coordinate in X. MUST be within field bounds. MUST be larger or equal than MinX
* @param[in] nYMax - Max Pixel coordinate in Y. MUST be within field bounds. MUST be larger or equal than MinY
* @param[in] nValueBufferSize - Number of elements in buffer
* @param[out] pValueNeededCount - will be filled with the count of the written elements, or needed buffer size.
* @param[out] pValueBuffer - double  buffer of Pixel values of the rectangle, rowwise array. Will return the exact number of pixels in size.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_discretefielddata2d_getpixelrange(LibMCEnv_DiscreteFieldData2D pDiscreteFieldData2D, LibMCEnv_uint32 nXMin, LibMCEnv_uint32 nYMin, LibMCEnv_uint32 nXMax, LibMCEnv_uint32 nYMax, const LibMCEnv_uint64 nValueBufferSize, LibMCEnv_uint64* pValueNeededCount, LibMCEnv_double * pValueBuffer);

/**
* Exchanges a subset of an field or the whole field data.
*
* @param[in] pDiscreteFieldData2D - DiscreteFieldData2D instance.
* @param[in] nXMin - Min Pixel coordinate in X. MUST be within field bounds.
* @param[in] nYMin - Min Pixel coordinate in Y. MUST be within field bounds.
* @param[in] nXMax - Max Pixel coordinate in X. MUST be within field bounds. MUST be larger or equal than MinX
* @param[in] nYMax - Max Pixel coordinate in Y. MUST be within field bounds. MUST be larger or equal than MinY
* @param[in] nValueBufferSize - Number of elements in buffer
* @param[in] pValueBuffer - double buffer of New pixel values of the rectangle, rowwise array. MUST have the exact number of pixels in size.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_discretefielddata2d_setpixelrange(LibMCEnv_DiscreteFieldData2D pDiscreteFieldData2D, LibMCEnv_uint32 nXMin, LibMCEnv_uint32 nYMin, LibMCEnv_uint32 nXMax, LibMCEnv_uint32 nYMax, LibMCEnv_uint64 nValueBufferSize, const LibMCEnv_double * pValueBuffer);

/**
* Renders and array of average point values into the field. 
*
* @param[in] pDiscreteFieldData2D - DiscreteFieldData2D instance.
* @param[in] dDefaultValue - If a pixel does not contain any value, fall back to this given value.
* @param[in] eSamplingMode - Sampling mode of point values.
* @param[in] dSampleSizeX - How large a sample point should be drawn in Pixel widths. This determines the weighting when a point value overlaps multiple pixels. Ignored if SamplingMode is equal FloorCoordinate or CeilCoordinate. MUST be positive otherwise.
* @param[in] dSampleSizeY - How large a sample point should be drawn in Pixel heights. This determines the weighting when a point value overlaps multiple pixels. Ignored if SamplingMode is equal FloorCoordinate or CeilCoordinate. MUST be positive otherwise.
* @param[in] nPointValuesBufferSize - Number of elements in buffer
* @param[in] pPointValuesBuffer - FieldData2DPoint buffer of Array of Field Data Points that are sorted into the grid. If a point lies on a grid border, it will be counted to all adjacent pixels.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_discretefielddata2d_renderaveragepointvalues(LibMCEnv_DiscreteFieldData2D pDiscreteFieldData2D, LibMCEnv_double dDefaultValue, LibMCEnv::eFieldSamplingMode eSamplingMode, LibMCEnv_double dSampleSizeX, LibMCEnv_double dSampleSizeY, LibMCEnv_uint64 nPointValuesBufferSize, const LibMCEnv::sFieldData2DPoint * pPointValuesBuffer);

/**
* Scales the field to a smaller size.
*
* @param[in] pDiscreteFieldData2D - DiscreteFieldData2D instance.
* @param[in] nFactorX - The new field will be this factor smaller in X. MUST be positive and smaller than PixelSizeX
* @param[in] nFactorY - The new field will be this factor smaller in Y. MUST be positive and smaller than PixelSizeY
* @param[out] pNewField - Scaled Field Instance
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_discretefielddata2d_scalefielddown(LibMCEnv_DiscreteFieldData2D pDiscreteFieldData2D, LibMCEnv_uint32 nFactorX, LibMCEnv_uint32 nFactorY, LibMCEnv_DiscreteFieldData2D * pNewField);

/**
* Scales the field to a larger size.
*
* @param[in] pDiscreteFieldData2D - DiscreteFieldData2D instance.
* @param[in] nFactorX - The new field will be this factor larger in X. MUST be positive.
* @param[in] nFactorY - The new field will be this factor larger in Y. MUST be positive.
* @param[out] pNewField - Scaled Field Instance
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_discretefielddata2d_scalefieldup(LibMCEnv_DiscreteFieldData2D pDiscreteFieldData2D, LibMCEnv_uint32 nFactorX, LibMCEnv_uint32 nFactorY, LibMCEnv_DiscreteFieldData2D * pNewField);

/**
* Discretizes the field into a finite set of values. All field values will be set to the nearest value in the given array. Equivalent to DiscretizeWithMapping with two identical parameters.
*
* @param[in] pDiscreteFieldData2D - DiscreteFieldData2D instance.
* @param[in] nDiscreteValuesBufferSize - Number of elements in buffer
* @param[in] pDiscreteValuesBuffer - double buffer of An array of values. MUST NOT be empty.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_discretefielddata2d_discretize(LibMCEnv_DiscreteFieldData2D pDiscreteFieldData2D, LibMCEnv_uint64 nDiscreteValuesBufferSize, const LibMCEnv_double * pDiscreteValuesBuffer);

/**
* Discretizes the field into a finite set of DiscreteValues. For each field value the nearest DiscreteValue is determined, and the field is set to the element of NewValues with the same index.
*
* @param[in] pDiscreteFieldData2D - DiscreteFieldData2D instance.
* @param[in] nDiscreteValuesBufferSize - Number of elements in buffer
* @param[in] pDiscreteValuesBuffer - double buffer of An array of values. MUST NOT be empty.  
* @param[in] nNewValuesBufferSize - Number of elements in buffer
* @param[in] pNewValuesBuffer - double buffer of An array of values. MUST have the same cardinality as DiscreteValues.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_discretefielddata2d_discretizewithmapping(LibMCEnv_DiscreteFieldData2D pDiscreteFieldData2D, LibMCEnv_uint64 nDiscreteValuesBufferSize, const LibMCEnv_double * pDiscreteValuesBuffer, LibMCEnv_uint64 nNewValuesBufferSize, const LibMCEnv_double * pNewValuesBuffer);

/**
* Renders the field into a PNG image. The colors will be linearly interpolated into a given color scheme.
*
* @param[in] pDiscreteFieldData2D - DiscreteFieldData2D instance.
* @param[in] dMinValue - Min point value. Values smaller than MinValue will be clamped to MinValue.
* @param[in] pMinColor - The color assigned to MinValue.
* @param[in] dMidValue - Mid point value. MUST be at least 1E-6 larger than MinValue.
* @param[in] pMidColor - The color assigned to MidValue
* @param[in] dMaxValue - Max point value. MUST be at least 1E-6 larger than MidValue. Values larger than MaxValue will be clamped to MaxValue.
* @param[in] pMaxColor - The color assigned to MaxValue
* @param[out] pNewImage - New Image with the according data. Pixel size and DPI will be equal to the field. Pixel format will be RGB24bit.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_discretefielddata2d_rendertoimageraw(LibMCEnv_DiscreteFieldData2D pDiscreteFieldData2D, LibMCEnv_double dMinValue, const LibMCEnv::sColorRGB * pMinColor, LibMCEnv_double dMidValue, const LibMCEnv::sColorRGB * pMidColor, LibMCEnv_double dMaxValue, const LibMCEnv::sColorRGB * pMaxColor, LibMCEnv_ImageData * pNewImage);

/**
* Scales the field values with a factor and a translation.
*
* @param[in] pDiscreteFieldData2D - DiscreteFieldData2D instance.
* @param[in] dScale - A scaling factor will be applied to all values in the field.
* @param[in] dOffset - The offset will be applied to all values in the field after scaling.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_discretefielddata2d_transformfield(LibMCEnv_DiscreteFieldData2D pDiscreteFieldData2D, LibMCEnv_double dScale, LibMCEnv_double dOffset);

/**
* Adds another field to the field. Both fields MUST have the same pixel extensions.
*
* @param[in] pDiscreteFieldData2D - DiscreteFieldData2D instance.
* @param[in] pOtherField - Field Instance to add
* @param[in] dScale - A scaling factor will be applied to all values in the other field before adding.
* @param[in] dOffset - The offset will be applied to all values in the field after scaling.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_discretefielddata2d_addfield(LibMCEnv_DiscreteFieldData2D pDiscreteFieldData2D, LibMCEnv_DiscreteFieldData2D pOtherField, LibMCEnv_double dScale, LibMCEnv_double dOffset);

/**
* Creates a copy of the field.
*
* @param[in] pDiscreteFieldData2D - DiscreteFieldData2D instance.
* @param[out] pNewField - Scaled Field Instance
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_discretefielddata2d_duplicate(LibMCEnv_DiscreteFieldData2D pDiscreteFieldData2D, LibMCEnv_DiscreteFieldData2D * pNewField);

/*************************************************************************************************************************
 Class definition for DataTableWriteOptions
**************************************************************************************************************************/

/*************************************************************************************************************************
 Class definition for DataTableCSVWriteOptions
**************************************************************************************************************************/

/**
* Returns the desired separator of the CSV file. Default is semicolon.
*
* @param[in] pDataTableCSVWriteOptions - DataTableCSVWriteOptions instance.
* @param[in] nSeparatorBufferSize - size of the buffer (including trailing 0)
* @param[out] pSeparatorNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pSeparatorBuffer -  buffer of Separator to use., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_datatablecsvwriteoptions_getseparator(LibMCEnv_DataTableCSVWriteOptions pDataTableCSVWriteOptions, const LibMCEnv_uint32 nSeparatorBufferSize, LibMCEnv_uint32* pSeparatorNeededChars, char * pSeparatorBuffer);

/**
* Sets the desired separator of the CSV file.
*
* @param[in] pDataTableCSVWriteOptions - DataTableCSVWriteOptions instance.
* @param[in] pSeparator - Separator to use. MUST be a single character ASCII string. (ASCII Code 32-127)
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_datatablecsvwriteoptions_setseparator(LibMCEnv_DataTableCSVWriteOptions pDataTableCSVWriteOptions, const char * pSeparator);

/*************************************************************************************************************************
 Class definition for DataTable
**************************************************************************************************************************/

/**
* Adds a column to the data field.
*
* @param[in] pDataTable - DataTable instance.
* @param[in] pIdentifier - Identifier of the column. MUST be unique, alphanumeric and not empty.
* @param[in] pDescription - Description of the column.
* @param[in] eColumnType - Data type of the column.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_datatable_addcolumn(LibMCEnv_DataTable pDataTable, const char * pIdentifier, const char * pDescription, LibMCEnv::eDataTableColumnType eColumnType);

/**
* Removes a column from the data field. Fails if Column does not exist.
*
* @param[in] pDataTable - DataTable instance.
* @param[in] pIdentifier - Identifier of the column.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_datatable_removecolumn(LibMCEnv_DataTable pDataTable, const char * pIdentifier);

/**
* Clears all data from the data table.
*
* @param[in] pDataTable - DataTable instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_datatable_clear(LibMCEnv_DataTable pDataTable);

/**
* Returns if a column exists in the data field.
*
* @param[in] pDataTable - DataTable instance.
* @param[in] pIdentifier - Identifier of the column.
* @param[out] pColumnExists - Returns if the columns exist.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_datatable_hascolumn(LibMCEnv_DataTable pDataTable, const char * pIdentifier, bool * pColumnExists);

/**
* Returns the current row count.
*
* @param[in] pDataTable - DataTable instance.
* @param[out] pRowCount - Number of rows.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_datatable_getrowcount(LibMCEnv_DataTable pDataTable, LibMCEnv_uint32 * pRowCount);

/**
* Returns the current column count.
*
* @param[in] pDataTable - DataTable instance.
* @param[out] pColumnCount - Number of columns.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_datatable_getcolumncount(LibMCEnv_DataTable pDataTable, LibMCEnv_uint32 * pColumnCount);

/**
* Returns the identifier of a column. Will fail if Index is out of bounds.
*
* @param[in] pDataTable - DataTable instance.
* @param[in] nColumnIndex - Index of column. 0-based.
* @param[in] nIdentifierBufferSize - size of the buffer (including trailing 0)
* @param[out] pIdentifierNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pIdentifierBuffer -  buffer of Identifier of the column., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_datatable_getcolumnidentifier(LibMCEnv_DataTable pDataTable, LibMCEnv_uint32 nColumnIndex, const LibMCEnv_uint32 nIdentifierBufferSize, LibMCEnv_uint32* pIdentifierNeededChars, char * pIdentifierBuffer);

/**
* Returns the description of a column. Will fail if Index is out of bounds.
*
* @param[in] pDataTable - DataTable instance.
* @param[in] nColumnIndex - Index of column. 0-based.
* @param[in] nDescriptionBufferSize - size of the buffer (including trailing 0)
* @param[out] pDescriptionNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pDescriptionBuffer -  buffer of Description of the column., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_datatable_getcolumndescription(LibMCEnv_DataTable pDataTable, LibMCEnv_uint32 nColumnIndex, const LibMCEnv_uint32 nDescriptionBufferSize, LibMCEnv_uint32* pDescriptionNeededChars, char * pDescriptionBuffer);

/**
* Returns the type of a column. Will fail if Index is out of bounds.
*
* @param[in] pDataTable - DataTable instance.
* @param[in] nColumnIndex - Index of column. 0-based.
* @param[out] pColumnType - Data type of the column.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_datatable_getcolumntype(LibMCEnv_DataTable pDataTable, LibMCEnv_uint32 nColumnIndex, LibMCEnv::eDataTableColumnType * pColumnType);

/**
* Returns the values of a double column. Will fail if column does not exist or type is not double.
*
* @param[in] pDataTable - DataTable instance.
* @param[in] pIdentifier - Identifier of the column.
* @param[in] nDescriptionBufferSize - size of the buffer (including trailing 0)
* @param[out] pDescriptionNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pDescriptionBuffer -  buffer of Description of the column., may be NULL
* @param[out] pColumnType - Data type of the column.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_datatable_getcolumninformation(LibMCEnv_DataTable pDataTable, const char * pIdentifier, const LibMCEnv_uint32 nDescriptionBufferSize, LibMCEnv_uint32* pDescriptionNeededChars, char * pDescriptionBuffer, LibMCEnv::eDataTableColumnType * pColumnType);

/**
* Returns the values of a double column. Will fail if column does not exist or type is not double.
*
* @param[in] pDataTable - DataTable instance.
* @param[in] pIdentifier - Identifier of the column.
* @param[in] nValuesBufferSize - Number of elements in buffer
* @param[out] pValuesNeededCount - will be filled with the count of the written elements, or needed buffer size.
* @param[out] pValuesBuffer - double  buffer of Value array of a column.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_datatable_getdoublecolumnvalues(LibMCEnv_DataTable pDataTable, const char * pIdentifier, const LibMCEnv_uint64 nValuesBufferSize, LibMCEnv_uint64* pValuesNeededCount, LibMCEnv_double * pValuesBuffer);

/**
* Returns the double columns. Will fail if column does not exist or type is not int32.
*
* @param[in] pDataTable - DataTable instance.
* @param[in] pIdentifier - Identifier of the column.
* @param[in] nValuesBufferSize - Number of elements in buffer
* @param[out] pValuesNeededCount - will be filled with the count of the written elements, or needed buffer size.
* @param[out] pValuesBuffer - int32  buffer of Value array of a column.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_datatable_getint32columnvalues(LibMCEnv_DataTable pDataTable, const char * pIdentifier, const LibMCEnv_uint64 nValuesBufferSize, LibMCEnv_uint64* pValuesNeededCount, LibMCEnv_int32 * pValuesBuffer);

/**
* Returns the double columns. Will fail if column does not exist or type is not int64.
*
* @param[in] pDataTable - DataTable instance.
* @param[in] pIdentifier - Identifier of the column.
* @param[in] nValuesBufferSize - Number of elements in buffer
* @param[out] pValuesNeededCount - will be filled with the count of the written elements, or needed buffer size.
* @param[out] pValuesBuffer - int64  buffer of Value array of a column.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_datatable_getint64columnvalues(LibMCEnv_DataTable pDataTable, const char * pIdentifier, const LibMCEnv_uint64 nValuesBufferSize, LibMCEnv_uint64* pValuesNeededCount, LibMCEnv_int64 * pValuesBuffer);

/**
* Returns the double columns. Will fail if column does not exist or type is not uint32.
*
* @param[in] pDataTable - DataTable instance.
* @param[in] pIdentifier - Identifier of the column.
* @param[in] nValuesBufferSize - Number of elements in buffer
* @param[out] pValuesNeededCount - will be filled with the count of the written elements, or needed buffer size.
* @param[out] pValuesBuffer - uint32  buffer of Value array of a column.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_datatable_getuint32columnvalues(LibMCEnv_DataTable pDataTable, const char * pIdentifier, const LibMCEnv_uint64 nValuesBufferSize, LibMCEnv_uint64* pValuesNeededCount, LibMCEnv_uint32 * pValuesBuffer);

/**
* Returns the double columns. Will fail if column does not exist or type is not uint64.
*
* @param[in] pDataTable - DataTable instance.
* @param[in] pIdentifier - Identifier of the column.
* @param[in] nValuesBufferSize - Number of elements in buffer
* @param[out] pValuesNeededCount - will be filled with the count of the written elements, or needed buffer size.
* @param[out] pValuesBuffer - uint64  buffer of Value array of a column.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_datatable_getuint64columnvalues(LibMCEnv_DataTable pDataTable, const char * pIdentifier, const LibMCEnv_uint64 nValuesBufferSize, LibMCEnv_uint64* pValuesNeededCount, LibMCEnv_uint64 * pValuesBuffer);

/**
* Sets the values of a double column. Will fail if column does not exist or type is not double.
*
* @param[in] pDataTable - DataTable instance.
* @param[in] pIdentifier - Identifier of the column.
* @param[in] nValuesBufferSize - Number of elements in buffer
* @param[in] pValuesBuffer - double buffer of New Value array of a column. Array length should match RowCount. Values will be filled up with 0, if length is less than RowCount. RowCount will be extended if length is larger than RowCount.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_datatable_setdoublecolumnvalues(LibMCEnv_DataTable pDataTable, const char * pIdentifier, LibMCEnv_uint64 nValuesBufferSize, const LibMCEnv_double * pValuesBuffer);

/**
* Sets the double columns. Will fail if column does not exist or type is not int32.
*
* @param[in] pDataTable - DataTable instance.
* @param[in] pIdentifier - Identifier of the column.
* @param[in] nValuesBufferSize - Number of elements in buffer
* @param[in] pValuesBuffer - int32 buffer of New Value array of a column. Array length should match RowCount. Values will be filled up with 0, if length is less than RowCount. RowCount will be extended if length is larger than RowCount.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_datatable_setint32columnvalues(LibMCEnv_DataTable pDataTable, const char * pIdentifier, LibMCEnv_uint64 nValuesBufferSize, const LibMCEnv_int32 * pValuesBuffer);

/**
* Sets the double columns. Will fail if column does not exist or type is not int64.
*
* @param[in] pDataTable - DataTable instance.
* @param[in] pIdentifier - Identifier of the column.
* @param[in] nValuesBufferSize - Number of elements in buffer
* @param[in] pValuesBuffer - int64 buffer of New Value array of a column. Array length should match RowCount. Values will be filled up with 0, if length is less than RowCount. RowCount will be extended if length is larger than RowCount.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_datatable_setint64columnvalues(LibMCEnv_DataTable pDataTable, const char * pIdentifier, LibMCEnv_uint64 nValuesBufferSize, const LibMCEnv_int64 * pValuesBuffer);

/**
* Sets the double columns. Will fail if column does not exist or type is not uint32.
*
* @param[in] pDataTable - DataTable instance.
* @param[in] pIdentifier - Identifier of the column.
* @param[in] nValuesBufferSize - Number of elements in buffer
* @param[in] pValuesBuffer - uint32 buffer of New Value array of a column. Array length should match RowCount. Values will be filled up with 0, if length is less than RowCount. RowCount will be extended if length is larger than RowCount.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_datatable_setuint32columnvalues(LibMCEnv_DataTable pDataTable, const char * pIdentifier, LibMCEnv_uint64 nValuesBufferSize, const LibMCEnv_uint32 * pValuesBuffer);

/**
* Sets the double columns. Will fail if column does not exist or type is not uint64.
*
* @param[in] pDataTable - DataTable instance.
* @param[in] pIdentifier - Identifier of the column.
* @param[in] nValuesBufferSize - Number of elements in buffer
* @param[in] pValuesBuffer - uint64 buffer of New Value array of a column. Array length should match RowCount. Values will be filled up with 0, if length is less than RowCount. RowCount will be extended if length is larger than RowCount.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_datatable_setuint64columnvalues(LibMCEnv_DataTable pDataTable, const char * pIdentifier, LibMCEnv_uint64 nValuesBufferSize, const LibMCEnv_uint64 * pValuesBuffer);

/**
* Creates a Write Option.
*
* @param[in] pDataTable - DataTable instance.
* @param[out] pOptions - Writer Options Instance to pass on to WriteDataToStream.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_datatable_createwriteoptions(LibMCEnv_DataTable pDataTable, LibMCEnv_DataTableWriteOptions * pOptions);

/**
* Creates a CSV Write Option.
*
* @param[in] pDataTable - DataTable instance.
* @param[out] pOptions - Writer Options Instance to pass on to WriteCSVToStream.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_datatable_createcsvwriteoptions(LibMCEnv_DataTable pDataTable, LibMCEnv_DataTableCSVWriteOptions * pOptions);

/**
* Writes the data as CSV to a temporary stream.
*
* @param[in] pDataTable - DataTable instance.
* @param[in] pWriter - Stream writer to use.
* @param[in] pOptions - Optional CSV writer options to use.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_datatable_writecsvtostream(LibMCEnv_DataTable pDataTable, LibMCEnv_TempStreamWriter pWriter, LibMCEnv_DataTableCSVWriteOptions pOptions);

/**
* Writes the data as binary to a temporary stream.
*
* @param[in] pDataTable - DataTable instance.
* @param[in] pWriter - Stream writer instance to use.
* @param[in] pOptions - Optional writer options to use.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_datatable_writedatatostream(LibMCEnv_DataTable pDataTable, LibMCEnv_TempStreamWriter pWriter, LibMCEnv_DataTableWriteOptions pOptions);

/**
* Loads the data table from a stream. Clears all existing data from the data table.
*
* @param[in] pDataTable - DataTable instance.
* @param[in] pStream - Stream read instance to read from.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_datatable_loadfromstream(LibMCEnv_DataTable pDataTable, LibMCEnv_StreamReader pStream);

/*************************************************************************************************************************
 Class definition for DataSeries
**************************************************************************************************************************/

/**
* Returns the name of the data series.
*
* @param[in] pDataSeries - DataSeries instance.
* @param[in] nNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNameBuffer -  buffer of Returns the name., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_dataseries_getname(LibMCEnv_DataSeries pDataSeries, const LibMCEnv_uint32 nNameBufferSize, LibMCEnv_uint32* pNameNeededChars, char * pNameBuffer);

/**
* Returns the UUID of the data series.
*
* @param[in] pDataSeries - DataSeries instance.
* @param[in] nUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pUUIDBuffer -  buffer of Returns uuid., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_dataseries_getuuid(LibMCEnv_DataSeries pDataSeries, const LibMCEnv_uint32 nUUIDBufferSize, LibMCEnv_uint32* pUUIDNeededChars, char * pUUIDBuffer);

/**
* Clears all entries of the data series.
*
* @param[in] pDataSeries - DataSeries instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_dataseries_clear(LibMCEnv_DataSeries pDataSeries);

/**
* Checks if data series is empty.
*
* @param[in] pDataSeries - DataSeries instance.
* @param[out] pEmptyValue - Returns true if data series has no entries.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_dataseries_isempty(LibMCEnv_DataSeries pDataSeries, bool * pEmptyValue);

/**
* Returns the minimum time stamp of the data series. Fails if data series is empty.
*
* @param[in] pDataSeries - DataSeries instance.
* @param[out] pMinimumInMicroSeconds - Minimum time stamp in microseconds.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_dataseries_getminimum(LibMCEnv_DataSeries pDataSeries, LibMCEnv_uint64 * pMinimumInMicroSeconds);

/**
* Returns the maximum time stamp of the data series. Fails if data series is empty.
*
* @param[in] pDataSeries - DataSeries instance.
* @param[out] pMaximumInMicroSeconds - Maximum time stamp in microseconds.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_dataseries_getmaximum(LibMCEnv_DataSeries pDataSeries, LibMCEnv_uint64 * pMaximumInMicroSeconds);

/**
* Returns all entries of the data series. Fails if data series is empty.
*
* @param[in] pDataSeries - DataSeries instance.
* @param[in] nEntryArrayBufferSize - Number of elements in buffer
* @param[out] pEntryArrayNeededCount - will be filled with the count of the written elements, or needed buffer size.
* @param[out] pEntryArrayBuffer - TimeStreamEntry  buffer of Data series entries will be written in this array.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_dataseries_getallentries(LibMCEnv_DataSeries pDataSeries, const LibMCEnv_uint64 nEntryArrayBufferSize, LibMCEnv_uint64* pEntryArrayNeededCount, LibMCEnv::sTimeStreamEntry * pEntryArrayBuffer);

/**
* Sets all entries of the data series. The time stamp array MUST be sorted in incrementing order, with no two time stamps being equal.
*
* @param[in] pDataSeries - DataSeries instance.
* @param[in] nEntryArrayBufferSize - Number of elements in buffer
* @param[in] pEntryArrayBuffer - TimeStreamEntry buffer of Data series entries to use.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_dataseries_setallentries(LibMCEnv_DataSeries pDataSeries, LibMCEnv_uint64 nEntryArrayBufferSize, const LibMCEnv::sTimeStreamEntry * pEntryArrayBuffer);

/**
* Samples a journal variable.
*
* @param[in] pDataSeries - DataSeries instance.
* @param[in] pJournalVariable - Journal variable to sample.
* @param[in] nNumberOfSamples - Number of samples to generate.
* @param[in] dMovingAverageDelta - Each sample will be averaged from minus MovingAverageDelta to plus MovingAverageDelta.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_dataseries_samplejournalvariable(LibMCEnv_DataSeries pDataSeries, LibMCEnv_JournalVariable pJournalVariable, LibMCEnv_uint32 nNumberOfSamples, LibMCEnv_double dMovingAverageDelta);

/**
* Returns the incrementing change version of the data series.
*
* @param[in] pDataSeries - DataSeries instance.
* @param[out] pVersion - Version number. Increases with every change to the data.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_dataseries_getversion(LibMCEnv_DataSeries pDataSeries, LibMCEnv_uint32 * pVersion);

/**
* Increases the version number of the data series.
*
* @param[in] pDataSeries - DataSeries instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_dataseries_increaseversion(LibMCEnv_DataSeries pDataSeries);

/*************************************************************************************************************************
 Class definition for DateTimeDifference
**************************************************************************************************************************/

/**
* Returns the duration in Microseconds.
*
* @param[in] pDateTimeDifference - DateTimeDifference instance.
* @param[out] pMicroseconds - The duration in Microseconds.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_datetimedifference_tomicroseconds(LibMCEnv_DateTimeDifference pDateTimeDifference, LibMCEnv_uint64 * pMicroseconds);

/**
* Returns the duration in Milliseconds. Partial milliseconds are rounded down.
*
* @param[in] pDateTimeDifference - DateTimeDifference instance.
* @param[out] pMilliseconds - The duration in Milliseconds.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_datetimedifference_tomilliseconds(LibMCEnv_DateTimeDifference pDateTimeDifference, LibMCEnv_uint64 * pMilliseconds);

/**
* Returns the duration in Seconds. Partial seconds are rounded down.
*
* @param[in] pDateTimeDifference - DateTimeDifference instance.
* @param[out] pSeconds - The duration in seconds.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_datetimedifference_toseconds(LibMCEnv_DateTimeDifference pDateTimeDifference, LibMCEnv_uint64 * pSeconds);

/**
* Returns the duration in Seconds. Partial minutes are rounded down.
*
* @param[in] pDateTimeDifference - DateTimeDifference instance.
* @param[out] pMinutes - The duration in seconds.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_datetimedifference_tominutes(LibMCEnv_DateTimeDifference pDateTimeDifference, LibMCEnv_uint64 * pMinutes);

/**
* Returns the duration in Hours. Partial hours are rounded down.
*
* @param[in] pDateTimeDifference - DateTimeDifference instance.
* @param[out] pHours - The duration in hours.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_datetimedifference_tohours(LibMCEnv_DateTimeDifference pDateTimeDifference, LibMCEnv_uint64 * pHours);

/**
* Returns the duration in Days. Partial days are rounded down.
*
* @param[in] pDateTimeDifference - DateTimeDifference instance.
* @param[out] pDays - The duration in days.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_datetimedifference_todays(LibMCEnv_DateTimeDifference pDateTimeDifference, LibMCEnv_uint64 * pDays);

/**
* Rounds down the duration to the full day.
*
* @param[in] pDateTimeDifference - DateTimeDifference instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_datetimedifference_rounddowntoday(LibMCEnv_DateTimeDifference pDateTimeDifference);

/**
* Rounds down the duration to the full hour.
*
* @param[in] pDateTimeDifference - DateTimeDifference instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_datetimedifference_rounddowntohour(LibMCEnv_DateTimeDifference pDateTimeDifference);

/**
* Rounds down the duration to the full minute.
*
* @param[in] pDateTimeDifference - DateTimeDifference instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_datetimedifference_rounddowntominute(LibMCEnv_DateTimeDifference pDateTimeDifference);

/**
* Rounds down the duration to the full second.
*
* @param[in] pDateTimeDifference - DateTimeDifference instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_datetimedifference_rounddowntoseconds(LibMCEnv_DateTimeDifference pDateTimeDifference);

/**
* Rounds down the duration to the full millisecond.
*
* @param[in] pDateTimeDifference - DateTimeDifference instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_datetimedifference_rounddowntomilliseconds(LibMCEnv_DateTimeDifference pDateTimeDifference);

/**
* Rounds up the duration to the full day.
*
* @param[in] pDateTimeDifference - DateTimeDifference instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_datetimedifference_rounduptoday(LibMCEnv_DateTimeDifference pDateTimeDifference);

/**
* Rounds up the duration to the full hour.
*
* @param[in] pDateTimeDifference - DateTimeDifference instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_datetimedifference_rounduptohour(LibMCEnv_DateTimeDifference pDateTimeDifference);

/**
* Rounds up the duration to the full minute.
*
* @param[in] pDateTimeDifference - DateTimeDifference instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_datetimedifference_rounduptominute(LibMCEnv_DateTimeDifference pDateTimeDifference);

/**
* Rounds up the duration to the full second.
*
* @param[in] pDateTimeDifference - DateTimeDifference instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_datetimedifference_rounduptoseconds(LibMCEnv_DateTimeDifference pDateTimeDifference);

/**
* Rounds up the duration to the full millisecond.
*
* @param[in] pDateTimeDifference - DateTimeDifference instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_datetimedifference_rounduptomilliseconds(LibMCEnv_DateTimeDifference pDateTimeDifference);

/*************************************************************************************************************************
 Class definition for DateTime
**************************************************************************************************************************/

/**
* Returns the maximum accuracy date time.
*
* @param[in] pDateTime - DateTime instance.
* @param[out] pMicrosecondsSince1970 - Returns the date in Microseconds since midnight first of January 1970.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_datetime_tomicrosecondssince1970(LibMCEnv_DateTime pDateTime, LibMCEnv_uint64 * pMicrosecondsSince1970);

/**
* Returns the unix time stamp of the date time
*
* @param[in] pDateTime - DateTime instance.
* @param[out] pSecondsSince1970 - Returns the date in seconds since midnight the first of January 1970. Rounds down the value if microseconds are present.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_datetime_tounixtimestamp(LibMCEnv_DateTime pDateTime, LibMCEnv_uint64 * pSecondsSince1970);

/**
* Returns the Timestamp in ISO8601 UTC format. Rounded down to Second Accuracy.
*
* @param[in] pDateTime - DateTime instance.
* @param[in] nUTCDateTimeBufferSize - size of the buffer (including trailing 0)
* @param[out] pUTCDateTimeNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pUTCDateTimeBuffer -  buffer of The time stamp in ISO8601 format. Rounds down the value if microseconds are present. One example is 2024-03-27T15:21:46Z UTC, may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_datetime_toutcdatetime(LibMCEnv_DateTime pDateTime, const LibMCEnv_uint32 nUTCDateTimeBufferSize, LibMCEnv_uint32* pUTCDateTimeNeededChars, char * pUTCDateTimeBuffer);

/**
* Returns the Timestamp in ISO8601 UTC format. Rounded down to Millisecond Accuracy.
*
* @param[in] pDateTime - DateTime instance.
* @param[in] nUTCDateTimeBufferSize - size of the buffer (including trailing 0)
* @param[out] pUTCDateTimeNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pUTCDateTimeBuffer -  buffer of The time stamp in ISO8601 format. Rounds down the value if microseconds are present. One example is 2024-03-27T15:21:46.123Z UTC, may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_datetime_toutcdatetimeinmilliseconds(LibMCEnv_DateTime pDateTime, const LibMCEnv_uint32 nUTCDateTimeBufferSize, LibMCEnv_uint32* pUTCDateTimeNeededChars, char * pUTCDateTimeBuffer);

/**
* Returns the Timestamp in ISO8601 UTC format. Returns the string in full microsecond accuracy.
*
* @param[in] pDateTime - DateTime instance.
* @param[in] nUTCDateTimeBufferSize - size of the buffer (including trailing 0)
* @param[out] pUTCDateTimeNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pUTCDateTimeBuffer -  buffer of The time stamp in ISO8601 format. One example is 2024-03-27T15:21:46.123456Z UTC, may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_datetime_toutcdatetimeinmicroseconds(LibMCEnv_DateTime pDateTime, const LibMCEnv_uint32 nUTCDateTimeBufferSize, LibMCEnv_uint32* pUTCDateTimeNeededChars, char * pUTCDateTimeBuffer);

/**
* Returns the date information.
*
* @param[in] pDateTime - DateTime instance.
* @param[out] pYear - Year of the date.
* @param[out] pMonth - Month of the date.
* @param[out] pDay - Day of the date.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_datetime_getdate(LibMCEnv_DateTime pDateTime, LibMCEnv_uint32 * pYear, LibMCEnv_uint32 * pMonth, LibMCEnv_uint32 * pDay);

/**
* Returns the time information.
*
* @param[in] pDateTime - DateTime instance.
* @param[out] pHour - Hour of the time. Returns 0-23.
* @param[out] pMinute - Minute of the time. Returns 0-59.
* @param[out] pSecond - Seconds of the time. Returns 0-59.
* @param[out] pMicrosecond - Partial microseconds of the time. Returns 0-999999.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_datetime_gettime(LibMCEnv_DateTime pDateTime, LibMCEnv_uint32 * pHour, LibMCEnv_uint32 * pMinute, LibMCEnv_uint32 * pSecond, LibMCEnv_uint32 * pMicrosecond);

/**
* Duplicates the date time instance.
*
* @param[in] pDateTime - DateTime instance.
* @param[out] pNewInstance - Returns a copied instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_datetime_duplicate(LibMCEnv_DateTime pDateTime, LibMCEnv_DateTime * pNewInstance);

/**
* Returns if the year is a leap year.
*
* @param[in] pDateTime - DateTime instance.
* @param[out] pIsLeapYear - Returns true if the year is a leap year.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_datetime_isleapyear(LibMCEnv_DateTime pDateTime, bool * pIsLeapYear);

/**
* Checks if this timestamp is later than another timestamp.
*
* @param[in] pDateTime - DateTime instance.
* @param[in] pOtherTimeStamp - Instance to check against.
* @param[out] pIsLater - Returns true if the instance is later than OtherTimeStamp.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_datetime_islaterthan(LibMCEnv_DateTime pDateTime, LibMCEnv_DateTime pOtherTimeStamp, bool * pIsLater);

/**
* Checks if this timestamp is earlier than another timestamp.
*
* @param[in] pDateTime - DateTime instance.
* @param[in] pOtherTimeStamp - Instance to check against.
* @param[out] pIsEarlier - Returns true if the instance is earlier than OtherTimeStamp.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_datetime_isearlierthan(LibMCEnv_DateTime pDateTime, LibMCEnv_DateTime pOtherTimeStamp, bool * pIsEarlier);

/**
* Checks if this timestamp is equal to another timestamp.
*
* @param[in] pDateTime - DateTime instance.
* @param[in] pOtherTimeStamp - Instance to check against.
* @param[out] pIsEqual - Returns true if the instance is equal to the OtherTimeStamp.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_datetime_isequalto(LibMCEnv_DateTime pDateTime, LibMCEnv_DateTime pOtherTimeStamp, bool * pIsEqual);

/**
* Returns the time difference to another time stamp as positive duration value.
*
* @param[in] pDateTime - DateTime instance.
* @param[in] pOtherTimeStamp - Instance to check against.
* @param[out] pDifference - Difference between the two time stamps. Value will always be positive. Use IsEarlierThan or IsLaterThan to figure out the time ordering.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_datetime_gettimedifference(LibMCEnv_DateTime pDateTime, LibMCEnv_DateTime pOtherTimeStamp, LibMCEnv_DateTimeDifference * pDifference);

/**
* Shifts the date time by a duration. Fails if the shift will make it move outside of the year 1900 or 1000000.
*
* @param[in] pDateTime - DateTime instance.
* @param[in] pDuration - Duration to add to the time stamp.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_datetime_addduration(LibMCEnv_DateTime pDateTime, LibMCEnv_DateTimeDifference pDuration);

/**
* Shifts the date time by a duration. Fails if the shift will make it move outside of the year 1900 or 1000000.
*
* @param[in] pDateTime - DateTime instance.
* @param[in] pDuration - Duration to subtract from the time stamp.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_datetime_subtractduration(LibMCEnv_DateTime pDateTime, LibMCEnv_DateTimeDifference pDuration);

/**
* Shifts the date time by years. Takes leap years into account. Fails if the shift will make it move outside of the year 1900 or 1000000.
*
* @param[in] pDateTime - DateTime instance.
* @param[in] nDeltaYears - Years to shift the date time stamp.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_datetime_shiftbyyears(LibMCEnv_DateTime pDateTime, LibMCEnv_int64 nDeltaYears);

/**
* Shifts the date time by days. Fails if the shift will make it move outside of the year 1900 or 1000000.
*
* @param[in] pDateTime - DateTime instance.
* @param[in] nDeltaDays - Days to shift the date time stamp.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_datetime_shiftbydays(LibMCEnv_DateTime pDateTime, LibMCEnv_int64 nDeltaDays);

/**
* Shifts the date time by hours. Fails if the shift will make it move outside of the year 1900 or 1000000.
*
* @param[in] pDateTime - DateTime instance.
* @param[in] nDeltaHours - Hours to shift the date time stamp.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_datetime_shiftbyhours(LibMCEnv_DateTime pDateTime, LibMCEnv_int64 nDeltaHours);

/**
* Shifts the date time by minutes. Fails if the shift will make it move outside of the year 1900 or 1000000.
*
* @param[in] pDateTime - DateTime instance.
* @param[in] nDeltaMinutes - Minutes to shift the date time stamp.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_datetime_shiftbyminutes(LibMCEnv_DateTime pDateTime, LibMCEnv_int64 nDeltaMinutes);

/**
* Shifts the date time by seconds. Fails if the shift will make it move outside of the year 1900 or 1000000.
*
* @param[in] pDateTime - DateTime instance.
* @param[in] nDeltaSeconds - Seconds to shift the date time stamp.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_datetime_shiftbyseconds(LibMCEnv_DateTime pDateTime, LibMCEnv_int64 nDeltaSeconds);

/**
* Shifts the date time by milliseconds. Fails if the shift will make it move outside of the year 1900 or 1000000.
*
* @param[in] pDateTime - DateTime instance.
* @param[in] nDeltaMilliseconds - Milliseconds to shift the date time stamp.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_datetime_shiftbymilliseconds(LibMCEnv_DateTime pDateTime, LibMCEnv_int64 nDeltaMilliseconds);

/**
* Shifts the date time by microseconds. Fails if the shift will make it move outside of the year 1900 or 1000000.
*
* @param[in] pDateTime - DateTime instance.
* @param[in] nDeltaMicroseconds - Microseconds to shift the date time stamp.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_datetime_shiftbymicroseconds(LibMCEnv_DateTime pDateTime, LibMCEnv_int64 nDeltaMicroseconds);

/**
* Rounds down the timestamp to the start of the year. Takes leap years into account.
*
* @param[in] pDateTime - DateTime instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_datetime_rounddowntoyear(LibMCEnv_DateTime pDateTime);

/**
* Rounds down the timestamp to the start of the month. Takes leap years into account.
*
* @param[in] pDateTime - DateTime instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_datetime_rounddowntomonth(LibMCEnv_DateTime pDateTime);

/**
* Rounds down the timestamp to the full day.
*
* @param[in] pDateTime - DateTime instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_datetime_rounddowntoday(LibMCEnv_DateTime pDateTime);

/**
* Rounds down the timestamp to the full hour.
*
* @param[in] pDateTime - DateTime instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_datetime_rounddowntohour(LibMCEnv_DateTime pDateTime);

/**
* Rounds down the timestamp to the full minute.
*
* @param[in] pDateTime - DateTime instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_datetime_rounddowntominute(LibMCEnv_DateTime pDateTime);

/**
* Rounds down the timestamp to the full second.
*
* @param[in] pDateTime - DateTime instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_datetime_rounddowntoseconds(LibMCEnv_DateTime pDateTime);

/**
* Rounds down the timestamp to the full millisecond.
*
* @param[in] pDateTime - DateTime instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_datetime_rounddowntomilliseconds(LibMCEnv_DateTime pDateTime);

/**
* Rounds up the timestamp to the start of the year. Takes leap years into account.
*
* @param[in] pDateTime - DateTime instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_datetime_rounduptoyear(LibMCEnv_DateTime pDateTime);

/**
* Rounds up the timestamp to the start of the month. Takes leap years into account.
*
* @param[in] pDateTime - DateTime instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_datetime_rounduptomonth(LibMCEnv_DateTime pDateTime);

/**
* Rounds up the timestamp to the full day.
*
* @param[in] pDateTime - DateTime instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_datetime_rounduptoday(LibMCEnv_DateTime pDateTime);

/**
* Rounds up the timestamp to the full hour.
*
* @param[in] pDateTime - DateTime instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_datetime_rounduptohour(LibMCEnv_DateTime pDateTime);

/**
* Rounds up the timestamp to the full minute.
*
* @param[in] pDateTime - DateTime instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_datetime_rounduptominute(LibMCEnv_DateTime pDateTime);

/**
* Rounds up the timestamp to the full second.
*
* @param[in] pDateTime - DateTime instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_datetime_rounduptoseconds(LibMCEnv_DateTime pDateTime);

/**
* Rounds up the timestamp to the full millisecond.
*
* @param[in] pDateTime - DateTime instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_datetime_rounduptomilliseconds(LibMCEnv_DateTime pDateTime);

/*************************************************************************************************************************
 Class definition for MeshObject
**************************************************************************************************************************/

/**
* Returns the name of the Mesh Object.
*
* @param[in] pMeshObject - MeshObject instance.
* @param[in] nNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNameBuffer -  buffer of Returns the name of the mesh object., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_meshobject_getname(LibMCEnv_MeshObject pMeshObject, const LibMCEnv_uint32 nNameBufferSize, LibMCEnv_uint32* pNameNeededChars, char * pNameBuffer);

/**
* Returns the UUID of the mesh object.
*
* @param[in] pMeshObject - MeshObject instance.
* @param[in] nUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pUUIDBuffer -  buffer of Returns mesh uuid., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_meshobject_getuuid(LibMCEnv_MeshObject pMeshObject, const LibMCEnv_uint32 nUUIDBufferSize, LibMCEnv_uint32* pUUIDNeededChars, char * pUUIDBuffer);

/**
* Returns the number of triangles in the mesh.
*
* @param[in] pMeshObject - MeshObject instance.
* @param[out] pTriangleCount - Number of triangles.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_meshobject_gettrianglecount(LibMCEnv_MeshObject pMeshObject, LibMCEnv_uint32 * pTriangleCount);

/**
* Returns the number of vertices in the mesh.
*
* @param[in] pMeshObject - MeshObject instance.
* @param[out] pVertexCount - Number of vertices.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_meshobject_getvertexcount(LibMCEnv_MeshObject pMeshObject, LibMCEnv_uint32 * pVertexCount);

/**
* Checks if the mesh topology is closed and every edge has two adjacent faces.
*
* @param[in] pMeshObject - MeshObject instance.
* @param[out] pManifoldResult - Returns true if the mesh is manifold.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_meshobject_ismanifold(LibMCEnv_MeshObject pMeshObject, bool * pManifoldResult);

/**
* Checks if the mesh topology is oriented, so no Mobius strip or Klein bottle for example.
*
* @param[in] pMeshObject - MeshObject instance.
* @param[out] pOrientedResult - Returns true if the mesh is oriented.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_meshobject_isoriented(LibMCEnv_MeshObject pMeshObject, bool * pOrientedResult);

/**
* Checks if the mesh topology is oriented and manifold, e.g is describing a 3D volume.
*
* @param[in] pMeshObject - MeshObject instance.
* @param[out] pWatertightResult - Returns true if the mesh is watertight.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_meshobject_iswatertight(LibMCEnv_MeshObject pMeshObject, bool * pWatertightResult);

/**
* Returns the maximum vertex ID occuring in the mesh.
*
* @param[in] pMeshObject - MeshObject instance.
* @param[out] pMaxVertexID - All vertices will have an ID smaller or equal this ID.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_meshobject_getmaxvertexid(LibMCEnv_MeshObject pMeshObject, LibMCEnv_uint32 * pMaxVertexID);

/**
* Returns if a vertex with an ID exists.
*
* @param[in] pMeshObject - MeshObject instance.
* @param[in] nVertexID - Vertex ID to check.
* @param[out] pVertexExists - Returns true if the vertex exists.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_meshobject_vertexexists(LibMCEnv_MeshObject pMeshObject, LibMCEnv_uint32 nVertexID, bool * pVertexExists);

/**
* Returns position of a vertex. Will return 0 if vertex does not exist.
*
* @param[in] pMeshObject - MeshObject instance.
* @param[in] nVertexID - Vertex ID to retrieve.
* @param[out] pX - Returns the X coordinate of the vertex. Returns 0 if vertex does not exist.
* @param[out] pY - Returns the Y coordinate of the vertex. Returns 0 if vertex does not exist.
* @param[out] pZ - Returns the Z coordinate of the vertex. Returns 0 if vertex does not exist.
* @param[out] pVertexExists - Returns true if the vertex exists.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_meshobject_getvertex(LibMCEnv_MeshObject pMeshObject, LibMCEnv_uint32 nVertexID, LibMCEnv_double * pX, LibMCEnv_double * pY, LibMCEnv_double * pZ, bool * pVertexExists);

/**
* Returns all IDs of the vertices. Ordered sequentially.
*
* @param[in] pMeshObject - MeshObject instance.
* @param[in] nVertexIDsBufferSize - Number of elements in buffer
* @param[out] pVertexIDsNeededCount - will be filled with the count of the written elements, or needed buffer size.
* @param[out] pVertexIDsBuffer - uint32  buffer of Vertex ID array.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_meshobject_getvertexids(LibMCEnv_MeshObject pMeshObject, const LibMCEnv_uint64 nVertexIDsBufferSize, LibMCEnv_uint64* pVertexIDsNeededCount, LibMCEnv_uint32 * pVertexIDsBuffer);

/**
* Returns all the vertex information. Ordered sequentially by ID.
*
* @param[in] pMeshObject - MeshObject instance.
* @param[in] nVerticesBufferSize - Number of elements in buffer
* @param[out] pVerticesNeededCount - will be filled with the count of the written elements, or needed buffer size.
* @param[out] pVerticesBuffer - MeshVertex3D  buffer of Vertex array.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_meshobject_getallvertices(LibMCEnv_MeshObject pMeshObject, const LibMCEnv_uint64 nVerticesBufferSize, LibMCEnv_uint64* pVerticesNeededCount, LibMCEnv::sMeshVertex3D * pVerticesBuffer);

/**
* Returns the maximum triangle ID occuring in the mesh.
*
* @param[in] pMeshObject - MeshObject instance.
* @param[out] pMaxTriangleID - All triangles will have an ID smaller or equal this ID.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_meshobject_getmaxtriangleid(LibMCEnv_MeshObject pMeshObject, LibMCEnv_uint32 * pMaxTriangleID);

/**
* Returns if a triangle with an ID exists.
*
* @param[in] pMeshObject - MeshObject instance.
* @param[in] nTriangleID - Triangle ID to check.
* @param[out] pTriangleExists - Returns true if the triangle exists.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_meshobject_triangeexists(LibMCEnv_MeshObject pMeshObject, LibMCEnv_uint32 nTriangleID, bool * pTriangleExists);

/**
* Returns vertex IDs of a triangle. Will return 0 if triangle does not exist.
*
* @param[in] pMeshObject - MeshObject instance.
* @param[in] nTriangleID - Triangle ID to retrieve.
* @param[out] pVertex1ID - Returns the vertex ID of the first corner. Returns 0 if triangle does not exist.
* @param[out] pVertex2ID - Returns the vertex ID of the second corner. Returns 0 if triangle does not exist.
* @param[out] pVertex3ID - Returns the vertex ID of the third corner. Returns 0 if triangle does not exist.
* @param[out] pVertexExists - Returns true if the triangle exists.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_meshobject_gettriangle(LibMCEnv_MeshObject pMeshObject, LibMCEnv_uint32 nTriangleID, LibMCEnv_uint32 * pVertex1ID, LibMCEnv_uint32 * pVertex2ID, LibMCEnv_uint32 * pVertex3ID, bool * pVertexExists);

/**
* Returns all IDs of the triangles. Ordered sequentially.
*
* @param[in] pMeshObject - MeshObject instance.
* @param[in] nTriangleIDsBufferSize - Number of elements in buffer
* @param[out] pTriangleIDsNeededCount - will be filled with the count of the written elements, or needed buffer size.
* @param[out] pTriangleIDsBuffer - uint32  buffer of Triangle ID array.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_meshobject_gettriangleids(LibMCEnv_MeshObject pMeshObject, const LibMCEnv_uint64 nTriangleIDsBufferSize, LibMCEnv_uint64* pTriangleIDsNeededCount, LibMCEnv_uint32 * pTriangleIDsBuffer);

/**
* Returns all the triangle information. Ordered sequentially by ID.
*
* @param[in] pMeshObject - MeshObject instance.
* @param[in] nTrianglesBufferSize - Number of elements in buffer
* @param[out] pTrianglesNeededCount - will be filled with the count of the written elements, or needed buffer size.
* @param[out] pTrianglesBuffer - MeshTriangle3D  buffer of Triangle array.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_meshobject_getalltriangles(LibMCEnv_MeshObject pMeshObject, const LibMCEnv_uint64 nTrianglesBufferSize, LibMCEnv_uint64* pTrianglesNeededCount, LibMCEnv::sMeshTriangle3D * pTrianglesBuffer);

/*************************************************************************************************************************
 Class definition for ToolpathPart
**************************************************************************************************************************/

/**
* Returns Part Name.
*
* @param[in] pToolpathPart - ToolpathPart instance.
* @param[in] nNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNameBuffer -  buffer of Returns toolpath part name., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_toolpathpart_getname(LibMCEnv_ToolpathPart pToolpathPart, const LibMCEnv_uint32 nNameBufferSize, LibMCEnv_uint32* pNameNeededChars, char * pNameBuffer);

/**
* Returns Part UUID.
*
* @param[in] pToolpathPart - ToolpathPart instance.
* @param[in] nUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pUUIDBuffer -  buffer of Returns toolpath part uuid., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_toolpathpart_getuuid(LibMCEnv_ToolpathPart pToolpathPart, const LibMCEnv_uint32 nUUIDBufferSize, LibMCEnv_uint32* pUUIDNeededChars, char * pUUIDBuffer);

/**
* Returns Mesh UUID of the part.
*
* @param[in] pToolpathPart - ToolpathPart instance.
* @param[in] nMeshUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pMeshUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pMeshUUIDBuffer -  buffer of Returns toolpath part mesh uuid., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_toolpathpart_getmeshuuid(LibMCEnv_ToolpathPart pToolpathPart, const LibMCEnv_uint32 nMeshUUIDBufferSize, LibMCEnv_uint32* pMeshUUIDNeededChars, char * pMeshUUIDBuffer);

/**
* Returns Mesh Transform of the part.
*
* @param[in] pToolpathPart - ToolpathPart instance.
* @param[out] pMeshUUID - Returns the mesh transform of the toolpath.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_toolpathpart_gettransform(LibMCEnv_ToolpathPart pToolpathPart, LibMCEnv::sToolpathPartTransform * pMeshUUID);

/*************************************************************************************************************************
 Class definition for ToolpathLayer
**************************************************************************************************************************/

/**
* Retrieves the layerdata's uuid
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[in] nUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pUUIDBuffer -  buffer of Returns the uuid value., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_toolpathlayer_getlayerdatauuid(LibMCEnv_ToolpathLayer pToolpathLayer, const LibMCEnv_uint32 nUUIDBufferSize, LibMCEnv_uint32* pUUIDNeededChars, char * pUUIDBuffer);

/**
* Retrieves the count of segments.
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[out] pCount - Count
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_toolpathlayer_getsegmentcount(LibMCEnv_ToolpathLayer pToolpathLayer, LibMCEnv_uint32 * pCount);

/**
* Retrieves the segment type and point count information .
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[in] nIndex - Index. Must be between 0 and Count - 1.
* @param[out] pType - Segment Type
* @param[out] pPointCount - Point count of segment.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_toolpathlayer_getsegmentinfo(LibMCEnv_ToolpathLayer pToolpathLayer, LibMCEnv_uint32 nIndex, LibMCEnv::eToolpathSegmentType * pType, LibMCEnv_uint32 * pPointCount);

/**
* Retrieves the segment type.
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[in] nIndex - Index. Must be between 0 and Count - 1.
* @param[out] pType - Segment Type
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_toolpathlayer_getsegmenttype(LibMCEnv_ToolpathLayer pToolpathLayer, LibMCEnv_uint32 nIndex, LibMCEnv::eToolpathSegmentType * pType);

/**
* Returns if segment is a loop.
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[in] nIndex - Index. Must be between 0 and Count - 1.
* @param[out] pIsLoop - Flag if segment is a loop.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_toolpathlayer_segmentisloop(LibMCEnv_ToolpathLayer pToolpathLayer, LibMCEnv_uint32 nIndex, bool * pIsLoop);

/**
* Returns if segment is a polyline.
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[in] nIndex - Index. Must be between 0 and Count - 1.
* @param[out] pIsPolyline - Flag if segment is a polyline.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_toolpathlayer_segmentispolyline(LibMCEnv_ToolpathLayer pToolpathLayer, LibMCEnv_uint32 nIndex, bool * pIsPolyline);

/**
* Returns if segment is a hatch segment.
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[in] nIndex - Index. Must be between 0 and Count - 1.
* @param[out] pIsHatchSegment - Flag if segment is a hatch segment.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_toolpathlayer_segmentishatchsegment(LibMCEnv_ToolpathLayer pToolpathLayer, LibMCEnv_uint32 nIndex, bool * pIsHatchSegment);

/**
* Retrieves the segment integer attribute with the corresponding ID. Fails if attribute does not exist or does have different type.
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[in] nIndex - Segment Index. Must be between 0 and Count - 1.
* @param[in] nAttributeID - ID of the attribute.
* @param[out] pValue - Attribute Value.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_toolpathlayer_getsegmentintegerattribute(LibMCEnv_ToolpathLayer pToolpathLayer, LibMCEnv_uint32 nIndex, LibMCEnv_uint32 nAttributeID, LibMCEnv_int64 * pValue);

/**
* Retrieves the segment double attribute with the corresponding ID. Fails if attribute does not exist or does have different type.
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[in] nIndex - Segment Index. Must be between 0 and Count - 1.
* @param[in] nAttributeID - ID of the attribute.
* @param[out] pValue - Attribute Value.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_toolpathlayer_getsegmentdoubleattribute(LibMCEnv_ToolpathLayer pToolpathLayer, LibMCEnv_uint32 nIndex, LibMCEnv_uint32 nAttributeID, LibMCEnv_double * pValue);

/**
* Checks if a segment attribute is registered.
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[in] pNamespace - Namespace of the attribute.
* @param[in] pAttributeName - Name of the attribute.
* @param[out] pValueExists - Flag if attribute is registered.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_toolpathlayer_hascustomsegmentattribute(LibMCEnv_ToolpathLayer pToolpathLayer, const char * pNamespace, const char * pAttributeName, bool * pValueExists);

/**
* Finds a segment attribute ID. Fails if attribute is not registered.
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[in] pNamespace - Namespace of the attribute.
* @param[in] pAttributeName - Name of the attribute.
* @param[out] pAttributeID - ID of the attribute.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_toolpathlayer_findcustomsegmentattributeid(LibMCEnv_ToolpathLayer pToolpathLayer, const char * pNamespace, const char * pAttributeName, LibMCEnv_uint32 * pAttributeID);

/**
* Finds a segment attribute type. Fails if attribute is not registered.
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[in] pNamespace - Namespace of the attribute.
* @param[in] pAttributeName - Name of the attribute.
* @param[out] pAttributeType - Type of the attribute.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_toolpathlayer_findcustomsegmentattributetype(LibMCEnv_ToolpathLayer pToolpathLayer, const char * pNamespace, const char * pAttributeName, LibMCEnv::eToolpathAttributeType * pAttributeType);

/**
* Finds a segment attribute ID and type. Fails if attribute is not registered.
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[in] pNamespace - Namespace of the attribute.
* @param[in] pAttributeName - Name of the attribute.
* @param[out] pAttributeID - ID of the attribute.
* @param[out] pAttributeType - Type of the attribute.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_toolpathlayer_findcustomsegmentattributeinfo(LibMCEnv_ToolpathLayer pToolpathLayer, const char * pNamespace, const char * pAttributeName, LibMCEnv_uint32 * pAttributeID, LibMCEnv::eToolpathAttributeType * pAttributeType);

/**
* Retrieves the number of points in the segment. For type hatch, the points are taken pairwise.
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[in] nIndex - Index. Must be between 0 and Count - 1.
* @param[out] pHatchCount - Hatch count of segment.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_toolpathlayer_getsegmentpointcount(LibMCEnv_ToolpathLayer pToolpathLayer, LibMCEnv_uint32 nIndex, LibMCEnv_uint32 * pHatchCount);

/**
* Retrieves the number of hatches in the segment (i.e. PointCount / 2). Returns 0 if segment is not of type hatch.
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[in] nIndex - Index. Must be between 0 and Count - 1.
* @param[out] pHatchCount - Hatch count of segment.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_toolpathlayer_getsegmenthatchcount(LibMCEnv_ToolpathLayer pToolpathLayer, LibMCEnv_uint32 nIndex, LibMCEnv_uint32 * pHatchCount);

/**
* Retrieves the assigned segment profile uuid.
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[in] nIndex - Index. Must be between 0 and Count - 1.
* @param[in] nProfileUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pProfileUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pProfileUUIDBuffer -  buffer of Segment Profile UUID, may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_toolpathlayer_getsegmentprofileuuid(LibMCEnv_ToolpathLayer pToolpathLayer, LibMCEnv_uint32 nIndex, const LibMCEnv_uint32 nProfileUUIDBufferSize, LibMCEnv_uint32* pProfileUUIDNeededChars, char * pProfileUUIDBuffer);

/**
* Retrieves an assigned profile custom value.
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[in] nIndex - Index. Must be between 0 and Count - 1.
* @param[in] pNamespace - Namespace to query for.
* @param[in] pValueName - Value Name to query for.
* @param[out] pHasValue - Returns true if value exist.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_toolpathlayer_segmentprofilehasvalue(LibMCEnv_ToolpathLayer pToolpathLayer, LibMCEnv_uint32 nIndex, const char * pNamespace, const char * pValueName, bool * pHasValue);

/**
* Retrieves an assigned profile custom value. Fails if value does not exist.
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[in] nIndex - Index. Must be between 0 and Count - 1.
* @param[in] pNamespace - Namespace to query for.
* @param[in] pValueName - Value Name to query for.
* @param[in] nValueBufferSize - size of the buffer (including trailing 0)
* @param[out] pValueNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pValueBuffer -  buffer of String Value., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_toolpathlayer_getsegmentprofilevalue(LibMCEnv_ToolpathLayer pToolpathLayer, LibMCEnv_uint32 nIndex, const char * pNamespace, const char * pValueName, const LibMCEnv_uint32 nValueBufferSize, LibMCEnv_uint32* pValueNeededChars, char * pValueBuffer);

/**
* Retrieves an assigned profile custom value.
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[in] nIndex - Index. Must be between 0 and Count - 1.
* @param[in] pNamespace - Namespace to query for.
* @param[in] pValueName - Value Name to query for.
* @param[in] pDefaultValue - Default value if value does not exist.
* @param[in] nValueBufferSize - size of the buffer (including trailing 0)
* @param[out] pValueNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pValueBuffer -  buffer of String Value., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_toolpathlayer_getsegmentprofilevaluedef(LibMCEnv_ToolpathLayer pToolpathLayer, LibMCEnv_uint32 nIndex, const char * pNamespace, const char * pValueName, const char * pDefaultValue, const LibMCEnv_uint32 nValueBufferSize, LibMCEnv_uint32* pValueNeededChars, char * pValueBuffer);

/**
* Retrieves an assigned profile custom double value. Fails if value does not exist or is not a double value.
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[in] nIndex - Index. Must be between 0 and Count - 1.
* @param[in] pNamespace - Namespace to query for.
* @param[in] pValueName - Value Name to query for.
* @param[out] pValue - Double Value.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_toolpathlayer_getsegmentprofiledoublevalue(LibMCEnv_ToolpathLayer pToolpathLayer, LibMCEnv_uint32 nIndex, const char * pNamespace, const char * pValueName, LibMCEnv_double * pValue);

/**
* Retrieves an assigned profile custom double value. Fails if value exists but is not a double value.
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[in] nIndex - Index. Must be between 0 and Count - 1.
* @param[in] pNamespace - Namespace to query for.
* @param[in] pValueName - Value Name to query for.
* @param[in] dDefaultValue - Default value if value does not exist.
* @param[out] pValue - Double Value.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_toolpathlayer_getsegmentprofiledoublevaluedef(LibMCEnv_ToolpathLayer pToolpathLayer, LibMCEnv_uint32 nIndex, const char * pNamespace, const char * pValueName, LibMCEnv_double dDefaultValue, LibMCEnv_double * pValue);

/**
* Retrieves an assigned profile custom integer value. Fails if value does not exist or is not a integer value.
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[in] nIndex - Index. Must be between 0 and Count - 1.
* @param[in] pNamespace - Namespace to query for.
* @param[in] pValueName - Value Name to query for.
* @param[out] pValue - Integer Value.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_toolpathlayer_getsegmentprofileintegervalue(LibMCEnv_ToolpathLayer pToolpathLayer, LibMCEnv_uint32 nIndex, const char * pNamespace, const char * pValueName, LibMCEnv_int64 * pValue);

/**
* Retrieves an assigned profile custom integer value. Fails if value exists but is not a integer value.
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[in] nIndex - Index. Must be between 0 and Count - 1.
* @param[in] pNamespace - Namespace to query for.
* @param[in] pValueName - Value Name to query for.
* @param[in] nDefaultValue - Default value if value does not exist.
* @param[out] pValue - Integer Value.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_toolpathlayer_getsegmentprofileintegervaluedef(LibMCEnv_ToolpathLayer pToolpathLayer, LibMCEnv_uint32 nIndex, const char * pNamespace, const char * pValueName, LibMCEnv_int64 nDefaultValue, LibMCEnv_int64 * pValue);

/**
* Retrieves an assigned profile custom boolean value. A Boolean value is either an integer value, or strings of the form true or false (case insensitive). Fails if value does not exist or is not a bool value.
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[in] nIndex - Index. Must be between 0 and Count - 1.
* @param[in] pNamespace - Namespace to query for.
* @param[in] pValueName - Value Name to query for.
* @param[out] pValue - Boolean Value.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_toolpathlayer_getsegmentprofileboolvalue(LibMCEnv_ToolpathLayer pToolpathLayer, LibMCEnv_uint32 nIndex, const char * pNamespace, const char * pValueName, bool * pValue);

/**
* Retrieves an assigned profile custom boolean value. A Boolean value is either an integer value, or strings of the form true or false (case insensitive). Fails if value exists but is not a bool value.
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[in] nIndex - Index. Must be between 0 and Count - 1.
* @param[in] pNamespace - Namespace to query for.
* @param[in] pValueName - Value Name to query for.
* @param[in] bDefaultValue - Default value if value does not exist.
* @param[out] pValue - Boolean Value.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_toolpathlayer_getsegmentprofileboolvaluedef(LibMCEnv_ToolpathLayer pToolpathLayer, LibMCEnv_uint32 nIndex, const char * pNamespace, const char * pValueName, bool bDefaultValue, bool * pValue);

/**
* Retrieves an assigned profile value of a standard type. Fails if value does not exist or is not a double value.
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[in] nIndex - Index. Must be between 0 and Count - 1.
* @param[in] eValueType - Enum to query for. MUST NOT be custom.
* @param[out] pValue - Double Value
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_toolpathlayer_getsegmentprofiletypedvalue(LibMCEnv_ToolpathLayer pToolpathLayer, LibMCEnv_uint32 nIndex, LibMCEnv::eToolpathProfileValueType eValueType, LibMCEnv_double * pValue);

/**
* Retrieves an assigned profile value of a standard type. Fails if value exists but is not a double value.
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[in] nIndex - Index. Must be between 0 and Count - 1.
* @param[in] eValueType - Enum to query for. MUST NOT be custom.
* @param[in] dDefaultValue - Default value if value does not exist.
* @param[out] pValue - Double Value
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_toolpathlayer_getsegmentprofiletypedvaluedef(LibMCEnv_ToolpathLayer pToolpathLayer, LibMCEnv_uint32 nIndex, LibMCEnv::eToolpathProfileValueType eValueType, LibMCEnv_double dDefaultValue, LibMCEnv_double * pValue);

/**
* Retrieves the assigned segment part uuid.
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[in] nIndex - Index. Must be between 0 and Count - 1.
* @param[in] nPartUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pPartUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pPartUUIDBuffer -  buffer of Segment Part UUID, may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_toolpathlayer_getsegmentpartuuid(LibMCEnv_ToolpathLayer pToolpathLayer, LibMCEnv_uint32 nIndex, const LibMCEnv_uint32 nPartUUIDBufferSize, LibMCEnv_uint32* pPartUUIDNeededChars, char * pPartUUIDBuffer);

/**
* Retrieves the assigned segment point list. For type hatch, the points are taken pairwise.
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[in] nIndex - Index. Must be between 0 and Count - 1.
* @param[in] nPointDataBufferSize - Number of elements in buffer
* @param[out] pPointDataNeededCount - will be filled with the count of the written elements, or needed buffer size.
* @param[out] pPointDataBuffer - Position2D  buffer of The point data array. Positions are absolute in units.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_toolpathlayer_getsegmentpointdata(LibMCEnv_ToolpathLayer pToolpathLayer, LibMCEnv_uint32 nIndex, const LibMCEnv_uint64 nPointDataBufferSize, LibMCEnv_uint64* pPointDataNeededCount, LibMCEnv::sPosition2D * pPointDataBuffer);

/**
* Retrieves the assigned segment hatch list. Fails if segment type is not hatch.
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[in] nIndex - Index. Must be between 0 and Count - 1.
* @param[in] nHatchDataBufferSize - Number of elements in buffer
* @param[out] pHatchDataNeededCount - will be filled with the count of the written elements, or needed buffer size.
* @param[out] pHatchDataBuffer - Hatch2D  buffer of The hatch data array. Positions are absolute in units.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_toolpathlayer_getsegmenthatchdata(LibMCEnv_ToolpathLayer pToolpathLayer, LibMCEnv_uint32 nIndex, const LibMCEnv_uint64 nHatchDataBufferSize, LibMCEnv_uint64* pHatchDataNeededCount, LibMCEnv::sHatch2D * pHatchDataBuffer);

/**
* Retrieves the assigned segment point list. For type hatch, the points are taken pairwise.
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[in] nIndex - Index. Must be between 0 and Count - 1.
* @param[in] nPointDataBufferSize - Number of elements in buffer
* @param[out] pPointDataNeededCount - will be filled with the count of the written elements, or needed buffer size.
* @param[out] pPointDataBuffer - FloatPosition2D  buffer of The point data array. Positions are absolute in mm.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_toolpathlayer_getsegmentpointdatainmm(LibMCEnv_ToolpathLayer pToolpathLayer, LibMCEnv_uint32 nIndex, const LibMCEnv_uint64 nPointDataBufferSize, LibMCEnv_uint64* pPointDataNeededCount, LibMCEnv::sFloatPosition2D * pPointDataBuffer);

/**
* Retrieves the assigned segment hatch list. Fails if segment type is not hatch.
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[in] nIndex - Index. Must be between 0 and Count - 1.
* @param[in] nHatchDataBufferSize - Number of elements in buffer
* @param[out] pHatchDataNeededCount - will be filled with the count of the written elements, or needed buffer size.
* @param[out] pHatchDataBuffer - FloatHatch2D  buffer of The hatch data array. Positions are absolute in mm.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_toolpathlayer_getsegmenthatchdatainmm(LibMCEnv_ToolpathLayer pToolpathLayer, LibMCEnv_uint32 nIndex, const LibMCEnv_uint64 nHatchDataBufferSize, LibMCEnv_uint64* pHatchDataNeededCount, LibMCEnv::sFloatHatch2D * pHatchDataBuffer);

/**
* Retrieves the layers Z Value in units.
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[out] pZValue - Z Value of the layer in units.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_toolpathlayer_getzvalue(LibMCEnv_ToolpathLayer pToolpathLayer, LibMCEnv_int32 * pZValue);

/**
* Retrieves the layers Z Value in mm.
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[out] pZValue - Z Value of the layer in mm.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_toolpathlayer_getzvalueinmm(LibMCEnv_ToolpathLayer pToolpathLayer, LibMCEnv_double * pZValue);

/**
* Retrieves the toolpath units in mm.
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[out] pUnits - Toolpath units.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_toolpathlayer_getunits(LibMCEnv_ToolpathLayer pToolpathLayer, LibMCEnv_double * pUnits);

/**
* Retrieves the number of metadata nodes in the build file.
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[out] pMetaDataCount - Meta Data information.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_toolpathlayer_getmetadatacount(LibMCEnv_ToolpathLayer pToolpathLayer, LibMCEnv_uint32 * pMetaDataCount);

/**
* Returns the namespace and identifier of the given metadata index.
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[in] nMetaDataIndex - Index of metadata to return (0-based).
* @param[in] nNamespaceBufferSize - size of the buffer (including trailing 0)
* @param[out] pNamespaceNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNamespaceBuffer -  buffer of Namespace of the metadata, may be NULL
* @param[in] nNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNameBuffer -  buffer of Name of the metadata, may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_toolpathlayer_getmetadatainfo(LibMCEnv_ToolpathLayer pToolpathLayer, LibMCEnv_uint32 nMetaDataIndex, const LibMCEnv_uint32 nNamespaceBufferSize, LibMCEnv_uint32* pNamespaceNeededChars, char * pNamespaceBuffer, const LibMCEnv_uint32 nNameBufferSize, LibMCEnv_uint32* pNameNeededChars, char * pNameBuffer);

/**
* Returns the metadata XML content of the given metadata index.
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[in] nMetaDataIndex - Index of metadata to return (0-based).
* @param[out] pXMLNode - XML Metadata Object
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_toolpathlayer_getmetadatacontent(LibMCEnv_ToolpathLayer pToolpathLayer, LibMCEnv_uint32 nMetaDataIndex, LibMCEnv_XMLDocumentNode * pXMLNode);

/**
* Checks if a metadata exists in the build file.
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[in] pNamespace - Namespace of the metadata
* @param[in] pName - Name of the metadata
* @param[out] pMetaDataExists - Returns true if metadata exists and is unique.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_toolpathlayer_hasuniquemetadata(LibMCEnv_ToolpathLayer pToolpathLayer, const char * pNamespace, const char * pName, bool * pMetaDataExists);

/**
* Returns the given metadata XML content of the build file. Fails if metadata content does not exist or is not unique.
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[in] pNamespace - Namespace of the metadata
* @param[in] pName - Name of the metadata
* @param[out] pXMLNode - XML Metadata Object
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_toolpathlayer_finduniquemetadata(LibMCEnv_ToolpathLayer pToolpathLayer, const char * pNamespace, const char * pName, LibMCEnv_XMLDocumentNode * pXMLNode);

/**
* Calculates the layers extents in units
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[out] pMinX - Minimal X value of the layer in units.
* @param[out] pMinY - Minimal Y value of the layer in units.
* @param[out] pMaxX - Maximal X value of the layer in units.
* @param[out] pMaxY - Maximal Y value of the layer in units.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_toolpathlayer_calculateextents(LibMCEnv_ToolpathLayer pToolpathLayer, LibMCEnv_int32 * pMinX, LibMCEnv_int32 * pMinY, LibMCEnv_int32 * pMaxX, LibMCEnv_int32 * pMaxY);

/**
* Calculates the layers extents in millimeters
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[out] pMinX - Minimal X value of the layer in mm.
* @param[out] pMinY - Minimal Y value of the layer in mm.
* @param[out] pMaxX - Maximal X value of the layer in mm.
* @param[out] pMaxY - Maximal Y value of the layer in mm.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_toolpathlayer_calculateextentsinmm(LibMCEnv_ToolpathLayer pToolpathLayer, LibMCEnv_double * pMinX, LibMCEnv_double * pMinY, LibMCEnv_double * pMaxX, LibMCEnv_double * pMaxY);

/*************************************************************************************************************************
 Class definition for ToolpathAccessor
**************************************************************************************************************************/

/**
* Returns Toolpath storage UUID.
*
* @param[in] pToolpathAccessor - ToolpathAccessor instance.
* @param[in] nStorageUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pStorageUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pStorageUUIDBuffer -  buffer of Returns toolpath storage uuid., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_toolpathaccessor_getstorageuuid(LibMCEnv_ToolpathAccessor pToolpathAccessor, const LibMCEnv_uint32 nStorageUUIDBufferSize, LibMCEnv_uint32* pStorageUUIDNeededChars, char * pStorageUUIDBuffer);

/**
* Returns UUID of the toolpath's build file.
*
* @param[in] pToolpathAccessor - ToolpathAccessor instance.
* @param[in] nBuildUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pBuildUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pBuildUUIDBuffer -  buffer of Returns build uuid., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_toolpathaccessor_getbuilduuid(LibMCEnv_ToolpathAccessor pToolpathAccessor, const LibMCEnv_uint32 nBuildUUIDBufferSize, LibMCEnv_uint32* pBuildUUIDNeededChars, char * pBuildUUIDBuffer);

/**
* Returns layer count.
*
* @param[in] pToolpathAccessor - ToolpathAccessor instance.
* @param[out] pLayerCount - Returns layer count.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_toolpathaccessor_getlayercount(LibMCEnv_ToolpathAccessor pToolpathAccessor, LibMCEnv_uint32 * pLayerCount);

/**
* Registers a new custom segment attribute to be read.
*
* @param[in] pToolpathAccessor - ToolpathAccessor instance.
* @param[in] pNameSpace - Namespace of the custom attribute.
* @param[in] pAttributeName - Name of the custom attribute.
* @param[in] eAttributeType - Attribute Type.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_toolpathaccessor_registercustomsegmentattribute(LibMCEnv_ToolpathAccessor pToolpathAccessor, const char * pNameSpace, const char * pAttributeName, LibMCEnv::eToolpathAttributeType eAttributeType);

/**
* Reads and returns a layer object.
*
* @param[in] pToolpathAccessor - ToolpathAccessor instance.
* @param[in] nLayerIndex - Layer Index.
* @param[out] pLayerData - Toolpath layer object.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_toolpathaccessor_loadlayer(LibMCEnv_ToolpathAccessor pToolpathAccessor, LibMCEnv_uint32 nLayerIndex, LibMCEnv_ToolpathLayer * pLayerData);

/**
* Retrieves the toolpath units in mm.
*
* @param[in] pToolpathAccessor - ToolpathAccessor instance.
* @param[out] pUnits - Toolpath units.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_toolpathaccessor_getunits(LibMCEnv_ToolpathAccessor pToolpathAccessor, LibMCEnv_double * pUnits);

/**
* Retrieves the number of parts in the toolpath.
*
* @param[in] pToolpathAccessor - ToolpathAccessor instance.
* @param[out] pPartCount - Number of parts.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_toolpathaccessor_getpartcount(LibMCEnv_ToolpathAccessor pToolpathAccessor, LibMCEnv_uint32 * pPartCount);

/**
* Retrieves the part information of a toolpath.
*
* @param[in] pToolpathAccessor - ToolpathAccessor instance.
* @param[in] nPartIndex - Index of part. MUST be between 0 and PartCount-1
* @param[out] pPart - Part Instance
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_toolpathaccessor_getpart(LibMCEnv_ToolpathAccessor pToolpathAccessor, LibMCEnv_uint32 nPartIndex, LibMCEnv_ToolpathPart * pPart);

/**
* Finds the part information of a toolpath.
*
* @param[in] pToolpathAccessor - ToolpathAccessor instance.
* @param[in] pPartUUID - UUID of part.
* @param[out] pPart - Part Instance. Returns null if part does not exist.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_toolpathaccessor_findpartbyuuid(LibMCEnv_ToolpathAccessor pToolpathAccessor, const char * pPartUUID, LibMCEnv_ToolpathPart * pPart);

/**
* Retrieves the build height in units.
*
* @param[in] pToolpathAccessor - ToolpathAccessor instance.
* @param[out] pBuildHeight - Build height in units.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_toolpathaccessor_getbuildheightinunits(LibMCEnv_ToolpathAccessor pToolpathAccessor, LibMCEnv_int32 * pBuildHeight);

/**
* Retrieves the layers Z Value in units.
*
* @param[in] pToolpathAccessor - ToolpathAccessor instance.
* @param[in] nLayerIndex - Layer Index to return.
* @param[out] pZValue - Z Value of the layer in units.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_toolpathaccessor_getzvalueinunits(LibMCEnv_ToolpathAccessor pToolpathAccessor, LibMCEnv_uint32 nLayerIndex, LibMCEnv_int32 * pZValue);

/**
* Retrieves the build height in mm.
*
* @param[in] pToolpathAccessor - ToolpathAccessor instance.
* @param[out] pBuildHeight - Build height in mm.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_toolpathaccessor_getbuildheightinmm(LibMCEnv_ToolpathAccessor pToolpathAccessor, LibMCEnv_double * pBuildHeight);

/**
* Retrieves the layers Z Value in mm.
*
* @param[in] pToolpathAccessor - ToolpathAccessor instance.
* @param[in] nLayerIndex - Layer Index to return.
* @param[out] pZValue - Z Value of the layer in mm.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_toolpathaccessor_getzvalueinmm(LibMCEnv_ToolpathAccessor pToolpathAccessor, LibMCEnv_uint32 nLayerIndex, LibMCEnv_double * pZValue);

/**
* Retrieves the number of metadata nodes in the build file.
*
* @param[in] pToolpathAccessor - ToolpathAccessor instance.
* @param[out] pMetaDataCount - Meta Data information.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_toolpathaccessor_getmetadatacount(LibMCEnv_ToolpathAccessor pToolpathAccessor, LibMCEnv_uint32 * pMetaDataCount);

/**
* Returns the namespace and identifier of the given metadata index.
*
* @param[in] pToolpathAccessor - ToolpathAccessor instance.
* @param[in] nMetaDataIndex - Index of metadata to return (0-based).
* @param[in] nNamespaceBufferSize - size of the buffer (including trailing 0)
* @param[out] pNamespaceNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNamespaceBuffer -  buffer of Namespace of the metadata, may be NULL
* @param[in] nNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNameBuffer -  buffer of Name of the metadata, may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_toolpathaccessor_getmetadatainfo(LibMCEnv_ToolpathAccessor pToolpathAccessor, LibMCEnv_uint32 nMetaDataIndex, const LibMCEnv_uint32 nNamespaceBufferSize, LibMCEnv_uint32* pNamespaceNeededChars, char * pNamespaceBuffer, const LibMCEnv_uint32 nNameBufferSize, LibMCEnv_uint32* pNameNeededChars, char * pNameBuffer);

/**
* Returns the metadata XML content of the given metadata index.
*
* @param[in] pToolpathAccessor - ToolpathAccessor instance.
* @param[in] nMetaDataIndex - Index of metadata to return (0-based).
* @param[out] pXMLNode - XML Metadata Object
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_toolpathaccessor_getmetadatacontent(LibMCEnv_ToolpathAccessor pToolpathAccessor, LibMCEnv_uint32 nMetaDataIndex, LibMCEnv_XMLDocumentNode * pXMLNode);

/**
* Checks if a metadata exists in the build file.
*
* @param[in] pToolpathAccessor - ToolpathAccessor instance.
* @param[in] pNamespace - Namespace of the metadata
* @param[in] pName - Name of the metadata
* @param[out] pMetaDataExists - Returns true if metadata exists and is unique.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_toolpathaccessor_hasuniquemetadata(LibMCEnv_ToolpathAccessor pToolpathAccessor, const char * pNamespace, const char * pName, bool * pMetaDataExists);

/**
* Returns the given metadata XML content of the build file. Fails if metadata content does not exist or is not unique.
*
* @param[in] pToolpathAccessor - ToolpathAccessor instance.
* @param[in] pNamespace - Namespace of the metadata
* @param[in] pName - Name of the metadata
* @param[out] pXMLNode - XML Metadata Object
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_toolpathaccessor_finduniquemetadata(LibMCEnv_ToolpathAccessor pToolpathAccessor, const char * pNamespace, const char * pName, LibMCEnv_XMLDocumentNode * pXMLNode);

/*************************************************************************************************************************
 Class definition for BuildExecution
**************************************************************************************************************************/

/**
* Returns uuid of the build execution.
*
* @param[in] pBuildExecution - BuildExecution instance.
* @param[in] nExecutionUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pExecutionUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pExecutionUUIDBuffer -  buffer of UUID of the build execution., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_buildexecution_getuuid(LibMCEnv_BuildExecution pBuildExecution, const LibMCEnv_uint32 nExecutionUUIDBufferSize, LibMCEnv_uint32* pExecutionUUIDNeededChars, char * pExecutionUUIDBuffer);

/**
* Returns uuid of the build.
*
* @param[in] pBuildExecution - BuildExecution instance.
* @param[in] nBuildUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pBuildUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pBuildUUIDBuffer -  buffer of UUID of the build., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_buildexecution_getbuilduuid(LibMCEnv_BuildExecution pBuildExecution, const LibMCEnv_uint32 nBuildUUIDBufferSize, LibMCEnv_uint32* pBuildUUIDNeededChars, char * pBuildUUIDBuffer);

/**
* Returns the instance of the build.
*
* @param[in] pBuildExecution - BuildExecution instance.
* @param[out] pBuildInstance - Instance of the build.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_buildexecution_getbuild(LibMCEnv_BuildExecution pBuildExecution, LibMCEnv_Build * pBuildInstance);

/**
* Returns the status of the execution.
*
* @param[in] pBuildExecution - BuildExecution instance.
* @param[out] pExecutionStatus - Status of the build.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_buildexecution_getexecutionstatus(LibMCEnv_BuildExecution pBuildExecution, LibMCEnv::eBuildExecutionStatus * pExecutionStatus);

/**
* Convenience function for checking the execution status.
*
* @param[in] pBuildExecution - BuildExecution instance.
* @param[out] pIsInProcess - Returns true if the status is InProcess.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_buildexecution_isinprocess(LibMCEnv_BuildExecution pBuildExecution, bool * pIsInProcess);

/**
* Convenience function for checking the execution status.
*
* @param[in] pBuildExecution - BuildExecution instance.
* @param[out] pIsInProcess - Returns true if the status is Finished.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_buildexecution_isfinished(LibMCEnv_BuildExecution pBuildExecution, bool * pIsInProcess);

/**
* Convenience function for checking the execution status.
*
* @param[in] pBuildExecution - BuildExecution instance.
* @param[out] pIsInProcess - Returns true if the status is Failed.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_buildexecution_isfailed(LibMCEnv_BuildExecution pBuildExecution, bool * pIsInProcess);

/**
* Sets build execution status to finished. Fails if Build status is not InProcess 
*
* @param[in] pBuildExecution - BuildExecution instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_buildexecution_setstatustofinished(LibMCEnv_BuildExecution pBuildExecution);

/**
* Sets build execution status to failed. Fails if Build status is not InProcess 
*
* @param[in] pBuildExecution - BuildExecution instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_buildexecution_setstatustofailed(LibMCEnv_BuildExecution pBuildExecution);

/**
* Returns a human readable description of the build execution for display in the User Interface.
*
* @param[in] pBuildExecution - BuildExecution instance.
* @param[in] nDescriptionBufferSize - size of the buffer (including trailing 0)
* @param[out] pDescriptionNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pDescriptionBuffer -  buffer of Description., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_buildexecution_getdescription(LibMCEnv_BuildExecution pBuildExecution, const LibMCEnv_uint32 nDescriptionBufferSize, LibMCEnv_uint32* pDescriptionNeededChars, char * pDescriptionBuffer);

/**
* Sets a human readable description of the build execution for display in the User Interface. Should not be empty.
*
* @param[in] pBuildExecution - BuildExecution instance.
* @param[in] pDescription - Description.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_buildexecution_setdescription(LibMCEnv_BuildExecution pBuildExecution, const char * pDescription);

/**
* Returns the machine journal UUID that this job in executing in.
*
* @param[in] pBuildExecution - BuildExecution instance.
* @param[in] nJournalUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pJournalUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pJournalUUIDBuffer -  buffer of Journal UUID of build execution., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_buildexecution_getjournaluuid(LibMCEnv_BuildExecution pBuildExecution, const LibMCEnv_uint32 nJournalUUIDBufferSize, LibMCEnv_uint32* pJournalUUIDNeededChars, char * pJournalUUIDBuffer);

/**
* Returns if a user is attached to the execution.
*
* @param[in] pBuildExecution - BuildExecution instance.
* @param[out] pUserIsAttached - Flag if a user is attached to the execution.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_buildexecution_hasattacheduser(LibMCEnv_BuildExecution pBuildExecution, bool * pUserIsAttached);

/**
* Returns the user that started this job. Fails if no user is attached to the execution.
*
* @param[in] pBuildExecution - BuildExecution instance.
* @param[in] nUserUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pUserUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pUserUUIDBuffer -  buffer of User who started the job., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_buildexecution_getuseruuid(LibMCEnv_BuildExecution pBuildExecution, const LibMCEnv_uint32 nUserUUIDBufferSize, LibMCEnv_uint32* pUserUUIDNeededChars, char * pUserUUIDBuffer);

/**
* Returns the start time stamp of the build execution in the current machine journal.
*
* @param[in] pBuildExecution - BuildExecution instance.
* @param[out] pTimeStampInMilliseconds - TimeStamp when the build started in Milliseconds.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_buildexecution_getstarttimestampinmilliseconds(LibMCEnv_BuildExecution pBuildExecution, LibMCEnv_uint64 * pTimeStampInMilliseconds);

/**
* Returns the start time stamp of the build execution in the current machine journal.
*
* @param[in] pBuildExecution - BuildExecution instance.
* @param[out] pTimeStampInMicroseconds - TimeStamp when the build started in Microseconds.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_buildexecution_getstarttimestampinmicroseconds(LibMCEnv_BuildExecution pBuildExecution, LibMCEnv_uint64 * pTimeStampInMicroseconds);

/**
* Returns the end time stamp of the build execution in the current machine journal. Status MUST BE in Finished or Failed to retrieve this value.
*
* @param[in] pBuildExecution - BuildExecution instance.
* @param[out] pTimeStampInMilliseconds - TimeStamp when the build ended in Milliseconds.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_buildexecution_getendtimestampinmilliseconds(LibMCEnv_BuildExecution pBuildExecution, LibMCEnv_uint64 * pTimeStampInMilliseconds);

/**
* Returns the end time stamp of the build execution in the current machine journal. Status MUST BE in Finished or Failed to retrieve this value.
*
* @param[in] pBuildExecution - BuildExecution instance.
* @param[out] pTimeStampInMicroseconds - TimeStamp when the build ended in Microseconds.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_buildexecution_getendtimestampinmicroseconds(LibMCEnv_BuildExecution pBuildExecution, LibMCEnv_uint64 * pTimeStampInMicroseconds);

/**
* Returns the relative time of the build execution. If status is Finished or Failed, the full duration is returned.
*
* @param[in] pBuildExecution - BuildExecution instance.
* @param[out] pTimeStampInMilliseconds - Elapsed time in Milliseconds.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_buildexecution_getelapsedtimeinmilliseconds(LibMCEnv_BuildExecution pBuildExecution, LibMCEnv_uint64 * pTimeStampInMilliseconds);

/**
* Returns the relative time of the build execution. If status is Finished or Failed, the full duration is returned.
*
* @param[in] pBuildExecution - BuildExecution instance.
* @param[out] pTimeStampInMicroseconds - Elapsed time in Microseconds.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_buildexecution_getelapsedtimeinmicroseconds(LibMCEnv_BuildExecution pBuildExecution, LibMCEnv_uint64 * pTimeStampInMicroseconds);

/**
* Returns if the Execution has an attached data with a certain UUID
*
* @param[in] pBuildExecution - BuildExecution instance.
* @param[in] pDataUUID - Data UUID of the attachment to query. 
* @param[out] pDataExists - Returns true if the data exists.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_buildexecution_hasattachment(LibMCEnv_BuildExecution pBuildExecution, const char * pDataUUID, bool * pDataExists);

/**
* Returns if the Execution has an attached data with a certain identifier
*
* @param[in] pBuildExecution - BuildExecution instance.
* @param[in] pIdentifier - Identifier of the attachment to query.
* @param[out] pDataExists - Returns true if the data exists.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_buildexecution_hasattachmentidentifier(LibMCEnv_BuildExecution pBuildExecution, const char * pIdentifier, bool * pDataExists);

/**
* Adds binary data to store with the build execution.
*
* @param[in] pBuildExecution - BuildExecution instance.
* @param[in] pIdentifier - Unique identifier of the attached data. Fails if ther already exists a binary data with the equal identifier.
* @param[in] pName - Name of the attache data
* @param[in] pMIMEType - Mime type of the data.
* @param[in] pUserUUID - User UUID of the user that this data comes from. Empty string means no user attached.
* @param[in] nContentBufferSize - Number of elements in buffer
* @param[in] pContentBuffer - uint8 buffer of Stream content to store
* @param[in] nDataUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pDataUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pDataUUIDBuffer -  buffer of Data UUID of the attachment., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_buildexecution_addbinarydata(LibMCEnv_BuildExecution pBuildExecution, const char * pIdentifier, const char * pName, const char * pMIMEType, const char * pUserUUID, LibMCEnv_uint64 nContentBufferSize, const LibMCEnv_uint8 * pContentBuffer, const LibMCEnv_uint32 nDataUUIDBufferSize, LibMCEnv_uint32* pDataUUIDNeededChars, char * pDataUUIDBuffer);

/**
* Attaches a temp stream to the build execution.
*
* @param[in] pBuildExecution - BuildExecution instance.
* @param[in] pIdentifier - Unique identifier of the attached data. Fails if ther already exists a binary data with the equal identifier.
* @param[in] pName - Name of the attached data
* @param[in] pUserUUID - User UUID of the user that this data comes from. Empty string means no user attached.
* @param[in] pStreamWriterInstance - Stream to attach to the build.
* @param[in] nDataUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pDataUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pDataUUIDBuffer -  buffer of Data UUID of the attachment., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_buildexecution_attachtempstream(LibMCEnv_BuildExecution pBuildExecution, const char * pIdentifier, const char * pName, const char * pUserUUID, LibMCEnv_BaseTempStreamWriter pStreamWriterInstance, const LibMCEnv_uint32 nDataUUIDBufferSize, LibMCEnv_uint32* pDataUUIDNeededChars, char * pDataUUIDBuffer);

/**
* Loads stream of the build execution by attachment identifier.
*
* @param[in] pBuildExecution - BuildExecution instance.
* @param[in] pIdentifier - Unique name of the attachment. Fails if name does not exist.
* @param[out] pStreamReaderInstance - Reader class to access the stream.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_buildexecution_loadstreambyidentifier(LibMCEnv_BuildExecution pBuildExecution, const char * pIdentifier, LibMCEnv_StreamReader * pStreamReaderInstance);

/**
* Loads stream of the build by attachment UUID.
*
* @param[in] pBuildExecution - BuildExecution instance.
* @param[in] pDataUUID - Data UUID of the attachment. Fails if uuid does not exist.
* @param[out] pStreamReaderInstance - Reader class to access the stream.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_buildexecution_loadstreambyuuid(LibMCEnv_BuildExecution pBuildExecution, const char * pDataUUID, LibMCEnv_StreamReader * pStreamReaderInstance);

/**
* Loads a discrete field by attachment identifier which was previously stored in the build execution. MIME Type MUST be application/amcf-discretefield2d.
*
* @param[in] pBuildExecution - BuildExecution instance.
* @param[in] pIdentifier - Unique name of the build execution attachment. Fails if name does not exist or has invalid Mime type.
* @param[out] pFieldDataInstance - Loaded field instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_buildexecution_loaddiscretefield2dbyidentifier(LibMCEnv_BuildExecution pBuildExecution, const char * pIdentifier, LibMCEnv_DiscreteFieldData2D * pFieldDataInstance);

/**
* Loads a discrete field by attachment uuid which previously stored in the build execution. MIME Type MUST be application/amcf-discretefield2d.
*
* @param[in] pBuildExecution - BuildExecution instance.
* @param[in] pDataUUID - Data UUID of the attachment. Fails if name does not exist or has invalid Mime type.
* @param[out] pFieldDataInstance - Loaded field instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_buildexecution_loaddiscretefield2dbyuuid(LibMCEnv_BuildExecution pBuildExecution, const char * pDataUUID, LibMCEnv_DiscreteFieldData2D * pFieldDataInstance);

/**
* Stores a discrete field in the build execution. MIME Type will be application/amcf-discretefield2d.
*
* @param[in] pBuildExecution - BuildExecution instance.
* @param[in] pIdentifier - Unique name of the attachment. Fails if identifier already exists or is invalid.
* @param[in] pName - Human Readable name of the attachment.
* @param[in] pFieldDataInstance - Field instance to store.
* @param[in] pStoreOptions - Field Data Store Options.
* @param[in] pUserUUID - User UUID of the user that this data comes from. Empty string means no user attached.
* @param[in] nDataUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pDataUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pDataUUIDBuffer -  buffer of Data UUID of the attachment., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_buildexecution_storediscretefield2d(LibMCEnv_BuildExecution pBuildExecution, const char * pIdentifier, const char * pName, LibMCEnv_DiscreteFieldData2D pFieldDataInstance, LibMCEnv_DiscreteFieldData2DStoreOptions pStoreOptions, const char * pUserUUID, const LibMCEnv_uint32 nDataUUIDBufferSize, LibMCEnv_uint32* pDataUUIDNeededChars, char * pDataUUIDBuffer);

/**
* Loads a data table by attachment identifier which was previously stored in the build execution. MIME Type MUST be application/amcf-datatable.
*
* @param[in] pBuildExecution - BuildExecution instance.
* @param[in] pIdentifier - Unique name of the build execution attachment. Fails if name does not exist or has invalid Mime type.
* @param[out] pDataTableInstance - Loaded data table instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_buildexecution_loaddatatablebyidentifier(LibMCEnv_BuildExecution pBuildExecution, const char * pIdentifier, LibMCEnv_DataTable * pDataTableInstance);

/**
* Loads a data table by attachment uuid which previously stored in the build execution. MIME Type MUST be application/amcf-datatable.
*
* @param[in] pBuildExecution - BuildExecution instance.
* @param[in] pDataUUID - Data UUID of the attachment. Fails if name does not exist or has invalid Mime type.
* @param[out] pDataTableInstance - Loaded data table instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_buildexecution_loaddatatablebyuuid(LibMCEnv_BuildExecution pBuildExecution, const char * pDataUUID, LibMCEnv_DataTable * pDataTableInstance);

/**
* Stores a data table in the build execution. MIME Type will be application/amcf-datatable.
*
* @param[in] pBuildExecution - BuildExecution instance.
* @param[in] pIdentifier - Unique name of the attachment. Fails if identifier already exists or is invalid.
* @param[in] pName - Human Readable name of the attachment.
* @param[in] pFieldDataInstance - Field instance to store.
* @param[in] pStoreOptions - Data Table Write Options.
* @param[in] pUserUUID - User UUID of the user that this data comes from. Empty string means no user attached.
* @param[in] nDataUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pDataUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pDataUUIDBuffer -  buffer of Data UUID of the attachment., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_buildexecution_storedatatable(LibMCEnv_BuildExecution pBuildExecution, const char * pIdentifier, const char * pName, LibMCEnv_DataTable pFieldDataInstance, LibMCEnv_DataTableWriteOptions pStoreOptions, const char * pUserUUID, const LibMCEnv_uint32 nDataUUIDBufferSize, LibMCEnv_uint32* pDataUUIDNeededChars, char * pDataUUIDBuffer);

/**
* Loads a PNG image by attachment identifier which was previously stored in the build execution. MIME Type MUST be image/png.
*
* @param[in] pBuildExecution - BuildExecution instance.
* @param[in] pIdentifier - Unique name of the attachment. Fails if name does not exist or has invalid Mime type.
* @param[in] dDPIValueX - DPI Value in X. MUST be positive.
* @param[in] dDPIValueY - DPI Value in Y. MUST be positive.
* @param[in] ePixelFormat - Pixel format to use. Might lose color and alpha information.
* @param[out] pImageDataInstance - Image data instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_buildexecution_loadpngimagebyidentifier(LibMCEnv_BuildExecution pBuildExecution, const char * pIdentifier, LibMCEnv_double dDPIValueX, LibMCEnv_double dDPIValueY, LibMCEnv::eImagePixelFormat ePixelFormat, LibMCEnv_ImageData * pImageDataInstance);

/**
* Loads a PNG image by attachment uuid which was previously stored in the build execution. MIME Type MUST be image/png.
*
* @param[in] pBuildExecution - BuildExecution instance.
* @param[in] pDataUUID - Data UUID of the attachment. Fails if name does not exist or has invalid Mime type.
* @param[in] dDPIValueX - DPI Value in X. MUST be positive.
* @param[in] dDPIValueY - DPI Value in Y. MUST be positive.
* @param[in] ePixelFormat - Pixel format to use. Might lose color and alpha information.
* @param[out] pImageDataInstance - Image data instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_buildexecution_loadpngimagebyuuid(LibMCEnv_BuildExecution pBuildExecution, const char * pDataUUID, LibMCEnv_double dDPIValueX, LibMCEnv_double dDPIValueY, LibMCEnv::eImagePixelFormat ePixelFormat, LibMCEnv_ImageData * pImageDataInstance);

/**
* Stores a PNG image in the build job. MIME Type will be image/png
*
* @param[in] pBuildExecution - BuildExecution instance.
* @param[in] pIdentifier - Unique name of the attachment. Fails if name does not exist or has invalid Mime type.
* @param[in] pName - Unique name of the attachment. Fails if name does not exist or has invalid Mime type.
* @param[in] pImageDataInstance - Image data instance.
* @param[in] pStoreOptions - PNG Store Options.
* @param[in] pUserUUID - User UUID of the user that this data comes from. Empty string means no user attached.
* @param[in] nDataUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pDataUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pDataUUIDBuffer -  buffer of Data UUID of the attachment., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_buildexecution_storepngimage(LibMCEnv_BuildExecution pBuildExecution, const char * pIdentifier, const char * pName, LibMCEnv_ImageData pImageDataInstance, LibMCEnv_PNGImageStoreOptions pStoreOptions, const char * pUserUUID, const LibMCEnv_uint32 nDataUUIDBufferSize, LibMCEnv_uint32* pDataUUIDNeededChars, char * pDataUUIDBuffer);

/**
* Adds a metadata string to a build execution. Meta data can only be added once. Deletion is not supported by purpose and MUST be avoided by the system design.
*
* @param[in] pBuildExecution - BuildExecution instance.
* @param[in] pKey - Unique key of value. MUST NOT be empty. MUST consist of alphanumeric characters or hyphen or underscore. Fails if Key already exists.
* @param[in] pValue - Value to store.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_buildexecution_storemetadatastring(LibMCEnv_BuildExecution pBuildExecution, const char * pKey, const char * pValue);

/**
* Checks if a metadata string exists.
*
* @param[in] pBuildExecution - BuildExecution instance.
* @param[in] pKey - Unique key of value. Fails if Key already exists.
* @param[out] pMetaDataStringExists - Returns if metadata string exists.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_buildexecution_hasmetadatastring(LibMCEnv_BuildExecution pBuildExecution, const char * pKey, bool * pMetaDataStringExists);

/**
* Gets a metadata string of a build execution. Fails if Meta Data does not exist.
*
* @param[in] pBuildExecution - BuildExecution instance.
* @param[in] pKey - Unique key of value. Fails if Key already exists.
* @param[in] nValueBufferSize - size of the buffer (including trailing 0)
* @param[out] pValueNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pValueBuffer -  buffer of Return value., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_buildexecution_getmetadatastring(LibMCEnv_BuildExecution pBuildExecution, const char * pKey, const LibMCEnv_uint32 nValueBufferSize, LibMCEnv_uint32* pValueNeededChars, char * pValueBuffer);

/**
* Loads the journal that is associated with the build execution and returns an accessor instance.
*
* @param[in] pBuildExecution - BuildExecution instance.
* @param[out] pJournalHandler - Journal instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_buildexecution_loadattachedjournal(LibMCEnv_BuildExecution pBuildExecution, LibMCEnv_JournalHandler * pJournalHandler);

/*************************************************************************************************************************
 Class definition for BuildExecutionIterator
**************************************************************************************************************************/

/**
* Returns the execution the iterator points at.
*
* @param[in] pBuildExecutionIterator - BuildExecutionIterator instance.
* @param[out] pBuildExecutionInstance - returns the BuildExecution instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_buildexecutioniterator_getcurrentexecution(LibMCEnv_BuildExecutionIterator pBuildExecutionIterator, LibMCEnv_BuildExecution * pBuildExecutionInstance);

/*************************************************************************************************************************
 Class definition for Build
**************************************************************************************************************************/

/**
* Returns name of the build.
*
* @param[in] pBuild - Build instance.
* @param[in] nNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNameBuffer -  buffer of Name of the build., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_build_getname(LibMCEnv_Build pBuild, const LibMCEnv_uint32 nNameBufferSize, LibMCEnv_uint32* pNameNeededChars, char * pNameBuffer);

/**
* Returns uuid of the build.
*
* @param[in] pBuild - Build instance.
* @param[in] nBuildUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pBuildUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pBuildUUIDBuffer -  buffer of UUID of the build., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_build_getbuilduuid(LibMCEnv_Build pBuild, const LibMCEnv_uint32 nBuildUUIDBufferSize, LibMCEnv_uint32* pBuildUUIDNeededChars, char * pBuildUUIDBuffer);

/**
* Returns storage uuid of the build stream.
*
* @param[in] pBuild - Build instance.
* @param[in] nStorageUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pStorageUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pStorageUUIDBuffer -  buffer of Storage UUID of the build., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_build_getstorageuuid(LibMCEnv_Build pBuild, const LibMCEnv_uint32 nStorageUUIDBufferSize, LibMCEnv_uint32* pStorageUUIDNeededChars, char * pStorageUUIDBuffer);

/**
* Returns SHA256 of the build stream.
*
* @param[in] pBuild - Build instance.
* @param[in] nSHA256BufferSize - size of the buffer (including trailing 0)
* @param[out] pSHA256NeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pSHA256Buffer -  buffer of SHA256 of the build stream., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_build_getstoragesha256(LibMCEnv_Build pBuild, const LibMCEnv_uint32 nSHA256BufferSize, LibMCEnv_uint32* pSHA256NeededChars, char * pSHA256Buffer);

/**
* Returns cached layer count of the toolpath.
*
* @param[in] pBuild - Build instance.
* @param[out] pLayerCount - Returns layer count.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_build_getlayercount(LibMCEnv_Build pBuild, LibMCEnv_uint32 * pLayerCount);

/**
* Retrieves the build height in mm.
*
* @param[in] pBuild - Build instance.
* @param[out] pBuildHeight - Build height in mm.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_build_getbuildheightinmm(LibMCEnv_Build pBuild, LibMCEnv_double * pBuildHeight);

/**
* Retrieves the layers Z Value in mm.
*
* @param[in] pBuild - Build instance.
* @param[in] nLayerIndex - Layer Index to return.
* @param[out] pZValue - Z Value of the layer in mm.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_build_getzvalueinmm(LibMCEnv_Build pBuild, LibMCEnv_uint32 nLayerIndex, LibMCEnv_double * pZValue);

/**
* loads the a toolpath into memory
*
* @param[in] pBuild - Build instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_build_loadtoolpath(LibMCEnv_Build pBuild);

/**
* unloads the a toolpath from memory, if it has been loaded before.
*
* @param[in] pBuild - Build instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_build_unloadtoolpath(LibMCEnv_Build pBuild);

/**
* checks, if a toolpath object is loaded to memory.
*
* @param[in] pBuild - Build instance.
* @param[out] pIsLoaded - returns if toolpath is loaded.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_build_toolpathisloaded(LibMCEnv_Build pBuild, bool * pIsLoaded);

/**
* Creates an accessor object for a toolpath. Toolpath MUST have been loaded with LoadToolpath before.
*
* @param[in] pBuild - Build instance.
* @param[out] pToolpathInstance - Toolpath instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_build_createtoolpathaccessor(LibMCEnv_Build pBuild, LibMCEnv_ToolpathAccessor * pToolpathInstance);

/**
* Returns if the Build has an attached data with a certain UUID
*
* @param[in] pBuild - Build instance.
* @param[in] pDataUUID - Data UUID of the attachment to query. 
* @param[out] pDataExists - Returns true if the data exists.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_build_hasattachment(LibMCEnv_Build pBuild, const char * pDataUUID, bool * pDataExists);

/**
* Returns if the Build has an attached data with a certain identifier
*
* @param[in] pBuild - Build instance.
* @param[in] pIdentifier - Identifier of the attachment to query.
* @param[out] pDataExists - Returns true if the data exists.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_build_hasattachmentidentifier(LibMCEnv_Build pBuild, const char * pIdentifier, bool * pDataExists);

/**
* Adds binary data to store with the build.
*
* @param[in] pBuild - Build instance.
* @param[in] pIdentifier - Unique identifier of the attached data. Fails if ther already exists a binary data with the equal identifier.
* @param[in] pName - Name of the attache data
* @param[in] pMIMEType - Mime type of the data.
* @param[in] pUserUUID - User UUID of the user that this data comes from. Empty string means no user attached.
* @param[in] nContentBufferSize - Number of elements in buffer
* @param[in] pContentBuffer - uint8 buffer of Stream content to store
* @param[in] nDataUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pDataUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pDataUUIDBuffer -  buffer of Data UUID of the attachment., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_build_addbinarydata(LibMCEnv_Build pBuild, const char * pIdentifier, const char * pName, const char * pMIMEType, const char * pUserUUID, LibMCEnv_uint64 nContentBufferSize, const LibMCEnv_uint8 * pContentBuffer, const LibMCEnv_uint32 nDataUUIDBufferSize, LibMCEnv_uint32* pDataUUIDNeededChars, char * pDataUUIDBuffer);

/**
* Attaches a temp stream to the build.
*
* @param[in] pBuild - Build instance.
* @param[in] pIdentifier - Unique identifier of the attached data. Fails if ther already exists a binary data with the equal identifier.
* @param[in] pName - Name of the attached data
* @param[in] pUserUUID - User UUID of the user that this data comes from. Empty string means no user attached.
* @param[in] pStreamWriterInstance - Stream to attach to the build.
* @param[in] nDataUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pDataUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pDataUUIDBuffer -  buffer of Data UUID of the attachment., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_build_attachtempstream(LibMCEnv_Build pBuild, const char * pIdentifier, const char * pName, const char * pUserUUID, LibMCEnv_BaseTempStreamWriter pStreamWriterInstance, const LibMCEnv_uint32 nDataUUIDBufferSize, LibMCEnv_uint32* pDataUUIDNeededChars, char * pDataUUIDBuffer);

/**
* Loads stream of the build by identifier.
*
* @param[in] pBuild - Build instance.
* @param[in] pIdentifier - Unique name of the build attachment. Fails if name does not exist.
* @param[out] pStreamReaderInstance - Reader class to access the stream.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_build_loadstreambyidentifier(LibMCEnv_Build pBuild, const char * pIdentifier, LibMCEnv_StreamReader * pStreamReaderInstance);

/**
* Loads stream of the build by attachment UUID.
*
* @param[in] pBuild - Build instance.
* @param[in] pDataUUID - Data UUID of the attachment. Fails if uuid does not exist.
* @param[out] pStreamReaderInstance - Reader class to access the stream.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_build_loadstreambyuuid(LibMCEnv_Build pBuild, const char * pDataUUID, LibMCEnv_StreamReader * pStreamReaderInstance);

/**
* Loads a discrete field by identifier which was previously stored in the build job. MIME Type MUST be application/amcf-discretefield2d.
*
* @param[in] pBuild - Build instance.
* @param[in] pIdentifier - Unique name of the build attachment. Fails if name does not exist or has invalid Mime type.
* @param[out] pFieldDataInstance - Loaded field instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_build_loaddiscretefield2dbyidentifier(LibMCEnv_Build pBuild, const char * pIdentifier, LibMCEnv_DiscreteFieldData2D * pFieldDataInstance);

/**
* Loads a discrete field by uuid which previously stored in the build job. MIME Type MUST be application/amcf-discretefield2d.
*
* @param[in] pBuild - Build instance.
* @param[in] pDataUUID - Data UUID of the attachment. Fails if name does not exist or has invalid Mime type.
* @param[out] pFieldDataInstance - Loaded field instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_build_loaddiscretefield2dbyuuid(LibMCEnv_Build pBuild, const char * pDataUUID, LibMCEnv_DiscreteFieldData2D * pFieldDataInstance);

/**
* Stores a discrete field in the build job. MIME Type will be application/amcf-discretefield2d.
*
* @param[in] pBuild - Build instance.
* @param[in] pIdentifier - Unique name of the build attachment. Fails if identifier already exists or is invalid.
* @param[in] pName - Unique name of the build attachment.
* @param[in] pFieldDataInstance - Field instance to store.
* @param[in] pStoreOptions - Field Data Store Options.
* @param[in] pUserUUID - User UUID of the user that this data comes from. Empty string means no user attached.
* @param[in] nDataUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pDataUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pDataUUIDBuffer -  buffer of Data UUID of the attachment., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_build_storediscretefield2d(LibMCEnv_Build pBuild, const char * pIdentifier, const char * pName, LibMCEnv_DiscreteFieldData2D pFieldDataInstance, LibMCEnv_DiscreteFieldData2DStoreOptions pStoreOptions, const char * pUserUUID, const LibMCEnv_uint32 nDataUUIDBufferSize, LibMCEnv_uint32* pDataUUIDNeededChars, char * pDataUUIDBuffer);

/**
* Loads a data table by identifier which was previously stored in the build job. MIME Type MUST be application/amcf-datatable.
*
* @param[in] pBuild - Build instance.
* @param[in] pIdentifier - Unique name of the build attachment. Fails if name does not exist or has invalid Mime type.
* @param[out] pDataTableInstance - Data Table instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_build_loaddatatablebyidentifier(LibMCEnv_Build pBuild, const char * pIdentifier, LibMCEnv_DataTable * pDataTableInstance);

/**
* Loads a data table by uuid which previously stored in the build job. MIME Type MUST be application/amcf-datatable.
*
* @param[in] pBuild - Build instance.
* @param[in] pDataUUID - Data UUID of the attachment. Fails if name does not exist or has invalid Mime type.
* @param[out] pDataTableInstance - Data Table instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_build_loaddatatablebyuuid(LibMCEnv_Build pBuild, const char * pDataUUID, LibMCEnv_DataTable * pDataTableInstance);

/**
* Stores a data table in the build job. MIME Type will be application/amcf-datatable.
*
* @param[in] pBuild - Build instance.
* @param[in] pIdentifier - Unique name of the build attachment. Fails if identifier already exists or is invalid.
* @param[in] pName - Unique name of the build attachment.
* @param[in] pDataTableInstance - Data Table instance to store.
* @param[in] pStoreOptions - Data Table Write Options.
* @param[in] pUserUUID - User UUID of the user that this data comes from. Empty string means no user attached.
* @param[in] nDataUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pDataUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pDataUUIDBuffer -  buffer of Data UUID of the attachment., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_build_storedatatable(LibMCEnv_Build pBuild, const char * pIdentifier, const char * pName, LibMCEnv_DataTable pDataTableInstance, LibMCEnv_DataTableWriteOptions pStoreOptions, const char * pUserUUID, const LibMCEnv_uint32 nDataUUIDBufferSize, LibMCEnv_uint32* pDataUUIDNeededChars, char * pDataUUIDBuffer);

/**
* Loads a PNG image by identifier which was previously stored in the build job. MIME Type MUST be image/png.
*
* @param[in] pBuild - Build instance.
* @param[in] pIdentifier - Unique name of the build attachment. Fails if name does not exist or has invalid Mime type.
* @param[in] dDPIValueX - DPI Value in X. MUST be positive.
* @param[in] dDPIValueY - DPI Value in Y. MUST be positive.
* @param[in] ePixelFormat - Pixel format to use. Might lose color and alpha information.
* @param[out] pImageDataInstance - Image data instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_build_loadpngimagebyidentifier(LibMCEnv_Build pBuild, const char * pIdentifier, LibMCEnv_double dDPIValueX, LibMCEnv_double dDPIValueY, LibMCEnv::eImagePixelFormat ePixelFormat, LibMCEnv_ImageData * pImageDataInstance);

/**
* Loads a PNG image by uuid which was previously stored in the build job. MIME Type MUST be image/png.
*
* @param[in] pBuild - Build instance.
* @param[in] pDataUUID - Data UUID of the attachment. Fails if name does not exist or has invalid Mime type.
* @param[in] dDPIValueX - DPI Value in X. MUST be positive.
* @param[in] dDPIValueY - DPI Value in Y. MUST be positive.
* @param[in] ePixelFormat - Pixel format to use. Might lose color and alpha information.
* @param[out] pImageDataInstance - Image data instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_build_loadpngimagebyuuid(LibMCEnv_Build pBuild, const char * pDataUUID, LibMCEnv_double dDPIValueX, LibMCEnv_double dDPIValueY, LibMCEnv::eImagePixelFormat ePixelFormat, LibMCEnv_ImageData * pImageDataInstance);

/**
* Stores a PNG Image in the build job. MIME Type will be image/png
*
* @param[in] pBuild - Build instance.
* @param[in] pIdentifier - Unique name of the attachment. Fails if identifier does already exist or is invalid.
* @param[in] pName - Unique name of the build attachment.
* @param[in] pImageDataInstance - Image data instance.
* @param[in] pStoreOptions - PNG Store Options.
* @param[in] pUserUUID - User UUID of the user that this data comes from. Empty string means no user attached.
* @param[in] nDataUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pDataUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pDataUUIDBuffer -  buffer of Data UUID of the attachment., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_build_storepngimage(LibMCEnv_Build pBuild, const char * pIdentifier, const char * pName, LibMCEnv_ImageData pImageDataInstance, LibMCEnv_PNGImageStoreOptions pStoreOptions, const char * pUserUUID, const LibMCEnv_uint32 nDataUUIDBufferSize, LibMCEnv_uint32* pDataUUIDNeededChars, char * pDataUUIDBuffer);

/**
* Starts a build execution. This function does not work in a UIEnvironment context!
*
* @param[in] pBuild - Build instance.
* @param[in] pDescription - A human readable description of the build execution for display in the User Interface. Should not be empty.
* @param[in] pUserUUID - User who started the execution. MUST exist. If empty, no user is attached.
* @param[out] pBuildExecutionInstance - Build execution instance. Will be newly created and has the status InProcess.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_build_startexecution(LibMCEnv_Build pBuild, const char * pDescription, const char * pUserUUID, LibMCEnv_BuildExecution * pBuildExecutionInstance);

/**
* Checks if a build execution exists for this build.
*
* @param[in] pBuild - Build instance.
* @param[in] pExecutionUUID - The UUID of the exceution.
* @param[out] pExecutionExist - Returns true if the execution exists.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_build_hasexecution(LibMCEnv_Build pBuild, const char * pExecutionUUID, bool * pExecutionExist);

/**
* Finds a build execution. Fails if execution does not exist.
*
* @param[in] pBuild - Build instance.
* @param[in] pExecutionUUID - The UUID of the exceution.
* @param[out] pBuildExecutionInstance - Build execution instance. Will be newly created and has the status InProcess.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_build_findexecution(LibMCEnv_Build pBuild, const char * pExecutionUUID, LibMCEnv_BuildExecution * pBuildExecutionInstance);

/**
* Lists all Executions of the build.
*
* @param[in] pBuild - Build instance.
* @param[in] bOnlyCurrentJournalSession - If true, only the builds that have been created in the current machine session.
* @param[out] pIteratorInstance - Iterator instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_build_listexecutions(LibMCEnv_Build pBuild, bool bOnlyCurrentJournalSession, LibMCEnv_BuildExecutionIterator * pIteratorInstance);

/**
* Lists all Executions of the build by status.
*
* @param[in] pBuild - Build instance.
* @param[in] eExecutionStatus - Status of the build.
* @param[in] bOnlyCurrentJournalSession - If true, only the builds that have been created in the current machine session.
* @param[out] pIteratorInstance - Iterator instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_build_listexecutionsbystatus(LibMCEnv_Build pBuild, LibMCEnv::eBuildExecutionStatus eExecutionStatus, bool bOnlyCurrentJournalSession, LibMCEnv_BuildExecutionIterator * pIteratorInstance);

/**
* Adds a metadata string to a build. Meta data can only be added once. Deletion is not supported by purpose and MUST be avoided by the system design.
*
* @param[in] pBuild - Build instance.
* @param[in] pKey - Unique key of value. MUST NOT be empty. MUST consist of alphanumeric characters or hyphen or underscore. Fails if Key already exists.
* @param[in] pValue - Value to store.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_build_storemetadatastring(LibMCEnv_Build pBuild, const char * pKey, const char * pValue);

/**
* Checks if a metadata string exists.
*
* @param[in] pBuild - Build instance.
* @param[in] pKey - Unique key of value. Fails if Key already exists.
* @param[out] pMetaDataStringExists - Returns if metadata string exists.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_build_hasmetadatastring(LibMCEnv_Build pBuild, const char * pKey, bool * pMetaDataStringExists);

/**
* Gets a metadata string of a build. Fails if Meta Data does not exist.
*
* @param[in] pBuild - Build instance.
* @param[in] pKey - Unique key of value. Fails if Key already exists.
* @param[in] nValueBufferSize - size of the buffer (including trailing 0)
* @param[out] pValueNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pValueBuffer -  buffer of Return value., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_build_getmetadatastring(LibMCEnv_Build pBuild, const char * pKey, const LibMCEnv_uint32 nValueBufferSize, LibMCEnv_uint32* pValueNeededChars, char * pValueBuffer);

/*************************************************************************************************************************
 Class definition for WorkingFileExecution
**************************************************************************************************************************/

/**
* Returns the execution status
*
* @param[in] pWorkingFileExecution - WorkingFileExecution instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_workingfileexecution_getstatus(LibMCEnv_WorkingFileExecution pWorkingFileExecution);

/**
* Returns the output of the executable as string buffer
*
* @param[in] pWorkingFileExecution - WorkingFileExecution instance.
* @param[in] nStringBufferBufferSize - size of the buffer (including trailing 0)
* @param[out] pStringBufferNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pStringBufferBuffer -  buffer of stdout buffer, may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_workingfileexecution_returnstdout(LibMCEnv_WorkingFileExecution pWorkingFileExecution, const LibMCEnv_uint32 nStringBufferBufferSize, LibMCEnv_uint32* pStringBufferNeededChars, char * pStringBufferBuffer);

/*************************************************************************************************************************
 Class definition for WorkingFile
**************************************************************************************************************************/

/**
* Retrieves absolute file name of the working file
*
* @param[in] pWorkingFile - WorkingFile instance.
* @param[in] nFileNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pFileNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pFileNameBuffer -  buffer of global path of the file, may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_workingfile_getabsolutefilename(LibMCEnv_WorkingFile pWorkingFile, const LibMCEnv_uint32 nFileNameBufferSize, LibMCEnv_uint32* pFileNameNeededChars, char * pFileNameBuffer);

/**
* Returns the size of temporary file.
*
* @param[in] pWorkingFile - WorkingFile instance.
* @param[out] pFileSize - file size
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_workingfile_getsize(LibMCEnv_WorkingFile pWorkingFile, LibMCEnv_uint64 * pFileSize);

/**
* Calculates the SHA256 checksum of the file.
*
* @param[in] pWorkingFile - WorkingFile instance.
* @param[in] nSHA2BufferSize - size of the buffer (including trailing 0)
* @param[out] pSHA2NeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pSHA2Buffer -  buffer of sha256 checksum, may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_workingfile_calculatesha2(LibMCEnv_WorkingFile pWorkingFile, const LibMCEnv_uint32 nSHA2BufferSize, LibMCEnv_uint32* pSHA2NeededChars, char * pSHA2Buffer);

/**
* Executes the temporary file, if it is an executable.
*
* @param[in] pWorkingFile - WorkingFile instance.
* @param[out] pExecution - execution object
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_workingfile_executefile(LibMCEnv_WorkingFile pWorkingFile, LibMCEnv_WorkingFileExecution * pExecution);

/**
* Returns if the file is managed.
*
* @param[in] pWorkingFile - WorkingFile instance.
* @param[out] pFileIsManaged - returns if the file is managed.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_workingfile_ismanaged(LibMCEnv_WorkingFile pWorkingFile, bool * pFileIsManaged);

/**
* Makes the file managed if it is not managed yet.
*
* @param[in] pWorkingFile - WorkingFile instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_workingfile_makemanaged(LibMCEnv_WorkingFile pWorkingFile);

/**
* Returns if the file exists on disk.
*
* @param[in] pWorkingFile - WorkingFile instance.
* @param[out] pFileDoesExist - returns if the file exists.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_workingfile_fileexists(LibMCEnv_WorkingFile pWorkingFile, bool * pFileDoesExist);

/**
* Deletes the temporary file.
*
* @param[in] pWorkingFile - WorkingFile instance.
* @param[out] pSuccess - returns if deletion was successful or file did not exist in the first place.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_workingfile_deletefromdisk(LibMCEnv_WorkingFile pWorkingFile, bool * pSuccess);

/*************************************************************************************************************************
 Class definition for WorkingFileIterator
**************************************************************************************************************************/

/**
* Returns the working file the iterator points at.
*
* @param[in] pWorkingFileIterator - WorkingFileIterator instance.
* @param[out] pWorkingFile - returns the WorkingFile instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_workingfileiterator_getcurrentfile(LibMCEnv_WorkingFileIterator pWorkingFileIterator, LibMCEnv_WorkingFile * pWorkingFile);

/*************************************************************************************************************************
 Class definition for WorkingDirectory
**************************************************************************************************************************/

/**
* Working directory is active.
*
* @param[in] pWorkingDirectory - WorkingDirectory instance.
* @param[out] pIsActive - returns true if files can be read and written to the directory.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_workingdirectory_isactive(LibMCEnv_WorkingDirectory pWorkingDirectory, bool * pIsActive);

/**
* Retrieves absolute file path.
*
* @param[in] pWorkingDirectory - WorkingDirectory instance.
* @param[in] nFilePathBufferSize - size of the buffer (including trailing 0)
* @param[out] pFilePathNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pFilePathBuffer -  buffer of global path of the directory, including path delimiter., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_workingdirectory_getabsolutefilepath(LibMCEnv_WorkingDirectory pWorkingDirectory, const LibMCEnv_uint32 nFilePathBufferSize, LibMCEnv_uint32* pFilePathNeededChars, char * pFilePathBuffer);

/**
* Stores a data buffer in a temporary file with a given name.
*
* @param[in] pWorkingDirectory - WorkingDirectory instance.
* @param[in] pFileName - filename to store to. Can not include any path delimiters or ..
* @param[in] nDataBufferBufferSize - Number of elements in buffer
* @param[in] pDataBufferBuffer - uint8 buffer of file data to store to.
* @param[out] pWorkingFile - working file instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_workingdirectory_storecustomdata(LibMCEnv_WorkingDirectory pWorkingDirectory, const char * pFileName, LibMCEnv_uint64 nDataBufferBufferSize, const LibMCEnv_uint8 * pDataBufferBuffer, LibMCEnv_WorkingFile * pWorkingFile);

/**
* Stores a string in a temporary file with a given name.
*
* @param[in] pWorkingDirectory - WorkingDirectory instance.
* @param[in] pFileName - filename to store to. Can not include any path delimiters or ..
* @param[in] pDataString - file data to store to.
* @param[out] pWorkingFile - working file instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_workingdirectory_storecustomstring(LibMCEnv_WorkingDirectory pWorkingDirectory, const char * pFileName, const char * pDataString, LibMCEnv_WorkingFile * pWorkingFile);

/**
* Stores attached driver data in a temporary file.
*
* @param[in] pWorkingDirectory - WorkingDirectory instance.
* @param[in] pFileName - filename to store to. Can not include any path delimiters or ..
* @param[in] pIdentifier - identifier of the binary data in the driver package.
* @param[out] pWorkingFile - working file instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_workingdirectory_storedriverdata(LibMCEnv_WorkingDirectory pWorkingDirectory, const char * pFileName, const char * pIdentifier, LibMCEnv_WorkingFile * pWorkingFile);

/**
* Stores a data buffer in a temporary file with a generated name.
*
* @param[in] pWorkingDirectory - WorkingDirectory instance.
* @param[in] pExtension - extension of the file to store. MAY be an empty string. MUST only include up to 64 alphanumeric characters.
* @param[in] nDataBufferBufferSize - Number of elements in buffer
* @param[in] pDataBufferBuffer - uint8 buffer of file data to store to.
* @param[out] pWorkingFile - working file instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_workingdirectory_storecustomdataintempfile(LibMCEnv_WorkingDirectory pWorkingDirectory, const char * pExtension, LibMCEnv_uint64 nDataBufferBufferSize, const LibMCEnv_uint8 * pDataBufferBuffer, LibMCEnv_WorkingFile * pWorkingFile);

/**
* Stores a string in a temporary file.
*
* @param[in] pWorkingDirectory - WorkingDirectory instance.
* @param[in] pExtension - extension of the file to store. MAY be an empty string. MUST only include up to 64 alphanumeric characters.
* @param[in] pDataString - file data to store to.
* @param[out] pWorkingFile - working file instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_workingdirectory_storecustomstringintempfile(LibMCEnv_WorkingDirectory pWorkingDirectory, const char * pExtension, const char * pDataString, LibMCEnv_WorkingFile * pWorkingFile);

/**
* Stores attached driver data in a temporary file.
*
* @param[in] pWorkingDirectory - WorkingDirectory instance.
* @param[in] pExtension - extension of the file to store. MAY be an empty string. MUST only include up to 64 alphanumeric characters.
* @param[in] pIdentifier - identifier of the binary data in the driver package.
* @param[out] pWorkingFile - working file instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_workingdirectory_storedriverdataintempfile(LibMCEnv_WorkingDirectory pWorkingDirectory, const char * pExtension, const char * pIdentifier, LibMCEnv_WorkingFile * pWorkingFile);

/**
* Deletes all managed files in the directory and the directory. No storing is possible after a cleanup.
*
* @param[in] pWorkingDirectory - WorkingDirectory instance.
* @param[out] pSuccess - returns if deletion was successful.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_workingdirectory_cleanup(LibMCEnv_WorkingDirectory pWorkingDirectory, bool * pSuccess);

/**
* Adds a managed filename in the directory (i.e. this file will be deleted at CleanUp). Subdirectories are not allowed.
*
* @param[in] pWorkingDirectory - WorkingDirectory instance.
* @param[in] pFileName - Filename to manage. The file does not need to exist yet.
* @param[out] pWorkingFile - working file instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_workingdirectory_addmanagedfile(LibMCEnv_WorkingDirectory pWorkingDirectory, const char * pFileName, LibMCEnv_WorkingFile * pWorkingFile);

/**
* Returns if the working directory has unmanaged files. A clean implementation will never deal with unmanaged files.
*
* @param[in] pWorkingDirectory - WorkingDirectory instance.
* @param[out] pHasUnmanagedFiles - returns if there are unmanaged files.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_workingdirectory_hasunmanagedfiles(LibMCEnv_WorkingDirectory pWorkingDirectory, bool * pHasUnmanagedFiles);

/**
* Returns a list of unmanaged files.
*
* @param[in] pWorkingDirectory - WorkingDirectory instance.
* @param[out] pIteratorInstance - working file iterator instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_workingdirectory_retrieveunmanagedfiles(LibMCEnv_WorkingDirectory pWorkingDirectory, LibMCEnv_WorkingFileIterator * pIteratorInstance);

/**
* Returns a list of managed files.
*
* @param[in] pWorkingDirectory - WorkingDirectory instance.
* @param[out] pIteratorInstance - working file iterator instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_workingdirectory_retrievemanagedfiles(LibMCEnv_WorkingDirectory pWorkingDirectory, LibMCEnv_WorkingFileIterator * pIteratorInstance);

/**
* Returns a list of all files in the directory.
*
* @param[in] pWorkingDirectory - WorkingDirectory instance.
* @param[out] pIteratorInstance - working file iterator instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_workingdirectory_retrieveallfiles(LibMCEnv_WorkingDirectory pWorkingDirectory, LibMCEnv_WorkingFileIterator * pIteratorInstance);

/*************************************************************************************************************************
 Class definition for XMLDocumentAttribute
**************************************************************************************************************************/

/**
* Retrieves namespace of the attribute.
*
* @param[in] pXMLDocumentAttribute - XMLDocumentAttribute instance.
* @param[in] nNameSpaceBufferSize - size of the buffer (including trailing 0)
* @param[out] pNameSpaceNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNameSpaceBuffer -  buffer of returns the namespace of the attribute., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocumentattribute_getnamespace(LibMCEnv_XMLDocumentAttribute pXMLDocumentAttribute, const LibMCEnv_uint32 nNameSpaceBufferSize, LibMCEnv_uint32* pNameSpaceNeededChars, char * pNameSpaceBuffer);

/**
* Retrieves name of the attribute.
*
* @param[in] pXMLDocumentAttribute - XMLDocumentAttribute instance.
* @param[in] nNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNameBuffer -  buffer of returns the name of the attribute., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocumentattribute_getname(LibMCEnv_XMLDocumentAttribute pXMLDocumentAttribute, const LibMCEnv_uint32 nNameBufferSize, LibMCEnv_uint32* pNameNeededChars, char * pNameBuffer);

/**
* Retrieves value of the attribute as string.
*
* @param[in] pXMLDocumentAttribute - XMLDocumentAttribute instance.
* @param[in] nValueBufferSize - size of the buffer (including trailing 0)
* @param[out] pValueNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pValueBuffer -  buffer of returns the value of the attribute., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocumentattribute_getvalue(LibMCEnv_XMLDocumentAttribute pXMLDocumentAttribute, const LibMCEnv_uint32 nValueBufferSize, LibMCEnv_uint32* pValueNeededChars, char * pValueBuffer);

/**
* Checks if the value is a valid UUID string.
*
* @param[in] pXMLDocumentAttribute - XMLDocumentAttribute instance.
* @param[out] pIsValid - returns if the value is a valid UUID string.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocumentattribute_isvaliduuid(LibMCEnv_XMLDocumentAttribute pXMLDocumentAttribute, bool * pIsValid);

/**
* Retrieves value of the attribute as UUID string. Fails if value is not a UUID string.
*
* @param[in] pXMLDocumentAttribute - XMLDocumentAttribute instance.
* @param[in] nValueBufferSize - size of the buffer (including trailing 0)
* @param[out] pValueNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pValueBuffer -  buffer of returns the value of the attribute as normalized UUID string., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocumentattribute_getuuidvalue(LibMCEnv_XMLDocumentAttribute pXMLDocumentAttribute, const LibMCEnv_uint32 nValueBufferSize, LibMCEnv_uint32* pValueNeededChars, char * pValueBuffer);

/**
* Checks if the value is a valid integer in the given range.
*
* @param[in] pXMLDocumentAttribute - XMLDocumentAttribute instance.
* @param[in] nMinValue - Minimum allowed value
* @param[in] nMaxValue - Maximum allowed value
* @param[out] pIsValid - returns if the value is a valid integer.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocumentattribute_isvalidinteger(LibMCEnv_XMLDocumentAttribute pXMLDocumentAttribute, LibMCEnv_int64 nMinValue, LibMCEnv_int64 nMaxValue, bool * pIsValid);

/**
* Returns the value as integer. Fails if the value is not a valid integer in the given range.
*
* @param[in] pXMLDocumentAttribute - XMLDocumentAttribute instance.
* @param[in] nMinValue - Minimum allowed value
* @param[in] nMaxValue - Maximum allowed value
* @param[out] pValue - returns the value.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocumentattribute_getintegervalue(LibMCEnv_XMLDocumentAttribute pXMLDocumentAttribute, LibMCEnv_int64 nMinValue, LibMCEnv_int64 nMaxValue, LibMCEnv_int64 * pValue);

/**
* Checks if the value is a valid double in the given range.
*
* @param[in] pXMLDocumentAttribute - XMLDocumentAttribute instance.
* @param[in] dMinValue - Minimum allowed value
* @param[in] dMaxValue - Maximum allowed value
* @param[out] pIsValid - returns if the value is a valid double.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocumentattribute_isvaliddouble(LibMCEnv_XMLDocumentAttribute pXMLDocumentAttribute, LibMCEnv_double dMinValue, LibMCEnv_double dMaxValue, bool * pIsValid);

/**
* Returns the value as double. Fails if the value is not a valid double in the given range.
*
* @param[in] pXMLDocumentAttribute - XMLDocumentAttribute instance.
* @param[in] dMinValue - Minimum allowed value
* @param[in] dMaxValue - Maximum allowed value
* @param[out] pValue - returns the value .
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocumentattribute_getdoublevalue(LibMCEnv_XMLDocumentAttribute pXMLDocumentAttribute, LibMCEnv_double dMinValue, LibMCEnv_double dMaxValue, LibMCEnv_double * pValue);

/**
* Checks if the value is a valid boolean value, meaning an integer or true or false as string. The value will be trimmed and any character will be converted to lowercase.
*
* @param[in] pXMLDocumentAttribute - XMLDocumentAttribute instance.
* @param[out] pIsValid - returns if the value is a valid bool.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocumentattribute_isvalidbool(LibMCEnv_XMLDocumentAttribute pXMLDocumentAttribute, bool * pIsValid);

/**
* Returns the value as bool. Fails if the value is not a valid boolean value, meaning an integer or true or false as string. The value will be trimmed and any character will be converted to lowercase.
*
* @param[in] pXMLDocumentAttribute - XMLDocumentAttribute instance.
* @param[out] pValue - returns the value .
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocumentattribute_getboolvalue(LibMCEnv_XMLDocumentAttribute pXMLDocumentAttribute, bool * pValue);

/**
* Sets the value of the attribute as string.
*
* @param[in] pXMLDocumentAttribute - XMLDocumentAttribute instance.
* @param[in] pValue - new value of the attribute.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocumentattribute_setvalue(LibMCEnv_XMLDocumentAttribute pXMLDocumentAttribute, const char * pValue);

/**
* Sets the value of the attribute as UUID string.
*
* @param[in] pXMLDocumentAttribute - XMLDocumentAttribute instance.
* @param[in] pValue - new value of the attribute. Fails if Value is not a UUID.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocumentattribute_setuuidvalue(LibMCEnv_XMLDocumentAttribute pXMLDocumentAttribute, const char * pValue);

/**
* Sets the value of the attribute as integer.
*
* @param[in] pXMLDocumentAttribute - XMLDocumentAttribute instance.
* @param[in] nValue - new value of the attribute.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocumentattribute_setintegervalue(LibMCEnv_XMLDocumentAttribute pXMLDocumentAttribute, LibMCEnv_int64 nValue);

/**
* Sets the value of the attribute as double.
*
* @param[in] pXMLDocumentAttribute - XMLDocumentAttribute instance.
* @param[in] dValue - new value of the attribute.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocumentattribute_setdoublevalue(LibMCEnv_XMLDocumentAttribute pXMLDocumentAttribute, LibMCEnv_double dValue);

/**
* Sets the value of the attribute as bool.
*
* @param[in] pXMLDocumentAttribute - XMLDocumentAttribute instance.
* @param[in] bValue - new value of the attribute.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocumentattribute_setboolvalue(LibMCEnv_XMLDocumentAttribute pXMLDocumentAttribute, bool bValue);

/**
* Removes the attribute from its parent node. All subsequent calls to the class will fail.
*
* @param[in] pXMLDocumentAttribute - XMLDocumentAttribute instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocumentattribute_remove(LibMCEnv_XMLDocumentAttribute pXMLDocumentAttribute);

/*************************************************************************************************************************
 Class definition for XMLDocumentNode
**************************************************************************************************************************/

/**
* Retrieves name of the node.
*
* @param[in] pXMLDocumentNode - XMLDocumentNode instance.
* @param[in] nNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNameBuffer -  buffer of returns the name of the node., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocumentnode_getname(LibMCEnv_XMLDocumentNode pXMLDocumentNode, const LibMCEnv_uint32 nNameBufferSize, LibMCEnv_uint32* pNameNeededChars, char * pNameBuffer);

/**
* Retrieves namespace of the node.
*
* @param[in] pXMLDocumentNode - XMLDocumentNode instance.
* @param[in] nNameSpaceBufferSize - size of the buffer (including trailing 0)
* @param[out] pNameSpaceNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNameSpaceBuffer -  buffer of returns the namespace of the node., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocumentnode_getnamespace(LibMCEnv_XMLDocumentNode pXMLDocumentNode, const LibMCEnv_uint32 nNameSpaceBufferSize, LibMCEnv_uint32* pNameSpaceNeededChars, char * pNameSpaceBuffer);

/**
* Retrieves the text content of the node. A node with text content MUST NOT have children.
*
* @param[in] pXMLDocumentNode - XMLDocumentNode instance.
* @param[in] nTextContentBufferSize - size of the buffer (including trailing 0)
* @param[out] pTextContentNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pTextContentBuffer -  buffer of returns the text content of the node., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocumentnode_gettextcontent(LibMCEnv_XMLDocumentNode pXMLDocumentNode, const LibMCEnv_uint32 nTextContentBufferSize, LibMCEnv_uint32* pTextContentNeededChars, char * pTextContentBuffer);

/**
* Sets the text content of the node. Call will fail if node has children.
*
* @param[in] pXMLDocumentNode - XMLDocumentNode instance.
* @param[in] pTextContent - the new text content of the node.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocumentnode_settextcontent(LibMCEnv_XMLDocumentNode pXMLDocumentNode, const char * pTextContent);

/**
* Returns number of attributes.
*
* @param[in] pXMLDocumentNode - XMLDocumentNode instance.
* @param[out] pCount - returns the number of attributes.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocumentnode_getattributecount(LibMCEnv_XMLDocumentNode pXMLDocumentNode, LibMCEnv_uint64 * pCount);

/**
* Returns attribute instance. Fails if Index is out of range.
*
* @param[in] pXMLDocumentNode - XMLDocumentNode instance.
* @param[in] nIndex - Index of the attribute to return (0-based).
* @param[out] pAttributeInstance - XML Document attribute.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocumentnode_getattribute(LibMCEnv_XMLDocumentNode pXMLDocumentNode, LibMCEnv_uint64 nIndex, LibMCEnv_XMLDocumentAttribute * pAttributeInstance);

/**
* Returns if attribute of a specific name exists.
*
* @param[in] pXMLDocumentNode - XMLDocumentNode instance.
* @param[in] pNameSpace - Namespace of the attribute. If empty, it inherits the namespace of the node.
* @param[in] pName - Name of the attribute.
* @param[out] pAttributeExists - Returns if the attribute exists.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocumentnode_hasattribute(LibMCEnv_XMLDocumentNode pXMLDocumentNode, const char * pNameSpace, const char * pName, bool * pAttributeExists);

/**
* Returns attribute instance of a specific name. 
*
* @param[in] pXMLDocumentNode - XMLDocumentNode instance.
* @param[in] pNameSpace - Namespace of the attribute. If empty, it inherits the namespace of the node.
* @param[in] pName - Name of the attribute.
* @param[in] bMustExist - If true, the call fails if attribute does not exist. If falls, the call will return null if the attribute does not exist.
* @param[out] pAttributeInstance - XML Document attribute.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocumentnode_findattribute(LibMCEnv_XMLDocumentNode pXMLDocumentNode, const char * pNameSpace, const char * pName, bool bMustExist, LibMCEnv_XMLDocumentAttribute * pAttributeInstance);

/**
* Returns string value of an attribute. Fails if attribute does not exist.
*
* @param[in] pXMLDocumentNode - XMLDocumentNode instance.
* @param[in] pNameSpace - Namespace of the attribute. If empty, it inherits the namespace of the node.
* @param[in] pName - Name of the attribute.
* @param[in] nValueBufferSize - size of the buffer (including trailing 0)
* @param[out] pValueNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pValueBuffer -  buffer of Attribute value., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocumentnode_getattributevalue(LibMCEnv_XMLDocumentNode pXMLDocumentNode, const char * pNameSpace, const char * pName, const LibMCEnv_uint32 nValueBufferSize, LibMCEnv_uint32* pValueNeededChars, char * pValueBuffer);

/**
* Returns integer value of an attribute. Fails if attribute does not exist or attribute is not an integer .
*
* @param[in] pXMLDocumentNode - XMLDocumentNode instance.
* @param[in] pNameSpace - Namespace of the attribute. If empty, it inherits the namespace of the node.
* @param[in] pName - Name of the attribute.
* @param[in] nMinValue - Minimum allowed value.
* @param[in] nMaxValue - Maximum allowed value.
* @param[out] pValue - Attribute value.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocumentnode_getattributeintegervalue(LibMCEnv_XMLDocumentNode pXMLDocumentNode, const char * pNameSpace, const char * pName, LibMCEnv_int64 nMinValue, LibMCEnv_int64 nMaxValue, LibMCEnv_int64 * pValue);

/**
* Returns double value of an attribute. Fails if attribute does not exist or attribute is not a double value.
*
* @param[in] pXMLDocumentNode - XMLDocumentNode instance.
* @param[in] pNameSpace - Namespace of the attribute. If empty, it inherits the namespace of the node.
* @param[in] pName - Name of the attribute.
* @param[in] dMinValue - Minimum allowed value
* @param[in] dMaxValue - Maximum allowed value
* @param[out] pValue - Attribute value.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocumentnode_getattributedoublevalue(LibMCEnv_XMLDocumentNode pXMLDocumentNode, const char * pNameSpace, const char * pName, LibMCEnv_double dMinValue, LibMCEnv_double dMaxValue, LibMCEnv_double * pValue);

/**
* Returns bool value of an attribute. Fails if attribute does not exist or attribute is not a boolean value.
*
* @param[in] pXMLDocumentNode - XMLDocumentNode instance.
* @param[in] pNameSpace - Namespace of the attribute. If empty, it inherits the namespace of the node.
* @param[in] pName - Name of the attribute.
* @param[out] pValue - Attribute value.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocumentnode_getattributeboolvalue(LibMCEnv_XMLDocumentNode pXMLDocumentNode, const char * pNameSpace, const char * pName, bool * pValue);

/**
* Returns UUID value of an attribute. Fails if attribute does not exist or attribute value is not a UUID.
*
* @param[in] pXMLDocumentNode - XMLDocumentNode instance.
* @param[in] pNameSpace - Namespace of the attribute. If empty, it inherits the namespace of the node.
* @param[in] pName - Name of the attribute.
* @param[in] nValueBufferSize - size of the buffer (including trailing 0)
* @param[out] pValueNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pValueBuffer -  buffer of Attribute value., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocumentnode_getattributeuuidvalue(LibMCEnv_XMLDocumentNode pXMLDocumentNode, const char * pNameSpace, const char * pName, const LibMCEnv_uint32 nValueBufferSize, LibMCEnv_uint32* pValueNeededChars, char * pValueBuffer);

/**
* Returns string value of an attribute. Returns default value if attribute does not exist.
*
* @param[in] pXMLDocumentNode - XMLDocumentNode instance.
* @param[in] pNameSpace - Namespace of the attribute. If empty, it inherits the namespace of the node.
* @param[in] pName - Name of the attribute.
* @param[in] pDefaultValue - Default value.
* @param[in] nValueBufferSize - size of the buffer (including trailing 0)
* @param[out] pValueNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pValueBuffer -  buffer of Attribute value., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocumentnode_getattributevaluedef(LibMCEnv_XMLDocumentNode pXMLDocumentNode, const char * pNameSpace, const char * pName, const char * pDefaultValue, const LibMCEnv_uint32 nValueBufferSize, LibMCEnv_uint32* pValueNeededChars, char * pValueBuffer);

/**
* Returns integer value of an attribute. Returns default value if attribute does not exist or attribute is not an integer .
*
* @param[in] pXMLDocumentNode - XMLDocumentNode instance.
* @param[in] pNameSpace - Namespace of the attribute. If empty, it inherits the namespace of the node.
* @param[in] pName - Name of the attribute.
* @param[in] nMinValue - Minimum allowed value.
* @param[in] nMaxValue - Maximum allowed value.
* @param[in] nDefaultValue - Default value. MUST be in valid range.
* @param[out] pValue - Attribute value.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocumentnode_getattributeintegervaluedef(LibMCEnv_XMLDocumentNode pXMLDocumentNode, const char * pNameSpace, const char * pName, LibMCEnv_int64 nMinValue, LibMCEnv_int64 nMaxValue, LibMCEnv_int64 nDefaultValue, LibMCEnv_int64 * pValue);

/**
* Returns double value of an attribute. Returns default value if attribute does not exist or attribute is not a double value.
*
* @param[in] pXMLDocumentNode - XMLDocumentNode instance.
* @param[in] pNameSpace - Namespace of the attribute. If empty, it inherits the namespace of the node.
* @param[in] pName - Name of the attribute.
* @param[in] dMinValue - Minimum allowed value
* @param[in] dMaxValue - Maximum allowed value
* @param[in] dDefaultValue - Default value. MUST be in valid range.
* @param[out] pValue - Attribute value.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocumentnode_getattributedoublevaluedef(LibMCEnv_XMLDocumentNode pXMLDocumentNode, const char * pNameSpace, const char * pName, LibMCEnv_double dMinValue, LibMCEnv_double dMaxValue, LibMCEnv_double dDefaultValue, LibMCEnv_double * pValue);

/**
* Returns bool value of an attribute. Returns default value if attribute does not exist or attribute is not a boolean value.
*
* @param[in] pXMLDocumentNode - XMLDocumentNode instance.
* @param[in] pNameSpace - Namespace of the attribute. If empty, it inherits the namespace of the node.
* @param[in] pName - Name of the attribute.
* @param[in] bDefaultValue - Default value.
* @param[out] pValue - Attribute value.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocumentnode_getattributeboolvaluedef(LibMCEnv_XMLDocumentNode pXMLDocumentNode, const char * pNameSpace, const char * pName, bool bDefaultValue, bool * pValue);

/**
* Returns UUID value of an attribute. Returns default value if attribute does not exist or attribute value is not a UUID.
*
* @param[in] pXMLDocumentNode - XMLDocumentNode instance.
* @param[in] pNameSpace - Namespace of the attribute. If empty, it inherits the namespace of the node.
* @param[in] pName - Name of the attribute.
* @param[in] pDefaultValue - Attribute value. MUST be a valid UUID
* @param[in] nValueBufferSize - size of the buffer (including trailing 0)
* @param[out] pValueNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pValueBuffer -  buffer of Attribute value., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocumentnode_getattributeuuidvaluedef(LibMCEnv_XMLDocumentNode pXMLDocumentNode, const char * pNameSpace, const char * pName, const char * pDefaultValue, const LibMCEnv_uint32 nValueBufferSize, LibMCEnv_uint32* pValueNeededChars, char * pValueBuffer);

/**
* Removes the attribute with a specific name. Does nothing if attribute does not exist.
*
* @param[in] pXMLDocumentNode - XMLDocumentNode instance.
* @param[in] pNameSpace - Namespace of the attribute. If empty, it inherits the namespace of the node.
* @param[in] pName - Name of the attribute.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocumentnode_removeattribute(LibMCEnv_XMLDocumentNode pXMLDocumentNode, const char * pNameSpace, const char * pName);

/**
* Removes the attribute with a specific index. Does nothing if attribute does not exist.
*
* @param[in] pXMLDocumentNode - XMLDocumentNode instance.
* @param[in] nIndex - Index of the attribute to remove (0-based).
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocumentnode_removeattributebyindex(LibMCEnv_XMLDocumentNode pXMLDocumentNode, LibMCEnv_uint64 nIndex);

/**
* Adds an attribute with a specific name and string value. Fails if attribute already exists.
*
* @param[in] pXMLDocumentNode - XMLDocumentNode instance.
* @param[in] pNameSpace - New namespace of the attribute. MUST be either an empty string for the root namespace, or previously being registered with the document.
* @param[in] pName - Name of the attribute.
* @param[in] pValue - Value of the attribute.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocumentnode_addattribute(LibMCEnv_XMLDocumentNode pXMLDocumentNode, const char * pNameSpace, const char * pName, const char * pValue);

/**
* Adds an attribute with a specific name and integer value. Fails if attribute already exists.
*
* @param[in] pXMLDocumentNode - XMLDocumentNode instance.
* @param[in] pNameSpace - New namespace of the attribute. MUST be either an empty string for the root namespace, or previously being registered with the document.
* @param[in] pName - Name of the attribute.
* @param[in] nValue - Value of the attribute.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocumentnode_addintegerattribute(LibMCEnv_XMLDocumentNode pXMLDocumentNode, const char * pNameSpace, const char * pName, LibMCEnv_int64 nValue);

/**
* Adds an attribute with a specific name and double value. Fails if attribute already exists.
*
* @param[in] pXMLDocumentNode - XMLDocumentNode instance.
* @param[in] pNameSpace - New namespace of the child. MUST be either an empty string for the root namespace, or previously being registered with the document.
* @param[in] pName - Name of the attribute.
* @param[in] dValue - Value of the attribute.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocumentnode_adddoubleattribute(LibMCEnv_XMLDocumentNode pXMLDocumentNode, const char * pNameSpace, const char * pName, LibMCEnv_double dValue);

/**
* Adds an attribute with a specific name and bool value. Fails if attribute already exists.
*
* @param[in] pXMLDocumentNode - XMLDocumentNode instance.
* @param[in] pNameSpace - New namespace of the child. MUST be either an empty string for the root namespace, or previously being registered with the document.
* @param[in] pName - Name of the attribute.
* @param[in] bValue - Value of the attribute.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocumentnode_addboolattribute(LibMCEnv_XMLDocumentNode pXMLDocumentNode, const char * pNameSpace, const char * pName, bool bValue);

/**
* Returns all the child nodes of the XML Node.
*
* @param[in] pXMLDocumentNode - XMLDocumentNode instance.
* @param[out] pChildNodes - returns the list of child nodes.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocumentnode_getchildren(LibMCEnv_XMLDocumentNode pXMLDocumentNode, LibMCEnv_XMLDocumentNodes * pChildNodes);

/**
* Returns how many children of the XML Node have a specific name.
*
* @param[in] pXMLDocumentNode - XMLDocumentNode instance.
* @param[in] pNameSpace - New namespace of the child. MUST be either an empty string for the root namespace, or previously being registered with the document.
* @param[in] pName - Name of the node.
* @param[out] pCount - returns the number children with the specified name.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocumentnode_countchildrenbyname(LibMCEnv_XMLDocumentNode pXMLDocumentNode, const char * pNameSpace, const char * pName, LibMCEnv_uint64 * pCount);

/**
* Returns all the child nodes of the XML Node with a specific name.
*
* @param[in] pXMLDocumentNode - XMLDocumentNode instance.
* @param[in] pNameSpace - New namespace of the child. MUST be either an empty string for the root namespace, or previously being registered with the document.
* @param[in] pName - Name of the child.
* @param[out] pChildNodes - returns the list of child nodes.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocumentnode_getchildrenbyname(LibMCEnv_XMLDocumentNode pXMLDocumentNode, const char * pNameSpace, const char * pName, LibMCEnv_XMLDocumentNodes * pChildNodes);

/**
* Returns if a child with a specific name exist.
*
* @param[in] pXMLDocumentNode - XMLDocumentNode instance.
* @param[in] pNameSpace - New namespace of the child. MUST be either an empty string for the root namespace, or previously being registered with the document.
* @param[in] pName - Name of the child.
* @param[out] pChildExists - returns if a child with a specific name exists.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocumentnode_haschild(LibMCEnv_XMLDocumentNode pXMLDocumentNode, const char * pNameSpace, const char * pName, bool * pChildExists);

/**
* Returns if a child with a specific name exist once and only once.
*
* @param[in] pXMLDocumentNode - XMLDocumentNode instance.
* @param[in] pNameSpace - New namespace of the child. MUST be either an empty string for the root namespace, or previously being registered with the document.
* @param[in] pName - Name of the child.
* @param[out] pChildExists - returns if a child with a specific name exists once and only once.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocumentnode_hasuniquechild(LibMCEnv_XMLDocumentNode pXMLDocumentNode, const char * pNameSpace, const char * pName, bool * pChildExists);

/**
* Returns child with a specific name. Throws an error if name does not exist once and only once.
*
* @param[in] pXMLDocumentNode - XMLDocumentNode instance.
* @param[in] pNameSpace - New namespace of the child. MUST be either an empty string for the root namespace, or previously being registered with the document.
* @param[in] pName - Name of the child.
* @param[in] bMustExist - If true, the call fails if child does not exist. If falls, the call will return null if the child does not exist.
* @param[out] pChildInstance - returns child instance or null.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocumentnode_findchild(LibMCEnv_XMLDocumentNode pXMLDocumentNode, const char * pNameSpace, const char * pName, bool bMustExist, LibMCEnv_XMLDocumentNode * pChildInstance);

/**
* Adds a new child with a specific name. Fails if node has a non-empty text content.
*
* @param[in] pXMLDocumentNode - XMLDocumentNode instance.
* @param[in] pNameSpace - New namespace of the child. MUST be either an empty string for the root namespace, or previously being registered with the document.
* @param[in] pName - Name of the child.
* @param[out] pChildInstance - returns child instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocumentnode_addchild(LibMCEnv_XMLDocumentNode pXMLDocumentNode, const char * pNameSpace, const char * pName, LibMCEnv_XMLDocumentNode * pChildInstance);

/**
* Adds a new child with text content and a specific name. Fails if node has a non-empty text content.
*
* @param[in] pXMLDocumentNode - XMLDocumentNode instance.
* @param[in] pNameSpace - New namespace of the child. MUST be either an empty string for the root namespace, or previously being registered with the document.
* @param[in] pName - Name of the child.
* @param[in] pTextContent - Text content of the child.
* @param[out] pChildInstance - returns child instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocumentnode_addchildtext(LibMCEnv_XMLDocumentNode pXMLDocumentNode, const char * pNameSpace, const char * pName, const char * pTextContent, LibMCEnv_XMLDocumentNode * pChildInstance);

/**
* Removes a child with a specific name. All subsequent calls to the child will fail after the call.
*
* @param[in] pXMLDocumentNode - XMLDocumentNode instance.
* @param[in] pChildInstance - child instance to remove. Fails if given instance is not a child of the node.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocumentnode_removechild(LibMCEnv_XMLDocumentNode pXMLDocumentNode, LibMCEnv_XMLDocumentNode pChildInstance);

/**
* Removes all children with a specific name. Does nothing if no child with the name exists. . All subsequent calls to the deleted children will fail after the call.
*
* @param[in] pXMLDocumentNode - XMLDocumentNode instance.
* @param[in] pNameSpace - New namespace of the child. MUST be either an empty string for the root namespace, or previously being registered with the document.
* @param[in] pName - Name of the children.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocumentnode_removechildrenwithname(LibMCEnv_XMLDocumentNode pXMLDocumentNode, const char * pNameSpace, const char * pName);

/**
* Removes the node from its parent. The root node of the document can not be removed.
*
* @param[in] pXMLDocumentNode - XMLDocumentNode instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocumentnode_remove(LibMCEnv_XMLDocumentNode pXMLDocumentNode);

/*************************************************************************************************************************
 Class definition for XMLDocumentNodes
**************************************************************************************************************************/

/**
* Returns number of nodes.
*
* @param[in] pXMLDocumentNodes - XMLDocumentNodes instance.
* @param[out] pCount - returns the number of nodes in the list.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocumentnodes_getnodecount(LibMCEnv_XMLDocumentNodes pXMLDocumentNodes, LibMCEnv_uint64 * pCount);

/**
* Returns node instance. Fails if Index is out of range.
*
* @param[in] pXMLDocumentNodes - XMLDocumentNodes instance.
* @param[in] nIndex - Index of the node to return (0-based).
* @param[out] pNodeInstance - XML Node node.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocumentnodes_getnode(LibMCEnv_XMLDocumentNodes pXMLDocumentNodes, LibMCEnv_uint64 nIndex, LibMCEnv_XMLDocumentNode * pNodeInstance);

/**
* Returns how many nodes of the XML Node have a specific name.
*
* @param[in] pXMLDocumentNodes - XMLDocumentNodes instance.
* @param[in] pNameSpace - New namespace of the child. MUST be either an empty string for the root namespace, or previously being registered with the document.
* @param[in] pName - Name of the node.
* @param[out] pCount - returns the number of nodes with the specified name.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocumentnodes_countnodesbyname(LibMCEnv_XMLDocumentNodes pXMLDocumentNodes, const char * pNameSpace, const char * pName, LibMCEnv_uint64 * pCount);

/**
* Returns all the nodes nodes of the XML Node with a specific name.
*
* @param[in] pXMLDocumentNodes - XMLDocumentNodes instance.
* @param[in] pNameSpace - New namespace of the child. MUST be either an empty string for the root namespace, or previously being registered with the document.
* @param[in] pName - Name of the node.
* @param[out] pNodes - returns the list of node nodes.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocumentnodes_getnodesbyname(LibMCEnv_XMLDocumentNodes pXMLDocumentNodes, const char * pNameSpace, const char * pName, LibMCEnv_XMLDocumentNodes * pNodes);

/**
* Returns if a node with a specific name exist.
*
* @param[in] pXMLDocumentNodes - XMLDocumentNodes instance.
* @param[in] pNameSpace - New namespace of the child. MUST be either an empty string for the root namespace, or previously being registered with the document.
* @param[in] pName - Name of the node.
* @param[out] pNodeExists - returns if a node with a specific name exists.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocumentnodes_hasnode(LibMCEnv_XMLDocumentNodes pXMLDocumentNodes, const char * pNameSpace, const char * pName, bool * pNodeExists);

/**
* Returns if a node with a specific name exist once and only once.
*
* @param[in] pXMLDocumentNodes - XMLDocumentNodes instance.
* @param[in] pNameSpace - New namespace of the child. MUST be either an empty string for the root namespace, or previously being registered with the document.
* @param[in] pName - Name of the node.
* @param[out] pNodeExists - returns if a node with a specific name exists once and only once.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocumentnodes_hasuniquenode(LibMCEnv_XMLDocumentNodes pXMLDocumentNodes, const char * pNameSpace, const char * pName, bool * pNodeExists);

/**
* Returns node with a specific name. Throws an error if name does not exist once and only once.
*
* @param[in] pXMLDocumentNodes - XMLDocumentNodes instance.
* @param[in] pNameSpace - New namespace of the child. MUST be either an empty string for the root namespace, or previously being registered with the document.
* @param[in] pName - Name of the node.
* @param[in] bMustExist - If true, the call fails if node does not exist. If falls, the call will return null if the node does not exist.
* @param[out] pNodeInstance - returns node instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocumentnodes_findnode(LibMCEnv_XMLDocumentNodes pXMLDocumentNodes, const char * pNameSpace, const char * pName, bool bMustExist, LibMCEnv_XMLDocumentNode * pNodeInstance);

/*************************************************************************************************************************
 Class definition for XMLDocument
**************************************************************************************************************************/

/**
* Returns default name space of the document.
*
* @param[in] pXMLDocument - XMLDocument instance.
* @param[in] nNamespaceBufferSize - size of the buffer (including trailing 0)
* @param[out] pNamespaceNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNamespaceBuffer -  buffer of name space of the document., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocument_getdefaultnamespace(LibMCEnv_XMLDocument pXMLDocument, const LibMCEnv_uint32 nNamespaceBufferSize, LibMCEnv_uint32* pNamespaceNeededChars, char * pNamespaceBuffer);

/**
* Returns the used number of name spaces of the document.
*
* @param[in] pXMLDocument - XMLDocument instance.
* @param[out] pCount - number of registered name spaces of the document.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocument_getnamespacecount(LibMCEnv_XMLDocument pXMLDocument, LibMCEnv_uint64 * pCount);

/**
* Returns a name space of the document. Will fail if index is invalid.
*
* @param[in] pXMLDocument - XMLDocument instance.
* @param[in] nIndex - index of name space. 0-based.
* @param[in] nNamespaceBufferSize - size of the buffer (including trailing 0)
* @param[out] pNamespaceNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNamespaceBuffer -  buffer of name space of the document., may be NULL
* @param[in] nNamespacePrefixBufferSize - size of the buffer (including trailing 0)
* @param[out] pNamespacePrefixNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNamespacePrefixBuffer -  buffer of name space prefix of the document. Empty for root namespace., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocument_getnamespace(LibMCEnv_XMLDocument pXMLDocument, LibMCEnv_uint64 nIndex, const LibMCEnv_uint32 nNamespaceBufferSize, LibMCEnv_uint32* pNamespaceNeededChars, char * pNamespaceBuffer, const LibMCEnv_uint32 nNamespacePrefixBufferSize, LibMCEnv_uint32* pNamespacePrefixNeededChars, char * pNamespacePrefixBuffer);

/**
* Returns if the document has a namespace.
*
* @param[in] pXMLDocument - XMLDocument instance.
* @param[in] pNamespace - Name space name.
* @param[out] pNameSpaceIsRegistered - name space has been registered.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocument_hasnamespace(LibMCEnv_XMLDocument pXMLDocument, const char * pNamespace, bool * pNameSpaceIsRegistered);

/**
* Returns a name space of the document. Will fail if namespace is not registered.
*
* @param[in] pXMLDocument - XMLDocument instance.
* @param[in] pNamespace - name space of the document.
* @param[in] nNamespacePrefixBufferSize - size of the buffer (including trailing 0)
* @param[out] pNamespacePrefixNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNamespacePrefixBuffer -  buffer of name space prefix of the document. Empty for root namespace., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocument_getnamespaceprefix(LibMCEnv_XMLDocument pXMLDocument, const char * pNamespace, const LibMCEnv_uint32 nNamespacePrefixBufferSize, LibMCEnv_uint32* pNamespacePrefixNeededChars, char * pNamespacePrefixBuffer);

/**
* Registers a custom namespace prefix. Given Namespace MUST NOT have been in use before calling this function.
*
* @param[in] pXMLDocument - XMLDocument instance.
* @param[in] pNamespace - name space to register
* @param[in] pNamespacePrefix - name space prefix to use for the namespace. MUST NOT be in use, MUST NOT be an empty string or contain non-alphanumeric characters.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocument_registernamespace(LibMCEnv_XMLDocument pXMLDocument, const char * pNamespace, const char * pNamespacePrefix);

/**
* Changes the prefix of an existing Namespace. New Namespace MUST NOT have been in use before calling this function.
*
* @param[in] pXMLDocument - XMLDocument instance.
* @param[in] pOldNamespacePrefix - name space prefix that is currently in use.
* @param[in] pNewNamespacePrefix - name space prefix to use for the namespace. MUST NOT be in use, MUST NOT be an empty string or contain non-alphanumeric characters.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocument_changenamespaceprefix(LibMCEnv_XMLDocument pXMLDocument, const char * pOldNamespacePrefix, const char * pNewNamespacePrefix);

/**
* Returns root node of the document.
*
* @param[in] pXMLDocument - XMLDocument instance.
* @param[out] pRootNode - Root node of the document.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocument_getrootnode(LibMCEnv_XMLDocument pXMLDocument, LibMCEnv_XMLDocumentNode * pRootNode);

/**
* Saves the XML document into a string.
*
* @param[in] pXMLDocument - XMLDocument instance.
* @param[in] bAddLineBreaks - If true, line breaks and indentation will be added to the output string.
* @param[in] nXMLStringBufferSize - size of the buffer (including trailing 0)
* @param[out] pXMLStringNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pXMLStringBuffer -  buffer of String with the XML Content., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocument_savetostring(LibMCEnv_XMLDocument pXMLDocument, bool bAddLineBreaks, const LibMCEnv_uint32 nXMLStringBufferSize, LibMCEnv_uint32* pXMLStringNeededChars, char * pXMLStringBuffer);

/*************************************************************************************************************************
 Class definition for TCPIPPacket
**************************************************************************************************************************/

/**
* Returns if packet is empty.
*
* @param[in] pTCPIPPacket - TCPIPPacket instance.
* @param[out] pPacketIsEmpty - Flag if packet is empty.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_tcpippacket_isempty(LibMCEnv_TCPIPPacket pTCPIPPacket, bool * pPacketIsEmpty);

/**
* Returns the size of the packet. Returns 0 if packet is empty.
*
* @param[in] pTCPIPPacket - TCPIPPacket instance.
* @param[out] pPacketSize - returns size of packet.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_tcpippacket_getsize(LibMCEnv_TCPIPPacket pTCPIPPacket, LibMCEnv_uint32 * pPacketSize);

/**
* Returns the data of the packet. Fails if packet is empty.
*
* @param[in] pTCPIPPacket - TCPIPPacket instance.
* @param[in] nBufferBufferSize - Number of elements in buffer
* @param[out] pBufferNeededCount - will be filled with the count of the written elements, or needed buffer size.
* @param[out] pBufferBuffer - uint8  buffer of packet data.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_tcpippacket_getdata(LibMCEnv_TCPIPPacket pTCPIPPacket, const LibMCEnv_uint64 nBufferBufferSize, LibMCEnv_uint64* pBufferNeededCount, LibMCEnv_uint8 * pBufferBuffer);

/*************************************************************************************************************************
 Class definition for TCPIPConnection
**************************************************************************************************************************/

/**
* Returns the IP Address of the Connection.
*
* @param[in] pTCPIPConnection - TCPIPConnection instance.
* @param[in] nIPAddressBufferSize - size of the buffer (including trailing 0)
* @param[out] pIPAddressNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pIPAddressBuffer -  buffer of IP Address., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_tcpipconnection_getipaddress(LibMCEnv_TCPIPConnection pTCPIPConnection, const LibMCEnv_uint32 nIPAddressBufferSize, LibMCEnv_uint32* pIPAddressNeededChars, char * pIPAddressBuffer);

/**
* Returns the Port of the Connection.
*
* @param[in] pTCPIPConnection - TCPIPConnection instance.
* @param[out] pPort - Port.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_tcpipconnection_getport(LibMCEnv_TCPIPConnection pTCPIPConnection, LibMCEnv_uint32 * pPort);

/**
* Returns the Timeout of the Connection.
*
* @param[in] pTCPIPConnection - TCPIPConnection instance.
* @param[out] pTimeout - Timeout in milliseconds.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_tcpipconnection_gettimeout(LibMCEnv_TCPIPConnection pTCPIPConnection, LibMCEnv_uint32 * pTimeout);

/**
* Returns if the instance is connected.
*
* @param[in] pTCPIPConnection - TCPIPConnection instance.
* @param[out] pIsConnected - .
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_tcpipconnection_isconnected(LibMCEnv_TCPIPConnection pTCPIPConnection, bool * pIsConnected);

/**
* Disconnects from the Server, if connected.
*
* @param[in] pTCPIPConnection - TCPIPConnection instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_tcpipconnection_disconnect(LibMCEnv_TCPIPConnection pTCPIPConnection);

/**
* Disconnects and Connects to the Server.
*
* @param[in] pTCPIPConnection - TCPIPConnection instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_tcpipconnection_reconnect(LibMCEnv_TCPIPConnection pTCPIPConnection);

/**
* Sends a buffer of bytes to the Server.
*
* @param[in] pTCPIPConnection - TCPIPConnection instance.
* @param[in] nBufferBufferSize - Number of elements in buffer
* @param[in] pBufferBuffer - uint8 buffer of packet payload.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_tcpipconnection_sendbuffer(LibMCEnv_TCPIPConnection pTCPIPConnection, LibMCEnv_uint64 nBufferBufferSize, const LibMCEnv_uint8 * pBufferBuffer);

/**
* Waits for a server packet to arrive.
*
* @param[in] pTCPIPConnection - TCPIPConnection instance.
* @param[in] nTimeOutInMS - timeout in Milliseconds.
* @param[out] pDataAvailable - Flag if a new packet has arrived.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_tcpipconnection_waitfordata(LibMCEnv_TCPIPConnection pTCPIPConnection, LibMCEnv_uint32 nTimeOutInMS, bool * pDataAvailable);

/**
* Receives a fixed length packet. Blocks until expected number of bytes arrives or timeout is hit. Fails if there is a connection error. Returns empty packet if timeout is hit.
*
* @param[in] pTCPIPConnection - TCPIPConnection instance.
* @param[in] nPacketSize - Size of packet to receive. MUST be larger than 0.
* @param[in] nTimeOutInMS - Timeout in Milliseconds.
* @param[out] pPacketInstance - Packet instance. Returns empty packet if timeout is hit
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_tcpipconnection_receivefixedpacket(LibMCEnv_TCPIPConnection pTCPIPConnection, LibMCEnv_uint32 nPacketSize, LibMCEnv_uint32 nTimeOutInMS, LibMCEnv_TCPIPPacket * pPacketInstance);

/**
* Receives data. Fails if there is a connection error. Returns empty packet if timeout is hit.
*
* @param[in] pTCPIPConnection - TCPIPConnection instance.
* @param[in] nDataSize - Size of data to receive.
* @param[in] nTimeOutInMS - timeout in Milliseconds.
* @param[out] pPacketInstance - Packet instance. Size will be between 0 and DataSize.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_tcpipconnection_receivedata(LibMCEnv_TCPIPConnection pTCPIPConnection, LibMCEnv_uint32 nDataSize, LibMCEnv_uint32 nTimeOutInMS, LibMCEnv_TCPIPPacket * pPacketInstance);

/*************************************************************************************************************************
 Class definition for ModbusTCPDigitalIOStatus
**************************************************************************************************************************/

/**
* Returns the number of Digital IOs in the instance.
*
* @param[in] pModbusTCPDigitalIOStatus - ModbusTCPDigitalIOStatus instance.
* @param[out] pCount - Count.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_modbustcpdigitaliostatus_getcount(LibMCEnv_ModbusTCPDigitalIOStatus pModbusTCPDigitalIOStatus, LibMCEnv_uint32 * pCount);

/**
* Returns the base address of Digital IOs in the instance.
*
* @param[in] pModbusTCPDigitalIOStatus - ModbusTCPDigitalIOStatus instance.
* @param[out] pAddress - Base Address.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_modbustcpdigitaliostatus_getbaseaddress(LibMCEnv_ModbusTCPDigitalIOStatus pModbusTCPDigitalIOStatus, LibMCEnv_uint32 * pAddress);

/**
* Returns the cached state of the Digital IO in the instance.
*
* @param[in] pModbusTCPDigitalIOStatus - ModbusTCPDigitalIOStatus instance.
* @param[in] nIndex - Index of IO Value. 0-based.
* @param[out] pState - State Value.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_modbustcpdigitaliostatus_getvalue(LibMCEnv_ModbusTCPDigitalIOStatus pModbusTCPDigitalIOStatus, LibMCEnv_uint32 nIndex, bool * pState);

/**
* Returns all Digital IOs of the instance as byte array.
*
* @param[in] pModbusTCPDigitalIOStatus - ModbusTCPDigitalIOStatus instance.
* @param[in] nStateArrayBufferSize - Number of elements in buffer
* @param[out] pStateArrayNeededCount - will be filled with the count of the written elements, or needed buffer size.
* @param[out] pStateArrayBuffer - uint8  buffer of State Value Array.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_modbustcpdigitaliostatus_getvalues(LibMCEnv_ModbusTCPDigitalIOStatus pModbusTCPDigitalIOStatus, const LibMCEnv_uint64 nStateArrayBufferSize, LibMCEnv_uint64* pStateArrayNeededCount, LibMCEnv_uint8 * pStateArrayBuffer);

/*************************************************************************************************************************
 Class definition for ModbusTCPRegisterStatus
**************************************************************************************************************************/

/**
* Returns the number of registers in the instance.
*
* @param[in] pModbusTCPRegisterStatus - ModbusTCPRegisterStatus instance.
* @param[out] pCount - Count.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_modbustcpregisterstatus_getcount(LibMCEnv_ModbusTCPRegisterStatus pModbusTCPRegisterStatus, LibMCEnv_uint32 * pCount);

/**
* Returns the base address of registers in the instance.
*
* @param[in] pModbusTCPRegisterStatus - ModbusTCPRegisterStatus instance.
* @param[out] pAddress - Base Address.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_modbustcpregisterstatus_getbaseaddress(LibMCEnv_ModbusTCPRegisterStatus pModbusTCPRegisterStatus, LibMCEnv_uint32 * pAddress);

/**
* Returns the cached state of the registers in the instance.
*
* @param[in] pModbusTCPRegisterStatus - ModbusTCPRegisterStatus instance.
* @param[in] nIndex - Index of IO Value. 0-based.
* @param[out] pState - State Value.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_modbustcpregisterstatus_getvalue(LibMCEnv_ModbusTCPRegisterStatus pModbusTCPRegisterStatus, LibMCEnv_uint32 nIndex, LibMCEnv_uint16 * pState);

/**
* Returns all registers of the instance as word array.
*
* @param[in] pModbusTCPRegisterStatus - ModbusTCPRegisterStatus instance.
* @param[in] nStateArrayBufferSize - Number of elements in buffer
* @param[out] pStateArrayNeededCount - will be filled with the count of the written elements, or needed buffer size.
* @param[out] pStateArrayBuffer - uint16  buffer of State Value Array.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_modbustcpregisterstatus_getvalues(LibMCEnv_ModbusTCPRegisterStatus pModbusTCPRegisterStatus, const LibMCEnv_uint64 nStateArrayBufferSize, LibMCEnv_uint64* pStateArrayNeededCount, LibMCEnv_uint16 * pStateArrayBuffer);

/*************************************************************************************************************************
 Class definition for ModbusTCPConnection
**************************************************************************************************************************/

/**
* Returns the IP Address of the Connection.
*
* @param[in] pModbusTCPConnection - ModbusTCPConnection instance.
* @param[in] nIPAddressBufferSize - size of the buffer (including trailing 0)
* @param[out] pIPAddressNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pIPAddressBuffer -  buffer of IP Address., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_modbustcpconnection_getipaddress(LibMCEnv_ModbusTCPConnection pModbusTCPConnection, const LibMCEnv_uint32 nIPAddressBufferSize, LibMCEnv_uint32* pIPAddressNeededChars, char * pIPAddressBuffer);

/**
* Returns the Port of the Connection.
*
* @param[in] pModbusTCPConnection - ModbusTCPConnection instance.
* @param[out] pPort - Port.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_modbustcpconnection_getport(LibMCEnv_ModbusTCPConnection pModbusTCPConnection, LibMCEnv_uint32 * pPort);

/**
* Returns the Timeout of the Connection.
*
* @param[in] pModbusTCPConnection - ModbusTCPConnection instance.
* @param[out] pTimeout - Timeout in milliseconds.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_modbustcpconnection_gettimeout(LibMCEnv_ModbusTCPConnection pModbusTCPConnection, LibMCEnv_uint32 * pTimeout);

/**
* Returns if the instance is connected.
*
* @param[in] pModbusTCPConnection - ModbusTCPConnection instance.
* @param[out] pIsConnected - .
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_modbustcpconnection_isconnected(LibMCEnv_ModbusTCPConnection pModbusTCPConnection, bool * pIsConnected);

/**
* Disconnects from the Server.
*
* @param[in] pModbusTCPConnection - ModbusTCPConnection instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_modbustcpconnection_disconnect(LibMCEnv_ModbusTCPConnection pModbusTCPConnection);

/**
* Disconnects and Connects to the Server.
*
* @param[in] pModbusTCPConnection - ModbusTCPConnection instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_modbustcpconnection_reconnect(LibMCEnv_ModbusTCPConnection pModbusTCPConnection);

/**
* Sends a diagnosis call to the Server.
*
* @param[in] pModbusTCPConnection - ModbusTCPConnection instance.
* @param[in] nSubFunction - Modbus TCP Subfunction ID.
* @param[in] nDataField - Modbus TCP Data Field.
* @param[out] pDataResponse - Modbus TCP Data Response.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_modbustcpconnection_diagnosiscall(LibMCEnv_ModbusTCPConnection pModbusTCPConnection, LibMCEnv_uint16 nSubFunction, LibMCEnv_uint16 nDataField, LibMCEnv_uint16 * pDataResponse);

/**
* Reads coil status of Server.
*
* @param[in] pModbusTCPConnection - ModbusTCPConnection instance.
* @param[in] nStartAddress - Start Address.
* @param[in] nBitCount - Number of coils to read. MUST be larger than 0.
* @param[out] pCoilStatus - Coil status instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_modbustcpconnection_readcoilstatus(LibMCEnv_ModbusTCPConnection pModbusTCPConnection, LibMCEnv_uint32 nStartAddress, LibMCEnv_uint32 nBitCount, LibMCEnv_ModbusTCPDigitalIOStatus * pCoilStatus);

/**
* Reads input status of Server.
*
* @param[in] pModbusTCPConnection - ModbusTCPConnection instance.
* @param[in] nStartAddress - Start Address.
* @param[in] nBitCount - Number of inputs to read. MUST be larger than 0.
* @param[out] pInputStatus - Input status instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_modbustcpconnection_readinputstatus(LibMCEnv_ModbusTCPConnection pModbusTCPConnection, LibMCEnv_uint32 nStartAddress, LibMCEnv_uint32 nBitCount, LibMCEnv_ModbusTCPDigitalIOStatus * pInputStatus);

/**
* Reads holding registers of Server.
*
* @param[in] pModbusTCPConnection - ModbusTCPConnection instance.
* @param[in] nStartAddress - Start Address.
* @param[in] nRegisterCount - Number of registers. MUST be larger than 0.
* @param[out] pRegisterInstance - Holding register instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_modbustcpconnection_readholdingregisters(LibMCEnv_ModbusTCPConnection pModbusTCPConnection, LibMCEnv_uint32 nStartAddress, LibMCEnv_uint32 nRegisterCount, LibMCEnv_ModbusTCPRegisterStatus * pRegisterInstance);

/**
* Reads input registers of Server.
*
* @param[in] pModbusTCPConnection - ModbusTCPConnection instance.
* @param[in] nStartAddress - Start Address.
* @param[in] nRegisterCount - Number of registers. MUST be larger than 0.
* @param[out] pRegisterInstance - Input register instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_modbustcpconnection_readinputregisters(LibMCEnv_ModbusTCPConnection pModbusTCPConnection, LibMCEnv_uint32 nStartAddress, LibMCEnv_uint32 nRegisterCount, LibMCEnv_ModbusTCPRegisterStatus * pRegisterInstance);

/**
* Forces multiple coils on Server.
*
* @param[in] pModbusTCPConnection - ModbusTCPConnection instance.
* @param[in] nStartAddress - Start Address.
* @param[in] nBufferBufferSize - Number of elements in buffer
* @param[in] pBufferBuffer - uint8 buffer of Input coil array. One byte per Input. MUST NOT be empty
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_modbustcpconnection_forcemultiplecoils(LibMCEnv_ModbusTCPConnection pModbusTCPConnection, LibMCEnv_uint32 nStartAddress, LibMCEnv_uint64 nBufferBufferSize, const LibMCEnv_uint8 * pBufferBuffer);

/**
* Forces multiple registers on Server.
*
* @param[in] pModbusTCPConnection - ModbusTCPConnection instance.
* @param[in] nStartAddress - Start Address.
* @param[in] nBufferBufferSize - Number of elements in buffer
* @param[in] pBufferBuffer - uint16 buffer of Input register array. One word per Input. MUST NOT be empty
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_modbustcpconnection_presetmultipleregisters(LibMCEnv_ModbusTCPConnection pModbusTCPConnection, LibMCEnv_uint32 nStartAddress, LibMCEnv_uint64 nBufferBufferSize, const LibMCEnv_uint16 * pBufferBuffer);

/*************************************************************************************************************************
 Class definition for DriverStatusUpdateSession
**************************************************************************************************************************/

/**
* sets a string parameter
*
* @param[in] pDriverStatusUpdateSession - DriverStatusUpdateSession instance.
* @param[in] pParameterName - Parameter Name
* @param[in] pValue - Value to set
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_driverstatusupdatesession_setstringparameter(LibMCEnv_DriverStatusUpdateSession pDriverStatusUpdateSession, const char * pParameterName, const char * pValue);

/**
* sets a uuid parameter
*
* @param[in] pDriverStatusUpdateSession - DriverStatusUpdateSession instance.
* @param[in] pParameterName - Parameter Name
* @param[in] pValue - Value to set
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_driverstatusupdatesession_setuuidparameter(LibMCEnv_DriverStatusUpdateSession pDriverStatusUpdateSession, const char * pParameterName, const char * pValue);

/**
* sets a double parameter
*
* @param[in] pDriverStatusUpdateSession - DriverStatusUpdateSession instance.
* @param[in] pParameterName - Parameter Name
* @param[in] dValue - Value to set
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_driverstatusupdatesession_setdoubleparameter(LibMCEnv_DriverStatusUpdateSession pDriverStatusUpdateSession, const char * pParameterName, LibMCEnv_double dValue);

/**
* sets an int parameter
*
* @param[in] pDriverStatusUpdateSession - DriverStatusUpdateSession instance.
* @param[in] pParameterName - Parameter Name
* @param[in] nValue - Value to set
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_driverstatusupdatesession_setintegerparameter(LibMCEnv_DriverStatusUpdateSession pDriverStatusUpdateSession, const char * pParameterName, LibMCEnv_int64 nValue);

/**
* sets a bool parameter
*
* @param[in] pDriverStatusUpdateSession - DriverStatusUpdateSession instance.
* @param[in] pParameterName - Parameter Name
* @param[in] bValue - Value to set
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_driverstatusupdatesession_setboolparameter(LibMCEnv_DriverStatusUpdateSession pDriverStatusUpdateSession, const char * pParameterName, bool bValue);

/**
* logs a string as message
*
* @param[in] pDriverStatusUpdateSession - DriverStatusUpdateSession instance.
* @param[in] pLogString - String to Log
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_driverstatusupdatesession_logmessage(LibMCEnv_DriverStatusUpdateSession pDriverStatusUpdateSession, const char * pLogString);

/**
* logs a string as warning
*
* @param[in] pDriverStatusUpdateSession - DriverStatusUpdateSession instance.
* @param[in] pLogString - String to Log
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_driverstatusupdatesession_logwarning(LibMCEnv_DriverStatusUpdateSession pDriverStatusUpdateSession, const char * pLogString);

/**
* logs a string as info
*
* @param[in] pDriverStatusUpdateSession - DriverStatusUpdateSession instance.
* @param[in] pLogString - String to Log
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_driverstatusupdatesession_loginfo(LibMCEnv_DriverStatusUpdateSession pDriverStatusUpdateSession, const char * pLogString);

/**
* Puts the current instance to sleep for a definite amount of time. MUST be used instead of a blocking sleep call.
*
* @param[in] pDriverStatusUpdateSession - DriverStatusUpdateSession instance.
* @param[in] nDelay - Milliseconds to sleeps
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_driverstatusupdatesession_sleep(LibMCEnv_DriverStatusUpdateSession pDriverStatusUpdateSession, LibMCEnv_uint32 nDelay);

/*************************************************************************************************************************
 Class definition for DriverEnvironment
**************************************************************************************************************************/

/**
* creates a status update object which can be easily called from an independent thread.
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[out] pUpdateStatusInstance - creates a status update instance
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_driverenvironment_createstatusupdatesession(LibMCEnv_DriverEnvironment pDriverEnvironment, LibMCEnv_DriverStatusUpdateSession * pUpdateStatusInstance);

/**
* creates a temporary working directory.
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[out] pWorkingDirectory - creates a working directory
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_driverenvironment_createworkingdirectory(LibMCEnv_DriverEnvironment pDriverEnvironment, LibMCEnv_WorkingDirectory * pWorkingDirectory);

/**
* creates a TCP/IP Connection for a specific IP address and port.
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] pIPAddress - IP Address.
* @param[in] nPort - Port.
* @param[in] nTimeOutInMS - timeout in Milliseconds.
* @param[out] pConnectionInstance - connects to the given IP Address
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_driverenvironment_createtcpipconnection(LibMCEnv_DriverEnvironment pDriverEnvironment, const char * pIPAddress, LibMCEnv_uint32 nPort, LibMCEnv_uint32 nTimeOutInMS, LibMCEnv_TCPIPConnection * pConnectionInstance);

/**
* creates a Modbus TCP Connection for a specific IP address and port.
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] pIPAddress - IP Address.
* @param[in] nPort - Port.
* @param[in] nTimeOutInMS - timeout in Milliseconds.
* @param[out] pConnectionInstance - connects to the given IP Address
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_driverenvironment_createmodbustcpconnection(LibMCEnv_DriverEnvironment pDriverEnvironment, const char * pIPAddress, LibMCEnv_uint32 nPort, LibMCEnv_uint32 nTimeOutInMS, LibMCEnv_ModbusTCPConnection * pConnectionInstance);

/**
* creates an empty XML Document.
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] pRootNodeName - Name of the root node. MUST be a valid XML Node Name string.
* @param[in] pDefaultNamespace - Default namespace of the document. MUST be a valid XML namespace string.
* @param[out] pXMLDocument - XML Document Instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_driverenvironment_createxmldocument(LibMCEnv_DriverEnvironment pDriverEnvironment, const char * pRootNodeName, const char * pDefaultNamespace, LibMCEnv_XMLDocument * pXMLDocument);

/**
* parses an XML String and returns an XML Document instance. Throws an error if XML is malformatted.
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] pXMLString - XML String.
* @param[out] pXMLDocument - XML Document Instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_driverenvironment_parsexmlstring(LibMCEnv_DriverEnvironment pDriverEnvironment, const char * pXMLString, LibMCEnv_XMLDocument * pXMLDocument);

/**
* parses a XML stored in a byte array and returns an XML Document instance. . Throws an error if XML is malformatted.
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] nXMLDataBufferSize - Number of elements in buffer
* @param[in] pXMLDataBuffer - uint8 buffer of XML Binary data.
* @param[out] pXMLDocument - XML Document Instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_driverenvironment_parsexmldata(LibMCEnv_DriverEnvironment pDriverEnvironment, LibMCEnv_uint64 nXMLDataBufferSize, const LibMCEnv_uint8 * pXMLDataBuffer, LibMCEnv_XMLDocument * pXMLDocument);

/**
* creates an empty data table.
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[out] pDataTableInstance - Data Table Instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_driverenvironment_createdatatable(LibMCEnv_DriverEnvironment pDriverEnvironment, LibMCEnv_DataTable * pDataTableInstance);

/**
* retrieves if attached driver has data with the given identifier.
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] pIdentifier - identifier of the binary data in the driver package.
* @param[out] pHasResourceData - returns true if the resource exists in the machine resource package.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_driverenvironment_driverhasresourcedata(LibMCEnv_DriverEnvironment pDriverEnvironment, const char * pIdentifier, bool * pHasResourceData);

/**
* retrieves if attached driver has data with the given identifier.
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] pIdentifier - identifier of the binary data in the driver package.
* @param[out] pHasResourceData - returns true if the resource exists in the machine resource package.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_driverenvironment_machinehasresourcedata(LibMCEnv_DriverEnvironment pDriverEnvironment, const char * pIdentifier, bool * pHasResourceData);

/**
* retrieves attached driver resource data into a memory buffer. (depreciated, equivalent to RetrieveDriverResourceData)
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] pIdentifier - identifier of the binary data in the driver package.
* @param[in] nDataBufferBufferSize - Number of elements in buffer
* @param[out] pDataBufferNeededCount - will be filled with the count of the written elements, or needed buffer size.
* @param[out] pDataBufferBuffer - uint8  buffer of buffer data.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_driverenvironment_retrievedriverdata(LibMCEnv_DriverEnvironment pDriverEnvironment, const char * pIdentifier, const LibMCEnv_uint64 nDataBufferBufferSize, LibMCEnv_uint64* pDataBufferNeededCount, LibMCEnv_uint8 * pDataBufferBuffer);

/**
* retrieves attached driver resource data into a memory buffer.
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] pIdentifier - identifier of the binary data in the driver package.
* @param[in] nDataBufferBufferSize - Number of elements in buffer
* @param[out] pDataBufferNeededCount - will be filled with the count of the written elements, or needed buffer size.
* @param[out] pDataBufferBuffer - uint8  buffer of buffer data.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_driverenvironment_retrievedriverresourcedata(LibMCEnv_DriverEnvironment pDriverEnvironment, const char * pIdentifier, const LibMCEnv_uint64 nDataBufferBufferSize, LibMCEnv_uint64* pDataBufferNeededCount, LibMCEnv_uint8 * pDataBufferBuffer);

/**
* retrieves a machine resource data (Plugins Directory) driver data into a memory buffer.
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] pIdentifier - identifier of the binary data in the machine resource package.
* @param[in] nDataBufferBufferSize - Number of elements in buffer
* @param[out] pDataBufferNeededCount - will be filled with the count of the written elements, or needed buffer size.
* @param[out] pDataBufferBuffer - uint8  buffer of buffer data.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_driverenvironment_retrievemachineresourcedata(LibMCEnv_DriverEnvironment pDriverEnvironment, const char * pIdentifier, const LibMCEnv_uint64 nDataBufferBufferSize, LibMCEnv_uint64* pDataBufferNeededCount, LibMCEnv_uint8 * pDataBufferBuffer);

/**
* Creates an accessor object for a toolpath. Toolpath MUST have been loaded into memory before.
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] pStreamUUID - UUID of the stream.
* @param[out] pToolpathInstance - Toolpath instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_driverenvironment_createtoolpathaccessor(LibMCEnv_DriverEnvironment pDriverEnvironment, const char * pStreamUUID, LibMCEnv_ToolpathAccessor * pToolpathInstance);

/**
* checks if a name is a valid alphanumerical string for parameters.
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] pParameterName - Parameter Name
* @param[out] pNameIsValid - returns true if the parameter name is a valid name.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_driverenvironment_parameternameisvalid(LibMCEnv_DriverEnvironment pDriverEnvironment, const char * pParameterName, bool * pNameIsValid);

/**
* registers a string parameter. Must only be called during driver creation.
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] pParameterName - Parameter Name
* @param[in] pDescription - Parameter Description
* @param[in] pDefaultValue - default value to set
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_driverenvironment_registerstringparameter(LibMCEnv_DriverEnvironment pDriverEnvironment, const char * pParameterName, const char * pDescription, const char * pDefaultValue);

/**
* registers a uuid parameter. Must only be called during driver creation.
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] pParameterName - Parameter Name
* @param[in] pDescription - Parameter Description
* @param[in] pDefaultValue - default value to set
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_driverenvironment_registeruuidparameter(LibMCEnv_DriverEnvironment pDriverEnvironment, const char * pParameterName, const char * pDescription, const char * pDefaultValue);

/**
* registers a double parameter. Must only be called during driver creation. The default units are 0.001.
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] pParameterName - Parameter Name
* @param[in] pDescription - Parameter Description
* @param[in] dDefaultValue - default value to set
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_driverenvironment_registerdoubleparameter(LibMCEnv_DriverEnvironment pDriverEnvironment, const char * pParameterName, const char * pDescription, LibMCEnv_double dDefaultValue);

/**
* registers a double parameter. Must only be called during driver creation.
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] pParameterName - Parameter Name
* @param[in] pDescription - Parameter Description
* @param[in] dDefaultValue - default value to set
* @param[in] dUnits - unit factor to use
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_driverenvironment_registerdoubleparameterwithunits(LibMCEnv_DriverEnvironment pDriverEnvironment, const char * pParameterName, const char * pDescription, LibMCEnv_double dDefaultValue, LibMCEnv_double dUnits);

/**
* registers an int parameter. Must only be called during driver creation.
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] pParameterName - Parameter Name
* @param[in] pDescription - Parameter Description
* @param[in] nDefaultValue - default value to set
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_driverenvironment_registerintegerparameter(LibMCEnv_DriverEnvironment pDriverEnvironment, const char * pParameterName, const char * pDescription, LibMCEnv_int64 nDefaultValue);

/**
* registers a bool parameter. Must only be called during driver creation.
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] pParameterName - Parameter Name
* @param[in] pDescription - Parameter Description
* @param[in] bDefaultValue - default value to set
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_driverenvironment_registerboolparameter(LibMCEnv_DriverEnvironment pDriverEnvironment, const char * pParameterName, const char * pDescription, bool bDefaultValue);

/**
* sets a string parameter
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] pParameterName - Parameter Name
* @param[in] pValue - Value to set
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_driverenvironment_setstringparameter(LibMCEnv_DriverEnvironment pDriverEnvironment, const char * pParameterName, const char * pValue);

/**
* sets a uuid parameter
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] pParameterName - Parameter Name
* @param[in] pValue - Value to set
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_driverenvironment_setuuidparameter(LibMCEnv_DriverEnvironment pDriverEnvironment, const char * pParameterName, const char * pValue);

/**
* sets a double parameter
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] pParameterName - Parameter Name
* @param[in] dValue - Value to set
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_driverenvironment_setdoubleparameter(LibMCEnv_DriverEnvironment pDriverEnvironment, const char * pParameterName, LibMCEnv_double dValue);

/**
* sets an int parameter
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] pParameterName - Parameter Name
* @param[in] nValue - Value to set
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_driverenvironment_setintegerparameter(LibMCEnv_DriverEnvironment pDriverEnvironment, const char * pParameterName, LibMCEnv_int64 nValue);

/**
* sets a bool parameter
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] pParameterName - Parameter Name
* @param[in] bValue - Value to set
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_driverenvironment_setboolparameter(LibMCEnv_DriverEnvironment pDriverEnvironment, const char * pParameterName, bool bValue);

/**
* Puts the current instance to sleep for a definite amount of time. MUST be used instead of a blocking sleep call.
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] nDelay - Milliseconds to sleeps
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_driverenvironment_sleep(LibMCEnv_DriverEnvironment pDriverEnvironment, LibMCEnv_uint32 nDelay);

/**
* Returns the global timer in milliseconds.
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[out] pTimerValue - Timer value in Milliseconds
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_driverenvironment_getglobaltimerinmilliseconds(LibMCEnv_DriverEnvironment pDriverEnvironment, LibMCEnv_uint64 * pTimerValue);

/**
* Returns the global timer in microseconds.
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[out] pTimerValue - Timer value in Microseconds
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_driverenvironment_getglobaltimerinmicroseconds(LibMCEnv_DriverEnvironment pDriverEnvironment, LibMCEnv_uint64 * pTimerValue);

/**
* logs a string as message
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] pLogString - String to Log
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_driverenvironment_logmessage(LibMCEnv_DriverEnvironment pDriverEnvironment, const char * pLogString);

/**
* logs a string as warning
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] pLogString - String to Log
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_driverenvironment_logwarning(LibMCEnv_DriverEnvironment pDriverEnvironment, const char * pLogString);

/**
* logs a string as info
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] pLogString - String to Log
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_driverenvironment_loginfo(LibMCEnv_DriverEnvironment pDriverEnvironment, const char * pLogString);

/**
* creates an empty image object.
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] nPixelSizeX - Pixel size in X. MUST be positive.
* @param[in] nPixelSizeY - Pixel size in Y. MUST be positive.
* @param[in] dDPIValueX - DPI Value in X. MUST be positive.
* @param[in] dDPIValueY - DPI Value in Y. MUST be positive.
* @param[in] ePixelFormat - Pixel format to use.
* @param[out] pImageDataInstance - Empty image instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_driverenvironment_createemptyimage(LibMCEnv_DriverEnvironment pDriverEnvironment, LibMCEnv_uint32 nPixelSizeX, LibMCEnv_uint32 nPixelSizeY, LibMCEnv_double dDPIValueX, LibMCEnv_double dDPIValueY, LibMCEnv::eImagePixelFormat ePixelFormat, LibMCEnv_ImageData * pImageDataInstance);

/**
* creates an image object from a PNG data stream.
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] nPNGDataBufferSize - Number of elements in buffer
* @param[in] pPNGDataBuffer - uint8 buffer of DPI Value in X. MUST be positive.
* @param[in] dDPIValueX - DPI Value in X. MUST be positive.
* @param[in] dDPIValueY - DPI Value in Y. MUST be positive.
* @param[in] ePixelFormat - Pixel format to use. Might lose color and alpha information.
* @param[out] pImageDataInstance - Image instance containing the PNG image.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_driverenvironment_loadpngimage(LibMCEnv_DriverEnvironment pDriverEnvironment, LibMCEnv_uint64 nPNGDataBufferSize, const LibMCEnv_uint8 * pPNGDataBuffer, LibMCEnv_double dDPIValueX, LibMCEnv_double dDPIValueY, LibMCEnv::eImagePixelFormat ePixelFormat, LibMCEnv_ImageData * pImageDataInstance);

/**
* Creates an empty discrete field.
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] nPixelCountX - Pixel count in X. MUST be positive.
* @param[in] nPixelCountY - Pixel count in Y. MUST be positive.
* @param[in] dDPIValueX - DPI Value in X. MUST be positive.
* @param[in] dDPIValueY - DPI Value in Y. MUST be positive.
* @param[in] dOriginX - Origin X of the field in mm.
* @param[in] dOriginY - Origin Y of the field in mm.
* @param[in] dDefaultValue - Default value of the field.
* @param[out] pFieldDataInstance - Empty field instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_driverenvironment_creatediscretefield2d(LibMCEnv_DriverEnvironment pDriverEnvironment, LibMCEnv_uint32 nPixelCountX, LibMCEnv_uint32 nPixelCountY, LibMCEnv_double dDPIValueX, LibMCEnv_double dDPIValueY, LibMCEnv_double dOriginX, LibMCEnv_double dOriginY, LibMCEnv_double dDefaultValue, LibMCEnv_DiscreteFieldData2D * pFieldDataInstance);

/**
* Creates a discrete field from the greyscale values of an image. RGB colors in the image will be averaged to obtain a greyscale color.
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] pImageDataInstance - Image instance containing the pixel data.
* @param[in] dBlackValue - Value that the minimum color (black) shall be mapped to.
* @param[in] dWhiteValue - Value that the maximum color (white) shall be mapped to.
* @param[in] dOriginX - Origin X of the field in mm.
* @param[in] dOriginY - Origin Y of the field in mm.
* @param[out] pFieldDataInstance - Empty field instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_driverenvironment_creatediscretefield2dfromimage(LibMCEnv_DriverEnvironment pDriverEnvironment, LibMCEnv_ImageData pImageDataInstance, LibMCEnv_double dBlackValue, LibMCEnv_double dWhiteValue, LibMCEnv_double dOriginX, LibMCEnv_double dOriginY, LibMCEnv_DiscreteFieldData2D * pFieldDataInstance);

/**
* Returns if a build object exists. Fails if BuildUUID is not a valid UUID string.
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] pBuildUUID - UUID of the build entity.
* @param[out] pBuildExists - Returns true if build exists
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_driverenvironment_hasbuildjob(LibMCEnv_DriverEnvironment pDriverEnvironment, const char * pBuildUUID, bool * pBuildExists);

/**
* Returns a instance of a build object. Fails if build uuid does not exist.
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] pBuildUUID - UUID of the build entity.
* @param[out] pBuildInstance - Build instance
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_driverenvironment_getbuildjob(LibMCEnv_DriverEnvironment pDriverEnvironment, const char * pBuildUUID, LibMCEnv_Build * pBuildInstance);

/**
* Returns if a build execution exists. Fails if ExecutionUUID is not a valid UUID string.
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] pExecutionUUID - UUID of the execution entity.
* @param[out] pExecutionExists - Returns true if execution exists
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_driverenvironment_hasbuildexecution(LibMCEnv_DriverEnvironment pDriverEnvironment, const char * pExecutionUUID, bool * pExecutionExists);

/**
* Returns a instance of a build execution object. Fails if build execution uuid does not exist.
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] pExecutionUUID - UUID of the execution entity.
* @param[out] pExecutionInstance - Build execution instance
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_driverenvironment_getbuildexecution(LibMCEnv_DriverEnvironment pDriverEnvironment, const char * pExecutionUUID, LibMCEnv_BuildExecution * pExecutionInstance);

/**
* Creates a crypto context.
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[out] pContext - Cryptographic context instance
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_driverenvironment_createcryptocontext(LibMCEnv_DriverEnvironment pDriverEnvironment, LibMCEnv_CryptoContext * pContext);

/**
* Returns the current time as DateTime object instance.
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[out] pDateTime - Date Time Instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_driverenvironment_getcurrentdatetime(LibMCEnv_DriverEnvironment pDriverEnvironment, LibMCEnv_DateTime * pDateTime);

/**
* Returns a custom time as DateTime object instance. Fails if the values are not a valid time from January first 1970 to year 1 million.
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] nYear - Year. Must be larger or equal than 1970.
* @param[in] nMonth - Month. Must be between 1 and 12.
* @param[in] nDay - Day. Must be between 1 and 31.
* @param[in] nHour - Hour. Must be between 0 and 23.
* @param[in] nMinute - Minute. Must be between 0 and 59.
* @param[in] nSecond - Second. Must be between 0 and 59.
* @param[in] nMicrosecond - Microsecond. Must be between 0 and 999999.
* @param[out] pDateTime - Date Time Instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_driverenvironment_getcustomdatetime(LibMCEnv_DriverEnvironment pDriverEnvironment, LibMCEnv_uint32 nYear, LibMCEnv_uint32 nMonth, LibMCEnv_uint32 nDay, LibMCEnv_uint32 nHour, LibMCEnv_uint32 nMinute, LibMCEnv_uint32 nSecond, LibMCEnv_uint32 nMicrosecond, LibMCEnv_DateTime * pDateTime);

/**
* Returns the startup time of the system as DateTime object instance. All Timer values are counted from there.
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[out] pDateTime - Date Time Instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_driverenvironment_getstartdatetime(LibMCEnv_DriverEnvironment pDriverEnvironment, LibMCEnv_DateTime * pDateTime);

/*************************************************************************************************************************
 Class definition for SignalTrigger
**************************************************************************************************************************/

/**
* Returns, if signal channel is available.
*
* @param[in] pSignalTrigger - SignalTrigger instance.
* @param[out] pChannelIsAvailable - Returns true, if signal channel is available.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_signaltrigger_cantrigger(LibMCEnv_SignalTrigger pSignalTrigger, bool * pChannelIsAvailable);

/**
* Triggers a signal, if signal channel is available.
*
* @param[in] pSignalTrigger - SignalTrigger instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_signaltrigger_trigger(LibMCEnv_SignalTrigger pSignalTrigger);

/**
* Waits until the signal is reset.
*
* @param[in] pSignalTrigger - SignalTrigger instance.
* @param[in] nTimeOut - Timeout in Milliseconds. 0 for Immediate return.
* @param[out] pSuccess - Flag if signal handling has been handled.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_signaltrigger_waitforhandling(LibMCEnv_SignalTrigger pSignalTrigger, LibMCEnv_uint32 nTimeOut, bool * pSuccess);

/**
* Returns the signal name.
*
* @param[in] pSignalTrigger - SignalTrigger instance.
* @param[in] nSignalNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pSignalNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pSignalNameBuffer -  buffer of Name Of Signal, may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_signaltrigger_getname(LibMCEnv_SignalTrigger pSignalTrigger, const LibMCEnv_uint32 nSignalNameBufferSize, LibMCEnv_uint32* pSignalNameNeededChars, char * pSignalNameBuffer);

/**
* Returns the signal state machine instance.
*
* @param[in] pSignalTrigger - SignalTrigger instance.
* @param[in] nStateMachineNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pStateMachineNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pStateMachineNameBuffer -  buffer of Name Of State Machine, may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_signaltrigger_getstatemachine(LibMCEnv_SignalTrigger pSignalTrigger, const LibMCEnv_uint32 nStateMachineNameBufferSize, LibMCEnv_uint32* pStateMachineNameNeededChars, char * pStateMachineNameBuffer);

/**
* sets a string value
*
* @param[in] pSignalTrigger - SignalTrigger instance.
* @param[in] pName - Name
* @param[in] pValue - Value
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_signaltrigger_setstring(LibMCEnv_SignalTrigger pSignalTrigger, const char * pName, const char * pValue);

/**
* sets a uuid value
*
* @param[in] pSignalTrigger - SignalTrigger instance.
* @param[in] pName - Name
* @param[in] pValue - Value
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_signaltrigger_setuuid(LibMCEnv_SignalTrigger pSignalTrigger, const char * pName, const char * pValue);

/**
* sets a double
*
* @param[in] pSignalTrigger - SignalTrigger instance.
* @param[in] pName - Name
* @param[in] dValue - Value
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_signaltrigger_setdouble(LibMCEnv_SignalTrigger pSignalTrigger, const char * pName, LibMCEnv_double dValue);

/**
* sets an int.
*
* @param[in] pSignalTrigger - SignalTrigger instance.
* @param[in] pName - Name
* @param[in] nValue - Value
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_signaltrigger_setinteger(LibMCEnv_SignalTrigger pSignalTrigger, const char * pName, LibMCEnv_int64 nValue);

/**
* sets a bool
*
* @param[in] pSignalTrigger - SignalTrigger instance.
* @param[in] pName - Name
* @param[in] bValue - Value
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_signaltrigger_setbool(LibMCEnv_SignalTrigger pSignalTrigger, const char * pName, bool bValue);

/**
* returns a string value of the result
*
* @param[in] pSignalTrigger - SignalTrigger instance.
* @param[in] pName - Name
* @param[in] nValueBufferSize - size of the buffer (including trailing 0)
* @param[out] pValueNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pValueBuffer -  buffer of Value, may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_signaltrigger_getstringresult(LibMCEnv_SignalTrigger pSignalTrigger, const char * pName, const LibMCEnv_uint32 nValueBufferSize, LibMCEnv_uint32* pValueNeededChars, char * pValueBuffer);

/**
* returns a uuid value of the result
*
* @param[in] pSignalTrigger - SignalTrigger instance.
* @param[in] pName - Name
* @param[in] nValueBufferSize - size of the buffer (including trailing 0)
* @param[out] pValueNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pValueBuffer -  buffer of Value, may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_signaltrigger_getuuidresult(LibMCEnv_SignalTrigger pSignalTrigger, const char * pName, const LibMCEnv_uint32 nValueBufferSize, LibMCEnv_uint32* pValueNeededChars, char * pValueBuffer);

/**
* returns a string value of the result
*
* @param[in] pSignalTrigger - SignalTrigger instance.
* @param[in] pName - Name
* @param[out] pValue - Value
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_signaltrigger_getdoubleresult(LibMCEnv_SignalTrigger pSignalTrigger, const char * pName, LibMCEnv_double * pValue);

/**
* returns an int value of the result.
*
* @param[in] pSignalTrigger - SignalTrigger instance.
* @param[in] pName - Name
* @param[out] pValue - Value
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_signaltrigger_getintegerresult(LibMCEnv_SignalTrigger pSignalTrigger, const char * pName, LibMCEnv_int64 * pValue);

/**
* returns a bool value of the result.
*
* @param[in] pSignalTrigger - SignalTrigger instance.
* @param[in] pName - Name
* @param[out] pValue - Value
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_signaltrigger_getboolresult(LibMCEnv_SignalTrigger pSignalTrigger, const char * pName, bool * pValue);

/*************************************************************************************************************************
 Class definition for SignalHandler
**************************************************************************************************************************/

/**
* Marks signal as handled and resets signal channel.
*
* @param[in] pSignalHandler - SignalHandler instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_signalhandler_signalhandled(LibMCEnv_SignalHandler pSignalHandler);

/**
* Returns the signal name.
*
* @param[in] pSignalHandler - SignalHandler instance.
* @param[in] nSignalNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pSignalNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pSignalNameBuffer -  buffer of Name Of Signal, may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_signalhandler_getname(LibMCEnv_SignalHandler pSignalHandler, const LibMCEnv_uint32 nSignalNameBufferSize, LibMCEnv_uint32* pSignalNameNeededChars, char * pSignalNameBuffer);

/**
* Returns the signal id. Depreciated.
*
* @param[in] pSignalHandler - SignalHandler instance.
* @param[in] nSignalIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pSignalIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pSignalIDBuffer -  buffer of Signal Identifier, may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_signalhandler_getsignalid(LibMCEnv_SignalHandler pSignalHandler, const LibMCEnv_uint32 nSignalIDBufferSize, LibMCEnv_uint32* pSignalIDNeededChars, char * pSignalIDBuffer);

/**
* Returns the signal uuid. Identical to GetSignalID.
*
* @param[in] pSignalHandler - SignalHandler instance.
* @param[in] nSignalUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pSignalUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pSignalUUIDBuffer -  buffer of Signal Identifier, may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_signalhandler_getsignaluuid(LibMCEnv_SignalHandler pSignalHandler, const LibMCEnv_uint32 nSignalUUIDBufferSize, LibMCEnv_uint32* pSignalUUIDNeededChars, char * pSignalUUIDBuffer);

/**
* Returns the signal state machine instance.
*
* @param[in] pSignalHandler - SignalHandler instance.
* @param[in] nStateMachineNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pStateMachineNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pStateMachineNameBuffer -  buffer of Name Of State Machine, may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_signalhandler_getstatemachine(LibMCEnv_SignalHandler pSignalHandler, const LibMCEnv_uint32 nStateMachineNameBufferSize, LibMCEnv_uint32* pStateMachineNameNeededChars, char * pStateMachineNameBuffer);

/**
* gets a string value
*
* @param[in] pSignalHandler - SignalHandler instance.
* @param[in] pName - Name
* @param[in] nValueBufferSize - size of the buffer (including trailing 0)
* @param[out] pValueNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pValueBuffer -  buffer of Value, may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_signalhandler_getstring(LibMCEnv_SignalHandler pSignalHandler, const char * pName, const LibMCEnv_uint32 nValueBufferSize, LibMCEnv_uint32* pValueNeededChars, char * pValueBuffer);

/**
* gets a uuid value
*
* @param[in] pSignalHandler - SignalHandler instance.
* @param[in] pName - Name
* @param[in] nValueBufferSize - size of the buffer (including trailing 0)
* @param[out] pValueNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pValueBuffer -  buffer of Value, may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_signalhandler_getuuid(LibMCEnv_SignalHandler pSignalHandler, const char * pName, const LibMCEnv_uint32 nValueBufferSize, LibMCEnv_uint32* pValueNeededChars, char * pValueBuffer);

/**
* gets a double
*
* @param[in] pSignalHandler - SignalHandler instance.
* @param[in] pName - Name
* @param[out] pValue - Value
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_signalhandler_getdouble(LibMCEnv_SignalHandler pSignalHandler, const char * pName, LibMCEnv_double * pValue);

/**
* gets an int.
*
* @param[in] pSignalHandler - SignalHandler instance.
* @param[in] pName - Name
* @param[out] pValue - Value
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_signalhandler_getinteger(LibMCEnv_SignalHandler pSignalHandler, const char * pName, LibMCEnv_int64 * pValue);

/**
* gets a bool
*
* @param[in] pSignalHandler - SignalHandler instance.
* @param[in] pName - Name
* @param[out] pValue - Value
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_signalhandler_getbool(LibMCEnv_SignalHandler pSignalHandler, const char * pName, bool * pValue);

/**
* returns a string value of the result
*
* @param[in] pSignalHandler - SignalHandler instance.
* @param[in] pName - Name
* @param[in] pValue - Value
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_signalhandler_setstringresult(LibMCEnv_SignalHandler pSignalHandler, const char * pName, const char * pValue);

/**
* returns a uuid value of the result
*
* @param[in] pSignalHandler - SignalHandler instance.
* @param[in] pName - Name
* @param[in] pValue - Value
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_signalhandler_setuuidresult(LibMCEnv_SignalHandler pSignalHandler, const char * pName, const char * pValue);

/**
* returns a string value of the result
*
* @param[in] pSignalHandler - SignalHandler instance.
* @param[in] pName - Name
* @param[in] dValue - Value
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_signalhandler_setdoubleresult(LibMCEnv_SignalHandler pSignalHandler, const char * pName, LibMCEnv_double dValue);

/**
* sets an int.
*
* @param[in] pSignalHandler - SignalHandler instance.
* @param[in] pName - Name
* @param[in] nValue - Value
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_signalhandler_setintegerresult(LibMCEnv_SignalHandler pSignalHandler, const char * pName, LibMCEnv_int64 nValue);

/**
* sets a bool
*
* @param[in] pSignalHandler - SignalHandler instance.
* @param[in] pName - Name
* @param[in] bValue - Value
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_signalhandler_setboolresult(LibMCEnv_SignalHandler pSignalHandler, const char * pName, bool bValue);

/*************************************************************************************************************************
 Class definition for BaseTempStreamWriter
**************************************************************************************************************************/

/**
* Returns the UUID of the stream.
*
* @param[in] pBaseTempStreamWriter - BaseTempStreamWriter instance.
* @param[in] nUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pUUIDBuffer -  buffer of Returns stream uuid., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_basetempstreamwriter_getuuid(LibMCEnv_BaseTempStreamWriter pBaseTempStreamWriter, const LibMCEnv_uint32 nUUIDBufferSize, LibMCEnv_uint32* pUUIDNeededChars, char * pUUIDBuffer);

/**
* Returns the name of the stream.
*
* @param[in] pBaseTempStreamWriter - BaseTempStreamWriter instance.
* @param[in] nNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNameBuffer -  buffer of Returns stream name., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_basetempstreamwriter_getname(LibMCEnv_BaseTempStreamWriter pBaseTempStreamWriter, const LibMCEnv_uint32 nNameBufferSize, LibMCEnv_uint32* pNameNeededChars, char * pNameBuffer);

/**
* Returns the MIME type of the stream.
*
* @param[in] pBaseTempStreamWriter - BaseTempStreamWriter instance.
* @param[in] nMIMETypeBufferSize - size of the buffer (including trailing 0)
* @param[out] pMIMETypeNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pMIMETypeBuffer -  buffer of Returns stream MIME Type., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_basetempstreamwriter_getmimetype(LibMCEnv_BaseTempStreamWriter pBaseTempStreamWriter, const LibMCEnv_uint32 nMIMETypeBufferSize, LibMCEnv_uint32* pMIMETypeNeededChars, char * pMIMETypeBuffer);

/**
* Returns the current size of the stream.
*
* @param[in] pBaseTempStreamWriter - BaseTempStreamWriter instance.
* @param[out] pSize - Current size of the stream.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_basetempstreamwriter_getsize(LibMCEnv_BaseTempStreamWriter pBaseTempStreamWriter, LibMCEnv_uint64 * pSize);

/**
* Finishes the stream writing. All subsequent write attempts will fail. Fails if stream has been finished already.
*
* @param[in] pBaseTempStreamWriter - BaseTempStreamWriter instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_basetempstreamwriter_finish(LibMCEnv_BaseTempStreamWriter pBaseTempStreamWriter);

/**
* Returns if the stream writing has already been finished.
*
* @param[in] pBaseTempStreamWriter - BaseTempStreamWriter instance.
* @param[out] pFinished - If true, writing into the stream is not possible anymore.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_basetempstreamwriter_isfinished(LibMCEnv_BaseTempStreamWriter pBaseTempStreamWriter, bool * pFinished);

/**
* Creates a stream reader on this stream. This call will finish the stream writing should it not be finished.
*
* @param[in] pBaseTempStreamWriter - BaseTempStreamWriter instance.
* @param[out] pStreamReader - Stream reader instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_basetempstreamwriter_getstreamreader(LibMCEnv_BaseTempStreamWriter pBaseTempStreamWriter, LibMCEnv_StreamReader * pStreamReader);

/*************************************************************************************************************************
 Class definition for TempStreamWriter
**************************************************************************************************************************/

/**
* Returns the current write position of the stream.
*
* @param[in] pTempStreamWriter - TempStreamWriter instance.
* @param[out] pWritePosition - Current write position of the stream.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_tempstreamwriter_getwriteposition(LibMCEnv_TempStreamWriter pTempStreamWriter, LibMCEnv_uint64 * pWritePosition);

/**
* Moves the current write position to a certain address. New position MUST be smaller or equal the stream size.
*
* @param[in] pTempStreamWriter - TempStreamWriter instance.
* @param[in] nWritePosition - New write position of the stream. If Temp stream is living in a ZIP Writer, seeking is not possible.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_tempstreamwriter_seek(LibMCEnv_TempStreamWriter pTempStreamWriter, LibMCEnv_uint64 nWritePosition);

/**
* Writes a data array into the stream. Fails if stream has been finished. Will enlarge stream if writing outside of the current size.
*
* @param[in] pTempStreamWriter - TempStreamWriter instance.
* @param[in] nDataBufferSize - Number of elements in buffer
* @param[in] pDataBuffer - uint8 buffer of Data array to write into the stream
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_tempstreamwriter_writedata(LibMCEnv_TempStreamWriter pTempStreamWriter, LibMCEnv_uint64 nDataBufferSize, const LibMCEnv_uint8 * pDataBuffer);

/**
* Writes a string into the stream. Fails if stream has been finished. Will enlarge stream if writing outside of the current size.
*
* @param[in] pTempStreamWriter - TempStreamWriter instance.
* @param[in] pData - String to write into the stream
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_tempstreamwriter_writestring(LibMCEnv_TempStreamWriter pTempStreamWriter, const char * pData);

/**
* Writes a string into the stream and adds a newline character. Fails if stream has been finished. Will enlarge stream if writing outside of the current size.
*
* @param[in] pTempStreamWriter - TempStreamWriter instance.
* @param[in] pLine - String to write into the stream
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_tempstreamwriter_writeline(LibMCEnv_TempStreamWriter pTempStreamWriter, const char * pLine);

/**
* Copies the full content of a StreamReader Instance.
*
* @param[in] pTempStreamWriter - TempStreamWriter instance.
* @param[in] pStreamReader - Stream to read from.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_tempstreamwriter_copyfrom(LibMCEnv_TempStreamWriter pTempStreamWriter, LibMCEnv_StreamReader pStreamReader);

/*************************************************************************************************************************
 Class definition for ZIPStreamWriter
**************************************************************************************************************************/

/**
* Creates a new ZIP entry in the ZIP file. All currently open ZIP Entry streams will be finished and closed.
*
* @param[in] pZIPStreamWriter - ZIPStreamWriter instance.
* @param[in] pFileName - File Name for the new entry in the ZIP file. Entry MUST not exist yet.
* @param[out] pTempStream - Returns temp stream to write into.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_zipstreamwriter_createzipentry(LibMCEnv_ZIPStreamWriter pZIPStreamWriter, const char * pFileName, LibMCEnv_TempStreamWriter * pTempStream);

/**
* Adds the full content of a StreamReader Instance.
*
* @param[in] pZIPStreamWriter - ZIPStreamWriter instance.
* @param[in] pFileName - File Name for the new entry in the ZIP file. Entry MUST not exist yet.
* @param[in] pStreamReader - Stream to read from.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_zipstreamwriter_createzipentryfromstream(LibMCEnv_ZIPStreamWriter pZIPStreamWriter, const char * pFileName, LibMCEnv_StreamReader pStreamReader);

/*************************************************************************************************************************
 Class definition for StreamReader
**************************************************************************************************************************/

/**
* Returns the UUID of the stream.
*
* @param[in] pStreamReader - StreamReader instance.
* @param[in] nUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pUUIDBuffer -  buffer of Returns stream uuid., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_streamreader_getuuid(LibMCEnv_StreamReader pStreamReader, const LibMCEnv_uint32 nUUIDBufferSize, LibMCEnv_uint32* pUUIDNeededChars, char * pUUIDBuffer);

/**
* Returns the name of the stream.
*
* @param[in] pStreamReader - StreamReader instance.
* @param[in] nNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNameBuffer -  buffer of Returns stream name., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_streamreader_getname(LibMCEnv_StreamReader pStreamReader, const LibMCEnv_uint32 nNameBufferSize, LibMCEnv_uint32* pNameNeededChars, char * pNameBuffer);

/**
* Returns the MIME type of the stream.
*
* @param[in] pStreamReader - StreamReader instance.
* @param[in] nMIMETypeBufferSize - size of the buffer (including trailing 0)
* @param[out] pMIMETypeNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pMIMETypeBuffer -  buffer of Returns stream MIME Type., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_streamreader_getmimetype(LibMCEnv_StreamReader pStreamReader, const LibMCEnv_uint32 nMIMETypeBufferSize, LibMCEnv_uint32* pMIMETypeNeededChars, char * pMIMETypeBuffer);

/**
* Returns the current size of the stream.
*
* @param[in] pStreamReader - StreamReader instance.
* @param[out] pSize - Current size of the stream.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_streamreader_getsize(LibMCEnv_StreamReader pStreamReader, LibMCEnv_uint64 * pSize);

/**
* Returns the current read position of the stream.
*
* @param[in] pStreamReader - StreamReader instance.
* @param[out] pReadPosition - Current read position of the stream.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_streamreader_getreadposition(LibMCEnv_StreamReader pStreamReader, LibMCEnv_uint64 * pReadPosition);

/**
* Moves the current read position to a certain address. New position MUST be smaller or equal the stream size.
*
* @param[in] pStreamReader - StreamReader instance.
* @param[in] nReadPosition - New read position of the stream.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_streamreader_seek(LibMCEnv_StreamReader pStreamReader, LibMCEnv_uint64 nReadPosition);

/**
* Reads a data array from the stream from the current read position. Fails if reading outside of the stream data.
*
* @param[in] pStreamReader - StreamReader instance.
* @param[in] nSizeToRead - Bytes to read. MUST be larger than 0.
* @param[in] nDataBufferSize - Number of elements in buffer
* @param[out] pDataNeededCount - will be filled with the count of the written elements, or needed buffer size.
* @param[out] pDataBuffer - uint8  buffer of Return data array. In case of success, will have SizeToRead elements.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_streamreader_readdata(LibMCEnv_StreamReader pStreamReader, LibMCEnv_uint64 nSizeToRead, const LibMCEnv_uint64 nDataBufferSize, LibMCEnv_uint64* pDataNeededCount, LibMCEnv_uint8 * pDataBuffer);

/**
* Seeks to the beginning of the stream and returns all the stream data.
*
* @param[in] pStreamReader - StreamReader instance.
* @param[in] nDataBufferSize - Number of elements in buffer
* @param[out] pDataNeededCount - will be filled with the count of the written elements, or needed buffer size.
* @param[out] pDataBuffer - uint8  buffer of Return data array. In case of success, will have stream size elements.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_streamreader_readalldata(LibMCEnv_StreamReader pStreamReader, const LibMCEnv_uint64 nDataBufferSize, LibMCEnv_uint64* pDataNeededCount, LibMCEnv_uint8 * pDataBuffer);

/*************************************************************************************************************************
 Class definition for UniformJournalSampling
**************************************************************************************************************************/

/**
* returns the name of the recorded variable.
*
* @param[in] pUniformJournalSampling - UniformJournalSampling instance.
* @param[in] nNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNameBuffer -  buffer of Path or name., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uniformjournalsampling_getvariablename(LibMCEnv_UniformJournalSampling pUniformJournalSampling, const LibMCEnv_uint32 nNameBufferSize, LibMCEnv_uint32* pNameNeededChars, char * pNameBuffer);

/**
* Returns the number of samples in the interval.
*
* @param[in] pUniformJournalSampling - UniformJournalSampling instance.
* @param[out] pNumberOfSamples - Number of samples in the sampling.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uniformjournalsampling_getnumberofsamples(LibMCEnv_UniformJournalSampling pUniformJournalSampling, LibMCEnv_uint32 * pNumberOfSamples);

/**
* Returns the beginning time stamp of the available data point.
*
* @param[in] pUniformJournalSampling - UniformJournalSampling instance.
* @param[out] pStartTimeStampInMicroSeconds - Start Timestamp of Recording in microseconds.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uniformjournalsampling_getstarttimestamp(LibMCEnv_UniformJournalSampling pUniformJournalSampling, LibMCEnv_uint64 * pStartTimeStampInMicroSeconds);

/**
* Returns the beginning time stamp of the available data point.
*
* @param[in] pUniformJournalSampling - UniformJournalSampling instance.
* @param[out] pEndTimeStampInMicroSeconds - End Timestamp of Recording in microseconds.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uniformjournalsampling_getendtimestamp(LibMCEnv_UniformJournalSampling pUniformJournalSampling, LibMCEnv_uint64 * pEndTimeStampInMicroSeconds);

/**
* Returns the timestamp and value of the given sample.
*
* @param[in] pUniformJournalSampling - UniformJournalSampling instance.
* @param[in] nIndex - Index of the sample. 0-based. MUST be smaller than NumberOfSamples.
* @param[out] pTimeStamp - TimeStamp of the sample in MicroSeconds.
* @param[out] pValue - Value of the sample in ms.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uniformjournalsampling_getsample(LibMCEnv_UniformJournalSampling pUniformJournalSampling, LibMCEnv_uint32 nIndex, LibMCEnv_uint64 * pTimeStamp, LibMCEnv_double * pValue);

/**
* Returns all timestamps and values of the sampling.
*
* @param[in] pUniformJournalSampling - UniformJournalSampling instance.
* @param[in] nSamplesBufferSize - Number of elements in buffer
* @param[out] pSamplesNeededCount - will be filled with the count of the written elements, or needed buffer size.
* @param[out] pSamplesBuffer - TimeStreamEntry  buffer of Array of Timestream entries, in increasing order.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uniformjournalsampling_getallsamples(LibMCEnv_UniformJournalSampling pUniformJournalSampling, const LibMCEnv_uint64 nSamplesBufferSize, LibMCEnv_uint64* pSamplesNeededCount, LibMCEnv::sTimeStreamEntry * pSamplesBuffer);

/*************************************************************************************************************************
 Class definition for JournalVariable
**************************************************************************************************************************/

/**
* returns the name of the recorded variable.
*
* @param[in] pJournalVariable - JournalVariable instance.
* @param[in] nNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNameBuffer -  buffer of Path or name., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_journalvariable_getvariablename(LibMCEnv_JournalVariable pJournalVariable, const LibMCEnv_uint32 nNameBufferSize, LibMCEnv_uint32* pNameNeededChars, char * pNameBuffer);

/**
* Returns the beginning time stamp of the available data point.
*
* @param[in] pJournalVariable - JournalVariable instance.
* @param[out] pRecordingStartInMicroSeconds - Start Timestamp of Recording in microseconds.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_journalvariable_getstarttimestamp(LibMCEnv_JournalVariable pJournalVariable, LibMCEnv_uint64 * pRecordingStartInMicroSeconds);

/**
* Returns the beginning time stamp of the available data point.
*
* @param[in] pJournalVariable - JournalVariable instance.
* @param[out] pRecordingEndInMicroSeconds - End Timestamp of Recording in microseconds.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_journalvariable_getendtimestamp(LibMCEnv_JournalVariable pJournalVariable, LibMCEnv_uint64 * pRecordingEndInMicroSeconds);

/**
* Calculates the average value over the full available time interval.
*
* @param[in] pJournalVariable - JournalVariable instance.
* @param[out] pAverageValue - Average value of the variable.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_journalvariable_computefullaverage(LibMCEnv_JournalVariable pJournalVariable, LibMCEnv_double * pAverageValue);

/**
* Calculates the average value over a time interval. Fails if no data is available in this time interval.
*
* @param[in] pJournalVariable - JournalVariable instance.
* @param[in] nStartTimeInMicroSeconds - Start Timestamp of the interval in ms.
* @param[in] nEndTimeInMicroSeconds - End Timestamp of the interval in ms. MUST be larger than Timestamp.
* @param[in] bClampInterval - If ClampInterval is false, the Interval MUST be completely contained in the available recording time. If ClampInterval is false, the Interval will be reduced to the available recording time. If there is no overlap of the Interval with the Recording time at all, the call will fail.
* @param[out] pAverageValue - Average value of the variable.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_journalvariable_computeaverage(LibMCEnv_JournalVariable pJournalVariable, LibMCEnv_uint64 nStartTimeInMicroSeconds, LibMCEnv_uint64 nEndTimeInMicroSeconds, bool bClampInterval, LibMCEnv_double * pAverageValue);

/**
* Computes a single sample at a time. Fails if no data is available at this time value.
*
* @param[in] pJournalVariable - JournalVariable instance.
* @param[in] nTimeInMicroSeconds - Timestamp to check.
* @param[out] pSampleValue - Value of the variable at the time step.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_journalvariable_computesample(LibMCEnv_JournalVariable pJournalVariable, LibMCEnv_uint64 nTimeInMicroSeconds, LibMCEnv_double * pSampleValue);

/**
* Retrieves sample values for an interval. Interval MUST be inside the available recording time.
*
* @param[in] pJournalVariable - JournalVariable instance.
* @param[in] nStartTimeInMicroSeconds - Start Timestamp of the interval in microseconds.
* @param[in] nIntervalIncrement - Sampling interval distance in microseconds. MUST be larger than 0.
* @param[in] nNumberOfSamples - Number of samples to record. NumberOfSamples times IntervalIncrement MUST be within the available recording time.
* @param[in] dMovingAverageDelta - Each sample will be averaged from minus MovingAverageDelta to plus MovingAverageDelta.
* @param[in] bClampInterval - If ClampInterval is false, each moving average interval MUST be completely contained in the available recording time. If ClampInterval is false, the moving average interval will be reduced to the available recording time. If there is no overlap of the Interval with the Recording time at all, the call will fail.
* @param[out] pJournalSampling - Returns an instance with the sampling results.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_journalvariable_computeuniformaveragesamples(LibMCEnv_JournalVariable pJournalVariable, LibMCEnv_uint64 nStartTimeInMicroSeconds, LibMCEnv_uint64 nIntervalIncrement, LibMCEnv_uint32 nNumberOfSamples, LibMCEnv_double dMovingAverageDelta, bool bClampInterval, LibMCEnv_UniformJournalSampling * pJournalSampling);

/**
* Retrieves a number of equidistant sample values for an interval. Interval MUST be inside the available recording time.
*
* @param[in] pJournalVariable - JournalVariable instance.
* @param[in] nStartTimeInMicroSeconds - Start Timestamp of the interval in microseconds.
* @param[in] nIntervalIncrement - Sampling interval distance in microseconds. MUST be larger than 0.
* @param[in] nNumberOfSamples - Number of samples to record. The Length of the Interval (StartTimeInMicroSeconds - EndTimeInMicroSeconds) MUST be a multiple of the Number of samples.
* @param[out] pJournalSampling - Returns an instance with the sampling results.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_journalvariable_computeequidistantsamples(LibMCEnv_JournalVariable pJournalVariable, LibMCEnv_uint64 nStartTimeInMicroSeconds, LibMCEnv_uint64 nIntervalIncrement, LibMCEnv_uint32 nNumberOfSamples, LibMCEnv_UniformJournalSampling * pJournalSampling);

/**
* Retrieves the raw timestream data of the variable.
*
* @param[in] pJournalVariable - JournalVariable instance.
* @param[in] nTimeStreamEntriesBufferSize - Number of elements in buffer
* @param[out] pTimeStreamEntriesNeededCount - will be filled with the count of the written elements, or needed buffer size.
* @param[out] pTimeStreamEntriesBuffer - TimeStreamEntry  buffer of All change events of the variable in the accessed interval.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_journalvariable_receiverawtimestream(LibMCEnv_JournalVariable pJournalVariable, const LibMCEnv_uint64 nTimeStreamEntriesBufferSize, LibMCEnv_uint64* pTimeStreamEntriesNeededCount, LibMCEnv::sTimeStreamEntry * pTimeStreamEntriesBuffer);

/*************************************************************************************************************************
 Class definition for Alert
**************************************************************************************************************************/

/**
* Returns Alert UUID.
*
* @param[in] pAlert - Alert instance.
* @param[in] nUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pUUIDBuffer -  buffer of Returns the alert uuid., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_alert_getuuid(LibMCEnv_Alert pAlert, const LibMCEnv_uint32 nUUIDBufferSize, LibMCEnv_uint32* pUUIDNeededChars, char * pUUIDBuffer);

/**
* Returns if the alert is actuve.
*
* @param[in] pAlert - Alert instance.
* @param[out] pActive - Returns if the alert is active.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_alert_isactive(LibMCEnv_Alert pAlert, bool * pActive);

/**
* Returns Alert Level.
*
* @param[in] pAlert - Alert instance.
* @param[out] pLevel - Returns the alert level.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_alert_getalertlevel(LibMCEnv_Alert pAlert, LibMCEnv::eAlertLevel * pLevel);

/**
* Returns Alert Identifier.
*
* @param[in] pAlert - Alert instance.
* @param[in] nIdentifierBufferSize - size of the buffer (including trailing 0)
* @param[out] pIdentifierNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pIdentifierBuffer -  buffer of Returns the alert identifier., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_alert_getidentifier(LibMCEnv_Alert pAlert, const LibMCEnv_uint32 nIdentifierBufferSize, LibMCEnv_uint32* pIdentifierNeededChars, char * pIdentifierBuffer);

/**
* Returns Alert Custom Information.
*
* @param[in] pAlert - Alert instance.
* @param[in] nReadableContextInformationBufferSize - size of the buffer (including trailing 0)
* @param[out] pReadableContextInformationNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pReadableContextInformationBuffer -  buffer of Returns context information for the alert., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_alert_getreadablecontextinformation(LibMCEnv_Alert pAlert, const LibMCEnv_uint32 nReadableContextInformationBufferSize, LibMCEnv_uint32* pReadableContextInformationNeededChars, char * pReadableContextInformationBuffer);

/**
* Returns if the alert needs acknowledgement.
*
* @param[in] pAlert - Alert instance.
* @param[out] pValue - Flag if alert needs acknowledgement.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_alert_needsacknowledgement(LibMCEnv_Alert pAlert, bool * pValue);

/**
* Returns if the alert is acknowledged.
*
* @param[in] pAlert - Alert instance.
* @param[out] pValue - Flag if alert is acknowledged.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_alert_hasbeenacknowledged(LibMCEnv_Alert pAlert, bool * pValue);

/**
* Returns details about the acknowledgement. Fails if the alert is not acknowledged.
*
* @param[in] pAlert - Alert instance.
* @param[in] nUserUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pUserUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pUserUUIDBuffer -  buffer of User who acknowledged the alert., may be NULL
* @param[in] nUserCommentBufferSize - size of the buffer (including trailing 0)
* @param[out] pUserCommentNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pUserCommentBuffer -  buffer of Comment of the acknowledgement., may be NULL
* @param[in] nAckTimeBufferSize - size of the buffer (including trailing 0)
* @param[out] pAckTimeNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pAckTimeBuffer -  buffer of Timestamp in ISO8601 UTC format., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_alert_getacknowledgementinformation(LibMCEnv_Alert pAlert, const LibMCEnv_uint32 nUserUUIDBufferSize, LibMCEnv_uint32* pUserUUIDNeededChars, char * pUserUUIDBuffer, const LibMCEnv_uint32 nUserCommentBufferSize, LibMCEnv_uint32* pUserCommentNeededChars, char * pUserCommentBuffer, const LibMCEnv_uint32 nAckTimeBufferSize, LibMCEnv_uint32* pAckTimeNeededChars, char * pAckTimeBuffer);

/**
* Returns the time stamp of the the acknowledgement. Fails if the alert is not acknowledged.
*
* @param[in] pAlert - Alert instance.
* @param[out] pAckTime - Timestamp Instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_alert_getacknowledgementtime(LibMCEnv_Alert pAlert, LibMCEnv_DateTime * pAckTime);

/**
* Acknowledges an alert for a specific user and sets it inactive. Fails if Alert is read from an archived journal.
*
* @param[in] pAlert - Alert instance.
* @param[in] pUserUUID - UUID of the user to acknowledge. Fails if user does not exist.
* @param[in] pUserComment - User comment to store. May be empty.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_alert_acknowledgeforuser(LibMCEnv_Alert pAlert, const char * pUserUUID, const char * pUserComment);

/**
* Acknowledges an alert for the current user and sets it inactive. Only works if the Alert Instance was created from a UIEnvironment. StateEnvironments do not have login information. Fails if Alert is read from an archived journal.
*
* @param[in] pAlert - Alert instance.
* @param[in] pUserComment - User comment to store. May be empty.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_alert_acknowledgealertforcurrentuser(LibMCEnv_Alert pAlert, const char * pUserComment);

/**
* Sets an alert inactive. It will not be marked as acknowledged by a certain user. Fails if Alert is read from an archived journal.
*
* @param[in] pAlert - Alert instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_alert_deactivatealert(LibMCEnv_Alert pAlert);

/*************************************************************************************************************************
 Class definition for AlertIterator
**************************************************************************************************************************/

/**
* Returns the alert the iterator points at.
*
* @param[in] pAlertIterator - AlertIterator instance.
* @param[out] pAlertInstance - returns the Alert instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_alertiterator_getcurrentalert(LibMCEnv_AlertIterator pAlertIterator, LibMCEnv_Alert * pAlertInstance);

/*************************************************************************************************************************
 Class definition for LogEntryList
**************************************************************************************************************************/

/**
* Returns the number of log entries in the list.
*
* @param[in] pLogEntryList - LogEntryList instance.
* @param[out] pCount - Number of log entries.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_logentrylist_getcount(LibMCEnv_LogEntryList pLogEntryList, LibMCEnv_uint32 * pCount);

/**
* Returns the a log entry of the list.
*
* @param[in] pLogEntryList - LogEntryList instance.
* @param[in] nIndex - Index of entry to retrieve. 0-based. Fails if larger or equal to Count.
* @param[in] nMessageBufferSize - size of the buffer (including trailing 0)
* @param[out] pMessageNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pMessageBuffer -  buffer of Message of the log entry., may be NULL
* @param[in] nSubSystemBufferSize - size of the buffer (including trailing 0)
* @param[out] pSubSystemNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pSubSystemBuffer -  buffer of Subsystem of the log entry., may be NULL
* @param[out] pLogID - ID of the log entry.
* @param[out] pLogLevel - Level of the log entry.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_logentrylist_getentry(LibMCEnv_LogEntryList pLogEntryList, LibMCEnv_uint32 nIndex, const LibMCEnv_uint32 nMessageBufferSize, LibMCEnv_uint32* pMessageNeededChars, char * pMessageBuffer, const LibMCEnv_uint32 nSubSystemBufferSize, LibMCEnv_uint32* pSubSystemNeededChars, char * pSubSystemBuffer, LibMCEnv_uint32 * pLogID, LibMCEnv::eLogLevel * pLogLevel);

/**
* Returns the time stamp of an entry.
*
* @param[in] pLogEntryList - LogEntryList instance.
* @param[in] nIndex - Index of entry to retrieve. 0-based. Fails if larger or equal to Count.
* @param[out] pTimestamp - Date Time object of the entry.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_logentrylist_getentrytime(LibMCEnv_LogEntryList pLogEntryList, LibMCEnv_uint32 nIndex, LibMCEnv_DateTime * pTimestamp);

/*************************************************************************************************************************
 Class definition for JournalHandler
**************************************************************************************************************************/

/**
* Retrieves the history of a given variable in the system journal.
*
* @param[in] pJournalHandler - JournalHandler instance.
* @param[in] pVariableName - Variable name to analyse. Fails if Variable does not exist.
* @param[in] nTimeDeltaInMicroseconds - How many microseconds the journal should be retrieved in the past.
* @param[out] pJournalVariable - Journal Instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_journalhandler_retrievejournalvariable(LibMCEnv_JournalHandler pJournalHandler, const char * pVariableName, LibMCEnv_uint64 nTimeDeltaInMicroseconds, LibMCEnv_JournalVariable * pJournalVariable);

/**
* Retrieves the history of a given variable in the system journal for an arbitrary time interval.
*
* @param[in] pJournalHandler - JournalHandler instance.
* @param[in] pVariableName - Variable name to analyse. Fails if Variable does not exist.
* @param[in] nStartTimeInMicroseconds - Start time stamp in microseconds. MUST be smaller than EndTimeInMicroseconds. Fails if larger than recorded time interval.
* @param[in] nEndTimeInMicroseconds - End time stamp in microseconds. MUST be larger than StartTimeInMicroseconds. Fails if larger than recorded time interval.
* @param[out] pJournalVariable - Journal Instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_journalhandler_retrievejournalvariablefromtimeinterval(LibMCEnv_JournalHandler pJournalHandler, const char * pVariableName, LibMCEnv_uint64 nStartTimeInMicroseconds, LibMCEnv_uint64 nEndTimeInMicroseconds, LibMCEnv_JournalVariable * pJournalVariable);

/**
* Retrieves the reference start time of the journal.
*
* @param[in] pJournalHandler - JournalHandler instance.
* @param[out] pDateTimeInstance - DateTime Instance
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_journalhandler_getstarttime(LibMCEnv_JournalHandler pJournalHandler, LibMCEnv_DateTime * pDateTimeInstance);

/**
* Retrieves the current log entries of the journal.
*
* @param[in] pJournalHandler - JournalHandler instance.
* @param[in] nTimeDeltaInMicroseconds - How many microseconds the journal should be retrieved in the past.
* @param[out] pMinLogLevel - Only entries with a log level that is higher than the given one are returned.
* @param[out] pEntryList - Log Entry Instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_journalhandler_retrievelogentries(LibMCEnv_JournalHandler pJournalHandler, LibMCEnv_uint64 nTimeDeltaInMicroseconds, LibMCEnv::eLogLevel * pMinLogLevel, LibMCEnv_LogEntryList * pEntryList);

/**
* Retrieves the log entries of the journal over the given time interval.
*
* @param[in] pJournalHandler - JournalHandler instance.
* @param[in] nStartTimeInMicroseconds - Start time stamp in microseconds. MUST be smaller than EndTimeInMicroseconds. Fails if larger than recorded time interval.
* @param[in] nEndTimeInMicroseconds - End time stamp in microseconds. MUST be larger than StartTimeInMicroseconds. Fails if larger than recorded time interval.
* @param[out] pMinLogLevel - Only entries with a log level that is higher than the given one are returned.
* @param[out] pEntryList - Log Entry Instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_journalhandler_retrievelogentriesfromtimeinterval(LibMCEnv_JournalHandler pJournalHandler, LibMCEnv_uint64 nStartTimeInMicroseconds, LibMCEnv_uint64 nEndTimeInMicroseconds, LibMCEnv::eLogLevel * pMinLogLevel, LibMCEnv_LogEntryList * pEntryList);

/**
* Retrieves the alerts of the journal.
*
* @param[in] pJournalHandler - JournalHandler instance.
* @param[in] nTimeDeltaInMicroseconds - How many microseconds the journal should be retrieved in the past.
* @param[out] pIteratorInstance - Alert Iterator Instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_journalhandler_retrievealerts(LibMCEnv_JournalHandler pJournalHandler, LibMCEnv_uint64 nTimeDeltaInMicroseconds, LibMCEnv_AlertIterator * pIteratorInstance);

/**
* Retrieves the alerts of the journal over the given time interval.
*
* @param[in] pJournalHandler - JournalHandler instance.
* @param[in] nStartTimeInMicroseconds - Start time stamp in microseconds. MUST be smaller than EndTimeInMicroseconds. Fails if larger than recorded time interval.
* @param[in] nEndTimeInMicroseconds - End time stamp in microseconds. MUST be larger than StartTimeInMicroseconds. Fails if larger than recorded time interval.
* @param[out] pIteratorInstance - Alert Iterator Instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_journalhandler_retrievealertsfromtimeinterval(LibMCEnv_JournalHandler pJournalHandler, LibMCEnv_uint64 nStartTimeInMicroseconds, LibMCEnv_uint64 nEndTimeInMicroseconds, LibMCEnv_AlertIterator * pIteratorInstance);

/*************************************************************************************************************************
 Class definition for UserDetailList
**************************************************************************************************************************/

/**
* Result Number of Users in the list.
*
* @param[in] pUserDetailList - UserDetailList instance.
* @param[out] pUserCount - Number of users in the list
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_userdetaillist_count(LibMCEnv_UserDetailList pUserDetailList, LibMCEnv_uint32 * pUserCount);

/**
* Retrieves all the data of a user in the list. 
*
* @param[in] pUserDetailList - UserDetailList instance.
* @param[in] nUserIndex - Index of users in the list (0-based). Call will fail if invalid index is provided.
* @param[in] nUsernameBufferSize - size of the buffer (including trailing 0)
* @param[out] pUsernameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pUsernameBuffer -  buffer of User name, may be NULL
* @param[in] nUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pUUIDBuffer -  buffer of UUID of the user., may be NULL
* @param[in] nDescriptionBufferSize - size of the buffer (including trailing 0)
* @param[out] pDescriptionNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pDescriptionBuffer -  buffer of Description of the user., may be NULL
* @param[in] nRoleBufferSize - size of the buffer (including trailing 0)
* @param[out] pRoleNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pRoleBuffer -  buffer of Role of the user., may be NULL
* @param[in] nLanguageIdentifierBufferSize - size of the buffer (including trailing 0)
* @param[out] pLanguageIdentifierNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pLanguageIdentifierBuffer -  buffer of LanguageIdentifier of the user., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_userdetaillist_getuserproperties(LibMCEnv_UserDetailList pUserDetailList, LibMCEnv_uint32 nUserIndex, const LibMCEnv_uint32 nUsernameBufferSize, LibMCEnv_uint32* pUsernameNeededChars, char * pUsernameBuffer, const LibMCEnv_uint32 nUUIDBufferSize, LibMCEnv_uint32* pUUIDNeededChars, char * pUUIDBuffer, const LibMCEnv_uint32 nDescriptionBufferSize, LibMCEnv_uint32* pDescriptionNeededChars, char * pDescriptionBuffer, const LibMCEnv_uint32 nRoleBufferSize, LibMCEnv_uint32* pRoleNeededChars, char * pRoleBuffer, const LibMCEnv_uint32 nLanguageIdentifierBufferSize, LibMCEnv_uint32* pLanguageIdentifierNeededChars, char * pLanguageIdentifierBuffer);

/**
* Retrieves the user name of a user in the list. 
*
* @param[in] pUserDetailList - UserDetailList instance.
* @param[in] nUserIndex - Index of users in the list (0-based). Call will fail if invalid index is provided.
* @param[in] nUsernameBufferSize - size of the buffer (including trailing 0)
* @param[out] pUsernameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pUsernameBuffer -  buffer of User name, may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_userdetaillist_getusername(LibMCEnv_UserDetailList pUserDetailList, LibMCEnv_uint32 nUserIndex, const LibMCEnv_uint32 nUsernameBufferSize, LibMCEnv_uint32* pUsernameNeededChars, char * pUsernameBuffer);

/**
* Retrieves the UUID of a user in the list. 
*
* @param[in] pUserDetailList - UserDetailList instance.
* @param[in] nUserIndex - Index of users in the list (0-based). Call will fail if invalid index is provided.
* @param[in] nUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pUUIDBuffer -  buffer of UUID of the user., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_userdetaillist_getuuid(LibMCEnv_UserDetailList pUserDetailList, LibMCEnv_uint32 nUserIndex, const LibMCEnv_uint32 nUUIDBufferSize, LibMCEnv_uint32* pUUIDNeededChars, char * pUUIDBuffer);

/**
* Retrieves the description of a user in the list. 
*
* @param[in] pUserDetailList - UserDetailList instance.
* @param[in] nUserIndex - Index of users in the list (0-based). Call will fail if invalid index is provided.
* @param[in] nDescriptionBufferSize - size of the buffer (including trailing 0)
* @param[out] pDescriptionNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pDescriptionBuffer -  buffer of Description of the user., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_userdetaillist_getdescription(LibMCEnv_UserDetailList pUserDetailList, LibMCEnv_uint32 nUserIndex, const LibMCEnv_uint32 nDescriptionBufferSize, LibMCEnv_uint32* pDescriptionNeededChars, char * pDescriptionBuffer);

/**
* Retrieves the role of a user in the list. 
*
* @param[in] pUserDetailList - UserDetailList instance.
* @param[in] nUserIndex - Index of users in the list (0-based). Call will fail if invalid index is provided.
* @param[in] nRoleBufferSize - size of the buffer (including trailing 0)
* @param[out] pRoleNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pRoleBuffer -  buffer of Role of the user., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_userdetaillist_getrole(LibMCEnv_UserDetailList pUserDetailList, LibMCEnv_uint32 nUserIndex, const LibMCEnv_uint32 nRoleBufferSize, LibMCEnv_uint32* pRoleNeededChars, char * pRoleBuffer);

/**
* Retrieves the language identifier of a user in the list. 
*
* @param[in] pUserDetailList - UserDetailList instance.
* @param[in] nUserIndex - Index of users in the list (0-based). Call will fail if invalid index is provided.
* @param[in] nLanguageIdentifierBufferSize - size of the buffer (including trailing 0)
* @param[out] pLanguageIdentifierNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pLanguageIdentifierBuffer -  buffer of Language Identifier of the user., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_userdetaillist_getlanguage(LibMCEnv_UserDetailList pUserDetailList, LibMCEnv_uint32 nUserIndex, const LibMCEnv_uint32 nLanguageIdentifierBufferSize, LibMCEnv_uint32* pLanguageIdentifierNeededChars, char * pLanguageIdentifierBuffer);

/*************************************************************************************************************************
 Class definition for UserManagementHandler
**************************************************************************************************************************/

/**
* Checks if a user exist.
*
* @param[in] pUserManagementHandler - UserManagementHandler instance.
* @param[in] pUsername - User name
* @param[out] pUserExists - Flag if users exists
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_usermanagementhandler_userexists(LibMCEnv_UserManagementHandler pUserManagementHandler, const char * pUsername, bool * pUserExists);

/**
* Checks if a user uuid exist.
*
* @param[in] pUserManagementHandler - UserManagementHandler instance.
* @param[in] pUUID - UUID of the user.
* @param[out] pUserExists - Flag if users exists
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_usermanagementhandler_useruuidexists(LibMCEnv_UserManagementHandler pUserManagementHandler, const char * pUUID, bool * pUserExists);

/**
* Retrieves all users data with one Transaction. Fails if user does not exist.
*
* @param[in] pUserManagementHandler - UserManagementHandler instance.
* @param[in] pUsername - User name
* @param[in] nUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pUUIDBuffer -  buffer of UUID of the user., may be NULL
* @param[in] nDescriptionBufferSize - size of the buffer (including trailing 0)
* @param[out] pDescriptionNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pDescriptionBuffer -  buffer of Description of the user., may be NULL
* @param[in] nRoleBufferSize - size of the buffer (including trailing 0)
* @param[out] pRoleNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pRoleBuffer -  buffer of Role of the user., may be NULL
* @param[in] nLanguageIdentifierBufferSize - size of the buffer (including trailing 0)
* @param[out] pLanguageIdentifierNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pLanguageIdentifierBuffer -  buffer of LanguageIdentifier of the user., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_usermanagementhandler_getuserproperties(LibMCEnv_UserManagementHandler pUserManagementHandler, const char * pUsername, const LibMCEnv_uint32 nUUIDBufferSize, LibMCEnv_uint32* pUUIDNeededChars, char * pUUIDBuffer, const LibMCEnv_uint32 nDescriptionBufferSize, LibMCEnv_uint32* pDescriptionNeededChars, char * pDescriptionBuffer, const LibMCEnv_uint32 nRoleBufferSize, LibMCEnv_uint32* pRoleNeededChars, char * pRoleBuffer, const LibMCEnv_uint32 nLanguageIdentifierBufferSize, LibMCEnv_uint32* pLanguageIdentifierNeededChars, char * pLanguageIdentifierBuffer);

/**
* Retrieves all users data with one Transaction. Fails if user does not exist.
*
* @param[in] pUserManagementHandler - UserManagementHandler instance.
* @param[in] pUUID - UUID of the user.
* @param[in] nUsernameBufferSize - size of the buffer (including trailing 0)
* @param[out] pUsernameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pUsernameBuffer -  buffer of User name, may be NULL
* @param[in] nDescriptionBufferSize - size of the buffer (including trailing 0)
* @param[out] pDescriptionNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pDescriptionBuffer -  buffer of Description of the user., may be NULL
* @param[in] nRoleBufferSize - size of the buffer (including trailing 0)
* @param[out] pRoleNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pRoleBuffer -  buffer of Role of the user., may be NULL
* @param[in] nLanguageIdentifierBufferSize - size of the buffer (including trailing 0)
* @param[out] pLanguageIdentifierNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pLanguageIdentifierBuffer -  buffer of LanguageIdentifier of the user., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_usermanagementhandler_getuserpropertiesbyuuid(LibMCEnv_UserManagementHandler pUserManagementHandler, const char * pUUID, const LibMCEnv_uint32 nUsernameBufferSize, LibMCEnv_uint32* pUsernameNeededChars, char * pUsernameBuffer, const LibMCEnv_uint32 nDescriptionBufferSize, LibMCEnv_uint32* pDescriptionNeededChars, char * pDescriptionBuffer, const LibMCEnv_uint32 nRoleBufferSize, LibMCEnv_uint32* pRoleNeededChars, char * pRoleBuffer, const LibMCEnv_uint32 nLanguageIdentifierBufferSize, LibMCEnv_uint32* pLanguageIdentifierNeededChars, char * pLanguageIdentifierBuffer);

/**
* Retrieves a users name with a given UUID. Fails if user does not exist.
*
* @param[in] pUserManagementHandler - UserManagementHandler instance.
* @param[in] pUUID - UUID of the user.
* @param[in] nUsernameBufferSize - size of the buffer (including trailing 0)
* @param[out] pUsernameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pUsernameBuffer -  buffer of User name, may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_usermanagementhandler_getusernamebyuuid(LibMCEnv_UserManagementHandler pUserManagementHandler, const char * pUUID, const LibMCEnv_uint32 nUsernameBufferSize, LibMCEnv_uint32* pUsernameNeededChars, char * pUsernameBuffer);

/**
* Retrieves a users UUID. Fails if user does not exist.
*
* @param[in] pUserManagementHandler - UserManagementHandler instance.
* @param[in] pUsername - User name
* @param[in] nUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pUUIDBuffer -  buffer of UUID of the user., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_usermanagementhandler_getuseruuid(LibMCEnv_UserManagementHandler pUserManagementHandler, const char * pUsername, const LibMCEnv_uint32 nUUIDBufferSize, LibMCEnv_uint32* pUUIDNeededChars, char * pUUIDBuffer);

/**
* Retrieves a users description. Fails if user does not exist.
*
* @param[in] pUserManagementHandler - UserManagementHandler instance.
* @param[in] pUsername - User name
* @param[in] nDescriptionBufferSize - size of the buffer (including trailing 0)
* @param[out] pDescriptionNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pDescriptionBuffer -  buffer of Description of the user., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_usermanagementhandler_getuserdescription(LibMCEnv_UserManagementHandler pUserManagementHandler, const char * pUsername, const LibMCEnv_uint32 nDescriptionBufferSize, LibMCEnv_uint32* pDescriptionNeededChars, char * pDescriptionBuffer);

/**
* Retrieves a users description by the user UUID. Fails if user does not exist.
*
* @param[in] pUserManagementHandler - UserManagementHandler instance.
* @param[in] pUUID - UUID of the user.
* @param[in] nDescriptionBufferSize - size of the buffer (including trailing 0)
* @param[out] pDescriptionNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pDescriptionBuffer -  buffer of Description of the user., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_usermanagementhandler_getuserdescriptionbyuuid(LibMCEnv_UserManagementHandler pUserManagementHandler, const char * pUUID, const LibMCEnv_uint32 nDescriptionBufferSize, LibMCEnv_uint32* pDescriptionNeededChars, char * pDescriptionBuffer);

/**
* Retrieves a users role. Fails if user does not exist.
*
* @param[in] pUserManagementHandler - UserManagementHandler instance.
* @param[in] pUsername - User name
* @param[in] nRoleBufferSize - size of the buffer (including trailing 0)
* @param[out] pRoleNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pRoleBuffer -  buffer of Role of the user., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_usermanagementhandler_getuserrole(LibMCEnv_UserManagementHandler pUserManagementHandler, const char * pUsername, const LibMCEnv_uint32 nRoleBufferSize, LibMCEnv_uint32* pRoleNeededChars, char * pRoleBuffer);

/**
* Retrieves a users role by the user UUID. Fails if user does not exist.
*
* @param[in] pUserManagementHandler - UserManagementHandler instance.
* @param[in] pUUID - UUID of the user.
* @param[in] nRoleBufferSize - size of the buffer (including trailing 0)
* @param[out] pRoleNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pRoleBuffer -  buffer of Role of the user., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_usermanagementhandler_getuserrolebyuuid(LibMCEnv_UserManagementHandler pUserManagementHandler, const char * pUUID, const LibMCEnv_uint32 nRoleBufferSize, LibMCEnv_uint32* pRoleNeededChars, char * pRoleBuffer);

/**
* Retrieves a users language preference. Fails if user does not exist.
*
* @param[in] pUserManagementHandler - UserManagementHandler instance.
* @param[in] pUsername - User name
* @param[in] nLanguageIdentifierBufferSize - size of the buffer (including trailing 0)
* @param[out] pLanguageIdentifierNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pLanguageIdentifierBuffer -  buffer of Language identifier of the user., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_usermanagementhandler_getuserlanguage(LibMCEnv_UserManagementHandler pUserManagementHandler, const char * pUsername, const LibMCEnv_uint32 nLanguageIdentifierBufferSize, LibMCEnv_uint32* pLanguageIdentifierNeededChars, char * pLanguageIdentifierBuffer);

/**
* Retrieves a users language preference by user UUID. Fails if user does not exist.
*
* @param[in] pUserManagementHandler - UserManagementHandler instance.
* @param[in] pUUID - UUID of the user.
* @param[in] nLanguageIdentifierBufferSize - size of the buffer (including trailing 0)
* @param[out] pLanguageIdentifierNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pLanguageIdentifierBuffer -  buffer of Language identifier of the user., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_usermanagementhandler_getuserlanguagebyuuid(LibMCEnv_UserManagementHandler pUserManagementHandler, const char * pUUID, const LibMCEnv_uint32 nLanguageIdentifierBufferSize, LibMCEnv_uint32* pLanguageIdentifierNeededChars, char * pLanguageIdentifierBuffer);

/**
* Creates a new user. Fails if the user already exists.
*
* @param[in] pUserManagementHandler - UserManagementHandler instance.
* @param[in] pUsername - User name to create. MUST be alphanumeric and not empty.
* @param[in] pRole - Role of the new user. MUST NOT be empty.
* @param[in] pSalt - Salt of the user. MUST NOT be empty. MUST be an SHA256 string.
* @param[in] pHashedPassword - Hashed Password. MUST be an SHA256 string. HashedPassword MUST NOT be the hash some of the given salt.
* @param[in] pDescription - Description of the new user.
* @param[in] nUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pUUIDBuffer -  buffer of UUID of the new user., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_usermanagementhandler_createuser(LibMCEnv_UserManagementHandler pUserManagementHandler, const char * pUsername, const char * pRole, const char * pSalt, const char * pHashedPassword, const char * pDescription, const LibMCEnv_uint32 nUUIDBufferSize, LibMCEnv_uint32* pUUIDNeededChars, char * pUUIDBuffer);

/**
* Updates a users language preference. Fails if user does not exist.
*
* @param[in] pUserManagementHandler - UserManagementHandler instance.
* @param[in] pUsername - User name
* @param[in] pLanguageIdentifier - New Language identifier of the user.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_usermanagementhandler_setuserlanguage(LibMCEnv_UserManagementHandler pUserManagementHandler, const char * pUsername, const char * pLanguageIdentifier);

/**
* Updates a users role. Fails if user does not exist.
*
* @param[in] pUserManagementHandler - UserManagementHandler instance.
* @param[in] pUsername - User name
* @param[in] pUserRole - New Role identifier of the user.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_usermanagementhandler_setuserrole(LibMCEnv_UserManagementHandler pUserManagementHandler, const char * pUsername, const char * pUserRole);

/**
* Updates a users description. Fails if user does not exist.
*
* @param[in] pUserManagementHandler - UserManagementHandler instance.
* @param[in] pUsername - User name
* @param[in] pDescription - New Description of the user.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_usermanagementhandler_setuserdescription(LibMCEnv_UserManagementHandler pUserManagementHandler, const char * pUsername, const char * pDescription);

/**
* Updates a users password. Fails if user does not exist.
*
* @param[in] pUserManagementHandler - UserManagementHandler instance.
* @param[in] pUsername - User name
* @param[in] pSalt - Salt of the user. MUST NOT be empty. MUST be an SHA256 string.
* @param[in] pHashedPassword - Hashed Password. MUST be an SHA256 string. HashedPassword MUST NOT be the hash some of the given salt.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_usermanagementhandler_setuserpassword(LibMCEnv_UserManagementHandler pUserManagementHandler, const char * pUsername, const char * pSalt, const char * pHashedPassword);

/**
* Updates a users language preference. Fails if user does not exist.
*
* @param[in] pUserManagementHandler - UserManagementHandler instance.
* @param[in] pUUID - UUID of the user.
* @param[in] pLanguageIdentifier - New Language identifier of the user.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_usermanagementhandler_setuserlanguagebyuuid(LibMCEnv_UserManagementHandler pUserManagementHandler, const char * pUUID, const char * pLanguageIdentifier);

/**
* Updates a users role. Fails if user does not exist.
*
* @param[in] pUserManagementHandler - UserManagementHandler instance.
* @param[in] pUUID - UUID of the user.
* @param[in] pUserRole - New Role identifier of the user.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_usermanagementhandler_setuserrolebyuuid(LibMCEnv_UserManagementHandler pUserManagementHandler, const char * pUUID, const char * pUserRole);

/**
* Updates a users description. Fails if user does not exist.
*
* @param[in] pUserManagementHandler - UserManagementHandler instance.
* @param[in] pUUID - UUID of the user.
* @param[in] pDescription - New Description identifier of the user.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_usermanagementhandler_setuserdescriptionbyuuid(LibMCEnv_UserManagementHandler pUserManagementHandler, const char * pUUID, const char * pDescription);

/**
* Updates a users password. Fails if user does not exist.
*
* @param[in] pUserManagementHandler - UserManagementHandler instance.
* @param[in] pUUID - UUID of the user.
* @param[in] pSalt - Salt of the user. MUST NOT be empty. MUST be an SHA256 string.
* @param[in] pHashedPassword - Hashed Password. MUST be an SHA256 string. HashedPassword MUST NOT be the hash some of the given salt.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_usermanagementhandler_setuserpasswordbyuuid(LibMCEnv_UserManagementHandler pUserManagementHandler, const char * pUUID, const char * pSalt, const char * pHashedPassword);

/**
* Returns a list of all users.
*
* @param[in] pUserManagementHandler - UserManagementHandler instance.
* @param[out] pListInstance - Instance of active users.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_usermanagementhandler_getactiveusers(LibMCEnv_UserManagementHandler pUserManagementHandler, LibMCEnv_UserDetailList * pListInstance);

/*************************************************************************************************************************
 Class definition for StateEnvironment
**************************************************************************************************************************/

/**
* Retrieves the machine state
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pMachineInstance - State machine instance name
* @param[in] nStateNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pStateNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pStateNameBuffer -  buffer of Name of current state, may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_getmachinestate(LibMCEnv_StateEnvironment pStateEnvironment, const char * pMachineInstance, const LibMCEnv_uint32 nStateNameBufferSize, LibMCEnv_uint32* pStateNameNeededChars, char * pStateNameBuffer);

/**
* Retrieves the previous state before this execution. Returns the init state name, if called during the first state during runtime.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] nStateNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pStateNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pStateNameBuffer -  buffer of Name of previous state, may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_getpreviousstate(LibMCEnv_StateEnvironment pStateEnvironment, const LibMCEnv_uint32 nStateNameBufferSize, LibMCEnv_uint32* pStateNameNeededChars, char * pStateNameBuffer);

/**
* prepares a signal object to trigger later.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pMachineInstance - State machine instance name
* @param[in] pSignalName - Name Of signal channel.
* @param[out] pSignalInstance - Signal trigger object.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_preparesignal(LibMCEnv_StateEnvironment pStateEnvironment, const char * pMachineInstance, const char * pSignalName, LibMCEnv_SignalTrigger * pSignalInstance);

/**
* Waits for a signal for a certain amount of time.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pSignalName - Name Of Signal
* @param[in] nTimeOut - Timeout in Milliseconds. 0 for Immediate return.
* @param[out] pHandlerInstance - Signal object. If Success is false, the Signal Handler Object will be null.
* @param[out] pSuccess - Signal has been triggered
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_waitforsignal(LibMCEnv_StateEnvironment pStateEnvironment, const char * pSignalName, LibMCEnv_uint32 nTimeOut, LibMCEnv_SignalHandler * pHandlerInstance, bool * pSuccess);

/**
* Retrieves an unhandled signal By signal type name.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pSignalTypeName - Name Of Signal to be returned
* @param[out] pHandlerInstance - Signal object. If no signal has been found the signal handler object will be null.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_getunhandledsignal(LibMCEnv_StateEnvironment pStateEnvironment, const char * pSignalTypeName, LibMCEnv_SignalHandler * pHandlerInstance);

/**
* retrieves an unhandled signal from the current state machine by UUID.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pUUID - Name
* @param[in] bMustExist - The call fails if MustExist is true and not signal with UUID does exist or a signal with UUID has been handled already.
* @param[out] pHandler - Signal handler instance. Returns null, if signal does not exist.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_getunhandledsignalbyuuid(LibMCEnv_StateEnvironment pStateEnvironment, const char * pUUID, bool bMustExist, LibMCEnv_SignalHandler * pHandler);

/**
* Returns the driver type and library lookup for a specific registered driver.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pDriverName - Name identifier of the driver.
* @param[in] nDriverTypeBufferSize - size of the buffer (including trailing 0)
* @param[out] pDriverTypeNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pDriverTypeBuffer -  buffer of returns type identifier of the driver., may be NULL
* @param[out] pDriverLookup - GetProcAddress Handle of the driver.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_getdriverlibrary(LibMCEnv_StateEnvironment pStateEnvironment, const char * pDriverName, const LibMCEnv_uint32 nDriverTypeBufferSize, LibMCEnv_uint32* pDriverTypeNeededChars, char * pDriverTypeBuffer, LibMCEnv_pvoid * pDriverLookup);

/**
* Accesses and locks a driver for the execution of the current state.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pDriverName - Name identifier of the driver.
* @param[out] pDriverHandle - Handle of the driver.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_createdriveraccess(LibMCEnv_StateEnvironment pStateEnvironment, const char * pDriverName, LibMCEnv_pvoid * pDriverHandle);

/**
* Returns if a build object exists. Fails if BuildUUID is not a valid UUID string.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pBuildUUID - UUID of the build entity.
* @param[out] pBuildExists - Returns true if build exists
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_hasbuildjob(LibMCEnv_StateEnvironment pStateEnvironment, const char * pBuildUUID, bool * pBuildExists);

/**
* Returns a instance of a build object. Fails if build uuid does not exist.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pBuildUUID - UUID of the build entity.
* @param[out] pBuildInstance - Build instance
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_getbuildjob(LibMCEnv_StateEnvironment pStateEnvironment, const char * pBuildUUID, LibMCEnv_Build * pBuildInstance);

/**
* Returns if a build execution exists. Fails if ExecutionUUID is not a valid UUID string.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pExecutionUUID - UUID of the execution entity.
* @param[out] pExecutionExists - Returns true if execution exists
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_hasbuildexecution(LibMCEnv_StateEnvironment pStateEnvironment, const char * pExecutionUUID, bool * pExecutionExists);

/**
* Returns a instance of a build execution object. Fails if build execution uuid does not exist.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pExecutionUUID - UUID of the execution entity.
* @param[out] pExecutionInstance - Build execution instance
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_getbuildexecution(LibMCEnv_StateEnvironment pStateEnvironment, const char * pExecutionUUID, LibMCEnv_BuildExecution * pExecutionInstance);

/**
* unloads all toolpath in memory to clean up
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_unloadalltoolpathes(LibMCEnv_StateEnvironment pStateEnvironment);

/**
* sets the next state
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pStateName - Name of next state
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_setnextstate(LibMCEnv_StateEnvironment pStateEnvironment, const char * pStateName);

/**
* logs a string as message
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pLogString - String to Log
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_logmessage(LibMCEnv_StateEnvironment pStateEnvironment, const char * pLogString);

/**
* logs a string as warning
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pLogString - String to Log
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_logwarning(LibMCEnv_StateEnvironment pStateEnvironment, const char * pLogString);

/**
* logs a string as info
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pLogString - String to Log
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_loginfo(LibMCEnv_StateEnvironment pStateEnvironment, const char * pLogString);

/**
* Puts the current instance to sleep for a definite amount of time. MUST be used instead of a blocking sleep call.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] nDelay - Milliseconds to sleeps
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_sleep(LibMCEnv_StateEnvironment pStateEnvironment, LibMCEnv_uint32 nDelay);

/**
* checks environment for termination signal. MUST be called frequently in longer-running operations.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[out] pShallTerminate - Returns if termination shall appear
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_checkfortermination(LibMCEnv_StateEnvironment pStateEnvironment, bool * pShallTerminate);

/**
* DEPRECIATED: stores a signal handler in the current state machine
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pName - Name
* @param[in] pHandler - Signal handler to store.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_storesignal(LibMCEnv_StateEnvironment pStateEnvironment, const char * pName, LibMCEnv_SignalHandler pHandler);

/**
* DEPRECIATED: retrieves a signal handler from the current state machine. Fails if value has not been stored before or signal has been already handled.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pName - Name
* @param[out] pHandler - Signal handler instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_retrievesignal(LibMCEnv_StateEnvironment pStateEnvironment, const char * pName, LibMCEnv_SignalHandler * pHandler);

/**
* DEPRECIATED: deletes a value from the data store.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pName - Name
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_clearstoredvalue(LibMCEnv_StateEnvironment pStateEnvironment, const char * pName);

/**
* sets a string parameter
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pParameterGroup - Parameter Group
* @param[in] pParameterName - Parameter Name
* @param[in] pValue - Value to set
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_setstringparameter(LibMCEnv_StateEnvironment pStateEnvironment, const char * pParameterGroup, const char * pParameterName, const char * pValue);

/**
* sets a uuid parameter
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pParameterGroup - Parameter Group
* @param[in] pParameterName - Parameter Name
* @param[in] pValue - Value to set
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_setuuidparameter(LibMCEnv_StateEnvironment pStateEnvironment, const char * pParameterGroup, const char * pParameterName, const char * pValue);

/**
* sets a double parameter
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pParameterGroup - Parameter Group
* @param[in] pParameterName - Parameter Name
* @param[in] dValue - Value to set
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_setdoubleparameter(LibMCEnv_StateEnvironment pStateEnvironment, const char * pParameterGroup, const char * pParameterName, LibMCEnv_double dValue);

/**
* sets an int parameter
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pParameterGroup - Parameter Group
* @param[in] pParameterName - Parameter Name
* @param[in] nValue - Value to set
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_setintegerparameter(LibMCEnv_StateEnvironment pStateEnvironment, const char * pParameterGroup, const char * pParameterName, LibMCEnv_int64 nValue);

/**
* sets a bool parameter
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pParameterGroup - Parameter Group
* @param[in] pParameterName - Parameter Name
* @param[in] bValue - Value to set
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_setboolparameter(LibMCEnv_StateEnvironment pStateEnvironment, const char * pParameterGroup, const char * pParameterName, bool bValue);

/**
* returns a string parameter
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pParameterGroup - Parameter Group
* @param[in] pParameterName - Parameter Name
* @param[in] nValueBufferSize - size of the buffer (including trailing 0)
* @param[out] pValueNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pValueBuffer -  buffer of Value to set, may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_getstringparameter(LibMCEnv_StateEnvironment pStateEnvironment, const char * pParameterGroup, const char * pParameterName, const LibMCEnv_uint32 nValueBufferSize, LibMCEnv_uint32* pValueNeededChars, char * pValueBuffer);

/**
* returns a uuid parameter
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pParameterGroup - Parameter Group
* @param[in] pParameterName - Parameter Name
* @param[in] nValueBufferSize - size of the buffer (including trailing 0)
* @param[out] pValueNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pValueBuffer -  buffer of Value to set, may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_getuuidparameter(LibMCEnv_StateEnvironment pStateEnvironment, const char * pParameterGroup, const char * pParameterName, const LibMCEnv_uint32 nValueBufferSize, LibMCEnv_uint32* pValueNeededChars, char * pValueBuffer);

/**
* returns a double parameter
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pParameterGroup - Parameter Group
* @param[in] pParameterName - Parameter Name
* @param[out] pValue - Value to set
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_getdoubleparameter(LibMCEnv_StateEnvironment pStateEnvironment, const char * pParameterGroup, const char * pParameterName, LibMCEnv_double * pValue);

/**
* returns an int parameter
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pParameterGroup - Parameter Group
* @param[in] pParameterName - Parameter Name
* @param[out] pValue - Value to set
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_getintegerparameter(LibMCEnv_StateEnvironment pStateEnvironment, const char * pParameterGroup, const char * pParameterName, LibMCEnv_int64 * pValue);

/**
* returns a bool parameter
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pParameterGroup - Parameter Group
* @param[in] pParameterName - Parameter Name
* @param[out] pValue - Value to set
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_getboolparameter(LibMCEnv_StateEnvironment pStateEnvironment, const char * pParameterGroup, const char * pParameterName, bool * pValue);

/**
* loads a plugin resource file into memory.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pResourceName - Name of the resource.
* @param[in] nResourceDataBufferSize - Number of elements in buffer
* @param[out] pResourceDataNeededCount - will be filled with the count of the written elements, or needed buffer size.
* @param[out] pResourceDataBuffer - uint8  buffer of Resource Data Buffer.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_loadresourcedata(LibMCEnv_StateEnvironment pStateEnvironment, const char * pResourceName, const LibMCEnv_uint64 nResourceDataBufferSize, LibMCEnv_uint64* pResourceDataNeededCount, LibMCEnv_uint8 * pResourceDataBuffer);

/**
* loads a plugin resource file into a string. Fails if content is not a valid UTF8 string.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pResourceName - Name of the resource.
* @param[in] nResourceDataBufferSize - size of the buffer (including trailing 0)
* @param[out] pResourceDataNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pResourceDataBuffer -  buffer of Resource Data String., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_loadresourcestring(LibMCEnv_StateEnvironment pStateEnvironment, const char * pResourceName, const LibMCEnv_uint32 nResourceDataBufferSize, LibMCEnv_uint32* pResourceDataNeededChars, char * pResourceDataBuffer);

/**
* creates an empty image object.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] nPixelSizeX - Pixel size in X. MUST be positive.
* @param[in] nPixelSizeY - Pixel size in Y. MUST be positive.
* @param[in] dDPIValueX - DPI Value in X. MUST be positive.
* @param[in] dDPIValueY - DPI Value in Y. MUST be positive.
* @param[in] ePixelFormat - Pixel format to use.
* @param[out] pImageDataInstance - Empty image instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_createemptyimage(LibMCEnv_StateEnvironment pStateEnvironment, LibMCEnv_uint32 nPixelSizeX, LibMCEnv_uint32 nPixelSizeY, LibMCEnv_double dDPIValueX, LibMCEnv_double dDPIValueY, LibMCEnv::eImagePixelFormat ePixelFormat, LibMCEnv_ImageData * pImageDataInstance);

/**
* creates an image object from a PNG data stream.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] nPNGDataBufferSize - Number of elements in buffer
* @param[in] pPNGDataBuffer - uint8 buffer of DPI Value in X. MUST be positive.
* @param[in] dDPIValueX - DPI Value in X. MUST be positive.
* @param[in] dDPIValueY - DPI Value in Y. MUST be positive.
* @param[in] ePixelFormat - Pixel format to use. Might lose color and alpha information.
* @param[out] pImageDataInstance - Image instance containing the PNG image.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_loadpngimage(LibMCEnv_StateEnvironment pStateEnvironment, LibMCEnv_uint64 nPNGDataBufferSize, const LibMCEnv_uint8 * pPNGDataBuffer, LibMCEnv_double dDPIValueX, LibMCEnv_double dDPIValueY, LibMCEnv::eImagePixelFormat ePixelFormat, LibMCEnv_ImageData * pImageDataInstance);

/**
* Creates an empty discrete field.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] nPixelCountX - Pixel count in X. MUST be positive.
* @param[in] nPixelCountY - Pixel count in Y. MUST be positive.
* @param[in] dDPIValueX - DPI Value in X. MUST be positive.
* @param[in] dDPIValueY - DPI Value in Y. MUST be positive.
* @param[in] dOriginX - Origin X of the field in mm.
* @param[in] dOriginY - Origin Y of the field in mm.
* @param[in] dDefaultValue - Default value of the field.
* @param[out] pFieldDataInstance - Empty field instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_creatediscretefield2d(LibMCEnv_StateEnvironment pStateEnvironment, LibMCEnv_uint32 nPixelCountX, LibMCEnv_uint32 nPixelCountY, LibMCEnv_double dDPIValueX, LibMCEnv_double dDPIValueY, LibMCEnv_double dOriginX, LibMCEnv_double dOriginY, LibMCEnv_double dDefaultValue, LibMCEnv_DiscreteFieldData2D * pFieldDataInstance);

/**
* Creates a discrete field from the greyscale values of an image. RGB colors in the image will be averaged to obtain a greyscale color.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pImageDataInstance - Image instance containing the pixel data.
* @param[in] dBlackValue - Value that the minimum color (black) shall be mapped to.
* @param[in] dWhiteValue - Value that the maximum color (white) shall be mapped to.
* @param[in] dOriginX - Origin X of the field in mm.
* @param[in] dOriginY - Origin Y of the field in mm.
* @param[out] pFieldDataInstance - Empty field instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_creatediscretefield2dfromimage(LibMCEnv_StateEnvironment pStateEnvironment, LibMCEnv_ImageData pImageDataInstance, LibMCEnv_double dBlackValue, LibMCEnv_double dWhiteValue, LibMCEnv_double dOriginX, LibMCEnv_double dOriginY, LibMCEnv_DiscreteFieldData2D * pFieldDataInstance);

/**
* Returns the global timer in milliseconds.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[out] pTimerValue - Timer value in Milliseconds
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_getglobaltimerinmilliseconds(LibMCEnv_StateEnvironment pStateEnvironment, LibMCEnv_uint64 * pTimerValue);

/**
* Returns the global timer in microseconds.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[out] pTimerValue - Timer value in Microseconds
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_getglobaltimerinmicroseconds(LibMCEnv_StateEnvironment pStateEnvironment, LibMCEnv_uint64 * pTimerValue);

/**
* Returns the global start timer of the current state in milliseconds.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[out] pTimerValue - Timer value in Milliseconds
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_getstarttimeofstateinmilliseconds(LibMCEnv_StateEnvironment pStateEnvironment, LibMCEnv_uint64 * pTimerValue);

/**
* Returns the global start timer of the current state in microseconds.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[out] pTimerValue - Timer value in Milliseconds
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_getstarttimeofstateinmicroseconds(LibMCEnv_StateEnvironment pStateEnvironment, LibMCEnv_uint64 * pTimerValue);

/**
* Returns the global finish timer of the previous state in microseconds.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[out] pTimerValue - Timer value in Microseconds
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_getendtimeofpreviousstateinmicroseconds(LibMCEnv_StateEnvironment pStateEnvironment, LibMCEnv_uint64 * pTimerValue);

/**
* Returns the global finish timer of the previous state in milliseconds.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[out] pTimerValue - Timer value in Milliseconds
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_getendtimeofpreviousstateinmilliseconds(LibMCEnv_StateEnvironment pStateEnvironment, LibMCEnv_uint64 * pTimerValue);

/**
* Returns the global finish timer of the previous state in milliseconds.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[out] pTimerValue - Timer value in Milliseconds
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_getelapsedtimeinstateinmilliseconds(LibMCEnv_StateEnvironment pStateEnvironment, LibMCEnv_uint64 * pTimerValue);

/**
* Returns the global finish timer of the previous state in microseconds.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[out] pTimerValue - Timer value in Microseconds
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_getelapsedtimeinstateinmicroseconds(LibMCEnv_StateEnvironment pStateEnvironment, LibMCEnv_uint64 * pTimerValue);

/**
* Returns the current time as DateTime object instance.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[out] pDateTime - Date Time Instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_getcurrentdatetime(LibMCEnv_StateEnvironment pStateEnvironment, LibMCEnv_DateTime * pDateTime);

/**
* Returns a custom time as DateTime object instance. Fails if the values are not a valid time from January first 1970 to year 1 million.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] nYear - Year. Must be larger or equal than 1970.
* @param[in] nMonth - Month. Must be between 1 and 12.
* @param[in] nDay - Day. Must be between 1 and 31.
* @param[in] nHour - Hour. Must be between 0 and 23.
* @param[in] nMinute - Minute. Must be between 0 and 59.
* @param[in] nSecond - Second. Must be between 0 and 59.
* @param[in] nMicrosecond - Microsecond. Must be between 0 and 999999.
* @param[out] pDateTime - Date Time Instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_getcustomdatetime(LibMCEnv_StateEnvironment pStateEnvironment, LibMCEnv_uint32 nYear, LibMCEnv_uint32 nMonth, LibMCEnv_uint32 nDay, LibMCEnv_uint32 nHour, LibMCEnv_uint32 nMinute, LibMCEnv_uint32 nSecond, LibMCEnv_uint32 nMicrosecond, LibMCEnv_DateTime * pDateTime);

/**
* Returns the startup time of the system as DateTime object instance. All Timer values are counted from there.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[out] pDateTime - Date Time Instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_getstartdatetime(LibMCEnv_StateEnvironment pStateEnvironment, LibMCEnv_DateTime * pDateTime);

/**
* Returns a test environment instance.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[out] pTestEnvironment - Test Environment Instance
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_gettestenvironment(LibMCEnv_StateEnvironment pStateEnvironment, LibMCEnv_TestEnvironment * pTestEnvironment);

/**
* creates an empty XML Document.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pRootNodeName - Name of the root node. MUST be a valid XML Node Name string.
* @param[in] pDefaultNamespace - Default namespace of the document. MUST be a valid XML namespace string.
* @param[out] pXMLDocument - XML Document Instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_createxmldocument(LibMCEnv_StateEnvironment pStateEnvironment, const char * pRootNodeName, const char * pDefaultNamespace, LibMCEnv_XMLDocument * pXMLDocument);

/**
* parses an XML String and returns an XML Document instance. Throws an error if XML is malformatted.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pXMLString - XML String.
* @param[out] pXMLDocument - XML Document Instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_parsexmlstring(LibMCEnv_StateEnvironment pStateEnvironment, const char * pXMLString, LibMCEnv_XMLDocument * pXMLDocument);

/**
* parses a XML stored in a byte array and returns an XML Document instance. . Throws an error if XML is malformatted.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] nXMLDataBufferSize - Number of elements in buffer
* @param[in] pXMLDataBuffer - uint8 buffer of XML Binary data.
* @param[out] pXMLDocument - XML Document Instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_parsexmldata(LibMCEnv_StateEnvironment pStateEnvironment, LibMCEnv_uint64 nXMLDataBufferSize, const LibMCEnv_uint8 * pXMLDataBuffer, LibMCEnv_XMLDocument * pXMLDocument);

/**
* creates an empty data table.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[out] pDataTableInstance - Data Table Instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_createdatatable(LibMCEnv_StateEnvironment pStateEnvironment, LibMCEnv_DataTable * pDataTableInstance);

/**
* Returns if the a user has a certain permission. Fails if user or permission is not known to the system.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pUserLogin - Login of user to check
* @param[in] pPermissionIdentifier - Permission identifier
* @param[out] pUserHasPermission - Returns if the user has permission
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_checkuserpermission(LibMCEnv_StateEnvironment pStateEnvironment, const char * pUserLogin, const char * pPermissionIdentifier, bool * pUserHasPermission);

/**
* Returns a user management handler instance.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[out] pUserManagementInstance - Returns a user management handler.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_createusermanagement(LibMCEnv_StateEnvironment pStateEnvironment, LibMCEnv_UserManagementHandler * pUserManagementInstance);

/**
* Returns the journal instance of the current session.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[out] pJournalHandler - Journal instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_getcurrentjournal(LibMCEnv_StateEnvironment pStateEnvironment, LibMCEnv_JournalHandler * pJournalHandler);

/**
* Loads a from a 3MF Resource File. If 3MF contains multiple objects, it will merge them into one mesh.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pResourceName - Resource name to load.
* @param[out] pMeshObject - Mesh Object instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_registermeshfrom3mfresource(LibMCEnv_StateEnvironment pStateEnvironment, const char * pResourceName, LibMCEnv_MeshObject * pMeshObject);

/**
* Checks if a mesh uuid is registered.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pMeshUUID - Mesh UUID to load.
* @param[out] pMeshIsRegistered - Flag is registered.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_meshisregistered(LibMCEnv_StateEnvironment pStateEnvironment, const char * pMeshUUID, bool * pMeshIsRegistered);

/**
* Finds a registered mesh by its UUID. Fails if mesh UUID is not registered.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pMeshUUID - Mesh UUID to load.
* @param[out] pMeshObject - Mesh Object instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_findregisteredmesh(LibMCEnv_StateEnvironment pStateEnvironment, const char * pMeshUUID, LibMCEnv_MeshObject * pMeshObject);

/**
* Creates a new empty data series object.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pName - Name to use for this data series. MUST NOT be an empty string.
* @param[out] pInstance - Data series instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_createdataseries(LibMCEnv_StateEnvironment pStateEnvironment, const char * pName, LibMCEnv_DataSeries * pInstance);

/**
* Checks if a data series exist.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pDataSeriesUUID - UUID to find.
* @param[out] pDataSeriesExists - returns true if series exists.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_hasdataseries(LibMCEnv_StateEnvironment pStateEnvironment, const char * pDataSeriesUUID, bool * pDataSeriesExists);

/**
* Finds a data series. Fails if data series does not exist.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pDataSeriesUUID - UUID to find.
* @param[out] pInstance - Data series instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_finddataseries(LibMCEnv_StateEnvironment pStateEnvironment, const char * pDataSeriesUUID, LibMCEnv_DataSeries * pInstance);

/**
* Releases the memory of a data series. Fails if data series does not exist.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pDataSeriesUUID - UUID to release.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_releasedataseries(LibMCEnv_StateEnvironment pStateEnvironment, const char * pDataSeriesUUID);

/**
* creates a new alert
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pIdentifier - Alert type identifier. Call fails if identifier is not registered.
* @param[in] pReadableContextInformation - Context information string that can be displayed to the user.
* @param[in] bAutomaticLogEntry - If this flag is set to true, an automatic message will be posted to the system log.
* @param[out] pAlert - Alert instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_createalert(LibMCEnv_StateEnvironment pStateEnvironment, const char * pIdentifier, const char * pReadableContextInformation, bool bAutomaticLogEntry, LibMCEnv_Alert * pAlert);

/**
* finds an alert by UUID. Fails if alert does not exist.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pUUID - UUID of the alert to return.
* @param[out] pAlert - Alert instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_findalert(LibMCEnv_StateEnvironment pStateEnvironment, const char * pUUID, LibMCEnv_Alert * pAlert);

/**
* Checks if a certain alert exists.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pUUID - UUID of the alert to return.
* @param[out] pValue - True if alert exists.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_alertexists(LibMCEnv_StateEnvironment pStateEnvironment, const char * pUUID, bool * pValue);

/**
* Retrieves all or all active alerts.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] bOnlyActive - If true, only active alerts will be returned.
* @param[out] pIteratorInstance - AlertIterator Instance
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_retrievealerts(LibMCEnv_StateEnvironment pStateEnvironment, bool bOnlyActive, LibMCEnv_AlertIterator * pIteratorInstance);

/**
* Retrieves alerts of a certain type identifier.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pIdentifier - Alert Identifier to look for. Fails if empty.
* @param[in] bOnlyActive - If true, only active alerts will be returned.
* @param[out] pIteratorInstance - AlertIterator Instance
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_retrievealertsbytype(LibMCEnv_StateEnvironment pStateEnvironment, const char * pIdentifier, bool bOnlyActive, LibMCEnv_AlertIterator * pIteratorInstance);

/**
* Checks, if an alert of a certain type identifier exists.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pIdentifier - Alert Identifier to look for. Fails if empty.
* @param[in] bOnlyActive - If true, only active alerts will be taken into account.
* @param[out] pHasAlert - Flag, if the alert exists.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_hasalertoftype(LibMCEnv_StateEnvironment pStateEnvironment, const char * pIdentifier, bool bOnlyActive, bool * pHasAlert);

/**
* Creates a crypto context.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[out] pContext - Cryptographic context instance
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_createcryptocontext(LibMCEnv_StateEnvironment pStateEnvironment, LibMCEnv_CryptoContext * pContext);

/**
* Creates a new writer to store temporary data. This data will be attached to the current journal.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pName - Name of the storage stream.
* @param[in] pMIMEType - Mime type of the data.
* @param[out] pTempStreamInstance - Temp stream writer instance
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_createtemporarystream(LibMCEnv_StateEnvironment pStateEnvironment, const char * pName, const char * pMIMEType, LibMCEnv_TempStreamWriter * pTempStreamInstance);

/**
* Creates a new ZIP writer to store temporary data. This data will be attached to the current journal. MIME Type will be application/zip
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pName - Name of the storage stream.
* @param[out] pZIPStreamInstance - ZIP stream writer instance
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_createzipstream(LibMCEnv_StateEnvironment pStateEnvironment, const char * pName, LibMCEnv_ZIPStreamWriter * pZIPStreamInstance);

/**
* Loads a stream in the storage system.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pUUID - UUID of the storage stream.
* @param[in] bMustExist - If true, the call fails if the stream does not exist.
* @param[out] pStreamInstance - Stream Instance. Will return null if not found and MustExists is false.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_loadstream(LibMCEnv_StateEnvironment pStateEnvironment, const char * pUUID, bool bMustExist, LibMCEnv_StreamReader * pStreamInstance);

/*************************************************************************************************************************
 Class definition for UIItem
**************************************************************************************************************************/

/**
* Returns the name of the user interface item. MUST be unique within its siblings.
*
* @param[in] pUIItem - UIItem instance.
* @param[in] nNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNameBuffer -  buffer of Returns the name., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uiitem_getname(LibMCEnv_UIItem pUIItem, const LibMCEnv_uint32 nNameBufferSize, LibMCEnv_uint32* pNameNeededChars, char * pNameBuffer);

/**
* Returns the full path of the user interface item. MUST be unique.
*
* @param[in] pUIItem - UIItem instance.
* @param[in] nPathBufferSize - size of the buffer (including trailing 0)
* @param[out] pPathNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pPathBuffer -  buffer of Returns the path., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uiitem_getpath(LibMCEnv_UIItem pUIItem, const LibMCEnv_uint32 nPathBufferSize, LibMCEnv_uint32* pPathNeededChars, char * pPathBuffer);

/**
* Returns the UUID of the time stream chart object.
*
* @param[in] pUIItem - UIItem instance.
* @param[in] nUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pUUIDBuffer -  buffer of Returns uuid., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uiitem_getuuid(LibMCEnv_UIItem pUIItem, const LibMCEnv_uint32 nUUIDBufferSize, LibMCEnv_uint32* pUUIDNeededChars, char * pUUIDBuffer);

/*************************************************************************************************************************
 Class definition for UIEnvironment
**************************************************************************************************************************/

/**
* activates a modal dialog on the client.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pDialogName - Name of the dialog to activate.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_activatemodaldialog(LibMCEnv_UIEnvironment pUIEnvironment, const char * pDialogName);

/**
* closes the active modal dialog on the client.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_closemodaldialog(LibMCEnv_UIEnvironment pUIEnvironment);

/**
* changes the current page on the client.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pPageName - Name of the page to activate.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_activatepage(LibMCEnv_UIEnvironment pUIEnvironment, const char * pPageName);

/**
* Logs out the client session.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_logout(LibMCEnv_UIEnvironment pUIEnvironment);

/**
* Shows a hint message in the user interface.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pHint - Hint to show.
* @param[in] nTimeoutInMS - How many milliseconds the snackbar should be shown.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_showhint(LibMCEnv_UIEnvironment pUIEnvironment, const char * pHint, LibMCEnv_uint32 nTimeoutInMS);

/**
* Shows a hint message in the user interface in a certain color.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pHint - Hint to show.
* @param[in] nTimeoutInMS - How many milliseconds the snackbar should be shown.
* @param[in] pColor - Background color of hint.
* @param[in] pFontColor - Font color of hint.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_showhintcolored(LibMCEnv_UIEnvironment pUIEnvironment, const char * pHint, LibMCEnv_uint32 nTimeoutInMS, const LibMCEnv::sColorRGB * pColor, const LibMCEnv::sColorRGB * pFontColor);

/**
* Hides hint if any is displayed.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_hidehint(LibMCEnv_UIEnvironment pUIEnvironment);

/**
* Starts a stream download on the client. Fails if stream does not exist.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pUUID - Stream UUID.
* @param[in] pFilename - Filename on disk. Fails if empty string.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_startstreamdownload(LibMCEnv_UIEnvironment pUIEnvironment, const char * pUUID, const char * pFilename);

/**
* Shows a message dialog in the user interface.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pCaption - Caption of the dialog
* @param[in] pTitle - Title of the dialog
* @param[in] eDialogType - Which dialog type shall be shown.
* @param[in] pYesEvent - Event to be called when clicked yes or ok.
* @param[in] pNoEvent - Event to be called when clicked no.
* @param[in] pCancelEvent - Event to be called when dialog is closed or cancel is pressed.
* @param[in] nDialogUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pDialogUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pDialogUUIDBuffer -  buffer of Dialog UUID. Will be set as sender for triggered events., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_showmessagedlg(LibMCEnv_UIEnvironment pUIEnvironment, const char * pCaption, const char * pTitle, LibMCEnv::eMessageDialogType eDialogType, const char * pYesEvent, const char * pNoEvent, const char * pCancelEvent, const LibMCEnv_uint32 nDialogUUIDBufferSize, LibMCEnv_uint32* pDialogUUIDNeededChars, char * pDialogUUIDBuffer);

/**
* returns path of the UI control that triggered the event.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] nSenderPathBufferSize - size of the buffer (including trailing 0)
* @param[out] pSenderPathNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pSenderPathBuffer -  buffer of Path of the sender element., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_retrieveeventsender(LibMCEnv_UIEnvironment pUIEnvironment, const LibMCEnv_uint32 nSenderPathBufferSize, LibMCEnv_uint32* pSenderPathNeededChars, char * pSenderPathBuffer);

/**
* returns name of the page of the UI control that triggered the event.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] nPageNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pPageNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pPageNameBuffer -  buffer of Page of the sender element., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_retrieveeventsenderpage(LibMCEnv_UIEnvironment pUIEnvironment, const LibMCEnv_uint32 nPageNameBufferSize, LibMCEnv_uint32* pPageNameNeededChars, char * pPageNameBuffer);

/**
* returns uuid of the UI control that triggered the event.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] nSenderUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pSenderUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pSenderUUIDBuffer -  buffer of Name of the sender uuid., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_retrieveeventsenderuuid(LibMCEnv_UIEnvironment pUIEnvironment, const LibMCEnv_uint32 nSenderUUIDBufferSize, LibMCEnv_uint32* pSenderUUIDNeededChars, char * pSenderUUIDBuffer);

/**
* prepares a signal object to trigger later.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pMachineInstance - State machine instance name
* @param[in] pSignalName - Name Of signal channel.
* @param[out] pSignalInstance - Signal trigger object.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_preparesignal(LibMCEnv_UIEnvironment pUIEnvironment, const char * pMachineInstance, const char * pSignalName, LibMCEnv_SignalTrigger * pSignalInstance);

/**
* Retrieves the machine state
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pMachineInstance - State machine instance name
* @param[in] nStateNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pStateNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pStateNameBuffer -  buffer of Name of current state, may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_getmachinestate(LibMCEnv_UIEnvironment pUIEnvironment, const char * pMachineInstance, const LibMCEnv_uint32 nStateNameBufferSize, LibMCEnv_uint32* pStateNameNeededChars, char * pStateNameBuffer);

/**
* logs a string as message
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pLogString - String to Log
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_logmessage(LibMCEnv_UIEnvironment pUIEnvironment, const char * pLogString);

/**
* logs a string as warning
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pLogString - String to Log
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_logwarning(LibMCEnv_UIEnvironment pUIEnvironment, const char * pLogString);

/**
* logs a string as info
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pLogString - String to Log
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_loginfo(LibMCEnv_UIEnvironment pUIEnvironment, const char * pLogString);

/**
* returns a string parameter of a state machine
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pMachineInstance - State machine instance name
* @param[in] pParameterGroup - Parameter Group
* @param[in] pParameterName - Parameter Name
* @param[in] nValueBufferSize - size of the buffer (including trailing 0)
* @param[out] pValueNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pValueBuffer -  buffer of Current Parameter Value, may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_getmachineparameter(LibMCEnv_UIEnvironment pUIEnvironment, const char * pMachineInstance, const char * pParameterGroup, const char * pParameterName, const LibMCEnv_uint32 nValueBufferSize, LibMCEnv_uint32* pValueNeededChars, char * pValueBuffer);

/**
* returns a uuid parameter of a state machine
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pMachineInstance - State machine instance name
* @param[in] pParameterGroup - Parameter Group
* @param[in] pParameterName - Parameter Name
* @param[in] nValueBufferSize - size of the buffer (including trailing 0)
* @param[out] pValueNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pValueBuffer -  buffer of Current Parameter Value, may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_getmachineparameterasuuid(LibMCEnv_UIEnvironment pUIEnvironment, const char * pMachineInstance, const char * pParameterGroup, const char * pParameterName, const LibMCEnv_uint32 nValueBufferSize, LibMCEnv_uint32* pValueNeededChars, char * pValueBuffer);

/**
* returns a double parameter of a state machine
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pMachineInstance - State machine instance name
* @param[in] pParameterGroup - Parameter Group
* @param[in] pParameterName - Parameter Name
* @param[out] pValue - Current Parameter Value
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_getmachineparameterasdouble(LibMCEnv_UIEnvironment pUIEnvironment, const char * pMachineInstance, const char * pParameterGroup, const char * pParameterName, LibMCEnv_double * pValue);

/**
* returns an int parameter of a state machine
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pMachineInstance - State machine instance name
* @param[in] pParameterGroup - Parameter Group
* @param[in] pParameterName - Parameter Name
* @param[out] pValue - Current Parameter Value
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_getmachineparameterasinteger(LibMCEnv_UIEnvironment pUIEnvironment, const char * pMachineInstance, const char * pParameterGroup, const char * pParameterName, LibMCEnv_int64 * pValue);

/**
* returns a bool parameter of a state machine
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pMachineInstance - State machine instance name
* @param[in] pParameterGroup - Parameter Group
* @param[in] pParameterName - Parameter Name
* @param[out] pValue - Current Parameter Value
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_getmachineparameterasbool(LibMCEnv_UIEnvironment pUIEnvironment, const char * pMachineInstance, const char * pParameterGroup, const char * pParameterName, bool * pValue);

/**
* returns a string property of a UI element on the client
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pElementPath - Path of UI Element. Fails if element does not exist.
* @param[in] pPropertyName - Property name. Fails if property does not exist.
* @param[in] nValueBufferSize - size of the buffer (including trailing 0)
* @param[out] pValueNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pValueBuffer -  buffer of Current property Value, may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_getuiproperty(LibMCEnv_UIEnvironment pUIEnvironment, const char * pElementPath, const char * pPropertyName, const LibMCEnv_uint32 nValueBufferSize, LibMCEnv_uint32* pValueNeededChars, char * pValueBuffer);

/**
* returns a uuid variable of a UI element on the client
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pElementPath - Path of UI Element. Fails if element does not exist.
* @param[in] pPropertyName - Property name. Fails if property does not exist.
* @param[in] nValueBufferSize - size of the buffer (including trailing 0)
* @param[out] pValueNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pValueBuffer -  buffer of Current property Value, may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_getuipropertyasuuid(LibMCEnv_UIEnvironment pUIEnvironment, const char * pElementPath, const char * pPropertyName, const LibMCEnv_uint32 nValueBufferSize, LibMCEnv_uint32* pValueNeededChars, char * pValueBuffer);

/**
* returns a double variable of a UI element on the client
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pElementPath - Path of UI Element. Fails if element does not exist.
* @param[in] pPropertyName - Property name. Fails if property does not exist.
* @param[out] pValue - Current property Value
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_getuipropertyasdouble(LibMCEnv_UIEnvironment pUIEnvironment, const char * pElementPath, const char * pPropertyName, LibMCEnv_double * pValue);

/**
* returns a integer variable of a UI element on the client
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pElementPath - Path of UI Element. Fails if element does not exist.
* @param[in] pPropertyName - Property name. Fails if property does not exist.
* @param[out] pValue - Current property Value
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_getuipropertyasinteger(LibMCEnv_UIEnvironment pUIEnvironment, const char * pElementPath, const char * pPropertyName, LibMCEnv_int64 * pValue);

/**
* returns a integer variable of a UI element on the client
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pElementPath - Path of UI Element. Fails if element does not exist.
* @param[in] pPropertyName - Property name. Fails if property does not exist.
* @param[out] pValue - Current property Value
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_getuipropertyasbool(LibMCEnv_UIEnvironment pUIEnvironment, const char * pElementPath, const char * pPropertyName, bool * pValue);

/**
* sets a string property of a UI element on the client.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pElementPath - Path of UI Element. Fails if element does not exist.
* @param[in] pPropertyName - Property name. Fails if property does not exist or is readonly.
* @param[in] pValue - New property Value
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_setuiproperty(LibMCEnv_UIEnvironment pUIEnvironment, const char * pElementPath, const char * pPropertyName, const char * pValue);

/**
* sets a uuid property of a UI element on the client.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pElementPath - Path of UI Element. Fails if element does not exist.
* @param[in] pPropertyName - Property name. Fails if property does not exist or is readonly.
* @param[in] pValue - New property Value
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_setuipropertyasuuid(LibMCEnv_UIEnvironment pUIEnvironment, const char * pElementPath, const char * pPropertyName, const char * pValue);

/**
* sets a double property of a UI element on the client.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pElementPath - Path of UI Element. Fails if element does not exist.
* @param[in] pPropertyName - Property name. Fails if property does not exist or is readonly.
* @param[in] dValue - New property Value
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_setuipropertyasdouble(LibMCEnv_UIEnvironment pUIEnvironment, const char * pElementPath, const char * pPropertyName, LibMCEnv_double dValue);

/**
* sets a integer property of a UI element on the client.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pElementPath - Path of UI Element. Fails if element does not exist.
* @param[in] pPropertyName - Property name. Fails if property does not exist or is readonly.
* @param[in] nValue - New property Value
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_setuipropertyasinteger(LibMCEnv_UIEnvironment pUIEnvironment, const char * pElementPath, const char * pPropertyName, LibMCEnv_int64 nValue);

/**
* sets a bool property of a UI element on the client.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pElementPath - Path of UI Element. Fails if element does not exist.
* @param[in] pPropertyName - Property name. Fails if property does not exist or is readonly.
* @param[in] bValue - New property Value
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_setuipropertyasbool(LibMCEnv_UIEnvironment pUIEnvironment, const char * pElementPath, const char * pPropertyName, bool bValue);

/**
* creates an empty image object.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] nPixelSizeX - Pixel size in X. MUST be positive.
* @param[in] nPixelSizeY - Pixel size in Y. MUST be positive.
* @param[in] dDPIValueX - DPI Value in X. MUST be positive.
* @param[in] dDPIValueY - DPI Value in Y. MUST be positive.
* @param[in] ePixelFormat - Pixel format to use.
* @param[out] pImageDataInstance - Empty image instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_createemptyimage(LibMCEnv_UIEnvironment pUIEnvironment, LibMCEnv_uint32 nPixelSizeX, LibMCEnv_uint32 nPixelSizeY, LibMCEnv_double dDPIValueX, LibMCEnv_double dDPIValueY, LibMCEnv::eImagePixelFormat ePixelFormat, LibMCEnv_ImageData * pImageDataInstance);

/**
* creates an image object from a PNG data stream.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] nPNGDataBufferSize - Number of elements in buffer
* @param[in] pPNGDataBuffer - uint8 buffer of DPI Value in X. MUST be positive.
* @param[in] dDPIValueX - DPI Value in X. MUST be positive.
* @param[in] dDPIValueY - DPI Value in Y. MUST be positive.
* @param[in] ePixelFormat - Pixel format to use. Might lose color and alpha information.
* @param[out] pImageDataInstance - Image instance containing the PNG image.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_loadpngimage(LibMCEnv_UIEnvironment pUIEnvironment, LibMCEnv_uint64 nPNGDataBufferSize, const LibMCEnv_uint8 * pPNGDataBuffer, LibMCEnv_double dDPIValueX, LibMCEnv_double dDPIValueY, LibMCEnv::eImagePixelFormat ePixelFormat, LibMCEnv_ImageData * pImageDataInstance);

/**
* Returns the global timer in milliseconds.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[out] pTimerValue - Timer value in Milliseconds
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_getglobaltimerinmilliseconds(LibMCEnv_UIEnvironment pUIEnvironment, LibMCEnv_uint64 * pTimerValue);

/**
* Returns the global timer in microseconds.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[out] pTimerValue - Timer value in Microseconds
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_getglobaltimerinmicroseconds(LibMCEnv_UIEnvironment pUIEnvironment, LibMCEnv_uint64 * pTimerValue);

/**
* Returns a test environment instance.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[out] pTestEnvironment - Test Environment Instance
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_gettestenvironment(LibMCEnv_UIEnvironment pUIEnvironment, LibMCEnv_TestEnvironment * pTestEnvironment);

/**
* creates an empty XML Document.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pRootNodeName - Name of the root node. MUST be a valid XML Node Name string.
* @param[in] pDefaultNamespace - Default namespace of the document. MUST be a valid XML namespace string.
* @param[out] pXMLDocument - XML Document Instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_createxmldocument(LibMCEnv_UIEnvironment pUIEnvironment, const char * pRootNodeName, const char * pDefaultNamespace, LibMCEnv_XMLDocument * pXMLDocument);

/**
* parses an XML String and returns an XML Document instance. Throws an error if XML is malformatted.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pXMLString - XML String.
* @param[out] pXMLDocument - XML Document Instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_parsexmlstring(LibMCEnv_UIEnvironment pUIEnvironment, const char * pXMLString, LibMCEnv_XMLDocument * pXMLDocument);

/**
* parses a XML stored in a byte array and returns an XML Document instance. . Throws an error if XML is malformatted.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] nXMLDataBufferSize - Number of elements in buffer
* @param[in] pXMLDataBuffer - uint8 buffer of XML Binary data.
* @param[out] pXMLDocument - XML Document Instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_parsexmldata(LibMCEnv_UIEnvironment pUIEnvironment, LibMCEnv_uint64 nXMLDataBufferSize, const LibMCEnv_uint8 * pXMLDataBuffer, LibMCEnv_XMLDocument * pXMLDocument);

/**
* creates an empty data table.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[out] pDataTableInstance - Data Table Instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_createdatatable(LibMCEnv_UIEnvironment pUIEnvironment, LibMCEnv_DataTable * pDataTableInstance);

/**
* Returns if a build object exists. Fails if BuildUUID is not a valid UUID string.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pBuildUUID - UUID of the build entity.
* @param[out] pBuildExists - Returns true if build exists
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_hasbuildjob(LibMCEnv_UIEnvironment pUIEnvironment, const char * pBuildUUID, bool * pBuildExists);

/**
* Returns a instance of a build object. Fails if build uuid does not exist.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pBuildUUID - UUID of the build entity.
* @param[out] pBuildInstance - Build instance
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_getbuildjob(LibMCEnv_UIEnvironment pUIEnvironment, const char * pBuildUUID, LibMCEnv_Build * pBuildInstance);

/**
* Returns if a build execution exists. Fails if ExecutionUUID is not a valid UUID string.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pExecutionUUID - UUID of the execution entity.
* @param[out] pExecutionExists - Returns true if execution exists
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_hasbuildexecution(LibMCEnv_UIEnvironment pUIEnvironment, const char * pExecutionUUID, bool * pExecutionExists);

/**
* Returns a instance of a build execution object. Fails if build execution uuid does not exist.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pExecutionUUID - UUID of the execution entity.
* @param[out] pExecutionInstance - Build execution instance
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_getbuildexecution(LibMCEnv_UIEnvironment pUIEnvironment, const char * pExecutionUUID, LibMCEnv_BuildExecution * pExecutionInstance);

/**
* Creates an empty discrete field.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] nPixelCountX - Pixel count in X. MUST be positive.
* @param[in] nPixelCountY - Pixel count in Y. MUST be positive.
* @param[in] dDPIValueX - DPI Value in X. MUST be positive.
* @param[in] dDPIValueY - DPI Value in Y. MUST be positive.
* @param[in] dOriginX - Origin X of the field in mm.
* @param[in] dOriginY - Origin Y of the field in mm.
* @param[in] dDefaultValue - Default value of the field.
* @param[out] pFieldDataInstance - Empty field instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_creatediscretefield2d(LibMCEnv_UIEnvironment pUIEnvironment, LibMCEnv_uint32 nPixelCountX, LibMCEnv_uint32 nPixelCountY, LibMCEnv_double dDPIValueX, LibMCEnv_double dDPIValueY, LibMCEnv_double dOriginX, LibMCEnv_double dOriginY, LibMCEnv_double dDefaultValue, LibMCEnv_DiscreteFieldData2D * pFieldDataInstance);

/**
* Creates a discrete field from the greyscale values of an image. RGB colors in the image will be averaged to obtain a greyscale color.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pImageDataInstance - Image instance containing the pixel data.
* @param[in] dBlackValue - Value that the minimum color (black) shall be mapped to.
* @param[in] dWhiteValue - Value that the maximum color (white) shall be mapped to.
* @param[in] dOriginX - Origin X of the field in mm.
* @param[in] dOriginY - Origin Y of the field in mm.
* @param[out] pFieldDataInstance - Empty field instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_creatediscretefield2dfromimage(LibMCEnv_UIEnvironment pUIEnvironment, LibMCEnv_ImageData pImageDataInstance, LibMCEnv_double dBlackValue, LibMCEnv_double dWhiteValue, LibMCEnv_double dOriginX, LibMCEnv_double dOriginY, LibMCEnv_DiscreteFieldData2D * pFieldDataInstance);

/**
* Returns if the current user has a certain permission. Fails if permission is not known to the system.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pPermissionIdentifier - Permission identifier
* @param[out] pUserHasPermission - Returns if the user has permission
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_checkpermission(LibMCEnv_UIEnvironment pUIEnvironment, const char * pPermissionIdentifier, bool * pUserHasPermission);

/**
* Returns the current user login name.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] nUserLoginBufferSize - size of the buffer (including trailing 0)
* @param[out] pUserLoginNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pUserLoginBuffer -  buffer of Returns the current users login name., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_getcurrentuserlogin(LibMCEnv_UIEnvironment pUIEnvironment, const LibMCEnv_uint32 nUserLoginBufferSize, LibMCEnv_uint32* pUserLoginNeededChars, char * pUserLoginBuffer);

/**
* Returns the current user description.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] nUserDescriptionBufferSize - size of the buffer (including trailing 0)
* @param[out] pUserDescriptionNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pUserDescriptionBuffer -  buffer of Returns the current users description., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_getcurrentuserdescription(LibMCEnv_UIEnvironment pUIEnvironment, const LibMCEnv_uint32 nUserDescriptionBufferSize, LibMCEnv_uint32* pUserDescriptionNeededChars, char * pUserDescriptionBuffer);

/**
* Returns the current user role identifier.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] nUserRoleBufferSize - size of the buffer (including trailing 0)
* @param[out] pUserRoleNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pUserRoleBuffer -  buffer of Returns the current users role identifier., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_getcurrentuserrole(LibMCEnv_UIEnvironment pUIEnvironment, const LibMCEnv_uint32 nUserRoleBufferSize, LibMCEnv_uint32* pUserRoleNeededChars, char * pUserRoleBuffer);

/**
* Returns the current users language identifier.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] nUserLanguageBufferSize - size of the buffer (including trailing 0)
* @param[out] pUserLanguageNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pUserLanguageBuffer -  buffer of Returns the current users language identifier., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_getcurrentuserlanguage(LibMCEnv_UIEnvironment pUIEnvironment, const LibMCEnv_uint32 nUserLanguageBufferSize, LibMCEnv_uint32* pUserLanguageNeededChars, char * pUserLanguageBuffer);

/**
* Returns the current user UUID.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] nUserUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pUserUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pUserUUIDBuffer -  buffer of Returns the current user UUID., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_getcurrentuseruuid(LibMCEnv_UIEnvironment pUIEnvironment, const LibMCEnv_uint32 nUserUUIDBufferSize, LibMCEnv_uint32* pUserUUIDNeededChars, char * pUserUUIDBuffer);

/**
* Returns a user management handler instance.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[out] pUserManagementInstance - Returns a user management handler.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_createusermanagement(LibMCEnv_UIEnvironment pUIEnvironment, LibMCEnv_UserManagementHandler * pUserManagementInstance);

/**
* Returns the journal instance of the current session.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[out] pJournalHandler - Journal instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_getcurrentjournal(LibMCEnv_UIEnvironment pUIEnvironment, LibMCEnv_JournalHandler * pJournalHandler);

/**
* Loads a mesh from a 3MF Resource File. Fails if mesh UUID is already registered.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pResourceName - Resource name to load.
* @param[in] pMeshUUID - Mesh UUID to load.
* @param[out] pMeshObject - Mesh Object instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_registermeshfrom3mfresource(LibMCEnv_UIEnvironment pUIEnvironment, const char * pResourceName, const char * pMeshUUID, LibMCEnv_MeshObject * pMeshObject);

/**
* Checks if a mesh uuid is registered.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pMeshUUID - Mesh UUID to load.
* @param[out] pMeshIsRegistered - Flag is registered.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_meshisregistered(LibMCEnv_UIEnvironment pUIEnvironment, const char * pMeshUUID, bool * pMeshIsRegistered);

/**
* Finds a registered mesh by its UUID. Fails if mesh UUID is not registered.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pMeshUUID - Mesh UUID to load.
* @param[out] pMeshObject - Mesh Object instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_findregisteredmesh(LibMCEnv_UIEnvironment pUIEnvironment, const char * pMeshUUID, LibMCEnv_MeshObject * pMeshObject);

/**
* Creates a new empty data series object.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pName - Name to use for this data series. MUST NOT be an empty string.
* @param[in] bBoundToLogin - If true, the data series is tied to the current user login session. If false, the data series will persist until explicitely released. This can be dangerous for the overall machine stability.
* @param[out] pInstance - Data series instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_createdataseries(LibMCEnv_UIEnvironment pUIEnvironment, const char * pName, bool bBoundToLogin, LibMCEnv_DataSeries * pInstance);

/**
* Checks if a data series exist.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pDataSeriesUUID - UUID to find.
* @param[out] pDataSeriesExists - returns true if series exists.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_hasdataseries(LibMCEnv_UIEnvironment pUIEnvironment, const char * pDataSeriesUUID, bool * pDataSeriesExists);

/**
* Finds a data series. Fails if data series does not exist.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pDataSeriesUUID - UUID to find.
* @param[out] pInstance - Data series instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_finddataseries(LibMCEnv_UIEnvironment pUIEnvironment, const char * pDataSeriesUUID, LibMCEnv_DataSeries * pInstance);

/**
* Releases the memory of a data series. Fails if data series does not exist.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pDataSeriesUUID - UUID to release.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_releasedataseries(LibMCEnv_UIEnvironment pUIEnvironment, const char * pDataSeriesUUID);

/**
* creates a new alert
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pIdentifier - Alert type identifier. Call fails if identifier is not registered.
* @param[in] pReadableContextInformation - Context information string that can be displayed to the user.
* @param[in] bAutomaticLogEntry - If this flag is set to true, an automatic message will be posted to the system log.
* @param[out] pAlert - Alert instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_createalert(LibMCEnv_UIEnvironment pUIEnvironment, const char * pIdentifier, const char * pReadableContextInformation, bool bAutomaticLogEntry, LibMCEnv_Alert * pAlert);

/**
* finds an alert by UUID. Fails if alert does not exist.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pUUID - UUID of the alert to return.
* @param[out] pAlert - Alert instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_findalert(LibMCEnv_UIEnvironment pUIEnvironment, const char * pUUID, LibMCEnv_Alert * pAlert);

/**
* Checks if a certain alert exists.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pUUID - UUID of the alert to return.
* @param[out] pValue - True if alert exists.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_alertexists(LibMCEnv_UIEnvironment pUIEnvironment, const char * pUUID, bool * pValue);

/**
* Retrieves all or all active alerts.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] bOnlyActive - If true, only active alerts will be returned.
* @param[out] pIteratorInstance - AlertIterator Instance
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_retrievealerts(LibMCEnv_UIEnvironment pUIEnvironment, bool bOnlyActive, LibMCEnv_AlertIterator * pIteratorInstance);

/**
* Retrieves alerts of a certain type identifier.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pIdentifier - Alert Identifier to look for. Fails if empty.
* @param[in] bOnlyActive - If true, only active alerts will be returned.
* @param[out] pIteratorInstance - AlertIterator Instance
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_retrievealertsbytype(LibMCEnv_UIEnvironment pUIEnvironment, const char * pIdentifier, bool bOnlyActive, LibMCEnv_AlertIterator * pIteratorInstance);

/**
* Checks, if an alert of a certain type identifier exists.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pIdentifier - Alert Identifier to look for. Fails if empty.
* @param[in] bOnlyActive - If true, only active alerts will be taken into account.
* @param[out] pHasAlert - Flag, if the alert exists.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_hasalertoftype(LibMCEnv_UIEnvironment pUIEnvironment, const char * pIdentifier, bool bOnlyActive, bool * pHasAlert);

/**
* Creates a crypto context.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[out] pContext - Cryptographic context instance
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_createcryptocontext(LibMCEnv_UIEnvironment pUIEnvironment, LibMCEnv_CryptoContext * pContext);

/**
* Creates a new writer to store temporary data. This data will be attached to the current journal.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pName - Name of the storage stream.
* @param[in] pMIMEType - Mime type of the data.
* @param[out] pTempStreamInstance - Temp stream writer instance
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_createtemporarystream(LibMCEnv_UIEnvironment pUIEnvironment, const char * pName, const char * pMIMEType, LibMCEnv_TempStreamWriter * pTempStreamInstance);

/**
* Creates a new ZIP writer to store temporary data. This data will be attached to the current journal. MIME Type will be application/zip
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pName - Name of the storage stream.
* @param[out] pZIPStreamInstance - ZIP stream writer instance
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_createzipstream(LibMCEnv_UIEnvironment pUIEnvironment, const char * pName, LibMCEnv_ZIPStreamWriter * pZIPStreamInstance);

/**
* Loads a stream in the storage system.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pUUID - UUID of the storage stream.
* @param[in] bMustExist - If true, the call fails if the stream does not exist.
* @param[out] pStreamInstance - Stream Instance. Will return null if not found and MustExists is false.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_loadstream(LibMCEnv_UIEnvironment pUIEnvironment, const char * pUUID, bool bMustExist, LibMCEnv_StreamReader * pStreamInstance);

/**
* Returns the current time as DateTime object instance.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[out] pDateTime - Date Time Instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_getcurrentdatetime(LibMCEnv_UIEnvironment pUIEnvironment, LibMCEnv_DateTime * pDateTime);

/**
* Returns a custom time as DateTime object instance. Fails if the values are not a valid time from January first 1970 to year 1 million.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] nYear - Year. Must be larger or equal than 1970.
* @param[in] nMonth - Month. Must be between 1 and 12.
* @param[in] nDay - Day. Must be between 1 and 31.
* @param[in] nHour - Hour. Must be between 0 and 23.
* @param[in] nMinute - Minute. Must be between 0 and 59.
* @param[in] nSecond - Second. Must be between 0 and 59.
* @param[in] nMicrosecond - Microsecond. Must be between 0 and 999999.
* @param[out] pDateTime - Date Time Instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_getcustomdatetime(LibMCEnv_UIEnvironment pUIEnvironment, LibMCEnv_uint32 nYear, LibMCEnv_uint32 nMonth, LibMCEnv_uint32 nDay, LibMCEnv_uint32 nHour, LibMCEnv_uint32 nMinute, LibMCEnv_uint32 nSecond, LibMCEnv_uint32 nMicrosecond, LibMCEnv_DateTime * pDateTime);

/**
* Returns the startup time of the system as DateTime object instance. All Timer values are counted from there.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[out] pDateTime - Date Time Instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_getstartdatetime(LibMCEnv_UIEnvironment pUIEnvironment, LibMCEnv_DateTime * pDateTime);

/**
* Puts the current request to sleep for a definite amount of time. MUST be used instead of a blocking sleep call.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] nDelay - Milliseconds to sleeps
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_sleep(LibMCEnv_UIEnvironment pUIEnvironment, LibMCEnv_uint32 nDelay);

/*************************************************************************************************************************
 Global functions
**************************************************************************************************************************/

/**
* retrieves the binary version of this library.
*
* @param[out] pMajor - returns the major version of this library
* @param[out] pMinor - returns the minor version of this library
* @param[out] pMicro - returns the micro version of this library
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_getversion(LibMCEnv_uint32 * pMajor, LibMCEnv_uint32 * pMinor, LibMCEnv_uint32 * pMicro);

/**
* Returns the last error recorded on this object
*
* @param[in] pInstance - Instance Handle
* @param[in] nErrorMessageBufferSize - size of the buffer (including trailing 0)
* @param[out] pErrorMessageNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pErrorMessageBuffer -  buffer of Message of the last error, may be NULL
* @param[out] pHasError - Is there a last error to query
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_getlasterror(LibMCEnv_Base pInstance, const LibMCEnv_uint32 nErrorMessageBufferSize, LibMCEnv_uint32* pErrorMessageNeededChars, char * pErrorMessageBuffer, bool * pHasError);

/**
* Releases shared ownership of an Instance
*
* @param[in] pInstance - Instance Handle
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_releaseinstance(LibMCEnv_Base pInstance);

/**
* Acquires shared ownership of an Instance
*
* @param[in] pInstance - Instance Handle
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_acquireinstance(LibMCEnv_Base pInstance);

/**
* Returns the address of the SymbolLookupMethod
*
* @param[out] pSymbolLookupMethod - Address of the SymbolAddressMethod
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_getsymbollookupmethod(LibMCEnv_pvoid * pSymbolLookupMethod);

#ifdef __cplusplus
}
#endif

#endif // __LIBMCENV_HEADER_CPP

