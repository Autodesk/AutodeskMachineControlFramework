/*++

Copyright (C) 2020 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.8.0-develop.

Abstract: This is an autogenerated C++-Header file in order to allow an easy
 use of MC Environment Interface

Interface version: 1.0.0

*/

#ifndef __LIBMCENV_HEADER_CPP
#define __LIBMCENV_HEADER_CPP

#ifdef __LIBMCENV_EXPORTS
#ifdef _WIN32
#define LIBMCENV_DECLSPEC __declspec (dllexport)
#else // _WIN32
#define LIBMCENV_DECLSPEC __attribute__((visibility("default")))
#endif // _WIN32
#else // __LIBMCENV_EXPORTS
#define LIBMCENV_DECLSPEC
#endif // __LIBMCENV_EXPORTS

#include "libmcenv_types.hpp"


#ifdef __cplusplus
extern "C" {
#endif

/*************************************************************************************************************************
 Class definition for Base
**************************************************************************************************************************/

/*************************************************************************************************************************
 Class definition for Iterator
**************************************************************************************************************************/

/**
* Iterates to the next object in the list.
*
* @param[in] pIterator - Iterator instance.
* @param[out] pHasNext - Iterates to the next object in the list.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_iterator_movenext(LibMCEnv_Iterator pIterator, bool * pHasNext);

/**
* Iterates to the previous object in the list.
*
* @param[in] pIterator - Iterator instance.
* @param[out] pHasPrevious - Iterates to the previous object in the list.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_iterator_moveprevious(LibMCEnv_Iterator pIterator, bool * pHasPrevious);

/**
* Returns the object the iterator points at.
*
* @param[in] pIterator - Iterator instance.
* @param[out] pInstance - returns the object instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_iterator_getcurrent(LibMCEnv_Iterator pIterator, LibMCEnv_Base * pInstance);

/**
* Creates a new object iterator with the same object list.
*
* @param[in] pIterator - Iterator instance.
* @param[out] pOutIterator - returns the cloned Iterator instance
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_iterator_clone(LibMCEnv_Iterator pIterator, LibMCEnv_Iterator * pOutIterator);

/**
* Returns the number of resoucres the iterator captures.
*
* @param[in] pIterator - Iterator instance.
* @param[out] pCount - returns the number of objects the iterator captures.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_iterator_count(LibMCEnv_Iterator pIterator, LibMCEnv_uint64 * pCount);

/*************************************************************************************************************************
 Class definition for TestEnvironment
**************************************************************************************************************************/

/**
* Write output file to test directory.
*
* @param[in] pTestEnvironment - TestEnvironment instance.
* @param[in] pOutputName - Output file name. Only alphanumeric characters, point, underscore and hypen are allowed.
* @param[in] nDataBufferSize - Number of elements in buffer
* @param[in] pDataBuffer - uint8 buffer of Test data to write into output directory.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_testenvironment_writetestoutput(LibMCEnv_TestEnvironment pTestEnvironment, const char * pOutputName, LibMCEnv_uint64 nDataBufferSize, const LibMCEnv_uint8 * pDataBuffer);

/*************************************************************************************************************************
 Class definition for ImageData
**************************************************************************************************************************/

/**
* Returns Pixel format of the image.
*
* @param[in] pImageData - ImageData instance.
* @param[out] pPixelFormat - Pixel Format of image
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_imagedata_getpixelformat(LibMCEnv_ImageData pImageData, LibMCEnv::eImagePixelFormat * pPixelFormat);

/**
* Changes Pixel format of the image. Might lose alpha or color information during the process.
*
* @param[in] pImageData - ImageData instance.
* @param[in] ePixelFormat - new Pixel Format of image
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_imagedata_changepixelformat(LibMCEnv_ImageData pImageData, LibMCEnv::eImagePixelFormat ePixelFormat);

/**
* Returns DPI values in X and Y.
*
* @param[in] pImageData - ImageData instance.
* @param[out] pDPIValueX - DPI value in X
* @param[out] pDPIValueY - DPI value in Y
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_imagedata_getdpi(LibMCEnv_ImageData pImageData, LibMCEnv_double * pDPIValueX, LibMCEnv_double * pDPIValueY);

/**
* Sets DPI values in X and Y.
*
* @param[in] pImageData - ImageData instance.
* @param[in] dDPIValueX - new DPI value in X
* @param[in] dDPIValueY - new DPI value in Y
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_imagedata_setdpi(LibMCEnv_ImageData pImageData, LibMCEnv_double dDPIValueX, LibMCEnv_double dDPIValueY);

/**
* Returns image sizes inmm.
*
* @param[in] pImageData - ImageData instance.
* @param[out] pSizeX - Size in X in mm
* @param[out] pSizeY - Size in Y in mm
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_imagedata_getsizeinmm(LibMCEnv_ImageData pImageData, LibMCEnv_double * pSizeX, LibMCEnv_double * pSizeY);

/**
* Returns image pixel sizes.
*
* @param[in] pImageData - ImageData instance.
* @param[out] pPixelSizeX - Number of pixels in X
* @param[out] pPixelSizeY - Number of pixels in Y
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_imagedata_getsizeinpixels(LibMCEnv_ImageData pImageData, LibMCEnv_uint32 * pPixelSizeX, LibMCEnv_uint32 * pPixelSizeY);

/**
* Resizes Image pixel data.
*
* @param[in] pImageData - ImageData instance.
* @param[out] pPixelSizeX - Number of pixels in X
* @param[out] pPixelSizeY - Number of pixels in Y
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_imagedata_resizeimage(LibMCEnv_ImageData pImageData, LibMCEnv_uint32 * pPixelSizeX, LibMCEnv_uint32 * pPixelSizeY);

/**
* Loads a PNG from a binary array. Supports RGB, RGBA and Greyscale images.
*
* @param[in] pImageData - ImageData instance.
* @param[in] nPNGDataBufferSize - Number of elements in buffer
* @param[out] pPNGDataNeededCount - will be filled with the count of the written elements, or needed buffer size.
* @param[out] pPNGDataBuffer - uint8  buffer of PNG Data stream.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_imagedata_loadpng(LibMCEnv_ImageData pImageData, const LibMCEnv_uint64 nPNGDataBufferSize, LibMCEnv_uint64* pPNGDataNeededCount, LibMCEnv_uint8 * pPNGDataBuffer);

/**
* Encodes PNG and stores data stream in image object.
*
* @param[in] pImageData - ImageData instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_imagedata_encodepng(LibMCEnv_ImageData pImageData);

/**
* Retrieves encoded data stream of image object. MUST have been encoded with EncodePNG before.
*
* @param[in] pImageData - ImageData instance.
* @param[in] nPNGDataBufferSize - Number of elements in buffer
* @param[out] pPNGDataNeededCount - will be filled with the count of the written elements, or needed buffer size.
* @param[out] pPNGDataBuffer - uint8  buffer of PNG Data stream.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_imagedata_getencodedpngdata(LibMCEnv_ImageData pImageData, const LibMCEnv_uint64 nPNGDataBufferSize, LibMCEnv_uint64* pPNGDataNeededCount, LibMCEnv_uint8 * pPNGDataBuffer);

/**
* Releases encoded data stream of image object.
*
* @param[in] pImageData - ImageData instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_imagedata_clearencodedpngdata(LibMCEnv_ImageData pImageData);

/**
* Sets all pixels to a single value.
*
* @param[in] pImageData - ImageData instance.
* @param[in] nValue - Pixel value.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_imagedata_clear(LibMCEnv_ImageData pImageData, LibMCEnv_uint32 nValue);

/**
* Returns one pixel of an image.
*
* @param[in] pImageData - ImageData instance.
* @param[in] nX - Pixel coordinate in X
* @param[in] nY - Pixel coordinate in Y
* @param[out] pValue - Pixel value at this position
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_imagedata_getpixel(LibMCEnv_ImageData pImageData, LibMCEnv_uint32 nX, LibMCEnv_uint32 nY, LibMCEnv_uint32 * pValue);

/**
* Sets one pixel of an image.
*
* @param[in] pImageData - ImageData instance.
* @param[in] nX - Pixel coordinate in X
* @param[in] nY - Pixel coordinate in Y
* @param[in] nValue - New Pixel value at this position
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_imagedata_setpixel(LibMCEnv_ImageData pImageData, LibMCEnv_uint32 nX, LibMCEnv_uint32 nY, LibMCEnv_uint32 nValue);

/**
* Returns a subset of an image or the whole image data.
*
* @param[in] pImageData - ImageData instance.
* @param[in] nXMin - Min Pixel coordinate in X. MUST be within image bounds.
* @param[in] nYMin - Min Pixel coordinate in Y. MUST be within image bounds.
* @param[in] nXMax - Max Pixel coordinate in X. MUST be within image bounds. MUST be larger or equal than MinX
* @param[in] nYMax - Max Pixel coordinate in Y. MUST be within image bounds. MUST be larger or equal than MinY
* @param[in] nValueBufferSize - Number of elements in buffer
* @param[out] pValueNeededCount - will be filled with the count of the written elements, or needed buffer size.
* @param[out] pValueBuffer - uint8  buffer of Pixel values of the rectangle, rowwise array. MUST have the exact number of pixels in size and 1, 3 or 4 bytes per pixel, depending on pixel format.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_imagedata_getpixelrange(LibMCEnv_ImageData pImageData, LibMCEnv_uint32 nXMin, LibMCEnv_uint32 nYMin, LibMCEnv_uint32 nXMax, LibMCEnv_uint32 nYMax, const LibMCEnv_uint64 nValueBufferSize, LibMCEnv_uint64* pValueNeededCount, LibMCEnv_uint8 * pValueBuffer);

/**
* Exchanges a subset of an image or the whole image data.
*
* @param[in] pImageData - ImageData instance.
* @param[in] nXMin - Min Pixel coordinate in X. MUST be within image bounds.
* @param[in] nYMin - Min Pixel coordinate in Y. MUST be within image bounds.
* @param[in] nXMax - Max Pixel coordinate in X. MUST be within image bounds. MUST be larger or equal than MinX
* @param[in] nYMax - Max Pixel coordinate in Y. MUST be within image bounds. MUST be larger or equal than MinY
* @param[in] nValueBufferSize - Number of elements in buffer
* @param[in] pValueBuffer - uint8 buffer of New pixel values of the rectangle, rowwise array. MUST have the exact number of pixels in size and 1, 3 or 4 bytes per pixel, depending on pixel format.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_imagedata_setpixelrange(LibMCEnv_ImageData pImageData, LibMCEnv_uint32 nXMin, LibMCEnv_uint32 nYMin, LibMCEnv_uint32 nXMax, LibMCEnv_uint32 nYMax, LibMCEnv_uint64 nValueBufferSize, const LibMCEnv_uint8 * pValueBuffer);

/*************************************************************************************************************************
 Class definition for ToolpathPart
**************************************************************************************************************************/

/**
* Returns Part Name.
*
* @param[in] pToolpathPart - ToolpathPart instance.
* @param[in] nNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNameBuffer -  buffer of Returns toolpath part name., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_toolpathpart_getname(LibMCEnv_ToolpathPart pToolpathPart, const LibMCEnv_uint32 nNameBufferSize, LibMCEnv_uint32* pNameNeededChars, char * pNameBuffer);

/**
* Returns Part UUID.
*
* @param[in] pToolpathPart - ToolpathPart instance.
* @param[in] nUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pUUIDBuffer -  buffer of Returns toolpath part uuid., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_toolpathpart_getuuid(LibMCEnv_ToolpathPart pToolpathPart, const LibMCEnv_uint32 nUUIDBufferSize, LibMCEnv_uint32* pUUIDNeededChars, char * pUUIDBuffer);

/**
* Returns Mesh UUID of the part.
*
* @param[in] pToolpathPart - ToolpathPart instance.
* @param[in] nMeshUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pMeshUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pMeshUUIDBuffer -  buffer of Returns toolpath part mesh uuid., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_toolpathpart_getmeshuuid(LibMCEnv_ToolpathPart pToolpathPart, const LibMCEnv_uint32 nMeshUUIDBufferSize, LibMCEnv_uint32* pMeshUUIDNeededChars, char * pMeshUUIDBuffer);

/**
* Returns Mesh Transform of the part.
*
* @param[in] pToolpathPart - ToolpathPart instance.
* @param[out] pMeshUUID - Returns the mesh transform of the toolpath.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_toolpathpart_gettransform(LibMCEnv_ToolpathPart pToolpathPart, LibMCEnv::sToolpathPartTransform * pMeshUUID);

/*************************************************************************************************************************
 Class definition for ToolpathLayer
**************************************************************************************************************************/

/**
* Retrieves the layerdata's uuid
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[in] nUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pUUIDBuffer -  buffer of Returns the uuid value., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_toolpathlayer_getlayerdatauuid(LibMCEnv_ToolpathLayer pToolpathLayer, const LibMCEnv_uint32 nUUIDBufferSize, LibMCEnv_uint32* pUUIDNeededChars, char * pUUIDBuffer);

/**
* Retrieves the count of segments.
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[out] pCount - Count
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_toolpathlayer_getsegmentcount(LibMCEnv_ToolpathLayer pToolpathLayer, LibMCEnv_uint32 * pCount);

/**
* Retrieves the segment type and point count information .
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[in] nIndex - Index. Must be between 0 and Count - 1.
* @param[out] pType - Segment Type
* @param[out] pPointCount - Point count of segment.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_toolpathlayer_getsegmentinfo(LibMCEnv_ToolpathLayer pToolpathLayer, LibMCEnv_uint32 nIndex, LibMCEnv::eToolpathSegmentType * pType, LibMCEnv_uint32 * pPointCount);

/**
* Retrieves the segment type.
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[in] nIndex - Index. Must be between 0 and Count - 1.
* @param[out] pType - Segment Type
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_toolpathlayer_getsegmenttype(LibMCEnv_ToolpathLayer pToolpathLayer, LibMCEnv_uint32 nIndex, LibMCEnv::eToolpathSegmentType * pType);

/**
* Retrieves the number of points in the segment. For type hatch, the points are taken pairwise.
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[in] nIndex - Index. Must be between 0 and Count - 1.
* @param[out] pHatchCount - Hatch count of segment.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_toolpathlayer_getsegmentpointcount(LibMCEnv_ToolpathLayer pToolpathLayer, LibMCEnv_uint32 nIndex, LibMCEnv_uint32 * pHatchCount);

/**
* Retrieves the number of hatches in the segment (i.e. PointCount / 2). Returns 0 if segment is not of type hatch.
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[in] nIndex - Index. Must be between 0 and Count - 1.
* @param[out] pHatchCount - Hatch count of segment.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_toolpathlayer_getsegmenthatchcount(LibMCEnv_ToolpathLayer pToolpathLayer, LibMCEnv_uint32 nIndex, LibMCEnv_uint32 * pHatchCount);

/**
* Retrieves the assigned segment profile uuid.
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[in] nIndex - Index. Must be between 0 and Count - 1.
* @param[in] nProfileUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pProfileUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pProfileUUIDBuffer -  buffer of Segment Profile UUID, may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_toolpathlayer_getsegmentprofileuuid(LibMCEnv_ToolpathLayer pToolpathLayer, LibMCEnv_uint32 nIndex, const LibMCEnv_uint32 nProfileUUIDBufferSize, LibMCEnv_uint32* pProfileUUIDNeededChars, char * pProfileUUIDBuffer);

/**
* Retrieves an assigned profile custom value.
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[in] nIndex - Index. Must be between 0 and Count - 1.
* @param[in] pValueName - Value Name to query for.
* @param[in] nValueBufferSize - size of the buffer (including trailing 0)
* @param[out] pValueNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pValueBuffer -  buffer of String Value., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_toolpathlayer_getsegmentprofilevalue(LibMCEnv_ToolpathLayer pToolpathLayer, LibMCEnv_uint32 nIndex, const char * pValueName, const LibMCEnv_uint32 nValueBufferSize, LibMCEnv_uint32* pValueNeededChars, char * pValueBuffer);

/**
* Retrieves an assigned profile value of a standard type.
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[in] nIndex - Index. Must be between 0 and Count - 1.
* @param[in] eValueType - Enum to query for. MUST NOT be custom.
* @param[out] pValue - Double Value
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_toolpathlayer_getsegmentprofiletypedvalue(LibMCEnv_ToolpathLayer pToolpathLayer, LibMCEnv_uint32 nIndex, LibMCEnv::eToolpathProfileValueType eValueType, LibMCEnv_double * pValue);

/**
* Retrieves the assigned segment part uuid.
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[in] nIndex - Index. Must be between 0 and Count - 1.
* @param[in] nPartUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pPartUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pPartUUIDBuffer -  buffer of Segment Part UUID, may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_toolpathlayer_getsegmentpartuuid(LibMCEnv_ToolpathLayer pToolpathLayer, LibMCEnv_uint32 nIndex, const LibMCEnv_uint32 nPartUUIDBufferSize, LibMCEnv_uint32* pPartUUIDNeededChars, char * pPartUUIDBuffer);

/**
* Retrieves the assigned segment point list. For type hatch, the points are taken pairwise.
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[in] nIndex - Index. Must be between 0 and Count - 1.
* @param[in] nPointDataBufferSize - Number of elements in buffer
* @param[out] pPointDataNeededCount - will be filled with the count of the written elements, or needed buffer size.
* @param[out] pPointDataBuffer - Position2D  buffer of The point data array. Positions are absolute in units.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_toolpathlayer_getsegmentpointdata(LibMCEnv_ToolpathLayer pToolpathLayer, LibMCEnv_uint32 nIndex, const LibMCEnv_uint64 nPointDataBufferSize, LibMCEnv_uint64* pPointDataNeededCount, LibMCEnv::sPosition2D * pPointDataBuffer);

/**
* Retrieves the assigned segment hatch list. Fails if segment type is not hatch.
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[in] nIndex - Index. Must be between 0 and Count - 1.
* @param[in] nHatchDataBufferSize - Number of elements in buffer
* @param[out] pHatchDataNeededCount - will be filled with the count of the written elements, or needed buffer size.
* @param[out] pHatchDataBuffer - Hatch2D  buffer of The hatch data array. Positions are absolute in units.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_toolpathlayer_getsegmenthatchdata(LibMCEnv_ToolpathLayer pToolpathLayer, LibMCEnv_uint32 nIndex, const LibMCEnv_uint64 nHatchDataBufferSize, LibMCEnv_uint64* pHatchDataNeededCount, LibMCEnv::sHatch2D * pHatchDataBuffer);

/**
* Retrieves the assigned segment point list. For type hatch, the points are taken pairwise.
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[in] nIndex - Index. Must be between 0 and Count - 1.
* @param[in] nPointDataBufferSize - Number of elements in buffer
* @param[out] pPointDataNeededCount - will be filled with the count of the written elements, or needed buffer size.
* @param[out] pPointDataBuffer - FloatPosition2D  buffer of The point data array. Positions are absolute in mm.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_toolpathlayer_getsegmentpointdatainmm(LibMCEnv_ToolpathLayer pToolpathLayer, LibMCEnv_uint32 nIndex, const LibMCEnv_uint64 nPointDataBufferSize, LibMCEnv_uint64* pPointDataNeededCount, LibMCEnv::sFloatPosition2D * pPointDataBuffer);

/**
* Retrieves the assigned segment hatch list. Fails if segment type is not hatch.
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[in] nIndex - Index. Must be between 0 and Count - 1.
* @param[in] nHatchDataBufferSize - Number of elements in buffer
* @param[out] pHatchDataNeededCount - will be filled with the count of the written elements, or needed buffer size.
* @param[out] pHatchDataBuffer - FloatHatch2D  buffer of The hatch data array. Positions are absolute in mm.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_toolpathlayer_getsegmenthatchdatainmm(LibMCEnv_ToolpathLayer pToolpathLayer, LibMCEnv_uint32 nIndex, const LibMCEnv_uint64 nHatchDataBufferSize, LibMCEnv_uint64* pHatchDataNeededCount, LibMCEnv::sFloatHatch2D * pHatchDataBuffer);

/**
* Retrieves the layers Z Value in units.
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[out] pZValue - Z Value of the layer in units.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_toolpathlayer_getzvalue(LibMCEnv_ToolpathLayer pToolpathLayer, LibMCEnv_int32 * pZValue);

/**
* Retrieves the layers Z Value in mm.
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[out] pZValue - Z Value of the layer in mm.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_toolpathlayer_getzvalueinmm(LibMCEnv_ToolpathLayer pToolpathLayer, LibMCEnv_double * pZValue);

/**
* Retrieves the toolpath units in mm.
*
* @param[in] pToolpathLayer - ToolpathLayer instance.
* @param[out] pUnits - Toolpath units.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_toolpathlayer_getunits(LibMCEnv_ToolpathLayer pToolpathLayer, LibMCEnv_double * pUnits);

/*************************************************************************************************************************
 Class definition for ToolpathAccessor
**************************************************************************************************************************/

/**
* Returns Toolpath storage UUID.
*
* @param[in] pToolpathAccessor - ToolpathAccessor instance.
* @param[in] nStorageUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pStorageUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pStorageUUIDBuffer -  buffer of Returns toolpath storage uuid., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_toolpathaccessor_getstorageuuid(LibMCEnv_ToolpathAccessor pToolpathAccessor, const LibMCEnv_uint32 nStorageUUIDBufferSize, LibMCEnv_uint32* pStorageUUIDNeededChars, char * pStorageUUIDBuffer);

/**
* Returns layer count.
*
* @param[in] pToolpathAccessor - ToolpathAccessor instance.
* @param[out] pLayerCount - Returns layer count.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_toolpathaccessor_getlayercount(LibMCEnv_ToolpathAccessor pToolpathAccessor, LibMCEnv_uint32 * pLayerCount);

/**
* Reads and returns a layer object.
*
* @param[in] pToolpathAccessor - ToolpathAccessor instance.
* @param[in] nLayerIndex - Layer Index.
* @param[out] pLayerData - Toolpath layer object.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_toolpathaccessor_loadlayer(LibMCEnv_ToolpathAccessor pToolpathAccessor, LibMCEnv_uint32 nLayerIndex, LibMCEnv_ToolpathLayer * pLayerData);

/**
* Retrieves the toolpath units in mm.
*
* @param[in] pToolpathAccessor - ToolpathAccessor instance.
* @param[out] pUnits - Toolpath units.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_toolpathaccessor_getunits(LibMCEnv_ToolpathAccessor pToolpathAccessor, LibMCEnv_double * pUnits);

/**
* Checks if a metadata value exists for this toolpath model.
*
* @param[in] pToolpathAccessor - ToolpathAccessor instance.
* @param[in] pNameSpace - Namespace of metadata.
* @param[in] pName - Name of metadata.
* @param[out] pExists - Returns if metadata exists.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_toolpathaccessor_hasmetadata(LibMCEnv_ToolpathAccessor pToolpathAccessor, const char * pNameSpace, const char * pName, bool * pExists);

/**
* Returns the value of a metadata for this toolpath model.
*
* @param[in] pToolpathAccessor - ToolpathAccessor instance.
* @param[in] pNameSpace - Namespace of metadata.
* @param[in] pName - Name of metadata.
* @param[in] nMetaDataValueBufferSize - size of the buffer (including trailing 0)
* @param[out] pMetaDataValueNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pMetaDataValueBuffer -  buffer of Returns the value, may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_toolpathaccessor_getmetadatavalue(LibMCEnv_ToolpathAccessor pToolpathAccessor, const char * pNameSpace, const char * pName, const LibMCEnv_uint32 nMetaDataValueBufferSize, LibMCEnv_uint32* pMetaDataValueNeededChars, char * pMetaDataValueBuffer);

/**
* Returns the type of a metadata for this toolpath model.
*
* @param[in] pToolpathAccessor - ToolpathAccessor instance.
* @param[in] pNameSpace - Namespace of metadata.
* @param[in] pName - Name of metadata.
* @param[in] nMetaDataTypeBufferSize - size of the buffer (including trailing 0)
* @param[out] pMetaDataTypeNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pMetaDataTypeBuffer -  buffer of Returns the type, may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_toolpathaccessor_getmetadatatype(LibMCEnv_ToolpathAccessor pToolpathAccessor, const char * pNameSpace, const char * pName, const LibMCEnv_uint32 nMetaDataTypeBufferSize, LibMCEnv_uint32* pMetaDataTypeNeededChars, char * pMetaDataTypeBuffer);

/**
* Retrieves the number of parts in the toolpath.
*
* @param[in] pToolpathAccessor - ToolpathAccessor instance.
* @param[out] pPartCount - Number of parts.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_toolpathaccessor_getpartcount(LibMCEnv_ToolpathAccessor pToolpathAccessor, LibMCEnv_uint32 * pPartCount);

/**
* Retrieves the part information of a toolpath.
*
* @param[in] pToolpathAccessor - ToolpathAccessor instance.
* @param[in] nPartIndex - Index of part. MUST be between 0 and PartCount-1
* @param[out] pPart - Part Instance
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_toolpathaccessor_getpart(LibMCEnv_ToolpathAccessor pToolpathAccessor, LibMCEnv_uint32 nPartIndex, LibMCEnv_ToolpathPart * pPart);

/**
* Finds the part information of a toolpath.
*
* @param[in] pToolpathAccessor - ToolpathAccessor instance.
* @param[in] pPartUUID - UUID of part.
* @param[out] pPart - Part Instance. Returns null if part does not exist.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_toolpathaccessor_findpartbyuuid(LibMCEnv_ToolpathAccessor pToolpathAccessor, const char * pPartUUID, LibMCEnv_ToolpathPart * pPart);

/**
* Retrieves the build height in units.
*
* @param[in] pToolpathAccessor - ToolpathAccessor instance.
* @param[out] pBuildHeight - Build height in units.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_toolpathaccessor_getbuildheightinunits(LibMCEnv_ToolpathAccessor pToolpathAccessor, LibMCEnv_int32 * pBuildHeight);

/**
* Retrieves the layers Z Value in units.
*
* @param[in] pToolpathAccessor - ToolpathAccessor instance.
* @param[in] nLayerIndex - Layer Index to return.
* @param[out] pZValue - Z Value of the layer in units.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_toolpathaccessor_getzvalueinunits(LibMCEnv_ToolpathAccessor pToolpathAccessor, LibMCEnv_uint32 nLayerIndex, LibMCEnv_int32 * pZValue);

/**
* Retrieves the build height in mm.
*
* @param[in] pToolpathAccessor - ToolpathAccessor instance.
* @param[out] pBuildHeight - Build height in mm.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_toolpathaccessor_getbuildheightinmm(LibMCEnv_ToolpathAccessor pToolpathAccessor, LibMCEnv_double * pBuildHeight);

/**
* Retrieves the layers Z Value in mm.
*
* @param[in] pToolpathAccessor - ToolpathAccessor instance.
* @param[in] nLayerIndex - Layer Index to return.
* @param[out] pZValue - Z Value of the layer in mm.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_toolpathaccessor_getzvalueinmm(LibMCEnv_ToolpathAccessor pToolpathAccessor, LibMCEnv_uint32 nLayerIndex, LibMCEnv_double * pZValue);

/*************************************************************************************************************************
 Class definition for Build
**************************************************************************************************************************/

/**
* Returns name of the build.
*
* @param[in] pBuild - Build instance.
* @param[in] nNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNameBuffer -  buffer of Name of the build., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_build_getname(LibMCEnv_Build pBuild, const LibMCEnv_uint32 nNameBufferSize, LibMCEnv_uint32* pNameNeededChars, char * pNameBuffer);

/**
* Returns uuid of the build.
*
* @param[in] pBuild - Build instance.
* @param[in] nBuildUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pBuildUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pBuildUUIDBuffer -  buffer of UUID of the build., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_build_getbuilduuid(LibMCEnv_Build pBuild, const LibMCEnv_uint32 nBuildUUIDBufferSize, LibMCEnv_uint32* pBuildUUIDNeededChars, char * pBuildUUIDBuffer);

/**
* Returns storage uuid of the build.
*
* @param[in] pBuild - Build instance.
* @param[in] nStorageUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pStorageUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pStorageUUIDBuffer -  buffer of Storage UUID of the build., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_build_getstorageuuid(LibMCEnv_Build pBuild, const LibMCEnv_uint32 nStorageUUIDBufferSize, LibMCEnv_uint32* pStorageUUIDNeededChars, char * pStorageUUIDBuffer);

/**
* Returns SHA256 of the build stream.
*
* @param[in] pBuild - Build instance.
* @param[in] nSHA256BufferSize - size of the buffer (including trailing 0)
* @param[out] pSHA256NeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pSHA256Buffer -  buffer of SHA256 of the build stream., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_build_getstoragesha256(LibMCEnv_Build pBuild, const LibMCEnv_uint32 nSHA256BufferSize, LibMCEnv_uint32* pSHA256NeededChars, char * pSHA256Buffer);

/**
* Returns cached layer count of the toolpath.
*
* @param[in] pBuild - Build instance.
* @param[out] pLayerCount - Returns layer count.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_build_getlayercount(LibMCEnv_Build pBuild, LibMCEnv_uint32 * pLayerCount);

/**
* Retrieves the build height in mm.
*
* @param[in] pBuild - Build instance.
* @param[out] pBuildHeight - Build height in mm.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_build_getbuildheightinmm(LibMCEnv_Build pBuild, LibMCEnv_double * pBuildHeight);

/**
* Retrieves the layers Z Value in mm.
*
* @param[in] pBuild - Build instance.
* @param[in] nLayerIndex - Layer Index to return.
* @param[out] pZValue - Z Value of the layer in mm.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_build_getzvalueinmm(LibMCEnv_Build pBuild, LibMCEnv_uint32 nLayerIndex, LibMCEnv_double * pZValue);

/**
* loads the a toolpath into memory
*
* @param[in] pBuild - Build instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_build_loadtoolpath(LibMCEnv_Build pBuild);

/**
* unloads the a toolpath from memory, if it has been loaded before.
*
* @param[in] pBuild - Build instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_build_unloadtoolpath(LibMCEnv_Build pBuild);

/**
* checks, if a toolpath object is loaded to memory.
*
* @param[in] pBuild - Build instance.
* @param[out] pIsLoaded - returns if toolpath is loaded.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_build_toolpathisloaded(LibMCEnv_Build pBuild, bool * pIsLoaded);

/**
* Creates an accessor object for a toolpath. Toolpath MUST have been loaded with LoadToolpath before.
*
* @param[in] pBuild - Build instance.
* @param[out] pToolpathInstance - Toolpath instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_build_createtoolpathaccessor(LibMCEnv_Build pBuild, LibMCEnv_ToolpathAccessor * pToolpathInstance);

/**
* Adds binary data to store with the build.
*
* @param[in] pBuild - Build instance.
* @param[in] pName - Name of the attache data block.
* @param[in] pMIMEType - Mime type of the data.
* @param[in] nContentBufferSize - Number of elements in buffer
* @param[in] pContentBuffer - uint8 buffer of Stream content to store
* @param[in] nDataUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pDataUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pDataUUIDBuffer -  buffer of Data UUID of the attachment., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_build_addbinarydata(LibMCEnv_Build pBuild, const char * pName, const char * pMIMEType, LibMCEnv_uint64 nContentBufferSize, const LibMCEnv_uint8 * pContentBuffer, const LibMCEnv_uint32 nDataUUIDBufferSize, LibMCEnv_uint32* pDataUUIDNeededChars, char * pDataUUIDBuffer);

/*************************************************************************************************************************
 Class definition for WorkingFileExecution
**************************************************************************************************************************/

/**
* Returns the execution status
*
* @param[in] pWorkingFileExecution - WorkingFileExecution instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_workingfileexecution_getstatus(LibMCEnv_WorkingFileExecution pWorkingFileExecution);

/**
* Returns the output of the executable as string buffer
*
* @param[in] pWorkingFileExecution - WorkingFileExecution instance.
* @param[in] nStringBufferBufferSize - size of the buffer (including trailing 0)
* @param[out] pStringBufferNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pStringBufferBuffer -  buffer of stdout buffer, may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_workingfileexecution_returnstdout(LibMCEnv_WorkingFileExecution pWorkingFileExecution, const LibMCEnv_uint32 nStringBufferBufferSize, LibMCEnv_uint32* pStringBufferNeededChars, char * pStringBufferBuffer);

/*************************************************************************************************************************
 Class definition for WorkingFile
**************************************************************************************************************************/

/**
* Retrieves absolute file name of the working file
*
* @param[in] pWorkingFile - WorkingFile instance.
* @param[in] nFileNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pFileNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pFileNameBuffer -  buffer of global path of the file, may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_workingfile_getabsolutefilename(LibMCEnv_WorkingFile pWorkingFile, const LibMCEnv_uint32 nFileNameBufferSize, LibMCEnv_uint32* pFileNameNeededChars, char * pFileNameBuffer);

/**
* Returns the size of temporary file.
*
* @param[in] pWorkingFile - WorkingFile instance.
* @param[out] pFileSize - file size
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_workingfile_getsize(LibMCEnv_WorkingFile pWorkingFile, LibMCEnv_uint64 * pFileSize);

/**
* Calculates the SHA256 checksum of the file.
*
* @param[in] pWorkingFile - WorkingFile instance.
* @param[in] nSHA2BufferSize - size of the buffer (including trailing 0)
* @param[out] pSHA2NeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pSHA2Buffer -  buffer of sha256 checksum, may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_workingfile_calculatesha2(LibMCEnv_WorkingFile pWorkingFile, const LibMCEnv_uint32 nSHA2BufferSize, LibMCEnv_uint32* pSHA2NeededChars, char * pSHA2Buffer);

/**
* Executes the temporary file, if it is an executable.
*
* @param[in] pWorkingFile - WorkingFile instance.
* @param[out] pExecution - execution object
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_workingfile_executefile(LibMCEnv_WorkingFile pWorkingFile, LibMCEnv_WorkingFileExecution * pExecution);

/**
* Returns if the file is managed.
*
* @param[in] pWorkingFile - WorkingFile instance.
* @param[out] pFileIsManaged - returns if the file is managed.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_workingfile_ismanaged(LibMCEnv_WorkingFile pWorkingFile, bool * pFileIsManaged);

/**
* Makes the file managed if it is not managed yet.
*
* @param[in] pWorkingFile - WorkingFile instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_workingfile_makemanaged(LibMCEnv_WorkingFile pWorkingFile);

/**
* Returns if the file exists on disk.
*
* @param[in] pWorkingFile - WorkingFile instance.
* @param[out] pFileDoesExist - returns if the file exists.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_workingfile_fileexists(LibMCEnv_WorkingFile pWorkingFile, bool * pFileDoesExist);

/**
* Deletes the temporary file.
*
* @param[in] pWorkingFile - WorkingFile instance.
* @param[out] pSuccess - returns if deletion was successful or file did not exist in the first place.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_workingfile_deletefromdisk(LibMCEnv_WorkingFile pWorkingFile, bool * pSuccess);

/*************************************************************************************************************************
 Class definition for WorkingFileIterator
**************************************************************************************************************************/

/**
* Returns the working file the iterator points at.
*
* @param[in] pWorkingFileIterator - WorkingFileIterator instance.
* @param[out] pWorkingFile - returns the WorkingFile instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_workingfileiterator_getcurrentfile(LibMCEnv_WorkingFileIterator pWorkingFileIterator, LibMCEnv_WorkingFile * pWorkingFile);

/*************************************************************************************************************************
 Class definition for WorkingDirectory
**************************************************************************************************************************/

/**
* Working directory is active.
*
* @param[in] pWorkingDirectory - WorkingDirectory instance.
* @param[out] pIsActive - returns true if files can be read and written to the directory.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_workingdirectory_isactive(LibMCEnv_WorkingDirectory pWorkingDirectory, bool * pIsActive);

/**
* Retrieves absolute file path.
*
* @param[in] pWorkingDirectory - WorkingDirectory instance.
* @param[in] nFilePathBufferSize - size of the buffer (including trailing 0)
* @param[out] pFilePathNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pFilePathBuffer -  buffer of global path of the directory, including path delimiter., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_workingdirectory_getabsolutefilepath(LibMCEnv_WorkingDirectory pWorkingDirectory, const LibMCEnv_uint32 nFilePathBufferSize, LibMCEnv_uint32* pFilePathNeededChars, char * pFilePathBuffer);

/**
* Stores a data buffer in a temporary file with a given name.
*
* @param[in] pWorkingDirectory - WorkingDirectory instance.
* @param[in] pFileName - filename to store to. Can not include any path delimiters or ..
* @param[in] nDataBufferBufferSize - Number of elements in buffer
* @param[in] pDataBufferBuffer - uint8 buffer of file data to store to.
* @param[out] pWorkingFile - working file instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_workingdirectory_storecustomdata(LibMCEnv_WorkingDirectory pWorkingDirectory, const char * pFileName, LibMCEnv_uint64 nDataBufferBufferSize, const LibMCEnv_uint8 * pDataBufferBuffer, LibMCEnv_WorkingFile * pWorkingFile);

/**
* Stores a string in a temporary file with a given name.
*
* @param[in] pWorkingDirectory - WorkingDirectory instance.
* @param[in] pFileName - filename to store to. Can not include any path delimiters or ..
* @param[in] pDataString - file data to store to.
* @param[out] pWorkingFile - working file instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_workingdirectory_storecustomstring(LibMCEnv_WorkingDirectory pWorkingDirectory, const char * pFileName, const char * pDataString, LibMCEnv_WorkingFile * pWorkingFile);

/**
* Stores attached driver data in a temporary file.
*
* @param[in] pWorkingDirectory - WorkingDirectory instance.
* @param[in] pFileName - filename to store to. Can not include any path delimiters or ..
* @param[in] pIdentifier - identifier of the binary data in the driver package.
* @param[out] pWorkingFile - working file instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_workingdirectory_storedriverdata(LibMCEnv_WorkingDirectory pWorkingDirectory, const char * pFileName, const char * pIdentifier, LibMCEnv_WorkingFile * pWorkingFile);

/**
* Stores a data buffer in a temporary file with a generated name.
*
* @param[in] pWorkingDirectory - WorkingDirectory instance.
* @param[in] pExtension - extension of the file to store. MAY be an empty string. MUST only include up to 64 alphanumeric characters.
* @param[in] nDataBufferBufferSize - Number of elements in buffer
* @param[in] pDataBufferBuffer - uint8 buffer of file data to store to.
* @param[out] pWorkingFile - working file instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_workingdirectory_storecustomdataintempfile(LibMCEnv_WorkingDirectory pWorkingDirectory, const char * pExtension, LibMCEnv_uint64 nDataBufferBufferSize, const LibMCEnv_uint8 * pDataBufferBuffer, LibMCEnv_WorkingFile * pWorkingFile);

/**
* Stores a string in a temporary file.
*
* @param[in] pWorkingDirectory - WorkingDirectory instance.
* @param[in] pExtension - extension of the file to store. MAY be an empty string. MUST only include up to 64 alphanumeric characters.
* @param[in] pDataString - file data to store to.
* @param[out] pWorkingFile - working file instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_workingdirectory_storecustomstringintempfile(LibMCEnv_WorkingDirectory pWorkingDirectory, const char * pExtension, const char * pDataString, LibMCEnv_WorkingFile * pWorkingFile);

/**
* Stores attached driver data in a temporary file.
*
* @param[in] pWorkingDirectory - WorkingDirectory instance.
* @param[in] pExtension - extension of the file to store. MAY be an empty string. MUST only include up to 64 alphanumeric characters.
* @param[in] pIdentifier - identifier of the binary data in the driver package.
* @param[out] pWorkingFile - working file instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_workingdirectory_storedriverdataintempfile(LibMCEnv_WorkingDirectory pWorkingDirectory, const char * pExtension, const char * pIdentifier, LibMCEnv_WorkingFile * pWorkingFile);

/**
* Deletes all managed files in the directory and the directory. No storing is possible after a cleanup.
*
* @param[in] pWorkingDirectory - WorkingDirectory instance.
* @param[out] pSuccess - returns if deletion was successful.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_workingdirectory_cleanup(LibMCEnv_WorkingDirectory pWorkingDirectory, bool * pSuccess);

/**
* Adds a managed filename in the directory (i.e. this file will be deleted at CleanUp). Subdirectories are not allowed.
*
* @param[in] pWorkingDirectory - WorkingDirectory instance.
* @param[in] pFileName - Filename to manage. The file does not need to exist yet.
* @param[out] pWorkingFile - working file instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_workingdirectory_addmanagedfile(LibMCEnv_WorkingDirectory pWorkingDirectory, const char * pFileName, LibMCEnv_WorkingFile * pWorkingFile);

/**
* Returns if the working directory has unmanaged files. A clean implementation will never deal with unmanaged files.
*
* @param[in] pWorkingDirectory - WorkingDirectory instance.
* @param[out] pHasUnmanagedFiles - returns if there are unmanaged files.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_workingdirectory_hasunmanagedfiles(LibMCEnv_WorkingDirectory pWorkingDirectory, bool * pHasUnmanagedFiles);

/**
* Returns a list of unmanaged files.
*
* @param[in] pWorkingDirectory - WorkingDirectory instance.
* @param[out] pIteratorInstance - working file iterator instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_workingdirectory_retrieveunmanagedfiles(LibMCEnv_WorkingDirectory pWorkingDirectory, LibMCEnv_WorkingFileIterator * pIteratorInstance);

/**
* Returns a list of managed files.
*
* @param[in] pWorkingDirectory - WorkingDirectory instance.
* @param[out] pIteratorInstance - working file iterator instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_workingdirectory_retrievemanagedfiles(LibMCEnv_WorkingDirectory pWorkingDirectory, LibMCEnv_WorkingFileIterator * pIteratorInstance);

/**
* Returns a list of all files in the directory.
*
* @param[in] pWorkingDirectory - WorkingDirectory instance.
* @param[out] pIteratorInstance - working file iterator instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_workingdirectory_retrieveallfiles(LibMCEnv_WorkingDirectory pWorkingDirectory, LibMCEnv_WorkingFileIterator * pIteratorInstance);

/*************************************************************************************************************************
 Class definition for XMLDocumentAttribute
**************************************************************************************************************************/

/**
* Retrieves name of the attribute.
*
* @param[in] pXMLDocumentAttribute - XMLDocumentAttribute instance.
* @param[in] nNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNameBuffer -  buffer of returns the name of the attribute., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocumentattribute_getname(LibMCEnv_XMLDocumentAttribute pXMLDocumentAttribute, const LibMCEnv_uint32 nNameBufferSize, LibMCEnv_uint32* pNameNeededChars, char * pNameBuffer);

/**
* Retrieves value of the attribute as string.
*
* @param[in] pXMLDocumentAttribute - XMLDocumentAttribute instance.
* @param[in] nValueBufferSize - size of the buffer (including trailing 0)
* @param[out] pValueNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pValueBuffer -  buffer of returns the value of the attribute., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocumentattribute_getvalue(LibMCEnv_XMLDocumentAttribute pXMLDocumentAttribute, const LibMCEnv_uint32 nValueBufferSize, LibMCEnv_uint32* pValueNeededChars, char * pValueBuffer);

/**
* Checks if the value is a valid integer in the given range.
*
* @param[in] pXMLDocumentAttribute - XMLDocumentAttribute instance.
* @param[in] nMinValue - Minimum allowed value
* @param[in] nMaxValue - Maximum allowed value
* @param[out] pIsValid - returns if the value is a valid integer.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocumentattribute_isvalidinteger(LibMCEnv_XMLDocumentAttribute pXMLDocumentAttribute, LibMCEnv_int64 nMinValue, LibMCEnv_int64 nMaxValue, bool * pIsValid);

/**
* Returns the value as integer. Fails if the value is not a valid integer in the given range.
*
* @param[in] pXMLDocumentAttribute - XMLDocumentAttribute instance.
* @param[in] nMinValue - Minimum allowed value
* @param[in] nMaxValue - Maximum allowed value
* @param[out] pValue - returns the value.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocumentattribute_getintegervalue(LibMCEnv_XMLDocumentAttribute pXMLDocumentAttribute, LibMCEnv_int64 nMinValue, LibMCEnv_int64 nMaxValue, LibMCEnv_int64 * pValue);

/**
* Checks if the value is a valid double in the given range.
*
* @param[in] pXMLDocumentAttribute - XMLDocumentAttribute instance.
* @param[in] dMinValue - Minimum allowed value
* @param[in] dMaxValue - Maximum allowed value
* @param[out] pIsValid - returns if the value is a valid double.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocumentattribute_isvaliddouble(LibMCEnv_XMLDocumentAttribute pXMLDocumentAttribute, LibMCEnv_double dMinValue, LibMCEnv_double dMaxValue, bool * pIsValid);

/**
* Returns the value as double. Fails if the value is not a valid double in the given range.
*
* @param[in] pXMLDocumentAttribute - XMLDocumentAttribute instance.
* @param[in] dMinValue - Minimum allowed value
* @param[in] dMaxValue - Maximum allowed value
* @param[out] pValue - returns the value .
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocumentattribute_getdoublevalue(LibMCEnv_XMLDocumentAttribute pXMLDocumentAttribute, LibMCEnv_double dMinValue, LibMCEnv_double dMaxValue, LibMCEnv_double * pValue);

/**
* Checks if the value is a valid boolean value, meaning an integer or true or false as string. The value will be trimmed and any character will be converted to lowercase.
*
* @param[in] pXMLDocumentAttribute - XMLDocumentAttribute instance.
* @param[out] pIsValid - returns if the value is a valid bool.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocumentattribute_isvalidbool(LibMCEnv_XMLDocumentAttribute pXMLDocumentAttribute, bool * pIsValid);

/**
* Returns the value as bool. Fails if the value is not a valid boolean value, meaning an integer or true or false as string. The value will be trimmed and any character will be converted to lowercase.
*
* @param[in] pXMLDocumentAttribute - XMLDocumentAttribute instance.
* @param[in] dMinValue - Minimum allowed value
* @param[in] dMaxValue - Maximum allowed value
* @param[out] pValue - returns the value .
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocumentattribute_getboolvalue(LibMCEnv_XMLDocumentAttribute pXMLDocumentAttribute, LibMCEnv_double dMinValue, LibMCEnv_double dMaxValue, LibMCEnv_double * pValue);

/**
* Sets the value of the attribute as string.
*
* @param[in] pXMLDocumentAttribute - XMLDocumentAttribute instance.
* @param[in] pValue - new value of the attribute.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocumentattribute_setvalue(LibMCEnv_XMLDocumentAttribute pXMLDocumentAttribute, const char * pValue);

/**
* Sets the value of the attribute as integer.
*
* @param[in] pXMLDocumentAttribute - XMLDocumentAttribute instance.
* @param[in] nValue - new value of the attribute.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocumentattribute_setintegervalue(LibMCEnv_XMLDocumentAttribute pXMLDocumentAttribute, LibMCEnv_int64 nValue);

/**
* Sets the value of the attribute as double.
*
* @param[in] pXMLDocumentAttribute - XMLDocumentAttribute instance.
* @param[in] dValue - new value of the attribute.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocumentattribute_setdoublevalue(LibMCEnv_XMLDocumentAttribute pXMLDocumentAttribute, LibMCEnv_double dValue);

/**
* Sets the value of the attribute as bool.
*
* @param[in] pXMLDocumentAttribute - XMLDocumentAttribute instance.
* @param[in] bValue - new value of the attribute.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocumentattribute_setboolvalue(LibMCEnv_XMLDocumentAttribute pXMLDocumentAttribute, bool bValue);

/**
* Removes the attribute from its parent node. All subsequent calls to the class will fail.
*
* @param[in] pXMLDocumentAttribute - XMLDocumentAttribute instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocumentattribute_remove(LibMCEnv_XMLDocumentAttribute pXMLDocumentAttribute);

/*************************************************************************************************************************
 Class definition for XMLDocumentNode
**************************************************************************************************************************/

/**
* Retrieves name of the node.
*
* @param[in] pXMLDocumentNode - XMLDocumentNode instance.
* @param[in] nNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNameBuffer -  buffer of returns the name of the node., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocumentnode_getname(LibMCEnv_XMLDocumentNode pXMLDocumentNode, const LibMCEnv_uint32 nNameBufferSize, LibMCEnv_uint32* pNameNeededChars, char * pNameBuffer);

/**
* Retrieves namespace of the node.
*
* @param[in] pXMLDocumentNode - XMLDocumentNode instance.
* @param[in] nNameSpaceBufferSize - size of the buffer (including trailing 0)
* @param[out] pNameSpaceNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNameSpaceBuffer -  buffer of returns the namespace of the node., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocumentnode_getnamespace(LibMCEnv_XMLDocumentNode pXMLDocumentNode, const LibMCEnv_uint32 nNameSpaceBufferSize, LibMCEnv_uint32* pNameSpaceNeededChars, char * pNameSpaceBuffer);

/**
* Returns number of attributes.
*
* @param[in] pXMLDocumentNode - XMLDocumentNode instance.
* @param[out] pCount - returns the number of attributes.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocumentnode_getattributecount(LibMCEnv_XMLDocumentNode pXMLDocumentNode, LibMCEnv_uint64 * pCount);

/**
* Returns attribute instance. Fails if Index is out of range.
*
* @param[in] pXMLDocumentNode - XMLDocumentNode instance.
* @param[in] nIndex - Index of the attribute to return (0-based).
* @param[out] pAttributeInstance - XML Document attribute.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocumentnode_getattribute(LibMCEnv_XMLDocumentNode pXMLDocumentNode, LibMCEnv_uint64 nIndex, LibMCEnv_XMLDocumentAttribute * pAttributeInstance);

/**
* Returns if attribute of a specific name exists.
*
* @param[in] pXMLDocumentNode - XMLDocumentNode instance.
* @param[in] pName - Name of the attribute.
* @param[out] pAttributeExists - Returns if the attribute exists.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocumentnode_hasattribute(LibMCEnv_XMLDocumentNode pXMLDocumentNode, const char * pName, bool * pAttributeExists);

/**
* Returns attribute instance of a specific name. 
*
* @param[in] pXMLDocumentNode - XMLDocumentNode instance.
* @param[in] pName - Name of the attribute.
* @param[in] bMustExist - If true, the call fails if attribute does not exist. If falls, the call will return null if the attribute does not exist.
* @param[out] pAttributeInstance - XML Document attribute.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocumentnode_findattribute(LibMCEnv_XMLDocumentNode pXMLDocumentNode, const char * pName, bool bMustExist, LibMCEnv_XMLDocumentAttribute * pAttributeInstance);

/**
* Removes the attribute with a specific name. Does nothing if attribute does not exist.
*
* @param[in] pXMLDocumentNode - XMLDocumentNode instance.
* @param[in] pName - Name of the attribute.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocumentnode_removeattribute(LibMCEnv_XMLDocumentNode pXMLDocumentNode, const char * pName);

/**
* Adds an attribute with a specific name and string value. Fails if attribute already exists.
*
* @param[in] pXMLDocumentNode - XMLDocumentNode instance.
* @param[in] pName - Name of the attribute.
* @param[in] pNameSpace - New namespace of the child. MUST be either an empty string for the root namespace, or previously being registered with the document.
* @param[in] pValue - Value of the attribute.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocumentnode_addattribute(LibMCEnv_XMLDocumentNode pXMLDocumentNode, const char * pName, const char * pNameSpace, const char * pValue);

/**
* Adds an attribute with a specific name and integer value. Fails if attribute already exists.
*
* @param[in] pXMLDocumentNode - XMLDocumentNode instance.
* @param[in] pName - Name of the attribute.
* @param[in] pNameSpace - New namespace of the child. MUST be either an empty string for the root namespace, or previously being registered with the document.
* @param[in] nValue - Value of the attribute.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocumentnode_addintegerattribute(LibMCEnv_XMLDocumentNode pXMLDocumentNode, const char * pName, const char * pNameSpace, LibMCEnv_int64 nValue);

/**
* Adds an attribute with a specific name and double value. Fails if attribute already exists.
*
* @param[in] pXMLDocumentNode - XMLDocumentNode instance.
* @param[in] pName - Name of the attribute.
* @param[in] pNameSpace - New namespace of the child. MUST be either an empty string for the root namespace, or previously being registered with the document.
* @param[in] dValue - Value of the attribute.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocumentnode_adddoubleattribute(LibMCEnv_XMLDocumentNode pXMLDocumentNode, const char * pName, const char * pNameSpace, LibMCEnv_double dValue);

/**
* Adds an attribute with a specific name and bool value. Fails if attribute already exists.
*
* @param[in] pXMLDocumentNode - XMLDocumentNode instance.
* @param[in] pName - Name of the attribute.
* @param[in] pNameSpace - New namespace of the child. MUST be either an empty string for the root namespace, or previously being registered with the document.
* @param[in] bValue - Value of the attribute.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocumentnode_addboolattribute(LibMCEnv_XMLDocumentNode pXMLDocumentNode, const char * pName, const char * pNameSpace, bool bValue);

/**
* Returns all the child nodes of the XML Node.
*
* @param[in] pXMLDocumentNode - XMLDocumentNode instance.
* @param[out] pChildNodes - returns the list of child nodes.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocumentnode_getchildren(LibMCEnv_XMLDocumentNode pXMLDocumentNode, LibMCEnv_XMLDocumentNodes * pChildNodes);

/**
* Returns how many children of the XML Node have a specific name.
*
* @param[in] pXMLDocumentNode - XMLDocumentNode instance.
* @param[in] pName - Name of the node.
* @param[out] pCount - returns the number children with the specified name.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocumentnode_countchildrenbyname(LibMCEnv_XMLDocumentNode pXMLDocumentNode, const char * pName, LibMCEnv_uint64 * pCount);

/**
* Returns all the child nodes of the XML Node with a specific name.
*
* @param[in] pXMLDocumentNode - XMLDocumentNode instance.
* @param[in] pName - Name of the child.
* @param[out] pChildNodes - returns the list of child nodes.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocumentnode_getchildrenbyname(LibMCEnv_XMLDocumentNode pXMLDocumentNode, const char * pName, LibMCEnv_XMLDocumentNodes * pChildNodes);

/**
* Returns if a child with a specific name exist.
*
* @param[in] pXMLDocumentNode - XMLDocumentNode instance.
* @param[in] pName - Name of the child.
* @param[out] pChildExists - returns if a child with a specific name exists.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocumentnode_haschild(LibMCEnv_XMLDocumentNode pXMLDocumentNode, const char * pName, bool * pChildExists);

/**
* Returns if a child with a specific name exist once and only once.
*
* @param[in] pXMLDocumentNode - XMLDocumentNode instance.
* @param[in] pName - Name of the child.
* @param[out] pChildExists - returns if a child with a specific name exists once and only once.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocumentnode_hasuniquechild(LibMCEnv_XMLDocumentNode pXMLDocumentNode, const char * pName, bool * pChildExists);

/**
* Returns child with a specific name. Throws an error if name does not exist once and only once.
*
* @param[in] pXMLDocumentNode - XMLDocumentNode instance.
* @param[in] pName - Name of the child.
* @param[in] bMustExist - If true, the call fails if child does not exist. If falls, the call will return null if the child does not exist.
* @param[out] pChildInstance - returns child instance or null.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocumentnode_findchild(LibMCEnv_XMLDocumentNode pXMLDocumentNode, const char * pName, bool bMustExist, LibMCEnv_XMLDocumentNode * pChildInstance);

/**
* Adds a new child with a specific name.
*
* @param[in] pXMLDocumentNode - XMLDocumentNode instance.
* @param[in] pName - Name of the child.
* @param[in] pNameSpace - New namespace of the child. MUST be either an empty string for the root namespace, or previously being registered with the document.
* @param[out] pChildInstance - returns child instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocumentnode_addchild(LibMCEnv_XMLDocumentNode pXMLDocumentNode, const char * pName, const char * pNameSpace, LibMCEnv_XMLDocumentNode * pChildInstance);

/**
* Removes a child with a specific name. All subsequent calls to the child will fail after the call.
*
* @param[in] pXMLDocumentNode - XMLDocumentNode instance.
* @param[in] pChildInstance - child instance to remove. Fails if given instance is not a child of the node.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocumentnode_removechild(LibMCEnv_XMLDocumentNode pXMLDocumentNode, LibMCEnv_XMLDocumentNode pChildInstance);

/**
* Removes all children with a specific name. Does nothing if no child with the name exists. . All subsequent calls to the deleted children will fail after the call.
*
* @param[in] pXMLDocumentNode - XMLDocumentNode instance.
* @param[in] pName - Name of the children.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocumentnode_removechildrenwithname(LibMCEnv_XMLDocumentNode pXMLDocumentNode, const char * pName);

/**
* Removes the node from its parent. The root node of the document can not be removed.
*
* @param[in] pXMLDocumentNode - XMLDocumentNode instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocumentnode_remove(LibMCEnv_XMLDocumentNode pXMLDocumentNode);

/*************************************************************************************************************************
 Class definition for XMLDocumentNodes
**************************************************************************************************************************/

/**
* Returns number of nodes.
*
* @param[in] pXMLDocumentNodes - XMLDocumentNodes instance.
* @param[out] pCount - returns the number of nodes in the list.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocumentnodes_getnodecount(LibMCEnv_XMLDocumentNodes pXMLDocumentNodes, LibMCEnv_uint64 * pCount);

/**
* Returns node instance. Fails if Index is out of range.
*
* @param[in] pXMLDocumentNodes - XMLDocumentNodes instance.
* @param[in] nIndex - Index of the node to return (0-based).
* @param[out] pNodeInstance - XML Node node.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocumentnodes_getnode(LibMCEnv_XMLDocumentNodes pXMLDocumentNodes, LibMCEnv_uint64 nIndex, LibMCEnv_XMLDocumentNode * pNodeInstance);

/**
* Returns how many nodes of the XML Node have a specific name.
*
* @param[in] pXMLDocumentNodes - XMLDocumentNodes instance.
* @param[in] pName - Name of the node.
* @param[out] pCount - returns the number of nodes with the specified name.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocumentnodes_countnodesbyname(LibMCEnv_XMLDocumentNodes pXMLDocumentNodes, const char * pName, LibMCEnv_uint64 * pCount);

/**
* Returns all the nodes nodes of the XML Node with a specific name.
*
* @param[in] pXMLDocumentNodes - XMLDocumentNodes instance.
* @param[in] pName - Name of the node.
* @param[out] pNodes - returns the list of node nodes.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocumentnodes_getnodesbyname(LibMCEnv_XMLDocumentNodes pXMLDocumentNodes, const char * pName, LibMCEnv_XMLDocumentNodes * pNodes);

/**
* Returns if a node with a specific name exist.
*
* @param[in] pXMLDocumentNodes - XMLDocumentNodes instance.
* @param[in] pName - Name of the node.
* @param[out] pNodeExists - returns if a node with a specific name exists.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocumentnodes_hasnode(LibMCEnv_XMLDocumentNodes pXMLDocumentNodes, const char * pName, bool * pNodeExists);

/**
* Returns if a node with a specific name exist once and only once.
*
* @param[in] pXMLDocumentNodes - XMLDocumentNodes instance.
* @param[in] pName - Name of the node.
* @param[out] pNodeExists - returns if a node with a specific name exists once and only once.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocumentnodes_hasuniquenode(LibMCEnv_XMLDocumentNodes pXMLDocumentNodes, const char * pName, bool * pNodeExists);

/**
* Returns node with a specific name. Throws an error if name does not exist once and only once.
*
* @param[in] pXMLDocumentNodes - XMLDocumentNodes instance.
* @param[in] pName - Name of the node.
* @param[in] bMustExist - If true, the call fails if node does not exist. If falls, the call will return null if the node does not exist.
* @param[out] pNodeInstance - returns node instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocumentnodes_findnode(LibMCEnv_XMLDocumentNodes pXMLDocumentNodes, const char * pName, bool bMustExist, LibMCEnv_XMLDocumentNode * pNodeInstance);

/*************************************************************************************************************************
 Class definition for XMLDocument
**************************************************************************************************************************/

/**
* Returns default name space of the document.
*
* @param[in] pXMLDocument - XMLDocument instance.
* @param[in] nNamespaceBufferSize - size of the buffer (including trailing 0)
* @param[out] pNamespaceNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNamespaceBuffer -  buffer of name space of the document., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocument_getdefaultnamespace(LibMCEnv_XMLDocument pXMLDocument, const LibMCEnv_uint32 nNamespaceBufferSize, LibMCEnv_uint32* pNamespaceNeededChars, char * pNamespaceBuffer);

/**
* Returns the used number of name spaces of the document.
*
* @param[in] pXMLDocument - XMLDocument instance.
* @param[out] pCount - number of registered name spaces of the document.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocument_getnamespacecount(LibMCEnv_XMLDocument pXMLDocument, LibMCEnv_uint64 * pCount);

/**
* Returns a name space of the document. Will fail if index is invalid.
*
* @param[in] pXMLDocument - XMLDocument instance.
* @param[in] nIndex - index of name space. 0-based.
* @param[in] nNamespaceBufferSize - size of the buffer (including trailing 0)
* @param[out] pNamespaceNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNamespaceBuffer -  buffer of name space of the document., may be NULL
* @param[in] nNamespacePrefixBufferSize - size of the buffer (including trailing 0)
* @param[out] pNamespacePrefixNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNamespacePrefixBuffer -  buffer of name space prefix of the document. Empty for root namespace., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocument_getnamespace(LibMCEnv_XMLDocument pXMLDocument, LibMCEnv_uint64 nIndex, const LibMCEnv_uint32 nNamespaceBufferSize, LibMCEnv_uint32* pNamespaceNeededChars, char * pNamespaceBuffer, const LibMCEnv_uint32 nNamespacePrefixBufferSize, LibMCEnv_uint32* pNamespacePrefixNeededChars, char * pNamespacePrefixBuffer);

/**
* Returns if the document has a namespace.
*
* @param[in] pXMLDocument - XMLDocument instance.
* @param[in] pNamespace - Name space name.
* @param[out] pNameSpaceIsRegistered - name space has been registered.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocument_hasnamespace(LibMCEnv_XMLDocument pXMLDocument, const char * pNamespace, bool * pNameSpaceIsRegistered);

/**
* Returns a name space of the document. Will fail if namespace is not registered.
*
* @param[in] pXMLDocument - XMLDocument instance.
* @param[in] pNamespace - name space of the document.
* @param[in] nNamespacePrefixBufferSize - size of the buffer (including trailing 0)
* @param[out] pNamespacePrefixNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNamespacePrefixBuffer -  buffer of name space prefix of the document. Empty for root namespace., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocument_getnamespaceprefix(LibMCEnv_XMLDocument pXMLDocument, const char * pNamespace, const LibMCEnv_uint32 nNamespacePrefixBufferSize, LibMCEnv_uint32* pNamespacePrefixNeededChars, char * pNamespacePrefixBuffer);

/**
* Registers a custom namespace prefix. Given Namespace MUST NOT have been in use before calling this function.
*
* @param[in] pXMLDocument - XMLDocument instance.
* @param[in] pNamespace - name space to register
* @param[in] pNamespacePrefix - name space prefix to use for the namespace. MUST NOT be in use, MUST NOT be an empty string or contain non-alphanumeric characters.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocument_registernamespace(LibMCEnv_XMLDocument pXMLDocument, const char * pNamespace, const char * pNamespacePrefix);

/**
* Returns root node of the document.
*
* @param[in] pXMLDocument - XMLDocument instance.
* @param[out] pRootNode - Root node of the document.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocument_getrootnode(LibMCEnv_XMLDocument pXMLDocument, LibMCEnv_XMLDocumentNode * pRootNode);

/**
* Saves the XML document into a string.
*
* @param[in] pXMLDocument - XMLDocument instance.
* @param[in] bAddLineBreaks - If true, line breaks and indentation will be added to the output string.
* @param[in] nXMLStringBufferSize - size of the buffer (including trailing 0)
* @param[out] pXMLStringNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pXMLStringBuffer -  buffer of String with the XML Content., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_xmldocument_savetostring(LibMCEnv_XMLDocument pXMLDocument, bool bAddLineBreaks, const LibMCEnv_uint32 nXMLStringBufferSize, LibMCEnv_uint32* pXMLStringNeededChars, char * pXMLStringBuffer);

/*************************************************************************************************************************
 Class definition for TCPIPPacket
**************************************************************************************************************************/

/**
* Returns if packet is empty.
*
* @param[in] pTCPIPPacket - TCPIPPacket instance.
* @param[out] pPacketIsEmpty - Flag if packet is empty.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_tcpippacket_isempty(LibMCEnv_TCPIPPacket pTCPIPPacket, bool * pPacketIsEmpty);

/**
* Returns the size of the packet. Returns 0 if packet is empty.
*
* @param[in] pTCPIPPacket - TCPIPPacket instance.
* @param[out] pPacketSize - returns size of packet.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_tcpippacket_getsize(LibMCEnv_TCPIPPacket pTCPIPPacket, LibMCEnv_uint32 * pPacketSize);

/**
* Returns the data of the packet. Fails if packet is empty.
*
* @param[in] pTCPIPPacket - TCPIPPacket instance.
* @param[in] nBufferBufferSize - Number of elements in buffer
* @param[out] pBufferNeededCount - will be filled with the count of the written elements, or needed buffer size.
* @param[out] pBufferBuffer - uint8  buffer of packet data.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_tcpippacket_getdata(LibMCEnv_TCPIPPacket pTCPIPPacket, const LibMCEnv_uint64 nBufferBufferSize, LibMCEnv_uint64* pBufferNeededCount, LibMCEnv_uint8 * pBufferBuffer);

/*************************************************************************************************************************
 Class definition for TCPIPConnection
**************************************************************************************************************************/

/**
* Returns the IP Address of the Connection.
*
* @param[in] pTCPIPConnection - TCPIPConnection instance.
* @param[in] nIPAddressBufferSize - size of the buffer (including trailing 0)
* @param[out] pIPAddressNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pIPAddressBuffer -  buffer of IP Address., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_tcpipconnection_getipaddress(LibMCEnv_TCPIPConnection pTCPIPConnection, const LibMCEnv_uint32 nIPAddressBufferSize, LibMCEnv_uint32* pIPAddressNeededChars, char * pIPAddressBuffer);

/**
* Returns the Port of the Connection.
*
* @param[in] pTCPIPConnection - TCPIPConnection instance.
* @param[out] pPort - Port.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_tcpipconnection_getport(LibMCEnv_TCPIPConnection pTCPIPConnection, LibMCEnv_uint32 * pPort);

/**
* Returns the Timeout of the Connection.
*
* @param[in] pTCPIPConnection - TCPIPConnection instance.
* @param[out] pTimeout - Timeout in milliseconds.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_tcpipconnection_gettimeout(LibMCEnv_TCPIPConnection pTCPIPConnection, LibMCEnv_uint32 * pTimeout);

/**
* Returns if the instance is connected.
*
* @param[in] pTCPIPConnection - TCPIPConnection instance.
* @param[out] pIsConnected - .
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_tcpipconnection_isconnected(LibMCEnv_TCPIPConnection pTCPIPConnection, bool * pIsConnected);

/**
* Disconnects from the Server, if connected.
*
* @param[in] pTCPIPConnection - TCPIPConnection instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_tcpipconnection_disconnect(LibMCEnv_TCPIPConnection pTCPIPConnection);

/**
* Disconnects and Connects to the Server.
*
* @param[in] pTCPIPConnection - TCPIPConnection instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_tcpipconnection_reconnect(LibMCEnv_TCPIPConnection pTCPIPConnection);

/**
* Sends a buffer of bytes to the Server.
*
* @param[in] pTCPIPConnection - TCPIPConnection instance.
* @param[in] nBufferBufferSize - Number of elements in buffer
* @param[in] pBufferBuffer - uint8 buffer of packet payload.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_tcpipconnection_sendbuffer(LibMCEnv_TCPIPConnection pTCPIPConnection, LibMCEnv_uint64 nBufferBufferSize, const LibMCEnv_uint8 * pBufferBuffer);

/**
* Waits for a server packet to arrive.
*
* @param[in] pTCPIPConnection - TCPIPConnection instance.
* @param[in] nTimeOutInMS - timeout in Milliseconds.
* @param[out] pDataAvailable - Flag if a new packet has arrived.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_tcpipconnection_waitfordata(LibMCEnv_TCPIPConnection pTCPIPConnection, LibMCEnv_uint32 nTimeOutInMS, bool * pDataAvailable);

/**
* Receives a fixed length packet. Blocks until expected number of bytes arrives or timeout is hit. Fails if there is a connection error. Returns empty packet if timeout is hit.
*
* @param[in] pTCPIPConnection - TCPIPConnection instance.
* @param[in] nPacketSize - Size of packet to receive. MUST be larger than 0.
* @param[in] nTimeOutInMS - Timeout in Milliseconds.
* @param[out] pPacketInstance - Packet instance. Returns empty packet if timeout is hit
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_tcpipconnection_receivefixedpacket(LibMCEnv_TCPIPConnection pTCPIPConnection, LibMCEnv_uint32 nPacketSize, LibMCEnv_uint32 nTimeOutInMS, LibMCEnv_TCPIPPacket * pPacketInstance);

/**
* Receives data. Fails if there is a connection error. Returns empty packet if timeout is hit.
*
* @param[in] pTCPIPConnection - TCPIPConnection instance.
* @param[in] nDataSize - Size of data to receive.
* @param[in] nTimeOutInMS - timeout in Milliseconds.
* @param[out] pPacketInstance - Packet instance. Size will be between 0 and DataSize.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_tcpipconnection_receivedata(LibMCEnv_TCPIPConnection pTCPIPConnection, LibMCEnv_uint32 nDataSize, LibMCEnv_uint32 nTimeOutInMS, LibMCEnv_TCPIPPacket * pPacketInstance);

/*************************************************************************************************************************
 Class definition for ModbusTCPDigitalIOStatus
**************************************************************************************************************************/

/**
* Returns the number of Digital IOs in the instance.
*
* @param[in] pModbusTCPDigitalIOStatus - ModbusTCPDigitalIOStatus instance.
* @param[out] pCount - Count.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_modbustcpdigitaliostatus_getcount(LibMCEnv_ModbusTCPDigitalIOStatus pModbusTCPDigitalIOStatus, LibMCEnv_uint32 * pCount);

/**
* Returns the base address of Digital IOs in the instance.
*
* @param[in] pModbusTCPDigitalIOStatus - ModbusTCPDigitalIOStatus instance.
* @param[out] pAddress - Base Address.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_modbustcpdigitaliostatus_getbaseaddress(LibMCEnv_ModbusTCPDigitalIOStatus pModbusTCPDigitalIOStatus, LibMCEnv_uint32 * pAddress);

/**
* Returns the cached state of the Digital IO in the instance.
*
* @param[in] pModbusTCPDigitalIOStatus - ModbusTCPDigitalIOStatus instance.
* @param[in] nIndex - Index of IO Value. 0-based.
* @param[out] pState - State Value.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_modbustcpdigitaliostatus_getvalue(LibMCEnv_ModbusTCPDigitalIOStatus pModbusTCPDigitalIOStatus, LibMCEnv_uint32 nIndex, bool * pState);

/**
* Returns all Digital IOs of the instance as byte array.
*
* @param[in] pModbusTCPDigitalIOStatus - ModbusTCPDigitalIOStatus instance.
* @param[in] nStateArrayBufferSize - Number of elements in buffer
* @param[out] pStateArrayNeededCount - will be filled with the count of the written elements, or needed buffer size.
* @param[out] pStateArrayBuffer - uint8  buffer of State Value Array.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_modbustcpdigitaliostatus_getvalues(LibMCEnv_ModbusTCPDigitalIOStatus pModbusTCPDigitalIOStatus, const LibMCEnv_uint64 nStateArrayBufferSize, LibMCEnv_uint64* pStateArrayNeededCount, LibMCEnv_uint8 * pStateArrayBuffer);

/*************************************************************************************************************************
 Class definition for ModbusTCPRegisterStatus
**************************************************************************************************************************/

/**
* Returns the number of registers in the instance.
*
* @param[in] pModbusTCPRegisterStatus - ModbusTCPRegisterStatus instance.
* @param[out] pCount - Count.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_modbustcpregisterstatus_getcount(LibMCEnv_ModbusTCPRegisterStatus pModbusTCPRegisterStatus, LibMCEnv_uint32 * pCount);

/**
* Returns the base address of registers in the instance.
*
* @param[in] pModbusTCPRegisterStatus - ModbusTCPRegisterStatus instance.
* @param[out] pAddress - Base Address.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_modbustcpregisterstatus_getbaseaddress(LibMCEnv_ModbusTCPRegisterStatus pModbusTCPRegisterStatus, LibMCEnv_uint32 * pAddress);

/**
* Returns the cached state of the registers in the instance.
*
* @param[in] pModbusTCPRegisterStatus - ModbusTCPRegisterStatus instance.
* @param[in] nIndex - Index of IO Value. 0-based.
* @param[out] pState - State Value.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_modbustcpregisterstatus_getvalue(LibMCEnv_ModbusTCPRegisterStatus pModbusTCPRegisterStatus, LibMCEnv_uint32 nIndex, LibMCEnv_uint16 * pState);

/**
* Returns all registers of the instance as word array.
*
* @param[in] pModbusTCPRegisterStatus - ModbusTCPRegisterStatus instance.
* @param[in] nStateArrayBufferSize - Number of elements in buffer
* @param[out] pStateArrayNeededCount - will be filled with the count of the written elements, or needed buffer size.
* @param[out] pStateArrayBuffer - uint16  buffer of State Value Array.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_modbustcpregisterstatus_getvalues(LibMCEnv_ModbusTCPRegisterStatus pModbusTCPRegisterStatus, const LibMCEnv_uint64 nStateArrayBufferSize, LibMCEnv_uint64* pStateArrayNeededCount, LibMCEnv_uint16 * pStateArrayBuffer);

/*************************************************************************************************************************
 Class definition for ModbusTCPConnection
**************************************************************************************************************************/

/**
* Returns the IP Address of the Connection.
*
* @param[in] pModbusTCPConnection - ModbusTCPConnection instance.
* @param[in] nIPAddressBufferSize - size of the buffer (including trailing 0)
* @param[out] pIPAddressNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pIPAddressBuffer -  buffer of IP Address., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_modbustcpconnection_getipaddress(LibMCEnv_ModbusTCPConnection pModbusTCPConnection, const LibMCEnv_uint32 nIPAddressBufferSize, LibMCEnv_uint32* pIPAddressNeededChars, char * pIPAddressBuffer);

/**
* Returns the Port of the Connection.
*
* @param[in] pModbusTCPConnection - ModbusTCPConnection instance.
* @param[out] pPort - Port.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_modbustcpconnection_getport(LibMCEnv_ModbusTCPConnection pModbusTCPConnection, LibMCEnv_uint32 * pPort);

/**
* Returns the Timeout of the Connection.
*
* @param[in] pModbusTCPConnection - ModbusTCPConnection instance.
* @param[out] pTimeout - Timeout in milliseconds.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_modbustcpconnection_gettimeout(LibMCEnv_ModbusTCPConnection pModbusTCPConnection, LibMCEnv_uint32 * pTimeout);

/**
* Returns if the instance is connected.
*
* @param[in] pModbusTCPConnection - ModbusTCPConnection instance.
* @param[out] pIsConnected - .
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_modbustcpconnection_isconnected(LibMCEnv_ModbusTCPConnection pModbusTCPConnection, bool * pIsConnected);

/**
* Disconnects from the Server.
*
* @param[in] pModbusTCPConnection - ModbusTCPConnection instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_modbustcpconnection_disconnect(LibMCEnv_ModbusTCPConnection pModbusTCPConnection);

/**
* Disconnects and Connects to the Server.
*
* @param[in] pModbusTCPConnection - ModbusTCPConnection instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_modbustcpconnection_reconnect(LibMCEnv_ModbusTCPConnection pModbusTCPConnection);

/**
* Sends a diagnosis call to the Server.
*
* @param[in] pModbusTCPConnection - ModbusTCPConnection instance.
* @param[in] nSubFunction - Modbus TCP Subfunction ID.
* @param[in] nDataField - Modbus TCP Data Field.
* @param[out] pDataResponse - Modbus TCP Data Response.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_modbustcpconnection_diagnosiscall(LibMCEnv_ModbusTCPConnection pModbusTCPConnection, LibMCEnv_uint16 nSubFunction, LibMCEnv_uint16 nDataField, LibMCEnv_uint16 * pDataResponse);

/**
* Reads coil status of Server.
*
* @param[in] pModbusTCPConnection - ModbusTCPConnection instance.
* @param[in] nStartAddress - Start Address.
* @param[in] nBitCount - Number of coils to read. MUST be larger than 0.
* @param[out] pCoilStatus - Coil status instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_modbustcpconnection_readcoilstatus(LibMCEnv_ModbusTCPConnection pModbusTCPConnection, LibMCEnv_uint32 nStartAddress, LibMCEnv_uint32 nBitCount, LibMCEnv_ModbusTCPDigitalIOStatus * pCoilStatus);

/**
* Reads input status of Server.
*
* @param[in] pModbusTCPConnection - ModbusTCPConnection instance.
* @param[in] nStartAddress - Start Address.
* @param[in] nBitCount - Number of inputs to read. MUST be larger than 0.
* @param[out] pInputStatus - Input status instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_modbustcpconnection_readinputstatus(LibMCEnv_ModbusTCPConnection pModbusTCPConnection, LibMCEnv_uint32 nStartAddress, LibMCEnv_uint32 nBitCount, LibMCEnv_ModbusTCPDigitalIOStatus * pInputStatus);

/**
* Reads holding registers of Server.
*
* @param[in] pModbusTCPConnection - ModbusTCPConnection instance.
* @param[in] nStartAddress - Start Address.
* @param[in] nRegisterCount - Number of registers. MUST be larger than 0.
* @param[out] pRegisterInstance - Holding register instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_modbustcpconnection_readholdingregisters(LibMCEnv_ModbusTCPConnection pModbusTCPConnection, LibMCEnv_uint32 nStartAddress, LibMCEnv_uint32 nRegisterCount, LibMCEnv_ModbusTCPRegisterStatus * pRegisterInstance);

/**
* Reads input registers of Server.
*
* @param[in] pModbusTCPConnection - ModbusTCPConnection instance.
* @param[in] nStartAddress - Start Address.
* @param[in] nRegisterCount - Number of registers. MUST be larger than 0.
* @param[out] pRegisterInstance - Input register instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_modbustcpconnection_readinputregisters(LibMCEnv_ModbusTCPConnection pModbusTCPConnection, LibMCEnv_uint32 nStartAddress, LibMCEnv_uint32 nRegisterCount, LibMCEnv_ModbusTCPRegisterStatus * pRegisterInstance);

/**
* Forces multiple coils on Server.
*
* @param[in] pModbusTCPConnection - ModbusTCPConnection instance.
* @param[in] nStartAddress - Start Address.
* @param[in] nBufferBufferSize - Number of elements in buffer
* @param[in] pBufferBuffer - uint8 buffer of Input coil array. One byte per Input. MUST NOT be empty
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_modbustcpconnection_forcemultiplecoils(LibMCEnv_ModbusTCPConnection pModbusTCPConnection, LibMCEnv_uint32 nStartAddress, LibMCEnv_uint64 nBufferBufferSize, const LibMCEnv_uint8 * pBufferBuffer);

/**
* Forces multiple registers on Server.
*
* @param[in] pModbusTCPConnection - ModbusTCPConnection instance.
* @param[in] nStartAddress - Start Address.
* @param[in] nBufferBufferSize - Number of elements in buffer
* @param[in] pBufferBuffer - uint16 buffer of Input register array. One word per Input. MUST NOT be empty
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_modbustcpconnection_presetmultipleregisters(LibMCEnv_ModbusTCPConnection pModbusTCPConnection, LibMCEnv_uint32 nStartAddress, LibMCEnv_uint64 nBufferBufferSize, const LibMCEnv_uint16 * pBufferBuffer);

/*************************************************************************************************************************
 Class definition for DriverStatusUpdateSession
**************************************************************************************************************************/

/**
* sets a string parameter
*
* @param[in] pDriverStatusUpdateSession - DriverStatusUpdateSession instance.
* @param[in] pParameterName - Parameter Name
* @param[in] pValue - Value to set
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_driverstatusupdatesession_setstringparameter(LibMCEnv_DriverStatusUpdateSession pDriverStatusUpdateSession, const char * pParameterName, const char * pValue);

/**
* sets a uuid parameter
*
* @param[in] pDriverStatusUpdateSession - DriverStatusUpdateSession instance.
* @param[in] pParameterName - Parameter Name
* @param[in] pValue - Value to set
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_driverstatusupdatesession_setuuidparameter(LibMCEnv_DriverStatusUpdateSession pDriverStatusUpdateSession, const char * pParameterName, const char * pValue);

/**
* sets a double parameter
*
* @param[in] pDriverStatusUpdateSession - DriverStatusUpdateSession instance.
* @param[in] pParameterName - Parameter Name
* @param[in] dValue - Value to set
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_driverstatusupdatesession_setdoubleparameter(LibMCEnv_DriverStatusUpdateSession pDriverStatusUpdateSession, const char * pParameterName, LibMCEnv_double dValue);

/**
* sets an int parameter
*
* @param[in] pDriverStatusUpdateSession - DriverStatusUpdateSession instance.
* @param[in] pParameterName - Parameter Name
* @param[in] nValue - Value to set
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_driverstatusupdatesession_setintegerparameter(LibMCEnv_DriverStatusUpdateSession pDriverStatusUpdateSession, const char * pParameterName, LibMCEnv_int64 nValue);

/**
* sets a bool parameter
*
* @param[in] pDriverStatusUpdateSession - DriverStatusUpdateSession instance.
* @param[in] pParameterName - Parameter Name
* @param[in] bValue - Value to set
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_driverstatusupdatesession_setboolparameter(LibMCEnv_DriverStatusUpdateSession pDriverStatusUpdateSession, const char * pParameterName, bool bValue);

/**
* logs a string as message
*
* @param[in] pDriverStatusUpdateSession - DriverStatusUpdateSession instance.
* @param[in] pLogString - String to Log
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_driverstatusupdatesession_logmessage(LibMCEnv_DriverStatusUpdateSession pDriverStatusUpdateSession, const char * pLogString);

/**
* logs a string as warning
*
* @param[in] pDriverStatusUpdateSession - DriverStatusUpdateSession instance.
* @param[in] pLogString - String to Log
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_driverstatusupdatesession_logwarning(LibMCEnv_DriverStatusUpdateSession pDriverStatusUpdateSession, const char * pLogString);

/**
* logs a string as info
*
* @param[in] pDriverStatusUpdateSession - DriverStatusUpdateSession instance.
* @param[in] pLogString - String to Log
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_driverstatusupdatesession_loginfo(LibMCEnv_DriverStatusUpdateSession pDriverStatusUpdateSession, const char * pLogString);

/**
* Sleeps for a definite amount of time.
*
* @param[in] pDriverStatusUpdateSession - DriverStatusUpdateSession instance.
* @param[in] nDelay - Milliseconds to sleep.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_driverstatusupdatesession_sleep(LibMCEnv_DriverStatusUpdateSession pDriverStatusUpdateSession, LibMCEnv_uint32 nDelay);

/*************************************************************************************************************************
 Class definition for DriverEnvironment
**************************************************************************************************************************/

/**
* creates a status update object which can be easily called from an independent thread.
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[out] pUpdateStatusInstance - creates a status update instance
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_driverenvironment_createstatusupdatesession(LibMCEnv_DriverEnvironment pDriverEnvironment, LibMCEnv_DriverStatusUpdateSession * pUpdateStatusInstance);

/**
* creates a temporary working directory.
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[out] pWorkingDirectory - creates a working directory
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_driverenvironment_createworkingdirectory(LibMCEnv_DriverEnvironment pDriverEnvironment, LibMCEnv_WorkingDirectory * pWorkingDirectory);

/**
* creates a TCP/IP Connection for a specific IP address and port.
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] pIPAddress - IP Address.
* @param[in] nPort - Port.
* @param[in] nTimeOutInMS - timeout in Milliseconds.
* @param[out] pConnectionInstance - connects to the given IP Address
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_driverenvironment_createtcpipconnection(LibMCEnv_DriverEnvironment pDriverEnvironment, const char * pIPAddress, LibMCEnv_uint32 nPort, LibMCEnv_uint32 nTimeOutInMS, LibMCEnv_TCPIPConnection * pConnectionInstance);

/**
* creates a Modbus TCP Connection for a specific IP address and port.
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] pIPAddress - IP Address.
* @param[in] nPort - Port.
* @param[in] nTimeOutInMS - timeout in Milliseconds.
* @param[out] pConnectionInstance - connects to the given IP Address
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_driverenvironment_createmodbustcpconnection(LibMCEnv_DriverEnvironment pDriverEnvironment, const char * pIPAddress, LibMCEnv_uint32 nPort, LibMCEnv_uint32 nTimeOutInMS, LibMCEnv_ModbusTCPConnection * pConnectionInstance);

/**
* creates an empty XML Document.
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] pRootNodeName - Name of the root node. MUST be a valid XML Node Name string.
* @param[in] pDefaultNamespace - Default namespace of the document. MUST be a valid XML namespace string.
* @param[out] pXMLDocument - XML Document Instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_driverenvironment_createxmldocument(LibMCEnv_DriverEnvironment pDriverEnvironment, const char * pRootNodeName, const char * pDefaultNamespace, LibMCEnv_XMLDocument * pXMLDocument);

/**
* parses an XML String and returns an XML Document instance. Throws an error if XML is malformatted.
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] pXMLString - XML String.
* @param[out] pXMLDocument - XML Document Instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_driverenvironment_parsexmlstring(LibMCEnv_DriverEnvironment pDriverEnvironment, const char * pXMLString, LibMCEnv_XMLDocument * pXMLDocument);

/**
* parses a XML stored in a byte array and returns an XML Document instance. . Throws an error if XML is malformatted.
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] nXMLDataBufferSize - Number of elements in buffer
* @param[in] pXMLDataBuffer - uint8 buffer of XML Binary data.
* @param[out] pXMLDocument - XML Document Instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_driverenvironment_parsexmldata(LibMCEnv_DriverEnvironment pDriverEnvironment, LibMCEnv_uint64 nXMLDataBufferSize, const LibMCEnv_uint8 * pXMLDataBuffer, LibMCEnv_XMLDocument * pXMLDocument);

/**
* retrieves if attached driver has data with the given identifier.
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] pIdentifier - identifier of the binary data in the driver package.
* @param[out] pHasResourceData - returns true if the resource exists in the machine resource package.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_driverenvironment_driverhasresourcedata(LibMCEnv_DriverEnvironment pDriverEnvironment, const char * pIdentifier, bool * pHasResourceData);

/**
* retrieves if attached driver has data with the given identifier.
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] pIdentifier - identifier of the binary data in the driver package.
* @param[out] pHasResourceData - returns true if the resource exists in the machine resource package.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_driverenvironment_machinehasresourcedata(LibMCEnv_DriverEnvironment pDriverEnvironment, const char * pIdentifier, bool * pHasResourceData);

/**
* retrieves attached driver resource data into a memory buffer. (depreciated, equivalent to RetrieveDriverResourceData)
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] pIdentifier - identifier of the binary data in the driver package.
* @param[in] nDataBufferBufferSize - Number of elements in buffer
* @param[out] pDataBufferNeededCount - will be filled with the count of the written elements, or needed buffer size.
* @param[out] pDataBufferBuffer - uint8  buffer of buffer data.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_driverenvironment_retrievedriverdata(LibMCEnv_DriverEnvironment pDriverEnvironment, const char * pIdentifier, const LibMCEnv_uint64 nDataBufferBufferSize, LibMCEnv_uint64* pDataBufferNeededCount, LibMCEnv_uint8 * pDataBufferBuffer);

/**
* retrieves attached driver resource data into a memory buffer.
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] pIdentifier - identifier of the binary data in the driver package.
* @param[in] nDataBufferBufferSize - Number of elements in buffer
* @param[out] pDataBufferNeededCount - will be filled with the count of the written elements, or needed buffer size.
* @param[out] pDataBufferBuffer - uint8  buffer of buffer data.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_driverenvironment_retrievedriverresourcedata(LibMCEnv_DriverEnvironment pDriverEnvironment, const char * pIdentifier, const LibMCEnv_uint64 nDataBufferBufferSize, LibMCEnv_uint64* pDataBufferNeededCount, LibMCEnv_uint8 * pDataBufferBuffer);

/**
* retrieves a machine resource data (Plugins Directory) driver data into a memory buffer.
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] pIdentifier - identifier of the binary data in the machine resource package.
* @param[in] nDataBufferBufferSize - Number of elements in buffer
* @param[out] pDataBufferNeededCount - will be filled with the count of the written elements, or needed buffer size.
* @param[out] pDataBufferBuffer - uint8  buffer of buffer data.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_driverenvironment_retrievemachineresourcedata(LibMCEnv_DriverEnvironment pDriverEnvironment, const char * pIdentifier, const LibMCEnv_uint64 nDataBufferBufferSize, LibMCEnv_uint64* pDataBufferNeededCount, LibMCEnv_uint8 * pDataBufferBuffer);

/**
* Creates an accessor object for a toolpath. Toolpath MUST have been loaded into memory before.
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] pStreamUUID - UUID of the stream.
* @param[out] pToolpathInstance - Toolpath instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_driverenvironment_createtoolpathaccessor(LibMCEnv_DriverEnvironment pDriverEnvironment, const char * pStreamUUID, LibMCEnv_ToolpathAccessor * pToolpathInstance);

/**
* checks if a name is a valid alphanumerical string for parameters.
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] pParameterName - Parameter Name
* @param[out] pNameIsValid - returns true if the parameter name is a valid name.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_driverenvironment_parameternameisvalid(LibMCEnv_DriverEnvironment pDriverEnvironment, const char * pParameterName, bool * pNameIsValid);

/**
* registers a string parameter. Must only be called during driver creation.
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] pParameterName - Parameter Name
* @param[in] pDescription - Parameter Description
* @param[in] pDefaultValue - default value to set
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_driverenvironment_registerstringparameter(LibMCEnv_DriverEnvironment pDriverEnvironment, const char * pParameterName, const char * pDescription, const char * pDefaultValue);

/**
* registers a uuid parameter. Must only be called during driver creation.
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] pParameterName - Parameter Name
* @param[in] pDescription - Parameter Description
* @param[in] pDefaultValue - default value to set
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_driverenvironment_registeruuidparameter(LibMCEnv_DriverEnvironment pDriverEnvironment, const char * pParameterName, const char * pDescription, const char * pDefaultValue);

/**
* registers a double parameter. Must only be called during driver creation.
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] pParameterName - Parameter Name
* @param[in] pDescription - Parameter Description
* @param[in] dDefaultValue - default value to set
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_driverenvironment_registerdoubleparameter(LibMCEnv_DriverEnvironment pDriverEnvironment, const char * pParameterName, const char * pDescription, LibMCEnv_double dDefaultValue);

/**
* registers an int parameter. Must only be called during driver creation.
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] pParameterName - Parameter Name
* @param[in] pDescription - Parameter Description
* @param[in] nDefaultValue - default value to set
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_driverenvironment_registerintegerparameter(LibMCEnv_DriverEnvironment pDriverEnvironment, const char * pParameterName, const char * pDescription, LibMCEnv_int64 nDefaultValue);

/**
* registers a bool parameter. Must only be called during driver creation.
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] pParameterName - Parameter Name
* @param[in] pDescription - Parameter Description
* @param[in] bDefaultValue - default value to set
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_driverenvironment_registerboolparameter(LibMCEnv_DriverEnvironment pDriverEnvironment, const char * pParameterName, const char * pDescription, bool bDefaultValue);

/**
* sets a string parameter
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] pParameterName - Parameter Name
* @param[in] pValue - Value to set
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_driverenvironment_setstringparameter(LibMCEnv_DriverEnvironment pDriverEnvironment, const char * pParameterName, const char * pValue);

/**
* sets a uuid parameter
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] pParameterName - Parameter Name
* @param[in] pValue - Value to set
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_driverenvironment_setuuidparameter(LibMCEnv_DriverEnvironment pDriverEnvironment, const char * pParameterName, const char * pValue);

/**
* sets a double parameter
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] pParameterName - Parameter Name
* @param[in] dValue - Value to set
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_driverenvironment_setdoubleparameter(LibMCEnv_DriverEnvironment pDriverEnvironment, const char * pParameterName, LibMCEnv_double dValue);

/**
* sets an int parameter
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] pParameterName - Parameter Name
* @param[in] nValue - Value to set
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_driverenvironment_setintegerparameter(LibMCEnv_DriverEnvironment pDriverEnvironment, const char * pParameterName, LibMCEnv_int64 nValue);

/**
* sets a bool parameter
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] pParameterName - Parameter Name
* @param[in] bValue - Value to set
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_driverenvironment_setboolparameter(LibMCEnv_DriverEnvironment pDriverEnvironment, const char * pParameterName, bool bValue);

/**
* Puts the current instance to sleep for a definite amount of time. MUST be used instead of a blocking sleep call.
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] nDelay - Milliseconds to sleeps
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_driverenvironment_sleep(LibMCEnv_DriverEnvironment pDriverEnvironment, LibMCEnv_uint32 nDelay);

/**
* Returns the global timer in milliseconds.
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[out] pTimerValue - Timer value in Milliseconds
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_driverenvironment_getglobaltimerinmilliseconds(LibMCEnv_DriverEnvironment pDriverEnvironment, LibMCEnv_uint64 * pTimerValue);

/**
* logs a string as message
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] pLogString - String to Log
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_driverenvironment_logmessage(LibMCEnv_DriverEnvironment pDriverEnvironment, const char * pLogString);

/**
* logs a string as warning
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] pLogString - String to Log
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_driverenvironment_logwarning(LibMCEnv_DriverEnvironment pDriverEnvironment, const char * pLogString);

/**
* logs a string as info
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] pLogString - String to Log
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_driverenvironment_loginfo(LibMCEnv_DriverEnvironment pDriverEnvironment, const char * pLogString);

/**
* creates an empty image object.
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] nPixelSizeX - Pixel size in X. MUST be positive.
* @param[in] nPixelSizeY - Pixel size in Y. MUST be positive.
* @param[in] dDPIValueX - DPI Value in X. MUST be positive.
* @param[in] dDPIValueY - DPI Value in Y. MUST be positive.
* @param[in] ePixelFormat - Pixel format to use.
* @param[out] pImageDataInstance - Empty image instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_driverenvironment_createemptyimage(LibMCEnv_DriverEnvironment pDriverEnvironment, LibMCEnv_uint32 nPixelSizeX, LibMCEnv_uint32 nPixelSizeY, LibMCEnv_double dDPIValueX, LibMCEnv_double dDPIValueY, LibMCEnv::eImagePixelFormat ePixelFormat, LibMCEnv_ImageData * pImageDataInstance);

/**
* creates an image object from a PNG data stream.
*
* @param[in] pDriverEnvironment - DriverEnvironment instance.
* @param[in] nPNGDataBufferSize - Number of elements in buffer
* @param[in] pPNGDataBuffer - uint8 buffer of DPI Value in X. MUST be positive.
* @param[in] dDPIValueX - DPI Value in X. MUST be positive.
* @param[in] dDPIValueY - DPI Value in Y. MUST be positive.
* @param[in] ePixelFormat - Pixel format to use. Might lose color and alpha information.
* @param[out] pImageDataInstance - Image instance containing the PNG image.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_driverenvironment_loadpngimage(LibMCEnv_DriverEnvironment pDriverEnvironment, LibMCEnv_uint64 nPNGDataBufferSize, const LibMCEnv_uint8 * pPNGDataBuffer, LibMCEnv_double dDPIValueX, LibMCEnv_double dDPIValueY, LibMCEnv::eImagePixelFormat ePixelFormat, LibMCEnv_ImageData * pImageDataInstance);

/*************************************************************************************************************************
 Class definition for SignalTrigger
**************************************************************************************************************************/

/**
* Returns, if signal channel is available.
*
* @param[in] pSignalTrigger - SignalTrigger instance.
* @param[out] pChannelIsAvailable - Returns true, if signal channel is available.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_signaltrigger_cantrigger(LibMCEnv_SignalTrigger pSignalTrigger, bool * pChannelIsAvailable);

/**
* Triggers a signal, if signal channel is available.
*
* @param[in] pSignalTrigger - SignalTrigger instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_signaltrigger_trigger(LibMCEnv_SignalTrigger pSignalTrigger);

/**
* Waits until the signal is reset.
*
* @param[in] pSignalTrigger - SignalTrigger instance.
* @param[in] nTimeOut - Timeout in Milliseconds. 0 for Immediate return.
* @param[out] pSuccess - Flag if signal handling has been handled.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_signaltrigger_waitforhandling(LibMCEnv_SignalTrigger pSignalTrigger, LibMCEnv_uint32 nTimeOut, bool * pSuccess);

/**
* Returns the signal name.
*
* @param[in] pSignalTrigger - SignalTrigger instance.
* @param[in] nSignalNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pSignalNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pSignalNameBuffer -  buffer of Name Of Signal, may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_signaltrigger_getname(LibMCEnv_SignalTrigger pSignalTrigger, const LibMCEnv_uint32 nSignalNameBufferSize, LibMCEnv_uint32* pSignalNameNeededChars, char * pSignalNameBuffer);

/**
* Returns the signal state machine instance.
*
* @param[in] pSignalTrigger - SignalTrigger instance.
* @param[in] nStateMachineNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pStateMachineNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pStateMachineNameBuffer -  buffer of Name Of State Machine, may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_signaltrigger_getstatemachine(LibMCEnv_SignalTrigger pSignalTrigger, const LibMCEnv_uint32 nStateMachineNameBufferSize, LibMCEnv_uint32* pStateMachineNameNeededChars, char * pStateMachineNameBuffer);

/**
* sets a string value
*
* @param[in] pSignalTrigger - SignalTrigger instance.
* @param[in] pName - Name
* @param[in] pValue - Value
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_signaltrigger_setstring(LibMCEnv_SignalTrigger pSignalTrigger, const char * pName, const char * pValue);

/**
* sets a uuid value
*
* @param[in] pSignalTrigger - SignalTrigger instance.
* @param[in] pName - Name
* @param[in] pValue - Value
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_signaltrigger_setuuid(LibMCEnv_SignalTrigger pSignalTrigger, const char * pName, const char * pValue);

/**
* sets a double
*
* @param[in] pSignalTrigger - SignalTrigger instance.
* @param[in] pName - Name
* @param[in] dValue - Value
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_signaltrigger_setdouble(LibMCEnv_SignalTrigger pSignalTrigger, const char * pName, LibMCEnv_double dValue);

/**
* sets an int.
*
* @param[in] pSignalTrigger - SignalTrigger instance.
* @param[in] pName - Name
* @param[in] nValue - Value
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_signaltrigger_setinteger(LibMCEnv_SignalTrigger pSignalTrigger, const char * pName, LibMCEnv_int64 nValue);

/**
* sets a bool
*
* @param[in] pSignalTrigger - SignalTrigger instance.
* @param[in] pName - Name
* @param[in] bValue - Value
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_signaltrigger_setbool(LibMCEnv_SignalTrigger pSignalTrigger, const char * pName, bool bValue);

/**
* returns a string value of the result
*
* @param[in] pSignalTrigger - SignalTrigger instance.
* @param[in] pName - Name
* @param[in] nValueBufferSize - size of the buffer (including trailing 0)
* @param[out] pValueNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pValueBuffer -  buffer of Value, may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_signaltrigger_getstringresult(LibMCEnv_SignalTrigger pSignalTrigger, const char * pName, const LibMCEnv_uint32 nValueBufferSize, LibMCEnv_uint32* pValueNeededChars, char * pValueBuffer);

/**
* returns a uuid value of the result
*
* @param[in] pSignalTrigger - SignalTrigger instance.
* @param[in] pName - Name
* @param[in] nValueBufferSize - size of the buffer (including trailing 0)
* @param[out] pValueNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pValueBuffer -  buffer of Value, may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_signaltrigger_getuuidresult(LibMCEnv_SignalTrigger pSignalTrigger, const char * pName, const LibMCEnv_uint32 nValueBufferSize, LibMCEnv_uint32* pValueNeededChars, char * pValueBuffer);

/**
* returns a string value of the result
*
* @param[in] pSignalTrigger - SignalTrigger instance.
* @param[in] pName - Name
* @param[out] pValue - Value
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_signaltrigger_getdoubleresult(LibMCEnv_SignalTrigger pSignalTrigger, const char * pName, LibMCEnv_double * pValue);

/**
* returns an int value of the result.
*
* @param[in] pSignalTrigger - SignalTrigger instance.
* @param[in] pName - Name
* @param[out] pValue - Value
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_signaltrigger_getintegerresult(LibMCEnv_SignalTrigger pSignalTrigger, const char * pName, LibMCEnv_int64 * pValue);

/**
* returns a bool value of the result.
*
* @param[in] pSignalTrigger - SignalTrigger instance.
* @param[in] pName - Name
* @param[out] pValue - Value
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_signaltrigger_getboolresult(LibMCEnv_SignalTrigger pSignalTrigger, const char * pName, bool * pValue);

/*************************************************************************************************************************
 Class definition for SignalHandler
**************************************************************************************************************************/

/**
* Marks signal as handled and resets signal channel.
*
* @param[in] pSignalHandler - SignalHandler instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_signalhandler_signalhandled(LibMCEnv_SignalHandler pSignalHandler);

/**
* Returns the signal name.
*
* @param[in] pSignalHandler - SignalHandler instance.
* @param[in] nSignalNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pSignalNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pSignalNameBuffer -  buffer of Name Of Signal, may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_signalhandler_getname(LibMCEnv_SignalHandler pSignalHandler, const LibMCEnv_uint32 nSignalNameBufferSize, LibMCEnv_uint32* pSignalNameNeededChars, char * pSignalNameBuffer);

/**
* Returns the signal id. Depreciated.
*
* @param[in] pSignalHandler - SignalHandler instance.
* @param[in] nSignalIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pSignalIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pSignalIDBuffer -  buffer of Signal Identifier, may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_signalhandler_getsignalid(LibMCEnv_SignalHandler pSignalHandler, const LibMCEnv_uint32 nSignalIDBufferSize, LibMCEnv_uint32* pSignalIDNeededChars, char * pSignalIDBuffer);

/**
* Returns the signal uuid. Identical to GetSignalID.
*
* @param[in] pSignalHandler - SignalHandler instance.
* @param[in] nSignalUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pSignalUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pSignalUUIDBuffer -  buffer of Signal Identifier, may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_signalhandler_getsignaluuid(LibMCEnv_SignalHandler pSignalHandler, const LibMCEnv_uint32 nSignalUUIDBufferSize, LibMCEnv_uint32* pSignalUUIDNeededChars, char * pSignalUUIDBuffer);

/**
* Returns the signal state machine instance.
*
* @param[in] pSignalHandler - SignalHandler instance.
* @param[in] nStateMachineNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pStateMachineNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pStateMachineNameBuffer -  buffer of Name Of State Machine, may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_signalhandler_getstatemachine(LibMCEnv_SignalHandler pSignalHandler, const LibMCEnv_uint32 nStateMachineNameBufferSize, LibMCEnv_uint32* pStateMachineNameNeededChars, char * pStateMachineNameBuffer);

/**
* gets a string value
*
* @param[in] pSignalHandler - SignalHandler instance.
* @param[in] pName - Name
* @param[in] nValueBufferSize - size of the buffer (including trailing 0)
* @param[out] pValueNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pValueBuffer -  buffer of Value, may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_signalhandler_getstring(LibMCEnv_SignalHandler pSignalHandler, const char * pName, const LibMCEnv_uint32 nValueBufferSize, LibMCEnv_uint32* pValueNeededChars, char * pValueBuffer);

/**
* gets a uuid value
*
* @param[in] pSignalHandler - SignalHandler instance.
* @param[in] pName - Name
* @param[in] nValueBufferSize - size of the buffer (including trailing 0)
* @param[out] pValueNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pValueBuffer -  buffer of Value, may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_signalhandler_getuuid(LibMCEnv_SignalHandler pSignalHandler, const char * pName, const LibMCEnv_uint32 nValueBufferSize, LibMCEnv_uint32* pValueNeededChars, char * pValueBuffer);

/**
* gets a double
*
* @param[in] pSignalHandler - SignalHandler instance.
* @param[in] pName - Name
* @param[out] pValue - Value
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_signalhandler_getdouble(LibMCEnv_SignalHandler pSignalHandler, const char * pName, LibMCEnv_double * pValue);

/**
* gets an int.
*
* @param[in] pSignalHandler - SignalHandler instance.
* @param[in] pName - Name
* @param[out] pValue - Value
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_signalhandler_getinteger(LibMCEnv_SignalHandler pSignalHandler, const char * pName, LibMCEnv_int64 * pValue);

/**
* gets a bool
*
* @param[in] pSignalHandler - SignalHandler instance.
* @param[in] pName - Name
* @param[out] pValue - Value
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_signalhandler_getbool(LibMCEnv_SignalHandler pSignalHandler, const char * pName, bool * pValue);

/**
* returns a string value of the result
*
* @param[in] pSignalHandler - SignalHandler instance.
* @param[in] pName - Name
* @param[in] pValue - Value
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_signalhandler_setstringresult(LibMCEnv_SignalHandler pSignalHandler, const char * pName, const char * pValue);

/**
* returns a uuid value of the result
*
* @param[in] pSignalHandler - SignalHandler instance.
* @param[in] pName - Name
* @param[in] pValue - Value
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_signalhandler_setuuidresult(LibMCEnv_SignalHandler pSignalHandler, const char * pName, const char * pValue);

/**
* returns a string value of the result
*
* @param[in] pSignalHandler - SignalHandler instance.
* @param[in] pName - Name
* @param[in] dValue - Value
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_signalhandler_setdoubleresult(LibMCEnv_SignalHandler pSignalHandler, const char * pName, LibMCEnv_double dValue);

/**
* sets an int.
*
* @param[in] pSignalHandler - SignalHandler instance.
* @param[in] pName - Name
* @param[in] nValue - Value
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_signalhandler_setintegerresult(LibMCEnv_SignalHandler pSignalHandler, const char * pName, LibMCEnv_int64 nValue);

/**
* sets a bool
*
* @param[in] pSignalHandler - SignalHandler instance.
* @param[in] pName - Name
* @param[in] bValue - Value
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_signalhandler_setboolresult(LibMCEnv_SignalHandler pSignalHandler, const char * pName, bool bValue);

/*************************************************************************************************************************
 Class definition for StateEnvironment
**************************************************************************************************************************/

/**
* Retrieves the machine state
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pMachineInstance - State machine instance name
* @param[in] nStateNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pStateNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pStateNameBuffer -  buffer of Name of current state, may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_getmachinestate(LibMCEnv_StateEnvironment pStateEnvironment, const char * pMachineInstance, const LibMCEnv_uint32 nStateNameBufferSize, LibMCEnv_uint32* pStateNameNeededChars, char * pStateNameBuffer);

/**
* prepares a signal object to trigger later.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pMachineInstance - State machine instance name
* @param[in] pSignalName - Name Of signal channel.
* @param[out] pSignalInstance - Signal trigger object.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_preparesignal(LibMCEnv_StateEnvironment pStateEnvironment, const char * pMachineInstance, const char * pSignalName, LibMCEnv_SignalTrigger * pSignalInstance);

/**
* Waits for a signal for a certain amount of time.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pSignalName - Name Of Signal
* @param[in] nTimeOut - Timeout in Milliseconds. 0 for Immediate return.
* @param[out] pHandlerInstance - Signal object. If Success is false, the Signal Handler Object will be null.
* @param[out] pSuccess - Signal has been triggered
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_waitforsignal(LibMCEnv_StateEnvironment pStateEnvironment, const char * pSignalName, LibMCEnv_uint32 nTimeOut, LibMCEnv_SignalHandler * pHandlerInstance, bool * pSuccess);

/**
* Retrieves an unhandled signal By signal type name.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pSignalTypeName - Name Of Signal to be returned
* @param[out] pHandlerInstance - Signal object. If no signal has been found the signal handler object will be null.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_getunhandledsignal(LibMCEnv_StateEnvironment pStateEnvironment, const char * pSignalTypeName, LibMCEnv_SignalHandler * pHandlerInstance);

/**
* retrieves an unhandled signal from the current state machine by UUID.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pUUID - Name
* @param[in] bMustExist - The call fails if MustExist is true and not signal with UUID does exist or a signal with UUID has been handled already.
* @param[out] pHandler - Signal handler instance. Returns null, if signal does not exist.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_getunhandledsignalbyuuid(LibMCEnv_StateEnvironment pStateEnvironment, const char * pUUID, bool bMustExist, LibMCEnv_SignalHandler * pHandler);

/**
* Returns the driver type and library lookup for a specific registered driver.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pDriverName - Name identifier of the driver.
* @param[in] nDriverTypeBufferSize - size of the buffer (including trailing 0)
* @param[out] pDriverTypeNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pDriverTypeBuffer -  buffer of returns type identifier of the driver., may be NULL
* @param[out] pDriverLookup - GetProcAddress Handle of the driver.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_getdriverlibrary(LibMCEnv_StateEnvironment pStateEnvironment, const char * pDriverName, const LibMCEnv_uint32 nDriverTypeBufferSize, LibMCEnv_uint32* pDriverTypeNeededChars, char * pDriverTypeBuffer, LibMCEnv_pvoid * pDriverLookup);

/**
* Accesses and locks a driver for the execution of the current state.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pDriverName - Name identifier of the driver.
* @param[out] pDriverHandle - Handle of the driver.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_createdriveraccess(LibMCEnv_StateEnvironment pStateEnvironment, const char * pDriverName, LibMCEnv_pvoid * pDriverHandle);

/**
* Returns a instance of a build object.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pBuildUUID - UUID of the build entity.
* @param[out] pBuildInstance - Build instance
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_getbuildjob(LibMCEnv_StateEnvironment pStateEnvironment, const char * pBuildUUID, LibMCEnv_Build * pBuildInstance);

/**
* unloads all toolpath in memory to clean up
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_unloadalltoolpathes(LibMCEnv_StateEnvironment pStateEnvironment);

/**
* sets the next state
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pStateName - Name of next state
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_setnextstate(LibMCEnv_StateEnvironment pStateEnvironment, const char * pStateName);

/**
* logs a string as message
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pLogString - String to Log
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_logmessage(LibMCEnv_StateEnvironment pStateEnvironment, const char * pLogString);

/**
* logs a string as warning
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pLogString - String to Log
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_logwarning(LibMCEnv_StateEnvironment pStateEnvironment, const char * pLogString);

/**
* logs a string as info
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pLogString - String to Log
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_loginfo(LibMCEnv_StateEnvironment pStateEnvironment, const char * pLogString);

/**
* Puts the current instance to sleep for a definite amount of time. MUST be used instead of a blocking sleep call.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] nDelay - Milliseconds to sleeps
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_sleep(LibMCEnv_StateEnvironment pStateEnvironment, LibMCEnv_uint32 nDelay);

/**
* checks environment for termination signal. MUST be called frequently in longer-running operations.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[out] pShallTerminate - Returns if termination shall appear
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_checkfortermination(LibMCEnv_StateEnvironment pStateEnvironment, bool * pShallTerminate);

/**
* DEPRECIATED: stores a signal handler in the current state machine
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pName - Name
* @param[in] pHandler - Signal handler to store.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_storesignal(LibMCEnv_StateEnvironment pStateEnvironment, const char * pName, LibMCEnv_SignalHandler pHandler);

/**
* DEPRECIATED: retrieves a signal handler from the current state machine. Fails if value has not been stored before or signal has been already handled.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pName - Name
* @param[out] pHandler - Signal handler instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_retrievesignal(LibMCEnv_StateEnvironment pStateEnvironment, const char * pName, LibMCEnv_SignalHandler * pHandler);

/**
* DEPRECIATED: deletes a value from the data store.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pName - Name
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_clearstoredvalue(LibMCEnv_StateEnvironment pStateEnvironment, const char * pName);

/**
* sets a string parameter
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pParameterGroup - Parameter Group
* @param[in] pParameterName - Parameter Name
* @param[in] pValue - Value to set
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_setstringparameter(LibMCEnv_StateEnvironment pStateEnvironment, const char * pParameterGroup, const char * pParameterName, const char * pValue);

/**
* sets a uuid parameter
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pParameterGroup - Parameter Group
* @param[in] pParameterName - Parameter Name
* @param[in] pValue - Value to set
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_setuuidparameter(LibMCEnv_StateEnvironment pStateEnvironment, const char * pParameterGroup, const char * pParameterName, const char * pValue);

/**
* sets a double parameter
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pParameterGroup - Parameter Group
* @param[in] pParameterName - Parameter Name
* @param[in] dValue - Value to set
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_setdoubleparameter(LibMCEnv_StateEnvironment pStateEnvironment, const char * pParameterGroup, const char * pParameterName, LibMCEnv_double dValue);

/**
* sets an int parameter
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pParameterGroup - Parameter Group
* @param[in] pParameterName - Parameter Name
* @param[in] nValue - Value to set
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_setintegerparameter(LibMCEnv_StateEnvironment pStateEnvironment, const char * pParameterGroup, const char * pParameterName, LibMCEnv_int64 nValue);

/**
* sets a bool parameter
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pParameterGroup - Parameter Group
* @param[in] pParameterName - Parameter Name
* @param[in] bValue - Value to set
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_setboolparameter(LibMCEnv_StateEnvironment pStateEnvironment, const char * pParameterGroup, const char * pParameterName, bool bValue);

/**
* returns a string parameter
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pParameterGroup - Parameter Group
* @param[in] pParameterName - Parameter Name
* @param[in] nValueBufferSize - size of the buffer (including trailing 0)
* @param[out] pValueNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pValueBuffer -  buffer of Value to set, may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_getstringparameter(LibMCEnv_StateEnvironment pStateEnvironment, const char * pParameterGroup, const char * pParameterName, const LibMCEnv_uint32 nValueBufferSize, LibMCEnv_uint32* pValueNeededChars, char * pValueBuffer);

/**
* returns a uuid parameter
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pParameterGroup - Parameter Group
* @param[in] pParameterName - Parameter Name
* @param[in] nValueBufferSize - size of the buffer (including trailing 0)
* @param[out] pValueNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pValueBuffer -  buffer of Value to set, may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_getuuidparameter(LibMCEnv_StateEnvironment pStateEnvironment, const char * pParameterGroup, const char * pParameterName, const LibMCEnv_uint32 nValueBufferSize, LibMCEnv_uint32* pValueNeededChars, char * pValueBuffer);

/**
* returns a double parameter
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pParameterGroup - Parameter Group
* @param[in] pParameterName - Parameter Name
* @param[out] pValue - Value to set
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_getdoubleparameter(LibMCEnv_StateEnvironment pStateEnvironment, const char * pParameterGroup, const char * pParameterName, LibMCEnv_double * pValue);

/**
* returns an int parameter
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pParameterGroup - Parameter Group
* @param[in] pParameterName - Parameter Name
* @param[out] pValue - Value to set
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_getintegerparameter(LibMCEnv_StateEnvironment pStateEnvironment, const char * pParameterGroup, const char * pParameterName, LibMCEnv_int64 * pValue);

/**
* returns a bool parameter
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pParameterGroup - Parameter Group
* @param[in] pParameterName - Parameter Name
* @param[out] pValue - Value to set
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_getboolparameter(LibMCEnv_StateEnvironment pStateEnvironment, const char * pParameterGroup, const char * pParameterName, bool * pValue);

/**
* loads a plugin resource file into memory.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pResourceName - Name of the resource.
* @param[in] nResourceDataBufferSize - Number of elements in buffer
* @param[out] pResourceDataNeededCount - will be filled with the count of the written elements, or needed buffer size.
* @param[out] pResourceDataBuffer - uint8  buffer of Resource Data Buffer.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_loadresourcedata(LibMCEnv_StateEnvironment pStateEnvironment, const char * pResourceName, const LibMCEnv_uint64 nResourceDataBufferSize, LibMCEnv_uint64* pResourceDataNeededCount, LibMCEnv_uint8 * pResourceDataBuffer);

/**
* loads a plugin resource file into a string. Fails if content is not a valid UTF8 string.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pResourceName - Name of the resource.
* @param[in] nResourceDataBufferSize - size of the buffer (including trailing 0)
* @param[out] pResourceDataNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pResourceDataBuffer -  buffer of Resource Data String., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_loadresourcestring(LibMCEnv_StateEnvironment pStateEnvironment, const char * pResourceName, const LibMCEnv_uint32 nResourceDataBufferSize, LibMCEnv_uint32* pResourceDataNeededChars, char * pResourceDataBuffer);

/**
* creates an empty image object.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] nPixelSizeX - Pixel size in X. MUST be positive.
* @param[in] nPixelSizeY - Pixel size in Y. MUST be positive.
* @param[in] dDPIValueX - DPI Value in X. MUST be positive.
* @param[in] dDPIValueY - DPI Value in Y. MUST be positive.
* @param[in] ePixelFormat - Pixel format to use.
* @param[out] pImageDataInstance - Empty image instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_createemptyimage(LibMCEnv_StateEnvironment pStateEnvironment, LibMCEnv_uint32 nPixelSizeX, LibMCEnv_uint32 nPixelSizeY, LibMCEnv_double dDPIValueX, LibMCEnv_double dDPIValueY, LibMCEnv::eImagePixelFormat ePixelFormat, LibMCEnv_ImageData * pImageDataInstance);

/**
* creates an image object from a PNG data stream.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] nPNGDataBufferSize - Number of elements in buffer
* @param[in] pPNGDataBuffer - uint8 buffer of DPI Value in X. MUST be positive.
* @param[in] dDPIValueX - DPI Value in X. MUST be positive.
* @param[in] dDPIValueY - DPI Value in Y. MUST be positive.
* @param[in] ePixelFormat - Pixel format to use. Might lose color and alpha information.
* @param[out] pImageDataInstance - Image instance containing the PNG image.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_loadpngimage(LibMCEnv_StateEnvironment pStateEnvironment, LibMCEnv_uint64 nPNGDataBufferSize, const LibMCEnv_uint8 * pPNGDataBuffer, LibMCEnv_double dDPIValueX, LibMCEnv_double dDPIValueY, LibMCEnv::eImagePixelFormat ePixelFormat, LibMCEnv_ImageData * pImageDataInstance);

/**
* Returns the global timer in milliseconds.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[out] pTimerValue - Timer value in Milliseconds
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_getglobaltimerinmilliseconds(LibMCEnv_StateEnvironment pStateEnvironment, LibMCEnv_uint64 * pTimerValue);

/**
* Returns a test environment instance.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[out] pTestEnvironment - Test Environment Instance
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_gettestenvironment(LibMCEnv_StateEnvironment pStateEnvironment, LibMCEnv_TestEnvironment * pTestEnvironment);

/**
* creates an empty XML Document.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pRootNodeName - Name of the root node. MUST be a valid XML Node Name string.
* @param[in] pDefaultNamespace - Default namespace of the document. MUST be a valid XML namespace string.
* @param[out] pXMLDocument - XML Document Instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_createxmldocument(LibMCEnv_StateEnvironment pStateEnvironment, const char * pRootNodeName, const char * pDefaultNamespace, LibMCEnv_XMLDocument * pXMLDocument);

/**
* parses an XML String and returns an XML Document instance. Throws an error if XML is malformatted.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] pXMLString - XML String.
* @param[out] pXMLDocument - XML Document Instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_parsexmlstring(LibMCEnv_StateEnvironment pStateEnvironment, const char * pXMLString, LibMCEnv_XMLDocument * pXMLDocument);

/**
* parses a XML stored in a byte array and returns an XML Document instance. . Throws an error if XML is malformatted.
*
* @param[in] pStateEnvironment - StateEnvironment instance.
* @param[in] nXMLDataBufferSize - Number of elements in buffer
* @param[in] pXMLDataBuffer - uint8 buffer of XML Binary data.
* @param[out] pXMLDocument - XML Document Instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_stateenvironment_parsexmldata(LibMCEnv_StateEnvironment pStateEnvironment, LibMCEnv_uint64 nXMLDataBufferSize, const LibMCEnv_uint8 * pXMLDataBuffer, LibMCEnv_XMLDocument * pXMLDocument);

/*************************************************************************************************************************
 Class definition for UIEnvironment
**************************************************************************************************************************/

/**
* activates a modal dialog on the client.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pDialogName - Name of the dialog to activate.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_activatemodaldialog(LibMCEnv_UIEnvironment pUIEnvironment, const char * pDialogName);

/**
* closes the active modal dialog on the client.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_closemodaldialog(LibMCEnv_UIEnvironment pUIEnvironment);

/**
* changes the current page on the client.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pPageName - Name of the page to activate.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_activatepage(LibMCEnv_UIEnvironment pUIEnvironment, const char * pPageName);

/**
* Logs out the client session.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_logout(LibMCEnv_UIEnvironment pUIEnvironment);

/**
* Shows a hint message in the user interface.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pHint - Hint to show.
* @param[in] nTimeoutInMS - How many milliseconds the snackbar should be shown.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_showhint(LibMCEnv_UIEnvironment pUIEnvironment, const char * pHint, LibMCEnv_uint32 nTimeoutInMS);

/**
* Shows a hint message in the user interface in a certain color.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pHint - Hint to show.
* @param[in] nTimeoutInMS - How many milliseconds the snackbar should be shown.
* @param[in] pColor - Background color of hint.
* @param[in] pFontColor - Font color of hint.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_showhintcolored(LibMCEnv_UIEnvironment pUIEnvironment, const char * pHint, LibMCEnv_uint32 nTimeoutInMS, const LibMCEnv::sColorRGB * pColor, const LibMCEnv::sColorRGB * pFontColor);

/**
* Hides hint if any is displayed.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_hidehint(LibMCEnv_UIEnvironment pUIEnvironment);

/**
* Shows a message dialog in the user interface.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pCaption - Caption of the dialog
* @param[in] pTitle - Title of the dialog
* @param[in] eDialogType - Which dialog type shall be shown.
* @param[in] pYesEvent - Event to be called when clicked yes or ok.
* @param[in] pNoEvent - Event to be called when clicked no.
* @param[in] pCancelEvent - Event to be called when dialog is closed or cancel is pressed.
* @param[in] nDialogUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pDialogUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pDialogUUIDBuffer -  buffer of Dialog UUID. Will be set as sender for triggered events., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_showmessagedlg(LibMCEnv_UIEnvironment pUIEnvironment, const char * pCaption, const char * pTitle, LibMCEnv::eMessageDialogType eDialogType, const char * pYesEvent, const char * pNoEvent, const char * pCancelEvent, const LibMCEnv_uint32 nDialogUUIDBufferSize, LibMCEnv_uint32* pDialogUUIDNeededChars, char * pDialogUUIDBuffer);

/**
* returns name of the UI control that triggered the event.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] nSenderNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pSenderNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pSenderNameBuffer -  buffer of Name of the sender element., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_retrieveeventsender(LibMCEnv_UIEnvironment pUIEnvironment, const LibMCEnv_uint32 nSenderNameBufferSize, LibMCEnv_uint32* pSenderNameNeededChars, char * pSenderNameBuffer);

/**
* returns uuid of the UI control that triggered the event.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] nSenderUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pSenderUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pSenderUUIDBuffer -  buffer of Name of the sender uuid., may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_retrieveeventsenderuuid(LibMCEnv_UIEnvironment pUIEnvironment, const LibMCEnv_uint32 nSenderUUIDBufferSize, LibMCEnv_uint32* pSenderUUIDNeededChars, char * pSenderUUIDBuffer);

/**
* prepares a signal object to trigger later.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pMachineInstance - State machine instance name
* @param[in] pSignalName - Name Of signal channel.
* @param[out] pSignalInstance - Signal trigger object.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_preparesignal(LibMCEnv_UIEnvironment pUIEnvironment, const char * pMachineInstance, const char * pSignalName, LibMCEnv_SignalTrigger * pSignalInstance);

/**
* Retrieves the machine state
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pMachineInstance - State machine instance name
* @param[in] nStateNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pStateNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pStateNameBuffer -  buffer of Name of current state, may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_getmachinestate(LibMCEnv_UIEnvironment pUIEnvironment, const char * pMachineInstance, const LibMCEnv_uint32 nStateNameBufferSize, LibMCEnv_uint32* pStateNameNeededChars, char * pStateNameBuffer);

/**
* logs a string as message
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pLogString - String to Log
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_logmessage(LibMCEnv_UIEnvironment pUIEnvironment, const char * pLogString);

/**
* logs a string as warning
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pLogString - String to Log
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_logwarning(LibMCEnv_UIEnvironment pUIEnvironment, const char * pLogString);

/**
* logs a string as info
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pLogString - String to Log
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_loginfo(LibMCEnv_UIEnvironment pUIEnvironment, const char * pLogString);

/**
* returns a string parameter of a state machine
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pMachineInstance - State machine instance name
* @param[in] pParameterGroup - Parameter Group
* @param[in] pParameterName - Parameter Name
* @param[in] nValueBufferSize - size of the buffer (including trailing 0)
* @param[out] pValueNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pValueBuffer -  buffer of Current Parameter Value, may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_getmachineparameter(LibMCEnv_UIEnvironment pUIEnvironment, const char * pMachineInstance, const char * pParameterGroup, const char * pParameterName, const LibMCEnv_uint32 nValueBufferSize, LibMCEnv_uint32* pValueNeededChars, char * pValueBuffer);

/**
* returns a uuid parameter of a state machine
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pMachineInstance - State machine instance name
* @param[in] pParameterGroup - Parameter Group
* @param[in] pParameterName - Parameter Name
* @param[in] nValueBufferSize - size of the buffer (including trailing 0)
* @param[out] pValueNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pValueBuffer -  buffer of Current Parameter Value, may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_getmachineparameterasuuid(LibMCEnv_UIEnvironment pUIEnvironment, const char * pMachineInstance, const char * pParameterGroup, const char * pParameterName, const LibMCEnv_uint32 nValueBufferSize, LibMCEnv_uint32* pValueNeededChars, char * pValueBuffer);

/**
* returns a double parameter of a state machine
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pMachineInstance - State machine instance name
* @param[in] pParameterGroup - Parameter Group
* @param[in] pParameterName - Parameter Name
* @param[out] pValue - Current Parameter Value
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_getmachineparameterasdouble(LibMCEnv_UIEnvironment pUIEnvironment, const char * pMachineInstance, const char * pParameterGroup, const char * pParameterName, LibMCEnv_double * pValue);

/**
* returns an int parameter of a state machine
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pMachineInstance - State machine instance name
* @param[in] pParameterGroup - Parameter Group
* @param[in] pParameterName - Parameter Name
* @param[out] pValue - Current Parameter Value
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_getmachineparameterasinteger(LibMCEnv_UIEnvironment pUIEnvironment, const char * pMachineInstance, const char * pParameterGroup, const char * pParameterName, LibMCEnv_int64 * pValue);

/**
* returns a bool parameter of a state machine
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pMachineInstance - State machine instance name
* @param[in] pParameterGroup - Parameter Group
* @param[in] pParameterName - Parameter Name
* @param[out] pValue - Current Parameter Value
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_getmachineparameterasbool(LibMCEnv_UIEnvironment pUIEnvironment, const char * pMachineInstance, const char * pParameterGroup, const char * pParameterName, bool * pValue);

/**
* returns a string property of a UI element on the client
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pElementPath - Path of UI Element. Fails if element does not exist.
* @param[in] pPropertyName - Property name. Fails if property does not exist.
* @param[in] nValueBufferSize - size of the buffer (including trailing 0)
* @param[out] pValueNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pValueBuffer -  buffer of Current property Value, may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_getuiproperty(LibMCEnv_UIEnvironment pUIEnvironment, const char * pElementPath, const char * pPropertyName, const LibMCEnv_uint32 nValueBufferSize, LibMCEnv_uint32* pValueNeededChars, char * pValueBuffer);

/**
* returns a uuid variable of a UI element on the client
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pElementPath - Path of UI Element. Fails if element does not exist.
* @param[in] pPropertyName - Property name. Fails if property does not exist.
* @param[in] nValueBufferSize - size of the buffer (including trailing 0)
* @param[out] pValueNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pValueBuffer -  buffer of Current property Value, may be NULL
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_getuipropertyasuuid(LibMCEnv_UIEnvironment pUIEnvironment, const char * pElementPath, const char * pPropertyName, const LibMCEnv_uint32 nValueBufferSize, LibMCEnv_uint32* pValueNeededChars, char * pValueBuffer);

/**
* returns a double variable of a UI element on the client
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pElementPath - Path of UI Element. Fails if element does not exist.
* @param[in] pPropertyName - Property name. Fails if property does not exist.
* @param[out] pValue - Current property Value
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_getuipropertyasdouble(LibMCEnv_UIEnvironment pUIEnvironment, const char * pElementPath, const char * pPropertyName, LibMCEnv_double * pValue);

/**
* returns a integer variable of a UI element on the client
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pElementPath - Path of UI Element. Fails if element does not exist.
* @param[in] pPropertyName - Property name. Fails if property does not exist.
* @param[out] pValue - Current property Value
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_getuipropertyasinteger(LibMCEnv_UIEnvironment pUIEnvironment, const char * pElementPath, const char * pPropertyName, LibMCEnv_int64 * pValue);

/**
* returns a integer variable of a UI element on the client
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pElementPath - Path of UI Element. Fails if element does not exist.
* @param[in] pPropertyName - Property name. Fails if property does not exist.
* @param[out] pValue - Current property Value
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_getuipropertyasbool(LibMCEnv_UIEnvironment pUIEnvironment, const char * pElementPath, const char * pPropertyName, bool * pValue);

/**
* sets a string property of a UI element on the client.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pElementPath - Path of UI Element. Fails if element does not exist.
* @param[in] pPropertyName - Property name. Fails if property does not exist or is readonly.
* @param[in] pValue - New property Value
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_setuiproperty(LibMCEnv_UIEnvironment pUIEnvironment, const char * pElementPath, const char * pPropertyName, const char * pValue);

/**
* sets a uuid property of a UI element on the client.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pElementPath - Path of UI Element. Fails if element does not exist.
* @param[in] pPropertyName - Property name. Fails if property does not exist or is readonly.
* @param[in] pValue - New property Value
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_setuipropertyasuuid(LibMCEnv_UIEnvironment pUIEnvironment, const char * pElementPath, const char * pPropertyName, const char * pValue);

/**
* sets a double property of a UI element on the client.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pElementPath - Path of UI Element. Fails if element does not exist.
* @param[in] pPropertyName - Property name. Fails if property does not exist or is readonly.
* @param[in] dValue - New property Value
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_setuipropertyasdouble(LibMCEnv_UIEnvironment pUIEnvironment, const char * pElementPath, const char * pPropertyName, LibMCEnv_double dValue);

/**
* sets a integer property of a UI element on the client.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pElementPath - Path of UI Element. Fails if element does not exist.
* @param[in] pPropertyName - Property name. Fails if property does not exist or is readonly.
* @param[in] nValue - New property Value
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_setuipropertyasinteger(LibMCEnv_UIEnvironment pUIEnvironment, const char * pElementPath, const char * pPropertyName, LibMCEnv_int64 nValue);

/**
* sets a bool property of a UI element on the client.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pElementPath - Path of UI Element. Fails if element does not exist.
* @param[in] pPropertyName - Property name. Fails if property does not exist or is readonly.
* @param[in] bValue - New property Value
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_setuipropertyasbool(LibMCEnv_UIEnvironment pUIEnvironment, const char * pElementPath, const char * pPropertyName, bool bValue);

/**
* creates an empty image object.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] nPixelSizeX - Pixel size in X. MUST be positive.
* @param[in] nPixelSizeY - Pixel size in Y. MUST be positive.
* @param[in] dDPIValueX - DPI Value in X. MUST be positive.
* @param[in] dDPIValueY - DPI Value in Y. MUST be positive.
* @param[in] ePixelFormat - Pixel format to use.
* @param[out] pImageDataInstance - Empty image instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_createemptyimage(LibMCEnv_UIEnvironment pUIEnvironment, LibMCEnv_uint32 nPixelSizeX, LibMCEnv_uint32 nPixelSizeY, LibMCEnv_double dDPIValueX, LibMCEnv_double dDPIValueY, LibMCEnv::eImagePixelFormat ePixelFormat, LibMCEnv_ImageData * pImageDataInstance);

/**
* creates an image object from a PNG data stream.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] nPNGDataBufferSize - Number of elements in buffer
* @param[in] pPNGDataBuffer - uint8 buffer of DPI Value in X. MUST be positive.
* @param[in] dDPIValueX - DPI Value in X. MUST be positive.
* @param[in] dDPIValueY - DPI Value in Y. MUST be positive.
* @param[in] ePixelFormat - Pixel format to use. Might lose color and alpha information.
* @param[out] pImageDataInstance - Image instance containing the PNG image.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_loadpngimage(LibMCEnv_UIEnvironment pUIEnvironment, LibMCEnv_uint64 nPNGDataBufferSize, const LibMCEnv_uint8 * pPNGDataBuffer, LibMCEnv_double dDPIValueX, LibMCEnv_double dDPIValueY, LibMCEnv::eImagePixelFormat ePixelFormat, LibMCEnv_ImageData * pImageDataInstance);

/**
* Returns the global timer in milliseconds.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[out] pTimerValue - Timer value in Milliseconds
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_getglobaltimerinmilliseconds(LibMCEnv_UIEnvironment pUIEnvironment, LibMCEnv_uint64 * pTimerValue);

/**
* Returns a test environment instance.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[out] pTestEnvironment - Test Environment Instance
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_gettestenvironment(LibMCEnv_UIEnvironment pUIEnvironment, LibMCEnv_TestEnvironment * pTestEnvironment);

/**
* creates an empty XML Document.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pRootNodeName - Name of the root node. MUST be a valid XML Node Name string.
* @param[in] pDefaultNamespace - Default namespace of the document. MUST be a valid XML namespace string.
* @param[out] pXMLDocument - XML Document Instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_createxmldocument(LibMCEnv_UIEnvironment pUIEnvironment, const char * pRootNodeName, const char * pDefaultNamespace, LibMCEnv_XMLDocument * pXMLDocument);

/**
* parses an XML String and returns an XML Document instance. Throws an error if XML is malformatted.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] pXMLString - XML String.
* @param[out] pXMLDocument - XML Document Instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_parsexmlstring(LibMCEnv_UIEnvironment pUIEnvironment, const char * pXMLString, LibMCEnv_XMLDocument * pXMLDocument);

/**
* parses a XML stored in a byte array and returns an XML Document instance. . Throws an error if XML is malformatted.
*
* @param[in] pUIEnvironment - UIEnvironment instance.
* @param[in] nXMLDataBufferSize - Number of elements in buffer
* @param[in] pXMLDataBuffer - uint8 buffer of XML Binary data.
* @param[out] pXMLDocument - XML Document Instance.
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_uienvironment_parsexmldata(LibMCEnv_UIEnvironment pUIEnvironment, LibMCEnv_uint64 nXMLDataBufferSize, const LibMCEnv_uint8 * pXMLDataBuffer, LibMCEnv_XMLDocument * pXMLDocument);

/*************************************************************************************************************************
 Global functions
**************************************************************************************************************************/

/**
* retrieves the binary version of this library.
*
* @param[out] pMajor - returns the major version of this library
* @param[out] pMinor - returns the minor version of this library
* @param[out] pMicro - returns the micro version of this library
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_getversion(LibMCEnv_uint32 * pMajor, LibMCEnv_uint32 * pMinor, LibMCEnv_uint32 * pMicro);

/**
* Returns the last error recorded on this object
*
* @param[in] pInstance - Instance Handle
* @param[in] nErrorMessageBufferSize - size of the buffer (including trailing 0)
* @param[out] pErrorMessageNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pErrorMessageBuffer -  buffer of Message of the last error, may be NULL
* @param[out] pHasError - Is there a last error to query
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_getlasterror(LibMCEnv_Base pInstance, const LibMCEnv_uint32 nErrorMessageBufferSize, LibMCEnv_uint32* pErrorMessageNeededChars, char * pErrorMessageBuffer, bool * pHasError);

/**
* Releases shared ownership of an Instance
*
* @param[in] pInstance - Instance Handle
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_releaseinstance(LibMCEnv_Base pInstance);

/**
* Acquires shared ownership of an Instance
*
* @param[in] pInstance - Instance Handle
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_acquireinstance(LibMCEnv_Base pInstance);

/**
* Returns the address of the SymbolLookupMethod
*
* @param[out] pSymbolLookupMethod - Address of the SymbolAddressMethod
* @return error code or 0 (success)
*/
LIBMCENV_DECLSPEC LibMCEnvResult libmcenv_getsymbollookupmethod(LibMCEnv_pvoid * pSymbolLookupMethod);

#ifdef __cplusplus
}
#endif

#endif // __LIBMCENV_HEADER_CPP

