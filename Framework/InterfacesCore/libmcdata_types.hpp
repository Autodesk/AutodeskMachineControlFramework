/*++

Copyright (C) 2020 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.7.0-develop.

Abstract: This is an autogenerated C++-Header file with basic types in
order to allow an easy use of Machine Control data model library

Interface version: 1.0.0

*/

#ifndef __LIBMCDATA_TYPES_HEADER_CPP
#define __LIBMCDATA_TYPES_HEADER_CPP


/*************************************************************************************************************************
 Scalar types definition
**************************************************************************************************************************/

#ifdef LIBMCDATA_USELEGACYINTEGERTYPES

typedef unsigned char LibMCData_uint8;
typedef unsigned short LibMCData_uint16 ;
typedef unsigned int LibMCData_uint32;
typedef unsigned long long LibMCData_uint64;
typedef char LibMCData_int8;
typedef short LibMCData_int16;
typedef int LibMCData_int32;
typedef long long LibMCData_int64;

#else // LIBMCDATA_USELEGACYINTEGERTYPES

#include <stdint.h>

typedef uint8_t LibMCData_uint8;
typedef uint16_t LibMCData_uint16;
typedef uint32_t LibMCData_uint32;
typedef uint64_t LibMCData_uint64;
typedef int8_t LibMCData_int8;
typedef int16_t LibMCData_int16;
typedef int32_t LibMCData_int32;
typedef int64_t LibMCData_int64 ;

#endif // LIBMCDATA_USELEGACYINTEGERTYPES

typedef float LibMCData_single;
typedef double LibMCData_double;

/*************************************************************************************************************************
 General type definitions
**************************************************************************************************************************/

typedef LibMCData_int32 LibMCDataResult;
typedef void * LibMCDataHandle;
typedef void * LibMCData_pvoid;

/*************************************************************************************************************************
 Version for LibMCData
**************************************************************************************************************************/

#define LIBMCDATA_VERSION_MAJOR 1
#define LIBMCDATA_VERSION_MINOR 0
#define LIBMCDATA_VERSION_MICRO 0
#define LIBMCDATA_VERSION_PRERELEASEINFO ""
#define LIBMCDATA_VERSION_BUILDINFO ""

/*************************************************************************************************************************
 Error constants for LibMCData
**************************************************************************************************************************/

#define LIBMCDATA_SUCCESS 0
#define LIBMCDATA_ERROR_NOTIMPLEMENTED 1
#define LIBMCDATA_ERROR_INVALIDPARAM 2
#define LIBMCDATA_ERROR_INVALIDCAST 3
#define LIBMCDATA_ERROR_BUFFERTOOSMALL 4
#define LIBMCDATA_ERROR_GENERICEXCEPTION 5
#define LIBMCDATA_ERROR_COULDNOTLOADLIBRARY 6
#define LIBMCDATA_ERROR_COULDNOTFINDLIBRARYEXPORT 7
#define LIBMCDATA_ERROR_INCOMPATIBLEBINARYVERSION 8
#define LIBMCDATA_ERROR_COULDNOTPARSECONFIGURATION 9
#define LIBMCDATA_ERROR_DUPLICATESTATENAME 10
#define LIBMCDATA_ERROR_STATENOTFOUND 11
#define LIBMCDATA_ERROR_DUPLICATEOUTSTATE 12
#define LIBMCDATA_ERROR_MISSINGMACHINEDEFINITION 13
#define LIBMCDATA_ERROR_MISSINGINSTANCENAME 14
#define LIBMCDATA_ERROR_DUPLICATEMACHINEINSTANCE 15
#define LIBMCDATA_ERROR_MISSINGXMLSCHEMA 16
#define LIBMCDATA_ERROR_INVALIDXMLSCHEMA 17
#define LIBMCDATA_ERROR_MISSINGSTATENAME 18
#define LIBMCDATA_ERROR_MISSINGOUTSTATETARGET 19
#define LIBMCDATA_ERROR_INVALIDOUTSTATETARGET 20
#define LIBMCDATA_ERROR_NOINITSTATE 21
#define LIBMCDATA_ERROR_NOFAILEDSTATE 22
#define LIBMCDATA_ERROR_INITSTATENOTFOUND 23
#define LIBMCDATA_ERROR_FAILEDSTATENOTFOUND 24
#define LIBMCDATA_ERROR_MISSINGINITSTATE 25
#define LIBMCDATA_ERROR_MISSINGFAILEDSTATE 26
#define LIBMCDATA_ERROR_MISSINGPLUGINNAME 27
#define LIBMCDATA_ERROR_EMPTYINITSTATE 28
#define LIBMCDATA_ERROR_EMPTYFAILEDSTATE 29
#define LIBMCDATA_ERROR_EMPTYPLUGINNAME 30
#define LIBMCDATA_ERROR_COULDNOTCREATESTATEFACTORY 31
#define LIBMCDATA_ERROR_INVALIDSTATENAME 32
#define LIBMCDATA_ERROR_COULDNOTCREATESTATE 33
#define LIBMCDATA_ERROR_COULDNOTINITIALIZEFACTORY 34
#define LIBMCDATA_ERROR_COULDNOTFINALIZEFACTORY 35
#define LIBMCDATA_ERROR_COULDNOTLOADPLUGIN 36
#define LIBMCDATA_ERROR_NOCURRENTSTATE 37
#define LIBMCDATA_ERROR_NOPLUGINSTATE 38
#define LIBMCDATA_ERROR_COULDNOTEXECUTEPLUGIN 39
#define LIBMCDATA_ERROR_TOOMANYMACHINEINSTANCES 40
#define LIBMCDATA_ERROR_INVALIDINDEX 41
#define LIBMCDATA_ERROR_NOOUTSTATEGIVEN 42
#define LIBMCDATA_ERROR_INVALIDOUTSTATEGIVEN 43
#define LIBMCDATA_ERROR_INVALIDREPEATDELAY 44
#define LIBMCDATA_ERROR_INVALIDEXECUTIONDELAY 45
#define LIBMCDATA_ERROR_MISSINGREPEATDELAY 46
#define LIBMCDATA_ERROR_THREADISRUNNING 47
#define LIBMCDATA_ERROR_THREADISNOTRUNNING 48
#define LIBMCDATA_ERROR_DUPLICATESIGNAL 49
#define LIBMCDATA_ERROR_INVALIDSIGNALNAME 50
#define LIBMCDATA_ERROR_MISSINGSIGNALNAME 51
#define LIBMCDATA_ERROR_MISSINGSERVERNODE 52
#define LIBMCDATA_ERROR_MISSINGHOSTNAME 53
#define LIBMCDATA_ERROR_MISSINGPORT 54
#define LIBMCDATA_ERROR_UUIDGENERATIONFAILED 55
#define LIBMCDATA_ERROR_INVALIDBUFFERSIZE 56
#define LIBMCDATA_ERROR_COULDNOTCONVERTTOUTF8 57
#define LIBMCDATA_ERROR_NOCOLUMNAVAILABLE 58
#define LIBMCDATA_ERROR_INVALIDTEXTCOLUMN 59
#define LIBMCDATA_ERROR_INVALIDCOLUMNTYPE 60
#define LIBMCDATA_ERROR_TOOMANYREQUESTEDLOGS 61
#define LIBMCDATA_ERROR_MISSINGINSTANCEDESCRIPTION 62
#define LIBMCDATA_ERROR_DUPLICATEPARAMETERGROUPNAME 63
#define LIBMCDATA_ERROR_MISSINGPARAMETERGROUPNAME 64
#define LIBMCDATA_ERROR_EMPTYPARAMETERGROUPNAME 65
#define LIBMCDATA_ERROR_MISSINGPARAMETERGROUPDESCRIPTION 66
#define LIBMCDATA_ERROR_EMPTYPARAMETERGROUPDESCRIPTION 67
#define LIBMCDATA_ERROR_TOOMANYPARAMETERS 68
#define LIBMCDATA_ERROR_TOOMANYPARAMETERGROUPS 69
#define LIBMCDATA_ERROR_DUPLICATEPARAMETERNAME 70
#define LIBMCDATA_ERROR_MISSINGPARAMETERNAME 71
#define LIBMCDATA_ERROR_EMPTYPARAMETERNAME 72
#define LIBMCDATA_ERROR_MISSINGPARAMETERDESCRIPTION 73
#define LIBMCDATA_ERROR_EMPTYPARAMETERDESCRIPTION 74
#define LIBMCDATA_ERROR_PARAMETERNOTFOUND 75
#define LIBMCDATA_ERROR_MISSINGPARAMETERDEFAULTVALUE 76
#define LIBMCDATA_ERROR_MISSINGDATACONFIGNODE 77
#define LIBMCDATA_ERROR_MISSINGDIRECTORY 78
#define LIBMCDATA_ERROR_MISSINGDATABASETYPE 79
#define LIBMCDATA_ERROR_MISSINGSQLITEINFO 80
#define LIBMCDATA_ERROR_UNKNOWNDATABASETYPE 81
#define LIBMCDATA_ERROR_STORAGENOTINITIALISED 82
#define LIBMCDATA_ERROR_COULDNOTCONVERTTOUTF16 83
#define LIBMCDATA_ERROR_COULDNOTCREATEFILE 84
#define LIBMCDATA_ERROR_COULDNOTSEEKSTREAM 85
#define LIBMCDATA_ERROR_COULDNOTGETSTREAMPOSITION 86
#define LIBMCDATA_ERROR_COULDNOTWRITESTREAM 87
#define LIBMCDATA_ERROR_INVALIDDATABASEMIGRATION 88
#define LIBMCDATA_ERROR_INTERNALERROR 89
#define LIBMCDATA_ERROR_COULDNOTSTORECONTENTSTREAM 90
#define LIBMCDATA_ERROR_DATABASENOTINITIALISED 91
#define LIBMCDATA_ERROR_PARAMETERGROUPNOTFOUND 92
#define LIBMCDATA_ERROR_SIGNALNOTFOUND 93
#define LIBMCDATA_ERROR_STATEMACHINENOTFOUND 94
#define LIBMCDATA_ERROR_MISSINGPARAMETERTYPE 95
#define LIBMCDATA_ERROR_INVALIDPARAMETERTYPE 96
#define LIBMCDATA_ERROR_COULDNOTPARSEJSON 97
#define LIBMCDATA_ERROR_INVALIDJSONFORMAT 98
#define LIBMCDATA_ERROR_URLNOTFOUND 99
#define LIBMCDATA_ERROR_GENERICBADREQUEST 100
#define LIBMCDATA_ERROR_SQLITE_ERROR 101
#define LIBMCDATA_ERROR_SQLITE_INTERNAL 102
#define LIBMCDATA_ERROR_SQLITE_PERM 103
#define LIBMCDATA_ERROR_SQLITE_ABORT 104
#define LIBMCDATA_ERROR_SQLITE_BUSY 105
#define LIBMCDATA_ERROR_SQLITE_LOCKED 106
#define LIBMCDATA_ERROR_SQLITE_NOMEM 107
#define LIBMCDATA_ERROR_SQLITE_READONLY 108
#define LIBMCDATA_ERROR_SQLITE_INTERRUPT 109
#define LIBMCDATA_ERROR_SQLITE_IOERR 110
#define LIBMCDATA_ERROR_SQLITE_CORRUPT 111
#define LIBMCDATA_ERROR_SQLITE_NOTFOUND 112
#define LIBMCDATA_ERROR_SQLITE_FULL 113
#define LIBMCDATA_ERROR_SQLITE_CANTOPEN 114
#define LIBMCDATA_ERROR_SQLITE_PROTOCOL 115
#define LIBMCDATA_ERROR_SQLITE_SCHEMA 117
#define LIBMCDATA_ERROR_SQLITE_TOOBIG 118
#define LIBMCDATA_ERROR_SQLITE_CONSTRAINT 119
#define LIBMCDATA_ERROR_SQLITE_MISMATCH 120
#define LIBMCDATA_ERROR_SQLITE_MISUSE 121
#define LIBMCDATA_ERROR_SQLITE_NOLFS 122
#define LIBMCDATA_ERROR_SQLITE_AUTH 123
#define LIBMCDATA_ERROR_SQLITE_RANGE 125
#define LIBMCDATA_ERROR_SQLITE_NOTADB 126
#define LIBMCDATA_ERROR_SQLITE_NOTICE 127
#define LIBMCDATA_ERROR_SQLITE_WARNING 128
#define LIBMCDATA_ERROR_SQLITE_OTHER 130
#define LIBMCDATA_ERROR_SQLITE_TOOMANYRESULTROWS 131
#define LIBMCDATA_ERROR_COULDNOTREADZIPFILE 200
#define LIBMCDATA_ERROR_COULDNOTOPENZIPFILE 201
#define LIBMCDATA_ERROR_COULDNOTGETZIPENTRIES 202
#define LIBMCDATA_ERROR_ZIPENTRYNOTFOUND 203
#define LIBMCDATA_ERROR_COULDNOTSTATZIPENTRY 204
#define LIBMCDATA_ERROR_COULDNOTOPENZIPENTRY 205
#define LIBMCDATA_ERROR_COULDNOTREADZIPSTREAM 206
#define LIBMCDATA_ERROR_COULDNOTREADFULLZIPDATA 207
#define LIBMCDATA_ERROR_COULDNOTFINDDISTRIBUTIONINDEX 208
#define LIBMCDATA_ERROR_COULDNOTPARSEDISTRIBUTIONINDEX 209
#define LIBMCDATA_ERROR_EMPTYDISTRIBUTIONINDEX 210
#define LIBMCDATA_ERROR_MISSINGDISTRIBUTIONINDEX 211
#define LIBMCDATA_ERROR_MISSINGDISTRIBUTIONURL 212
#define LIBMCDATA_ERROR_MISSINGDISTRIBUTIONFILENAME 213
#define LIBMCDATA_ERROR_MISSINGDISTRIBUTIONSIZE 214
#define LIBMCDATA_ERROR_MISSINGDISTRIBUTIONCONTENTTYPE 215
#define LIBMCDATA_ERROR_DRIVERALREADYREGISTERED 216
#define LIBMCDATA_ERROR_DRIVERNOTFOUND 217
#define LIBMCDATA_ERROR_MISSINGDRIVERNAME 218
#define LIBMCDATA_ERROR_MISSINGDRIVERTYPE 219
#define LIBMCDATA_ERROR_MISSINGDRIVERLIBRARY 220
#define LIBMCDATA_ERROR_DRIVERALREADYRESERVED 221
#define LIBMCDATA_ERROR_LIBRARYPATHNOTFOUND 222
#define LIBMCDATA_ERROR_TOOLPATHENTITYNOTLOADED 223
#define LIBMCDATA_ERROR_TOOLPATHENTITYREFERENCEERROR 224
#define LIBMCDATA_ERROR_TOOLPATHENTITYINVALIDFILE 225
#define LIBMCDATA_ERROR_NO3MFLIBRARY 226
#define LIBMCDATA_ERROR_INVALIDPOINTCOUNT 227
#define LIBMCDATA_ERROR_DUPLICATEJOBUUID 228
#define LIBMCDATA_ERROR_INVALIDJOBSTATUS 229
#define LIBMCDATA_ERROR_INVALIDSTREAMCONTEXT 230
#define LIBMCDATA_ERROR_JOBUUIDNOTFOUND 231
#define LIBMCDATA_ERROR_INVALIDJOBNAME 232
#define LIBMCDATA_ERROR_INVALIDJOBTIMESTAMP 233
#define LIBMCDATA_ERROR_INVALIDUSERID 234
#define LIBMCDATA_ERROR_INVALIDSTORAGECALLBACKSIGNATURE 235
#define LIBMCDATA_ERROR_INVALIDSTORAGECALLBACKSTREAM 236
#define LIBMCDATA_ERROR_INVALIDSTORAGEPATH 237
#define LIBMCDATA_ERROR_STORAGESTREAMNOTFOUND 238
#define LIBMCDATA_ERROR_DUPLICATESTORAGESTREAM 239
#define LIBMCDATA_ERROR_INVALIDPARTIALUPLOAD 240
#define LIBMCDATA_ERROR_PARTIALUPLOADNOTFINISHED 241
#define LIBMCDATA_ERROR_APIREQUESTNOTHANDLED 242
#define LIBMCDATA_ERROR_APIREQUESTALREADYHANDLED 243
#define LIBMCDATA_ERROR_INVALIDAPIREQUESTTYPE 244
#define LIBMCDATA_ERROR_INVALIDUPLOADSTREAM 245
#define LIBMCDATA_ERROR_COULDNOTPARSEJSONREQUEST 246
#define LIBMCDATA_ERROR_INVALIDCONTEXTUUID 247
#define LIBMCDATA_ERROR_INVALIDUPLOADNAME 248
#define LIBMCDATA_ERROR_INVALIDMIMETYPE 249
#define LIBMCDATA_ERROR_INVALIDSTREAMSIZE 250
#define LIBMCDATA_ERROR_INVALIDSHA256SUM 251
#define LIBMCDATA_ERROR_INVALIDSTREAMUUID 252
#define LIBMCDATA_ERROR_INVALIDFIELDNAME 253
#define LIBMCDATA_ERROR_UPLOADSIZEMISMATCH 254
#define LIBMCDATA_ERROR_CONTENTTYPENOTACCEPTED 255
#define LIBMCDATA_ERROR_NOCURRENTUPLOAD 256
#define LIBMCDATA_ERROR_UPLOADCHECKSUMMISMATCH 257
#define LIBMCDATA_ERROR_INVALIDSTORAGESTREAMSTATUS 258
#define LIBMCDATA_ERROR_CONTEXTUUIDNOTACCEPTED 259
#define LIBMCDATA_ERROR_INVALIDBUILDUUID 260
#define LIBMCDATA_ERROR_MISSINGTHREADCOUNT 261
#define LIBMCDATA_ERROR_INVALIDTHREADCOUNT 262
#define LIBMCDATA_ERROR_COULDNOTUPDATEBUILDSTATUS 263
#define LIBMCDATA_ERROR_INVALIDITERATOR 264
#define LIBMCDATA_ERROR_INVALIDDATATYPE 265
#define LIBMCDATA_ERROR_COULDNOTSENDSIGNAL 266
#define LIBMCDATA_ERROR_MISSINGSIGNALPARAMETER 267
#define LIBMCDATA_ERROR_NOUSERINTERFACEDEFINITION 268
#define LIBMCDATA_ERROR_MISSINGAPPNAME 269
#define LIBMCDATA_ERROR_MISSINGCOPYRIGHT 270
#define LIBMCDATA_ERROR_MISSINGMAINPAGE 271
#define LIBMCDATA_ERROR_MISSINGMENUITEMID 272
#define LIBMCDATA_ERROR_MISSINGMENUITEMICON 273
#define LIBMCDATA_ERROR_MISSINGMENUITEMCAPTION 274
#define LIBMCDATA_ERROR_MISSINGTARGETPAGE 275
#define LIBMCDATA_ERROR_MISSINGMENUNODE 276
#define LIBMCDATA_ERROR_MISSINGTOOLBARNODE 277
#define LIBMCDATA_ERROR_MISSINGTOOLBARITEMID 278
#define LIBMCDATA_ERROR_MISSINGTOOLBARITEMICON 279
#define LIBMCDATA_ERROR_MISSINGTOOLBARITEMCAPTION 280
#define LIBMCDATA_ERROR_MISSINGSERVICESNODE 281
#define LIBMCDATA_ERROR_INVALIDSESSIONUUID 282
#define LIBMCDATA_ERROR_INVALIDSESSIONKEY 283
#define LIBMCDATA_ERROR_SESSIONNOTAUTHORIZED 284
#define LIBMCDATA_ERROR_INVALIDUSERNAME 285
#define LIBMCDATA_ERROR_INVALIDPASSWORD 286
#define LIBMCDATA_ERROR_INVALIDAUTHORIZATION 287
#define LIBMCDATA_ERROR_USERALREADYAUTHORIZED 288
#define LIBMCDATA_ERROR_INVALIDSESSIONTOKEN 289
#define LIBMCDATA_ERROR_INVALIDCLIENTKEY 290
#define LIBMCDATA_ERROR_INVALIDLOGIN 291

/*************************************************************************************************************************
 Error strings for LibMCData
**************************************************************************************************************************/

inline const char * LIBMCDATA_GETERRORSTRING (LibMCDataResult nErrorCode) {
  switch (nErrorCode) {
    case LIBMCDATA_SUCCESS: return "no error";
    case LIBMCDATA_ERROR_NOTIMPLEMENTED: return "functionality not implemented";
    case LIBMCDATA_ERROR_INVALIDPARAM: return "an invalid parameter was passed";
    case LIBMCDATA_ERROR_INVALIDCAST: return "a type cast failed";
    case LIBMCDATA_ERROR_BUFFERTOOSMALL: return "a provided buffer is too small";
    case LIBMCDATA_ERROR_GENERICEXCEPTION: return "a generic exception occurred";
    case LIBMCDATA_ERROR_COULDNOTLOADLIBRARY: return "the library could not be loaded";
    case LIBMCDATA_ERROR_COULDNOTFINDLIBRARYEXPORT: return "a required exported symbol could not be found in the library";
    case LIBMCDATA_ERROR_INCOMPATIBLEBINARYVERSION: return "the version of the binary interface does not match the bindings interface";
    case LIBMCDATA_ERROR_COULDNOTPARSECONFIGURATION: return "could not parse configuration";
    case LIBMCDATA_ERROR_DUPLICATESTATENAME: return "duplicate state name";
    case LIBMCDATA_ERROR_STATENOTFOUND: return "state not found";
    case LIBMCDATA_ERROR_DUPLICATEOUTSTATE: return "duplicate out state";
    case LIBMCDATA_ERROR_MISSINGMACHINEDEFINITION: return "missing machine definition";
    case LIBMCDATA_ERROR_MISSINGINSTANCENAME: return "missing instance name";
    case LIBMCDATA_ERROR_DUPLICATEMACHINEINSTANCE: return "duplicate machine instance";
    case LIBMCDATA_ERROR_MISSINGXMLSCHEMA: return "missing XML schema";
    case LIBMCDATA_ERROR_INVALIDXMLSCHEMA: return "invalid XML schema";
    case LIBMCDATA_ERROR_MISSINGSTATENAME: return "missing state name";
    case LIBMCDATA_ERROR_MISSINGOUTSTATETARGET: return "missing outstate target";
    case LIBMCDATA_ERROR_INVALIDOUTSTATETARGET: return "invalid outstate target";
    case LIBMCDATA_ERROR_NOINITSTATE: return "no init state";
    case LIBMCDATA_ERROR_NOFAILEDSTATE: return "no failed state";
    case LIBMCDATA_ERROR_INITSTATENOTFOUND: return "init state not found";
    case LIBMCDATA_ERROR_FAILEDSTATENOTFOUND: return "failed state not found";
    case LIBMCDATA_ERROR_MISSINGINITSTATE: return "missing init state";
    case LIBMCDATA_ERROR_MISSINGFAILEDSTATE: return "missing failed state";
    case LIBMCDATA_ERROR_MISSINGPLUGINNAME: return "missing plugin name";
    case LIBMCDATA_ERROR_EMPTYINITSTATE: return "empty init state";
    case LIBMCDATA_ERROR_EMPTYFAILEDSTATE: return "empty failed state";
    case LIBMCDATA_ERROR_EMPTYPLUGINNAME: return "empty plugin name";
    case LIBMCDATA_ERROR_COULDNOTCREATESTATEFACTORY: return "could not create state factory";
    case LIBMCDATA_ERROR_INVALIDSTATENAME: return "invalid state name";
    case LIBMCDATA_ERROR_COULDNOTCREATESTATE: return "could not create state";
    case LIBMCDATA_ERROR_COULDNOTINITIALIZEFACTORY: return "could not initialize factory";
    case LIBMCDATA_ERROR_COULDNOTFINALIZEFACTORY: return "could not finalize factory";
    case LIBMCDATA_ERROR_COULDNOTLOADPLUGIN: return "could not load plugin";
    case LIBMCDATA_ERROR_NOCURRENTSTATE: return "no current state";
    case LIBMCDATA_ERROR_NOPLUGINSTATE: return "no plugin state";
    case LIBMCDATA_ERROR_COULDNOTEXECUTEPLUGIN: return "could not execute plugin";
    case LIBMCDATA_ERROR_TOOMANYMACHINEINSTANCES: return "too many machine instances";
    case LIBMCDATA_ERROR_INVALIDINDEX: return "invalid index";
    case LIBMCDATA_ERROR_NOOUTSTATEGIVEN: return "no new outstate has been given";
    case LIBMCDATA_ERROR_INVALIDOUTSTATEGIVEN: return "invalid outstate has been given";
    case LIBMCDATA_ERROR_INVALIDREPEATDELAY: return "invalid repeat delay";
    case LIBMCDATA_ERROR_INVALIDEXECUTIONDELAY: return "invalid execution delay";
    case LIBMCDATA_ERROR_MISSINGREPEATDELAY: return "missing repeat delay";
    case LIBMCDATA_ERROR_THREADISRUNNING: return "thread is running";
    case LIBMCDATA_ERROR_THREADISNOTRUNNING: return "thread is not running";
    case LIBMCDATA_ERROR_DUPLICATESIGNAL: return "duplicate signal";
    case LIBMCDATA_ERROR_INVALIDSIGNALNAME: return "invalid signal name";
    case LIBMCDATA_ERROR_MISSINGSIGNALNAME: return "missing signal name";
    case LIBMCDATA_ERROR_MISSINGSERVERNODE: return "missing server node";
    case LIBMCDATA_ERROR_MISSINGHOSTNAME: return "missing host name";
    case LIBMCDATA_ERROR_MISSINGPORT: return "missing port";
    case LIBMCDATA_ERROR_UUIDGENERATIONFAILED: return "uuid generation failed";
    case LIBMCDATA_ERROR_INVALIDBUFFERSIZE: return "invalid buffer size";
    case LIBMCDATA_ERROR_COULDNOTCONVERTTOUTF8: return "could not convert to utf8";
    case LIBMCDATA_ERROR_NOCOLUMNAVAILABLE: return "no column available";
    case LIBMCDATA_ERROR_INVALIDTEXTCOLUMN: return "invalid text column";
    case LIBMCDATA_ERROR_INVALIDCOLUMNTYPE: return "invalid column type";
    case LIBMCDATA_ERROR_TOOMANYREQUESTEDLOGS: return "too many requested logs";
    case LIBMCDATA_ERROR_MISSINGINSTANCEDESCRIPTION: return "missing instance description";
    case LIBMCDATA_ERROR_DUPLICATEPARAMETERGROUPNAME: return "duplicate parameter group name";
    case LIBMCDATA_ERROR_MISSINGPARAMETERGROUPNAME: return "missing parameter group name";
    case LIBMCDATA_ERROR_EMPTYPARAMETERGROUPNAME: return "empty parameter group name";
    case LIBMCDATA_ERROR_MISSINGPARAMETERGROUPDESCRIPTION: return "missing parameter group description";
    case LIBMCDATA_ERROR_EMPTYPARAMETERGROUPDESCRIPTION: return "empty parameter group description";
    case LIBMCDATA_ERROR_TOOMANYPARAMETERS: return "too many parameters";
    case LIBMCDATA_ERROR_TOOMANYPARAMETERGROUPS: return "too many parameter groups";
    case LIBMCDATA_ERROR_DUPLICATEPARAMETERNAME: return "duplicate parameter name";
    case LIBMCDATA_ERROR_MISSINGPARAMETERNAME: return "missing parameter name";
    case LIBMCDATA_ERROR_EMPTYPARAMETERNAME: return "empty parameter name";
    case LIBMCDATA_ERROR_MISSINGPARAMETERDESCRIPTION: return "missing parameter description";
    case LIBMCDATA_ERROR_EMPTYPARAMETERDESCRIPTION: return "empty parameter description";
    case LIBMCDATA_ERROR_PARAMETERNOTFOUND: return "parameter not found";
    case LIBMCDATA_ERROR_MISSINGPARAMETERDEFAULTVALUE: return "missing parameter default value";
    case LIBMCDATA_ERROR_MISSINGDATACONFIGNODE: return "missing data config node";
    case LIBMCDATA_ERROR_MISSINGDIRECTORY: return "missing directory";
    case LIBMCDATA_ERROR_MISSINGDATABASETYPE: return "missing database type";
    case LIBMCDATA_ERROR_MISSINGSQLITEINFO: return "missing sqlite info";
    case LIBMCDATA_ERROR_UNKNOWNDATABASETYPE: return "unknown database type";
    case LIBMCDATA_ERROR_STORAGENOTINITIALISED: return "storage not initialised";
    case LIBMCDATA_ERROR_COULDNOTCONVERTTOUTF16: return "could not convert to utf 16";
    case LIBMCDATA_ERROR_COULDNOTCREATEFILE: return "could not create file";
    case LIBMCDATA_ERROR_COULDNOTSEEKSTREAM: return "could not seek stream";
    case LIBMCDATA_ERROR_COULDNOTGETSTREAMPOSITION: return "could not get stream position";
    case LIBMCDATA_ERROR_COULDNOTWRITESTREAM: return "could not write stream";
    case LIBMCDATA_ERROR_INVALIDDATABASEMIGRATION: return "invalid database migration";
    case LIBMCDATA_ERROR_INTERNALERROR: return "internal error";
    case LIBMCDATA_ERROR_COULDNOTSTORECONTENTSTREAM: return "could not store content stream";
    case LIBMCDATA_ERROR_DATABASENOTINITIALISED: return "database not initialised";
    case LIBMCDATA_ERROR_PARAMETERGROUPNOTFOUND: return "parameter group not found";
    case LIBMCDATA_ERROR_SIGNALNOTFOUND: return "signal not found";
    case LIBMCDATA_ERROR_STATEMACHINENOTFOUND: return "state machine not found.";
    case LIBMCDATA_ERROR_MISSINGPARAMETERTYPE: return "missing parameter type.";
    case LIBMCDATA_ERROR_INVALIDPARAMETERTYPE: return "invalid parameter type.";
    case LIBMCDATA_ERROR_COULDNOTPARSEJSON: return "could not parse json.";
    case LIBMCDATA_ERROR_INVALIDJSONFORMAT: return "invalid json format.";
    case LIBMCDATA_ERROR_URLNOTFOUND: return "url not found.";
    case LIBMCDATA_ERROR_GENERICBADREQUEST: return "generic bad request.";
    case LIBMCDATA_ERROR_SQLITE_ERROR: return "SQLite: Generic Error";
    case LIBMCDATA_ERROR_SQLITE_INTERNAL: return "SQLite: Internal logic error in SQLite";
    case LIBMCDATA_ERROR_SQLITE_PERM: return "SQLite: Access permission denied";
    case LIBMCDATA_ERROR_SQLITE_ABORT: return "SQLite: Callback routine requested an abort";
    case LIBMCDATA_ERROR_SQLITE_BUSY: return "SQLite: The database file is locked";
    case LIBMCDATA_ERROR_SQLITE_LOCKED: return "SQLite: A table in the database is locked";
    case LIBMCDATA_ERROR_SQLITE_NOMEM: return "SQLite: A malloc failed";
    case LIBMCDATA_ERROR_SQLITE_READONLY: return "SQLite: Attempt to write a readonly database";
    case LIBMCDATA_ERROR_SQLITE_INTERRUPT: return "SQLite: Operation terminated by sqlite3_interrupt";
    case LIBMCDATA_ERROR_SQLITE_IOERR: return "SQLite: Some kind of disk I/O error occurred";
    case LIBMCDATA_ERROR_SQLITE_CORRUPT: return "SQLite: The database disk image is malformed";
    case LIBMCDATA_ERROR_SQLITE_NOTFOUND: return "SQLite: Unknown opcode in sqlite3_file_control";
    case LIBMCDATA_ERROR_SQLITE_FULL: return "SQLite: Insertion failed because database is full";
    case LIBMCDATA_ERROR_SQLITE_CANTOPEN: return "SQLite: Unable to open the database file";
    case LIBMCDATA_ERROR_SQLITE_PROTOCOL: return "SQLite: Database lock protocol error";
    case LIBMCDATA_ERROR_SQLITE_SCHEMA: return "SQLite: The database schema changed";
    case LIBMCDATA_ERROR_SQLITE_TOOBIG: return "SQLite: String or BLOB exceeds size limit";
    case LIBMCDATA_ERROR_SQLITE_CONSTRAINT: return "SQLite: Abort due to constraint violation";
    case LIBMCDATA_ERROR_SQLITE_MISMATCH: return "SQLite: Data type mismatch";
    case LIBMCDATA_ERROR_SQLITE_MISUSE: return "SQLite: Library used incorrectly";
    case LIBMCDATA_ERROR_SQLITE_NOLFS: return "SQLite: Uses OS features not supported on host";
    case LIBMCDATA_ERROR_SQLITE_AUTH: return "SQLite: Authorization denied";
    case LIBMCDATA_ERROR_SQLITE_RANGE: return "SQLite: 2nd parameter to sqlite3_bind out of range";
    case LIBMCDATA_ERROR_SQLITE_NOTADB: return "SQLite: File opened that is not a database file";
    case LIBMCDATA_ERROR_SQLITE_NOTICE: return "SQLite: Notifications from sqlite3_log";
    case LIBMCDATA_ERROR_SQLITE_WARNING: return "SQLite: Warnings from sqlite3_log";
    case LIBMCDATA_ERROR_SQLITE_OTHER: return "SQLite: Other Error";
    case LIBMCDATA_ERROR_SQLITE_TOOMANYRESULTROWS: return "too many result rows";
    case LIBMCDATA_ERROR_COULDNOTREADZIPFILE: return "Could not read ZIP file";
    case LIBMCDATA_ERROR_COULDNOTOPENZIPFILE: return "Could not open ZIP file";
    case LIBMCDATA_ERROR_COULDNOTGETZIPENTRIES: return "Could not get ZIP file entries";
    case LIBMCDATA_ERROR_ZIPENTRYNOTFOUND: return "ZIP Entry not found";
    case LIBMCDATA_ERROR_COULDNOTSTATZIPENTRY: return "Could not stat ZIP entry";
    case LIBMCDATA_ERROR_COULDNOTOPENZIPENTRY: return "Could not open ZIP entry";
    case LIBMCDATA_ERROR_COULDNOTREADZIPSTREAM: return "Could not read ZIP stream";
    case LIBMCDATA_ERROR_COULDNOTREADFULLZIPDATA: return "Could not read full zip data";
    case LIBMCDATA_ERROR_COULDNOTFINDDISTRIBUTIONINDEX: return "Could not find distribution index.";
    case LIBMCDATA_ERROR_COULDNOTPARSEDISTRIBUTIONINDEX: return "Could not parse distribution index.";
    case LIBMCDATA_ERROR_EMPTYDISTRIBUTIONINDEX: return "Empty distribution index.";
    case LIBMCDATA_ERROR_MISSINGDISTRIBUTIONINDEX: return "Missing distribution index.";
    case LIBMCDATA_ERROR_MISSINGDISTRIBUTIONURL: return "Missing distribution url.";
    case LIBMCDATA_ERROR_MISSINGDISTRIBUTIONFILENAME: return "Missing distribution filename.";
    case LIBMCDATA_ERROR_MISSINGDISTRIBUTIONSIZE: return "Missing distribution size.";
    case LIBMCDATA_ERROR_MISSINGDISTRIBUTIONCONTENTTYPE: return "Missing distribution content type.";
    case LIBMCDATA_ERROR_DRIVERALREADYREGISTERED: return "Driver already registered.";
    case LIBMCDATA_ERROR_DRIVERNOTFOUND: return "Driver not found.";
    case LIBMCDATA_ERROR_MISSINGDRIVERNAME: return "Missing driver name.";
    case LIBMCDATA_ERROR_MISSINGDRIVERTYPE: return "Missing driver type.";
    case LIBMCDATA_ERROR_MISSINGDRIVERLIBRARY: return "Missing driver library.";
    case LIBMCDATA_ERROR_DRIVERALREADYRESERVED: return "Driver has already been reserved by an instance.";
    case LIBMCDATA_ERROR_LIBRARYPATHNOTFOUND: return "Library path not found.";
    case LIBMCDATA_ERROR_TOOLPATHENTITYNOTLOADED: return "Toolpath entity not loaded";
    case LIBMCDATA_ERROR_TOOLPATHENTITYREFERENCEERROR: return "Toolpath entity reference error";
    case LIBMCDATA_ERROR_TOOLPATHENTITYINVALIDFILE: return "Toolpath entity is invalid";
    case LIBMCDATA_ERROR_NO3MFLIBRARY: return "No 3MF Library specified";
    case LIBMCDATA_ERROR_INVALIDPOINTCOUNT: return "Invalid point count";
    case LIBMCDATA_ERROR_DUPLICATEJOBUUID: return "Duplicate job uuid";
    case LIBMCDATA_ERROR_INVALIDJOBSTATUS: return "Invalid job status";
    case LIBMCDATA_ERROR_INVALIDSTREAMCONTEXT: return "Invalid stream context";
    case LIBMCDATA_ERROR_JOBUUIDNOTFOUND: return "Job uuid not found";
    case LIBMCDATA_ERROR_INVALIDJOBNAME: return "Invalid job name";
    case LIBMCDATA_ERROR_INVALIDJOBTIMESTAMP: return "Invalid job timestamp";
    case LIBMCDATA_ERROR_INVALIDUSERID: return "Invalid job name";
    case LIBMCDATA_ERROR_INVALIDSTORAGECALLBACKSIGNATURE: return "Invalid storage callback signature";
    case LIBMCDATA_ERROR_INVALIDSTORAGECALLBACKSTREAM: return "Invalid storage callback stream";
    case LIBMCDATA_ERROR_INVALIDSTORAGEPATH: return "Invalid storage path";
    case LIBMCDATA_ERROR_STORAGESTREAMNOTFOUND: return "Storage Stream not found";
    case LIBMCDATA_ERROR_DUPLICATESTORAGESTREAM: return "Duplicate Storage Stream";
    case LIBMCDATA_ERROR_INVALIDPARTIALUPLOAD: return "Invalid Partial Upload";
    case LIBMCDATA_ERROR_PARTIALUPLOADNOTFINISHED: return "Partial Upload not finished";
    case LIBMCDATA_ERROR_APIREQUESTNOTHANDLED: return "API Request not handled";
    case LIBMCDATA_ERROR_APIREQUESTALREADYHANDLED: return "API Request already handled";
    case LIBMCDATA_ERROR_INVALIDAPIREQUESTTYPE: return "Invalid API Request type";
    case LIBMCDATA_ERROR_INVALIDUPLOADSTREAM: return "Invalid Upload Stream";
    case LIBMCDATA_ERROR_COULDNOTPARSEJSONREQUEST: return "Could not parse JSON request";
    case LIBMCDATA_ERROR_INVALIDCONTEXTUUID: return "Invalid Context UUID";
    case LIBMCDATA_ERROR_INVALIDUPLOADNAME: return "Invalid Upload Name";
    case LIBMCDATA_ERROR_INVALIDMIMETYPE: return "Invalid Mime Type";
    case LIBMCDATA_ERROR_INVALIDSTREAMSIZE: return "Invalid Stream Size";
    case LIBMCDATA_ERROR_INVALIDSHA256SUM: return "Invalid SHA256 Sum";
    case LIBMCDATA_ERROR_INVALIDSTREAMUUID: return "Invalid Stream UUID";
    case LIBMCDATA_ERROR_INVALIDFIELDNAME: return "Invalid field name";
    case LIBMCDATA_ERROR_UPLOADSIZEMISMATCH: return "Upload size mismatch";
    case LIBMCDATA_ERROR_CONTENTTYPENOTACCEPTED: return "Content type not accepted";
    case LIBMCDATA_ERROR_NOCURRENTUPLOAD: return "No current upload";
    case LIBMCDATA_ERROR_UPLOADCHECKSUMMISMATCH: return "Upload checksum mismatch";
    case LIBMCDATA_ERROR_INVALIDSTORAGESTREAMSTATUS: return "Invalid storage stream status";
    case LIBMCDATA_ERROR_CONTEXTUUIDNOTACCEPTED: return "Context uuid not accepted";
    case LIBMCDATA_ERROR_INVALIDBUILDUUID: return "Invalid build uuid";
    case LIBMCDATA_ERROR_MISSINGTHREADCOUNT: return "Missing thread count";
    case LIBMCDATA_ERROR_INVALIDTHREADCOUNT: return "Invalid thread count";
    case LIBMCDATA_ERROR_COULDNOTUPDATEBUILDSTATUS: return "Could not update build status";
    case LIBMCDATA_ERROR_INVALIDITERATOR: return "Invalid iterator";
    case LIBMCDATA_ERROR_INVALIDDATATYPE: return "Invalid data type";
    case LIBMCDATA_ERROR_COULDNOTSENDSIGNAL: return "Could not send signal";
    case LIBMCDATA_ERROR_MISSINGSIGNALPARAMETER: return "Missing signal parameter";
    case LIBMCDATA_ERROR_NOUSERINTERFACEDEFINITION: return "No user interface definition";
    case LIBMCDATA_ERROR_MISSINGAPPNAME: return "Missing app name";
    case LIBMCDATA_ERROR_MISSINGCOPYRIGHT: return "Missing copyright";
    case LIBMCDATA_ERROR_MISSINGMAINPAGE: return "Missing main page";
    case LIBMCDATA_ERROR_MISSINGMENUITEMID: return "Missing menu item id";
    case LIBMCDATA_ERROR_MISSINGMENUITEMICON: return "Missing menu item icon";
    case LIBMCDATA_ERROR_MISSINGMENUITEMCAPTION: return "Missing menu item caption";
    case LIBMCDATA_ERROR_MISSINGTARGETPAGE: return "Missing menu item target page";
    case LIBMCDATA_ERROR_MISSINGMENUNODE: return "Missing menu node";
    case LIBMCDATA_ERROR_MISSINGTOOLBARNODE: return "Missing toolbar node";
    case LIBMCDATA_ERROR_MISSINGTOOLBARITEMID: return "Missing toolbar item id";
    case LIBMCDATA_ERROR_MISSINGTOOLBARITEMICON: return "Missing toolbar item icon";
    case LIBMCDATA_ERROR_MISSINGTOOLBARITEMCAPTION: return "Missing toolbar item caption";
    case LIBMCDATA_ERROR_MISSINGSERVICESNODE: return "Missing services node";
    case LIBMCDATA_ERROR_INVALIDSESSIONUUID: return "Invalid session UUID";
    case LIBMCDATA_ERROR_INVALIDSESSIONKEY: return "Invalid session Key";
    case LIBMCDATA_ERROR_SESSIONNOTAUTHORIZED: return "Session not authorized";
    case LIBMCDATA_ERROR_INVALIDUSERNAME: return "Invalid user name";
    case LIBMCDATA_ERROR_INVALIDPASSWORD: return "Invalid password";
    case LIBMCDATA_ERROR_INVALIDAUTHORIZATION: return "Invalid Authorization";
    case LIBMCDATA_ERROR_USERALREADYAUTHORIZED: return "User already authorized";
    case LIBMCDATA_ERROR_INVALIDSESSIONTOKEN: return "Invalid session token";
    case LIBMCDATA_ERROR_INVALIDCLIENTKEY: return "Invalid client key";
    case LIBMCDATA_ERROR_INVALIDLOGIN: return "Invalid login credentials";
    default: return "unknown error";
  }
}

/*************************************************************************************************************************
 Declaration of handle classes 
**************************************************************************************************************************/

typedef LibMCDataHandle LibMCData_Base;
typedef LibMCDataHandle LibMCData_Iterator;
typedef LibMCDataHandle LibMCData_LogSession;
typedef LibMCDataHandle LibMCData_StorageStream;
typedef LibMCDataHandle LibMCData_Storage;
typedef LibMCDataHandle LibMCData_BuildJobData;
typedef LibMCDataHandle LibMCData_BuildJobDataIterator;
typedef LibMCDataHandle LibMCData_BuildJob;
typedef LibMCDataHandle LibMCData_BuildJobIterator;
typedef LibMCDataHandle LibMCData_BuildJobHandler;
typedef LibMCDataHandle LibMCData_DataModel;

namespace LibMCData {

  /*************************************************************************************************************************
   Declaration of enums
  **************************************************************************************************************************/
  
  enum class eLogLevel : LibMCData_int32 {
    FatalError = 1,
    CriticalError = 2,
    Warning = 3,
    Message = 4,
    Info = 5,
    Debug = 6,
    Unknown = 7
  };
  
  enum class eDataBaseType : LibMCData_int32 {
    Unknown = 0,
    SqLite = 1
  };
  
  enum class eBuildJobStatus : LibMCData_int32 {
    Created = 0,
    Validating = 100,
    Validated = 200,
    Archived = 300,
    Deleted = 400
  };
  
  enum class eBuildJobDataType : LibMCData_int32 {
    Unknown = 0,
    Toolpath = 1,
    PNGImage = 2,
    JPEGImage = 3,
    Thumbnail = 4,
    Timeline = 5,
    CustomBinaryData = 100
  };
  
  /*************************************************************************************************************************
   Declaration of function pointers 
  **************************************************************************************************************************/
  
  /**
  * StreamReadCallback - Callback to call for reading a data chunk
  *
  * @param[in] pByteData - Pointer to a buffer to read data into
  * @param[in] nNumBytes - Number of bytes to read
  * @param[in] pStreamHandle - Handle of the stream to read.
  * @param[out] pErrorCode - LibMCData return code (0 for success)
  */
  typedef void(*StreamReadCallback)(LibMCData_pvoid, LibMCData_uint64, LibMCData_pvoid, LibMCData_uint32 *);
  
  /**
  * StreamSeekCallback - Callback to call for seeking in the stream
  *
  * @param[in] nPosition - Position in the stream to move to
  * @param[in] pStreamHandle - Handle of the stream to read.
  * @param[out] pErrorCode - LibMCData return code (0 for success)
  */
  typedef void(*StreamSeekCallback)(LibMCData_uint64, LibMCData_pvoid, LibMCData_uint32 *);
  
} // namespace LibMCData;

// define legacy C-names for enums, structs and function types
typedef LibMCData::eLogLevel eLibMCDataLogLevel;
typedef LibMCData::eDataBaseType eLibMCDataDataBaseType;
typedef LibMCData::eBuildJobStatus eLibMCDataBuildJobStatus;
typedef LibMCData::eBuildJobDataType eLibMCDataBuildJobDataType;
typedef LibMCData::StreamReadCallback LibMCDataStreamReadCallback;
typedef LibMCData::StreamSeekCallback LibMCDataStreamSeekCallback;

#endif // __LIBMCDATA_TYPES_HEADER_CPP
