/*++

Copyright (C) 2021 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.7.0-develop.

Abstract: This is an autogenerated C++ implementation file in order to allow easy
development of Autodesk Machine Control Framework SDK. The functions in this file need to be implemented. It needs to be generated only once.

Interface version: 1.0.0

*/

#include "libamcf_abi.hpp"
#include "libamcf_interfaces.hpp"
#include "libamcf_interfaceexception.hpp"

#include <map>

using namespace LibAMCF::Impl;

LibAMCFResult handleLibAMCFException(IBase * pIBaseClass, ELibAMCFInterfaceException & Exception)
{
	LibAMCFResult errorCode = Exception.getErrorCode();

	if (pIBaseClass != nullptr)
		pIBaseClass->RegisterErrorMessage(Exception.what());

	return errorCode;
}

LibAMCFResult handleStdException(IBase * pIBaseClass, std::exception & Exception)
{
	LibAMCFResult errorCode = LIBAMCF_ERROR_GENERICEXCEPTION;

	if (pIBaseClass != nullptr)
		pIBaseClass->RegisterErrorMessage(Exception.what());

	return errorCode;
}

LibAMCFResult handleUnhandledException(IBase * pIBaseClass)
{
	LibAMCFResult errorCode = LIBAMCF_ERROR_GENERICEXCEPTION;

	if (pIBaseClass != nullptr)
		pIBaseClass->RegisterErrorMessage("Unhandled Exception");

	return errorCode;
}



/*************************************************************************************************************************
 Class implementation for Base
**************************************************************************************************************************/

/*************************************************************************************************************************
 Class implementation for OperationResult
**************************************************************************************************************************/
LibAMCFResult libamcf_operationresult_waitfor(LibAMCF_OperationResult pOperationResult, LibAMCF_uint32 nTimeOut, bool * pOperationFinished)
{
	IBase* pIBaseClass = (IBase *)pOperationResult;

	try {
		if (pOperationFinished == nullptr)
			throw ELibAMCFInterfaceException (LIBAMCF_ERROR_INVALIDPARAM);
		IOperationResult* pIOperationResult = dynamic_cast<IOperationResult*>(pIBaseClass);
		if (!pIOperationResult)
			throw ELibAMCFInterfaceException(LIBAMCF_ERROR_INVALIDCAST);
		
		*pOperationFinished = pIOperationResult->WaitFor(nTimeOut);

		return LIBAMCF_SUCCESS;
	}
	catch (ELibAMCFInterfaceException & Exception) {
		return handleLibAMCFException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibAMCFResult libamcf_operationresult_inprogress(LibAMCF_OperationResult pOperationResult, bool * pOperationIsInProgress)
{
	IBase* pIBaseClass = (IBase *)pOperationResult;

	try {
		if (pOperationIsInProgress == nullptr)
			throw ELibAMCFInterfaceException (LIBAMCF_ERROR_INVALIDPARAM);
		IOperationResult* pIOperationResult = dynamic_cast<IOperationResult*>(pIBaseClass);
		if (!pIOperationResult)
			throw ELibAMCFInterfaceException(LIBAMCF_ERROR_INVALIDCAST);
		
		*pOperationIsInProgress = pIOperationResult->InProgress();

		return LIBAMCF_SUCCESS;
	}
	catch (ELibAMCFInterfaceException & Exception) {
		return handleLibAMCFException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibAMCFResult libamcf_operationresult_success(LibAMCF_OperationResult pOperationResult, bool * pOperationSuccess)
{
	IBase* pIBaseClass = (IBase *)pOperationResult;

	try {
		if (pOperationSuccess == nullptr)
			throw ELibAMCFInterfaceException (LIBAMCF_ERROR_INVALIDPARAM);
		IOperationResult* pIOperationResult = dynamic_cast<IOperationResult*>(pIBaseClass);
		if (!pIOperationResult)
			throw ELibAMCFInterfaceException(LIBAMCF_ERROR_INVALIDCAST);
		
		*pOperationSuccess = pIOperationResult->Success();

		return LIBAMCF_SUCCESS;
	}
	catch (ELibAMCFInterfaceException & Exception) {
		return handleLibAMCFException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibAMCFResult libamcf_operationresult_geterrormessage(LibAMCF_OperationResult pOperationResult, const LibAMCF_uint32 nErrorMessageBufferSize, LibAMCF_uint32* pErrorMessageNeededChars, char * pErrorMessageBuffer)
{
	IBase* pIBaseClass = (IBase *)pOperationResult;

	try {
		if ( (!pErrorMessageBuffer) && !(pErrorMessageNeededChars) )
			throw ELibAMCFInterfaceException (LIBAMCF_ERROR_INVALIDPARAM);
		std::string sErrorMessage("");
		IOperationResult* pIOperationResult = dynamic_cast<IOperationResult*>(pIBaseClass);
		if (!pIOperationResult)
			throw ELibAMCFInterfaceException(LIBAMCF_ERROR_INVALIDCAST);
		
		bool isCacheCall = (pErrorMessageBuffer == nullptr);
		if (isCacheCall) {
			sErrorMessage = pIOperationResult->GetErrorMessage();

			pIOperationResult->_setCache (new ParameterCache_1<std::string> (sErrorMessage));
		}
		else {
			auto cache = dynamic_cast<ParameterCache_1<std::string>*> (pIOperationResult->_getCache ());
			if (cache == nullptr)
				throw ELibAMCFInterfaceException(LIBAMCF_ERROR_INVALIDCAST);
			cache->retrieveData (sErrorMessage);
			pIOperationResult->_setCache (nullptr);
		}
		
		if (pErrorMessageNeededChars)
			*pErrorMessageNeededChars = (LibAMCF_uint32) (sErrorMessage.size()+1);
		if (pErrorMessageBuffer) {
			if (sErrorMessage.size() >= nErrorMessageBufferSize)
				throw ELibAMCFInterfaceException (LIBAMCF_ERROR_BUFFERTOOSMALL);
			for (size_t iErrorMessage = 0; iErrorMessage < sErrorMessage.size(); iErrorMessage++)
				pErrorMessageBuffer[iErrorMessage] = sErrorMessage[iErrorMessage];
			pErrorMessageBuffer[sErrorMessage.size()] = 0;
		}
		return LIBAMCF_SUCCESS;
	}
	catch (ELibAMCFInterfaceException & Exception) {
		return handleLibAMCFException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}


/*************************************************************************************************************************
 Class implementation for DataStream
**************************************************************************************************************************/
LibAMCFResult libamcf_datastream_getuuid(LibAMCF_DataStream pDataStream, const LibAMCF_uint32 nUUIDBufferSize, LibAMCF_uint32* pUUIDNeededChars, char * pUUIDBuffer)
{
	IBase* pIBaseClass = (IBase *)pDataStream;

	try {
		if ( (!pUUIDBuffer) && !(pUUIDNeededChars) )
			throw ELibAMCFInterfaceException (LIBAMCF_ERROR_INVALIDPARAM);
		std::string sUUID("");
		IDataStream* pIDataStream = dynamic_cast<IDataStream*>(pIBaseClass);
		if (!pIDataStream)
			throw ELibAMCFInterfaceException(LIBAMCF_ERROR_INVALIDCAST);
		
		bool isCacheCall = (pUUIDBuffer == nullptr);
		if (isCacheCall) {
			sUUID = pIDataStream->GetUUID();

			pIDataStream->_setCache (new ParameterCache_1<std::string> (sUUID));
		}
		else {
			auto cache = dynamic_cast<ParameterCache_1<std::string>*> (pIDataStream->_getCache ());
			if (cache == nullptr)
				throw ELibAMCFInterfaceException(LIBAMCF_ERROR_INVALIDCAST);
			cache->retrieveData (sUUID);
			pIDataStream->_setCache (nullptr);
		}
		
		if (pUUIDNeededChars)
			*pUUIDNeededChars = (LibAMCF_uint32) (sUUID.size()+1);
		if (pUUIDBuffer) {
			if (sUUID.size() >= nUUIDBufferSize)
				throw ELibAMCFInterfaceException (LIBAMCF_ERROR_BUFFERTOOSMALL);
			for (size_t iUUID = 0; iUUID < sUUID.size(); iUUID++)
				pUUIDBuffer[iUUID] = sUUID[iUUID];
			pUUIDBuffer[sUUID.size()] = 0;
		}
		return LIBAMCF_SUCCESS;
	}
	catch (ELibAMCFInterfaceException & Exception) {
		return handleLibAMCFException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibAMCFResult libamcf_datastream_getcontextuuid(LibAMCF_DataStream pDataStream, const LibAMCF_uint32 nContextUUIDBufferSize, LibAMCF_uint32* pContextUUIDNeededChars, char * pContextUUIDBuffer)
{
	IBase* pIBaseClass = (IBase *)pDataStream;

	try {
		if ( (!pContextUUIDBuffer) && !(pContextUUIDNeededChars) )
			throw ELibAMCFInterfaceException (LIBAMCF_ERROR_INVALIDPARAM);
		std::string sContextUUID("");
		IDataStream* pIDataStream = dynamic_cast<IDataStream*>(pIBaseClass);
		if (!pIDataStream)
			throw ELibAMCFInterfaceException(LIBAMCF_ERROR_INVALIDCAST);
		
		bool isCacheCall = (pContextUUIDBuffer == nullptr);
		if (isCacheCall) {
			sContextUUID = pIDataStream->GetContextUUID();

			pIDataStream->_setCache (new ParameterCache_1<std::string> (sContextUUID));
		}
		else {
			auto cache = dynamic_cast<ParameterCache_1<std::string>*> (pIDataStream->_getCache ());
			if (cache == nullptr)
				throw ELibAMCFInterfaceException(LIBAMCF_ERROR_INVALIDCAST);
			cache->retrieveData (sContextUUID);
			pIDataStream->_setCache (nullptr);
		}
		
		if (pContextUUIDNeededChars)
			*pContextUUIDNeededChars = (LibAMCF_uint32) (sContextUUID.size()+1);
		if (pContextUUIDBuffer) {
			if (sContextUUID.size() >= nContextUUIDBufferSize)
				throw ELibAMCFInterfaceException (LIBAMCF_ERROR_BUFFERTOOSMALL);
			for (size_t iContextUUID = 0; iContextUUID < sContextUUID.size(); iContextUUID++)
				pContextUUIDBuffer[iContextUUID] = sContextUUID[iContextUUID];
			pContextUUIDBuffer[sContextUUID.size()] = 0;
		}
		return LIBAMCF_SUCCESS;
	}
	catch (ELibAMCFInterfaceException & Exception) {
		return handleLibAMCFException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibAMCFResult libamcf_datastream_getname(LibAMCF_DataStream pDataStream, const LibAMCF_uint32 nNameBufferSize, LibAMCF_uint32* pNameNeededChars, char * pNameBuffer)
{
	IBase* pIBaseClass = (IBase *)pDataStream;

	try {
		if ( (!pNameBuffer) && !(pNameNeededChars) )
			throw ELibAMCFInterfaceException (LIBAMCF_ERROR_INVALIDPARAM);
		std::string sName("");
		IDataStream* pIDataStream = dynamic_cast<IDataStream*>(pIBaseClass);
		if (!pIDataStream)
			throw ELibAMCFInterfaceException(LIBAMCF_ERROR_INVALIDCAST);
		
		bool isCacheCall = (pNameBuffer == nullptr);
		if (isCacheCall) {
			sName = pIDataStream->GetName();

			pIDataStream->_setCache (new ParameterCache_1<std::string> (sName));
		}
		else {
			auto cache = dynamic_cast<ParameterCache_1<std::string>*> (pIDataStream->_getCache ());
			if (cache == nullptr)
				throw ELibAMCFInterfaceException(LIBAMCF_ERROR_INVALIDCAST);
			cache->retrieveData (sName);
			pIDataStream->_setCache (nullptr);
		}
		
		if (pNameNeededChars)
			*pNameNeededChars = (LibAMCF_uint32) (sName.size()+1);
		if (pNameBuffer) {
			if (sName.size() >= nNameBufferSize)
				throw ELibAMCFInterfaceException (LIBAMCF_ERROR_BUFFERTOOSMALL);
			for (size_t iName = 0; iName < sName.size(); iName++)
				pNameBuffer[iName] = sName[iName];
			pNameBuffer[sName.size()] = 0;
		}
		return LIBAMCF_SUCCESS;
	}
	catch (ELibAMCFInterfaceException & Exception) {
		return handleLibAMCFException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibAMCFResult libamcf_datastream_getmimetype(LibAMCF_DataStream pDataStream, const LibAMCF_uint32 nMimeTypeBufferSize, LibAMCF_uint32* pMimeTypeNeededChars, char * pMimeTypeBuffer)
{
	IBase* pIBaseClass = (IBase *)pDataStream;

	try {
		if ( (!pMimeTypeBuffer) && !(pMimeTypeNeededChars) )
			throw ELibAMCFInterfaceException (LIBAMCF_ERROR_INVALIDPARAM);
		std::string sMimeType("");
		IDataStream* pIDataStream = dynamic_cast<IDataStream*>(pIBaseClass);
		if (!pIDataStream)
			throw ELibAMCFInterfaceException(LIBAMCF_ERROR_INVALIDCAST);
		
		bool isCacheCall = (pMimeTypeBuffer == nullptr);
		if (isCacheCall) {
			sMimeType = pIDataStream->GetMimeType();

			pIDataStream->_setCache (new ParameterCache_1<std::string> (sMimeType));
		}
		else {
			auto cache = dynamic_cast<ParameterCache_1<std::string>*> (pIDataStream->_getCache ());
			if (cache == nullptr)
				throw ELibAMCFInterfaceException(LIBAMCF_ERROR_INVALIDCAST);
			cache->retrieveData (sMimeType);
			pIDataStream->_setCache (nullptr);
		}
		
		if (pMimeTypeNeededChars)
			*pMimeTypeNeededChars = (LibAMCF_uint32) (sMimeType.size()+1);
		if (pMimeTypeBuffer) {
			if (sMimeType.size() >= nMimeTypeBufferSize)
				throw ELibAMCFInterfaceException (LIBAMCF_ERROR_BUFFERTOOSMALL);
			for (size_t iMimeType = 0; iMimeType < sMimeType.size(); iMimeType++)
				pMimeTypeBuffer[iMimeType] = sMimeType[iMimeType];
			pMimeTypeBuffer[sMimeType.size()] = 0;
		}
		return LIBAMCF_SUCCESS;
	}
	catch (ELibAMCFInterfaceException & Exception) {
		return handleLibAMCFException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibAMCFResult libamcf_datastream_getsize(LibAMCF_DataStream pDataStream, LibAMCF_uint64 * pStreamSize)
{
	IBase* pIBaseClass = (IBase *)pDataStream;

	try {
		if (pStreamSize == nullptr)
			throw ELibAMCFInterfaceException (LIBAMCF_ERROR_INVALIDPARAM);
		IDataStream* pIDataStream = dynamic_cast<IDataStream*>(pIBaseClass);
		if (!pIDataStream)
			throw ELibAMCFInterfaceException(LIBAMCF_ERROR_INVALIDCAST);
		
		*pStreamSize = pIDataStream->GetSize();

		return LIBAMCF_SUCCESS;
	}
	catch (ELibAMCFInterfaceException & Exception) {
		return handleLibAMCFException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}


/*************************************************************************************************************************
 Class implementation for StreamUpload
**************************************************************************************************************************/
LibAMCFResult libamcf_streamupload_getname(LibAMCF_StreamUpload pStreamUpload, const LibAMCF_uint32 nNameBufferSize, LibAMCF_uint32* pNameNeededChars, char * pNameBuffer)
{
	IBase* pIBaseClass = (IBase *)pStreamUpload;

	try {
		if ( (!pNameBuffer) && !(pNameNeededChars) )
			throw ELibAMCFInterfaceException (LIBAMCF_ERROR_INVALIDPARAM);
		std::string sName("");
		IStreamUpload* pIStreamUpload = dynamic_cast<IStreamUpload*>(pIBaseClass);
		if (!pIStreamUpload)
			throw ELibAMCFInterfaceException(LIBAMCF_ERROR_INVALIDCAST);
		
		bool isCacheCall = (pNameBuffer == nullptr);
		if (isCacheCall) {
			sName = pIStreamUpload->GetName();

			pIStreamUpload->_setCache (new ParameterCache_1<std::string> (sName));
		}
		else {
			auto cache = dynamic_cast<ParameterCache_1<std::string>*> (pIStreamUpload->_getCache ());
			if (cache == nullptr)
				throw ELibAMCFInterfaceException(LIBAMCF_ERROR_INVALIDCAST);
			cache->retrieveData (sName);
			pIStreamUpload->_setCache (nullptr);
		}
		
		if (pNameNeededChars)
			*pNameNeededChars = (LibAMCF_uint32) (sName.size()+1);
		if (pNameBuffer) {
			if (sName.size() >= nNameBufferSize)
				throw ELibAMCFInterfaceException (LIBAMCF_ERROR_BUFFERTOOSMALL);
			for (size_t iName = 0; iName < sName.size(); iName++)
				pNameBuffer[iName] = sName[iName];
			pNameBuffer[sName.size()] = 0;
		}
		return LIBAMCF_SUCCESS;
	}
	catch (ELibAMCFInterfaceException & Exception) {
		return handleLibAMCFException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibAMCFResult libamcf_streamupload_getmimetype(LibAMCF_StreamUpload pStreamUpload, const LibAMCF_uint32 nMimeTypeBufferSize, LibAMCF_uint32* pMimeTypeNeededChars, char * pMimeTypeBuffer)
{
	IBase* pIBaseClass = (IBase *)pStreamUpload;

	try {
		if ( (!pMimeTypeBuffer) && !(pMimeTypeNeededChars) )
			throw ELibAMCFInterfaceException (LIBAMCF_ERROR_INVALIDPARAM);
		std::string sMimeType("");
		IStreamUpload* pIStreamUpload = dynamic_cast<IStreamUpload*>(pIBaseClass);
		if (!pIStreamUpload)
			throw ELibAMCFInterfaceException(LIBAMCF_ERROR_INVALIDCAST);
		
		bool isCacheCall = (pMimeTypeBuffer == nullptr);
		if (isCacheCall) {
			sMimeType = pIStreamUpload->GetMimeType();

			pIStreamUpload->_setCache (new ParameterCache_1<std::string> (sMimeType));
		}
		else {
			auto cache = dynamic_cast<ParameterCache_1<std::string>*> (pIStreamUpload->_getCache ());
			if (cache == nullptr)
				throw ELibAMCFInterfaceException(LIBAMCF_ERROR_INVALIDCAST);
			cache->retrieveData (sMimeType);
			pIStreamUpload->_setCache (nullptr);
		}
		
		if (pMimeTypeNeededChars)
			*pMimeTypeNeededChars = (LibAMCF_uint32) (sMimeType.size()+1);
		if (pMimeTypeBuffer) {
			if (sMimeType.size() >= nMimeTypeBufferSize)
				throw ELibAMCFInterfaceException (LIBAMCF_ERROR_BUFFERTOOSMALL);
			for (size_t iMimeType = 0; iMimeType < sMimeType.size(); iMimeType++)
				pMimeTypeBuffer[iMimeType] = sMimeType[iMimeType];
			pMimeTypeBuffer[sMimeType.size()] = 0;
		}
		return LIBAMCF_SUCCESS;
	}
	catch (ELibAMCFInterfaceException & Exception) {
		return handleLibAMCFException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibAMCFResult libamcf_streamupload_getusagecontext(LibAMCF_StreamUpload pStreamUpload, const LibAMCF_uint32 nUsageContextBufferSize, LibAMCF_uint32* pUsageContextNeededChars, char * pUsageContextBuffer)
{
	IBase* pIBaseClass = (IBase *)pStreamUpload;

	try {
		if ( (!pUsageContextBuffer) && !(pUsageContextNeededChars) )
			throw ELibAMCFInterfaceException (LIBAMCF_ERROR_INVALIDPARAM);
		std::string sUsageContext("");
		IStreamUpload* pIStreamUpload = dynamic_cast<IStreamUpload*>(pIBaseClass);
		if (!pIStreamUpload)
			throw ELibAMCFInterfaceException(LIBAMCF_ERROR_INVALIDCAST);
		
		bool isCacheCall = (pUsageContextBuffer == nullptr);
		if (isCacheCall) {
			sUsageContext = pIStreamUpload->GetUsageContext();

			pIStreamUpload->_setCache (new ParameterCache_1<std::string> (sUsageContext));
		}
		else {
			auto cache = dynamic_cast<ParameterCache_1<std::string>*> (pIStreamUpload->_getCache ());
			if (cache == nullptr)
				throw ELibAMCFInterfaceException(LIBAMCF_ERROR_INVALIDCAST);
			cache->retrieveData (sUsageContext);
			pIStreamUpload->_setCache (nullptr);
		}
		
		if (pUsageContextNeededChars)
			*pUsageContextNeededChars = (LibAMCF_uint32) (sUsageContext.size()+1);
		if (pUsageContextBuffer) {
			if (sUsageContext.size() >= nUsageContextBufferSize)
				throw ELibAMCFInterfaceException (LIBAMCF_ERROR_BUFFERTOOSMALL);
			for (size_t iUsageContext = 0; iUsageContext < sUsageContext.size(); iUsageContext++)
				pUsageContextBuffer[iUsageContext] = sUsageContext[iUsageContext];
			pUsageContextBuffer[sUsageContext.size()] = 0;
		}
		return LIBAMCF_SUCCESS;
	}
	catch (ELibAMCFInterfaceException & Exception) {
		return handleLibAMCFException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibAMCFResult libamcf_streamupload_uploaddata(LibAMCF_StreamUpload pStreamUpload, LibAMCF_uint64 nDataBufferSize, const LibAMCF_uint8 * pDataBuffer, LibAMCF_uint32 nChunkSize, LibAMCF_OperationResult * pSuccess)
{
	IBase* pIBaseClass = (IBase *)pStreamUpload;

	try {
		if ( (!pDataBuffer) && (nDataBufferSize>0))
			throw ELibAMCFInterfaceException (LIBAMCF_ERROR_INVALIDPARAM);
		if (pSuccess == nullptr)
			throw ELibAMCFInterfaceException (LIBAMCF_ERROR_INVALIDPARAM);
		IBase* pBaseSuccess(nullptr);
		IStreamUpload* pIStreamUpload = dynamic_cast<IStreamUpload*>(pIBaseClass);
		if (!pIStreamUpload)
			throw ELibAMCFInterfaceException(LIBAMCF_ERROR_INVALIDCAST);
		
		pBaseSuccess = pIStreamUpload->UploadData(nDataBufferSize, pDataBuffer, nChunkSize);

		*pSuccess = (IBase*)(pBaseSuccess);
		return LIBAMCF_SUCCESS;
	}
	catch (ELibAMCFInterfaceException & Exception) {
		return handleLibAMCFException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibAMCFResult libamcf_streamupload_uploadfile(LibAMCF_StreamUpload pStreamUpload, const char * pFileName, LibAMCF_uint32 nChunkSize, LibAMCF_OperationResult * pSuccess)
{
	IBase* pIBaseClass = (IBase *)pStreamUpload;

	try {
		if (pFileName == nullptr)
			throw ELibAMCFInterfaceException (LIBAMCF_ERROR_INVALIDPARAM);
		if (pSuccess == nullptr)
			throw ELibAMCFInterfaceException (LIBAMCF_ERROR_INVALIDPARAM);
		std::string sFileName(pFileName);
		IBase* pBaseSuccess(nullptr);
		IStreamUpload* pIStreamUpload = dynamic_cast<IStreamUpload*>(pIBaseClass);
		if (!pIStreamUpload)
			throw ELibAMCFInterfaceException(LIBAMCF_ERROR_INVALIDCAST);
		
		pBaseSuccess = pIStreamUpload->UploadFile(sFileName, nChunkSize);

		*pSuccess = (IBase*)(pBaseSuccess);
		return LIBAMCF_SUCCESS;
	}
	catch (ELibAMCFInterfaceException & Exception) {
		return handleLibAMCFException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibAMCFResult libamcf_streamupload_beginchunking(LibAMCF_StreamUpload pStreamUpload, LibAMCF_uint64 nDataSize, LibAMCF_OperationResult * pSuccess)
{
	IBase* pIBaseClass = (IBase *)pStreamUpload;

	try {
		if (pSuccess == nullptr)
			throw ELibAMCFInterfaceException (LIBAMCF_ERROR_INVALIDPARAM);
		IBase* pBaseSuccess(nullptr);
		IStreamUpload* pIStreamUpload = dynamic_cast<IStreamUpload*>(pIBaseClass);
		if (!pIStreamUpload)
			throw ELibAMCFInterfaceException(LIBAMCF_ERROR_INVALIDCAST);
		
		pBaseSuccess = pIStreamUpload->BeginChunking(nDataSize);

		*pSuccess = (IBase*)(pBaseSuccess);
		return LIBAMCF_SUCCESS;
	}
	catch (ELibAMCFInterfaceException & Exception) {
		return handleLibAMCFException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibAMCFResult libamcf_streamupload_uploadchunk(LibAMCF_StreamUpload pStreamUpload, LibAMCF_uint64 nDataBufferSize, const LibAMCF_uint8 * pDataBuffer, LibAMCF_OperationResult * pSuccess)
{
	IBase* pIBaseClass = (IBase *)pStreamUpload;

	try {
		if ( (!pDataBuffer) && (nDataBufferSize>0))
			throw ELibAMCFInterfaceException (LIBAMCF_ERROR_INVALIDPARAM);
		if (pSuccess == nullptr)
			throw ELibAMCFInterfaceException (LIBAMCF_ERROR_INVALIDPARAM);
		IBase* pBaseSuccess(nullptr);
		IStreamUpload* pIStreamUpload = dynamic_cast<IStreamUpload*>(pIBaseClass);
		if (!pIStreamUpload)
			throw ELibAMCFInterfaceException(LIBAMCF_ERROR_INVALIDCAST);
		
		pBaseSuccess = pIStreamUpload->UploadChunk(nDataBufferSize, pDataBuffer);

		*pSuccess = (IBase*)(pBaseSuccess);
		return LIBAMCF_SUCCESS;
	}
	catch (ELibAMCFInterfaceException & Exception) {
		return handleLibAMCFException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibAMCFResult libamcf_streamupload_finishchunking(LibAMCF_StreamUpload pStreamUpload, LibAMCF_OperationResult * pSuccess)
{
	IBase* pIBaseClass = (IBase *)pStreamUpload;

	try {
		if (pSuccess == nullptr)
			throw ELibAMCFInterfaceException (LIBAMCF_ERROR_INVALIDPARAM);
		IBase* pBaseSuccess(nullptr);
		IStreamUpload* pIStreamUpload = dynamic_cast<IStreamUpload*>(pIBaseClass);
		if (!pIStreamUpload)
			throw ELibAMCFInterfaceException(LIBAMCF_ERROR_INVALIDCAST);
		
		pBaseSuccess = pIStreamUpload->FinishChunking();

		*pSuccess = (IBase*)(pBaseSuccess);
		return LIBAMCF_SUCCESS;
	}
	catch (ELibAMCFInterfaceException & Exception) {
		return handleLibAMCFException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibAMCFResult libamcf_streamupload_getstatus(LibAMCF_StreamUpload pStreamUpload, LibAMCF_uint64 * pUploadSize, LibAMCF_uint64 * pUploadedBytes, bool * pFinished)
{
	IBase* pIBaseClass = (IBase *)pStreamUpload;

	try {
		if (!pUploadSize)
			throw ELibAMCFInterfaceException (LIBAMCF_ERROR_INVALIDPARAM);
		if (!pUploadedBytes)
			throw ELibAMCFInterfaceException (LIBAMCF_ERROR_INVALIDPARAM);
		if (!pFinished)
			throw ELibAMCFInterfaceException (LIBAMCF_ERROR_INVALIDPARAM);
		IStreamUpload* pIStreamUpload = dynamic_cast<IStreamUpload*>(pIBaseClass);
		if (!pIStreamUpload)
			throw ELibAMCFInterfaceException(LIBAMCF_ERROR_INVALIDCAST);
		
		pIStreamUpload->GetStatus(*pUploadSize, *pUploadedBytes, *pFinished);

		return LIBAMCF_SUCCESS;
	}
	catch (ELibAMCFInterfaceException & Exception) {
		return handleLibAMCFException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibAMCFResult libamcf_streamupload_getdatastream(LibAMCF_StreamUpload pStreamUpload, LibAMCF_DataStream * pDataStream)
{
	IBase* pIBaseClass = (IBase *)pStreamUpload;

	try {
		if (pDataStream == nullptr)
			throw ELibAMCFInterfaceException (LIBAMCF_ERROR_INVALIDPARAM);
		IBase* pBaseDataStream(nullptr);
		IStreamUpload* pIStreamUpload = dynamic_cast<IStreamUpload*>(pIBaseClass);
		if (!pIStreamUpload)
			throw ELibAMCFInterfaceException(LIBAMCF_ERROR_INVALIDCAST);
		
		pBaseDataStream = pIStreamUpload->GetDataStream();

		*pDataStream = (IBase*)(pBaseDataStream);
		return LIBAMCF_SUCCESS;
	}
	catch (ELibAMCFInterfaceException & Exception) {
		return handleLibAMCFException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}


/*************************************************************************************************************************
 Class implementation for Connection
**************************************************************************************************************************/
LibAMCFResult libamcf_connection_getbaseurl(LibAMCF_Connection pConnection, const LibAMCF_uint32 nBaseURLBufferSize, LibAMCF_uint32* pBaseURLNeededChars, char * pBaseURLBuffer)
{
	IBase* pIBaseClass = (IBase *)pConnection;

	try {
		if ( (!pBaseURLBuffer) && !(pBaseURLNeededChars) )
			throw ELibAMCFInterfaceException (LIBAMCF_ERROR_INVALIDPARAM);
		std::string sBaseURL("");
		IConnection* pIConnection = dynamic_cast<IConnection*>(pIBaseClass);
		if (!pIConnection)
			throw ELibAMCFInterfaceException(LIBAMCF_ERROR_INVALIDCAST);
		
		bool isCacheCall = (pBaseURLBuffer == nullptr);
		if (isCacheCall) {
			sBaseURL = pIConnection->GetBaseURL();

			pIConnection->_setCache (new ParameterCache_1<std::string> (sBaseURL));
		}
		else {
			auto cache = dynamic_cast<ParameterCache_1<std::string>*> (pIConnection->_getCache ());
			if (cache == nullptr)
				throw ELibAMCFInterfaceException(LIBAMCF_ERROR_INVALIDCAST);
			cache->retrieveData (sBaseURL);
			pIConnection->_setCache (nullptr);
		}
		
		if (pBaseURLNeededChars)
			*pBaseURLNeededChars = (LibAMCF_uint32) (sBaseURL.size()+1);
		if (pBaseURLBuffer) {
			if (sBaseURL.size() >= nBaseURLBufferSize)
				throw ELibAMCFInterfaceException (LIBAMCF_ERROR_BUFFERTOOSMALL);
			for (size_t iBaseURL = 0; iBaseURL < sBaseURL.size(); iBaseURL++)
				pBaseURLBuffer[iBaseURL] = sBaseURL[iBaseURL];
			pBaseURLBuffer[sBaseURL.size()] = 0;
		}
		return LIBAMCF_SUCCESS;
	}
	catch (ELibAMCFInterfaceException & Exception) {
		return handleLibAMCFException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibAMCFResult libamcf_connection_settimeouts(LibAMCF_Connection pConnection, LibAMCF_uint32 nTimeout, LibAMCF_uint32 nRetryCount)
{
	IBase* pIBaseClass = (IBase *)pConnection;

	try {
		IConnection* pIConnection = dynamic_cast<IConnection*>(pIBaseClass);
		if (!pIConnection)
			throw ELibAMCFInterfaceException(LIBAMCF_ERROR_INVALIDCAST);
		
		pIConnection->SetTimeouts(nTimeout, nRetryCount);

		return LIBAMCF_SUCCESS;
	}
	catch (ELibAMCFInterfaceException & Exception) {
		return handleLibAMCFException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibAMCFResult libamcf_connection_gettimeout(LibAMCF_Connection pConnection, LibAMCF_uint32 * pTimeout)
{
	IBase* pIBaseClass = (IBase *)pConnection;

	try {
		if (pTimeout == nullptr)
			throw ELibAMCFInterfaceException (LIBAMCF_ERROR_INVALIDPARAM);
		IConnection* pIConnection = dynamic_cast<IConnection*>(pIBaseClass);
		if (!pIConnection)
			throw ELibAMCFInterfaceException(LIBAMCF_ERROR_INVALIDCAST);
		
		*pTimeout = pIConnection->GetTimeout();

		return LIBAMCF_SUCCESS;
	}
	catch (ELibAMCFInterfaceException & Exception) {
		return handleLibAMCFException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibAMCFResult libamcf_connection_getretrycount(LibAMCF_Connection pConnection, LibAMCF_uint32 * pRetryCount)
{
	IBase* pIBaseClass = (IBase *)pConnection;

	try {
		if (pRetryCount == nullptr)
			throw ELibAMCFInterfaceException (LIBAMCF_ERROR_INVALIDPARAM);
		IConnection* pIConnection = dynamic_cast<IConnection*>(pIBaseClass);
		if (!pIConnection)
			throw ELibAMCFInterfaceException(LIBAMCF_ERROR_INVALIDCAST);
		
		*pRetryCount = pIConnection->GetRetryCount();

		return LIBAMCF_SUCCESS;
	}
	catch (ELibAMCFInterfaceException & Exception) {
		return handleLibAMCFException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibAMCFResult libamcf_connection_authenticatewithpassword(LibAMCF_Connection pConnection, const char * pUserName, const char * pPassword, LibAMCF_OperationResult * pSuccess)
{
	IBase* pIBaseClass = (IBase *)pConnection;

	try {
		if (pUserName == nullptr)
			throw ELibAMCFInterfaceException (LIBAMCF_ERROR_INVALIDPARAM);
		if (pPassword == nullptr)
			throw ELibAMCFInterfaceException (LIBAMCF_ERROR_INVALIDPARAM);
		if (pSuccess == nullptr)
			throw ELibAMCFInterfaceException (LIBAMCF_ERROR_INVALIDPARAM);
		std::string sUserName(pUserName);
		std::string sPassword(pPassword);
		IBase* pBaseSuccess(nullptr);
		IConnection* pIConnection = dynamic_cast<IConnection*>(pIBaseClass);
		if (!pIConnection)
			throw ELibAMCFInterfaceException(LIBAMCF_ERROR_INVALIDCAST);
		
		pBaseSuccess = pIConnection->AuthenticateWithPassword(sUserName, sPassword);

		*pSuccess = (IBase*)(pBaseSuccess);
		return LIBAMCF_SUCCESS;
	}
	catch (ELibAMCFInterfaceException & Exception) {
		return handleLibAMCFException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibAMCFResult libamcf_connection_isauthenticated(LibAMCF_Connection pConnection, bool * pIsAuthenticated)
{
	IBase* pIBaseClass = (IBase *)pConnection;

	try {
		if (pIsAuthenticated == nullptr)
			throw ELibAMCFInterfaceException (LIBAMCF_ERROR_INVALIDPARAM);
		IConnection* pIConnection = dynamic_cast<IConnection*>(pIBaseClass);
		if (!pIConnection)
			throw ELibAMCFInterfaceException(LIBAMCF_ERROR_INVALIDCAST);
		
		*pIsAuthenticated = pIConnection->IsAuthenticated();

		return LIBAMCF_SUCCESS;
	}
	catch (ELibAMCFInterfaceException & Exception) {
		return handleLibAMCFException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibAMCFResult libamcf_connection_refreshauthentication(LibAMCF_Connection pConnection, LibAMCF_OperationResult * pSuccess)
{
	IBase* pIBaseClass = (IBase *)pConnection;

	try {
		if (pSuccess == nullptr)
			throw ELibAMCFInterfaceException (LIBAMCF_ERROR_INVALIDPARAM);
		IBase* pBaseSuccess(nullptr);
		IConnection* pIConnection = dynamic_cast<IConnection*>(pIBaseClass);
		if (!pIConnection)
			throw ELibAMCFInterfaceException(LIBAMCF_ERROR_INVALIDCAST);
		
		pBaseSuccess = pIConnection->RefreshAuthentication();

		*pSuccess = (IBase*)(pBaseSuccess);
		return LIBAMCF_SUCCESS;
	}
	catch (ELibAMCFInterfaceException & Exception) {
		return handleLibAMCFException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibAMCFResult libamcf_connection_ping(LibAMCF_Connection pConnection, LibAMCF_OperationResult * pSuccess)
{
	IBase* pIBaseClass = (IBase *)pConnection;

	try {
		if (pSuccess == nullptr)
			throw ELibAMCFInterfaceException (LIBAMCF_ERROR_INVALIDPARAM);
		IBase* pBaseSuccess(nullptr);
		IConnection* pIConnection = dynamic_cast<IConnection*>(pIBaseClass);
		if (!pIConnection)
			throw ELibAMCFInterfaceException(LIBAMCF_ERROR_INVALIDCAST);
		
		pBaseSuccess = pIConnection->Ping();

		*pSuccess = (IBase*)(pBaseSuccess);
		return LIBAMCF_SUCCESS;
	}
	catch (ELibAMCFInterfaceException & Exception) {
		return handleLibAMCFException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibAMCFResult libamcf_connection_getauthtoken(LibAMCF_Connection pConnection, const LibAMCF_uint32 nTokenBufferSize, LibAMCF_uint32* pTokenNeededChars, char * pTokenBuffer)
{
	IBase* pIBaseClass = (IBase *)pConnection;

	try {
		if ( (!pTokenBuffer) && !(pTokenNeededChars) )
			throw ELibAMCFInterfaceException (LIBAMCF_ERROR_INVALIDPARAM);
		std::string sToken("");
		IConnection* pIConnection = dynamic_cast<IConnection*>(pIBaseClass);
		if (!pIConnection)
			throw ELibAMCFInterfaceException(LIBAMCF_ERROR_INVALIDCAST);
		
		bool isCacheCall = (pTokenBuffer == nullptr);
		if (isCacheCall) {
			sToken = pIConnection->GetAuthToken();

			pIConnection->_setCache (new ParameterCache_1<std::string> (sToken));
		}
		else {
			auto cache = dynamic_cast<ParameterCache_1<std::string>*> (pIConnection->_getCache ());
			if (cache == nullptr)
				throw ELibAMCFInterfaceException(LIBAMCF_ERROR_INVALIDCAST);
			cache->retrieveData (sToken);
			pIConnection->_setCache (nullptr);
		}
		
		if (pTokenNeededChars)
			*pTokenNeededChars = (LibAMCF_uint32) (sToken.size()+1);
		if (pTokenBuffer) {
			if (sToken.size() >= nTokenBufferSize)
				throw ELibAMCFInterfaceException (LIBAMCF_ERROR_BUFFERTOOSMALL);
			for (size_t iToken = 0; iToken < sToken.size(); iToken++)
				pTokenBuffer[iToken] = sToken[iToken];
			pTokenBuffer[sToken.size()] = 0;
		}
		return LIBAMCF_SUCCESS;
	}
	catch (ELibAMCFInterfaceException & Exception) {
		return handleLibAMCFException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibAMCFResult libamcf_connection_createupload(LibAMCF_Connection pConnection, const char * pName, const char * pMimeType, const char * pUsageContext, LibAMCF_StreamUpload * pInstance)
{
	IBase* pIBaseClass = (IBase *)pConnection;

	try {
		if (pName == nullptr)
			throw ELibAMCFInterfaceException (LIBAMCF_ERROR_INVALIDPARAM);
		if (pMimeType == nullptr)
			throw ELibAMCFInterfaceException (LIBAMCF_ERROR_INVALIDPARAM);
		if (pUsageContext == nullptr)
			throw ELibAMCFInterfaceException (LIBAMCF_ERROR_INVALIDPARAM);
		if (pInstance == nullptr)
			throw ELibAMCFInterfaceException (LIBAMCF_ERROR_INVALIDPARAM);
		std::string sName(pName);
		std::string sMimeType(pMimeType);
		std::string sUsageContext(pUsageContext);
		IBase* pBaseInstance(nullptr);
		IConnection* pIConnection = dynamic_cast<IConnection*>(pIBaseClass);
		if (!pIConnection)
			throw ELibAMCFInterfaceException(LIBAMCF_ERROR_INVALIDCAST);
		
		pBaseInstance = pIConnection->CreateUpload(sName, sMimeType, sUsageContext);

		*pInstance = (IBase*)(pBaseInstance);
		return LIBAMCF_SUCCESS;
	}
	catch (ELibAMCFInterfaceException & Exception) {
		return handleLibAMCFException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}



/*************************************************************************************************************************
 Function table lookup implementation
**************************************************************************************************************************/

LibAMCFResult LibAMCF::Impl::LibAMCF_GetProcAddress (const char * pProcName, void ** ppProcAddress)
{
	if (pProcName == nullptr)
		return LIBAMCF_ERROR_INVALIDPARAM;
	if (ppProcAddress == nullptr)
		return LIBAMCF_ERROR_INVALIDPARAM;
	*ppProcAddress = nullptr;
	std::string sProcName (pProcName);
	
	if (sProcName == "libamcf_operationresult_waitfor") 
		*ppProcAddress = (void*) &libamcf_operationresult_waitfor;
	if (sProcName == "libamcf_operationresult_inprogress") 
		*ppProcAddress = (void*) &libamcf_operationresult_inprogress;
	if (sProcName == "libamcf_operationresult_success") 
		*ppProcAddress = (void*) &libamcf_operationresult_success;
	if (sProcName == "libamcf_operationresult_geterrormessage") 
		*ppProcAddress = (void*) &libamcf_operationresult_geterrormessage;
	if (sProcName == "libamcf_datastream_getuuid") 
		*ppProcAddress = (void*) &libamcf_datastream_getuuid;
	if (sProcName == "libamcf_datastream_getcontextuuid") 
		*ppProcAddress = (void*) &libamcf_datastream_getcontextuuid;
	if (sProcName == "libamcf_datastream_getname") 
		*ppProcAddress = (void*) &libamcf_datastream_getname;
	if (sProcName == "libamcf_datastream_getmimetype") 
		*ppProcAddress = (void*) &libamcf_datastream_getmimetype;
	if (sProcName == "libamcf_datastream_getsize") 
		*ppProcAddress = (void*) &libamcf_datastream_getsize;
	if (sProcName == "libamcf_streamupload_getname") 
		*ppProcAddress = (void*) &libamcf_streamupload_getname;
	if (sProcName == "libamcf_streamupload_getmimetype") 
		*ppProcAddress = (void*) &libamcf_streamupload_getmimetype;
	if (sProcName == "libamcf_streamupload_getusagecontext") 
		*ppProcAddress = (void*) &libamcf_streamupload_getusagecontext;
	if (sProcName == "libamcf_streamupload_uploaddata") 
		*ppProcAddress = (void*) &libamcf_streamupload_uploaddata;
	if (sProcName == "libamcf_streamupload_uploadfile") 
		*ppProcAddress = (void*) &libamcf_streamupload_uploadfile;
	if (sProcName == "libamcf_streamupload_beginchunking") 
		*ppProcAddress = (void*) &libamcf_streamupload_beginchunking;
	if (sProcName == "libamcf_streamupload_uploadchunk") 
		*ppProcAddress = (void*) &libamcf_streamupload_uploadchunk;
	if (sProcName == "libamcf_streamupload_finishchunking") 
		*ppProcAddress = (void*) &libamcf_streamupload_finishchunking;
	if (sProcName == "libamcf_streamupload_getstatus") 
		*ppProcAddress = (void*) &libamcf_streamupload_getstatus;
	if (sProcName == "libamcf_streamupload_getdatastream") 
		*ppProcAddress = (void*) &libamcf_streamupload_getdatastream;
	if (sProcName == "libamcf_connection_getbaseurl") 
		*ppProcAddress = (void*) &libamcf_connection_getbaseurl;
	if (sProcName == "libamcf_connection_settimeouts") 
		*ppProcAddress = (void*) &libamcf_connection_settimeouts;
	if (sProcName == "libamcf_connection_gettimeout") 
		*ppProcAddress = (void*) &libamcf_connection_gettimeout;
	if (sProcName == "libamcf_connection_getretrycount") 
		*ppProcAddress = (void*) &libamcf_connection_getretrycount;
	if (sProcName == "libamcf_connection_authenticatewithpassword") 
		*ppProcAddress = (void*) &libamcf_connection_authenticatewithpassword;
	if (sProcName == "libamcf_connection_isauthenticated") 
		*ppProcAddress = (void*) &libamcf_connection_isauthenticated;
	if (sProcName == "libamcf_connection_refreshauthentication") 
		*ppProcAddress = (void*) &libamcf_connection_refreshauthentication;
	if (sProcName == "libamcf_connection_ping") 
		*ppProcAddress = (void*) &libamcf_connection_ping;
	if (sProcName == "libamcf_connection_getauthtoken") 
		*ppProcAddress = (void*) &libamcf_connection_getauthtoken;
	if (sProcName == "libamcf_connection_createupload") 
		*ppProcAddress = (void*) &libamcf_connection_createupload;
	if (sProcName == "libamcf_getversion") 
		*ppProcAddress = (void*) &libamcf_getversion;
	if (sProcName == "libamcf_getlasterror") 
		*ppProcAddress = (void*) &libamcf_getlasterror;
	if (sProcName == "libamcf_releaseinstance") 
		*ppProcAddress = (void*) &libamcf_releaseinstance;
	if (sProcName == "libamcf_acquireinstance") 
		*ppProcAddress = (void*) &libamcf_acquireinstance;
	if (sProcName == "libamcf_injectcomponent") 
		*ppProcAddress = (void*) &libamcf_injectcomponent;
	if (sProcName == "libamcf_getsymbollookupmethod") 
		*ppProcAddress = (void*) &libamcf_getsymbollookupmethod;
	if (sProcName == "libamcf_createconnection") 
		*ppProcAddress = (void*) &libamcf_createconnection;
	
	if (*ppProcAddress == nullptr) 
		return LIBAMCF_ERROR_COULDNOTFINDLIBRARYEXPORT;
	return LIBAMCF_SUCCESS;
}

/*************************************************************************************************************************
 Global functions implementation
**************************************************************************************************************************/
LibAMCFResult libamcf_getversion(LibAMCF_uint32 * pMajor, LibAMCF_uint32 * pMinor, LibAMCF_uint32 * pMicro)
{
	IBase* pIBaseClass = nullptr;

	try {
		if (!pMajor)
			throw ELibAMCFInterfaceException (LIBAMCF_ERROR_INVALIDPARAM);
		if (!pMinor)
			throw ELibAMCFInterfaceException (LIBAMCF_ERROR_INVALIDPARAM);
		if (!pMicro)
			throw ELibAMCFInterfaceException (LIBAMCF_ERROR_INVALIDPARAM);
		CWrapper::GetVersion(*pMajor, *pMinor, *pMicro);

		return LIBAMCF_SUCCESS;
	}
	catch (ELibAMCFInterfaceException & Exception) {
		return handleLibAMCFException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibAMCFResult libamcf_getlasterror(LibAMCF_Base pInstance, const LibAMCF_uint32 nErrorMessageBufferSize, LibAMCF_uint32* pErrorMessageNeededChars, char * pErrorMessageBuffer, bool * pHasError)
{
	IBase* pIBaseClass = nullptr;

	try {
		if ( (!pErrorMessageBuffer) && !(pErrorMessageNeededChars) )
			throw ELibAMCFInterfaceException (LIBAMCF_ERROR_INVALIDPARAM);
		if (pHasError == nullptr)
			throw ELibAMCFInterfaceException (LIBAMCF_ERROR_INVALIDPARAM);
		IBase* pIBaseClassInstance = (IBase *)pInstance;
		IBase* pIInstance = dynamic_cast<IBase*>(pIBaseClassInstance);
		if (!pIInstance)
			throw ELibAMCFInterfaceException (LIBAMCF_ERROR_INVALIDCAST);
		
		std::string sErrorMessage("");
		*pHasError = CWrapper::GetLastError(pIInstance, sErrorMessage);

		if (pErrorMessageNeededChars)
			*pErrorMessageNeededChars = (LibAMCF_uint32) (sErrorMessage.size()+1);
		if (pErrorMessageBuffer) {
			if (sErrorMessage.size() >= nErrorMessageBufferSize)
				throw ELibAMCFInterfaceException (LIBAMCF_ERROR_BUFFERTOOSMALL);
			for (size_t iErrorMessage = 0; iErrorMessage < sErrorMessage.size(); iErrorMessage++)
				pErrorMessageBuffer[iErrorMessage] = sErrorMessage[iErrorMessage];
			pErrorMessageBuffer[sErrorMessage.size()] = 0;
		}
		return LIBAMCF_SUCCESS;
	}
	catch (ELibAMCFInterfaceException & Exception) {
		return handleLibAMCFException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibAMCFResult libamcf_releaseinstance(LibAMCF_Base pInstance)
{
	IBase* pIBaseClass = nullptr;

	try {
		IBase* pIBaseClassInstance = (IBase *)pInstance;
		IBase* pIInstance = dynamic_cast<IBase*>(pIBaseClassInstance);
		if (!pIInstance)
			throw ELibAMCFInterfaceException (LIBAMCF_ERROR_INVALIDCAST);
		
		CWrapper::ReleaseInstance(pIInstance);

		return LIBAMCF_SUCCESS;
	}
	catch (ELibAMCFInterfaceException & Exception) {
		return handleLibAMCFException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibAMCFResult libamcf_acquireinstance(LibAMCF_Base pInstance)
{
	IBase* pIBaseClass = nullptr;

	try {
		IBase* pIBaseClassInstance = (IBase *)pInstance;
		IBase* pIInstance = dynamic_cast<IBase*>(pIBaseClassInstance);
		if (!pIInstance)
			throw ELibAMCFInterfaceException (LIBAMCF_ERROR_INVALIDCAST);
		
		CWrapper::AcquireInstance(pIInstance);

		return LIBAMCF_SUCCESS;
	}
	catch (ELibAMCFInterfaceException & Exception) {
		return handleLibAMCFException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibAMCFResult libamcf_injectcomponent(const char * pNameSpace, LibAMCF_pvoid pSymbolAddressMethod)
{
	IBase* pIBaseClass = nullptr;

	try {
		if (pNameSpace == nullptr)
			throw ELibAMCFInterfaceException (LIBAMCF_ERROR_INVALIDPARAM);
		std::string sNameSpace(pNameSpace);
		
		bool bNameSpaceFound = false;
		
		
		if (!bNameSpaceFound)
			throw ELibAMCFInterfaceException(LIBAMCF_ERROR_COULDNOTLOADLIBRARY);
		
		return LIBAMCF_SUCCESS;
	}
	catch (ELibAMCFInterfaceException & Exception) {
		return handleLibAMCFException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibAMCFResult libamcf_getsymbollookupmethod(LibAMCF_pvoid * pSymbolLookupMethod)
{
	IBase* pIBaseClass = nullptr;

	try {
		if (pSymbolLookupMethod == nullptr)
			throw ELibAMCFInterfaceException (LIBAMCF_ERROR_INVALIDPARAM);
		*pSymbolLookupMethod = (void*)&LibAMCF::Impl::LibAMCF_GetProcAddress;
		return LIBAMCF_SUCCESS;
	}
	catch (ELibAMCFInterfaceException & Exception) {
		return handleLibAMCFException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibAMCFResult libamcf_createconnection(const char * pBaseURL, LibAMCF_Connection * pInstance)
{
	IBase* pIBaseClass = nullptr;

	try {
		if (pBaseURL == nullptr)
			throw ELibAMCFInterfaceException (LIBAMCF_ERROR_INVALIDPARAM);
		if (pInstance == nullptr)
			throw ELibAMCFInterfaceException (LIBAMCF_ERROR_INVALIDPARAM);
		std::string sBaseURL(pBaseURL);
		IBase* pBaseInstance(nullptr);
		pBaseInstance = CWrapper::CreateConnection(sBaseURL);

		*pInstance = (IBase*)(pBaseInstance);
		return LIBAMCF_SUCCESS;
	}
	catch (ELibAMCFInterfaceException & Exception) {
		return handleLibAMCFException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}


