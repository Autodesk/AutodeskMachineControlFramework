/*++

Copyright (C) 2021 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.7.0-develop.

Abstract: This is an autogenerated C++-Header file in order to allow an easy
 use of Autodesk Machine Control Framework SDK

Interface version: 1.0.0

*/

#ifndef __LIBAMCF_CPPHEADER_DYNAMIC_CPP
#define __LIBAMCF_CPPHEADER_DYNAMIC_CPP

#include "libamcf_types.hpp"
#include "libamcf_dynamic.h"


#ifdef _WIN32
#include <windows.h>
#else // _WIN32
#include <dlfcn.h>
#endif // _WIN32
#include <string>
#include <memory>
#include <vector>
#include <exception>

namespace LibAMCF {

/*************************************************************************************************************************
 Forward Declaration of all classes
**************************************************************************************************************************/
class CWrapper;
class CBase;
class COperationResult;
class CDataStream;
class CStreamUpload;
class CConnection;

/*************************************************************************************************************************
 Declaration of deprecated class types
**************************************************************************************************************************/
typedef CWrapper CLibAMCFWrapper;
typedef CBase CLibAMCFBase;
typedef COperationResult CLibAMCFOperationResult;
typedef CDataStream CLibAMCFDataStream;
typedef CStreamUpload CLibAMCFStreamUpload;
typedef CConnection CLibAMCFConnection;

/*************************************************************************************************************************
 Declaration of shared pointer types
**************************************************************************************************************************/
typedef std::shared_ptr<CWrapper> PWrapper;
typedef std::shared_ptr<CBase> PBase;
typedef std::shared_ptr<COperationResult> POperationResult;
typedef std::shared_ptr<CDataStream> PDataStream;
typedef std::shared_ptr<CStreamUpload> PStreamUpload;
typedef std::shared_ptr<CConnection> PConnection;

/*************************************************************************************************************************
 Declaration of deprecated shared pointer types
**************************************************************************************************************************/
typedef PWrapper PLibAMCFWrapper;
typedef PBase PLibAMCFBase;
typedef POperationResult PLibAMCFOperationResult;
typedef PDataStream PLibAMCFDataStream;
typedef PStreamUpload PLibAMCFStreamUpload;
typedef PConnection PLibAMCFConnection;


/*************************************************************************************************************************
 classParam Definition
**************************************************************************************************************************/

template<class T> class classParam {
private:
	const T* m_ptr;

public:
	classParam(const T* ptr)
		: m_ptr (ptr)
	{
	}

	classParam(std::shared_ptr <T> sharedPtr)
		: m_ptr (sharedPtr.get())
	{
	}

	LibAMCFHandle GetHandle()
	{
		if (m_ptr != nullptr)
			return m_ptr->handle();
		return nullptr;
	}
};

/*************************************************************************************************************************
 Class ELibAMCFException 
**************************************************************************************************************************/
class ELibAMCFException : public std::exception {
protected:
	/**
	* Error code for the Exception.
	*/
	LibAMCFResult m_errorCode;
	/**
	* Error message for the Exception.
	*/
	std::string m_errorMessage;

public:
	/**
	* Exception Constructor.
	*/
	ELibAMCFException(LibAMCFResult errorCode, const std::string & sErrorMessage)
		: m_errorMessage("LibAMCF Error " + std::to_string(errorCode) + " (" + sErrorMessage + ")")
	{
		m_errorCode = errorCode;
	}

	/**
	* Returns error code
	*/
	LibAMCFResult getErrorCode() const noexcept
	{
		return m_errorCode;
	}

	/**
	* Returns error message
	*/
	const char* what() const noexcept
	{
		return m_errorMessage.c_str();
	}

};

/*************************************************************************************************************************
 Class CInputVector
**************************************************************************************************************************/
template <typename T>
class CInputVector {
private:
	
	const T* m_data;
	size_t m_size;
	
public:
	
	CInputVector( const std::vector<T>& vec)
		: m_data( vec.data() ), m_size( vec.size() )
	{
	}
	
	CInputVector( const T* in_data, size_t in_size)
		: m_data( in_data ), m_size(in_size )
	{
	}
	
	const T* data() const
	{
		return m_data;
	}
	
	size_t size() const
	{
		return m_size;
	}
	
};

// declare deprecated class name
template<typename T>
using CLibAMCFInputVector = CInputVector<T>;

/*************************************************************************************************************************
 Class CWrapper 
**************************************************************************************************************************/
class CWrapper {
public:
	
	CWrapper(void* pSymbolLookupMethod)
	{
		CheckError(nullptr, initWrapperTable(&m_WrapperTable));
		CheckError(nullptr, loadWrapperTableFromSymbolLookupMethod(&m_WrapperTable, pSymbolLookupMethod));
		
		CheckError(nullptr, checkBinaryVersion());
	}
	
	CWrapper(const std::string &sFileName)
	{
		CheckError(nullptr, initWrapperTable(&m_WrapperTable));
		CheckError(nullptr, loadWrapperTable(&m_WrapperTable, sFileName.c_str()));
		
		CheckError(nullptr, checkBinaryVersion());
	}
	
	static PWrapper loadLibrary(const std::string &sFileName)
	{
		return std::make_shared<CWrapper>(sFileName);
	}
	
	static PWrapper loadLibraryFromSymbolLookupMethod(void* pSymbolLookupMethod)
	{
		return std::make_shared<CWrapper>(pSymbolLookupMethod);
	}
	
	~CWrapper()
	{
		releaseWrapperTable(&m_WrapperTable);
	}
	
	inline void CheckError(CBase * pBaseClass, LibAMCFResult nResult);

	inline void GetVersion(LibAMCF_uint32 & nMajor, LibAMCF_uint32 & nMinor, LibAMCF_uint32 & nMicro);
	inline bool GetLastError(classParam<CBase> pInstance, std::string & sErrorMessage);
	inline void ReleaseInstance(classParam<CBase> pInstance);
	inline void AcquireInstance(classParam<CBase> pInstance);
	inline void InjectComponent(const std::string & sNameSpace, const LibAMCF_pvoid pSymbolAddressMethod);
	inline LibAMCF_pvoid GetSymbolLookupMethod();
	inline PConnection CreateConnection(const std::string & sBaseURL);

private:
	sLibAMCFDynamicWrapperTable m_WrapperTable;
	
	LibAMCFResult checkBinaryVersion()
	{
		LibAMCF_uint32 nMajor, nMinor, nMicro;
		GetVersion(nMajor, nMinor, nMicro);
		if ( (nMajor != LIBAMCF_VERSION_MAJOR) || (nMinor < LIBAMCF_VERSION_MINOR) ) {
			return LIBAMCF_ERROR_INCOMPATIBLEBINARYVERSION;
		}
		return LIBAMCF_SUCCESS;
	}
	LibAMCFResult initWrapperTable(sLibAMCFDynamicWrapperTable * pWrapperTable);
	LibAMCFResult releaseWrapperTable(sLibAMCFDynamicWrapperTable * pWrapperTable);
	LibAMCFResult loadWrapperTable(sLibAMCFDynamicWrapperTable * pWrapperTable, const char * pLibraryFileName);
	LibAMCFResult loadWrapperTableFromSymbolLookupMethod(sLibAMCFDynamicWrapperTable * pWrapperTable, void* pSymbolLookupMethod);

	friend class CBase;
	friend class COperationResult;
	friend class CDataStream;
	friend class CStreamUpload;
	friend class CConnection;

};

	
/*************************************************************************************************************************
 Class CBase 
**************************************************************************************************************************/
class CBase {
public:
	
protected:
	/* Wrapper Object that created the class. */
	CWrapper * m_pWrapper;
	/* Handle to Instance in library*/
	LibAMCFHandle m_pHandle;

	/* Checks for an Error code and raises Exceptions */
	void CheckError(LibAMCFResult nResult)
	{
		if (m_pWrapper != nullptr)
			m_pWrapper->CheckError(this, nResult);
	}
public:
	/**
	* CBase::CBase - Constructor for Base class.
	*/
	CBase(CWrapper * pWrapper, LibAMCFHandle pHandle)
		: m_pWrapper(pWrapper), m_pHandle(pHandle)
	{
	}

	/**
	* CBase::~CBase - Destructor for Base class.
	*/
	virtual ~CBase()
	{
		if (m_pWrapper != nullptr)
			m_pWrapper->ReleaseInstance(this);
		m_pWrapper = nullptr;
	}

	/**
	* CBase::handle - Returns handle to instance.
	*/
	LibAMCFHandle handle() const
	{
		return m_pHandle;
	}

	/**
	* CBase::wrapper - Returns wrapper instance.
	*/
	CWrapper * wrapper() const
	{
		return m_pWrapper;
	}
	
	friend class CWrapper;
};
	
/*************************************************************************************************************************
 Class COperationResult 
**************************************************************************************************************************/
class COperationResult : public CBase {
public:
	
	/**
	* COperationResult::COperationResult - Constructor for OperationResult class.
	*/
	COperationResult(CWrapper* pWrapper, LibAMCFHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline bool WaitFor(const LibAMCF_uint32 nTimeOut);
	inline void EnsureSuccess();
	inline bool InProgress();
	inline bool Success();
	inline std::string GetErrorMessage();
};
	
/*************************************************************************************************************************
 Class CDataStream 
**************************************************************************************************************************/
class CDataStream : public CBase {
public:
	
	/**
	* CDataStream::CDataStream - Constructor for DataStream class.
	*/
	CDataStream(CWrapper* pWrapper, LibAMCFHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline std::string GetUUID();
	inline void GetContext(eStreamContextType & eContextType, std::string & sOwnerUUID);
	inline std::string GetName();
	inline std::string GetMimeType();
	inline std::string GetSHA256();
	inline LibAMCF_uint64 GetSize();
	inline std::string GetTimestamp();
};
	
/*************************************************************************************************************************
 Class CStreamUpload 
**************************************************************************************************************************/
class CStreamUpload : public CBase {
public:
	
	/**
	* CStreamUpload::CStreamUpload - Constructor for StreamUpload class.
	*/
	CStreamUpload(CWrapper* pWrapper, LibAMCFHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline std::string GetName();
	inline std::string GetMimeType();
	inline eStreamContextType GetContextType();
	inline POperationResult UploadData(const CInputVector<LibAMCF_uint8> & DataBuffer, const LibAMCF_uint32 nChunkSize, const LibAMCF_uint32 nThreadCount);
	inline POperationResult UploadFile(const std::string & sFileName, const LibAMCF_uint32 nChunkSize, const LibAMCF_uint32 nThreadCount);
	inline POperationResult BeginChunking(const LibAMCF_uint64 nDataSize);
	inline POperationResult UploadChunk(const CInputVector<LibAMCF_uint8> & DataBuffer);
	inline POperationResult FinishChunking();
	inline void GetStatus(LibAMCF_uint64 & nUploadSize, LibAMCF_uint64 & nFinishedSize, LibAMCF_uint64 & nInProgressSize, bool & bFinished);
	inline PDataStream GetDataStream();
};
	
/*************************************************************************************************************************
 Class CConnection 
**************************************************************************************************************************/
class CConnection : public CBase {
public:
	
	/**
	* CConnection::CConnection - Constructor for Connection class.
	*/
	CConnection(CWrapper* pWrapper, LibAMCFHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline std::string GetBaseURL();
	inline void SetTimeouts(const LibAMCF_uint32 nTimeout, const LibAMCF_uint32 nRetryCount);
	inline LibAMCF_uint32 GetTimeout();
	inline LibAMCF_uint32 GetRetryCount();
	inline POperationResult AuthenticateWithPassword(const std::string & sUserName, const std::string & sPassword);
	inline bool IsAuthenticated();
	inline POperationResult RefreshAuthentication();
	inline POperationResult Ping();
	inline std::string GetAuthToken();
	inline PStreamUpload CreateUpload(const std::string & sName, const std::string & sMimeType, const eStreamContextType eContextType);
	inline POperationResult PrepareBuild(classParam<CDataStream> pDataStream);
};
	
	/**
	* CWrapper::GetVersion - retrieves the binary version of this library.
	* @param[out] nMajor - returns the major version of this library
	* @param[out] nMinor - returns the minor version of this library
	* @param[out] nMicro - returns the micro version of this library
	*/
	inline void CWrapper::GetVersion(LibAMCF_uint32 & nMajor, LibAMCF_uint32 & nMinor, LibAMCF_uint32 & nMicro)
	{
		CheckError(nullptr,m_WrapperTable.m_GetVersion(&nMajor, &nMinor, &nMicro));
	}
	
	/**
	* CWrapper::GetLastError - Returns the last error recorded on this object
	* @param[in] pInstance - Instance Handle
	* @param[out] sErrorMessage - Message of the last error
	* @return Is there a last error to query
	*/
	inline bool CWrapper::GetLastError(classParam<CBase> pInstance, std::string & sErrorMessage)
	{
		LibAMCFHandle hInstance = pInstance.GetHandle();
		LibAMCF_uint32 bytesNeededErrorMessage = 0;
		LibAMCF_uint32 bytesWrittenErrorMessage = 0;
		bool resultHasError = 0;
		CheckError(nullptr,m_WrapperTable.m_GetLastError(hInstance, 0, &bytesNeededErrorMessage, nullptr, &resultHasError));
		std::vector<char> bufferErrorMessage(bytesNeededErrorMessage);
		CheckError(nullptr,m_WrapperTable.m_GetLastError(hInstance, bytesNeededErrorMessage, &bytesWrittenErrorMessage, &bufferErrorMessage[0], &resultHasError));
		sErrorMessage = std::string(&bufferErrorMessage[0]);
		
		return resultHasError;
	}
	
	/**
	* CWrapper::ReleaseInstance - Releases shared ownership of an Instance
	* @param[in] pInstance - Instance Handle
	*/
	inline void CWrapper::ReleaseInstance(classParam<CBase> pInstance)
	{
		LibAMCFHandle hInstance = pInstance.GetHandle();
		CheckError(nullptr,m_WrapperTable.m_ReleaseInstance(hInstance));
	}
	
	/**
	* CWrapper::AcquireInstance - Acquires shared ownership of an Instance
	* @param[in] pInstance - Instance Handle
	*/
	inline void CWrapper::AcquireInstance(classParam<CBase> pInstance)
	{
		LibAMCFHandle hInstance = pInstance.GetHandle();
		CheckError(nullptr,m_WrapperTable.m_AcquireInstance(hInstance));
	}
	
	/**
	* CWrapper::InjectComponent - Injects an imported component for usage within this component
	* @param[in] sNameSpace - NameSpace of the injected component
	* @param[in] pSymbolAddressMethod - Address of the SymbolAddressMethod of the injected component
	*/
	inline void CWrapper::InjectComponent(const std::string & sNameSpace, const LibAMCF_pvoid pSymbolAddressMethod)
	{
		CheckError(nullptr,m_WrapperTable.m_InjectComponent(sNameSpace.c_str(), pSymbolAddressMethod));
		
		bool bNameSpaceFound = false;
		if (!bNameSpaceFound)
			throw ELibAMCFException(LIBAMCF_ERROR_COULDNOTLOADLIBRARY, "Unknown namespace " + sNameSpace);
	}
	
	/**
	* CWrapper::GetSymbolLookupMethod - Returns the address of the SymbolLookupMethod
	* @return Address of the SymbolAddressMethod
	*/
	inline LibAMCF_pvoid CWrapper::GetSymbolLookupMethod()
	{
		LibAMCF_pvoid resultSymbolLookupMethod = 0;
		CheckError(nullptr,m_WrapperTable.m_GetSymbolLookupMethod(&resultSymbolLookupMethod));
		
		return resultSymbolLookupMethod;
	}
	
	/**
	* CWrapper::CreateConnection - Creates a AMCF connection instance.
	* @param[in] sBaseURL - Base URL of the AMCF Instance.
	* @return New Connection instance
	*/
	inline PConnection CWrapper::CreateConnection(const std::string & sBaseURL)
	{
		LibAMCFHandle hInstance = nullptr;
		CheckError(nullptr,m_WrapperTable.m_CreateConnection(sBaseURL.c_str(), &hInstance));
		
		if (!hInstance) {
			CheckError(nullptr,LIBAMCF_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CConnection>(this, hInstance);
	}
	
	inline void CWrapper::CheckError(CBase * pBaseClass, LibAMCFResult nResult)
	{
		if (nResult != 0) {
			std::string sErrorMessage;
			if (pBaseClass != nullptr) {
				GetLastError(pBaseClass, sErrorMessage);
			}
			throw ELibAMCFException(nResult, sErrorMessage);
		}
	}
	

	inline LibAMCFResult CWrapper::initWrapperTable(sLibAMCFDynamicWrapperTable * pWrapperTable)
	{
		if (pWrapperTable == nullptr)
			return LIBAMCF_ERROR_INVALIDPARAM;
		
		pWrapperTable->m_LibraryHandle = nullptr;
		pWrapperTable->m_OperationResult_WaitFor = nullptr;
		pWrapperTable->m_OperationResult_EnsureSuccess = nullptr;
		pWrapperTable->m_OperationResult_InProgress = nullptr;
		pWrapperTable->m_OperationResult_Success = nullptr;
		pWrapperTable->m_OperationResult_GetErrorMessage = nullptr;
		pWrapperTable->m_DataStream_GetUUID = nullptr;
		pWrapperTable->m_DataStream_GetContext = nullptr;
		pWrapperTable->m_DataStream_GetName = nullptr;
		pWrapperTable->m_DataStream_GetMimeType = nullptr;
		pWrapperTable->m_DataStream_GetSHA256 = nullptr;
		pWrapperTable->m_DataStream_GetSize = nullptr;
		pWrapperTable->m_DataStream_GetTimestamp = nullptr;
		pWrapperTable->m_StreamUpload_GetName = nullptr;
		pWrapperTable->m_StreamUpload_GetMimeType = nullptr;
		pWrapperTable->m_StreamUpload_GetContextType = nullptr;
		pWrapperTable->m_StreamUpload_UploadData = nullptr;
		pWrapperTable->m_StreamUpload_UploadFile = nullptr;
		pWrapperTable->m_StreamUpload_BeginChunking = nullptr;
		pWrapperTable->m_StreamUpload_UploadChunk = nullptr;
		pWrapperTable->m_StreamUpload_FinishChunking = nullptr;
		pWrapperTable->m_StreamUpload_GetStatus = nullptr;
		pWrapperTable->m_StreamUpload_GetDataStream = nullptr;
		pWrapperTable->m_Connection_GetBaseURL = nullptr;
		pWrapperTable->m_Connection_SetTimeouts = nullptr;
		pWrapperTable->m_Connection_GetTimeout = nullptr;
		pWrapperTable->m_Connection_GetRetryCount = nullptr;
		pWrapperTable->m_Connection_AuthenticateWithPassword = nullptr;
		pWrapperTable->m_Connection_IsAuthenticated = nullptr;
		pWrapperTable->m_Connection_RefreshAuthentication = nullptr;
		pWrapperTable->m_Connection_Ping = nullptr;
		pWrapperTable->m_Connection_GetAuthToken = nullptr;
		pWrapperTable->m_Connection_CreateUpload = nullptr;
		pWrapperTable->m_Connection_PrepareBuild = nullptr;
		pWrapperTable->m_GetVersion = nullptr;
		pWrapperTable->m_GetLastError = nullptr;
		pWrapperTable->m_ReleaseInstance = nullptr;
		pWrapperTable->m_AcquireInstance = nullptr;
		pWrapperTable->m_InjectComponent = nullptr;
		pWrapperTable->m_GetSymbolLookupMethod = nullptr;
		pWrapperTable->m_CreateConnection = nullptr;
		
		return LIBAMCF_SUCCESS;
	}

	inline LibAMCFResult CWrapper::releaseWrapperTable(sLibAMCFDynamicWrapperTable * pWrapperTable)
	{
		if (pWrapperTable == nullptr)
			return LIBAMCF_ERROR_INVALIDPARAM;
		
		if (pWrapperTable->m_LibraryHandle != nullptr) {
		#ifdef _WIN32
			HMODULE hModule = (HMODULE) pWrapperTable->m_LibraryHandle;
			FreeLibrary(hModule);
		#else // _WIN32
			dlclose(pWrapperTable->m_LibraryHandle);
		#endif // _WIN32
			return initWrapperTable(pWrapperTable);
		}
		
		return LIBAMCF_SUCCESS;
	}

	inline LibAMCFResult CWrapper::loadWrapperTable(sLibAMCFDynamicWrapperTable * pWrapperTable, const char * pLibraryFileName)
	{
		if (pWrapperTable == nullptr)
			return LIBAMCF_ERROR_INVALIDPARAM;
		if (pLibraryFileName == nullptr)
			return LIBAMCF_ERROR_INVALIDPARAM;
		
		#ifdef _WIN32
		// Convert filename to UTF16-string
		int nLength = (int)strlen(pLibraryFileName);
		int nBufferSize = nLength * 2 + 2;
		std::vector<wchar_t> wsLibraryFileName(nBufferSize);
		int nResult = MultiByteToWideChar(CP_UTF8, 0, pLibraryFileName, nLength, &wsLibraryFileName[0], nBufferSize);
		if (nResult == 0)
			return LIBAMCF_ERROR_COULDNOTLOADLIBRARY;
		
		HMODULE hLibrary = LoadLibraryW(wsLibraryFileName.data());
		if (hLibrary == 0) 
			return LIBAMCF_ERROR_COULDNOTLOADLIBRARY;
		#else // _WIN32
		void* hLibrary = dlopen(pLibraryFileName, RTLD_LAZY);
		if (hLibrary == 0) 
			return LIBAMCF_ERROR_COULDNOTLOADLIBRARY;
		dlerror();
		#endif // _WIN32
		
		#ifdef _WIN32
		pWrapperTable->m_OperationResult_WaitFor = (PLibAMCFOperationResult_WaitForPtr) GetProcAddress(hLibrary, "libamcf_operationresult_waitfor");
		#else // _WIN32
		pWrapperTable->m_OperationResult_WaitFor = (PLibAMCFOperationResult_WaitForPtr) dlsym(hLibrary, "libamcf_operationresult_waitfor");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_OperationResult_WaitFor == nullptr)
			return LIBAMCF_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_OperationResult_EnsureSuccess = (PLibAMCFOperationResult_EnsureSuccessPtr) GetProcAddress(hLibrary, "libamcf_operationresult_ensuresuccess");
		#else // _WIN32
		pWrapperTable->m_OperationResult_EnsureSuccess = (PLibAMCFOperationResult_EnsureSuccessPtr) dlsym(hLibrary, "libamcf_operationresult_ensuresuccess");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_OperationResult_EnsureSuccess == nullptr)
			return LIBAMCF_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_OperationResult_InProgress = (PLibAMCFOperationResult_InProgressPtr) GetProcAddress(hLibrary, "libamcf_operationresult_inprogress");
		#else // _WIN32
		pWrapperTable->m_OperationResult_InProgress = (PLibAMCFOperationResult_InProgressPtr) dlsym(hLibrary, "libamcf_operationresult_inprogress");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_OperationResult_InProgress == nullptr)
			return LIBAMCF_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_OperationResult_Success = (PLibAMCFOperationResult_SuccessPtr) GetProcAddress(hLibrary, "libamcf_operationresult_success");
		#else // _WIN32
		pWrapperTable->m_OperationResult_Success = (PLibAMCFOperationResult_SuccessPtr) dlsym(hLibrary, "libamcf_operationresult_success");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_OperationResult_Success == nullptr)
			return LIBAMCF_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_OperationResult_GetErrorMessage = (PLibAMCFOperationResult_GetErrorMessagePtr) GetProcAddress(hLibrary, "libamcf_operationresult_geterrormessage");
		#else // _WIN32
		pWrapperTable->m_OperationResult_GetErrorMessage = (PLibAMCFOperationResult_GetErrorMessagePtr) dlsym(hLibrary, "libamcf_operationresult_geterrormessage");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_OperationResult_GetErrorMessage == nullptr)
			return LIBAMCF_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_DataStream_GetUUID = (PLibAMCFDataStream_GetUUIDPtr) GetProcAddress(hLibrary, "libamcf_datastream_getuuid");
		#else // _WIN32
		pWrapperTable->m_DataStream_GetUUID = (PLibAMCFDataStream_GetUUIDPtr) dlsym(hLibrary, "libamcf_datastream_getuuid");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_DataStream_GetUUID == nullptr)
			return LIBAMCF_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_DataStream_GetContext = (PLibAMCFDataStream_GetContextPtr) GetProcAddress(hLibrary, "libamcf_datastream_getcontext");
		#else // _WIN32
		pWrapperTable->m_DataStream_GetContext = (PLibAMCFDataStream_GetContextPtr) dlsym(hLibrary, "libamcf_datastream_getcontext");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_DataStream_GetContext == nullptr)
			return LIBAMCF_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_DataStream_GetName = (PLibAMCFDataStream_GetNamePtr) GetProcAddress(hLibrary, "libamcf_datastream_getname");
		#else // _WIN32
		pWrapperTable->m_DataStream_GetName = (PLibAMCFDataStream_GetNamePtr) dlsym(hLibrary, "libamcf_datastream_getname");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_DataStream_GetName == nullptr)
			return LIBAMCF_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_DataStream_GetMimeType = (PLibAMCFDataStream_GetMimeTypePtr) GetProcAddress(hLibrary, "libamcf_datastream_getmimetype");
		#else // _WIN32
		pWrapperTable->m_DataStream_GetMimeType = (PLibAMCFDataStream_GetMimeTypePtr) dlsym(hLibrary, "libamcf_datastream_getmimetype");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_DataStream_GetMimeType == nullptr)
			return LIBAMCF_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_DataStream_GetSHA256 = (PLibAMCFDataStream_GetSHA256Ptr) GetProcAddress(hLibrary, "libamcf_datastream_getsha256");
		#else // _WIN32
		pWrapperTable->m_DataStream_GetSHA256 = (PLibAMCFDataStream_GetSHA256Ptr) dlsym(hLibrary, "libamcf_datastream_getsha256");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_DataStream_GetSHA256 == nullptr)
			return LIBAMCF_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_DataStream_GetSize = (PLibAMCFDataStream_GetSizePtr) GetProcAddress(hLibrary, "libamcf_datastream_getsize");
		#else // _WIN32
		pWrapperTable->m_DataStream_GetSize = (PLibAMCFDataStream_GetSizePtr) dlsym(hLibrary, "libamcf_datastream_getsize");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_DataStream_GetSize == nullptr)
			return LIBAMCF_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_DataStream_GetTimestamp = (PLibAMCFDataStream_GetTimestampPtr) GetProcAddress(hLibrary, "libamcf_datastream_gettimestamp");
		#else // _WIN32
		pWrapperTable->m_DataStream_GetTimestamp = (PLibAMCFDataStream_GetTimestampPtr) dlsym(hLibrary, "libamcf_datastream_gettimestamp");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_DataStream_GetTimestamp == nullptr)
			return LIBAMCF_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_StreamUpload_GetName = (PLibAMCFStreamUpload_GetNamePtr) GetProcAddress(hLibrary, "libamcf_streamupload_getname");
		#else // _WIN32
		pWrapperTable->m_StreamUpload_GetName = (PLibAMCFStreamUpload_GetNamePtr) dlsym(hLibrary, "libamcf_streamupload_getname");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_StreamUpload_GetName == nullptr)
			return LIBAMCF_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_StreamUpload_GetMimeType = (PLibAMCFStreamUpload_GetMimeTypePtr) GetProcAddress(hLibrary, "libamcf_streamupload_getmimetype");
		#else // _WIN32
		pWrapperTable->m_StreamUpload_GetMimeType = (PLibAMCFStreamUpload_GetMimeTypePtr) dlsym(hLibrary, "libamcf_streamupload_getmimetype");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_StreamUpload_GetMimeType == nullptr)
			return LIBAMCF_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_StreamUpload_GetContextType = (PLibAMCFStreamUpload_GetContextTypePtr) GetProcAddress(hLibrary, "libamcf_streamupload_getcontexttype");
		#else // _WIN32
		pWrapperTable->m_StreamUpload_GetContextType = (PLibAMCFStreamUpload_GetContextTypePtr) dlsym(hLibrary, "libamcf_streamupload_getcontexttype");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_StreamUpload_GetContextType == nullptr)
			return LIBAMCF_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_StreamUpload_UploadData = (PLibAMCFStreamUpload_UploadDataPtr) GetProcAddress(hLibrary, "libamcf_streamupload_uploaddata");
		#else // _WIN32
		pWrapperTable->m_StreamUpload_UploadData = (PLibAMCFStreamUpload_UploadDataPtr) dlsym(hLibrary, "libamcf_streamupload_uploaddata");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_StreamUpload_UploadData == nullptr)
			return LIBAMCF_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_StreamUpload_UploadFile = (PLibAMCFStreamUpload_UploadFilePtr) GetProcAddress(hLibrary, "libamcf_streamupload_uploadfile");
		#else // _WIN32
		pWrapperTable->m_StreamUpload_UploadFile = (PLibAMCFStreamUpload_UploadFilePtr) dlsym(hLibrary, "libamcf_streamupload_uploadfile");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_StreamUpload_UploadFile == nullptr)
			return LIBAMCF_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_StreamUpload_BeginChunking = (PLibAMCFStreamUpload_BeginChunkingPtr) GetProcAddress(hLibrary, "libamcf_streamupload_beginchunking");
		#else // _WIN32
		pWrapperTable->m_StreamUpload_BeginChunking = (PLibAMCFStreamUpload_BeginChunkingPtr) dlsym(hLibrary, "libamcf_streamupload_beginchunking");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_StreamUpload_BeginChunking == nullptr)
			return LIBAMCF_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_StreamUpload_UploadChunk = (PLibAMCFStreamUpload_UploadChunkPtr) GetProcAddress(hLibrary, "libamcf_streamupload_uploadchunk");
		#else // _WIN32
		pWrapperTable->m_StreamUpload_UploadChunk = (PLibAMCFStreamUpload_UploadChunkPtr) dlsym(hLibrary, "libamcf_streamupload_uploadchunk");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_StreamUpload_UploadChunk == nullptr)
			return LIBAMCF_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_StreamUpload_FinishChunking = (PLibAMCFStreamUpload_FinishChunkingPtr) GetProcAddress(hLibrary, "libamcf_streamupload_finishchunking");
		#else // _WIN32
		pWrapperTable->m_StreamUpload_FinishChunking = (PLibAMCFStreamUpload_FinishChunkingPtr) dlsym(hLibrary, "libamcf_streamupload_finishchunking");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_StreamUpload_FinishChunking == nullptr)
			return LIBAMCF_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_StreamUpload_GetStatus = (PLibAMCFStreamUpload_GetStatusPtr) GetProcAddress(hLibrary, "libamcf_streamupload_getstatus");
		#else // _WIN32
		pWrapperTable->m_StreamUpload_GetStatus = (PLibAMCFStreamUpload_GetStatusPtr) dlsym(hLibrary, "libamcf_streamupload_getstatus");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_StreamUpload_GetStatus == nullptr)
			return LIBAMCF_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_StreamUpload_GetDataStream = (PLibAMCFStreamUpload_GetDataStreamPtr) GetProcAddress(hLibrary, "libamcf_streamupload_getdatastream");
		#else // _WIN32
		pWrapperTable->m_StreamUpload_GetDataStream = (PLibAMCFStreamUpload_GetDataStreamPtr) dlsym(hLibrary, "libamcf_streamupload_getdatastream");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_StreamUpload_GetDataStream == nullptr)
			return LIBAMCF_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Connection_GetBaseURL = (PLibAMCFConnection_GetBaseURLPtr) GetProcAddress(hLibrary, "libamcf_connection_getbaseurl");
		#else // _WIN32
		pWrapperTable->m_Connection_GetBaseURL = (PLibAMCFConnection_GetBaseURLPtr) dlsym(hLibrary, "libamcf_connection_getbaseurl");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Connection_GetBaseURL == nullptr)
			return LIBAMCF_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Connection_SetTimeouts = (PLibAMCFConnection_SetTimeoutsPtr) GetProcAddress(hLibrary, "libamcf_connection_settimeouts");
		#else // _WIN32
		pWrapperTable->m_Connection_SetTimeouts = (PLibAMCFConnection_SetTimeoutsPtr) dlsym(hLibrary, "libamcf_connection_settimeouts");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Connection_SetTimeouts == nullptr)
			return LIBAMCF_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Connection_GetTimeout = (PLibAMCFConnection_GetTimeoutPtr) GetProcAddress(hLibrary, "libamcf_connection_gettimeout");
		#else // _WIN32
		pWrapperTable->m_Connection_GetTimeout = (PLibAMCFConnection_GetTimeoutPtr) dlsym(hLibrary, "libamcf_connection_gettimeout");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Connection_GetTimeout == nullptr)
			return LIBAMCF_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Connection_GetRetryCount = (PLibAMCFConnection_GetRetryCountPtr) GetProcAddress(hLibrary, "libamcf_connection_getretrycount");
		#else // _WIN32
		pWrapperTable->m_Connection_GetRetryCount = (PLibAMCFConnection_GetRetryCountPtr) dlsym(hLibrary, "libamcf_connection_getretrycount");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Connection_GetRetryCount == nullptr)
			return LIBAMCF_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Connection_AuthenticateWithPassword = (PLibAMCFConnection_AuthenticateWithPasswordPtr) GetProcAddress(hLibrary, "libamcf_connection_authenticatewithpassword");
		#else // _WIN32
		pWrapperTable->m_Connection_AuthenticateWithPassword = (PLibAMCFConnection_AuthenticateWithPasswordPtr) dlsym(hLibrary, "libamcf_connection_authenticatewithpassword");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Connection_AuthenticateWithPassword == nullptr)
			return LIBAMCF_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Connection_IsAuthenticated = (PLibAMCFConnection_IsAuthenticatedPtr) GetProcAddress(hLibrary, "libamcf_connection_isauthenticated");
		#else // _WIN32
		pWrapperTable->m_Connection_IsAuthenticated = (PLibAMCFConnection_IsAuthenticatedPtr) dlsym(hLibrary, "libamcf_connection_isauthenticated");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Connection_IsAuthenticated == nullptr)
			return LIBAMCF_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Connection_RefreshAuthentication = (PLibAMCFConnection_RefreshAuthenticationPtr) GetProcAddress(hLibrary, "libamcf_connection_refreshauthentication");
		#else // _WIN32
		pWrapperTable->m_Connection_RefreshAuthentication = (PLibAMCFConnection_RefreshAuthenticationPtr) dlsym(hLibrary, "libamcf_connection_refreshauthentication");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Connection_RefreshAuthentication == nullptr)
			return LIBAMCF_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Connection_Ping = (PLibAMCFConnection_PingPtr) GetProcAddress(hLibrary, "libamcf_connection_ping");
		#else // _WIN32
		pWrapperTable->m_Connection_Ping = (PLibAMCFConnection_PingPtr) dlsym(hLibrary, "libamcf_connection_ping");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Connection_Ping == nullptr)
			return LIBAMCF_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Connection_GetAuthToken = (PLibAMCFConnection_GetAuthTokenPtr) GetProcAddress(hLibrary, "libamcf_connection_getauthtoken");
		#else // _WIN32
		pWrapperTable->m_Connection_GetAuthToken = (PLibAMCFConnection_GetAuthTokenPtr) dlsym(hLibrary, "libamcf_connection_getauthtoken");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Connection_GetAuthToken == nullptr)
			return LIBAMCF_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Connection_CreateUpload = (PLibAMCFConnection_CreateUploadPtr) GetProcAddress(hLibrary, "libamcf_connection_createupload");
		#else // _WIN32
		pWrapperTable->m_Connection_CreateUpload = (PLibAMCFConnection_CreateUploadPtr) dlsym(hLibrary, "libamcf_connection_createupload");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Connection_CreateUpload == nullptr)
			return LIBAMCF_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Connection_PrepareBuild = (PLibAMCFConnection_PrepareBuildPtr) GetProcAddress(hLibrary, "libamcf_connection_preparebuild");
		#else // _WIN32
		pWrapperTable->m_Connection_PrepareBuild = (PLibAMCFConnection_PrepareBuildPtr) dlsym(hLibrary, "libamcf_connection_preparebuild");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Connection_PrepareBuild == nullptr)
			return LIBAMCF_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GetVersion = (PLibAMCFGetVersionPtr) GetProcAddress(hLibrary, "libamcf_getversion");
		#else // _WIN32
		pWrapperTable->m_GetVersion = (PLibAMCFGetVersionPtr) dlsym(hLibrary, "libamcf_getversion");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GetVersion == nullptr)
			return LIBAMCF_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GetLastError = (PLibAMCFGetLastErrorPtr) GetProcAddress(hLibrary, "libamcf_getlasterror");
		#else // _WIN32
		pWrapperTable->m_GetLastError = (PLibAMCFGetLastErrorPtr) dlsym(hLibrary, "libamcf_getlasterror");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GetLastError == nullptr)
			return LIBAMCF_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ReleaseInstance = (PLibAMCFReleaseInstancePtr) GetProcAddress(hLibrary, "libamcf_releaseinstance");
		#else // _WIN32
		pWrapperTable->m_ReleaseInstance = (PLibAMCFReleaseInstancePtr) dlsym(hLibrary, "libamcf_releaseinstance");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ReleaseInstance == nullptr)
			return LIBAMCF_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_AcquireInstance = (PLibAMCFAcquireInstancePtr) GetProcAddress(hLibrary, "libamcf_acquireinstance");
		#else // _WIN32
		pWrapperTable->m_AcquireInstance = (PLibAMCFAcquireInstancePtr) dlsym(hLibrary, "libamcf_acquireinstance");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_AcquireInstance == nullptr)
			return LIBAMCF_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_InjectComponent = (PLibAMCFInjectComponentPtr) GetProcAddress(hLibrary, "libamcf_injectcomponent");
		#else // _WIN32
		pWrapperTable->m_InjectComponent = (PLibAMCFInjectComponentPtr) dlsym(hLibrary, "libamcf_injectcomponent");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_InjectComponent == nullptr)
			return LIBAMCF_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GetSymbolLookupMethod = (PLibAMCFGetSymbolLookupMethodPtr) GetProcAddress(hLibrary, "libamcf_getsymbollookupmethod");
		#else // _WIN32
		pWrapperTable->m_GetSymbolLookupMethod = (PLibAMCFGetSymbolLookupMethodPtr) dlsym(hLibrary, "libamcf_getsymbollookupmethod");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GetSymbolLookupMethod == nullptr)
			return LIBAMCF_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_CreateConnection = (PLibAMCFCreateConnectionPtr) GetProcAddress(hLibrary, "libamcf_createconnection");
		#else // _WIN32
		pWrapperTable->m_CreateConnection = (PLibAMCFCreateConnectionPtr) dlsym(hLibrary, "libamcf_createconnection");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_CreateConnection == nullptr)
			return LIBAMCF_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		pWrapperTable->m_LibraryHandle = hLibrary;
		return LIBAMCF_SUCCESS;
	}

	inline LibAMCFResult CWrapper::loadWrapperTableFromSymbolLookupMethod(sLibAMCFDynamicWrapperTable * pWrapperTable, void* pSymbolLookupMethod)
{
		if (pWrapperTable == nullptr)
			return LIBAMCF_ERROR_INVALIDPARAM;
		if (pSymbolLookupMethod == nullptr)
			return LIBAMCF_ERROR_INVALIDPARAM;
		
		typedef LibAMCFResult(*SymbolLookupType)(const char*, void**);
		
		SymbolLookupType pLookup = (SymbolLookupType)pSymbolLookupMethod;
		
		LibAMCFResult eLookupError = LIBAMCF_SUCCESS;
		eLookupError = (*pLookup)("libamcf_operationresult_waitfor", (void**)&(pWrapperTable->m_OperationResult_WaitFor));
		if ( (eLookupError != 0) || (pWrapperTable->m_OperationResult_WaitFor == nullptr) )
			return LIBAMCF_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libamcf_operationresult_ensuresuccess", (void**)&(pWrapperTable->m_OperationResult_EnsureSuccess));
		if ( (eLookupError != 0) || (pWrapperTable->m_OperationResult_EnsureSuccess == nullptr) )
			return LIBAMCF_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libamcf_operationresult_inprogress", (void**)&(pWrapperTable->m_OperationResult_InProgress));
		if ( (eLookupError != 0) || (pWrapperTable->m_OperationResult_InProgress == nullptr) )
			return LIBAMCF_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libamcf_operationresult_success", (void**)&(pWrapperTable->m_OperationResult_Success));
		if ( (eLookupError != 0) || (pWrapperTable->m_OperationResult_Success == nullptr) )
			return LIBAMCF_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libamcf_operationresult_geterrormessage", (void**)&(pWrapperTable->m_OperationResult_GetErrorMessage));
		if ( (eLookupError != 0) || (pWrapperTable->m_OperationResult_GetErrorMessage == nullptr) )
			return LIBAMCF_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libamcf_datastream_getuuid", (void**)&(pWrapperTable->m_DataStream_GetUUID));
		if ( (eLookupError != 0) || (pWrapperTable->m_DataStream_GetUUID == nullptr) )
			return LIBAMCF_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libamcf_datastream_getcontext", (void**)&(pWrapperTable->m_DataStream_GetContext));
		if ( (eLookupError != 0) || (pWrapperTable->m_DataStream_GetContext == nullptr) )
			return LIBAMCF_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libamcf_datastream_getname", (void**)&(pWrapperTable->m_DataStream_GetName));
		if ( (eLookupError != 0) || (pWrapperTable->m_DataStream_GetName == nullptr) )
			return LIBAMCF_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libamcf_datastream_getmimetype", (void**)&(pWrapperTable->m_DataStream_GetMimeType));
		if ( (eLookupError != 0) || (pWrapperTable->m_DataStream_GetMimeType == nullptr) )
			return LIBAMCF_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libamcf_datastream_getsha256", (void**)&(pWrapperTable->m_DataStream_GetSHA256));
		if ( (eLookupError != 0) || (pWrapperTable->m_DataStream_GetSHA256 == nullptr) )
			return LIBAMCF_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libamcf_datastream_getsize", (void**)&(pWrapperTable->m_DataStream_GetSize));
		if ( (eLookupError != 0) || (pWrapperTable->m_DataStream_GetSize == nullptr) )
			return LIBAMCF_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libamcf_datastream_gettimestamp", (void**)&(pWrapperTable->m_DataStream_GetTimestamp));
		if ( (eLookupError != 0) || (pWrapperTable->m_DataStream_GetTimestamp == nullptr) )
			return LIBAMCF_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libamcf_streamupload_getname", (void**)&(pWrapperTable->m_StreamUpload_GetName));
		if ( (eLookupError != 0) || (pWrapperTable->m_StreamUpload_GetName == nullptr) )
			return LIBAMCF_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libamcf_streamupload_getmimetype", (void**)&(pWrapperTable->m_StreamUpload_GetMimeType));
		if ( (eLookupError != 0) || (pWrapperTable->m_StreamUpload_GetMimeType == nullptr) )
			return LIBAMCF_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libamcf_streamupload_getcontexttype", (void**)&(pWrapperTable->m_StreamUpload_GetContextType));
		if ( (eLookupError != 0) || (pWrapperTable->m_StreamUpload_GetContextType == nullptr) )
			return LIBAMCF_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libamcf_streamupload_uploaddata", (void**)&(pWrapperTable->m_StreamUpload_UploadData));
		if ( (eLookupError != 0) || (pWrapperTable->m_StreamUpload_UploadData == nullptr) )
			return LIBAMCF_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libamcf_streamupload_uploadfile", (void**)&(pWrapperTable->m_StreamUpload_UploadFile));
		if ( (eLookupError != 0) || (pWrapperTable->m_StreamUpload_UploadFile == nullptr) )
			return LIBAMCF_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libamcf_streamupload_beginchunking", (void**)&(pWrapperTable->m_StreamUpload_BeginChunking));
		if ( (eLookupError != 0) || (pWrapperTable->m_StreamUpload_BeginChunking == nullptr) )
			return LIBAMCF_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libamcf_streamupload_uploadchunk", (void**)&(pWrapperTable->m_StreamUpload_UploadChunk));
		if ( (eLookupError != 0) || (pWrapperTable->m_StreamUpload_UploadChunk == nullptr) )
			return LIBAMCF_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libamcf_streamupload_finishchunking", (void**)&(pWrapperTable->m_StreamUpload_FinishChunking));
		if ( (eLookupError != 0) || (pWrapperTable->m_StreamUpload_FinishChunking == nullptr) )
			return LIBAMCF_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libamcf_streamupload_getstatus", (void**)&(pWrapperTable->m_StreamUpload_GetStatus));
		if ( (eLookupError != 0) || (pWrapperTable->m_StreamUpload_GetStatus == nullptr) )
			return LIBAMCF_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libamcf_streamupload_getdatastream", (void**)&(pWrapperTable->m_StreamUpload_GetDataStream));
		if ( (eLookupError != 0) || (pWrapperTable->m_StreamUpload_GetDataStream == nullptr) )
			return LIBAMCF_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libamcf_connection_getbaseurl", (void**)&(pWrapperTable->m_Connection_GetBaseURL));
		if ( (eLookupError != 0) || (pWrapperTable->m_Connection_GetBaseURL == nullptr) )
			return LIBAMCF_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libamcf_connection_settimeouts", (void**)&(pWrapperTable->m_Connection_SetTimeouts));
		if ( (eLookupError != 0) || (pWrapperTable->m_Connection_SetTimeouts == nullptr) )
			return LIBAMCF_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libamcf_connection_gettimeout", (void**)&(pWrapperTable->m_Connection_GetTimeout));
		if ( (eLookupError != 0) || (pWrapperTable->m_Connection_GetTimeout == nullptr) )
			return LIBAMCF_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libamcf_connection_getretrycount", (void**)&(pWrapperTable->m_Connection_GetRetryCount));
		if ( (eLookupError != 0) || (pWrapperTable->m_Connection_GetRetryCount == nullptr) )
			return LIBAMCF_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libamcf_connection_authenticatewithpassword", (void**)&(pWrapperTable->m_Connection_AuthenticateWithPassword));
		if ( (eLookupError != 0) || (pWrapperTable->m_Connection_AuthenticateWithPassword == nullptr) )
			return LIBAMCF_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libamcf_connection_isauthenticated", (void**)&(pWrapperTable->m_Connection_IsAuthenticated));
		if ( (eLookupError != 0) || (pWrapperTable->m_Connection_IsAuthenticated == nullptr) )
			return LIBAMCF_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libamcf_connection_refreshauthentication", (void**)&(pWrapperTable->m_Connection_RefreshAuthentication));
		if ( (eLookupError != 0) || (pWrapperTable->m_Connection_RefreshAuthentication == nullptr) )
			return LIBAMCF_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libamcf_connection_ping", (void**)&(pWrapperTable->m_Connection_Ping));
		if ( (eLookupError != 0) || (pWrapperTable->m_Connection_Ping == nullptr) )
			return LIBAMCF_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libamcf_connection_getauthtoken", (void**)&(pWrapperTable->m_Connection_GetAuthToken));
		if ( (eLookupError != 0) || (pWrapperTable->m_Connection_GetAuthToken == nullptr) )
			return LIBAMCF_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libamcf_connection_createupload", (void**)&(pWrapperTable->m_Connection_CreateUpload));
		if ( (eLookupError != 0) || (pWrapperTable->m_Connection_CreateUpload == nullptr) )
			return LIBAMCF_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libamcf_connection_preparebuild", (void**)&(pWrapperTable->m_Connection_PrepareBuild));
		if ( (eLookupError != 0) || (pWrapperTable->m_Connection_PrepareBuild == nullptr) )
			return LIBAMCF_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libamcf_getversion", (void**)&(pWrapperTable->m_GetVersion));
		if ( (eLookupError != 0) || (pWrapperTable->m_GetVersion == nullptr) )
			return LIBAMCF_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libamcf_getlasterror", (void**)&(pWrapperTable->m_GetLastError));
		if ( (eLookupError != 0) || (pWrapperTable->m_GetLastError == nullptr) )
			return LIBAMCF_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libamcf_releaseinstance", (void**)&(pWrapperTable->m_ReleaseInstance));
		if ( (eLookupError != 0) || (pWrapperTable->m_ReleaseInstance == nullptr) )
			return LIBAMCF_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libamcf_acquireinstance", (void**)&(pWrapperTable->m_AcquireInstance));
		if ( (eLookupError != 0) || (pWrapperTable->m_AcquireInstance == nullptr) )
			return LIBAMCF_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libamcf_injectcomponent", (void**)&(pWrapperTable->m_InjectComponent));
		if ( (eLookupError != 0) || (pWrapperTable->m_InjectComponent == nullptr) )
			return LIBAMCF_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libamcf_getsymbollookupmethod", (void**)&(pWrapperTable->m_GetSymbolLookupMethod));
		if ( (eLookupError != 0) || (pWrapperTable->m_GetSymbolLookupMethod == nullptr) )
			return LIBAMCF_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libamcf_createconnection", (void**)&(pWrapperTable->m_CreateConnection));
		if ( (eLookupError != 0) || (pWrapperTable->m_CreateConnection == nullptr) )
			return LIBAMCF_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		return LIBAMCF_SUCCESS;
}

	
	
	/**
	 * Method definitions for class CBase
	 */
	
	/**
	 * Method definitions for class COperationResult
	 */
	
	/**
	* COperationResult::WaitFor - Waits for operation to be finished.
	* @param[in] nTimeOut - Timeout value in Milliseconds. 0 means forever.
	* @return Returns if operation has been finished.
	*/
	bool COperationResult::WaitFor(const LibAMCF_uint32 nTimeOut)
	{
		bool resultOperationFinished = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_OperationResult_WaitFor(m_pHandle, nTimeOut, &resultOperationFinished));
		
		return resultOperationFinished;
	}
	
	/**
	* COperationResult::EnsureSuccess - Waits for operation to be successfully finished. Throws an error if not successful.
	*/
	void COperationResult::EnsureSuccess()
	{
		CheckError(m_pWrapper->m_WrapperTable.m_OperationResult_EnsureSuccess(m_pHandle));
	}
	
	/**
	* COperationResult::InProgress - Checks if operation is in progress.
	* @return Flag if operation is in progress.
	*/
	bool COperationResult::InProgress()
	{
		bool resultOperationIsInProgress = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_OperationResult_InProgress(m_pHandle, &resultOperationIsInProgress));
		
		return resultOperationIsInProgress;
	}
	
	/**
	* COperationResult::Success - Checks if operation has been finished successfully. Waits for operation to finish.
	* @return Flag if operation has been finished successful.
	*/
	bool COperationResult::Success()
	{
		bool resultOperationSuccess = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_OperationResult_Success(m_pHandle, &resultOperationSuccess));
		
		return resultOperationSuccess;
	}
	
	/**
	* COperationResult::GetErrorMessage - Returns the error message, if the operation has not been successful. Fails if operation is in progress.
	* @return Returns error message of failed operation.
	*/
	std::string COperationResult::GetErrorMessage()
	{
		LibAMCF_uint32 bytesNeededErrorMessage = 0;
		LibAMCF_uint32 bytesWrittenErrorMessage = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_OperationResult_GetErrorMessage(m_pHandle, 0, &bytesNeededErrorMessage, nullptr));
		std::vector<char> bufferErrorMessage(bytesNeededErrorMessage);
		CheckError(m_pWrapper->m_WrapperTable.m_OperationResult_GetErrorMessage(m_pHandle, bytesNeededErrorMessage, &bytesWrittenErrorMessage, &bufferErrorMessage[0]));
		
		return std::string(&bufferErrorMessage[0]);
	}
	
	/**
	 * Method definitions for class CDataStream
	 */
	
	/**
	* CDataStream::GetUUID - Returns the stream UUID.
	* @return Stream UUID String.
	*/
	std::string CDataStream::GetUUID()
	{
		LibAMCF_uint32 bytesNeededUUID = 0;
		LibAMCF_uint32 bytesWrittenUUID = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_DataStream_GetUUID(m_pHandle, 0, &bytesNeededUUID, nullptr));
		std::vector<char> bufferUUID(bytesNeededUUID);
		CheckError(m_pWrapper->m_WrapperTable.m_DataStream_GetUUID(m_pHandle, bytesNeededUUID, &bytesWrittenUUID, &bufferUUID[0]));
		
		return std::string(&bufferUUID[0]);
	}
	
	/**
	* CDataStream::GetContext - Returns the stream's context type and owner UUID.
	* @param[out] eContextType - Stream Context Type.
	* @param[out] sOwnerUUID - Stream Context UUID String.
	*/
	void CDataStream::GetContext(eStreamContextType & eContextType, std::string & sOwnerUUID)
	{
		LibAMCF_uint32 bytesNeededOwnerUUID = 0;
		LibAMCF_uint32 bytesWrittenOwnerUUID = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_DataStream_GetContext(m_pHandle, &eContextType, 0, &bytesNeededOwnerUUID, nullptr));
		std::vector<char> bufferOwnerUUID(bytesNeededOwnerUUID);
		CheckError(m_pWrapper->m_WrapperTable.m_DataStream_GetContext(m_pHandle, &eContextType, bytesNeededOwnerUUID, &bytesWrittenOwnerUUID, &bufferOwnerUUID[0]));
		sOwnerUUID = std::string(&bufferOwnerUUID[0]);
	}
	
	/**
	* CDataStream::GetName - Returns the stream name.
	* @return Stream Name.
	*/
	std::string CDataStream::GetName()
	{
		LibAMCF_uint32 bytesNeededName = 0;
		LibAMCF_uint32 bytesWrittenName = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_DataStream_GetName(m_pHandle, 0, &bytesNeededName, nullptr));
		std::vector<char> bufferName(bytesNeededName);
		CheckError(m_pWrapper->m_WrapperTable.m_DataStream_GetName(m_pHandle, bytesNeededName, &bytesWrittenName, &bufferName[0]));
		
		return std::string(&bufferName[0]);
	}
	
	/**
	* CDataStream::GetMimeType - Returns the stream's mime type.
	* @return Mime Type string.
	*/
	std::string CDataStream::GetMimeType()
	{
		LibAMCF_uint32 bytesNeededMimeType = 0;
		LibAMCF_uint32 bytesWrittenMimeType = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_DataStream_GetMimeType(m_pHandle, 0, &bytesNeededMimeType, nullptr));
		std::vector<char> bufferMimeType(bytesNeededMimeType);
		CheckError(m_pWrapper->m_WrapperTable.m_DataStream_GetMimeType(m_pHandle, bytesNeededMimeType, &bytesWrittenMimeType, &bufferMimeType[0]));
		
		return std::string(&bufferMimeType[0]);
	}
	
	/**
	* CDataStream::GetSHA256 - Returns the sha256 checksum of the stream.
	* @return SHA256 string.
	*/
	std::string CDataStream::GetSHA256()
	{
		LibAMCF_uint32 bytesNeededSHA256 = 0;
		LibAMCF_uint32 bytesWrittenSHA256 = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_DataStream_GetSHA256(m_pHandle, 0, &bytesNeededSHA256, nullptr));
		std::vector<char> bufferSHA256(bytesNeededSHA256);
		CheckError(m_pWrapper->m_WrapperTable.m_DataStream_GetSHA256(m_pHandle, bytesNeededSHA256, &bytesWrittenSHA256, &bufferSHA256[0]));
		
		return std::string(&bufferSHA256[0]);
	}
	
	/**
	* CDataStream::GetSize - Returns the stream size.
	* @return Stream size.
	*/
	LibAMCF_uint64 CDataStream::GetSize()
	{
		LibAMCF_uint64 resultStreamSize = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_DataStream_GetSize(m_pHandle, &resultStreamSize));
		
		return resultStreamSize;
	}
	
	/**
	* CDataStream::GetTimestamp - Returns the timestamp of the stream.
	* @return Timestamp string.
	*/
	std::string CDataStream::GetTimestamp()
	{
		LibAMCF_uint32 bytesNeededTimestamp = 0;
		LibAMCF_uint32 bytesWrittenTimestamp = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_DataStream_GetTimestamp(m_pHandle, 0, &bytesNeededTimestamp, nullptr));
		std::vector<char> bufferTimestamp(bytesNeededTimestamp);
		CheckError(m_pWrapper->m_WrapperTable.m_DataStream_GetTimestamp(m_pHandle, bytesNeededTimestamp, &bytesWrittenTimestamp, &bufferTimestamp[0]));
		
		return std::string(&bufferTimestamp[0]);
	}
	
	/**
	 * Method definitions for class CStreamUpload
	 */
	
	/**
	* CStreamUpload::GetName - returns the name of the stream upload
	* @return Name String.
	*/
	std::string CStreamUpload::GetName()
	{
		LibAMCF_uint32 bytesNeededName = 0;
		LibAMCF_uint32 bytesWrittenName = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_StreamUpload_GetName(m_pHandle, 0, &bytesNeededName, nullptr));
		std::vector<char> bufferName(bytesNeededName);
		CheckError(m_pWrapper->m_WrapperTable.m_StreamUpload_GetName(m_pHandle, bytesNeededName, &bytesWrittenName, &bufferName[0]));
		
		return std::string(&bufferName[0]);
	}
	
	/**
	* CStreamUpload::GetMimeType - returns the mimetype of the stream upload
	* @return MimeType String.
	*/
	std::string CStreamUpload::GetMimeType()
	{
		LibAMCF_uint32 bytesNeededMimeType = 0;
		LibAMCF_uint32 bytesWrittenMimeType = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_StreamUpload_GetMimeType(m_pHandle, 0, &bytesNeededMimeType, nullptr));
		std::vector<char> bufferMimeType(bytesNeededMimeType);
		CheckError(m_pWrapper->m_WrapperTable.m_StreamUpload_GetMimeType(m_pHandle, bytesNeededMimeType, &bytesWrittenMimeType, &bufferMimeType[0]));
		
		return std::string(&bufferMimeType[0]);
	}
	
	/**
	* CStreamUpload::GetContextType - returns the usage context of the stream upload
	* @return Stream Context Type.
	*/
	eStreamContextType CStreamUpload::GetContextType()
	{
		eStreamContextType resultContextType = (eStreamContextType) 0;
		CheckError(m_pWrapper->m_WrapperTable.m_StreamUpload_GetContextType(m_pHandle, &resultContextType));
		
		return resultContextType;
	}
	
	/**
	* CStreamUpload::UploadData - uploads the passed data to the server. MUST only be called once.
	* @param[in] DataBuffer - Data to be uploaded.
	* @param[in] nChunkSize - Chunk size to use in bytes. MUST be a multiple of 64kB. MUST be at least 64kB and less than 64MB.
	* @param[in] nThreadCount - How many concurrent threads shall be maximally used.
	* @return Returns if upload was successful.
	*/
	POperationResult CStreamUpload::UploadData(const CInputVector<LibAMCF_uint8> & DataBuffer, const LibAMCF_uint32 nChunkSize, const LibAMCF_uint32 nThreadCount)
	{
		LibAMCFHandle hSuccess = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_StreamUpload_UploadData(m_pHandle, (LibAMCF_uint64)DataBuffer.size(), DataBuffer.data(), nChunkSize, nThreadCount, &hSuccess));
		
		if (!hSuccess) {
			CheckError(LIBAMCF_ERROR_INVALIDPARAM);
		}
		return std::make_shared<COperationResult>(m_pWrapper, hSuccess);
	}
	
	/**
	* CStreamUpload::UploadFile - uploads a file to the server. MUST only be called once.
	* @param[in] sFileName - File to be uploaded.
	* @param[in] nChunkSize - Chunk size to use in bytes. MUST be a multiple of 64kB. MUST be at least 64kB and less than 64MB.
	* @param[in] nThreadCount - How many concurrent threads shall be maximally used.
	* @return Returns if upload was successful.
	*/
	POperationResult CStreamUpload::UploadFile(const std::string & sFileName, const LibAMCF_uint32 nChunkSize, const LibAMCF_uint32 nThreadCount)
	{
		LibAMCFHandle hSuccess = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_StreamUpload_UploadFile(m_pHandle, sFileName.c_str(), nChunkSize, nThreadCount, &hSuccess));
		
		if (!hSuccess) {
			CheckError(LIBAMCF_ERROR_INVALIDPARAM);
		}
		return std::make_shared<COperationResult>(m_pWrapper, hSuccess);
	}
	
	/**
	* CStreamUpload::BeginChunking - Starts a chunked upload. MUST not be used together with uploadData or uploadFile
	* @param[in] nDataSize - Full data size to be uploaded.
	* @return Returns if request was successful.
	*/
	POperationResult CStreamUpload::BeginChunking(const LibAMCF_uint64 nDataSize)
	{
		LibAMCFHandle hSuccess = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_StreamUpload_BeginChunking(m_pHandle, nDataSize, &hSuccess));
		
		if (!hSuccess) {
			CheckError(LIBAMCF_ERROR_INVALIDPARAM);
		}
		return std::make_shared<COperationResult>(m_pWrapper, hSuccess);
	}
	
	/**
	* CStreamUpload::UploadChunk - Uploads another chunk to the server. Chunks are added sequentially together.
	* @param[in] DataBuffer - Data to be uploaded. Any chunk that is not the last chunk MUST have the size of a multiple of 64kB. A chunk MUST be less than 64MB.
	* @return Returns if request was successful.
	*/
	POperationResult CStreamUpload::UploadChunk(const CInputVector<LibAMCF_uint8> & DataBuffer)
	{
		LibAMCFHandle hSuccess = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_StreamUpload_UploadChunk(m_pHandle, (LibAMCF_uint64)DataBuffer.size(), DataBuffer.data(), &hSuccess));
		
		if (!hSuccess) {
			CheckError(LIBAMCF_ERROR_INVALIDPARAM);
		}
		return std::make_shared<COperationResult>(m_pWrapper, hSuccess);
	}
	
	/**
	* CStreamUpload::FinishChunking - MUST only be called after all chunks have been uploaded.
	* @return Returns if request was successful.
	*/
	POperationResult CStreamUpload::FinishChunking()
	{
		LibAMCFHandle hSuccess = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_StreamUpload_FinishChunking(m_pHandle, &hSuccess));
		
		if (!hSuccess) {
			CheckError(LIBAMCF_ERROR_INVALIDPARAM);
		}
		return std::make_shared<COperationResult>(m_pWrapper, hSuccess);
	}
	
	/**
	* CStreamUpload::GetStatus - Retrieves current upload status.
	* @param[out] nUploadSize - Total target size of the upload. 0 if no upload has been started.
	* @param[out] nFinishedSize - Current bytes that have been successfully uploaded.
	* @param[out] nInProgressSize - Current bytes that have been uploaded or are currently in progress.
	* @param[out] bFinished - Flag if upload has successfully finished.
	*/
	void CStreamUpload::GetStatus(LibAMCF_uint64 & nUploadSize, LibAMCF_uint64 & nFinishedSize, LibAMCF_uint64 & nInProgressSize, bool & bFinished)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_StreamUpload_GetStatus(m_pHandle, &nUploadSize, &nFinishedSize, &nInProgressSize, &bFinished));
	}
	
	/**
	* CStreamUpload::GetDataStream - Retrieves the uploaded data stream object. Upload must have finished successfully.
	* @return Data stream instance.
	*/
	PDataStream CStreamUpload::GetDataStream()
	{
		LibAMCFHandle hDataStream = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_StreamUpload_GetDataStream(m_pHandle, &hDataStream));
		
		if (!hDataStream) {
			CheckError(LIBAMCF_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CDataStream>(m_pWrapper, hDataStream);
	}
	
	/**
	 * Method definitions for class CConnection
	 */
	
	/**
	* CConnection::GetBaseURL - returns the base url of the AMCF instance
	* @return Base URL of the AMCF instance.
	*/
	std::string CConnection::GetBaseURL()
	{
		LibAMCF_uint32 bytesNeededBaseURL = 0;
		LibAMCF_uint32 bytesWrittenBaseURL = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Connection_GetBaseURL(m_pHandle, 0, &bytesNeededBaseURL, nullptr));
		std::vector<char> bufferBaseURL(bytesNeededBaseURL);
		CheckError(m_pWrapper->m_WrapperTable.m_Connection_GetBaseURL(m_pHandle, bytesNeededBaseURL, &bytesWrittenBaseURL, &bufferBaseURL[0]));
		
		return std::string(&bufferBaseURL[0]);
	}
	
	/**
	* CConnection::SetTimeouts - sets the timeout behaviour of the connection.
	* @param[in] nTimeout - Request timeout in milliseconds. Default is 1000.
	* @param[in] nRetryCount - How many retries should be done in an error case. Default is 3.
	*/
	void CConnection::SetTimeouts(const LibAMCF_uint32 nTimeout, const LibAMCF_uint32 nRetryCount)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Connection_SetTimeouts(m_pHandle, nTimeout, nRetryCount));
	}
	
	/**
	* CConnection::GetTimeout - gets the timeout behaviour of the connection.
	* @return Request timeout in milliseconds
	*/
	LibAMCF_uint32 CConnection::GetTimeout()
	{
		LibAMCF_uint32 resultTimeout = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Connection_GetTimeout(m_pHandle, &resultTimeout));
		
		return resultTimeout;
	}
	
	/**
	* CConnection::GetRetryCount - gets the timeout behaviour of the connection.
	* @return How many retries should be done in an error case.
	*/
	LibAMCF_uint32 CConnection::GetRetryCount()
	{
		LibAMCF_uint32 resultRetryCount = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Connection_GetRetryCount(m_pHandle, &resultRetryCount));
		
		return resultRetryCount;
	}
	
	/**
	* CConnection::AuthenticateWithPassword - Authenticates with the remote instance with username and password.
	* @param[in] sUserName - User name for authentication.
	* @param[in] sPassword - Password for authentication.
	* @return Returns if authentication was successful.
	*/
	POperationResult CConnection::AuthenticateWithPassword(const std::string & sUserName, const std::string & sPassword)
	{
		LibAMCFHandle hSuccess = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_Connection_AuthenticateWithPassword(m_pHandle, sUserName.c_str(), sPassword.c_str(), &hSuccess));
		
		if (!hSuccess) {
			CheckError(LIBAMCF_ERROR_INVALIDPARAM);
		}
		return std::make_shared<COperationResult>(m_pWrapper, hSuccess);
	}
	
	/**
	* CConnection::IsAuthenticated - Authenticates with the remote instance with username and password
	* @return Returns if connection is authenticated.
	*/
	bool CConnection::IsAuthenticated()
	{
		bool resultIsAuthenticated = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Connection_IsAuthenticated(m_pHandle, &resultIsAuthenticated));
		
		return resultIsAuthenticated;
	}
	
	/**
	* CConnection::RefreshAuthentication - Refreshes authentication with server.
	* @return Returns if authentication refresh was successful.
	*/
	POperationResult CConnection::RefreshAuthentication()
	{
		LibAMCFHandle hSuccess = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_Connection_RefreshAuthentication(m_pHandle, &hSuccess));
		
		if (!hSuccess) {
			CheckError(LIBAMCF_ERROR_INVALIDPARAM);
		}
		return std::make_shared<COperationResult>(m_pWrapper, hSuccess);
	}
	
	/**
	* CConnection::Ping - Detects if server is still reachable. Non-Blocking.
	* @return Returns if server is still reachable.
	*/
	POperationResult CConnection::Ping()
	{
		LibAMCFHandle hSuccess = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_Connection_Ping(m_pHandle, &hSuccess));
		
		if (!hSuccess) {
			CheckError(LIBAMCF_ERROR_INVALIDPARAM);
		}
		return std::make_shared<COperationResult>(m_pWrapper, hSuccess);
	}
	
	/**
	* CConnection::GetAuthToken - Returns the authentication token of the current connection.
	* @return Token string.
	*/
	std::string CConnection::GetAuthToken()
	{
		LibAMCF_uint32 bytesNeededToken = 0;
		LibAMCF_uint32 bytesWrittenToken = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Connection_GetAuthToken(m_pHandle, 0, &bytesNeededToken, nullptr));
		std::vector<char> bufferToken(bytesNeededToken);
		CheckError(m_pWrapper->m_WrapperTable.m_Connection_GetAuthToken(m_pHandle, bytesNeededToken, &bytesWrittenToken, &bufferToken[0]));
		
		return std::string(&bufferToken[0]);
	}
	
	/**
	* CConnection::CreateUpload - Creates a file upload instance. Must be authenticated to make it work.
	* @param[in] sName - Name of the file to be uploaded.
	* @param[in] sMimeType - Mimetype of the file to be uploaded.
	* @param[in] eContextType - Stream Context Type.
	* @return File upload instance.
	*/
	PStreamUpload CConnection::CreateUpload(const std::string & sName, const std::string & sMimeType, const eStreamContextType eContextType)
	{
		LibAMCFHandle hInstance = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_Connection_CreateUpload(m_pHandle, sName.c_str(), sMimeType.c_str(), eContextType, &hInstance));
		
		if (!hInstance) {
			CheckError(LIBAMCF_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CStreamUpload>(m_pWrapper, hInstance);
	}
	
	/**
	* CConnection::PrepareBuild - Prepares a build from an uploaded data stream. Must be authenticated to make it work.
	* @param[in] pDataStream - Data stream MUST have been created as build job context type.
	* @return Returns if build preparation was successful.
	*/
	POperationResult CConnection::PrepareBuild(classParam<CDataStream> pDataStream)
	{
		LibAMCFHandle hDataStream = pDataStream.GetHandle();
		LibAMCFHandle hSuccess = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_Connection_PrepareBuild(m_pHandle, hDataStream, &hSuccess));
		
		if (!hSuccess) {
			CheckError(LIBAMCF_ERROR_INVALIDPARAM);
		}
		return std::make_shared<COperationResult>(m_pWrapper, hSuccess);
	}

} // namespace LibAMCF

#endif // __LIBAMCF_CPPHEADER_DYNAMIC_CPP

