/*++

Copyright (C) 2021 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.7.0-develop.

Abstract: This is an autogenerated C++-Header file in order to allow an easy
 use of Autodesk Machine Control Framework SDK

Interface version: 1.0.0

*/

#ifndef __LIBAMCF_DYNAMICHEADER_CPPTYPES
#define __LIBAMCF_DYNAMICHEADER_CPPTYPES

#include "libamcf_types.hpp"



/*************************************************************************************************************************
 Class definition for Base
**************************************************************************************************************************/

/*************************************************************************************************************************
 Class definition for OperationResult
**************************************************************************************************************************/

/**
* Waits for operation to be finished.
*
* @param[in] pOperationResult - OperationResult instance.
* @param[in] nTimeOut - Timeout value in Milliseconds. 0 means forever.
* @param[out] pOperationFinished - Returns if operation has been finished.
* @return error code or 0 (success)
*/
typedef LibAMCFResult (*PLibAMCFOperationResult_WaitForPtr) (LibAMCF_OperationResult pOperationResult, LibAMCF_uint32 nTimeOut, bool * pOperationFinished);

/**
* Checks if operation is in progress.
*
* @param[in] pOperationResult - OperationResult instance.
* @param[out] pOperationIsInProgress - Flag if operation is in progress.
* @return error code or 0 (success)
*/
typedef LibAMCFResult (*PLibAMCFOperationResult_InProgressPtr) (LibAMCF_OperationResult pOperationResult, bool * pOperationIsInProgress);

/**
* Checks if operation has been finished successfully. Waits for operation to finish.
*
* @param[in] pOperationResult - OperationResult instance.
* @param[out] pOperationSuccess - Flag if operation has been finished successful.
* @return error code or 0 (success)
*/
typedef LibAMCFResult (*PLibAMCFOperationResult_SuccessPtr) (LibAMCF_OperationResult pOperationResult, bool * pOperationSuccess);

/**
* Returns the error message, if the operation has not been successful. Fails if operation is in progress.
*
* @param[in] pOperationResult - OperationResult instance.
* @param[in] nErrorMessageBufferSize - size of the buffer (including trailing 0)
* @param[out] pErrorMessageNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pErrorMessageBuffer -  buffer of Returns error message of failed operation., may be NULL
* @return error code or 0 (success)
*/
typedef LibAMCFResult (*PLibAMCFOperationResult_GetErrorMessagePtr) (LibAMCF_OperationResult pOperationResult, const LibAMCF_uint32 nErrorMessageBufferSize, LibAMCF_uint32* pErrorMessageNeededChars, char * pErrorMessageBuffer);

/*************************************************************************************************************************
 Class definition for DataStream
**************************************************************************************************************************/

/**
* Returns the stream UUID.
*
* @param[in] pDataStream - DataStream instance.
* @param[in] nUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pUUIDBuffer -  buffer of Stream UUID String., may be NULL
* @return error code or 0 (success)
*/
typedef LibAMCFResult (*PLibAMCFDataStream_GetUUIDPtr) (LibAMCF_DataStream pDataStream, const LibAMCF_uint32 nUUIDBufferSize, LibAMCF_uint32* pUUIDNeededChars, char * pUUIDBuffer);

/**
* Returns the stream's context UUID.
*
* @param[in] pDataStream - DataStream instance.
* @param[in] nContextUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pContextUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pContextUUIDBuffer -  buffer of Stream Context UUID String., may be NULL
* @return error code or 0 (success)
*/
typedef LibAMCFResult (*PLibAMCFDataStream_GetContextUUIDPtr) (LibAMCF_DataStream pDataStream, const LibAMCF_uint32 nContextUUIDBufferSize, LibAMCF_uint32* pContextUUIDNeededChars, char * pContextUUIDBuffer);

/**
* Returns the stream name.
*
* @param[in] pDataStream - DataStream instance.
* @param[in] nNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNameBuffer -  buffer of Stream Name., may be NULL
* @return error code or 0 (success)
*/
typedef LibAMCFResult (*PLibAMCFDataStream_GetNamePtr) (LibAMCF_DataStream pDataStream, const LibAMCF_uint32 nNameBufferSize, LibAMCF_uint32* pNameNeededChars, char * pNameBuffer);

/**
* Returns the stream's mime type.
*
* @param[in] pDataStream - DataStream instance.
* @param[in] nMimeTypeBufferSize - size of the buffer (including trailing 0)
* @param[out] pMimeTypeNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pMimeTypeBuffer -  buffer of Mime Type string., may be NULL
* @return error code or 0 (success)
*/
typedef LibAMCFResult (*PLibAMCFDataStream_GetMimeTypePtr) (LibAMCF_DataStream pDataStream, const LibAMCF_uint32 nMimeTypeBufferSize, LibAMCF_uint32* pMimeTypeNeededChars, char * pMimeTypeBuffer);

/**
* Returns the stream size.
*
* @param[in] pDataStream - DataStream instance.
* @param[out] pStreamSize - Stream size.
* @return error code or 0 (success)
*/
typedef LibAMCFResult (*PLibAMCFDataStream_GetSizePtr) (LibAMCF_DataStream pDataStream, LibAMCF_uint64 * pStreamSize);

/*************************************************************************************************************************
 Class definition for StreamUpload
**************************************************************************************************************************/

/**
* uploads the passed data to the server. MUST only be called once.
*
* @param[in] pStreamUpload - StreamUpload instance.
* @param[in] nDataBufferSize - Number of elements in buffer
* @param[in] pDataBuffer - uint8 buffer of Data to be uploaded.
* @param[in] nChunkSize - Chunk size to use in bytes. MUST be at least 64kB.
* @param[out] pSuccess - Returns if upload was successful.
* @return error code or 0 (success)
*/
typedef LibAMCFResult (*PLibAMCFStreamUpload_UploadDataPtr) (LibAMCF_StreamUpload pStreamUpload, LibAMCF_uint64 nDataBufferSize, const LibAMCF_uint8 * pDataBuffer, LibAMCF_uint32 nChunkSize, LibAMCF_OperationResult * pSuccess);

/**
* uploads a file to the server. MUST only be called once.
*
* @param[in] pStreamUpload - StreamUpload instance.
* @param[in] pFileName - File to be uploaded.
* @param[in] nChunkSize - Chunk size to use in bytes. MUST be at least 64kB.
* @param[out] pSuccess - Returns if upload was successful.
* @return error code or 0 (success)
*/
typedef LibAMCFResult (*PLibAMCFStreamUpload_UploadFilePtr) (LibAMCF_StreamUpload pStreamUpload, const char * pFileName, LibAMCF_uint32 nChunkSize, LibAMCF_OperationResult * pSuccess);

/**
* Starts a chunked upload. MUST not be used together with uploadData or uploadFile
*
* @param[in] pStreamUpload - StreamUpload instance.
* @param[in] nDataSize - Full data size to be uploaded.
* @return error code or 0 (success)
*/
typedef LibAMCFResult (*PLibAMCFStreamUpload_BeginChunkingPtr) (LibAMCF_StreamUpload pStreamUpload, LibAMCF_uint64 nDataSize);

/**
* Uploads another chunk to the server. Chunks are added sequentially together.
*
* @param[in] pStreamUpload - StreamUpload instance.
* @param[in] nDataBufferSize - Number of elements in buffer
* @param[in] pDataBuffer - uint8 buffer of Data to be uploaded.
* @param[out] pSuccess - Returns if upload was successful.
* @return error code or 0 (success)
*/
typedef LibAMCFResult (*PLibAMCFStreamUpload_UploadChunkPtr) (LibAMCF_StreamUpload pStreamUpload, LibAMCF_uint64 nDataBufferSize, const LibAMCF_uint8 * pDataBuffer, LibAMCF_OperationResult * pSuccess);

/**
* MUST only be called after all chunks have been uploaded.
*
* @param[in] pStreamUpload - StreamUpload instance.
* @param[in] nDataBufferSize - Number of elements in buffer
* @param[in] pDataBuffer - uint8 buffer of Data to be uploaded.
* @param[out] pSuccess - Returns if upload was successful.
* @return error code or 0 (success)
*/
typedef LibAMCFResult (*PLibAMCFStreamUpload_FinishChunkingPtr) (LibAMCF_StreamUpload pStreamUpload, LibAMCF_uint64 nDataBufferSize, const LibAMCF_uint8 * pDataBuffer, LibAMCF_OperationResult * pSuccess);

/**
* Retrieves current upload status.
*
* @param[in] pStreamUpload - StreamUpload instance.
* @param[out] pUploadSize - Total size of the upload.
* @param[out] pUploadedBytes - Current uploaded data.
* @param[out] pFinished - Upload has been finished.
* @return error code or 0 (success)
*/
typedef LibAMCFResult (*PLibAMCFStreamUpload_GetStatusPtr) (LibAMCF_StreamUpload pStreamUpload, LibAMCF_uint64 * pUploadSize, LibAMCF_uint64 * pUploadedBytes, bool * pFinished);

/**
* Retrieves the uploaded data stream object. Upload must have finished successfully.
*
* @param[in] pStreamUpload - StreamUpload instance.
* @param[out] pDataStream - Data stream instance.
* @return error code or 0 (success)
*/
typedef LibAMCFResult (*PLibAMCFStreamUpload_GetDataStreamPtr) (LibAMCF_StreamUpload pStreamUpload, LibAMCF_DataStream * pDataStream);

/*************************************************************************************************************************
 Class definition for Connection
**************************************************************************************************************************/

/**
* returns the base url of the AMCF instance
*
* @param[in] pConnection - Connection instance.
* @param[in] nBaseURLBufferSize - size of the buffer (including trailing 0)
* @param[out] pBaseURLNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pBaseURLBuffer -  buffer of Base URL of the AMCF instance., may be NULL
* @return error code or 0 (success)
*/
typedef LibAMCFResult (*PLibAMCFConnection_GetBaseURLPtr) (LibAMCF_Connection pConnection, const LibAMCF_uint32 nBaseURLBufferSize, LibAMCF_uint32* pBaseURLNeededChars, char * pBaseURLBuffer);

/**
* sets the timeout behaviour of the connection.
*
* @param[in] pConnection - Connection instance.
* @param[in] nTimeout - Request timeout in milliseconds. Default is 1000.
* @param[in] nRetryCount - How many retries should be done in an error case. Default is 3.
* @return error code or 0 (success)
*/
typedef LibAMCFResult (*PLibAMCFConnection_SetTimeoutsPtr) (LibAMCF_Connection pConnection, LibAMCF_uint32 nTimeout, LibAMCF_uint32 nRetryCount);

/**
* gets the timeout behaviour of the connection.
*
* @param[in] pConnection - Connection instance.
* @param[out] pTimeout - Request timeout in milliseconds
* @return error code or 0 (success)
*/
typedef LibAMCFResult (*PLibAMCFConnection_GetTimeoutPtr) (LibAMCF_Connection pConnection, LibAMCF_uint32 * pTimeout);

/**
* gets the timeout behaviour of the connection.
*
* @param[in] pConnection - Connection instance.
* @param[out] pRetryCount - How many retries should be done in an error case.
* @return error code or 0 (success)
*/
typedef LibAMCFResult (*PLibAMCFConnection_GetRetryCountPtr) (LibAMCF_Connection pConnection, LibAMCF_uint32 * pRetryCount);

/**
* Authenticates with the remote instance with username and password.
*
* @param[in] pConnection - Connection instance.
* @param[in] pUserName - User name for authentication.
* @param[in] pPassword - Password for authentication.
* @param[out] pSuccess - Returns if authentication was successful.
* @return error code or 0 (success)
*/
typedef LibAMCFResult (*PLibAMCFConnection_AuthenticateWithPasswordPtr) (LibAMCF_Connection pConnection, const char * pUserName, const char * pPassword, LibAMCF_OperationResult * pSuccess);

/**
* Authenticates with the remote instance with username and password
*
* @param[in] pConnection - Connection instance.
* @param[out] pIsAuthenticated - Returns if connection is authenticated.
* @return error code or 0 (success)
*/
typedef LibAMCFResult (*PLibAMCFConnection_IsAuthenticatedPtr) (LibAMCF_Connection pConnection, bool * pIsAuthenticated);

/**
* Refreshes authentication with server.
*
* @param[in] pConnection - Connection instance.
* @param[out] pSuccess - Returns if authentication refresh was successful.
* @return error code or 0 (success)
*/
typedef LibAMCFResult (*PLibAMCFConnection_RefreshAuthenticationPtr) (LibAMCF_Connection pConnection, LibAMCF_OperationResult * pSuccess);

/**
* Detects if server is still reachable. Non-Blocking.
*
* @param[in] pConnection - Connection instance.
* @param[out] pSuccess - Returns if server is still reachable.
* @return error code or 0 (success)
*/
typedef LibAMCFResult (*PLibAMCFConnection_PingPtr) (LibAMCF_Connection pConnection, LibAMCF_OperationResult * pSuccess);

/**
* Returns the authentication token of the current connection.
*
* @param[in] pConnection - Connection instance.
* @param[in] nTokenBufferSize - size of the buffer (including trailing 0)
* @param[out] pTokenNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pTokenBuffer -  buffer of Token string., may be NULL
* @return error code or 0 (success)
*/
typedef LibAMCFResult (*PLibAMCFConnection_GetAuthTokenPtr) (LibAMCF_Connection pConnection, const LibAMCF_uint32 nTokenBufferSize, LibAMCF_uint32* pTokenNeededChars, char * pTokenBuffer);

/**
* Creates a file upload instance. Must be authenticated to make it work.
*
* @param[in] pConnection - Connection instance.
* @param[in] pName - Name of the file to be uploaded.
* @param[in] pMimeType - Mimetype of the file to be uploaded.
* @param[in] pUsageContext - Context string for the usage type of the file.
* @param[out] pInstance - File upload instance.
* @return error code or 0 (success)
*/
typedef LibAMCFResult (*PLibAMCFConnection_CreateUploadPtr) (LibAMCF_Connection pConnection, const char * pName, const char * pMimeType, const char * pUsageContext, LibAMCF_StreamUpload * pInstance);

/*************************************************************************************************************************
 Global functions
**************************************************************************************************************************/

/**
* retrieves the binary version of this library.
*
* @param[out] pMajor - returns the major version of this library
* @param[out] pMinor - returns the minor version of this library
* @param[out] pMicro - returns the micro version of this library
* @return error code or 0 (success)
*/
typedef LibAMCFResult (*PLibAMCFGetVersionPtr) (LibAMCF_uint32 * pMajor, LibAMCF_uint32 * pMinor, LibAMCF_uint32 * pMicro);

/**
* Returns the last error recorded on this object
*
* @param[in] pInstance - Instance Handle
* @param[in] nErrorMessageBufferSize - size of the buffer (including trailing 0)
* @param[out] pErrorMessageNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pErrorMessageBuffer -  buffer of Message of the last error, may be NULL
* @param[out] pHasError - Is there a last error to query
* @return error code or 0 (success)
*/
typedef LibAMCFResult (*PLibAMCFGetLastErrorPtr) (LibAMCF_Base pInstance, const LibAMCF_uint32 nErrorMessageBufferSize, LibAMCF_uint32* pErrorMessageNeededChars, char * pErrorMessageBuffer, bool * pHasError);

/**
* Releases shared ownership of an Instance
*
* @param[in] pInstance - Instance Handle
* @return error code or 0 (success)
*/
typedef LibAMCFResult (*PLibAMCFReleaseInstancePtr) (LibAMCF_Base pInstance);

/**
* Acquires shared ownership of an Instance
*
* @param[in] pInstance - Instance Handle
* @return error code or 0 (success)
*/
typedef LibAMCFResult (*PLibAMCFAcquireInstancePtr) (LibAMCF_Base pInstance);

/**
* Injects an imported component for usage within this component
*
* @param[in] pNameSpace - NameSpace of the injected component
* @param[in] pSymbolAddressMethod - Address of the SymbolAddressMethod of the injected component
* @return error code or 0 (success)
*/
typedef LibAMCFResult (*PLibAMCFInjectComponentPtr) (const char * pNameSpace, LibAMCF_pvoid pSymbolAddressMethod);

/**
* Returns the address of the SymbolLookupMethod
*
* @param[out] pSymbolLookupMethod - Address of the SymbolAddressMethod
* @return error code or 0 (success)
*/
typedef LibAMCFResult (*PLibAMCFGetSymbolLookupMethodPtr) (LibAMCF_pvoid * pSymbolLookupMethod);

/**
* Creates a AMCF connection instance.
*
* @param[in] pBaseURL - Base URL of the AMCF Instance.
* @param[out] pInstance - New Connection instance
* @return error code or 0 (success)
*/
typedef LibAMCFResult (*PLibAMCFCreateConnectionPtr) (const char * pBaseURL, LibAMCF_Connection * pInstance);

/*************************************************************************************************************************
 Function Table Structure
**************************************************************************************************************************/

typedef struct {
	void * m_LibraryHandle;
	PLibAMCFOperationResult_WaitForPtr m_OperationResult_WaitFor;
	PLibAMCFOperationResult_InProgressPtr m_OperationResult_InProgress;
	PLibAMCFOperationResult_SuccessPtr m_OperationResult_Success;
	PLibAMCFOperationResult_GetErrorMessagePtr m_OperationResult_GetErrorMessage;
	PLibAMCFDataStream_GetUUIDPtr m_DataStream_GetUUID;
	PLibAMCFDataStream_GetContextUUIDPtr m_DataStream_GetContextUUID;
	PLibAMCFDataStream_GetNamePtr m_DataStream_GetName;
	PLibAMCFDataStream_GetMimeTypePtr m_DataStream_GetMimeType;
	PLibAMCFDataStream_GetSizePtr m_DataStream_GetSize;
	PLibAMCFStreamUpload_UploadDataPtr m_StreamUpload_UploadData;
	PLibAMCFStreamUpload_UploadFilePtr m_StreamUpload_UploadFile;
	PLibAMCFStreamUpload_BeginChunkingPtr m_StreamUpload_BeginChunking;
	PLibAMCFStreamUpload_UploadChunkPtr m_StreamUpload_UploadChunk;
	PLibAMCFStreamUpload_FinishChunkingPtr m_StreamUpload_FinishChunking;
	PLibAMCFStreamUpload_GetStatusPtr m_StreamUpload_GetStatus;
	PLibAMCFStreamUpload_GetDataStreamPtr m_StreamUpload_GetDataStream;
	PLibAMCFConnection_GetBaseURLPtr m_Connection_GetBaseURL;
	PLibAMCFConnection_SetTimeoutsPtr m_Connection_SetTimeouts;
	PLibAMCFConnection_GetTimeoutPtr m_Connection_GetTimeout;
	PLibAMCFConnection_GetRetryCountPtr m_Connection_GetRetryCount;
	PLibAMCFConnection_AuthenticateWithPasswordPtr m_Connection_AuthenticateWithPassword;
	PLibAMCFConnection_IsAuthenticatedPtr m_Connection_IsAuthenticated;
	PLibAMCFConnection_RefreshAuthenticationPtr m_Connection_RefreshAuthentication;
	PLibAMCFConnection_PingPtr m_Connection_Ping;
	PLibAMCFConnection_GetAuthTokenPtr m_Connection_GetAuthToken;
	PLibAMCFConnection_CreateUploadPtr m_Connection_CreateUpload;
	PLibAMCFGetVersionPtr m_GetVersion;
	PLibAMCFGetLastErrorPtr m_GetLastError;
	PLibAMCFReleaseInstancePtr m_ReleaseInstance;
	PLibAMCFAcquireInstancePtr m_AcquireInstance;
	PLibAMCFInjectComponentPtr m_InjectComponent;
	PLibAMCFGetSymbolLookupMethodPtr m_GetSymbolLookupMethod;
	PLibAMCFCreateConnectionPtr m_CreateConnection;
} sLibAMCFDynamicWrapperTable;

#endif // __LIBAMCF_DYNAMICHEADER_CPPTYPES

