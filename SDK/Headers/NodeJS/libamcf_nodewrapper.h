/*++

Copyright (C) 2021 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.7.0-develop.

Abstract: This is an autogenerated C++ Header file for the Node wrapper class 
 of Autodesk Machine Control Framework SDK

Interface version: 1.0.0

*/


#ifndef LIBAMCF_NODEWRAPPER_H
#define LIBAMCF_NODEWRAPPER_H

#include "libamcf_dynamic.h"
#include <node.h>
#include <node_object_wrap.h>
#include <string>
#include <stdexcept>

#define NODEWRAPPER_FIELDCOUNT 4
#define NODEWRAPPER_TABLEINDEX 2
#define NODEWRAPPER_HANDLEINDEX 3
/*************************************************************************************************************************
 Forward declarations 
**************************************************************************************************************************/

class CLibAMCFWrapper;

/*************************************************************************************************************************
 Class CLibAMCFBaseClass 
**************************************************************************************************************************/

class CLibAMCFBaseClass : public node::ObjectWrap {
private:
protected:
public:
	CLibAMCFBaseClass();
	static void RaiseError(v8::Isolate * isolate, std::string Message);
	static void CheckError(v8::Isolate * isolate, sLibAMCFDynamicWrapperTable * sWrapperTable, LibAMCFHandle pInstance, LibAMCFResult errorCode);
	static void setHandle(LibAMCFHandle pHandle);
	static LibAMCFHandle getHandle(v8::Local<v8::Object> objecthandle);
	static sLibAMCFDynamicWrapperTable * getDynamicWrapperTable(v8::Local<v8::Object> objecthandle);
};


/*************************************************************************************************************************
 Class CLibAMCFBase 
**************************************************************************************************************************/
class CLibAMCFBase : public CLibAMCFBaseClass {
private:
	static void New(const v8::FunctionCallbackInfo<v8::Value>& args);
	static v8::Persistent<v8::Function> constructor;

public:
	CLibAMCFBase();
	~CLibAMCFBase();
	
	static void Init();
	static v8::Local<v8::Object> NewInstance(v8::Local<v8::Object>, LibAMCFHandle pHandle);
	
};

/*************************************************************************************************************************
 Class CLibAMCFOperationResult 
**************************************************************************************************************************/
class CLibAMCFOperationResult : public CLibAMCFBaseClass {
private:
	static void New(const v8::FunctionCallbackInfo<v8::Value>& args);
	static v8::Persistent<v8::Function> constructor;
	static void WaitFor(const v8::FunctionCallbackInfo<v8::Value>& args);
	static void InProgress(const v8::FunctionCallbackInfo<v8::Value>& args);
	static void Success(const v8::FunctionCallbackInfo<v8::Value>& args);
	static void GetErrorMessage(const v8::FunctionCallbackInfo<v8::Value>& args);

public:
	CLibAMCFOperationResult();
	~CLibAMCFOperationResult();
	
	static void Init();
	static v8::Local<v8::Object> NewInstance(v8::Local<v8::Object>, LibAMCFHandle pHandle);
	
};

/*************************************************************************************************************************
 Class CLibAMCFDataStream 
**************************************************************************************************************************/
class CLibAMCFDataStream : public CLibAMCFBaseClass {
private:
	static void New(const v8::FunctionCallbackInfo<v8::Value>& args);
	static v8::Persistent<v8::Function> constructor;
	static void GetUUID(const v8::FunctionCallbackInfo<v8::Value>& args);
	static void GetContextUUID(const v8::FunctionCallbackInfo<v8::Value>& args);
	static void GetName(const v8::FunctionCallbackInfo<v8::Value>& args);
	static void GetMimeType(const v8::FunctionCallbackInfo<v8::Value>& args);
	static void GetSize(const v8::FunctionCallbackInfo<v8::Value>& args);

public:
	CLibAMCFDataStream();
	~CLibAMCFDataStream();
	
	static void Init();
	static v8::Local<v8::Object> NewInstance(v8::Local<v8::Object>, LibAMCFHandle pHandle);
	
};

/*************************************************************************************************************************
 Class CLibAMCFStreamUpload 
**************************************************************************************************************************/
class CLibAMCFStreamUpload : public CLibAMCFBaseClass {
private:
	static void New(const v8::FunctionCallbackInfo<v8::Value>& args);
	static v8::Persistent<v8::Function> constructor;
	static void GetName(const v8::FunctionCallbackInfo<v8::Value>& args);
	static void GetMimeType(const v8::FunctionCallbackInfo<v8::Value>& args);
	static void GetUsageContext(const v8::FunctionCallbackInfo<v8::Value>& args);
	static void UploadData(const v8::FunctionCallbackInfo<v8::Value>& args);
	static void UploadFile(const v8::FunctionCallbackInfo<v8::Value>& args);
	static void BeginChunking(const v8::FunctionCallbackInfo<v8::Value>& args);
	static void UploadChunk(const v8::FunctionCallbackInfo<v8::Value>& args);
	static void FinishChunking(const v8::FunctionCallbackInfo<v8::Value>& args);
	static void GetStatus(const v8::FunctionCallbackInfo<v8::Value>& args);
	static void GetDataStream(const v8::FunctionCallbackInfo<v8::Value>& args);

public:
	CLibAMCFStreamUpload();
	~CLibAMCFStreamUpload();
	
	static void Init();
	static v8::Local<v8::Object> NewInstance(v8::Local<v8::Object>, LibAMCFHandle pHandle);
	
};

/*************************************************************************************************************************
 Class CLibAMCFConnection 
**************************************************************************************************************************/
class CLibAMCFConnection : public CLibAMCFBaseClass {
private:
	static void New(const v8::FunctionCallbackInfo<v8::Value>& args);
	static v8::Persistent<v8::Function> constructor;
	static void GetBaseURL(const v8::FunctionCallbackInfo<v8::Value>& args);
	static void SetTimeouts(const v8::FunctionCallbackInfo<v8::Value>& args);
	static void GetTimeout(const v8::FunctionCallbackInfo<v8::Value>& args);
	static void GetRetryCount(const v8::FunctionCallbackInfo<v8::Value>& args);
	static void AuthenticateWithPassword(const v8::FunctionCallbackInfo<v8::Value>& args);
	static void IsAuthenticated(const v8::FunctionCallbackInfo<v8::Value>& args);
	static void RefreshAuthentication(const v8::FunctionCallbackInfo<v8::Value>& args);
	static void Ping(const v8::FunctionCallbackInfo<v8::Value>& args);
	static void GetAuthToken(const v8::FunctionCallbackInfo<v8::Value>& args);
	static void CreateUpload(const v8::FunctionCallbackInfo<v8::Value>& args);

public:
	CLibAMCFConnection();
	~CLibAMCFConnection();
	
	static void Init();
	static v8::Local<v8::Object> NewInstance(v8::Local<v8::Object>, LibAMCFHandle pHandle);
	
};

/*************************************************************************************************************************
 Class CLibAMCFWrapper 
**************************************************************************************************************************/

class CLibAMCFWrapper : public CLibAMCFBaseClass {
private:
	static void New(const v8::FunctionCallbackInfo<v8::Value>& args);
	static v8::Persistent<v8::Function> constructor;
	static void GetVersion(const v8::FunctionCallbackInfo<v8::Value>& args);
	static void GetLastError(const v8::FunctionCallbackInfo<v8::Value>& args);
	static void ReleaseInstance(const v8::FunctionCallbackInfo<v8::Value>& args);
	static void AcquireInstance(const v8::FunctionCallbackInfo<v8::Value>& args);
	static void InjectComponent(const v8::FunctionCallbackInfo<v8::Value>& args);
	static void GetSymbolLookupMethod(const v8::FunctionCallbackInfo<v8::Value>& args);
	static void CreateConnection(const v8::FunctionCallbackInfo<v8::Value>& args);

public:
	CLibAMCFWrapper();
	~CLibAMCFWrapper();
	static void Init();
	static v8::Local<v8::Object> NewInstance(const v8::FunctionCallbackInfo<v8::Value>& args);
};

#endif // LIBAMCF_NODEWRAPPER_H

