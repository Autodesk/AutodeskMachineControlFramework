/*++

Copyright (C) 2023 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.8.0-develop.

Abstract: This is an autogenerated C++-Header file with basic types in
order to allow an easy use of MC Driver A3200

Interface version: 2.0.0

*/

#ifndef __LIBMCDRIVER_A3200_TYPES_HEADER_CPP
#define __LIBMCDRIVER_A3200_TYPES_HEADER_CPP


/*************************************************************************************************************************
 Scalar types definition
**************************************************************************************************************************/

#ifdef LIBMCDRIVER_A3200_USELEGACYINTEGERTYPES

typedef unsigned char LibMCDriver_A3200_uint8;
typedef unsigned short LibMCDriver_A3200_uint16 ;
typedef unsigned int LibMCDriver_A3200_uint32;
typedef unsigned long long LibMCDriver_A3200_uint64;
typedef char LibMCDriver_A3200_int8;
typedef short LibMCDriver_A3200_int16;
typedef int LibMCDriver_A3200_int32;
typedef long long LibMCDriver_A3200_int64;

#else // LIBMCDRIVER_A3200_USELEGACYINTEGERTYPES

#include <stdint.h>

typedef uint8_t LibMCDriver_A3200_uint8;
typedef uint16_t LibMCDriver_A3200_uint16;
typedef uint32_t LibMCDriver_A3200_uint32;
typedef uint64_t LibMCDriver_A3200_uint64;
typedef int8_t LibMCDriver_A3200_int8;
typedef int16_t LibMCDriver_A3200_int16;
typedef int32_t LibMCDriver_A3200_int32;
typedef int64_t LibMCDriver_A3200_int64 ;

#endif // LIBMCDRIVER_A3200_USELEGACYINTEGERTYPES

typedef float LibMCDriver_A3200_single;
typedef double LibMCDriver_A3200_double;

/*************************************************************************************************************************
 General type definitions
**************************************************************************************************************************/

typedef LibMCDriver_A3200_int32 LibMCDriver_A3200Result;
typedef void * LibMCDriver_A3200Handle;
typedef void * LibMCDriver_A3200_pvoid;

/*************************************************************************************************************************
 Version for LibMCDriver_A3200
**************************************************************************************************************************/

#define LIBMCDRIVER_A3200_VERSION_MAJOR 2
#define LIBMCDRIVER_A3200_VERSION_MINOR 0
#define LIBMCDRIVER_A3200_VERSION_MICRO 0
#define LIBMCDRIVER_A3200_VERSION_PRERELEASEINFO ""
#define LIBMCDRIVER_A3200_VERSION_BUILDINFO ""

/*************************************************************************************************************************
 Error constants for LibMCDriver_A3200
**************************************************************************************************************************/

#define LIBMCDRIVER_A3200_SUCCESS 0
#define LIBMCDRIVER_A3200_ERROR_NOTIMPLEMENTED 1001 /** functionality not implemented */
#define LIBMCDRIVER_A3200_ERROR_INVALIDPARAM 1002 /** an invalid parameter was passed */
#define LIBMCDRIVER_A3200_ERROR_INVALIDCAST 1003 /** a type cast failed */
#define LIBMCDRIVER_A3200_ERROR_BUFFERTOOSMALL 1004 /** a provided buffer is too small */
#define LIBMCDRIVER_A3200_ERROR_GENERICEXCEPTION 1005 /** a generic exception occurred */
#define LIBMCDRIVER_A3200_ERROR_COULDNOTLOADLIBRARY 1006 /** the library could not be loaded */
#define LIBMCDRIVER_A3200_ERROR_COULDNOTFINDLIBRARYEXPORT 1007 /** a required exported symbol could not be found in the library */
#define LIBMCDRIVER_A3200_ERROR_INCOMPATIBLEBINARYVERSION 1008 /** the version of the binary interface does not match the bindings interface */
#define LIBMCDRIVER_A3200_ERROR_DRIVERERROR 1009 /** a driver error occured */
#define LIBMCDRIVER_A3200_ERROR_DRIVERNOTINITIALISED 1010 /** the driver is not initialised */
#define LIBMCDRIVER_A3200_ERROR_DRIVERNOTCONNECTED 1011 /** the driver is not connected */
#define LIBMCDRIVER_A3200_ERROR_INVALIDDRIVERPROTOCOL 1012 /** invalid driver protocol definition */
#define LIBMCDRIVER_A3200_ERROR_COULDNOTPARSEDRIVERPROTOCOL 1013 /** could not parse driver protocol */
#define LIBMCDRIVER_A3200_ERROR_NOTCONNECTED 1014 /** Not connected */
#define LIBMCDRIVER_A3200_ERROR_NOWORKINGDIRECTORY 1015 /** No working directory */

/*************************************************************************************************************************
 Error strings for LibMCDriver_A3200
**************************************************************************************************************************/

inline const char * LIBMCDRIVER_A3200_GETERRORSTRING (LibMCDriver_A3200Result nErrorCode) {
  switch (nErrorCode) {
    case LIBMCDRIVER_A3200_SUCCESS: return "no error";
    case LIBMCDRIVER_A3200_ERROR_NOTIMPLEMENTED: return "functionality not implemented";
    case LIBMCDRIVER_A3200_ERROR_INVALIDPARAM: return "an invalid parameter was passed";
    case LIBMCDRIVER_A3200_ERROR_INVALIDCAST: return "a type cast failed";
    case LIBMCDRIVER_A3200_ERROR_BUFFERTOOSMALL: return "a provided buffer is too small";
    case LIBMCDRIVER_A3200_ERROR_GENERICEXCEPTION: return "a generic exception occurred";
    case LIBMCDRIVER_A3200_ERROR_COULDNOTLOADLIBRARY: return "the library could not be loaded";
    case LIBMCDRIVER_A3200_ERROR_COULDNOTFINDLIBRARYEXPORT: return "a required exported symbol could not be found in the library";
    case LIBMCDRIVER_A3200_ERROR_INCOMPATIBLEBINARYVERSION: return "the version of the binary interface does not match the bindings interface";
    case LIBMCDRIVER_A3200_ERROR_DRIVERERROR: return "a driver error occured";
    case LIBMCDRIVER_A3200_ERROR_DRIVERNOTINITIALISED: return "the driver is not initialised";
    case LIBMCDRIVER_A3200_ERROR_DRIVERNOTCONNECTED: return "the driver is not connected";
    case LIBMCDRIVER_A3200_ERROR_INVALIDDRIVERPROTOCOL: return "invalid driver protocol definition";
    case LIBMCDRIVER_A3200_ERROR_COULDNOTPARSEDRIVERPROTOCOL: return "could not parse driver protocol";
    case LIBMCDRIVER_A3200_ERROR_NOTCONNECTED: return "Not connected";
    case LIBMCDRIVER_A3200_ERROR_NOWORKINGDIRECTORY: return "No working directory";
    default: return "unknown error";
  }
}

/*************************************************************************************************************************
 Declaration of handle classes 
**************************************************************************************************************************/

typedef LibMCDriver_A3200Handle LibMCDriver_A3200_Base;
typedef LibMCDriver_A3200Handle LibMCDriver_A3200_Driver;
typedef LibMCDriver_A3200Handle LibMCDriver_A3200_Driver_A3200;

namespace LibMCDriver_A3200 {

} // namespace LibMCDriver_A3200;

// define legacy C-names for enums, structs and function types

#endif // __LIBMCDRIVER_A3200_TYPES_HEADER_CPP
