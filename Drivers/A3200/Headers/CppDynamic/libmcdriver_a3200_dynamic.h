/*++

Copyright (C) 2023 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.8.0-develop.

Abstract: This is an autogenerated C++-Header file in order to allow an easy
 use of MC Driver A3200

Interface version: 2.0.0

*/

#ifndef __LIBMCDRIVER_A3200_DYNAMICHEADER_CPPTYPES
#define __LIBMCDRIVER_A3200_DYNAMICHEADER_CPPTYPES

#include "libmcdriver_a3200_types.hpp"

#include "libmcenv_types.hpp"


/*************************************************************************************************************************
 Class definition for Base
**************************************************************************************************************************/

/*************************************************************************************************************************
 Class definition for Driver
**************************************************************************************************************************/

/**
* Configures a driver with its specific configuration data.
*
* @param[in] pDriver - Driver instance.
* @param[in] pConfigurationString - Configuration data of driver.
* @return error code or 0 (success)
*/
typedef LibMCDriver_A3200Result (*PLibMCDriver_A3200Driver_ConfigurePtr) (LibMCDriver_A3200_Driver pDriver, const char * pConfigurationString);

/**
* returns the name identifier of the driver
*
* @param[in] pDriver - Driver instance.
* @param[in] nNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNameBuffer -  buffer of Name of the driver., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCDriver_A3200Result (*PLibMCDriver_A3200Driver_GetNamePtr) (LibMCDriver_A3200_Driver pDriver, const LibMCDriver_A3200_uint32 nNameBufferSize, LibMCDriver_A3200_uint32* pNameNeededChars, char * pNameBuffer);

/**
* returns the type identifier of the driver
*
* @param[in] pDriver - Driver instance.
* @param[in] nTypeBufferSize - size of the buffer (including trailing 0)
* @param[out] pTypeNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pTypeBuffer -  buffer of Type of the driver., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCDriver_A3200Result (*PLibMCDriver_A3200Driver_GetTypePtr) (LibMCDriver_A3200_Driver pDriver, const LibMCDriver_A3200_uint32 nTypeBufferSize, LibMCDriver_A3200_uint32* pTypeNeededChars, char * pTypeBuffer);

/**
* returns the version identifiers of the driver
*
* @param[in] pDriver - Driver instance.
* @param[out] pMajor - Major version.
* @param[out] pMinor - Minor version.
* @param[out] pMicro - Micro version.
* @param[in] nBuildBufferSize - size of the buffer (including trailing 0)
* @param[out] pBuildNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pBuildBuffer -  buffer of Build identifier., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCDriver_A3200Result (*PLibMCDriver_A3200Driver_GetVersionPtr) (LibMCDriver_A3200_Driver pDriver, LibMCDriver_A3200_uint32 * pMajor, LibMCDriver_A3200_uint32 * pMinor, LibMCDriver_A3200_uint32 * pMicro, const LibMCDriver_A3200_uint32 nBuildBufferSize, LibMCDriver_A3200_uint32* pBuildNeededChars, char * pBuildBuffer);

/**
* Updates the driver parameters in the driver environment. Should only be called in the driver thread.
*
* @param[in] pDriver - Driver instance.
* @return error code or 0 (success)
*/
typedef LibMCDriver_A3200Result (*PLibMCDriver_A3200Driver_QueryParametersPtr) (LibMCDriver_A3200_Driver pDriver);

/**
* Updates the driver parameters in the driver environment. Might be called out of thread. Implementation MUST be able to handle parallel calls.
*
* @param[in] pDriver - Driver instance.
* @param[in] pDriverUpdateInstance - Status update instance.
* @return error code or 0 (success)
*/
typedef LibMCDriver_A3200Result (*PLibMCDriver_A3200Driver_QueryParametersExPtr) (LibMCDriver_A3200_Driver pDriver, LibMCEnv_DriverStatusUpdateSession pDriverUpdateInstance);

/*************************************************************************************************************************
 Class definition for Driver_A3200
**************************************************************************************************************************/

/**
* Turns the driver into a simulation mode.
*
* @param[in] pDriver_A3200 - Driver_A3200 instance.
* @return error code or 0 (success)
*/
typedef LibMCDriver_A3200Result (*PLibMCDriver_A3200Driver_A3200_SetToSimulationModePtr) (LibMCDriver_A3200_Driver_A3200 pDriver_A3200);

/**
* Returns if the driver is in simulation mode.
*
* @param[in] pDriver_A3200 - Driver_A3200 instance.
* @param[out] pSimulationModeEnabled - Flag if driver is in simulation mode.
* @return error code or 0 (success)
*/
typedef LibMCDriver_A3200Result (*PLibMCDriver_A3200Driver_A3200_IsSimulationModePtr) (LibMCDriver_A3200_Driver_A3200 pDriver_A3200, bool * pSimulationModeEnabled);

/**
* Sets the machine resource name of the A3200 SDK to load. MUST be called before Connect or it has no effect.
*
* @param[in] pDriver_A3200 - Driver_A3200 instance.
* @param[in] pCoreResourceName - Resource name of core library DLL. Empty means standard naming a3200c64 applies.
* @param[in] pSystemResourceName - Resource name of system library DLL. Empty means standard naming a32sys64 applies.
* @param[in] pCompilerResourceName - Resource name of compiler library DLL. Empty means standard naming a32cmplr64 applies.
* @param[in] pUtilitiesResourceName - Resource name of utilities library DLL. Empty means standard naming aerutilities64 applies.
* @param[in] pLicenseDecoderResourceName - Resource name of license decoder library DLL. Empty means standard naming licensedecoder64 applies.
* @return error code or 0 (success)
*/
typedef LibMCDriver_A3200Result (*PLibMCDriver_A3200Driver_A3200_SetCustomSDKResourcePtr) (LibMCDriver_A3200_Driver_A3200 pDriver_A3200, const char * pCoreResourceName, const char * pSystemResourceName, const char * pCompilerResourceName, const char * pUtilitiesResourceName, const char * pLicenseDecoderResourceName);

/**
* Sets the machine resource name of the A3200 SDK to load. MUST be called before Connect or it has no effect.
*
* @param[in] pDriver_A3200 - Driver_A3200 instance.
* @param[in] nCoreSDKBufferBufferSize - Number of elements in buffer
* @param[in] pCoreSDKBufferBuffer - uint8 buffer of Binary array of core library DLL. Empty means standard resource naming a3200c64 applies.
* @param[in] nSystemSDKBufferBufferSize - Number of elements in buffer
* @param[in] pSystemSDKBufferBuffer - uint8 buffer of Binary array of system library DLL. Empty means standard resource naming a32sys64 applies.
* @param[in] nCompilerSDKBufferBufferSize - Number of elements in buffer
* @param[in] pCompilerSDKBufferBuffer - uint8 buffer of Binary array of compiler library DLL. Empty means standard resource naming a32cmplr64 applies.
* @param[in] nUtilitiesSDKBufferBufferSize - Number of elements in buffer
* @param[in] pUtilitiesSDKBufferBuffer - uint8 buffer of Binary array of utilities library DLL. Empty means standard resource naming aerutilities64 applies.
* @param[in] nLicenseDecoderSDKBufferBufferSize - Number of elements in buffer
* @param[in] pLicenseDecoderSDKBufferBuffer - uint8 buffer of Binary array of license decoder library DLL. Empty means resource standard naming licensedecoder64 applies.
* @return error code or 0 (success)
*/
typedef LibMCDriver_A3200Result (*PLibMCDriver_A3200Driver_A3200_SetCustomSDKPtr) (LibMCDriver_A3200_Driver_A3200 pDriver_A3200, LibMCDriver_A3200_uint64 nCoreSDKBufferBufferSize, const LibMCDriver_A3200_uint8 * pCoreSDKBufferBuffer, LibMCDriver_A3200_uint64 nSystemSDKBufferBufferSize, const LibMCDriver_A3200_uint8 * pSystemSDKBufferBuffer, LibMCDriver_A3200_uint64 nCompilerSDKBufferBufferSize, const LibMCDriver_A3200_uint8 * pCompilerSDKBufferBuffer, LibMCDriver_A3200_uint64 nUtilitiesSDKBufferBufferSize, const LibMCDriver_A3200_uint8 * pUtilitiesSDKBufferBuffer, LibMCDriver_A3200_uint64 nLicenseDecoderSDKBufferBufferSize, const LibMCDriver_A3200_uint8 * pLicenseDecoderSDKBufferBuffer);

/**
* Connects to the A3200 PLC Controller.
*
* @param[in] pDriver_A3200 - Driver_A3200 instance.
* @return error code or 0 (success)
*/
typedef LibMCDriver_A3200Result (*PLibMCDriver_A3200Driver_A3200_ConnectPtr) (LibMCDriver_A3200_Driver_A3200 pDriver_A3200);

/**
* Disconnects from the A3200 PLC Controller.
*
* @param[in] pDriver_A3200 - Driver_A3200 instance.
* @return error code or 0 (success)
*/
typedef LibMCDriver_A3200Result (*PLibMCDriver_A3200Driver_A3200_DisconnectPtr) (LibMCDriver_A3200_Driver_A3200 pDriver_A3200);

/**
* Runs an AeroBasic script on a PLC task.
*
* @param[in] pDriver_A3200 - Driver_A3200 instance.
* @param[in] nTaskID - TaskID to run the script on. MUST be between 1 and 31.
* @param[in] pScript - AeroBasic script as string.
* @return error code or 0 (success)
*/
typedef LibMCDriver_A3200Result (*PLibMCDriver_A3200Driver_A3200_RunScriptPtr) (LibMCDriver_A3200_Driver_A3200 pDriver_A3200, LibMCDriver_A3200_uint32 nTaskID, const char * pScript);

/**
* Runs a single AeroBasic command on a PLC task.
*
* @param[in] pDriver_A3200 - Driver_A3200 instance.
* @param[in] nTaskID - TaskID to run the script on. MUST be between 1 and 31.
* @param[in] pCommand - AeroBasic command as string.
* @return error code or 0 (success)
*/
typedef LibMCDriver_A3200Result (*PLibMCDriver_A3200Driver_A3200_RunCommandPtr) (LibMCDriver_A3200_Driver_A3200 pDriver_A3200, LibMCDriver_A3200_uint32 nTaskID, const char * pCommand);

/**
* Stops a running program on a task.
*
* @param[in] pDriver_A3200 - Driver_A3200 instance.
* @param[in] nTaskID - TaskID to stop. MUST be between 1 and 31.
* @param[in] nTimeout - Timeout in milliseconds.
* @return error code or 0 (success)
*/
typedef LibMCDriver_A3200Result (*PLibMCDriver_A3200Driver_A3200_StopProgramPtr) (LibMCDriver_A3200_Driver_A3200 pDriver_A3200, LibMCDriver_A3200_uint32 nTaskID, LibMCDriver_A3200_uint32 nTimeout);

/**
* Returns a global number variable.
*
* @param[in] pDriver_A3200 - Driver_A3200 instance.
* @param[in] pName - Variable to return
* @param[out] pValue - Value of variable
* @return error code or 0 (success)
*/
typedef LibMCDriver_A3200Result (*PLibMCDriver_A3200Driver_A3200_ReadGlobalNumberVariablePtr) (LibMCDriver_A3200_Driver_A3200 pDriver_A3200, const char * pName, LibMCDriver_A3200_double * pValue);

/**
* Sets a global number variable.
*
* @param[in] pDriver_A3200 - Driver_A3200 instance.
* @param[in] pName - Variable to set
* @param[in] dValue - Value of variable to set.
* @return error code or 0 (success)
*/
typedef LibMCDriver_A3200Result (*PLibMCDriver_A3200Driver_A3200_WriteGlobalNumberVariablePtr) (LibMCDriver_A3200_Driver_A3200 pDriver_A3200, const char * pName, LibMCDriver_A3200_double dValue);

/**
* Returns a global string variable.
*
* @param[in] pDriver_A3200 - Driver_A3200 instance.
* @param[in] pName - Variable to return
* @param[in] nValueBufferSize - size of the buffer (including trailing 0)
* @param[out] pValueNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pValueBuffer -  buffer of Value of variable, may be NULL
* @return error code or 0 (success)
*/
typedef LibMCDriver_A3200Result (*PLibMCDriver_A3200Driver_A3200_ReadGlobalStringVariablePtr) (LibMCDriver_A3200_Driver_A3200 pDriver_A3200, const char * pName, const LibMCDriver_A3200_uint32 nValueBufferSize, LibMCDriver_A3200_uint32* pValueNeededChars, char * pValueBuffer);

/**
* Sets a global string variable.
*
* @param[in] pDriver_A3200 - Driver_A3200 instance.
* @param[in] pName - Variable to set
* @param[in] pValue - Value of variable to set.
* @return error code or 0 (success)
*/
typedef LibMCDriver_A3200Result (*PLibMCDriver_A3200Driver_A3200_WriteGlobalStringVariablePtr) (LibMCDriver_A3200_Driver_A3200 pDriver_A3200, const char * pName, const char * pValue);

/**
* Returns a task number variable.
*
* @param[in] pDriver_A3200 - Driver_A3200 instance.
* @param[in] nTaskID - TaskID. MUST be between 1 and 31.
* @param[in] pName - Variable to return
* @param[out] pValue - Value of variable
* @return error code or 0 (success)
*/
typedef LibMCDriver_A3200Result (*PLibMCDriver_A3200Driver_A3200_ReadTaskNumberVariablePtr) (LibMCDriver_A3200_Driver_A3200 pDriver_A3200, LibMCDriver_A3200_uint32 nTaskID, const char * pName, LibMCDriver_A3200_double * pValue);

/**
* Sets a task number variable.
*
* @param[in] pDriver_A3200 - Driver_A3200 instance.
* @param[in] nTaskID - TaskID. MUST be between 1 and 31.
* @param[in] pName - Variable to set
* @param[in] dValue - Value of variable to set.
* @return error code or 0 (success)
*/
typedef LibMCDriver_A3200Result (*PLibMCDriver_A3200Driver_A3200_WriteTaskNumberVariablePtr) (LibMCDriver_A3200_Driver_A3200 pDriver_A3200, LibMCDriver_A3200_uint32 nTaskID, const char * pName, LibMCDriver_A3200_double dValue);

/**
* Returns a task string variable.
*
* @param[in] pDriver_A3200 - Driver_A3200 instance.
* @param[in] nTaskID - TaskID. MUST be between 1 and 31.
* @param[in] pName - Variable to return
* @param[in] nValueBufferSize - size of the buffer (including trailing 0)
* @param[out] pValueNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pValueBuffer -  buffer of Value of variable, may be NULL
* @return error code or 0 (success)
*/
typedef LibMCDriver_A3200Result (*PLibMCDriver_A3200Driver_A3200_ReadTaskStringVariablePtr) (LibMCDriver_A3200_Driver_A3200 pDriver_A3200, LibMCDriver_A3200_uint32 nTaskID, const char * pName, const LibMCDriver_A3200_uint32 nValueBufferSize, LibMCDriver_A3200_uint32* pValueNeededChars, char * pValueBuffer);

/**
* Sets a task string variable.
*
* @param[in] pDriver_A3200 - Driver_A3200 instance.
* @param[in] nTaskID - TaskID. MUST be between 1 and 31.
* @param[in] pName - Variable to set
* @param[in] pValue - Value of variable to set.
* @return error code or 0 (success)
*/
typedef LibMCDriver_A3200Result (*PLibMCDriver_A3200Driver_A3200_WriteTaskStringVariablePtr) (LibMCDriver_A3200_Driver_A3200 pDriver_A3200, LibMCDriver_A3200_uint32 nTaskID, const char * pName, const char * pValue);

/*************************************************************************************************************************
 Global functions
**************************************************************************************************************************/

/**
* retrieves the binary version of this library.
*
* @param[out] pMajor - returns the major version of this library
* @param[out] pMinor - returns the minor version of this library
* @param[out] pMicro - returns the micro version of this library
* @return error code or 0 (success)
*/
typedef LibMCDriver_A3200Result (*PLibMCDriver_A3200GetVersionPtr) (LibMCDriver_A3200_uint32 * pMajor, LibMCDriver_A3200_uint32 * pMinor, LibMCDriver_A3200_uint32 * pMicro);

/**
* Returns the last error recorded on this object
*
* @param[in] pInstance - Instance Handle
* @param[in] nErrorMessageBufferSize - size of the buffer (including trailing 0)
* @param[out] pErrorMessageNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pErrorMessageBuffer -  buffer of Message of the last error, may be NULL
* @param[out] pHasError - Is there a last error to query
* @return error code or 0 (success)
*/
typedef LibMCDriver_A3200Result (*PLibMCDriver_A3200GetLastErrorPtr) (LibMCDriver_A3200_Base pInstance, const LibMCDriver_A3200_uint32 nErrorMessageBufferSize, LibMCDriver_A3200_uint32* pErrorMessageNeededChars, char * pErrorMessageBuffer, bool * pHasError);

/**
* Releases shared ownership of an Instance
*
* @param[in] pInstance - Instance Handle
* @return error code or 0 (success)
*/
typedef LibMCDriver_A3200Result (*PLibMCDriver_A3200ReleaseInstancePtr) (LibMCDriver_A3200_Base pInstance);

/**
* Acquires shared ownership of an Instance
*
* @param[in] pInstance - Instance Handle
* @return error code or 0 (success)
*/
typedef LibMCDriver_A3200Result (*PLibMCDriver_A3200AcquireInstancePtr) (LibMCDriver_A3200_Base pInstance);

/**
* Injects an imported component for usage within this component
*
* @param[in] pNameSpace - NameSpace of the injected component
* @param[in] pSymbolAddressMethod - Address of the SymbolAddressMethod of the injected component
* @return error code or 0 (success)
*/
typedef LibMCDriver_A3200Result (*PLibMCDriver_A3200InjectComponentPtr) (const char * pNameSpace, LibMCDriver_A3200_pvoid pSymbolAddressMethod);

/**
* Returns the address of the SymbolLookupMethod
*
* @param[out] pSymbolLookupMethod - Address of the SymbolAddressMethod
* @return error code or 0 (success)
*/
typedef LibMCDriver_A3200Result (*PLibMCDriver_A3200GetSymbolLookupMethodPtr) (LibMCDriver_A3200_pvoid * pSymbolLookupMethod);

/**
* Creates a driver instance with a specific name.
*
* @param[in] pName - Name of driver to be created.
* @param[in] pType - Type of driver to be created.
* @param[in] pDriverEnvironment - Environment of this driver.
* @param[out] pInstance - New Driver instance
* @return error code or 0 (success)
*/
typedef LibMCDriver_A3200Result (*PLibMCDriver_A3200CreateDriverPtr) (const char * pName, const char * pType, LibMCEnv_DriverEnvironment pDriverEnvironment, LibMCDriver_A3200_Driver * pInstance);

/*************************************************************************************************************************
 Function Table Structure
**************************************************************************************************************************/

typedef struct {
	void * m_LibraryHandle;
	PLibMCDriver_A3200Driver_ConfigurePtr m_Driver_Configure;
	PLibMCDriver_A3200Driver_GetNamePtr m_Driver_GetName;
	PLibMCDriver_A3200Driver_GetTypePtr m_Driver_GetType;
	PLibMCDriver_A3200Driver_GetVersionPtr m_Driver_GetVersion;
	PLibMCDriver_A3200Driver_QueryParametersPtr m_Driver_QueryParameters;
	PLibMCDriver_A3200Driver_QueryParametersExPtr m_Driver_QueryParametersEx;
	PLibMCDriver_A3200Driver_A3200_SetToSimulationModePtr m_Driver_A3200_SetToSimulationMode;
	PLibMCDriver_A3200Driver_A3200_IsSimulationModePtr m_Driver_A3200_IsSimulationMode;
	PLibMCDriver_A3200Driver_A3200_SetCustomSDKResourcePtr m_Driver_A3200_SetCustomSDKResource;
	PLibMCDriver_A3200Driver_A3200_SetCustomSDKPtr m_Driver_A3200_SetCustomSDK;
	PLibMCDriver_A3200Driver_A3200_ConnectPtr m_Driver_A3200_Connect;
	PLibMCDriver_A3200Driver_A3200_DisconnectPtr m_Driver_A3200_Disconnect;
	PLibMCDriver_A3200Driver_A3200_RunScriptPtr m_Driver_A3200_RunScript;
	PLibMCDriver_A3200Driver_A3200_RunCommandPtr m_Driver_A3200_RunCommand;
	PLibMCDriver_A3200Driver_A3200_StopProgramPtr m_Driver_A3200_StopProgram;
	PLibMCDriver_A3200Driver_A3200_ReadGlobalNumberVariablePtr m_Driver_A3200_ReadGlobalNumberVariable;
	PLibMCDriver_A3200Driver_A3200_WriteGlobalNumberVariablePtr m_Driver_A3200_WriteGlobalNumberVariable;
	PLibMCDriver_A3200Driver_A3200_ReadGlobalStringVariablePtr m_Driver_A3200_ReadGlobalStringVariable;
	PLibMCDriver_A3200Driver_A3200_WriteGlobalStringVariablePtr m_Driver_A3200_WriteGlobalStringVariable;
	PLibMCDriver_A3200Driver_A3200_ReadTaskNumberVariablePtr m_Driver_A3200_ReadTaskNumberVariable;
	PLibMCDriver_A3200Driver_A3200_WriteTaskNumberVariablePtr m_Driver_A3200_WriteTaskNumberVariable;
	PLibMCDriver_A3200Driver_A3200_ReadTaskStringVariablePtr m_Driver_A3200_ReadTaskStringVariable;
	PLibMCDriver_A3200Driver_A3200_WriteTaskStringVariablePtr m_Driver_A3200_WriteTaskStringVariable;
	PLibMCDriver_A3200GetVersionPtr m_GetVersion;
	PLibMCDriver_A3200GetLastErrorPtr m_GetLastError;
	PLibMCDriver_A3200ReleaseInstancePtr m_ReleaseInstance;
	PLibMCDriver_A3200AcquireInstancePtr m_AcquireInstance;
	PLibMCDriver_A3200InjectComponentPtr m_InjectComponent;
	PLibMCDriver_A3200GetSymbolLookupMethodPtr m_GetSymbolLookupMethod;
	PLibMCDriver_A3200CreateDriverPtr m_CreateDriver;
} sLibMCDriver_A3200DynamicWrapperTable;

#endif // __LIBMCDRIVER_A3200_DYNAMICHEADER_CPPTYPES

