/*++

Copyright (C) 2023 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.8.0-develop.

Abstract: This is an autogenerated C++ header file in order to allow easy
development of MC Driver A3200. The implementer of MC Driver A3200 needs to
derive concrete classes from the abstract classes in this header.

Interface version: 2.0.0

*/


#ifndef __LIBMCDRIVER_A3200_CPPINTERFACES
#define __LIBMCDRIVER_A3200_CPPINTERFACES

#include <string>
#include <memory>

#include "libmcdriver_a3200_types.hpp"


#include "libmcenv_dynamic.hpp"

namespace LibMCDriver_A3200 {
namespace Impl {

/**
 Forward declarations of class interfaces
*/
class IBase;
class IDriver;
class IDriver_A3200;



/*************************************************************************************************************************
 Parameter Cache definitions
**************************************************************************************************************************/

class ParameterCache {
	public:
		virtual ~ParameterCache() {}
};

template <class T1> class ParameterCache_1 : public ParameterCache {
	private:
		T1 m_param1;
	public:
		ParameterCache_1 (const T1 & param1)
			: m_param1 (param1)
		{
		}

		void retrieveData (T1 & param1)
		{
			param1 = m_param1;
		}
};

template <class T1, class T2> class ParameterCache_2 : public ParameterCache {
	private:
		T1 m_param1;
		T2 m_param2;
	public:
		ParameterCache_2 (const T1 & param1, const T2 & param2)
			: m_param1 (param1), m_param2 (param2)
		{
		}

		void retrieveData (T1 & param1, T2 & param2)
		{
			param1 = m_param1;
			param2 = m_param2;
		}
};

template <class T1, class T2, class T3> class ParameterCache_3 : public ParameterCache {
	private:
		T1 m_param1;
		T2 m_param2;
		T3 m_param3;
	public:
		ParameterCache_3 (const T1 & param1, const T2 & param2, const T3 & param3)
			: m_param1 (param1), m_param2 (param2), m_param3 (param3)
		{
		}

		void retrieveData (T1 & param1, T2 & param2, T3 & param3)
		{
			param1 = m_param1;
			param2 = m_param2;
			param3 = m_param3;
		}
};

template <class T1, class T2, class T3, class T4> class ParameterCache_4 : public ParameterCache {
	private:
		T1 m_param1;
		T2 m_param2;
		T3 m_param3;
		T4 m_param4;
	public:
		ParameterCache_4 (const T1 & param1, const T2 & param2, const T3 & param3, const T4 & param4)
			: m_param1 (param1), m_param2 (param2), m_param3 (param3), m_param4 (param4)
		{
		}

		void retrieveData (T1 & param1, T2 & param2, T3 & param3, T4 & param4)
		{
			param1 = m_param1;
			param2 = m_param2;
			param3 = m_param3;
			param4 = m_param4;
		}
};

template <class T1, class T2, class T3, class T4, class T5> class ParameterCache_5 : public ParameterCache {
	private:
		T1 m_param1;
		T2 m_param2;
		T3 m_param3;
		T4 m_param4;
		T5 m_param5;
	public:
		ParameterCache_5 (const T1 & param1, const T2 & param2, const T3 & param3, const T4 & param4, const T5 & param5)
			: m_param1 (param1), m_param2 (param2), m_param3 (param3), m_param4 (param4), m_param5 (param5)
		{
		}

		void retrieveData (T1 & param1, T2 & param2, T3 & param3, T4 & param4, T5 & param5)
		{
			param1 = m_param1;
			param2 = m_param2;
			param3 = m_param3;
			param4 = m_param4;
			param5 = m_param5;
		}
};

template <class T1, class T2, class T3, class T4, class T5, class T6> class ParameterCache_6 : public ParameterCache {
	private:
		T1 m_param1;
		T2 m_param2;
		T3 m_param3;
		T4 m_param4;
		T5 m_param5;
		T6 m_param6;
	public:
		ParameterCache_6 (const T1 & param1, const T2 & param2, const T3 & param3, const T4 & param4, const T5 & param5, const T6 & param6)
			: m_param1 (param1), m_param2 (param2), m_param3 (param3), m_param4 (param4), m_param5 (param5), m_param6 (param6)
		{
		}

		void retrieveData (T1 & param1, T2 & param2, T3 & param3, T4 & param4, T5 & param5, T6 & param6)
		{
			param1 = m_param1;
			param2 = m_param2;
			param3 = m_param3;
			param4 = m_param4;
			param5 = m_param5;
			param6 = m_param6;
		}
};


/*************************************************************************************************************************
 Class interface for Base 
**************************************************************************************************************************/

class IBase {
private:
	std::unique_ptr<ParameterCache> m_ParameterCache;
public:
	/**
	* IBase::~IBase - virtual destructor of IBase
	*/
	virtual ~IBase() {};

	/**
	* IBase::ReleaseBaseClassInterface - Releases ownership of a base class interface. Deletes the reference, if necessary.
	* @param[in] pIBase - The base class instance to release
	*/
	static void ReleaseBaseClassInterface(IBase* pIBase)
	{
		if (pIBase) {
			pIBase->DecRefCount();
		}
	};

	/**
	* IBase::AcquireBaseClassInterface - Acquires shared ownership of a base class interface.
	* @param[in] pIBase - The base class instance to acquire
	*/
	static void AcquireBaseClassInterface(IBase* pIBase)
	{
		if (pIBase) {
			pIBase->IncRefCount();
		}
	};


	/**
	* IBase::GetLastErrorMessage - Returns the last error registered of this class instance
	* @param[out] sErrorMessage - Message of the last error registered
	* @return Has an error been registered already
	*/
	virtual bool GetLastErrorMessage(std::string & sErrorMessage) = 0;

	/**
	* IBase::ClearErrorMessages - Clears all registered messages of this class instance
	*/
	virtual void ClearErrorMessages() = 0;

	/**
	* IBase::RegisterErrorMessage - Registers an error message with this class instance
	* @param[in] sErrorMessage - Error message to register
	*/
	virtual void RegisterErrorMessage(const std::string & sErrorMessage) = 0;

	/**
	* IBase::IncRefCount - Increases the reference count of a class instance
	*/
	virtual void IncRefCount() = 0;

	/**
	* IBase::DecRefCount - Decreases the reference count of a class instance and free releases it, if the last reference has been removed
	* @return Has the object been released
	*/
	virtual bool DecRefCount() = 0;

	/**
	* IBase::_setCache - set parameter cache of object
	*/
	void _setCache(ParameterCache * pCache)
	{
		m_ParameterCache.reset(pCache);
	}

	/**
	* IBase::_getCache - returns parameter cache of object
	*/
	ParameterCache* _getCache()
	{
		return m_ParameterCache.get();
	}

};


/**
 Definition of a shared pointer class for IBase
*/
template<class T>
class IBaseSharedPtr : public std::shared_ptr<T>
{
public:
	explicit IBaseSharedPtr(T* t = nullptr)
		: std::shared_ptr<T>(t, IBase::ReleaseBaseClassInterface)
	{
		t->IncRefCount();
	}

	// Reset function, as it also needs to properly set the deleter.
	void reset(T* t = nullptr)
	{
		std::shared_ptr<T>::reset(t, IBase::ReleaseBaseClassInterface);
	}

	// Get-function that increases the Base class's reference count
	T* getCoOwningPtr()
	{
		T* t = this->get();
		t->IncRefCount();
		return t;
	}
};


typedef IBaseSharedPtr<IBase> PIBase;


/*************************************************************************************************************************
 Class interface for Driver 
**************************************************************************************************************************/

class IDriver : public virtual IBase {
public:
	/**
	* IDriver::Configure - Configures a driver with its specific configuration data.
	* @param[in] sConfigurationString - Configuration data of driver.
	*/
	virtual void Configure(const std::string & sConfigurationString) = 0;

	/**
	* IDriver::GetName - returns the name identifier of the driver
	* @return Name of the driver.
	*/
	virtual std::string GetName() = 0;

	/**
	* IDriver::GetType - returns the type identifier of the driver
	* @return Type of the driver.
	*/
	virtual std::string GetType() = 0;

	/**
	* IDriver::GetVersion - returns the version identifiers of the driver
	* @param[out] nMajor - Major version.
	* @param[out] nMinor - Minor version.
	* @param[out] nMicro - Micro version.
	* @param[out] sBuild - Build identifier.
	*/
	virtual void GetVersion(LibMCDriver_A3200_uint32 & nMajor, LibMCDriver_A3200_uint32 & nMinor, LibMCDriver_A3200_uint32 & nMicro, std::string & sBuild) = 0;

	/**
	* IDriver::QueryParameters - Updates the driver parameters in the driver environment. Should only be called in the driver thread.
	*/
	virtual void QueryParameters() = 0;

	/**
	* IDriver::QueryParametersEx - Updates the driver parameters in the driver environment. Might be called out of thread. Implementation MUST be able to handle parallel calls.
	* @param[in] pDriverUpdateInstance - Status update instance.
	*/
	virtual void QueryParametersEx(LibMCEnv::PDriverStatusUpdateSession pDriverUpdateInstance) = 0;

};

typedef IBaseSharedPtr<IDriver> PIDriver;


/*************************************************************************************************************************
 Class interface for Driver_A3200 
**************************************************************************************************************************/

class IDriver_A3200 : public virtual IDriver {
public:
	/**
	* IDriver_A3200::SetToSimulationMode - Turns the driver into a simulation mode.
	*/
	virtual void SetToSimulationMode() = 0;

	/**
	* IDriver_A3200::IsSimulationMode - Returns if the driver is in simulation mode.
	* @return Flag if driver is in simulation mode.
	*/
	virtual bool IsSimulationMode() = 0;

	/**
	* IDriver_A3200::SetCustomSDKResource - Sets the machine resource name of the A3200 SDK to load. MUST be called before Connect or it has no effect.
	* @param[in] sCoreResourceName - Resource name of core library DLL. Empty means standard naming a3200c64 applies.
	* @param[in] sSystemResourceName - Resource name of system library DLL. Empty means standard naming a32sys64 applies.
	* @param[in] sCompilerResourceName - Resource name of compiler library DLL. Empty means standard naming a32cmplr64 applies.
	* @param[in] sUtilitiesResourceName - Resource name of utilities library DLL. Empty means standard naming aerutilities64 applies.
	* @param[in] sLicenseDecoderResourceName - Resource name of license decoder library DLL. Empty means standard naming licensedecoder64 applies.
	*/
	virtual void SetCustomSDKResource(const std::string & sCoreResourceName, const std::string & sSystemResourceName, const std::string & sCompilerResourceName, const std::string & sUtilitiesResourceName, const std::string & sLicenseDecoderResourceName) = 0;

	/**
	* IDriver_A3200::SetCustomSDK - Sets the machine resource name of the A3200 SDK to load. MUST be called before Connect or it has no effect.
	* @param[in] nCoreSDKBufferBufferSize - Number of elements in buffer
	* @param[in] pCoreSDKBufferBuffer - Binary array of core library DLL. Empty means standard resource naming a3200c64 applies.
	* @param[in] nSystemSDKBufferBufferSize - Number of elements in buffer
	* @param[in] pSystemSDKBufferBuffer - Binary array of system library DLL. Empty means standard resource naming a32sys64 applies.
	* @param[in] nCompilerSDKBufferBufferSize - Number of elements in buffer
	* @param[in] pCompilerSDKBufferBuffer - Binary array of compiler library DLL. Empty means standard resource naming a32cmplr64 applies.
	* @param[in] nUtilitiesSDKBufferBufferSize - Number of elements in buffer
	* @param[in] pUtilitiesSDKBufferBuffer - Binary array of utilities library DLL. Empty means standard resource naming aerutilities64 applies.
	* @param[in] nLicenseDecoderSDKBufferBufferSize - Number of elements in buffer
	* @param[in] pLicenseDecoderSDKBufferBuffer - Binary array of license decoder library DLL. Empty means resource standard naming licensedecoder64 applies.
	*/
	virtual void SetCustomSDK(const LibMCDriver_A3200_uint64 nCoreSDKBufferBufferSize, const LibMCDriver_A3200_uint8 * pCoreSDKBufferBuffer, const LibMCDriver_A3200_uint64 nSystemSDKBufferBufferSize, const LibMCDriver_A3200_uint8 * pSystemSDKBufferBuffer, const LibMCDriver_A3200_uint64 nCompilerSDKBufferBufferSize, const LibMCDriver_A3200_uint8 * pCompilerSDKBufferBuffer, const LibMCDriver_A3200_uint64 nUtilitiesSDKBufferBufferSize, const LibMCDriver_A3200_uint8 * pUtilitiesSDKBufferBuffer, const LibMCDriver_A3200_uint64 nLicenseDecoderSDKBufferBufferSize, const LibMCDriver_A3200_uint8 * pLicenseDecoderSDKBufferBuffer) = 0;

	/**
	* IDriver_A3200::Connect - Connects to the A3200 PLC Controller.
	*/
	virtual void Connect() = 0;

	/**
	* IDriver_A3200::Disconnect - Disconnects from the A3200 PLC Controller.
	*/
	virtual void Disconnect() = 0;

	/**
	* IDriver_A3200::RunScript - Runs an AeroBasic script on a PLC task.
	* @param[in] nTaskID - TaskID to run the script on. MUST be between 1 and 31.
	* @param[in] sScript - AeroBasic script as string.
	*/
	virtual void RunScript(const LibMCDriver_A3200_uint32 nTaskID, const std::string & sScript) = 0;

	/**
	* IDriver_A3200::RunCommand - Runs a single AeroBasic command on a PLC task.
	* @param[in] nTaskID - TaskID to run the script on. MUST be between 1 and 31.
	* @param[in] sCommand - AeroBasic command as string.
	*/
	virtual void RunCommand(const LibMCDriver_A3200_uint32 nTaskID, const std::string & sCommand) = 0;

	/**
	* IDriver_A3200::StopProgram - Stops a running program on a task.
	* @param[in] nTaskID - TaskID to stop. MUST be between 1 and 31.
	* @param[in] nTimeout - Timeout in milliseconds.
	*/
	virtual void StopProgram(const LibMCDriver_A3200_uint32 nTaskID, const LibMCDriver_A3200_uint32 nTimeout) = 0;

	/**
	* IDriver_A3200::ReadGlobalNumberVariable - Returns a global number variable.
	* @param[in] sName - Variable to return
	* @return Value of variable
	*/
	virtual LibMCDriver_A3200_double ReadGlobalNumberVariable(const std::string & sName) = 0;

	/**
	* IDriver_A3200::WriteGlobalNumberVariable - Sets a global number variable.
	* @param[in] sName - Variable to set
	* @param[in] dValue - Value of variable to set.
	*/
	virtual void WriteGlobalNumberVariable(const std::string & sName, const LibMCDriver_A3200_double dValue) = 0;

	/**
	* IDriver_A3200::ReadGlobalStringVariable - Returns a global string variable.
	* @param[in] sName - Variable to return
	* @return Value of variable
	*/
	virtual std::string ReadGlobalStringVariable(const std::string & sName) = 0;

	/**
	* IDriver_A3200::WriteGlobalStringVariable - Sets a global string variable.
	* @param[in] sName - Variable to set
	* @param[in] sValue - Value of variable to set.
	*/
	virtual void WriteGlobalStringVariable(const std::string & sName, const std::string & sValue) = 0;

	/**
	* IDriver_A3200::ReadTaskNumberVariable - Returns a task number variable.
	* @param[in] nTaskID - TaskID. MUST be between 1 and 31.
	* @param[in] sName - Variable to return
	* @return Value of variable
	*/
	virtual LibMCDriver_A3200_double ReadTaskNumberVariable(const LibMCDriver_A3200_uint32 nTaskID, const std::string & sName) = 0;

	/**
	* IDriver_A3200::WriteTaskNumberVariable - Sets a task number variable.
	* @param[in] nTaskID - TaskID. MUST be between 1 and 31.
	* @param[in] sName - Variable to set
	* @param[in] dValue - Value of variable to set.
	*/
	virtual void WriteTaskNumberVariable(const LibMCDriver_A3200_uint32 nTaskID, const std::string & sName, const LibMCDriver_A3200_double dValue) = 0;

	/**
	* IDriver_A3200::ReadTaskStringVariable - Returns a task string variable.
	* @param[in] nTaskID - TaskID. MUST be between 1 and 31.
	* @param[in] sName - Variable to return
	* @return Value of variable
	*/
	virtual std::string ReadTaskStringVariable(const LibMCDriver_A3200_uint32 nTaskID, const std::string & sName) = 0;

	/**
	* IDriver_A3200::WriteTaskStringVariable - Sets a task string variable.
	* @param[in] nTaskID - TaskID. MUST be between 1 and 31.
	* @param[in] sName - Variable to set
	* @param[in] sValue - Value of variable to set.
	*/
	virtual void WriteTaskStringVariable(const LibMCDriver_A3200_uint32 nTaskID, const std::string & sName, const std::string & sValue) = 0;

	/**
	* IDriver_A3200::ReadAxisPosition - Reads out the position information of an axis.
	* @param[in] nAxisID - AxisID. MUST be between 0 and 31.
	* @return Axis position value.
	*/
	virtual LibMCDriver_A3200_double ReadAxisPosition(const LibMCDriver_A3200_uint32 nAxisID) = 0;

	/**
	* IDriver_A3200::ReadAxisTargetPosition - Reads out the target position information of an axis.
	* @param[in] nAxisID - AxisID. MUST be between 0 and 31.
	* @return Axis target position value.
	*/
	virtual LibMCDriver_A3200_double ReadAxisTargetPosition(const LibMCDriver_A3200_uint32 nAxisID) = 0;

	/**
	* IDriver_A3200::ReadAxisVelocity - Reads out the velocity information of an axis.
	* @param[in] nAxisID - AxisID. MUST be between 0 and 31.
	* @return Axis velocity value.
	*/
	virtual LibMCDriver_A3200_double ReadAxisVelocity(const LibMCDriver_A3200_uint32 nAxisID) = 0;

	/**
	* IDriver_A3200::ReadAxisTargetVelocity - Reads out the target velocity information of an axis.
	* @param[in] nAxisID - AxisID. MUST be between 0 and 31.
	* @return Axis target velocity value.
	*/
	virtual LibMCDriver_A3200_double ReadAxisTargetVelocity(const LibMCDriver_A3200_uint32 nAxisID) = 0;

	/**
	* IDriver_A3200::ReadAxisInformation - Reads out all information of an axis.
	* @param[in] nAxisID - AxisID. MUST be between 0 and 31.
	* @param[out] dCurrentPositionValue - Current Position.
	* @param[out] dTargetPositionValue - Target Position.
	* @param[out] dPositionErrorValue - Position Error Value.
	* @param[out] dCurrentVelocityValue - Current Velocity.
	* @param[out] dTargetVelocityValue - Target Velocity.
	* @param[out] dVelocityErrorValue - Velocity Error Value.
	*/
	virtual void ReadAxisInformation(const LibMCDriver_A3200_uint32 nAxisID, LibMCDriver_A3200_double & dCurrentPositionValue, LibMCDriver_A3200_double & dTargetPositionValue, LibMCDriver_A3200_double & dPositionErrorValue, LibMCDriver_A3200_double & dCurrentVelocityValue, LibMCDriver_A3200_double & dTargetVelocityValue, LibMCDriver_A3200_double & dVelocityErrorValue) = 0;

};

typedef IBaseSharedPtr<IDriver_A3200> PIDriver_A3200;


/*************************************************************************************************************************
 Global functions declarations
**************************************************************************************************************************/
class CWrapper {
public:
	// Injected Components
	static LibMCEnv::PWrapper sPLibMCEnvWrapper;

	/**
	* Ilibmcdriver_a3200::GetVersion - retrieves the binary version of this library.
	* @param[out] nMajor - returns the major version of this library
	* @param[out] nMinor - returns the minor version of this library
	* @param[out] nMicro - returns the micro version of this library
	*/
	static void GetVersion(LibMCDriver_A3200_uint32 & nMajor, LibMCDriver_A3200_uint32 & nMinor, LibMCDriver_A3200_uint32 & nMicro);

	/**
	* Ilibmcdriver_a3200::GetLastError - Returns the last error recorded on this object
	* @param[in] pInstance - Instance Handle
	* @param[out] sErrorMessage - Message of the last error
	* @return Is there a last error to query
	*/
	static bool GetLastError(IBase* pInstance, std::string & sErrorMessage);

	/**
	* Ilibmcdriver_a3200::ReleaseInstance - Releases shared ownership of an Instance
	* @param[in] pInstance - Instance Handle
	*/
	static void ReleaseInstance(IBase* pInstance);

	/**
	* Ilibmcdriver_a3200::AcquireInstance - Acquires shared ownership of an Instance
	* @param[in] pInstance - Instance Handle
	*/
	static void AcquireInstance(IBase* pInstance);

	/**
	* Ilibmcdriver_a3200::CreateDriver - Creates a driver instance with a specific name.
	* @param[in] sName - Name of driver to be created.
	* @param[in] sType - Type of driver to be created.
	* @param[in] pDriverEnvironment - Environment of this driver.
	* @return New Driver instance
	*/
	static IDriver * CreateDriver(const std::string & sName, const std::string & sType, LibMCEnv::PDriverEnvironment pDriverEnvironment);

};

LibMCDriver_A3200Result LibMCDriver_A3200_GetProcAddress (const char * pProcName, void ** ppProcAddress);

} // namespace Impl
} // namespace LibMCDriver_A3200

#endif // __LIBMCDRIVER_A3200_CPPINTERFACES
