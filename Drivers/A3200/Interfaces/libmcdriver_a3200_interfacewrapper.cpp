/*++

Copyright (C) 2023 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.8.0-develop.

Abstract: This is an autogenerated C++ implementation file in order to allow easy
development of MC Driver A3200. The functions in this file need to be implemented. It needs to be generated only once.

Interface version: 2.0.0

*/

#include "libmcdriver_a3200_abi.hpp"
#include "libmcdriver_a3200_interfaces.hpp"
#include "libmcdriver_a3200_interfaceexception.hpp"

#include <map>

using namespace LibMCDriver_A3200::Impl;

LibMCDriver_A3200Result handleLibMCDriver_A3200Exception(IBase * pIBaseClass, ELibMCDriver_A3200InterfaceException & Exception)
{
	LibMCDriver_A3200Result errorCode = Exception.getErrorCode();

	if (pIBaseClass != nullptr)
		pIBaseClass->RegisterErrorMessage(Exception.what());

	return errorCode;
}

LibMCDriver_A3200Result handleStdException(IBase * pIBaseClass, std::exception & Exception)
{
	LibMCDriver_A3200Result errorCode = LIBMCDRIVER_A3200_ERROR_GENERICEXCEPTION;

	if (pIBaseClass != nullptr)
		pIBaseClass->RegisterErrorMessage(Exception.what());

	return errorCode;
}

LibMCDriver_A3200Result handleUnhandledException(IBase * pIBaseClass)
{
	LibMCDriver_A3200Result errorCode = LIBMCDRIVER_A3200_ERROR_GENERICEXCEPTION;

	if (pIBaseClass != nullptr)
		pIBaseClass->RegisterErrorMessage("Unhandled Exception");

	return errorCode;
}



/*************************************************************************************************************************
 Class implementation for Base
**************************************************************************************************************************/

/*************************************************************************************************************************
 Class implementation for Driver
**************************************************************************************************************************/
LibMCDriver_A3200Result libmcdriver_a3200_driver_configure(LibMCDriver_A3200_Driver pDriver, const char * pConfigurationString)
{
	IBase* pIBaseClass = (IBase *)pDriver;

	try {
		if (pConfigurationString == nullptr)
			throw ELibMCDriver_A3200InterfaceException (LIBMCDRIVER_A3200_ERROR_INVALIDPARAM);
		std::string sConfigurationString(pConfigurationString);
		IDriver* pIDriver = dynamic_cast<IDriver*>(pIBaseClass);
		if (!pIDriver)
			throw ELibMCDriver_A3200InterfaceException(LIBMCDRIVER_A3200_ERROR_INVALIDCAST);
		
		pIDriver->Configure(sConfigurationString);

		return LIBMCDRIVER_A3200_SUCCESS;
	}
	catch (ELibMCDriver_A3200InterfaceException & Exception) {
		return handleLibMCDriver_A3200Exception(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_A3200Result libmcdriver_a3200_driver_getname(LibMCDriver_A3200_Driver pDriver, const LibMCDriver_A3200_uint32 nNameBufferSize, LibMCDriver_A3200_uint32* pNameNeededChars, char * pNameBuffer)
{
	IBase* pIBaseClass = (IBase *)pDriver;

	try {
		if ( (!pNameBuffer) && !(pNameNeededChars) )
			throw ELibMCDriver_A3200InterfaceException (LIBMCDRIVER_A3200_ERROR_INVALIDPARAM);
		std::string sName("");
		IDriver* pIDriver = dynamic_cast<IDriver*>(pIBaseClass);
		if (!pIDriver)
			throw ELibMCDriver_A3200InterfaceException(LIBMCDRIVER_A3200_ERROR_INVALIDCAST);
		
		bool isCacheCall = (pNameBuffer == nullptr);
		if (isCacheCall) {
			sName = pIDriver->GetName();

			pIDriver->_setCache (new ParameterCache_1<std::string> (sName));
		}
		else {
			auto cache = dynamic_cast<ParameterCache_1<std::string>*> (pIDriver->_getCache ());
			if (cache == nullptr)
				throw ELibMCDriver_A3200InterfaceException(LIBMCDRIVER_A3200_ERROR_INVALIDCAST);
			cache->retrieveData (sName);
			pIDriver->_setCache (nullptr);
		}
		
		if (pNameNeededChars)
			*pNameNeededChars = (LibMCDriver_A3200_uint32) (sName.size()+1);
		if (pNameBuffer) {
			if (sName.size() >= nNameBufferSize)
				throw ELibMCDriver_A3200InterfaceException (LIBMCDRIVER_A3200_ERROR_BUFFERTOOSMALL);
			for (size_t iName = 0; iName < sName.size(); iName++)
				pNameBuffer[iName] = sName[iName];
			pNameBuffer[sName.size()] = 0;
		}
		return LIBMCDRIVER_A3200_SUCCESS;
	}
	catch (ELibMCDriver_A3200InterfaceException & Exception) {
		return handleLibMCDriver_A3200Exception(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_A3200Result libmcdriver_a3200_driver_gettype(LibMCDriver_A3200_Driver pDriver, const LibMCDriver_A3200_uint32 nTypeBufferSize, LibMCDriver_A3200_uint32* pTypeNeededChars, char * pTypeBuffer)
{
	IBase* pIBaseClass = (IBase *)pDriver;

	try {
		if ( (!pTypeBuffer) && !(pTypeNeededChars) )
			throw ELibMCDriver_A3200InterfaceException (LIBMCDRIVER_A3200_ERROR_INVALIDPARAM);
		std::string sType("");
		IDriver* pIDriver = dynamic_cast<IDriver*>(pIBaseClass);
		if (!pIDriver)
			throw ELibMCDriver_A3200InterfaceException(LIBMCDRIVER_A3200_ERROR_INVALIDCAST);
		
		bool isCacheCall = (pTypeBuffer == nullptr);
		if (isCacheCall) {
			sType = pIDriver->GetType();

			pIDriver->_setCache (new ParameterCache_1<std::string> (sType));
		}
		else {
			auto cache = dynamic_cast<ParameterCache_1<std::string>*> (pIDriver->_getCache ());
			if (cache == nullptr)
				throw ELibMCDriver_A3200InterfaceException(LIBMCDRIVER_A3200_ERROR_INVALIDCAST);
			cache->retrieveData (sType);
			pIDriver->_setCache (nullptr);
		}
		
		if (pTypeNeededChars)
			*pTypeNeededChars = (LibMCDriver_A3200_uint32) (sType.size()+1);
		if (pTypeBuffer) {
			if (sType.size() >= nTypeBufferSize)
				throw ELibMCDriver_A3200InterfaceException (LIBMCDRIVER_A3200_ERROR_BUFFERTOOSMALL);
			for (size_t iType = 0; iType < sType.size(); iType++)
				pTypeBuffer[iType] = sType[iType];
			pTypeBuffer[sType.size()] = 0;
		}
		return LIBMCDRIVER_A3200_SUCCESS;
	}
	catch (ELibMCDriver_A3200InterfaceException & Exception) {
		return handleLibMCDriver_A3200Exception(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_A3200Result libmcdriver_a3200_driver_getversion(LibMCDriver_A3200_Driver pDriver, LibMCDriver_A3200_uint32 * pMajor, LibMCDriver_A3200_uint32 * pMinor, LibMCDriver_A3200_uint32 * pMicro, const LibMCDriver_A3200_uint32 nBuildBufferSize, LibMCDriver_A3200_uint32* pBuildNeededChars, char * pBuildBuffer)
{
	IBase* pIBaseClass = (IBase *)pDriver;

	try {
		if (!pMajor)
			throw ELibMCDriver_A3200InterfaceException (LIBMCDRIVER_A3200_ERROR_INVALIDPARAM);
		if (!pMinor)
			throw ELibMCDriver_A3200InterfaceException (LIBMCDRIVER_A3200_ERROR_INVALIDPARAM);
		if (!pMicro)
			throw ELibMCDriver_A3200InterfaceException (LIBMCDRIVER_A3200_ERROR_INVALIDPARAM);
		if ( (!pBuildBuffer) && !(pBuildNeededChars) )
			throw ELibMCDriver_A3200InterfaceException (LIBMCDRIVER_A3200_ERROR_INVALIDPARAM);
		std::string sBuild("");
		IDriver* pIDriver = dynamic_cast<IDriver*>(pIBaseClass);
		if (!pIDriver)
			throw ELibMCDriver_A3200InterfaceException(LIBMCDRIVER_A3200_ERROR_INVALIDCAST);
		
		bool isCacheCall = (pBuildBuffer == nullptr);
		if (isCacheCall) {
			pIDriver->GetVersion(*pMajor, *pMinor, *pMicro, sBuild);

			pIDriver->_setCache (new ParameterCache_4<LibMCDriver_A3200_uint32, LibMCDriver_A3200_uint32, LibMCDriver_A3200_uint32, std::string> (*pMajor, *pMinor, *pMicro, sBuild));
		}
		else {
			auto cache = dynamic_cast<ParameterCache_4<LibMCDriver_A3200_uint32, LibMCDriver_A3200_uint32, LibMCDriver_A3200_uint32, std::string>*> (pIDriver->_getCache ());
			if (cache == nullptr)
				throw ELibMCDriver_A3200InterfaceException(LIBMCDRIVER_A3200_ERROR_INVALIDCAST);
			cache->retrieveData (*pMajor, *pMinor, *pMicro, sBuild);
			pIDriver->_setCache (nullptr);
		}
		
		if (pBuildNeededChars)
			*pBuildNeededChars = (LibMCDriver_A3200_uint32) (sBuild.size()+1);
		if (pBuildBuffer) {
			if (sBuild.size() >= nBuildBufferSize)
				throw ELibMCDriver_A3200InterfaceException (LIBMCDRIVER_A3200_ERROR_BUFFERTOOSMALL);
			for (size_t iBuild = 0; iBuild < sBuild.size(); iBuild++)
				pBuildBuffer[iBuild] = sBuild[iBuild];
			pBuildBuffer[sBuild.size()] = 0;
		}
		return LIBMCDRIVER_A3200_SUCCESS;
	}
	catch (ELibMCDriver_A3200InterfaceException & Exception) {
		return handleLibMCDriver_A3200Exception(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_A3200Result libmcdriver_a3200_driver_queryparameters(LibMCDriver_A3200_Driver pDriver)
{
	IBase* pIBaseClass = (IBase *)pDriver;

	try {
		IDriver* pIDriver = dynamic_cast<IDriver*>(pIBaseClass);
		if (!pIDriver)
			throw ELibMCDriver_A3200InterfaceException(LIBMCDRIVER_A3200_ERROR_INVALIDCAST);
		
		pIDriver->QueryParameters();

		return LIBMCDRIVER_A3200_SUCCESS;
	}
	catch (ELibMCDriver_A3200InterfaceException & Exception) {
		return handleLibMCDriver_A3200Exception(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_A3200Result libmcdriver_a3200_driver_queryparametersex(LibMCDriver_A3200_Driver pDriver, LibMCEnv_DriverStatusUpdateSession pDriverUpdateInstance)
{
	IBase* pIBaseClass = (IBase *)pDriver;

	try {
		LibMCEnv::PDriverStatusUpdateSession pIDriverUpdateInstance = std::make_shared<LibMCEnv::CDriverStatusUpdateSession>(CWrapper::sPLibMCEnvWrapper.get(), pDriverUpdateInstance);
		CWrapper::sPLibMCEnvWrapper->AcquireInstance(pIDriverUpdateInstance.get());
		if (!pIDriverUpdateInstance)
			throw ELibMCDriver_A3200InterfaceException (LIBMCDRIVER_A3200_ERROR_INVALIDCAST);
		
		IDriver* pIDriver = dynamic_cast<IDriver*>(pIBaseClass);
		if (!pIDriver)
			throw ELibMCDriver_A3200InterfaceException(LIBMCDRIVER_A3200_ERROR_INVALIDCAST);
		
		pIDriver->QueryParametersEx(pIDriverUpdateInstance);

		return LIBMCDRIVER_A3200_SUCCESS;
	}
	catch (ELibMCDriver_A3200InterfaceException & Exception) {
		return handleLibMCDriver_A3200Exception(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}


/*************************************************************************************************************************
 Class implementation for Driver_A3200
**************************************************************************************************************************/
LibMCDriver_A3200Result libmcdriver_a3200_driver_a3200_settosimulationmode(LibMCDriver_A3200_Driver_A3200 pDriver_A3200)
{
	IBase* pIBaseClass = (IBase *)pDriver_A3200;

	try {
		IDriver_A3200* pIDriver_A3200 = dynamic_cast<IDriver_A3200*>(pIBaseClass);
		if (!pIDriver_A3200)
			throw ELibMCDriver_A3200InterfaceException(LIBMCDRIVER_A3200_ERROR_INVALIDCAST);
		
		pIDriver_A3200->SetToSimulationMode();

		return LIBMCDRIVER_A3200_SUCCESS;
	}
	catch (ELibMCDriver_A3200InterfaceException & Exception) {
		return handleLibMCDriver_A3200Exception(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_A3200Result libmcdriver_a3200_driver_a3200_issimulationmode(LibMCDriver_A3200_Driver_A3200 pDriver_A3200, bool * pSimulationModeEnabled)
{
	IBase* pIBaseClass = (IBase *)pDriver_A3200;

	try {
		if (pSimulationModeEnabled == nullptr)
			throw ELibMCDriver_A3200InterfaceException (LIBMCDRIVER_A3200_ERROR_INVALIDPARAM);
		IDriver_A3200* pIDriver_A3200 = dynamic_cast<IDriver_A3200*>(pIBaseClass);
		if (!pIDriver_A3200)
			throw ELibMCDriver_A3200InterfaceException(LIBMCDRIVER_A3200_ERROR_INVALIDCAST);
		
		*pSimulationModeEnabled = pIDriver_A3200->IsSimulationMode();

		return LIBMCDRIVER_A3200_SUCCESS;
	}
	catch (ELibMCDriver_A3200InterfaceException & Exception) {
		return handleLibMCDriver_A3200Exception(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_A3200Result libmcdriver_a3200_driver_a3200_setcustomsdkresource(LibMCDriver_A3200_Driver_A3200 pDriver_A3200, const char * pCoreResourceName, const char * pSystemResourceName, const char * pCompilerResourceName, const char * pUtilitiesResourceName, const char * pLicenseDecoderResourceName)
{
	IBase* pIBaseClass = (IBase *)pDriver_A3200;

	try {
		if (pCoreResourceName == nullptr)
			throw ELibMCDriver_A3200InterfaceException (LIBMCDRIVER_A3200_ERROR_INVALIDPARAM);
		if (pSystemResourceName == nullptr)
			throw ELibMCDriver_A3200InterfaceException (LIBMCDRIVER_A3200_ERROR_INVALIDPARAM);
		if (pCompilerResourceName == nullptr)
			throw ELibMCDriver_A3200InterfaceException (LIBMCDRIVER_A3200_ERROR_INVALIDPARAM);
		if (pUtilitiesResourceName == nullptr)
			throw ELibMCDriver_A3200InterfaceException (LIBMCDRIVER_A3200_ERROR_INVALIDPARAM);
		if (pLicenseDecoderResourceName == nullptr)
			throw ELibMCDriver_A3200InterfaceException (LIBMCDRIVER_A3200_ERROR_INVALIDPARAM);
		std::string sCoreResourceName(pCoreResourceName);
		std::string sSystemResourceName(pSystemResourceName);
		std::string sCompilerResourceName(pCompilerResourceName);
		std::string sUtilitiesResourceName(pUtilitiesResourceName);
		std::string sLicenseDecoderResourceName(pLicenseDecoderResourceName);
		IDriver_A3200* pIDriver_A3200 = dynamic_cast<IDriver_A3200*>(pIBaseClass);
		if (!pIDriver_A3200)
			throw ELibMCDriver_A3200InterfaceException(LIBMCDRIVER_A3200_ERROR_INVALIDCAST);
		
		pIDriver_A3200->SetCustomSDKResource(sCoreResourceName, sSystemResourceName, sCompilerResourceName, sUtilitiesResourceName, sLicenseDecoderResourceName);

		return LIBMCDRIVER_A3200_SUCCESS;
	}
	catch (ELibMCDriver_A3200InterfaceException & Exception) {
		return handleLibMCDriver_A3200Exception(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_A3200Result libmcdriver_a3200_driver_a3200_setcustomsdk(LibMCDriver_A3200_Driver_A3200 pDriver_A3200, LibMCDriver_A3200_uint64 nCoreSDKBufferBufferSize, const LibMCDriver_A3200_uint8 * pCoreSDKBufferBuffer, LibMCDriver_A3200_uint64 nSystemSDKBufferBufferSize, const LibMCDriver_A3200_uint8 * pSystemSDKBufferBuffer, LibMCDriver_A3200_uint64 nCompilerSDKBufferBufferSize, const LibMCDriver_A3200_uint8 * pCompilerSDKBufferBuffer, LibMCDriver_A3200_uint64 nUtilitiesSDKBufferBufferSize, const LibMCDriver_A3200_uint8 * pUtilitiesSDKBufferBuffer, LibMCDriver_A3200_uint64 nLicenseDecoderSDKBufferBufferSize, const LibMCDriver_A3200_uint8 * pLicenseDecoderSDKBufferBuffer)
{
	IBase* pIBaseClass = (IBase *)pDriver_A3200;

	try {
		if ( (!pCoreSDKBufferBuffer) && (nCoreSDKBufferBufferSize>0))
			throw ELibMCDriver_A3200InterfaceException (LIBMCDRIVER_A3200_ERROR_INVALIDPARAM);
		if ( (!pSystemSDKBufferBuffer) && (nSystemSDKBufferBufferSize>0))
			throw ELibMCDriver_A3200InterfaceException (LIBMCDRIVER_A3200_ERROR_INVALIDPARAM);
		if ( (!pCompilerSDKBufferBuffer) && (nCompilerSDKBufferBufferSize>0))
			throw ELibMCDriver_A3200InterfaceException (LIBMCDRIVER_A3200_ERROR_INVALIDPARAM);
		if ( (!pUtilitiesSDKBufferBuffer) && (nUtilitiesSDKBufferBufferSize>0))
			throw ELibMCDriver_A3200InterfaceException (LIBMCDRIVER_A3200_ERROR_INVALIDPARAM);
		if ( (!pLicenseDecoderSDKBufferBuffer) && (nLicenseDecoderSDKBufferBufferSize>0))
			throw ELibMCDriver_A3200InterfaceException (LIBMCDRIVER_A3200_ERROR_INVALIDPARAM);
		IDriver_A3200* pIDriver_A3200 = dynamic_cast<IDriver_A3200*>(pIBaseClass);
		if (!pIDriver_A3200)
			throw ELibMCDriver_A3200InterfaceException(LIBMCDRIVER_A3200_ERROR_INVALIDCAST);
		
		pIDriver_A3200->SetCustomSDK(nCoreSDKBufferBufferSize, pCoreSDKBufferBuffer, nSystemSDKBufferBufferSize, pSystemSDKBufferBuffer, nCompilerSDKBufferBufferSize, pCompilerSDKBufferBuffer, nUtilitiesSDKBufferBufferSize, pUtilitiesSDKBufferBuffer, nLicenseDecoderSDKBufferBufferSize, pLicenseDecoderSDKBufferBuffer);

		return LIBMCDRIVER_A3200_SUCCESS;
	}
	catch (ELibMCDriver_A3200InterfaceException & Exception) {
		return handleLibMCDriver_A3200Exception(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_A3200Result libmcdriver_a3200_driver_a3200_connect(LibMCDriver_A3200_Driver_A3200 pDriver_A3200)
{
	IBase* pIBaseClass = (IBase *)pDriver_A3200;

	try {
		IDriver_A3200* pIDriver_A3200 = dynamic_cast<IDriver_A3200*>(pIBaseClass);
		if (!pIDriver_A3200)
			throw ELibMCDriver_A3200InterfaceException(LIBMCDRIVER_A3200_ERROR_INVALIDCAST);
		
		pIDriver_A3200->Connect();

		return LIBMCDRIVER_A3200_SUCCESS;
	}
	catch (ELibMCDriver_A3200InterfaceException & Exception) {
		return handleLibMCDriver_A3200Exception(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_A3200Result libmcdriver_a3200_driver_a3200_disconnect(LibMCDriver_A3200_Driver_A3200 pDriver_A3200)
{
	IBase* pIBaseClass = (IBase *)pDriver_A3200;

	try {
		IDriver_A3200* pIDriver_A3200 = dynamic_cast<IDriver_A3200*>(pIBaseClass);
		if (!pIDriver_A3200)
			throw ELibMCDriver_A3200InterfaceException(LIBMCDRIVER_A3200_ERROR_INVALIDCAST);
		
		pIDriver_A3200->Disconnect();

		return LIBMCDRIVER_A3200_SUCCESS;
	}
	catch (ELibMCDriver_A3200InterfaceException & Exception) {
		return handleLibMCDriver_A3200Exception(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_A3200Result libmcdriver_a3200_driver_a3200_runaerobasicscript(LibMCDriver_A3200_Driver_A3200 pDriver_A3200, LibMCDriver_A3200_uint32 nTaskID, const char * pScript)
{
	IBase* pIBaseClass = (IBase *)pDriver_A3200;

	try {
		if (pScript == nullptr)
			throw ELibMCDriver_A3200InterfaceException (LIBMCDRIVER_A3200_ERROR_INVALIDPARAM);
		std::string sScript(pScript);
		IDriver_A3200* pIDriver_A3200 = dynamic_cast<IDriver_A3200*>(pIBaseClass);
		if (!pIDriver_A3200)
			throw ELibMCDriver_A3200InterfaceException(LIBMCDRIVER_A3200_ERROR_INVALIDCAST);
		
		pIDriver_A3200->RunAeroBasicScript(nTaskID, sScript);

		return LIBMCDRIVER_A3200_SUCCESS;
	}
	catch (ELibMCDriver_A3200InterfaceException & Exception) {
		return handleLibMCDriver_A3200Exception(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_A3200Result libmcdriver_a3200_driver_a3200_stopprogram(LibMCDriver_A3200_Driver_A3200 pDriver_A3200, LibMCDriver_A3200_uint32 nTaskID, LibMCDriver_A3200_uint32 nTimeout)
{
	IBase* pIBaseClass = (IBase *)pDriver_A3200;

	try {
		IDriver_A3200* pIDriver_A3200 = dynamic_cast<IDriver_A3200*>(pIBaseClass);
		if (!pIDriver_A3200)
			throw ELibMCDriver_A3200InterfaceException(LIBMCDRIVER_A3200_ERROR_INVALIDCAST);
		
		pIDriver_A3200->StopProgram(nTaskID, nTimeout);

		return LIBMCDRIVER_A3200_SUCCESS;
	}
	catch (ELibMCDriver_A3200InterfaceException & Exception) {
		return handleLibMCDriver_A3200Exception(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}



/*************************************************************************************************************************
 Function table lookup implementation
**************************************************************************************************************************/

LibMCDriver_A3200Result LibMCDriver_A3200::Impl::LibMCDriver_A3200_GetProcAddress (const char * pProcName, void ** ppProcAddress)
{
	if (pProcName == nullptr)
		return LIBMCDRIVER_A3200_ERROR_INVALIDPARAM;
	if (ppProcAddress == nullptr)
		return LIBMCDRIVER_A3200_ERROR_INVALIDPARAM;
	*ppProcAddress = nullptr;
	std::string sProcName (pProcName);
	
	if (sProcName == "libmcdriver_a3200_driver_configure") 
		*ppProcAddress = (void*) &libmcdriver_a3200_driver_configure;
	if (sProcName == "libmcdriver_a3200_driver_getname") 
		*ppProcAddress = (void*) &libmcdriver_a3200_driver_getname;
	if (sProcName == "libmcdriver_a3200_driver_gettype") 
		*ppProcAddress = (void*) &libmcdriver_a3200_driver_gettype;
	if (sProcName == "libmcdriver_a3200_driver_getversion") 
		*ppProcAddress = (void*) &libmcdriver_a3200_driver_getversion;
	if (sProcName == "libmcdriver_a3200_driver_queryparameters") 
		*ppProcAddress = (void*) &libmcdriver_a3200_driver_queryparameters;
	if (sProcName == "libmcdriver_a3200_driver_queryparametersex") 
		*ppProcAddress = (void*) &libmcdriver_a3200_driver_queryparametersex;
	if (sProcName == "libmcdriver_a3200_driver_a3200_settosimulationmode") 
		*ppProcAddress = (void*) &libmcdriver_a3200_driver_a3200_settosimulationmode;
	if (sProcName == "libmcdriver_a3200_driver_a3200_issimulationmode") 
		*ppProcAddress = (void*) &libmcdriver_a3200_driver_a3200_issimulationmode;
	if (sProcName == "libmcdriver_a3200_driver_a3200_setcustomsdkresource") 
		*ppProcAddress = (void*) &libmcdriver_a3200_driver_a3200_setcustomsdkresource;
	if (sProcName == "libmcdriver_a3200_driver_a3200_setcustomsdk") 
		*ppProcAddress = (void*) &libmcdriver_a3200_driver_a3200_setcustomsdk;
	if (sProcName == "libmcdriver_a3200_driver_a3200_connect") 
		*ppProcAddress = (void*) &libmcdriver_a3200_driver_a3200_connect;
	if (sProcName == "libmcdriver_a3200_driver_a3200_disconnect") 
		*ppProcAddress = (void*) &libmcdriver_a3200_driver_a3200_disconnect;
	if (sProcName == "libmcdriver_a3200_driver_a3200_runaerobasicscript") 
		*ppProcAddress = (void*) &libmcdriver_a3200_driver_a3200_runaerobasicscript;
	if (sProcName == "libmcdriver_a3200_driver_a3200_stopprogram") 
		*ppProcAddress = (void*) &libmcdriver_a3200_driver_a3200_stopprogram;
	if (sProcName == "libmcdriver_a3200_getversion") 
		*ppProcAddress = (void*) &libmcdriver_a3200_getversion;
	if (sProcName == "libmcdriver_a3200_getlasterror") 
		*ppProcAddress = (void*) &libmcdriver_a3200_getlasterror;
	if (sProcName == "libmcdriver_a3200_releaseinstance") 
		*ppProcAddress = (void*) &libmcdriver_a3200_releaseinstance;
	if (sProcName == "libmcdriver_a3200_acquireinstance") 
		*ppProcAddress = (void*) &libmcdriver_a3200_acquireinstance;
	if (sProcName == "libmcdriver_a3200_injectcomponent") 
		*ppProcAddress = (void*) &libmcdriver_a3200_injectcomponent;
	if (sProcName == "libmcdriver_a3200_getsymbollookupmethod") 
		*ppProcAddress = (void*) &libmcdriver_a3200_getsymbollookupmethod;
	if (sProcName == "libmcdriver_a3200_createdriver") 
		*ppProcAddress = (void*) &libmcdriver_a3200_createdriver;
	
	if (*ppProcAddress == nullptr) 
		return LIBMCDRIVER_A3200_ERROR_COULDNOTFINDLIBRARYEXPORT;
	return LIBMCDRIVER_A3200_SUCCESS;
}

/*************************************************************************************************************************
 Global functions implementation
**************************************************************************************************************************/
LibMCDriver_A3200Result libmcdriver_a3200_getversion(LibMCDriver_A3200_uint32 * pMajor, LibMCDriver_A3200_uint32 * pMinor, LibMCDriver_A3200_uint32 * pMicro)
{
	IBase* pIBaseClass = nullptr;

	try {
		if (!pMajor)
			throw ELibMCDriver_A3200InterfaceException (LIBMCDRIVER_A3200_ERROR_INVALIDPARAM);
		if (!pMinor)
			throw ELibMCDriver_A3200InterfaceException (LIBMCDRIVER_A3200_ERROR_INVALIDPARAM);
		if (!pMicro)
			throw ELibMCDriver_A3200InterfaceException (LIBMCDRIVER_A3200_ERROR_INVALIDPARAM);
		CWrapper::GetVersion(*pMajor, *pMinor, *pMicro);

		return LIBMCDRIVER_A3200_SUCCESS;
	}
	catch (ELibMCDriver_A3200InterfaceException & Exception) {
		return handleLibMCDriver_A3200Exception(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_A3200Result libmcdriver_a3200_getlasterror(LibMCDriver_A3200_Base pInstance, const LibMCDriver_A3200_uint32 nErrorMessageBufferSize, LibMCDriver_A3200_uint32* pErrorMessageNeededChars, char * pErrorMessageBuffer, bool * pHasError)
{
	IBase* pIBaseClass = nullptr;

	try {
		if ( (!pErrorMessageBuffer) && !(pErrorMessageNeededChars) )
			throw ELibMCDriver_A3200InterfaceException (LIBMCDRIVER_A3200_ERROR_INVALIDPARAM);
		if (pHasError == nullptr)
			throw ELibMCDriver_A3200InterfaceException (LIBMCDRIVER_A3200_ERROR_INVALIDPARAM);
		IBase* pIBaseClassInstance = (IBase *)pInstance;
		IBase* pIInstance = dynamic_cast<IBase*>(pIBaseClassInstance);
		if (!pIInstance)
			throw ELibMCDriver_A3200InterfaceException (LIBMCDRIVER_A3200_ERROR_INVALIDCAST);
		
		std::string sErrorMessage("");
		*pHasError = CWrapper::GetLastError(pIInstance, sErrorMessage);

		if (pErrorMessageNeededChars)
			*pErrorMessageNeededChars = (LibMCDriver_A3200_uint32) (sErrorMessage.size()+1);
		if (pErrorMessageBuffer) {
			if (sErrorMessage.size() >= nErrorMessageBufferSize)
				throw ELibMCDriver_A3200InterfaceException (LIBMCDRIVER_A3200_ERROR_BUFFERTOOSMALL);
			for (size_t iErrorMessage = 0; iErrorMessage < sErrorMessage.size(); iErrorMessage++)
				pErrorMessageBuffer[iErrorMessage] = sErrorMessage[iErrorMessage];
			pErrorMessageBuffer[sErrorMessage.size()] = 0;
		}
		return LIBMCDRIVER_A3200_SUCCESS;
	}
	catch (ELibMCDriver_A3200InterfaceException & Exception) {
		return handleLibMCDriver_A3200Exception(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_A3200Result libmcdriver_a3200_releaseinstance(LibMCDriver_A3200_Base pInstance)
{
	IBase* pIBaseClass = nullptr;

	try {
		IBase* pIBaseClassInstance = (IBase *)pInstance;
		IBase* pIInstance = dynamic_cast<IBase*>(pIBaseClassInstance);
		if (!pIInstance)
			throw ELibMCDriver_A3200InterfaceException (LIBMCDRIVER_A3200_ERROR_INVALIDCAST);
		
		CWrapper::ReleaseInstance(pIInstance);

		return LIBMCDRIVER_A3200_SUCCESS;
	}
	catch (ELibMCDriver_A3200InterfaceException & Exception) {
		return handleLibMCDriver_A3200Exception(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_A3200Result libmcdriver_a3200_acquireinstance(LibMCDriver_A3200_Base pInstance)
{
	IBase* pIBaseClass = nullptr;

	try {
		IBase* pIBaseClassInstance = (IBase *)pInstance;
		IBase* pIInstance = dynamic_cast<IBase*>(pIBaseClassInstance);
		if (!pIInstance)
			throw ELibMCDriver_A3200InterfaceException (LIBMCDRIVER_A3200_ERROR_INVALIDCAST);
		
		CWrapper::AcquireInstance(pIInstance);

		return LIBMCDRIVER_A3200_SUCCESS;
	}
	catch (ELibMCDriver_A3200InterfaceException & Exception) {
		return handleLibMCDriver_A3200Exception(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_A3200Result libmcdriver_a3200_injectcomponent(const char * pNameSpace, LibMCDriver_A3200_pvoid pSymbolAddressMethod)
{
	IBase* pIBaseClass = nullptr;

	try {
		if (pNameSpace == nullptr)
			throw ELibMCDriver_A3200InterfaceException (LIBMCDRIVER_A3200_ERROR_INVALIDPARAM);
		std::string sNameSpace(pNameSpace);
		
		bool bNameSpaceFound = false;
		
		if (sNameSpace == "LibMCEnv") {
			if (CWrapper::sPLibMCEnvWrapper.get() != nullptr) {
				throw ELibMCDriver_A3200InterfaceException(LIBMCDRIVER_A3200_ERROR_COULDNOTLOADLIBRARY);
			}
			CWrapper::sPLibMCEnvWrapper = LibMCEnv::CWrapper::loadLibraryFromSymbolLookupMethod(pSymbolAddressMethod);
			bNameSpaceFound = true;
		}
		
		if (!bNameSpaceFound)
			throw ELibMCDriver_A3200InterfaceException(LIBMCDRIVER_A3200_ERROR_COULDNOTLOADLIBRARY);
		
		return LIBMCDRIVER_A3200_SUCCESS;
	}
	catch (ELibMCDriver_A3200InterfaceException & Exception) {
		return handleLibMCDriver_A3200Exception(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_A3200Result libmcdriver_a3200_getsymbollookupmethod(LibMCDriver_A3200_pvoid * pSymbolLookupMethod)
{
	IBase* pIBaseClass = nullptr;

	try {
		if (pSymbolLookupMethod == nullptr)
			throw ELibMCDriver_A3200InterfaceException (LIBMCDRIVER_A3200_ERROR_INVALIDPARAM);
		*pSymbolLookupMethod = (void*)&LibMCDriver_A3200::Impl::LibMCDriver_A3200_GetProcAddress;
		return LIBMCDRIVER_A3200_SUCCESS;
	}
	catch (ELibMCDriver_A3200InterfaceException & Exception) {
		return handleLibMCDriver_A3200Exception(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_A3200Result libmcdriver_a3200_createdriver(const char * pName, const char * pType, LibMCEnv_DriverEnvironment pDriverEnvironment, LibMCDriver_A3200_Driver * pInstance)
{
	IBase* pIBaseClass = nullptr;

	try {
		if (pName == nullptr)
			throw ELibMCDriver_A3200InterfaceException (LIBMCDRIVER_A3200_ERROR_INVALIDPARAM);
		if (pType == nullptr)
			throw ELibMCDriver_A3200InterfaceException (LIBMCDRIVER_A3200_ERROR_INVALIDPARAM);
		if (pInstance == nullptr)
			throw ELibMCDriver_A3200InterfaceException (LIBMCDRIVER_A3200_ERROR_INVALIDPARAM);
		std::string sName(pName);
		std::string sType(pType);
		LibMCEnv::PDriverEnvironment pIDriverEnvironment = std::make_shared<LibMCEnv::CDriverEnvironment>(CWrapper::sPLibMCEnvWrapper.get(), pDriverEnvironment);
		CWrapper::sPLibMCEnvWrapper->AcquireInstance(pIDriverEnvironment.get());
		if (!pIDriverEnvironment)
			throw ELibMCDriver_A3200InterfaceException (LIBMCDRIVER_A3200_ERROR_INVALIDCAST);
		
		IBase* pBaseInstance(nullptr);
		pBaseInstance = CWrapper::CreateDriver(sName, sType, pIDriverEnvironment);

		*pInstance = (IBase*)(pBaseInstance);
		return LIBMCDRIVER_A3200_SUCCESS;
	}
	catch (ELibMCDriver_A3200InterfaceException & Exception) {
		return handleLibMCDriver_A3200Exception(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}


