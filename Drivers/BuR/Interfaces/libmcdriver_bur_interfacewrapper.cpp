/*++

Copyright (C) 2020 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.8.0-develop.

Abstract: This is an autogenerated C++ implementation file in order to allow easy
development of MC Driver BR Automation 2.0. The functions in this file need to be implemented. It needs to be generated only once.

Interface version: 2.0.0

*/

#include "libmcdriver_bur_abi.hpp"
#include "libmcdriver_bur_interfaces.hpp"
#include "libmcdriver_bur_interfaceexception.hpp"

#include <map>

using namespace LibMCDriver_BuR::Impl;

LibMCDriver_BuRResult handleLibMCDriver_BuRException(IBase * pIBaseClass, ELibMCDriver_BuRInterfaceException & Exception)
{
	LibMCDriver_BuRResult errorCode = Exception.getErrorCode();

	if (pIBaseClass != nullptr)
		pIBaseClass->RegisterErrorMessage(Exception.what());

	return errorCode;
}

LibMCDriver_BuRResult handleStdException(IBase * pIBaseClass, std::exception & Exception)
{
	LibMCDriver_BuRResult errorCode = LIBMCDRIVER_BUR_ERROR_GENERICEXCEPTION;

	if (pIBaseClass != nullptr)
		pIBaseClass->RegisterErrorMessage(Exception.what());

	return errorCode;
}

LibMCDriver_BuRResult handleUnhandledException(IBase * pIBaseClass)
{
	LibMCDriver_BuRResult errorCode = LIBMCDRIVER_BUR_ERROR_GENERICEXCEPTION;

	if (pIBaseClass != nullptr)
		pIBaseClass->RegisterErrorMessage("Unhandled Exception");

	return errorCode;
}



/*************************************************************************************************************************
 Class implementation for Base
**************************************************************************************************************************/

/*************************************************************************************************************************
 Class implementation for Driver
**************************************************************************************************************************/
LibMCDriver_BuRResult libmcdriver_bur_driver_configure(LibMCDriver_BuR_Driver pDriver, const char * pConfigurationString)
{
	IBase* pIBaseClass = (IBase *)pDriver;

	try {
		if (pConfigurationString == nullptr)
			throw ELibMCDriver_BuRInterfaceException (LIBMCDRIVER_BUR_ERROR_INVALIDPARAM);
		std::string sConfigurationString(pConfigurationString);
		IDriver* pIDriver = dynamic_cast<IDriver*>(pIBaseClass);
		if (!pIDriver)
			throw ELibMCDriver_BuRInterfaceException(LIBMCDRIVER_BUR_ERROR_INVALIDCAST);
		
		pIDriver->Configure(sConfigurationString);

		return LIBMCDRIVER_BUR_SUCCESS;
	}
	catch (ELibMCDriver_BuRInterfaceException & Exception) {
		return handleLibMCDriver_BuRException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_BuRResult libmcdriver_bur_driver_getname(LibMCDriver_BuR_Driver pDriver, const LibMCDriver_BuR_uint32 nNameBufferSize, LibMCDriver_BuR_uint32* pNameNeededChars, char * pNameBuffer)
{
	IBase* pIBaseClass = (IBase *)pDriver;

	try {
		if ( (!pNameBuffer) && !(pNameNeededChars) )
			throw ELibMCDriver_BuRInterfaceException (LIBMCDRIVER_BUR_ERROR_INVALIDPARAM);
		std::string sName("");
		IDriver* pIDriver = dynamic_cast<IDriver*>(pIBaseClass);
		if (!pIDriver)
			throw ELibMCDriver_BuRInterfaceException(LIBMCDRIVER_BUR_ERROR_INVALIDCAST);
		
		bool isCacheCall = (pNameBuffer == nullptr);
		if (isCacheCall) {
			sName = pIDriver->GetName();

			pIDriver->_setCache (new ParameterCache_1<std::string> (sName));
		}
		else {
			auto cache = dynamic_cast<ParameterCache_1<std::string>*> (pIDriver->_getCache ());
			if (cache == nullptr)
				throw ELibMCDriver_BuRInterfaceException(LIBMCDRIVER_BUR_ERROR_INVALIDCAST);
			cache->retrieveData (sName);
			pIDriver->_setCache (nullptr);
		}
		
		if (pNameNeededChars)
			*pNameNeededChars = (LibMCDriver_BuR_uint32) (sName.size()+1);
		if (pNameBuffer) {
			if (sName.size() >= nNameBufferSize)
				throw ELibMCDriver_BuRInterfaceException (LIBMCDRIVER_BUR_ERROR_BUFFERTOOSMALL);
			for (size_t iName = 0; iName < sName.size(); iName++)
				pNameBuffer[iName] = sName[iName];
			pNameBuffer[sName.size()] = 0;
		}
		return LIBMCDRIVER_BUR_SUCCESS;
	}
	catch (ELibMCDriver_BuRInterfaceException & Exception) {
		return handleLibMCDriver_BuRException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_BuRResult libmcdriver_bur_driver_gettype(LibMCDriver_BuR_Driver pDriver, const LibMCDriver_BuR_uint32 nTypeBufferSize, LibMCDriver_BuR_uint32* pTypeNeededChars, char * pTypeBuffer)
{
	IBase* pIBaseClass = (IBase *)pDriver;

	try {
		if ( (!pTypeBuffer) && !(pTypeNeededChars) )
			throw ELibMCDriver_BuRInterfaceException (LIBMCDRIVER_BUR_ERROR_INVALIDPARAM);
		std::string sType("");
		IDriver* pIDriver = dynamic_cast<IDriver*>(pIBaseClass);
		if (!pIDriver)
			throw ELibMCDriver_BuRInterfaceException(LIBMCDRIVER_BUR_ERROR_INVALIDCAST);
		
		bool isCacheCall = (pTypeBuffer == nullptr);
		if (isCacheCall) {
			sType = pIDriver->GetType();

			pIDriver->_setCache (new ParameterCache_1<std::string> (sType));
		}
		else {
			auto cache = dynamic_cast<ParameterCache_1<std::string>*> (pIDriver->_getCache ());
			if (cache == nullptr)
				throw ELibMCDriver_BuRInterfaceException(LIBMCDRIVER_BUR_ERROR_INVALIDCAST);
			cache->retrieveData (sType);
			pIDriver->_setCache (nullptr);
		}
		
		if (pTypeNeededChars)
			*pTypeNeededChars = (LibMCDriver_BuR_uint32) (sType.size()+1);
		if (pTypeBuffer) {
			if (sType.size() >= nTypeBufferSize)
				throw ELibMCDriver_BuRInterfaceException (LIBMCDRIVER_BUR_ERROR_BUFFERTOOSMALL);
			for (size_t iType = 0; iType < sType.size(); iType++)
				pTypeBuffer[iType] = sType[iType];
			pTypeBuffer[sType.size()] = 0;
		}
		return LIBMCDRIVER_BUR_SUCCESS;
	}
	catch (ELibMCDriver_BuRInterfaceException & Exception) {
		return handleLibMCDriver_BuRException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_BuRResult libmcdriver_bur_driver_getversion(LibMCDriver_BuR_Driver pDriver, LibMCDriver_BuR_uint32 * pMajor, LibMCDriver_BuR_uint32 * pMinor, LibMCDriver_BuR_uint32 * pMicro, const LibMCDriver_BuR_uint32 nBuildBufferSize, LibMCDriver_BuR_uint32* pBuildNeededChars, char * pBuildBuffer)
{
	IBase* pIBaseClass = (IBase *)pDriver;

	try {
		if (!pMajor)
			throw ELibMCDriver_BuRInterfaceException (LIBMCDRIVER_BUR_ERROR_INVALIDPARAM);
		if (!pMinor)
			throw ELibMCDriver_BuRInterfaceException (LIBMCDRIVER_BUR_ERROR_INVALIDPARAM);
		if (!pMicro)
			throw ELibMCDriver_BuRInterfaceException (LIBMCDRIVER_BUR_ERROR_INVALIDPARAM);
		if ( (!pBuildBuffer) && !(pBuildNeededChars) )
			throw ELibMCDriver_BuRInterfaceException (LIBMCDRIVER_BUR_ERROR_INVALIDPARAM);
		std::string sBuild("");
		IDriver* pIDriver = dynamic_cast<IDriver*>(pIBaseClass);
		if (!pIDriver)
			throw ELibMCDriver_BuRInterfaceException(LIBMCDRIVER_BUR_ERROR_INVALIDCAST);
		
		bool isCacheCall = (pBuildBuffer == nullptr);
		if (isCacheCall) {
			pIDriver->GetVersion(*pMajor, *pMinor, *pMicro, sBuild);

			pIDriver->_setCache (new ParameterCache_4<LibMCDriver_BuR_uint32, LibMCDriver_BuR_uint32, LibMCDriver_BuR_uint32, std::string> (*pMajor, *pMinor, *pMicro, sBuild));
		}
		else {
			auto cache = dynamic_cast<ParameterCache_4<LibMCDriver_BuR_uint32, LibMCDriver_BuR_uint32, LibMCDriver_BuR_uint32, std::string>*> (pIDriver->_getCache ());
			if (cache == nullptr)
				throw ELibMCDriver_BuRInterfaceException(LIBMCDRIVER_BUR_ERROR_INVALIDCAST);
			cache->retrieveData (*pMajor, *pMinor, *pMicro, sBuild);
			pIDriver->_setCache (nullptr);
		}
		
		if (pBuildNeededChars)
			*pBuildNeededChars = (LibMCDriver_BuR_uint32) (sBuild.size()+1);
		if (pBuildBuffer) {
			if (sBuild.size() >= nBuildBufferSize)
				throw ELibMCDriver_BuRInterfaceException (LIBMCDRIVER_BUR_ERROR_BUFFERTOOSMALL);
			for (size_t iBuild = 0; iBuild < sBuild.size(); iBuild++)
				pBuildBuffer[iBuild] = sBuild[iBuild];
			pBuildBuffer[sBuild.size()] = 0;
		}
		return LIBMCDRIVER_BUR_SUCCESS;
	}
	catch (ELibMCDriver_BuRInterfaceException & Exception) {
		return handleLibMCDriver_BuRException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_BuRResult libmcdriver_bur_driver_queryparameters(LibMCDriver_BuR_Driver pDriver, LibMCEnv_DriverStatusUpdateSession pDriverUpdateInstance)
{
	IBase* pIBaseClass = (IBase *)pDriver;

	try {
		LibMCEnv::PDriverStatusUpdateSession pIDriverUpdateInstance = std::make_shared<LibMCEnv::CDriverStatusUpdateSession>(CWrapper::sPLibMCEnvWrapper.get(), pDriverUpdateInstance);
		CWrapper::sPLibMCEnvWrapper->AcquireInstance(pIDriverUpdateInstance.get());
		if (!pIDriverUpdateInstance)
			throw ELibMCDriver_BuRInterfaceException (LIBMCDRIVER_BUR_ERROR_INVALIDCAST);
		
		IDriver* pIDriver = dynamic_cast<IDriver*>(pIBaseClass);
		if (!pIDriver)
			throw ELibMCDriver_BuRInterfaceException(LIBMCDRIVER_BUR_ERROR_INVALIDCAST);
		
		pIDriver->QueryParameters(pIDriverUpdateInstance);

		return LIBMCDRIVER_BUR_SUCCESS;
	}
	catch (ELibMCDriver_BuRInterfaceException & Exception) {
		return handleLibMCDriver_BuRException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}


/*************************************************************************************************************************
 Class implementation for PLCCommand
**************************************************************************************************************************/
LibMCDriver_BuRResult libmcdriver_bur_plccommand_setintegerparameter(LibMCDriver_BuR_PLCCommand pPLCCommand, const char * pParameterName, LibMCDriver_BuR_int64 nValue)
{
	IBase* pIBaseClass = (IBase *)pPLCCommand;

	try {
		if (pParameterName == nullptr)
			throw ELibMCDriver_BuRInterfaceException (LIBMCDRIVER_BUR_ERROR_INVALIDPARAM);
		std::string sParameterName(pParameterName);
		IPLCCommand* pIPLCCommand = dynamic_cast<IPLCCommand*>(pIBaseClass);
		if (!pIPLCCommand)
			throw ELibMCDriver_BuRInterfaceException(LIBMCDRIVER_BUR_ERROR_INVALIDCAST);
		
		pIPLCCommand->SetIntegerParameter(sParameterName, nValue);

		return LIBMCDRIVER_BUR_SUCCESS;
	}
	catch (ELibMCDriver_BuRInterfaceException & Exception) {
		return handleLibMCDriver_BuRException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_BuRResult libmcdriver_bur_plccommand_setboolparameter(LibMCDriver_BuR_PLCCommand pPLCCommand, const char * pParameterName, bool bValue)
{
	IBase* pIBaseClass = (IBase *)pPLCCommand;

	try {
		if (pParameterName == nullptr)
			throw ELibMCDriver_BuRInterfaceException (LIBMCDRIVER_BUR_ERROR_INVALIDPARAM);
		std::string sParameterName(pParameterName);
		IPLCCommand* pIPLCCommand = dynamic_cast<IPLCCommand*>(pIBaseClass);
		if (!pIPLCCommand)
			throw ELibMCDriver_BuRInterfaceException(LIBMCDRIVER_BUR_ERROR_INVALIDCAST);
		
		pIPLCCommand->SetBoolParameter(sParameterName, bValue);

		return LIBMCDRIVER_BUR_SUCCESS;
	}
	catch (ELibMCDriver_BuRInterfaceException & Exception) {
		return handleLibMCDriver_BuRException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_BuRResult libmcdriver_bur_plccommand_setdoubleparameter(LibMCDriver_BuR_PLCCommand pPLCCommand, const char * pParameterName, LibMCDriver_BuR_double dValue)
{
	IBase* pIBaseClass = (IBase *)pPLCCommand;

	try {
		if (pParameterName == nullptr)
			throw ELibMCDriver_BuRInterfaceException (LIBMCDRIVER_BUR_ERROR_INVALIDPARAM);
		std::string sParameterName(pParameterName);
		IPLCCommand* pIPLCCommand = dynamic_cast<IPLCCommand*>(pIBaseClass);
		if (!pIPLCCommand)
			throw ELibMCDriver_BuRInterfaceException(LIBMCDRIVER_BUR_ERROR_INVALIDCAST);
		
		pIPLCCommand->SetDoubleParameter(sParameterName, dValue);

		return LIBMCDRIVER_BUR_SUCCESS;
	}
	catch (ELibMCDriver_BuRInterfaceException & Exception) {
		return handleLibMCDriver_BuRException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}


/*************************************************************************************************************************
 Class implementation for PLCCommandList
**************************************************************************************************************************/
LibMCDriver_BuRResult libmcdriver_bur_plccommandlist_addcommand(LibMCDriver_BuR_PLCCommandList pPLCCommandList, LibMCDriver_BuR_PLCCommand pCommandInstance)
{
	IBase* pIBaseClass = (IBase *)pPLCCommandList;

	try {
		IBase* pIBaseClassCommandInstance = (IBase *)pCommandInstance;
		IPLCCommand* pICommandInstance = dynamic_cast<IPLCCommand*>(pIBaseClassCommandInstance);
		if (!pICommandInstance)
			throw ELibMCDriver_BuRInterfaceException (LIBMCDRIVER_BUR_ERROR_INVALIDCAST);
		
		IPLCCommandList* pIPLCCommandList = dynamic_cast<IPLCCommandList*>(pIBaseClass);
		if (!pIPLCCommandList)
			throw ELibMCDriver_BuRInterfaceException(LIBMCDRIVER_BUR_ERROR_INVALIDCAST);
		
		pIPLCCommandList->AddCommand(pICommandInstance);

		return LIBMCDRIVER_BUR_SUCCESS;
	}
	catch (ELibMCDriver_BuRInterfaceException & Exception) {
		return handleLibMCDriver_BuRException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_BuRResult libmcdriver_bur_plccommandlist_finishlist(LibMCDriver_BuR_PLCCommandList pPLCCommandList)
{
	IBase* pIBaseClass = (IBase *)pPLCCommandList;

	try {
		IPLCCommandList* pIPLCCommandList = dynamic_cast<IPLCCommandList*>(pIBaseClass);
		if (!pIPLCCommandList)
			throw ELibMCDriver_BuRInterfaceException(LIBMCDRIVER_BUR_ERROR_INVALIDCAST);
		
		pIPLCCommandList->FinishList();

		return LIBMCDRIVER_BUR_SUCCESS;
	}
	catch (ELibMCDriver_BuRInterfaceException & Exception) {
		return handleLibMCDriver_BuRException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_BuRResult libmcdriver_bur_plccommandlist_executelist(LibMCDriver_BuR_PLCCommandList pPLCCommandList)
{
	IBase* pIBaseClass = (IBase *)pPLCCommandList;

	try {
		IPLCCommandList* pIPLCCommandList = dynamic_cast<IPLCCommandList*>(pIBaseClass);
		if (!pIPLCCommandList)
			throw ELibMCDriver_BuRInterfaceException(LIBMCDRIVER_BUR_ERROR_INVALIDCAST);
		
		pIPLCCommandList->ExecuteList();

		return LIBMCDRIVER_BUR_SUCCESS;
	}
	catch (ELibMCDriver_BuRInterfaceException & Exception) {
		return handleLibMCDriver_BuRException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_BuRResult libmcdriver_bur_plccommandlist_waitforlist(LibMCDriver_BuR_PLCCommandList pPLCCommandList, LibMCDriver_BuR_uint32 nReactionTimeInMS, LibMCDriver_BuR_uint32 nWaitForTimeInMS, bool * pCommandSuccess)
{
	IBase* pIBaseClass = (IBase *)pPLCCommandList;

	try {
		if (pCommandSuccess == nullptr)
			throw ELibMCDriver_BuRInterfaceException (LIBMCDRIVER_BUR_ERROR_INVALIDPARAM);
		IPLCCommandList* pIPLCCommandList = dynamic_cast<IPLCCommandList*>(pIBaseClass);
		if (!pIPLCCommandList)
			throw ELibMCDriver_BuRInterfaceException(LIBMCDRIVER_BUR_ERROR_INVALIDCAST);
		
		*pCommandSuccess = pIPLCCommandList->WaitForList(nReactionTimeInMS, nWaitForTimeInMS);

		return LIBMCDRIVER_BUR_SUCCESS;
	}
	catch (ELibMCDriver_BuRInterfaceException & Exception) {
		return handleLibMCDriver_BuRException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_BuRResult libmcdriver_bur_plccommandlist_pauselist(LibMCDriver_BuR_PLCCommandList pPLCCommandList)
{
	IBase* pIBaseClass = (IBase *)pPLCCommandList;

	try {
		IPLCCommandList* pIPLCCommandList = dynamic_cast<IPLCCommandList*>(pIBaseClass);
		if (!pIPLCCommandList)
			throw ELibMCDriver_BuRInterfaceException(LIBMCDRIVER_BUR_ERROR_INVALIDCAST);
		
		pIPLCCommandList->PauseList();

		return LIBMCDRIVER_BUR_SUCCESS;
	}
	catch (ELibMCDriver_BuRInterfaceException & Exception) {
		return handleLibMCDriver_BuRException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_BuRResult libmcdriver_bur_plccommandlist_resumelist(LibMCDriver_BuR_PLCCommandList pPLCCommandList)
{
	IBase* pIBaseClass = (IBase *)pPLCCommandList;

	try {
		IPLCCommandList* pIPLCCommandList = dynamic_cast<IPLCCommandList*>(pIBaseClass);
		if (!pIPLCCommandList)
			throw ELibMCDriver_BuRInterfaceException(LIBMCDRIVER_BUR_ERROR_INVALIDCAST);
		
		pIPLCCommandList->ResumeList();

		return LIBMCDRIVER_BUR_SUCCESS;
	}
	catch (ELibMCDriver_BuRInterfaceException & Exception) {
		return handleLibMCDriver_BuRException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}


/*************************************************************************************************************************
 Class implementation for Driver_BuR
**************************************************************************************************************************/
LibMCDriver_BuRResult libmcdriver_bur_driver_bur_settosimulationmode(LibMCDriver_BuR_Driver_BuR pDriver_BuR)
{
	IBase* pIBaseClass = (IBase *)pDriver_BuR;

	try {
		IDriver_BuR* pIDriver_BuR = dynamic_cast<IDriver_BuR*>(pIBaseClass);
		if (!pIDriver_BuR)
			throw ELibMCDriver_BuRInterfaceException(LIBMCDRIVER_BUR_ERROR_INVALIDCAST);
		
		pIDriver_BuR->SetToSimulationMode();

		return LIBMCDRIVER_BUR_SUCCESS;
	}
	catch (ELibMCDriver_BuRInterfaceException & Exception) {
		return handleLibMCDriver_BuRException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_BuRResult libmcdriver_bur_driver_bur_issimulationmode(LibMCDriver_BuR_Driver_BuR pDriver_BuR, bool * pSimulationModeEnabled)
{
	IBase* pIBaseClass = (IBase *)pDriver_BuR;

	try {
		if (pSimulationModeEnabled == nullptr)
			throw ELibMCDriver_BuRInterfaceException (LIBMCDRIVER_BUR_ERROR_INVALIDPARAM);
		IDriver_BuR* pIDriver_BuR = dynamic_cast<IDriver_BuR*>(pIBaseClass);
		if (!pIDriver_BuR)
			throw ELibMCDriver_BuRInterfaceException(LIBMCDRIVER_BUR_ERROR_INVALIDCAST);
		
		*pSimulationModeEnabled = pIDriver_BuR->IsSimulationMode();

		return LIBMCDRIVER_BUR_SUCCESS;
	}
	catch (ELibMCDriver_BuRInterfaceException & Exception) {
		return handleLibMCDriver_BuRException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_BuRResult libmcdriver_bur_driver_bur_connect(LibMCDriver_BuR_Driver_BuR pDriver_BuR, const char * pIPAddress, LibMCDriver_BuR_uint32 nPort, LibMCDriver_BuR_uint32 nTimeout)
{
	IBase* pIBaseClass = (IBase *)pDriver_BuR;

	try {
		if (pIPAddress == nullptr)
			throw ELibMCDriver_BuRInterfaceException (LIBMCDRIVER_BUR_ERROR_INVALIDPARAM);
		std::string sIPAddress(pIPAddress);
		IDriver_BuR* pIDriver_BuR = dynamic_cast<IDriver_BuR*>(pIBaseClass);
		if (!pIDriver_BuR)
			throw ELibMCDriver_BuRInterfaceException(LIBMCDRIVER_BUR_ERROR_INVALIDCAST);
		
		pIDriver_BuR->Connect(sIPAddress, nPort, nTimeout);

		return LIBMCDRIVER_BUR_SUCCESS;
	}
	catch (ELibMCDriver_BuRInterfaceException & Exception) {
		return handleLibMCDriver_BuRException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_BuRResult libmcdriver_bur_driver_bur_disconnect(LibMCDriver_BuR_Driver_BuR pDriver_BuR)
{
	IBase* pIBaseClass = (IBase *)pDriver_BuR;

	try {
		IDriver_BuR* pIDriver_BuR = dynamic_cast<IDriver_BuR*>(pIBaseClass);
		if (!pIDriver_BuR)
			throw ELibMCDriver_BuRInterfaceException(LIBMCDRIVER_BUR_ERROR_INVALIDCAST);
		
		pIDriver_BuR->Disconnect();

		return LIBMCDRIVER_BUR_SUCCESS;
	}
	catch (ELibMCDriver_BuRInterfaceException & Exception) {
		return handleLibMCDriver_BuRException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_BuRResult libmcdriver_bur_driver_bur_reinitializemachine(LibMCDriver_BuR_Driver_BuR pDriver_BuR)
{
	IBase* pIBaseClass = (IBase *)pDriver_BuR;

	try {
		IDriver_BuR* pIDriver_BuR = dynamic_cast<IDriver_BuR*>(pIBaseClass);
		if (!pIDriver_BuR)
			throw ELibMCDriver_BuRInterfaceException(LIBMCDRIVER_BUR_ERROR_INVALIDCAST);
		
		pIDriver_BuR->ReinitializeMachine();

		return LIBMCDRIVER_BUR_SUCCESS;
	}
	catch (ELibMCDriver_BuRInterfaceException & Exception) {
		return handleLibMCDriver_BuRException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_BuRResult libmcdriver_bur_driver_bur_createcommandlist(LibMCDriver_BuR_Driver_BuR pDriver_BuR, LibMCDriver_BuR_PLCCommandList * pListInstance)
{
	IBase* pIBaseClass = (IBase *)pDriver_BuR;

	try {
		if (pListInstance == nullptr)
			throw ELibMCDriver_BuRInterfaceException (LIBMCDRIVER_BUR_ERROR_INVALIDPARAM);
		IBase* pBaseListInstance(nullptr);
		IDriver_BuR* pIDriver_BuR = dynamic_cast<IDriver_BuR*>(pIBaseClass);
		if (!pIDriver_BuR)
			throw ELibMCDriver_BuRInterfaceException(LIBMCDRIVER_BUR_ERROR_INVALIDCAST);
		
		pBaseListInstance = pIDriver_BuR->CreateCommandList();

		*pListInstance = (IBase*)(pBaseListInstance);
		return LIBMCDRIVER_BUR_SUCCESS;
	}
	catch (ELibMCDriver_BuRInterfaceException & Exception) {
		return handleLibMCDriver_BuRException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_BuRResult libmcdriver_bur_driver_bur_createcommand(LibMCDriver_BuR_Driver_BuR pDriver_BuR, const char * pCommandName, LibMCDriver_BuR_PLCCommand * pCommandInstance)
{
	IBase* pIBaseClass = (IBase *)pDriver_BuR;

	try {
		if (pCommandName == nullptr)
			throw ELibMCDriver_BuRInterfaceException (LIBMCDRIVER_BUR_ERROR_INVALIDPARAM);
		if (pCommandInstance == nullptr)
			throw ELibMCDriver_BuRInterfaceException (LIBMCDRIVER_BUR_ERROR_INVALIDPARAM);
		std::string sCommandName(pCommandName);
		IBase* pBaseCommandInstance(nullptr);
		IDriver_BuR* pIDriver_BuR = dynamic_cast<IDriver_BuR*>(pIBaseClass);
		if (!pIDriver_BuR)
			throw ELibMCDriver_BuRInterfaceException(LIBMCDRIVER_BUR_ERROR_INVALIDCAST);
		
		pBaseCommandInstance = pIDriver_BuR->CreateCommand(sCommandName);

		*pCommandInstance = (IBase*)(pBaseCommandInstance);
		return LIBMCDRIVER_BUR_SUCCESS;
	}
	catch (ELibMCDriver_BuRInterfaceException & Exception) {
		return handleLibMCDriver_BuRException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_BuRResult libmcdriver_bur_driver_bur_startjournaling(LibMCDriver_BuR_Driver_BuR pDriver_BuR)
{
	IBase* pIBaseClass = (IBase *)pDriver_BuR;

	try {
		IDriver_BuR* pIDriver_BuR = dynamic_cast<IDriver_BuR*>(pIBaseClass);
		if (!pIDriver_BuR)
			throw ELibMCDriver_BuRInterfaceException(LIBMCDRIVER_BUR_ERROR_INVALIDCAST);
		
		pIDriver_BuR->StartJournaling();

		return LIBMCDRIVER_BUR_SUCCESS;
	}
	catch (ELibMCDriver_BuRInterfaceException & Exception) {
		return handleLibMCDriver_BuRException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_BuRResult libmcdriver_bur_driver_bur_stopjournaling(LibMCDriver_BuR_Driver_BuR pDriver_BuR)
{
	IBase* pIBaseClass = (IBase *)pDriver_BuR;

	try {
		IDriver_BuR* pIDriver_BuR = dynamic_cast<IDriver_BuR*>(pIBaseClass);
		if (!pIDriver_BuR)
			throw ELibMCDriver_BuRInterfaceException(LIBMCDRIVER_BUR_ERROR_INVALIDCAST);
		
		pIDriver_BuR->StopJournaling();

		return LIBMCDRIVER_BUR_SUCCESS;
	}
	catch (ELibMCDriver_BuRInterfaceException & Exception) {
		return handleLibMCDriver_BuRException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_BuRResult libmcdriver_bur_driver_bur_refreshjournal(LibMCDriver_BuR_Driver_BuR pDriver_BuR)
{
	IBase* pIBaseClass = (IBase *)pDriver_BuR;

	try {
		IDriver_BuR* pIDriver_BuR = dynamic_cast<IDriver_BuR*>(pIBaseClass);
		if (!pIDriver_BuR)
			throw ELibMCDriver_BuRInterfaceException(LIBMCDRIVER_BUR_ERROR_INVALIDCAST);
		
		pIDriver_BuR->RefreshJournal();

		return LIBMCDRIVER_BUR_SUCCESS;
	}
	catch (ELibMCDriver_BuRInterfaceException & Exception) {
		return handleLibMCDriver_BuRException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}



/*************************************************************************************************************************
 Function table lookup implementation
**************************************************************************************************************************/

LibMCDriver_BuRResult LibMCDriver_BuR::Impl::LibMCDriver_BuR_GetProcAddress (const char * pProcName, void ** ppProcAddress)
{
	if (pProcName == nullptr)
		return LIBMCDRIVER_BUR_ERROR_INVALIDPARAM;
	if (ppProcAddress == nullptr)
		return LIBMCDRIVER_BUR_ERROR_INVALIDPARAM;
	*ppProcAddress = nullptr;
	std::string sProcName (pProcName);
	
	if (sProcName == "libmcdriver_bur_driver_configure") 
		*ppProcAddress = (void*) &libmcdriver_bur_driver_configure;
	if (sProcName == "libmcdriver_bur_driver_getname") 
		*ppProcAddress = (void*) &libmcdriver_bur_driver_getname;
	if (sProcName == "libmcdriver_bur_driver_gettype") 
		*ppProcAddress = (void*) &libmcdriver_bur_driver_gettype;
	if (sProcName == "libmcdriver_bur_driver_getversion") 
		*ppProcAddress = (void*) &libmcdriver_bur_driver_getversion;
	if (sProcName == "libmcdriver_bur_driver_queryparameters") 
		*ppProcAddress = (void*) &libmcdriver_bur_driver_queryparameters;
	if (sProcName == "libmcdriver_bur_plccommand_setintegerparameter") 
		*ppProcAddress = (void*) &libmcdriver_bur_plccommand_setintegerparameter;
	if (sProcName == "libmcdriver_bur_plccommand_setboolparameter") 
		*ppProcAddress = (void*) &libmcdriver_bur_plccommand_setboolparameter;
	if (sProcName == "libmcdriver_bur_plccommand_setdoubleparameter") 
		*ppProcAddress = (void*) &libmcdriver_bur_plccommand_setdoubleparameter;
	if (sProcName == "libmcdriver_bur_plccommandlist_addcommand") 
		*ppProcAddress = (void*) &libmcdriver_bur_plccommandlist_addcommand;
	if (sProcName == "libmcdriver_bur_plccommandlist_finishlist") 
		*ppProcAddress = (void*) &libmcdriver_bur_plccommandlist_finishlist;
	if (sProcName == "libmcdriver_bur_plccommandlist_executelist") 
		*ppProcAddress = (void*) &libmcdriver_bur_plccommandlist_executelist;
	if (sProcName == "libmcdriver_bur_plccommandlist_waitforlist") 
		*ppProcAddress = (void*) &libmcdriver_bur_plccommandlist_waitforlist;
	if (sProcName == "libmcdriver_bur_plccommandlist_pauselist") 
		*ppProcAddress = (void*) &libmcdriver_bur_plccommandlist_pauselist;
	if (sProcName == "libmcdriver_bur_plccommandlist_resumelist") 
		*ppProcAddress = (void*) &libmcdriver_bur_plccommandlist_resumelist;
	if (sProcName == "libmcdriver_bur_driver_bur_settosimulationmode") 
		*ppProcAddress = (void*) &libmcdriver_bur_driver_bur_settosimulationmode;
	if (sProcName == "libmcdriver_bur_driver_bur_issimulationmode") 
		*ppProcAddress = (void*) &libmcdriver_bur_driver_bur_issimulationmode;
	if (sProcName == "libmcdriver_bur_driver_bur_connect") 
		*ppProcAddress = (void*) &libmcdriver_bur_driver_bur_connect;
	if (sProcName == "libmcdriver_bur_driver_bur_disconnect") 
		*ppProcAddress = (void*) &libmcdriver_bur_driver_bur_disconnect;
	if (sProcName == "libmcdriver_bur_driver_bur_reinitializemachine") 
		*ppProcAddress = (void*) &libmcdriver_bur_driver_bur_reinitializemachine;
	if (sProcName == "libmcdriver_bur_driver_bur_createcommandlist") 
		*ppProcAddress = (void*) &libmcdriver_bur_driver_bur_createcommandlist;
	if (sProcName == "libmcdriver_bur_driver_bur_createcommand") 
		*ppProcAddress = (void*) &libmcdriver_bur_driver_bur_createcommand;
	if (sProcName == "libmcdriver_bur_driver_bur_startjournaling") 
		*ppProcAddress = (void*) &libmcdriver_bur_driver_bur_startjournaling;
	if (sProcName == "libmcdriver_bur_driver_bur_stopjournaling") 
		*ppProcAddress = (void*) &libmcdriver_bur_driver_bur_stopjournaling;
	if (sProcName == "libmcdriver_bur_driver_bur_refreshjournal") 
		*ppProcAddress = (void*) &libmcdriver_bur_driver_bur_refreshjournal;
	if (sProcName == "libmcdriver_bur_getversion") 
		*ppProcAddress = (void*) &libmcdriver_bur_getversion;
	if (sProcName == "libmcdriver_bur_getlasterror") 
		*ppProcAddress = (void*) &libmcdriver_bur_getlasterror;
	if (sProcName == "libmcdriver_bur_releaseinstance") 
		*ppProcAddress = (void*) &libmcdriver_bur_releaseinstance;
	if (sProcName == "libmcdriver_bur_acquireinstance") 
		*ppProcAddress = (void*) &libmcdriver_bur_acquireinstance;
	if (sProcName == "libmcdriver_bur_injectcomponent") 
		*ppProcAddress = (void*) &libmcdriver_bur_injectcomponent;
	if (sProcName == "libmcdriver_bur_getsymbollookupmethod") 
		*ppProcAddress = (void*) &libmcdriver_bur_getsymbollookupmethod;
	if (sProcName == "libmcdriver_bur_createdriver") 
		*ppProcAddress = (void*) &libmcdriver_bur_createdriver;
	
	if (*ppProcAddress == nullptr) 
		return LIBMCDRIVER_BUR_ERROR_COULDNOTFINDLIBRARYEXPORT;
	return LIBMCDRIVER_BUR_SUCCESS;
}

/*************************************************************************************************************************
 Global functions implementation
**************************************************************************************************************************/
LibMCDriver_BuRResult libmcdriver_bur_getversion(LibMCDriver_BuR_uint32 * pMajor, LibMCDriver_BuR_uint32 * pMinor, LibMCDriver_BuR_uint32 * pMicro)
{
	IBase* pIBaseClass = nullptr;

	try {
		if (!pMajor)
			throw ELibMCDriver_BuRInterfaceException (LIBMCDRIVER_BUR_ERROR_INVALIDPARAM);
		if (!pMinor)
			throw ELibMCDriver_BuRInterfaceException (LIBMCDRIVER_BUR_ERROR_INVALIDPARAM);
		if (!pMicro)
			throw ELibMCDriver_BuRInterfaceException (LIBMCDRIVER_BUR_ERROR_INVALIDPARAM);
		CWrapper::GetVersion(*pMajor, *pMinor, *pMicro);

		return LIBMCDRIVER_BUR_SUCCESS;
	}
	catch (ELibMCDriver_BuRInterfaceException & Exception) {
		return handleLibMCDriver_BuRException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_BuRResult libmcdriver_bur_getlasterror(LibMCDriver_BuR_Base pInstance, const LibMCDriver_BuR_uint32 nErrorMessageBufferSize, LibMCDriver_BuR_uint32* pErrorMessageNeededChars, char * pErrorMessageBuffer, bool * pHasError)
{
	IBase* pIBaseClass = nullptr;

	try {
		if ( (!pErrorMessageBuffer) && !(pErrorMessageNeededChars) )
			throw ELibMCDriver_BuRInterfaceException (LIBMCDRIVER_BUR_ERROR_INVALIDPARAM);
		if (pHasError == nullptr)
			throw ELibMCDriver_BuRInterfaceException (LIBMCDRIVER_BUR_ERROR_INVALIDPARAM);
		IBase* pIBaseClassInstance = (IBase *)pInstance;
		IBase* pIInstance = dynamic_cast<IBase*>(pIBaseClassInstance);
		if (!pIInstance)
			throw ELibMCDriver_BuRInterfaceException (LIBMCDRIVER_BUR_ERROR_INVALIDCAST);
		
		std::string sErrorMessage("");
		*pHasError = CWrapper::GetLastError(pIInstance, sErrorMessage);

		if (pErrorMessageNeededChars)
			*pErrorMessageNeededChars = (LibMCDriver_BuR_uint32) (sErrorMessage.size()+1);
		if (pErrorMessageBuffer) {
			if (sErrorMessage.size() >= nErrorMessageBufferSize)
				throw ELibMCDriver_BuRInterfaceException (LIBMCDRIVER_BUR_ERROR_BUFFERTOOSMALL);
			for (size_t iErrorMessage = 0; iErrorMessage < sErrorMessage.size(); iErrorMessage++)
				pErrorMessageBuffer[iErrorMessage] = sErrorMessage[iErrorMessage];
			pErrorMessageBuffer[sErrorMessage.size()] = 0;
		}
		return LIBMCDRIVER_BUR_SUCCESS;
	}
	catch (ELibMCDriver_BuRInterfaceException & Exception) {
		return handleLibMCDriver_BuRException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_BuRResult libmcdriver_bur_releaseinstance(LibMCDriver_BuR_Base pInstance)
{
	IBase* pIBaseClass = nullptr;

	try {
		IBase* pIBaseClassInstance = (IBase *)pInstance;
		IBase* pIInstance = dynamic_cast<IBase*>(pIBaseClassInstance);
		if (!pIInstance)
			throw ELibMCDriver_BuRInterfaceException (LIBMCDRIVER_BUR_ERROR_INVALIDCAST);
		
		CWrapper::ReleaseInstance(pIInstance);

		return LIBMCDRIVER_BUR_SUCCESS;
	}
	catch (ELibMCDriver_BuRInterfaceException & Exception) {
		return handleLibMCDriver_BuRException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_BuRResult libmcdriver_bur_acquireinstance(LibMCDriver_BuR_Base pInstance)
{
	IBase* pIBaseClass = nullptr;

	try {
		IBase* pIBaseClassInstance = (IBase *)pInstance;
		IBase* pIInstance = dynamic_cast<IBase*>(pIBaseClassInstance);
		if (!pIInstance)
			throw ELibMCDriver_BuRInterfaceException (LIBMCDRIVER_BUR_ERROR_INVALIDCAST);
		
		CWrapper::AcquireInstance(pIInstance);

		return LIBMCDRIVER_BUR_SUCCESS;
	}
	catch (ELibMCDriver_BuRInterfaceException & Exception) {
		return handleLibMCDriver_BuRException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_BuRResult libmcdriver_bur_injectcomponent(const char * pNameSpace, LibMCDriver_BuR_pvoid pSymbolAddressMethod)
{
	IBase* pIBaseClass = nullptr;

	try {
		if (pNameSpace == nullptr)
			throw ELibMCDriver_BuRInterfaceException (LIBMCDRIVER_BUR_ERROR_INVALIDPARAM);
		std::string sNameSpace(pNameSpace);
		
		bool bNameSpaceFound = false;
		
		if (sNameSpace == "LibMCEnv") {
			if (CWrapper::sPLibMCEnvWrapper.get() != nullptr) {
				throw ELibMCDriver_BuRInterfaceException(LIBMCDRIVER_BUR_ERROR_COULDNOTLOADLIBRARY);
			}
			CWrapper::sPLibMCEnvWrapper = LibMCEnv::CWrapper::loadLibraryFromSymbolLookupMethod(pSymbolAddressMethod);
			bNameSpaceFound = true;
		}
		
		if (!bNameSpaceFound)
			throw ELibMCDriver_BuRInterfaceException(LIBMCDRIVER_BUR_ERROR_COULDNOTLOADLIBRARY);
		
		return LIBMCDRIVER_BUR_SUCCESS;
	}
	catch (ELibMCDriver_BuRInterfaceException & Exception) {
		return handleLibMCDriver_BuRException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_BuRResult libmcdriver_bur_getsymbollookupmethod(LibMCDriver_BuR_pvoid * pSymbolLookupMethod)
{
	IBase* pIBaseClass = nullptr;

	try {
		if (pSymbolLookupMethod == nullptr)
			throw ELibMCDriver_BuRInterfaceException (LIBMCDRIVER_BUR_ERROR_INVALIDPARAM);
		*pSymbolLookupMethod = (void*)&LibMCDriver_BuR::Impl::LibMCDriver_BuR_GetProcAddress;
		return LIBMCDRIVER_BUR_SUCCESS;
	}
	catch (ELibMCDriver_BuRInterfaceException & Exception) {
		return handleLibMCDriver_BuRException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_BuRResult libmcdriver_bur_createdriver(const char * pName, const char * pType, LibMCEnv_DriverEnvironment pDriverEnvironment, LibMCDriver_BuR_Driver * pInstance)
{
	IBase* pIBaseClass = nullptr;

	try {
		if (pName == nullptr)
			throw ELibMCDriver_BuRInterfaceException (LIBMCDRIVER_BUR_ERROR_INVALIDPARAM);
		if (pType == nullptr)
			throw ELibMCDriver_BuRInterfaceException (LIBMCDRIVER_BUR_ERROR_INVALIDPARAM);
		if (pInstance == nullptr)
			throw ELibMCDriver_BuRInterfaceException (LIBMCDRIVER_BUR_ERROR_INVALIDPARAM);
		std::string sName(pName);
		std::string sType(pType);
		LibMCEnv::PDriverEnvironment pIDriverEnvironment = std::make_shared<LibMCEnv::CDriverEnvironment>(CWrapper::sPLibMCEnvWrapper.get(), pDriverEnvironment);
		CWrapper::sPLibMCEnvWrapper->AcquireInstance(pIDriverEnvironment.get());
		if (!pIDriverEnvironment)
			throw ELibMCDriver_BuRInterfaceException (LIBMCDRIVER_BUR_ERROR_INVALIDCAST);
		
		IBase* pBaseInstance(nullptr);
		pBaseInstance = CWrapper::CreateDriver(sName, sType, pIDriverEnvironment);

		*pInstance = (IBase*)(pBaseInstance);
		return LIBMCDRIVER_BUR_SUCCESS;
	}
	catch (ELibMCDriver_BuRInterfaceException & Exception) {
		return handleLibMCDriver_BuRException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}


