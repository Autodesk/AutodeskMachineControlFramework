/*++

Copyright (C) 2020 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.8.0-develop.

Abstract: This is an autogenerated C++-Header file in order to allow an easy
 use of MC Driver BR Automation 2.0

Interface version: 2.0.0

*/

#ifndef __LIBMCDRIVER_BUR_DYNAMICHEADER_CPPTYPES
#define __LIBMCDRIVER_BUR_DYNAMICHEADER_CPPTYPES

#include "libmcdriver_bur_types.hpp"

#include "libmcenv_types.hpp"


/*************************************************************************************************************************
 Class definition for Base
**************************************************************************************************************************/

/*************************************************************************************************************************
 Class definition for Driver
**************************************************************************************************************************/

/**
* Configures a driver with its specific configuration data.
*
* @param[in] pDriver - Driver instance.
* @param[in] pConfigurationString - Configuration data of driver.
* @return error code or 0 (success)
*/
typedef LibMCDriver_BuRResult (*PLibMCDriver_BuRDriver_ConfigurePtr) (LibMCDriver_BuR_Driver pDriver, const char * pConfigurationString);

/**
* returns the name identifier of the driver
*
* @param[in] pDriver - Driver instance.
* @param[in] nNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNameBuffer -  buffer of Name of the driver., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCDriver_BuRResult (*PLibMCDriver_BuRDriver_GetNamePtr) (LibMCDriver_BuR_Driver pDriver, const LibMCDriver_BuR_uint32 nNameBufferSize, LibMCDriver_BuR_uint32* pNameNeededChars, char * pNameBuffer);

/**
* returns the type identifier of the driver
*
* @param[in] pDriver - Driver instance.
* @param[in] nTypeBufferSize - size of the buffer (including trailing 0)
* @param[out] pTypeNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pTypeBuffer -  buffer of Type of the driver., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCDriver_BuRResult (*PLibMCDriver_BuRDriver_GetTypePtr) (LibMCDriver_BuR_Driver pDriver, const LibMCDriver_BuR_uint32 nTypeBufferSize, LibMCDriver_BuR_uint32* pTypeNeededChars, char * pTypeBuffer);

/**
* returns the version identifiers of the driver
*
* @param[in] pDriver - Driver instance.
* @param[out] pMajor - Major version.
* @param[out] pMinor - Minor version.
* @param[out] pMicro - Micro version.
* @param[in] nBuildBufferSize - size of the buffer (including trailing 0)
* @param[out] pBuildNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pBuildBuffer -  buffer of Build identifier., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCDriver_BuRResult (*PLibMCDriver_BuRDriver_GetVersionPtr) (LibMCDriver_BuR_Driver pDriver, LibMCDriver_BuR_uint32 * pMajor, LibMCDriver_BuR_uint32 * pMinor, LibMCDriver_BuR_uint32 * pMicro, const LibMCDriver_BuR_uint32 nBuildBufferSize, LibMCDriver_BuR_uint32* pBuildNeededChars, char * pBuildBuffer);

/**
* Updates the driver parameters in the driver environment. Should only be called in the driver thread.
*
* @param[in] pDriver - Driver instance.
* @return error code or 0 (success)
*/
typedef LibMCDriver_BuRResult (*PLibMCDriver_BuRDriver_QueryParametersPtr) (LibMCDriver_BuR_Driver pDriver);

/**
* Updates the driver parameters in the driver environment. Might be called out of thread. Implementation MUST be able to handle parallel calls.
*
* @param[in] pDriver - Driver instance.
* @param[in] pDriverUpdateInstance - Status update instance.
* @return error code or 0 (success)
*/
typedef LibMCDriver_BuRResult (*PLibMCDriver_BuRDriver_QueryParametersExPtr) (LibMCDriver_BuR_Driver pDriver, LibMCEnv_DriverStatusUpdateSession pDriverUpdateInstance);

/*************************************************************************************************************************
 Class definition for PLCCommand
**************************************************************************************************************************/

/**
* Sets an integer parameter of the command
*
* @param[in] pPLCCommand - PLCCommand instance.
* @param[in] pParameterName - Parameter Value
* @param[in] nValue - Parameter Value
* @return error code or 0 (success)
*/
typedef LibMCDriver_BuRResult (*PLibMCDriver_BuRPLCCommand_SetIntegerParameterPtr) (LibMCDriver_BuR_PLCCommand pPLCCommand, const char * pParameterName, LibMCDriver_BuR_int64 nValue);

/**
* Sets a bool parameter of the command
*
* @param[in] pPLCCommand - PLCCommand instance.
* @param[in] pParameterName - Parameter Value
* @param[in] bValue - Parameter Value
* @return error code or 0 (success)
*/
typedef LibMCDriver_BuRResult (*PLibMCDriver_BuRPLCCommand_SetBoolParameterPtr) (LibMCDriver_BuR_PLCCommand pPLCCommand, const char * pParameterName, bool bValue);

/**
* Sets a double parameter of the command
*
* @param[in] pPLCCommand - PLCCommand instance.
* @param[in] pParameterName - Parameter Value
* @param[in] dValue - Parameter Value
* @return error code or 0 (success)
*/
typedef LibMCDriver_BuRResult (*PLibMCDriver_BuRPLCCommand_SetDoubleParameterPtr) (LibMCDriver_BuR_PLCCommand pPLCCommand, const char * pParameterName, LibMCDriver_BuR_double dValue);

/*************************************************************************************************************************
 Class definition for PLCCommandList
**************************************************************************************************************************/

/**
* Adds a command to the list. List must not be executed before.
*
* @param[in] pPLCCommandList - PLCCommandList instance.
* @param[in] pCommandInstance - Add a command instance.
* @return error code or 0 (success)
*/
typedef LibMCDriver_BuRResult (*PLibMCDriver_BuRPLCCommandList_AddCommandPtr) (LibMCDriver_BuR_PLCCommandList pPLCCommandList, LibMCDriver_BuR_PLCCommand pCommandInstance);

/**
* Finish command list.
*
* @param[in] pPLCCommandList - PLCCommandList instance.
* @return error code or 0 (success)
*/
typedef LibMCDriver_BuRResult (*PLibMCDriver_BuRPLCCommandList_FinishListPtr) (LibMCDriver_BuR_PLCCommandList pPLCCommandList);

/**
* Execute command list.
*
* @param[in] pPLCCommandList - PLCCommandList instance.
* @return error code or 0 (success)
*/
typedef LibMCDriver_BuRResult (*PLibMCDriver_BuRPLCCommandList_ExecuteListPtr) (LibMCDriver_BuR_PLCCommandList pPLCCommandList);

/**
* Wait for command list to finish executing
*
* @param[in] pPLCCommandList - PLCCommandList instance.
* @param[in] nReactionTimeInMS - How much time the PLC may need to react to the command in Milliseconds. Will fail if no reaction in that time.
* @param[in] nWaitForTimeInMS - How long to wait for the command to be finished in Milliseconds. Will return false if command has not finished.
* @param[out] pCommandSuccess - Returns true if the command was finished successfully.
* @return error code or 0 (success)
*/
typedef LibMCDriver_BuRResult (*PLibMCDriver_BuRPLCCommandList_WaitForListPtr) (LibMCDriver_BuR_PLCCommandList pPLCCommandList, LibMCDriver_BuR_uint32 nReactionTimeInMS, LibMCDriver_BuR_uint32 nWaitForTimeInMS, bool * pCommandSuccess);

/**
* Pause command list. Must be executed or resumed before.
*
* @param[in] pPLCCommandList - PLCCommandList instance.
* @return error code or 0 (success)
*/
typedef LibMCDriver_BuRResult (*PLibMCDriver_BuRPLCCommandList_PauseListPtr) (LibMCDriver_BuR_PLCCommandList pPLCCommandList);

/**
* Resume command list. Must be paused before.
*
* @param[in] pPLCCommandList - PLCCommandList instance.
* @return error code or 0 (success)
*/
typedef LibMCDriver_BuRResult (*PLibMCDriver_BuRPLCCommandList_ResumeListPtr) (LibMCDriver_BuR_PLCCommandList pPLCCommandList);

/*************************************************************************************************************************
 Class definition for Driver_BuR
**************************************************************************************************************************/

/**
* Turns the driver into a simulation mode.
*
* @param[in] pDriver_BuR - Driver_BuR instance.
* @return error code or 0 (success)
*/
typedef LibMCDriver_BuRResult (*PLibMCDriver_BuRDriver_BuR_SetToSimulationModePtr) (LibMCDriver_BuR_Driver_BuR pDriver_BuR);

/**
* Returns if the driver is in simulation mode.
*
* @param[in] pDriver_BuR - Driver_BuR instance.
* @param[out] pSimulationModeEnabled - Flag if driver is in simulation mode.
* @return error code or 0 (success)
*/
typedef LibMCDriver_BuRResult (*PLibMCDriver_BuRDriver_BuR_IsSimulationModePtr) (LibMCDriver_BuR_Driver_BuR pDriver_BuR, bool * pSimulationModeEnabled);

/**
* Connects to a BuR PLC Controller.
*
* @param[in] pDriver_BuR - Driver_BuR instance.
* @param[in] pIPAddress - IP Address of PLC Service.
* @param[in] nPort - Port of PLC Service.
* @param[in] nTimeout - Timeout in milliseconds.
* @return error code or 0 (success)
*/
typedef LibMCDriver_BuRResult (*PLibMCDriver_BuRDriver_BuR_ConnectPtr) (LibMCDriver_BuR_Driver_BuR pDriver_BuR, const char * pIPAddress, LibMCDriver_BuR_uint32 nPort, LibMCDriver_BuR_uint32 nTimeout);

/**
* Disconnects from the BuR PLC Controller.
*
* @param[in] pDriver_BuR - Driver_BuR instance.
* @return error code or 0 (success)
*/
typedef LibMCDriver_BuRResult (*PLibMCDriver_BuRDriver_BuR_DisconnectPtr) (LibMCDriver_BuR_Driver_BuR pDriver_BuR);

/**
* Sends the machine initialization command.
*
* @param[in] pDriver_BuR - Driver_BuR instance.
* @return error code or 0 (success)
*/
typedef LibMCDriver_BuRResult (*PLibMCDriver_BuRDriver_BuR_ReinitializeMachinePtr) (LibMCDriver_BuR_Driver_BuR pDriver_BuR);

/**
* Create Command
*
* @param[in] pDriver_BuR - Driver_BuR instance.
* @param[out] pListInstance - Command list instance
* @return error code or 0 (success)
*/
typedef LibMCDriver_BuRResult (*PLibMCDriver_BuRDriver_BuR_CreateCommandListPtr) (LibMCDriver_BuR_Driver_BuR pDriver_BuR, LibMCDriver_BuR_PLCCommandList * pListInstance);

/**
* Creates a command instance.
*
* @param[in] pDriver_BuR - Driver_BuR instance.
* @param[in] pCommandName - Command Name.
* @param[out] pCommandInstance - Returns a command instance.
* @return error code or 0 (success)
*/
typedef LibMCDriver_BuRResult (*PLibMCDriver_BuRDriver_BuR_CreateCommandPtr) (LibMCDriver_BuR_Driver_BuR pDriver_BuR, const char * pCommandName, LibMCDriver_BuR_PLCCommand * pCommandInstance);

/**
* Start Journaling.
*
* @param[in] pDriver_BuR - Driver_BuR instance.
* @return error code or 0 (success)
*/
typedef LibMCDriver_BuRResult (*PLibMCDriver_BuRDriver_BuR_StartJournalingPtr) (LibMCDriver_BuR_Driver_BuR pDriver_BuR);

/**
* Stop Journaling.
*
* @param[in] pDriver_BuR - Driver_BuR instance.
* @return error code or 0 (success)
*/
typedef LibMCDriver_BuRResult (*PLibMCDriver_BuRDriver_BuR_StopJournalingPtr) (LibMCDriver_BuR_Driver_BuR pDriver_BuR);

/**
* Refresh Journal.
*
* @param[in] pDriver_BuR - Driver_BuR instance.
* @return error code or 0 (success)
*/
typedef LibMCDriver_BuRResult (*PLibMCDriver_BuRDriver_BuR_RefreshJournalPtr) (LibMCDriver_BuR_Driver_BuR pDriver_BuR);

/*************************************************************************************************************************
 Global functions
**************************************************************************************************************************/

/**
* retrieves the binary version of this library.
*
* @param[out] pMajor - returns the major version of this library
* @param[out] pMinor - returns the minor version of this library
* @param[out] pMicro - returns the micro version of this library
* @return error code or 0 (success)
*/
typedef LibMCDriver_BuRResult (*PLibMCDriver_BuRGetVersionPtr) (LibMCDriver_BuR_uint32 * pMajor, LibMCDriver_BuR_uint32 * pMinor, LibMCDriver_BuR_uint32 * pMicro);

/**
* Returns the last error recorded on this object
*
* @param[in] pInstance - Instance Handle
* @param[in] nErrorMessageBufferSize - size of the buffer (including trailing 0)
* @param[out] pErrorMessageNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pErrorMessageBuffer -  buffer of Message of the last error, may be NULL
* @param[out] pHasError - Is there a last error to query
* @return error code or 0 (success)
*/
typedef LibMCDriver_BuRResult (*PLibMCDriver_BuRGetLastErrorPtr) (LibMCDriver_BuR_Base pInstance, const LibMCDriver_BuR_uint32 nErrorMessageBufferSize, LibMCDriver_BuR_uint32* pErrorMessageNeededChars, char * pErrorMessageBuffer, bool * pHasError);

/**
* Releases shared ownership of an Instance
*
* @param[in] pInstance - Instance Handle
* @return error code or 0 (success)
*/
typedef LibMCDriver_BuRResult (*PLibMCDriver_BuRReleaseInstancePtr) (LibMCDriver_BuR_Base pInstance);

/**
* Acquires shared ownership of an Instance
*
* @param[in] pInstance - Instance Handle
* @return error code or 0 (success)
*/
typedef LibMCDriver_BuRResult (*PLibMCDriver_BuRAcquireInstancePtr) (LibMCDriver_BuR_Base pInstance);

/**
* Injects an imported component for usage within this component
*
* @param[in] pNameSpace - NameSpace of the injected component
* @param[in] pSymbolAddressMethod - Address of the SymbolAddressMethod of the injected component
* @return error code or 0 (success)
*/
typedef LibMCDriver_BuRResult (*PLibMCDriver_BuRInjectComponentPtr) (const char * pNameSpace, LibMCDriver_BuR_pvoid pSymbolAddressMethod);

/**
* Returns the address of the SymbolLookupMethod
*
* @param[out] pSymbolLookupMethod - Address of the SymbolAddressMethod
* @return error code or 0 (success)
*/
typedef LibMCDriver_BuRResult (*PLibMCDriver_BuRGetSymbolLookupMethodPtr) (LibMCDriver_BuR_pvoid * pSymbolLookupMethod);

/**
* Creates a driver instance with a specific name.
*
* @param[in] pName - Name of driver to be created.
* @param[in] pType - Type of driver to be created.
* @param[in] pDriverEnvironment - Environment of this driver.
* @param[out] pInstance - New Driver instance
* @return error code or 0 (success)
*/
typedef LibMCDriver_BuRResult (*PLibMCDriver_BuRCreateDriverPtr) (const char * pName, const char * pType, LibMCEnv_DriverEnvironment pDriverEnvironment, LibMCDriver_BuR_Driver * pInstance);

/*************************************************************************************************************************
 Function Table Structure
**************************************************************************************************************************/

typedef struct {
	void * m_LibraryHandle;
	PLibMCDriver_BuRDriver_ConfigurePtr m_Driver_Configure;
	PLibMCDriver_BuRDriver_GetNamePtr m_Driver_GetName;
	PLibMCDriver_BuRDriver_GetTypePtr m_Driver_GetType;
	PLibMCDriver_BuRDriver_GetVersionPtr m_Driver_GetVersion;
	PLibMCDriver_BuRDriver_QueryParametersPtr m_Driver_QueryParameters;
	PLibMCDriver_BuRDriver_QueryParametersExPtr m_Driver_QueryParametersEx;
	PLibMCDriver_BuRPLCCommand_SetIntegerParameterPtr m_PLCCommand_SetIntegerParameter;
	PLibMCDriver_BuRPLCCommand_SetBoolParameterPtr m_PLCCommand_SetBoolParameter;
	PLibMCDriver_BuRPLCCommand_SetDoubleParameterPtr m_PLCCommand_SetDoubleParameter;
	PLibMCDriver_BuRPLCCommandList_AddCommandPtr m_PLCCommandList_AddCommand;
	PLibMCDriver_BuRPLCCommandList_FinishListPtr m_PLCCommandList_FinishList;
	PLibMCDriver_BuRPLCCommandList_ExecuteListPtr m_PLCCommandList_ExecuteList;
	PLibMCDriver_BuRPLCCommandList_WaitForListPtr m_PLCCommandList_WaitForList;
	PLibMCDriver_BuRPLCCommandList_PauseListPtr m_PLCCommandList_PauseList;
	PLibMCDriver_BuRPLCCommandList_ResumeListPtr m_PLCCommandList_ResumeList;
	PLibMCDriver_BuRDriver_BuR_SetToSimulationModePtr m_Driver_BuR_SetToSimulationMode;
	PLibMCDriver_BuRDriver_BuR_IsSimulationModePtr m_Driver_BuR_IsSimulationMode;
	PLibMCDriver_BuRDriver_BuR_ConnectPtr m_Driver_BuR_Connect;
	PLibMCDriver_BuRDriver_BuR_DisconnectPtr m_Driver_BuR_Disconnect;
	PLibMCDriver_BuRDriver_BuR_ReinitializeMachinePtr m_Driver_BuR_ReinitializeMachine;
	PLibMCDriver_BuRDriver_BuR_CreateCommandListPtr m_Driver_BuR_CreateCommandList;
	PLibMCDriver_BuRDriver_BuR_CreateCommandPtr m_Driver_BuR_CreateCommand;
	PLibMCDriver_BuRDriver_BuR_StartJournalingPtr m_Driver_BuR_StartJournaling;
	PLibMCDriver_BuRDriver_BuR_StopJournalingPtr m_Driver_BuR_StopJournaling;
	PLibMCDriver_BuRDriver_BuR_RefreshJournalPtr m_Driver_BuR_RefreshJournal;
	PLibMCDriver_BuRGetVersionPtr m_GetVersion;
	PLibMCDriver_BuRGetLastErrorPtr m_GetLastError;
	PLibMCDriver_BuRReleaseInstancePtr m_ReleaseInstance;
	PLibMCDriver_BuRAcquireInstancePtr m_AcquireInstance;
	PLibMCDriver_BuRInjectComponentPtr m_InjectComponent;
	PLibMCDriver_BuRGetSymbolLookupMethodPtr m_GetSymbolLookupMethod;
	PLibMCDriver_BuRCreateDriverPtr m_CreateDriver;
} sLibMCDriver_BuRDynamicWrapperTable;

#endif // __LIBMCDRIVER_BUR_DYNAMICHEADER_CPPTYPES

