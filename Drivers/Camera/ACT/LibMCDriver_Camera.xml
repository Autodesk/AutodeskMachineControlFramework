<?xml version="1.0" encoding="UTF-8"?>
<component xmlns="http://schemas.autodesk.com/netfabb/automaticcomponenttoolkit/2018" 
	libraryname="Generic Camera Driver for Windows or Linux devices" namespace="LibMCDriver_Camera" copyright="Autodesk Inc." year="2024" basename="libmcdriver_camera"
	version="2.0.0">
	<license>
		<line value="All rights reserved." />
		<line value="" />
		<line value="Redistribution and use in source and binary forms, with or without" />
		<line value="modification, are permitted provided that the following conditions are met:" />
		<line value="    * Redistributions of source code must retain the above copyright" />
		<line value="      notice, this list of conditions and the following disclaimer." />
		<line value="    * Redistributions in binary form must reproduce the above copyright" />
		<line value="      notice, this list of conditions and the following disclaimer in the" />
		<line value="      documentation and/or other materials provided with the distribution." />
		<line value="    * Neither the name of the Autodesk Inc. nor the" />
		<line value="      names of its contributors may be used to endorse or promote products" />
		<line value="      derived from this software without specific prior written permission." />
		<line value="" />
		<line value="THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND" />
		<line value="ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED" />
		<line value="WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE" />
		<line value="DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY" />
		<line value="DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES" />
		<line value="(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;" />
		<line value="LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND" />
		<line value="ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT" />
		<line value="(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS" />
		<line value="SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." />
		<line value="" />
	</license>
	
	<bindings>
		<binding language="CppDynamic" indentation="tabs" documentation="1" />
	</bindings>
	<implementations>
		<implementation language="Cpp" indentation="tabs"/>
	</implementations>
	
	
	<importcomponent uri="../../../ACT/LibMCEnv.xml" namespace="LibMCEnv"/>
	
	<errors>
		<error name="NOTIMPLEMENTED" code="1" description="functionality not implemented" />
		<error name="INVALIDPARAM" code="2" description="an invalid parameter was passed" />
		<error name="INVALIDCAST" code="3" description="a type cast failed" />
		<error name="BUFFERTOOSMALL" code="4" description="a provided buffer is too small" />
		<error name="GENERICEXCEPTION" code="5" description="a generic exception occurred" />
		<error name="COULDNOTLOADLIBRARY" code="6" description="the library could not be loaded" />
		<error name="COULDNOTFINDLIBRARYEXPORT" code="7" description="a required exported symbol could not be found in the library" />
		<error name="INCOMPATIBLEBINARYVERSION" code="8" description="the version of the binary interface does not match the bindings interface" />

		<error name="DRIVERERROR" code="1000" description="a driver error occured" />
		<error name="DEVICENOTSUPPORTEDONPLATFORM" code="1001" description="device not supported on platform" />
		<error name="INVALIDDEVICEINDEX" code="1002" description="device not supported on platform" />
		<error name="CAMERADEVICENOTFOUND" code="1003" description="camera device not found" />
		<error name="INVALIDDRIVERTYPE" code="1004" description="invalid driver type" />
		<error name="COULDNOTINITIALIZEWMF" code="1005" description="could not initialize WMF" />
		<error name="COULDNOTFILTERFORVIDEODEVICES" code="1006" description="could not filter for video devices" />
		<error name="COULDNOTENUMERATEDEVICESOURCES" code="1007" description="could not enumerate device sources" />
		<error name="COULDNOTCREATEWMFATTRIBUTES" code="1008" description="could not create Windows Media Foundation Attributes" />		
		<error name="WIDECHARTOUTF8CONVERSIONFAILED" code="1009" description="Widechar to UTF8 conversion failed" />		
		<error name="CAMERADEVICELISTOVERRUN" code="1010" description="Camera device list overrun" />		
		<error name="COULDNOTOPENVIDEODEVICE" code="1011" description="Could not open video device" />		
		<error name="INVALIDCAMERAIDENTIFIERLENGTH" code="1012" description="Invalid camera identifier length" />		
		<error name="INVALIDCAMERAIDENTIFIER" code="1013" description="Invalid camera identifier" />		
		<error name="CAMERAIDENTIFIERALREADYREGISTERED" code="1014" description="Camera identifier already registered" />		
		
		
		
		
	</errors>

	
<!--

This base Driver interface MUST be in Sync with LibMCDriver.xml

-->
	
	<class name="Base">
	</class>

	
	<class name="Driver" parent="Base" description="An abstract Machine Control Driver">

		<method name="Configure" description = "Configures a driver with its specific configuration data.">
			<param name="ConfigurationString" type="string" pass="in" description="Configuration data of driver." />
		</method>
	
		<method name="GetName" description = "returns the name identifier of the driver">
			<param name="Name" type="string" pass="return" description="Name of the driver." />
		</method>

		<method name="GetType" description = "returns the type identifier of the driver">
			<param name="Type" type="string" pass="return" description="Type of the driver." />
		</method>

		<method name="GetVersion" description = "returns the version identifiers of the driver">
			<param name="Major" type="uint32" pass="out" description="Major version." />
			<param name="Minor" type="uint32" pass="out" description="Minor version." />
			<param name="Micro" type="uint32" pass="out" description="Micro version." />
			<param name="Build" type="string" pass="out" description="Build identifier." />
		</method>

		<method name="QueryParameters" description = "Updates the driver parameters in the driver environment. Should only be called in the driver thread.">
		</method>

		<method name="QueryParametersEx" description = "Updates the driver parameters in the driver environment. Might be called out of thread. Implementation MUST be able to handle parallel calls.">
			<param name="DriverUpdateInstance" type="class" class="LibMCEnv:DriverStatusUpdateSession" pass="in" description="Status update instance." />
		</method>
	
	</class>

<!--

End Interface

-->


<!--

Custom implementation

-->



	<class name="DeviceBase" parent="Base" description="Base class for Camera devices.">
	
		<method name="GetFriendlyName" description = "Returns the name of the device in a human readable form.">
			<param name="FriendlyName" type="string" pass="return" description="Name of device." />
		</method>

		<method name="GetOperatingSystemName" description = "Returns a unique name of the device from the operating system.">
			<param name="OperatingSystemName" type="string" pass="return" description="Operating system Identifier of the device." />
		</method>
		
		<method name="IsVideoDevice" description = "Returns if the device supports video capture.">
			<param name="IsVideo" type="bool" pass="return" description="Returns true if the device is a video device." />
		</method>

	</class>


	<class name="VideoDevice" parent="DeviceBase" description="Contains information about a found device.">

		<method name="GetIdentifier" description = "Returns the identifier of the video device.">
			<param name="Identifier" type="string" pass="return" description="Identifier of the device." />
		</method>

		<method name="GetCurrentResolution" description = "Returns a the current resolution of the video stream.">
			<param name="Width" type="uint32" pass="out" description="Width in pixels." />
			<param name="Height" type="uint32" pass="out" description="Height in pixels." />
		</method>
				
		<method name="SetResolution" description = "Sets the resolution of the video stream.">
			<param name="Width" type="uint32" pass="in" description="Width in pixels." />
			<param name="Height" type="uint32" pass="in" description="Height in pixels." />
		</method>

		<method name="CaptureRawImage" description = "Captures a still image from the video stream.">
			<param name="ImageData" type="class" class="LibMCEnv:ImageData" pass="in" description="Capture image object." />
		</method>
	
		<method name="StartStreamCapture" description = "Starts automatic capturing of the video into a video stream. If a stream capture is active, it will stop the current capture process.">
			<param name="DesiredFramerate" type="double" pass="in" description="Framerate in fps." />
			<param name="StreamInstance" type="class" class="LibMCEnv:VideoStream" pass="in" description="Framework stream capture instance." />
		</method>	
	
		<method name="StopStreamCapture" description = "Stops any current video stream capturing.">
		</method>	

		<method name="StreamCaptureIsActive" description = "Returns if a screen capture is active.">
			<param name="IsActive" type="bool" pass="return" description="Returns true, if a stream capture is active." />
		</method>	

		<method name="GetStreamCaptureStatistics" description = "Returns statistics about the current stream capture process.">
			<param name="DesiredFramerate" type="double" pass="out" description="Desired Framerate in fps." />
			<param name="MinFramerate" type="double" pass="out" description="Minimum achieved Capture Framerate in fps." />
			<param name="MaxFramerate" type="double" pass="out" description="Maximum achieved Capture Framerate in fps." />
			<param name="MeanFramerate" type="double" pass="out" description="Mean achieved Capture Framerate in fps." />
			<param name="StdDevFramerate" type="double" pass="out" description="Standard deviation of the Captured Framerate in fps." />
		</method>	

	</class>
	

	<class name="DeviceInfo" parent="DeviceBase" description="Contains information about a found device.">			

	</class>


	<class name="DeviceList" parent="Base" description="Contains a list of devices.">
			
		<method name="GetCount" description = "Returns number of devices found.">
			<param name="Count" type="uint32" pass="return" description="Number of devices found." />
		</method>

		<method name="GetDeviceInfo" description="Returns a device info by index.">
			<param name="Index" type="uint32" pass="in" description="Index of device (0-based)." />
			<param name="DeviceInfoInstance" type="class" class="DeviceInfo" pass="return" description="Info of discovered device." />
		</method>

		<method name="FindDeviceInfoByOperatingSystemName" description="Finds a device info by operating system name.">
			<param name="OperatingSystemName" type="string" pass="in" description="Operating system Identifier of the device." />
			<param name="MustExist" type="bool" pass="in" description="If true, an exception will be thrown if the device does not exist. If false, the call will return null if the device does not exist." />
			<param name="DeviceInfoInstance" type="optionalclass" class="DeviceInfo" pass="return" description="Info of discovered device." />
		</method>
		
	</class>

	<class name="Driver_Camera" parent="Driver" description="A generic Camera Driver for operating system supported devices.">

		<method name="EnumerateDevices" description = "Lists all devices available on the system.">
			<param name="DeviceListInstance" type="class" class="DeviceList" pass="return" description="List of discovered devices." />
		</method>

		<method name="OpenVideoDevice" description = "Tries to reserve and activate a device. ">
			<param name="Identifier" type="string" pass="in" description="An internal identifier that will recover the open device. MUST NOT be empty. Fails if the identifier is already in use."/>
			<param name="VideoDeviceInfo" type="class" class="DeviceInfo" pass="in" description="The information object of the device." />
			<param name="VideoDeviceInstance" type="class" class="VideoDevice" pass="return" description="The actual video device instance." />
		</method>		


		<method name="FindDeviceByIdentifier" description="Finds a device instance by internal identifier.">
			<param name="Identifier" type="string" pass="in" description="Internal Identifier of the device." />
			<param name="MustExist" type="bool" pass="in" description="If true, an exception will be thrown if the device does not exist. If false, the call will return null if the device does not exist." />
			<param name="DeviceInstance" type="optionalclass" class="VideoDevice" pass="return" description="Instance of discovered device." />
		</method>

		<method name="FindDeviceByOperatingSystemName" description="Finds a device instance by operating system name.">
			<param name="OperatingSystemName" type="string" pass="in" description="Operating system Identifier of the device." />
			<param name="MustExist" type="bool" pass="in" description="If true, an exception will be thrown if the device does not exist. If false, the call will return null if the device does not exist." />
			<param name="DeviceInstance" type="optionalclass" class="VideoDevice" pass="return" description="Instance of discovered device." />
		</method>
		
	</class>


	<class name="Driver_Camera_Windows" parent="Driver_Camera" description="Operating specific Windows Camera Class.">

	</class>

<!--

End of Custom implementation

-->

		
	<global baseclassname="Base" stringoutclassname="Base" releasemethod="ReleaseInstance" acquiremethod="AcquireInstance" versionmethod="GetVersion" errormethod="GetLastError" injectionmethod="InjectComponent" symbollookupmethod="GetSymbolLookupMethod">
		
		<method name="GetVersion" description = "retrieves the binary version of this library.">
			<param name="Major" type="uint32" pass="out" description="returns the major version of this library" />
			<param name="Minor" type="uint32" pass="out" description="returns the minor version of this library" />
			<param name="Micro" type="uint32" pass="out" description="returns the micro version of this library" />
		</method>
		<method name="GetLastError" description="Returns the last error recorded on this object">
			<param name="Instance" type="class" class="Base" pass="in" description="Instance Handle" />
			<param name="ErrorMessage" type="string" pass="out" description="Message of the last error" />
			<param name="HasError" type="bool" pass="return" description="Is there a last error to query" />
		</method>
		<method name="ReleaseInstance" description="Releases shared ownership of an Instance">
			<param name="Instance" type="class" class="Base" pass="in" description="Instance Handle" />
		</method>
		<method name="AcquireInstance" description="Acquires shared ownership of an Instance">
			<param name="Instance" type="class" class="Base" pass="in" description="Instance Handle" />
		</method>
		<method name="InjectComponent" description="Injects an imported component for usage within this component">
			<param name="NameSpace" type="string" pass="in" description="NameSpace of the injected component" />
			<param name="SymbolAddressMethod" type="pointer" pass="in" description="Address of the SymbolAddressMethod of the injected component" />
		</method>		
		<method name="GetSymbolLookupMethod" description="Returns the address of the SymbolLookupMethod">
			<param name="SymbolLookupMethod" type="pointer" pass="return" description="Address of the SymbolAddressMethod" />
		</method>				
		<method name="CreateDriver" description="Creates a driver instance with a specific name.">
			<param name="Name" type="string" pass="in" description="Name of driver to be created." />
			<param name="Type" type="string" pass="in" description="Type of driver to be created." />
			<param name="DriverEnvironment" type="class" class="LibMCEnv:DriverEnvironment" pass="in" description="Environment of this driver." />
			<param name="Instance" type="optionalclass" class="Driver" pass="return" description="New Driver instance" />
		</method>
		
	</global>
	
	
</component>


