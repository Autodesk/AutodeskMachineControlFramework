/*++

Copyright (C) 2020 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.7.0-develop.

Abstract: This is an autogenerated C++-Header file in order to allow an easy
 use of MC Driver Camera

Interface version: 1.0.0

*/

#ifndef __LIBMCDRIVER_CAMERA_CPPHEADER_DYNAMIC_CPP
#define __LIBMCDRIVER_CAMERA_CPPHEADER_DYNAMIC_CPP

#include "libmcdriver_camera_types.hpp"
#include "libmcdriver_camera_dynamic.h"

#include "libmcdriverenv_dynamic.hpp"

#ifdef _WIN32
#include <windows.h>
#else // _WIN32
#include <dlfcn.h>
#endif // _WIN32
#include <string>
#include <memory>
#include <vector>
#include <exception>

namespace LibMCDriver_Camera {

/*************************************************************************************************************************
 Forward Declaration of all classes
**************************************************************************************************************************/
class CWrapper;
class CBase;
class CDriver;
class CIterator;
class CPNGImage;
class CDriver_Camera;
class CRaspiCameraDevice;
class CRaspiCameraDeviceIterator;
class CDriver_RaspiCamera;

/*************************************************************************************************************************
 Declaration of deprecated class types
**************************************************************************************************************************/
typedef CWrapper CLibMCDriver_CameraWrapper;
typedef CBase CLibMCDriver_CameraBase;
typedef CDriver CLibMCDriver_CameraDriver;
typedef CIterator CLibMCDriver_CameraIterator;
typedef CPNGImage CLibMCDriver_CameraPNGImage;
typedef CDriver_Camera CLibMCDriver_CameraDriver_Camera;
typedef CRaspiCameraDevice CLibMCDriver_CameraRaspiCameraDevice;
typedef CRaspiCameraDeviceIterator CLibMCDriver_CameraRaspiCameraDeviceIterator;
typedef CDriver_RaspiCamera CLibMCDriver_CameraDriver_RaspiCamera;

/*************************************************************************************************************************
 Declaration of shared pointer types
**************************************************************************************************************************/
typedef std::shared_ptr<CWrapper> PWrapper;
typedef std::shared_ptr<CBase> PBase;
typedef std::shared_ptr<CDriver> PDriver;
typedef std::shared_ptr<CIterator> PIterator;
typedef std::shared_ptr<CPNGImage> PPNGImage;
typedef std::shared_ptr<CDriver_Camera> PDriver_Camera;
typedef std::shared_ptr<CRaspiCameraDevice> PRaspiCameraDevice;
typedef std::shared_ptr<CRaspiCameraDeviceIterator> PRaspiCameraDeviceIterator;
typedef std::shared_ptr<CDriver_RaspiCamera> PDriver_RaspiCamera;

/*************************************************************************************************************************
 Declaration of deprecated shared pointer types
**************************************************************************************************************************/
typedef PWrapper PLibMCDriver_CameraWrapper;
typedef PBase PLibMCDriver_CameraBase;
typedef PDriver PLibMCDriver_CameraDriver;
typedef PIterator PLibMCDriver_CameraIterator;
typedef PPNGImage PLibMCDriver_CameraPNGImage;
typedef PDriver_Camera PLibMCDriver_CameraDriver_Camera;
typedef PRaspiCameraDevice PLibMCDriver_CameraRaspiCameraDevice;
typedef PRaspiCameraDeviceIterator PLibMCDriver_CameraRaspiCameraDeviceIterator;
typedef PDriver_RaspiCamera PLibMCDriver_CameraDriver_RaspiCamera;


/*************************************************************************************************************************
 classParam Definition
**************************************************************************************************************************/

template<class T> class classParam {
private:
	const T* m_ptr;

public:
	classParam(const T* ptr)
		: m_ptr (ptr)
	{
	}

	classParam(std::shared_ptr <T> sharedPtr)
		: m_ptr (sharedPtr.get())
	{
	}

	LibMCDriver_CameraHandle GetHandle()
	{
		if (m_ptr != nullptr)
			return m_ptr->handle();
		return nullptr;
	}
};

/*************************************************************************************************************************
 Class ELibMCDriver_CameraException 
**************************************************************************************************************************/
class ELibMCDriver_CameraException : public std::exception {
protected:
	/**
	* Error code for the Exception.
	*/
	LibMCDriver_CameraResult m_errorCode;
	/**
	* Error message for the Exception.
	*/
	std::string m_errorMessage;

public:
	/**
	* Exception Constructor.
	*/
	ELibMCDriver_CameraException(LibMCDriver_CameraResult errorCode, const std::string & sErrorMessage)
		: m_errorMessage("LibMCDriver_Camera Error " + std::to_string(errorCode) + " (" + sErrorMessage + ")")
	{
		m_errorCode = errorCode;
	}

	/**
	* Returns error code
	*/
	LibMCDriver_CameraResult getErrorCode() const noexcept
	{
		return m_errorCode;
	}

	/**
	* Returns error message
	*/
	const char* what() const noexcept
	{
		return m_errorMessage.c_str();
	}

};

/*************************************************************************************************************************
 Class CInputVector
**************************************************************************************************************************/
template <typename T>
class CInputVector {
private:
	
	const T* m_data;
	size_t m_size;
	
public:
	
	CInputVector( const std::vector<T>& vec)
		: m_data( vec.data() ), m_size( vec.size() )
	{
	}
	
	CInputVector( const T* in_data, size_t in_size)
		: m_data( in_data ), m_size(in_size )
	{
	}
	
	const T* data() const
	{
		return m_data;
	}
	
	size_t size() const
	{
		return m_size;
	}
	
};

// declare deprecated class name
template<typename T>
using CLibMCDriver_CameraInputVector = CInputVector<T>;

/*************************************************************************************************************************
 Class CWrapper 
**************************************************************************************************************************/
class CWrapper {
public:
	
	CWrapper(void* pSymbolLookupMethod)
	{
		CheckError(nullptr, initWrapperTable(&m_WrapperTable));
		CheckError(nullptr, loadWrapperTableFromSymbolLookupMethod(&m_WrapperTable, pSymbolLookupMethod));
		
		CheckError(nullptr, checkBinaryVersion());
	}
	
	CWrapper(const std::string &sFileName)
	{
		CheckError(nullptr, initWrapperTable(&m_WrapperTable));
		CheckError(nullptr, loadWrapperTable(&m_WrapperTable, sFileName.c_str()));
		
		CheckError(nullptr, checkBinaryVersion());
	}
	
	static PWrapper loadLibrary(const std::string &sFileName)
	{
		return std::make_shared<CWrapper>(sFileName);
	}
	
	static PWrapper loadLibraryFromSymbolLookupMethod(void* pSymbolLookupMethod)
	{
		return std::make_shared<CWrapper>(pSymbolLookupMethod);
	}
	
	~CWrapper()
	{
		releaseWrapperTable(&m_WrapperTable);
	}
	
	inline void CheckError(CBase * pBaseClass, LibMCDriver_CameraResult nResult);

	inline void GetVersion(LibMCDriver_Camera_uint32 & nMajor, LibMCDriver_Camera_uint32 & nMinor, LibMCDriver_Camera_uint32 & nMicro);
	inline bool GetLastError(classParam<CBase> pInstance, std::string & sErrorMessage);
	inline void ReleaseInstance(classParam<CBase> pInstance);
	inline void AcquireInstance(classParam<CBase> pInstance);
	inline void InjectComponent(const std::string & sNameSpace, const LibMCDriver_Camera_pvoid pSymbolAddressMethod);
	inline LibMCDriver_Camera_pvoid GetSymbolLookupMethod();
	inline PDriver CreateDriver(const std::string & sName, const std::string & sType, classParam<LibMCDriverEnv::CDriverEnvironment> pDriverEnvironment);

private:
	sLibMCDriver_CameraDynamicWrapperTable m_WrapperTable;
	// Injected Components
	LibMCDriverEnv::PWrapper m_pLibMCDriverEnvWrapper;

	
	LibMCDriver_CameraResult checkBinaryVersion()
	{
		LibMCDriver_Camera_uint32 nMajor, nMinor, nMicro;
		GetVersion(nMajor, nMinor, nMicro);
		if ( (nMajor != LIBMCDRIVER_CAMERA_VERSION_MAJOR) || (nMinor < LIBMCDRIVER_CAMERA_VERSION_MINOR) ) {
			return LIBMCDRIVER_CAMERA_ERROR_INCOMPATIBLEBINARYVERSION;
		}
		return LIBMCDRIVER_CAMERA_SUCCESS;
	}
	LibMCDriver_CameraResult initWrapperTable(sLibMCDriver_CameraDynamicWrapperTable * pWrapperTable);
	LibMCDriver_CameraResult releaseWrapperTable(sLibMCDriver_CameraDynamicWrapperTable * pWrapperTable);
	LibMCDriver_CameraResult loadWrapperTable(sLibMCDriver_CameraDynamicWrapperTable * pWrapperTable, const char * pLibraryFileName);
	LibMCDriver_CameraResult loadWrapperTableFromSymbolLookupMethod(sLibMCDriver_CameraDynamicWrapperTable * pWrapperTable, void* pSymbolLookupMethod);

	friend class CBase;
	friend class CDriver;
	friend class CIterator;
	friend class CPNGImage;
	friend class CDriver_Camera;
	friend class CRaspiCameraDevice;
	friend class CRaspiCameraDeviceIterator;
	friend class CDriver_RaspiCamera;

};

	
/*************************************************************************************************************************
 Class CBase 
**************************************************************************************************************************/
class CBase {
public:
	
protected:
	/* Wrapper Object that created the class. */
	CWrapper * m_pWrapper;
	/* Handle to Instance in library*/
	LibMCDriver_CameraHandle m_pHandle;

	/* Checks for an Error code and raises Exceptions */
	void CheckError(LibMCDriver_CameraResult nResult)
	{
		if (m_pWrapper != nullptr)
			m_pWrapper->CheckError(this, nResult);
	}
public:
	/**
	* CBase::CBase - Constructor for Base class.
	*/
	CBase(CWrapper * pWrapper, LibMCDriver_CameraHandle pHandle)
		: m_pWrapper(pWrapper), m_pHandle(pHandle)
	{
	}

	/**
	* CBase::~CBase - Destructor for Base class.
	*/
	virtual ~CBase()
	{
		if (m_pWrapper != nullptr)
			m_pWrapper->ReleaseInstance(this);
		m_pWrapper = nullptr;
	}

	/**
	* CBase::handle - Returns handle to instance.
	*/
	LibMCDriver_CameraHandle handle() const
	{
		return m_pHandle;
	}

	/**
	* CBase::wrapper - Returns wrapper instance.
	*/
	CWrapper * wrapper() const
	{
		return m_pWrapper;
	}
	
	friend class CWrapper;
};
	
/*************************************************************************************************************************
 Class CDriver 
**************************************************************************************************************************/
class CDriver : public CBase {
public:
	
	/**
	* CDriver::CDriver - Constructor for Driver class.
	*/
	CDriver(CWrapper* pWrapper, LibMCDriver_CameraHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline std::string GetName();
	inline std::string GetType();
	inline void GetVersion(LibMCDriver_Camera_uint32 & nMajor, LibMCDriver_Camera_uint32 & nMinor, LibMCDriver_Camera_uint32 & nMicro, std::string & sBuild);
	inline void GetHeaderInformation(std::string & sNameSpace, std::string & sBaseName);
	inline void QueryParameters();
};
	
/*************************************************************************************************************************
 Class CIterator 
**************************************************************************************************************************/
class CIterator : public CBase {
public:
	
	/**
	* CIterator::CIterator - Constructor for Iterator class.
	*/
	CIterator(CWrapper* pWrapper, LibMCDriver_CameraHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline bool MoveNext();
	inline bool MovePrevious();
	inline PBase GetCurrent();
	inline PIterator Clone();
	inline LibMCDriver_Camera_uint64 Count();
};
	
/*************************************************************************************************************************
 Class CPNGImage 
**************************************************************************************************************************/
class CPNGImage : public CBase {
public:
	
	/**
	* CPNGImage::CPNGImage - Constructor for PNGImage class.
	*/
	CPNGImage(CWrapper* pWrapper, LibMCDriver_CameraHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline LibMCDriver_Camera_uint64 GetWidth();
	inline LibMCDriver_Camera_uint64 GetHeight();
	inline eImagePixelFormat GetPixelFormat();
	inline void GetRawData(std::vector<LibMCDriver_Camera_uint8> & PNGDataBuffer);
	inline std::string SaveToFile();
};
	
/*************************************************************************************************************************
 Class CDriver_Camera 
**************************************************************************************************************************/
class CDriver_Camera : public CDriver {
public:
	
	/**
	* CDriver_Camera::CDriver_Camera - Constructor for Driver_Camera class.
	*/
	CDriver_Camera(CWrapper* pWrapper, LibMCDriver_CameraHandle pHandle)
		: CDriver(pWrapper, pHandle)
	{
	}
	
	inline PPNGImage CapturePNGImage();
};
	
/*************************************************************************************************************************
 Class CRaspiCameraDevice 
**************************************************************************************************************************/
class CRaspiCameraDevice : public CBase {
public:
	
	/**
	* CRaspiCameraDevice::CRaspiCameraDevice - Constructor for RaspiCameraDevice class.
	*/
	CRaspiCameraDevice(CWrapper* pWrapper, LibMCDriver_CameraHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline std::string GetDeviceString();
};
	
/*************************************************************************************************************************
 Class CRaspiCameraDeviceIterator 
**************************************************************************************************************************/
class CRaspiCameraDeviceIterator : public CIterator {
public:
	
	/**
	* CRaspiCameraDeviceIterator::CRaspiCameraDeviceIterator - Constructor for RaspiCameraDeviceIterator class.
	*/
	CRaspiCameraDeviceIterator(CWrapper* pWrapper, LibMCDriver_CameraHandle pHandle)
		: CIterator(pWrapper, pHandle)
	{
	}
	
	inline PRaspiCameraDevice GetCameraDevice();
};
	
/*************************************************************************************************************************
 Class CDriver_RaspiCamera 
**************************************************************************************************************************/
class CDriver_RaspiCamera : public CDriver_Camera {
public:
	
	/**
	* CDriver_RaspiCamera::CDriver_RaspiCamera - Constructor for Driver_RaspiCamera class.
	*/
	CDriver_RaspiCamera(CWrapper* pWrapper, LibMCDriver_CameraHandle pHandle)
		: CDriver_Camera(pWrapper, pHandle)
	{
	}
	
	inline PRaspiCameraDeviceIterator QueryDevices();
	inline void Initialize(const std::string & sDeviceString, const LibMCDriver_Camera_uint32 nWidth, const LibMCDriver_Camera_uint32 nHeight, const eImagePixelFormat ePixelformat);
};
	
	/**
	* CWrapper::GetVersion - retrieves the binary version of this library.
	* @param[out] nMajor - returns the major version of this library
	* @param[out] nMinor - returns the minor version of this library
	* @param[out] nMicro - returns the micro version of this library
	*/
	inline void CWrapper::GetVersion(LibMCDriver_Camera_uint32 & nMajor, LibMCDriver_Camera_uint32 & nMinor, LibMCDriver_Camera_uint32 & nMicro)
	{
		CheckError(nullptr,m_WrapperTable.m_GetVersion(&nMajor, &nMinor, &nMicro));
	}
	
	/**
	* CWrapper::GetLastError - Returns the last error recorded on this object
	* @param[in] pInstance - Instance Handle
	* @param[out] sErrorMessage - Message of the last error
	* @return Is there a last error to query
	*/
	inline bool CWrapper::GetLastError(classParam<CBase> pInstance, std::string & sErrorMessage)
	{
		LibMCDriver_CameraHandle hInstance = pInstance.GetHandle();
		LibMCDriver_Camera_uint32 bytesNeededErrorMessage = 0;
		LibMCDriver_Camera_uint32 bytesWrittenErrorMessage = 0;
		bool resultHasError = 0;
		CheckError(nullptr,m_WrapperTable.m_GetLastError(hInstance, 0, &bytesNeededErrorMessage, nullptr, &resultHasError));
		std::vector<char> bufferErrorMessage(bytesNeededErrorMessage);
		CheckError(nullptr,m_WrapperTable.m_GetLastError(hInstance, bytesNeededErrorMessage, &bytesWrittenErrorMessage, &bufferErrorMessage[0], &resultHasError));
		sErrorMessage = std::string(&bufferErrorMessage[0]);
		
		return resultHasError;
	}
	
	/**
	* CWrapper::ReleaseInstance - Releases shared ownership of an Instance
	* @param[in] pInstance - Instance Handle
	*/
	inline void CWrapper::ReleaseInstance(classParam<CBase> pInstance)
	{
		LibMCDriver_CameraHandle hInstance = pInstance.GetHandle();
		CheckError(nullptr,m_WrapperTable.m_ReleaseInstance(hInstance));
	}
	
	/**
	* CWrapper::AcquireInstance - Acquires shared ownership of an Instance
	* @param[in] pInstance - Instance Handle
	*/
	inline void CWrapper::AcquireInstance(classParam<CBase> pInstance)
	{
		LibMCDriver_CameraHandle hInstance = pInstance.GetHandle();
		CheckError(nullptr,m_WrapperTable.m_AcquireInstance(hInstance));
	}
	
	/**
	* CWrapper::InjectComponent - Injects an imported component for usage within this component
	* @param[in] sNameSpace - NameSpace of the injected component
	* @param[in] pSymbolAddressMethod - Address of the SymbolAddressMethod of the injected component
	*/
	inline void CWrapper::InjectComponent(const std::string & sNameSpace, const LibMCDriver_Camera_pvoid pSymbolAddressMethod)
	{
		CheckError(nullptr,m_WrapperTable.m_InjectComponent(sNameSpace.c_str(), pSymbolAddressMethod));
		
		bool bNameSpaceFound = false;
		if (sNameSpace == "LibMCDriverEnv") {
			if (m_pLibMCDriverEnvWrapper != nullptr) {
				throw ELibMCDriver_CameraException(LIBMCDRIVER_CAMERA_ERROR_COULDNOTLOADLIBRARY, "Library with namespace " + sNameSpace + " is already registered.");
			}
			m_pLibMCDriverEnvWrapper = LibMCDriverEnv::CWrapper::loadLibraryFromSymbolLookupMethod(pSymbolAddressMethod);
			bNameSpaceFound = true;
		}
		if (!bNameSpaceFound)
			throw ELibMCDriver_CameraException(LIBMCDRIVER_CAMERA_ERROR_COULDNOTLOADLIBRARY, "Unknown namespace " + sNameSpace);
	}
	
	/**
	* CWrapper::GetSymbolLookupMethod - Returns the address of the SymbolLookupMethod
	* @return Address of the SymbolAddressMethod
	*/
	inline LibMCDriver_Camera_pvoid CWrapper::GetSymbolLookupMethod()
	{
		LibMCDriver_Camera_pvoid resultSymbolLookupMethod = 0;
		CheckError(nullptr,m_WrapperTable.m_GetSymbolLookupMethod(&resultSymbolLookupMethod));
		
		return resultSymbolLookupMethod;
	}
	
	/**
	* CWrapper::CreateDriver - Creates a driver instance with a specific name.
	* @param[in] sName - Name of driver to be created.
	* @param[in] sType - Type of driver to be created.
	* @param[in] pDriverEnvironment - Environment of this driver.
	* @return New Driver instance
	*/
	inline PDriver CWrapper::CreateDriver(const std::string & sName, const std::string & sType, classParam<LibMCDriverEnv::CDriverEnvironment> pDriverEnvironment)
	{
		LibMCDriverEnvHandle hDriverEnvironment = pDriverEnvironment.GetHandle();
		LibMCDriver_CameraHandle hInstance = nullptr;
		CheckError(nullptr,m_WrapperTable.m_CreateDriver(sName.c_str(), sType.c_str(), hDriverEnvironment, &hInstance));
		
		if (!hInstance) {
			CheckError(nullptr,LIBMCDRIVER_CAMERA_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CDriver>(this, hInstance);
	}
	
	inline void CWrapper::CheckError(CBase * pBaseClass, LibMCDriver_CameraResult nResult)
	{
		if (nResult != 0) {
			std::string sErrorMessage;
			if (pBaseClass != nullptr) {
				GetLastError(pBaseClass, sErrorMessage);
			}
			throw ELibMCDriver_CameraException(nResult, sErrorMessage);
		}
	}
	

	inline LibMCDriver_CameraResult CWrapper::initWrapperTable(sLibMCDriver_CameraDynamicWrapperTable * pWrapperTable)
	{
		if (pWrapperTable == nullptr)
			return LIBMCDRIVER_CAMERA_ERROR_INVALIDPARAM;
		
		pWrapperTable->m_LibraryHandle = nullptr;
		pWrapperTable->m_Driver_GetName = nullptr;
		pWrapperTable->m_Driver_GetType = nullptr;
		pWrapperTable->m_Driver_GetVersion = nullptr;
		pWrapperTable->m_Driver_GetHeaderInformation = nullptr;
		pWrapperTable->m_Driver_QueryParameters = nullptr;
		pWrapperTable->m_Iterator_MoveNext = nullptr;
		pWrapperTable->m_Iterator_MovePrevious = nullptr;
		pWrapperTable->m_Iterator_GetCurrent = nullptr;
		pWrapperTable->m_Iterator_Clone = nullptr;
		pWrapperTable->m_Iterator_Count = nullptr;
		pWrapperTable->m_PNGImage_GetWidth = nullptr;
		pWrapperTable->m_PNGImage_GetHeight = nullptr;
		pWrapperTable->m_PNGImage_GetPixelFormat = nullptr;
		pWrapperTable->m_PNGImage_GetRawData = nullptr;
		pWrapperTable->m_PNGImage_SaveToFile = nullptr;
		pWrapperTable->m_Driver_Camera_CapturePNGImage = nullptr;
		pWrapperTable->m_RaspiCameraDevice_GetDeviceString = nullptr;
		pWrapperTable->m_RaspiCameraDeviceIterator_GetCameraDevice = nullptr;
		pWrapperTable->m_Driver_RaspiCamera_QueryDevices = nullptr;
		pWrapperTable->m_Driver_RaspiCamera_Initialize = nullptr;
		pWrapperTable->m_GetVersion = nullptr;
		pWrapperTable->m_GetLastError = nullptr;
		pWrapperTable->m_ReleaseInstance = nullptr;
		pWrapperTable->m_AcquireInstance = nullptr;
		pWrapperTable->m_InjectComponent = nullptr;
		pWrapperTable->m_GetSymbolLookupMethod = nullptr;
		pWrapperTable->m_CreateDriver = nullptr;
		
		return LIBMCDRIVER_CAMERA_SUCCESS;
	}

	inline LibMCDriver_CameraResult CWrapper::releaseWrapperTable(sLibMCDriver_CameraDynamicWrapperTable * pWrapperTable)
	{
		if (pWrapperTable == nullptr)
			return LIBMCDRIVER_CAMERA_ERROR_INVALIDPARAM;
		
		if (pWrapperTable->m_LibraryHandle != nullptr) {
		#ifdef _WIN32
			HMODULE hModule = (HMODULE) pWrapperTable->m_LibraryHandle;
			FreeLibrary(hModule);
		#else // _WIN32
			dlclose(pWrapperTable->m_LibraryHandle);
		#endif // _WIN32
			return initWrapperTable(pWrapperTable);
		}
		
		return LIBMCDRIVER_CAMERA_SUCCESS;
	}

	inline LibMCDriver_CameraResult CWrapper::loadWrapperTable(sLibMCDriver_CameraDynamicWrapperTable * pWrapperTable, const char * pLibraryFileName)
	{
		if (pWrapperTable == nullptr)
			return LIBMCDRIVER_CAMERA_ERROR_INVALIDPARAM;
		if (pLibraryFileName == nullptr)
			return LIBMCDRIVER_CAMERA_ERROR_INVALIDPARAM;
		
		#ifdef _WIN32
		// Convert filename to UTF16-string
		int nLength = (int)strlen(pLibraryFileName);
		int nBufferSize = nLength * 2 + 2;
		std::vector<wchar_t> wsLibraryFileName(nBufferSize);
		int nResult = MultiByteToWideChar(CP_UTF8, 0, pLibraryFileName, nLength, &wsLibraryFileName[0], nBufferSize);
		if (nResult == 0)
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTLOADLIBRARY;
		
		HMODULE hLibrary = LoadLibraryW(wsLibraryFileName.data());
		if (hLibrary == 0) 
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTLOADLIBRARY;
		#else // _WIN32
		void* hLibrary = dlopen(pLibraryFileName, RTLD_LAZY);
		if (hLibrary == 0) 
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTLOADLIBRARY;
		dlerror();
		#endif // _WIN32
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_GetName = (PLibMCDriver_CameraDriver_GetNamePtr) GetProcAddress(hLibrary, "libmcdriver_camera_driver_getname");
		#else // _WIN32
		pWrapperTable->m_Driver_GetName = (PLibMCDriver_CameraDriver_GetNamePtr) dlsym(hLibrary, "libmcdriver_camera_driver_getname");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_GetName == nullptr)
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_GetType = (PLibMCDriver_CameraDriver_GetTypePtr) GetProcAddress(hLibrary, "libmcdriver_camera_driver_gettype");
		#else // _WIN32
		pWrapperTable->m_Driver_GetType = (PLibMCDriver_CameraDriver_GetTypePtr) dlsym(hLibrary, "libmcdriver_camera_driver_gettype");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_GetType == nullptr)
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_GetVersion = (PLibMCDriver_CameraDriver_GetVersionPtr) GetProcAddress(hLibrary, "libmcdriver_camera_driver_getversion");
		#else // _WIN32
		pWrapperTable->m_Driver_GetVersion = (PLibMCDriver_CameraDriver_GetVersionPtr) dlsym(hLibrary, "libmcdriver_camera_driver_getversion");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_GetVersion == nullptr)
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_GetHeaderInformation = (PLibMCDriver_CameraDriver_GetHeaderInformationPtr) GetProcAddress(hLibrary, "libmcdriver_camera_driver_getheaderinformation");
		#else // _WIN32
		pWrapperTable->m_Driver_GetHeaderInformation = (PLibMCDriver_CameraDriver_GetHeaderInformationPtr) dlsym(hLibrary, "libmcdriver_camera_driver_getheaderinformation");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_GetHeaderInformation == nullptr)
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_QueryParameters = (PLibMCDriver_CameraDriver_QueryParametersPtr) GetProcAddress(hLibrary, "libmcdriver_camera_driver_queryparameters");
		#else // _WIN32
		pWrapperTable->m_Driver_QueryParameters = (PLibMCDriver_CameraDriver_QueryParametersPtr) dlsym(hLibrary, "libmcdriver_camera_driver_queryparameters");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_QueryParameters == nullptr)
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Iterator_MoveNext = (PLibMCDriver_CameraIterator_MoveNextPtr) GetProcAddress(hLibrary, "libmcdriver_camera_iterator_movenext");
		#else // _WIN32
		pWrapperTable->m_Iterator_MoveNext = (PLibMCDriver_CameraIterator_MoveNextPtr) dlsym(hLibrary, "libmcdriver_camera_iterator_movenext");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Iterator_MoveNext == nullptr)
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Iterator_MovePrevious = (PLibMCDriver_CameraIterator_MovePreviousPtr) GetProcAddress(hLibrary, "libmcdriver_camera_iterator_moveprevious");
		#else // _WIN32
		pWrapperTable->m_Iterator_MovePrevious = (PLibMCDriver_CameraIterator_MovePreviousPtr) dlsym(hLibrary, "libmcdriver_camera_iterator_moveprevious");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Iterator_MovePrevious == nullptr)
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Iterator_GetCurrent = (PLibMCDriver_CameraIterator_GetCurrentPtr) GetProcAddress(hLibrary, "libmcdriver_camera_iterator_getcurrent");
		#else // _WIN32
		pWrapperTable->m_Iterator_GetCurrent = (PLibMCDriver_CameraIterator_GetCurrentPtr) dlsym(hLibrary, "libmcdriver_camera_iterator_getcurrent");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Iterator_GetCurrent == nullptr)
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Iterator_Clone = (PLibMCDriver_CameraIterator_ClonePtr) GetProcAddress(hLibrary, "libmcdriver_camera_iterator_clone");
		#else // _WIN32
		pWrapperTable->m_Iterator_Clone = (PLibMCDriver_CameraIterator_ClonePtr) dlsym(hLibrary, "libmcdriver_camera_iterator_clone");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Iterator_Clone == nullptr)
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Iterator_Count = (PLibMCDriver_CameraIterator_CountPtr) GetProcAddress(hLibrary, "libmcdriver_camera_iterator_count");
		#else // _WIN32
		pWrapperTable->m_Iterator_Count = (PLibMCDriver_CameraIterator_CountPtr) dlsym(hLibrary, "libmcdriver_camera_iterator_count");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Iterator_Count == nullptr)
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_PNGImage_GetWidth = (PLibMCDriver_CameraPNGImage_GetWidthPtr) GetProcAddress(hLibrary, "libmcdriver_camera_pngimage_getwidth");
		#else // _WIN32
		pWrapperTable->m_PNGImage_GetWidth = (PLibMCDriver_CameraPNGImage_GetWidthPtr) dlsym(hLibrary, "libmcdriver_camera_pngimage_getwidth");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_PNGImage_GetWidth == nullptr)
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_PNGImage_GetHeight = (PLibMCDriver_CameraPNGImage_GetHeightPtr) GetProcAddress(hLibrary, "libmcdriver_camera_pngimage_getheight");
		#else // _WIN32
		pWrapperTable->m_PNGImage_GetHeight = (PLibMCDriver_CameraPNGImage_GetHeightPtr) dlsym(hLibrary, "libmcdriver_camera_pngimage_getheight");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_PNGImage_GetHeight == nullptr)
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_PNGImage_GetPixelFormat = (PLibMCDriver_CameraPNGImage_GetPixelFormatPtr) GetProcAddress(hLibrary, "libmcdriver_camera_pngimage_getpixelformat");
		#else // _WIN32
		pWrapperTable->m_PNGImage_GetPixelFormat = (PLibMCDriver_CameraPNGImage_GetPixelFormatPtr) dlsym(hLibrary, "libmcdriver_camera_pngimage_getpixelformat");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_PNGImage_GetPixelFormat == nullptr)
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_PNGImage_GetRawData = (PLibMCDriver_CameraPNGImage_GetRawDataPtr) GetProcAddress(hLibrary, "libmcdriver_camera_pngimage_getrawdata");
		#else // _WIN32
		pWrapperTable->m_PNGImage_GetRawData = (PLibMCDriver_CameraPNGImage_GetRawDataPtr) dlsym(hLibrary, "libmcdriver_camera_pngimage_getrawdata");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_PNGImage_GetRawData == nullptr)
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_PNGImage_SaveToFile = (PLibMCDriver_CameraPNGImage_SaveToFilePtr) GetProcAddress(hLibrary, "libmcdriver_camera_pngimage_savetofile");
		#else // _WIN32
		pWrapperTable->m_PNGImage_SaveToFile = (PLibMCDriver_CameraPNGImage_SaveToFilePtr) dlsym(hLibrary, "libmcdriver_camera_pngimage_savetofile");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_PNGImage_SaveToFile == nullptr)
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_Camera_CapturePNGImage = (PLibMCDriver_CameraDriver_Camera_CapturePNGImagePtr) GetProcAddress(hLibrary, "libmcdriver_camera_driver_camera_capturepngimage");
		#else // _WIN32
		pWrapperTable->m_Driver_Camera_CapturePNGImage = (PLibMCDriver_CameraDriver_Camera_CapturePNGImagePtr) dlsym(hLibrary, "libmcdriver_camera_driver_camera_capturepngimage");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_Camera_CapturePNGImage == nullptr)
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_RaspiCameraDevice_GetDeviceString = (PLibMCDriver_CameraRaspiCameraDevice_GetDeviceStringPtr) GetProcAddress(hLibrary, "libmcdriver_camera_raspicameradevice_getdevicestring");
		#else // _WIN32
		pWrapperTable->m_RaspiCameraDevice_GetDeviceString = (PLibMCDriver_CameraRaspiCameraDevice_GetDeviceStringPtr) dlsym(hLibrary, "libmcdriver_camera_raspicameradevice_getdevicestring");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_RaspiCameraDevice_GetDeviceString == nullptr)
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_RaspiCameraDeviceIterator_GetCameraDevice = (PLibMCDriver_CameraRaspiCameraDeviceIterator_GetCameraDevicePtr) GetProcAddress(hLibrary, "libmcdriver_camera_raspicameradeviceiterator_getcameradevice");
		#else // _WIN32
		pWrapperTable->m_RaspiCameraDeviceIterator_GetCameraDevice = (PLibMCDriver_CameraRaspiCameraDeviceIterator_GetCameraDevicePtr) dlsym(hLibrary, "libmcdriver_camera_raspicameradeviceiterator_getcameradevice");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_RaspiCameraDeviceIterator_GetCameraDevice == nullptr)
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_RaspiCamera_QueryDevices = (PLibMCDriver_CameraDriver_RaspiCamera_QueryDevicesPtr) GetProcAddress(hLibrary, "libmcdriver_camera_driver_raspicamera_querydevices");
		#else // _WIN32
		pWrapperTable->m_Driver_RaspiCamera_QueryDevices = (PLibMCDriver_CameraDriver_RaspiCamera_QueryDevicesPtr) dlsym(hLibrary, "libmcdriver_camera_driver_raspicamera_querydevices");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_RaspiCamera_QueryDevices == nullptr)
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_RaspiCamera_Initialize = (PLibMCDriver_CameraDriver_RaspiCamera_InitializePtr) GetProcAddress(hLibrary, "libmcdriver_camera_driver_raspicamera_initialize");
		#else // _WIN32
		pWrapperTable->m_Driver_RaspiCamera_Initialize = (PLibMCDriver_CameraDriver_RaspiCamera_InitializePtr) dlsym(hLibrary, "libmcdriver_camera_driver_raspicamera_initialize");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_RaspiCamera_Initialize == nullptr)
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GetVersion = (PLibMCDriver_CameraGetVersionPtr) GetProcAddress(hLibrary, "libmcdriver_camera_getversion");
		#else // _WIN32
		pWrapperTable->m_GetVersion = (PLibMCDriver_CameraGetVersionPtr) dlsym(hLibrary, "libmcdriver_camera_getversion");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GetVersion == nullptr)
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GetLastError = (PLibMCDriver_CameraGetLastErrorPtr) GetProcAddress(hLibrary, "libmcdriver_camera_getlasterror");
		#else // _WIN32
		pWrapperTable->m_GetLastError = (PLibMCDriver_CameraGetLastErrorPtr) dlsym(hLibrary, "libmcdriver_camera_getlasterror");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GetLastError == nullptr)
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ReleaseInstance = (PLibMCDriver_CameraReleaseInstancePtr) GetProcAddress(hLibrary, "libmcdriver_camera_releaseinstance");
		#else // _WIN32
		pWrapperTable->m_ReleaseInstance = (PLibMCDriver_CameraReleaseInstancePtr) dlsym(hLibrary, "libmcdriver_camera_releaseinstance");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ReleaseInstance == nullptr)
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_AcquireInstance = (PLibMCDriver_CameraAcquireInstancePtr) GetProcAddress(hLibrary, "libmcdriver_camera_acquireinstance");
		#else // _WIN32
		pWrapperTable->m_AcquireInstance = (PLibMCDriver_CameraAcquireInstancePtr) dlsym(hLibrary, "libmcdriver_camera_acquireinstance");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_AcquireInstance == nullptr)
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_InjectComponent = (PLibMCDriver_CameraInjectComponentPtr) GetProcAddress(hLibrary, "libmcdriver_camera_injectcomponent");
		#else // _WIN32
		pWrapperTable->m_InjectComponent = (PLibMCDriver_CameraInjectComponentPtr) dlsym(hLibrary, "libmcdriver_camera_injectcomponent");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_InjectComponent == nullptr)
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GetSymbolLookupMethod = (PLibMCDriver_CameraGetSymbolLookupMethodPtr) GetProcAddress(hLibrary, "libmcdriver_camera_getsymbollookupmethod");
		#else // _WIN32
		pWrapperTable->m_GetSymbolLookupMethod = (PLibMCDriver_CameraGetSymbolLookupMethodPtr) dlsym(hLibrary, "libmcdriver_camera_getsymbollookupmethod");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GetSymbolLookupMethod == nullptr)
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_CreateDriver = (PLibMCDriver_CameraCreateDriverPtr) GetProcAddress(hLibrary, "libmcdriver_camera_createdriver");
		#else // _WIN32
		pWrapperTable->m_CreateDriver = (PLibMCDriver_CameraCreateDriverPtr) dlsym(hLibrary, "libmcdriver_camera_createdriver");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_CreateDriver == nullptr)
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		pWrapperTable->m_LibraryHandle = hLibrary;
		return LIBMCDRIVER_CAMERA_SUCCESS;
	}

	inline LibMCDriver_CameraResult CWrapper::loadWrapperTableFromSymbolLookupMethod(sLibMCDriver_CameraDynamicWrapperTable * pWrapperTable, void* pSymbolLookupMethod)
{
		if (pWrapperTable == nullptr)
			return LIBMCDRIVER_CAMERA_ERROR_INVALIDPARAM;
		if (pSymbolLookupMethod == nullptr)
			return LIBMCDRIVER_CAMERA_ERROR_INVALIDPARAM;
		
		typedef LibMCDriver_CameraResult(*SymbolLookupType)(const char*, void**);
		
		SymbolLookupType pLookup = (SymbolLookupType)pSymbolLookupMethod;
		
		LibMCDriver_CameraResult eLookupError = LIBMCDRIVER_CAMERA_SUCCESS;
		eLookupError = (*pLookup)("libmcdriver_camera_driver_getname", (void**)&(pWrapperTable->m_Driver_GetName));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_GetName == nullptr) )
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_camera_driver_gettype", (void**)&(pWrapperTable->m_Driver_GetType));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_GetType == nullptr) )
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_camera_driver_getversion", (void**)&(pWrapperTable->m_Driver_GetVersion));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_GetVersion == nullptr) )
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_camera_driver_getheaderinformation", (void**)&(pWrapperTable->m_Driver_GetHeaderInformation));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_GetHeaderInformation == nullptr) )
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_camera_driver_queryparameters", (void**)&(pWrapperTable->m_Driver_QueryParameters));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_QueryParameters == nullptr) )
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_camera_iterator_movenext", (void**)&(pWrapperTable->m_Iterator_MoveNext));
		if ( (eLookupError != 0) || (pWrapperTable->m_Iterator_MoveNext == nullptr) )
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_camera_iterator_moveprevious", (void**)&(pWrapperTable->m_Iterator_MovePrevious));
		if ( (eLookupError != 0) || (pWrapperTable->m_Iterator_MovePrevious == nullptr) )
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_camera_iterator_getcurrent", (void**)&(pWrapperTable->m_Iterator_GetCurrent));
		if ( (eLookupError != 0) || (pWrapperTable->m_Iterator_GetCurrent == nullptr) )
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_camera_iterator_clone", (void**)&(pWrapperTable->m_Iterator_Clone));
		if ( (eLookupError != 0) || (pWrapperTable->m_Iterator_Clone == nullptr) )
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_camera_iterator_count", (void**)&(pWrapperTable->m_Iterator_Count));
		if ( (eLookupError != 0) || (pWrapperTable->m_Iterator_Count == nullptr) )
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_camera_pngimage_getwidth", (void**)&(pWrapperTable->m_PNGImage_GetWidth));
		if ( (eLookupError != 0) || (pWrapperTable->m_PNGImage_GetWidth == nullptr) )
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_camera_pngimage_getheight", (void**)&(pWrapperTable->m_PNGImage_GetHeight));
		if ( (eLookupError != 0) || (pWrapperTable->m_PNGImage_GetHeight == nullptr) )
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_camera_pngimage_getpixelformat", (void**)&(pWrapperTable->m_PNGImage_GetPixelFormat));
		if ( (eLookupError != 0) || (pWrapperTable->m_PNGImage_GetPixelFormat == nullptr) )
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_camera_pngimage_getrawdata", (void**)&(pWrapperTable->m_PNGImage_GetRawData));
		if ( (eLookupError != 0) || (pWrapperTable->m_PNGImage_GetRawData == nullptr) )
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_camera_pngimage_savetofile", (void**)&(pWrapperTable->m_PNGImage_SaveToFile));
		if ( (eLookupError != 0) || (pWrapperTable->m_PNGImage_SaveToFile == nullptr) )
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_camera_driver_camera_capturepngimage", (void**)&(pWrapperTable->m_Driver_Camera_CapturePNGImage));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_Camera_CapturePNGImage == nullptr) )
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_camera_raspicameradevice_getdevicestring", (void**)&(pWrapperTable->m_RaspiCameraDevice_GetDeviceString));
		if ( (eLookupError != 0) || (pWrapperTable->m_RaspiCameraDevice_GetDeviceString == nullptr) )
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_camera_raspicameradeviceiterator_getcameradevice", (void**)&(pWrapperTable->m_RaspiCameraDeviceIterator_GetCameraDevice));
		if ( (eLookupError != 0) || (pWrapperTable->m_RaspiCameraDeviceIterator_GetCameraDevice == nullptr) )
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_camera_driver_raspicamera_querydevices", (void**)&(pWrapperTable->m_Driver_RaspiCamera_QueryDevices));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_RaspiCamera_QueryDevices == nullptr) )
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_camera_driver_raspicamera_initialize", (void**)&(pWrapperTable->m_Driver_RaspiCamera_Initialize));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_RaspiCamera_Initialize == nullptr) )
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_camera_getversion", (void**)&(pWrapperTable->m_GetVersion));
		if ( (eLookupError != 0) || (pWrapperTable->m_GetVersion == nullptr) )
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_camera_getlasterror", (void**)&(pWrapperTable->m_GetLastError));
		if ( (eLookupError != 0) || (pWrapperTable->m_GetLastError == nullptr) )
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_camera_releaseinstance", (void**)&(pWrapperTable->m_ReleaseInstance));
		if ( (eLookupError != 0) || (pWrapperTable->m_ReleaseInstance == nullptr) )
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_camera_acquireinstance", (void**)&(pWrapperTable->m_AcquireInstance));
		if ( (eLookupError != 0) || (pWrapperTable->m_AcquireInstance == nullptr) )
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_camera_injectcomponent", (void**)&(pWrapperTable->m_InjectComponent));
		if ( (eLookupError != 0) || (pWrapperTable->m_InjectComponent == nullptr) )
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_camera_getsymbollookupmethod", (void**)&(pWrapperTable->m_GetSymbolLookupMethod));
		if ( (eLookupError != 0) || (pWrapperTable->m_GetSymbolLookupMethod == nullptr) )
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_camera_createdriver", (void**)&(pWrapperTable->m_CreateDriver));
		if ( (eLookupError != 0) || (pWrapperTable->m_CreateDriver == nullptr) )
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		return LIBMCDRIVER_CAMERA_SUCCESS;
}

	
	
	/**
	 * Method definitions for class CBase
	 */
	
	/**
	 * Method definitions for class CDriver
	 */
	
	/**
	* CDriver::GetName - returns the name identifier of the driver
	* @return Name of the driver.
	*/
	std::string CDriver::GetName()
	{
		LibMCDriver_Camera_uint32 bytesNeededName = 0;
		LibMCDriver_Camera_uint32 bytesWrittenName = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetName(m_pHandle, 0, &bytesNeededName, nullptr));
		std::vector<char> bufferName(bytesNeededName);
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetName(m_pHandle, bytesNeededName, &bytesWrittenName, &bufferName[0]));
		
		return std::string(&bufferName[0]);
	}
	
	/**
	* CDriver::GetType - returns the type identifier of the driver
	* @return Type of the driver.
	*/
	std::string CDriver::GetType()
	{
		LibMCDriver_Camera_uint32 bytesNeededType = 0;
		LibMCDriver_Camera_uint32 bytesWrittenType = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetType(m_pHandle, 0, &bytesNeededType, nullptr));
		std::vector<char> bufferType(bytesNeededType);
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetType(m_pHandle, bytesNeededType, &bytesWrittenType, &bufferType[0]));
		
		return std::string(&bufferType[0]);
	}
	
	/**
	* CDriver::GetVersion - returns the version identifiers of the driver
	* @param[out] nMajor - Major version.
	* @param[out] nMinor - Minor version.
	* @param[out] nMicro - Micro version.
	* @param[out] sBuild - Build identifier.
	*/
	void CDriver::GetVersion(LibMCDriver_Camera_uint32 & nMajor, LibMCDriver_Camera_uint32 & nMinor, LibMCDriver_Camera_uint32 & nMicro, std::string & sBuild)
	{
		LibMCDriver_Camera_uint32 bytesNeededBuild = 0;
		LibMCDriver_Camera_uint32 bytesWrittenBuild = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetVersion(m_pHandle, &nMajor, &nMinor, &nMicro, 0, &bytesNeededBuild, nullptr));
		std::vector<char> bufferBuild(bytesNeededBuild);
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetVersion(m_pHandle, &nMajor, &nMinor, &nMicro, bytesNeededBuild, &bytesWrittenBuild, &bufferBuild[0]));
		sBuild = std::string(&bufferBuild[0]);
	}
	
	/**
	* CDriver::GetHeaderInformation - returns the header information
	* @param[out] sNameSpace - NameSpace of the driver.
	* @param[out] sBaseName - BaseName of the driver.
	*/
	void CDriver::GetHeaderInformation(std::string & sNameSpace, std::string & sBaseName)
	{
		LibMCDriver_Camera_uint32 bytesNeededNameSpace = 0;
		LibMCDriver_Camera_uint32 bytesWrittenNameSpace = 0;
		LibMCDriver_Camera_uint32 bytesNeededBaseName = 0;
		LibMCDriver_Camera_uint32 bytesWrittenBaseName = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetHeaderInformation(m_pHandle, 0, &bytesNeededNameSpace, nullptr, 0, &bytesNeededBaseName, nullptr));
		std::vector<char> bufferNameSpace(bytesNeededNameSpace);
		std::vector<char> bufferBaseName(bytesNeededBaseName);
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetHeaderInformation(m_pHandle, bytesNeededNameSpace, &bytesWrittenNameSpace, &bufferNameSpace[0], bytesNeededBaseName, &bytesWrittenBaseName, &bufferBaseName[0]));
		sNameSpace = std::string(&bufferNameSpace[0]);
		sBaseName = std::string(&bufferBaseName[0]);
	}
	
	/**
	* CDriver::QueryParameters - Stores the driver parameters in the driver environment.
	*/
	void CDriver::QueryParameters()
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_QueryParameters(m_pHandle));
	}
	
	/**
	 * Method definitions for class CIterator
	 */
	
	/**
	* CIterator::MoveNext - Iterates to the next resource in the list.
	* @return Iterates to the next resource in the list.
	*/
	bool CIterator::MoveNext()
	{
		bool resultHasNext = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Iterator_MoveNext(m_pHandle, &resultHasNext));
		
		return resultHasNext;
	}
	
	/**
	* CIterator::MovePrevious - Iterates to the previous resource in the list.
	* @return Iterates to the previous resource in the list.
	*/
	bool CIterator::MovePrevious()
	{
		bool resultHasPrevious = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Iterator_MovePrevious(m_pHandle, &resultHasPrevious));
		
		return resultHasPrevious;
	}
	
	/**
	* CIterator::GetCurrent - Returns the resource the iterator points at.
	* @return returns the resource instance.
	*/
	PBase CIterator::GetCurrent()
	{
		LibMCDriver_CameraHandle hCurrentInstance = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_Iterator_GetCurrent(m_pHandle, &hCurrentInstance));
		
		if (!hCurrentInstance) {
			CheckError(LIBMCDRIVER_CAMERA_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CBase>(m_pWrapper, hCurrentInstance);
	}
	
	/**
	* CIterator::Clone - Creates a new resource iterator with the same resource list.
	* @return returns the cloned Iterator instance
	*/
	PIterator CIterator::Clone()
	{
		LibMCDriver_CameraHandle hOutIterator = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_Iterator_Clone(m_pHandle, &hOutIterator));
		
		if (!hOutIterator) {
			CheckError(LIBMCDRIVER_CAMERA_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CIterator>(m_pWrapper, hOutIterator);
	}
	
	/**
	* CIterator::Count - Returns the number of resources the iterator captures.
	* @return returns the number of resources the iterator captures.
	*/
	LibMCDriver_Camera_uint64 CIterator::Count()
	{
		LibMCDriver_Camera_uint64 resultCount = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Iterator_Count(m_pHandle, &resultCount));
		
		return resultCount;
	}
	
	/**
	 * Method definitions for class CPNGImage
	 */
	
	/**
	* CPNGImage::GetWidth - Returns width of the image.
	* @return width of the image in pixels.
	*/
	LibMCDriver_Camera_uint64 CPNGImage::GetWidth()
	{
		LibMCDriver_Camera_uint64 resultWidth = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_PNGImage_GetWidth(m_pHandle, &resultWidth));
		
		return resultWidth;
	}
	
	/**
	* CPNGImage::GetHeight - Returns height of the image.
	* @return height of the image in pixels.
	*/
	LibMCDriver_Camera_uint64 CPNGImage::GetHeight()
	{
		LibMCDriver_Camera_uint64 resultHeight = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_PNGImage_GetHeight(m_pHandle, &resultHeight));
		
		return resultHeight;
	}
	
	/**
	* CPNGImage::GetPixelFormat - Returns pixel format of the image.
	* @return Pixel format of the image.
	*/
	eImagePixelFormat CPNGImage::GetPixelFormat()
	{
		eImagePixelFormat resultPixelformat = (eImagePixelFormat) 0;
		CheckError(m_pWrapper->m_WrapperTable.m_PNGImage_GetPixelFormat(m_pHandle, &resultPixelformat));
		
		return resultPixelformat;
	}
	
	/**
	* CPNGImage::GetRawData - Returns raw data of the image.
	* @param[out] PNGDataBuffer - Binary data of PNG image captured.
	*/
	void CPNGImage::GetRawData(std::vector<LibMCDriver_Camera_uint8> & PNGDataBuffer)
	{
		LibMCDriver_Camera_uint64 elementsNeededPNGData = 0;
		LibMCDriver_Camera_uint64 elementsWrittenPNGData = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_PNGImage_GetRawData(m_pHandle, 0, &elementsNeededPNGData, nullptr));
		PNGDataBuffer.resize((size_t) elementsNeededPNGData);
		CheckError(m_pWrapper->m_WrapperTable.m_PNGImage_GetRawData(m_pHandle, elementsNeededPNGData, &elementsWrittenPNGData, PNGDataBuffer.data()));
	}
	
	/**
	* CPNGImage::SaveToFile - Saves PNG Image on Disk.
	* @return Filename to save PNG to.
	*/
	std::string CPNGImage::SaveToFile()
	{
		LibMCDriver_Camera_uint32 bytesNeededFileName = 0;
		LibMCDriver_Camera_uint32 bytesWrittenFileName = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_PNGImage_SaveToFile(m_pHandle, 0, &bytesNeededFileName, nullptr));
		std::vector<char> bufferFileName(bytesNeededFileName);
		CheckError(m_pWrapper->m_WrapperTable.m_PNGImage_SaveToFile(m_pHandle, bytesNeededFileName, &bytesWrittenFileName, &bufferFileName[0]));
		
		return std::string(&bufferFileName[0]);
	}
	
	/**
	 * Method definitions for class CDriver_Camera
	 */
	
	/**
	* CDriver_Camera::CapturePNGImage - Captures an image from the camera and returns a PNG image.
	* @return Instance of the PNG Image.
	*/
	PPNGImage CDriver_Camera::CapturePNGImage()
	{
		LibMCDriver_CameraHandle hPNGImage = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_Camera_CapturePNGImage(m_pHandle, &hPNGImage));
		
		if (!hPNGImage) {
			CheckError(LIBMCDRIVER_CAMERA_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CPNGImage>(m_pWrapper, hPNGImage);
	}
	
	/**
	 * Method definitions for class CRaspiCameraDevice
	 */
	
	/**
	* CRaspiCameraDevice::GetDeviceString - Returns path to the camera device.
	* @return Path to camera device.
	*/
	std::string CRaspiCameraDevice::GetDeviceString()
	{
		LibMCDriver_Camera_uint32 bytesNeededDeviceString = 0;
		LibMCDriver_Camera_uint32 bytesWrittenDeviceString = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_RaspiCameraDevice_GetDeviceString(m_pHandle, 0, &bytesNeededDeviceString, nullptr));
		std::vector<char> bufferDeviceString(bytesNeededDeviceString);
		CheckError(m_pWrapper->m_WrapperTable.m_RaspiCameraDevice_GetDeviceString(m_pHandle, bytesNeededDeviceString, &bytesWrittenDeviceString, &bufferDeviceString[0]));
		
		return std::string(&bufferDeviceString[0]);
	}
	
	/**
	 * Method definitions for class CRaspiCameraDeviceIterator
	 */
	
	/**
	* CRaspiCameraDeviceIterator::GetCameraDevice - Returns the camera device the iterator points at.
	* @return returns the camera device instance.
	*/
	PRaspiCameraDevice CRaspiCameraDeviceIterator::GetCameraDevice()
	{
		LibMCDriver_CameraHandle hCurrentInstance = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_RaspiCameraDeviceIterator_GetCameraDevice(m_pHandle, &hCurrentInstance));
		
		if (!hCurrentInstance) {
			CheckError(LIBMCDRIVER_CAMERA_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CRaspiCameraDevice>(m_pWrapper, hCurrentInstance);
	}
	
	/**
	 * Method definitions for class CDriver_RaspiCamera
	 */
	
	/**
	* CDriver_RaspiCamera::QueryDevices - Looks for cameras on the Raspberry PI.
	* @return Iterator Instance through all found devices.
	*/
	PRaspiCameraDeviceIterator CDriver_RaspiCamera::QueryDevices()
	{
		LibMCDriver_CameraHandle hDeviceIterator = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_RaspiCamera_QueryDevices(m_pHandle, &hDeviceIterator));
		
		if (!hDeviceIterator) {
			CheckError(LIBMCDRIVER_CAMERA_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CRaspiCameraDeviceIterator>(m_pWrapper, hDeviceIterator);
	}
	
	/**
	* CDriver_RaspiCamera::Initialize - Initialize the camera on the Raspberry PI.
	* @param[in] sDeviceString - Path to camera device.
	* @param[in] nWidth - Width of Image in Pixels.
	* @param[in] nHeight - Height of Image in Pixels.
	* @param[in] ePixelformat - Pixel format of the image.
	*/
	void CDriver_RaspiCamera::Initialize(const std::string & sDeviceString, const LibMCDriver_Camera_uint32 nWidth, const LibMCDriver_Camera_uint32 nHeight, const eImagePixelFormat ePixelformat)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_RaspiCamera_Initialize(m_pHandle, sDeviceString.c_str(), nWidth, nHeight, ePixelformat));
	}

} // namespace LibMCDriver_Camera

#endif // __LIBMCDRIVER_CAMERA_CPPHEADER_DYNAMIC_CPP

