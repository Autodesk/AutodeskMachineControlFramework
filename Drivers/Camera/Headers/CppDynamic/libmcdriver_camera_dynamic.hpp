/*++

Copyright (C) 2024 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.8.0-develop.

Abstract: This is an autogenerated C++-Header file in order to allow an easy
 use of Generic Camera Driver for Windows or Linux devices

Interface version: 2.0.0

*/

#ifndef __LIBMCDRIVER_CAMERA_CPPHEADER_DYNAMIC_CPP
#define __LIBMCDRIVER_CAMERA_CPPHEADER_DYNAMIC_CPP

#include "libmcdriver_camera_types.hpp"
#include "libmcdriver_camera_dynamic.h"

#include "libmcenv_dynamic.hpp"

#ifdef _WIN32
#include <windows.h>
#else // _WIN32
#include <dlfcn.h>
#endif // _WIN32
#include <string>
#include <memory>
#include <vector>
#include <exception>

namespace LibMCDriver_Camera {

/*************************************************************************************************************************
 Forward Declaration of all classes
**************************************************************************************************************************/
class CWrapper;
class CBase;
class CDriver;
class CDeviceBase;
class CVideoDevice;
class CDeviceInfo;
class CDeviceList;
class CDriver_Camera;
class CDriver_Camera_Windows;

/*************************************************************************************************************************
 Declaration of deprecated class types
**************************************************************************************************************************/
typedef CWrapper CLibMCDriver_CameraWrapper;
typedef CBase CLibMCDriver_CameraBase;
typedef CDriver CLibMCDriver_CameraDriver;
typedef CDeviceBase CLibMCDriver_CameraDeviceBase;
typedef CVideoDevice CLibMCDriver_CameraVideoDevice;
typedef CDeviceInfo CLibMCDriver_CameraDeviceInfo;
typedef CDeviceList CLibMCDriver_CameraDeviceList;
typedef CDriver_Camera CLibMCDriver_CameraDriver_Camera;
typedef CDriver_Camera_Windows CLibMCDriver_CameraDriver_Camera_Windows;

/*************************************************************************************************************************
 Declaration of shared pointer types
**************************************************************************************************************************/
typedef std::shared_ptr<CWrapper> PWrapper;
typedef std::shared_ptr<CBase> PBase;
typedef std::shared_ptr<CDriver> PDriver;
typedef std::shared_ptr<CDeviceBase> PDeviceBase;
typedef std::shared_ptr<CVideoDevice> PVideoDevice;
typedef std::shared_ptr<CDeviceInfo> PDeviceInfo;
typedef std::shared_ptr<CDeviceList> PDeviceList;
typedef std::shared_ptr<CDriver_Camera> PDriver_Camera;
typedef std::shared_ptr<CDriver_Camera_Windows> PDriver_Camera_Windows;

/*************************************************************************************************************************
 Declaration of deprecated shared pointer types
**************************************************************************************************************************/
typedef PWrapper PLibMCDriver_CameraWrapper;
typedef PBase PLibMCDriver_CameraBase;
typedef PDriver PLibMCDriver_CameraDriver;
typedef PDeviceBase PLibMCDriver_CameraDeviceBase;
typedef PVideoDevice PLibMCDriver_CameraVideoDevice;
typedef PDeviceInfo PLibMCDriver_CameraDeviceInfo;
typedef PDeviceList PLibMCDriver_CameraDeviceList;
typedef PDriver_Camera PLibMCDriver_CameraDriver_Camera;
typedef PDriver_Camera_Windows PLibMCDriver_CameraDriver_Camera_Windows;


/*************************************************************************************************************************
 classParam Definition
**************************************************************************************************************************/

template<class T> class classParam {
private:
	const T* m_ptr;

public:
	classParam(const T* ptr)
		: m_ptr (ptr)
	{
	}

	classParam(std::shared_ptr <T> sharedPtr)
		: m_ptr (sharedPtr.get())
	{
	}

	LibMCDriver_CameraHandle GetHandle()
	{
		if (m_ptr != nullptr)
			return m_ptr->handle();
		return nullptr;
	}
};

/*************************************************************************************************************************
 Class ELibMCDriver_CameraException 
**************************************************************************************************************************/
class ELibMCDriver_CameraException : public std::exception {
protected:
	/**
	* Error code for the Exception.
	*/
	LibMCDriver_CameraResult m_errorCode;
	/**
	* Error message for the Exception.
	*/
	std::string m_errorMessage;
	std::string m_originalErrorMessage;

public:
	/**
	* Exception Constructor.
	*/
	ELibMCDriver_CameraException(LibMCDriver_CameraResult errorCode, const std::string & sErrorMessage)
		: m_errorCode(errorCode), m_originalErrorMessage(sErrorMessage)
	{
		m_errorMessage = buildErrorMessage();
	}

	/**
	* Returns error code
	*/
	LibMCDriver_CameraResult getErrorCode() const noexcept
	{
		return m_errorCode;
	}

	/**
	* Returns error message
	*/
	const char* what() const noexcept
	{
		return m_errorMessage.c_str();
	}

	const char* getErrorMessage() const noexcept
	{
		return m_originalErrorMessage.c_str();
	}

	const char* getErrorName() const noexcept
	{
		switch(getErrorCode()) {
			case LIBMCDRIVER_CAMERA_SUCCESS: return "SUCCESS";
			case LIBMCDRIVER_CAMERA_ERROR_NOTIMPLEMENTED: return "NOTIMPLEMENTED";
			case LIBMCDRIVER_CAMERA_ERROR_INVALIDPARAM: return "INVALIDPARAM";
			case LIBMCDRIVER_CAMERA_ERROR_INVALIDCAST: return "INVALIDCAST";
			case LIBMCDRIVER_CAMERA_ERROR_BUFFERTOOSMALL: return "BUFFERTOOSMALL";
			case LIBMCDRIVER_CAMERA_ERROR_GENERICEXCEPTION: return "GENERICEXCEPTION";
			case LIBMCDRIVER_CAMERA_ERROR_COULDNOTLOADLIBRARY: return "COULDNOTLOADLIBRARY";
			case LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT: return "COULDNOTFINDLIBRARYEXPORT";
			case LIBMCDRIVER_CAMERA_ERROR_INCOMPATIBLEBINARYVERSION: return "INCOMPATIBLEBINARYVERSION";
			case LIBMCDRIVER_CAMERA_ERROR_DRIVERERROR: return "DRIVERERROR";
			case LIBMCDRIVER_CAMERA_ERROR_DEVICENOTSUPPORTEDONPLATFORM: return "DEVICENOTSUPPORTEDONPLATFORM";
			case LIBMCDRIVER_CAMERA_ERROR_INVALIDDEVICEINDEX: return "INVALIDDEVICEINDEX";
			case LIBMCDRIVER_CAMERA_ERROR_CAMERADEVICENOTFOUND: return "CAMERADEVICENOTFOUND";
			case LIBMCDRIVER_CAMERA_ERROR_INVALIDDRIVERTYPE: return "INVALIDDRIVERTYPE";
			case LIBMCDRIVER_CAMERA_ERROR_COULDNOTINITIALIZEWMF: return "COULDNOTINITIALIZEWMF";
			case LIBMCDRIVER_CAMERA_ERROR_COULDNOTFILTERFORVIDEODEVICES: return "COULDNOTFILTERFORVIDEODEVICES";
			case LIBMCDRIVER_CAMERA_ERROR_COULDNOTENUMERATEDEVICESOURCES: return "COULDNOTENUMERATEDEVICESOURCES";
			case LIBMCDRIVER_CAMERA_ERROR_COULDNOTCREATEWMFATTRIBUTES: return "COULDNOTCREATEWMFATTRIBUTES";
			case LIBMCDRIVER_CAMERA_ERROR_WIDECHARTOUTF8CONVERSIONFAILED: return "WIDECHARTOUTF8CONVERSIONFAILED";
			case LIBMCDRIVER_CAMERA_ERROR_CAMERADEVICELISTOVERRUN: return "CAMERADEVICELISTOVERRUN";
			case LIBMCDRIVER_CAMERA_ERROR_COULDNOTOPENVIDEODEVICE: return "COULDNOTOPENVIDEODEVICE";
			case LIBMCDRIVER_CAMERA_ERROR_INVALIDCAMERAIDENTIFIERLENGTH: return "INVALIDCAMERAIDENTIFIERLENGTH";
			case LIBMCDRIVER_CAMERA_ERROR_INVALIDCAMERAIDENTIFIER: return "INVALIDCAMERAIDENTIFIER";
			case LIBMCDRIVER_CAMERA_ERROR_CAMERAIDENTIFIERALREADYREGISTERED: return "CAMERAIDENTIFIERALREADYREGISTERED";
			case LIBMCDRIVER_CAMERA_ERROR_COULDNOTCREATEMEDIATYPE: return "COULDNOTCREATEMEDIATYPE";
			case LIBMCDRIVER_CAMERA_ERROR_COULDNOTSETMEDIATYPETOVIDEO: return "COULDNOTSETMEDIATYPETOVIDEO";
			case LIBMCDRIVER_CAMERA_ERROR_COULDNOTSETMEDIATYPEFORMAT: return "COULDNOTSETMEDIATYPEFORMAT";
			case LIBMCDRIVER_CAMERA_ERROR_COULDNOTSETMEDIARESOLUTION: return "COULDNOTSETMEDIARESOLUTION";
			case LIBMCDRIVER_CAMERA_ERROR_COULDNOTSETMEDIAFRAMERATE: return "COULDNOTSETMEDIAFRAMERATE";
			case LIBMCDRIVER_CAMERA_ERROR_COULDNOTSETPIXELASPECTRATIO: return "COULDNOTSETPIXELASPECTRATIO";
			case LIBMCDRIVER_CAMERA_ERROR_COULDNOTACTIVATEDEVICE: return "COULDNOTACTIVATEDEVICE";
			case LIBMCDRIVER_CAMERA_ERROR_COULDNOTCREATEREADER: return "COULDNOTCREATEREADER";
			case LIBMCDRIVER_CAMERA_ERROR_COULDNOTSETMEDIATYPE: return "COULDNOTSETMEDIATYPE";
			case LIBMCDRIVER_CAMERA_ERROR_NOMEDIASOURCEREADERAVAILABLE: return "NOMEDIASOURCEREADERAVAILABLE";
			case LIBMCDRIVER_CAMERA_ERROR_COULDNOTGETMEDIATYPEFRAMERATE: return "COULDNOTGETMEDIATYPEFRAMERATE";
			case LIBMCDRIVER_CAMERA_ERROR_COULDNOTGETMEDIATYPESIZE: return "COULDNOTGETMEDIATYPESIZE";
			case LIBMCDRIVER_CAMERA_ERROR_INVALIDCAMERARESOLUTION: return "INVALIDCAMERARESOLUTION";
			case LIBMCDRIVER_CAMERA_ERROR_INVALIDCAMERAFRAMERATE: return "INVALIDCAMERAFRAMERATE";
			case LIBMCDRIVER_CAMERA_ERROR_INVALIDMEDIATYPEFRAMERATE: return "INVALIDMEDIATYPEFRAMERATE";
			case LIBMCDRIVER_CAMERA_ERROR_INVALIDRESOLUTIONINDEX: return "INVALIDRESOLUTIONINDEX";
		}
		return "UNKNOWN";
	}

	const char* getErrorDescription() const noexcept
	{
		switch(getErrorCode()) {
			case LIBMCDRIVER_CAMERA_SUCCESS: return "success";
			case LIBMCDRIVER_CAMERA_ERROR_NOTIMPLEMENTED: return "functionality not implemented";
			case LIBMCDRIVER_CAMERA_ERROR_INVALIDPARAM: return "an invalid parameter was passed";
			case LIBMCDRIVER_CAMERA_ERROR_INVALIDCAST: return "a type cast failed";
			case LIBMCDRIVER_CAMERA_ERROR_BUFFERTOOSMALL: return "a provided buffer is too small";
			case LIBMCDRIVER_CAMERA_ERROR_GENERICEXCEPTION: return "a generic exception occurred";
			case LIBMCDRIVER_CAMERA_ERROR_COULDNOTLOADLIBRARY: return "the library could not be loaded";
			case LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT: return "a required exported symbol could not be found in the library";
			case LIBMCDRIVER_CAMERA_ERROR_INCOMPATIBLEBINARYVERSION: return "the version of the binary interface does not match the bindings interface";
			case LIBMCDRIVER_CAMERA_ERROR_DRIVERERROR: return "a driver error occured";
			case LIBMCDRIVER_CAMERA_ERROR_DEVICENOTSUPPORTEDONPLATFORM: return "device not supported on platform";
			case LIBMCDRIVER_CAMERA_ERROR_INVALIDDEVICEINDEX: return "device not supported on platform";
			case LIBMCDRIVER_CAMERA_ERROR_CAMERADEVICENOTFOUND: return "camera device not found";
			case LIBMCDRIVER_CAMERA_ERROR_INVALIDDRIVERTYPE: return "invalid driver type";
			case LIBMCDRIVER_CAMERA_ERROR_COULDNOTINITIALIZEWMF: return "could not initialize WMF";
			case LIBMCDRIVER_CAMERA_ERROR_COULDNOTFILTERFORVIDEODEVICES: return "could not filter for video devices";
			case LIBMCDRIVER_CAMERA_ERROR_COULDNOTENUMERATEDEVICESOURCES: return "could not enumerate device sources";
			case LIBMCDRIVER_CAMERA_ERROR_COULDNOTCREATEWMFATTRIBUTES: return "could not create Windows Media Foundation Attributes";
			case LIBMCDRIVER_CAMERA_ERROR_WIDECHARTOUTF8CONVERSIONFAILED: return "Widechar to UTF8 conversion failed";
			case LIBMCDRIVER_CAMERA_ERROR_CAMERADEVICELISTOVERRUN: return "Camera device list overrun";
			case LIBMCDRIVER_CAMERA_ERROR_COULDNOTOPENVIDEODEVICE: return "Could not open video device";
			case LIBMCDRIVER_CAMERA_ERROR_INVALIDCAMERAIDENTIFIERLENGTH: return "Invalid camera identifier length";
			case LIBMCDRIVER_CAMERA_ERROR_INVALIDCAMERAIDENTIFIER: return "Invalid camera identifier";
			case LIBMCDRIVER_CAMERA_ERROR_CAMERAIDENTIFIERALREADYREGISTERED: return "Camera identifier already registered";
			case LIBMCDRIVER_CAMERA_ERROR_COULDNOTCREATEMEDIATYPE: return "Could not create media type";
			case LIBMCDRIVER_CAMERA_ERROR_COULDNOTSETMEDIATYPETOVIDEO: return "Could not set media type to video";
			case LIBMCDRIVER_CAMERA_ERROR_COULDNOTSETMEDIATYPEFORMAT: return "Could not set media type format";
			case LIBMCDRIVER_CAMERA_ERROR_COULDNOTSETMEDIARESOLUTION: return "Could not set media resolution";
			case LIBMCDRIVER_CAMERA_ERROR_COULDNOTSETMEDIAFRAMERATE: return "Could not set media framerate";
			case LIBMCDRIVER_CAMERA_ERROR_COULDNOTSETPIXELASPECTRATIO: return "Could not set pixel aspect ratio";
			case LIBMCDRIVER_CAMERA_ERROR_COULDNOTACTIVATEDEVICE: return "Could not activate device";
			case LIBMCDRIVER_CAMERA_ERROR_COULDNOTCREATEREADER: return "Could not create reader";
			case LIBMCDRIVER_CAMERA_ERROR_COULDNOTSETMEDIATYPE: return "Could not set media type";
			case LIBMCDRIVER_CAMERA_ERROR_NOMEDIASOURCEREADERAVAILABLE: return "No media source reader available";
			case LIBMCDRIVER_CAMERA_ERROR_COULDNOTGETMEDIATYPEFRAMERATE: return "Could not get media type framerate";
			case LIBMCDRIVER_CAMERA_ERROR_COULDNOTGETMEDIATYPESIZE: return "Could not get media type size";
			case LIBMCDRIVER_CAMERA_ERROR_INVALIDCAMERARESOLUTION: return "Invalid camera resolution";
			case LIBMCDRIVER_CAMERA_ERROR_INVALIDCAMERAFRAMERATE: return "Invalid camera framerate";
			case LIBMCDRIVER_CAMERA_ERROR_INVALIDMEDIATYPEFRAMERATE: return "Invalid media type framerate";
			case LIBMCDRIVER_CAMERA_ERROR_INVALIDRESOLUTIONINDEX: return "Invalid resolution index";
		}
		return "unknown error";
	}

private:

	std::string buildErrorMessage() const noexcept
	{
		std::string msg = m_originalErrorMessage;
		if (msg.empty()) {
			msg = getErrorDescription();
		}
		return std::string("Error: ") + getErrorName() + ": " + msg;
	}
};

/*************************************************************************************************************************
 Class CInputVector
**************************************************************************************************************************/
template <typename T>
class CInputVector {
private:
	
	const T* m_data;
	size_t m_size;
	
public:
	
	CInputVector(const std::vector<T>& vec)
		: m_data( vec.data() ), m_size( vec.size() )
	{
	}
	
	CInputVector(const T* in_data, size_t in_size)
		: m_data( in_data ), m_size(in_size )
	{
	}
	
	const T* data() const
	{
		return m_data;
	}
	
	size_t size() const
	{
		return m_size;
	}
	
};

// declare deprecated class name
template<typename T>
using CLibMCDriver_CameraInputVector = CInputVector<T>;

/*************************************************************************************************************************
 Class CWrapper 
**************************************************************************************************************************/
class CWrapper {
public:
	
	explicit CWrapper(void* pSymbolLookupMethod)
	{
		CheckError(nullptr, initWrapperTable(&m_WrapperTable));
		CheckError(nullptr, loadWrapperTableFromSymbolLookupMethod(&m_WrapperTable, pSymbolLookupMethod));
		
		CheckError(nullptr, checkBinaryVersion());
	}
	
	explicit CWrapper(const std::string &sFileName)
	{
		CheckError(nullptr, initWrapperTable(&m_WrapperTable));
		CheckError(nullptr, loadWrapperTable(&m_WrapperTable, sFileName.c_str()));
		
		CheckError(nullptr, checkBinaryVersion());
	}
	
	static PWrapper loadLibrary(const std::string &sFileName)
	{
		return std::make_shared<CWrapper>(sFileName);
	}
	
	static PWrapper loadLibraryFromSymbolLookupMethod(void* pSymbolLookupMethod)
	{
		return std::make_shared<CWrapper>(pSymbolLookupMethod);
	}
	
	~CWrapper()
	{
		releaseWrapperTable(&m_WrapperTable);
	}
	
	inline void CheckError(CBase * pBaseClass, LibMCDriver_CameraResult nResult);

	inline void GetVersion(LibMCDriver_Camera_uint32 & nMajor, LibMCDriver_Camera_uint32 & nMinor, LibMCDriver_Camera_uint32 & nMicro);
	inline bool GetLastError(classParam<CBase> pInstance, std::string & sErrorMessage);
	inline void ReleaseInstance(classParam<CBase> pInstance);
	inline void AcquireInstance(classParam<CBase> pInstance);
	inline void InjectComponent(const std::string & sNameSpace, const LibMCDriver_Camera_pvoid pSymbolAddressMethod);
	inline LibMCDriver_Camera_pvoid GetSymbolLookupMethod();
	inline PDriver CreateDriver(const std::string & sName, const std::string & sType, classParam<LibMCEnv::CDriverEnvironment> pDriverEnvironment);

private:
	sLibMCDriver_CameraDynamicWrapperTable m_WrapperTable;
	// Injected Components
	LibMCEnv::PWrapper m_pLibMCEnvWrapper;

	
	LibMCDriver_CameraResult checkBinaryVersion()
	{
		LibMCDriver_Camera_uint32 nMajor, nMinor, nMicro;
		GetVersion(nMajor, nMinor, nMicro);
		if (nMajor != LIBMCDRIVER_CAMERA_VERSION_MAJOR) {
			return LIBMCDRIVER_CAMERA_ERROR_INCOMPATIBLEBINARYVERSION;
		}
		return LIBMCDRIVER_CAMERA_SUCCESS;
	}
	LibMCDriver_CameraResult initWrapperTable(sLibMCDriver_CameraDynamicWrapperTable * pWrapperTable);
	LibMCDriver_CameraResult releaseWrapperTable(sLibMCDriver_CameraDynamicWrapperTable * pWrapperTable);
	LibMCDriver_CameraResult loadWrapperTable(sLibMCDriver_CameraDynamicWrapperTable * pWrapperTable, const char * pLibraryFileName);
	LibMCDriver_CameraResult loadWrapperTableFromSymbolLookupMethod(sLibMCDriver_CameraDynamicWrapperTable * pWrapperTable, void* pSymbolLookupMethod);

	friend class CBase;
	friend class CDriver;
	friend class CDeviceBase;
	friend class CVideoDevice;
	friend class CDeviceInfo;
	friend class CDeviceList;
	friend class CDriver_Camera;
	friend class CDriver_Camera_Windows;

};

	
/*************************************************************************************************************************
 Class CBase 
**************************************************************************************************************************/
class CBase {
public:
	
protected:
	/* Wrapper Object that created the class. */
	CWrapper * m_pWrapper;
	/* Handle to Instance in library*/
	LibMCDriver_CameraHandle m_pHandle;

	/* Checks for an Error code and raises Exceptions */
	void CheckError(LibMCDriver_CameraResult nResult)
	{
		if (m_pWrapper != nullptr)
			m_pWrapper->CheckError(this, nResult);
	}
public:
	/**
	* CBase::CBase - Constructor for Base class.
	*/
	CBase(CWrapper * pWrapper, LibMCDriver_CameraHandle pHandle)
		: m_pWrapper(pWrapper), m_pHandle(pHandle)
	{
	}

	/**
	* CBase::~CBase - Destructor for Base class.
	*/
	virtual ~CBase()
	{
		if (m_pWrapper != nullptr)
			m_pWrapper->ReleaseInstance(this);
		m_pWrapper = nullptr;
	}

	/**
	* CBase::handle - Returns handle to instance.
	*/
	LibMCDriver_CameraHandle handle() const
	{
		return m_pHandle;
	}

	/**
	* CBase::wrapper - Returns wrapper instance.
	*/
	CWrapper * wrapper() const
	{
		return m_pWrapper;
	}
	
	friend class CWrapper;
};
	
/*************************************************************************************************************************
 Class CDriver 
**************************************************************************************************************************/
class CDriver : public CBase {
public:
	
	/**
	* CDriver::CDriver - Constructor for Driver class.
	*/
	CDriver(CWrapper* pWrapper, LibMCDriver_CameraHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline void Configure(const std::string & sConfigurationString);
	inline std::string GetName();
	inline std::string GetType();
	inline void GetVersion(LibMCDriver_Camera_uint32 & nMajor, LibMCDriver_Camera_uint32 & nMinor, LibMCDriver_Camera_uint32 & nMicro, std::string & sBuild);
	inline void QueryParameters();
	inline void QueryParametersEx(classParam<LibMCEnv::CDriverStatusUpdateSession> pDriverUpdateInstance);
};
	
/*************************************************************************************************************************
 Class CDeviceBase 
**************************************************************************************************************************/
class CDeviceBase : public CBase {
public:
	
	/**
	* CDeviceBase::CDeviceBase - Constructor for DeviceBase class.
	*/
	CDeviceBase(CWrapper* pWrapper, LibMCDriver_CameraHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline std::string GetFriendlyName();
	inline std::string GetOperatingSystemName();
	inline bool IsVideoDevice();
};
	
/*************************************************************************************************************************
 Class CVideoDevice 
**************************************************************************************************************************/
class CVideoDevice : public CDeviceBase {
public:
	
	/**
	* CVideoDevice::CVideoDevice - Constructor for VideoDevice class.
	*/
	CVideoDevice(CWrapper* pWrapper, LibMCDriver_CameraHandle pHandle)
		: CDeviceBase(pWrapper, pHandle)
	{
	}
	
	inline std::string GetIdentifier();
	inline LibMCDriver_Camera_uint32 GetSupportedResolutionCount();
	inline void GetSupportedResolution(const LibMCDriver_Camera_uint32 nIndex, LibMCDriver_Camera_uint32 & nWidth, LibMCDriver_Camera_uint32 & nHeight, LibMCDriver_Camera_uint32 & nFramerate);
	inline void GetCurrentResolution(LibMCDriver_Camera_uint32 & nWidth, LibMCDriver_Camera_uint32 & nHeight, LibMCDriver_Camera_uint32 & nFramerate);
	inline void SetResolution(const LibMCDriver_Camera_uint32 nWidth, const LibMCDriver_Camera_uint32 nHeight, const LibMCDriver_Camera_uint32 nFramerate);
	inline void CaptureRawImage(classParam<LibMCEnv::CImageData> pImageData);
	inline void StartStreamCapture(classParam<LibMCEnv::CVideoStream> pStreamInstance);
	inline void StopStreamCapture();
	inline bool StreamCaptureIsActive();
	inline void GetStreamCaptureStatistics(LibMCDriver_Camera_double & dDesiredFramerate, LibMCDriver_Camera_double & dMinFramerate, LibMCDriver_Camera_double & dMaxFramerate, LibMCDriver_Camera_double & dMeanFramerate, LibMCDriver_Camera_double & dStdDevFramerate);
};
	
/*************************************************************************************************************************
 Class CDeviceInfo 
**************************************************************************************************************************/
class CDeviceInfo : public CDeviceBase {
public:
	
	/**
	* CDeviceInfo::CDeviceInfo - Constructor for DeviceInfo class.
	*/
	CDeviceInfo(CWrapper* pWrapper, LibMCDriver_CameraHandle pHandle)
		: CDeviceBase(pWrapper, pHandle)
	{
	}
	
};
	
/*************************************************************************************************************************
 Class CDeviceList 
**************************************************************************************************************************/
class CDeviceList : public CBase {
public:
	
	/**
	* CDeviceList::CDeviceList - Constructor for DeviceList class.
	*/
	CDeviceList(CWrapper* pWrapper, LibMCDriver_CameraHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline LibMCDriver_Camera_uint32 GetCount();
	inline PDeviceInfo GetDeviceInfo(const LibMCDriver_Camera_uint32 nIndex);
	inline PDeviceInfo FindDeviceInfoByOperatingSystemName(const std::string & sOperatingSystemName, const bool bMustExist);
};
	
/*************************************************************************************************************************
 Class CDriver_Camera 
**************************************************************************************************************************/
class CDriver_Camera : public CDriver {
public:
	
	/**
	* CDriver_Camera::CDriver_Camera - Constructor for Driver_Camera class.
	*/
	CDriver_Camera(CWrapper* pWrapper, LibMCDriver_CameraHandle pHandle)
		: CDriver(pWrapper, pHandle)
	{
	}
	
	inline PDeviceList EnumerateDevices();
	inline PVideoDevice OpenVideoDevice(const std::string & sIdentifier, classParam<CDeviceInfo> pVideoDeviceInfo);
	inline PVideoDevice FindDeviceByIdentifier(const std::string & sIdentifier, const bool bMustExist);
	inline PVideoDevice FindDeviceByOperatingSystemName(const std::string & sOperatingSystemName, const bool bMustExist);
};
	
/*************************************************************************************************************************
 Class CDriver_Camera_Windows 
**************************************************************************************************************************/
class CDriver_Camera_Windows : public CDriver_Camera {
public:
	
	/**
	* CDriver_Camera_Windows::CDriver_Camera_Windows - Constructor for Driver_Camera_Windows class.
	*/
	CDriver_Camera_Windows(CWrapper* pWrapper, LibMCDriver_CameraHandle pHandle)
		: CDriver_Camera(pWrapper, pHandle)
	{
	}
	
};
	
	/**
	* CWrapper::GetVersion - retrieves the binary version of this library.
	* @param[out] nMajor - returns the major version of this library
	* @param[out] nMinor - returns the minor version of this library
	* @param[out] nMicro - returns the micro version of this library
	*/
	inline void CWrapper::GetVersion(LibMCDriver_Camera_uint32 & nMajor, LibMCDriver_Camera_uint32 & nMinor, LibMCDriver_Camera_uint32 & nMicro)
	{
		CheckError(nullptr,m_WrapperTable.m_GetVersion(&nMajor, &nMinor, &nMicro));
	}
	
	/**
	* CWrapper::GetLastError - Returns the last error recorded on this object
	* @param[in] pInstance - Instance Handle
	* @param[out] sErrorMessage - Message of the last error
	* @return Is there a last error to query
	*/
	inline bool CWrapper::GetLastError(classParam<CBase> pInstance, std::string & sErrorMessage)
	{
		LibMCDriver_CameraHandle hInstance = pInstance.GetHandle();
		LibMCDriver_Camera_uint32 bytesNeededErrorMessage = 0;
		LibMCDriver_Camera_uint32 bytesWrittenErrorMessage = 0;
		bool resultHasError = 0;
		CheckError(nullptr,m_WrapperTable.m_GetLastError(hInstance, 0, &bytesNeededErrorMessage, nullptr, &resultHasError));
		std::vector<char> bufferErrorMessage(bytesNeededErrorMessage);
		CheckError(nullptr,m_WrapperTable.m_GetLastError(hInstance, bytesNeededErrorMessage, &bytesWrittenErrorMessage, &bufferErrorMessage[0], &resultHasError));
		sErrorMessage = std::string(&bufferErrorMessage[0]);
		
		return resultHasError;
	}
	
	/**
	* CWrapper::ReleaseInstance - Releases shared ownership of an Instance
	* @param[in] pInstance - Instance Handle
	*/
	inline void CWrapper::ReleaseInstance(classParam<CBase> pInstance)
	{
		LibMCDriver_CameraHandle hInstance = pInstance.GetHandle();
		CheckError(nullptr,m_WrapperTable.m_ReleaseInstance(hInstance));
	}
	
	/**
	* CWrapper::AcquireInstance - Acquires shared ownership of an Instance
	* @param[in] pInstance - Instance Handle
	*/
	inline void CWrapper::AcquireInstance(classParam<CBase> pInstance)
	{
		LibMCDriver_CameraHandle hInstance = pInstance.GetHandle();
		CheckError(nullptr,m_WrapperTable.m_AcquireInstance(hInstance));
	}
	
	/**
	* CWrapper::InjectComponent - Injects an imported component for usage within this component
	* @param[in] sNameSpace - NameSpace of the injected component
	* @param[in] pSymbolAddressMethod - Address of the SymbolAddressMethod of the injected component
	*/
	inline void CWrapper::InjectComponent(const std::string & sNameSpace, const LibMCDriver_Camera_pvoid pSymbolAddressMethod)
	{
		CheckError(nullptr,m_WrapperTable.m_InjectComponent(sNameSpace.c_str(), pSymbolAddressMethod));
		
		bool bNameSpaceFound = false;
		if (sNameSpace == "LibMCEnv") {
			if (m_pLibMCEnvWrapper != nullptr) {
				throw ELibMCDriver_CameraException(LIBMCDRIVER_CAMERA_ERROR_COULDNOTLOADLIBRARY, "Library with namespace " + sNameSpace + " is already registered.");
			}
			m_pLibMCEnvWrapper = LibMCEnv::CWrapper::loadLibraryFromSymbolLookupMethod(pSymbolAddressMethod);
			bNameSpaceFound = true;
		}
		if (!bNameSpaceFound)
			throw ELibMCDriver_CameraException(LIBMCDRIVER_CAMERA_ERROR_COULDNOTLOADLIBRARY, "Unknown namespace " + sNameSpace);
	}
	
	/**
	* CWrapper::GetSymbolLookupMethod - Returns the address of the SymbolLookupMethod
	* @return Address of the SymbolAddressMethod
	*/
	inline LibMCDriver_Camera_pvoid CWrapper::GetSymbolLookupMethod()
	{
		LibMCDriver_Camera_pvoid resultSymbolLookupMethod = 0;
		CheckError(nullptr,m_WrapperTable.m_GetSymbolLookupMethod(&resultSymbolLookupMethod));
		
		return resultSymbolLookupMethod;
	}
	
	/**
	* CWrapper::CreateDriver - Creates a driver instance with a specific name.
	* @param[in] sName - Name of driver to be created.
	* @param[in] sType - Type of driver to be created.
	* @param[in] pDriverEnvironment - Environment of this driver.
	* @return New Driver instance
	*/
	inline PDriver CWrapper::CreateDriver(const std::string & sName, const std::string & sType, classParam<LibMCEnv::CDriverEnvironment> pDriverEnvironment)
	{
		LibMCEnvHandle hDriverEnvironment = pDriverEnvironment.GetHandle();
		LibMCDriver_CameraHandle hInstance = nullptr;
		CheckError(nullptr,m_WrapperTable.m_CreateDriver(sName.c_str(), sType.c_str(), hDriverEnvironment, &hInstance));
		
		if (hInstance) {
			return std::make_shared<CDriver>(this, hInstance);
		} else {
			return nullptr;
		}
	}
	
	inline void CWrapper::CheckError(CBase * pBaseClass, LibMCDriver_CameraResult nResult)
	{
		if (nResult != 0) {
			std::string sErrorMessage;
			if (pBaseClass != nullptr) {
				GetLastError(pBaseClass, sErrorMessage);
			}
			throw ELibMCDriver_CameraException(nResult, sErrorMessage);
		}
	}
	

	inline LibMCDriver_CameraResult CWrapper::initWrapperTable(sLibMCDriver_CameraDynamicWrapperTable * pWrapperTable)
	{
		if (pWrapperTable == nullptr)
			return LIBMCDRIVER_CAMERA_ERROR_INVALIDPARAM;
		
		pWrapperTable->m_LibraryHandle = nullptr;
		pWrapperTable->m_Driver_Configure = nullptr;
		pWrapperTable->m_Driver_GetName = nullptr;
		pWrapperTable->m_Driver_GetType = nullptr;
		pWrapperTable->m_Driver_GetVersion = nullptr;
		pWrapperTable->m_Driver_QueryParameters = nullptr;
		pWrapperTable->m_Driver_QueryParametersEx = nullptr;
		pWrapperTable->m_DeviceBase_GetFriendlyName = nullptr;
		pWrapperTable->m_DeviceBase_GetOperatingSystemName = nullptr;
		pWrapperTable->m_DeviceBase_IsVideoDevice = nullptr;
		pWrapperTable->m_VideoDevice_GetIdentifier = nullptr;
		pWrapperTable->m_VideoDevice_GetSupportedResolutionCount = nullptr;
		pWrapperTable->m_VideoDevice_GetSupportedResolution = nullptr;
		pWrapperTable->m_VideoDevice_GetCurrentResolution = nullptr;
		pWrapperTable->m_VideoDevice_SetResolution = nullptr;
		pWrapperTable->m_VideoDevice_CaptureRawImage = nullptr;
		pWrapperTable->m_VideoDevice_StartStreamCapture = nullptr;
		pWrapperTable->m_VideoDevice_StopStreamCapture = nullptr;
		pWrapperTable->m_VideoDevice_StreamCaptureIsActive = nullptr;
		pWrapperTable->m_VideoDevice_GetStreamCaptureStatistics = nullptr;
		pWrapperTable->m_DeviceList_GetCount = nullptr;
		pWrapperTable->m_DeviceList_GetDeviceInfo = nullptr;
		pWrapperTable->m_DeviceList_FindDeviceInfoByOperatingSystemName = nullptr;
		pWrapperTable->m_Driver_Camera_EnumerateDevices = nullptr;
		pWrapperTable->m_Driver_Camera_OpenVideoDevice = nullptr;
		pWrapperTable->m_Driver_Camera_FindDeviceByIdentifier = nullptr;
		pWrapperTable->m_Driver_Camera_FindDeviceByOperatingSystemName = nullptr;
		pWrapperTable->m_GetVersion = nullptr;
		pWrapperTable->m_GetLastError = nullptr;
		pWrapperTable->m_ReleaseInstance = nullptr;
		pWrapperTable->m_AcquireInstance = nullptr;
		pWrapperTable->m_InjectComponent = nullptr;
		pWrapperTable->m_GetSymbolLookupMethod = nullptr;
		pWrapperTable->m_CreateDriver = nullptr;
		
		return LIBMCDRIVER_CAMERA_SUCCESS;
	}

	inline LibMCDriver_CameraResult CWrapper::releaseWrapperTable(sLibMCDriver_CameraDynamicWrapperTable * pWrapperTable)
	{
		if (pWrapperTable == nullptr)
			return LIBMCDRIVER_CAMERA_ERROR_INVALIDPARAM;
		
		if (pWrapperTable->m_LibraryHandle != nullptr) {
		#ifdef _WIN32
			HMODULE hModule = (HMODULE) pWrapperTable->m_LibraryHandle;
			FreeLibrary(hModule);
		#else // _WIN32
			dlclose(pWrapperTable->m_LibraryHandle);
		#endif // _WIN32
			return initWrapperTable(pWrapperTable);
		}
		
		return LIBMCDRIVER_CAMERA_SUCCESS;
	}

	inline LibMCDriver_CameraResult CWrapper::loadWrapperTable(sLibMCDriver_CameraDynamicWrapperTable * pWrapperTable, const char * pLibraryFileName)
	{
		if (pWrapperTable == nullptr)
			return LIBMCDRIVER_CAMERA_ERROR_INVALIDPARAM;
		if (pLibraryFileName == nullptr)
			return LIBMCDRIVER_CAMERA_ERROR_INVALIDPARAM;
		
		#ifdef _WIN32
		// Convert filename to UTF16-string
		int nLength = 0;
		while ((pLibraryFileName[nLength] != 0) && (nLength < MAX_PATH))
			nLength++;
		int nBufferSize = nLength * 2 + 2;
		std::vector<wchar_t> wsLibraryFileName(nBufferSize);
		int nResult = MultiByteToWideChar(CP_UTF8, 0, pLibraryFileName, nLength, &wsLibraryFileName[0], nBufferSize);
		if (nResult == 0)
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTLOADLIBRARY;
		
		HMODULE hLibrary = LoadLibraryW(wsLibraryFileName.data());
		if (hLibrary == 0) 
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTLOADLIBRARY;
		#else // _WIN32
		void* hLibrary = dlopen(pLibraryFileName, RTLD_LAZY);
		if (hLibrary == 0) 
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTLOADLIBRARY;
		dlerror();
		#endif // _WIN32
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_Configure = (PLibMCDriver_CameraDriver_ConfigurePtr) GetProcAddress(hLibrary, "libmcdriver_camera_driver_configure");
		#else // _WIN32
		pWrapperTable->m_Driver_Configure = (PLibMCDriver_CameraDriver_ConfigurePtr) dlsym(hLibrary, "libmcdriver_camera_driver_configure");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_Configure == nullptr)
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_GetName = (PLibMCDriver_CameraDriver_GetNamePtr) GetProcAddress(hLibrary, "libmcdriver_camera_driver_getname");
		#else // _WIN32
		pWrapperTable->m_Driver_GetName = (PLibMCDriver_CameraDriver_GetNamePtr) dlsym(hLibrary, "libmcdriver_camera_driver_getname");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_GetName == nullptr)
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_GetType = (PLibMCDriver_CameraDriver_GetTypePtr) GetProcAddress(hLibrary, "libmcdriver_camera_driver_gettype");
		#else // _WIN32
		pWrapperTable->m_Driver_GetType = (PLibMCDriver_CameraDriver_GetTypePtr) dlsym(hLibrary, "libmcdriver_camera_driver_gettype");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_GetType == nullptr)
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_GetVersion = (PLibMCDriver_CameraDriver_GetVersionPtr) GetProcAddress(hLibrary, "libmcdriver_camera_driver_getversion");
		#else // _WIN32
		pWrapperTable->m_Driver_GetVersion = (PLibMCDriver_CameraDriver_GetVersionPtr) dlsym(hLibrary, "libmcdriver_camera_driver_getversion");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_GetVersion == nullptr)
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_QueryParameters = (PLibMCDriver_CameraDriver_QueryParametersPtr) GetProcAddress(hLibrary, "libmcdriver_camera_driver_queryparameters");
		#else // _WIN32
		pWrapperTable->m_Driver_QueryParameters = (PLibMCDriver_CameraDriver_QueryParametersPtr) dlsym(hLibrary, "libmcdriver_camera_driver_queryparameters");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_QueryParameters == nullptr)
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_QueryParametersEx = (PLibMCDriver_CameraDriver_QueryParametersExPtr) GetProcAddress(hLibrary, "libmcdriver_camera_driver_queryparametersex");
		#else // _WIN32
		pWrapperTable->m_Driver_QueryParametersEx = (PLibMCDriver_CameraDriver_QueryParametersExPtr) dlsym(hLibrary, "libmcdriver_camera_driver_queryparametersex");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_QueryParametersEx == nullptr)
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_DeviceBase_GetFriendlyName = (PLibMCDriver_CameraDeviceBase_GetFriendlyNamePtr) GetProcAddress(hLibrary, "libmcdriver_camera_devicebase_getfriendlyname");
		#else // _WIN32
		pWrapperTable->m_DeviceBase_GetFriendlyName = (PLibMCDriver_CameraDeviceBase_GetFriendlyNamePtr) dlsym(hLibrary, "libmcdriver_camera_devicebase_getfriendlyname");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_DeviceBase_GetFriendlyName == nullptr)
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_DeviceBase_GetOperatingSystemName = (PLibMCDriver_CameraDeviceBase_GetOperatingSystemNamePtr) GetProcAddress(hLibrary, "libmcdriver_camera_devicebase_getoperatingsystemname");
		#else // _WIN32
		pWrapperTable->m_DeviceBase_GetOperatingSystemName = (PLibMCDriver_CameraDeviceBase_GetOperatingSystemNamePtr) dlsym(hLibrary, "libmcdriver_camera_devicebase_getoperatingsystemname");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_DeviceBase_GetOperatingSystemName == nullptr)
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_DeviceBase_IsVideoDevice = (PLibMCDriver_CameraDeviceBase_IsVideoDevicePtr) GetProcAddress(hLibrary, "libmcdriver_camera_devicebase_isvideodevice");
		#else // _WIN32
		pWrapperTable->m_DeviceBase_IsVideoDevice = (PLibMCDriver_CameraDeviceBase_IsVideoDevicePtr) dlsym(hLibrary, "libmcdriver_camera_devicebase_isvideodevice");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_DeviceBase_IsVideoDevice == nullptr)
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_VideoDevice_GetIdentifier = (PLibMCDriver_CameraVideoDevice_GetIdentifierPtr) GetProcAddress(hLibrary, "libmcdriver_camera_videodevice_getidentifier");
		#else // _WIN32
		pWrapperTable->m_VideoDevice_GetIdentifier = (PLibMCDriver_CameraVideoDevice_GetIdentifierPtr) dlsym(hLibrary, "libmcdriver_camera_videodevice_getidentifier");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_VideoDevice_GetIdentifier == nullptr)
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_VideoDevice_GetSupportedResolutionCount = (PLibMCDriver_CameraVideoDevice_GetSupportedResolutionCountPtr) GetProcAddress(hLibrary, "libmcdriver_camera_videodevice_getsupportedresolutioncount");
		#else // _WIN32
		pWrapperTable->m_VideoDevice_GetSupportedResolutionCount = (PLibMCDriver_CameraVideoDevice_GetSupportedResolutionCountPtr) dlsym(hLibrary, "libmcdriver_camera_videodevice_getsupportedresolutioncount");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_VideoDevice_GetSupportedResolutionCount == nullptr)
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_VideoDevice_GetSupportedResolution = (PLibMCDriver_CameraVideoDevice_GetSupportedResolutionPtr) GetProcAddress(hLibrary, "libmcdriver_camera_videodevice_getsupportedresolution");
		#else // _WIN32
		pWrapperTable->m_VideoDevice_GetSupportedResolution = (PLibMCDriver_CameraVideoDevice_GetSupportedResolutionPtr) dlsym(hLibrary, "libmcdriver_camera_videodevice_getsupportedresolution");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_VideoDevice_GetSupportedResolution == nullptr)
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_VideoDevice_GetCurrentResolution = (PLibMCDriver_CameraVideoDevice_GetCurrentResolutionPtr) GetProcAddress(hLibrary, "libmcdriver_camera_videodevice_getcurrentresolution");
		#else // _WIN32
		pWrapperTable->m_VideoDevice_GetCurrentResolution = (PLibMCDriver_CameraVideoDevice_GetCurrentResolutionPtr) dlsym(hLibrary, "libmcdriver_camera_videodevice_getcurrentresolution");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_VideoDevice_GetCurrentResolution == nullptr)
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_VideoDevice_SetResolution = (PLibMCDriver_CameraVideoDevice_SetResolutionPtr) GetProcAddress(hLibrary, "libmcdriver_camera_videodevice_setresolution");
		#else // _WIN32
		pWrapperTable->m_VideoDevice_SetResolution = (PLibMCDriver_CameraVideoDevice_SetResolutionPtr) dlsym(hLibrary, "libmcdriver_camera_videodevice_setresolution");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_VideoDevice_SetResolution == nullptr)
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_VideoDevice_CaptureRawImage = (PLibMCDriver_CameraVideoDevice_CaptureRawImagePtr) GetProcAddress(hLibrary, "libmcdriver_camera_videodevice_capturerawimage");
		#else // _WIN32
		pWrapperTable->m_VideoDevice_CaptureRawImage = (PLibMCDriver_CameraVideoDevice_CaptureRawImagePtr) dlsym(hLibrary, "libmcdriver_camera_videodevice_capturerawimage");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_VideoDevice_CaptureRawImage == nullptr)
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_VideoDevice_StartStreamCapture = (PLibMCDriver_CameraVideoDevice_StartStreamCapturePtr) GetProcAddress(hLibrary, "libmcdriver_camera_videodevice_startstreamcapture");
		#else // _WIN32
		pWrapperTable->m_VideoDevice_StartStreamCapture = (PLibMCDriver_CameraVideoDevice_StartStreamCapturePtr) dlsym(hLibrary, "libmcdriver_camera_videodevice_startstreamcapture");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_VideoDevice_StartStreamCapture == nullptr)
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_VideoDevice_StopStreamCapture = (PLibMCDriver_CameraVideoDevice_StopStreamCapturePtr) GetProcAddress(hLibrary, "libmcdriver_camera_videodevice_stopstreamcapture");
		#else // _WIN32
		pWrapperTable->m_VideoDevice_StopStreamCapture = (PLibMCDriver_CameraVideoDevice_StopStreamCapturePtr) dlsym(hLibrary, "libmcdriver_camera_videodevice_stopstreamcapture");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_VideoDevice_StopStreamCapture == nullptr)
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_VideoDevice_StreamCaptureIsActive = (PLibMCDriver_CameraVideoDevice_StreamCaptureIsActivePtr) GetProcAddress(hLibrary, "libmcdriver_camera_videodevice_streamcaptureisactive");
		#else // _WIN32
		pWrapperTable->m_VideoDevice_StreamCaptureIsActive = (PLibMCDriver_CameraVideoDevice_StreamCaptureIsActivePtr) dlsym(hLibrary, "libmcdriver_camera_videodevice_streamcaptureisactive");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_VideoDevice_StreamCaptureIsActive == nullptr)
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_VideoDevice_GetStreamCaptureStatistics = (PLibMCDriver_CameraVideoDevice_GetStreamCaptureStatisticsPtr) GetProcAddress(hLibrary, "libmcdriver_camera_videodevice_getstreamcapturestatistics");
		#else // _WIN32
		pWrapperTable->m_VideoDevice_GetStreamCaptureStatistics = (PLibMCDriver_CameraVideoDevice_GetStreamCaptureStatisticsPtr) dlsym(hLibrary, "libmcdriver_camera_videodevice_getstreamcapturestatistics");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_VideoDevice_GetStreamCaptureStatistics == nullptr)
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_DeviceList_GetCount = (PLibMCDriver_CameraDeviceList_GetCountPtr) GetProcAddress(hLibrary, "libmcdriver_camera_devicelist_getcount");
		#else // _WIN32
		pWrapperTable->m_DeviceList_GetCount = (PLibMCDriver_CameraDeviceList_GetCountPtr) dlsym(hLibrary, "libmcdriver_camera_devicelist_getcount");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_DeviceList_GetCount == nullptr)
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_DeviceList_GetDeviceInfo = (PLibMCDriver_CameraDeviceList_GetDeviceInfoPtr) GetProcAddress(hLibrary, "libmcdriver_camera_devicelist_getdeviceinfo");
		#else // _WIN32
		pWrapperTable->m_DeviceList_GetDeviceInfo = (PLibMCDriver_CameraDeviceList_GetDeviceInfoPtr) dlsym(hLibrary, "libmcdriver_camera_devicelist_getdeviceinfo");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_DeviceList_GetDeviceInfo == nullptr)
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_DeviceList_FindDeviceInfoByOperatingSystemName = (PLibMCDriver_CameraDeviceList_FindDeviceInfoByOperatingSystemNamePtr) GetProcAddress(hLibrary, "libmcdriver_camera_devicelist_finddeviceinfobyoperatingsystemname");
		#else // _WIN32
		pWrapperTable->m_DeviceList_FindDeviceInfoByOperatingSystemName = (PLibMCDriver_CameraDeviceList_FindDeviceInfoByOperatingSystemNamePtr) dlsym(hLibrary, "libmcdriver_camera_devicelist_finddeviceinfobyoperatingsystemname");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_DeviceList_FindDeviceInfoByOperatingSystemName == nullptr)
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_Camera_EnumerateDevices = (PLibMCDriver_CameraDriver_Camera_EnumerateDevicesPtr) GetProcAddress(hLibrary, "libmcdriver_camera_driver_camera_enumeratedevices");
		#else // _WIN32
		pWrapperTable->m_Driver_Camera_EnumerateDevices = (PLibMCDriver_CameraDriver_Camera_EnumerateDevicesPtr) dlsym(hLibrary, "libmcdriver_camera_driver_camera_enumeratedevices");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_Camera_EnumerateDevices == nullptr)
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_Camera_OpenVideoDevice = (PLibMCDriver_CameraDriver_Camera_OpenVideoDevicePtr) GetProcAddress(hLibrary, "libmcdriver_camera_driver_camera_openvideodevice");
		#else // _WIN32
		pWrapperTable->m_Driver_Camera_OpenVideoDevice = (PLibMCDriver_CameraDriver_Camera_OpenVideoDevicePtr) dlsym(hLibrary, "libmcdriver_camera_driver_camera_openvideodevice");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_Camera_OpenVideoDevice == nullptr)
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_Camera_FindDeviceByIdentifier = (PLibMCDriver_CameraDriver_Camera_FindDeviceByIdentifierPtr) GetProcAddress(hLibrary, "libmcdriver_camera_driver_camera_finddevicebyidentifier");
		#else // _WIN32
		pWrapperTable->m_Driver_Camera_FindDeviceByIdentifier = (PLibMCDriver_CameraDriver_Camera_FindDeviceByIdentifierPtr) dlsym(hLibrary, "libmcdriver_camera_driver_camera_finddevicebyidentifier");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_Camera_FindDeviceByIdentifier == nullptr)
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_Camera_FindDeviceByOperatingSystemName = (PLibMCDriver_CameraDriver_Camera_FindDeviceByOperatingSystemNamePtr) GetProcAddress(hLibrary, "libmcdriver_camera_driver_camera_finddevicebyoperatingsystemname");
		#else // _WIN32
		pWrapperTable->m_Driver_Camera_FindDeviceByOperatingSystemName = (PLibMCDriver_CameraDriver_Camera_FindDeviceByOperatingSystemNamePtr) dlsym(hLibrary, "libmcdriver_camera_driver_camera_finddevicebyoperatingsystemname");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_Camera_FindDeviceByOperatingSystemName == nullptr)
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GetVersion = (PLibMCDriver_CameraGetVersionPtr) GetProcAddress(hLibrary, "libmcdriver_camera_getversion");
		#else // _WIN32
		pWrapperTable->m_GetVersion = (PLibMCDriver_CameraGetVersionPtr) dlsym(hLibrary, "libmcdriver_camera_getversion");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GetVersion == nullptr)
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GetLastError = (PLibMCDriver_CameraGetLastErrorPtr) GetProcAddress(hLibrary, "libmcdriver_camera_getlasterror");
		#else // _WIN32
		pWrapperTable->m_GetLastError = (PLibMCDriver_CameraGetLastErrorPtr) dlsym(hLibrary, "libmcdriver_camera_getlasterror");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GetLastError == nullptr)
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ReleaseInstance = (PLibMCDriver_CameraReleaseInstancePtr) GetProcAddress(hLibrary, "libmcdriver_camera_releaseinstance");
		#else // _WIN32
		pWrapperTable->m_ReleaseInstance = (PLibMCDriver_CameraReleaseInstancePtr) dlsym(hLibrary, "libmcdriver_camera_releaseinstance");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ReleaseInstance == nullptr)
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_AcquireInstance = (PLibMCDriver_CameraAcquireInstancePtr) GetProcAddress(hLibrary, "libmcdriver_camera_acquireinstance");
		#else // _WIN32
		pWrapperTable->m_AcquireInstance = (PLibMCDriver_CameraAcquireInstancePtr) dlsym(hLibrary, "libmcdriver_camera_acquireinstance");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_AcquireInstance == nullptr)
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_InjectComponent = (PLibMCDriver_CameraInjectComponentPtr) GetProcAddress(hLibrary, "libmcdriver_camera_injectcomponent");
		#else // _WIN32
		pWrapperTable->m_InjectComponent = (PLibMCDriver_CameraInjectComponentPtr) dlsym(hLibrary, "libmcdriver_camera_injectcomponent");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_InjectComponent == nullptr)
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GetSymbolLookupMethod = (PLibMCDriver_CameraGetSymbolLookupMethodPtr) GetProcAddress(hLibrary, "libmcdriver_camera_getsymbollookupmethod");
		#else // _WIN32
		pWrapperTable->m_GetSymbolLookupMethod = (PLibMCDriver_CameraGetSymbolLookupMethodPtr) dlsym(hLibrary, "libmcdriver_camera_getsymbollookupmethod");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GetSymbolLookupMethod == nullptr)
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_CreateDriver = (PLibMCDriver_CameraCreateDriverPtr) GetProcAddress(hLibrary, "libmcdriver_camera_createdriver");
		#else // _WIN32
		pWrapperTable->m_CreateDriver = (PLibMCDriver_CameraCreateDriverPtr) dlsym(hLibrary, "libmcdriver_camera_createdriver");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_CreateDriver == nullptr)
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		pWrapperTable->m_LibraryHandle = hLibrary;
		return LIBMCDRIVER_CAMERA_SUCCESS;
	}

	inline LibMCDriver_CameraResult CWrapper::loadWrapperTableFromSymbolLookupMethod(sLibMCDriver_CameraDynamicWrapperTable * pWrapperTable, void* pSymbolLookupMethod)
{
		if (pWrapperTable == nullptr)
			return LIBMCDRIVER_CAMERA_ERROR_INVALIDPARAM;
		if (pSymbolLookupMethod == nullptr)
			return LIBMCDRIVER_CAMERA_ERROR_INVALIDPARAM;
		
		typedef LibMCDriver_CameraResult(*SymbolLookupType)(const char*, void**);
		
		SymbolLookupType pLookup = (SymbolLookupType)pSymbolLookupMethod;
		
		LibMCDriver_CameraResult eLookupError = LIBMCDRIVER_CAMERA_SUCCESS;
		eLookupError = (*pLookup)("libmcdriver_camera_driver_configure", (void**)&(pWrapperTable->m_Driver_Configure));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_Configure == nullptr) )
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_camera_driver_getname", (void**)&(pWrapperTable->m_Driver_GetName));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_GetName == nullptr) )
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_camera_driver_gettype", (void**)&(pWrapperTable->m_Driver_GetType));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_GetType == nullptr) )
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_camera_driver_getversion", (void**)&(pWrapperTable->m_Driver_GetVersion));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_GetVersion == nullptr) )
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_camera_driver_queryparameters", (void**)&(pWrapperTable->m_Driver_QueryParameters));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_QueryParameters == nullptr) )
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_camera_driver_queryparametersex", (void**)&(pWrapperTable->m_Driver_QueryParametersEx));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_QueryParametersEx == nullptr) )
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_camera_devicebase_getfriendlyname", (void**)&(pWrapperTable->m_DeviceBase_GetFriendlyName));
		if ( (eLookupError != 0) || (pWrapperTable->m_DeviceBase_GetFriendlyName == nullptr) )
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_camera_devicebase_getoperatingsystemname", (void**)&(pWrapperTable->m_DeviceBase_GetOperatingSystemName));
		if ( (eLookupError != 0) || (pWrapperTable->m_DeviceBase_GetOperatingSystemName == nullptr) )
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_camera_devicebase_isvideodevice", (void**)&(pWrapperTable->m_DeviceBase_IsVideoDevice));
		if ( (eLookupError != 0) || (pWrapperTable->m_DeviceBase_IsVideoDevice == nullptr) )
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_camera_videodevice_getidentifier", (void**)&(pWrapperTable->m_VideoDevice_GetIdentifier));
		if ( (eLookupError != 0) || (pWrapperTable->m_VideoDevice_GetIdentifier == nullptr) )
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_camera_videodevice_getsupportedresolutioncount", (void**)&(pWrapperTable->m_VideoDevice_GetSupportedResolutionCount));
		if ( (eLookupError != 0) || (pWrapperTable->m_VideoDevice_GetSupportedResolutionCount == nullptr) )
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_camera_videodevice_getsupportedresolution", (void**)&(pWrapperTable->m_VideoDevice_GetSupportedResolution));
		if ( (eLookupError != 0) || (pWrapperTable->m_VideoDevice_GetSupportedResolution == nullptr) )
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_camera_videodevice_getcurrentresolution", (void**)&(pWrapperTable->m_VideoDevice_GetCurrentResolution));
		if ( (eLookupError != 0) || (pWrapperTable->m_VideoDevice_GetCurrentResolution == nullptr) )
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_camera_videodevice_setresolution", (void**)&(pWrapperTable->m_VideoDevice_SetResolution));
		if ( (eLookupError != 0) || (pWrapperTable->m_VideoDevice_SetResolution == nullptr) )
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_camera_videodevice_capturerawimage", (void**)&(pWrapperTable->m_VideoDevice_CaptureRawImage));
		if ( (eLookupError != 0) || (pWrapperTable->m_VideoDevice_CaptureRawImage == nullptr) )
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_camera_videodevice_startstreamcapture", (void**)&(pWrapperTable->m_VideoDevice_StartStreamCapture));
		if ( (eLookupError != 0) || (pWrapperTable->m_VideoDevice_StartStreamCapture == nullptr) )
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_camera_videodevice_stopstreamcapture", (void**)&(pWrapperTable->m_VideoDevice_StopStreamCapture));
		if ( (eLookupError != 0) || (pWrapperTable->m_VideoDevice_StopStreamCapture == nullptr) )
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_camera_videodevice_streamcaptureisactive", (void**)&(pWrapperTable->m_VideoDevice_StreamCaptureIsActive));
		if ( (eLookupError != 0) || (pWrapperTable->m_VideoDevice_StreamCaptureIsActive == nullptr) )
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_camera_videodevice_getstreamcapturestatistics", (void**)&(pWrapperTable->m_VideoDevice_GetStreamCaptureStatistics));
		if ( (eLookupError != 0) || (pWrapperTable->m_VideoDevice_GetStreamCaptureStatistics == nullptr) )
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_camera_devicelist_getcount", (void**)&(pWrapperTable->m_DeviceList_GetCount));
		if ( (eLookupError != 0) || (pWrapperTable->m_DeviceList_GetCount == nullptr) )
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_camera_devicelist_getdeviceinfo", (void**)&(pWrapperTable->m_DeviceList_GetDeviceInfo));
		if ( (eLookupError != 0) || (pWrapperTable->m_DeviceList_GetDeviceInfo == nullptr) )
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_camera_devicelist_finddeviceinfobyoperatingsystemname", (void**)&(pWrapperTable->m_DeviceList_FindDeviceInfoByOperatingSystemName));
		if ( (eLookupError != 0) || (pWrapperTable->m_DeviceList_FindDeviceInfoByOperatingSystemName == nullptr) )
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_camera_driver_camera_enumeratedevices", (void**)&(pWrapperTable->m_Driver_Camera_EnumerateDevices));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_Camera_EnumerateDevices == nullptr) )
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_camera_driver_camera_openvideodevice", (void**)&(pWrapperTable->m_Driver_Camera_OpenVideoDevice));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_Camera_OpenVideoDevice == nullptr) )
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_camera_driver_camera_finddevicebyidentifier", (void**)&(pWrapperTable->m_Driver_Camera_FindDeviceByIdentifier));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_Camera_FindDeviceByIdentifier == nullptr) )
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_camera_driver_camera_finddevicebyoperatingsystemname", (void**)&(pWrapperTable->m_Driver_Camera_FindDeviceByOperatingSystemName));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_Camera_FindDeviceByOperatingSystemName == nullptr) )
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_camera_getversion", (void**)&(pWrapperTable->m_GetVersion));
		if ( (eLookupError != 0) || (pWrapperTable->m_GetVersion == nullptr) )
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_camera_getlasterror", (void**)&(pWrapperTable->m_GetLastError));
		if ( (eLookupError != 0) || (pWrapperTable->m_GetLastError == nullptr) )
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_camera_releaseinstance", (void**)&(pWrapperTable->m_ReleaseInstance));
		if ( (eLookupError != 0) || (pWrapperTable->m_ReleaseInstance == nullptr) )
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_camera_acquireinstance", (void**)&(pWrapperTable->m_AcquireInstance));
		if ( (eLookupError != 0) || (pWrapperTable->m_AcquireInstance == nullptr) )
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_camera_injectcomponent", (void**)&(pWrapperTable->m_InjectComponent));
		if ( (eLookupError != 0) || (pWrapperTable->m_InjectComponent == nullptr) )
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_camera_getsymbollookupmethod", (void**)&(pWrapperTable->m_GetSymbolLookupMethod));
		if ( (eLookupError != 0) || (pWrapperTable->m_GetSymbolLookupMethod == nullptr) )
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_camera_createdriver", (void**)&(pWrapperTable->m_CreateDriver));
		if ( (eLookupError != 0) || (pWrapperTable->m_CreateDriver == nullptr) )
			return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		return LIBMCDRIVER_CAMERA_SUCCESS;
}

	
	
	/**
	 * Method definitions for class CBase
	 */
	
	/**
	 * Method definitions for class CDriver
	 */
	
	/**
	* CDriver::Configure - Configures a driver with its specific configuration data.
	* @param[in] sConfigurationString - Configuration data of driver.
	*/
	void CDriver::Configure(const std::string & sConfigurationString)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_Configure(m_pHandle, sConfigurationString.c_str()));
	}
	
	/**
	* CDriver::GetName - returns the name identifier of the driver
	* @return Name of the driver.
	*/
	std::string CDriver::GetName()
	{
		LibMCDriver_Camera_uint32 bytesNeededName = 0;
		LibMCDriver_Camera_uint32 bytesWrittenName = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetName(m_pHandle, 0, &bytesNeededName, nullptr));
		std::vector<char> bufferName(bytesNeededName);
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetName(m_pHandle, bytesNeededName, &bytesWrittenName, &bufferName[0]));
		
		return std::string(&bufferName[0]);
	}
	
	/**
	* CDriver::GetType - returns the type identifier of the driver
	* @return Type of the driver.
	*/
	std::string CDriver::GetType()
	{
		LibMCDriver_Camera_uint32 bytesNeededType = 0;
		LibMCDriver_Camera_uint32 bytesWrittenType = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetType(m_pHandle, 0, &bytesNeededType, nullptr));
		std::vector<char> bufferType(bytesNeededType);
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetType(m_pHandle, bytesNeededType, &bytesWrittenType, &bufferType[0]));
		
		return std::string(&bufferType[0]);
	}
	
	/**
	* CDriver::GetVersion - returns the version identifiers of the driver
	* @param[out] nMajor - Major version.
	* @param[out] nMinor - Minor version.
	* @param[out] nMicro - Micro version.
	* @param[out] sBuild - Build identifier.
	*/
	void CDriver::GetVersion(LibMCDriver_Camera_uint32 & nMajor, LibMCDriver_Camera_uint32 & nMinor, LibMCDriver_Camera_uint32 & nMicro, std::string & sBuild)
	{
		LibMCDriver_Camera_uint32 bytesNeededBuild = 0;
		LibMCDriver_Camera_uint32 bytesWrittenBuild = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetVersion(m_pHandle, &nMajor, &nMinor, &nMicro, 0, &bytesNeededBuild, nullptr));
		std::vector<char> bufferBuild(bytesNeededBuild);
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetVersion(m_pHandle, &nMajor, &nMinor, &nMicro, bytesNeededBuild, &bytesWrittenBuild, &bufferBuild[0]));
		sBuild = std::string(&bufferBuild[0]);
	}
	
	/**
	* CDriver::QueryParameters - Updates the driver parameters in the driver environment. Should only be called in the driver thread.
	*/
	void CDriver::QueryParameters()
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_QueryParameters(m_pHandle));
	}
	
	/**
	* CDriver::QueryParametersEx - Updates the driver parameters in the driver environment. Might be called out of thread. Implementation MUST be able to handle parallel calls.
	* @param[in] pDriverUpdateInstance - Status update instance.
	*/
	void CDriver::QueryParametersEx(classParam<LibMCEnv::CDriverStatusUpdateSession> pDriverUpdateInstance)
	{
		LibMCEnvHandle hDriverUpdateInstance = pDriverUpdateInstance.GetHandle();
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_QueryParametersEx(m_pHandle, hDriverUpdateInstance));
	}
	
	/**
	 * Method definitions for class CDeviceBase
	 */
	
	/**
	* CDeviceBase::GetFriendlyName - Returns the name of the device in a human readable form.
	* @return Name of device.
	*/
	std::string CDeviceBase::GetFriendlyName()
	{
		LibMCDriver_Camera_uint32 bytesNeededFriendlyName = 0;
		LibMCDriver_Camera_uint32 bytesWrittenFriendlyName = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_DeviceBase_GetFriendlyName(m_pHandle, 0, &bytesNeededFriendlyName, nullptr));
		std::vector<char> bufferFriendlyName(bytesNeededFriendlyName);
		CheckError(m_pWrapper->m_WrapperTable.m_DeviceBase_GetFriendlyName(m_pHandle, bytesNeededFriendlyName, &bytesWrittenFriendlyName, &bufferFriendlyName[0]));
		
		return std::string(&bufferFriendlyName[0]);
	}
	
	/**
	* CDeviceBase::GetOperatingSystemName - Returns a unique name of the device from the operating system.
	* @return Operating system Identifier of the device.
	*/
	std::string CDeviceBase::GetOperatingSystemName()
	{
		LibMCDriver_Camera_uint32 bytesNeededOperatingSystemName = 0;
		LibMCDriver_Camera_uint32 bytesWrittenOperatingSystemName = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_DeviceBase_GetOperatingSystemName(m_pHandle, 0, &bytesNeededOperatingSystemName, nullptr));
		std::vector<char> bufferOperatingSystemName(bytesNeededOperatingSystemName);
		CheckError(m_pWrapper->m_WrapperTable.m_DeviceBase_GetOperatingSystemName(m_pHandle, bytesNeededOperatingSystemName, &bytesWrittenOperatingSystemName, &bufferOperatingSystemName[0]));
		
		return std::string(&bufferOperatingSystemName[0]);
	}
	
	/**
	* CDeviceBase::IsVideoDevice - Returns if the device supports video capture.
	* @return Returns true if the device is a video device.
	*/
	bool CDeviceBase::IsVideoDevice()
	{
		bool resultIsVideo = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_DeviceBase_IsVideoDevice(m_pHandle, &resultIsVideo));
		
		return resultIsVideo;
	}
	
	/**
	 * Method definitions for class CVideoDevice
	 */
	
	/**
	* CVideoDevice::GetIdentifier - Returns the identifier of the video device.
	* @return Identifier of the device.
	*/
	std::string CVideoDevice::GetIdentifier()
	{
		LibMCDriver_Camera_uint32 bytesNeededIdentifier = 0;
		LibMCDriver_Camera_uint32 bytesWrittenIdentifier = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_VideoDevice_GetIdentifier(m_pHandle, 0, &bytesNeededIdentifier, nullptr));
		std::vector<char> bufferIdentifier(bytesNeededIdentifier);
		CheckError(m_pWrapper->m_WrapperTable.m_VideoDevice_GetIdentifier(m_pHandle, bytesNeededIdentifier, &bytesWrittenIdentifier, &bufferIdentifier[0]));
		
		return std::string(&bufferIdentifier[0]);
	}
	
	/**
	* CVideoDevice::GetSupportedResolutionCount - Returns the number of supported resolutions.
	* @return Number of supported resolutions.
	*/
	LibMCDriver_Camera_uint32 CVideoDevice::GetSupportedResolutionCount()
	{
		LibMCDriver_Camera_uint32 resultCount = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_VideoDevice_GetSupportedResolutionCount(m_pHandle, &resultCount));
		
		return resultCount;
	}
	
	/**
	* CVideoDevice::GetSupportedResolution - Returns a resolution from the supported resolution list.
	* @param[in] nIndex - Index to return. 0-based.
	* @param[out] nWidth - Width in pixels.
	* @param[out] nHeight - Height in pixels.
	* @param[out] nFramerate - Framerate in FPS. Currently only integer framerates are supported.
	*/
	void CVideoDevice::GetSupportedResolution(const LibMCDriver_Camera_uint32 nIndex, LibMCDriver_Camera_uint32 & nWidth, LibMCDriver_Camera_uint32 & nHeight, LibMCDriver_Camera_uint32 & nFramerate)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_VideoDevice_GetSupportedResolution(m_pHandle, nIndex, &nWidth, &nHeight, &nFramerate));
	}
	
	/**
	* CVideoDevice::GetCurrentResolution - Returns a the current resolution and Framerate of the video stream.
	* @param[out] nWidth - Width in pixels.
	* @param[out] nHeight - Height in pixels.
	* @param[out] nFramerate - Framerate in FPS. Currently only integer framerates are supported.
	*/
	void CVideoDevice::GetCurrentResolution(LibMCDriver_Camera_uint32 & nWidth, LibMCDriver_Camera_uint32 & nHeight, LibMCDriver_Camera_uint32 & nFramerate)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_VideoDevice_GetCurrentResolution(m_pHandle, &nWidth, &nHeight, &nFramerate));
	}
	
	/**
	* CVideoDevice::SetResolution - Sets the resolution of the video stream. Fails if framerate is not supported.
	* @param[in] nWidth - Width in pixels.
	* @param[in] nHeight - Height in pixels.
	* @param[in] nFramerate - Framerate in FPS to set. Currently only integer framerates are supported.
	*/
	void CVideoDevice::SetResolution(const LibMCDriver_Camera_uint32 nWidth, const LibMCDriver_Camera_uint32 nHeight, const LibMCDriver_Camera_uint32 nFramerate)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_VideoDevice_SetResolution(m_pHandle, nWidth, nHeight, nFramerate));
	}
	
	/**
	* CVideoDevice::CaptureRawImage - Captures a still image from the video stream.
	* @param[in] pImageData - Capture image object.
	*/
	void CVideoDevice::CaptureRawImage(classParam<LibMCEnv::CImageData> pImageData)
	{
		LibMCEnvHandle hImageData = pImageData.GetHandle();
		CheckError(m_pWrapper->m_WrapperTable.m_VideoDevice_CaptureRawImage(m_pHandle, hImageData));
	}
	
	/**
	* CVideoDevice::StartStreamCapture - Starts automatic capturing of the video into a video stream. If a stream capture is active, it will stop the current capture process.
	* @param[in] pStreamInstance - Framework stream capture instance.
	*/
	void CVideoDevice::StartStreamCapture(classParam<LibMCEnv::CVideoStream> pStreamInstance)
	{
		LibMCEnvHandle hStreamInstance = pStreamInstance.GetHandle();
		CheckError(m_pWrapper->m_WrapperTable.m_VideoDevice_StartStreamCapture(m_pHandle, hStreamInstance));
	}
	
	/**
	* CVideoDevice::StopStreamCapture - Stops any current video stream capturing.
	*/
	void CVideoDevice::StopStreamCapture()
	{
		CheckError(m_pWrapper->m_WrapperTable.m_VideoDevice_StopStreamCapture(m_pHandle));
	}
	
	/**
	* CVideoDevice::StreamCaptureIsActive - Returns if a screen capture is active.
	* @return Returns true, if a stream capture is active.
	*/
	bool CVideoDevice::StreamCaptureIsActive()
	{
		bool resultIsActive = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_VideoDevice_StreamCaptureIsActive(m_pHandle, &resultIsActive));
		
		return resultIsActive;
	}
	
	/**
	* CVideoDevice::GetStreamCaptureStatistics - Returns statistics about the current stream capture process.
	* @param[out] dDesiredFramerate - Desired Framerate in fps.
	* @param[out] dMinFramerate - Minimum achieved Capture Framerate in fps.
	* @param[out] dMaxFramerate - Maximum achieved Capture Framerate in fps.
	* @param[out] dMeanFramerate - Mean achieved Capture Framerate in fps.
	* @param[out] dStdDevFramerate - Standard deviation of the Captured Framerate in fps.
	*/
	void CVideoDevice::GetStreamCaptureStatistics(LibMCDriver_Camera_double & dDesiredFramerate, LibMCDriver_Camera_double & dMinFramerate, LibMCDriver_Camera_double & dMaxFramerate, LibMCDriver_Camera_double & dMeanFramerate, LibMCDriver_Camera_double & dStdDevFramerate)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_VideoDevice_GetStreamCaptureStatistics(m_pHandle, &dDesiredFramerate, &dMinFramerate, &dMaxFramerate, &dMeanFramerate, &dStdDevFramerate));
	}
	
	/**
	 * Method definitions for class CDeviceInfo
	 */
	
	/**
	 * Method definitions for class CDeviceList
	 */
	
	/**
	* CDeviceList::GetCount - Returns number of devices found.
	* @return Number of devices found.
	*/
	LibMCDriver_Camera_uint32 CDeviceList::GetCount()
	{
		LibMCDriver_Camera_uint32 resultCount = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_DeviceList_GetCount(m_pHandle, &resultCount));
		
		return resultCount;
	}
	
	/**
	* CDeviceList::GetDeviceInfo - Returns a device info by index.
	* @param[in] nIndex - Index of device (0-based).
	* @return Info of discovered device.
	*/
	PDeviceInfo CDeviceList::GetDeviceInfo(const LibMCDriver_Camera_uint32 nIndex)
	{
		LibMCDriver_CameraHandle hDeviceInfoInstance = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_DeviceList_GetDeviceInfo(m_pHandle, nIndex, &hDeviceInfoInstance));
		
		if (!hDeviceInfoInstance) {
			CheckError(LIBMCDRIVER_CAMERA_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CDeviceInfo>(m_pWrapper, hDeviceInfoInstance);
	}
	
	/**
	* CDeviceList::FindDeviceInfoByOperatingSystemName - Finds a device info by operating system name.
	* @param[in] sOperatingSystemName - Operating system Identifier of the device.
	* @param[in] bMustExist - If true, an exception will be thrown if the device does not exist. If false, the call will return null if the device does not exist.
	* @return Info of discovered device.
	*/
	PDeviceInfo CDeviceList::FindDeviceInfoByOperatingSystemName(const std::string & sOperatingSystemName, const bool bMustExist)
	{
		LibMCDriver_CameraHandle hDeviceInfoInstance = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_DeviceList_FindDeviceInfoByOperatingSystemName(m_pHandle, sOperatingSystemName.c_str(), bMustExist, &hDeviceInfoInstance));
		
		if (hDeviceInfoInstance) {
			return std::make_shared<CDeviceInfo>(m_pWrapper, hDeviceInfoInstance);
		} else {
			return nullptr;
		}
	}
	
	/**
	 * Method definitions for class CDriver_Camera
	 */
	
	/**
	* CDriver_Camera::EnumerateDevices - Lists all devices available on the system.
	* @return List of discovered devices.
	*/
	PDeviceList CDriver_Camera::EnumerateDevices()
	{
		LibMCDriver_CameraHandle hDeviceListInstance = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_Camera_EnumerateDevices(m_pHandle, &hDeviceListInstance));
		
		if (!hDeviceListInstance) {
			CheckError(LIBMCDRIVER_CAMERA_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CDeviceList>(m_pWrapper, hDeviceListInstance);
	}
	
	/**
	* CDriver_Camera::OpenVideoDevice - Tries to reserve and activate a device. 
	* @param[in] sIdentifier - An internal identifier that will recover the open device. MUST NOT be empty. Fails if the identifier is already in use.
	* @param[in] pVideoDeviceInfo - The information object of the device.
	* @return The actual video device instance.
	*/
	PVideoDevice CDriver_Camera::OpenVideoDevice(const std::string & sIdentifier, classParam<CDeviceInfo> pVideoDeviceInfo)
	{
		LibMCDriver_CameraHandle hVideoDeviceInfo = pVideoDeviceInfo.GetHandle();
		LibMCDriver_CameraHandle hVideoDeviceInstance = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_Camera_OpenVideoDevice(m_pHandle, sIdentifier.c_str(), hVideoDeviceInfo, &hVideoDeviceInstance));
		
		if (!hVideoDeviceInstance) {
			CheckError(LIBMCDRIVER_CAMERA_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CVideoDevice>(m_pWrapper, hVideoDeviceInstance);
	}
	
	/**
	* CDriver_Camera::FindDeviceByIdentifier - Finds a device instance by internal identifier.
	* @param[in] sIdentifier - Internal Identifier of the device.
	* @param[in] bMustExist - If true, an exception will be thrown if the device does not exist. If false, the call will return null if the device does not exist.
	* @return Instance of discovered device.
	*/
	PVideoDevice CDriver_Camera::FindDeviceByIdentifier(const std::string & sIdentifier, const bool bMustExist)
	{
		LibMCDriver_CameraHandle hDeviceInstance = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_Camera_FindDeviceByIdentifier(m_pHandle, sIdentifier.c_str(), bMustExist, &hDeviceInstance));
		
		if (hDeviceInstance) {
			return std::make_shared<CVideoDevice>(m_pWrapper, hDeviceInstance);
		} else {
			return nullptr;
		}
	}
	
	/**
	* CDriver_Camera::FindDeviceByOperatingSystemName - Finds a device instance by operating system name.
	* @param[in] sOperatingSystemName - Operating system Identifier of the device.
	* @param[in] bMustExist - If true, an exception will be thrown if the device does not exist. If false, the call will return null if the device does not exist.
	* @return Instance of discovered device.
	*/
	PVideoDevice CDriver_Camera::FindDeviceByOperatingSystemName(const std::string & sOperatingSystemName, const bool bMustExist)
	{
		LibMCDriver_CameraHandle hDeviceInstance = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_Camera_FindDeviceByOperatingSystemName(m_pHandle, sOperatingSystemName.c_str(), bMustExist, &hDeviceInstance));
		
		if (hDeviceInstance) {
			return std::make_shared<CVideoDevice>(m_pWrapper, hDeviceInstance);
		} else {
			return nullptr;
		}
	}
	
	/**
	 * Method definitions for class CDriver_Camera_Windows
	 */

} // namespace LibMCDriver_Camera

#endif // __LIBMCDRIVER_CAMERA_CPPHEADER_DYNAMIC_CPP

