/*++

Copyright (C) 2024 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.8.0-develop.

Abstract: This is an autogenerated C++ implementation file in order to allow easy
development of Generic Camera Driver for Windows or Linux devices. The functions in this file need to be implemented. It needs to be generated only once.

Interface version: 2.0.0

*/

#include "libmcdriver_camera_abi.hpp"
#include "libmcdriver_camera_interfaces.hpp"
#include "libmcdriver_camera_interfaceexception.hpp"

#include <map>

using namespace LibMCDriver_Camera::Impl;

LibMCDriver_CameraResult handleLibMCDriver_CameraException(IBase * pIBaseClass, ELibMCDriver_CameraInterfaceException & Exception)
{
	LibMCDriver_CameraResult errorCode = Exception.getErrorCode();

	if (pIBaseClass != nullptr)
		pIBaseClass->RegisterErrorMessage(Exception.what());

	return errorCode;
}

LibMCDriver_CameraResult handleStdException(IBase * pIBaseClass, std::exception & Exception)
{
	LibMCDriver_CameraResult errorCode = LIBMCDRIVER_CAMERA_ERROR_GENERICEXCEPTION;

	if (pIBaseClass != nullptr)
		pIBaseClass->RegisterErrorMessage(Exception.what());

	return errorCode;
}

LibMCDriver_CameraResult handleUnhandledException(IBase * pIBaseClass)
{
	LibMCDriver_CameraResult errorCode = LIBMCDRIVER_CAMERA_ERROR_GENERICEXCEPTION;

	if (pIBaseClass != nullptr)
		pIBaseClass->RegisterErrorMessage("Unhandled Exception");

	return errorCode;
}



/*************************************************************************************************************************
 Class implementation for Base
**************************************************************************************************************************/

/*************************************************************************************************************************
 Class implementation for Driver
**************************************************************************************************************************/
LibMCDriver_CameraResult libmcdriver_camera_driver_configure(LibMCDriver_Camera_Driver pDriver, const char * pConfigurationString)
{
	IBase* pIBaseClass = (IBase *)pDriver;

	try {
		if (pConfigurationString == nullptr)
			throw ELibMCDriver_CameraInterfaceException (LIBMCDRIVER_CAMERA_ERROR_INVALIDPARAM);
		std::string sConfigurationString(pConfigurationString);
		IDriver* pIDriver = dynamic_cast<IDriver*>(pIBaseClass);
		if (!pIDriver)
			throw ELibMCDriver_CameraInterfaceException(LIBMCDRIVER_CAMERA_ERROR_INVALIDCAST);
		
		pIDriver->Configure(sConfigurationString);

		return LIBMCDRIVER_CAMERA_SUCCESS;
	}
	catch (ELibMCDriver_CameraInterfaceException & Exception) {
		return handleLibMCDriver_CameraException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_CameraResult libmcdriver_camera_driver_getname(LibMCDriver_Camera_Driver pDriver, const LibMCDriver_Camera_uint32 nNameBufferSize, LibMCDriver_Camera_uint32* pNameNeededChars, char * pNameBuffer)
{
	IBase* pIBaseClass = (IBase *)pDriver;

	try {
		if ( (!pNameBuffer) && !(pNameNeededChars) )
			throw ELibMCDriver_CameraInterfaceException (LIBMCDRIVER_CAMERA_ERROR_INVALIDPARAM);
		std::string sName("");
		IDriver* pIDriver = dynamic_cast<IDriver*>(pIBaseClass);
		if (!pIDriver)
			throw ELibMCDriver_CameraInterfaceException(LIBMCDRIVER_CAMERA_ERROR_INVALIDCAST);
		
		bool isCacheCall = (pNameBuffer == nullptr);
		if (isCacheCall) {
			sName = pIDriver->GetName();

			pIDriver->_setCache (new ParameterCache_1<std::string> (sName));
		}
		else {
			auto cache = dynamic_cast<ParameterCache_1<std::string>*> (pIDriver->_getCache ());
			if (cache == nullptr)
				throw ELibMCDriver_CameraInterfaceException(LIBMCDRIVER_CAMERA_ERROR_INVALIDCAST);
			cache->retrieveData (sName);
			pIDriver->_setCache (nullptr);
		}
		
		if (pNameNeededChars)
			*pNameNeededChars = (LibMCDriver_Camera_uint32) (sName.size()+1);
		if (pNameBuffer) {
			if (sName.size() >= nNameBufferSize)
				throw ELibMCDriver_CameraInterfaceException (LIBMCDRIVER_CAMERA_ERROR_BUFFERTOOSMALL);
			for (size_t iName = 0; iName < sName.size(); iName++)
				pNameBuffer[iName] = sName[iName];
			pNameBuffer[sName.size()] = 0;
		}
		return LIBMCDRIVER_CAMERA_SUCCESS;
	}
	catch (ELibMCDriver_CameraInterfaceException & Exception) {
		return handleLibMCDriver_CameraException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_CameraResult libmcdriver_camera_driver_gettype(LibMCDriver_Camera_Driver pDriver, const LibMCDriver_Camera_uint32 nTypeBufferSize, LibMCDriver_Camera_uint32* pTypeNeededChars, char * pTypeBuffer)
{
	IBase* pIBaseClass = (IBase *)pDriver;

	try {
		if ( (!pTypeBuffer) && !(pTypeNeededChars) )
			throw ELibMCDriver_CameraInterfaceException (LIBMCDRIVER_CAMERA_ERROR_INVALIDPARAM);
		std::string sType("");
		IDriver* pIDriver = dynamic_cast<IDriver*>(pIBaseClass);
		if (!pIDriver)
			throw ELibMCDriver_CameraInterfaceException(LIBMCDRIVER_CAMERA_ERROR_INVALIDCAST);
		
		bool isCacheCall = (pTypeBuffer == nullptr);
		if (isCacheCall) {
			sType = pIDriver->GetType();

			pIDriver->_setCache (new ParameterCache_1<std::string> (sType));
		}
		else {
			auto cache = dynamic_cast<ParameterCache_1<std::string>*> (pIDriver->_getCache ());
			if (cache == nullptr)
				throw ELibMCDriver_CameraInterfaceException(LIBMCDRIVER_CAMERA_ERROR_INVALIDCAST);
			cache->retrieveData (sType);
			pIDriver->_setCache (nullptr);
		}
		
		if (pTypeNeededChars)
			*pTypeNeededChars = (LibMCDriver_Camera_uint32) (sType.size()+1);
		if (pTypeBuffer) {
			if (sType.size() >= nTypeBufferSize)
				throw ELibMCDriver_CameraInterfaceException (LIBMCDRIVER_CAMERA_ERROR_BUFFERTOOSMALL);
			for (size_t iType = 0; iType < sType.size(); iType++)
				pTypeBuffer[iType] = sType[iType];
			pTypeBuffer[sType.size()] = 0;
		}
		return LIBMCDRIVER_CAMERA_SUCCESS;
	}
	catch (ELibMCDriver_CameraInterfaceException & Exception) {
		return handleLibMCDriver_CameraException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_CameraResult libmcdriver_camera_driver_getversion(LibMCDriver_Camera_Driver pDriver, LibMCDriver_Camera_uint32 * pMajor, LibMCDriver_Camera_uint32 * pMinor, LibMCDriver_Camera_uint32 * pMicro, const LibMCDriver_Camera_uint32 nBuildBufferSize, LibMCDriver_Camera_uint32* pBuildNeededChars, char * pBuildBuffer)
{
	IBase* pIBaseClass = (IBase *)pDriver;

	try {
		if (!pMajor)
			throw ELibMCDriver_CameraInterfaceException (LIBMCDRIVER_CAMERA_ERROR_INVALIDPARAM);
		if (!pMinor)
			throw ELibMCDriver_CameraInterfaceException (LIBMCDRIVER_CAMERA_ERROR_INVALIDPARAM);
		if (!pMicro)
			throw ELibMCDriver_CameraInterfaceException (LIBMCDRIVER_CAMERA_ERROR_INVALIDPARAM);
		if ( (!pBuildBuffer) && !(pBuildNeededChars) )
			throw ELibMCDriver_CameraInterfaceException (LIBMCDRIVER_CAMERA_ERROR_INVALIDPARAM);
		std::string sBuild("");
		IDriver* pIDriver = dynamic_cast<IDriver*>(pIBaseClass);
		if (!pIDriver)
			throw ELibMCDriver_CameraInterfaceException(LIBMCDRIVER_CAMERA_ERROR_INVALIDCAST);
		
		bool isCacheCall = (pBuildBuffer == nullptr);
		if (isCacheCall) {
			pIDriver->GetVersion(*pMajor, *pMinor, *pMicro, sBuild);

			pIDriver->_setCache (new ParameterCache_4<LibMCDriver_Camera_uint32, LibMCDriver_Camera_uint32, LibMCDriver_Camera_uint32, std::string> (*pMajor, *pMinor, *pMicro, sBuild));
		}
		else {
			auto cache = dynamic_cast<ParameterCache_4<LibMCDriver_Camera_uint32, LibMCDriver_Camera_uint32, LibMCDriver_Camera_uint32, std::string>*> (pIDriver->_getCache ());
			if (cache == nullptr)
				throw ELibMCDriver_CameraInterfaceException(LIBMCDRIVER_CAMERA_ERROR_INVALIDCAST);
			cache->retrieveData (*pMajor, *pMinor, *pMicro, sBuild);
			pIDriver->_setCache (nullptr);
		}
		
		if (pBuildNeededChars)
			*pBuildNeededChars = (LibMCDriver_Camera_uint32) (sBuild.size()+1);
		if (pBuildBuffer) {
			if (sBuild.size() >= nBuildBufferSize)
				throw ELibMCDriver_CameraInterfaceException (LIBMCDRIVER_CAMERA_ERROR_BUFFERTOOSMALL);
			for (size_t iBuild = 0; iBuild < sBuild.size(); iBuild++)
				pBuildBuffer[iBuild] = sBuild[iBuild];
			pBuildBuffer[sBuild.size()] = 0;
		}
		return LIBMCDRIVER_CAMERA_SUCCESS;
	}
	catch (ELibMCDriver_CameraInterfaceException & Exception) {
		return handleLibMCDriver_CameraException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_CameraResult libmcdriver_camera_driver_queryparameters(LibMCDriver_Camera_Driver pDriver)
{
	IBase* pIBaseClass = (IBase *)pDriver;

	try {
		IDriver* pIDriver = dynamic_cast<IDriver*>(pIBaseClass);
		if (!pIDriver)
			throw ELibMCDriver_CameraInterfaceException(LIBMCDRIVER_CAMERA_ERROR_INVALIDCAST);
		
		pIDriver->QueryParameters();

		return LIBMCDRIVER_CAMERA_SUCCESS;
	}
	catch (ELibMCDriver_CameraInterfaceException & Exception) {
		return handleLibMCDriver_CameraException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_CameraResult libmcdriver_camera_driver_queryparametersex(LibMCDriver_Camera_Driver pDriver, LibMCEnv_DriverStatusUpdateSession pDriverUpdateInstance)
{
	IBase* pIBaseClass = (IBase *)pDriver;

	try {
		LibMCEnv::PDriverStatusUpdateSession pIDriverUpdateInstance = std::make_shared<LibMCEnv::CDriverStatusUpdateSession>(CWrapper::sPLibMCEnvWrapper.get(), pDriverUpdateInstance);
		CWrapper::sPLibMCEnvWrapper->AcquireInstance(pIDriverUpdateInstance.get());
		if (!pIDriverUpdateInstance)
			throw ELibMCDriver_CameraInterfaceException (LIBMCDRIVER_CAMERA_ERROR_INVALIDCAST);
		
		IDriver* pIDriver = dynamic_cast<IDriver*>(pIBaseClass);
		if (!pIDriver)
			throw ELibMCDriver_CameraInterfaceException(LIBMCDRIVER_CAMERA_ERROR_INVALIDCAST);
		
		pIDriver->QueryParametersEx(pIDriverUpdateInstance);

		return LIBMCDRIVER_CAMERA_SUCCESS;
	}
	catch (ELibMCDriver_CameraInterfaceException & Exception) {
		return handleLibMCDriver_CameraException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}


/*************************************************************************************************************************
 Class implementation for DeviceBase
**************************************************************************************************************************/
LibMCDriver_CameraResult libmcdriver_camera_devicebase_getfriendlyname(LibMCDriver_Camera_DeviceBase pDeviceBase, const LibMCDriver_Camera_uint32 nFriendlyNameBufferSize, LibMCDriver_Camera_uint32* pFriendlyNameNeededChars, char * pFriendlyNameBuffer)
{
	IBase* pIBaseClass = (IBase *)pDeviceBase;

	try {
		if ( (!pFriendlyNameBuffer) && !(pFriendlyNameNeededChars) )
			throw ELibMCDriver_CameraInterfaceException (LIBMCDRIVER_CAMERA_ERROR_INVALIDPARAM);
		std::string sFriendlyName("");
		IDeviceBase* pIDeviceBase = dynamic_cast<IDeviceBase*>(pIBaseClass);
		if (!pIDeviceBase)
			throw ELibMCDriver_CameraInterfaceException(LIBMCDRIVER_CAMERA_ERROR_INVALIDCAST);
		
		bool isCacheCall = (pFriendlyNameBuffer == nullptr);
		if (isCacheCall) {
			sFriendlyName = pIDeviceBase->GetFriendlyName();

			pIDeviceBase->_setCache (new ParameterCache_1<std::string> (sFriendlyName));
		}
		else {
			auto cache = dynamic_cast<ParameterCache_1<std::string>*> (pIDeviceBase->_getCache ());
			if (cache == nullptr)
				throw ELibMCDriver_CameraInterfaceException(LIBMCDRIVER_CAMERA_ERROR_INVALIDCAST);
			cache->retrieveData (sFriendlyName);
			pIDeviceBase->_setCache (nullptr);
		}
		
		if (pFriendlyNameNeededChars)
			*pFriendlyNameNeededChars = (LibMCDriver_Camera_uint32) (sFriendlyName.size()+1);
		if (pFriendlyNameBuffer) {
			if (sFriendlyName.size() >= nFriendlyNameBufferSize)
				throw ELibMCDriver_CameraInterfaceException (LIBMCDRIVER_CAMERA_ERROR_BUFFERTOOSMALL);
			for (size_t iFriendlyName = 0; iFriendlyName < sFriendlyName.size(); iFriendlyName++)
				pFriendlyNameBuffer[iFriendlyName] = sFriendlyName[iFriendlyName];
			pFriendlyNameBuffer[sFriendlyName.size()] = 0;
		}
		return LIBMCDRIVER_CAMERA_SUCCESS;
	}
	catch (ELibMCDriver_CameraInterfaceException & Exception) {
		return handleLibMCDriver_CameraException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_CameraResult libmcdriver_camera_devicebase_getoperatingsystemname(LibMCDriver_Camera_DeviceBase pDeviceBase, const LibMCDriver_Camera_uint32 nOperatingSystemNameBufferSize, LibMCDriver_Camera_uint32* pOperatingSystemNameNeededChars, char * pOperatingSystemNameBuffer)
{
	IBase* pIBaseClass = (IBase *)pDeviceBase;

	try {
		if ( (!pOperatingSystemNameBuffer) && !(pOperatingSystemNameNeededChars) )
			throw ELibMCDriver_CameraInterfaceException (LIBMCDRIVER_CAMERA_ERROR_INVALIDPARAM);
		std::string sOperatingSystemName("");
		IDeviceBase* pIDeviceBase = dynamic_cast<IDeviceBase*>(pIBaseClass);
		if (!pIDeviceBase)
			throw ELibMCDriver_CameraInterfaceException(LIBMCDRIVER_CAMERA_ERROR_INVALIDCAST);
		
		bool isCacheCall = (pOperatingSystemNameBuffer == nullptr);
		if (isCacheCall) {
			sOperatingSystemName = pIDeviceBase->GetOperatingSystemName();

			pIDeviceBase->_setCache (new ParameterCache_1<std::string> (sOperatingSystemName));
		}
		else {
			auto cache = dynamic_cast<ParameterCache_1<std::string>*> (pIDeviceBase->_getCache ());
			if (cache == nullptr)
				throw ELibMCDriver_CameraInterfaceException(LIBMCDRIVER_CAMERA_ERROR_INVALIDCAST);
			cache->retrieveData (sOperatingSystemName);
			pIDeviceBase->_setCache (nullptr);
		}
		
		if (pOperatingSystemNameNeededChars)
			*pOperatingSystemNameNeededChars = (LibMCDriver_Camera_uint32) (sOperatingSystemName.size()+1);
		if (pOperatingSystemNameBuffer) {
			if (sOperatingSystemName.size() >= nOperatingSystemNameBufferSize)
				throw ELibMCDriver_CameraInterfaceException (LIBMCDRIVER_CAMERA_ERROR_BUFFERTOOSMALL);
			for (size_t iOperatingSystemName = 0; iOperatingSystemName < sOperatingSystemName.size(); iOperatingSystemName++)
				pOperatingSystemNameBuffer[iOperatingSystemName] = sOperatingSystemName[iOperatingSystemName];
			pOperatingSystemNameBuffer[sOperatingSystemName.size()] = 0;
		}
		return LIBMCDRIVER_CAMERA_SUCCESS;
	}
	catch (ELibMCDriver_CameraInterfaceException & Exception) {
		return handleLibMCDriver_CameraException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_CameraResult libmcdriver_camera_devicebase_isvideodevice(LibMCDriver_Camera_DeviceBase pDeviceBase, bool * pIsVideo)
{
	IBase* pIBaseClass = (IBase *)pDeviceBase;

	try {
		if (pIsVideo == nullptr)
			throw ELibMCDriver_CameraInterfaceException (LIBMCDRIVER_CAMERA_ERROR_INVALIDPARAM);
		IDeviceBase* pIDeviceBase = dynamic_cast<IDeviceBase*>(pIBaseClass);
		if (!pIDeviceBase)
			throw ELibMCDriver_CameraInterfaceException(LIBMCDRIVER_CAMERA_ERROR_INVALIDCAST);
		
		*pIsVideo = pIDeviceBase->IsVideoDevice();

		return LIBMCDRIVER_CAMERA_SUCCESS;
	}
	catch (ELibMCDriver_CameraInterfaceException & Exception) {
		return handleLibMCDriver_CameraException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}


/*************************************************************************************************************************
 Class implementation for VideoDevice
**************************************************************************************************************************/
LibMCDriver_CameraResult libmcdriver_camera_videodevice_getidentifier(LibMCDriver_Camera_VideoDevice pVideoDevice, const LibMCDriver_Camera_uint32 nIdentifierBufferSize, LibMCDriver_Camera_uint32* pIdentifierNeededChars, char * pIdentifierBuffer)
{
	IBase* pIBaseClass = (IBase *)pVideoDevice;

	try {
		if ( (!pIdentifierBuffer) && !(pIdentifierNeededChars) )
			throw ELibMCDriver_CameraInterfaceException (LIBMCDRIVER_CAMERA_ERROR_INVALIDPARAM);
		std::string sIdentifier("");
		IVideoDevice* pIVideoDevice = dynamic_cast<IVideoDevice*>(pIBaseClass);
		if (!pIVideoDevice)
			throw ELibMCDriver_CameraInterfaceException(LIBMCDRIVER_CAMERA_ERROR_INVALIDCAST);
		
		bool isCacheCall = (pIdentifierBuffer == nullptr);
		if (isCacheCall) {
			sIdentifier = pIVideoDevice->GetIdentifier();

			pIVideoDevice->_setCache (new ParameterCache_1<std::string> (sIdentifier));
		}
		else {
			auto cache = dynamic_cast<ParameterCache_1<std::string>*> (pIVideoDevice->_getCache ());
			if (cache == nullptr)
				throw ELibMCDriver_CameraInterfaceException(LIBMCDRIVER_CAMERA_ERROR_INVALIDCAST);
			cache->retrieveData (sIdentifier);
			pIVideoDevice->_setCache (nullptr);
		}
		
		if (pIdentifierNeededChars)
			*pIdentifierNeededChars = (LibMCDriver_Camera_uint32) (sIdentifier.size()+1);
		if (pIdentifierBuffer) {
			if (sIdentifier.size() >= nIdentifierBufferSize)
				throw ELibMCDriver_CameraInterfaceException (LIBMCDRIVER_CAMERA_ERROR_BUFFERTOOSMALL);
			for (size_t iIdentifier = 0; iIdentifier < sIdentifier.size(); iIdentifier++)
				pIdentifierBuffer[iIdentifier] = sIdentifier[iIdentifier];
			pIdentifierBuffer[sIdentifier.size()] = 0;
		}
		return LIBMCDRIVER_CAMERA_SUCCESS;
	}
	catch (ELibMCDriver_CameraInterfaceException & Exception) {
		return handleLibMCDriver_CameraException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_CameraResult libmcdriver_camera_videodevice_getcurrentresolution(LibMCDriver_Camera_VideoDevice pVideoDevice, LibMCDriver_Camera_uint32 * pWidth, LibMCDriver_Camera_uint32 * pHeight)
{
	IBase* pIBaseClass = (IBase *)pVideoDevice;

	try {
		if (!pWidth)
			throw ELibMCDriver_CameraInterfaceException (LIBMCDRIVER_CAMERA_ERROR_INVALIDPARAM);
		if (!pHeight)
			throw ELibMCDriver_CameraInterfaceException (LIBMCDRIVER_CAMERA_ERROR_INVALIDPARAM);
		IVideoDevice* pIVideoDevice = dynamic_cast<IVideoDevice*>(pIBaseClass);
		if (!pIVideoDevice)
			throw ELibMCDriver_CameraInterfaceException(LIBMCDRIVER_CAMERA_ERROR_INVALIDCAST);
		
		pIVideoDevice->GetCurrentResolution(*pWidth, *pHeight);

		return LIBMCDRIVER_CAMERA_SUCCESS;
	}
	catch (ELibMCDriver_CameraInterfaceException & Exception) {
		return handleLibMCDriver_CameraException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_CameraResult libmcdriver_camera_videodevice_setresolution(LibMCDriver_Camera_VideoDevice pVideoDevice, LibMCDriver_Camera_uint32 * pWidth, LibMCDriver_Camera_uint32 * pHeight)
{
	IBase* pIBaseClass = (IBase *)pVideoDevice;

	try {
		if (!pWidth)
			throw ELibMCDriver_CameraInterfaceException (LIBMCDRIVER_CAMERA_ERROR_INVALIDPARAM);
		if (!pHeight)
			throw ELibMCDriver_CameraInterfaceException (LIBMCDRIVER_CAMERA_ERROR_INVALIDPARAM);
		IVideoDevice* pIVideoDevice = dynamic_cast<IVideoDevice*>(pIBaseClass);
		if (!pIVideoDevice)
			throw ELibMCDriver_CameraInterfaceException(LIBMCDRIVER_CAMERA_ERROR_INVALIDCAST);
		
		pIVideoDevice->SetResolution(*pWidth, *pHeight);

		return LIBMCDRIVER_CAMERA_SUCCESS;
	}
	catch (ELibMCDriver_CameraInterfaceException & Exception) {
		return handleLibMCDriver_CameraException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_CameraResult libmcdriver_camera_videodevice_capturerawimage(LibMCDriver_Camera_VideoDevice pVideoDevice, LibMCEnv_ImageData pImageData)
{
	IBase* pIBaseClass = (IBase *)pVideoDevice;

	try {
		LibMCEnv::PImageData pIImageData = std::make_shared<LibMCEnv::CImageData>(CWrapper::sPLibMCEnvWrapper.get(), pImageData);
		CWrapper::sPLibMCEnvWrapper->AcquireInstance(pIImageData.get());
		if (!pIImageData)
			throw ELibMCDriver_CameraInterfaceException (LIBMCDRIVER_CAMERA_ERROR_INVALIDCAST);
		
		IVideoDevice* pIVideoDevice = dynamic_cast<IVideoDevice*>(pIBaseClass);
		if (!pIVideoDevice)
			throw ELibMCDriver_CameraInterfaceException(LIBMCDRIVER_CAMERA_ERROR_INVALIDCAST);
		
		pIVideoDevice->CaptureRawImage(pIImageData);

		return LIBMCDRIVER_CAMERA_SUCCESS;
	}
	catch (ELibMCDriver_CameraInterfaceException & Exception) {
		return handleLibMCDriver_CameraException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_CameraResult libmcdriver_camera_videodevice_startstreamcapture(LibMCDriver_Camera_VideoDevice pVideoDevice, LibMCDriver_Camera_double dDesiredFramerate, LibMCEnv_VideoStream pStreamInstance)
{
	IBase* pIBaseClass = (IBase *)pVideoDevice;

	try {
		LibMCEnv::PVideoStream pIStreamInstance = std::make_shared<LibMCEnv::CVideoStream>(CWrapper::sPLibMCEnvWrapper.get(), pStreamInstance);
		CWrapper::sPLibMCEnvWrapper->AcquireInstance(pIStreamInstance.get());
		if (!pIStreamInstance)
			throw ELibMCDriver_CameraInterfaceException (LIBMCDRIVER_CAMERA_ERROR_INVALIDCAST);
		
		IVideoDevice* pIVideoDevice = dynamic_cast<IVideoDevice*>(pIBaseClass);
		if (!pIVideoDevice)
			throw ELibMCDriver_CameraInterfaceException(LIBMCDRIVER_CAMERA_ERROR_INVALIDCAST);
		
		pIVideoDevice->StartStreamCapture(dDesiredFramerate, pIStreamInstance);

		return LIBMCDRIVER_CAMERA_SUCCESS;
	}
	catch (ELibMCDriver_CameraInterfaceException & Exception) {
		return handleLibMCDriver_CameraException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_CameraResult libmcdriver_camera_videodevice_stopstreamcapture(LibMCDriver_Camera_VideoDevice pVideoDevice)
{
	IBase* pIBaseClass = (IBase *)pVideoDevice;

	try {
		IVideoDevice* pIVideoDevice = dynamic_cast<IVideoDevice*>(pIBaseClass);
		if (!pIVideoDevice)
			throw ELibMCDriver_CameraInterfaceException(LIBMCDRIVER_CAMERA_ERROR_INVALIDCAST);
		
		pIVideoDevice->StopStreamCapture();

		return LIBMCDRIVER_CAMERA_SUCCESS;
	}
	catch (ELibMCDriver_CameraInterfaceException & Exception) {
		return handleLibMCDriver_CameraException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_CameraResult libmcdriver_camera_videodevice_streamcaptureisactive(LibMCDriver_Camera_VideoDevice pVideoDevice, bool * pIsActive)
{
	IBase* pIBaseClass = (IBase *)pVideoDevice;

	try {
		if (pIsActive == nullptr)
			throw ELibMCDriver_CameraInterfaceException (LIBMCDRIVER_CAMERA_ERROR_INVALIDPARAM);
		IVideoDevice* pIVideoDevice = dynamic_cast<IVideoDevice*>(pIBaseClass);
		if (!pIVideoDevice)
			throw ELibMCDriver_CameraInterfaceException(LIBMCDRIVER_CAMERA_ERROR_INVALIDCAST);
		
		*pIsActive = pIVideoDevice->StreamCaptureIsActive();

		return LIBMCDRIVER_CAMERA_SUCCESS;
	}
	catch (ELibMCDriver_CameraInterfaceException & Exception) {
		return handleLibMCDriver_CameraException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_CameraResult libmcdriver_camera_videodevice_getstreamcapturestatistics(LibMCDriver_Camera_VideoDevice pVideoDevice, LibMCDriver_Camera_double * pDesiredFramerate, LibMCDriver_Camera_double * pMinFramerate, LibMCDriver_Camera_double * pMaxFramerate, LibMCDriver_Camera_double * pMeanFramerate, LibMCDriver_Camera_double * pStdDevFramerate)
{
	IBase* pIBaseClass = (IBase *)pVideoDevice;

	try {
		if (!pDesiredFramerate)
			throw ELibMCDriver_CameraInterfaceException (LIBMCDRIVER_CAMERA_ERROR_INVALIDPARAM);
		if (!pMinFramerate)
			throw ELibMCDriver_CameraInterfaceException (LIBMCDRIVER_CAMERA_ERROR_INVALIDPARAM);
		if (!pMaxFramerate)
			throw ELibMCDriver_CameraInterfaceException (LIBMCDRIVER_CAMERA_ERROR_INVALIDPARAM);
		if (!pMeanFramerate)
			throw ELibMCDriver_CameraInterfaceException (LIBMCDRIVER_CAMERA_ERROR_INVALIDPARAM);
		if (!pStdDevFramerate)
			throw ELibMCDriver_CameraInterfaceException (LIBMCDRIVER_CAMERA_ERROR_INVALIDPARAM);
		IVideoDevice* pIVideoDevice = dynamic_cast<IVideoDevice*>(pIBaseClass);
		if (!pIVideoDevice)
			throw ELibMCDriver_CameraInterfaceException(LIBMCDRIVER_CAMERA_ERROR_INVALIDCAST);
		
		pIVideoDevice->GetStreamCaptureStatistics(*pDesiredFramerate, *pMinFramerate, *pMaxFramerate, *pMeanFramerate, *pStdDevFramerate);

		return LIBMCDRIVER_CAMERA_SUCCESS;
	}
	catch (ELibMCDriver_CameraInterfaceException & Exception) {
		return handleLibMCDriver_CameraException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}


/*************************************************************************************************************************
 Class implementation for DeviceInfo
**************************************************************************************************************************/
LibMCDriver_CameraResult libmcdriver_camera_deviceinfo_openvideodevice(LibMCDriver_Camera_DeviceInfo pDeviceInfo, const char * pIdentifier, LibMCDriver_Camera_VideoDevice * pVideoDeviceInstance)
{
	IBase* pIBaseClass = (IBase *)pDeviceInfo;

	try {
		if (pIdentifier == nullptr)
			throw ELibMCDriver_CameraInterfaceException (LIBMCDRIVER_CAMERA_ERROR_INVALIDPARAM);
		if (pVideoDeviceInstance == nullptr)
			throw ELibMCDriver_CameraInterfaceException (LIBMCDRIVER_CAMERA_ERROR_INVALIDPARAM);
		std::string sIdentifier(pIdentifier);
		IBase* pBaseVideoDeviceInstance(nullptr);
		IDeviceInfo* pIDeviceInfo = dynamic_cast<IDeviceInfo*>(pIBaseClass);
		if (!pIDeviceInfo)
			throw ELibMCDriver_CameraInterfaceException(LIBMCDRIVER_CAMERA_ERROR_INVALIDCAST);
		
		pBaseVideoDeviceInstance = pIDeviceInfo->OpenVideoDevice(sIdentifier);

		*pVideoDeviceInstance = (IBase*)(pBaseVideoDeviceInstance);
		return LIBMCDRIVER_CAMERA_SUCCESS;
	}
	catch (ELibMCDriver_CameraInterfaceException & Exception) {
		return handleLibMCDriver_CameraException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}


/*************************************************************************************************************************
 Class implementation for DeviceList
**************************************************************************************************************************/
LibMCDriver_CameraResult libmcdriver_camera_devicelist_getcount(LibMCDriver_Camera_DeviceList pDeviceList, LibMCDriver_Camera_uint32 * pCount)
{
	IBase* pIBaseClass = (IBase *)pDeviceList;

	try {
		if (pCount == nullptr)
			throw ELibMCDriver_CameraInterfaceException (LIBMCDRIVER_CAMERA_ERROR_INVALIDPARAM);
		IDeviceList* pIDeviceList = dynamic_cast<IDeviceList*>(pIBaseClass);
		if (!pIDeviceList)
			throw ELibMCDriver_CameraInterfaceException(LIBMCDRIVER_CAMERA_ERROR_INVALIDCAST);
		
		*pCount = pIDeviceList->GetCount();

		return LIBMCDRIVER_CAMERA_SUCCESS;
	}
	catch (ELibMCDriver_CameraInterfaceException & Exception) {
		return handleLibMCDriver_CameraException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_CameraResult libmcdriver_camera_devicelist_getdeviceinfo(LibMCDriver_Camera_DeviceList pDeviceList, LibMCDriver_Camera_uint32 nIndex, LibMCDriver_Camera_DeviceInfo * pDeviceInfoInstance)
{
	IBase* pIBaseClass = (IBase *)pDeviceList;

	try {
		if (pDeviceInfoInstance == nullptr)
			throw ELibMCDriver_CameraInterfaceException (LIBMCDRIVER_CAMERA_ERROR_INVALIDPARAM);
		IBase* pBaseDeviceInfoInstance(nullptr);
		IDeviceList* pIDeviceList = dynamic_cast<IDeviceList*>(pIBaseClass);
		if (!pIDeviceList)
			throw ELibMCDriver_CameraInterfaceException(LIBMCDRIVER_CAMERA_ERROR_INVALIDCAST);
		
		pBaseDeviceInfoInstance = pIDeviceList->GetDeviceInfo(nIndex);

		*pDeviceInfoInstance = (IBase*)(pBaseDeviceInfoInstance);
		return LIBMCDRIVER_CAMERA_SUCCESS;
	}
	catch (ELibMCDriver_CameraInterfaceException & Exception) {
		return handleLibMCDriver_CameraException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_CameraResult libmcdriver_camera_devicelist_finddeviceinfobyoperatingsystemname(LibMCDriver_Camera_DeviceList pDeviceList, const char * pOperatingSystemName, bool bMustExist, LibMCDriver_Camera_DeviceInfo * pDeviceInfoInstance)
{
	IBase* pIBaseClass = (IBase *)pDeviceList;

	try {
		if (pOperatingSystemName == nullptr)
			throw ELibMCDriver_CameraInterfaceException (LIBMCDRIVER_CAMERA_ERROR_INVALIDPARAM);
		if (pDeviceInfoInstance == nullptr)
			throw ELibMCDriver_CameraInterfaceException (LIBMCDRIVER_CAMERA_ERROR_INVALIDPARAM);
		std::string sOperatingSystemName(pOperatingSystemName);
		IBase* pBaseDeviceInfoInstance(nullptr);
		IDeviceList* pIDeviceList = dynamic_cast<IDeviceList*>(pIBaseClass);
		if (!pIDeviceList)
			throw ELibMCDriver_CameraInterfaceException(LIBMCDRIVER_CAMERA_ERROR_INVALIDCAST);
		
		pBaseDeviceInfoInstance = pIDeviceList->FindDeviceInfoByOperatingSystemName(sOperatingSystemName, bMustExist);

		*pDeviceInfoInstance = (IBase*)(pBaseDeviceInfoInstance);
		return LIBMCDRIVER_CAMERA_SUCCESS;
	}
	catch (ELibMCDriver_CameraInterfaceException & Exception) {
		return handleLibMCDriver_CameraException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}


/*************************************************************************************************************************
 Class implementation for Driver_Camera
**************************************************************************************************************************/
LibMCDriver_CameraResult libmcdriver_camera_driver_camera_enumeratedevices(LibMCDriver_Camera_Driver_Camera pDriver_Camera, LibMCDriver_Camera_DeviceList * pDeviceListInstance)
{
	IBase* pIBaseClass = (IBase *)pDriver_Camera;

	try {
		if (pDeviceListInstance == nullptr)
			throw ELibMCDriver_CameraInterfaceException (LIBMCDRIVER_CAMERA_ERROR_INVALIDPARAM);
		IBase* pBaseDeviceListInstance(nullptr);
		IDriver_Camera* pIDriver_Camera = dynamic_cast<IDriver_Camera*>(pIBaseClass);
		if (!pIDriver_Camera)
			throw ELibMCDriver_CameraInterfaceException(LIBMCDRIVER_CAMERA_ERROR_INVALIDCAST);
		
		pBaseDeviceListInstance = pIDriver_Camera->EnumerateDevices();

		*pDeviceListInstance = (IBase*)(pBaseDeviceListInstance);
		return LIBMCDRIVER_CAMERA_SUCCESS;
	}
	catch (ELibMCDriver_CameraInterfaceException & Exception) {
		return handleLibMCDriver_CameraException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_CameraResult libmcdriver_camera_driver_camera_finddevicebyidentifier(LibMCDriver_Camera_Driver_Camera pDriver_Camera, const char * pIdentifier, bool bMustExist, LibMCDriver_Camera_VideoDevice * pDeviceInstance)
{
	IBase* pIBaseClass = (IBase *)pDriver_Camera;

	try {
		if (pIdentifier == nullptr)
			throw ELibMCDriver_CameraInterfaceException (LIBMCDRIVER_CAMERA_ERROR_INVALIDPARAM);
		if (pDeviceInstance == nullptr)
			throw ELibMCDriver_CameraInterfaceException (LIBMCDRIVER_CAMERA_ERROR_INVALIDPARAM);
		std::string sIdentifier(pIdentifier);
		IBase* pBaseDeviceInstance(nullptr);
		IDriver_Camera* pIDriver_Camera = dynamic_cast<IDriver_Camera*>(pIBaseClass);
		if (!pIDriver_Camera)
			throw ELibMCDriver_CameraInterfaceException(LIBMCDRIVER_CAMERA_ERROR_INVALIDCAST);
		
		pBaseDeviceInstance = pIDriver_Camera->FindDeviceByIdentifier(sIdentifier, bMustExist);

		*pDeviceInstance = (IBase*)(pBaseDeviceInstance);
		return LIBMCDRIVER_CAMERA_SUCCESS;
	}
	catch (ELibMCDriver_CameraInterfaceException & Exception) {
		return handleLibMCDriver_CameraException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_CameraResult libmcdriver_camera_driver_camera_finddevicebyoperatingsystemname(LibMCDriver_Camera_Driver_Camera pDriver_Camera, const char * pOperatingSystemName, bool bMustExist, LibMCDriver_Camera_VideoDevice * pDeviceInstance)
{
	IBase* pIBaseClass = (IBase *)pDriver_Camera;

	try {
		if (pOperatingSystemName == nullptr)
			throw ELibMCDriver_CameraInterfaceException (LIBMCDRIVER_CAMERA_ERROR_INVALIDPARAM);
		if (pDeviceInstance == nullptr)
			throw ELibMCDriver_CameraInterfaceException (LIBMCDRIVER_CAMERA_ERROR_INVALIDPARAM);
		std::string sOperatingSystemName(pOperatingSystemName);
		IBase* pBaseDeviceInstance(nullptr);
		IDriver_Camera* pIDriver_Camera = dynamic_cast<IDriver_Camera*>(pIBaseClass);
		if (!pIDriver_Camera)
			throw ELibMCDriver_CameraInterfaceException(LIBMCDRIVER_CAMERA_ERROR_INVALIDCAST);
		
		pBaseDeviceInstance = pIDriver_Camera->FindDeviceByOperatingSystemName(sOperatingSystemName, bMustExist);

		*pDeviceInstance = (IBase*)(pBaseDeviceInstance);
		return LIBMCDRIVER_CAMERA_SUCCESS;
	}
	catch (ELibMCDriver_CameraInterfaceException & Exception) {
		return handleLibMCDriver_CameraException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}


/*************************************************************************************************************************
 Class implementation for Driver_Camera_Windows
**************************************************************************************************************************/


/*************************************************************************************************************************
 Function table lookup implementation
**************************************************************************************************************************/

LibMCDriver_CameraResult LibMCDriver_Camera::Impl::LibMCDriver_Camera_GetProcAddress (const char * pProcName, void ** ppProcAddress)
{
	if (pProcName == nullptr)
		return LIBMCDRIVER_CAMERA_ERROR_INVALIDPARAM;
	if (ppProcAddress == nullptr)
		return LIBMCDRIVER_CAMERA_ERROR_INVALIDPARAM;
	*ppProcAddress = nullptr;
	std::string sProcName (pProcName);
	
	if (sProcName == "libmcdriver_camera_driver_configure") 
		*ppProcAddress = (void*) &libmcdriver_camera_driver_configure;
	if (sProcName == "libmcdriver_camera_driver_getname") 
		*ppProcAddress = (void*) &libmcdriver_camera_driver_getname;
	if (sProcName == "libmcdriver_camera_driver_gettype") 
		*ppProcAddress = (void*) &libmcdriver_camera_driver_gettype;
	if (sProcName == "libmcdriver_camera_driver_getversion") 
		*ppProcAddress = (void*) &libmcdriver_camera_driver_getversion;
	if (sProcName == "libmcdriver_camera_driver_queryparameters") 
		*ppProcAddress = (void*) &libmcdriver_camera_driver_queryparameters;
	if (sProcName == "libmcdriver_camera_driver_queryparametersex") 
		*ppProcAddress = (void*) &libmcdriver_camera_driver_queryparametersex;
	if (sProcName == "libmcdriver_camera_devicebase_getfriendlyname") 
		*ppProcAddress = (void*) &libmcdriver_camera_devicebase_getfriendlyname;
	if (sProcName == "libmcdriver_camera_devicebase_getoperatingsystemname") 
		*ppProcAddress = (void*) &libmcdriver_camera_devicebase_getoperatingsystemname;
	if (sProcName == "libmcdriver_camera_devicebase_isvideodevice") 
		*ppProcAddress = (void*) &libmcdriver_camera_devicebase_isvideodevice;
	if (sProcName == "libmcdriver_camera_videodevice_getidentifier") 
		*ppProcAddress = (void*) &libmcdriver_camera_videodevice_getidentifier;
	if (sProcName == "libmcdriver_camera_videodevice_getcurrentresolution") 
		*ppProcAddress = (void*) &libmcdriver_camera_videodevice_getcurrentresolution;
	if (sProcName == "libmcdriver_camera_videodevice_setresolution") 
		*ppProcAddress = (void*) &libmcdriver_camera_videodevice_setresolution;
	if (sProcName == "libmcdriver_camera_videodevice_capturerawimage") 
		*ppProcAddress = (void*) &libmcdriver_camera_videodevice_capturerawimage;
	if (sProcName == "libmcdriver_camera_videodevice_startstreamcapture") 
		*ppProcAddress = (void*) &libmcdriver_camera_videodevice_startstreamcapture;
	if (sProcName == "libmcdriver_camera_videodevice_stopstreamcapture") 
		*ppProcAddress = (void*) &libmcdriver_camera_videodevice_stopstreamcapture;
	if (sProcName == "libmcdriver_camera_videodevice_streamcaptureisactive") 
		*ppProcAddress = (void*) &libmcdriver_camera_videodevice_streamcaptureisactive;
	if (sProcName == "libmcdriver_camera_videodevice_getstreamcapturestatistics") 
		*ppProcAddress = (void*) &libmcdriver_camera_videodevice_getstreamcapturestatistics;
	if (sProcName == "libmcdriver_camera_deviceinfo_openvideodevice") 
		*ppProcAddress = (void*) &libmcdriver_camera_deviceinfo_openvideodevice;
	if (sProcName == "libmcdriver_camera_devicelist_getcount") 
		*ppProcAddress = (void*) &libmcdriver_camera_devicelist_getcount;
	if (sProcName == "libmcdriver_camera_devicelist_getdeviceinfo") 
		*ppProcAddress = (void*) &libmcdriver_camera_devicelist_getdeviceinfo;
	if (sProcName == "libmcdriver_camera_devicelist_finddeviceinfobyoperatingsystemname") 
		*ppProcAddress = (void*) &libmcdriver_camera_devicelist_finddeviceinfobyoperatingsystemname;
	if (sProcName == "libmcdriver_camera_driver_camera_enumeratedevices") 
		*ppProcAddress = (void*) &libmcdriver_camera_driver_camera_enumeratedevices;
	if (sProcName == "libmcdriver_camera_driver_camera_finddevicebyidentifier") 
		*ppProcAddress = (void*) &libmcdriver_camera_driver_camera_finddevicebyidentifier;
	if (sProcName == "libmcdriver_camera_driver_camera_finddevicebyoperatingsystemname") 
		*ppProcAddress = (void*) &libmcdriver_camera_driver_camera_finddevicebyoperatingsystemname;
	if (sProcName == "libmcdriver_camera_getversion") 
		*ppProcAddress = (void*) &libmcdriver_camera_getversion;
	if (sProcName == "libmcdriver_camera_getlasterror") 
		*ppProcAddress = (void*) &libmcdriver_camera_getlasterror;
	if (sProcName == "libmcdriver_camera_releaseinstance") 
		*ppProcAddress = (void*) &libmcdriver_camera_releaseinstance;
	if (sProcName == "libmcdriver_camera_acquireinstance") 
		*ppProcAddress = (void*) &libmcdriver_camera_acquireinstance;
	if (sProcName == "libmcdriver_camera_injectcomponent") 
		*ppProcAddress = (void*) &libmcdriver_camera_injectcomponent;
	if (sProcName == "libmcdriver_camera_getsymbollookupmethod") 
		*ppProcAddress = (void*) &libmcdriver_camera_getsymbollookupmethod;
	if (sProcName == "libmcdriver_camera_createdriver") 
		*ppProcAddress = (void*) &libmcdriver_camera_createdriver;
	
	if (*ppProcAddress == nullptr) 
		return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
	return LIBMCDRIVER_CAMERA_SUCCESS;
}

/*************************************************************************************************************************
 Global functions implementation
**************************************************************************************************************************/
LibMCDriver_CameraResult libmcdriver_camera_getversion(LibMCDriver_Camera_uint32 * pMajor, LibMCDriver_Camera_uint32 * pMinor, LibMCDriver_Camera_uint32 * pMicro)
{
	IBase* pIBaseClass = nullptr;

	try {
		if (!pMajor)
			throw ELibMCDriver_CameraInterfaceException (LIBMCDRIVER_CAMERA_ERROR_INVALIDPARAM);
		if (!pMinor)
			throw ELibMCDriver_CameraInterfaceException (LIBMCDRIVER_CAMERA_ERROR_INVALIDPARAM);
		if (!pMicro)
			throw ELibMCDriver_CameraInterfaceException (LIBMCDRIVER_CAMERA_ERROR_INVALIDPARAM);
		CWrapper::GetVersion(*pMajor, *pMinor, *pMicro);

		return LIBMCDRIVER_CAMERA_SUCCESS;
	}
	catch (ELibMCDriver_CameraInterfaceException & Exception) {
		return handleLibMCDriver_CameraException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_CameraResult libmcdriver_camera_getlasterror(LibMCDriver_Camera_Base pInstance, const LibMCDriver_Camera_uint32 nErrorMessageBufferSize, LibMCDriver_Camera_uint32* pErrorMessageNeededChars, char * pErrorMessageBuffer, bool * pHasError)
{
	IBase* pIBaseClass = nullptr;

	try {
		if ( (!pErrorMessageBuffer) && !(pErrorMessageNeededChars) )
			throw ELibMCDriver_CameraInterfaceException (LIBMCDRIVER_CAMERA_ERROR_INVALIDPARAM);
		if (pHasError == nullptr)
			throw ELibMCDriver_CameraInterfaceException (LIBMCDRIVER_CAMERA_ERROR_INVALIDPARAM);
		IBase* pIBaseClassInstance = (IBase *)pInstance;
		IBase* pIInstance = dynamic_cast<IBase*>(pIBaseClassInstance);
		if (!pIInstance)
			throw ELibMCDriver_CameraInterfaceException (LIBMCDRIVER_CAMERA_ERROR_INVALIDCAST);
		
		std::string sErrorMessage("");
		*pHasError = CWrapper::GetLastError(pIInstance, sErrorMessage);

		if (pErrorMessageNeededChars)
			*pErrorMessageNeededChars = (LibMCDriver_Camera_uint32) (sErrorMessage.size()+1);
		if (pErrorMessageBuffer) {
			if (sErrorMessage.size() >= nErrorMessageBufferSize)
				throw ELibMCDriver_CameraInterfaceException (LIBMCDRIVER_CAMERA_ERROR_BUFFERTOOSMALL);
			for (size_t iErrorMessage = 0; iErrorMessage < sErrorMessage.size(); iErrorMessage++)
				pErrorMessageBuffer[iErrorMessage] = sErrorMessage[iErrorMessage];
			pErrorMessageBuffer[sErrorMessage.size()] = 0;
		}
		return LIBMCDRIVER_CAMERA_SUCCESS;
	}
	catch (ELibMCDriver_CameraInterfaceException & Exception) {
		return handleLibMCDriver_CameraException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_CameraResult libmcdriver_camera_releaseinstance(LibMCDriver_Camera_Base pInstance)
{
	IBase* pIBaseClass = nullptr;

	try {
		IBase* pIBaseClassInstance = (IBase *)pInstance;
		IBase* pIInstance = dynamic_cast<IBase*>(pIBaseClassInstance);
		if (!pIInstance)
			throw ELibMCDriver_CameraInterfaceException (LIBMCDRIVER_CAMERA_ERROR_INVALIDCAST);
		
		CWrapper::ReleaseInstance(pIInstance);

		return LIBMCDRIVER_CAMERA_SUCCESS;
	}
	catch (ELibMCDriver_CameraInterfaceException & Exception) {
		return handleLibMCDriver_CameraException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_CameraResult libmcdriver_camera_acquireinstance(LibMCDriver_Camera_Base pInstance)
{
	IBase* pIBaseClass = nullptr;

	try {
		IBase* pIBaseClassInstance = (IBase *)pInstance;
		IBase* pIInstance = dynamic_cast<IBase*>(pIBaseClassInstance);
		if (!pIInstance)
			throw ELibMCDriver_CameraInterfaceException (LIBMCDRIVER_CAMERA_ERROR_INVALIDCAST);
		
		CWrapper::AcquireInstance(pIInstance);

		return LIBMCDRIVER_CAMERA_SUCCESS;
	}
	catch (ELibMCDriver_CameraInterfaceException & Exception) {
		return handleLibMCDriver_CameraException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_CameraResult libmcdriver_camera_injectcomponent(const char * pNameSpace, LibMCDriver_Camera_pvoid pSymbolAddressMethod)
{
	IBase* pIBaseClass = nullptr;

	try {
		if (pNameSpace == nullptr)
			throw ELibMCDriver_CameraInterfaceException (LIBMCDRIVER_CAMERA_ERROR_INVALIDPARAM);
		std::string sNameSpace(pNameSpace);
		
		bool bNameSpaceFound = false;
		
		if (sNameSpace == "LibMCEnv") {
			if (CWrapper::sPLibMCEnvWrapper.get() != nullptr) {
				throw ELibMCDriver_CameraInterfaceException(LIBMCDRIVER_CAMERA_ERROR_COULDNOTLOADLIBRARY);
			}
			CWrapper::sPLibMCEnvWrapper = LibMCEnv::CWrapper::loadLibraryFromSymbolLookupMethod(pSymbolAddressMethod);
			bNameSpaceFound = true;
		}
		
		if (!bNameSpaceFound)
			throw ELibMCDriver_CameraInterfaceException(LIBMCDRIVER_CAMERA_ERROR_COULDNOTLOADLIBRARY);
		
		return LIBMCDRIVER_CAMERA_SUCCESS;
	}
	catch (ELibMCDriver_CameraInterfaceException & Exception) {
		return handleLibMCDriver_CameraException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_CameraResult libmcdriver_camera_getsymbollookupmethod(LibMCDriver_Camera_pvoid * pSymbolLookupMethod)
{
	IBase* pIBaseClass = nullptr;

	try {
		if (pSymbolLookupMethod == nullptr)
			throw ELibMCDriver_CameraInterfaceException (LIBMCDRIVER_CAMERA_ERROR_INVALIDPARAM);
		*pSymbolLookupMethod = (void*)&LibMCDriver_Camera::Impl::LibMCDriver_Camera_GetProcAddress;
		return LIBMCDRIVER_CAMERA_SUCCESS;
	}
	catch (ELibMCDriver_CameraInterfaceException & Exception) {
		return handleLibMCDriver_CameraException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_CameraResult libmcdriver_camera_createdriver(const char * pName, const char * pType, LibMCEnv_DriverEnvironment pDriverEnvironment, LibMCDriver_Camera_Driver * pInstance)
{
	IBase* pIBaseClass = nullptr;

	try {
		if (pName == nullptr)
			throw ELibMCDriver_CameraInterfaceException (LIBMCDRIVER_CAMERA_ERROR_INVALIDPARAM);
		if (pType == nullptr)
			throw ELibMCDriver_CameraInterfaceException (LIBMCDRIVER_CAMERA_ERROR_INVALIDPARAM);
		if (pInstance == nullptr)
			throw ELibMCDriver_CameraInterfaceException (LIBMCDRIVER_CAMERA_ERROR_INVALIDPARAM);
		std::string sName(pName);
		std::string sType(pType);
		LibMCEnv::PDriverEnvironment pIDriverEnvironment = std::make_shared<LibMCEnv::CDriverEnvironment>(CWrapper::sPLibMCEnvWrapper.get(), pDriverEnvironment);
		CWrapper::sPLibMCEnvWrapper->AcquireInstance(pIDriverEnvironment.get());
		if (!pIDriverEnvironment)
			throw ELibMCDriver_CameraInterfaceException (LIBMCDRIVER_CAMERA_ERROR_INVALIDCAST);
		
		IBase* pBaseInstance(nullptr);
		pBaseInstance = CWrapper::CreateDriver(sName, sType, pIDriverEnvironment);

		*pInstance = (IBase*)(pBaseInstance);
		return LIBMCDRIVER_CAMERA_SUCCESS;
	}
	catch (ELibMCDriver_CameraInterfaceException & Exception) {
		return handleLibMCDriver_CameraException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}


