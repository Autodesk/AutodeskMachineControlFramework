/*++

Copyright (C) 2020 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.7.0-develop.

Abstract: This is an autogenerated C++ implementation file in order to allow easy
development of MC Driver Camera. The functions in this file need to be implemented. It needs to be generated only once.

Interface version: 1.0.0

*/

#include "libmcdriver_camera_abi.hpp"
#include "libmcdriver_camera_interfaces.hpp"
#include "libmcdriver_camera_interfaceexception.hpp"

#include <map>

using namespace LibMCDriver_Camera::Impl;

LibMCDriver_CameraResult handleLibMCDriver_CameraException(IBase * pIBaseClass, ELibMCDriver_CameraInterfaceException & Exception)
{
	LibMCDriver_CameraResult errorCode = Exception.getErrorCode();

	if (pIBaseClass != nullptr)
		pIBaseClass->RegisterErrorMessage(Exception.what());

	return errorCode;
}

LibMCDriver_CameraResult handleStdException(IBase * pIBaseClass, std::exception & Exception)
{
	LibMCDriver_CameraResult errorCode = LIBMCDRIVER_CAMERA_ERROR_GENERICEXCEPTION;

	if (pIBaseClass != nullptr)
		pIBaseClass->RegisterErrorMessage(Exception.what());

	return errorCode;
}

LibMCDriver_CameraResult handleUnhandledException(IBase * pIBaseClass)
{
	LibMCDriver_CameraResult errorCode = LIBMCDRIVER_CAMERA_ERROR_GENERICEXCEPTION;

	if (pIBaseClass != nullptr)
		pIBaseClass->RegisterErrorMessage("Unhandled Exception");

	return errorCode;
}



/*************************************************************************************************************************
 Class implementation for Base
**************************************************************************************************************************/

/*************************************************************************************************************************
 Class implementation for Driver
**************************************************************************************************************************/
LibMCDriver_CameraResult libmcdriver_camera_driver_getname(LibMCDriver_Camera_Driver pDriver, const LibMCDriver_Camera_uint32 nNameBufferSize, LibMCDriver_Camera_uint32* pNameNeededChars, char * pNameBuffer)
{
	IBase* pIBaseClass = (IBase *)pDriver;

	try {
		if ( (!pNameBuffer) && !(pNameNeededChars) )
			throw ELibMCDriver_CameraInterfaceException (LIBMCDRIVER_CAMERA_ERROR_INVALIDPARAM);
		std::string sName("");
		IDriver* pIDriver = dynamic_cast<IDriver*>(pIBaseClass);
		if (!pIDriver)
			throw ELibMCDriver_CameraInterfaceException(LIBMCDRIVER_CAMERA_ERROR_INVALIDCAST);
		
		bool isCacheCall = (pNameBuffer == nullptr);
		if (isCacheCall) {
			sName = pIDriver->GetName();

			pIDriver->_setCache (new ParameterCache_1<std::string> (sName));
		}
		else {
			auto cache = dynamic_cast<ParameterCache_1<std::string>*> (pIDriver->_getCache ());
			if (cache == nullptr)
				throw ELibMCDriver_CameraInterfaceException(LIBMCDRIVER_CAMERA_ERROR_INVALIDCAST);
			cache->retrieveData (sName);
			pIDriver->_setCache (nullptr);
		}
		
		if (pNameNeededChars)
			*pNameNeededChars = (LibMCDriver_Camera_uint32) (sName.size()+1);
		if (pNameBuffer) {
			if (sName.size() >= nNameBufferSize)
				throw ELibMCDriver_CameraInterfaceException (LIBMCDRIVER_CAMERA_ERROR_BUFFERTOOSMALL);
			for (size_t iName = 0; iName < sName.size(); iName++)
				pNameBuffer[iName] = sName[iName];
			pNameBuffer[sName.size()] = 0;
		}
		return LIBMCDRIVER_CAMERA_SUCCESS;
	}
	catch (ELibMCDriver_CameraInterfaceException & Exception) {
		return handleLibMCDriver_CameraException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_CameraResult libmcdriver_camera_driver_gettype(LibMCDriver_Camera_Driver pDriver, const LibMCDriver_Camera_uint32 nTypeBufferSize, LibMCDriver_Camera_uint32* pTypeNeededChars, char * pTypeBuffer)
{
	IBase* pIBaseClass = (IBase *)pDriver;

	try {
		if ( (!pTypeBuffer) && !(pTypeNeededChars) )
			throw ELibMCDriver_CameraInterfaceException (LIBMCDRIVER_CAMERA_ERROR_INVALIDPARAM);
		std::string sType("");
		IDriver* pIDriver = dynamic_cast<IDriver*>(pIBaseClass);
		if (!pIDriver)
			throw ELibMCDriver_CameraInterfaceException(LIBMCDRIVER_CAMERA_ERROR_INVALIDCAST);
		
		bool isCacheCall = (pTypeBuffer == nullptr);
		if (isCacheCall) {
			sType = pIDriver->GetType();

			pIDriver->_setCache (new ParameterCache_1<std::string> (sType));
		}
		else {
			auto cache = dynamic_cast<ParameterCache_1<std::string>*> (pIDriver->_getCache ());
			if (cache == nullptr)
				throw ELibMCDriver_CameraInterfaceException(LIBMCDRIVER_CAMERA_ERROR_INVALIDCAST);
			cache->retrieveData (sType);
			pIDriver->_setCache (nullptr);
		}
		
		if (pTypeNeededChars)
			*pTypeNeededChars = (LibMCDriver_Camera_uint32) (sType.size()+1);
		if (pTypeBuffer) {
			if (sType.size() >= nTypeBufferSize)
				throw ELibMCDriver_CameraInterfaceException (LIBMCDRIVER_CAMERA_ERROR_BUFFERTOOSMALL);
			for (size_t iType = 0; iType < sType.size(); iType++)
				pTypeBuffer[iType] = sType[iType];
			pTypeBuffer[sType.size()] = 0;
		}
		return LIBMCDRIVER_CAMERA_SUCCESS;
	}
	catch (ELibMCDriver_CameraInterfaceException & Exception) {
		return handleLibMCDriver_CameraException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_CameraResult libmcdriver_camera_driver_getversion(LibMCDriver_Camera_Driver pDriver, LibMCDriver_Camera_uint32 * pMajor, LibMCDriver_Camera_uint32 * pMinor, LibMCDriver_Camera_uint32 * pMicro, const LibMCDriver_Camera_uint32 nBuildBufferSize, LibMCDriver_Camera_uint32* pBuildNeededChars, char * pBuildBuffer)
{
	IBase* pIBaseClass = (IBase *)pDriver;

	try {
		if (!pMajor)
			throw ELibMCDriver_CameraInterfaceException (LIBMCDRIVER_CAMERA_ERROR_INVALIDPARAM);
		if (!pMinor)
			throw ELibMCDriver_CameraInterfaceException (LIBMCDRIVER_CAMERA_ERROR_INVALIDPARAM);
		if (!pMicro)
			throw ELibMCDriver_CameraInterfaceException (LIBMCDRIVER_CAMERA_ERROR_INVALIDPARAM);
		if ( (!pBuildBuffer) && !(pBuildNeededChars) )
			throw ELibMCDriver_CameraInterfaceException (LIBMCDRIVER_CAMERA_ERROR_INVALIDPARAM);
		std::string sBuild("");
		IDriver* pIDriver = dynamic_cast<IDriver*>(pIBaseClass);
		if (!pIDriver)
			throw ELibMCDriver_CameraInterfaceException(LIBMCDRIVER_CAMERA_ERROR_INVALIDCAST);
		
		bool isCacheCall = (pBuildBuffer == nullptr);
		if (isCacheCall) {
			pIDriver->GetVersion(*pMajor, *pMinor, *pMicro, sBuild);

			pIDriver->_setCache (new ParameterCache_4<LibMCDriver_Camera_uint32, LibMCDriver_Camera_uint32, LibMCDriver_Camera_uint32, std::string> (*pMajor, *pMinor, *pMicro, sBuild));
		}
		else {
			auto cache = dynamic_cast<ParameterCache_4<LibMCDriver_Camera_uint32, LibMCDriver_Camera_uint32, LibMCDriver_Camera_uint32, std::string>*> (pIDriver->_getCache ());
			if (cache == nullptr)
				throw ELibMCDriver_CameraInterfaceException(LIBMCDRIVER_CAMERA_ERROR_INVALIDCAST);
			cache->retrieveData (*pMajor, *pMinor, *pMicro, sBuild);
			pIDriver->_setCache (nullptr);
		}
		
		if (pBuildNeededChars)
			*pBuildNeededChars = (LibMCDriver_Camera_uint32) (sBuild.size()+1);
		if (pBuildBuffer) {
			if (sBuild.size() >= nBuildBufferSize)
				throw ELibMCDriver_CameraInterfaceException (LIBMCDRIVER_CAMERA_ERROR_BUFFERTOOSMALL);
			for (size_t iBuild = 0; iBuild < sBuild.size(); iBuild++)
				pBuildBuffer[iBuild] = sBuild[iBuild];
			pBuildBuffer[sBuild.size()] = 0;
		}
		return LIBMCDRIVER_CAMERA_SUCCESS;
	}
	catch (ELibMCDriver_CameraInterfaceException & Exception) {
		return handleLibMCDriver_CameraException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_CameraResult libmcdriver_camera_driver_getheaderinformation(LibMCDriver_Camera_Driver pDriver, const LibMCDriver_Camera_uint32 nNameSpaceBufferSize, LibMCDriver_Camera_uint32* pNameSpaceNeededChars, char * pNameSpaceBuffer, const LibMCDriver_Camera_uint32 nBaseNameBufferSize, LibMCDriver_Camera_uint32* pBaseNameNeededChars, char * pBaseNameBuffer)
{
	IBase* pIBaseClass = (IBase *)pDriver;

	try {
		if ( (!pNameSpaceBuffer) && !(pNameSpaceNeededChars) )
			throw ELibMCDriver_CameraInterfaceException (LIBMCDRIVER_CAMERA_ERROR_INVALIDPARAM);
		if ( (!pBaseNameBuffer) && !(pBaseNameNeededChars) )
			throw ELibMCDriver_CameraInterfaceException (LIBMCDRIVER_CAMERA_ERROR_INVALIDPARAM);
		std::string sNameSpace("");
		std::string sBaseName("");
		IDriver* pIDriver = dynamic_cast<IDriver*>(pIBaseClass);
		if (!pIDriver)
			throw ELibMCDriver_CameraInterfaceException(LIBMCDRIVER_CAMERA_ERROR_INVALIDCAST);
		
		bool isCacheCall = (pNameSpaceBuffer == nullptr) || (pBaseNameBuffer == nullptr);
		if (isCacheCall) {
			pIDriver->GetHeaderInformation(sNameSpace, sBaseName);

			pIDriver->_setCache (new ParameterCache_2<std::string, std::string> (sNameSpace, sBaseName));
		}
		else {
			auto cache = dynamic_cast<ParameterCache_2<std::string, std::string>*> (pIDriver->_getCache ());
			if (cache == nullptr)
				throw ELibMCDriver_CameraInterfaceException(LIBMCDRIVER_CAMERA_ERROR_INVALIDCAST);
			cache->retrieveData (sNameSpace, sBaseName);
			pIDriver->_setCache (nullptr);
		}
		
		if (pNameSpaceNeededChars)
			*pNameSpaceNeededChars = (LibMCDriver_Camera_uint32) (sNameSpace.size()+1);
		if (pNameSpaceBuffer) {
			if (sNameSpace.size() >= nNameSpaceBufferSize)
				throw ELibMCDriver_CameraInterfaceException (LIBMCDRIVER_CAMERA_ERROR_BUFFERTOOSMALL);
			for (size_t iNameSpace = 0; iNameSpace < sNameSpace.size(); iNameSpace++)
				pNameSpaceBuffer[iNameSpace] = sNameSpace[iNameSpace];
			pNameSpaceBuffer[sNameSpace.size()] = 0;
		}
		if (pBaseNameNeededChars)
			*pBaseNameNeededChars = (LibMCDriver_Camera_uint32) (sBaseName.size()+1);
		if (pBaseNameBuffer) {
			if (sBaseName.size() >= nBaseNameBufferSize)
				throw ELibMCDriver_CameraInterfaceException (LIBMCDRIVER_CAMERA_ERROR_BUFFERTOOSMALL);
			for (size_t iBaseName = 0; iBaseName < sBaseName.size(); iBaseName++)
				pBaseNameBuffer[iBaseName] = sBaseName[iBaseName];
			pBaseNameBuffer[sBaseName.size()] = 0;
		}
		return LIBMCDRIVER_CAMERA_SUCCESS;
	}
	catch (ELibMCDriver_CameraInterfaceException & Exception) {
		return handleLibMCDriver_CameraException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}


/*************************************************************************************************************************
 Class implementation for Iterator
**************************************************************************************************************************/
LibMCDriver_CameraResult libmcdriver_camera_iterator_movenext(LibMCDriver_Camera_Iterator pIterator, bool * pHasNext)
{
	IBase* pIBaseClass = (IBase *)pIterator;

	try {
		if (pHasNext == nullptr)
			throw ELibMCDriver_CameraInterfaceException (LIBMCDRIVER_CAMERA_ERROR_INVALIDPARAM);
		IIterator* pIIterator = dynamic_cast<IIterator*>(pIBaseClass);
		if (!pIIterator)
			throw ELibMCDriver_CameraInterfaceException(LIBMCDRIVER_CAMERA_ERROR_INVALIDCAST);
		
		*pHasNext = pIIterator->MoveNext();

		return LIBMCDRIVER_CAMERA_SUCCESS;
	}
	catch (ELibMCDriver_CameraInterfaceException & Exception) {
		return handleLibMCDriver_CameraException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_CameraResult libmcdriver_camera_iterator_moveprevious(LibMCDriver_Camera_Iterator pIterator, bool * pHasPrevious)
{
	IBase* pIBaseClass = (IBase *)pIterator;

	try {
		if (pHasPrevious == nullptr)
			throw ELibMCDriver_CameraInterfaceException (LIBMCDRIVER_CAMERA_ERROR_INVALIDPARAM);
		IIterator* pIIterator = dynamic_cast<IIterator*>(pIBaseClass);
		if (!pIIterator)
			throw ELibMCDriver_CameraInterfaceException(LIBMCDRIVER_CAMERA_ERROR_INVALIDCAST);
		
		*pHasPrevious = pIIterator->MovePrevious();

		return LIBMCDRIVER_CAMERA_SUCCESS;
	}
	catch (ELibMCDriver_CameraInterfaceException & Exception) {
		return handleLibMCDriver_CameraException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_CameraResult libmcdriver_camera_iterator_getcurrent(LibMCDriver_Camera_Iterator pIterator, LibMCDriver_Camera_Base * pCurrentInstance)
{
	IBase* pIBaseClass = (IBase *)pIterator;

	try {
		if (pCurrentInstance == nullptr)
			throw ELibMCDriver_CameraInterfaceException (LIBMCDRIVER_CAMERA_ERROR_INVALIDPARAM);
		IBase* pBaseCurrentInstance(nullptr);
		IIterator* pIIterator = dynamic_cast<IIterator*>(pIBaseClass);
		if (!pIIterator)
			throw ELibMCDriver_CameraInterfaceException(LIBMCDRIVER_CAMERA_ERROR_INVALIDCAST);
		
		pBaseCurrentInstance = pIIterator->GetCurrent();

		*pCurrentInstance = (IBase*)(pBaseCurrentInstance);
		return LIBMCDRIVER_CAMERA_SUCCESS;
	}
	catch (ELibMCDriver_CameraInterfaceException & Exception) {
		return handleLibMCDriver_CameraException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_CameraResult libmcdriver_camera_iterator_clone(LibMCDriver_Camera_Iterator pIterator, LibMCDriver_Camera_Iterator * pOutIterator)
{
	IBase* pIBaseClass = (IBase *)pIterator;

	try {
		if (pOutIterator == nullptr)
			throw ELibMCDriver_CameraInterfaceException (LIBMCDRIVER_CAMERA_ERROR_INVALIDPARAM);
		IBase* pBaseOutIterator(nullptr);
		IIterator* pIIterator = dynamic_cast<IIterator*>(pIBaseClass);
		if (!pIIterator)
			throw ELibMCDriver_CameraInterfaceException(LIBMCDRIVER_CAMERA_ERROR_INVALIDCAST);
		
		pBaseOutIterator = pIIterator->Clone();

		*pOutIterator = (IBase*)(pBaseOutIterator);
		return LIBMCDRIVER_CAMERA_SUCCESS;
	}
	catch (ELibMCDriver_CameraInterfaceException & Exception) {
		return handleLibMCDriver_CameraException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_CameraResult libmcdriver_camera_iterator_count(LibMCDriver_Camera_Iterator pIterator, LibMCDriver_Camera_uint64 * pCount)
{
	IBase* pIBaseClass = (IBase *)pIterator;

	try {
		if (pCount == nullptr)
			throw ELibMCDriver_CameraInterfaceException (LIBMCDRIVER_CAMERA_ERROR_INVALIDPARAM);
		IIterator* pIIterator = dynamic_cast<IIterator*>(pIBaseClass);
		if (!pIIterator)
			throw ELibMCDriver_CameraInterfaceException(LIBMCDRIVER_CAMERA_ERROR_INVALIDCAST);
		
		*pCount = pIIterator->Count();

		return LIBMCDRIVER_CAMERA_SUCCESS;
	}
	catch (ELibMCDriver_CameraInterfaceException & Exception) {
		return handleLibMCDriver_CameraException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}


/*************************************************************************************************************************
 Class implementation for PNGImage
**************************************************************************************************************************/
LibMCDriver_CameraResult libmcdriver_camera_pngimage_getwidth(LibMCDriver_Camera_PNGImage pPNGImage, LibMCDriver_Camera_uint64 * pWidth)
{
	IBase* pIBaseClass = (IBase *)pPNGImage;

	try {
		if (pWidth == nullptr)
			throw ELibMCDriver_CameraInterfaceException (LIBMCDRIVER_CAMERA_ERROR_INVALIDPARAM);
		IPNGImage* pIPNGImage = dynamic_cast<IPNGImage*>(pIBaseClass);
		if (!pIPNGImage)
			throw ELibMCDriver_CameraInterfaceException(LIBMCDRIVER_CAMERA_ERROR_INVALIDCAST);
		
		*pWidth = pIPNGImage->GetWidth();

		return LIBMCDRIVER_CAMERA_SUCCESS;
	}
	catch (ELibMCDriver_CameraInterfaceException & Exception) {
		return handleLibMCDriver_CameraException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_CameraResult libmcdriver_camera_pngimage_getheight(LibMCDriver_Camera_PNGImage pPNGImage, LibMCDriver_Camera_uint64 * pHeight)
{
	IBase* pIBaseClass = (IBase *)pPNGImage;

	try {
		if (pHeight == nullptr)
			throw ELibMCDriver_CameraInterfaceException (LIBMCDRIVER_CAMERA_ERROR_INVALIDPARAM);
		IPNGImage* pIPNGImage = dynamic_cast<IPNGImage*>(pIBaseClass);
		if (!pIPNGImage)
			throw ELibMCDriver_CameraInterfaceException(LIBMCDRIVER_CAMERA_ERROR_INVALIDCAST);
		
		*pHeight = pIPNGImage->GetHeight();

		return LIBMCDRIVER_CAMERA_SUCCESS;
	}
	catch (ELibMCDriver_CameraInterfaceException & Exception) {
		return handleLibMCDriver_CameraException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_CameraResult libmcdriver_camera_pngimage_getpixelformat(LibMCDriver_Camera_PNGImage pPNGImage, eLibMCDriver_CameraImagePixelFormat * pPixelformat)
{
	IBase* pIBaseClass = (IBase *)pPNGImage;

	try {
		if (pPixelformat == nullptr)
			throw ELibMCDriver_CameraInterfaceException (LIBMCDRIVER_CAMERA_ERROR_INVALIDPARAM);
		IPNGImage* pIPNGImage = dynamic_cast<IPNGImage*>(pIBaseClass);
		if (!pIPNGImage)
			throw ELibMCDriver_CameraInterfaceException(LIBMCDRIVER_CAMERA_ERROR_INVALIDCAST);
		
		*pPixelformat = pIPNGImage->GetPixelFormat();

		return LIBMCDRIVER_CAMERA_SUCCESS;
	}
	catch (ELibMCDriver_CameraInterfaceException & Exception) {
		return handleLibMCDriver_CameraException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_CameraResult libmcdriver_camera_pngimage_getrawdata(LibMCDriver_Camera_PNGImage pPNGImage, const LibMCDriver_Camera_uint64 nPNGDataBufferSize, LibMCDriver_Camera_uint64* pPNGDataNeededCount, LibMCDriver_Camera_uint8 * pPNGDataBuffer)
{
	IBase* pIBaseClass = (IBase *)pPNGImage;

	try {
		if ((!pPNGDataBuffer) && !(pPNGDataNeededCount))
			throw ELibMCDriver_CameraInterfaceException (LIBMCDRIVER_CAMERA_ERROR_INVALIDPARAM);
		IPNGImage* pIPNGImage = dynamic_cast<IPNGImage*>(pIBaseClass);
		if (!pIPNGImage)
			throw ELibMCDriver_CameraInterfaceException(LIBMCDRIVER_CAMERA_ERROR_INVALIDCAST);
		
		pIPNGImage->GetRawData(nPNGDataBufferSize, pPNGDataNeededCount, pPNGDataBuffer);

		return LIBMCDRIVER_CAMERA_SUCCESS;
	}
	catch (ELibMCDriver_CameraInterfaceException & Exception) {
		return handleLibMCDriver_CameraException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_CameraResult libmcdriver_camera_pngimage_savetofile(LibMCDriver_Camera_PNGImage pPNGImage, const LibMCDriver_Camera_uint32 nFileNameBufferSize, LibMCDriver_Camera_uint32* pFileNameNeededChars, char * pFileNameBuffer)
{
	IBase* pIBaseClass = (IBase *)pPNGImage;

	try {
		if ( (!pFileNameBuffer) && !(pFileNameNeededChars) )
			throw ELibMCDriver_CameraInterfaceException (LIBMCDRIVER_CAMERA_ERROR_INVALIDPARAM);
		std::string sFileName("");
		IPNGImage* pIPNGImage = dynamic_cast<IPNGImage*>(pIBaseClass);
		if (!pIPNGImage)
			throw ELibMCDriver_CameraInterfaceException(LIBMCDRIVER_CAMERA_ERROR_INVALIDCAST);
		
		bool isCacheCall = (pFileNameBuffer == nullptr);
		if (isCacheCall) {
			sFileName = pIPNGImage->SaveToFile();

			pIPNGImage->_setCache (new ParameterCache_1<std::string> (sFileName));
		}
		else {
			auto cache = dynamic_cast<ParameterCache_1<std::string>*> (pIPNGImage->_getCache ());
			if (cache == nullptr)
				throw ELibMCDriver_CameraInterfaceException(LIBMCDRIVER_CAMERA_ERROR_INVALIDCAST);
			cache->retrieveData (sFileName);
			pIPNGImage->_setCache (nullptr);
		}
		
		if (pFileNameNeededChars)
			*pFileNameNeededChars = (LibMCDriver_Camera_uint32) (sFileName.size()+1);
		if (pFileNameBuffer) {
			if (sFileName.size() >= nFileNameBufferSize)
				throw ELibMCDriver_CameraInterfaceException (LIBMCDRIVER_CAMERA_ERROR_BUFFERTOOSMALL);
			for (size_t iFileName = 0; iFileName < sFileName.size(); iFileName++)
				pFileNameBuffer[iFileName] = sFileName[iFileName];
			pFileNameBuffer[sFileName.size()] = 0;
		}
		return LIBMCDRIVER_CAMERA_SUCCESS;
	}
	catch (ELibMCDriver_CameraInterfaceException & Exception) {
		return handleLibMCDriver_CameraException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}


/*************************************************************************************************************************
 Class implementation for Driver_Camera
**************************************************************************************************************************/
LibMCDriver_CameraResult libmcdriver_camera_driver_camera_capturepngimage(LibMCDriver_Camera_Driver_Camera pDriver_Camera, LibMCDriver_Camera_PNGImage * pPNGImage)
{
	IBase* pIBaseClass = (IBase *)pDriver_Camera;

	try {
		if (pPNGImage == nullptr)
			throw ELibMCDriver_CameraInterfaceException (LIBMCDRIVER_CAMERA_ERROR_INVALIDPARAM);
		IBase* pBasePNGImage(nullptr);
		IDriver_Camera* pIDriver_Camera = dynamic_cast<IDriver_Camera*>(pIBaseClass);
		if (!pIDriver_Camera)
			throw ELibMCDriver_CameraInterfaceException(LIBMCDRIVER_CAMERA_ERROR_INVALIDCAST);
		
		pBasePNGImage = pIDriver_Camera->CapturePNGImage();

		*pPNGImage = (IBase*)(pBasePNGImage);
		return LIBMCDRIVER_CAMERA_SUCCESS;
	}
	catch (ELibMCDriver_CameraInterfaceException & Exception) {
		return handleLibMCDriver_CameraException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}


/*************************************************************************************************************************
 Class implementation for RaspiCameraDevice
**************************************************************************************************************************/
LibMCDriver_CameraResult libmcdriver_camera_raspicameradevice_getdevicestring(LibMCDriver_Camera_RaspiCameraDevice pRaspiCameraDevice, const LibMCDriver_Camera_uint32 nDeviceStringBufferSize, LibMCDriver_Camera_uint32* pDeviceStringNeededChars, char * pDeviceStringBuffer)
{
	IBase* pIBaseClass = (IBase *)pRaspiCameraDevice;

	try {
		if ( (!pDeviceStringBuffer) && !(pDeviceStringNeededChars) )
			throw ELibMCDriver_CameraInterfaceException (LIBMCDRIVER_CAMERA_ERROR_INVALIDPARAM);
		std::string sDeviceString("");
		IRaspiCameraDevice* pIRaspiCameraDevice = dynamic_cast<IRaspiCameraDevice*>(pIBaseClass);
		if (!pIRaspiCameraDevice)
			throw ELibMCDriver_CameraInterfaceException(LIBMCDRIVER_CAMERA_ERROR_INVALIDCAST);
		
		bool isCacheCall = (pDeviceStringBuffer == nullptr);
		if (isCacheCall) {
			sDeviceString = pIRaspiCameraDevice->GetDeviceString();

			pIRaspiCameraDevice->_setCache (new ParameterCache_1<std::string> (sDeviceString));
		}
		else {
			auto cache = dynamic_cast<ParameterCache_1<std::string>*> (pIRaspiCameraDevice->_getCache ());
			if (cache == nullptr)
				throw ELibMCDriver_CameraInterfaceException(LIBMCDRIVER_CAMERA_ERROR_INVALIDCAST);
			cache->retrieveData (sDeviceString);
			pIRaspiCameraDevice->_setCache (nullptr);
		}
		
		if (pDeviceStringNeededChars)
			*pDeviceStringNeededChars = (LibMCDriver_Camera_uint32) (sDeviceString.size()+1);
		if (pDeviceStringBuffer) {
			if (sDeviceString.size() >= nDeviceStringBufferSize)
				throw ELibMCDriver_CameraInterfaceException (LIBMCDRIVER_CAMERA_ERROR_BUFFERTOOSMALL);
			for (size_t iDeviceString = 0; iDeviceString < sDeviceString.size(); iDeviceString++)
				pDeviceStringBuffer[iDeviceString] = sDeviceString[iDeviceString];
			pDeviceStringBuffer[sDeviceString.size()] = 0;
		}
		return LIBMCDRIVER_CAMERA_SUCCESS;
	}
	catch (ELibMCDriver_CameraInterfaceException & Exception) {
		return handleLibMCDriver_CameraException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}


/*************************************************************************************************************************
 Class implementation for RaspiCameraDeviceIterator
**************************************************************************************************************************/
LibMCDriver_CameraResult libmcdriver_camera_raspicameradeviceiterator_getcameradevice(LibMCDriver_Camera_RaspiCameraDeviceIterator pRaspiCameraDeviceIterator, LibMCDriver_Camera_RaspiCameraDevice * pCurrentInstance)
{
	IBase* pIBaseClass = (IBase *)pRaspiCameraDeviceIterator;

	try {
		if (pCurrentInstance == nullptr)
			throw ELibMCDriver_CameraInterfaceException (LIBMCDRIVER_CAMERA_ERROR_INVALIDPARAM);
		IBase* pBaseCurrentInstance(nullptr);
		IRaspiCameraDeviceIterator* pIRaspiCameraDeviceIterator = dynamic_cast<IRaspiCameraDeviceIterator*>(pIBaseClass);
		if (!pIRaspiCameraDeviceIterator)
			throw ELibMCDriver_CameraInterfaceException(LIBMCDRIVER_CAMERA_ERROR_INVALIDCAST);
		
		pBaseCurrentInstance = pIRaspiCameraDeviceIterator->GetCameraDevice();

		*pCurrentInstance = (IBase*)(pBaseCurrentInstance);
		return LIBMCDRIVER_CAMERA_SUCCESS;
	}
	catch (ELibMCDriver_CameraInterfaceException & Exception) {
		return handleLibMCDriver_CameraException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}


/*************************************************************************************************************************
 Class implementation for Driver_RaspiCamera
**************************************************************************************************************************/
LibMCDriver_CameraResult libmcdriver_camera_driver_raspicamera_querydevices(LibMCDriver_Camera_Driver_RaspiCamera pDriver_RaspiCamera, LibMCDriver_Camera_RaspiCameraDeviceIterator * pDeviceIterator)
{
	IBase* pIBaseClass = (IBase *)pDriver_RaspiCamera;

	try {
		if (pDeviceIterator == nullptr)
			throw ELibMCDriver_CameraInterfaceException (LIBMCDRIVER_CAMERA_ERROR_INVALIDPARAM);
		IBase* pBaseDeviceIterator(nullptr);
		IDriver_RaspiCamera* pIDriver_RaspiCamera = dynamic_cast<IDriver_RaspiCamera*>(pIBaseClass);
		if (!pIDriver_RaspiCamera)
			throw ELibMCDriver_CameraInterfaceException(LIBMCDRIVER_CAMERA_ERROR_INVALIDCAST);
		
		pBaseDeviceIterator = pIDriver_RaspiCamera->QueryDevices();

		*pDeviceIterator = (IBase*)(pBaseDeviceIterator);
		return LIBMCDRIVER_CAMERA_SUCCESS;
	}
	catch (ELibMCDriver_CameraInterfaceException & Exception) {
		return handleLibMCDriver_CameraException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_CameraResult libmcdriver_camera_driver_raspicamera_initialize(LibMCDriver_Camera_Driver_RaspiCamera pDriver_RaspiCamera, const char * pDeviceString, LibMCDriver_Camera_uint32 nWidth, LibMCDriver_Camera_uint32 nHeight, eLibMCDriver_CameraImagePixelFormat ePixelformat)
{
	IBase* pIBaseClass = (IBase *)pDriver_RaspiCamera;

	try {
		if (pDeviceString == nullptr)
			throw ELibMCDriver_CameraInterfaceException (LIBMCDRIVER_CAMERA_ERROR_INVALIDPARAM);
		std::string sDeviceString(pDeviceString);
		IDriver_RaspiCamera* pIDriver_RaspiCamera = dynamic_cast<IDriver_RaspiCamera*>(pIBaseClass);
		if (!pIDriver_RaspiCamera)
			throw ELibMCDriver_CameraInterfaceException(LIBMCDRIVER_CAMERA_ERROR_INVALIDCAST);
		
		pIDriver_RaspiCamera->Initialize(sDeviceString, nWidth, nHeight, ePixelformat);

		return LIBMCDRIVER_CAMERA_SUCCESS;
	}
	catch (ELibMCDriver_CameraInterfaceException & Exception) {
		return handleLibMCDriver_CameraException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}



/*************************************************************************************************************************
 Function table lookup implementation
**************************************************************************************************************************/

LibMCDriver_CameraResult LibMCDriver_Camera::Impl::LibMCDriver_Camera_GetProcAddress (const char * pProcName, void ** ppProcAddress)
{
	if (pProcName == nullptr)
		return LIBMCDRIVER_CAMERA_ERROR_INVALIDPARAM;
	if (ppProcAddress == nullptr)
		return LIBMCDRIVER_CAMERA_ERROR_INVALIDPARAM;
	*ppProcAddress = nullptr;
	std::string sProcName (pProcName);
	
	if (sProcName == "libmcdriver_camera_driver_getname") 
		*ppProcAddress = (void*) &libmcdriver_camera_driver_getname;
	if (sProcName == "libmcdriver_camera_driver_gettype") 
		*ppProcAddress = (void*) &libmcdriver_camera_driver_gettype;
	if (sProcName == "libmcdriver_camera_driver_getversion") 
		*ppProcAddress = (void*) &libmcdriver_camera_driver_getversion;
	if (sProcName == "libmcdriver_camera_driver_getheaderinformation") 
		*ppProcAddress = (void*) &libmcdriver_camera_driver_getheaderinformation;
	if (sProcName == "libmcdriver_camera_iterator_movenext") 
		*ppProcAddress = (void*) &libmcdriver_camera_iterator_movenext;
	if (sProcName == "libmcdriver_camera_iterator_moveprevious") 
		*ppProcAddress = (void*) &libmcdriver_camera_iterator_moveprevious;
	if (sProcName == "libmcdriver_camera_iterator_getcurrent") 
		*ppProcAddress = (void*) &libmcdriver_camera_iterator_getcurrent;
	if (sProcName == "libmcdriver_camera_iterator_clone") 
		*ppProcAddress = (void*) &libmcdriver_camera_iterator_clone;
	if (sProcName == "libmcdriver_camera_iterator_count") 
		*ppProcAddress = (void*) &libmcdriver_camera_iterator_count;
	if (sProcName == "libmcdriver_camera_pngimage_getwidth") 
		*ppProcAddress = (void*) &libmcdriver_camera_pngimage_getwidth;
	if (sProcName == "libmcdriver_camera_pngimage_getheight") 
		*ppProcAddress = (void*) &libmcdriver_camera_pngimage_getheight;
	if (sProcName == "libmcdriver_camera_pngimage_getpixelformat") 
		*ppProcAddress = (void*) &libmcdriver_camera_pngimage_getpixelformat;
	if (sProcName == "libmcdriver_camera_pngimage_getrawdata") 
		*ppProcAddress = (void*) &libmcdriver_camera_pngimage_getrawdata;
	if (sProcName == "libmcdriver_camera_pngimage_savetofile") 
		*ppProcAddress = (void*) &libmcdriver_camera_pngimage_savetofile;
	if (sProcName == "libmcdriver_camera_driver_camera_capturepngimage") 
		*ppProcAddress = (void*) &libmcdriver_camera_driver_camera_capturepngimage;
	if (sProcName == "libmcdriver_camera_raspicameradevice_getdevicestring") 
		*ppProcAddress = (void*) &libmcdriver_camera_raspicameradevice_getdevicestring;
	if (sProcName == "libmcdriver_camera_raspicameradeviceiterator_getcameradevice") 
		*ppProcAddress = (void*) &libmcdriver_camera_raspicameradeviceiterator_getcameradevice;
	if (sProcName == "libmcdriver_camera_driver_raspicamera_querydevices") 
		*ppProcAddress = (void*) &libmcdriver_camera_driver_raspicamera_querydevices;
	if (sProcName == "libmcdriver_camera_driver_raspicamera_initialize") 
		*ppProcAddress = (void*) &libmcdriver_camera_driver_raspicamera_initialize;
	if (sProcName == "libmcdriver_camera_getversion") 
		*ppProcAddress = (void*) &libmcdriver_camera_getversion;
	if (sProcName == "libmcdriver_camera_getlasterror") 
		*ppProcAddress = (void*) &libmcdriver_camera_getlasterror;
	if (sProcName == "libmcdriver_camera_releaseinstance") 
		*ppProcAddress = (void*) &libmcdriver_camera_releaseinstance;
	if (sProcName == "libmcdriver_camera_acquireinstance") 
		*ppProcAddress = (void*) &libmcdriver_camera_acquireinstance;
	if (sProcName == "libmcdriver_camera_injectcomponent") 
		*ppProcAddress = (void*) &libmcdriver_camera_injectcomponent;
	if (sProcName == "libmcdriver_camera_getsymbollookupmethod") 
		*ppProcAddress = (void*) &libmcdriver_camera_getsymbollookupmethod;
	if (sProcName == "libmcdriver_camera_createdriver") 
		*ppProcAddress = (void*) &libmcdriver_camera_createdriver;
	
	if (*ppProcAddress == nullptr) 
		return LIBMCDRIVER_CAMERA_ERROR_COULDNOTFINDLIBRARYEXPORT;
	return LIBMCDRIVER_CAMERA_SUCCESS;
}

/*************************************************************************************************************************
 Global functions implementation
**************************************************************************************************************************/
LibMCDriver_CameraResult libmcdriver_camera_getversion(LibMCDriver_Camera_uint32 * pMajor, LibMCDriver_Camera_uint32 * pMinor, LibMCDriver_Camera_uint32 * pMicro)
{
	IBase* pIBaseClass = nullptr;

	try {
		if (!pMajor)
			throw ELibMCDriver_CameraInterfaceException (LIBMCDRIVER_CAMERA_ERROR_INVALIDPARAM);
		if (!pMinor)
			throw ELibMCDriver_CameraInterfaceException (LIBMCDRIVER_CAMERA_ERROR_INVALIDPARAM);
		if (!pMicro)
			throw ELibMCDriver_CameraInterfaceException (LIBMCDRIVER_CAMERA_ERROR_INVALIDPARAM);
		CWrapper::GetVersion(*pMajor, *pMinor, *pMicro);

		return LIBMCDRIVER_CAMERA_SUCCESS;
	}
	catch (ELibMCDriver_CameraInterfaceException & Exception) {
		return handleLibMCDriver_CameraException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_CameraResult libmcdriver_camera_getlasterror(LibMCDriver_Camera_Base pInstance, const LibMCDriver_Camera_uint32 nErrorMessageBufferSize, LibMCDriver_Camera_uint32* pErrorMessageNeededChars, char * pErrorMessageBuffer, bool * pHasError)
{
	IBase* pIBaseClass = nullptr;

	try {
		if ( (!pErrorMessageBuffer) && !(pErrorMessageNeededChars) )
			throw ELibMCDriver_CameraInterfaceException (LIBMCDRIVER_CAMERA_ERROR_INVALIDPARAM);
		if (pHasError == nullptr)
			throw ELibMCDriver_CameraInterfaceException (LIBMCDRIVER_CAMERA_ERROR_INVALIDPARAM);
		IBase* pIBaseClassInstance = (IBase *)pInstance;
		IBase* pIInstance = dynamic_cast<IBase*>(pIBaseClassInstance);
		if (!pIInstance)
			throw ELibMCDriver_CameraInterfaceException (LIBMCDRIVER_CAMERA_ERROR_INVALIDCAST);
		
		std::string sErrorMessage("");
		*pHasError = CWrapper::GetLastError(pIInstance, sErrorMessage);

		if (pErrorMessageNeededChars)
			*pErrorMessageNeededChars = (LibMCDriver_Camera_uint32) (sErrorMessage.size()+1);
		if (pErrorMessageBuffer) {
			if (sErrorMessage.size() >= nErrorMessageBufferSize)
				throw ELibMCDriver_CameraInterfaceException (LIBMCDRIVER_CAMERA_ERROR_BUFFERTOOSMALL);
			for (size_t iErrorMessage = 0; iErrorMessage < sErrorMessage.size(); iErrorMessage++)
				pErrorMessageBuffer[iErrorMessage] = sErrorMessage[iErrorMessage];
			pErrorMessageBuffer[sErrorMessage.size()] = 0;
		}
		return LIBMCDRIVER_CAMERA_SUCCESS;
	}
	catch (ELibMCDriver_CameraInterfaceException & Exception) {
		return handleLibMCDriver_CameraException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_CameraResult libmcdriver_camera_releaseinstance(LibMCDriver_Camera_Base pInstance)
{
	IBase* pIBaseClass = nullptr;

	try {
		IBase* pIBaseClassInstance = (IBase *)pInstance;
		IBase* pIInstance = dynamic_cast<IBase*>(pIBaseClassInstance);
		if (!pIInstance)
			throw ELibMCDriver_CameraInterfaceException (LIBMCDRIVER_CAMERA_ERROR_INVALIDCAST);
		
		CWrapper::ReleaseInstance(pIInstance);

		return LIBMCDRIVER_CAMERA_SUCCESS;
	}
	catch (ELibMCDriver_CameraInterfaceException & Exception) {
		return handleLibMCDriver_CameraException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_CameraResult libmcdriver_camera_acquireinstance(LibMCDriver_Camera_Base pInstance)
{
	IBase* pIBaseClass = nullptr;

	try {
		IBase* pIBaseClassInstance = (IBase *)pInstance;
		IBase* pIInstance = dynamic_cast<IBase*>(pIBaseClassInstance);
		if (!pIInstance)
			throw ELibMCDriver_CameraInterfaceException (LIBMCDRIVER_CAMERA_ERROR_INVALIDCAST);
		
		CWrapper::AcquireInstance(pIInstance);

		return LIBMCDRIVER_CAMERA_SUCCESS;
	}
	catch (ELibMCDriver_CameraInterfaceException & Exception) {
		return handleLibMCDriver_CameraException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_CameraResult libmcdriver_camera_injectcomponent(const char * pNameSpace, LibMCDriver_Camera_pvoid pSymbolAddressMethod)
{
	IBase* pIBaseClass = nullptr;

	try {
		if (pNameSpace == nullptr)
			throw ELibMCDriver_CameraInterfaceException (LIBMCDRIVER_CAMERA_ERROR_INVALIDPARAM);
		std::string sNameSpace(pNameSpace);
		
		bool bNameSpaceFound = false;
		
		if (sNameSpace == "LibMCDriverEnv") {
			if (CWrapper::sPLibMCDriverEnvWrapper.get() != nullptr) {
				throw ELibMCDriver_CameraInterfaceException(LIBMCDRIVER_CAMERA_ERROR_COULDNOTLOADLIBRARY);
			}
			CWrapper::sPLibMCDriverEnvWrapper = LibMCDriverEnv::CWrapper::loadLibraryFromSymbolLookupMethod(pSymbolAddressMethod);
			bNameSpaceFound = true;
		}
		
		if (!bNameSpaceFound)
			throw ELibMCDriver_CameraInterfaceException(LIBMCDRIVER_CAMERA_ERROR_COULDNOTLOADLIBRARY);
		
		return LIBMCDRIVER_CAMERA_SUCCESS;
	}
	catch (ELibMCDriver_CameraInterfaceException & Exception) {
		return handleLibMCDriver_CameraException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_CameraResult libmcdriver_camera_getsymbollookupmethod(LibMCDriver_Camera_pvoid * pSymbolLookupMethod)
{
	IBase* pIBaseClass = nullptr;

	try {
		if (pSymbolLookupMethod == nullptr)
			throw ELibMCDriver_CameraInterfaceException (LIBMCDRIVER_CAMERA_ERROR_INVALIDPARAM);
		*pSymbolLookupMethod = (void*)&LibMCDriver_Camera::Impl::LibMCDriver_Camera_GetProcAddress;
		return LIBMCDRIVER_CAMERA_SUCCESS;
	}
	catch (ELibMCDriver_CameraInterfaceException & Exception) {
		return handleLibMCDriver_CameraException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_CameraResult libmcdriver_camera_createdriver(const char * pName, const char * pType, LibMCDriverEnv_DriverEnvironment pDriverEnvironment, LibMCDriver_Camera_Driver * pInstance)
{
	IBase* pIBaseClass = nullptr;

	try {
		if (pName == nullptr)
			throw ELibMCDriver_CameraInterfaceException (LIBMCDRIVER_CAMERA_ERROR_INVALIDPARAM);
		if (pType == nullptr)
			throw ELibMCDriver_CameraInterfaceException (LIBMCDRIVER_CAMERA_ERROR_INVALIDPARAM);
		if (pInstance == nullptr)
			throw ELibMCDriver_CameraInterfaceException (LIBMCDRIVER_CAMERA_ERROR_INVALIDPARAM);
		std::string sName(pName);
		std::string sType(pType);
		LibMCDriverEnv::PDriverEnvironment pIDriverEnvironment = std::make_shared<LibMCDriverEnv::CDriverEnvironment>(CWrapper::sPLibMCDriverEnvWrapper.get(), pDriverEnvironment);
		CWrapper::sPLibMCDriverEnvWrapper->AcquireInstance(pIDriverEnvironment.get());
		if (!pIDriverEnvironment)
			throw ELibMCDriver_CameraInterfaceException (LIBMCDRIVER_CAMERA_ERROR_INVALIDCAST);
		
		IBase* pBaseInstance(nullptr);
		pBaseInstance = CWrapper::CreateDriver(sName, sType, pIDriverEnvironment);

		*pInstance = (IBase*)(pBaseInstance);
		return LIBMCDRIVER_CAMERA_SUCCESS;
	}
	catch (ELibMCDriver_CameraInterfaceException & Exception) {
		return handleLibMCDriver_CameraException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}


