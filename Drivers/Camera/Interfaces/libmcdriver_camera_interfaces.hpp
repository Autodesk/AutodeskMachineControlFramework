/*++

Copyright (C) 2024 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.8.0-develop.

Abstract: This is an autogenerated C++ header file in order to allow easy
development of Generic Camera Driver for Windows or Linux devices. The implementer of Generic Camera Driver for Windows or Linux devices needs to
derive concrete classes from the abstract classes in this header.

Interface version: 2.0.0

*/


#ifndef __LIBMCDRIVER_CAMERA_CPPINTERFACES
#define __LIBMCDRIVER_CAMERA_CPPINTERFACES

#include <string>
#include <memory>

#include "libmcdriver_camera_types.hpp"


#include "libmcenv_dynamic.hpp"

namespace LibMCDriver_Camera {
namespace Impl {

/**
 Forward declarations of class interfaces
*/
class IBase;
class IDriver;
class IDeviceBase;
class IVideoDevice;
class IDeviceInfo;
class IDeviceList;
class IDriver_Camera;
class IDriver_Camera_Windows;



/*************************************************************************************************************************
 Parameter Cache definitions
**************************************************************************************************************************/

class ParameterCache {
	public:
		virtual ~ParameterCache() {}
};

template <class T1> class ParameterCache_1 : public ParameterCache {
	private:
		T1 m_param1;
	public:
		ParameterCache_1 (const T1 & param1)
			: m_param1 (param1)
		{
		}

		void retrieveData (T1 & param1)
		{
			param1 = m_param1;
		}
};

template <class T1, class T2> class ParameterCache_2 : public ParameterCache {
	private:
		T1 m_param1;
		T2 m_param2;
	public:
		ParameterCache_2 (const T1 & param1, const T2 & param2)
			: m_param1 (param1), m_param2 (param2)
		{
		}

		void retrieveData (T1 & param1, T2 & param2)
		{
			param1 = m_param1;
			param2 = m_param2;
		}
};

template <class T1, class T2, class T3> class ParameterCache_3 : public ParameterCache {
	private:
		T1 m_param1;
		T2 m_param2;
		T3 m_param3;
	public:
		ParameterCache_3 (const T1 & param1, const T2 & param2, const T3 & param3)
			: m_param1 (param1), m_param2 (param2), m_param3 (param3)
		{
		}

		void retrieveData (T1 & param1, T2 & param2, T3 & param3)
		{
			param1 = m_param1;
			param2 = m_param2;
			param3 = m_param3;
		}
};

template <class T1, class T2, class T3, class T4> class ParameterCache_4 : public ParameterCache {
	private:
		T1 m_param1;
		T2 m_param2;
		T3 m_param3;
		T4 m_param4;
	public:
		ParameterCache_4 (const T1 & param1, const T2 & param2, const T3 & param3, const T4 & param4)
			: m_param1 (param1), m_param2 (param2), m_param3 (param3), m_param4 (param4)
		{
		}

		void retrieveData (T1 & param1, T2 & param2, T3 & param3, T4 & param4)
		{
			param1 = m_param1;
			param2 = m_param2;
			param3 = m_param3;
			param4 = m_param4;
		}
};

template <class T1, class T2, class T3, class T4, class T5> class ParameterCache_5 : public ParameterCache {
	private:
		T1 m_param1;
		T2 m_param2;
		T3 m_param3;
		T4 m_param4;
		T5 m_param5;
	public:
		ParameterCache_5 (const T1 & param1, const T2 & param2, const T3 & param3, const T4 & param4, const T5 & param5)
			: m_param1 (param1), m_param2 (param2), m_param3 (param3), m_param4 (param4), m_param5 (param5)
		{
		}

		void retrieveData (T1 & param1, T2 & param2, T3 & param3, T4 & param4, T5 & param5)
		{
			param1 = m_param1;
			param2 = m_param2;
			param3 = m_param3;
			param4 = m_param4;
			param5 = m_param5;
		}
};


/*************************************************************************************************************************
 Class interface for Base 
**************************************************************************************************************************/

class IBase {
private:
	std::unique_ptr<ParameterCache> m_ParameterCache;
public:
	/**
	* IBase::~IBase - virtual destructor of IBase
	*/
	virtual ~IBase() {};

	/**
	* IBase::ReleaseBaseClassInterface - Releases ownership of a base class interface. Deletes the reference, if necessary.
	* @param[in] pIBase - The base class instance to release
	*/
	static void ReleaseBaseClassInterface(IBase* pIBase)
	{
		if (pIBase) {
			pIBase->DecRefCount();
		}
	};

	/**
	* IBase::AcquireBaseClassInterface - Acquires shared ownership of a base class interface.
	* @param[in] pIBase - The base class instance to acquire
	*/
	static void AcquireBaseClassInterface(IBase* pIBase)
	{
		if (pIBase) {
			pIBase->IncRefCount();
		}
	};


	/**
	* IBase::GetLastErrorMessage - Returns the last error registered of this class instance
	* @param[out] sErrorMessage - Message of the last error registered
	* @return Has an error been registered already
	*/
	virtual bool GetLastErrorMessage(std::string & sErrorMessage) = 0;

	/**
	* IBase::ClearErrorMessages - Clears all registered messages of this class instance
	*/
	virtual void ClearErrorMessages() = 0;

	/**
	* IBase::RegisterErrorMessage - Registers an error message with this class instance
	* @param[in] sErrorMessage - Error message to register
	*/
	virtual void RegisterErrorMessage(const std::string & sErrorMessage) = 0;

	/**
	* IBase::IncRefCount - Increases the reference count of a class instance
	*/
	virtual void IncRefCount() = 0;

	/**
	* IBase::DecRefCount - Decreases the reference count of a class instance and free releases it, if the last reference has been removed
	* @return Has the object been released
	*/
	virtual bool DecRefCount() = 0;

	/**
	* IBase::_setCache - set parameter cache of object
	*/
	void _setCache(ParameterCache * pCache)
	{
		m_ParameterCache.reset(pCache);
	}

	/**
	* IBase::_getCache - returns parameter cache of object
	*/
	ParameterCache* _getCache()
	{
		return m_ParameterCache.get();
	}

};


/**
 Definition of a shared pointer class for IBase
*/
template<class T>
class IBaseSharedPtr : public std::shared_ptr<T>
{
public:
	explicit IBaseSharedPtr(T* t = nullptr)
		: std::shared_ptr<T>(t, IBase::ReleaseBaseClassInterface)
	{
		t->IncRefCount();
	}

	// Reset function, as it also needs to properly set the deleter.
	void reset(T* t = nullptr)
	{
		std::shared_ptr<T>::reset(t, IBase::ReleaseBaseClassInterface);
	}

	// Get-function that increases the Base class's reference count
	T* getCoOwningPtr()
	{
		T* t = this->get();
		t->IncRefCount();
		return t;
	}
};


typedef IBaseSharedPtr<IBase> PIBase;


/*************************************************************************************************************************
 Class interface for Driver 
**************************************************************************************************************************/

class IDriver : public virtual IBase {
public:
	/**
	* IDriver::Configure - Configures a driver with its specific configuration data.
	* @param[in] sConfigurationString - Configuration data of driver.
	*/
	virtual void Configure(const std::string & sConfigurationString) = 0;

	/**
	* IDriver::GetName - returns the name identifier of the driver
	* @return Name of the driver.
	*/
	virtual std::string GetName() = 0;

	/**
	* IDriver::GetType - returns the type identifier of the driver
	* @return Type of the driver.
	*/
	virtual std::string GetType() = 0;

	/**
	* IDriver::GetVersion - returns the version identifiers of the driver
	* @param[out] nMajor - Major version.
	* @param[out] nMinor - Minor version.
	* @param[out] nMicro - Micro version.
	* @param[out] sBuild - Build identifier.
	*/
	virtual void GetVersion(LibMCDriver_Camera_uint32 & nMajor, LibMCDriver_Camera_uint32 & nMinor, LibMCDriver_Camera_uint32 & nMicro, std::string & sBuild) = 0;

	/**
	* IDriver::QueryParameters - Updates the driver parameters in the driver environment. Should only be called in the driver thread.
	*/
	virtual void QueryParameters() = 0;

	/**
	* IDriver::QueryParametersEx - Updates the driver parameters in the driver environment. Might be called out of thread. Implementation MUST be able to handle parallel calls.
	* @param[in] pDriverUpdateInstance - Status update instance.
	*/
	virtual void QueryParametersEx(LibMCEnv::PDriverStatusUpdateSession pDriverUpdateInstance) = 0;

};

typedef IBaseSharedPtr<IDriver> PIDriver;


/*************************************************************************************************************************
 Class interface for DeviceBase 
**************************************************************************************************************************/

class IDeviceBase : public virtual IBase {
public:
	/**
	* IDeviceBase::GetFriendlyName - Returns the name of the device in a human readable form.
	* @return Name of device.
	*/
	virtual std::string GetFriendlyName() = 0;

	/**
	* IDeviceBase::GetOperatingSystemName - Returns a unique name of the device from the operating system.
	* @return Operating system Identifier of the device.
	*/
	virtual std::string GetOperatingSystemName() = 0;

	/**
	* IDeviceBase::IsVideoDevice - Returns if the device supports video capture.
	* @return Returns true if the device is a video device.
	*/
	virtual bool IsVideoDevice() = 0;

};

typedef IBaseSharedPtr<IDeviceBase> PIDeviceBase;


/*************************************************************************************************************************
 Class interface for VideoDevice 
**************************************************************************************************************************/

class IVideoDevice : public virtual IDeviceBase {
public:
	/**
	* IVideoDevice::GetIdentifier - Returns the identifier of the video device.
	* @return Identifier of the device.
	*/
	virtual std::string GetIdentifier() = 0;

	/**
	* IVideoDevice::GetCurrentResolution - Returns a the current resolution of the video stream.
	* @param[out] nWidth - Width in pixels.
	* @param[out] nHeight - Height in pixels.
	*/
	virtual void GetCurrentResolution(LibMCDriver_Camera_uint32 & nWidth, LibMCDriver_Camera_uint32 & nHeight) = 0;

	/**
	* IVideoDevice::SetResolution - Sets the resolution of the video stream.
	* @param[out] nWidth - Width in pixels.
	* @param[out] nHeight - Height in pixels.
	*/
	virtual void SetResolution(LibMCDriver_Camera_uint32 & nWidth, LibMCDriver_Camera_uint32 & nHeight) = 0;

	/**
	* IVideoDevice::CaptureRawImage - Captures a still image from the video stream.
	* @param[in] pImageData - Capture image object.
	*/
	virtual void CaptureRawImage(LibMCEnv::PImageData pImageData) = 0;

	/**
	* IVideoDevice::StartStreamCapture - Starts automatic capturing of the video into a video stream. If a stream capture is active, it will stop the current capture process.
	* @param[in] dDesiredFramerate - Framerate in fps.
	* @param[in] pStreamInstance - Framework stream capture instance.
	*/
	virtual void StartStreamCapture(const LibMCDriver_Camera_double dDesiredFramerate, LibMCEnv::PVideoStream pStreamInstance) = 0;

	/**
	* IVideoDevice::StopStreamCapture - Stops any current video stream capturing.
	*/
	virtual void StopStreamCapture() = 0;

	/**
	* IVideoDevice::StreamCaptureIsActive - Returns if a screen capture is active.
	* @return Returns true, if a stream capture is active.
	*/
	virtual bool StreamCaptureIsActive() = 0;

	/**
	* IVideoDevice::GetStreamCaptureStatistics - Returns statistics about the current stream capture process.
	* @param[out] dDesiredFramerate - Desired Framerate in fps.
	* @param[out] dMinFramerate - Minimum achieved Capture Framerate in fps.
	* @param[out] dMaxFramerate - Maximum achieved Capture Framerate in fps.
	* @param[out] dMeanFramerate - Mean achieved Capture Framerate in fps.
	* @param[out] dStdDevFramerate - Standard deviation of the Captured Framerate in fps.
	*/
	virtual void GetStreamCaptureStatistics(LibMCDriver_Camera_double & dDesiredFramerate, LibMCDriver_Camera_double & dMinFramerate, LibMCDriver_Camera_double & dMaxFramerate, LibMCDriver_Camera_double & dMeanFramerate, LibMCDriver_Camera_double & dStdDevFramerate) = 0;

};

typedef IBaseSharedPtr<IVideoDevice> PIVideoDevice;


/*************************************************************************************************************************
 Class interface for DeviceInfo 
**************************************************************************************************************************/

class IDeviceInfo : public virtual IDeviceBase {
public:
	/**
	* IDeviceInfo::OpenVideoDevice - Tries to reserve and activate a device. 
	* @param[in] sIdentifier - An internal identifier that will recover the open device. MUST NOT be empty. Fails if the identifier is already in use.
	* @return The actual video device instance.
	*/
	virtual IVideoDevice * OpenVideoDevice(const std::string & sIdentifier) = 0;

};

typedef IBaseSharedPtr<IDeviceInfo> PIDeviceInfo;


/*************************************************************************************************************************
 Class interface for DeviceList 
**************************************************************************************************************************/

class IDeviceList : public virtual IBase {
public:
	/**
	* IDeviceList::GetCount - Returns number of devices found.
	* @return Number of devices found.
	*/
	virtual LibMCDriver_Camera_uint32 GetCount() = 0;

	/**
	* IDeviceList::GetDeviceInfo - Returns a device info by index.
	* @param[in] nIndex - Index of device (0-based).
	* @return Info of discovered device.
	*/
	virtual IDeviceInfo * GetDeviceInfo(const LibMCDriver_Camera_uint32 nIndex) = 0;

	/**
	* IDeviceList::FindDeviceInfoByOperatingSystemName - Finds a device info by operating system name.
	* @param[in] sOperatingSystemName - Operating system Identifier of the device.
	* @param[in] bMustExist - If true, an exception will be thrown if the device does not exist. If false, the call will return null if the device does not exist.
	* @return Info of discovered device.
	*/
	virtual IDeviceInfo * FindDeviceInfoByOperatingSystemName(const std::string & sOperatingSystemName, const bool bMustExist) = 0;

};

typedef IBaseSharedPtr<IDeviceList> PIDeviceList;


/*************************************************************************************************************************
 Class interface for Driver_Camera 
**************************************************************************************************************************/

class IDriver_Camera : public virtual IDriver {
public:
	/**
	* IDriver_Camera::EnumerateDevices - Lists all devices available on the system.
	* @return List of discovered devices.
	*/
	virtual IDeviceList * EnumerateDevices() = 0;

	/**
	* IDriver_Camera::FindDeviceByIdentifier - Finds a device instance by internal identifier.
	* @param[in] sIdentifier - Internal Identifier of the device.
	* @param[in] bMustExist - If true, an exception will be thrown if the device does not exist. If false, the call will return null if the device does not exist.
	* @return Instance of discovered device.
	*/
	virtual IVideoDevice * FindDeviceByIdentifier(const std::string & sIdentifier, const bool bMustExist) = 0;

	/**
	* IDriver_Camera::FindDeviceByOperatingSystemName - Finds a device instance by operating system name.
	* @param[in] sOperatingSystemName - Operating system Identifier of the device.
	* @param[in] bMustExist - If true, an exception will be thrown if the device does not exist. If false, the call will return null if the device does not exist.
	* @return Instance of discovered device.
	*/
	virtual IVideoDevice * FindDeviceByOperatingSystemName(const std::string & sOperatingSystemName, const bool bMustExist) = 0;

};

typedef IBaseSharedPtr<IDriver_Camera> PIDriver_Camera;


/*************************************************************************************************************************
 Class interface for Driver_Camera_Windows 
**************************************************************************************************************************/

class IDriver_Camera_Windows : public virtual IDriver_Camera {
public:
};

typedef IBaseSharedPtr<IDriver_Camera_Windows> PIDriver_Camera_Windows;


/*************************************************************************************************************************
 Global functions declarations
**************************************************************************************************************************/
class CWrapper {
public:
	// Injected Components
	static LibMCEnv::PWrapper sPLibMCEnvWrapper;

	/**
	* Ilibmcdriver_camera::GetVersion - retrieves the binary version of this library.
	* @param[out] nMajor - returns the major version of this library
	* @param[out] nMinor - returns the minor version of this library
	* @param[out] nMicro - returns the micro version of this library
	*/
	static void GetVersion(LibMCDriver_Camera_uint32 & nMajor, LibMCDriver_Camera_uint32 & nMinor, LibMCDriver_Camera_uint32 & nMicro);

	/**
	* Ilibmcdriver_camera::GetLastError - Returns the last error recorded on this object
	* @param[in] pInstance - Instance Handle
	* @param[out] sErrorMessage - Message of the last error
	* @return Is there a last error to query
	*/
	static bool GetLastError(IBase* pInstance, std::string & sErrorMessage);

	/**
	* Ilibmcdriver_camera::ReleaseInstance - Releases shared ownership of an Instance
	* @param[in] pInstance - Instance Handle
	*/
	static void ReleaseInstance(IBase* pInstance);

	/**
	* Ilibmcdriver_camera::AcquireInstance - Acquires shared ownership of an Instance
	* @param[in] pInstance - Instance Handle
	*/
	static void AcquireInstance(IBase* pInstance);

	/**
	* Ilibmcdriver_camera::CreateDriver - Creates a driver instance with a specific name.
	* @param[in] sName - Name of driver to be created.
	* @param[in] sType - Type of driver to be created.
	* @param[in] pDriverEnvironment - Environment of this driver.
	* @return New Driver instance
	*/
	static IDriver * CreateDriver(const std::string & sName, const std::string & sType, LibMCEnv::PDriverEnvironment pDriverEnvironment);

};

LibMCDriver_CameraResult LibMCDriver_Camera_GetProcAddress (const char * pProcName, void ** ppProcAddress);

} // namespace Impl
} // namespace LibMCDriver_Camera

#endif // __LIBMCDRIVER_CAMERA_CPPINTERFACES
