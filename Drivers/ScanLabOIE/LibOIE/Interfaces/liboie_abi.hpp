/*++

Copyright (C) 2020 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.7.0-develop.

Abstract: This is an autogenerated C++-Header file in order to allow an easy
 use of ScanLab Open Interface Extension

Interface version: 1.0.0

*/

#ifndef __LIBOIE_HEADER_CPP
#define __LIBOIE_HEADER_CPP

#ifdef __LIBOIE_EXPORTS
#ifdef _WIN32
#define LIBOIE_DECLSPEC __declspec (dllexport)
#else // _WIN32
#define LIBOIE_DECLSPEC __attribute__((visibility("default")))
#endif // _WIN32
#else // __LIBOIE_EXPORTS
#define LIBOIE_DECLSPEC
#endif // __LIBOIE_EXPORTS

#include "liboie_types.hpp"


#ifdef __cplusplus
extern "C" {
#endif

/*************************************************************************************************************************
 Class definition for Base
**************************************************************************************************************************/

/*************************************************************************************************************************
 Class definition for Iterator
**************************************************************************************************************************/

/**
* Iterates to the next resource in the list.
*
* @param[in] pIterator - Iterator instance.
* @param[out] pHasNext - Iterates to the next resource in the list.
* @return error code or 0 (success)
*/
LIBOIE_DECLSPEC LibOIEResult liboie_iterator_movenext(LibOIE_Iterator pIterator, bool * pHasNext);

/**
* Iterates to the previous resource in the list.
*
* @param[in] pIterator - Iterator instance.
* @param[out] pHasPrevious - Iterates to the previous resource in the list.
* @return error code or 0 (success)
*/
LIBOIE_DECLSPEC LibOIEResult liboie_iterator_moveprevious(LibOIE_Iterator pIterator, bool * pHasPrevious);

/**
* Returns the resource the iterator points at.
*
* @param[in] pIterator - Iterator instance.
* @param[out] pCurrentInstance - returns the resource instance.
* @return error code or 0 (success)
*/
LIBOIE_DECLSPEC LibOIEResult liboie_iterator_getcurrent(LibOIE_Iterator pIterator, LibOIE_Base * pCurrentInstance);

/**
* Creates a new resource iterator with the same resource list.
*
* @param[in] pIterator - Iterator instance.
* @param[out] pOutIterator - returns the cloned Iterator instance
* @return error code or 0 (success)
*/
LIBOIE_DECLSPEC LibOIEResult liboie_iterator_clone(LibOIE_Iterator pIterator, LibOIE_Iterator * pOutIterator);

/**
* Returns the number of resoucres the iterator captures.
*
* @param[in] pIterator - Iterator instance.
* @param[out] pCount - returns the number of resources the iterator captures.
* @return error code or 0 (success)
*/
LIBOIE_DECLSPEC LibOIEResult liboie_iterator_count(LibOIE_Iterator pIterator, LibOIE_uint64 * pCount);

/*************************************************************************************************************************
 Class definition for DataPackage
**************************************************************************************************************************/

/**
* Returns the raw payload.
*
* @param[in] pDataPackage - DataPackage instance.
* @param[in] nPayloadBufferSize - Number of elements in buffer
* @param[out] pPayloadNeededCount - will be filled with the count of the written elements, or needed buffer size.
* @param[out] pPayloadBuffer - uint8 buffer of Raw payload data.
* @return error code or 0 (success)
*/
LIBOIE_DECLSPEC LibOIEResult liboie_datapackage_getrawpayload(LibOIE_DataPackage pDataPackage, const LibOIE_uint64 nPayloadBufferSize, LibOIE_uint64* pPayloadNeededCount, LibOIE_uint8 * pPayloadBuffer);

/**
* Releases memory of the data package.
*
* @param[in] pDataPackage - DataPackage instance.
* @return error code or 0 (success)
*/
LIBOIE_DECLSPEC LibOIEResult liboie_datapackage_release(LibOIE_DataPackage pDataPackage);

/*************************************************************************************************************************
 Class definition for PyroDataPackage
**************************************************************************************************************************/

/*************************************************************************************************************************
 Class definition for PyroDataPackageIterator
**************************************************************************************************************************/

/**
* Returns the data package the iterator points at.
*
* @param[in] pPyroDataPackageIterator - PyroDataPackageIterator instance.
* @param[out] pCurrentInstance - returns the data package instance.
* @return error code or 0 (success)
*/
LIBOIE_DECLSPEC LibOIEResult liboie_pyrodatapackageiterator_getcurrentpyrodatapackage(LibOIE_PyroDataPackageIterator pPyroDataPackageIterator, LibOIE_PyroDataPackage * pCurrentInstance);

/*************************************************************************************************************************
 Class definition for OctDataPackage
**************************************************************************************************************************/

/*************************************************************************************************************************
 Class definition for OctDataPackageIterator
**************************************************************************************************************************/

/**
* Returns the data package the iterator points at.
*
* @param[in] pOctDataPackageIterator - OctDataPackageIterator instance.
* @param[out] pCurrentInstance - returns the data package instance.
* @return error code or 0 (success)
*/
LIBOIE_DECLSPEC LibOIEResult liboie_octdatapackageiterator_getcurrentoctdatapackage(LibOIE_OctDataPackageIterator pOctDataPackageIterator, LibOIE_OctDataPackage * pCurrentInstance);

/*************************************************************************************************************************
 Class definition for RemoteFunctionCall
**************************************************************************************************************************/

/**
* Returns function name
*
* @param[in] pRemoteFunctionCall - RemoteFunctionCall instance.
* @param[in] nFunctionNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pFunctionNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pFunctionNameBuffer -  buffer of Function Name., may be NULL
* @return error code or 0 (success)
*/
LIBOIE_DECLSPEC LibOIEResult liboie_remotefunctioncall_getfunctionname(LibOIE_RemoteFunctionCall pRemoteFunctionCall, const LibOIE_uint32 nFunctionNameBufferSize, LibOIE_uint32* pFunctionNameNeededChars, char * pFunctionNameBuffer);

/**
* Adds a function call parameter
*
* @param[in] pRemoteFunctionCall - RemoteFunctionCall instance.
* @param[in] pParameter - Parameter of the call.
* @return error code or 0 (success)
*/
LIBOIE_DECLSPEC LibOIEResult liboie_remotefunctioncall_addparameter(LibOIE_RemoteFunctionCall pRemoteFunctionCall, const char * pParameter);

/**
* Sends a remote function call over its connection.
*
* @param[in] pRemoteFunctionCall - RemoteFunctionCall instance.
* @param[in] nResultStringBufferSize - size of the buffer (including trailing 0)
* @param[out] pResultStringNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pResultStringBuffer -  buffer of Returns result if successful., may be NULL
* @return error code or 0 (success)
*/
LIBOIE_DECLSPEC LibOIEResult liboie_remotefunctioncall_send(LibOIE_RemoteFunctionCall pRemoteFunctionCall, const LibOIE_uint32 nResultStringBufferSize, LibOIE_uint32* pResultStringNeededChars, char * pResultStringBuffer);

/*************************************************************************************************************************
 Class definition for Connection
**************************************************************************************************************************/

/**
* Disconnects and closes the connection
*
* @param[in] pConnection - Connection instance.
* @return error code or 0 (success)
*/
LIBOIE_DECLSPEC LibOIEResult liboie_connection_disconnect(LibOIE_Connection pConnection);

/**
* Sets timeout value for each poll request below.
*
* @param[in] pConnection - Connection instance.
* @param[in] nTimeout - Timeout in milliseconds. Default is 1000ms. Minimum 10ms, maximum 1000000ms.
* @return error code or 0 (success)
*/
LIBOIE_DECLSPEC LibOIEResult liboie_connection_setrequesttimeout(LibOIE_Connection pConnection, LibOIE_uint32 nTimeout);

/**
* Sets the maximum error messages that can be received before the connection is terminated.
*
* @param[in] pConnection - Connection instance.
* @param[in] nErrorCount - Max Error count. Default is 1024. Minimum 16, maximum 65535.
* @return error code or 0 (success)
*/
LIBOIE_DECLSPEC LibOIEResult liboie_connection_setmaxerrorcount(LibOIE_Connection pConnection, LibOIE_uint32 nErrorCount);

/**
* Sets the maximum memory buffer the data packets can use before the connection is terminated.
*
* @param[in] pConnection - Connection instance.
* @param[in] nMaxMemoryCount - Max memory count in bytes. Default is 1MB. Minimum 1kB, maximum 1GB.
* @return error code or 0 (success)
*/
LIBOIE_DECLSPEC LibOIEResult liboie_connection_setmaxmemorycount(LibOIE_Connection pConnection, LibOIE_uint32 nMaxMemoryCount);

/**
* Sets a temporary filename to which the packets are buffered.
*
* @param[in] pConnection - Connection instance.
* @param[in] pFileName - Filename which should be used as buffer.
* @param[in] nMaxMemoryCount - Max memory count in bytes. Default is 1MB. Minimum 1kB, maximum 1TB.
* @return error code or 0 (success)
*/
LIBOIE_DECLSPEC LibOIEResult liboie_connection_setbufferfile(LibOIE_Connection pConnection, const char * pFileName, LibOIE_uint64 nMaxMemoryCount);

/**
* Stops writing to disk.
*
* @param[in] pConnection - Connection instance.
* @return error code or 0 (success)
*/
LIBOIE_DECLSPEC LibOIEResult liboie_connection_unsetbufferfile(LibOIE_Connection pConnection);

/**
* Sets check alive interval. 0ms means no check alive request is sent.
*
* @param[in] pConnection - Connection instance.
* @param[in] nCheckAliveInterval - Timeout in milliseconds. Default is 1000ms. Max value is 1000000ms.
* @return error code or 0 (success)
*/
LIBOIE_DECLSPEC LibOIEResult liboie_connection_setcheckaliveinterval(LibOIE_Connection pConnection, LibOIE_uint32 nCheckAliveInterval);

/**
* Retrieves Firmware Version. Fails if firmware is not existing.
*
* @param[in] pConnection - Connection instance.
* @param[in] pFirmwareName - Name of the firmware to retrieve.
* @param[in] nFirmwareVersionBufferSize - size of the buffer (including trailing 0)
* @param[out] pFirmwareVersionNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pFirmwareVersionBuffer -  buffer of Version of the requested firmware., may be NULL
* @param[in] nFilenameBufferSize - size of the buffer (including trailing 0)
* @param[out] pFilenameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pFilenameBuffer -  buffer of Filename of the requested firmware., may be NULL
* @param[in] nFiledateBufferSize - size of the buffer (including trailing 0)
* @param[out] pFiledateNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pFiledateBuffer -  buffer of Timestamp of the requested firmware in ISO8601 Time., may be NULL
* @param[in] nSHA256BufferSize - size of the buffer (including trailing 0)
* @param[out] pSHA256NeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pSHA256Buffer -  buffer of Checksum of the requested firmware., may be NULL
* @return error code or 0 (success)
*/
LIBOIE_DECLSPEC LibOIEResult liboie_connection_retrievefirmwareversion(LibOIE_Connection pConnection, const char * pFirmwareName, const LibOIE_uint32 nFirmwareVersionBufferSize, LibOIE_uint32* pFirmwareVersionNeededChars, char * pFirmwareVersionBuffer, const LibOIE_uint32 nFilenameBufferSize, LibOIE_uint32* pFilenameNeededChars, char * pFilenameBuffer, const LibOIE_uint32 nFiledateBufferSize, LibOIE_uint32* pFiledateNeededChars, char * pFiledateBuffer, const LibOIE_uint32 nSHA256BufferSize, LibOIE_uint32* pSHA256NeededChars, char * pSHA256Buffer);

/**
* Retrieves Firmware Version. Fails if firmware is not existing.
*
* @param[in] pConnection - Connection instance.
* @param[in] pFirmwareName - Name of the new firmware.
* @param[in] pFirmwareVersion - Version of the new firmware.
* @param[in] pFileName - Filename of the new firmware.
* @param[in] pFileDate - Timestamp of the requested firmware in ISO8601 Time.
* @param[in] pSHA256 - Checksum of the new firmware.
* @param[in] nBinaryDataBufferSize - Number of elements in buffer
* @param[in] pBinaryDataBuffer - uint8 buffer of Blob of new firmware.
* @return error code or 0 (success)
*/
LIBOIE_DECLSPEC LibOIEResult liboie_connection_updatefirmware(LibOIE_Connection pConnection, const char * pFirmwareName, const char * pFirmwareVersion, const char * pFileName, const char * pFileDate, const char * pSHA256, LibOIE_uint64 nBinaryDataBufferSize, const LibOIE_uint8 * pBinaryDataBuffer);

/**
* Starts firmware on Open Interface Extension.
*
* @param[in] pConnection - Connection instance.
* @param[in] pFileName - Filename of the firmware to start.
* @param[out] pSuccess - Firmware successfully started.
* @return error code or 0 (success)
*/
LIBOIE_DECLSPEC LibOIEResult liboie_connection_startfirmware(LibOIE_Connection pConnection, const char * pFileName, bool * pSuccess);

/**
* Stops firmware on Open Interface Extension.
*
* @param[in] pConnection - Connection instance.
* @param[in] pFileName - Filename of the firmware to stop.
* @param[out] pSuccess - Firmware successfully stopped.
* @return error code or 0 (success)
*/
LIBOIE_DECLSPEC LibOIEResult liboie_connection_stopfirmware(LibOIE_Connection pConnection, const char * pFileName, bool * pSuccess);

/**
* sets a callback that triggers when a connection error occured.
*
* @param[in] pConnection - Connection instance.
* @param[in] pCallback - callback pointer.
* @return error code or 0 (success)
*/
LIBOIE_DECLSPEC LibOIEResult liboie_connection_setconnectionerrorcallback(LibOIE_Connection pConnection, LibOIE::ConnectionErrorCallback pCallback);

/**
* clears the error log.
*
* @param[in] pConnection - Connection instance.
* @return error code or 0 (success)
*/
LIBOIE_DECLSPEC LibOIEResult liboie_connection_clearerrors(LibOIE_Connection pConnection);

/**
* Returns the list of errors in the error log.
*
* @param[in] pConnection - Connection instance.
* @param[out] pErrorCount - Errors in the error log.
* @return error code or 0 (success)
*/
LIBOIE_DECLSPEC LibOIEResult liboie_connection_geterrorcount(LibOIE_Connection pConnection, LibOIE_uint32 * pErrorCount);

/**
* Returns an error message of the error log
*
* @param[in] pConnection - Connection instance.
* @param[in] nErrorIndex - Index of the error.
* @param[in] nErrorMessageBufferSize - size of the buffer (including trailing 0)
* @param[out] pErrorMessageNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pErrorMessageBuffer -  buffer of Message of the error., may be NULL
* @param[in] nTimestampBufferSize - size of the buffer (including trailing 0)
* @param[out] pTimestampNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pTimestampBuffer -  buffer of ISO8601 Time when the error was reported., may be NULL
* @return error code or 0 (success)
*/
LIBOIE_DECLSPEC LibOIEResult liboie_connection_geterror(LibOIE_Connection pConnection, LibOIE_uint32 nErrorIndex, const LibOIE_uint32 nErrorMessageBufferSize, LibOIE_uint32* pErrorMessageNeededChars, char * pErrorMessageBuffer, const LibOIE_uint32 nTimestampBufferSize, LibOIE_uint32* pTimestampNeededChars, char * pTimestampBuffer);

/**
* Creates a new remote function call.
*
* @param[in] pConnection - Connection instance.
* @param[in] pFunctionName - Function name.
* @param[out] pInstance - Function call instance.
* @return error code or 0 (success)
*/
LIBOIE_DECLSPEC LibOIEResult liboie_connection_createremotefunctioncall(LibOIE_Connection pConnection, const char * pFunctionName, LibOIE_RemoteFunctionCall * pInstance);

/**
* Retrieves currently buffered pyro packages.
*
* @param[in] pConnection - Connection instance.
* @param[out] pIterator - Iterator of buffered packages.
* @return error code or 0 (success)
*/
LIBOIE_DECLSPEC LibOIEResult liboie_connection_getbufferedpyropackages(LibOIE_Connection pConnection, LibOIE_PyroDataPackageIterator * pIterator);

/**
* Retrieves currently buffered oct packages.
*
* @param[in] pConnection - Connection instance.
* @param[out] pIterator - Iterator of buffered packages.
* @return error code or 0 (success)
*/
LIBOIE_DECLSPEC LibOIEResult liboie_connection_getbufferedoctpackages(LibOIE_Connection pConnection, LibOIE_OctDataPackageIterator * pIterator);

/*************************************************************************************************************************
 Class definition for ConnectionIterator
**************************************************************************************************************************/

/**
* Returns the connection the iterator points at.
*
* @param[in] pConnectionIterator - ConnectionIterator instance.
* @param[out] pCurrentInstance - returns the connection instance.
* @return error code or 0 (success)
*/
LIBOIE_DECLSPEC LibOIEResult liboie_connectioniterator_getcurrentconnection(LibOIE_ConnectionIterator pConnectionIterator, LibOIE_Connection * pCurrentInstance);

/*************************************************************************************************************************
 Class definition for Server
**************************************************************************************************************************/

/**
* starts listening for connections.
*
* @param[in] pServer - Server instance.
* @param[in] pIPAddress - IP Address to run on
* @param[in] nPort - Port to run on
* @param[in] bIPv6 - flag if IPv6 should be used
* @return error code or 0 (success)
*/
LIBOIE_DECLSPEC LibOIEResult liboie_server_start(LibOIE_Server pServer, const char * pIPAddress, LibOIE_uint32 nPort, bool bIPv6);

/**
* stops listening for connections and disconnects existing ones.
*
* @param[in] pServer - Server instance.
* @return error code or 0 (success)
*/
LIBOIE_DECLSPEC LibOIEResult liboie_server_stop(LibOIE_Server pServer);

/**
* disconnects all connections but does not stop listening.
*
* @param[in] pServer - Server instance.
* @return error code or 0 (success)
*/
LIBOIE_DECLSPEC LibOIEResult liboie_server_closeallconnections(LibOIE_Server pServer);

/**
* sets the maximum thread count to use. Must be called before Start
*
* @param[in] pServer - Server instance.
* @param[in] nThreadCount - Thread count to use (must be larger than 4, default is 32)
* @return error code or 0 (success)
*/
LIBOIE_DECLSPEC LibOIEResult liboie_server_setthreadcount(LibOIE_Server pServer, LibOIE_uint32 nThreadCount);

/**
* sets the receive buffer size
*
* @param[in] pServer - Server instance.
* @param[in] nRCVBufferSize - Receive buffer size to use in bytes (must be between 4kB and 1GB, default is 1MB)
* @return error code or 0 (success)
*/
LIBOIE_DECLSPEC LibOIEResult liboie_server_setbuffersize(LibOIE_Server pServer, LibOIE_uint32 nRCVBufferSize);

/**
* adds an accepted device
*
* @param[in] pServer - Server instance.
* @param[in] pDeviceName - Device name to be accepted. Empty string means all devices.
* @param[in] pApplicationName - Application name to be accepted. Empty string means all applications.
* @param[in] pVersionName - Version name to be accepted. Empty string means all versions.
* @param[out] pRuleID - Returns identifier of acceptance rule.
* @return error code or 0 (success)
*/
LIBOIE_DECLSPEC LibOIEResult liboie_server_acceptdevice(LibOIE_Server pServer, const char * pDeviceName, const char * pApplicationName, const char * pVersionName, LibOIE_uint32 * pRuleID);

/**
* removes an accepted
*
* @param[in] pServer - Server instance.
* @param[in] nRuleID - identifier of acceptance rule.
* @return error code or 0 (success)
*/
LIBOIE_DECLSPEC LibOIEResult liboie_server_unacceptdevice(LibOIE_Server pServer, LibOIE_uint32 nRuleID);

/**
* clears all accepted device rules
*
* @param[in] pServer - Server instance.
* @return error code or 0 (success)
*/
LIBOIE_DECLSPEC LibOIEResult liboie_server_clearaccepteddevices(LibOIE_Server pServer);

/**
* lists all open connections
*
* @param[in] pServer - Server instance.
* @param[out] pConnectionIteratorInstance - list of all open connections.
* @return error code or 0 (success)
*/
LIBOIE_DECLSPEC LibOIEResult liboie_server_listconnections(LibOIE_Server pServer, LibOIE_ConnectionIterator * pConnectionIteratorInstance);

/**
* sets a callback that triggers when a new connection was established.
*
* @param[in] pServer - Server instance.
* @param[in] pCallback - callback pointer.
* @return error code or 0 (success)
*/
LIBOIE_DECLSPEC LibOIEResult liboie_server_setconnectionacceptedcallback(LibOIE_Server pServer, LibOIE::ConnectionAcceptedCallback pCallback);

/**
* sets a callback that triggers when a new connection was rejected.
*
* @param[in] pServer - Server instance.
* @param[in] pCallback - callback pointer.
* @return error code or 0 (success)
*/
LIBOIE_DECLSPEC LibOIEResult liboie_server_setconnectionrejectedcallback(LibOIE_Server pServer, LibOIE::ConnectionRejectedCallback pCallback);

/*************************************************************************************************************************
 Global functions
**************************************************************************************************************************/

/**
* retrieves the binary version of this library.
*
* @param[out] pMajor - returns the major version of this library
* @param[out] pMinor - returns the minor version of this library
* @param[out] pMicro - returns the micro version of this library
* @return error code or 0 (success)
*/
LIBOIE_DECLSPEC LibOIEResult liboie_getversion(LibOIE_uint32 * pMajor, LibOIE_uint32 * pMinor, LibOIE_uint32 * pMicro);

/**
* Returns the last error recorded on this object
*
* @param[in] pInstance - Instance Handle
* @param[in] nErrorMessageBufferSize - size of the buffer (including trailing 0)
* @param[out] pErrorMessageNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pErrorMessageBuffer -  buffer of Message of the last error, may be NULL
* @param[out] pHasError - Is there a last error to query
* @return error code or 0 (success)
*/
LIBOIE_DECLSPEC LibOIEResult liboie_getlasterror(LibOIE_Base pInstance, const LibOIE_uint32 nErrorMessageBufferSize, LibOIE_uint32* pErrorMessageNeededChars, char * pErrorMessageBuffer, bool * pHasError);

/**
* Releases shared ownership of an Instance
*
* @param[in] pInstance - Instance Handle
* @return error code or 0 (success)
*/
LIBOIE_DECLSPEC LibOIEResult liboie_releaseinstance(LibOIE_Base pInstance);

/**
* Acquires shared ownership of an Instance
*
* @param[in] pInstance - Instance Handle
* @return error code or 0 (success)
*/
LIBOIE_DECLSPEC LibOIEResult liboie_acquireinstance(LibOIE_Base pInstance);

/**
* Returns the address of the SymbolLookupMethod
*
* @param[out] pSymbolLookupMethod - Address of the SymbolAddressMethod
* @return error code or 0 (success)
*/
LIBOIE_DECLSPEC LibOIEResult liboie_getsymbollookupmethod(LibOIE_pvoid * pSymbolLookupMethod);

/**
* Creates a open interface extension server instance.
*
* @param[out] pInstance - New Server instance
* @return error code or 0 (success)
*/
LIBOIE_DECLSPEC LibOIEResult liboie_createserver(LibOIE_Server * pInstance);

#ifdef __cplusplus
}
#endif

#endif // __LIBOIE_HEADER_CPP

