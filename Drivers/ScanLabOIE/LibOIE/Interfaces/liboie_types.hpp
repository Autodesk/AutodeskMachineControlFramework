/*++

Copyright (C) 2020 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.7.0-develop.

Abstract: This is an autogenerated C++-Header file with basic types in
order to allow an easy use of ScanLab Open Interface Extension

Interface version: 1.0.0

*/

#ifndef __LIBOIE_TYPES_HEADER_CPP
#define __LIBOIE_TYPES_HEADER_CPP


/*************************************************************************************************************************
 Scalar types definition
**************************************************************************************************************************/

#ifdef LIBOIE_USELEGACYINTEGERTYPES

typedef unsigned char LibOIE_uint8;
typedef unsigned short LibOIE_uint16 ;
typedef unsigned int LibOIE_uint32;
typedef unsigned long long LibOIE_uint64;
typedef char LibOIE_int8;
typedef short LibOIE_int16;
typedef int LibOIE_int32;
typedef long long LibOIE_int64;

#else // LIBOIE_USELEGACYINTEGERTYPES

#include <stdint.h>

typedef uint8_t LibOIE_uint8;
typedef uint16_t LibOIE_uint16;
typedef uint32_t LibOIE_uint32;
typedef uint64_t LibOIE_uint64;
typedef int8_t LibOIE_int8;
typedef int16_t LibOIE_int16;
typedef int32_t LibOIE_int32;
typedef int64_t LibOIE_int64 ;

#endif // LIBOIE_USELEGACYINTEGERTYPES

typedef float LibOIE_single;
typedef double LibOIE_double;

/*************************************************************************************************************************
 General type definitions
**************************************************************************************************************************/

typedef LibOIE_int32 LibOIEResult;
typedef void * LibOIEHandle;
typedef void * LibOIE_pvoid;

/*************************************************************************************************************************
 Version for LibOIE
**************************************************************************************************************************/

#define LIBOIE_VERSION_MAJOR 1
#define LIBOIE_VERSION_MINOR 0
#define LIBOIE_VERSION_MICRO 0
#define LIBOIE_VERSION_PRERELEASEINFO ""
#define LIBOIE_VERSION_BUILDINFO ""

/*************************************************************************************************************************
 Error constants for LibOIE
**************************************************************************************************************************/

#define LIBOIE_SUCCESS 0
#define LIBOIE_ERROR_NOTIMPLEMENTED 1
#define LIBOIE_ERROR_INVALIDPARAM 2
#define LIBOIE_ERROR_INVALIDCAST 3
#define LIBOIE_ERROR_BUFFERTOOSMALL 4
#define LIBOIE_ERROR_GENERICEXCEPTION 5
#define LIBOIE_ERROR_COULDNOTLOADLIBRARY 6
#define LIBOIE_ERROR_COULDNOTFINDLIBRARYEXPORT 7
#define LIBOIE_ERROR_INCOMPATIBLEBINARYVERSION 8
#define LIBOIE_ERROR_INTERNALERROR 9
#define LIBOIE_ERROR_UNKNOWNPACKETTYPE 1000
#define LIBOIE_ERROR_UNSUPPORTEDPACKETVERSION 1001
#define LIBOIE_ERROR_STRINGEXCEEDSCHARACTERLIMIT 1002
#define LIBOIE_ERROR_READINGPACKETHEADERALREADY 1003
#define LIBOIE_ERROR_VARIABLEDATANOTFULLYREAD 1004
#define LIBOIE_ERROR_VARIABLEDATAINVALIDBOOLEANVALUE 1005
#define LIBOIE_ERROR_VARIABLEVALUEEXCEEDSMINIMUM 1006
#define LIBOIE_ERROR_VARIABLEVALUEEXCEEDSMAXIMUM 1007
#define LIBOIE_ERROR_PACKETSHOULDNOTHAVEPAYLOAD 1008
#define LIBOIE_ERROR_INVALIDVARIABLEHEADERSIZE 1009
#define LIBOIE_ERROR_VARIABLEHEADERREADERROR 1010
#define LIBOIE_ERROR_INSUFFICIENTPACKETDATA 1011
#define LIBOIE_ERROR_INVALIDPACKETVERSION 1012
#define LIBOIE_ERROR_PACKETVERSIONALREADYWRITTEN 1013
#define LIBOIE_ERROR_VARIABLEHEADERALREADYWRITTEN 1014
#define LIBOIE_ERROR_NOVARIABLEHEADERCONTENT 1015

/*************************************************************************************************************************
 Error strings for LibOIE
**************************************************************************************************************************/

inline const char * LIBOIE_GETERRORSTRING (LibOIEResult nErrorCode) {
  switch (nErrorCode) {
    case LIBOIE_SUCCESS: return "no error";
    case LIBOIE_ERROR_NOTIMPLEMENTED: return "functionality not implemented";
    case LIBOIE_ERROR_INVALIDPARAM: return "an invalid parameter was passed";
    case LIBOIE_ERROR_INVALIDCAST: return "a type cast failed";
    case LIBOIE_ERROR_BUFFERTOOSMALL: return "a provided buffer is too small";
    case LIBOIE_ERROR_GENERICEXCEPTION: return "a generic exception occurred";
    case LIBOIE_ERROR_COULDNOTLOADLIBRARY: return "the library could not be loaded";
    case LIBOIE_ERROR_COULDNOTFINDLIBRARYEXPORT: return "a required exported symbol could not be found in the library";
    case LIBOIE_ERROR_INCOMPATIBLEBINARYVERSION: return "the version of the binary interface does not match the bindings interface";
    case LIBOIE_ERROR_INTERNALERROR: return "Internal error";
    case LIBOIE_ERROR_UNKNOWNPACKETTYPE: return "received unknown packet type.";
    case LIBOIE_ERROR_UNSUPPORTEDPACKETVERSION: return "received unsupported packet version.";
    case LIBOIE_ERROR_STRINGEXCEEDSCHARACTERLIMIT: return "string exceeds maximum character size.";
    case LIBOIE_ERROR_READINGPACKETHEADERALREADY: return "packed header is already being read.";
    case LIBOIE_ERROR_VARIABLEDATANOTFULLYREAD: return "variable data has not been fully read.";
    case LIBOIE_ERROR_VARIABLEDATAINVALIDBOOLEANVALUE: return "invalid boolean value in variable data.";
    case LIBOIE_ERROR_VARIABLEVALUEEXCEEDSMINIMUM: return "variable data exceeds minimum.";
    case LIBOIE_ERROR_VARIABLEVALUEEXCEEDSMAXIMUM: return "variable data exceeds maximum.";
    case LIBOIE_ERROR_PACKETSHOULDNOTHAVEPAYLOAD: return "packet should not have payload.";
    case LIBOIE_ERROR_INVALIDVARIABLEHEADERSIZE: return "invalid variable header size.";
    case LIBOIE_ERROR_VARIABLEHEADERREADERROR: return "variable header read error.";
    case LIBOIE_ERROR_INSUFFICIENTPACKETDATA: return "insufficient packet data.";
    case LIBOIE_ERROR_INVALIDPACKETVERSION: return "invalid packet version.";
    case LIBOIE_ERROR_PACKETVERSIONALREADYWRITTEN: return "packet version already written.";
    case LIBOIE_ERROR_VARIABLEHEADERALREADYWRITTEN: return "variable header already written.";
    case LIBOIE_ERROR_NOVARIABLEHEADERCONTENT: return "no variable header content.";
    default: return "unknown error";
  }
}

/*************************************************************************************************************************
 Declaration of handle classes 
**************************************************************************************************************************/

typedef LibOIEHandle LibOIE_Base;
typedef LibOIEHandle LibOIE_Iterator;
typedef LibOIEHandle LibOIE_DataPackage;
typedef LibOIEHandle LibOIE_PyroDataPackage;
typedef LibOIEHandle LibOIE_PyroDataPackageIterator;
typedef LibOIEHandle LibOIE_OctDataPackage;
typedef LibOIEHandle LibOIE_OctDataPackageIterator;
typedef LibOIEHandle LibOIE_RemoteFunctionCall;
typedef LibOIEHandle LibOIE_Connection;
typedef LibOIEHandle LibOIE_ConnectionIterator;
typedef LibOIEHandle LibOIE_Server;

namespace LibOIE {

  /*************************************************************************************************************************
   Declaration of function pointers 
  **************************************************************************************************************************/
  
  /**
  * ConnectionAcceptedCallback - A callback that is triggered when a device or application has connected.
  *
  * @param[in] pConnectionInstance - Returns whether the calculation should be aborted
  * @param[in] pUserData - Userdata that is passed to the callback function
  */
  typedef void(*ConnectionAcceptedCallback)(LibOIE_Connection, LibOIE_pvoid);
  
  /**
  * ConnectionRejectedCallback - A callback that is triggered when a device or application has been denied connecting.
  *
  * @param[in] pDeviceName - Device name that was sent.
  * @param[in] pApplicationName - Application name that was sent.
  * @param[in] pVersionName - Version name that was sent.
  * @param[in] pUserData - Userdata that is passed to the callback function
  */
  typedef void(*ConnectionRejectedCallback)(const char *, const char *, const char *, LibOIE_pvoid);
  
  /**
  * ConnectionErrorCallback - A callback that is triggered when a connection sends an error state.
  *
  * @param[in] pErrorMessage - Error string that was triggered.
  */
  typedef void(*ConnectionErrorCallback)(const char *);
  
} // namespace LibOIE;

// define legacy C-names for enums, structs and function types
typedef LibOIE::ConnectionAcceptedCallback LibOIEConnectionAcceptedCallback;
typedef LibOIE::ConnectionRejectedCallback LibOIEConnectionRejectedCallback;
typedef LibOIE::ConnectionErrorCallback LibOIEConnectionErrorCallback;

#endif // __LIBOIE_TYPES_HEADER_CPP
