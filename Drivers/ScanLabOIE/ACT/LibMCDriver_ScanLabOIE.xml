<?xml version="1.0" encoding="UTF-8"?>
<component xmlns="http://schemas.autodesk.com/netfabb/automaticcomponenttoolkit/2018" 
	libraryname="MC Driver ScanLab Open Interface Extension" namespace="LibMCDriver_ScanLabOIE" copyright="Autodesk Inc." year="2020" basename="libmcdriver_scanlaboie"
	version="2.0.0">
	<license>
		<line value="All rights reserved." />
		<line value="" />
		<line value="Redistribution and use in source and binary forms, with or without" />
		<line value="modification, are permitted provided that the following conditions are met:" />
		<line value="    * Redistributions of source code must retain the above copyright" />
		<line value="      notice, this list of conditions and the following disclaimer." />
		<line value="    * Redistributions in binary form must reproduce the above copyright" />
		<line value="      notice, this list of conditions and the following disclaimer in the" />
		<line value="      documentation and/or other materials provided with the distribution." />
		<line value="    * Neither the name of the Autodesk Inc. nor the" />
		<line value="      names of its contributors may be used to endorse or promote products" />
		<line value="      derived from this software without specific prior written permission." />
		<line value="" />
		<line value="THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND" />
		<line value="ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED" />
		<line value="WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE" />
		<line value="DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY" />
		<line value="DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES" />
		<line value="(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;" />
		<line value="LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND" />
		<line value="ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT" />
		<line value="(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS" />
		<line value="SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." />
		<line value="" />
	</license>
	
	<bindings>
		<binding language="CppDynamic" indentation="tabs" documentation="1" />
	</bindings>
	<implementations>
		<implementation language="Cpp" indentation="tabs"/>
	</implementations>
	
	
	<importcomponent uri="../../../ACT/LibMCEnv.xml" namespace="LibMCEnv"/>
	
	<errors>
		<error name="NOTIMPLEMENTED" code="1" description="functionality not implemented" />
		<error name="INVALIDPARAM" code="2" description="an invalid parameter was passed" />
		<error name="INVALIDCAST" code="3" description="a type cast failed" />
		<error name="BUFFERTOOSMALL" code="4" description="a provided buffer is too small" />
		<error name="GENERICEXCEPTION" code="5" description="a generic exception occurred" />
		<error name="COULDNOTLOADLIBRARY" code="6" description="the library could not be loaded" />
		<error name="COULDNOTFINDLIBRARYEXPORT" code="7" description="a required exported symbol could not be found in the library" />
		<error name="INCOMPATIBLEBINARYVERSION" code="8" description="the version of the binary interface does not match the bindings interface" />
		
		<error name="INVALIDDRIVERTYPE" code="1000" description="Invalid OIE Driver type" />
		<error name="INVALIDDRIVERNAME" code="1001" description="Invalid OIE Driver name" />
		<error name="INVALIDDRIVERENVIRONMENT" code="1002" description="Invalid OIE Driver environment" />		
		<error name="SDKALREADYINITIALIZED" code="1003" description="SDK already initialized." />
		<error name="INVALIDSCANLABOIESDK" code="1004" description="Invalid Scanlab OIE SDK." />
		
		<error name="DEVICENOTAVAILABLEANYMORE" code="1005" description="Device not available anymore." />
		<error name="COULDNOTADDDEVICE" code="1006" description="Could not add device." />
		<error name="DEVICEALREADYCONNECTED" code="1007" description="Device already connected." />
		<error name="DEVICEALREADYREMOVED" code="1008" description="Device already removed." />
		<error name="DEVICENOTCONNECTED" code="1009" description="Device not connected." />
		<error name="INVALIDAPPCOUNTONDEVICE" code="1010" description="Invalid app count on device." />
		<error name="INVALIDAPPINDEX" code="1011" description="Invalid app index." />		
		<error name="INVALIDAPPNAME" code="1012" description="Invalid app name." />		
		<error name="INVALIDAPPVERSION" code="1013" description="Invalid app version." />		
		
		<error name="INVALIDRESPONSETIMEOUT" code="1014" description="Invalid response timeout." />	
		<error name="INVALIDAPPPACKAGEBUFFER" code="1015" description="Invalid app package buffer." />	
		<error name="INVALIDRESOURCENAME" code="1016" description="Invalid resource name." />	
		
		<error name="COULDNOTSTORELIBRESSLRESOURCE" code="1017" description="Could not store LibreSSL resource." />	
		<error name="COULDNOTSTORELIBCRYPTORESOURCE" code="1018" description="Could not store LibCrypto resource." />	
		<error name="COULDNOTSTOREQT5CORERESOURCE" code="1019" description="Could not store QT5Core resource." />	
		<error name="COULDNOTSTOREQT5NETWORKRESOURCE" code="1020" description="Could not store QT5Network resource." />					
		
		<error name="SCANLABOIESDKNOTLOADED" code="1021" description="Scanlab OIE SDK not loaded." />	
		<error name="INVALIDDEVICENAME" code="1022" description="Invalid device name." />	
		<error name="DEVICEHASNOTBEENFOUND" code="1023" description="Device has not been found." />	
		<error name="DEVICEISALREADYEXISTING" code="1024" description="Device is already existing." />	
		<error name="EMPTYDEVICENAME" code="1025" description="Empty device name." />	
		
		<error name="INVALIDVALUESPERRECORD" code="1026" description="Invalid values per record." />	
		<error name="INVALIDBUFFERSIZE" code="1027" description="Invalid buffer size." />	
		<error name="PACKETISNOTRECORDING" code="1028" description="Packet is not recording." />	
		<error name="TOOMANYVALUESINPACKET" code="1029" description="Too many values in packet." />	
		<error name="NOTENOUGHVALUESINPACKET" code="1030" description="Not enough values in packet." />	
		<error name="BUFFEROVERFLOW" code="1031" description="Buffer overflow." />	
		<error name="INVALIDRTCSIGNALCOUNT" code="1032" description="Invalid RTC signal count." />	
		<error name="INVALIDSENSORSIGNALCOUNT" code="1033" description="Invalid Sensor signal count." />	
		<error name="NODATARECORDINGAVAILABLE" code="1034" description="No data recording available." />	
		<error name="INVALIDRTCVALUESPERRECORD" code="1035" description="Invalid RTC values per record." />	
		<error name="INVALIDRECORDINDEX" code="1036" description="Invalid record index." />			
		<error name="INVALIDSIGNALINDEX" code="1037" description="Invalid signal index." />	
		<error name="COULDNOTSTARTAPP" code="1038" description="Could not start app." />	
		<error name="COULDNOTSTOPAPP" code="1039" description="Could not stop app." />	
		<error name="INVALIDSENSORINDEX" code="1040" description="Invalid sensor index." />	
		<error name="INVALIDRTCINDEX" code="1041" description="Invalid RTC index." />
		<error name="COULDNOTSTOREOIECALIBRATIONLIBRARYBUFFER" code="1042" description="Could not store OIE Calibration library buffer." />
		<error name="COULDNOTSTORERTCSTREAMPARSERBUFFER" code="1043" description="Could not store RTC Stream parser buffer." />
		<error name="COULDNOTGETRTCSIGNALIDS" code="1044" description="Could not get RTC Signal IDs." />
		
		<error name="COULDNOTCREATEDEVICECONFIGURATION" code="1045" description="Could not create device configuration." />
		<error name="UNSUPPORTEDOIESDKVERSION" code="1046" description="Unsupported OIE SDK Version." />
		<error name="INVALIDDEVICECONFIGURATION" code="1047" description="Invalid device configuration." />
		<error name="OIESDKLIBRARYRETURNSINVALIDVERSION" code="1048" description="OIE SDK Library returns invalid version." />
		
		<error name="INVALIDADDITIONALSIGNALCOUNT" code="1049" description="Invalid Additional signal count." />	
		
		
	</errors>
	
	<enum name="RTCDeviceType">
		<option name="Unknown" value="0" />
		<option name="RTC5" value="1" />
		<option name="RTC6" value="2" />
	</enum>

	<enum name="OIEDeviceDriverType">
	   <option name="Unknown" value="0" />
	   <option name="OIEVersion2" value="1" />
	   <option name="OIEVersion3Compatibility" value="2" />
	   <option name="OIEVersion3" value="3" />
	</enum>

	
<!--

This base Driver interface MUST be in Sync with LibMCDriver.xml

-->
	
	<class name="Base">
	</class>
	
	<class name="Driver" parent="Base" description="An abstract Machine Control Driver">

		<method name="Configure" description = "Configures a driver with its specific configuration data.">
			<param name="ConfigurationString" type="string" pass="in" description="Configuration data of driver." />
		</method>
	
		<method name="GetName" description = "returns the name identifier of the driver">
			<param name="Name" type="string" pass="return" description="Name of the driver." />
		</method>

		<method name="GetType" description = "returns the type identifier of the driver">
			<param name="Type" type="string" pass="return" description="Type of the driver." />
		</method>

		<method name="GetVersion" description = "returns the version identifiers of the driver">
			<param name="Major" type="uint32" pass="out" description="Major version." />
			<param name="Minor" type="uint32" pass="out" description="Minor version." />
			<param name="Micro" type="uint32" pass="out" description="Micro version." />
			<param name="Build" type="string" pass="out" description="Build identifier." />
		</method>

		<method name="QueryParameters" description = "Updates the driver parameters in the driver environment. Should only be called in the driver thread.">
		</method>

		<method name="QueryParametersEx" description = "Updates the driver parameters in the driver environment. Might be called out of thread. Implementation MUST be able to handle parallel calls.">
			<param name="DriverUpdateInstance" type="class" class="LibMCEnv:DriverStatusUpdateSession" pass="in" description="Status update instance." />
		</method>
	
	</class>

<!--

End Interface

-->


<!--

Custom implementation

-->
	<class name="DeviceConfiguration" parent="Base" description="An object holding a OIE device configuration">
	
		<method name="GetDeviceType" description="Returns if the device is configured to work with an RTC5 or RTC6 card.">
			<param name="DeviceType" type="enum" class="RTCDeviceType" pass="return" description="Configured device Type" />
		</method>	
	
		<method name="GetRTCSignalCount" description="Returns the configured RTC signal count of the configuration.">
			<param name="SignalCount" type="uint32" pass="return" description="RTC Signal Count" />
		</method>	

		<method name="GetSensorSignalCount" description="Returns the configured Sensor signal count of the configuration.">
			<param name="SignalCount" type="uint32" pass="return" description="Sensor Signal Count" />
		</method>	

		<method name="GetAdditionalSignalCount" description="Returns the configured Additional signal count of the configuration.">
			<param name="SignalCount" type="uint32" pass="return" description="Additional Signal Count" />
		</method>	
		
		<method name="GetRTCSignalIDs" description="Returns the configured RTC signal IDs of the configuration.">
			<param name="SignalIDs" type="basicarray" class="uint32" pass="out" description="RTC Signal IDs" />
		</method>	

		<method name="GetSensorSignalIDs" description="Returns the configured Sensor signal IDs of the configuration.">
			<param name="SignalIDs" type="basicarray" class="uint32" pass="out" description="Sensor Signal IDs" />
		</method>	

		<method name="GetAdditionalSignalIDs" description="Returns the configured Additional signal IDs of the configuration.">
			<param name="AdditionalIDs" type="basicarray" class="uint32" pass="out" description="Additional Signal IDs" />
		</method>	

		<method name="GetAdditionalSignalInfo" description="Returns the configured Additional signal information.">
			<param name="Index" type="uint32" pass="in" description="Index of additional signal. 0-based." />
			<param name="SignalID" type="uint32" pass="out" description="ID of additional signal." />
			<param name="SignalName" type="string" pass="out" description="Name of additional signal." />
		</method>	
		
		<method name="GetDeviceConfigurationString" description="Returns the device configuration string.">
			<param name="DeviceConfigurationString" type="string" pass="return" description="Device configuration string." />
		</method>	

	</class>


	<class name="DataRecording" parent="Base" description="An object holding the content of a recording session recording.">
		
		<method name="GetRTCSignalCount" description="Returns the configured RTC signal count of the configuration.">
			<param name="SignalCount" type="uint32" pass="return" description="RTC Signal Count" />
		</method>	

		<method name="GetSensorSignalCount" description="Returns the configured Sensor signal count of the configuration.">
			<param name="SignalCount" type="uint32" pass="return" description="Sensor Signal Count" />
		</method>	
		
		<method name="GetRecordCount" description="Returns the number of records in the recording.">
			<param name="Record" type="uint64" pass="return" description="Number of records in the recording" />
		</method>	

		<method name="GetRecordInformation" description="Returns the information about a specific record.">
			<param name="Index" type="uint32" pass="in" description="Index of the record. 0-based. MUST be smaller than RecordCount." />
			<param name="PacketNumber" type="uint32" pass="out" description="Packet Number of the record." />
			<param name="X" type="double" pass="out" description="X Coordinate of the record." />
			<param name="Y" type="double" pass="out" description="Y Coordinate of the record." />
		</method>	

		<method name="GetRTCSignalsOfRecord" description="Returns the RTC signals of a specific record.">
			<param name="Index" type="uint32" pass="in" description="Index of the record. 0-based. MUST be smaller than RecordCount." />
			<param name="RTCSignals" type="basicarray" class="int32" pass="out" description="Recorded RTC Signals" />
		</method>	

		<method name="GetSensorSignalsOfRecord" description="Returns the sensor signals of a specific record.">
			<param name="Index" type="uint32" pass="in" description="Index of the record. 0-based. MUST be smaller than RecordCount." />
			<param name="SensorSignals" type="basicarray" class="int32" pass="out" description="Recorded Sensor Signals" />
		</method>	
		
		<method name="GetAllCoordinates" description="Returns an array of all coordinates.">
			<param name="XArray" type="basicarray" class="double" pass="out" description="Array of X Coordinates of all records." />
			<param name="YArray" type="basicarray" class="double" pass="out" description="Array of Y Coordinates of all records." />
		</method>	
		
		<method name="GetAllPacketNumbers" description="Returns an array of all packet numbers.">
			<param name="PacketNumers" type="basicarray" class="uint32" pass="out" description="Array of Packet Numbers of all records." />
		</method>	

		<method name="GetAllRTCSignals" description="Returns an array of all RTC signals of a specific index.">
			<param name="RTCIndex" type="uint32" pass="in" description="Index of the signal to return. 0-based. MUST be smaller than RTCSignalCount." />
			<param name="Signals" type="basicarray" class="int32" pass="out" description="Array of the Indexed Sensor Signal of all records." />
		</method>	

		<method name="GetAllSensorSignals" description="Returns an array of all sensor signals of a specific index.">
			<param name="SignalIndex" type="uint32" pass="in" description="Index of the signal to return. 0-based. MUST be smaller than SensorSignalCount." />
			<param name="Signals" type="basicarray" class="int32" pass="out" description="Array of the Indexed RTC Signal of all records." />
		</method>	
		
		<method name="StoreAsBuildData" description="Stores the recording attached to a build data object. The mime-type of the data will be application/scanlaboie-1.0.">
			<param name="Name" type="string" pass="in" description="Name of the recording to be stored." />
			<param name="Build" type="class" class="LibMCEnv:Build" pass="in" description="Build that should store the data." />
			<param name="DataUUID" type="string" pass="return" description="Data UUID of the build data." />
		</method>	
				

	</class>


	<class name="OIEDevice" parent="Base" description="An attached device of the Open Interface Extension.">
		
		<method name="GetDeviceName" description="Returns the unique name of the device.">
			<param name="DeviceName" type="string" pass="return" description="Name of device." />
		</method>
	
		<method name="SetHostName" description="Sets the host name of the device. Fails if device is already connected.">
			<param name="HostName" type="string" pass="in" description="New Host name of device." />
		</method>
	
		<method name="GetHostName" description="Returns the host name of the device.">
			<param name="HostName" type="string" pass="return" description="Host name of device." />
		</method>
	
		<method name="SetPort" description="Sets the port of the device. Fails if device is already connected.">
			<param name="Port" type="uint32" pass="in" description="New port of device." />
		</method>
		
		<method name="GetPort" description="Returns the port of the device. Fails if device is already connected.">
			<param name="Port" type="uint32" pass="return" description="Port of device." />
		</method>

		<method name="IsConnected" description="Returns if the device is connected and logged in.">
			<param name="Value" type="bool" pass="return" description="Flag if the device is connected." />
		</method>
		
		<method name="GetDeviceID" description="Returns the ID of the device.">
			<param name="DeviceID" type="uint32" pass="return" description="ID of the device." />
		</method>
		
		
		<method name="Connect" description="Connects to the device and attempts to log in with user name and password.">
			<param name="UserName" type="string" pass="in" description="UserName to use." />
			<param name="Password" type="string" pass="in" description="Password to use." />
		</method>		

		<method name="Disconnect" description="Disconnects from the device. Has no effect if device is not connected.">
		</method>

		<method name="RefreshAppList" description="Refreshes the list of installed apps on the system.">
		</method>

		<method name="GetAppCount" description="Returns how many apps are installed on the device. Fails if device is not connected.">
			<param name="Count" type="uint32" pass="return" description="Number of apps installed on the device." />
		</method>
	
		<method name="GetAppName" description="Returns the name of an app from the app list.">
			<param name="Index" type="uint32" pass="in" description="Index of App, 0-based" />
			<param name="Name" type="string" pass="return" description="Name of app." />
		</method>
		
		<method name="GetAppVersion" description="Returns the version of an app from the app list.">
			<param name="Index" type="uint32" pass="in" description="Index of App, 0-based" />
			<param name="Major" type="uint32" pass="out" description="Major version of the app." />
			<param name="Minor" type="uint32" pass="out" description="Minor version of the app." />
			<param name="Patch" type="uint32" pass="out" description="Patch version of the app." />
		</method>

		<method name="GetAppInfo" description="Returns the name and version of an app from the app list.">
			<param name="Index" type="uint32" pass="in" description="Index of App, 0-based" />
			<param name="Name" type="string" pass="out" description="Name of app." />
			<param name="Major" type="uint32" pass="out" description="Major version of the app." />
			<param name="Minor" type="uint32" pass="out" description="Minor version of the app." />
			<param name="Patch" type="uint32" pass="out" description="Patch version of the app." />
		</method>
				
		<method name="StartAppByName" description="Starts an app by its name. Fails if an app is already running. Starts recording of signals.">
			<param name="Name" type="string" pass="in" description="Name of app to be started." />
		</method>
		
		<method name="StartAppByIndex" description="Starts an app by its index. Fails if an app is already running.">
			<param name="Index" type="uint32" pass="in" description="Index of App, 0-based" />
		</method>

		<method name="StartAppByMajorVersion" description="Starts an app by its major version. Fails if an app is already running.">
			<param name="Name" type="string" pass="in" description="Name of app to be started." />
			<param name="MajorVersion" type="uint32" pass="in" description="Major version of app to be started. Fails if app does not exist or only with wrong major number." />
		</method>

		<method name="StartAppByMinorVersion" description="Starts an app by its major version. Fails if an app is already running.">
			<param name="Name" type="string" pass="in" description="Name of app to be started." />
			<param name="MajorVersion" type="uint32" pass="in" description="Major version of app to be started. Fails if app does not exist or only with wrong major number." />
			<param name="MinorVersion" type="uint32" pass="in" description="Minor version of app to be started. Fails if app does not exist or only with wrong minor number." />
		</method>

		<method name="StopApp" description="Stops the currently running app. Does nothing if no app is running. Stops recording of signals.">
		</method>
		
		<method name="AppIsRunning" description="Returns if the device is running an app.">
			<param name="Value" type="bool" pass="return" description="Flag if the device is running an app." />
		</method>		
		
		<method name="GetRunningApp" description="Returns if the app that is currently running on the device. Fails if no app is running on the device.">
			<param name="Name" type="string" pass="out" description="Name of app." />
			<param name="Major" type="uint32" pass="out" description="Major version of the app." />
			<param name="Minor" type="uint32" pass="out" description="Minor version of the app." />
			<param name="Patch" type="uint32" pass="out" description="Patch version of the app." />
		</method>		

		<method name="InstallApp" description="Installs an app package on the device. Fails if any app is running on the device. You have to be logged in with an administrator account.">
			<param name="AppPackage" type="basicarray" class="uint8" pass="in" description="Binary data of the app to be installed." />
		</method>

		<method name="UninstallAppByName" description="Uninstall all the versions of an app by its name. Fails if any app is running on the device.">
			<param name="Name" type="string" pass="in" description="Name of app to be uninstalled." />
		</method>
		
		<method name="UninstallAppByIndex" description="Uninstall an app by its index. Fails if any app is running on the device.">
			<param name="Index" type="uint32" pass="in" description="Index of App, 0-based" />
		</method>

		<method name="UninstallAppByMajorVersion" description="Uninstall all major versions of an app. Fails if any app is running on the device.">
			<param name="Name" type="string" pass="in" description="Name of app to be uninstalled." />
			<param name="MajorVersion" type="uint32" pass="in" description="Major version of app to be uninstalled. Fails if app does not exist or only with wrong major number." />
		</method>

		<method name="UninstallAppByMinorVersion" description="Uninstall all minor versions of an app. Fails if any app is running on the device.">
			<param name="Name" type="string" pass="in" description="Name of app to be uninstalled." />
			<param name="MajorVersion" type="uint32" pass="in" description="Major version of app to be uninstalled." />
			<param name="MinorVersion" type="uint32" pass="in" description="Minor version of app to be uninstalled." />
		</method>

		<method name="RetrieveCurrentRecording" description="Retrieves a copy of the current recording DataRecording Instance and continues recording into a new empty instance.">
			<param name="RecordingInstance" type="class" class="DataRecording" pass="return" description="Recording instance" />
		</method>
		
		<method name="ClearCurrentRecording" description="Clears the current recording data and continues recording into a new empty instance.">
		</method>
		
		<method name="LoadRecordingFromBuild" description="Loads a recording from a previously stored build data. The mime-type of the data MUST be application/scanlaboie-1.0.">
			<param name="Build" type="class" class="LibMCEnv:Build" pass="in" description="Build that contains the data." />
			<param name="DataUUID" type="string" pass="in" description="Data UUID of the build data." />
			<param name="RecordingInstance" type="class" class="DataRecording" pass="return" description="Recording instance" />
		</method>
		
	</class>
	
	


	<class name="Driver_ScanLab_OIE" parent="Driver" description="A Driver for the ScanLab OIE Extension.">

		<method name="GetDriverType" description="Returns the type of the device driver.">
			<param name="DeviceDriverType" type="enum" class="OIEDeviceDriverType" pass="return" description="Type of device driver." />
		</method>

		<method name="SetDependencyResourceNames" description="Sets the resource names of the OIE SDK Dependencies. Searches in Machine Resources first, then in Driver Resources.">
			<param name="LibSSLResourceName" type="string" pass="in" description="Resource name of LibSSL DLL. Default is libssl_win64 or libssl_linux64, depending on platform." />
			<param name="LibCryptoResourceName" type="string" pass="in" description="Resource name of LibCrypto DLL. Default is libcrypto_win64 or libcrypto_linux64, depending on platform." />
			<param name="QT5CoreResourceName" type="string" pass="in" description="Resource name of Qt5Core DLL. Default is qt5core_win64 or qt5core_linux64, depending on platform." />
			<param name="QT5NetworkResourceName" type="string" pass="in" description="Resource name of Qt5Network DLL. Default is qt5network_win64 or qt5network_linux64, depending on platform." />
		</method>

		<method name="SetOIE3ResourceNames" description="Sets the resource names of the OIE SDK Dependencies for version 3. Searches in Machine Resources first, then in Driver Resources.">
			<param name="OIECalibrationLibraryResourceName" type="string" pass="in" description="Resource name of OIE Calibration Library DLL. Default is oiecalibrationlibrary_win64 or oiecalibrationlibrary_linux64, depending on platform." />
			<param name="RTCStreamParserResourceName" type="string" pass="in" description="Resource name of RTC Stream Parser Library DLL. Default is oiestreamparser_win64 or oiestreamparser_linux64, depending on platform." />
		</method>

		<method name="InitializeSDK" description="Initializes the ScanLab OIE SDK.">
			<param name="OIEResourceName" type="string" pass="in" description="Resource name of Scanlab OIE DLL. Searches in Machine Resources first, then in Driver Resources." />
		</method>
	
		<method name="InitializeCustomSDK" description="Initializes the ScanLab OIE SDK from a custom array.">
			<param name="OIEDLL" type="basicarray" class="uint8" pass="in" description="Byte array of Scanlab OIE DLL" />
		</method>
		
		<method name="AddDevice" description="Adds a new device to the OIE.">
			<param name="Name" type="string" pass="in" description="Name of the device. MUST be a unique string and not exist yet." />
			<param name="HostName" type="string" pass="in" description="Host name of device." />
			<param name="Port" type="uint32" pass="in" description="Port of device." />
			<param name="DeviceConfig" type="class" class="DeviceConfiguration" pass="in" description="Device configuration instance." />
			<param name="CorrectionData" type="basicarray" class="uint8"  pass="in" description="Patch version of the app." />
			<param name="ResponseTimeOut" type="uint32" pass="in" description="Response timeout of device in ms." />
			<param name="DeviceInstance" type="class" class="OIEDevice" pass="return" description="OIE Device Instance" />
		</method>

		<method name="HasDevice" description="Checks a device with the given name has been previously added.">
			<param name="Name" type="string" pass="in" description="Name of the device." />
			<param name="HasDevice" type="bool" pass="return" description="Flag if device exists." />
		</method>

		<method name="FindDevice" description="Finds a previously added device by name. Device MUST exist or function throws an error.">
			<param name="Name" type="string" pass="in" description="Name of the device." />
			<param name="DeviceInstance" type="class" class="OIEDevice" pass="return" description="OIE Device Instance" />
		</method>
		
		<method name="RemoveDevice" description="Removes a device from the OIE.">
			<param name="DeviceInstance" type="class" class="OIEDevice" pass="in" description="OIE Device Instance" />
		</method>
	
		<method name="RemoveDeviceByName" description="Removes a device from the OIE by name. Does nothing if the device does not exist.">
			<param name="Name" type="string" pass="in" description="Name of the device." />
		</method>

		<method name="ParseDeviceConfiguration" description="Reads the configuration information from a device configuration string.">
			<param name="DeviceConfigString" type="string" pass="in" description="Device config string." />
			<param name="DeviceConfigInstance" type="class" class="DeviceConfiguration" pass="return" description="Device configuration instance." />
		</method>
		
	</class>


<!--

End of Custom implementation

-->

		
	<global baseclassname="Base" stringoutclassname="Base" releasemethod="ReleaseInstance" acquiremethod="AcquireInstance" versionmethod="GetVersion" errormethod="GetLastError" injectionmethod="InjectComponent" symbollookupmethod="GetSymbolLookupMethod">
		
		<method name="GetVersion" description = "retrieves the binary version of this library.">
			<param name="Major" type="uint32" pass="out" description="returns the major version of this library" />
			<param name="Minor" type="uint32" pass="out" description="returns the minor version of this library" />
			<param name="Micro" type="uint32" pass="out" description="returns the micro version of this library" />
		</method>
		<method name="GetLastError" description="Returns the last error recorded on this object">
			<param name="Instance" type="class" class="Base" pass="in" description="Instance Handle" />
			<param name="ErrorMessage" type="string" pass="out" description="Message of the last error" />
			<param name="HasError" type="bool" pass="return" description="Is there a last error to query" />
		</method>
		<method name="ReleaseInstance" description="Releases shared ownership of an Instance">
			<param name="Instance" type="class" class="Base" pass="in" description="Instance Handle" />
		</method>
		<method name="AcquireInstance" description="Acquires shared ownership of an Instance">
			<param name="Instance" type="class" class="Base" pass="in" description="Instance Handle" />
		</method>
		<method name="InjectComponent" description="Injects an imported component for usage within this component">
			<param name="NameSpace" type="string" pass="in" description="NameSpace of the injected component" />
			<param name="SymbolAddressMethod" type="pointer" pass="in" description="Address of the SymbolAddressMethod of the injected component" />
		</method>		
		<method name="GetSymbolLookupMethod" description="Returns the address of the SymbolLookupMethod">
			<param name="SymbolLookupMethod" type="pointer" pass="return" description="Address of the SymbolAddressMethod" />
		</method>				
		<method name="CreateDriver" description="Creates a driver instance with a specific name.">
			<param name="Name" type="string" pass="in" description="Name of driver to be created." />
			<param name="Type" type="string" pass="in" description="Type of driver to be created." />
			<param name="DriverEnvironment" type="class" class="LibMCEnv:DriverEnvironment" pass="in" description="Environment of this driver." />
			<param name="Instance" type="optionalclass" class="Driver" pass="return" description="New Driver instance" />
		</method>
		
	</global>
	
	
</component>

