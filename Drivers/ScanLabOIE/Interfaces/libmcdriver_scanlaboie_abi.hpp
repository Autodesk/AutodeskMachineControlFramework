/*++

Copyright (C) 2020 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.8.0-develop.

Abstract: This is an autogenerated C++-Header file in order to allow an easy
 use of MC Driver ScanLab Open Interface Extension

Interface version: 1.0.0

*/

#ifndef __LIBMCDRIVER_SCANLABOIE_HEADER_CPP
#define __LIBMCDRIVER_SCANLABOIE_HEADER_CPP

#ifdef __LIBMCDRIVER_SCANLABOIE_EXPORTS
#ifdef _WIN32
#define LIBMCDRIVER_SCANLABOIE_DECLSPEC __declspec (dllexport)
#else // _WIN32
#define LIBMCDRIVER_SCANLABOIE_DECLSPEC __attribute__((visibility("default")))
#endif // _WIN32
#else // __LIBMCDRIVER_SCANLABOIE_EXPORTS
#define LIBMCDRIVER_SCANLABOIE_DECLSPEC
#endif // __LIBMCDRIVER_SCANLABOIE_EXPORTS

#include "libmcdriver_scanlaboie_types.hpp"

#include "libmcenv_dynamic.hpp"

#ifdef __cplusplus
extern "C" {
#endif

/*************************************************************************************************************************
 Class definition for Base
**************************************************************************************************************************/

/*************************************************************************************************************************
 Class definition for Driver
**************************************************************************************************************************/

/**
* Configures a driver with its specific configuration data.
*
* @param[in] pDriver - Driver instance.
* @param[in] pConfigurationString - Configuration data of driver.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLABOIE_DECLSPEC LibMCDriver_ScanLabOIEResult libmcdriver_scanlaboie_driver_configure(LibMCDriver_ScanLabOIE_Driver pDriver, const char * pConfigurationString);

/**
* returns the name identifier of the driver
*
* @param[in] pDriver - Driver instance.
* @param[in] nNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNameBuffer -  buffer of Name of the driver., may be NULL
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLABOIE_DECLSPEC LibMCDriver_ScanLabOIEResult libmcdriver_scanlaboie_driver_getname(LibMCDriver_ScanLabOIE_Driver pDriver, const LibMCDriver_ScanLabOIE_uint32 nNameBufferSize, LibMCDriver_ScanLabOIE_uint32* pNameNeededChars, char * pNameBuffer);

/**
* returns the type identifier of the driver
*
* @param[in] pDriver - Driver instance.
* @param[in] nTypeBufferSize - size of the buffer (including trailing 0)
* @param[out] pTypeNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pTypeBuffer -  buffer of Type of the driver., may be NULL
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLABOIE_DECLSPEC LibMCDriver_ScanLabOIEResult libmcdriver_scanlaboie_driver_gettype(LibMCDriver_ScanLabOIE_Driver pDriver, const LibMCDriver_ScanLabOIE_uint32 nTypeBufferSize, LibMCDriver_ScanLabOIE_uint32* pTypeNeededChars, char * pTypeBuffer);

/**
* returns the version identifiers of the driver
*
* @param[in] pDriver - Driver instance.
* @param[out] pMajor - Major version.
* @param[out] pMinor - Minor version.
* @param[out] pMicro - Micro version.
* @param[in] nBuildBufferSize - size of the buffer (including trailing 0)
* @param[out] pBuildNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pBuildBuffer -  buffer of Build identifier., may be NULL
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLABOIE_DECLSPEC LibMCDriver_ScanLabOIEResult libmcdriver_scanlaboie_driver_getversion(LibMCDriver_ScanLabOIE_Driver pDriver, LibMCDriver_ScanLabOIE_uint32 * pMajor, LibMCDriver_ScanLabOIE_uint32 * pMinor, LibMCDriver_ScanLabOIE_uint32 * pMicro, const LibMCDriver_ScanLabOIE_uint32 nBuildBufferSize, LibMCDriver_ScanLabOIE_uint32* pBuildNeededChars, char * pBuildBuffer);

/**
* returns the header information
*
* @param[in] pDriver - Driver instance.
* @param[in] nNameSpaceBufferSize - size of the buffer (including trailing 0)
* @param[out] pNameSpaceNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNameSpaceBuffer -  buffer of NameSpace of the driver., may be NULL
* @param[in] nBaseNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pBaseNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pBaseNameBuffer -  buffer of BaseName of the driver., may be NULL
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLABOIE_DECLSPEC LibMCDriver_ScanLabOIEResult libmcdriver_scanlaboie_driver_getheaderinformation(LibMCDriver_ScanLabOIE_Driver pDriver, const LibMCDriver_ScanLabOIE_uint32 nNameSpaceBufferSize, LibMCDriver_ScanLabOIE_uint32* pNameSpaceNeededChars, char * pNameSpaceBuffer, const LibMCDriver_ScanLabOIE_uint32 nBaseNameBufferSize, LibMCDriver_ScanLabOIE_uint32* pBaseNameNeededChars, char * pBaseNameBuffer);

/**
* Stores the driver parameters in the driver environment.
*
* @param[in] pDriver - Driver instance.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLABOIE_DECLSPEC LibMCDriver_ScanLabOIEResult libmcdriver_scanlaboie_driver_queryparameters(LibMCDriver_ScanLabOIE_Driver pDriver);

/*************************************************************************************************************************
 Class definition for OIEDevice
**************************************************************************************************************************/

/**
* Sets the host name of the device. Fails if device is already connected.
*
* @param[in] pOIEDevice - OIEDevice instance.
* @param[in] pHostName - New Host name of device.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLABOIE_DECLSPEC LibMCDriver_ScanLabOIEResult libmcdriver_scanlaboie_oiedevice_sethostname(LibMCDriver_ScanLabOIE_OIEDevice pOIEDevice, const char * pHostName);

/**
* Returns the host name of the device.
*
* @param[in] pOIEDevice - OIEDevice instance.
* @param[in] nHostNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pHostNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pHostNameBuffer -  buffer of Host name of device., may be NULL
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLABOIE_DECLSPEC LibMCDriver_ScanLabOIEResult libmcdriver_scanlaboie_oiedevice_gethostname(LibMCDriver_ScanLabOIE_OIEDevice pOIEDevice, const LibMCDriver_ScanLabOIE_uint32 nHostNameBufferSize, LibMCDriver_ScanLabOIE_uint32* pHostNameNeededChars, char * pHostNameBuffer);

/**
* Sets the port of the device. Fails if device is already connected.
*
* @param[in] pOIEDevice - OIEDevice instance.
* @param[in] nPort - New port of device.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLABOIE_DECLSPEC LibMCDriver_ScanLabOIEResult libmcdriver_scanlaboie_oiedevice_setport(LibMCDriver_ScanLabOIE_OIEDevice pOIEDevice, LibMCDriver_ScanLabOIE_uint32 nPort);

/**
* Returns the port of the device. Fails if device is already connected.
*
* @param[in] pOIEDevice - OIEDevice instance.
* @param[out] pPort - Port of device.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLABOIE_DECLSPEC LibMCDriver_ScanLabOIEResult libmcdriver_scanlaboie_oiedevice_getport(LibMCDriver_ScanLabOIE_OIEDevice pOIEDevice, LibMCDriver_ScanLabOIE_uint32 * pPort);

/**
* Returns if the device is connected and logged in.
*
* @param[in] pOIEDevice - OIEDevice instance.
* @param[out] pValue - Flag if the device is connected.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLABOIE_DECLSPEC LibMCDriver_ScanLabOIEResult libmcdriver_scanlaboie_oiedevice_isconnected(LibMCDriver_ScanLabOIE_OIEDevice pOIEDevice, bool * pValue);

/**
* Returns the ID of the device.
*
* @param[in] pOIEDevice - OIEDevice instance.
* @param[out] pDeviceID - ID of the device.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLABOIE_DECLSPEC LibMCDriver_ScanLabOIEResult libmcdriver_scanlaboie_oiedevice_getdeviceid(LibMCDriver_ScanLabOIE_OIEDevice pOIEDevice, LibMCDriver_ScanLabOIE_uint32 * pDeviceID);

/**
* Connects to the device and attempts to log in with user name and password.
*
* @param[in] pOIEDevice - OIEDevice instance.
* @param[in] pUserName - UserName to use.
* @param[in] pPassword - Password to use.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLABOIE_DECLSPEC LibMCDriver_ScanLabOIEResult libmcdriver_scanlaboie_oiedevice_connect(LibMCDriver_ScanLabOIE_OIEDevice pOIEDevice, const char * pUserName, const char * pPassword);

/**
* Disconnects from the device. Has no effect if device is not connected.
*
* @param[in] pOIEDevice - OIEDevice instance.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLABOIE_DECLSPEC LibMCDriver_ScanLabOIEResult libmcdriver_scanlaboie_oiedevice_disconnect(LibMCDriver_ScanLabOIE_OIEDevice pOIEDevice);

/**
* Returns how many apps are installed on the device. Fails if device is not connected.
*
* @param[in] pOIEDevice - OIEDevice instance.
* @param[out] pCount - Number of apps installed on the device.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLABOIE_DECLSPEC LibMCDriver_ScanLabOIEResult libmcdriver_scanlaboie_oiedevice_getappcount(LibMCDriver_ScanLabOIE_OIEDevice pOIEDevice, LibMCDriver_ScanLabOIE_uint32 * pCount);

/**
* Returns the name of an app from the app list.
*
* @param[in] pOIEDevice - OIEDevice instance.
* @param[in] nIndex - Index of App, 0-based
* @param[in] nNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNameBuffer -  buffer of Name of app., may be NULL
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLABOIE_DECLSPEC LibMCDriver_ScanLabOIEResult libmcdriver_scanlaboie_oiedevice_getappname(LibMCDriver_ScanLabOIE_OIEDevice pOIEDevice, LibMCDriver_ScanLabOIE_uint32 nIndex, const LibMCDriver_ScanLabOIE_uint32 nNameBufferSize, LibMCDriver_ScanLabOIE_uint32* pNameNeededChars, char * pNameBuffer);

/**
* Returns the version of an app from the app list.
*
* @param[in] pOIEDevice - OIEDevice instance.
* @param[in] nIndex - Index of App, 0-based
* @param[out] pMajor - Major version of the app.
* @param[out] pMinor - Minor version of the app.
* @param[out] pPatch - Patch version of the app.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLABOIE_DECLSPEC LibMCDriver_ScanLabOIEResult libmcdriver_scanlaboie_oiedevice_getappversion(LibMCDriver_ScanLabOIE_OIEDevice pOIEDevice, LibMCDriver_ScanLabOIE_uint32 nIndex, LibMCDriver_ScanLabOIE_uint32 * pMajor, LibMCDriver_ScanLabOIE_uint32 * pMinor, LibMCDriver_ScanLabOIE_uint32 * pPatch);

/**
* Returns the name and version of an app from the app list.
*
* @param[in] pOIEDevice - OIEDevice instance.
* @param[in] nIndex - Index of App, 0-based
* @param[in] nNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNameBuffer -  buffer of Name of app., may be NULL
* @param[out] pMajor - Major version of the app.
* @param[out] pMinor - Minor version of the app.
* @param[out] pPatch - Patch version of the app.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLABOIE_DECLSPEC LibMCDriver_ScanLabOIEResult libmcdriver_scanlaboie_oiedevice_getappinfo(LibMCDriver_ScanLabOIE_OIEDevice pOIEDevice, LibMCDriver_ScanLabOIE_uint32 nIndex, const LibMCDriver_ScanLabOIE_uint32 nNameBufferSize, LibMCDriver_ScanLabOIE_uint32* pNameNeededChars, char * pNameBuffer, LibMCDriver_ScanLabOIE_uint32 * pMajor, LibMCDriver_ScanLabOIE_uint32 * pMinor, LibMCDriver_ScanLabOIE_uint32 * pPatch);

/**
* Starts an app by its name. Fails if an app is already running.
*
* @param[in] pOIEDevice - OIEDevice instance.
* @param[in] pName - Name of app to be started.
* @param[in] pDeviceConfig - Device config string.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLABOIE_DECLSPEC LibMCDriver_ScanLabOIEResult libmcdriver_scanlaboie_oiedevice_startappbyname(LibMCDriver_ScanLabOIE_OIEDevice pOIEDevice, const char * pName, const char * pDeviceConfig);

/**
* Starts an app by its index. Fails if an app is already running.
*
* @param[in] pOIEDevice - OIEDevice instance.
* @param[in] nIndex - Index of App, 0-based
* @param[in] pDeviceConfig - Device config string.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLABOIE_DECLSPEC LibMCDriver_ScanLabOIEResult libmcdriver_scanlaboie_oiedevice_startappbyindex(LibMCDriver_ScanLabOIE_OIEDevice pOIEDevice, LibMCDriver_ScanLabOIE_uint32 nIndex, const char * pDeviceConfig);

/**
* Starts an app by its major version. Fails if an app is already running.
*
* @param[in] pOIEDevice - OIEDevice instance.
* @param[in] pName - Name of app to be started.
* @param[in] nMajorVersion - Major version of app to be started. Fails if app does not exist or only with wrong major number.
* @param[in] pDeviceConfig - Device config string.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLABOIE_DECLSPEC LibMCDriver_ScanLabOIEResult libmcdriver_scanlaboie_oiedevice_startappbymajorversion(LibMCDriver_ScanLabOIE_OIEDevice pOIEDevice, const char * pName, LibMCDriver_ScanLabOIE_uint32 nMajorVersion, const char * pDeviceConfig);

/**
* Starts an app by its major version. Fails if an app is already running.
*
* @param[in] pOIEDevice - OIEDevice instance.
* @param[in] pName - Name of app to be started.
* @param[in] nMajorVersion - Major version of app to be started. Fails if app does not exist or only with wrong major number.
* @param[in] nMinorVersion - Minor version of app to be started. Fails if app does not exist or only with wrong minor number.
* @param[in] pDeviceConfig - Device config string.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLABOIE_DECLSPEC LibMCDriver_ScanLabOIEResult libmcdriver_scanlaboie_oiedevice_startappbyminorversion(LibMCDriver_ScanLabOIE_OIEDevice pOIEDevice, const char * pName, LibMCDriver_ScanLabOIE_uint32 nMajorVersion, LibMCDriver_ScanLabOIE_uint32 nMinorVersion, const char * pDeviceConfig);

/**
* Stops the currently running app. Does nothing if no app is running.
*
* @param[in] pOIEDevice - OIEDevice instance.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLABOIE_DECLSPEC LibMCDriver_ScanLabOIEResult libmcdriver_scanlaboie_oiedevice_stopapp(LibMCDriver_ScanLabOIE_OIEDevice pOIEDevice);

/**
* Returns if the device is running an app.
*
* @param[in] pOIEDevice - OIEDevice instance.
* @param[out] pValue - Flag if the device is running an app.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLABOIE_DECLSPEC LibMCDriver_ScanLabOIEResult libmcdriver_scanlaboie_oiedevice_appisrunning(LibMCDriver_ScanLabOIE_OIEDevice pOIEDevice, bool * pValue);

/**
* Returns if the app that is currently running on the device. Fails if no app is running on the device.
*
* @param[in] pOIEDevice - OIEDevice instance.
* @param[in] nNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNameBuffer -  buffer of Name of app., may be NULL
* @param[out] pMajor - Major version of the app.
* @param[out] pMinor - Minor version of the app.
* @param[out] pPatch - Patch version of the app.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLABOIE_DECLSPEC LibMCDriver_ScanLabOIEResult libmcdriver_scanlaboie_oiedevice_getrunningapp(LibMCDriver_ScanLabOIE_OIEDevice pOIEDevice, const LibMCDriver_ScanLabOIE_uint32 nNameBufferSize, LibMCDriver_ScanLabOIE_uint32* pNameNeededChars, char * pNameBuffer, LibMCDriver_ScanLabOIE_uint32 * pMajor, LibMCDriver_ScanLabOIE_uint32 * pMinor, LibMCDriver_ScanLabOIE_uint32 * pPatch);

/**
* Installs an app package on the device. Fails if any app is running on the device. You have to be logged in with an administrator account.
*
* @param[in] pOIEDevice - OIEDevice instance.
* @param[in] nAppPackageBufferSize - Number of elements in buffer
* @param[in] pAppPackageBuffer - uint8 buffer of Binary data of the app to be installed.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLABOIE_DECLSPEC LibMCDriver_ScanLabOIEResult libmcdriver_scanlaboie_oiedevice_installapp(LibMCDriver_ScanLabOIE_OIEDevice pOIEDevice, LibMCDriver_ScanLabOIE_uint64 nAppPackageBufferSize, const LibMCDriver_ScanLabOIE_uint8 * pAppPackageBuffer);

/**
* Uninstall all the versions of an app by its name. Fails if any app is running on the device.
*
* @param[in] pOIEDevice - OIEDevice instance.
* @param[in] pName - Name of app to be uninstalled.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLABOIE_DECLSPEC LibMCDriver_ScanLabOIEResult libmcdriver_scanlaboie_oiedevice_uninstallappbyname(LibMCDriver_ScanLabOIE_OIEDevice pOIEDevice, const char * pName);

/**
* Uninstall an app by its index. Fails if any app is running on the device.
*
* @param[in] pOIEDevice - OIEDevice instance.
* @param[in] nIndex - Index of App, 0-based
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLABOIE_DECLSPEC LibMCDriver_ScanLabOIEResult libmcdriver_scanlaboie_oiedevice_uninstallappbyindex(LibMCDriver_ScanLabOIE_OIEDevice pOIEDevice, LibMCDriver_ScanLabOIE_uint32 nIndex);

/**
* Uninstall all major versions of an app. Fails if any app is running on the device.
*
* @param[in] pOIEDevice - OIEDevice instance.
* @param[in] pName - Name of app to be uninstalled.
* @param[in] nMajorVersion - Major version of app to be uninstalled. Fails if app does not exist or only with wrong major number.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLABOIE_DECLSPEC LibMCDriver_ScanLabOIEResult libmcdriver_scanlaboie_oiedevice_uninstallappbymajorversion(LibMCDriver_ScanLabOIE_OIEDevice pOIEDevice, const char * pName, LibMCDriver_ScanLabOIE_uint32 nMajorVersion);

/**
* Uninstall all minor versions of an app. Fails if any app is running on the device.
*
* @param[in] pOIEDevice - OIEDevice instance.
* @param[in] pName - Name of app to be uninstalled.
* @param[in] nMajorVersion - Major version of app to be uninstalled.
* @param[in] nMinorVersion - Minor version of app to be uninstalled.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLABOIE_DECLSPEC LibMCDriver_ScanLabOIEResult libmcdriver_scanlaboie_oiedevice_uninstallappbyminorversion(LibMCDriver_ScanLabOIE_OIEDevice pOIEDevice, const char * pName, LibMCDriver_ScanLabOIE_uint32 nMajorVersion, LibMCDriver_ScanLabOIE_uint32 nMinorVersion);

/*************************************************************************************************************************
 Class definition for Driver_ScanLab_OIE
**************************************************************************************************************************/

/**
* Sets the resource names of the OIE SDK Dependencies. Searches in Machine Resources first, then in Driver Resources.
*
* @param[in] pDriver_ScanLab_OIE - Driver_ScanLab_OIE instance.
* @param[in] pLibSSLResourceName - Resource name of LibSSL DLL. Default is libssl_win64 or libssl_linux64, depending on platform.
* @param[in] pLibCryptoResourceName - Resource name of LibCrypto DLL. Default is libcrypto_win64 or libcrypto_linux64, depending on platform.
* @param[in] pQT5CoreResourceName - Resource name of Qt5Core DLL. Default is qt5core_win64 or qt5core_linux64, depending on platform.
* @param[in] pQT5NetworkResourceName - Resource name of Qt5Network DLL. Default is qt5network_win64 or qt5network_linux64, depending on platform.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLABOIE_DECLSPEC LibMCDriver_ScanLabOIEResult libmcdriver_scanlaboie_driver_scanlab_oie_setdependencyresourcenames(LibMCDriver_ScanLabOIE_Driver_ScanLab_OIE pDriver_ScanLab_OIE, const char * pLibSSLResourceName, const char * pLibCryptoResourceName, const char * pQT5CoreResourceName, const char * pQT5NetworkResourceName);

/**
* Initializes the ScanLab OIE SDK.
*
* @param[in] pDriver_ScanLab_OIE - Driver_ScanLab_OIE instance.
* @param[in] pOIEResourceName - Resource name of Scanlab OIE DLL. Searches in Machine Resources first, then in Driver Resources.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLABOIE_DECLSPEC LibMCDriver_ScanLabOIEResult libmcdriver_scanlaboie_driver_scanlab_oie_initializesdk(LibMCDriver_ScanLabOIE_Driver_ScanLab_OIE pDriver_ScanLab_OIE, const char * pOIEResourceName);

/**
* Initializes the ScanLab OIE SDK from a custom array.
*
* @param[in] pDriver_ScanLab_OIE - Driver_ScanLab_OIE instance.
* @param[in] nOIEDLLBufferSize - Number of elements in buffer
* @param[in] pOIEDLLBuffer - uint8 buffer of Byte array of Scanlab OIE DLL
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLABOIE_DECLSPEC LibMCDriver_ScanLabOIEResult libmcdriver_scanlaboie_driver_scanlab_oie_initializecustomsdk(LibMCDriver_ScanLabOIE_Driver_ScanLab_OIE pDriver_ScanLab_OIE, LibMCDriver_ScanLabOIE_uint64 nOIEDLLBufferSize, const LibMCDriver_ScanLabOIE_uint8 * pOIEDLLBuffer);

/**
* Adds a new device to the OIE.
*
* @param[in] pDriver_ScanLab_OIE - Driver_ScanLab_OIE instance.
* @param[in] pHostName - Host name of device.
* @param[in] nPort - Port of device.
* @param[in] nResponseTimeOut - Response timeout of device in ms.
* @param[out] pDeviceInstance - OIE Device Instance
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLABOIE_DECLSPEC LibMCDriver_ScanLabOIEResult libmcdriver_scanlaboie_driver_scanlab_oie_adddevice(LibMCDriver_ScanLabOIE_Driver_ScanLab_OIE pDriver_ScanLab_OIE, const char * pHostName, LibMCDriver_ScanLabOIE_uint32 nPort, LibMCDriver_ScanLabOIE_uint32 nResponseTimeOut, LibMCDriver_ScanLabOIE_OIEDevice * pDeviceInstance);

/**
* Removes a device from the OIE.
*
* @param[in] pDriver_ScanLab_OIE - Driver_ScanLab_OIE instance.
* @param[in] pDeviceInstance - OIE Device Instance
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLABOIE_DECLSPEC LibMCDriver_ScanLabOIEResult libmcdriver_scanlaboie_driver_scanlab_oie_removedevice(LibMCDriver_ScanLabOIE_Driver_ScanLab_OIE pDriver_ScanLab_OIE, LibMCDriver_ScanLabOIE_OIEDevice pDeviceInstance);

/*************************************************************************************************************************
 Global functions
**************************************************************************************************************************/

/**
* retrieves the binary version of this library.
*
* @param[out] pMajor - returns the major version of this library
* @param[out] pMinor - returns the minor version of this library
* @param[out] pMicro - returns the micro version of this library
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLABOIE_DECLSPEC LibMCDriver_ScanLabOIEResult libmcdriver_scanlaboie_getversion(LibMCDriver_ScanLabOIE_uint32 * pMajor, LibMCDriver_ScanLabOIE_uint32 * pMinor, LibMCDriver_ScanLabOIE_uint32 * pMicro);

/**
* Returns the last error recorded on this object
*
* @param[in] pInstance - Instance Handle
* @param[in] nErrorMessageBufferSize - size of the buffer (including trailing 0)
* @param[out] pErrorMessageNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pErrorMessageBuffer -  buffer of Message of the last error, may be NULL
* @param[out] pHasError - Is there a last error to query
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLABOIE_DECLSPEC LibMCDriver_ScanLabOIEResult libmcdriver_scanlaboie_getlasterror(LibMCDriver_ScanLabOIE_Base pInstance, const LibMCDriver_ScanLabOIE_uint32 nErrorMessageBufferSize, LibMCDriver_ScanLabOIE_uint32* pErrorMessageNeededChars, char * pErrorMessageBuffer, bool * pHasError);

/**
* Releases shared ownership of an Instance
*
* @param[in] pInstance - Instance Handle
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLABOIE_DECLSPEC LibMCDriver_ScanLabOIEResult libmcdriver_scanlaboie_releaseinstance(LibMCDriver_ScanLabOIE_Base pInstance);

/**
* Acquires shared ownership of an Instance
*
* @param[in] pInstance - Instance Handle
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLABOIE_DECLSPEC LibMCDriver_ScanLabOIEResult libmcdriver_scanlaboie_acquireinstance(LibMCDriver_ScanLabOIE_Base pInstance);

/**
* Injects an imported component for usage within this component
*
* @param[in] pNameSpace - NameSpace of the injected component
* @param[in] pSymbolAddressMethod - Address of the SymbolAddressMethod of the injected component
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLABOIE_DECLSPEC LibMCDriver_ScanLabOIEResult libmcdriver_scanlaboie_injectcomponent(const char * pNameSpace, LibMCDriver_ScanLabOIE_pvoid pSymbolAddressMethod);

/**
* Returns the address of the SymbolLookupMethod
*
* @param[out] pSymbolLookupMethod - Address of the SymbolAddressMethod
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLABOIE_DECLSPEC LibMCDriver_ScanLabOIEResult libmcdriver_scanlaboie_getsymbollookupmethod(LibMCDriver_ScanLabOIE_pvoid * pSymbolLookupMethod);

/**
* Creates a driver instance with a specific name.
*
* @param[in] pName - Name of driver to be created.
* @param[in] pType - Type of driver to be created.
* @param[in] pDriverEnvironment - Environment of this driver.
* @param[out] pInstance - New Driver instance
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLABOIE_DECLSPEC LibMCDriver_ScanLabOIEResult libmcdriver_scanlaboie_createdriver(const char * pName, const char * pType, LibMCEnv_DriverEnvironment pDriverEnvironment, LibMCDriver_ScanLabOIE_Driver * pInstance);

#ifdef __cplusplus
}
#endif

#endif // __LIBMCDRIVER_SCANLABOIE_HEADER_CPP

