/*++

Copyright (C) 2020 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.8.0-develop.

Abstract: This is an autogenerated C++ header file in order to allow easy
development of MC Driver ScanLab Open Interface Extension. The implementer of MC Driver ScanLab Open Interface Extension needs to
derive concrete classes from the abstract classes in this header.

Interface version: 1.0.0

*/


#ifndef __LIBMCDRIVER_SCANLABOIE_CPPINTERFACES
#define __LIBMCDRIVER_SCANLABOIE_CPPINTERFACES

#include <string>
#include <memory>

#include "libmcdriver_scanlaboie_types.hpp"


#include "libmcenv_dynamic.hpp"

namespace LibMCDriver_ScanLabOIE {
namespace Impl {

/**
 Forward declarations of class interfaces
*/
class IBase;
class IDriver;
class IOIEDevice;
class IDeviceConfiguration;
class IDriver_ScanLab_OIE;



/*************************************************************************************************************************
 Parameter Cache definitions
**************************************************************************************************************************/

class ParameterCache {
	public:
		virtual ~ParameterCache() {}
};

template <class T1> class ParameterCache_1 : public ParameterCache {
	private:
		T1 m_param1;
	public:
		ParameterCache_1 (const T1 & param1)
			: m_param1 (param1)
		{
		}

		void retrieveData (T1 & param1)
		{
			param1 = m_param1;
		}
};

template <class T1, class T2> class ParameterCache_2 : public ParameterCache {
	private:
		T1 m_param1;
		T2 m_param2;
	public:
		ParameterCache_2 (const T1 & param1, const T2 & param2)
			: m_param1 (param1), m_param2 (param2)
		{
		}

		void retrieveData (T1 & param1, T2 & param2)
		{
			param1 = m_param1;
			param2 = m_param2;
		}
};

template <class T1, class T2, class T3> class ParameterCache_3 : public ParameterCache {
	private:
		T1 m_param1;
		T2 m_param2;
		T3 m_param3;
	public:
		ParameterCache_3 (const T1 & param1, const T2 & param2, const T3 & param3)
			: m_param1 (param1), m_param2 (param2), m_param3 (param3)
		{
		}

		void retrieveData (T1 & param1, T2 & param2, T3 & param3)
		{
			param1 = m_param1;
			param2 = m_param2;
			param3 = m_param3;
		}
};

template <class T1, class T2, class T3, class T4> class ParameterCache_4 : public ParameterCache {
	private:
		T1 m_param1;
		T2 m_param2;
		T3 m_param3;
		T4 m_param4;
	public:
		ParameterCache_4 (const T1 & param1, const T2 & param2, const T3 & param3, const T4 & param4)
			: m_param1 (param1), m_param2 (param2), m_param3 (param3), m_param4 (param4)
		{
		}

		void retrieveData (T1 & param1, T2 & param2, T3 & param3, T4 & param4)
		{
			param1 = m_param1;
			param2 = m_param2;
			param3 = m_param3;
			param4 = m_param4;
		}
};


/*************************************************************************************************************************
 Class interface for Base 
**************************************************************************************************************************/

class IBase {
private:
	std::unique_ptr<ParameterCache> m_ParameterCache;
public:
	/**
	* IBase::~IBase - virtual destructor of IBase
	*/
	virtual ~IBase() {};

	/**
	* IBase::ReleaseBaseClassInterface - Releases ownership of a base class interface. Deletes the reference, if necessary.
	* @param[in] pIBase - The base class instance to release
	*/
	static void ReleaseBaseClassInterface(IBase* pIBase)
	{
		if (pIBase) {
			pIBase->DecRefCount();
		}
	};

	/**
	* IBase::AcquireBaseClassInterface - Acquires shared ownership of a base class interface.
	* @param[in] pIBase - The base class instance to acquire
	*/
	static void AcquireBaseClassInterface(IBase* pIBase)
	{
		if (pIBase) {
			pIBase->IncRefCount();
		}
	};


	/**
	* IBase::GetLastErrorMessage - Returns the last error registered of this class instance
	* @param[out] sErrorMessage - Message of the last error registered
	* @return Has an error been registered already
	*/
	virtual bool GetLastErrorMessage(std::string & sErrorMessage) = 0;

	/**
	* IBase::ClearErrorMessages - Clears all registered messages of this class instance
	*/
	virtual void ClearErrorMessages() = 0;

	/**
	* IBase::RegisterErrorMessage - Registers an error message with this class instance
	* @param[in] sErrorMessage - Error message to register
	*/
	virtual void RegisterErrorMessage(const std::string & sErrorMessage) = 0;

	/**
	* IBase::IncRefCount - Increases the reference count of a class instance
	*/
	virtual void IncRefCount() = 0;

	/**
	* IBase::DecRefCount - Decreases the reference count of a class instance and free releases it, if the last reference has been removed
	* @return Has the object been released
	*/
	virtual bool DecRefCount() = 0;

	/**
	* IBase::_setCache - set parameter cache of object
	*/
	void _setCache(ParameterCache * pCache)
	{
		m_ParameterCache.reset(pCache);
	}

	/**
	* IBase::_getCache - returns parameter cache of object
	*/
	ParameterCache* _getCache()
	{
		return m_ParameterCache.get();
	}

};


/**
 Definition of a shared pointer class for IBase
*/
template<class T>
class IBaseSharedPtr : public std::shared_ptr<T>
{
public:
	explicit IBaseSharedPtr(T* t = nullptr)
		: std::shared_ptr<T>(t, IBase::ReleaseBaseClassInterface)
	{
		t->IncRefCount();
	}

	// Reset function, as it also needs to properly set the deleter.
	void reset(T* t = nullptr)
	{
		std::shared_ptr<T>::reset(t, IBase::ReleaseBaseClassInterface);
	}

	// Get-function that increases the Base class's reference count
	T* getCoOwningPtr()
	{
		T* t = this->get();
		t->IncRefCount();
		return t;
	}
};


typedef IBaseSharedPtr<IBase> PIBase;


/*************************************************************************************************************************
 Class interface for Driver 
**************************************************************************************************************************/

class IDriver : public virtual IBase {
public:
	/**
	* IDriver::Configure - Configures a driver with its specific configuration data.
	* @param[in] sConfigurationString - Configuration data of driver.
	*/
	virtual void Configure(const std::string & sConfigurationString) = 0;

	/**
	* IDriver::GetName - returns the name identifier of the driver
	* @return Name of the driver.
	*/
	virtual std::string GetName() = 0;

	/**
	* IDriver::GetType - returns the type identifier of the driver
	* @return Type of the driver.
	*/
	virtual std::string GetType() = 0;

	/**
	* IDriver::GetVersion - returns the version identifiers of the driver
	* @param[out] nMajor - Major version.
	* @param[out] nMinor - Minor version.
	* @param[out] nMicro - Micro version.
	* @param[out] sBuild - Build identifier.
	*/
	virtual void GetVersion(LibMCDriver_ScanLabOIE_uint32 & nMajor, LibMCDriver_ScanLabOIE_uint32 & nMinor, LibMCDriver_ScanLabOIE_uint32 & nMicro, std::string & sBuild) = 0;

	/**
	* IDriver::GetHeaderInformation - returns the header information
	* @param[out] sNameSpace - NameSpace of the driver.
	* @param[out] sBaseName - BaseName of the driver.
	*/
	virtual void GetHeaderInformation(std::string & sNameSpace, std::string & sBaseName) = 0;

	/**
	* IDriver::QueryParameters - Stores the driver parameters in the driver environment.
	*/
	virtual void QueryParameters() = 0;

};

typedef IBaseSharedPtr<IDriver> PIDriver;


/*************************************************************************************************************************
 Class interface for OIEDevice 
**************************************************************************************************************************/

class IOIEDevice : public virtual IBase {
public:
	/**
	* IOIEDevice::GetDeviceName - Returns the unique name of the device.
	* @return Name of device.
	*/
	virtual std::string GetDeviceName() = 0;

	/**
	* IOIEDevice::SetHostName - Sets the host name of the device. Fails if device is already connected.
	* @param[in] sHostName - New Host name of device.
	*/
	virtual void SetHostName(const std::string & sHostName) = 0;

	/**
	* IOIEDevice::GetHostName - Returns the host name of the device.
	* @return Host name of device.
	*/
	virtual std::string GetHostName() = 0;

	/**
	* IOIEDevice::SetPort - Sets the port of the device. Fails if device is already connected.
	* @param[in] nPort - New port of device.
	*/
	virtual void SetPort(const LibMCDriver_ScanLabOIE_uint32 nPort) = 0;

	/**
	* IOIEDevice::GetPort - Returns the port of the device. Fails if device is already connected.
	* @return Port of device.
	*/
	virtual LibMCDriver_ScanLabOIE_uint32 GetPort() = 0;

	/**
	* IOIEDevice::IsConnected - Returns if the device is connected and logged in.
	* @return Flag if the device is connected.
	*/
	virtual bool IsConnected() = 0;

	/**
	* IOIEDevice::GetDeviceID - Returns the ID of the device.
	* @return ID of the device.
	*/
	virtual LibMCDriver_ScanLabOIE_uint32 GetDeviceID() = 0;

	/**
	* IOIEDevice::Connect - Connects to the device and attempts to log in with user name and password.
	* @param[in] sUserName - UserName to use.
	* @param[in] sPassword - Password to use.
	*/
	virtual void Connect(const std::string & sUserName, const std::string & sPassword) = 0;

	/**
	* IOIEDevice::Disconnect - Disconnects from the device. Has no effect if device is not connected.
	*/
	virtual void Disconnect() = 0;

	/**
	* IOIEDevice::RefreshAppList - Refreshes the list of installed apps on the system.
	*/
	virtual void RefreshAppList() = 0;

	/**
	* IOIEDevice::GetAppCount - Returns how many apps are installed on the device. Fails if device is not connected.
	* @return Number of apps installed on the device.
	*/
	virtual LibMCDriver_ScanLabOIE_uint32 GetAppCount() = 0;

	/**
	* IOIEDevice::GetAppName - Returns the name of an app from the app list.
	* @param[in] nIndex - Index of App, 0-based
	* @return Name of app.
	*/
	virtual std::string GetAppName(const LibMCDriver_ScanLabOIE_uint32 nIndex) = 0;

	/**
	* IOIEDevice::GetAppVersion - Returns the version of an app from the app list.
	* @param[in] nIndex - Index of App, 0-based
	* @param[out] nMajor - Major version of the app.
	* @param[out] nMinor - Minor version of the app.
	* @param[out] nPatch - Patch version of the app.
	*/
	virtual void GetAppVersion(const LibMCDriver_ScanLabOIE_uint32 nIndex, LibMCDriver_ScanLabOIE_uint32 & nMajor, LibMCDriver_ScanLabOIE_uint32 & nMinor, LibMCDriver_ScanLabOIE_uint32 & nPatch) = 0;

	/**
	* IOIEDevice::GetAppInfo - Returns the name and version of an app from the app list.
	* @param[in] nIndex - Index of App, 0-based
	* @param[out] sName - Name of app.
	* @param[out] nMajor - Major version of the app.
	* @param[out] nMinor - Minor version of the app.
	* @param[out] nPatch - Patch version of the app.
	*/
	virtual void GetAppInfo(const LibMCDriver_ScanLabOIE_uint32 nIndex, std::string & sName, LibMCDriver_ScanLabOIE_uint32 & nMajor, LibMCDriver_ScanLabOIE_uint32 & nMinor, LibMCDriver_ScanLabOIE_uint32 & nPatch) = 0;

	/**
	* IOIEDevice::SetRTCCorrectionData - Sets the RTC6 correction file data. If this function is not called, inverse coordinate transformation will be disabled.
	* @param[in] nCorrectionDataBufferSize - Number of elements in buffer
	* @param[in] pCorrectionDataBuffer - Patch version of the app.
	*/
	virtual void SetRTCCorrectionData(const LibMCDriver_ScanLabOIE_uint64 nCorrectionDataBufferSize, const LibMCDriver_ScanLabOIE_uint8 * pCorrectionDataBuffer) = 0;

	/**
	* IOIEDevice::StartAppByName - Starts an app by its name. Fails if an app is already running.
	* @param[in] sName - Name of app to be started.
	* @param[in] sDeviceConfig - Device config string.
	*/
	virtual void StartAppByName(const std::string & sName, const std::string & sDeviceConfig) = 0;

	/**
	* IOIEDevice::StartAppByIndex - Starts an app by its index. Fails if an app is already running.
	* @param[in] nIndex - Index of App, 0-based
	* @param[in] sDeviceConfig - Device config string.
	*/
	virtual void StartAppByIndex(const LibMCDriver_ScanLabOIE_uint32 nIndex, const std::string & sDeviceConfig) = 0;

	/**
	* IOIEDevice::StartAppByMajorVersion - Starts an app by its major version. Fails if an app is already running.
	* @param[in] sName - Name of app to be started.
	* @param[in] nMajorVersion - Major version of app to be started. Fails if app does not exist or only with wrong major number.
	* @param[in] sDeviceConfig - Device config string.
	*/
	virtual void StartAppByMajorVersion(const std::string & sName, const LibMCDriver_ScanLabOIE_uint32 nMajorVersion, const std::string & sDeviceConfig) = 0;

	/**
	* IOIEDevice::StartAppByMinorVersion - Starts an app by its major version. Fails if an app is already running.
	* @param[in] sName - Name of app to be started.
	* @param[in] nMajorVersion - Major version of app to be started. Fails if app does not exist or only with wrong major number.
	* @param[in] nMinorVersion - Minor version of app to be started. Fails if app does not exist or only with wrong minor number.
	* @param[in] sDeviceConfig - Device config string.
	*/
	virtual void StartAppByMinorVersion(const std::string & sName, const LibMCDriver_ScanLabOIE_uint32 nMajorVersion, const LibMCDriver_ScanLabOIE_uint32 nMinorVersion, const std::string & sDeviceConfig) = 0;

	/**
	* IOIEDevice::StopApp - Stops the currently running app. Does nothing if no app is running.
	*/
	virtual void StopApp() = 0;

	/**
	* IOIEDevice::AppIsRunning - Returns if the device is running an app.
	* @return Flag if the device is running an app.
	*/
	virtual bool AppIsRunning() = 0;

	/**
	* IOIEDevice::GetRunningApp - Returns if the app that is currently running on the device. Fails if no app is running on the device.
	* @param[out] sName - Name of app.
	* @param[out] nMajor - Major version of the app.
	* @param[out] nMinor - Minor version of the app.
	* @param[out] nPatch - Patch version of the app.
	*/
	virtual void GetRunningApp(std::string & sName, LibMCDriver_ScanLabOIE_uint32 & nMajor, LibMCDriver_ScanLabOIE_uint32 & nMinor, LibMCDriver_ScanLabOIE_uint32 & nPatch) = 0;

	/**
	* IOIEDevice::InstallApp - Installs an app package on the device. Fails if any app is running on the device. You have to be logged in with an administrator account.
	* @param[in] nAppPackageBufferSize - Number of elements in buffer
	* @param[in] pAppPackageBuffer - Binary data of the app to be installed.
	*/
	virtual void InstallApp(const LibMCDriver_ScanLabOIE_uint64 nAppPackageBufferSize, const LibMCDriver_ScanLabOIE_uint8 * pAppPackageBuffer) = 0;

	/**
	* IOIEDevice::UninstallAppByName - Uninstall all the versions of an app by its name. Fails if any app is running on the device.
	* @param[in] sName - Name of app to be uninstalled.
	*/
	virtual void UninstallAppByName(const std::string & sName) = 0;

	/**
	* IOIEDevice::UninstallAppByIndex - Uninstall an app by its index. Fails if any app is running on the device.
	* @param[in] nIndex - Index of App, 0-based
	*/
	virtual void UninstallAppByIndex(const LibMCDriver_ScanLabOIE_uint32 nIndex) = 0;

	/**
	* IOIEDevice::UninstallAppByMajorVersion - Uninstall all major versions of an app. Fails if any app is running on the device.
	* @param[in] sName - Name of app to be uninstalled.
	* @param[in] nMajorVersion - Major version of app to be uninstalled. Fails if app does not exist or only with wrong major number.
	*/
	virtual void UninstallAppByMajorVersion(const std::string & sName, const LibMCDriver_ScanLabOIE_uint32 nMajorVersion) = 0;

	/**
	* IOIEDevice::UninstallAppByMinorVersion - Uninstall all minor versions of an app. Fails if any app is running on the device.
	* @param[in] sName - Name of app to be uninstalled.
	* @param[in] nMajorVersion - Major version of app to be uninstalled.
	* @param[in] nMinorVersion - Minor version of app to be uninstalled.
	*/
	virtual void UninstallAppByMinorVersion(const std::string & sName, const LibMCDriver_ScanLabOIE_uint32 nMajorVersion, const LibMCDriver_ScanLabOIE_uint32 nMinorVersion) = 0;

};

typedef IBaseSharedPtr<IOIEDevice> PIOIEDevice;


/*************************************************************************************************************************
 Class interface for DeviceConfiguration 
**************************************************************************************************************************/

class IDeviceConfiguration : public virtual IBase {
public:
	/**
	* IDeviceConfiguration::GetDeviceType - Returns if the device is configured to work with an RTC5 or RTC6 card.
	* @return Configured device Type
	*/
	virtual LibMCDriver_ScanLabOIE::eRTCDeviceType GetDeviceType() = 0;

	/**
	* IDeviceConfiguration::GetRTCSignalIDs - Returns the configured RTC signal IDs of the configuration.
	* @param[in] nSignalIDsBufferSize - Number of elements in buffer
	* @param[out] pSignalIDsNeededCount - will be filled with the count of the written structs, or needed buffer size.
	* @param[out] pSignalIDsBuffer - uint32 buffer of RTC Signal IDs
	*/
	virtual void GetRTCSignalIDs(LibMCDriver_ScanLabOIE_uint64 nSignalIDsBufferSize, LibMCDriver_ScanLabOIE_uint64* pSignalIDsNeededCount, LibMCDriver_ScanLabOIE_uint32 * pSignalIDsBuffer) = 0;

	/**
	* IDeviceConfiguration::GetSensorSignalIDs - Returns the configured Sensor signal IDs of the configuration.
	* @param[in] nSignalIDsBufferSize - Number of elements in buffer
	* @param[out] pSignalIDsNeededCount - will be filled with the count of the written structs, or needed buffer size.
	* @param[out] pSignalIDsBuffer - uint32 buffer of Sensor Signal IDs
	*/
	virtual void GetSensorSignalIDs(LibMCDriver_ScanLabOIE_uint64 nSignalIDsBufferSize, LibMCDriver_ScanLabOIE_uint64* pSignalIDsNeededCount, LibMCDriver_ScanLabOIE_uint32 * pSignalIDsBuffer) = 0;

};

typedef IBaseSharedPtr<IDeviceConfiguration> PIDeviceConfiguration;


/*************************************************************************************************************************
 Class interface for Driver_ScanLab_OIE 
**************************************************************************************************************************/

class IDriver_ScanLab_OIE : public virtual IDriver {
public:
	/**
	* IDriver_ScanLab_OIE::SetDependencyResourceNames - Sets the resource names of the OIE SDK Dependencies. Searches in Machine Resources first, then in Driver Resources.
	* @param[in] sLibSSLResourceName - Resource name of LibSSL DLL. Default is libssl_win64 or libssl_linux64, depending on platform.
	* @param[in] sLibCryptoResourceName - Resource name of LibCrypto DLL. Default is libcrypto_win64 or libcrypto_linux64, depending on platform.
	* @param[in] sQT5CoreResourceName - Resource name of Qt5Core DLL. Default is qt5core_win64 or qt5core_linux64, depending on platform.
	* @param[in] sQT5NetworkResourceName - Resource name of Qt5Network DLL. Default is qt5network_win64 or qt5network_linux64, depending on platform.
	*/
	virtual void SetDependencyResourceNames(const std::string & sLibSSLResourceName, const std::string & sLibCryptoResourceName, const std::string & sQT5CoreResourceName, const std::string & sQT5NetworkResourceName) = 0;

	/**
	* IDriver_ScanLab_OIE::InitializeSDK - Initializes the ScanLab OIE SDK.
	* @param[in] sOIEResourceName - Resource name of Scanlab OIE DLL. Searches in Machine Resources first, then in Driver Resources.
	*/
	virtual void InitializeSDK(const std::string & sOIEResourceName) = 0;

	/**
	* IDriver_ScanLab_OIE::InitializeCustomSDK - Initializes the ScanLab OIE SDK from a custom array.
	* @param[in] nOIEDLLBufferSize - Number of elements in buffer
	* @param[in] pOIEDLLBuffer - Byte array of Scanlab OIE DLL
	*/
	virtual void InitializeCustomSDK(const LibMCDriver_ScanLabOIE_uint64 nOIEDLLBufferSize, const LibMCDriver_ScanLabOIE_uint8 * pOIEDLLBuffer) = 0;

	/**
	* IDriver_ScanLab_OIE::AddDevice - Adds a new device to the OIE.
	* @param[in] sName - Name of the device. MUST be a unique string and not exist yet.
	* @param[in] sHostName - Host name of device.
	* @param[in] nPort - Port of device.
	* @param[in] nResponseTimeOut - Response timeout of device in ms.
	* @return OIE Device Instance
	*/
	virtual IOIEDevice * AddDevice(const std::string & sName, const std::string & sHostName, const LibMCDriver_ScanLabOIE_uint32 nPort, const LibMCDriver_ScanLabOIE_uint32 nResponseTimeOut) = 0;

	/**
	* IDriver_ScanLab_OIE::HasDevice - Checks a device with the given name has been previously added.
	* @param[in] sName - Name of the device.
	* @return Flag if device exists.
	*/
	virtual bool HasDevice(const std::string & sName) = 0;

	/**
	* IDriver_ScanLab_OIE::FindDevice - Finds a previously added device by name. Device MUST exist or function throws an error.
	* @param[in] sName - Name of the device.
	* @return OIE Device Instance
	*/
	virtual IOIEDevice * FindDevice(const std::string & sName) = 0;

	/**
	* IDriver_ScanLab_OIE::RemoveDevice - Removes a device from the OIE.
	* @param[in] pDeviceInstance - OIE Device Instance
	*/
	virtual void RemoveDevice(IOIEDevice* pDeviceInstance) = 0;

	/**
	* IDriver_ScanLab_OIE::RemoveDeviceByName - Removes a device from the OIE by name. Does nothing if the device does not exist.
	* @param[in] sName - Name of the device.
	*/
	virtual void RemoveDeviceByName(const std::string & sName) = 0;

	/**
	* IDriver_ScanLab_OIE::ParseDeviceConfiguration - Reads the configuration information from a device configuration string.
	* @param[in] sDeviceConfigString - Device config string.
	* @return Device configuration instance.
	*/
	virtual IDeviceConfiguration * ParseDeviceConfiguration(const std::string & sDeviceConfigString) = 0;

};

typedef IBaseSharedPtr<IDriver_ScanLab_OIE> PIDriver_ScanLab_OIE;


/*************************************************************************************************************************
 Global functions declarations
**************************************************************************************************************************/
class CWrapper {
public:
	// Injected Components
	static LibMCEnv::PWrapper sPLibMCEnvWrapper;

	/**
	* Ilibmcdriver_scanlaboie::GetVersion - retrieves the binary version of this library.
	* @param[out] nMajor - returns the major version of this library
	* @param[out] nMinor - returns the minor version of this library
	* @param[out] nMicro - returns the micro version of this library
	*/
	static void GetVersion(LibMCDriver_ScanLabOIE_uint32 & nMajor, LibMCDriver_ScanLabOIE_uint32 & nMinor, LibMCDriver_ScanLabOIE_uint32 & nMicro);

	/**
	* Ilibmcdriver_scanlaboie::GetLastError - Returns the last error recorded on this object
	* @param[in] pInstance - Instance Handle
	* @param[out] sErrorMessage - Message of the last error
	* @return Is there a last error to query
	*/
	static bool GetLastError(IBase* pInstance, std::string & sErrorMessage);

	/**
	* Ilibmcdriver_scanlaboie::ReleaseInstance - Releases shared ownership of an Instance
	* @param[in] pInstance - Instance Handle
	*/
	static void ReleaseInstance(IBase* pInstance);

	/**
	* Ilibmcdriver_scanlaboie::AcquireInstance - Acquires shared ownership of an Instance
	* @param[in] pInstance - Instance Handle
	*/
	static void AcquireInstance(IBase* pInstance);

	/**
	* Ilibmcdriver_scanlaboie::CreateDriver - Creates a driver instance with a specific name.
	* @param[in] sName - Name of driver to be created.
	* @param[in] sType - Type of driver to be created.
	* @param[in] pDriverEnvironment - Environment of this driver.
	* @return New Driver instance
	*/
	static IDriver * CreateDriver(const std::string & sName, const std::string & sType, LibMCEnv::PDriverEnvironment pDriverEnvironment);

};

LibMCDriver_ScanLabOIEResult LibMCDriver_ScanLabOIE_GetProcAddress (const char * pProcName, void ** ppProcAddress);

} // namespace Impl
} // namespace LibMCDriver_ScanLabOIE

#endif // __LIBMCDRIVER_SCANLABOIE_CPPINTERFACES
