/*++

Copyright (C) 2020 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.8.0-develop.

Abstract: This is an autogenerated C++-Header file in order to allow an easy
 use of MC Driver ScanLab Open Interface Extension

Interface version: 2.0.0

*/

#ifndef __LIBMCDRIVER_SCANLABOIE_DYNAMICHEADER_CPPTYPES
#define __LIBMCDRIVER_SCANLABOIE_DYNAMICHEADER_CPPTYPES

#include "libmcdriver_scanlaboie_types.hpp"

#include "libmcenv_types.hpp"


/*************************************************************************************************************************
 Class definition for Base
**************************************************************************************************************************/

/*************************************************************************************************************************
 Class definition for Driver
**************************************************************************************************************************/

/**
* Configures a driver with its specific configuration data.
*
* @param[in] pDriver - Driver instance.
* @param[in] pConfigurationString - Configuration data of driver.
* @return error code or 0 (success)
*/
typedef LibMCDriver_ScanLabOIEResult (*PLibMCDriver_ScanLabOIEDriver_ConfigurePtr) (LibMCDriver_ScanLabOIE_Driver pDriver, const char * pConfigurationString);

/**
* returns the name identifier of the driver
*
* @param[in] pDriver - Driver instance.
* @param[in] nNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNameBuffer -  buffer of Name of the driver., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCDriver_ScanLabOIEResult (*PLibMCDriver_ScanLabOIEDriver_GetNamePtr) (LibMCDriver_ScanLabOIE_Driver pDriver, const LibMCDriver_ScanLabOIE_uint32 nNameBufferSize, LibMCDriver_ScanLabOIE_uint32* pNameNeededChars, char * pNameBuffer);

/**
* returns the type identifier of the driver
*
* @param[in] pDriver - Driver instance.
* @param[in] nTypeBufferSize - size of the buffer (including trailing 0)
* @param[out] pTypeNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pTypeBuffer -  buffer of Type of the driver., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCDriver_ScanLabOIEResult (*PLibMCDriver_ScanLabOIEDriver_GetTypePtr) (LibMCDriver_ScanLabOIE_Driver pDriver, const LibMCDriver_ScanLabOIE_uint32 nTypeBufferSize, LibMCDriver_ScanLabOIE_uint32* pTypeNeededChars, char * pTypeBuffer);

/**
* returns the version identifiers of the driver
*
* @param[in] pDriver - Driver instance.
* @param[out] pMajor - Major version.
* @param[out] pMinor - Minor version.
* @param[out] pMicro - Micro version.
* @param[in] nBuildBufferSize - size of the buffer (including trailing 0)
* @param[out] pBuildNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pBuildBuffer -  buffer of Build identifier., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCDriver_ScanLabOIEResult (*PLibMCDriver_ScanLabOIEDriver_GetVersionPtr) (LibMCDriver_ScanLabOIE_Driver pDriver, LibMCDriver_ScanLabOIE_uint32 * pMajor, LibMCDriver_ScanLabOIE_uint32 * pMinor, LibMCDriver_ScanLabOIE_uint32 * pMicro, const LibMCDriver_ScanLabOIE_uint32 nBuildBufferSize, LibMCDriver_ScanLabOIE_uint32* pBuildNeededChars, char * pBuildBuffer);

/**
* Updates the driver parameters in the driver environment. Should only be called in the driver thread.
*
* @param[in] pDriver - Driver instance.
* @return error code or 0 (success)
*/
typedef LibMCDriver_ScanLabOIEResult (*PLibMCDriver_ScanLabOIEDriver_QueryParametersPtr) (LibMCDriver_ScanLabOIE_Driver pDriver);

/**
* Updates the driver parameters in the driver environment. Might be called out of thread. Implementation MUST be able to handle parallel calls.
*
* @param[in] pDriver - Driver instance.
* @param[in] pDriverUpdateInstance - Status update instance.
* @return error code or 0 (success)
*/
typedef LibMCDriver_ScanLabOIEResult (*PLibMCDriver_ScanLabOIEDriver_QueryParametersExPtr) (LibMCDriver_ScanLabOIE_Driver pDriver, LibMCEnv_DriverStatusUpdateSession pDriverUpdateInstance);

/*************************************************************************************************************************
 Class definition for DeviceConfiguration
**************************************************************************************************************************/

/**
* Returns if the device is configured to work with an RTC5 or RTC6 card.
*
* @param[in] pDeviceConfiguration - DeviceConfiguration instance.
* @param[out] pDeviceType - Configured device Type
* @return error code or 0 (success)
*/
typedef LibMCDriver_ScanLabOIEResult (*PLibMCDriver_ScanLabOIEDeviceConfiguration_GetDeviceTypePtr) (LibMCDriver_ScanLabOIE_DeviceConfiguration pDeviceConfiguration, LibMCDriver_ScanLabOIE::eRTCDeviceType * pDeviceType);

/**
* Returns the configured RTC signal count of the configuration.
*
* @param[in] pDeviceConfiguration - DeviceConfiguration instance.
* @param[out] pSignalCount - RTC Signal Count
* @return error code or 0 (success)
*/
typedef LibMCDriver_ScanLabOIEResult (*PLibMCDriver_ScanLabOIEDeviceConfiguration_GetRTCSignalCountPtr) (LibMCDriver_ScanLabOIE_DeviceConfiguration pDeviceConfiguration, LibMCDriver_ScanLabOIE_uint32 * pSignalCount);

/**
* Returns the configured Sensor signal count of the configuration.
*
* @param[in] pDeviceConfiguration - DeviceConfiguration instance.
* @param[out] pSignalCount - Sensor Signal Count
* @return error code or 0 (success)
*/
typedef LibMCDriver_ScanLabOIEResult (*PLibMCDriver_ScanLabOIEDeviceConfiguration_GetSensorSignalCountPtr) (LibMCDriver_ScanLabOIE_DeviceConfiguration pDeviceConfiguration, LibMCDriver_ScanLabOIE_uint32 * pSignalCount);

/**
* Returns the configured Additional signal count of the configuration.
*
* @param[in] pDeviceConfiguration - DeviceConfiguration instance.
* @param[out] pSignalCount - Additional Signal Count
* @return error code or 0 (success)
*/
typedef LibMCDriver_ScanLabOIEResult (*PLibMCDriver_ScanLabOIEDeviceConfiguration_GetAdditionalSignalCountPtr) (LibMCDriver_ScanLabOIE_DeviceConfiguration pDeviceConfiguration, LibMCDriver_ScanLabOIE_uint32 * pSignalCount);

/**
* Returns the configured RTC signal IDs of the configuration.
*
* @param[in] pDeviceConfiguration - DeviceConfiguration instance.
* @param[in] nSignalIDsBufferSize - Number of elements in buffer
* @param[out] pSignalIDsNeededCount - will be filled with the count of the written elements, or needed buffer size.
* @param[out] pSignalIDsBuffer - uint32  buffer of RTC Signal IDs
* @return error code or 0 (success)
*/
typedef LibMCDriver_ScanLabOIEResult (*PLibMCDriver_ScanLabOIEDeviceConfiguration_GetRTCSignalIDsPtr) (LibMCDriver_ScanLabOIE_DeviceConfiguration pDeviceConfiguration, const LibMCDriver_ScanLabOIE_uint64 nSignalIDsBufferSize, LibMCDriver_ScanLabOIE_uint64* pSignalIDsNeededCount, LibMCDriver_ScanLabOIE_uint32 * pSignalIDsBuffer);

/**
* Returns the configured Sensor signal IDs of the configuration.
*
* @param[in] pDeviceConfiguration - DeviceConfiguration instance.
* @param[in] nSignalIDsBufferSize - Number of elements in buffer
* @param[out] pSignalIDsNeededCount - will be filled with the count of the written elements, or needed buffer size.
* @param[out] pSignalIDsBuffer - uint32  buffer of Sensor Signal IDs
* @return error code or 0 (success)
*/
typedef LibMCDriver_ScanLabOIEResult (*PLibMCDriver_ScanLabOIEDeviceConfiguration_GetSensorSignalIDsPtr) (LibMCDriver_ScanLabOIE_DeviceConfiguration pDeviceConfiguration, const LibMCDriver_ScanLabOIE_uint64 nSignalIDsBufferSize, LibMCDriver_ScanLabOIE_uint64* pSignalIDsNeededCount, LibMCDriver_ScanLabOIE_uint32 * pSignalIDsBuffer);

/**
* Returns the configured Additional signal IDs of the configuration.
*
* @param[in] pDeviceConfiguration - DeviceConfiguration instance.
* @param[in] nAdditionalIDsBufferSize - Number of elements in buffer
* @param[out] pAdditionalIDsNeededCount - will be filled with the count of the written elements, or needed buffer size.
* @param[out] pAdditionalIDsBuffer - uint32  buffer of Additional Signal IDs
* @return error code or 0 (success)
*/
typedef LibMCDriver_ScanLabOIEResult (*PLibMCDriver_ScanLabOIEDeviceConfiguration_GetAdditionalSignalIDsPtr) (LibMCDriver_ScanLabOIE_DeviceConfiguration pDeviceConfiguration, const LibMCDriver_ScanLabOIE_uint64 nAdditionalIDsBufferSize, LibMCDriver_ScanLabOIE_uint64* pAdditionalIDsNeededCount, LibMCDriver_ScanLabOIE_uint32 * pAdditionalIDsBuffer);

/**
* Returns the configured Additional signal information.
*
* @param[in] pDeviceConfiguration - DeviceConfiguration instance.
* @param[in] nIndex - Index of additional signal. 0-based.
* @param[out] pSignalID - ID of additional signal.
* @param[in] nSignalNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pSignalNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pSignalNameBuffer -  buffer of Name of additional signal., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCDriver_ScanLabOIEResult (*PLibMCDriver_ScanLabOIEDeviceConfiguration_GetAdditionalSignalInfoPtr) (LibMCDriver_ScanLabOIE_DeviceConfiguration pDeviceConfiguration, LibMCDriver_ScanLabOIE_uint32 nIndex, LibMCDriver_ScanLabOIE_uint32 * pSignalID, const LibMCDriver_ScanLabOIE_uint32 nSignalNameBufferSize, LibMCDriver_ScanLabOIE_uint32* pSignalNameNeededChars, char * pSignalNameBuffer);

/**
* Returns the device configuration string.
*
* @param[in] pDeviceConfiguration - DeviceConfiguration instance.
* @param[in] nDeviceConfigurationStringBufferSize - size of the buffer (including trailing 0)
* @param[out] pDeviceConfigurationStringNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pDeviceConfigurationStringBuffer -  buffer of Device configuration string., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCDriver_ScanLabOIEResult (*PLibMCDriver_ScanLabOIEDeviceConfiguration_GetDeviceConfigurationStringPtr) (LibMCDriver_ScanLabOIE_DeviceConfiguration pDeviceConfiguration, const LibMCDriver_ScanLabOIE_uint32 nDeviceConfigurationStringBufferSize, LibMCDriver_ScanLabOIE_uint32* pDeviceConfigurationStringNeededChars, char * pDeviceConfigurationStringBuffer);

/*************************************************************************************************************************
 Class definition for DataRecording
**************************************************************************************************************************/

/**
* Returns the configured RTC signal count of the configuration.
*
* @param[in] pDataRecording - DataRecording instance.
* @param[out] pSignalCount - RTC Signal Count
* @return error code or 0 (success)
*/
typedef LibMCDriver_ScanLabOIEResult (*PLibMCDriver_ScanLabOIEDataRecording_GetRTCSignalCountPtr) (LibMCDriver_ScanLabOIE_DataRecording pDataRecording, LibMCDriver_ScanLabOIE_uint32 * pSignalCount);

/**
* Returns the configured Sensor signal count of the configuration.
*
* @param[in] pDataRecording - DataRecording instance.
* @param[out] pSignalCount - Sensor Signal Count
* @return error code or 0 (success)
*/
typedef LibMCDriver_ScanLabOIEResult (*PLibMCDriver_ScanLabOIEDataRecording_GetSensorSignalCountPtr) (LibMCDriver_ScanLabOIE_DataRecording pDataRecording, LibMCDriver_ScanLabOIE_uint32 * pSignalCount);

/**
* Returns the configured Additional data signal count of the configuration.
*
* @param[in] pDataRecording - DataRecording instance.
* @param[out] pSignalCount - Sensor Signal Count
* @return error code or 0 (success)
*/
typedef LibMCDriver_ScanLabOIEResult (*PLibMCDriver_ScanLabOIEDataRecording_GetAdditionalSignalCountPtr) (LibMCDriver_ScanLabOIE_DataRecording pDataRecording, LibMCDriver_ScanLabOIE_uint32 * pSignalCount);

/**
* Returns the number of records in the recording.
*
* @param[in] pDataRecording - DataRecording instance.
* @param[out] pRecord - Number of records in the recording
* @return error code or 0 (success)
*/
typedef LibMCDriver_ScanLabOIEResult (*PLibMCDriver_ScanLabOIEDataRecording_GetRecordCountPtr) (LibMCDriver_ScanLabOIE_DataRecording pDataRecording, LibMCDriver_ScanLabOIE_uint64 * pRecord);

/**
* Returns the information about a specific record.
*
* @param[in] pDataRecording - DataRecording instance.
* @param[in] nIndex - Index of the record. 0-based. MUST be smaller than RecordCount.
* @param[out] pPacketNumber - Packet Number of the record.
* @param[out] pX - X Coordinate of the record.
* @param[out] pY - Y Coordinate of the record.
* @return error code or 0 (success)
*/
typedef LibMCDriver_ScanLabOIEResult (*PLibMCDriver_ScanLabOIEDataRecording_GetRecordInformationPtr) (LibMCDriver_ScanLabOIE_DataRecording pDataRecording, LibMCDriver_ScanLabOIE_uint32 nIndex, LibMCDriver_ScanLabOIE_uint32 * pPacketNumber, LibMCDriver_ScanLabOIE_double * pX, LibMCDriver_ScanLabOIE_double * pY);

/**
* Returns the measurement tag of a specific record.
*
* @param[in] pDataRecording - DataRecording instance.
* @param[in] nIndex - Index of the record. 0-based. MUST be smaller than RecordCount.
* @param[out] pMeasurementTag - Measurement Tag of the record.
* @return error code or 0 (success)
*/
typedef LibMCDriver_ScanLabOIEResult (*PLibMCDriver_ScanLabOIEDataRecording_GetMeasurementTagPtr) (LibMCDriver_ScanLabOIE_DataRecording pDataRecording, LibMCDriver_ScanLabOIE_uint32 nIndex, LibMCDriver_ScanLabOIE_uint32 * pMeasurementTag);

/**
* Returns the RTC signals of a specific record.
*
* @param[in] pDataRecording - DataRecording instance.
* @param[in] nIndex - Index of the record. 0-based. MUST be smaller than RecordCount.
* @param[in] nRTCSignalsBufferSize - Number of elements in buffer
* @param[out] pRTCSignalsNeededCount - will be filled with the count of the written elements, or needed buffer size.
* @param[out] pRTCSignalsBuffer - int32  buffer of Recorded RTC Signals
* @return error code or 0 (success)
*/
typedef LibMCDriver_ScanLabOIEResult (*PLibMCDriver_ScanLabOIEDataRecording_GetRTCSignalsOfRecordPtr) (LibMCDriver_ScanLabOIE_DataRecording pDataRecording, LibMCDriver_ScanLabOIE_uint32 nIndex, const LibMCDriver_ScanLabOIE_uint64 nRTCSignalsBufferSize, LibMCDriver_ScanLabOIE_uint64* pRTCSignalsNeededCount, LibMCDriver_ScanLabOIE_int32 * pRTCSignalsBuffer);

/**
* Returns the sensor signals of a specific record.
*
* @param[in] pDataRecording - DataRecording instance.
* @param[in] nIndex - Index of the record. 0-based. MUST be smaller than RecordCount.
* @param[in] nSensorSignalsBufferSize - Number of elements in buffer
* @param[out] pSensorSignalsNeededCount - will be filled with the count of the written elements, or needed buffer size.
* @param[out] pSensorSignalsBuffer - int32  buffer of Recorded Sensor Signals
* @return error code or 0 (success)
*/
typedef LibMCDriver_ScanLabOIEResult (*PLibMCDriver_ScanLabOIEDataRecording_GetSensorSignalsOfRecordPtr) (LibMCDriver_ScanLabOIE_DataRecording pDataRecording, LibMCDriver_ScanLabOIE_uint32 nIndex, const LibMCDriver_ScanLabOIE_uint64 nSensorSignalsBufferSize, LibMCDriver_ScanLabOIE_uint64* pSensorSignalsNeededCount, LibMCDriver_ScanLabOIE_int32 * pSensorSignalsBuffer);

/**
* Returns the additional signals of a specific record.
*
* @param[in] pDataRecording - DataRecording instance.
* @param[in] nIndex - Index of the record. 0-based. MUST be smaller than RecordCount.
* @param[in] nAdditionalSignalsBufferSize - Number of elements in buffer
* @param[out] pAdditionalSignalsNeededCount - will be filled with the count of the written elements, or needed buffer size.
* @param[out] pAdditionalSignalsBuffer - int32  buffer of Recorded Additional Signals
* @return error code or 0 (success)
*/
typedef LibMCDriver_ScanLabOIEResult (*PLibMCDriver_ScanLabOIEDataRecording_GetAdditionalSignalsOfRecordPtr) (LibMCDriver_ScanLabOIE_DataRecording pDataRecording, LibMCDriver_ScanLabOIE_uint32 nIndex, const LibMCDriver_ScanLabOIE_uint64 nAdditionalSignalsBufferSize, LibMCDriver_ScanLabOIE_uint64* pAdditionalSignalsNeededCount, LibMCDriver_ScanLabOIE_int32 * pAdditionalSignalsBuffer);

/**
* Returns an array of all coordinates.
*
* @param[in] pDataRecording - DataRecording instance.
* @param[in] nXArrayBufferSize - Number of elements in buffer
* @param[out] pXArrayNeededCount - will be filled with the count of the written elements, or needed buffer size.
* @param[out] pXArrayBuffer - double  buffer of Array of X Coordinates of all records.
* @param[in] nYArrayBufferSize - Number of elements in buffer
* @param[out] pYArrayNeededCount - will be filled with the count of the written elements, or needed buffer size.
* @param[out] pYArrayBuffer - double  buffer of Array of Y Coordinates of all records.
* @return error code or 0 (success)
*/
typedef LibMCDriver_ScanLabOIEResult (*PLibMCDriver_ScanLabOIEDataRecording_GetAllCoordinatesPtr) (LibMCDriver_ScanLabOIE_DataRecording pDataRecording, const LibMCDriver_ScanLabOIE_uint64 nXArrayBufferSize, LibMCDriver_ScanLabOIE_uint64* pXArrayNeededCount, LibMCDriver_ScanLabOIE_double * pXArrayBuffer, const LibMCDriver_ScanLabOIE_uint64 nYArrayBufferSize, LibMCDriver_ScanLabOIE_uint64* pYArrayNeededCount, LibMCDriver_ScanLabOIE_double * pYArrayBuffer);

/**
* Returns an array of all packet numbers.
*
* @param[in] pDataRecording - DataRecording instance.
* @param[in] nPacketNumersBufferSize - Number of elements in buffer
* @param[out] pPacketNumersNeededCount - will be filled with the count of the written elements, or needed buffer size.
* @param[out] pPacketNumersBuffer - uint32  buffer of Array of Packet Numbers of all records.
* @return error code or 0 (success)
*/
typedef LibMCDriver_ScanLabOIEResult (*PLibMCDriver_ScanLabOIEDataRecording_GetAllPacketNumbersPtr) (LibMCDriver_ScanLabOIE_DataRecording pDataRecording, const LibMCDriver_ScanLabOIE_uint64 nPacketNumersBufferSize, LibMCDriver_ScanLabOIE_uint64* pPacketNumersNeededCount, LibMCDriver_ScanLabOIE_uint32 * pPacketNumersBuffer);

/**
* Returns an array of all measurement tags.
*
* @param[in] pDataRecording - DataRecording instance.
* @param[in] nMeasurementTagsBufferSize - Number of elements in buffer
* @param[out] pMeasurementTagsNeededCount - will be filled with the count of the written elements, or needed buffer size.
* @param[out] pMeasurementTagsBuffer - uint32  buffer of Array of Measurement Tags of all records.
* @return error code or 0 (success)
*/
typedef LibMCDriver_ScanLabOIEResult (*PLibMCDriver_ScanLabOIEDataRecording_GetAllMeasurementTagsPtr) (LibMCDriver_ScanLabOIE_DataRecording pDataRecording, const LibMCDriver_ScanLabOIE_uint64 nMeasurementTagsBufferSize, LibMCDriver_ScanLabOIE_uint64* pMeasurementTagsNeededCount, LibMCDriver_ScanLabOIE_uint32 * pMeasurementTagsBuffer);

/**
* Returns an array of all RTC signals of a specific index.
*
* @param[in] pDataRecording - DataRecording instance.
* @param[in] nRTCIndex - Index of the signal to return. 0-based. MUST be smaller than RTCSignalCount.
* @param[in] nSignalsBufferSize - Number of elements in buffer
* @param[out] pSignalsNeededCount - will be filled with the count of the written elements, or needed buffer size.
* @param[out] pSignalsBuffer - int32  buffer of Array of the Indexed Sensor Signal of all records.
* @return error code or 0 (success)
*/
typedef LibMCDriver_ScanLabOIEResult (*PLibMCDriver_ScanLabOIEDataRecording_GetAllRTCSignalsPtr) (LibMCDriver_ScanLabOIE_DataRecording pDataRecording, LibMCDriver_ScanLabOIE_uint32 nRTCIndex, const LibMCDriver_ScanLabOIE_uint64 nSignalsBufferSize, LibMCDriver_ScanLabOIE_uint64* pSignalsNeededCount, LibMCDriver_ScanLabOIE_int32 * pSignalsBuffer);

/**
* Returns an array of all sensor signals of a specific index.
*
* @param[in] pDataRecording - DataRecording instance.
* @param[in] nSignalIndex - Index of the signal to return. 0-based. MUST be smaller than SensorSignalCount.
* @param[in] nSignalsBufferSize - Number of elements in buffer
* @param[out] pSignalsNeededCount - will be filled with the count of the written elements, or needed buffer size.
* @param[out] pSignalsBuffer - int32  buffer of Array of the Indexed RTC Signal of all records.
* @return error code or 0 (success)
*/
typedef LibMCDriver_ScanLabOIEResult (*PLibMCDriver_ScanLabOIEDataRecording_GetAllSensorSignalsPtr) (LibMCDriver_ScanLabOIE_DataRecording pDataRecording, LibMCDriver_ScanLabOIE_uint32 nSignalIndex, const LibMCDriver_ScanLabOIE_uint64 nSignalsBufferSize, LibMCDriver_ScanLabOIE_uint64* pSignalsNeededCount, LibMCDriver_ScanLabOIE_int32 * pSignalsBuffer);

/**
* Returns an array of all additional signals of a specific index.
*
* @param[in] pDataRecording - DataRecording instance.
* @param[in] nAdditionalIndex - Index of the signal to return. 0-based. MUST be smaller than AdditionalSignalCount.
* @param[in] nSignalsBufferSize - Number of elements in buffer
* @param[out] pSignalsNeededCount - will be filled with the count of the written elements, or needed buffer size.
* @param[out] pSignalsBuffer - int32  buffer of Array of the Indexed RTC Signal of all records.
* @return error code or 0 (success)
*/
typedef LibMCDriver_ScanLabOIEResult (*PLibMCDriver_ScanLabOIEDataRecording_GetAllAdditionalSignalsPtr) (LibMCDriver_ScanLabOIE_DataRecording pDataRecording, LibMCDriver_ScanLabOIE_uint32 nAdditionalIndex, const LibMCDriver_ScanLabOIE_uint64 nSignalsBufferSize, LibMCDriver_ScanLabOIE_uint64* pSignalsNeededCount, LibMCDriver_ScanLabOIE_int32 * pSignalsBuffer);

/**
* Writes the packet numbers to a data table as uint32 columns.
*
* @param[in] pDataRecording - DataRecording instance.
* @param[in] pDataTable - Data table instance to write to.
* @param[in] pColumnIdentifier - Identifier of the Column.
* @param[in] pColumnDescription - Description of the Column.
* @return error code or 0 (success)
*/
typedef LibMCDriver_ScanLabOIEResult (*PLibMCDriver_ScanLabOIEDataRecording_AddPacketNumbersToDataTablePtr) (LibMCDriver_ScanLabOIE_DataRecording pDataRecording, LibMCEnv_DataTable pDataTable, const char * pColumnIdentifier, const char * pColumnDescription);

/**
* Writes the X coordinates to a data table as double columns.
*
* @param[in] pDataRecording - DataRecording instance.
* @param[in] pDataTable - Data table instance to write to.
* @param[in] pColumnIdentifier - Identifier of the Column.
* @param[in] pColumnDescription - Description of the Column.
* @return error code or 0 (success)
*/
typedef LibMCDriver_ScanLabOIEResult (*PLibMCDriver_ScanLabOIEDataRecording_AddXCoordinatesToDataTablePtr) (LibMCDriver_ScanLabOIE_DataRecording pDataRecording, LibMCEnv_DataTable pDataTable, const char * pColumnIdentifier, const char * pColumnDescription);

/**
* Writes the Y coordinates to a data table as double columns.
*
* @param[in] pDataRecording - DataRecording instance.
* @param[in] pDataTable - Data table instance to write to.
* @param[in] pColumnIdentifier - Identifier of the Column.
* @param[in] pColumnDescription - Description of the Column.
* @return error code or 0 (success)
*/
typedef LibMCDriver_ScanLabOIEResult (*PLibMCDriver_ScanLabOIEDataRecording_AddYCoordinatesToDataTablePtr) (LibMCDriver_ScanLabOIE_DataRecording pDataRecording, LibMCEnv_DataTable pDataTable, const char * pColumnIdentifier, const char * pColumnDescription);

/**
* Writes the measurement tags to a data table as uint32 columns.
*
* @param[in] pDataRecording - DataRecording instance.
* @param[in] pDataTable - Data table instance to write to.
* @param[in] pColumnIdentifier - Identifier of the Column.
* @param[in] pColumnDescription - Description of the Column.
* @return error code or 0 (success)
*/
typedef LibMCDriver_ScanLabOIEResult (*PLibMCDriver_ScanLabOIEDataRecording_AddMeasurementTagsToDataTablePtr) (LibMCDriver_ScanLabOIE_DataRecording pDataRecording, LibMCEnv_DataTable pDataTable, const char * pColumnIdentifier, const char * pColumnDescription);

/**
* Writes a certain RTC channel to a data table as int32 columns.
*
* @param[in] pDataRecording - DataRecording instance.
* @param[in] nRTCIndex - Index of the signal to return. 0-based. MUST be smaller than RTCSignalCount.
* @param[in] pDataTable - Data table instance to write to.
* @param[in] pColumnIdentifier - Identifier of the Column.
* @param[in] pColumnDescription - Description of the Column.
* @return error code or 0 (success)
*/
typedef LibMCDriver_ScanLabOIEResult (*PLibMCDriver_ScanLabOIEDataRecording_AddRTCSignalsToDataTablePtr) (LibMCDriver_ScanLabOIE_DataRecording pDataRecording, LibMCDriver_ScanLabOIE_uint32 nRTCIndex, LibMCEnv_DataTable pDataTable, const char * pColumnIdentifier, const char * pColumnDescription);

/**
* Writes a certain RTC channel to a data table as double columns, while linearly transforming the values. The DataTable will be filled with the transform RawValue times ScaleFactor + Offset
*
* @param[in] pDataRecording - DataRecording instance.
* @param[in] nRTCIndex - Index of the signal to return. 0-based. MUST be smaller than RTCSignalCount.
* @param[in] pDataTable - Data table instance to write to.
* @param[in] pColumnIdentifier - Identifier of the Column.
* @param[in] pColumnDescription - Description of the Column.
* @param[in] dScaleFactor - Factor that the raw value is scaled with.
* @param[in] dOffset - Offset that the raw value is scaled with.
* @return error code or 0 (success)
*/
typedef LibMCDriver_ScanLabOIEResult (*PLibMCDriver_ScanLabOIEDataRecording_AddScaledRTCSignalsToDataTablePtr) (LibMCDriver_ScanLabOIE_DataRecording pDataRecording, LibMCDriver_ScanLabOIE_uint32 nRTCIndex, LibMCEnv_DataTable pDataTable, const char * pColumnIdentifier, const char * pColumnDescription, LibMCDriver_ScanLabOIE_double dScaleFactor, LibMCDriver_ScanLabOIE_double dOffset);

/**
* Writes a certain sensor channel to a data table as int32 columns.
*
* @param[in] pDataRecording - DataRecording instance.
* @param[in] nSignalIndex - Index of the signal to return. 0-based. MUST be smaller than SensorSignalCount.
* @param[in] pDataTable - Data table instance to write to.
* @param[in] pColumnIdentifier - Identifier of the Column.
* @param[in] pColumnDescription - Description of the Column.
* @return error code or 0 (success)
*/
typedef LibMCDriver_ScanLabOIEResult (*PLibMCDriver_ScanLabOIEDataRecording_AddSensorSignalsToDataTablePtr) (LibMCDriver_ScanLabOIE_DataRecording pDataRecording, LibMCDriver_ScanLabOIE_uint32 nSignalIndex, LibMCEnv_DataTable pDataTable, const char * pColumnIdentifier, const char * pColumnDescription);

/**
* Writes a certain sensor channel to a data table as double columns, while linearly transforming the values. The DataTable will be filled with the transform RawValue times ScaleFactor + Offset
*
* @param[in] pDataRecording - DataRecording instance.
* @param[in] nSignalIndex - Index of the signal to return. 0-based. MUST be smaller than SensorSignalCount.
* @param[in] pDataTable - Data table instance to write to.
* @param[in] pColumnIdentifier - Identifier of the Column.
* @param[in] pColumnDescription - Description of the Column.
* @param[in] dScaleFactor - Factor that the raw value is scaled with.
* @param[in] dOffset - Offset that the raw value is scaled with.
* @return error code or 0 (success)
*/
typedef LibMCDriver_ScanLabOIEResult (*PLibMCDriver_ScanLabOIEDataRecording_AddScaledSensorSignalsToDataTablePtr) (LibMCDriver_ScanLabOIE_DataRecording pDataRecording, LibMCDriver_ScanLabOIE_uint32 nSignalIndex, LibMCEnv_DataTable pDataTable, const char * pColumnIdentifier, const char * pColumnDescription, LibMCDriver_ScanLabOIE_double dScaleFactor, LibMCDriver_ScanLabOIE_double dOffset);

/**
* Writes a certain RTC channel to a data table as int32 columns.
*
* @param[in] pDataRecording - DataRecording instance.
* @param[in] nAdditionalIndex - Index of the signal to return. 0-based. MUST be smaller than AdditionalSignalCount.
* @param[in] pDataTable - Data table instance to write to.
* @param[in] pColumnIdentifier - Identifier of the Column.
* @param[in] pColumnDescription - Description of the Column.
* @return error code or 0 (success)
*/
typedef LibMCDriver_ScanLabOIEResult (*PLibMCDriver_ScanLabOIEDataRecording_AddAdditionalSignalsToDataTablePtr) (LibMCDriver_ScanLabOIE_DataRecording pDataRecording, LibMCDriver_ScanLabOIE_uint32 nAdditionalIndex, LibMCEnv_DataTable pDataTable, const char * pColumnIdentifier, const char * pColumnDescription);

/**
* Writes a certain RTC channel to a data table as double columns, while linearly transforming the values. The DataTable will be filled with the transform RawValue times ScaleFactor + Offset
*
* @param[in] pDataRecording - DataRecording instance.
* @param[in] nAdditionalIndex - Index of the signal to return. 0-based. MUST be smaller than AdditionalSignalCount.
* @param[in] pDataTable - Data table instance to write to.
* @param[in] pColumnIdentifier - Identifier of the Column.
* @param[in] pColumnDescription - Description of the Column.
* @param[in] dScaleFactor - Factor that the raw value is scaled with.
* @param[in] dOffset - Offset that the raw value is scaled with.
* @return error code or 0 (success)
*/
typedef LibMCDriver_ScanLabOIEResult (*PLibMCDriver_ScanLabOIEDataRecording_AddScaledAdditionalSignalsToDataTablePtr) (LibMCDriver_ScanLabOIE_DataRecording pDataRecording, LibMCDriver_ScanLabOIE_uint32 nAdditionalIndex, LibMCEnv_DataTable pDataTable, const char * pColumnIdentifier, const char * pColumnDescription, LibMCDriver_ScanLabOIE_double dScaleFactor, LibMCDriver_ScanLabOIE_double dOffset);

/*************************************************************************************************************************
 Class definition for OIEDevice
**************************************************************************************************************************/

/**
* Returns the unique name of the device.
*
* @param[in] pOIEDevice - OIEDevice instance.
* @param[in] nDeviceNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pDeviceNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pDeviceNameBuffer -  buffer of Name of device., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCDriver_ScanLabOIEResult (*PLibMCDriver_ScanLabOIEOIEDevice_GetDeviceNamePtr) (LibMCDriver_ScanLabOIE_OIEDevice pOIEDevice, const LibMCDriver_ScanLabOIE_uint32 nDeviceNameBufferSize, LibMCDriver_ScanLabOIE_uint32* pDeviceNameNeededChars, char * pDeviceNameBuffer);

/**
* Sets the host name of the device. Fails if device is already connected.
*
* @param[in] pOIEDevice - OIEDevice instance.
* @param[in] pHostName - New Host name of device.
* @return error code or 0 (success)
*/
typedef LibMCDriver_ScanLabOIEResult (*PLibMCDriver_ScanLabOIEOIEDevice_SetHostNamePtr) (LibMCDriver_ScanLabOIE_OIEDevice pOIEDevice, const char * pHostName);

/**
* Returns the host name of the device.
*
* @param[in] pOIEDevice - OIEDevice instance.
* @param[in] nHostNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pHostNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pHostNameBuffer -  buffer of Host name of device., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCDriver_ScanLabOIEResult (*PLibMCDriver_ScanLabOIEOIEDevice_GetHostNamePtr) (LibMCDriver_ScanLabOIE_OIEDevice pOIEDevice, const LibMCDriver_ScanLabOIE_uint32 nHostNameBufferSize, LibMCDriver_ScanLabOIE_uint32* pHostNameNeededChars, char * pHostNameBuffer);

/**
* Sets the port of the device. Fails if device is already connected.
*
* @param[in] pOIEDevice - OIEDevice instance.
* @param[in] nPort - New port of device.
* @return error code or 0 (success)
*/
typedef LibMCDriver_ScanLabOIEResult (*PLibMCDriver_ScanLabOIEOIEDevice_SetPortPtr) (LibMCDriver_ScanLabOIE_OIEDevice pOIEDevice, LibMCDriver_ScanLabOIE_uint32 nPort);

/**
* Returns the port of the device. Fails if device is already connected.
*
* @param[in] pOIEDevice - OIEDevice instance.
* @param[out] pPort - Port of device.
* @return error code or 0 (success)
*/
typedef LibMCDriver_ScanLabOIEResult (*PLibMCDriver_ScanLabOIEOIEDevice_GetPortPtr) (LibMCDriver_ScanLabOIE_OIEDevice pOIEDevice, LibMCDriver_ScanLabOIE_uint32 * pPort);

/**
* Returns if the device is connected and logged in.
*
* @param[in] pOIEDevice - OIEDevice instance.
* @param[out] pValue - Flag if the device is connected.
* @return error code or 0 (success)
*/
typedef LibMCDriver_ScanLabOIEResult (*PLibMCDriver_ScanLabOIEOIEDevice_IsConnectedPtr) (LibMCDriver_ScanLabOIE_OIEDevice pOIEDevice, bool * pValue);

/**
* Returns the ID of the device.
*
* @param[in] pOIEDevice - OIEDevice instance.
* @param[out] pDeviceID - ID of the device.
* @return error code or 0 (success)
*/
typedef LibMCDriver_ScanLabOIEResult (*PLibMCDriver_ScanLabOIEOIEDevice_GetDeviceIDPtr) (LibMCDriver_ScanLabOIE_OIEDevice pOIEDevice, LibMCDriver_ScanLabOIE_uint32 * pDeviceID);

/**
* Connects to the device and attempts to log in with user name and password.
*
* @param[in] pOIEDevice - OIEDevice instance.
* @param[in] pUserName - UserName to use.
* @param[in] pPassword - Password to use.
* @return error code or 0 (success)
*/
typedef LibMCDriver_ScanLabOIEResult (*PLibMCDriver_ScanLabOIEOIEDevice_ConnectPtr) (LibMCDriver_ScanLabOIE_OIEDevice pOIEDevice, const char * pUserName, const char * pPassword);

/**
* Disconnects from the device. Has no effect if device is not connected.
*
* @param[in] pOIEDevice - OIEDevice instance.
* @return error code or 0 (success)
*/
typedef LibMCDriver_ScanLabOIEResult (*PLibMCDriver_ScanLabOIEOIEDevice_DisconnectPtr) (LibMCDriver_ScanLabOIE_OIEDevice pOIEDevice);

/**
* Refreshes the list of installed apps on the system.
*
* @param[in] pOIEDevice - OIEDevice instance.
* @return error code or 0 (success)
*/
typedef LibMCDriver_ScanLabOIEResult (*PLibMCDriver_ScanLabOIEOIEDevice_RefreshAppListPtr) (LibMCDriver_ScanLabOIE_OIEDevice pOIEDevice);

/**
* Returns how many apps are installed on the device. Fails if device is not connected.
*
* @param[in] pOIEDevice - OIEDevice instance.
* @param[out] pCount - Number of apps installed on the device.
* @return error code or 0 (success)
*/
typedef LibMCDriver_ScanLabOIEResult (*PLibMCDriver_ScanLabOIEOIEDevice_GetAppCountPtr) (LibMCDriver_ScanLabOIE_OIEDevice pOIEDevice, LibMCDriver_ScanLabOIE_uint32 * pCount);

/**
* Returns the name of an app from the app list.
*
* @param[in] pOIEDevice - OIEDevice instance.
* @param[in] nIndex - Index of App, 0-based
* @param[in] nNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNameBuffer -  buffer of Name of app., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCDriver_ScanLabOIEResult (*PLibMCDriver_ScanLabOIEOIEDevice_GetAppNamePtr) (LibMCDriver_ScanLabOIE_OIEDevice pOIEDevice, LibMCDriver_ScanLabOIE_uint32 nIndex, const LibMCDriver_ScanLabOIE_uint32 nNameBufferSize, LibMCDriver_ScanLabOIE_uint32* pNameNeededChars, char * pNameBuffer);

/**
* Returns the version of an app from the app list.
*
* @param[in] pOIEDevice - OIEDevice instance.
* @param[in] nIndex - Index of App, 0-based
* @param[out] pMajor - Major version of the app.
* @param[out] pMinor - Minor version of the app.
* @param[out] pPatch - Patch version of the app.
* @return error code or 0 (success)
*/
typedef LibMCDriver_ScanLabOIEResult (*PLibMCDriver_ScanLabOIEOIEDevice_GetAppVersionPtr) (LibMCDriver_ScanLabOIE_OIEDevice pOIEDevice, LibMCDriver_ScanLabOIE_uint32 nIndex, LibMCDriver_ScanLabOIE_uint32 * pMajor, LibMCDriver_ScanLabOIE_uint32 * pMinor, LibMCDriver_ScanLabOIE_uint32 * pPatch);

/**
* Returns the name and version of an app from the app list.
*
* @param[in] pOIEDevice - OIEDevice instance.
* @param[in] nIndex - Index of App, 0-based
* @param[in] nNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNameBuffer -  buffer of Name of app., may be NULL
* @param[out] pMajor - Major version of the app.
* @param[out] pMinor - Minor version of the app.
* @param[out] pPatch - Patch version of the app.
* @return error code or 0 (success)
*/
typedef LibMCDriver_ScanLabOIEResult (*PLibMCDriver_ScanLabOIEOIEDevice_GetAppInfoPtr) (LibMCDriver_ScanLabOIE_OIEDevice pOIEDevice, LibMCDriver_ScanLabOIE_uint32 nIndex, const LibMCDriver_ScanLabOIE_uint32 nNameBufferSize, LibMCDriver_ScanLabOIE_uint32* pNameNeededChars, char * pNameBuffer, LibMCDriver_ScanLabOIE_uint32 * pMajor, LibMCDriver_ScanLabOIE_uint32 * pMinor, LibMCDriver_ScanLabOIE_uint32 * pPatch);

/**
* Starts an app by its name. Fails if an app is already running. Starts recording of signals.
*
* @param[in] pOIEDevice - OIEDevice instance.
* @param[in] pName - Name of app to be started.
* @return error code or 0 (success)
*/
typedef LibMCDriver_ScanLabOIEResult (*PLibMCDriver_ScanLabOIEOIEDevice_StartAppByNamePtr) (LibMCDriver_ScanLabOIE_OIEDevice pOIEDevice, const char * pName);

/**
* Starts an app by its index. Fails if an app is already running.
*
* @param[in] pOIEDevice - OIEDevice instance.
* @param[in] nIndex - Index of App, 0-based
* @return error code or 0 (success)
*/
typedef LibMCDriver_ScanLabOIEResult (*PLibMCDriver_ScanLabOIEOIEDevice_StartAppByIndexPtr) (LibMCDriver_ScanLabOIE_OIEDevice pOIEDevice, LibMCDriver_ScanLabOIE_uint32 nIndex);

/**
* Starts an app by its major version. Fails if an app is already running.
*
* @param[in] pOIEDevice - OIEDevice instance.
* @param[in] pName - Name of app to be started.
* @param[in] nMajorVersion - Major version of app to be started. Fails if app does not exist or only with wrong major number.
* @return error code or 0 (success)
*/
typedef LibMCDriver_ScanLabOIEResult (*PLibMCDriver_ScanLabOIEOIEDevice_StartAppByMajorVersionPtr) (LibMCDriver_ScanLabOIE_OIEDevice pOIEDevice, const char * pName, LibMCDriver_ScanLabOIE_uint32 nMajorVersion);

/**
* Starts an app by its major version. Fails if an app is already running.
*
* @param[in] pOIEDevice - OIEDevice instance.
* @param[in] pName - Name of app to be started.
* @param[in] nMajorVersion - Major version of app to be started. Fails if app does not exist or only with wrong major number.
* @param[in] nMinorVersion - Minor version of app to be started. Fails if app does not exist or only with wrong minor number.
* @return error code or 0 (success)
*/
typedef LibMCDriver_ScanLabOIEResult (*PLibMCDriver_ScanLabOIEOIEDevice_StartAppByMinorVersionPtr) (LibMCDriver_ScanLabOIE_OIEDevice pOIEDevice, const char * pName, LibMCDriver_ScanLabOIE_uint32 nMajorVersion, LibMCDriver_ScanLabOIE_uint32 nMinorVersion);

/**
* Stops the currently running app. Does nothing if no app is running. Stops recording of signals.
*
* @param[in] pOIEDevice - OIEDevice instance.
* @return error code or 0 (success)
*/
typedef LibMCDriver_ScanLabOIEResult (*PLibMCDriver_ScanLabOIEOIEDevice_StopAppPtr) (LibMCDriver_ScanLabOIE_OIEDevice pOIEDevice);

/**
* Returns if the device is running an app.
*
* @param[in] pOIEDevice - OIEDevice instance.
* @param[out] pValue - Flag if the device is running an app.
* @return error code or 0 (success)
*/
typedef LibMCDriver_ScanLabOIEResult (*PLibMCDriver_ScanLabOIEOIEDevice_AppIsRunningPtr) (LibMCDriver_ScanLabOIE_OIEDevice pOIEDevice, bool * pValue);

/**
* Returns if the app that is currently running on the device. Fails if no app is running on the device.
*
* @param[in] pOIEDevice - OIEDevice instance.
* @param[in] nNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNameBuffer -  buffer of Name of app., may be NULL
* @param[out] pMajor - Major version of the app.
* @param[out] pMinor - Minor version of the app.
* @param[out] pPatch - Patch version of the app.
* @return error code or 0 (success)
*/
typedef LibMCDriver_ScanLabOIEResult (*PLibMCDriver_ScanLabOIEOIEDevice_GetRunningAppPtr) (LibMCDriver_ScanLabOIE_OIEDevice pOIEDevice, const LibMCDriver_ScanLabOIE_uint32 nNameBufferSize, LibMCDriver_ScanLabOIE_uint32* pNameNeededChars, char * pNameBuffer, LibMCDriver_ScanLabOIE_uint32 * pMajor, LibMCDriver_ScanLabOIE_uint32 * pMinor, LibMCDriver_ScanLabOIE_uint32 * pPatch);

/**
* Installs an app package on the device. Fails if any app is running on the device. You have to be logged in with an administrator account.
*
* @param[in] pOIEDevice - OIEDevice instance.
* @param[in] nAppPackageBufferSize - Number of elements in buffer
* @param[in] pAppPackageBuffer - uint8 buffer of Binary data of the app to be installed.
* @return error code or 0 (success)
*/
typedef LibMCDriver_ScanLabOIEResult (*PLibMCDriver_ScanLabOIEOIEDevice_InstallAppPtr) (LibMCDriver_ScanLabOIE_OIEDevice pOIEDevice, LibMCDriver_ScanLabOIE_uint64 nAppPackageBufferSize, const LibMCDriver_ScanLabOIE_uint8 * pAppPackageBuffer);

/**
* Uninstall all the versions of an app by its name. Fails if any app is running on the device.
*
* @param[in] pOIEDevice - OIEDevice instance.
* @param[in] pName - Name of app to be uninstalled.
* @return error code or 0 (success)
*/
typedef LibMCDriver_ScanLabOIEResult (*PLibMCDriver_ScanLabOIEOIEDevice_UninstallAppByNamePtr) (LibMCDriver_ScanLabOIE_OIEDevice pOIEDevice, const char * pName);

/**
* Uninstall an app by its index. Fails if any app is running on the device.
*
* @param[in] pOIEDevice - OIEDevice instance.
* @param[in] nIndex - Index of App, 0-based
* @return error code or 0 (success)
*/
typedef LibMCDriver_ScanLabOIEResult (*PLibMCDriver_ScanLabOIEOIEDevice_UninstallAppByIndexPtr) (LibMCDriver_ScanLabOIE_OIEDevice pOIEDevice, LibMCDriver_ScanLabOIE_uint32 nIndex);

/**
* Uninstall all major versions of an app. Fails if any app is running on the device.
*
* @param[in] pOIEDevice - OIEDevice instance.
* @param[in] pName - Name of app to be uninstalled.
* @param[in] nMajorVersion - Major version of app to be uninstalled. Fails if app does not exist or only with wrong major number.
* @return error code or 0 (success)
*/
typedef LibMCDriver_ScanLabOIEResult (*PLibMCDriver_ScanLabOIEOIEDevice_UninstallAppByMajorVersionPtr) (LibMCDriver_ScanLabOIE_OIEDevice pOIEDevice, const char * pName, LibMCDriver_ScanLabOIE_uint32 nMajorVersion);

/**
* Uninstall all minor versions of an app. Fails if any app is running on the device.
*
* @param[in] pOIEDevice - OIEDevice instance.
* @param[in] pName - Name of app to be uninstalled.
* @param[in] nMajorVersion - Major version of app to be uninstalled.
* @param[in] nMinorVersion - Minor version of app to be uninstalled.
* @return error code or 0 (success)
*/
typedef LibMCDriver_ScanLabOIEResult (*PLibMCDriver_ScanLabOIEOIEDevice_UninstallAppByMinorVersionPtr) (LibMCDriver_ScanLabOIE_OIEDevice pOIEDevice, const char * pName, LibMCDriver_ScanLabOIE_uint32 nMajorVersion, LibMCDriver_ScanLabOIE_uint32 nMinorVersion);

/**
* Retrieves a copy of the current recording DataRecording Instance and continues recording into a new empty instance.
*
* @param[in] pOIEDevice - OIEDevice instance.
* @param[out] pRecordingInstance - Recording instance
* @return error code or 0 (success)
*/
typedef LibMCDriver_ScanLabOIEResult (*PLibMCDriver_ScanLabOIEOIEDevice_RetrieveCurrentRecordingPtr) (LibMCDriver_ScanLabOIE_OIEDevice pOIEDevice, LibMCDriver_ScanLabOIE_DataRecording * pRecordingInstance);

/**
* Clears the current recording data and continues recording into a new empty instance.
*
* @param[in] pOIEDevice - OIEDevice instance.
* @return error code or 0 (success)
*/
typedef LibMCDriver_ScanLabOIEResult (*PLibMCDriver_ScanLabOIEOIEDevice_ClearCurrentRecordingPtr) (LibMCDriver_ScanLabOIE_OIEDevice pOIEDevice);

/**
* Loads a recording from a previously stored build data. The mime-type of the data MUST be application/scanlaboie-1.0.
*
* @param[in] pOIEDevice - OIEDevice instance.
* @param[in] pBuild - Build that contains the data.
* @param[in] pDataUUID - Data UUID of the build data.
* @param[out] pRecordingInstance - Recording instance
* @return error code or 0 (success)
*/
typedef LibMCDriver_ScanLabOIEResult (*PLibMCDriver_ScanLabOIEOIEDevice_LoadRecordingFromBuildPtr) (LibMCDriver_ScanLabOIE_OIEDevice pOIEDevice, LibMCEnv_Build pBuild, const char * pDataUUID, LibMCDriver_ScanLabOIE_DataRecording * pRecordingInstance);

/*************************************************************************************************************************
 Class definition for Driver_ScanLab_OIE
**************************************************************************************************************************/

/**
* Returns the type of the device driver.
*
* @param[in] pDriver_ScanLab_OIE - Driver_ScanLab_OIE instance.
* @param[out] pDeviceDriverType - Type of device driver.
* @return error code or 0 (success)
*/
typedef LibMCDriver_ScanLabOIEResult (*PLibMCDriver_ScanLabOIEDriver_ScanLab_OIE_GetDriverTypePtr) (LibMCDriver_ScanLabOIE_Driver_ScanLab_OIE pDriver_ScanLab_OIE, LibMCDriver_ScanLabOIE::eOIEDeviceDriverType * pDeviceDriverType);

/**
* Sets the resource names of the OIE SDK Dependencies. Searches in Machine Resources first, then in Driver Resources.
*
* @param[in] pDriver_ScanLab_OIE - Driver_ScanLab_OIE instance.
* @param[in] pLibSSLResourceName - Resource name of LibSSL DLL. Default is libssl_win64 or libssl_linux64, depending on platform.
* @param[in] pLibCryptoResourceName - Resource name of LibCrypto DLL. Default is libcrypto_win64 or libcrypto_linux64, depending on platform.
* @param[in] pQT5CoreResourceName - Resource name of Qt5Core DLL. Default is qt5core_win64 or qt5core_linux64, depending on platform.
* @param[in] pQT5NetworkResourceName - Resource name of Qt5Network DLL. Default is qt5network_win64 or qt5network_linux64, depending on platform.
* @return error code or 0 (success)
*/
typedef LibMCDriver_ScanLabOIEResult (*PLibMCDriver_ScanLabOIEDriver_ScanLab_OIE_SetDependencyResourceNamesPtr) (LibMCDriver_ScanLabOIE_Driver_ScanLab_OIE pDriver_ScanLab_OIE, const char * pLibSSLResourceName, const char * pLibCryptoResourceName, const char * pQT5CoreResourceName, const char * pQT5NetworkResourceName);

/**
* Sets the resource names of the OIE SDK Dependencies for version 3. Searches in Machine Resources first, then in Driver Resources.
*
* @param[in] pDriver_ScanLab_OIE - Driver_ScanLab_OIE instance.
* @param[in] pOIECalibrationLibraryResourceName - Resource name of OIE Calibration Library DLL. Default is oiecalibrationlibrary_win64 or oiecalibrationlibrary_linux64, depending on platform.
* @param[in] pRTCStreamParserResourceName - Resource name of RTC Stream Parser Library DLL. Default is oiestreamparser_win64 or oiestreamparser_linux64, depending on platform.
* @return error code or 0 (success)
*/
typedef LibMCDriver_ScanLabOIEResult (*PLibMCDriver_ScanLabOIEDriver_ScanLab_OIE_SetOIE3ResourceNamesPtr) (LibMCDriver_ScanLabOIE_Driver_ScanLab_OIE pDriver_ScanLab_OIE, const char * pOIECalibrationLibraryResourceName, const char * pRTCStreamParserResourceName);

/**
* Initializes the ScanLab OIE SDK.
*
* @param[in] pDriver_ScanLab_OIE - Driver_ScanLab_OIE instance.
* @param[in] pOIEResourceName - Resource name of Scanlab OIE DLL. Searches in Machine Resources first, then in Driver Resources.
* @return error code or 0 (success)
*/
typedef LibMCDriver_ScanLabOIEResult (*PLibMCDriver_ScanLabOIEDriver_ScanLab_OIE_InitializeSDKPtr) (LibMCDriver_ScanLabOIE_Driver_ScanLab_OIE pDriver_ScanLab_OIE, const char * pOIEResourceName);

/**
* Initializes the ScanLab OIE SDK from a custom array.
*
* @param[in] pDriver_ScanLab_OIE - Driver_ScanLab_OIE instance.
* @param[in] nOIEDLLBufferSize - Number of elements in buffer
* @param[in] pOIEDLLBuffer - uint8 buffer of Byte array of Scanlab OIE DLL
* @return error code or 0 (success)
*/
typedef LibMCDriver_ScanLabOIEResult (*PLibMCDriver_ScanLabOIEDriver_ScanLab_OIE_InitializeCustomSDKPtr) (LibMCDriver_ScanLabOIE_Driver_ScanLab_OIE pDriver_ScanLab_OIE, LibMCDriver_ScanLabOIE_uint64 nOIEDLLBufferSize, const LibMCDriver_ScanLabOIE_uint8 * pOIEDLLBuffer);

/**
* Adds a new device to the OIE.
*
* @param[in] pDriver_ScanLab_OIE - Driver_ScanLab_OIE instance.
* @param[in] pName - Name of the device. MUST be a unique string and not exist yet.
* @param[in] pHostName - Host name of device.
* @param[in] nPort - Port of device.
* @param[in] pDeviceConfig - Device configuration instance.
* @param[in] nCorrectionDataBufferSize - Number of elements in buffer
* @param[in] pCorrectionDataBuffer - uint8 buffer of Patch version of the app.
* @param[in] nResponseTimeOut - Response timeout of device in ms.
* @param[out] pDeviceInstance - OIE Device Instance
* @return error code or 0 (success)
*/
typedef LibMCDriver_ScanLabOIEResult (*PLibMCDriver_ScanLabOIEDriver_ScanLab_OIE_AddDevicePtr) (LibMCDriver_ScanLabOIE_Driver_ScanLab_OIE pDriver_ScanLab_OIE, const char * pName, const char * pHostName, LibMCDriver_ScanLabOIE_uint32 nPort, LibMCDriver_ScanLabOIE_DeviceConfiguration pDeviceConfig, LibMCDriver_ScanLabOIE_uint64 nCorrectionDataBufferSize, const LibMCDriver_ScanLabOIE_uint8 * pCorrectionDataBuffer, LibMCDriver_ScanLabOIE_uint32 nResponseTimeOut, LibMCDriver_ScanLabOIE_OIEDevice * pDeviceInstance);

/**
* Checks a device with the given name has been previously added.
*
* @param[in] pDriver_ScanLab_OIE - Driver_ScanLab_OIE instance.
* @param[in] pName - Name of the device.
* @param[out] pHasDevice - Flag if device exists.
* @return error code or 0 (success)
*/
typedef LibMCDriver_ScanLabOIEResult (*PLibMCDriver_ScanLabOIEDriver_ScanLab_OIE_HasDevicePtr) (LibMCDriver_ScanLabOIE_Driver_ScanLab_OIE pDriver_ScanLab_OIE, const char * pName, bool * pHasDevice);

/**
* Finds a previously added device by name. Device MUST exist or function throws an error.
*
* @param[in] pDriver_ScanLab_OIE - Driver_ScanLab_OIE instance.
* @param[in] pName - Name of the device.
* @param[out] pDeviceInstance - OIE Device Instance
* @return error code or 0 (success)
*/
typedef LibMCDriver_ScanLabOIEResult (*PLibMCDriver_ScanLabOIEDriver_ScanLab_OIE_FindDevicePtr) (LibMCDriver_ScanLabOIE_Driver_ScanLab_OIE pDriver_ScanLab_OIE, const char * pName, LibMCDriver_ScanLabOIE_OIEDevice * pDeviceInstance);

/**
* Removes a device from the OIE.
*
* @param[in] pDriver_ScanLab_OIE - Driver_ScanLab_OIE instance.
* @param[in] pDeviceInstance - OIE Device Instance
* @return error code or 0 (success)
*/
typedef LibMCDriver_ScanLabOIEResult (*PLibMCDriver_ScanLabOIEDriver_ScanLab_OIE_RemoveDevicePtr) (LibMCDriver_ScanLabOIE_Driver_ScanLab_OIE pDriver_ScanLab_OIE, LibMCDriver_ScanLabOIE_OIEDevice pDeviceInstance);

/**
* Removes a device from the OIE by name. Does nothing if the device does not exist.
*
* @param[in] pDriver_ScanLab_OIE - Driver_ScanLab_OIE instance.
* @param[in] pName - Name of the device.
* @return error code or 0 (success)
*/
typedef LibMCDriver_ScanLabOIEResult (*PLibMCDriver_ScanLabOIEDriver_ScanLab_OIE_RemoveDeviceByNamePtr) (LibMCDriver_ScanLabOIE_Driver_ScanLab_OIE pDriver_ScanLab_OIE, const char * pName);

/**
* Reads the configuration information from a device configuration string.
*
* @param[in] pDriver_ScanLab_OIE - Driver_ScanLab_OIE instance.
* @param[in] pDeviceConfigString - Device config string.
* @param[out] pDeviceConfigInstance - Device configuration instance.
* @return error code or 0 (success)
*/
typedef LibMCDriver_ScanLabOIEResult (*PLibMCDriver_ScanLabOIEDriver_ScanLab_OIE_ParseDeviceConfigurationPtr) (LibMCDriver_ScanLabOIE_Driver_ScanLab_OIE pDriver_ScanLab_OIE, const char * pDeviceConfigString, LibMCDriver_ScanLabOIE_DeviceConfiguration * pDeviceConfigInstance);

/*************************************************************************************************************************
 Global functions
**************************************************************************************************************************/

/**
* retrieves the binary version of this library.
*
* @param[out] pMajor - returns the major version of this library
* @param[out] pMinor - returns the minor version of this library
* @param[out] pMicro - returns the micro version of this library
* @return error code or 0 (success)
*/
typedef LibMCDriver_ScanLabOIEResult (*PLibMCDriver_ScanLabOIEGetVersionPtr) (LibMCDriver_ScanLabOIE_uint32 * pMajor, LibMCDriver_ScanLabOIE_uint32 * pMinor, LibMCDriver_ScanLabOIE_uint32 * pMicro);

/**
* Returns the last error recorded on this object
*
* @param[in] pInstance - Instance Handle
* @param[in] nErrorMessageBufferSize - size of the buffer (including trailing 0)
* @param[out] pErrorMessageNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pErrorMessageBuffer -  buffer of Message of the last error, may be NULL
* @param[out] pHasError - Is there a last error to query
* @return error code or 0 (success)
*/
typedef LibMCDriver_ScanLabOIEResult (*PLibMCDriver_ScanLabOIEGetLastErrorPtr) (LibMCDriver_ScanLabOIE_Base pInstance, const LibMCDriver_ScanLabOIE_uint32 nErrorMessageBufferSize, LibMCDriver_ScanLabOIE_uint32* pErrorMessageNeededChars, char * pErrorMessageBuffer, bool * pHasError);

/**
* Releases shared ownership of an Instance
*
* @param[in] pInstance - Instance Handle
* @return error code or 0 (success)
*/
typedef LibMCDriver_ScanLabOIEResult (*PLibMCDriver_ScanLabOIEReleaseInstancePtr) (LibMCDriver_ScanLabOIE_Base pInstance);

/**
* Acquires shared ownership of an Instance
*
* @param[in] pInstance - Instance Handle
* @return error code or 0 (success)
*/
typedef LibMCDriver_ScanLabOIEResult (*PLibMCDriver_ScanLabOIEAcquireInstancePtr) (LibMCDriver_ScanLabOIE_Base pInstance);

/**
* Injects an imported component for usage within this component
*
* @param[in] pNameSpace - NameSpace of the injected component
* @param[in] pSymbolAddressMethod - Address of the SymbolAddressMethod of the injected component
* @return error code or 0 (success)
*/
typedef LibMCDriver_ScanLabOIEResult (*PLibMCDriver_ScanLabOIEInjectComponentPtr) (const char * pNameSpace, LibMCDriver_ScanLabOIE_pvoid pSymbolAddressMethod);

/**
* Returns the address of the SymbolLookupMethod
*
* @param[out] pSymbolLookupMethod - Address of the SymbolAddressMethod
* @return error code or 0 (success)
*/
typedef LibMCDriver_ScanLabOIEResult (*PLibMCDriver_ScanLabOIEGetSymbolLookupMethodPtr) (LibMCDriver_ScanLabOIE_pvoid * pSymbolLookupMethod);

/**
* Creates a driver instance with a specific name.
*
* @param[in] pName - Name of driver to be created.
* @param[in] pType - Type of driver to be created.
* @param[in] pDriverEnvironment - Environment of this driver.
* @param[out] pInstance - New Driver instance
* @return error code or 0 (success)
*/
typedef LibMCDriver_ScanLabOIEResult (*PLibMCDriver_ScanLabOIECreateDriverPtr) (const char * pName, const char * pType, LibMCEnv_DriverEnvironment pDriverEnvironment, LibMCDriver_ScanLabOIE_Driver * pInstance);

/*************************************************************************************************************************
 Function Table Structure
**************************************************************************************************************************/

typedef struct {
	void * m_LibraryHandle;
	PLibMCDriver_ScanLabOIEDriver_ConfigurePtr m_Driver_Configure;
	PLibMCDriver_ScanLabOIEDriver_GetNamePtr m_Driver_GetName;
	PLibMCDriver_ScanLabOIEDriver_GetTypePtr m_Driver_GetType;
	PLibMCDriver_ScanLabOIEDriver_GetVersionPtr m_Driver_GetVersion;
	PLibMCDriver_ScanLabOIEDriver_QueryParametersPtr m_Driver_QueryParameters;
	PLibMCDriver_ScanLabOIEDriver_QueryParametersExPtr m_Driver_QueryParametersEx;
	PLibMCDriver_ScanLabOIEDeviceConfiguration_GetDeviceTypePtr m_DeviceConfiguration_GetDeviceType;
	PLibMCDriver_ScanLabOIEDeviceConfiguration_GetRTCSignalCountPtr m_DeviceConfiguration_GetRTCSignalCount;
	PLibMCDriver_ScanLabOIEDeviceConfiguration_GetSensorSignalCountPtr m_DeviceConfiguration_GetSensorSignalCount;
	PLibMCDriver_ScanLabOIEDeviceConfiguration_GetAdditionalSignalCountPtr m_DeviceConfiguration_GetAdditionalSignalCount;
	PLibMCDriver_ScanLabOIEDeviceConfiguration_GetRTCSignalIDsPtr m_DeviceConfiguration_GetRTCSignalIDs;
	PLibMCDriver_ScanLabOIEDeviceConfiguration_GetSensorSignalIDsPtr m_DeviceConfiguration_GetSensorSignalIDs;
	PLibMCDriver_ScanLabOIEDeviceConfiguration_GetAdditionalSignalIDsPtr m_DeviceConfiguration_GetAdditionalSignalIDs;
	PLibMCDriver_ScanLabOIEDeviceConfiguration_GetAdditionalSignalInfoPtr m_DeviceConfiguration_GetAdditionalSignalInfo;
	PLibMCDriver_ScanLabOIEDeviceConfiguration_GetDeviceConfigurationStringPtr m_DeviceConfiguration_GetDeviceConfigurationString;
	PLibMCDriver_ScanLabOIEDataRecording_GetRTCSignalCountPtr m_DataRecording_GetRTCSignalCount;
	PLibMCDriver_ScanLabOIEDataRecording_GetSensorSignalCountPtr m_DataRecording_GetSensorSignalCount;
	PLibMCDriver_ScanLabOIEDataRecording_GetAdditionalSignalCountPtr m_DataRecording_GetAdditionalSignalCount;
	PLibMCDriver_ScanLabOIEDataRecording_GetRecordCountPtr m_DataRecording_GetRecordCount;
	PLibMCDriver_ScanLabOIEDataRecording_GetRecordInformationPtr m_DataRecording_GetRecordInformation;
	PLibMCDriver_ScanLabOIEDataRecording_GetMeasurementTagPtr m_DataRecording_GetMeasurementTag;
	PLibMCDriver_ScanLabOIEDataRecording_GetRTCSignalsOfRecordPtr m_DataRecording_GetRTCSignalsOfRecord;
	PLibMCDriver_ScanLabOIEDataRecording_GetSensorSignalsOfRecordPtr m_DataRecording_GetSensorSignalsOfRecord;
	PLibMCDriver_ScanLabOIEDataRecording_GetAdditionalSignalsOfRecordPtr m_DataRecording_GetAdditionalSignalsOfRecord;
	PLibMCDriver_ScanLabOIEDataRecording_GetAllCoordinatesPtr m_DataRecording_GetAllCoordinates;
	PLibMCDriver_ScanLabOIEDataRecording_GetAllPacketNumbersPtr m_DataRecording_GetAllPacketNumbers;
	PLibMCDriver_ScanLabOIEDataRecording_GetAllMeasurementTagsPtr m_DataRecording_GetAllMeasurementTags;
	PLibMCDriver_ScanLabOIEDataRecording_GetAllRTCSignalsPtr m_DataRecording_GetAllRTCSignals;
	PLibMCDriver_ScanLabOIEDataRecording_GetAllSensorSignalsPtr m_DataRecording_GetAllSensorSignals;
	PLibMCDriver_ScanLabOIEDataRecording_GetAllAdditionalSignalsPtr m_DataRecording_GetAllAdditionalSignals;
	PLibMCDriver_ScanLabOIEDataRecording_AddPacketNumbersToDataTablePtr m_DataRecording_AddPacketNumbersToDataTable;
	PLibMCDriver_ScanLabOIEDataRecording_AddXCoordinatesToDataTablePtr m_DataRecording_AddXCoordinatesToDataTable;
	PLibMCDriver_ScanLabOIEDataRecording_AddYCoordinatesToDataTablePtr m_DataRecording_AddYCoordinatesToDataTable;
	PLibMCDriver_ScanLabOIEDataRecording_AddMeasurementTagsToDataTablePtr m_DataRecording_AddMeasurementTagsToDataTable;
	PLibMCDriver_ScanLabOIEDataRecording_AddRTCSignalsToDataTablePtr m_DataRecording_AddRTCSignalsToDataTable;
	PLibMCDriver_ScanLabOIEDataRecording_AddScaledRTCSignalsToDataTablePtr m_DataRecording_AddScaledRTCSignalsToDataTable;
	PLibMCDriver_ScanLabOIEDataRecording_AddSensorSignalsToDataTablePtr m_DataRecording_AddSensorSignalsToDataTable;
	PLibMCDriver_ScanLabOIEDataRecording_AddScaledSensorSignalsToDataTablePtr m_DataRecording_AddScaledSensorSignalsToDataTable;
	PLibMCDriver_ScanLabOIEDataRecording_AddAdditionalSignalsToDataTablePtr m_DataRecording_AddAdditionalSignalsToDataTable;
	PLibMCDriver_ScanLabOIEDataRecording_AddScaledAdditionalSignalsToDataTablePtr m_DataRecording_AddScaledAdditionalSignalsToDataTable;
	PLibMCDriver_ScanLabOIEOIEDevice_GetDeviceNamePtr m_OIEDevice_GetDeviceName;
	PLibMCDriver_ScanLabOIEOIEDevice_SetHostNamePtr m_OIEDevice_SetHostName;
	PLibMCDriver_ScanLabOIEOIEDevice_GetHostNamePtr m_OIEDevice_GetHostName;
	PLibMCDriver_ScanLabOIEOIEDevice_SetPortPtr m_OIEDevice_SetPort;
	PLibMCDriver_ScanLabOIEOIEDevice_GetPortPtr m_OIEDevice_GetPort;
	PLibMCDriver_ScanLabOIEOIEDevice_IsConnectedPtr m_OIEDevice_IsConnected;
	PLibMCDriver_ScanLabOIEOIEDevice_GetDeviceIDPtr m_OIEDevice_GetDeviceID;
	PLibMCDriver_ScanLabOIEOIEDevice_ConnectPtr m_OIEDevice_Connect;
	PLibMCDriver_ScanLabOIEOIEDevice_DisconnectPtr m_OIEDevice_Disconnect;
	PLibMCDriver_ScanLabOIEOIEDevice_RefreshAppListPtr m_OIEDevice_RefreshAppList;
	PLibMCDriver_ScanLabOIEOIEDevice_GetAppCountPtr m_OIEDevice_GetAppCount;
	PLibMCDriver_ScanLabOIEOIEDevice_GetAppNamePtr m_OIEDevice_GetAppName;
	PLibMCDriver_ScanLabOIEOIEDevice_GetAppVersionPtr m_OIEDevice_GetAppVersion;
	PLibMCDriver_ScanLabOIEOIEDevice_GetAppInfoPtr m_OIEDevice_GetAppInfo;
	PLibMCDriver_ScanLabOIEOIEDevice_StartAppByNamePtr m_OIEDevice_StartAppByName;
	PLibMCDriver_ScanLabOIEOIEDevice_StartAppByIndexPtr m_OIEDevice_StartAppByIndex;
	PLibMCDriver_ScanLabOIEOIEDevice_StartAppByMajorVersionPtr m_OIEDevice_StartAppByMajorVersion;
	PLibMCDriver_ScanLabOIEOIEDevice_StartAppByMinorVersionPtr m_OIEDevice_StartAppByMinorVersion;
	PLibMCDriver_ScanLabOIEOIEDevice_StopAppPtr m_OIEDevice_StopApp;
	PLibMCDriver_ScanLabOIEOIEDevice_AppIsRunningPtr m_OIEDevice_AppIsRunning;
	PLibMCDriver_ScanLabOIEOIEDevice_GetRunningAppPtr m_OIEDevice_GetRunningApp;
	PLibMCDriver_ScanLabOIEOIEDevice_InstallAppPtr m_OIEDevice_InstallApp;
	PLibMCDriver_ScanLabOIEOIEDevice_UninstallAppByNamePtr m_OIEDevice_UninstallAppByName;
	PLibMCDriver_ScanLabOIEOIEDevice_UninstallAppByIndexPtr m_OIEDevice_UninstallAppByIndex;
	PLibMCDriver_ScanLabOIEOIEDevice_UninstallAppByMajorVersionPtr m_OIEDevice_UninstallAppByMajorVersion;
	PLibMCDriver_ScanLabOIEOIEDevice_UninstallAppByMinorVersionPtr m_OIEDevice_UninstallAppByMinorVersion;
	PLibMCDriver_ScanLabOIEOIEDevice_RetrieveCurrentRecordingPtr m_OIEDevice_RetrieveCurrentRecording;
	PLibMCDriver_ScanLabOIEOIEDevice_ClearCurrentRecordingPtr m_OIEDevice_ClearCurrentRecording;
	PLibMCDriver_ScanLabOIEOIEDevice_LoadRecordingFromBuildPtr m_OIEDevice_LoadRecordingFromBuild;
	PLibMCDriver_ScanLabOIEDriver_ScanLab_OIE_GetDriverTypePtr m_Driver_ScanLab_OIE_GetDriverType;
	PLibMCDriver_ScanLabOIEDriver_ScanLab_OIE_SetDependencyResourceNamesPtr m_Driver_ScanLab_OIE_SetDependencyResourceNames;
	PLibMCDriver_ScanLabOIEDriver_ScanLab_OIE_SetOIE3ResourceNamesPtr m_Driver_ScanLab_OIE_SetOIE3ResourceNames;
	PLibMCDriver_ScanLabOIEDriver_ScanLab_OIE_InitializeSDKPtr m_Driver_ScanLab_OIE_InitializeSDK;
	PLibMCDriver_ScanLabOIEDriver_ScanLab_OIE_InitializeCustomSDKPtr m_Driver_ScanLab_OIE_InitializeCustomSDK;
	PLibMCDriver_ScanLabOIEDriver_ScanLab_OIE_AddDevicePtr m_Driver_ScanLab_OIE_AddDevice;
	PLibMCDriver_ScanLabOIEDriver_ScanLab_OIE_HasDevicePtr m_Driver_ScanLab_OIE_HasDevice;
	PLibMCDriver_ScanLabOIEDriver_ScanLab_OIE_FindDevicePtr m_Driver_ScanLab_OIE_FindDevice;
	PLibMCDriver_ScanLabOIEDriver_ScanLab_OIE_RemoveDevicePtr m_Driver_ScanLab_OIE_RemoveDevice;
	PLibMCDriver_ScanLabOIEDriver_ScanLab_OIE_RemoveDeviceByNamePtr m_Driver_ScanLab_OIE_RemoveDeviceByName;
	PLibMCDriver_ScanLabOIEDriver_ScanLab_OIE_ParseDeviceConfigurationPtr m_Driver_ScanLab_OIE_ParseDeviceConfiguration;
	PLibMCDriver_ScanLabOIEGetVersionPtr m_GetVersion;
	PLibMCDriver_ScanLabOIEGetLastErrorPtr m_GetLastError;
	PLibMCDriver_ScanLabOIEReleaseInstancePtr m_ReleaseInstance;
	PLibMCDriver_ScanLabOIEAcquireInstancePtr m_AcquireInstance;
	PLibMCDriver_ScanLabOIEInjectComponentPtr m_InjectComponent;
	PLibMCDriver_ScanLabOIEGetSymbolLookupMethodPtr m_GetSymbolLookupMethod;
	PLibMCDriver_ScanLabOIECreateDriverPtr m_CreateDriver;
} sLibMCDriver_ScanLabOIEDynamicWrapperTable;

#endif // __LIBMCDRIVER_SCANLABOIE_DYNAMICHEADER_CPPTYPES

