/*++

Copyright (C) 2023 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.8.0-develop.

Abstract: This is an autogenerated C++-Header file in order to allow an easy
 use of MC Driver cifX

Interface version: 2.0.0

*/

#ifndef __LIBMCDRIVER_CIFX_DYNAMICHEADER_CPPTYPES
#define __LIBMCDRIVER_CIFX_DYNAMICHEADER_CPPTYPES

#include "libmcdriver_cifx_types.hpp"

#include "libmcenv_types.hpp"


/*************************************************************************************************************************
 Class definition for Base
**************************************************************************************************************************/

/*************************************************************************************************************************
 Class definition for Driver
**************************************************************************************************************************/

/**
* Configures a driver with its specific configuration data.
*
* @param[in] pDriver - Driver instance.
* @param[in] pConfigurationString - Configuration data of driver.
* @return error code or 0 (success)
*/
typedef LibMCDriver_CifXResult (*PLibMCDriver_CifXDriver_ConfigurePtr) (LibMCDriver_CifX_Driver pDriver, const char * pConfigurationString);

/**
* returns the name identifier of the driver
*
* @param[in] pDriver - Driver instance.
* @param[in] nNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNameBuffer -  buffer of Name of the driver., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCDriver_CifXResult (*PLibMCDriver_CifXDriver_GetNamePtr) (LibMCDriver_CifX_Driver pDriver, const LibMCDriver_CifX_uint32 nNameBufferSize, LibMCDriver_CifX_uint32* pNameNeededChars, char * pNameBuffer);

/**
* returns the type identifier of the driver
*
* @param[in] pDriver - Driver instance.
* @param[in] nTypeBufferSize - size of the buffer (including trailing 0)
* @param[out] pTypeNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pTypeBuffer -  buffer of Type of the driver., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCDriver_CifXResult (*PLibMCDriver_CifXDriver_GetTypePtr) (LibMCDriver_CifX_Driver pDriver, const LibMCDriver_CifX_uint32 nTypeBufferSize, LibMCDriver_CifX_uint32* pTypeNeededChars, char * pTypeBuffer);

/**
* returns the version identifiers of the driver
*
* @param[in] pDriver - Driver instance.
* @param[out] pMajor - Major version.
* @param[out] pMinor - Minor version.
* @param[out] pMicro - Micro version.
* @param[in] nBuildBufferSize - size of the buffer (including trailing 0)
* @param[out] pBuildNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pBuildBuffer -  buffer of Build identifier., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCDriver_CifXResult (*PLibMCDriver_CifXDriver_GetVersionPtr) (LibMCDriver_CifX_Driver pDriver, LibMCDriver_CifX_uint32 * pMajor, LibMCDriver_CifX_uint32 * pMinor, LibMCDriver_CifX_uint32 * pMicro, const LibMCDriver_CifX_uint32 nBuildBufferSize, LibMCDriver_CifX_uint32* pBuildNeededChars, char * pBuildBuffer);

/**
* Updates the driver parameters in the driver environment. Might be called out of thread. Implementation MUST be able to handle parallel calls.
*
* @param[in] pDriver - Driver instance.
* @param[in] pDriverUpdateInstance - Status update instance.
* @return error code or 0 (success)
*/
typedef LibMCDriver_CifXResult (*PLibMCDriver_CifXDriver_QueryParametersPtr) (LibMCDriver_CifX_Driver pDriver, LibMCEnv_DriverStatusUpdateSession pDriverUpdateInstance);

/*************************************************************************************************************************
 Class definition for ChannelInformation
**************************************************************************************************************************/

/**
* Returns the name of the board that it is connected to.
*
* @param[in] pChannelInformation - ChannelInformation instance.
* @param[in] nBoardNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pBoardNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pBoardNameBuffer -  buffer of Board name., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCDriver_CifXResult (*PLibMCDriver_CifXChannelInformation_GetBoardNamePtr) (LibMCDriver_CifX_ChannelInformation pChannelInformation, const LibMCDriver_CifX_uint32 nBoardNameBufferSize, LibMCDriver_CifX_uint32* pBoardNameNeededChars, char * pBoardNameBuffer);

/**
* Returns the channel index of the board that it is connected to.
*
* @param[in] pChannelInformation - ChannelInformation instance.
* @param[out] pChannelIndex - Channel Index.
* @return error code or 0 (success)
*/
typedef LibMCDriver_CifXResult (*PLibMCDriver_CifXChannelInformation_GetChannelIndexPtr) (LibMCDriver_CifX_ChannelInformation pChannelInformation, LibMCDriver_CifX_uint32 * pChannelIndex);

/**
* Returns if the driver is connected and updates are being received.
*
* @param[in] pChannelInformation - ChannelInformation instance.
* @param[out] pChannelIsConnected - The channel is connected.
* @return error code or 0 (success)
*/
typedef LibMCDriver_CifXResult (*PLibMCDriver_CifXChannelInformation_IsConnectedPtr) (LibMCDriver_CifX_ChannelInformation pChannelInformation, bool * pChannelIsConnected);

/**
* Returns how many milliseconds ago the last channel update was received.
*
* @param[in] pChannelInformation - ChannelInformation instance.
* @param[out] pMillisecondsSinceLastUpdate - Returns 0, if no update has ever been received or channel is not connected.
* @return error code or 0 (success)
*/
typedef LibMCDriver_CifXResult (*PLibMCDriver_CifXChannelInformation_GetMillisecondsSinceLastUpdatePtr) (LibMCDriver_CifX_ChannelInformation pChannelInformation, LibMCDriver_CifX_uint32 * pMillisecondsSinceLastUpdate);

/**
* Returns connection statistics for this channel.
*
* @param[in] pChannelInformation - ChannelInformation instance.
* @param[out] pNumberOfSucceededUpdates - Returns number of successful state updates.
* @param[out] pNumberOfUpdateErrors - Returns number of update errors.
* @param[out] pMinimumUpdateDurationInMs - Returns minium update duration in milliseconds.
* @param[out] pMaximumUpdateDurationInMs - Returns maximum update duration in milliseconds.
* @param[out] pAverageUpdateDurationInMs - Returns average update duration in milliseconds.
* @param[out] pUpdateDurationVarianceInMs - Returns the variance of update durations in milliseconds.
* @return error code or 0 (success)
*/
typedef LibMCDriver_CifXResult (*PLibMCDriver_CifXChannelInformation_GetConnectionStatisticsPtr) (LibMCDriver_CifX_ChannelInformation pChannelInformation, LibMCDriver_CifX_uint32 * pNumberOfSucceededUpdates, LibMCDriver_CifX_uint32 * pNumberOfUpdateErrors, LibMCDriver_CifX_double * pMinimumUpdateDurationInMs, LibMCDriver_CifX_double * pMaximumUpdateDurationInMs, LibMCDriver_CifX_double * pAverageUpdateDurationInMs, LibMCDriver_CifX_double * pUpdateDurationVarianceInMs);

/**
* Returns if a value exists in this channel.
*
* @param[in] pChannelInformation - ChannelInformation instance.
* @param[in] pName - Name of value. Call fails if value does not exist.
* @param[out] pExists - Returns if a value exist.
* @return error code or 0 (success)
*/
typedef LibMCDriver_CifXResult (*PLibMCDriver_CifXChannelInformation_ValueExistsPtr) (LibMCDriver_CifX_ChannelInformation pChannelInformation, const char * pName, bool * pExists);

/**
* Returns the type of a value. Fails if value does not exist in this channel.
*
* @param[in] pChannelInformation - ChannelInformation instance.
* @param[in] pName - Name of value. Call fails if value does not exist.
* @param[out] pValueType - Type of value.
* @param[out] pIsInput - Returns true if value is an input value.
* @param[out] pIsOutput - Returns true if value is an output value.
* @return error code or 0 (success)
*/
typedef LibMCDriver_CifXResult (*PLibMCDriver_CifXChannelInformation_GetValueTypePtr) (LibMCDriver_CifX_ChannelInformation pChannelInformation, const char * pName, LibMCDriver_CifX::eValueType * pValueType, bool * pIsInput, bool * pIsOutput);

/**
* Returns the possible range of an integer value.
*
* @param[in] pChannelInformation - ChannelInformation instance.
* @param[in] pName - Name of value. Call fails if value does not exist in this channel.
* @param[out] pMinValue - Minimum integer value this variable can hold. Returns 0 if variable is of float type.
* @param[out] pMaxValue - Maximum integer value this variable can hold. Returns 0 if variable is of float type.
* @return error code or 0 (success)
*/
typedef LibMCDriver_CifXResult (*PLibMCDriver_CifXChannelInformation_GetIntegerValueRangePtr) (LibMCDriver_CifX_ChannelInformation pChannelInformation, const char * pName, LibMCDriver_CifX_int64 * pMinValue, LibMCDriver_CifX_int64 * pMaxValue);

/**
* Returns number of input variables on this channel.
*
* @param[in] pChannelInformation - ChannelInformation instance.
* @param[out] pCount - Number of input variables.
* @return error code or 0 (success)
*/
typedef LibMCDriver_CifXResult (*PLibMCDriver_CifXChannelInformation_GetInputValueCountPtr) (LibMCDriver_CifX_ChannelInformation pChannelInformation, LibMCDriver_CifX_uint32 * pCount);

/**
* Returns the name of an input variable on this channel.
*
* @param[in] pChannelInformation - ChannelInformation instance.
* @param[in] nIndex - Index of input variable. 0-based. Fails if larger or equal than the count.
* @param[in] nNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNameBuffer -  buffer of Name of value., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCDriver_CifXResult (*PLibMCDriver_CifXChannelInformation_GetInputValueNamePtr) (LibMCDriver_CifX_ChannelInformation pChannelInformation, LibMCDriver_CifX_uint32 nIndex, const LibMCDriver_CifX_uint32 nNameBufferSize, LibMCDriver_CifX_uint32* pNameNeededChars, char * pNameBuffer);

/**
* Returns number of output variables on this channel.
*
* @param[in] pChannelInformation - ChannelInformation instance.
* @param[out] pCount - Number of input variables.
* @return error code or 0 (success)
*/
typedef LibMCDriver_CifXResult (*PLibMCDriver_CifXChannelInformation_GetOutputValueCountPtr) (LibMCDriver_CifX_ChannelInformation pChannelInformation, LibMCDriver_CifX_uint32 * pCount);

/**
* Returns the name of an output variable on this channel.
*
* @param[in] pChannelInformation - ChannelInformation instance.
* @param[in] nIndex - Index of output variable. 0-based. Fails if larger or equal than the count.
* @param[in] nNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNameBuffer -  buffer of Name of value., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCDriver_CifXResult (*PLibMCDriver_CifXChannelInformation_GetOutputValueNamePtr) (LibMCDriver_CifX_ChannelInformation pChannelInformation, LibMCDriver_CifX_uint32 nIndex, const LibMCDriver_CifX_uint32 nNameBufferSize, LibMCDriver_CifX_uint32* pNameNeededChars, char * pNameBuffer);

/*************************************************************************************************************************
 Class definition for Driver_CifX
**************************************************************************************************************************/

/**
* Turns the driver into a simulation mode.
*
* @param[in] pDriver_CifX - Driver_CifX instance.
* @return error code or 0 (success)
*/
typedef LibMCDriver_CifXResult (*PLibMCDriver_CifXDriver_CifX_SetToSimulationModePtr) (LibMCDriver_CifX_Driver_CifX pDriver_CifX);

/**
* Returns if the driver is in simulation mode.
*
* @param[in] pDriver_CifX - Driver_CifX instance.
* @param[out] pSimulationModeEnabled - Flag if driver is in simulation mode.
* @return error code or 0 (success)
*/
typedef LibMCDriver_CifXResult (*PLibMCDriver_CifXDriver_CifX_IsSimulationModePtr) (LibMCDriver_CifX_Driver_CifX pDriver_CifX, bool * pSimulationModeEnabled);

/**
* Sets the machine resource name of the cifX SDK to load. MUST be called before Connect or it has no effect.
*
* @param[in] pDriver_CifX - Driver_CifX instance.
* @param[in] pResourceName - Resource name of core machine package. Empty means standard naming applies.
* @return error code or 0 (success)
*/
typedef LibMCDriver_CifXResult (*PLibMCDriver_CifXDriver_CifX_SetCustomSDKResourcePtr) (LibMCDriver_CifX_Driver_CifX pDriver_CifX, const char * pResourceName);

/**
* Returns the number of configured channels.
*
* @param[in] pDriver_CifX - Driver_CifX instance.
* @param[out] pChannelCount - Returns the number of channels.
* @return error code or 0 (success)
*/
typedef LibMCDriver_CifXResult (*PLibMCDriver_CifXDriver_CifX_GetChannelCountPtr) (LibMCDriver_CifX_Driver_CifX pDriver_CifX, LibMCDriver_CifX_uint32 * pChannelCount);

/**
* Returns the channel information by index.
*
* @param[in] pDriver_CifX - Driver_CifX instance.
* @param[in] nChannelIndex - Index of the board. MUST be between 0 and GetBoardCount - 1.
* @param[out] pChannelInformationInstance - Channel Information Instance.
* @return error code or 0 (success)
*/
typedef LibMCDriver_CifXResult (*PLibMCDriver_CifXDriver_CifX_GetChannelInformationPtr) (LibMCDriver_CifX_Driver_CifX pDriver_CifX, LibMCDriver_CifX_uint32 nChannelIndex, LibMCDriver_CifX_ChannelInformation * pChannelInformationInstance);

/**
* Connects to a cifX board by configuration.
*
* @param[in] pDriver_CifX - Driver_CifX instance.
* @return error code or 0 (success)
*/
typedef LibMCDriver_CifXResult (*PLibMCDriver_CifXDriver_CifX_ConnectPtr) (LibMCDriver_CifX_Driver_CifX pDriver_CifX);

/**
* Disconnects from cifX board.
*
* @param[in] pDriver_CifX - Driver_CifX instance.
* @return error code or 0 (success)
*/
typedef LibMCDriver_CifXResult (*PLibMCDriver_CifXDriver_CifX_DisconnectPtr) (LibMCDriver_CifX_Driver_CifX pDriver_CifX);

/**
* Reconnects to the cifX board.
*
* @param[in] pDriver_CifX - Driver_CifX instance.
* @return error code or 0 (success)
*/
typedef LibMCDriver_CifXResult (*PLibMCDriver_CifXDriver_CifX_ReconnectPtr) (LibMCDriver_CifX_Driver_CifX pDriver_CifX);

/**
* Returns if the driver is connected.
*
* @param[in] pDriver_CifX - Driver_CifX instance.
* @param[out] pBoardsAreConnected - All selected boards are connected.
* @return error code or 0 (success)
*/
typedef LibMCDriver_CifXResult (*PLibMCDriver_CifXDriver_CifX_IsConnectedPtr) (LibMCDriver_CifX_Driver_CifX pDriver_CifX, bool * pBoardsAreConnected);

/**
* Returns if a value exists.
*
* @param[in] pDriver_CifX - Driver_CifX instance.
* @param[in] pName - Name of value. Call fails if value does not exist.
* @param[out] pExists - Returns if a value exist.
* @return error code or 0 (success)
*/
typedef LibMCDriver_CifXResult (*PLibMCDriver_CifXDriver_CifX_ValueExistsPtr) (LibMCDriver_CifX_Driver_CifX pDriver_CifX, const char * pName, bool * pExists);

/**
* Returns the type of a value. Fails if value does not exist.
*
* @param[in] pDriver_CifX - Driver_CifX instance.
* @param[in] pName - Name of value. Call fails if value does not exist.
* @param[out] pValueType - Type of value.
* @param[out] pIsInput - Returns true if value is an input value.
* @param[out] pIsOutput - Returns true if value is an output value.
* @return error code or 0 (success)
*/
typedef LibMCDriver_CifXResult (*PLibMCDriver_CifXDriver_CifX_GetValueTypePtr) (LibMCDriver_CifX_Driver_CifX pDriver_CifX, const char * pName, LibMCDriver_CifX::eValueType * pValueType, bool * pIsInput, bool * pIsOutput);

/**
* Returns the possible range of an integer value.
*
* @param[in] pDriver_CifX - Driver_CifX instance.
* @param[in] pName - Name of value. Call fails if value does not exist.
* @param[out] pMinValue - Minimum integer value this variable can hold. Returns 0 if variable is of float type.
* @param[out] pMaxValue - Maximum integer value this variable can hold. Returns 0 if variable is of float type.
* @return error code or 0 (success)
*/
typedef LibMCDriver_CifXResult (*PLibMCDriver_CifXDriver_CifX_GetIntegerValueRangePtr) (LibMCDriver_CifX_Driver_CifX pDriver_CifX, const char * pName, LibMCDriver_CifX_int64 * pMinValue, LibMCDriver_CifX_int64 * pMaxValue);

/**
* Writes an output integer value. Value MUST be within the bit-range of the value type defined by the configuration.
*
* @param[in] pDriver_CifX - Driver_CifX instance.
* @param[in] pName - Name of value. Call fails if value does not exist.
* @param[in] nValue - Value to set. The named value MUST be of type integer or boolean. If value is of boolean type, 0 means false and every other value means true.
* @param[in] bClampToRange - If Integer value is outside of the permissible range, should they be clamped the value to the boundaries (ClampToRange is true) or an error raised (ClampToRange is false).
* @param[in] nTimeOutInMs - If Timeout is larger than 0, the call waits until the end point has acknowledged that the new value has been set. If timeout is 0, the call returns immediately, even if the end point might not have changed the value yet.
* @return error code or 0 (success)
*/
typedef LibMCDriver_CifXResult (*PLibMCDriver_CifXDriver_CifX_WriteIntegerValuePtr) (LibMCDriver_CifX_Driver_CifX pDriver_CifX, const char * pName, LibMCDriver_CifX_int64 nValue, bool bClampToRange, LibMCDriver_CifX_uint32 nTimeOutInMs);

/**
* Writes an output boolean value.
*
* @param[in] pDriver_CifX - Driver_CifX instance.
* @param[in] pName - Name of value. Call fails if value does not exist.
* @param[in] bValue - Value to set. The named value MUST be of type boolean.
* @param[in] nTimeOutInMs - If Timeout is larger than 0, the call waits until the end point has acknowledged that the new value has been set. If timeout is 0, the call returns immediately, even if the end point might not have changed the value yet.
* @return error code or 0 (success)
*/
typedef LibMCDriver_CifXResult (*PLibMCDriver_CifXDriver_CifX_WriteBoolValuePtr) (LibMCDriver_CifX_Driver_CifX pDriver_CifX, const char * pName, bool bValue, LibMCDriver_CifX_uint32 nTimeOutInMs);

/**
* Writes an output float value. Accuracy will be determined by the bit-range of the value defined by the configuration.
*
* @param[in] pDriver_CifX - Driver_CifX instance.
* @param[in] pName - Name of value. Call fails if value does not exist.
* @param[in] dValue - Value to set. The named value MUST be of type double or float.
* @param[in] nTimeOutInMs - If Timeout is larger than 0, the call waits until the end point has acknowledged that the new value has been set. If timeout is 0, the call returns immediately, even if the end point might not have changed the value yet.
* @return error code or 0 (success)
*/
typedef LibMCDriver_CifXResult (*PLibMCDriver_CifXDriver_CifX_WriteDoubleValuePtr) (LibMCDriver_CifX_Driver_CifX pDriver_CifX, const char * pName, LibMCDriver_CifX_double dValue, LibMCDriver_CifX_uint32 nTimeOutInMs);

/**
* Reads an input integer value.
*
* @param[in] pDriver_CifX - Driver_CifX instance.
* @param[in] pName - Name of value. Call fails if value does not exist.
* @param[out] pValue - Value that was read.
* @return error code or 0 (success)
*/
typedef LibMCDriver_CifXResult (*PLibMCDriver_CifXDriver_CifX_ReadIntegerValuePtr) (LibMCDriver_CifX_Driver_CifX pDriver_CifX, const char * pName, LibMCDriver_CifX_int64 * pValue);

/**
* Reads an bool integer value.
*
* @param[in] pDriver_CifX - Driver_CifX instance.
* @param[in] pName - Name of value. Call fails if value does not exist.
* @param[out] pValue - Value that was read.
* @return error code or 0 (success)
*/
typedef LibMCDriver_CifXResult (*PLibMCDriver_CifXDriver_CifX_ReadBoolValuePtr) (LibMCDriver_CifX_Driver_CifX pDriver_CifX, const char * pName, bool * pValue);

/**
* Reads an input float value.
*
* @param[in] pDriver_CifX - Driver_CifX instance.
* @param[in] pName - Name of value. Call fails if value does not exist.
* @param[out] pValue - Value that was read.
* @return error code or 0 (success)
*/
typedef LibMCDriver_CifXResult (*PLibMCDriver_CifXDriver_CifX_ReadDoubleValuePtr) (LibMCDriver_CifX_Driver_CifX pDriver_CifX, const char * pName, LibMCDriver_CifX_double * pValue);

/*************************************************************************************************************************
 Global functions
**************************************************************************************************************************/

/**
* retrieves the binary version of this library.
*
* @param[out] pMajor - returns the major version of this library
* @param[out] pMinor - returns the minor version of this library
* @param[out] pMicro - returns the micro version of this library
* @return error code or 0 (success)
*/
typedef LibMCDriver_CifXResult (*PLibMCDriver_CifXGetVersionPtr) (LibMCDriver_CifX_uint32 * pMajor, LibMCDriver_CifX_uint32 * pMinor, LibMCDriver_CifX_uint32 * pMicro);

/**
* Returns the last error recorded on this object
*
* @param[in] pInstance - Instance Handle
* @param[in] nErrorMessageBufferSize - size of the buffer (including trailing 0)
* @param[out] pErrorMessageNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pErrorMessageBuffer -  buffer of Message of the last error, may be NULL
* @param[out] pHasError - Is there a last error to query
* @return error code or 0 (success)
*/
typedef LibMCDriver_CifXResult (*PLibMCDriver_CifXGetLastErrorPtr) (LibMCDriver_CifX_Base pInstance, const LibMCDriver_CifX_uint32 nErrorMessageBufferSize, LibMCDriver_CifX_uint32* pErrorMessageNeededChars, char * pErrorMessageBuffer, bool * pHasError);

/**
* Releases shared ownership of an Instance
*
* @param[in] pInstance - Instance Handle
* @return error code or 0 (success)
*/
typedef LibMCDriver_CifXResult (*PLibMCDriver_CifXReleaseInstancePtr) (LibMCDriver_CifX_Base pInstance);

/**
* Acquires shared ownership of an Instance
*
* @param[in] pInstance - Instance Handle
* @return error code or 0 (success)
*/
typedef LibMCDriver_CifXResult (*PLibMCDriver_CifXAcquireInstancePtr) (LibMCDriver_CifX_Base pInstance);

/**
* Injects an imported component for usage within this component
*
* @param[in] pNameSpace - NameSpace of the injected component
* @param[in] pSymbolAddressMethod - Address of the SymbolAddressMethod of the injected component
* @return error code or 0 (success)
*/
typedef LibMCDriver_CifXResult (*PLibMCDriver_CifXInjectComponentPtr) (const char * pNameSpace, LibMCDriver_CifX_pvoid pSymbolAddressMethod);

/**
* Returns the address of the SymbolLookupMethod
*
* @param[out] pSymbolLookupMethod - Address of the SymbolAddressMethod
* @return error code or 0 (success)
*/
typedef LibMCDriver_CifXResult (*PLibMCDriver_CifXGetSymbolLookupMethodPtr) (LibMCDriver_CifX_pvoid * pSymbolLookupMethod);

/**
* Creates a driver instance with a specific name.
*
* @param[in] pName - Name of driver to be created.
* @param[in] pType - Type of driver to be created.
* @param[in] pDriverEnvironment - Environment of this driver.
* @param[out] pInstance - New Driver instance
* @return error code or 0 (success)
*/
typedef LibMCDriver_CifXResult (*PLibMCDriver_CifXCreateDriverPtr) (const char * pName, const char * pType, LibMCEnv_DriverEnvironment pDriverEnvironment, LibMCDriver_CifX_Driver * pInstance);

/*************************************************************************************************************************
 Function Table Structure
**************************************************************************************************************************/

typedef struct {
	void * m_LibraryHandle;
	PLibMCDriver_CifXDriver_ConfigurePtr m_Driver_Configure;
	PLibMCDriver_CifXDriver_GetNamePtr m_Driver_GetName;
	PLibMCDriver_CifXDriver_GetTypePtr m_Driver_GetType;
	PLibMCDriver_CifXDriver_GetVersionPtr m_Driver_GetVersion;
	PLibMCDriver_CifXDriver_QueryParametersPtr m_Driver_QueryParameters;
	PLibMCDriver_CifXChannelInformation_GetBoardNamePtr m_ChannelInformation_GetBoardName;
	PLibMCDriver_CifXChannelInformation_GetChannelIndexPtr m_ChannelInformation_GetChannelIndex;
	PLibMCDriver_CifXChannelInformation_IsConnectedPtr m_ChannelInformation_IsConnected;
	PLibMCDriver_CifXChannelInformation_GetMillisecondsSinceLastUpdatePtr m_ChannelInformation_GetMillisecondsSinceLastUpdate;
	PLibMCDriver_CifXChannelInformation_GetConnectionStatisticsPtr m_ChannelInformation_GetConnectionStatistics;
	PLibMCDriver_CifXChannelInformation_ValueExistsPtr m_ChannelInformation_ValueExists;
	PLibMCDriver_CifXChannelInformation_GetValueTypePtr m_ChannelInformation_GetValueType;
	PLibMCDriver_CifXChannelInformation_GetIntegerValueRangePtr m_ChannelInformation_GetIntegerValueRange;
	PLibMCDriver_CifXChannelInformation_GetInputValueCountPtr m_ChannelInformation_GetInputValueCount;
	PLibMCDriver_CifXChannelInformation_GetInputValueNamePtr m_ChannelInformation_GetInputValueName;
	PLibMCDriver_CifXChannelInformation_GetOutputValueCountPtr m_ChannelInformation_GetOutputValueCount;
	PLibMCDriver_CifXChannelInformation_GetOutputValueNamePtr m_ChannelInformation_GetOutputValueName;
	PLibMCDriver_CifXDriver_CifX_SetToSimulationModePtr m_Driver_CifX_SetToSimulationMode;
	PLibMCDriver_CifXDriver_CifX_IsSimulationModePtr m_Driver_CifX_IsSimulationMode;
	PLibMCDriver_CifXDriver_CifX_SetCustomSDKResourcePtr m_Driver_CifX_SetCustomSDKResource;
	PLibMCDriver_CifXDriver_CifX_GetChannelCountPtr m_Driver_CifX_GetChannelCount;
	PLibMCDriver_CifXDriver_CifX_GetChannelInformationPtr m_Driver_CifX_GetChannelInformation;
	PLibMCDriver_CifXDriver_CifX_ConnectPtr m_Driver_CifX_Connect;
	PLibMCDriver_CifXDriver_CifX_DisconnectPtr m_Driver_CifX_Disconnect;
	PLibMCDriver_CifXDriver_CifX_ReconnectPtr m_Driver_CifX_Reconnect;
	PLibMCDriver_CifXDriver_CifX_IsConnectedPtr m_Driver_CifX_IsConnected;
	PLibMCDriver_CifXDriver_CifX_ValueExistsPtr m_Driver_CifX_ValueExists;
	PLibMCDriver_CifXDriver_CifX_GetValueTypePtr m_Driver_CifX_GetValueType;
	PLibMCDriver_CifXDriver_CifX_GetIntegerValueRangePtr m_Driver_CifX_GetIntegerValueRange;
	PLibMCDriver_CifXDriver_CifX_WriteIntegerValuePtr m_Driver_CifX_WriteIntegerValue;
	PLibMCDriver_CifXDriver_CifX_WriteBoolValuePtr m_Driver_CifX_WriteBoolValue;
	PLibMCDriver_CifXDriver_CifX_WriteDoubleValuePtr m_Driver_CifX_WriteDoubleValue;
	PLibMCDriver_CifXDriver_CifX_ReadIntegerValuePtr m_Driver_CifX_ReadIntegerValue;
	PLibMCDriver_CifXDriver_CifX_ReadBoolValuePtr m_Driver_CifX_ReadBoolValue;
	PLibMCDriver_CifXDriver_CifX_ReadDoubleValuePtr m_Driver_CifX_ReadDoubleValue;
	PLibMCDriver_CifXGetVersionPtr m_GetVersion;
	PLibMCDriver_CifXGetLastErrorPtr m_GetLastError;
	PLibMCDriver_CifXReleaseInstancePtr m_ReleaseInstance;
	PLibMCDriver_CifXAcquireInstancePtr m_AcquireInstance;
	PLibMCDriver_CifXInjectComponentPtr m_InjectComponent;
	PLibMCDriver_CifXGetSymbolLookupMethodPtr m_GetSymbolLookupMethod;
	PLibMCDriver_CifXCreateDriverPtr m_CreateDriver;
} sLibMCDriver_CifXDynamicWrapperTable;

#endif // __LIBMCDRIVER_CIFX_DYNAMICHEADER_CPPTYPES

