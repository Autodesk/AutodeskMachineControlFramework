/*++

Copyright (C) 2023 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.8.0-develop.

Abstract: This is an autogenerated C++-Header file in order to allow an easy
 use of MC Driver cifX

Interface version: 2.0.0

*/

#ifndef __LIBMCDRIVER_CIFX_CPPHEADER_DYNAMIC_CPP
#define __LIBMCDRIVER_CIFX_CPPHEADER_DYNAMIC_CPP

#include "libmcdriver_cifx_types.hpp"
#include "libmcdriver_cifx_dynamic.h"

#include "libmcenv_dynamic.hpp"

#ifdef _WIN32
#include <windows.h>
#else // _WIN32
#include <dlfcn.h>
#endif // _WIN32
#include <string>
#include <memory>
#include <vector>
#include <exception>

namespace LibMCDriver_CifX {

/*************************************************************************************************************************
 Forward Declaration of all classes
**************************************************************************************************************************/
class CWrapper;
class CBase;
class CDriver;
class CChannelInformation;
class CDriver_CifX;

/*************************************************************************************************************************
 Declaration of deprecated class types
**************************************************************************************************************************/
typedef CWrapper CLibMCDriver_CifXWrapper;
typedef CBase CLibMCDriver_CifXBase;
typedef CDriver CLibMCDriver_CifXDriver;
typedef CChannelInformation CLibMCDriver_CifXChannelInformation;
typedef CDriver_CifX CLibMCDriver_CifXDriver_CifX;

/*************************************************************************************************************************
 Declaration of shared pointer types
**************************************************************************************************************************/
typedef std::shared_ptr<CWrapper> PWrapper;
typedef std::shared_ptr<CBase> PBase;
typedef std::shared_ptr<CDriver> PDriver;
typedef std::shared_ptr<CChannelInformation> PChannelInformation;
typedef std::shared_ptr<CDriver_CifX> PDriver_CifX;

/*************************************************************************************************************************
 Declaration of deprecated shared pointer types
**************************************************************************************************************************/
typedef PWrapper PLibMCDriver_CifXWrapper;
typedef PBase PLibMCDriver_CifXBase;
typedef PDriver PLibMCDriver_CifXDriver;
typedef PChannelInformation PLibMCDriver_CifXChannelInformation;
typedef PDriver_CifX PLibMCDriver_CifXDriver_CifX;


/*************************************************************************************************************************
 classParam Definition
**************************************************************************************************************************/

template<class T> class classParam {
private:
	const T* m_ptr;

public:
	classParam(const T* ptr)
		: m_ptr (ptr)
	{
	}

	classParam(std::shared_ptr <T> sharedPtr)
		: m_ptr (sharedPtr.get())
	{
	}

	LibMCDriver_CifXHandle GetHandle()
	{
		if (m_ptr != nullptr)
			return m_ptr->handle();
		return nullptr;
	}
};

/*************************************************************************************************************************
 Class ELibMCDriver_CifXException 
**************************************************************************************************************************/
class ELibMCDriver_CifXException : public std::exception {
protected:
	/**
	* Error code for the Exception.
	*/
	LibMCDriver_CifXResult m_errorCode;
	/**
	* Error message for the Exception.
	*/
	std::string m_errorMessage;
	std::string m_originalErrorMessage;

public:
	/**
	* Exception Constructor.
	*/
	ELibMCDriver_CifXException(LibMCDriver_CifXResult errorCode, const std::string & sErrorMessage)
		: m_errorCode(errorCode), m_originalErrorMessage(sErrorMessage)
	{
		m_errorMessage = buildErrorMessage();
	}

	/**
	* Returns error code
	*/
	LibMCDriver_CifXResult getErrorCode() const noexcept
	{
		return m_errorCode;
	}

	/**
	* Returns error message
	*/
	const char* what() const noexcept
	{
		return m_errorMessage.c_str();
	}

	const char* getErrorMessage() const noexcept
	{
		return m_originalErrorMessage.c_str();
	}

	const char* getErrorName() const noexcept
	{
		switch(getErrorCode()) {
			case LIBMCDRIVER_CIFX_SUCCESS: return "SUCCESS";
			case LIBMCDRIVER_CIFX_ERROR_NOTIMPLEMENTED: return "NOTIMPLEMENTED";
			case LIBMCDRIVER_CIFX_ERROR_INVALIDPARAM: return "INVALIDPARAM";
			case LIBMCDRIVER_CIFX_ERROR_INVALIDCAST: return "INVALIDCAST";
			case LIBMCDRIVER_CIFX_ERROR_BUFFERTOOSMALL: return "BUFFERTOOSMALL";
			case LIBMCDRIVER_CIFX_ERROR_GENERICEXCEPTION: return "GENERICEXCEPTION";
			case LIBMCDRIVER_CIFX_ERROR_COULDNOTLOADLIBRARY: return "COULDNOTLOADLIBRARY";
			case LIBMCDRIVER_CIFX_ERROR_COULDNOTFINDLIBRARYEXPORT: return "COULDNOTFINDLIBRARYEXPORT";
			case LIBMCDRIVER_CIFX_ERROR_INCOMPATIBLEBINARYVERSION: return "INCOMPATIBLEBINARYVERSION";
			case LIBMCDRIVER_CIFX_ERROR_DRIVERERROR: return "DRIVERERROR";
			case LIBMCDRIVER_CIFX_ERROR_DRIVERNOTINITIALISED: return "DRIVERNOTINITIALISED";
			case LIBMCDRIVER_CIFX_ERROR_DRIVERNOTCONNECTED: return "DRIVERNOTCONNECTED";
			case LIBMCDRIVER_CIFX_ERROR_DRIVERTYPENOTFOUND: return "DRIVERTYPENOTFOUND";
			case LIBMCDRIVER_CIFX_ERROR_SDKALREADYLOADED: return "SDKALREADYLOADED";
			case LIBMCDRIVER_CIFX_ERROR_INVALIDSDKRESOURCE: return "INVALIDSDKRESOURCE";
			case LIBMCDRIVER_CIFX_ERROR_OUTPUTVALUENOTFOUND: return "OUTPUTVALUENOTFOUND";
			case LIBMCDRIVER_CIFX_ERROR_INPUTVALUENOTFOUND: return "INPUTVALUENOTFOUND";
			case LIBMCDRIVER_CIFX_ERROR_VALUENOTFOUND: return "VALUENOTFOUND";
			case LIBMCDRIVER_CIFX_ERROR_INVALIDDRIVERPROTOCOL: return "INVALIDDRIVERPROTOCOL";
			case LIBMCDRIVER_CIFX_ERROR_COULDNOTPARSEDRIVERPROTOCOL: return "COULDNOTPARSEDRIVERPROTOCOL";
			case LIBMCDRIVER_CIFX_ERROR_NOVERSIONDEFINITION: return "NOVERSIONDEFINITION";
			case LIBMCDRIVER_CIFX_ERROR_NOMAJORVERSION: return "NOMAJORVERSION";
			case LIBMCDRIVER_CIFX_ERROR_NOMINORVERSION: return "NOMINORVERSION";
			case LIBMCDRIVER_CIFX_ERROR_NOPATCHVERSION: return "NOPATCHVERSION";
			case LIBMCDRIVER_CIFX_ERROR_NOBOARDATTRIBUTE: return "NOBOARDATTRIBUTE";
			case LIBMCDRIVER_CIFX_ERROR_NOCHANNELINDEXATTRIBUTE: return "NOCHANNELINDEXATTRIBUTE";
			case LIBMCDRIVER_CIFX_ERROR_INVALIDCHANNELINDEXATTRIBUTE: return "INVALIDCHANNELINDEXATTRIBUTE";
			case LIBMCDRIVER_CIFX_ERROR_NOINPUTIOSIZEATTRIBUTE: return "NOINPUTIOSIZEATTRIBUTE";
			case LIBMCDRIVER_CIFX_ERROR_INVALIDINPUTIOSIZEATTRIBUTE: return "INVALIDINPUTIOSIZEATTRIBUTE";
			case LIBMCDRIVER_CIFX_ERROR_NOOUTPUTIOSIZEATTRIBUTE: return "NOOUTPUTIOSIZEATTRIBUTE";
			case LIBMCDRIVER_CIFX_ERROR_INVALIDOUTPUTIOSIZEATTRIBUTE: return "INVALIDOUTPUTIOSIZEATTRIBUTE";
			case LIBMCDRIVER_CIFX_ERROR_MISSINGADDRESSATTRIBUTE: return "MISSINGADDRESSATTRIBUTE";
			case LIBMCDRIVER_CIFX_ERROR_INVALIDADDRESSATTRIBUTE: return "INVALIDADDRESSATTRIBUTE";
			case LIBMCDRIVER_CIFX_ERROR_DUPLICATEINPUTIO: return "DUPLICATEINPUTIO";
			case LIBMCDRIVER_CIFX_ERROR_DUPLICATEOUTPUTIO: return "DUPLICATEOUTPUTIO";
			case LIBMCDRIVER_CIFX_ERROR_INVALIDHOSTSTATETIMEOUT: return "INVALIDHOSTSTATETIMEOUT";
			case LIBMCDRIVER_CIFX_ERROR_INVALIDBUSSTATETIMEOUT: return "INVALIDBUSSTATETIMEOUT";
			case LIBMCDRIVER_CIFX_ERROR_CHANNELALREADYOPEN: return "CHANNELALREADYOPEN";
			case LIBMCDRIVER_CIFX_ERROR_UNKNOWNEXCEPTION: return "UNKNOWNEXCEPTION";
			case LIBMCDRIVER_CIFX_ERROR_INVALIDADDRESSREAD: return "INVALIDADDRESSREAD";
			case LIBMCDRIVER_CIFX_ERROR_INVALIDADDRESSREADBIT: return "INVALIDADDRESSREADBIT";
			case LIBMCDRIVER_CIFX_ERROR_INVALIDADDRESSWRITE: return "INVALIDADDRESSWRITE";
			case LIBMCDRIVER_CIFX_ERROR_INVALIDADDRESSWRITEBIT: return "INVALIDADDRESSWRITEBIT";
			case LIBMCDRIVER_CIFX_ERROR_INVALIDBITINDEX: return "INVALIDBITINDEX";
			case LIBMCDRIVER_CIFX_ERROR_INVALIDBOOLPARAMETERCAST: return "INVALIDBOOLPARAMETERCAST";
			case LIBMCDRIVER_CIFX_ERROR_INVALIDNAMEATTRIBUTE: return "INVALIDNAMEATTRIBUTE";
			case LIBMCDRIVER_CIFX_ERROR_INVALIDCHANNELINDEX: return "INVALIDCHANNELINDEX";
			case LIBMCDRIVER_CIFX_ERROR_INVALIDINPUTINDEX: return "INVALIDINPUTINDEX";
			case LIBMCDRIVER_CIFX_ERROR_INVALIDOUTPUTINDEX: return "INVALIDOUTPUTINDEX";
			case LIBMCDRIVER_CIFX_ERROR_NOCONFIGURATIONSCHEMA: return "NOCONFIGURATIONSCHEMA";
			case LIBMCDRIVER_CIFX_ERROR_INVALIDCONFIGURATIONSCHEMA: return "INVALIDCONFIGURATIONSCHEMA";
			case LIBMCDRIVER_CIFX_ERROR_INVALIDPARAMETERTYPE: return "INVALIDPARAMETERTYPE";
			case LIBMCDRIVER_CIFX_ERROR_INVALIDENDIANESSATTRIBUTE: return "INVALIDENDIANESSATTRIBUTE";
		}
		return "UNKNOWN";
	}

	const char* getErrorDescription() const noexcept
	{
		switch(getErrorCode()) {
			case LIBMCDRIVER_CIFX_SUCCESS: return "success";
			case LIBMCDRIVER_CIFX_ERROR_NOTIMPLEMENTED: return "functionality not implemented";
			case LIBMCDRIVER_CIFX_ERROR_INVALIDPARAM: return "an invalid parameter was passed";
			case LIBMCDRIVER_CIFX_ERROR_INVALIDCAST: return "a type cast failed";
			case LIBMCDRIVER_CIFX_ERROR_BUFFERTOOSMALL: return "a provided buffer is too small";
			case LIBMCDRIVER_CIFX_ERROR_GENERICEXCEPTION: return "a generic exception occurred";
			case LIBMCDRIVER_CIFX_ERROR_COULDNOTLOADLIBRARY: return "the library could not be loaded";
			case LIBMCDRIVER_CIFX_ERROR_COULDNOTFINDLIBRARYEXPORT: return "a required exported symbol could not be found in the library";
			case LIBMCDRIVER_CIFX_ERROR_INCOMPATIBLEBINARYVERSION: return "the version of the binary interface does not match the bindings interface";
			case LIBMCDRIVER_CIFX_ERROR_DRIVERERROR: return "a driver error occured";
			case LIBMCDRIVER_CIFX_ERROR_DRIVERNOTINITIALISED: return "the driver is not initialised";
			case LIBMCDRIVER_CIFX_ERROR_DRIVERNOTCONNECTED: return "the driver is not connected";
			case LIBMCDRIVER_CIFX_ERROR_DRIVERTYPENOTFOUND: return "the driver type has not been found";
			case LIBMCDRIVER_CIFX_ERROR_SDKALREADYLOADED: return "SDK already loaded";
			case LIBMCDRIVER_CIFX_ERROR_INVALIDSDKRESOURCE: return "invalid SDK Resource";
			case LIBMCDRIVER_CIFX_ERROR_OUTPUTVALUENOTFOUND: return "output value not found";
			case LIBMCDRIVER_CIFX_ERROR_INPUTVALUENOTFOUND: return "input value not found";
			case LIBMCDRIVER_CIFX_ERROR_VALUENOTFOUND: return "value not found";
			case LIBMCDRIVER_CIFX_ERROR_INVALIDDRIVERPROTOCOL: return "invalid driver protocol";
			case LIBMCDRIVER_CIFX_ERROR_COULDNOTPARSEDRIVERPROTOCOL: return "could not parse driver protocol";
			case LIBMCDRIVER_CIFX_ERROR_NOVERSIONDEFINITION: return "no version definition";
			case LIBMCDRIVER_CIFX_ERROR_NOMAJORVERSION: return "no major version";
			case LIBMCDRIVER_CIFX_ERROR_NOMINORVERSION: return "no minor version";
			case LIBMCDRIVER_CIFX_ERROR_NOPATCHVERSION: return "no patch version";
			case LIBMCDRIVER_CIFX_ERROR_NOBOARDATTRIBUTE: return "no board attribute";
			case LIBMCDRIVER_CIFX_ERROR_NOCHANNELINDEXATTRIBUTE: return "no channel index attribute";
			case LIBMCDRIVER_CIFX_ERROR_INVALIDCHANNELINDEXATTRIBUTE: return "invalid channel index attribute";
			case LIBMCDRIVER_CIFX_ERROR_NOINPUTIOSIZEATTRIBUTE: return "no input io size attribute";
			case LIBMCDRIVER_CIFX_ERROR_INVALIDINPUTIOSIZEATTRIBUTE: return "invalid input io size attribute";
			case LIBMCDRIVER_CIFX_ERROR_NOOUTPUTIOSIZEATTRIBUTE: return "no output io size attribute";
			case LIBMCDRIVER_CIFX_ERROR_INVALIDOUTPUTIOSIZEATTRIBUTE: return "invalid output io size attribute";
			case LIBMCDRIVER_CIFX_ERROR_MISSINGADDRESSATTRIBUTE: return "missing address attribute";
			case LIBMCDRIVER_CIFX_ERROR_INVALIDADDRESSATTRIBUTE: return "invalid address attribute";
			case LIBMCDRIVER_CIFX_ERROR_DUPLICATEINPUTIO: return "duplicate input io";
			case LIBMCDRIVER_CIFX_ERROR_DUPLICATEOUTPUTIO: return "duplicate output io";
			case LIBMCDRIVER_CIFX_ERROR_INVALIDHOSTSTATETIMEOUT: return "invalid host state timeout";
			case LIBMCDRIVER_CIFX_ERROR_INVALIDBUSSTATETIMEOUT: return "invalid bus state timeout";
			case LIBMCDRIVER_CIFX_ERROR_CHANNELALREADYOPEN: return "channel already open";
			case LIBMCDRIVER_CIFX_ERROR_UNKNOWNEXCEPTION: return "an unknown exception occured";
			case LIBMCDRIVER_CIFX_ERROR_INVALIDADDRESSREAD: return "invalid address read";
			case LIBMCDRIVER_CIFX_ERROR_INVALIDADDRESSREADBIT: return "invalid address read bit";
			case LIBMCDRIVER_CIFX_ERROR_INVALIDADDRESSWRITE: return "invalid address write";
			case LIBMCDRIVER_CIFX_ERROR_INVALIDADDRESSWRITEBIT: return "invalid address write bit";
			case LIBMCDRIVER_CIFX_ERROR_INVALIDBITINDEX: return "invalid bit index";
			case LIBMCDRIVER_CIFX_ERROR_INVALIDBOOLPARAMETERCAST: return "invalid bool parameter cast";
			case LIBMCDRIVER_CIFX_ERROR_INVALIDNAMEATTRIBUTE: return "invalid name attribute";
			case LIBMCDRIVER_CIFX_ERROR_INVALIDCHANNELINDEX: return "invalid channel index";
			case LIBMCDRIVER_CIFX_ERROR_INVALIDINPUTINDEX: return "invalid input index";
			case LIBMCDRIVER_CIFX_ERROR_INVALIDOUTPUTINDEX: return "invalid output index";
			case LIBMCDRIVER_CIFX_ERROR_NOCONFIGURATIONSCHEMA: return "no configuration schema";
			case LIBMCDRIVER_CIFX_ERROR_INVALIDCONFIGURATIONSCHEMA: return "invalid configuration schema";
			case LIBMCDRIVER_CIFX_ERROR_INVALIDPARAMETERTYPE: return "invalid parameter type";
			case LIBMCDRIVER_CIFX_ERROR_INVALIDENDIANESSATTRIBUTE: return "invalid endianess attribute";
		}
		return "unknown error";
	}

private:

	std::string buildErrorMessage() const noexcept
	{
		std::string msg = m_originalErrorMessage;
		if (msg.empty()) {
			msg = getErrorDescription();
		}
		return std::string("Error: ") + getErrorName() + ": " + msg;
	}
};

/*************************************************************************************************************************
 Class CInputVector
**************************************************************************************************************************/
template <typename T>
class CInputVector {
private:
	
	const T* m_data;
	size_t m_size;
	
public:
	
	CInputVector(const std::vector<T>& vec)
		: m_data( vec.data() ), m_size( vec.size() )
	{
	}
	
	CInputVector(const T* in_data, size_t in_size)
		: m_data( in_data ), m_size(in_size )
	{
	}
	
	const T* data() const
	{
		return m_data;
	}
	
	size_t size() const
	{
		return m_size;
	}
	
};

// declare deprecated class name
template<typename T>
using CLibMCDriver_CifXInputVector = CInputVector<T>;

/*************************************************************************************************************************
 Class CWrapper 
**************************************************************************************************************************/
class CWrapper {
public:
	
	explicit CWrapper(void* pSymbolLookupMethod)
	{
		CheckError(nullptr, initWrapperTable(&m_WrapperTable));
		CheckError(nullptr, loadWrapperTableFromSymbolLookupMethod(&m_WrapperTable, pSymbolLookupMethod));
		
		CheckError(nullptr, checkBinaryVersion());
	}
	
	explicit CWrapper(const std::string &sFileName)
	{
		CheckError(nullptr, initWrapperTable(&m_WrapperTable));
		CheckError(nullptr, loadWrapperTable(&m_WrapperTable, sFileName.c_str()));
		
		CheckError(nullptr, checkBinaryVersion());
	}
	
	static PWrapper loadLibrary(const std::string &sFileName)
	{
		return std::make_shared<CWrapper>(sFileName);
	}
	
	static PWrapper loadLibraryFromSymbolLookupMethod(void* pSymbolLookupMethod)
	{
		return std::make_shared<CWrapper>(pSymbolLookupMethod);
	}
	
	~CWrapper()
	{
		releaseWrapperTable(&m_WrapperTable);
	}
	
	inline void CheckError(CBase * pBaseClass, LibMCDriver_CifXResult nResult);

	inline void GetVersion(LibMCDriver_CifX_uint32 & nMajor, LibMCDriver_CifX_uint32 & nMinor, LibMCDriver_CifX_uint32 & nMicro);
	inline bool GetLastError(classParam<CBase> pInstance, std::string & sErrorMessage);
	inline void ReleaseInstance(classParam<CBase> pInstance);
	inline void AcquireInstance(classParam<CBase> pInstance);
	inline void InjectComponent(const std::string & sNameSpace, const LibMCDriver_CifX_pvoid pSymbolAddressMethod);
	inline LibMCDriver_CifX_pvoid GetSymbolLookupMethod();
	inline PDriver CreateDriver(const std::string & sName, const std::string & sType, classParam<LibMCEnv::CDriverEnvironment> pDriverEnvironment);

private:
	sLibMCDriver_CifXDynamicWrapperTable m_WrapperTable;
	// Injected Components
	LibMCEnv::PWrapper m_pLibMCEnvWrapper;

	
	LibMCDriver_CifXResult checkBinaryVersion()
	{
		LibMCDriver_CifX_uint32 nMajor, nMinor, nMicro;
		GetVersion(nMajor, nMinor, nMicro);
		if (nMajor != LIBMCDRIVER_CIFX_VERSION_MAJOR) {
			return LIBMCDRIVER_CIFX_ERROR_INCOMPATIBLEBINARYVERSION;
		}
		return LIBMCDRIVER_CIFX_SUCCESS;
	}
	LibMCDriver_CifXResult initWrapperTable(sLibMCDriver_CifXDynamicWrapperTable * pWrapperTable);
	LibMCDriver_CifXResult releaseWrapperTable(sLibMCDriver_CifXDynamicWrapperTable * pWrapperTable);
	LibMCDriver_CifXResult loadWrapperTable(sLibMCDriver_CifXDynamicWrapperTable * pWrapperTable, const char * pLibraryFileName);
	LibMCDriver_CifXResult loadWrapperTableFromSymbolLookupMethod(sLibMCDriver_CifXDynamicWrapperTable * pWrapperTable, void* pSymbolLookupMethod);

	friend class CBase;
	friend class CDriver;
	friend class CChannelInformation;
	friend class CDriver_CifX;

};

	
/*************************************************************************************************************************
 Class CBase 
**************************************************************************************************************************/
class CBase {
public:
	
protected:
	/* Wrapper Object that created the class. */
	CWrapper * m_pWrapper;
	/* Handle to Instance in library*/
	LibMCDriver_CifXHandle m_pHandle;

	/* Checks for an Error code and raises Exceptions */
	void CheckError(LibMCDriver_CifXResult nResult)
	{
		if (m_pWrapper != nullptr)
			m_pWrapper->CheckError(this, nResult);
	}
public:
	/**
	* CBase::CBase - Constructor for Base class.
	*/
	CBase(CWrapper * pWrapper, LibMCDriver_CifXHandle pHandle)
		: m_pWrapper(pWrapper), m_pHandle(pHandle)
	{
	}

	/**
	* CBase::~CBase - Destructor for Base class.
	*/
	virtual ~CBase()
	{
		if (m_pWrapper != nullptr)
			m_pWrapper->ReleaseInstance(this);
		m_pWrapper = nullptr;
	}

	/**
	* CBase::handle - Returns handle to instance.
	*/
	LibMCDriver_CifXHandle handle() const
	{
		return m_pHandle;
	}

	/**
	* CBase::wrapper - Returns wrapper instance.
	*/
	CWrapper * wrapper() const
	{
		return m_pWrapper;
	}
	
	friend class CWrapper;
};
	
/*************************************************************************************************************************
 Class CDriver 
**************************************************************************************************************************/
class CDriver : public CBase {
public:
	
	/**
	* CDriver::CDriver - Constructor for Driver class.
	*/
	CDriver(CWrapper* pWrapper, LibMCDriver_CifXHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline void Configure(const std::string & sConfigurationString);
	inline std::string GetName();
	inline std::string GetType();
	inline void GetVersion(LibMCDriver_CifX_uint32 & nMajor, LibMCDriver_CifX_uint32 & nMinor, LibMCDriver_CifX_uint32 & nMicro, std::string & sBuild);
	inline void QueryParameters();
	inline void QueryParametersEx(classParam<LibMCEnv::CDriverStatusUpdateSession> pDriverUpdateInstance);
};
	
/*************************************************************************************************************************
 Class CChannelInformation 
**************************************************************************************************************************/
class CChannelInformation : public CBase {
public:
	
	/**
	* CChannelInformation::CChannelInformation - Constructor for ChannelInformation class.
	*/
	CChannelInformation(CWrapper* pWrapper, LibMCDriver_CifXHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline std::string GetBoardName();
	inline LibMCDriver_CifX_uint32 GetChannelIndex();
	inline bool IsConnected();
	inline LibMCDriver_CifX_uint32 GetMillisecondsSinceLastUpdate();
	inline void GetConnectionStatistics(LibMCDriver_CifX_uint32 & nNumberOfSucceededUpdates, LibMCDriver_CifX_uint32 & nNumberOfUpdateErrors, LibMCDriver_CifX_double & dMinimumUpdateDurationInMs, LibMCDriver_CifX_double & dMaximumUpdateDurationInMs, LibMCDriver_CifX_double & dAverageUpdateDurationInMs, LibMCDriver_CifX_double & dUpdateDurationVarianceInMs);
	inline bool ValueExists(const std::string & sName);
	inline void GetValueType(const std::string & sName, eValueType & eValueType, bool & bIsInput, bool & bIsOutput);
	inline void GetIntegerValueRange(const std::string & sName, LibMCDriver_CifX_int64 & nMinValue, LibMCDriver_CifX_int64 & nMaxValue);
	inline LibMCDriver_CifX_uint32 GetInputValueCount();
	inline std::string GetInputValueName(const LibMCDriver_CifX_uint32 nIndex);
	inline LibMCDriver_CifX_uint32 GetOutputValueCount();
	inline std::string GetOutputValueName(const LibMCDriver_CifX_uint32 nIndex);
};
	
/*************************************************************************************************************************
 Class CDriver_CifX 
**************************************************************************************************************************/
class CDriver_CifX : public CDriver {
public:
	
	/**
	* CDriver_CifX::CDriver_CifX - Constructor for Driver_CifX class.
	*/
	CDriver_CifX(CWrapper* pWrapper, LibMCDriver_CifXHandle pHandle)
		: CDriver(pWrapper, pHandle)
	{
	}
	
	inline void SetToSimulationMode();
	inline bool IsSimulationMode();
	inline void SetCustomSDKResource(const std::string & sResourceName);
	inline LibMCDriver_CifX_uint32 GetChannelCount();
	inline PChannelInformation GetChannelInformation(const LibMCDriver_CifX_uint32 nChannelIndex);
	inline void Connect();
	inline void Disconnect();
	inline void Reconnect();
	inline bool IsConnected();
	inline bool ValueExists(const std::string & sName);
	inline void GetValueType(const std::string & sName, eValueType & eValueType, bool & bIsInput, bool & bIsOutput);
	inline void GetIntegerValueRange(const std::string & sName, LibMCDriver_CifX_int64 & nMinValue, LibMCDriver_CifX_int64 & nMaxValue);
	inline void WriteIntegerValue(const std::string & sName, const LibMCDriver_CifX_int64 nValue, const bool bClampToRange, const LibMCDriver_CifX_uint32 nTimeOutInMs);
	inline void WriteBoolValue(const std::string & sName, const bool bValue, const LibMCDriver_CifX_uint32 nTimeOutInMs);
	inline void WriteDoubleValue(const std::string & sName, const LibMCDriver_CifX_double dValue, const LibMCDriver_CifX_uint32 nTimeOutInMs);
	inline LibMCDriver_CifX_int64 ReadIntegerValue(const std::string & sName);
	inline bool ReadBoolValue(const std::string & sName);
	inline LibMCDriver_CifX_double ReadDoubleValue(const std::string & sName);
};
	
	/**
	* CWrapper::GetVersion - retrieves the binary version of this library.
	* @param[out] nMajor - returns the major version of this library
	* @param[out] nMinor - returns the minor version of this library
	* @param[out] nMicro - returns the micro version of this library
	*/
	inline void CWrapper::GetVersion(LibMCDriver_CifX_uint32 & nMajor, LibMCDriver_CifX_uint32 & nMinor, LibMCDriver_CifX_uint32 & nMicro)
	{
		CheckError(nullptr,m_WrapperTable.m_GetVersion(&nMajor, &nMinor, &nMicro));
	}
	
	/**
	* CWrapper::GetLastError - Returns the last error recorded on this object
	* @param[in] pInstance - Instance Handle
	* @param[out] sErrorMessage - Message of the last error
	* @return Is there a last error to query
	*/
	inline bool CWrapper::GetLastError(classParam<CBase> pInstance, std::string & sErrorMessage)
	{
		LibMCDriver_CifXHandle hInstance = pInstance.GetHandle();
		LibMCDriver_CifX_uint32 bytesNeededErrorMessage = 0;
		LibMCDriver_CifX_uint32 bytesWrittenErrorMessage = 0;
		bool resultHasError = 0;
		CheckError(nullptr,m_WrapperTable.m_GetLastError(hInstance, 0, &bytesNeededErrorMessage, nullptr, &resultHasError));
		std::vector<char> bufferErrorMessage(bytesNeededErrorMessage);
		CheckError(nullptr,m_WrapperTable.m_GetLastError(hInstance, bytesNeededErrorMessage, &bytesWrittenErrorMessage, &bufferErrorMessage[0], &resultHasError));
		sErrorMessage = std::string(&bufferErrorMessage[0]);
		
		return resultHasError;
	}
	
	/**
	* CWrapper::ReleaseInstance - Releases shared ownership of an Instance
	* @param[in] pInstance - Instance Handle
	*/
	inline void CWrapper::ReleaseInstance(classParam<CBase> pInstance)
	{
		LibMCDriver_CifXHandle hInstance = pInstance.GetHandle();
		CheckError(nullptr,m_WrapperTable.m_ReleaseInstance(hInstance));
	}
	
	/**
	* CWrapper::AcquireInstance - Acquires shared ownership of an Instance
	* @param[in] pInstance - Instance Handle
	*/
	inline void CWrapper::AcquireInstance(classParam<CBase> pInstance)
	{
		LibMCDriver_CifXHandle hInstance = pInstance.GetHandle();
		CheckError(nullptr,m_WrapperTable.m_AcquireInstance(hInstance));
	}
	
	/**
	* CWrapper::InjectComponent - Injects an imported component for usage within this component
	* @param[in] sNameSpace - NameSpace of the injected component
	* @param[in] pSymbolAddressMethod - Address of the SymbolAddressMethod of the injected component
	*/
	inline void CWrapper::InjectComponent(const std::string & sNameSpace, const LibMCDriver_CifX_pvoid pSymbolAddressMethod)
	{
		CheckError(nullptr,m_WrapperTable.m_InjectComponent(sNameSpace.c_str(), pSymbolAddressMethod));
		
		bool bNameSpaceFound = false;
		if (sNameSpace == "LibMCEnv") {
			if (m_pLibMCEnvWrapper != nullptr) {
				throw ELibMCDriver_CifXException(LIBMCDRIVER_CIFX_ERROR_COULDNOTLOADLIBRARY, "Library with namespace " + sNameSpace + " is already registered.");
			}
			m_pLibMCEnvWrapper = LibMCEnv::CWrapper::loadLibraryFromSymbolLookupMethod(pSymbolAddressMethod);
			bNameSpaceFound = true;
		}
		if (!bNameSpaceFound)
			throw ELibMCDriver_CifXException(LIBMCDRIVER_CIFX_ERROR_COULDNOTLOADLIBRARY, "Unknown namespace " + sNameSpace);
	}
	
	/**
	* CWrapper::GetSymbolLookupMethod - Returns the address of the SymbolLookupMethod
	* @return Address of the SymbolAddressMethod
	*/
	inline LibMCDriver_CifX_pvoid CWrapper::GetSymbolLookupMethod()
	{
		LibMCDriver_CifX_pvoid resultSymbolLookupMethod = 0;
		CheckError(nullptr,m_WrapperTable.m_GetSymbolLookupMethod(&resultSymbolLookupMethod));
		
		return resultSymbolLookupMethod;
	}
	
	/**
	* CWrapper::CreateDriver - Creates a driver instance with a specific name.
	* @param[in] sName - Name of driver to be created.
	* @param[in] sType - Type of driver to be created.
	* @param[in] pDriverEnvironment - Environment of this driver.
	* @return New Driver instance
	*/
	inline PDriver CWrapper::CreateDriver(const std::string & sName, const std::string & sType, classParam<LibMCEnv::CDriverEnvironment> pDriverEnvironment)
	{
		LibMCEnvHandle hDriverEnvironment = pDriverEnvironment.GetHandle();
		LibMCDriver_CifXHandle hInstance = nullptr;
		CheckError(nullptr,m_WrapperTable.m_CreateDriver(sName.c_str(), sType.c_str(), hDriverEnvironment, &hInstance));
		
		if (hInstance) {
			return std::make_shared<CDriver>(this, hInstance);
		} else {
			return nullptr;
		}
	}
	
	inline void CWrapper::CheckError(CBase * pBaseClass, LibMCDriver_CifXResult nResult)
	{
		if (nResult != 0) {
			std::string sErrorMessage;
			if (pBaseClass != nullptr) {
				GetLastError(pBaseClass, sErrorMessage);
			}
			throw ELibMCDriver_CifXException(nResult, sErrorMessage);
		}
	}
	

	inline LibMCDriver_CifXResult CWrapper::initWrapperTable(sLibMCDriver_CifXDynamicWrapperTable * pWrapperTable)
	{
		if (pWrapperTable == nullptr)
			return LIBMCDRIVER_CIFX_ERROR_INVALIDPARAM;
		
		pWrapperTable->m_LibraryHandle = nullptr;
		pWrapperTable->m_Driver_Configure = nullptr;
		pWrapperTable->m_Driver_GetName = nullptr;
		pWrapperTable->m_Driver_GetType = nullptr;
		pWrapperTable->m_Driver_GetVersion = nullptr;
		pWrapperTable->m_Driver_QueryParameters = nullptr;
		pWrapperTable->m_Driver_QueryParametersEx = nullptr;
		pWrapperTable->m_ChannelInformation_GetBoardName = nullptr;
		pWrapperTable->m_ChannelInformation_GetChannelIndex = nullptr;
		pWrapperTable->m_ChannelInformation_IsConnected = nullptr;
		pWrapperTable->m_ChannelInformation_GetMillisecondsSinceLastUpdate = nullptr;
		pWrapperTable->m_ChannelInformation_GetConnectionStatistics = nullptr;
		pWrapperTable->m_ChannelInformation_ValueExists = nullptr;
		pWrapperTable->m_ChannelInformation_GetValueType = nullptr;
		pWrapperTable->m_ChannelInformation_GetIntegerValueRange = nullptr;
		pWrapperTable->m_ChannelInformation_GetInputValueCount = nullptr;
		pWrapperTable->m_ChannelInformation_GetInputValueName = nullptr;
		pWrapperTable->m_ChannelInformation_GetOutputValueCount = nullptr;
		pWrapperTable->m_ChannelInformation_GetOutputValueName = nullptr;
		pWrapperTable->m_Driver_CifX_SetToSimulationMode = nullptr;
		pWrapperTable->m_Driver_CifX_IsSimulationMode = nullptr;
		pWrapperTable->m_Driver_CifX_SetCustomSDKResource = nullptr;
		pWrapperTable->m_Driver_CifX_GetChannelCount = nullptr;
		pWrapperTable->m_Driver_CifX_GetChannelInformation = nullptr;
		pWrapperTable->m_Driver_CifX_Connect = nullptr;
		pWrapperTable->m_Driver_CifX_Disconnect = nullptr;
		pWrapperTable->m_Driver_CifX_Reconnect = nullptr;
		pWrapperTable->m_Driver_CifX_IsConnected = nullptr;
		pWrapperTable->m_Driver_CifX_ValueExists = nullptr;
		pWrapperTable->m_Driver_CifX_GetValueType = nullptr;
		pWrapperTable->m_Driver_CifX_GetIntegerValueRange = nullptr;
		pWrapperTable->m_Driver_CifX_WriteIntegerValue = nullptr;
		pWrapperTable->m_Driver_CifX_WriteBoolValue = nullptr;
		pWrapperTable->m_Driver_CifX_WriteDoubleValue = nullptr;
		pWrapperTable->m_Driver_CifX_ReadIntegerValue = nullptr;
		pWrapperTable->m_Driver_CifX_ReadBoolValue = nullptr;
		pWrapperTable->m_Driver_CifX_ReadDoubleValue = nullptr;
		pWrapperTable->m_GetVersion = nullptr;
		pWrapperTable->m_GetLastError = nullptr;
		pWrapperTable->m_ReleaseInstance = nullptr;
		pWrapperTable->m_AcquireInstance = nullptr;
		pWrapperTable->m_InjectComponent = nullptr;
		pWrapperTable->m_GetSymbolLookupMethod = nullptr;
		pWrapperTable->m_CreateDriver = nullptr;
		
		return LIBMCDRIVER_CIFX_SUCCESS;
	}

	inline LibMCDriver_CifXResult CWrapper::releaseWrapperTable(sLibMCDriver_CifXDynamicWrapperTable * pWrapperTable)
	{
		if (pWrapperTable == nullptr)
			return LIBMCDRIVER_CIFX_ERROR_INVALIDPARAM;
		
		if (pWrapperTable->m_LibraryHandle != nullptr) {
		#ifdef _WIN32
			HMODULE hModule = (HMODULE) pWrapperTable->m_LibraryHandle;
			FreeLibrary(hModule);
		#else // _WIN32
			dlclose(pWrapperTable->m_LibraryHandle);
		#endif // _WIN32
			return initWrapperTable(pWrapperTable);
		}
		
		return LIBMCDRIVER_CIFX_SUCCESS;
	}

	inline LibMCDriver_CifXResult CWrapper::loadWrapperTable(sLibMCDriver_CifXDynamicWrapperTable * pWrapperTable, const char * pLibraryFileName)
	{
		if (pWrapperTable == nullptr)
			return LIBMCDRIVER_CIFX_ERROR_INVALIDPARAM;
		if (pLibraryFileName == nullptr)
			return LIBMCDRIVER_CIFX_ERROR_INVALIDPARAM;
		
		#ifdef _WIN32
		// Convert filename to UTF16-string
		int nLength = 0;
		while ((pLibraryFileName[nLength] != 0) && (nLength < MAX_PATH))
			nLength++;
		int nBufferSize = nLength * 2 + 2;
		std::vector<wchar_t> wsLibraryFileName(nBufferSize);
		int nResult = MultiByteToWideChar(CP_UTF8, 0, pLibraryFileName, nLength, &wsLibraryFileName[0], nBufferSize);
		if (nResult == 0)
			return LIBMCDRIVER_CIFX_ERROR_COULDNOTLOADLIBRARY;
		
		HMODULE hLibrary = LoadLibraryW(wsLibraryFileName.data());
		if (hLibrary == 0) 
			return LIBMCDRIVER_CIFX_ERROR_COULDNOTLOADLIBRARY;
		#else // _WIN32
		void* hLibrary = dlopen(pLibraryFileName, RTLD_LAZY);
		if (hLibrary == 0) 
			return LIBMCDRIVER_CIFX_ERROR_COULDNOTLOADLIBRARY;
		dlerror();
		#endif // _WIN32
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_Configure = (PLibMCDriver_CifXDriver_ConfigurePtr) GetProcAddress(hLibrary, "libmcdriver_cifx_driver_configure");
		#else // _WIN32
		pWrapperTable->m_Driver_Configure = (PLibMCDriver_CifXDriver_ConfigurePtr) dlsym(hLibrary, "libmcdriver_cifx_driver_configure");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_Configure == nullptr)
			return LIBMCDRIVER_CIFX_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_GetName = (PLibMCDriver_CifXDriver_GetNamePtr) GetProcAddress(hLibrary, "libmcdriver_cifx_driver_getname");
		#else // _WIN32
		pWrapperTable->m_Driver_GetName = (PLibMCDriver_CifXDriver_GetNamePtr) dlsym(hLibrary, "libmcdriver_cifx_driver_getname");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_GetName == nullptr)
			return LIBMCDRIVER_CIFX_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_GetType = (PLibMCDriver_CifXDriver_GetTypePtr) GetProcAddress(hLibrary, "libmcdriver_cifx_driver_gettype");
		#else // _WIN32
		pWrapperTable->m_Driver_GetType = (PLibMCDriver_CifXDriver_GetTypePtr) dlsym(hLibrary, "libmcdriver_cifx_driver_gettype");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_GetType == nullptr)
			return LIBMCDRIVER_CIFX_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_GetVersion = (PLibMCDriver_CifXDriver_GetVersionPtr) GetProcAddress(hLibrary, "libmcdriver_cifx_driver_getversion");
		#else // _WIN32
		pWrapperTable->m_Driver_GetVersion = (PLibMCDriver_CifXDriver_GetVersionPtr) dlsym(hLibrary, "libmcdriver_cifx_driver_getversion");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_GetVersion == nullptr)
			return LIBMCDRIVER_CIFX_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_QueryParameters = (PLibMCDriver_CifXDriver_QueryParametersPtr) GetProcAddress(hLibrary, "libmcdriver_cifx_driver_queryparameters");
		#else // _WIN32
		pWrapperTable->m_Driver_QueryParameters = (PLibMCDriver_CifXDriver_QueryParametersPtr) dlsym(hLibrary, "libmcdriver_cifx_driver_queryparameters");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_QueryParameters == nullptr)
			return LIBMCDRIVER_CIFX_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_QueryParametersEx = (PLibMCDriver_CifXDriver_QueryParametersExPtr) GetProcAddress(hLibrary, "libmcdriver_cifx_driver_queryparametersex");
		#else // _WIN32
		pWrapperTable->m_Driver_QueryParametersEx = (PLibMCDriver_CifXDriver_QueryParametersExPtr) dlsym(hLibrary, "libmcdriver_cifx_driver_queryparametersex");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_QueryParametersEx == nullptr)
			return LIBMCDRIVER_CIFX_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ChannelInformation_GetBoardName = (PLibMCDriver_CifXChannelInformation_GetBoardNamePtr) GetProcAddress(hLibrary, "libmcdriver_cifx_channelinformation_getboardname");
		#else // _WIN32
		pWrapperTable->m_ChannelInformation_GetBoardName = (PLibMCDriver_CifXChannelInformation_GetBoardNamePtr) dlsym(hLibrary, "libmcdriver_cifx_channelinformation_getboardname");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ChannelInformation_GetBoardName == nullptr)
			return LIBMCDRIVER_CIFX_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ChannelInformation_GetChannelIndex = (PLibMCDriver_CifXChannelInformation_GetChannelIndexPtr) GetProcAddress(hLibrary, "libmcdriver_cifx_channelinformation_getchannelindex");
		#else // _WIN32
		pWrapperTable->m_ChannelInformation_GetChannelIndex = (PLibMCDriver_CifXChannelInformation_GetChannelIndexPtr) dlsym(hLibrary, "libmcdriver_cifx_channelinformation_getchannelindex");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ChannelInformation_GetChannelIndex == nullptr)
			return LIBMCDRIVER_CIFX_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ChannelInformation_IsConnected = (PLibMCDriver_CifXChannelInformation_IsConnectedPtr) GetProcAddress(hLibrary, "libmcdriver_cifx_channelinformation_isconnected");
		#else // _WIN32
		pWrapperTable->m_ChannelInformation_IsConnected = (PLibMCDriver_CifXChannelInformation_IsConnectedPtr) dlsym(hLibrary, "libmcdriver_cifx_channelinformation_isconnected");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ChannelInformation_IsConnected == nullptr)
			return LIBMCDRIVER_CIFX_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ChannelInformation_GetMillisecondsSinceLastUpdate = (PLibMCDriver_CifXChannelInformation_GetMillisecondsSinceLastUpdatePtr) GetProcAddress(hLibrary, "libmcdriver_cifx_channelinformation_getmillisecondssincelastupdate");
		#else // _WIN32
		pWrapperTable->m_ChannelInformation_GetMillisecondsSinceLastUpdate = (PLibMCDriver_CifXChannelInformation_GetMillisecondsSinceLastUpdatePtr) dlsym(hLibrary, "libmcdriver_cifx_channelinformation_getmillisecondssincelastupdate");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ChannelInformation_GetMillisecondsSinceLastUpdate == nullptr)
			return LIBMCDRIVER_CIFX_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ChannelInformation_GetConnectionStatistics = (PLibMCDriver_CifXChannelInformation_GetConnectionStatisticsPtr) GetProcAddress(hLibrary, "libmcdriver_cifx_channelinformation_getconnectionstatistics");
		#else // _WIN32
		pWrapperTable->m_ChannelInformation_GetConnectionStatistics = (PLibMCDriver_CifXChannelInformation_GetConnectionStatisticsPtr) dlsym(hLibrary, "libmcdriver_cifx_channelinformation_getconnectionstatistics");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ChannelInformation_GetConnectionStatistics == nullptr)
			return LIBMCDRIVER_CIFX_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ChannelInformation_ValueExists = (PLibMCDriver_CifXChannelInformation_ValueExistsPtr) GetProcAddress(hLibrary, "libmcdriver_cifx_channelinformation_valueexists");
		#else // _WIN32
		pWrapperTable->m_ChannelInformation_ValueExists = (PLibMCDriver_CifXChannelInformation_ValueExistsPtr) dlsym(hLibrary, "libmcdriver_cifx_channelinformation_valueexists");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ChannelInformation_ValueExists == nullptr)
			return LIBMCDRIVER_CIFX_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ChannelInformation_GetValueType = (PLibMCDriver_CifXChannelInformation_GetValueTypePtr) GetProcAddress(hLibrary, "libmcdriver_cifx_channelinformation_getvaluetype");
		#else // _WIN32
		pWrapperTable->m_ChannelInformation_GetValueType = (PLibMCDriver_CifXChannelInformation_GetValueTypePtr) dlsym(hLibrary, "libmcdriver_cifx_channelinformation_getvaluetype");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ChannelInformation_GetValueType == nullptr)
			return LIBMCDRIVER_CIFX_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ChannelInformation_GetIntegerValueRange = (PLibMCDriver_CifXChannelInformation_GetIntegerValueRangePtr) GetProcAddress(hLibrary, "libmcdriver_cifx_channelinformation_getintegervaluerange");
		#else // _WIN32
		pWrapperTable->m_ChannelInformation_GetIntegerValueRange = (PLibMCDriver_CifXChannelInformation_GetIntegerValueRangePtr) dlsym(hLibrary, "libmcdriver_cifx_channelinformation_getintegervaluerange");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ChannelInformation_GetIntegerValueRange == nullptr)
			return LIBMCDRIVER_CIFX_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ChannelInformation_GetInputValueCount = (PLibMCDriver_CifXChannelInformation_GetInputValueCountPtr) GetProcAddress(hLibrary, "libmcdriver_cifx_channelinformation_getinputvaluecount");
		#else // _WIN32
		pWrapperTable->m_ChannelInformation_GetInputValueCount = (PLibMCDriver_CifXChannelInformation_GetInputValueCountPtr) dlsym(hLibrary, "libmcdriver_cifx_channelinformation_getinputvaluecount");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ChannelInformation_GetInputValueCount == nullptr)
			return LIBMCDRIVER_CIFX_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ChannelInformation_GetInputValueName = (PLibMCDriver_CifXChannelInformation_GetInputValueNamePtr) GetProcAddress(hLibrary, "libmcdriver_cifx_channelinformation_getinputvaluename");
		#else // _WIN32
		pWrapperTable->m_ChannelInformation_GetInputValueName = (PLibMCDriver_CifXChannelInformation_GetInputValueNamePtr) dlsym(hLibrary, "libmcdriver_cifx_channelinformation_getinputvaluename");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ChannelInformation_GetInputValueName == nullptr)
			return LIBMCDRIVER_CIFX_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ChannelInformation_GetOutputValueCount = (PLibMCDriver_CifXChannelInformation_GetOutputValueCountPtr) GetProcAddress(hLibrary, "libmcdriver_cifx_channelinformation_getoutputvaluecount");
		#else // _WIN32
		pWrapperTable->m_ChannelInformation_GetOutputValueCount = (PLibMCDriver_CifXChannelInformation_GetOutputValueCountPtr) dlsym(hLibrary, "libmcdriver_cifx_channelinformation_getoutputvaluecount");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ChannelInformation_GetOutputValueCount == nullptr)
			return LIBMCDRIVER_CIFX_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ChannelInformation_GetOutputValueName = (PLibMCDriver_CifXChannelInformation_GetOutputValueNamePtr) GetProcAddress(hLibrary, "libmcdriver_cifx_channelinformation_getoutputvaluename");
		#else // _WIN32
		pWrapperTable->m_ChannelInformation_GetOutputValueName = (PLibMCDriver_CifXChannelInformation_GetOutputValueNamePtr) dlsym(hLibrary, "libmcdriver_cifx_channelinformation_getoutputvaluename");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ChannelInformation_GetOutputValueName == nullptr)
			return LIBMCDRIVER_CIFX_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_CifX_SetToSimulationMode = (PLibMCDriver_CifXDriver_CifX_SetToSimulationModePtr) GetProcAddress(hLibrary, "libmcdriver_cifx_driver_cifx_settosimulationmode");
		#else // _WIN32
		pWrapperTable->m_Driver_CifX_SetToSimulationMode = (PLibMCDriver_CifXDriver_CifX_SetToSimulationModePtr) dlsym(hLibrary, "libmcdriver_cifx_driver_cifx_settosimulationmode");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_CifX_SetToSimulationMode == nullptr)
			return LIBMCDRIVER_CIFX_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_CifX_IsSimulationMode = (PLibMCDriver_CifXDriver_CifX_IsSimulationModePtr) GetProcAddress(hLibrary, "libmcdriver_cifx_driver_cifx_issimulationmode");
		#else // _WIN32
		pWrapperTable->m_Driver_CifX_IsSimulationMode = (PLibMCDriver_CifXDriver_CifX_IsSimulationModePtr) dlsym(hLibrary, "libmcdriver_cifx_driver_cifx_issimulationmode");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_CifX_IsSimulationMode == nullptr)
			return LIBMCDRIVER_CIFX_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_CifX_SetCustomSDKResource = (PLibMCDriver_CifXDriver_CifX_SetCustomSDKResourcePtr) GetProcAddress(hLibrary, "libmcdriver_cifx_driver_cifx_setcustomsdkresource");
		#else // _WIN32
		pWrapperTable->m_Driver_CifX_SetCustomSDKResource = (PLibMCDriver_CifXDriver_CifX_SetCustomSDKResourcePtr) dlsym(hLibrary, "libmcdriver_cifx_driver_cifx_setcustomsdkresource");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_CifX_SetCustomSDKResource == nullptr)
			return LIBMCDRIVER_CIFX_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_CifX_GetChannelCount = (PLibMCDriver_CifXDriver_CifX_GetChannelCountPtr) GetProcAddress(hLibrary, "libmcdriver_cifx_driver_cifx_getchannelcount");
		#else // _WIN32
		pWrapperTable->m_Driver_CifX_GetChannelCount = (PLibMCDriver_CifXDriver_CifX_GetChannelCountPtr) dlsym(hLibrary, "libmcdriver_cifx_driver_cifx_getchannelcount");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_CifX_GetChannelCount == nullptr)
			return LIBMCDRIVER_CIFX_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_CifX_GetChannelInformation = (PLibMCDriver_CifXDriver_CifX_GetChannelInformationPtr) GetProcAddress(hLibrary, "libmcdriver_cifx_driver_cifx_getchannelinformation");
		#else // _WIN32
		pWrapperTable->m_Driver_CifX_GetChannelInformation = (PLibMCDriver_CifXDriver_CifX_GetChannelInformationPtr) dlsym(hLibrary, "libmcdriver_cifx_driver_cifx_getchannelinformation");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_CifX_GetChannelInformation == nullptr)
			return LIBMCDRIVER_CIFX_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_CifX_Connect = (PLibMCDriver_CifXDriver_CifX_ConnectPtr) GetProcAddress(hLibrary, "libmcdriver_cifx_driver_cifx_connect");
		#else // _WIN32
		pWrapperTable->m_Driver_CifX_Connect = (PLibMCDriver_CifXDriver_CifX_ConnectPtr) dlsym(hLibrary, "libmcdriver_cifx_driver_cifx_connect");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_CifX_Connect == nullptr)
			return LIBMCDRIVER_CIFX_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_CifX_Disconnect = (PLibMCDriver_CifXDriver_CifX_DisconnectPtr) GetProcAddress(hLibrary, "libmcdriver_cifx_driver_cifx_disconnect");
		#else // _WIN32
		pWrapperTable->m_Driver_CifX_Disconnect = (PLibMCDriver_CifXDriver_CifX_DisconnectPtr) dlsym(hLibrary, "libmcdriver_cifx_driver_cifx_disconnect");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_CifX_Disconnect == nullptr)
			return LIBMCDRIVER_CIFX_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_CifX_Reconnect = (PLibMCDriver_CifXDriver_CifX_ReconnectPtr) GetProcAddress(hLibrary, "libmcdriver_cifx_driver_cifx_reconnect");
		#else // _WIN32
		pWrapperTable->m_Driver_CifX_Reconnect = (PLibMCDriver_CifXDriver_CifX_ReconnectPtr) dlsym(hLibrary, "libmcdriver_cifx_driver_cifx_reconnect");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_CifX_Reconnect == nullptr)
			return LIBMCDRIVER_CIFX_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_CifX_IsConnected = (PLibMCDriver_CifXDriver_CifX_IsConnectedPtr) GetProcAddress(hLibrary, "libmcdriver_cifx_driver_cifx_isconnected");
		#else // _WIN32
		pWrapperTable->m_Driver_CifX_IsConnected = (PLibMCDriver_CifXDriver_CifX_IsConnectedPtr) dlsym(hLibrary, "libmcdriver_cifx_driver_cifx_isconnected");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_CifX_IsConnected == nullptr)
			return LIBMCDRIVER_CIFX_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_CifX_ValueExists = (PLibMCDriver_CifXDriver_CifX_ValueExistsPtr) GetProcAddress(hLibrary, "libmcdriver_cifx_driver_cifx_valueexists");
		#else // _WIN32
		pWrapperTable->m_Driver_CifX_ValueExists = (PLibMCDriver_CifXDriver_CifX_ValueExistsPtr) dlsym(hLibrary, "libmcdriver_cifx_driver_cifx_valueexists");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_CifX_ValueExists == nullptr)
			return LIBMCDRIVER_CIFX_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_CifX_GetValueType = (PLibMCDriver_CifXDriver_CifX_GetValueTypePtr) GetProcAddress(hLibrary, "libmcdriver_cifx_driver_cifx_getvaluetype");
		#else // _WIN32
		pWrapperTable->m_Driver_CifX_GetValueType = (PLibMCDriver_CifXDriver_CifX_GetValueTypePtr) dlsym(hLibrary, "libmcdriver_cifx_driver_cifx_getvaluetype");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_CifX_GetValueType == nullptr)
			return LIBMCDRIVER_CIFX_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_CifX_GetIntegerValueRange = (PLibMCDriver_CifXDriver_CifX_GetIntegerValueRangePtr) GetProcAddress(hLibrary, "libmcdriver_cifx_driver_cifx_getintegervaluerange");
		#else // _WIN32
		pWrapperTable->m_Driver_CifX_GetIntegerValueRange = (PLibMCDriver_CifXDriver_CifX_GetIntegerValueRangePtr) dlsym(hLibrary, "libmcdriver_cifx_driver_cifx_getintegervaluerange");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_CifX_GetIntegerValueRange == nullptr)
			return LIBMCDRIVER_CIFX_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_CifX_WriteIntegerValue = (PLibMCDriver_CifXDriver_CifX_WriteIntegerValuePtr) GetProcAddress(hLibrary, "libmcdriver_cifx_driver_cifx_writeintegervalue");
		#else // _WIN32
		pWrapperTable->m_Driver_CifX_WriteIntegerValue = (PLibMCDriver_CifXDriver_CifX_WriteIntegerValuePtr) dlsym(hLibrary, "libmcdriver_cifx_driver_cifx_writeintegervalue");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_CifX_WriteIntegerValue == nullptr)
			return LIBMCDRIVER_CIFX_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_CifX_WriteBoolValue = (PLibMCDriver_CifXDriver_CifX_WriteBoolValuePtr) GetProcAddress(hLibrary, "libmcdriver_cifx_driver_cifx_writeboolvalue");
		#else // _WIN32
		pWrapperTable->m_Driver_CifX_WriteBoolValue = (PLibMCDriver_CifXDriver_CifX_WriteBoolValuePtr) dlsym(hLibrary, "libmcdriver_cifx_driver_cifx_writeboolvalue");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_CifX_WriteBoolValue == nullptr)
			return LIBMCDRIVER_CIFX_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_CifX_WriteDoubleValue = (PLibMCDriver_CifXDriver_CifX_WriteDoubleValuePtr) GetProcAddress(hLibrary, "libmcdriver_cifx_driver_cifx_writedoublevalue");
		#else // _WIN32
		pWrapperTable->m_Driver_CifX_WriteDoubleValue = (PLibMCDriver_CifXDriver_CifX_WriteDoubleValuePtr) dlsym(hLibrary, "libmcdriver_cifx_driver_cifx_writedoublevalue");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_CifX_WriteDoubleValue == nullptr)
			return LIBMCDRIVER_CIFX_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_CifX_ReadIntegerValue = (PLibMCDriver_CifXDriver_CifX_ReadIntegerValuePtr) GetProcAddress(hLibrary, "libmcdriver_cifx_driver_cifx_readintegervalue");
		#else // _WIN32
		pWrapperTable->m_Driver_CifX_ReadIntegerValue = (PLibMCDriver_CifXDriver_CifX_ReadIntegerValuePtr) dlsym(hLibrary, "libmcdriver_cifx_driver_cifx_readintegervalue");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_CifX_ReadIntegerValue == nullptr)
			return LIBMCDRIVER_CIFX_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_CifX_ReadBoolValue = (PLibMCDriver_CifXDriver_CifX_ReadBoolValuePtr) GetProcAddress(hLibrary, "libmcdriver_cifx_driver_cifx_readboolvalue");
		#else // _WIN32
		pWrapperTable->m_Driver_CifX_ReadBoolValue = (PLibMCDriver_CifXDriver_CifX_ReadBoolValuePtr) dlsym(hLibrary, "libmcdriver_cifx_driver_cifx_readboolvalue");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_CifX_ReadBoolValue == nullptr)
			return LIBMCDRIVER_CIFX_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_CifX_ReadDoubleValue = (PLibMCDriver_CifXDriver_CifX_ReadDoubleValuePtr) GetProcAddress(hLibrary, "libmcdriver_cifx_driver_cifx_readdoublevalue");
		#else // _WIN32
		pWrapperTable->m_Driver_CifX_ReadDoubleValue = (PLibMCDriver_CifXDriver_CifX_ReadDoubleValuePtr) dlsym(hLibrary, "libmcdriver_cifx_driver_cifx_readdoublevalue");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_CifX_ReadDoubleValue == nullptr)
			return LIBMCDRIVER_CIFX_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GetVersion = (PLibMCDriver_CifXGetVersionPtr) GetProcAddress(hLibrary, "libmcdriver_cifx_getversion");
		#else // _WIN32
		pWrapperTable->m_GetVersion = (PLibMCDriver_CifXGetVersionPtr) dlsym(hLibrary, "libmcdriver_cifx_getversion");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GetVersion == nullptr)
			return LIBMCDRIVER_CIFX_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GetLastError = (PLibMCDriver_CifXGetLastErrorPtr) GetProcAddress(hLibrary, "libmcdriver_cifx_getlasterror");
		#else // _WIN32
		pWrapperTable->m_GetLastError = (PLibMCDriver_CifXGetLastErrorPtr) dlsym(hLibrary, "libmcdriver_cifx_getlasterror");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GetLastError == nullptr)
			return LIBMCDRIVER_CIFX_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ReleaseInstance = (PLibMCDriver_CifXReleaseInstancePtr) GetProcAddress(hLibrary, "libmcdriver_cifx_releaseinstance");
		#else // _WIN32
		pWrapperTable->m_ReleaseInstance = (PLibMCDriver_CifXReleaseInstancePtr) dlsym(hLibrary, "libmcdriver_cifx_releaseinstance");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ReleaseInstance == nullptr)
			return LIBMCDRIVER_CIFX_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_AcquireInstance = (PLibMCDriver_CifXAcquireInstancePtr) GetProcAddress(hLibrary, "libmcdriver_cifx_acquireinstance");
		#else // _WIN32
		pWrapperTable->m_AcquireInstance = (PLibMCDriver_CifXAcquireInstancePtr) dlsym(hLibrary, "libmcdriver_cifx_acquireinstance");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_AcquireInstance == nullptr)
			return LIBMCDRIVER_CIFX_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_InjectComponent = (PLibMCDriver_CifXInjectComponentPtr) GetProcAddress(hLibrary, "libmcdriver_cifx_injectcomponent");
		#else // _WIN32
		pWrapperTable->m_InjectComponent = (PLibMCDriver_CifXInjectComponentPtr) dlsym(hLibrary, "libmcdriver_cifx_injectcomponent");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_InjectComponent == nullptr)
			return LIBMCDRIVER_CIFX_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GetSymbolLookupMethod = (PLibMCDriver_CifXGetSymbolLookupMethodPtr) GetProcAddress(hLibrary, "libmcdriver_cifx_getsymbollookupmethod");
		#else // _WIN32
		pWrapperTable->m_GetSymbolLookupMethod = (PLibMCDriver_CifXGetSymbolLookupMethodPtr) dlsym(hLibrary, "libmcdriver_cifx_getsymbollookupmethod");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GetSymbolLookupMethod == nullptr)
			return LIBMCDRIVER_CIFX_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_CreateDriver = (PLibMCDriver_CifXCreateDriverPtr) GetProcAddress(hLibrary, "libmcdriver_cifx_createdriver");
		#else // _WIN32
		pWrapperTable->m_CreateDriver = (PLibMCDriver_CifXCreateDriverPtr) dlsym(hLibrary, "libmcdriver_cifx_createdriver");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_CreateDriver == nullptr)
			return LIBMCDRIVER_CIFX_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		pWrapperTable->m_LibraryHandle = hLibrary;
		return LIBMCDRIVER_CIFX_SUCCESS;
	}

	inline LibMCDriver_CifXResult CWrapper::loadWrapperTableFromSymbolLookupMethod(sLibMCDriver_CifXDynamicWrapperTable * pWrapperTable, void* pSymbolLookupMethod)
{
		if (pWrapperTable == nullptr)
			return LIBMCDRIVER_CIFX_ERROR_INVALIDPARAM;
		if (pSymbolLookupMethod == nullptr)
			return LIBMCDRIVER_CIFX_ERROR_INVALIDPARAM;
		
		typedef LibMCDriver_CifXResult(*SymbolLookupType)(const char*, void**);
		
		SymbolLookupType pLookup = (SymbolLookupType)pSymbolLookupMethod;
		
		LibMCDriver_CifXResult eLookupError = LIBMCDRIVER_CIFX_SUCCESS;
		eLookupError = (*pLookup)("libmcdriver_cifx_driver_configure", (void**)&(pWrapperTable->m_Driver_Configure));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_Configure == nullptr) )
			return LIBMCDRIVER_CIFX_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_cifx_driver_getname", (void**)&(pWrapperTable->m_Driver_GetName));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_GetName == nullptr) )
			return LIBMCDRIVER_CIFX_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_cifx_driver_gettype", (void**)&(pWrapperTable->m_Driver_GetType));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_GetType == nullptr) )
			return LIBMCDRIVER_CIFX_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_cifx_driver_getversion", (void**)&(pWrapperTable->m_Driver_GetVersion));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_GetVersion == nullptr) )
			return LIBMCDRIVER_CIFX_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_cifx_driver_queryparameters", (void**)&(pWrapperTable->m_Driver_QueryParameters));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_QueryParameters == nullptr) )
			return LIBMCDRIVER_CIFX_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_cifx_driver_queryparametersex", (void**)&(pWrapperTable->m_Driver_QueryParametersEx));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_QueryParametersEx == nullptr) )
			return LIBMCDRIVER_CIFX_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_cifx_channelinformation_getboardname", (void**)&(pWrapperTable->m_ChannelInformation_GetBoardName));
		if ( (eLookupError != 0) || (pWrapperTable->m_ChannelInformation_GetBoardName == nullptr) )
			return LIBMCDRIVER_CIFX_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_cifx_channelinformation_getchannelindex", (void**)&(pWrapperTable->m_ChannelInformation_GetChannelIndex));
		if ( (eLookupError != 0) || (pWrapperTable->m_ChannelInformation_GetChannelIndex == nullptr) )
			return LIBMCDRIVER_CIFX_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_cifx_channelinformation_isconnected", (void**)&(pWrapperTable->m_ChannelInformation_IsConnected));
		if ( (eLookupError != 0) || (pWrapperTable->m_ChannelInformation_IsConnected == nullptr) )
			return LIBMCDRIVER_CIFX_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_cifx_channelinformation_getmillisecondssincelastupdate", (void**)&(pWrapperTable->m_ChannelInformation_GetMillisecondsSinceLastUpdate));
		if ( (eLookupError != 0) || (pWrapperTable->m_ChannelInformation_GetMillisecondsSinceLastUpdate == nullptr) )
			return LIBMCDRIVER_CIFX_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_cifx_channelinformation_getconnectionstatistics", (void**)&(pWrapperTable->m_ChannelInformation_GetConnectionStatistics));
		if ( (eLookupError != 0) || (pWrapperTable->m_ChannelInformation_GetConnectionStatistics == nullptr) )
			return LIBMCDRIVER_CIFX_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_cifx_channelinformation_valueexists", (void**)&(pWrapperTable->m_ChannelInformation_ValueExists));
		if ( (eLookupError != 0) || (pWrapperTable->m_ChannelInformation_ValueExists == nullptr) )
			return LIBMCDRIVER_CIFX_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_cifx_channelinformation_getvaluetype", (void**)&(pWrapperTable->m_ChannelInformation_GetValueType));
		if ( (eLookupError != 0) || (pWrapperTable->m_ChannelInformation_GetValueType == nullptr) )
			return LIBMCDRIVER_CIFX_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_cifx_channelinformation_getintegervaluerange", (void**)&(pWrapperTable->m_ChannelInformation_GetIntegerValueRange));
		if ( (eLookupError != 0) || (pWrapperTable->m_ChannelInformation_GetIntegerValueRange == nullptr) )
			return LIBMCDRIVER_CIFX_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_cifx_channelinformation_getinputvaluecount", (void**)&(pWrapperTable->m_ChannelInformation_GetInputValueCount));
		if ( (eLookupError != 0) || (pWrapperTable->m_ChannelInformation_GetInputValueCount == nullptr) )
			return LIBMCDRIVER_CIFX_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_cifx_channelinformation_getinputvaluename", (void**)&(pWrapperTable->m_ChannelInformation_GetInputValueName));
		if ( (eLookupError != 0) || (pWrapperTable->m_ChannelInformation_GetInputValueName == nullptr) )
			return LIBMCDRIVER_CIFX_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_cifx_channelinformation_getoutputvaluecount", (void**)&(pWrapperTable->m_ChannelInformation_GetOutputValueCount));
		if ( (eLookupError != 0) || (pWrapperTable->m_ChannelInformation_GetOutputValueCount == nullptr) )
			return LIBMCDRIVER_CIFX_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_cifx_channelinformation_getoutputvaluename", (void**)&(pWrapperTable->m_ChannelInformation_GetOutputValueName));
		if ( (eLookupError != 0) || (pWrapperTable->m_ChannelInformation_GetOutputValueName == nullptr) )
			return LIBMCDRIVER_CIFX_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_cifx_driver_cifx_settosimulationmode", (void**)&(pWrapperTable->m_Driver_CifX_SetToSimulationMode));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_CifX_SetToSimulationMode == nullptr) )
			return LIBMCDRIVER_CIFX_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_cifx_driver_cifx_issimulationmode", (void**)&(pWrapperTable->m_Driver_CifX_IsSimulationMode));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_CifX_IsSimulationMode == nullptr) )
			return LIBMCDRIVER_CIFX_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_cifx_driver_cifx_setcustomsdkresource", (void**)&(pWrapperTable->m_Driver_CifX_SetCustomSDKResource));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_CifX_SetCustomSDKResource == nullptr) )
			return LIBMCDRIVER_CIFX_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_cifx_driver_cifx_getchannelcount", (void**)&(pWrapperTable->m_Driver_CifX_GetChannelCount));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_CifX_GetChannelCount == nullptr) )
			return LIBMCDRIVER_CIFX_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_cifx_driver_cifx_getchannelinformation", (void**)&(pWrapperTable->m_Driver_CifX_GetChannelInformation));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_CifX_GetChannelInformation == nullptr) )
			return LIBMCDRIVER_CIFX_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_cifx_driver_cifx_connect", (void**)&(pWrapperTable->m_Driver_CifX_Connect));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_CifX_Connect == nullptr) )
			return LIBMCDRIVER_CIFX_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_cifx_driver_cifx_disconnect", (void**)&(pWrapperTable->m_Driver_CifX_Disconnect));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_CifX_Disconnect == nullptr) )
			return LIBMCDRIVER_CIFX_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_cifx_driver_cifx_reconnect", (void**)&(pWrapperTable->m_Driver_CifX_Reconnect));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_CifX_Reconnect == nullptr) )
			return LIBMCDRIVER_CIFX_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_cifx_driver_cifx_isconnected", (void**)&(pWrapperTable->m_Driver_CifX_IsConnected));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_CifX_IsConnected == nullptr) )
			return LIBMCDRIVER_CIFX_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_cifx_driver_cifx_valueexists", (void**)&(pWrapperTable->m_Driver_CifX_ValueExists));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_CifX_ValueExists == nullptr) )
			return LIBMCDRIVER_CIFX_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_cifx_driver_cifx_getvaluetype", (void**)&(pWrapperTable->m_Driver_CifX_GetValueType));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_CifX_GetValueType == nullptr) )
			return LIBMCDRIVER_CIFX_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_cifx_driver_cifx_getintegervaluerange", (void**)&(pWrapperTable->m_Driver_CifX_GetIntegerValueRange));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_CifX_GetIntegerValueRange == nullptr) )
			return LIBMCDRIVER_CIFX_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_cifx_driver_cifx_writeintegervalue", (void**)&(pWrapperTable->m_Driver_CifX_WriteIntegerValue));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_CifX_WriteIntegerValue == nullptr) )
			return LIBMCDRIVER_CIFX_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_cifx_driver_cifx_writeboolvalue", (void**)&(pWrapperTable->m_Driver_CifX_WriteBoolValue));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_CifX_WriteBoolValue == nullptr) )
			return LIBMCDRIVER_CIFX_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_cifx_driver_cifx_writedoublevalue", (void**)&(pWrapperTable->m_Driver_CifX_WriteDoubleValue));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_CifX_WriteDoubleValue == nullptr) )
			return LIBMCDRIVER_CIFX_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_cifx_driver_cifx_readintegervalue", (void**)&(pWrapperTable->m_Driver_CifX_ReadIntegerValue));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_CifX_ReadIntegerValue == nullptr) )
			return LIBMCDRIVER_CIFX_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_cifx_driver_cifx_readboolvalue", (void**)&(pWrapperTable->m_Driver_CifX_ReadBoolValue));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_CifX_ReadBoolValue == nullptr) )
			return LIBMCDRIVER_CIFX_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_cifx_driver_cifx_readdoublevalue", (void**)&(pWrapperTable->m_Driver_CifX_ReadDoubleValue));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_CifX_ReadDoubleValue == nullptr) )
			return LIBMCDRIVER_CIFX_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_cifx_getversion", (void**)&(pWrapperTable->m_GetVersion));
		if ( (eLookupError != 0) || (pWrapperTable->m_GetVersion == nullptr) )
			return LIBMCDRIVER_CIFX_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_cifx_getlasterror", (void**)&(pWrapperTable->m_GetLastError));
		if ( (eLookupError != 0) || (pWrapperTable->m_GetLastError == nullptr) )
			return LIBMCDRIVER_CIFX_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_cifx_releaseinstance", (void**)&(pWrapperTable->m_ReleaseInstance));
		if ( (eLookupError != 0) || (pWrapperTable->m_ReleaseInstance == nullptr) )
			return LIBMCDRIVER_CIFX_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_cifx_acquireinstance", (void**)&(pWrapperTable->m_AcquireInstance));
		if ( (eLookupError != 0) || (pWrapperTable->m_AcquireInstance == nullptr) )
			return LIBMCDRIVER_CIFX_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_cifx_injectcomponent", (void**)&(pWrapperTable->m_InjectComponent));
		if ( (eLookupError != 0) || (pWrapperTable->m_InjectComponent == nullptr) )
			return LIBMCDRIVER_CIFX_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_cifx_getsymbollookupmethod", (void**)&(pWrapperTable->m_GetSymbolLookupMethod));
		if ( (eLookupError != 0) || (pWrapperTable->m_GetSymbolLookupMethod == nullptr) )
			return LIBMCDRIVER_CIFX_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_cifx_createdriver", (void**)&(pWrapperTable->m_CreateDriver));
		if ( (eLookupError != 0) || (pWrapperTable->m_CreateDriver == nullptr) )
			return LIBMCDRIVER_CIFX_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		return LIBMCDRIVER_CIFX_SUCCESS;
}

	
	
	/**
	 * Method definitions for class CBase
	 */
	
	/**
	 * Method definitions for class CDriver
	 */
	
	/**
	* CDriver::Configure - Configures a driver with its specific configuration data.
	* @param[in] sConfigurationString - Configuration data of driver.
	*/
	void CDriver::Configure(const std::string & sConfigurationString)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_Configure(m_pHandle, sConfigurationString.c_str()));
	}
	
	/**
	* CDriver::GetName - returns the name identifier of the driver
	* @return Name of the driver.
	*/
	std::string CDriver::GetName()
	{
		LibMCDriver_CifX_uint32 bytesNeededName = 0;
		LibMCDriver_CifX_uint32 bytesWrittenName = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetName(m_pHandle, 0, &bytesNeededName, nullptr));
		std::vector<char> bufferName(bytesNeededName);
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetName(m_pHandle, bytesNeededName, &bytesWrittenName, &bufferName[0]));
		
		return std::string(&bufferName[0]);
	}
	
	/**
	* CDriver::GetType - returns the type identifier of the driver
	* @return Type of the driver.
	*/
	std::string CDriver::GetType()
	{
		LibMCDriver_CifX_uint32 bytesNeededType = 0;
		LibMCDriver_CifX_uint32 bytesWrittenType = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetType(m_pHandle, 0, &bytesNeededType, nullptr));
		std::vector<char> bufferType(bytesNeededType);
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetType(m_pHandle, bytesNeededType, &bytesWrittenType, &bufferType[0]));
		
		return std::string(&bufferType[0]);
	}
	
	/**
	* CDriver::GetVersion - returns the version identifiers of the driver
	* @param[out] nMajor - Major version.
	* @param[out] nMinor - Minor version.
	* @param[out] nMicro - Micro version.
	* @param[out] sBuild - Build identifier.
	*/
	void CDriver::GetVersion(LibMCDriver_CifX_uint32 & nMajor, LibMCDriver_CifX_uint32 & nMinor, LibMCDriver_CifX_uint32 & nMicro, std::string & sBuild)
	{
		LibMCDriver_CifX_uint32 bytesNeededBuild = 0;
		LibMCDriver_CifX_uint32 bytesWrittenBuild = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetVersion(m_pHandle, &nMajor, &nMinor, &nMicro, 0, &bytesNeededBuild, nullptr));
		std::vector<char> bufferBuild(bytesNeededBuild);
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetVersion(m_pHandle, &nMajor, &nMinor, &nMicro, bytesNeededBuild, &bytesWrittenBuild, &bufferBuild[0]));
		sBuild = std::string(&bufferBuild[0]);
	}
	
	/**
	* CDriver::QueryParameters - Updates the driver parameters in the driver environment. Should only be called in the driver thread.
	*/
	void CDriver::QueryParameters()
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_QueryParameters(m_pHandle));
	}
	
	/**
	* CDriver::QueryParametersEx - Updates the driver parameters in the driver environment. Might be called out of thread. Implementation MUST be able to handle parallel calls.
	* @param[in] pDriverUpdateInstance - Status update instance.
	*/
	void CDriver::QueryParametersEx(classParam<LibMCEnv::CDriverStatusUpdateSession> pDriverUpdateInstance)
	{
		LibMCEnvHandle hDriverUpdateInstance = pDriverUpdateInstance.GetHandle();
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_QueryParametersEx(m_pHandle, hDriverUpdateInstance));
	}
	
	/**
	 * Method definitions for class CChannelInformation
	 */
	
	/**
	* CChannelInformation::GetBoardName - Returns the name of the board that it is connected to.
	* @return Board name.
	*/
	std::string CChannelInformation::GetBoardName()
	{
		LibMCDriver_CifX_uint32 bytesNeededBoardName = 0;
		LibMCDriver_CifX_uint32 bytesWrittenBoardName = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_ChannelInformation_GetBoardName(m_pHandle, 0, &bytesNeededBoardName, nullptr));
		std::vector<char> bufferBoardName(bytesNeededBoardName);
		CheckError(m_pWrapper->m_WrapperTable.m_ChannelInformation_GetBoardName(m_pHandle, bytesNeededBoardName, &bytesWrittenBoardName, &bufferBoardName[0]));
		
		return std::string(&bufferBoardName[0]);
	}
	
	/**
	* CChannelInformation::GetChannelIndex - Returns the channel index of the board that it is connected to.
	* @return Channel Index.
	*/
	LibMCDriver_CifX_uint32 CChannelInformation::GetChannelIndex()
	{
		LibMCDriver_CifX_uint32 resultChannelIndex = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_ChannelInformation_GetChannelIndex(m_pHandle, &resultChannelIndex));
		
		return resultChannelIndex;
	}
	
	/**
	* CChannelInformation::IsConnected - Returns if the driver is connected and updates are being received.
	* @return The channel is connected.
	*/
	bool CChannelInformation::IsConnected()
	{
		bool resultChannelIsConnected = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_ChannelInformation_IsConnected(m_pHandle, &resultChannelIsConnected));
		
		return resultChannelIsConnected;
	}
	
	/**
	* CChannelInformation::GetMillisecondsSinceLastUpdate - Returns how many milliseconds ago the last channel update was received.
	* @return Returns 0, if no update has ever been received or channel is not connected.
	*/
	LibMCDriver_CifX_uint32 CChannelInformation::GetMillisecondsSinceLastUpdate()
	{
		LibMCDriver_CifX_uint32 resultMillisecondsSinceLastUpdate = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_ChannelInformation_GetMillisecondsSinceLastUpdate(m_pHandle, &resultMillisecondsSinceLastUpdate));
		
		return resultMillisecondsSinceLastUpdate;
	}
	
	/**
	* CChannelInformation::GetConnectionStatistics - Returns connection statistics for this channel.
	* @param[out] nNumberOfSucceededUpdates - Returns number of successful state updates.
	* @param[out] nNumberOfUpdateErrors - Returns number of update errors.
	* @param[out] dMinimumUpdateDurationInMs - Returns minium update duration in milliseconds.
	* @param[out] dMaximumUpdateDurationInMs - Returns maximum update duration in milliseconds.
	* @param[out] dAverageUpdateDurationInMs - Returns average update duration in milliseconds.
	* @param[out] dUpdateDurationVarianceInMs - Returns the variance of update durations in milliseconds.
	*/
	void CChannelInformation::GetConnectionStatistics(LibMCDriver_CifX_uint32 & nNumberOfSucceededUpdates, LibMCDriver_CifX_uint32 & nNumberOfUpdateErrors, LibMCDriver_CifX_double & dMinimumUpdateDurationInMs, LibMCDriver_CifX_double & dMaximumUpdateDurationInMs, LibMCDriver_CifX_double & dAverageUpdateDurationInMs, LibMCDriver_CifX_double & dUpdateDurationVarianceInMs)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_ChannelInformation_GetConnectionStatistics(m_pHandle, &nNumberOfSucceededUpdates, &nNumberOfUpdateErrors, &dMinimumUpdateDurationInMs, &dMaximumUpdateDurationInMs, &dAverageUpdateDurationInMs, &dUpdateDurationVarianceInMs));
	}
	
	/**
	* CChannelInformation::ValueExists - Returns if a value exists in this channel.
	* @param[in] sName - Name of value. Call fails if value does not exist.
	* @return Returns if a value exist.
	*/
	bool CChannelInformation::ValueExists(const std::string & sName)
	{
		bool resultExists = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_ChannelInformation_ValueExists(m_pHandle, sName.c_str(), &resultExists));
		
		return resultExists;
	}
	
	/**
	* CChannelInformation::GetValueType - Returns the type of a value. Fails if value does not exist in this channel.
	* @param[in] sName - Name of value. Call fails if value does not exist.
	* @param[out] eValueType - Type of value.
	* @param[out] bIsInput - Returns true if value is an input value.
	* @param[out] bIsOutput - Returns true if value is an output value.
	*/
	void CChannelInformation::GetValueType(const std::string & sName, eValueType & eValueType, bool & bIsInput, bool & bIsOutput)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_ChannelInformation_GetValueType(m_pHandle, sName.c_str(), &eValueType, &bIsInput, &bIsOutput));
	}
	
	/**
	* CChannelInformation::GetIntegerValueRange - Returns the possible range of an integer value.
	* @param[in] sName - Name of value. Call fails if value does not exist in this channel.
	* @param[out] nMinValue - Minimum integer value this variable can hold. Returns 0 if variable is of float type.
	* @param[out] nMaxValue - Maximum integer value this variable can hold. Returns 0 if variable is of float type.
	*/
	void CChannelInformation::GetIntegerValueRange(const std::string & sName, LibMCDriver_CifX_int64 & nMinValue, LibMCDriver_CifX_int64 & nMaxValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_ChannelInformation_GetIntegerValueRange(m_pHandle, sName.c_str(), &nMinValue, &nMaxValue));
	}
	
	/**
	* CChannelInformation::GetInputValueCount - Returns number of input variables on this channel.
	* @return Number of input variables.
	*/
	LibMCDriver_CifX_uint32 CChannelInformation::GetInputValueCount()
	{
		LibMCDriver_CifX_uint32 resultCount = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_ChannelInformation_GetInputValueCount(m_pHandle, &resultCount));
		
		return resultCount;
	}
	
	/**
	* CChannelInformation::GetInputValueName - Returns the name of an input variable on this channel.
	* @param[in] nIndex - Index of input variable. 0-based. Fails if larger or equal than the count.
	* @return Name of value.
	*/
	std::string CChannelInformation::GetInputValueName(const LibMCDriver_CifX_uint32 nIndex)
	{
		LibMCDriver_CifX_uint32 bytesNeededName = 0;
		LibMCDriver_CifX_uint32 bytesWrittenName = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_ChannelInformation_GetInputValueName(m_pHandle, nIndex, 0, &bytesNeededName, nullptr));
		std::vector<char> bufferName(bytesNeededName);
		CheckError(m_pWrapper->m_WrapperTable.m_ChannelInformation_GetInputValueName(m_pHandle, nIndex, bytesNeededName, &bytesWrittenName, &bufferName[0]));
		
		return std::string(&bufferName[0]);
	}
	
	/**
	* CChannelInformation::GetOutputValueCount - Returns number of output variables on this channel.
	* @return Number of input variables.
	*/
	LibMCDriver_CifX_uint32 CChannelInformation::GetOutputValueCount()
	{
		LibMCDriver_CifX_uint32 resultCount = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_ChannelInformation_GetOutputValueCount(m_pHandle, &resultCount));
		
		return resultCount;
	}
	
	/**
	* CChannelInformation::GetOutputValueName - Returns the name of an output variable on this channel.
	* @param[in] nIndex - Index of output variable. 0-based. Fails if larger or equal than the count.
	* @return Name of value.
	*/
	std::string CChannelInformation::GetOutputValueName(const LibMCDriver_CifX_uint32 nIndex)
	{
		LibMCDriver_CifX_uint32 bytesNeededName = 0;
		LibMCDriver_CifX_uint32 bytesWrittenName = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_ChannelInformation_GetOutputValueName(m_pHandle, nIndex, 0, &bytesNeededName, nullptr));
		std::vector<char> bufferName(bytesNeededName);
		CheckError(m_pWrapper->m_WrapperTable.m_ChannelInformation_GetOutputValueName(m_pHandle, nIndex, bytesNeededName, &bytesWrittenName, &bufferName[0]));
		
		return std::string(&bufferName[0]);
	}
	
	/**
	 * Method definitions for class CDriver_CifX
	 */
	
	/**
	* CDriver_CifX::SetToSimulationMode - Turns the driver into a simulation mode.
	*/
	void CDriver_CifX::SetToSimulationMode()
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_CifX_SetToSimulationMode(m_pHandle));
	}
	
	/**
	* CDriver_CifX::IsSimulationMode - Returns if the driver is in simulation mode.
	* @return Flag if driver is in simulation mode.
	*/
	bool CDriver_CifX::IsSimulationMode()
	{
		bool resultSimulationModeEnabled = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_CifX_IsSimulationMode(m_pHandle, &resultSimulationModeEnabled));
		
		return resultSimulationModeEnabled;
	}
	
	/**
	* CDriver_CifX::SetCustomSDKResource - Sets the machine resource name of the cifX SDK to load. MUST be called before Connect or it has no effect.
	* @param[in] sResourceName - Resource name of core machine package. Empty means standard naming applies.
	*/
	void CDriver_CifX::SetCustomSDKResource(const std::string & sResourceName)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_CifX_SetCustomSDKResource(m_pHandle, sResourceName.c_str()));
	}
	
	/**
	* CDriver_CifX::GetChannelCount - Returns the number of configured channels.
	* @return Returns the number of channels.
	*/
	LibMCDriver_CifX_uint32 CDriver_CifX::GetChannelCount()
	{
		LibMCDriver_CifX_uint32 resultChannelCount = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_CifX_GetChannelCount(m_pHandle, &resultChannelCount));
		
		return resultChannelCount;
	}
	
	/**
	* CDriver_CifX::GetChannelInformation - Returns the channel information by index.
	* @param[in] nChannelIndex - Index of the board. MUST be between 0 and GetBoardCount - 1.
	* @return Channel Information Instance.
	*/
	PChannelInformation CDriver_CifX::GetChannelInformation(const LibMCDriver_CifX_uint32 nChannelIndex)
	{
		LibMCDriver_CifXHandle hChannelInformationInstance = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_CifX_GetChannelInformation(m_pHandle, nChannelIndex, &hChannelInformationInstance));
		
		if (!hChannelInformationInstance) {
			CheckError(LIBMCDRIVER_CIFX_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CChannelInformation>(m_pWrapper, hChannelInformationInstance);
	}
	
	/**
	* CDriver_CifX::Connect - Connects to a cifX board by configuration.
	*/
	void CDriver_CifX::Connect()
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_CifX_Connect(m_pHandle));
	}
	
	/**
	* CDriver_CifX::Disconnect - Disconnects from cifX board.
	*/
	void CDriver_CifX::Disconnect()
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_CifX_Disconnect(m_pHandle));
	}
	
	/**
	* CDriver_CifX::Reconnect - Reconnects to the cifX board.
	*/
	void CDriver_CifX::Reconnect()
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_CifX_Reconnect(m_pHandle));
	}
	
	/**
	* CDriver_CifX::IsConnected - Returns if the driver is connected.
	* @return All selected boards are connected.
	*/
	bool CDriver_CifX::IsConnected()
	{
		bool resultBoardsAreConnected = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_CifX_IsConnected(m_pHandle, &resultBoardsAreConnected));
		
		return resultBoardsAreConnected;
	}
	
	/**
	* CDriver_CifX::ValueExists - Returns if a value exists.
	* @param[in] sName - Name of value. Call fails if value does not exist.
	* @return Returns if a value exist.
	*/
	bool CDriver_CifX::ValueExists(const std::string & sName)
	{
		bool resultExists = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_CifX_ValueExists(m_pHandle, sName.c_str(), &resultExists));
		
		return resultExists;
	}
	
	/**
	* CDriver_CifX::GetValueType - Returns the type of a value. Fails if value does not exist.
	* @param[in] sName - Name of value. Call fails if value does not exist.
	* @param[out] eValueType - Type of value.
	* @param[out] bIsInput - Returns true if value is an input value.
	* @param[out] bIsOutput - Returns true if value is an output value.
	*/
	void CDriver_CifX::GetValueType(const std::string & sName, eValueType & eValueType, bool & bIsInput, bool & bIsOutput)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_CifX_GetValueType(m_pHandle, sName.c_str(), &eValueType, &bIsInput, &bIsOutput));
	}
	
	/**
	* CDriver_CifX::GetIntegerValueRange - Returns the possible range of an integer value.
	* @param[in] sName - Name of value. Call fails if value does not exist.
	* @param[out] nMinValue - Minimum integer value this variable can hold. Returns 0 if variable is of float type.
	* @param[out] nMaxValue - Maximum integer value this variable can hold. Returns 0 if variable is of float type.
	*/
	void CDriver_CifX::GetIntegerValueRange(const std::string & sName, LibMCDriver_CifX_int64 & nMinValue, LibMCDriver_CifX_int64 & nMaxValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_CifX_GetIntegerValueRange(m_pHandle, sName.c_str(), &nMinValue, &nMaxValue));
	}
	
	/**
	* CDriver_CifX::WriteIntegerValue - Writes an output integer value. Value MUST be within the bit-range of the value type defined by the configuration.
	* @param[in] sName - Name of value. Call fails if value does not exist.
	* @param[in] nValue - Value to set. The named value MUST be of type integer or boolean. If value is of boolean type, 0 means false and every other value means true.
	* @param[in] bClampToRange - If Integer value is outside of the permissible range, should they be clamped the value to the boundaries (ClampToRange is true) or an error raised (ClampToRange is false).
	* @param[in] nTimeOutInMs - If Timeout is larger than 0, the call waits until the end point has acknowledged that the new value has been set. If timeout is 0, the call returns immediately, even if the end point might not have changed the value yet.
	*/
	void CDriver_CifX::WriteIntegerValue(const std::string & sName, const LibMCDriver_CifX_int64 nValue, const bool bClampToRange, const LibMCDriver_CifX_uint32 nTimeOutInMs)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_CifX_WriteIntegerValue(m_pHandle, sName.c_str(), nValue, bClampToRange, nTimeOutInMs));
	}
	
	/**
	* CDriver_CifX::WriteBoolValue - Writes an output boolean value.
	* @param[in] sName - Name of value. Call fails if value does not exist.
	* @param[in] bValue - Value to set. The named value MUST be of type boolean.
	* @param[in] nTimeOutInMs - If Timeout is larger than 0, the call waits until the end point has acknowledged that the new value has been set. If timeout is 0, the call returns immediately, even if the end point might not have changed the value yet.
	*/
	void CDriver_CifX::WriteBoolValue(const std::string & sName, const bool bValue, const LibMCDriver_CifX_uint32 nTimeOutInMs)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_CifX_WriteBoolValue(m_pHandle, sName.c_str(), bValue, nTimeOutInMs));
	}
	
	/**
	* CDriver_CifX::WriteDoubleValue - Writes an output float value. Accuracy will be determined by the bit-range of the value defined by the configuration.
	* @param[in] sName - Name of value. Call fails if value does not exist.
	* @param[in] dValue - Value to set. The named value MUST be of type double or float.
	* @param[in] nTimeOutInMs - If Timeout is larger than 0, the call waits until the end point has acknowledged that the new value has been set. If timeout is 0, the call returns immediately, even if the end point might not have changed the value yet.
	*/
	void CDriver_CifX::WriteDoubleValue(const std::string & sName, const LibMCDriver_CifX_double dValue, const LibMCDriver_CifX_uint32 nTimeOutInMs)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_CifX_WriteDoubleValue(m_pHandle, sName.c_str(), dValue, nTimeOutInMs));
	}
	
	/**
	* CDriver_CifX::ReadIntegerValue - Reads an input integer value.
	* @param[in] sName - Name of value. Call fails if value does not exist.
	* @return Value that was read.
	*/
	LibMCDriver_CifX_int64 CDriver_CifX::ReadIntegerValue(const std::string & sName)
	{
		LibMCDriver_CifX_int64 resultValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_CifX_ReadIntegerValue(m_pHandle, sName.c_str(), &resultValue));
		
		return resultValue;
	}
	
	/**
	* CDriver_CifX::ReadBoolValue - Reads an bool integer value.
	* @param[in] sName - Name of value. Call fails if value does not exist.
	* @return Value that was read.
	*/
	bool CDriver_CifX::ReadBoolValue(const std::string & sName)
	{
		bool resultValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_CifX_ReadBoolValue(m_pHandle, sName.c_str(), &resultValue));
		
		return resultValue;
	}
	
	/**
	* CDriver_CifX::ReadDoubleValue - Reads an input float value.
	* @param[in] sName - Name of value. Call fails if value does not exist.
	* @return Value that was read.
	*/
	LibMCDriver_CifX_double CDriver_CifX::ReadDoubleValue(const std::string & sName)
	{
		LibMCDriver_CifX_double resultValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_CifX_ReadDoubleValue(m_pHandle, sName.c_str(), &resultValue));
		
		return resultValue;
	}

} // namespace LibMCDriver_CifX

#endif // __LIBMCDRIVER_CIFX_CPPHEADER_DYNAMIC_CPP

