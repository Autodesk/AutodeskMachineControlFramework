/*++

Copyright (C) 2023 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.8.0-develop.

Abstract: This is an autogenerated C++-Header file in order to allow an easy
 use of MC Driver cifX

Interface version: 1.0.0

*/

#ifndef __LIBMCDRIVER_CIFX_HEADER_CPP
#define __LIBMCDRIVER_CIFX_HEADER_CPP

#ifdef __LIBMCDRIVER_CIFX_EXPORTS
#ifdef _WIN32
#define LIBMCDRIVER_CIFX_DECLSPEC __declspec (dllexport)
#else // _WIN32
#define LIBMCDRIVER_CIFX_DECLSPEC __attribute__((visibility("default")))
#endif // _WIN32
#else // __LIBMCDRIVER_CIFX_EXPORTS
#define LIBMCDRIVER_CIFX_DECLSPEC
#endif // __LIBMCDRIVER_CIFX_EXPORTS

#include "libmcdriver_cifx_types.hpp"

#include "libmcenv_dynamic.hpp"

#ifdef __cplusplus
extern "C" {
#endif

/*************************************************************************************************************************
 Class definition for Base
**************************************************************************************************************************/

/*************************************************************************************************************************
 Class definition for Driver
**************************************************************************************************************************/

/**
* Configures a driver with its specific configuration data.
*
* @param[in] pDriver - Driver instance.
* @param[in] pConfigurationString - Configuration data of driver.
* @return error code or 0 (success)
*/
LIBMCDRIVER_CIFX_DECLSPEC LibMCDriver_CifXResult libmcdriver_cifx_driver_configure(LibMCDriver_CifX_Driver pDriver, const char * pConfigurationString);

/**
* returns the name identifier of the driver
*
* @param[in] pDriver - Driver instance.
* @param[in] nNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNameBuffer -  buffer of Name of the driver., may be NULL
* @return error code or 0 (success)
*/
LIBMCDRIVER_CIFX_DECLSPEC LibMCDriver_CifXResult libmcdriver_cifx_driver_getname(LibMCDriver_CifX_Driver pDriver, const LibMCDriver_CifX_uint32 nNameBufferSize, LibMCDriver_CifX_uint32* pNameNeededChars, char * pNameBuffer);

/**
* returns the type identifier of the driver
*
* @param[in] pDriver - Driver instance.
* @param[in] nTypeBufferSize - size of the buffer (including trailing 0)
* @param[out] pTypeNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pTypeBuffer -  buffer of Type of the driver., may be NULL
* @return error code or 0 (success)
*/
LIBMCDRIVER_CIFX_DECLSPEC LibMCDriver_CifXResult libmcdriver_cifx_driver_gettype(LibMCDriver_CifX_Driver pDriver, const LibMCDriver_CifX_uint32 nTypeBufferSize, LibMCDriver_CifX_uint32* pTypeNeededChars, char * pTypeBuffer);

/**
* returns the version identifiers of the driver
*
* @param[in] pDriver - Driver instance.
* @param[out] pMajor - Major version.
* @param[out] pMinor - Minor version.
* @param[out] pMicro - Micro version.
* @param[in] nBuildBufferSize - size of the buffer (including trailing 0)
* @param[out] pBuildNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pBuildBuffer -  buffer of Build identifier., may be NULL
* @return error code or 0 (success)
*/
LIBMCDRIVER_CIFX_DECLSPEC LibMCDriver_CifXResult libmcdriver_cifx_driver_getversion(LibMCDriver_CifX_Driver pDriver, LibMCDriver_CifX_uint32 * pMajor, LibMCDriver_CifX_uint32 * pMinor, LibMCDriver_CifX_uint32 * pMicro, const LibMCDriver_CifX_uint32 nBuildBufferSize, LibMCDriver_CifX_uint32* pBuildNeededChars, char * pBuildBuffer);

/**
* returns the header information
*
* @param[in] pDriver - Driver instance.
* @param[in] nNameSpaceBufferSize - size of the buffer (including trailing 0)
* @param[out] pNameSpaceNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNameSpaceBuffer -  buffer of NameSpace of the driver., may be NULL
* @param[in] nBaseNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pBaseNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pBaseNameBuffer -  buffer of BaseName of the driver., may be NULL
* @return error code or 0 (success)
*/
LIBMCDRIVER_CIFX_DECLSPEC LibMCDriver_CifXResult libmcdriver_cifx_driver_getheaderinformation(LibMCDriver_CifX_Driver pDriver, const LibMCDriver_CifX_uint32 nNameSpaceBufferSize, LibMCDriver_CifX_uint32* pNameSpaceNeededChars, char * pNameSpaceBuffer, const LibMCDriver_CifX_uint32 nBaseNameBufferSize, LibMCDriver_CifX_uint32* pBaseNameNeededChars, char * pBaseNameBuffer);

/**
* Stores the driver parameters in the driver environment.
*
* @param[in] pDriver - Driver instance.
* @return error code or 0 (success)
*/
LIBMCDRIVER_CIFX_DECLSPEC LibMCDriver_CifXResult libmcdriver_cifx_driver_queryparameters(LibMCDriver_CifX_Driver pDriver);

/*************************************************************************************************************************
 Class definition for BoardInformation
**************************************************************************************************************************/

/*************************************************************************************************************************
 Class definition for Driver_CifX
**************************************************************************************************************************/

/**
* Turns the driver into a simulation mode.
*
* @param[in] pDriver_CifX - Driver_CifX instance.
* @return error code or 0 (success)
*/
LIBMCDRIVER_CIFX_DECLSPEC LibMCDriver_CifXResult libmcdriver_cifx_driver_cifx_settosimulationmode(LibMCDriver_CifX_Driver_CifX pDriver_CifX);

/**
* Returns if the driver is in simulation mode.
*
* @param[in] pDriver_CifX - Driver_CifX instance.
* @param[out] pSimulationModeEnabled - Flag if driver is in simulation mode.
* @return error code or 0 (success)
*/
LIBMCDRIVER_CIFX_DECLSPEC LibMCDriver_CifXResult libmcdriver_cifx_driver_cifx_issimulationmode(LibMCDriver_CifX_Driver_CifX pDriver_CifX, bool * pSimulationModeEnabled);

/**
* Sets the machine resource name of the cifX SDK to load. MUST be called before Connect or it has no effect.
*
* @param[in] pDriver_CifX - Driver_CifX instance.
* @param[in] pResourceName - Resource name of core machine package. Empty means standard naming applies.
* @return error code or 0 (success)
*/
LIBMCDRIVER_CIFX_DECLSPEC LibMCDriver_CifXResult libmcdriver_cifx_driver_cifx_setcustomsdkresource(LibMCDriver_CifX_Driver_CifX pDriver_CifX, const char * pResourceName);

/**
* Enumerates the boards attached to the system.
*
* @param[in] pDriver_CifX - Driver_CifX instance.
* @param[out] pBoardCount - Returns the number of boards.
* @return error code or 0 (success)
*/
LIBMCDRIVER_CIFX_DECLSPEC LibMCDriver_CifXResult libmcdriver_cifx_driver_cifx_enumerateboards(LibMCDriver_CifX_Driver_CifX pDriver_CifX, LibMCDriver_CifX_uint32 * pBoardCount);

/**
* Returns the board information by index.
*
* @param[in] pDriver_CifX - Driver_CifX instance.
* @param[in] nBoardIndex - Index of the board. MUST be between 0 and GetBoardCount - 1.
* @param[out] pBoardInformationInstance - Board Information Instance.
* @return error code or 0 (success)
*/
LIBMCDRIVER_CIFX_DECLSPEC LibMCDriver_CifXResult libmcdriver_cifx_driver_cifx_getboardinformation(LibMCDriver_CifX_Driver_CifX pDriver_CifX, LibMCDriver_CifX_uint32 nBoardIndex, LibMCDriver_CifX_BoardInformation * pBoardInformationInstance);

/**
* Connects to a cifX board by configuration.
*
* @param[in] pDriver_CifX - Driver_CifX instance.
* @return error code or 0 (success)
*/
LIBMCDRIVER_CIFX_DECLSPEC LibMCDriver_CifXResult libmcdriver_cifx_driver_cifx_connect(LibMCDriver_CifX_Driver_CifX pDriver_CifX);

/**
* Disconnects from cifX board.
*
* @param[in] pDriver_CifX - Driver_CifX instance.
* @return error code or 0 (success)
*/
LIBMCDRIVER_CIFX_DECLSPEC LibMCDriver_CifXResult libmcdriver_cifx_driver_cifx_disconnect(LibMCDriver_CifX_Driver_CifX pDriver_CifX);

/**
* Returns if the driver is connected.
*
* @param[in] pDriver_CifX - Driver_CifX instance.
* @param[out] pBoardsAreConnected - All selected boards are connected.
* @return error code or 0 (success)
*/
LIBMCDRIVER_CIFX_DECLSPEC LibMCDriver_CifXResult libmcdriver_cifx_driver_cifx_isconnected(LibMCDriver_CifX_Driver_CifX pDriver_CifX, bool * pBoardsAreConnected);

/**
* Returns if a value exists.
*
* @param[in] pDriver_CifX - Driver_CifX instance.
* @param[in] pName - Name of value. Call fails if value does not exist.
* @param[out] pExists - Returns if a value exist.
* @return error code or 0 (success)
*/
LIBMCDRIVER_CIFX_DECLSPEC LibMCDriver_CifXResult libmcdriver_cifx_driver_cifx_valueexists(LibMCDriver_CifX_Driver_CifX pDriver_CifX, const char * pName, bool * pExists);

/**
* Writes an output integer value. Value MUST be within the bit-range of the value type defined by the configuration.
*
* @param[in] pDriver_CifX - Driver_CifX instance.
* @param[in] pName - Name of value. Call fails if value does not exist.
* @param[in] nValue - Value to set. The named value MUST be of type integer or boolean. If value is of boolean type, 0 means false and every other value means true.
* @param[in] nTimeOutInMs - If Timeout is larger than 0, the call waits until the end point has acknowledged that the new value has been set. If timeout is 0, the call returns immediately, even if the end point might not have changed the value yet.
* @return error code or 0 (success)
*/
LIBMCDRIVER_CIFX_DECLSPEC LibMCDriver_CifXResult libmcdriver_cifx_driver_cifx_writeintegervalue(LibMCDriver_CifX_Driver_CifX pDriver_CifX, const char * pName, LibMCDriver_CifX_int64 nValue, LibMCDriver_CifX_uint32 nTimeOutInMs);

/**
* Writes an output boolean value.
*
* @param[in] pDriver_CifX - Driver_CifX instance.
* @param[in] pName - Name of value. Call fails if value does not exist.
* @param[in] bValue - Value to set. The named value MUST be of type boolean.
* @param[in] nTimeOutInMs - If Timeout is larger than 0, the call waits until the end point has acknowledged that the new value has been set. If timeout is 0, the call returns immediately, even if the end point might not have changed the value yet.
* @return error code or 0 (success)
*/
LIBMCDRIVER_CIFX_DECLSPEC LibMCDriver_CifXResult libmcdriver_cifx_driver_cifx_writeboolvalue(LibMCDriver_CifX_Driver_CifX pDriver_CifX, const char * pName, bool bValue, LibMCDriver_CifX_uint32 nTimeOutInMs);

/**
* Writes an output float value. Accuracy will be determined by the bit-range of the value defined by the configuration.
*
* @param[in] pDriver_CifX - Driver_CifX instance.
* @param[in] pName - Name of value. Call fails if value does not exist.
* @param[in] dValue - Value to set. The named value MUST be of type double or float.
* @param[in] nTimeOutInMs - If Timeout is larger than 0, the call waits until the end point has acknowledged that the new value has been set. If timeout is 0, the call returns immediately, even if the end point might not have changed the value yet.
* @return error code or 0 (success)
*/
LIBMCDRIVER_CIFX_DECLSPEC LibMCDriver_CifXResult libmcdriver_cifx_driver_cifx_writedoublevalue(LibMCDriver_CifX_Driver_CifX pDriver_CifX, const char * pName, LibMCDriver_CifX_double dValue, LibMCDriver_CifX_uint32 nTimeOutInMs);

/**
* Reads an input integer value.
*
* @param[in] pDriver_CifX - Driver_CifX instance.
* @param[in] pName - Name of value. Call fails if value does not exist.
* @param[out] pValue - Value that was read.
* @return error code or 0 (success)
*/
LIBMCDRIVER_CIFX_DECLSPEC LibMCDriver_CifXResult libmcdriver_cifx_driver_cifx_readintegervalue(LibMCDriver_CifX_Driver_CifX pDriver_CifX, const char * pName, LibMCDriver_CifX_int64 * pValue);

/**
* Reads an bool integer value.
*
* @param[in] pDriver_CifX - Driver_CifX instance.
* @param[in] pName - Name of value. Call fails if value does not exist.
* @param[out] pValue - Value that was read.
* @return error code or 0 (success)
*/
LIBMCDRIVER_CIFX_DECLSPEC LibMCDriver_CifXResult libmcdriver_cifx_driver_cifx_readboolvalue(LibMCDriver_CifX_Driver_CifX pDriver_CifX, const char * pName, bool * pValue);

/**
* Reads an input float value.
*
* @param[in] pDriver_CifX - Driver_CifX instance.
* @param[in] pName - Name of value. Call fails if value does not exist.
* @param[out] pValue - Value that was read.
* @return error code or 0 (success)
*/
LIBMCDRIVER_CIFX_DECLSPEC LibMCDriver_CifXResult libmcdriver_cifx_driver_cifx_readdoublevalue(LibMCDriver_CifX_Driver_CifX pDriver_CifX, const char * pName, LibMCDriver_CifX_double * pValue);

/*************************************************************************************************************************
 Global functions
**************************************************************************************************************************/

/**
* retrieves the binary version of this library.
*
* @param[out] pMajor - returns the major version of this library
* @param[out] pMinor - returns the minor version of this library
* @param[out] pMicro - returns the micro version of this library
* @return error code or 0 (success)
*/
LIBMCDRIVER_CIFX_DECLSPEC LibMCDriver_CifXResult libmcdriver_cifx_getversion(LibMCDriver_CifX_uint32 * pMajor, LibMCDriver_CifX_uint32 * pMinor, LibMCDriver_CifX_uint32 * pMicro);

/**
* Returns the last error recorded on this object
*
* @param[in] pInstance - Instance Handle
* @param[in] nErrorMessageBufferSize - size of the buffer (including trailing 0)
* @param[out] pErrorMessageNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pErrorMessageBuffer -  buffer of Message of the last error, may be NULL
* @param[out] pHasError - Is there a last error to query
* @return error code or 0 (success)
*/
LIBMCDRIVER_CIFX_DECLSPEC LibMCDriver_CifXResult libmcdriver_cifx_getlasterror(LibMCDriver_CifX_Base pInstance, const LibMCDriver_CifX_uint32 nErrorMessageBufferSize, LibMCDriver_CifX_uint32* pErrorMessageNeededChars, char * pErrorMessageBuffer, bool * pHasError);

/**
* Releases shared ownership of an Instance
*
* @param[in] pInstance - Instance Handle
* @return error code or 0 (success)
*/
LIBMCDRIVER_CIFX_DECLSPEC LibMCDriver_CifXResult libmcdriver_cifx_releaseinstance(LibMCDriver_CifX_Base pInstance);

/**
* Acquires shared ownership of an Instance
*
* @param[in] pInstance - Instance Handle
* @return error code or 0 (success)
*/
LIBMCDRIVER_CIFX_DECLSPEC LibMCDriver_CifXResult libmcdriver_cifx_acquireinstance(LibMCDriver_CifX_Base pInstance);

/**
* Injects an imported component for usage within this component
*
* @param[in] pNameSpace - NameSpace of the injected component
* @param[in] pSymbolAddressMethod - Address of the SymbolAddressMethod of the injected component
* @return error code or 0 (success)
*/
LIBMCDRIVER_CIFX_DECLSPEC LibMCDriver_CifXResult libmcdriver_cifx_injectcomponent(const char * pNameSpace, LibMCDriver_CifX_pvoid pSymbolAddressMethod);

/**
* Returns the address of the SymbolLookupMethod
*
* @param[out] pSymbolLookupMethod - Address of the SymbolAddressMethod
* @return error code or 0 (success)
*/
LIBMCDRIVER_CIFX_DECLSPEC LibMCDriver_CifXResult libmcdriver_cifx_getsymbollookupmethod(LibMCDriver_CifX_pvoid * pSymbolLookupMethod);

/**
* Creates a driver instance with a specific name.
*
* @param[in] pName - Name of driver to be created.
* @param[in] pType - Type of driver to be created.
* @param[in] pDriverEnvironment - Environment of this driver.
* @param[out] pInstance - New Driver instance
* @return error code or 0 (success)
*/
LIBMCDRIVER_CIFX_DECLSPEC LibMCDriver_CifXResult libmcdriver_cifx_createdriver(const char * pName, const char * pType, LibMCEnv_DriverEnvironment pDriverEnvironment, LibMCDriver_CifX_Driver * pInstance);

#ifdef __cplusplus
}
#endif

#endif // __LIBMCDRIVER_CIFX_HEADER_CPP

