/*++

Copyright (C) 2024 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.8.0-develop.

Abstract: This is an autogenerated C++ implementation file in order to allow easy
development of Generic Linux Framebuffer Driver. The functions in this file need to be implemented. It needs to be generated only once.

Interface version: 2.0.0

*/

#include "libmcdriver_framebuffer_abi.hpp"
#include "libmcdriver_framebuffer_interfaces.hpp"
#include "libmcdriver_framebuffer_interfaceexception.hpp"

#include <map>

using namespace LibMCDriver_FrameBuffer::Impl;

LibMCDriver_FrameBufferResult handleLibMCDriver_FrameBufferException(IBase * pIBaseClass, ELibMCDriver_FrameBufferInterfaceException & Exception)
{
	LibMCDriver_FrameBufferResult errorCode = Exception.getErrorCode();

	if (pIBaseClass != nullptr)
		pIBaseClass->RegisterErrorMessage(Exception.what());

	return errorCode;
}

LibMCDriver_FrameBufferResult handleStdException(IBase * pIBaseClass, std::exception & Exception)
{
	LibMCDriver_FrameBufferResult errorCode = LIBMCDRIVER_FRAMEBUFFER_ERROR_GENERICEXCEPTION;

	if (pIBaseClass != nullptr)
		pIBaseClass->RegisterErrorMessage(Exception.what());

	return errorCode;
}

LibMCDriver_FrameBufferResult handleUnhandledException(IBase * pIBaseClass)
{
	LibMCDriver_FrameBufferResult errorCode = LIBMCDRIVER_FRAMEBUFFER_ERROR_GENERICEXCEPTION;

	if (pIBaseClass != nullptr)
		pIBaseClass->RegisterErrorMessage("Unhandled Exception");

	return errorCode;
}



/*************************************************************************************************************************
 Class implementation for Base
**************************************************************************************************************************/

/*************************************************************************************************************************
 Class implementation for Driver
**************************************************************************************************************************/
LibMCDriver_FrameBufferResult libmcdriver_framebuffer_driver_configure(LibMCDriver_FrameBuffer_Driver pDriver, const char * pConfigurationString)
{
	IBase* pIBaseClass = (IBase *)pDriver;

	try {
		if (pConfigurationString == nullptr)
			throw ELibMCDriver_FrameBufferInterfaceException (LIBMCDRIVER_FRAMEBUFFER_ERROR_INVALIDPARAM);
		std::string sConfigurationString(pConfigurationString);
		IDriver* pIDriver = dynamic_cast<IDriver*>(pIBaseClass);
		if (!pIDriver)
			throw ELibMCDriver_FrameBufferInterfaceException(LIBMCDRIVER_FRAMEBUFFER_ERROR_INVALIDCAST);
		
		pIDriver->Configure(sConfigurationString);

		return LIBMCDRIVER_FRAMEBUFFER_SUCCESS;
	}
	catch (ELibMCDriver_FrameBufferInterfaceException & Exception) {
		return handleLibMCDriver_FrameBufferException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_FrameBufferResult libmcdriver_framebuffer_driver_getname(LibMCDriver_FrameBuffer_Driver pDriver, const LibMCDriver_FrameBuffer_uint32 nNameBufferSize, LibMCDriver_FrameBuffer_uint32* pNameNeededChars, char * pNameBuffer)
{
	IBase* pIBaseClass = (IBase *)pDriver;

	try {
		if ( (!pNameBuffer) && !(pNameNeededChars) )
			throw ELibMCDriver_FrameBufferInterfaceException (LIBMCDRIVER_FRAMEBUFFER_ERROR_INVALIDPARAM);
		std::string sName("");
		IDriver* pIDriver = dynamic_cast<IDriver*>(pIBaseClass);
		if (!pIDriver)
			throw ELibMCDriver_FrameBufferInterfaceException(LIBMCDRIVER_FRAMEBUFFER_ERROR_INVALIDCAST);
		
		bool isCacheCall = (pNameBuffer == nullptr);
		if (isCacheCall) {
			sName = pIDriver->GetName();

			pIDriver->_setCache (new ParameterCache_1<std::string> (sName));
		}
		else {
			auto cache = dynamic_cast<ParameterCache_1<std::string>*> (pIDriver->_getCache ());
			if (cache == nullptr)
				throw ELibMCDriver_FrameBufferInterfaceException(LIBMCDRIVER_FRAMEBUFFER_ERROR_INVALIDCAST);
			cache->retrieveData (sName);
			pIDriver->_setCache (nullptr);
		}
		
		if (pNameNeededChars)
			*pNameNeededChars = (LibMCDriver_FrameBuffer_uint32) (sName.size()+1);
		if (pNameBuffer) {
			if (sName.size() >= nNameBufferSize)
				throw ELibMCDriver_FrameBufferInterfaceException (LIBMCDRIVER_FRAMEBUFFER_ERROR_BUFFERTOOSMALL);
			for (size_t iName = 0; iName < sName.size(); iName++)
				pNameBuffer[iName] = sName[iName];
			pNameBuffer[sName.size()] = 0;
		}
		return LIBMCDRIVER_FRAMEBUFFER_SUCCESS;
	}
	catch (ELibMCDriver_FrameBufferInterfaceException & Exception) {
		return handleLibMCDriver_FrameBufferException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_FrameBufferResult libmcdriver_framebuffer_driver_gettype(LibMCDriver_FrameBuffer_Driver pDriver, const LibMCDriver_FrameBuffer_uint32 nTypeBufferSize, LibMCDriver_FrameBuffer_uint32* pTypeNeededChars, char * pTypeBuffer)
{
	IBase* pIBaseClass = (IBase *)pDriver;

	try {
		if ( (!pTypeBuffer) && !(pTypeNeededChars) )
			throw ELibMCDriver_FrameBufferInterfaceException (LIBMCDRIVER_FRAMEBUFFER_ERROR_INVALIDPARAM);
		std::string sType("");
		IDriver* pIDriver = dynamic_cast<IDriver*>(pIBaseClass);
		if (!pIDriver)
			throw ELibMCDriver_FrameBufferInterfaceException(LIBMCDRIVER_FRAMEBUFFER_ERROR_INVALIDCAST);
		
		bool isCacheCall = (pTypeBuffer == nullptr);
		if (isCacheCall) {
			sType = pIDriver->GetType();

			pIDriver->_setCache (new ParameterCache_1<std::string> (sType));
		}
		else {
			auto cache = dynamic_cast<ParameterCache_1<std::string>*> (pIDriver->_getCache ());
			if (cache == nullptr)
				throw ELibMCDriver_FrameBufferInterfaceException(LIBMCDRIVER_FRAMEBUFFER_ERROR_INVALIDCAST);
			cache->retrieveData (sType);
			pIDriver->_setCache (nullptr);
		}
		
		if (pTypeNeededChars)
			*pTypeNeededChars = (LibMCDriver_FrameBuffer_uint32) (sType.size()+1);
		if (pTypeBuffer) {
			if (sType.size() >= nTypeBufferSize)
				throw ELibMCDriver_FrameBufferInterfaceException (LIBMCDRIVER_FRAMEBUFFER_ERROR_BUFFERTOOSMALL);
			for (size_t iType = 0; iType < sType.size(); iType++)
				pTypeBuffer[iType] = sType[iType];
			pTypeBuffer[sType.size()] = 0;
		}
		return LIBMCDRIVER_FRAMEBUFFER_SUCCESS;
	}
	catch (ELibMCDriver_FrameBufferInterfaceException & Exception) {
		return handleLibMCDriver_FrameBufferException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_FrameBufferResult libmcdriver_framebuffer_driver_getversion(LibMCDriver_FrameBuffer_Driver pDriver, LibMCDriver_FrameBuffer_uint32 * pMajor, LibMCDriver_FrameBuffer_uint32 * pMinor, LibMCDriver_FrameBuffer_uint32 * pMicro, const LibMCDriver_FrameBuffer_uint32 nBuildBufferSize, LibMCDriver_FrameBuffer_uint32* pBuildNeededChars, char * pBuildBuffer)
{
	IBase* pIBaseClass = (IBase *)pDriver;

	try {
		if (!pMajor)
			throw ELibMCDriver_FrameBufferInterfaceException (LIBMCDRIVER_FRAMEBUFFER_ERROR_INVALIDPARAM);
		if (!pMinor)
			throw ELibMCDriver_FrameBufferInterfaceException (LIBMCDRIVER_FRAMEBUFFER_ERROR_INVALIDPARAM);
		if (!pMicro)
			throw ELibMCDriver_FrameBufferInterfaceException (LIBMCDRIVER_FRAMEBUFFER_ERROR_INVALIDPARAM);
		if ( (!pBuildBuffer) && !(pBuildNeededChars) )
			throw ELibMCDriver_FrameBufferInterfaceException (LIBMCDRIVER_FRAMEBUFFER_ERROR_INVALIDPARAM);
		std::string sBuild("");
		IDriver* pIDriver = dynamic_cast<IDriver*>(pIBaseClass);
		if (!pIDriver)
			throw ELibMCDriver_FrameBufferInterfaceException(LIBMCDRIVER_FRAMEBUFFER_ERROR_INVALIDCAST);
		
		bool isCacheCall = (pBuildBuffer == nullptr);
		if (isCacheCall) {
			pIDriver->GetVersion(*pMajor, *pMinor, *pMicro, sBuild);

			pIDriver->_setCache (new ParameterCache_4<LibMCDriver_FrameBuffer_uint32, LibMCDriver_FrameBuffer_uint32, LibMCDriver_FrameBuffer_uint32, std::string> (*pMajor, *pMinor, *pMicro, sBuild));
		}
		else {
			auto cache = dynamic_cast<ParameterCache_4<LibMCDriver_FrameBuffer_uint32, LibMCDriver_FrameBuffer_uint32, LibMCDriver_FrameBuffer_uint32, std::string>*> (pIDriver->_getCache ());
			if (cache == nullptr)
				throw ELibMCDriver_FrameBufferInterfaceException(LIBMCDRIVER_FRAMEBUFFER_ERROR_INVALIDCAST);
			cache->retrieveData (*pMajor, *pMinor, *pMicro, sBuild);
			pIDriver->_setCache (nullptr);
		}
		
		if (pBuildNeededChars)
			*pBuildNeededChars = (LibMCDriver_FrameBuffer_uint32) (sBuild.size()+1);
		if (pBuildBuffer) {
			if (sBuild.size() >= nBuildBufferSize)
				throw ELibMCDriver_FrameBufferInterfaceException (LIBMCDRIVER_FRAMEBUFFER_ERROR_BUFFERTOOSMALL);
			for (size_t iBuild = 0; iBuild < sBuild.size(); iBuild++)
				pBuildBuffer[iBuild] = sBuild[iBuild];
			pBuildBuffer[sBuild.size()] = 0;
		}
		return LIBMCDRIVER_FRAMEBUFFER_SUCCESS;
	}
	catch (ELibMCDriver_FrameBufferInterfaceException & Exception) {
		return handleLibMCDriver_FrameBufferException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_FrameBufferResult libmcdriver_framebuffer_driver_queryparameters(LibMCDriver_FrameBuffer_Driver pDriver)
{
	IBase* pIBaseClass = (IBase *)pDriver;

	try {
		IDriver* pIDriver = dynamic_cast<IDriver*>(pIBaseClass);
		if (!pIDriver)
			throw ELibMCDriver_FrameBufferInterfaceException(LIBMCDRIVER_FRAMEBUFFER_ERROR_INVALIDCAST);
		
		pIDriver->QueryParameters();

		return LIBMCDRIVER_FRAMEBUFFER_SUCCESS;
	}
	catch (ELibMCDriver_FrameBufferInterfaceException & Exception) {
		return handleLibMCDriver_FrameBufferException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_FrameBufferResult libmcdriver_framebuffer_driver_queryparametersex(LibMCDriver_FrameBuffer_Driver pDriver, LibMCEnv_DriverStatusUpdateSession pDriverUpdateInstance)
{
	IBase* pIBaseClass = (IBase *)pDriver;

	try {
		LibMCEnv::PDriverStatusUpdateSession pIDriverUpdateInstance = std::make_shared<LibMCEnv::CDriverStatusUpdateSession>(CWrapper::sPLibMCEnvWrapper.get(), pDriverUpdateInstance);
		CWrapper::sPLibMCEnvWrapper->AcquireInstance(pIDriverUpdateInstance.get());
		if (!pIDriverUpdateInstance)
			throw ELibMCDriver_FrameBufferInterfaceException (LIBMCDRIVER_FRAMEBUFFER_ERROR_INVALIDCAST);
		
		IDriver* pIDriver = dynamic_cast<IDriver*>(pIBaseClass);
		if (!pIDriver)
			throw ELibMCDriver_FrameBufferInterfaceException(LIBMCDRIVER_FRAMEBUFFER_ERROR_INVALIDCAST);
		
		pIDriver->QueryParametersEx(pIDriverUpdateInstance);

		return LIBMCDRIVER_FRAMEBUFFER_SUCCESS;
	}
	catch (ELibMCDriver_FrameBufferInterfaceException & Exception) {
		return handleLibMCDriver_FrameBufferException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}


/*************************************************************************************************************************
 Class implementation for FrameBufferAccess
**************************************************************************************************************************/
LibMCDriver_FrameBufferResult libmcdriver_framebuffer_framebufferaccess_getscreenwidth(LibMCDriver_FrameBuffer_FrameBufferAccess pFrameBufferAccess, LibMCDriver_FrameBuffer_uint32 * pScreenWidth)
{
	IBase* pIBaseClass = (IBase *)pFrameBufferAccess;

	try {
		if (pScreenWidth == nullptr)
			throw ELibMCDriver_FrameBufferInterfaceException (LIBMCDRIVER_FRAMEBUFFER_ERROR_INVALIDPARAM);
		IFrameBufferAccess* pIFrameBufferAccess = dynamic_cast<IFrameBufferAccess*>(pIBaseClass);
		if (!pIFrameBufferAccess)
			throw ELibMCDriver_FrameBufferInterfaceException(LIBMCDRIVER_FRAMEBUFFER_ERROR_INVALIDCAST);
		
		*pScreenWidth = pIFrameBufferAccess->GetScreenWidth();

		return LIBMCDRIVER_FRAMEBUFFER_SUCCESS;
	}
	catch (ELibMCDriver_FrameBufferInterfaceException & Exception) {
		return handleLibMCDriver_FrameBufferException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_FrameBufferResult libmcdriver_framebuffer_framebufferaccess_getscreenheight(LibMCDriver_FrameBuffer_FrameBufferAccess pFrameBufferAccess, LibMCDriver_FrameBuffer_uint32 * pScreenHeight)
{
	IBase* pIBaseClass = (IBase *)pFrameBufferAccess;

	try {
		if (pScreenHeight == nullptr)
			throw ELibMCDriver_FrameBufferInterfaceException (LIBMCDRIVER_FRAMEBUFFER_ERROR_INVALIDPARAM);
		IFrameBufferAccess* pIFrameBufferAccess = dynamic_cast<IFrameBufferAccess*>(pIBaseClass);
		if (!pIFrameBufferAccess)
			throw ELibMCDriver_FrameBufferInterfaceException(LIBMCDRIVER_FRAMEBUFFER_ERROR_INVALIDCAST);
		
		*pScreenHeight = pIFrameBufferAccess->GetScreenHeight();

		return LIBMCDRIVER_FRAMEBUFFER_SUCCESS;
	}
	catch (ELibMCDriver_FrameBufferInterfaceException & Exception) {
		return handleLibMCDriver_FrameBufferException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_FrameBufferResult libmcdriver_framebuffer_framebufferaccess_bitdepth(LibMCDriver_FrameBuffer_FrameBufferAccess pFrameBufferAccess, eLibMCDriver_FrameBufferFrameBufferBitDepth * pBitDepth)
{
	IBase* pIBaseClass = (IBase *)pFrameBufferAccess;

	try {
		if (pBitDepth == nullptr)
			throw ELibMCDriver_FrameBufferInterfaceException (LIBMCDRIVER_FRAMEBUFFER_ERROR_INVALIDPARAM);
		IFrameBufferAccess* pIFrameBufferAccess = dynamic_cast<IFrameBufferAccess*>(pIBaseClass);
		if (!pIFrameBufferAccess)
			throw ELibMCDriver_FrameBufferInterfaceException(LIBMCDRIVER_FRAMEBUFFER_ERROR_INVALIDCAST);
		
		*pBitDepth = pIFrameBufferAccess->BitDepth();

		return LIBMCDRIVER_FRAMEBUFFER_SUCCESS;
	}
	catch (ELibMCDriver_FrameBufferInterfaceException & Exception) {
		return handleLibMCDriver_FrameBufferException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_FrameBufferResult libmcdriver_framebuffer_framebufferaccess_usesdoublebuffering(LibMCDriver_FrameBuffer_FrameBufferAccess pFrameBufferAccess, bool * pDoubleBufferingIsEnabled)
{
	IBase* pIBaseClass = (IBase *)pFrameBufferAccess;

	try {
		if (pDoubleBufferingIsEnabled == nullptr)
			throw ELibMCDriver_FrameBufferInterfaceException (LIBMCDRIVER_FRAMEBUFFER_ERROR_INVALIDPARAM);
		IFrameBufferAccess* pIFrameBufferAccess = dynamic_cast<IFrameBufferAccess*>(pIBaseClass);
		if (!pIFrameBufferAccess)
			throw ELibMCDriver_FrameBufferInterfaceException(LIBMCDRIVER_FRAMEBUFFER_ERROR_INVALIDCAST);
		
		*pDoubleBufferingIsEnabled = pIFrameBufferAccess->UsesDoubleBuffering();

		return LIBMCDRIVER_FRAMEBUFFER_SUCCESS;
	}
	catch (ELibMCDriver_FrameBufferInterfaceException & Exception) {
		return handleLibMCDriver_FrameBufferException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_FrameBufferResult libmcdriver_framebuffer_framebufferaccess_flip(LibMCDriver_FrameBuffer_FrameBufferAccess pFrameBufferAccess)
{
	IBase* pIBaseClass = (IBase *)pFrameBufferAccess;

	try {
		IFrameBufferAccess* pIFrameBufferAccess = dynamic_cast<IFrameBufferAccess*>(pIBaseClass);
		if (!pIFrameBufferAccess)
			throw ELibMCDriver_FrameBufferInterfaceException(LIBMCDRIVER_FRAMEBUFFER_ERROR_INVALIDCAST);
		
		pIFrameBufferAccess->Flip();

		return LIBMCDRIVER_FRAMEBUFFER_SUCCESS;
	}
	catch (ELibMCDriver_FrameBufferInterfaceException & Exception) {
		return handleLibMCDriver_FrameBufferException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_FrameBufferResult libmcdriver_framebuffer_framebufferaccess_clearscreen(LibMCDriver_FrameBuffer_FrameBufferAccess pFrameBufferAccess, const sLibMCDriver_FrameBufferColor * pRGBColor)
{
	IBase* pIBaseClass = (IBase *)pFrameBufferAccess;

	try {
		IFrameBufferAccess* pIFrameBufferAccess = dynamic_cast<IFrameBufferAccess*>(pIBaseClass);
		if (!pIFrameBufferAccess)
			throw ELibMCDriver_FrameBufferInterfaceException(LIBMCDRIVER_FRAMEBUFFER_ERROR_INVALIDCAST);
		
		pIFrameBufferAccess->ClearScreen(*pRGBColor);

		return LIBMCDRIVER_FRAMEBUFFER_SUCCESS;
	}
	catch (ELibMCDriver_FrameBufferInterfaceException & Exception) {
		return handleLibMCDriver_FrameBufferException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_FrameBufferResult libmcdriver_framebuffer_framebufferaccess_drawline(LibMCDriver_FrameBuffer_FrameBufferAccess pFrameBufferAccess, LibMCDriver_FrameBuffer_uint32 nX1, LibMCDriver_FrameBuffer_uint32 nY1, LibMCDriver_FrameBuffer_uint32 nX2, LibMCDriver_FrameBuffer_uint32 nY2, LibMCDriver_FrameBuffer_double dThickness, const sLibMCDriver_FrameBufferColor * pRGBColor)
{
	IBase* pIBaseClass = (IBase *)pFrameBufferAccess;

	try {
		IFrameBufferAccess* pIFrameBufferAccess = dynamic_cast<IFrameBufferAccess*>(pIBaseClass);
		if (!pIFrameBufferAccess)
			throw ELibMCDriver_FrameBufferInterfaceException(LIBMCDRIVER_FRAMEBUFFER_ERROR_INVALIDCAST);
		
		pIFrameBufferAccess->DrawLine(nX1, nY1, nX2, nY2, dThickness, *pRGBColor);

		return LIBMCDRIVER_FRAMEBUFFER_SUCCESS;
	}
	catch (ELibMCDriver_FrameBufferInterfaceException & Exception) {
		return handleLibMCDriver_FrameBufferException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_FrameBufferResult libmcdriver_framebuffer_framebufferaccess_fillrectangle(LibMCDriver_FrameBuffer_FrameBufferAccess pFrameBufferAccess, LibMCDriver_FrameBuffer_uint32 nX1, LibMCDriver_FrameBuffer_uint32 nY1, LibMCDriver_FrameBuffer_uint32 nX2, LibMCDriver_FrameBuffer_uint32 nY2, const sLibMCDriver_FrameBufferColor * pRGBColor)
{
	IBase* pIBaseClass = (IBase *)pFrameBufferAccess;

	try {
		IFrameBufferAccess* pIFrameBufferAccess = dynamic_cast<IFrameBufferAccess*>(pIBaseClass);
		if (!pIFrameBufferAccess)
			throw ELibMCDriver_FrameBufferInterfaceException(LIBMCDRIVER_FRAMEBUFFER_ERROR_INVALIDCAST);
		
		pIFrameBufferAccess->FillRectangle(nX1, nY1, nX2, nY2, *pRGBColor);

		return LIBMCDRIVER_FRAMEBUFFER_SUCCESS;
	}
	catch (ELibMCDriver_FrameBufferInterfaceException & Exception) {
		return handleLibMCDriver_FrameBufferException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_FrameBufferResult libmcdriver_framebuffer_framebufferaccess_drawimage(LibMCDriver_FrameBuffer_FrameBufferAccess pFrameBufferAccess, LibMCDriver_FrameBuffer_uint32 nX, LibMCDriver_FrameBuffer_uint32 nY, LibMCEnv_ImageData pImage)
{
	IBase* pIBaseClass = (IBase *)pFrameBufferAccess;

	try {
		LibMCEnv::PImageData pIImage = std::make_shared<LibMCEnv::CImageData>(CWrapper::sPLibMCEnvWrapper.get(), pImage);
		CWrapper::sPLibMCEnvWrapper->AcquireInstance(pIImage.get());
		if (!pIImage)
			throw ELibMCDriver_FrameBufferInterfaceException (LIBMCDRIVER_FRAMEBUFFER_ERROR_INVALIDCAST);
		
		IFrameBufferAccess* pIFrameBufferAccess = dynamic_cast<IFrameBufferAccess*>(pIBaseClass);
		if (!pIFrameBufferAccess)
			throw ELibMCDriver_FrameBufferInterfaceException(LIBMCDRIVER_FRAMEBUFFER_ERROR_INVALIDCAST);
		
		pIFrameBufferAccess->DrawImage(nX, nY, pIImage);

		return LIBMCDRIVER_FRAMEBUFFER_SUCCESS;
	}
	catch (ELibMCDriver_FrameBufferInterfaceException & Exception) {
		return handleLibMCDriver_FrameBufferException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}


/*************************************************************************************************************************
 Class implementation for Driver_FrameBuffer
**************************************************************************************************************************/
LibMCDriver_FrameBufferResult libmcdriver_framebuffer_driver_framebuffer_supportssimulation(LibMCDriver_FrameBuffer_Driver_FrameBuffer pDriver_FrameBuffer, bool * pSupportFlag)
{
	IBase* pIBaseClass = (IBase *)pDriver_FrameBuffer;

	try {
		if (pSupportFlag == nullptr)
			throw ELibMCDriver_FrameBufferInterfaceException (LIBMCDRIVER_FRAMEBUFFER_ERROR_INVALIDPARAM);
		IDriver_FrameBuffer* pIDriver_FrameBuffer = dynamic_cast<IDriver_FrameBuffer*>(pIBaseClass);
		if (!pIDriver_FrameBuffer)
			throw ELibMCDriver_FrameBufferInterfaceException(LIBMCDRIVER_FRAMEBUFFER_ERROR_INVALIDCAST);
		
		*pSupportFlag = pIDriver_FrameBuffer->SupportsSimulation();

		return LIBMCDRIVER_FRAMEBUFFER_SUCCESS;
	}
	catch (ELibMCDriver_FrameBufferInterfaceException & Exception) {
		return handleLibMCDriver_FrameBufferException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_FrameBufferResult libmcdriver_framebuffer_driver_framebuffer_supportsdevice(LibMCDriver_FrameBuffer_Driver_FrameBuffer pDriver_FrameBuffer, bool * pSupportFlag)
{
	IBase* pIBaseClass = (IBase *)pDriver_FrameBuffer;

	try {
		if (pSupportFlag == nullptr)
			throw ELibMCDriver_FrameBufferInterfaceException (LIBMCDRIVER_FRAMEBUFFER_ERROR_INVALIDPARAM);
		IDriver_FrameBuffer* pIDriver_FrameBuffer = dynamic_cast<IDriver_FrameBuffer*>(pIBaseClass);
		if (!pIDriver_FrameBuffer)
			throw ELibMCDriver_FrameBufferInterfaceException(LIBMCDRIVER_FRAMEBUFFER_ERROR_INVALIDCAST);
		
		*pSupportFlag = pIDriver_FrameBuffer->SupportsDevice();

		return LIBMCDRIVER_FRAMEBUFFER_SUCCESS;
	}
	catch (ELibMCDriver_FrameBufferInterfaceException & Exception) {
		return handleLibMCDriver_FrameBufferException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_FrameBufferResult libmcdriver_framebuffer_driver_framebuffer_createframebuffersimulation(LibMCDriver_FrameBuffer_Driver_FrameBuffer pDriver_FrameBuffer, const char * pIdentifier, LibMCDriver_FrameBuffer_uint32 nScreenWidth, LibMCDriver_FrameBuffer_uint32 nScreenHeight, eLibMCDriver_FrameBufferFrameBufferBitDepth eBitDepth, LibMCDriver_FrameBuffer_FrameBufferAccess * pFrameBufferInstance)
{
	IBase* pIBaseClass = (IBase *)pDriver_FrameBuffer;

	try {
		if (pIdentifier == nullptr)
			throw ELibMCDriver_FrameBufferInterfaceException (LIBMCDRIVER_FRAMEBUFFER_ERROR_INVALIDPARAM);
		if (pFrameBufferInstance == nullptr)
			throw ELibMCDriver_FrameBufferInterfaceException (LIBMCDRIVER_FRAMEBUFFER_ERROR_INVALIDPARAM);
		std::string sIdentifier(pIdentifier);
		IBase* pBaseFrameBufferInstance(nullptr);
		IDriver_FrameBuffer* pIDriver_FrameBuffer = dynamic_cast<IDriver_FrameBuffer*>(pIBaseClass);
		if (!pIDriver_FrameBuffer)
			throw ELibMCDriver_FrameBufferInterfaceException(LIBMCDRIVER_FRAMEBUFFER_ERROR_INVALIDCAST);
		
		pBaseFrameBufferInstance = pIDriver_FrameBuffer->CreateFrameBufferSimulation(sIdentifier, nScreenWidth, nScreenHeight, eBitDepth);

		*pFrameBufferInstance = (IBase*)(pBaseFrameBufferInstance);
		return LIBMCDRIVER_FRAMEBUFFER_SUCCESS;
	}
	catch (ELibMCDriver_FrameBufferInterfaceException & Exception) {
		return handleLibMCDriver_FrameBufferException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_FrameBufferResult libmcdriver_framebuffer_driver_framebuffer_openframebufferdevice(LibMCDriver_FrameBuffer_Driver_FrameBuffer pDriver_FrameBuffer, const char * pIdentifier, const char * pDeviceName, LibMCDriver_FrameBuffer_FrameBufferAccess * pFrameBufferInstance)
{
	IBase* pIBaseClass = (IBase *)pDriver_FrameBuffer;

	try {
		if (pIdentifier == nullptr)
			throw ELibMCDriver_FrameBufferInterfaceException (LIBMCDRIVER_FRAMEBUFFER_ERROR_INVALIDPARAM);
		if (pDeviceName == nullptr)
			throw ELibMCDriver_FrameBufferInterfaceException (LIBMCDRIVER_FRAMEBUFFER_ERROR_INVALIDPARAM);
		if (pFrameBufferInstance == nullptr)
			throw ELibMCDriver_FrameBufferInterfaceException (LIBMCDRIVER_FRAMEBUFFER_ERROR_INVALIDPARAM);
		std::string sIdentifier(pIdentifier);
		std::string sDeviceName(pDeviceName);
		IBase* pBaseFrameBufferInstance(nullptr);
		IDriver_FrameBuffer* pIDriver_FrameBuffer = dynamic_cast<IDriver_FrameBuffer*>(pIBaseClass);
		if (!pIDriver_FrameBuffer)
			throw ELibMCDriver_FrameBufferInterfaceException(LIBMCDRIVER_FRAMEBUFFER_ERROR_INVALIDCAST);
		
		pBaseFrameBufferInstance = pIDriver_FrameBuffer->OpenFrameBufferDevice(sIdentifier, sDeviceName);

		*pFrameBufferInstance = (IBase*)(pBaseFrameBufferInstance);
		return LIBMCDRIVER_FRAMEBUFFER_SUCCESS;
	}
	catch (ELibMCDriver_FrameBufferInterfaceException & Exception) {
		return handleLibMCDriver_FrameBufferException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_FrameBufferResult libmcdriver_framebuffer_driver_framebuffer_releaseframebuffer(LibMCDriver_FrameBuffer_Driver_FrameBuffer pDriver_FrameBuffer, const char * pIdentifier)
{
	IBase* pIBaseClass = (IBase *)pDriver_FrameBuffer;

	try {
		if (pIdentifier == nullptr)
			throw ELibMCDriver_FrameBufferInterfaceException (LIBMCDRIVER_FRAMEBUFFER_ERROR_INVALIDPARAM);
		std::string sIdentifier(pIdentifier);
		IDriver_FrameBuffer* pIDriver_FrameBuffer = dynamic_cast<IDriver_FrameBuffer*>(pIBaseClass);
		if (!pIDriver_FrameBuffer)
			throw ELibMCDriver_FrameBufferInterfaceException(LIBMCDRIVER_FRAMEBUFFER_ERROR_INVALIDCAST);
		
		pIDriver_FrameBuffer->ReleaseFramebuffer(sIdentifier);

		return LIBMCDRIVER_FRAMEBUFFER_SUCCESS;
	}
	catch (ELibMCDriver_FrameBufferInterfaceException & Exception) {
		return handleLibMCDriver_FrameBufferException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_FrameBufferResult libmcdriver_framebuffer_driver_framebuffer_findframebuffer(LibMCDriver_FrameBuffer_Driver_FrameBuffer pDriver_FrameBuffer, const char * pIdentifier, LibMCDriver_FrameBuffer_FrameBufferAccess * pFrameBufferInstance)
{
	IBase* pIBaseClass = (IBase *)pDriver_FrameBuffer;

	try {
		if (pIdentifier == nullptr)
			throw ELibMCDriver_FrameBufferInterfaceException (LIBMCDRIVER_FRAMEBUFFER_ERROR_INVALIDPARAM);
		if (pFrameBufferInstance == nullptr)
			throw ELibMCDriver_FrameBufferInterfaceException (LIBMCDRIVER_FRAMEBUFFER_ERROR_INVALIDPARAM);
		std::string sIdentifier(pIdentifier);
		IBase* pBaseFrameBufferInstance(nullptr);
		IDriver_FrameBuffer* pIDriver_FrameBuffer = dynamic_cast<IDriver_FrameBuffer*>(pIBaseClass);
		if (!pIDriver_FrameBuffer)
			throw ELibMCDriver_FrameBufferInterfaceException(LIBMCDRIVER_FRAMEBUFFER_ERROR_INVALIDCAST);
		
		pBaseFrameBufferInstance = pIDriver_FrameBuffer->FindFrameBuffer(sIdentifier);

		*pFrameBufferInstance = (IBase*)(pBaseFrameBufferInstance);
		return LIBMCDRIVER_FRAMEBUFFER_SUCCESS;
	}
	catch (ELibMCDriver_FrameBufferInterfaceException & Exception) {
		return handleLibMCDriver_FrameBufferException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_FrameBufferResult libmcdriver_framebuffer_driver_framebuffer_framebufferexists(LibMCDriver_FrameBuffer_Driver_FrameBuffer pDriver_FrameBuffer, const char * pIdentifier, bool * pExists)
{
	IBase* pIBaseClass = (IBase *)pDriver_FrameBuffer;

	try {
		if (pIdentifier == nullptr)
			throw ELibMCDriver_FrameBufferInterfaceException (LIBMCDRIVER_FRAMEBUFFER_ERROR_INVALIDPARAM);
		if (pExists == nullptr)
			throw ELibMCDriver_FrameBufferInterfaceException (LIBMCDRIVER_FRAMEBUFFER_ERROR_INVALIDPARAM);
		std::string sIdentifier(pIdentifier);
		IDriver_FrameBuffer* pIDriver_FrameBuffer = dynamic_cast<IDriver_FrameBuffer*>(pIBaseClass);
		if (!pIDriver_FrameBuffer)
			throw ELibMCDriver_FrameBufferInterfaceException(LIBMCDRIVER_FRAMEBUFFER_ERROR_INVALIDCAST);
		
		*pExists = pIDriver_FrameBuffer->FrameBufferExists(sIdentifier);

		return LIBMCDRIVER_FRAMEBUFFER_SUCCESS;
	}
	catch (ELibMCDriver_FrameBufferInterfaceException & Exception) {
		return handleLibMCDriver_FrameBufferException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}



/*************************************************************************************************************************
 Function table lookup implementation
**************************************************************************************************************************/

LibMCDriver_FrameBufferResult LibMCDriver_FrameBuffer::Impl::LibMCDriver_FrameBuffer_GetProcAddress (const char * pProcName, void ** ppProcAddress)
{
	if (pProcName == nullptr)
		return LIBMCDRIVER_FRAMEBUFFER_ERROR_INVALIDPARAM;
	if (ppProcAddress == nullptr)
		return LIBMCDRIVER_FRAMEBUFFER_ERROR_INVALIDPARAM;
	*ppProcAddress = nullptr;
	std::string sProcName (pProcName);
	
	if (sProcName == "libmcdriver_framebuffer_driver_configure") 
		*ppProcAddress = (void*) &libmcdriver_framebuffer_driver_configure;
	if (sProcName == "libmcdriver_framebuffer_driver_getname") 
		*ppProcAddress = (void*) &libmcdriver_framebuffer_driver_getname;
	if (sProcName == "libmcdriver_framebuffer_driver_gettype") 
		*ppProcAddress = (void*) &libmcdriver_framebuffer_driver_gettype;
	if (sProcName == "libmcdriver_framebuffer_driver_getversion") 
		*ppProcAddress = (void*) &libmcdriver_framebuffer_driver_getversion;
	if (sProcName == "libmcdriver_framebuffer_driver_queryparameters") 
		*ppProcAddress = (void*) &libmcdriver_framebuffer_driver_queryparameters;
	if (sProcName == "libmcdriver_framebuffer_driver_queryparametersex") 
		*ppProcAddress = (void*) &libmcdriver_framebuffer_driver_queryparametersex;
	if (sProcName == "libmcdriver_framebuffer_framebufferaccess_getscreenwidth") 
		*ppProcAddress = (void*) &libmcdriver_framebuffer_framebufferaccess_getscreenwidth;
	if (sProcName == "libmcdriver_framebuffer_framebufferaccess_getscreenheight") 
		*ppProcAddress = (void*) &libmcdriver_framebuffer_framebufferaccess_getscreenheight;
	if (sProcName == "libmcdriver_framebuffer_framebufferaccess_bitdepth") 
		*ppProcAddress = (void*) &libmcdriver_framebuffer_framebufferaccess_bitdepth;
	if (sProcName == "libmcdriver_framebuffer_framebufferaccess_usesdoublebuffering") 
		*ppProcAddress = (void*) &libmcdriver_framebuffer_framebufferaccess_usesdoublebuffering;
	if (sProcName == "libmcdriver_framebuffer_framebufferaccess_flip") 
		*ppProcAddress = (void*) &libmcdriver_framebuffer_framebufferaccess_flip;
	if (sProcName == "libmcdriver_framebuffer_framebufferaccess_clearscreen") 
		*ppProcAddress = (void*) &libmcdriver_framebuffer_framebufferaccess_clearscreen;
	if (sProcName == "libmcdriver_framebuffer_framebufferaccess_drawline") 
		*ppProcAddress = (void*) &libmcdriver_framebuffer_framebufferaccess_drawline;
	if (sProcName == "libmcdriver_framebuffer_framebufferaccess_fillrectangle") 
		*ppProcAddress = (void*) &libmcdriver_framebuffer_framebufferaccess_fillrectangle;
	if (sProcName == "libmcdriver_framebuffer_framebufferaccess_drawimage") 
		*ppProcAddress = (void*) &libmcdriver_framebuffer_framebufferaccess_drawimage;
	if (sProcName == "libmcdriver_framebuffer_driver_framebuffer_supportssimulation") 
		*ppProcAddress = (void*) &libmcdriver_framebuffer_driver_framebuffer_supportssimulation;
	if (sProcName == "libmcdriver_framebuffer_driver_framebuffer_supportsdevice") 
		*ppProcAddress = (void*) &libmcdriver_framebuffer_driver_framebuffer_supportsdevice;
	if (sProcName == "libmcdriver_framebuffer_driver_framebuffer_createframebuffersimulation") 
		*ppProcAddress = (void*) &libmcdriver_framebuffer_driver_framebuffer_createframebuffersimulation;
	if (sProcName == "libmcdriver_framebuffer_driver_framebuffer_openframebufferdevice") 
		*ppProcAddress = (void*) &libmcdriver_framebuffer_driver_framebuffer_openframebufferdevice;
	if (sProcName == "libmcdriver_framebuffer_driver_framebuffer_releaseframebuffer") 
		*ppProcAddress = (void*) &libmcdriver_framebuffer_driver_framebuffer_releaseframebuffer;
	if (sProcName == "libmcdriver_framebuffer_driver_framebuffer_findframebuffer") 
		*ppProcAddress = (void*) &libmcdriver_framebuffer_driver_framebuffer_findframebuffer;
	if (sProcName == "libmcdriver_framebuffer_driver_framebuffer_framebufferexists") 
		*ppProcAddress = (void*) &libmcdriver_framebuffer_driver_framebuffer_framebufferexists;
	if (sProcName == "libmcdriver_framebuffer_getversion") 
		*ppProcAddress = (void*) &libmcdriver_framebuffer_getversion;
	if (sProcName == "libmcdriver_framebuffer_getlasterror") 
		*ppProcAddress = (void*) &libmcdriver_framebuffer_getlasterror;
	if (sProcName == "libmcdriver_framebuffer_releaseinstance") 
		*ppProcAddress = (void*) &libmcdriver_framebuffer_releaseinstance;
	if (sProcName == "libmcdriver_framebuffer_acquireinstance") 
		*ppProcAddress = (void*) &libmcdriver_framebuffer_acquireinstance;
	if (sProcName == "libmcdriver_framebuffer_injectcomponent") 
		*ppProcAddress = (void*) &libmcdriver_framebuffer_injectcomponent;
	if (sProcName == "libmcdriver_framebuffer_getsymbollookupmethod") 
		*ppProcAddress = (void*) &libmcdriver_framebuffer_getsymbollookupmethod;
	if (sProcName == "libmcdriver_framebuffer_createdriver") 
		*ppProcAddress = (void*) &libmcdriver_framebuffer_createdriver;
	
	if (*ppProcAddress == nullptr) 
		return LIBMCDRIVER_FRAMEBUFFER_ERROR_COULDNOTFINDLIBRARYEXPORT;
	return LIBMCDRIVER_FRAMEBUFFER_SUCCESS;
}

/*************************************************************************************************************************
 Global functions implementation
**************************************************************************************************************************/
LibMCDriver_FrameBufferResult libmcdriver_framebuffer_getversion(LibMCDriver_FrameBuffer_uint32 * pMajor, LibMCDriver_FrameBuffer_uint32 * pMinor, LibMCDriver_FrameBuffer_uint32 * pMicro)
{
	IBase* pIBaseClass = nullptr;

	try {
		if (!pMajor)
			throw ELibMCDriver_FrameBufferInterfaceException (LIBMCDRIVER_FRAMEBUFFER_ERROR_INVALIDPARAM);
		if (!pMinor)
			throw ELibMCDriver_FrameBufferInterfaceException (LIBMCDRIVER_FRAMEBUFFER_ERROR_INVALIDPARAM);
		if (!pMicro)
			throw ELibMCDriver_FrameBufferInterfaceException (LIBMCDRIVER_FRAMEBUFFER_ERROR_INVALIDPARAM);
		CWrapper::GetVersion(*pMajor, *pMinor, *pMicro);

		return LIBMCDRIVER_FRAMEBUFFER_SUCCESS;
	}
	catch (ELibMCDriver_FrameBufferInterfaceException & Exception) {
		return handleLibMCDriver_FrameBufferException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_FrameBufferResult libmcdriver_framebuffer_getlasterror(LibMCDriver_FrameBuffer_Base pInstance, const LibMCDriver_FrameBuffer_uint32 nErrorMessageBufferSize, LibMCDriver_FrameBuffer_uint32* pErrorMessageNeededChars, char * pErrorMessageBuffer, bool * pHasError)
{
	IBase* pIBaseClass = nullptr;

	try {
		if ( (!pErrorMessageBuffer) && !(pErrorMessageNeededChars) )
			throw ELibMCDriver_FrameBufferInterfaceException (LIBMCDRIVER_FRAMEBUFFER_ERROR_INVALIDPARAM);
		if (pHasError == nullptr)
			throw ELibMCDriver_FrameBufferInterfaceException (LIBMCDRIVER_FRAMEBUFFER_ERROR_INVALIDPARAM);
		IBase* pIBaseClassInstance = (IBase *)pInstance;
		IBase* pIInstance = dynamic_cast<IBase*>(pIBaseClassInstance);
		if (!pIInstance)
			throw ELibMCDriver_FrameBufferInterfaceException (LIBMCDRIVER_FRAMEBUFFER_ERROR_INVALIDCAST);
		
		std::string sErrorMessage("");
		*pHasError = CWrapper::GetLastError(pIInstance, sErrorMessage);

		if (pErrorMessageNeededChars)
			*pErrorMessageNeededChars = (LibMCDriver_FrameBuffer_uint32) (sErrorMessage.size()+1);
		if (pErrorMessageBuffer) {
			if (sErrorMessage.size() >= nErrorMessageBufferSize)
				throw ELibMCDriver_FrameBufferInterfaceException (LIBMCDRIVER_FRAMEBUFFER_ERROR_BUFFERTOOSMALL);
			for (size_t iErrorMessage = 0; iErrorMessage < sErrorMessage.size(); iErrorMessage++)
				pErrorMessageBuffer[iErrorMessage] = sErrorMessage[iErrorMessage];
			pErrorMessageBuffer[sErrorMessage.size()] = 0;
		}
		return LIBMCDRIVER_FRAMEBUFFER_SUCCESS;
	}
	catch (ELibMCDriver_FrameBufferInterfaceException & Exception) {
		return handleLibMCDriver_FrameBufferException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_FrameBufferResult libmcdriver_framebuffer_releaseinstance(LibMCDriver_FrameBuffer_Base pInstance)
{
	IBase* pIBaseClass = nullptr;

	try {
		IBase* pIBaseClassInstance = (IBase *)pInstance;
		IBase* pIInstance = dynamic_cast<IBase*>(pIBaseClassInstance);
		if (!pIInstance)
			throw ELibMCDriver_FrameBufferInterfaceException (LIBMCDRIVER_FRAMEBUFFER_ERROR_INVALIDCAST);
		
		CWrapper::ReleaseInstance(pIInstance);

		return LIBMCDRIVER_FRAMEBUFFER_SUCCESS;
	}
	catch (ELibMCDriver_FrameBufferInterfaceException & Exception) {
		return handleLibMCDriver_FrameBufferException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_FrameBufferResult libmcdriver_framebuffer_acquireinstance(LibMCDriver_FrameBuffer_Base pInstance)
{
	IBase* pIBaseClass = nullptr;

	try {
		IBase* pIBaseClassInstance = (IBase *)pInstance;
		IBase* pIInstance = dynamic_cast<IBase*>(pIBaseClassInstance);
		if (!pIInstance)
			throw ELibMCDriver_FrameBufferInterfaceException (LIBMCDRIVER_FRAMEBUFFER_ERROR_INVALIDCAST);
		
		CWrapper::AcquireInstance(pIInstance);

		return LIBMCDRIVER_FRAMEBUFFER_SUCCESS;
	}
	catch (ELibMCDriver_FrameBufferInterfaceException & Exception) {
		return handleLibMCDriver_FrameBufferException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_FrameBufferResult libmcdriver_framebuffer_injectcomponent(const char * pNameSpace, LibMCDriver_FrameBuffer_pvoid pSymbolAddressMethod)
{
	IBase* pIBaseClass = nullptr;

	try {
		if (pNameSpace == nullptr)
			throw ELibMCDriver_FrameBufferInterfaceException (LIBMCDRIVER_FRAMEBUFFER_ERROR_INVALIDPARAM);
		std::string sNameSpace(pNameSpace);
		
		bool bNameSpaceFound = false;
		
		if (sNameSpace == "LibMCEnv") {
			if (CWrapper::sPLibMCEnvWrapper.get() != nullptr) {
				throw ELibMCDriver_FrameBufferInterfaceException(LIBMCDRIVER_FRAMEBUFFER_ERROR_COULDNOTLOADLIBRARY);
			}
			CWrapper::sPLibMCEnvWrapper = LibMCEnv::CWrapper::loadLibraryFromSymbolLookupMethod(pSymbolAddressMethod);
			bNameSpaceFound = true;
		}
		
		if (!bNameSpaceFound)
			throw ELibMCDriver_FrameBufferInterfaceException(LIBMCDRIVER_FRAMEBUFFER_ERROR_COULDNOTLOADLIBRARY);
		
		return LIBMCDRIVER_FRAMEBUFFER_SUCCESS;
	}
	catch (ELibMCDriver_FrameBufferInterfaceException & Exception) {
		return handleLibMCDriver_FrameBufferException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_FrameBufferResult libmcdriver_framebuffer_getsymbollookupmethod(LibMCDriver_FrameBuffer_pvoid * pSymbolLookupMethod)
{
	IBase* pIBaseClass = nullptr;

	try {
		if (pSymbolLookupMethod == nullptr)
			throw ELibMCDriver_FrameBufferInterfaceException (LIBMCDRIVER_FRAMEBUFFER_ERROR_INVALIDPARAM);
		*pSymbolLookupMethod = (void*)&LibMCDriver_FrameBuffer::Impl::LibMCDriver_FrameBuffer_GetProcAddress;
		return LIBMCDRIVER_FRAMEBUFFER_SUCCESS;
	}
	catch (ELibMCDriver_FrameBufferInterfaceException & Exception) {
		return handleLibMCDriver_FrameBufferException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_FrameBufferResult libmcdriver_framebuffer_createdriver(const char * pName, const char * pType, LibMCEnv_DriverEnvironment pDriverEnvironment, LibMCDriver_FrameBuffer_Driver * pInstance)
{
	IBase* pIBaseClass = nullptr;

	try {
		if (pName == nullptr)
			throw ELibMCDriver_FrameBufferInterfaceException (LIBMCDRIVER_FRAMEBUFFER_ERROR_INVALIDPARAM);
		if (pType == nullptr)
			throw ELibMCDriver_FrameBufferInterfaceException (LIBMCDRIVER_FRAMEBUFFER_ERROR_INVALIDPARAM);
		if (pInstance == nullptr)
			throw ELibMCDriver_FrameBufferInterfaceException (LIBMCDRIVER_FRAMEBUFFER_ERROR_INVALIDPARAM);
		std::string sName(pName);
		std::string sType(pType);
		LibMCEnv::PDriverEnvironment pIDriverEnvironment = std::make_shared<LibMCEnv::CDriverEnvironment>(CWrapper::sPLibMCEnvWrapper.get(), pDriverEnvironment);
		CWrapper::sPLibMCEnvWrapper->AcquireInstance(pIDriverEnvironment.get());
		if (!pIDriverEnvironment)
			throw ELibMCDriver_FrameBufferInterfaceException (LIBMCDRIVER_FRAMEBUFFER_ERROR_INVALIDCAST);
		
		IBase* pBaseInstance(nullptr);
		pBaseInstance = CWrapper::CreateDriver(sName, sType, pIDriverEnvironment);

		*pInstance = (IBase*)(pBaseInstance);
		return LIBMCDRIVER_FRAMEBUFFER_SUCCESS;
	}
	catch (ELibMCDriver_FrameBufferInterfaceException & Exception) {
		return handleLibMCDriver_FrameBufferException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}


