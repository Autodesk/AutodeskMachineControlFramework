/*++

Copyright (C) 2024 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.8.0-develop.

Abstract: This is an autogenerated C++-Header file in order to allow an easy
 use of Generic Linux Framebuffer Driver

Interface version: 2.0.0

*/

#ifndef __LIBMCDRIVER_FRAMEBUFFER_DYNAMICHEADER_CPPTYPES
#define __LIBMCDRIVER_FRAMEBUFFER_DYNAMICHEADER_CPPTYPES

#include "libmcdriver_framebuffer_types.hpp"

#include "libmcenv_types.hpp"


/*************************************************************************************************************************
 Class definition for Base
**************************************************************************************************************************/

/*************************************************************************************************************************
 Class definition for Driver
**************************************************************************************************************************/

/**
* Configures a driver with its specific configuration data.
*
* @param[in] pDriver - Driver instance.
* @param[in] pConfigurationString - Configuration data of driver.
* @return error code or 0 (success)
*/
typedef LibMCDriver_FramebufferResult (*PLibMCDriver_FramebufferDriver_ConfigurePtr) (LibMCDriver_Framebuffer_Driver pDriver, const char * pConfigurationString);

/**
* returns the name identifier of the driver
*
* @param[in] pDriver - Driver instance.
* @param[in] nNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNameBuffer -  buffer of Name of the driver., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCDriver_FramebufferResult (*PLibMCDriver_FramebufferDriver_GetNamePtr) (LibMCDriver_Framebuffer_Driver pDriver, const LibMCDriver_Framebuffer_uint32 nNameBufferSize, LibMCDriver_Framebuffer_uint32* pNameNeededChars, char * pNameBuffer);

/**
* returns the type identifier of the driver
*
* @param[in] pDriver - Driver instance.
* @param[in] nTypeBufferSize - size of the buffer (including trailing 0)
* @param[out] pTypeNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pTypeBuffer -  buffer of Type of the driver., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCDriver_FramebufferResult (*PLibMCDriver_FramebufferDriver_GetTypePtr) (LibMCDriver_Framebuffer_Driver pDriver, const LibMCDriver_Framebuffer_uint32 nTypeBufferSize, LibMCDriver_Framebuffer_uint32* pTypeNeededChars, char * pTypeBuffer);

/**
* returns the version identifiers of the driver
*
* @param[in] pDriver - Driver instance.
* @param[out] pMajor - Major version.
* @param[out] pMinor - Minor version.
* @param[out] pMicro - Micro version.
* @param[in] nBuildBufferSize - size of the buffer (including trailing 0)
* @param[out] pBuildNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pBuildBuffer -  buffer of Build identifier., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCDriver_FramebufferResult (*PLibMCDriver_FramebufferDriver_GetVersionPtr) (LibMCDriver_Framebuffer_Driver pDriver, LibMCDriver_Framebuffer_uint32 * pMajor, LibMCDriver_Framebuffer_uint32 * pMinor, LibMCDriver_Framebuffer_uint32 * pMicro, const LibMCDriver_Framebuffer_uint32 nBuildBufferSize, LibMCDriver_Framebuffer_uint32* pBuildNeededChars, char * pBuildBuffer);

/**
* Updates the driver parameters in the driver environment. Should only be called in the driver thread.
*
* @param[in] pDriver - Driver instance.
* @return error code or 0 (success)
*/
typedef LibMCDriver_FramebufferResult (*PLibMCDriver_FramebufferDriver_QueryParametersPtr) (LibMCDriver_Framebuffer_Driver pDriver);

/**
* Updates the driver parameters in the driver environment. Might be called out of thread. Implementation MUST be able to handle parallel calls.
*
* @param[in] pDriver - Driver instance.
* @param[in] pDriverUpdateInstance - Status update instance.
* @return error code or 0 (success)
*/
typedef LibMCDriver_FramebufferResult (*PLibMCDriver_FramebufferDriver_QueryParametersExPtr) (LibMCDriver_Framebuffer_Driver pDriver, LibMCEnv_DriverStatusUpdateSession pDriverUpdateInstance);

/*************************************************************************************************************************
 Class definition for FrameBufferAccess
**************************************************************************************************************************/

/**
* Returns the width of the screen.
*
* @param[in] pFrameBufferAccess - FrameBufferAccess instance.
* @param[out] pScreenWidth - Screen width of Framebuffer. Minimum 128, Maximum 16348..
* @return error code or 0 (success)
*/
typedef LibMCDriver_FramebufferResult (*PLibMCDriver_FramebufferFrameBufferAccess_GetScreenWidthPtr) (LibMCDriver_Framebuffer_FrameBufferAccess pFrameBufferAccess, LibMCDriver_Framebuffer_uint32 * pScreenWidth);

/**
* Returns the height of the screen.
*
* @param[in] pFrameBufferAccess - FrameBufferAccess instance.
* @param[out] pScreenHeight - Screen height of Framebuffer. Minimum 128, Maximum 16348..
* @return error code or 0 (success)
*/
typedef LibMCDriver_FramebufferResult (*PLibMCDriver_FramebufferFrameBufferAccess_GetScreenHeightPtr) (LibMCDriver_Framebuffer_FrameBufferAccess pFrameBufferAccess, LibMCDriver_Framebuffer_uint32 * pScreenHeight);

/**
* Returns the bitdepth of the screen.
*
* @param[in] pFrameBufferAccess - FrameBufferAccess instance.
* @param[out] pBitDepth - Framebuffer bit depth.
* @return error code or 0 (success)
*/
typedef LibMCDriver_FramebufferResult (*PLibMCDriver_FramebufferFrameBufferAccess_BitDepthPtr) (LibMCDriver_Framebuffer_FrameBufferAccess pFrameBufferAccess, LibMCDriver_Framebuffer::eFrameBufferBitDepth * pBitDepth);

/**
* Returns, if the frame buffer supports and uses double buffering.
*
* @param[in] pFrameBufferAccess - FrameBufferAccess instance.
* @param[out] pDoubleBufferingIsEnabled - Returns true if Double buffering is in enabled.
* @return error code or 0 (success)
*/
typedef LibMCDriver_FramebufferResult (*PLibMCDriver_FramebufferFrameBufferAccess_UsesDoubleBufferingPtr) (LibMCDriver_Framebuffer_FrameBufferAccess pFrameBufferAccess, bool * pDoubleBufferingIsEnabled);

/**
* Flips the buffers and shows the current draw buffer on screen. Does nothing if double buffering is disabled.
*
* @param[in] pFrameBufferAccess - FrameBufferAccess instance.
* @return error code or 0 (success)
*/
typedef LibMCDriver_FramebufferResult (*PLibMCDriver_FramebufferFrameBufferAccess_FlipPtr) (LibMCDriver_Framebuffer_FrameBufferAccess pFrameBufferAccess);

/**
* Clears the current draw buffer with an arbitrary precision color.
*
* @param[in] pFrameBufferAccess - FrameBufferAccess instance.
* @param[in] pRGBColor - Color to use.
* @return error code or 0 (success)
*/
typedef LibMCDriver_FramebufferResult (*PLibMCDriver_FramebufferFrameBufferAccess_ClearScreenPtr) (LibMCDriver_Framebuffer_FrameBufferAccess pFrameBufferAccess, const LibMCDriver_Framebuffer::sColor * pRGBColor);

/**
* Draws a line in a certain color.
*
* @param[in] pFrameBufferAccess - FrameBufferAccess instance.
* @param[in] nX1 - X Coordinate of first point to use.
* @param[in] nY1 - Y Coordinate of first point to use.
* @param[in] nX2 - X Coordinate of first point to use.
* @param[in] nY2 - Y Coordinate of first point to use.
* @param[in] dThickness - Thickness of the line in pixels.
* @param[in] pRGBColor - Color to use.
* @return error code or 0 (success)
*/
typedef LibMCDriver_FramebufferResult (*PLibMCDriver_FramebufferFrameBufferAccess_DrawLinePtr) (LibMCDriver_Framebuffer_FrameBufferAccess pFrameBufferAccess, LibMCDriver_Framebuffer_uint32 nX1, LibMCDriver_Framebuffer_uint32 nY1, LibMCDriver_Framebuffer_uint32 nX2, LibMCDriver_Framebuffer_uint32 nY2, LibMCDriver_Framebuffer_double dThickness, const LibMCDriver_Framebuffer::sColor * pRGBColor);

/**
* Draws a rectangle in a certain color, including the corner points.
*
* @param[in] pFrameBufferAccess - FrameBufferAccess instance.
* @param[in] nX1 - X Coordinate of first point to use.
* @param[in] nY1 - Y Coordinate of first point to use.
* @param[in] nX2 - X Coordinate of first point to use.
* @param[in] nY2 - Y Coordinate of first point to use.
* @param[in] pRGBColor - Color to use.
* @return error code or 0 (success)
*/
typedef LibMCDriver_FramebufferResult (*PLibMCDriver_FramebufferFrameBufferAccess_FillRectanglePtr) (LibMCDriver_Framebuffer_FrameBufferAccess pFrameBufferAccess, LibMCDriver_Framebuffer_uint32 nX1, LibMCDriver_Framebuffer_uint32 nY1, LibMCDriver_Framebuffer_uint32 nX2, LibMCDriver_Framebuffer_uint32 nY2, const LibMCDriver_Framebuffer::sColor * pRGBColor);

/**
* Draws an image at a certain position.
*
* @param[in] pFrameBufferAccess - FrameBufferAccess instance.
* @param[in] nX - X Coordinate of image.
* @param[in] nY - Y Coordinate of image.
* @param[in] pImage - Image object to draw.
* @return error code or 0 (success)
*/
typedef LibMCDriver_FramebufferResult (*PLibMCDriver_FramebufferFrameBufferAccess_DrawImagePtr) (LibMCDriver_Framebuffer_FrameBufferAccess pFrameBufferAccess, LibMCDriver_Framebuffer_uint32 nX, LibMCDriver_Framebuffer_uint32 nY, LibMCEnv_ImageData pImage);

/*************************************************************************************************************************
 Class definition for Driver_FrameBuffer
**************************************************************************************************************************/

/**
* Returns if a the driver supports simulation framebuffers
*
* @param[in] pDriver_FrameBuffer - Driver_FrameBuffer instance.
* @param[out] pSupportFlag - Returns true if simulation Framebuffer are supported.
* @return error code or 0 (success)
*/
typedef LibMCDriver_FramebufferResult (*PLibMCDriver_FramebufferDriver_FrameBuffer_SupportsSimulationPtr) (LibMCDriver_Framebuffer_Driver_FrameBuffer pDriver_FrameBuffer, bool * pSupportFlag);

/**
* Returns if a the driver supports physical framebuffer devices.
*
* @param[in] pDriver_FrameBuffer - Driver_FrameBuffer instance.
* @param[out] pSupportFlag - Returns true if physical framebuffer devices are supported. Returns false on platforms that do not support Framebuffers.
* @return error code or 0 (success)
*/
typedef LibMCDriver_FramebufferResult (*PLibMCDriver_FramebufferDriver_FrameBuffer_SupportsDevicePtr) (LibMCDriver_Framebuffer_Driver_FrameBuffer pDriver_FrameBuffer, bool * pSupportFlag);

/**
* Creates a fake framebuffer instance. Failes if Simulation is not supported.
*
* @param[in] pDriver_FrameBuffer - Driver_FrameBuffer instance.
* @param[in] pIdentifier - Identifier of the framebuffer instance. Alphanumeric string with optional _ and - character up to 256 characters. Fails if identifier is empty or already exists.
* @param[in] nScreenWidth - Screen width to use. Minimum 128, Maximum 16348..
* @param[in] nScreenHeight - Screen height to use. Minimum 128, Maximum 16348..
* @param[in] eBitDepth - Framebuffer bit depth.
* @param[out] pFrameBufferInstance - Framebuffer access instance.
* @return error code or 0 (success)
*/
typedef LibMCDriver_FramebufferResult (*PLibMCDriver_FramebufferDriver_FrameBuffer_CreateFrameBufferSimulationPtr) (LibMCDriver_Framebuffer_Driver_FrameBuffer pDriver_FrameBuffer, const char * pIdentifier, LibMCDriver_Framebuffer_uint32 nScreenWidth, LibMCDriver_Framebuffer_uint32 nScreenHeight, LibMCDriver_Framebuffer::eFrameBufferBitDepth eBitDepth, LibMCDriver_Framebuffer_FrameBufferAccess * pFrameBufferInstance);

/**
* Opens a new framebuffer device on Linux. Creates a simulation device on other platforms in 1920x1280x24.
*
* @param[in] pDriver_FrameBuffer - Driver_FrameBuffer instance.
* @param[in] pIdentifier - Identifier of the framebuffer instance. Alphanumeric string with optional _ and - character up to 256 characters. Fails if identifier is empty or already exists.
* @param[in] pDeviceName - Device name, for example /dev/fb0.
* @param[out] pFrameBufferInstance - Framebuffer access instance.
* @return error code or 0 (success)
*/
typedef LibMCDriver_FramebufferResult (*PLibMCDriver_FramebufferDriver_FrameBuffer_OpenFrameBufferDevicePtr) (LibMCDriver_Framebuffer_Driver_FrameBuffer pDriver_FrameBuffer, const char * pIdentifier, const char * pDeviceName, LibMCDriver_Framebuffer_FrameBufferAccess * pFrameBufferInstance);

/**
* Releases a Framebuffer instance. Does nothing if insance does not exist.
*
* @param[in] pDriver_FrameBuffer - Driver_FrameBuffer instance.
* @param[in] pIdentifier - Identifier of the framebuffer instance. Alphanumeric string with optional _ and - character up to 256 characters. Fails if identifier is empty or already exists.
* @return error code or 0 (success)
*/
typedef LibMCDriver_FramebufferResult (*PLibMCDriver_FramebufferDriver_FrameBuffer_ReleaseFramebufferPtr) (LibMCDriver_Framebuffer_Driver_FrameBuffer pDriver_FrameBuffer, const char * pIdentifier);

/**
* Retrieves a previously created framebuffer instance. Fails if instance does not exist.
*
* @param[in] pDriver_FrameBuffer - Driver_FrameBuffer instance.
* @param[in] pIdentifier - Identifier of the framebuffer instance. Alphanumeric string with optional _ and - character up to 256 characters. Fails if identifier is empty or already exists.
* @param[out] pFrameBufferInstance - Framebuffer access instance.
* @return error code or 0 (success)
*/
typedef LibMCDriver_FramebufferResult (*PLibMCDriver_FramebufferDriver_FrameBuffer_FindFrameBufferPtr) (LibMCDriver_Framebuffer_Driver_FrameBuffer pDriver_FrameBuffer, const char * pIdentifier, LibMCDriver_Framebuffer_FrameBufferAccess * pFrameBufferInstance);

/**
* Returns if a framebuffer instance exists.
*
* @param[in] pDriver_FrameBuffer - Driver_FrameBuffer instance.
* @param[in] pIdentifier - Identifier of the framebuffer instance. Alphanumeric string with optional _ and - character up to 256 characters. Fails if identifier is empty or already exists.
* @param[out] pExists - Returns true if Framebuffer exists.
* @return error code or 0 (success)
*/
typedef LibMCDriver_FramebufferResult (*PLibMCDriver_FramebufferDriver_FrameBuffer_FrameBufferExistsPtr) (LibMCDriver_Framebuffer_Driver_FrameBuffer pDriver_FrameBuffer, const char * pIdentifier, bool * pExists);

/*************************************************************************************************************************
 Global functions
**************************************************************************************************************************/

/**
* retrieves the binary version of this library.
*
* @param[out] pMajor - returns the major version of this library
* @param[out] pMinor - returns the minor version of this library
* @param[out] pMicro - returns the micro version of this library
* @return error code or 0 (success)
*/
typedef LibMCDriver_FramebufferResult (*PLibMCDriver_FramebufferGetVersionPtr) (LibMCDriver_Framebuffer_uint32 * pMajor, LibMCDriver_Framebuffer_uint32 * pMinor, LibMCDriver_Framebuffer_uint32 * pMicro);

/**
* Returns the last error recorded on this object
*
* @param[in] pInstance - Instance Handle
* @param[in] nErrorMessageBufferSize - size of the buffer (including trailing 0)
* @param[out] pErrorMessageNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pErrorMessageBuffer -  buffer of Message of the last error, may be NULL
* @param[out] pHasError - Is there a last error to query
* @return error code or 0 (success)
*/
typedef LibMCDriver_FramebufferResult (*PLibMCDriver_FramebufferGetLastErrorPtr) (LibMCDriver_Framebuffer_Base pInstance, const LibMCDriver_Framebuffer_uint32 nErrorMessageBufferSize, LibMCDriver_Framebuffer_uint32* pErrorMessageNeededChars, char * pErrorMessageBuffer, bool * pHasError);

/**
* Releases shared ownership of an Instance
*
* @param[in] pInstance - Instance Handle
* @return error code or 0 (success)
*/
typedef LibMCDriver_FramebufferResult (*PLibMCDriver_FramebufferReleaseInstancePtr) (LibMCDriver_Framebuffer_Base pInstance);

/**
* Acquires shared ownership of an Instance
*
* @param[in] pInstance - Instance Handle
* @return error code or 0 (success)
*/
typedef LibMCDriver_FramebufferResult (*PLibMCDriver_FramebufferAcquireInstancePtr) (LibMCDriver_Framebuffer_Base pInstance);

/**
* Injects an imported component for usage within this component
*
* @param[in] pNameSpace - NameSpace of the injected component
* @param[in] pSymbolAddressMethod - Address of the SymbolAddressMethod of the injected component
* @return error code or 0 (success)
*/
typedef LibMCDriver_FramebufferResult (*PLibMCDriver_FramebufferInjectComponentPtr) (const char * pNameSpace, LibMCDriver_Framebuffer_pvoid pSymbolAddressMethod);

/**
* Returns the address of the SymbolLookupMethod
*
* @param[out] pSymbolLookupMethod - Address of the SymbolAddressMethod
* @return error code or 0 (success)
*/
typedef LibMCDriver_FramebufferResult (*PLibMCDriver_FramebufferGetSymbolLookupMethodPtr) (LibMCDriver_Framebuffer_pvoid * pSymbolLookupMethod);

/**
* Creates a driver instance with a specific name.
*
* @param[in] pName - Name of driver to be created.
* @param[in] pType - Type of driver to be created.
* @param[in] pDriverEnvironment - Environment of this driver.
* @param[out] pInstance - New Driver instance
* @return error code or 0 (success)
*/
typedef LibMCDriver_FramebufferResult (*PLibMCDriver_FramebufferCreateDriverPtr) (const char * pName, const char * pType, LibMCEnv_DriverEnvironment pDriverEnvironment, LibMCDriver_Framebuffer_Driver * pInstance);

/*************************************************************************************************************************
 Function Table Structure
**************************************************************************************************************************/

typedef struct {
	void * m_LibraryHandle;
	PLibMCDriver_FramebufferDriver_ConfigurePtr m_Driver_Configure;
	PLibMCDriver_FramebufferDriver_GetNamePtr m_Driver_GetName;
	PLibMCDriver_FramebufferDriver_GetTypePtr m_Driver_GetType;
	PLibMCDriver_FramebufferDriver_GetVersionPtr m_Driver_GetVersion;
	PLibMCDriver_FramebufferDriver_QueryParametersPtr m_Driver_QueryParameters;
	PLibMCDriver_FramebufferDriver_QueryParametersExPtr m_Driver_QueryParametersEx;
	PLibMCDriver_FramebufferFrameBufferAccess_GetScreenWidthPtr m_FrameBufferAccess_GetScreenWidth;
	PLibMCDriver_FramebufferFrameBufferAccess_GetScreenHeightPtr m_FrameBufferAccess_GetScreenHeight;
	PLibMCDriver_FramebufferFrameBufferAccess_BitDepthPtr m_FrameBufferAccess_BitDepth;
	PLibMCDriver_FramebufferFrameBufferAccess_UsesDoubleBufferingPtr m_FrameBufferAccess_UsesDoubleBuffering;
	PLibMCDriver_FramebufferFrameBufferAccess_FlipPtr m_FrameBufferAccess_Flip;
	PLibMCDriver_FramebufferFrameBufferAccess_ClearScreenPtr m_FrameBufferAccess_ClearScreen;
	PLibMCDriver_FramebufferFrameBufferAccess_DrawLinePtr m_FrameBufferAccess_DrawLine;
	PLibMCDriver_FramebufferFrameBufferAccess_FillRectanglePtr m_FrameBufferAccess_FillRectangle;
	PLibMCDriver_FramebufferFrameBufferAccess_DrawImagePtr m_FrameBufferAccess_DrawImage;
	PLibMCDriver_FramebufferDriver_FrameBuffer_SupportsSimulationPtr m_Driver_FrameBuffer_SupportsSimulation;
	PLibMCDriver_FramebufferDriver_FrameBuffer_SupportsDevicePtr m_Driver_FrameBuffer_SupportsDevice;
	PLibMCDriver_FramebufferDriver_FrameBuffer_CreateFrameBufferSimulationPtr m_Driver_FrameBuffer_CreateFrameBufferSimulation;
	PLibMCDriver_FramebufferDriver_FrameBuffer_OpenFrameBufferDevicePtr m_Driver_FrameBuffer_OpenFrameBufferDevice;
	PLibMCDriver_FramebufferDriver_FrameBuffer_ReleaseFramebufferPtr m_Driver_FrameBuffer_ReleaseFramebuffer;
	PLibMCDriver_FramebufferDriver_FrameBuffer_FindFrameBufferPtr m_Driver_FrameBuffer_FindFrameBuffer;
	PLibMCDriver_FramebufferDriver_FrameBuffer_FrameBufferExistsPtr m_Driver_FrameBuffer_FrameBufferExists;
	PLibMCDriver_FramebufferGetVersionPtr m_GetVersion;
	PLibMCDriver_FramebufferGetLastErrorPtr m_GetLastError;
	PLibMCDriver_FramebufferReleaseInstancePtr m_ReleaseInstance;
	PLibMCDriver_FramebufferAcquireInstancePtr m_AcquireInstance;
	PLibMCDriver_FramebufferInjectComponentPtr m_InjectComponent;
	PLibMCDriver_FramebufferGetSymbolLookupMethodPtr m_GetSymbolLookupMethod;
	PLibMCDriver_FramebufferCreateDriverPtr m_CreateDriver;
} sLibMCDriver_FramebufferDynamicWrapperTable;

#endif // __LIBMCDRIVER_FRAMEBUFFER_DYNAMICHEADER_CPPTYPES

