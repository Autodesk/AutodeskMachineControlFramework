/*++

Copyright (C) 2024 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.8.0-develop.

Abstract: This is an autogenerated C++-Header file in order to allow an easy
 use of Generic Linux Framebuffer Driver

Interface version: 2.0.0

*/

#ifndef __LIBMCDRIVER_FRAMEBUFFER_CPPHEADER_DYNAMIC_CPP
#define __LIBMCDRIVER_FRAMEBUFFER_CPPHEADER_DYNAMIC_CPP

#include "libmcdriver_framebuffer_types.hpp"
#include "libmcdriver_framebuffer_dynamic.h"

#include "libmcenv_dynamic.hpp"

#ifdef _WIN32
#include <windows.h>
#else // _WIN32
#include <dlfcn.h>
#endif // _WIN32
#include <string>
#include <memory>
#include <vector>
#include <exception>

namespace LibMCDriver_Framebuffer {

/*************************************************************************************************************************
 Forward Declaration of all classes
**************************************************************************************************************************/
class CWrapper;
class CBase;
class CDriver;
class CFrameBufferAccess;
class CDriver_FrameBuffer;

/*************************************************************************************************************************
 Declaration of deprecated class types
**************************************************************************************************************************/
typedef CWrapper CLibMCDriver_FramebufferWrapper;
typedef CBase CLibMCDriver_FramebufferBase;
typedef CDriver CLibMCDriver_FramebufferDriver;
typedef CFrameBufferAccess CLibMCDriver_FramebufferFrameBufferAccess;
typedef CDriver_FrameBuffer CLibMCDriver_FramebufferDriver_FrameBuffer;

/*************************************************************************************************************************
 Declaration of shared pointer types
**************************************************************************************************************************/
typedef std::shared_ptr<CWrapper> PWrapper;
typedef std::shared_ptr<CBase> PBase;
typedef std::shared_ptr<CDriver> PDriver;
typedef std::shared_ptr<CFrameBufferAccess> PFrameBufferAccess;
typedef std::shared_ptr<CDriver_FrameBuffer> PDriver_FrameBuffer;

/*************************************************************************************************************************
 Declaration of deprecated shared pointer types
**************************************************************************************************************************/
typedef PWrapper PLibMCDriver_FramebufferWrapper;
typedef PBase PLibMCDriver_FramebufferBase;
typedef PDriver PLibMCDriver_FramebufferDriver;
typedef PFrameBufferAccess PLibMCDriver_FramebufferFrameBufferAccess;
typedef PDriver_FrameBuffer PLibMCDriver_FramebufferDriver_FrameBuffer;


/*************************************************************************************************************************
 classParam Definition
**************************************************************************************************************************/

template<class T> class classParam {
private:
	const T* m_ptr;

public:
	classParam(const T* ptr)
		: m_ptr (ptr)
	{
	}

	classParam(std::shared_ptr <T> sharedPtr)
		: m_ptr (sharedPtr.get())
	{
	}

	LibMCDriver_FramebufferHandle GetHandle()
	{
		if (m_ptr != nullptr)
			return m_ptr->handle();
		return nullptr;
	}
};

/*************************************************************************************************************************
 Class ELibMCDriver_FramebufferException 
**************************************************************************************************************************/
class ELibMCDriver_FramebufferException : public std::exception {
protected:
	/**
	* Error code for the Exception.
	*/
	LibMCDriver_FramebufferResult m_errorCode;
	/**
	* Error message for the Exception.
	*/
	std::string m_errorMessage;
	std::string m_originalErrorMessage;

public:
	/**
	* Exception Constructor.
	*/
	ELibMCDriver_FramebufferException(LibMCDriver_FramebufferResult errorCode, const std::string & sErrorMessage)
		: m_errorCode(errorCode), m_originalErrorMessage(sErrorMessage)
	{
		m_errorMessage = buildErrorMessage();
	}

	/**
	* Returns error code
	*/
	LibMCDriver_FramebufferResult getErrorCode() const noexcept
	{
		return m_errorCode;
	}

	/**
	* Returns error message
	*/
	const char* what() const noexcept
	{
		return m_errorMessage.c_str();
	}

	const char* getErrorMessage() const noexcept
	{
		return m_originalErrorMessage.c_str();
	}

	const char* getErrorName() const noexcept
	{
		switch(getErrorCode()) {
			case LIBMCDRIVER_FRAMEBUFFER_SUCCESS: return "SUCCESS";
			case LIBMCDRIVER_FRAMEBUFFER_ERROR_NOTIMPLEMENTED: return "NOTIMPLEMENTED";
			case LIBMCDRIVER_FRAMEBUFFER_ERROR_INVALIDPARAM: return "INVALIDPARAM";
			case LIBMCDRIVER_FRAMEBUFFER_ERROR_INVALIDCAST: return "INVALIDCAST";
			case LIBMCDRIVER_FRAMEBUFFER_ERROR_BUFFERTOOSMALL: return "BUFFERTOOSMALL";
			case LIBMCDRIVER_FRAMEBUFFER_ERROR_GENERICEXCEPTION: return "GENERICEXCEPTION";
			case LIBMCDRIVER_FRAMEBUFFER_ERROR_COULDNOTLOADLIBRARY: return "COULDNOTLOADLIBRARY";
			case LIBMCDRIVER_FRAMEBUFFER_ERROR_COULDNOTFINDLIBRARYEXPORT: return "COULDNOTFINDLIBRARYEXPORT";
			case LIBMCDRIVER_FRAMEBUFFER_ERROR_INCOMPATIBLEBINARYVERSION: return "INCOMPATIBLEBINARYVERSION";
			case LIBMCDRIVER_FRAMEBUFFER_ERROR_DRIVERERROR: return "DRIVERERROR";
			case LIBMCDRIVER_FRAMEBUFFER_ERROR_DEVICENOTSUPPORTEDONPLATFORM: return "DEVICENOTSUPPORTEDONPLATFORM";
			case LIBMCDRIVER_FRAMEBUFFER_ERROR_COULDNOTOPENFRAMEBUFFERDEVICE: return "COULDNOTOPENFRAMEBUFFERDEVICE";
			case LIBMCDRIVER_FRAMEBUFFER_ERROR_COULDNOTGETFIXEDSCREENINFO: return "COULDNOTGETFIXEDSCREENINFO";
			case LIBMCDRIVER_FRAMEBUFFER_ERROR_COULDNOTGETVARIABLESCREENINFO: return "COULDNOTGETVARIABLESCREENINFO";
			case LIBMCDRIVER_FRAMEBUFFER_ERROR_COULDNOTMAPFRAMEBUFFERMEMORY: return "COULDNOTMAPFRAMEBUFFERMEMORY";
			case LIBMCDRIVER_FRAMEBUFFER_ERROR_UNKNOWNFRAMEBUFFERBITDEPTH: return "UNKNOWNFRAMEBUFFERBITDEPTH";
		}
		return "UNKNOWN";
	}

	const char* getErrorDescription() const noexcept
	{
		switch(getErrorCode()) {
			case LIBMCDRIVER_FRAMEBUFFER_SUCCESS: return "success";
			case LIBMCDRIVER_FRAMEBUFFER_ERROR_NOTIMPLEMENTED: return "functionality not implemented";
			case LIBMCDRIVER_FRAMEBUFFER_ERROR_INVALIDPARAM: return "an invalid parameter was passed";
			case LIBMCDRIVER_FRAMEBUFFER_ERROR_INVALIDCAST: return "a type cast failed";
			case LIBMCDRIVER_FRAMEBUFFER_ERROR_BUFFERTOOSMALL: return "a provided buffer is too small";
			case LIBMCDRIVER_FRAMEBUFFER_ERROR_GENERICEXCEPTION: return "a generic exception occurred";
			case LIBMCDRIVER_FRAMEBUFFER_ERROR_COULDNOTLOADLIBRARY: return "the library could not be loaded";
			case LIBMCDRIVER_FRAMEBUFFER_ERROR_COULDNOTFINDLIBRARYEXPORT: return "a required exported symbol could not be found in the library";
			case LIBMCDRIVER_FRAMEBUFFER_ERROR_INCOMPATIBLEBINARYVERSION: return "the version of the binary interface does not match the bindings interface";
			case LIBMCDRIVER_FRAMEBUFFER_ERROR_DRIVERERROR: return "a driver error occured";
			case LIBMCDRIVER_FRAMEBUFFER_ERROR_DEVICENOTSUPPORTEDONPLATFORM: return "device not supported on platform";
			case LIBMCDRIVER_FRAMEBUFFER_ERROR_COULDNOTOPENFRAMEBUFFERDEVICE: return "could not open framebuffer device";
			case LIBMCDRIVER_FRAMEBUFFER_ERROR_COULDNOTGETFIXEDSCREENINFO: return "could not get fixed screen info";
			case LIBMCDRIVER_FRAMEBUFFER_ERROR_COULDNOTGETVARIABLESCREENINFO: return "could not get fixed variable info";
			case LIBMCDRIVER_FRAMEBUFFER_ERROR_COULDNOTMAPFRAMEBUFFERMEMORY: return "could not get map framebuffer memory";
			case LIBMCDRIVER_FRAMEBUFFER_ERROR_UNKNOWNFRAMEBUFFERBITDEPTH: return "unknown framebuffer bit depth";
		}
		return "unknown error";
	}

private:

	std::string buildErrorMessage() const noexcept
	{
		std::string msg = m_originalErrorMessage;
		if (msg.empty()) {
			msg = getErrorDescription();
		}
		return std::string("Error: ") + getErrorName() + ": " + msg;
	}
};

/*************************************************************************************************************************
 Class CInputVector
**************************************************************************************************************************/
template <typename T>
class CInputVector {
private:
	
	const T* m_data;
	size_t m_size;
	
public:
	
	CInputVector(const std::vector<T>& vec)
		: m_data( vec.data() ), m_size( vec.size() )
	{
	}
	
	CInputVector(const T* in_data, size_t in_size)
		: m_data( in_data ), m_size(in_size )
	{
	}
	
	const T* data() const
	{
		return m_data;
	}
	
	size_t size() const
	{
		return m_size;
	}
	
};

// declare deprecated class name
template<typename T>
using CLibMCDriver_FramebufferInputVector = CInputVector<T>;

/*************************************************************************************************************************
 Class CWrapper 
**************************************************************************************************************************/
class CWrapper {
public:
	
	explicit CWrapper(void* pSymbolLookupMethod)
	{
		CheckError(nullptr, initWrapperTable(&m_WrapperTable));
		CheckError(nullptr, loadWrapperTableFromSymbolLookupMethod(&m_WrapperTable, pSymbolLookupMethod));
		
		CheckError(nullptr, checkBinaryVersion());
	}
	
	explicit CWrapper(const std::string &sFileName)
	{
		CheckError(nullptr, initWrapperTable(&m_WrapperTable));
		CheckError(nullptr, loadWrapperTable(&m_WrapperTable, sFileName.c_str()));
		
		CheckError(nullptr, checkBinaryVersion());
	}
	
	static PWrapper loadLibrary(const std::string &sFileName)
	{
		return std::make_shared<CWrapper>(sFileName);
	}
	
	static PWrapper loadLibraryFromSymbolLookupMethod(void* pSymbolLookupMethod)
	{
		return std::make_shared<CWrapper>(pSymbolLookupMethod);
	}
	
	~CWrapper()
	{
		releaseWrapperTable(&m_WrapperTable);
	}
	
	inline void CheckError(CBase * pBaseClass, LibMCDriver_FramebufferResult nResult);

	inline void GetVersion(LibMCDriver_Framebuffer_uint32 & nMajor, LibMCDriver_Framebuffer_uint32 & nMinor, LibMCDriver_Framebuffer_uint32 & nMicro);
	inline bool GetLastError(classParam<CBase> pInstance, std::string & sErrorMessage);
	inline void ReleaseInstance(classParam<CBase> pInstance);
	inline void AcquireInstance(classParam<CBase> pInstance);
	inline void InjectComponent(const std::string & sNameSpace, const LibMCDriver_Framebuffer_pvoid pSymbolAddressMethod);
	inline LibMCDriver_Framebuffer_pvoid GetSymbolLookupMethod();
	inline PDriver CreateDriver(const std::string & sName, const std::string & sType, classParam<LibMCEnv::CDriverEnvironment> pDriverEnvironment);

private:
	sLibMCDriver_FramebufferDynamicWrapperTable m_WrapperTable;
	// Injected Components
	LibMCEnv::PWrapper m_pLibMCEnvWrapper;

	
	LibMCDriver_FramebufferResult checkBinaryVersion()
	{
		LibMCDriver_Framebuffer_uint32 nMajor, nMinor, nMicro;
		GetVersion(nMajor, nMinor, nMicro);
		if (nMajor != LIBMCDRIVER_FRAMEBUFFER_VERSION_MAJOR) {
			return LIBMCDRIVER_FRAMEBUFFER_ERROR_INCOMPATIBLEBINARYVERSION;
		}
		return LIBMCDRIVER_FRAMEBUFFER_SUCCESS;
	}
	LibMCDriver_FramebufferResult initWrapperTable(sLibMCDriver_FramebufferDynamicWrapperTable * pWrapperTable);
	LibMCDriver_FramebufferResult releaseWrapperTable(sLibMCDriver_FramebufferDynamicWrapperTable * pWrapperTable);
	LibMCDriver_FramebufferResult loadWrapperTable(sLibMCDriver_FramebufferDynamicWrapperTable * pWrapperTable, const char * pLibraryFileName);
	LibMCDriver_FramebufferResult loadWrapperTableFromSymbolLookupMethod(sLibMCDriver_FramebufferDynamicWrapperTable * pWrapperTable, void* pSymbolLookupMethod);

	friend class CBase;
	friend class CDriver;
	friend class CFrameBufferAccess;
	friend class CDriver_FrameBuffer;

};

	
/*************************************************************************************************************************
 Class CBase 
**************************************************************************************************************************/
class CBase {
public:
	
protected:
	/* Wrapper Object that created the class. */
	CWrapper * m_pWrapper;
	/* Handle to Instance in library*/
	LibMCDriver_FramebufferHandle m_pHandle;

	/* Checks for an Error code and raises Exceptions */
	void CheckError(LibMCDriver_FramebufferResult nResult)
	{
		if (m_pWrapper != nullptr)
			m_pWrapper->CheckError(this, nResult);
	}
public:
	/**
	* CBase::CBase - Constructor for Base class.
	*/
	CBase(CWrapper * pWrapper, LibMCDriver_FramebufferHandle pHandle)
		: m_pWrapper(pWrapper), m_pHandle(pHandle)
	{
	}

	/**
	* CBase::~CBase - Destructor for Base class.
	*/
	virtual ~CBase()
	{
		if (m_pWrapper != nullptr)
			m_pWrapper->ReleaseInstance(this);
		m_pWrapper = nullptr;
	}

	/**
	* CBase::handle - Returns handle to instance.
	*/
	LibMCDriver_FramebufferHandle handle() const
	{
		return m_pHandle;
	}

	/**
	* CBase::wrapper - Returns wrapper instance.
	*/
	CWrapper * wrapper() const
	{
		return m_pWrapper;
	}
	
	friend class CWrapper;
};
	
/*************************************************************************************************************************
 Class CDriver 
**************************************************************************************************************************/
class CDriver : public CBase {
public:
	
	/**
	* CDriver::CDriver - Constructor for Driver class.
	*/
	CDriver(CWrapper* pWrapper, LibMCDriver_FramebufferHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline void Configure(const std::string & sConfigurationString);
	inline std::string GetName();
	inline std::string GetType();
	inline void GetVersion(LibMCDriver_Framebuffer_uint32 & nMajor, LibMCDriver_Framebuffer_uint32 & nMinor, LibMCDriver_Framebuffer_uint32 & nMicro, std::string & sBuild);
	inline void QueryParameters();
	inline void QueryParametersEx(classParam<LibMCEnv::CDriverStatusUpdateSession> pDriverUpdateInstance);
};
	
/*************************************************************************************************************************
 Class CFrameBufferAccess 
**************************************************************************************************************************/
class CFrameBufferAccess : public CBase {
public:
	
	/**
	* CFrameBufferAccess::CFrameBufferAccess - Constructor for FrameBufferAccess class.
	*/
	CFrameBufferAccess(CWrapper* pWrapper, LibMCDriver_FramebufferHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline LibMCDriver_Framebuffer_uint32 GetScreenWidth();
	inline LibMCDriver_Framebuffer_uint32 GetScreenHeight();
	inline eFrameBufferBitDepth BitDepth();
	inline bool UsesDoubleBuffering();
	inline void Flip();
	inline void ClearScreen(const sColor & RGBColor);
	inline void DrawLine(const LibMCDriver_Framebuffer_uint32 nX1, const LibMCDriver_Framebuffer_uint32 nY1, const LibMCDriver_Framebuffer_uint32 nX2, const LibMCDriver_Framebuffer_uint32 nY2, const LibMCDriver_Framebuffer_double dThickness, const sColor & RGBColor);
	inline void FillRectangle(const LibMCDriver_Framebuffer_uint32 nX1, const LibMCDriver_Framebuffer_uint32 nY1, const LibMCDriver_Framebuffer_uint32 nX2, const LibMCDriver_Framebuffer_uint32 nY2, const sColor & RGBColor);
	inline void DrawImage(const LibMCDriver_Framebuffer_uint32 nX, const LibMCDriver_Framebuffer_uint32 nY, classParam<LibMCEnv::CImageData> pImage);
};
	
/*************************************************************************************************************************
 Class CDriver_FrameBuffer 
**************************************************************************************************************************/
class CDriver_FrameBuffer : public CDriver {
public:
	
	/**
	* CDriver_FrameBuffer::CDriver_FrameBuffer - Constructor for Driver_FrameBuffer class.
	*/
	CDriver_FrameBuffer(CWrapper* pWrapper, LibMCDriver_FramebufferHandle pHandle)
		: CDriver(pWrapper, pHandle)
	{
	}
	
	inline bool SupportsSimulation();
	inline bool SupportsDevice();
	inline PFrameBufferAccess CreateFrameBufferSimulation(const std::string & sIdentifier, const LibMCDriver_Framebuffer_uint32 nScreenWidth, const LibMCDriver_Framebuffer_uint32 nScreenHeight, const eFrameBufferBitDepth eBitDepth);
	inline PFrameBufferAccess OpenFrameBufferDevice(const std::string & sIdentifier, const std::string & sDeviceName);
	inline void ReleaseFramebuffer(const std::string & sIdentifier);
	inline PFrameBufferAccess FindFrameBuffer(const std::string & sIdentifier);
	inline bool FrameBufferExists(const std::string & sIdentifier);
};
	
	/**
	* CWrapper::GetVersion - retrieves the binary version of this library.
	* @param[out] nMajor - returns the major version of this library
	* @param[out] nMinor - returns the minor version of this library
	* @param[out] nMicro - returns the micro version of this library
	*/
	inline void CWrapper::GetVersion(LibMCDriver_Framebuffer_uint32 & nMajor, LibMCDriver_Framebuffer_uint32 & nMinor, LibMCDriver_Framebuffer_uint32 & nMicro)
	{
		CheckError(nullptr,m_WrapperTable.m_GetVersion(&nMajor, &nMinor, &nMicro));
	}
	
	/**
	* CWrapper::GetLastError - Returns the last error recorded on this object
	* @param[in] pInstance - Instance Handle
	* @param[out] sErrorMessage - Message of the last error
	* @return Is there a last error to query
	*/
	inline bool CWrapper::GetLastError(classParam<CBase> pInstance, std::string & sErrorMessage)
	{
		LibMCDriver_FramebufferHandle hInstance = pInstance.GetHandle();
		LibMCDriver_Framebuffer_uint32 bytesNeededErrorMessage = 0;
		LibMCDriver_Framebuffer_uint32 bytesWrittenErrorMessage = 0;
		bool resultHasError = 0;
		CheckError(nullptr,m_WrapperTable.m_GetLastError(hInstance, 0, &bytesNeededErrorMessage, nullptr, &resultHasError));
		std::vector<char> bufferErrorMessage(bytesNeededErrorMessage);
		CheckError(nullptr,m_WrapperTable.m_GetLastError(hInstance, bytesNeededErrorMessage, &bytesWrittenErrorMessage, &bufferErrorMessage[0], &resultHasError));
		sErrorMessage = std::string(&bufferErrorMessage[0]);
		
		return resultHasError;
	}
	
	/**
	* CWrapper::ReleaseInstance - Releases shared ownership of an Instance
	* @param[in] pInstance - Instance Handle
	*/
	inline void CWrapper::ReleaseInstance(classParam<CBase> pInstance)
	{
		LibMCDriver_FramebufferHandle hInstance = pInstance.GetHandle();
		CheckError(nullptr,m_WrapperTable.m_ReleaseInstance(hInstance));
	}
	
	/**
	* CWrapper::AcquireInstance - Acquires shared ownership of an Instance
	* @param[in] pInstance - Instance Handle
	*/
	inline void CWrapper::AcquireInstance(classParam<CBase> pInstance)
	{
		LibMCDriver_FramebufferHandle hInstance = pInstance.GetHandle();
		CheckError(nullptr,m_WrapperTable.m_AcquireInstance(hInstance));
	}
	
	/**
	* CWrapper::InjectComponent - Injects an imported component for usage within this component
	* @param[in] sNameSpace - NameSpace of the injected component
	* @param[in] pSymbolAddressMethod - Address of the SymbolAddressMethod of the injected component
	*/
	inline void CWrapper::InjectComponent(const std::string & sNameSpace, const LibMCDriver_Framebuffer_pvoid pSymbolAddressMethod)
	{
		CheckError(nullptr,m_WrapperTable.m_InjectComponent(sNameSpace.c_str(), pSymbolAddressMethod));
		
		bool bNameSpaceFound = false;
		if (sNameSpace == "LibMCEnv") {
			if (m_pLibMCEnvWrapper != nullptr) {
				throw ELibMCDriver_FramebufferException(LIBMCDRIVER_FRAMEBUFFER_ERROR_COULDNOTLOADLIBRARY, "Library with namespace " + sNameSpace + " is already registered.");
			}
			m_pLibMCEnvWrapper = LibMCEnv::CWrapper::loadLibraryFromSymbolLookupMethod(pSymbolAddressMethod);
			bNameSpaceFound = true;
		}
		if (!bNameSpaceFound)
			throw ELibMCDriver_FramebufferException(LIBMCDRIVER_FRAMEBUFFER_ERROR_COULDNOTLOADLIBRARY, "Unknown namespace " + sNameSpace);
	}
	
	/**
	* CWrapper::GetSymbolLookupMethod - Returns the address of the SymbolLookupMethod
	* @return Address of the SymbolAddressMethod
	*/
	inline LibMCDriver_Framebuffer_pvoid CWrapper::GetSymbolLookupMethod()
	{
		LibMCDriver_Framebuffer_pvoid resultSymbolLookupMethod = 0;
		CheckError(nullptr,m_WrapperTable.m_GetSymbolLookupMethod(&resultSymbolLookupMethod));
		
		return resultSymbolLookupMethod;
	}
	
	/**
	* CWrapper::CreateDriver - Creates a driver instance with a specific name.
	* @param[in] sName - Name of driver to be created.
	* @param[in] sType - Type of driver to be created.
	* @param[in] pDriverEnvironment - Environment of this driver.
	* @return New Driver instance
	*/
	inline PDriver CWrapper::CreateDriver(const std::string & sName, const std::string & sType, classParam<LibMCEnv::CDriverEnvironment> pDriverEnvironment)
	{
		LibMCEnvHandle hDriverEnvironment = pDriverEnvironment.GetHandle();
		LibMCDriver_FramebufferHandle hInstance = nullptr;
		CheckError(nullptr,m_WrapperTable.m_CreateDriver(sName.c_str(), sType.c_str(), hDriverEnvironment, &hInstance));
		
		if (hInstance) {
			return std::make_shared<CDriver>(this, hInstance);
		} else {
			return nullptr;
		}
	}
	
	inline void CWrapper::CheckError(CBase * pBaseClass, LibMCDriver_FramebufferResult nResult)
	{
		if (nResult != 0) {
			std::string sErrorMessage;
			if (pBaseClass != nullptr) {
				GetLastError(pBaseClass, sErrorMessage);
			}
			throw ELibMCDriver_FramebufferException(nResult, sErrorMessage);
		}
	}
	

	inline LibMCDriver_FramebufferResult CWrapper::initWrapperTable(sLibMCDriver_FramebufferDynamicWrapperTable * pWrapperTable)
	{
		if (pWrapperTable == nullptr)
			return LIBMCDRIVER_FRAMEBUFFER_ERROR_INVALIDPARAM;
		
		pWrapperTable->m_LibraryHandle = nullptr;
		pWrapperTable->m_Driver_Configure = nullptr;
		pWrapperTable->m_Driver_GetName = nullptr;
		pWrapperTable->m_Driver_GetType = nullptr;
		pWrapperTable->m_Driver_GetVersion = nullptr;
		pWrapperTable->m_Driver_QueryParameters = nullptr;
		pWrapperTable->m_Driver_QueryParametersEx = nullptr;
		pWrapperTable->m_FrameBufferAccess_GetScreenWidth = nullptr;
		pWrapperTable->m_FrameBufferAccess_GetScreenHeight = nullptr;
		pWrapperTable->m_FrameBufferAccess_BitDepth = nullptr;
		pWrapperTable->m_FrameBufferAccess_UsesDoubleBuffering = nullptr;
		pWrapperTable->m_FrameBufferAccess_Flip = nullptr;
		pWrapperTable->m_FrameBufferAccess_ClearScreen = nullptr;
		pWrapperTable->m_FrameBufferAccess_DrawLine = nullptr;
		pWrapperTable->m_FrameBufferAccess_FillRectangle = nullptr;
		pWrapperTable->m_FrameBufferAccess_DrawImage = nullptr;
		pWrapperTable->m_Driver_FrameBuffer_SupportsSimulation = nullptr;
		pWrapperTable->m_Driver_FrameBuffer_SupportsDevice = nullptr;
		pWrapperTable->m_Driver_FrameBuffer_CreateFrameBufferSimulation = nullptr;
		pWrapperTable->m_Driver_FrameBuffer_OpenFrameBufferDevice = nullptr;
		pWrapperTable->m_Driver_FrameBuffer_ReleaseFramebuffer = nullptr;
		pWrapperTable->m_Driver_FrameBuffer_FindFrameBuffer = nullptr;
		pWrapperTable->m_Driver_FrameBuffer_FrameBufferExists = nullptr;
		pWrapperTable->m_GetVersion = nullptr;
		pWrapperTable->m_GetLastError = nullptr;
		pWrapperTable->m_ReleaseInstance = nullptr;
		pWrapperTable->m_AcquireInstance = nullptr;
		pWrapperTable->m_InjectComponent = nullptr;
		pWrapperTable->m_GetSymbolLookupMethod = nullptr;
		pWrapperTable->m_CreateDriver = nullptr;
		
		return LIBMCDRIVER_FRAMEBUFFER_SUCCESS;
	}

	inline LibMCDriver_FramebufferResult CWrapper::releaseWrapperTable(sLibMCDriver_FramebufferDynamicWrapperTable * pWrapperTable)
	{
		if (pWrapperTable == nullptr)
			return LIBMCDRIVER_FRAMEBUFFER_ERROR_INVALIDPARAM;
		
		if (pWrapperTable->m_LibraryHandle != nullptr) {
		#ifdef _WIN32
			HMODULE hModule = (HMODULE) pWrapperTable->m_LibraryHandle;
			FreeLibrary(hModule);
		#else // _WIN32
			dlclose(pWrapperTable->m_LibraryHandle);
		#endif // _WIN32
			return initWrapperTable(pWrapperTable);
		}
		
		return LIBMCDRIVER_FRAMEBUFFER_SUCCESS;
	}

	inline LibMCDriver_FramebufferResult CWrapper::loadWrapperTable(sLibMCDriver_FramebufferDynamicWrapperTable * pWrapperTable, const char * pLibraryFileName)
	{
		if (pWrapperTable == nullptr)
			return LIBMCDRIVER_FRAMEBUFFER_ERROR_INVALIDPARAM;
		if (pLibraryFileName == nullptr)
			return LIBMCDRIVER_FRAMEBUFFER_ERROR_INVALIDPARAM;
		
		#ifdef _WIN32
		// Convert filename to UTF16-string
		int nLength = 0;
		while ((pLibraryFileName[nLength] != 0) && (nLength < MAX_PATH))
			nLength++;
		int nBufferSize = nLength * 2 + 2;
		std::vector<wchar_t> wsLibraryFileName(nBufferSize);
		int nResult = MultiByteToWideChar(CP_UTF8, 0, pLibraryFileName, nLength, &wsLibraryFileName[0], nBufferSize);
		if (nResult == 0)
			return LIBMCDRIVER_FRAMEBUFFER_ERROR_COULDNOTLOADLIBRARY;
		
		HMODULE hLibrary = LoadLibraryW(wsLibraryFileName.data());
		if (hLibrary == 0) 
			return LIBMCDRIVER_FRAMEBUFFER_ERROR_COULDNOTLOADLIBRARY;
		#else // _WIN32
		void* hLibrary = dlopen(pLibraryFileName, RTLD_LAZY);
		if (hLibrary == 0) 
			return LIBMCDRIVER_FRAMEBUFFER_ERROR_COULDNOTLOADLIBRARY;
		dlerror();
		#endif // _WIN32
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_Configure = (PLibMCDriver_FramebufferDriver_ConfigurePtr) GetProcAddress(hLibrary, "libmcdriver_framebuffer_driver_configure");
		#else // _WIN32
		pWrapperTable->m_Driver_Configure = (PLibMCDriver_FramebufferDriver_ConfigurePtr) dlsym(hLibrary, "libmcdriver_framebuffer_driver_configure");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_Configure == nullptr)
			return LIBMCDRIVER_FRAMEBUFFER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_GetName = (PLibMCDriver_FramebufferDriver_GetNamePtr) GetProcAddress(hLibrary, "libmcdriver_framebuffer_driver_getname");
		#else // _WIN32
		pWrapperTable->m_Driver_GetName = (PLibMCDriver_FramebufferDriver_GetNamePtr) dlsym(hLibrary, "libmcdriver_framebuffer_driver_getname");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_GetName == nullptr)
			return LIBMCDRIVER_FRAMEBUFFER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_GetType = (PLibMCDriver_FramebufferDriver_GetTypePtr) GetProcAddress(hLibrary, "libmcdriver_framebuffer_driver_gettype");
		#else // _WIN32
		pWrapperTable->m_Driver_GetType = (PLibMCDriver_FramebufferDriver_GetTypePtr) dlsym(hLibrary, "libmcdriver_framebuffer_driver_gettype");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_GetType == nullptr)
			return LIBMCDRIVER_FRAMEBUFFER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_GetVersion = (PLibMCDriver_FramebufferDriver_GetVersionPtr) GetProcAddress(hLibrary, "libmcdriver_framebuffer_driver_getversion");
		#else // _WIN32
		pWrapperTable->m_Driver_GetVersion = (PLibMCDriver_FramebufferDriver_GetVersionPtr) dlsym(hLibrary, "libmcdriver_framebuffer_driver_getversion");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_GetVersion == nullptr)
			return LIBMCDRIVER_FRAMEBUFFER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_QueryParameters = (PLibMCDriver_FramebufferDriver_QueryParametersPtr) GetProcAddress(hLibrary, "libmcdriver_framebuffer_driver_queryparameters");
		#else // _WIN32
		pWrapperTable->m_Driver_QueryParameters = (PLibMCDriver_FramebufferDriver_QueryParametersPtr) dlsym(hLibrary, "libmcdriver_framebuffer_driver_queryparameters");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_QueryParameters == nullptr)
			return LIBMCDRIVER_FRAMEBUFFER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_QueryParametersEx = (PLibMCDriver_FramebufferDriver_QueryParametersExPtr) GetProcAddress(hLibrary, "libmcdriver_framebuffer_driver_queryparametersex");
		#else // _WIN32
		pWrapperTable->m_Driver_QueryParametersEx = (PLibMCDriver_FramebufferDriver_QueryParametersExPtr) dlsym(hLibrary, "libmcdriver_framebuffer_driver_queryparametersex");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_QueryParametersEx == nullptr)
			return LIBMCDRIVER_FRAMEBUFFER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_FrameBufferAccess_GetScreenWidth = (PLibMCDriver_FramebufferFrameBufferAccess_GetScreenWidthPtr) GetProcAddress(hLibrary, "libmcdriver_framebuffer_framebufferaccess_getscreenwidth");
		#else // _WIN32
		pWrapperTable->m_FrameBufferAccess_GetScreenWidth = (PLibMCDriver_FramebufferFrameBufferAccess_GetScreenWidthPtr) dlsym(hLibrary, "libmcdriver_framebuffer_framebufferaccess_getscreenwidth");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_FrameBufferAccess_GetScreenWidth == nullptr)
			return LIBMCDRIVER_FRAMEBUFFER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_FrameBufferAccess_GetScreenHeight = (PLibMCDriver_FramebufferFrameBufferAccess_GetScreenHeightPtr) GetProcAddress(hLibrary, "libmcdriver_framebuffer_framebufferaccess_getscreenheight");
		#else // _WIN32
		pWrapperTable->m_FrameBufferAccess_GetScreenHeight = (PLibMCDriver_FramebufferFrameBufferAccess_GetScreenHeightPtr) dlsym(hLibrary, "libmcdriver_framebuffer_framebufferaccess_getscreenheight");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_FrameBufferAccess_GetScreenHeight == nullptr)
			return LIBMCDRIVER_FRAMEBUFFER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_FrameBufferAccess_BitDepth = (PLibMCDriver_FramebufferFrameBufferAccess_BitDepthPtr) GetProcAddress(hLibrary, "libmcdriver_framebuffer_framebufferaccess_bitdepth");
		#else // _WIN32
		pWrapperTable->m_FrameBufferAccess_BitDepth = (PLibMCDriver_FramebufferFrameBufferAccess_BitDepthPtr) dlsym(hLibrary, "libmcdriver_framebuffer_framebufferaccess_bitdepth");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_FrameBufferAccess_BitDepth == nullptr)
			return LIBMCDRIVER_FRAMEBUFFER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_FrameBufferAccess_UsesDoubleBuffering = (PLibMCDriver_FramebufferFrameBufferAccess_UsesDoubleBufferingPtr) GetProcAddress(hLibrary, "libmcdriver_framebuffer_framebufferaccess_usesdoublebuffering");
		#else // _WIN32
		pWrapperTable->m_FrameBufferAccess_UsesDoubleBuffering = (PLibMCDriver_FramebufferFrameBufferAccess_UsesDoubleBufferingPtr) dlsym(hLibrary, "libmcdriver_framebuffer_framebufferaccess_usesdoublebuffering");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_FrameBufferAccess_UsesDoubleBuffering == nullptr)
			return LIBMCDRIVER_FRAMEBUFFER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_FrameBufferAccess_Flip = (PLibMCDriver_FramebufferFrameBufferAccess_FlipPtr) GetProcAddress(hLibrary, "libmcdriver_framebuffer_framebufferaccess_flip");
		#else // _WIN32
		pWrapperTable->m_FrameBufferAccess_Flip = (PLibMCDriver_FramebufferFrameBufferAccess_FlipPtr) dlsym(hLibrary, "libmcdriver_framebuffer_framebufferaccess_flip");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_FrameBufferAccess_Flip == nullptr)
			return LIBMCDRIVER_FRAMEBUFFER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_FrameBufferAccess_ClearScreen = (PLibMCDriver_FramebufferFrameBufferAccess_ClearScreenPtr) GetProcAddress(hLibrary, "libmcdriver_framebuffer_framebufferaccess_clearscreen");
		#else // _WIN32
		pWrapperTable->m_FrameBufferAccess_ClearScreen = (PLibMCDriver_FramebufferFrameBufferAccess_ClearScreenPtr) dlsym(hLibrary, "libmcdriver_framebuffer_framebufferaccess_clearscreen");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_FrameBufferAccess_ClearScreen == nullptr)
			return LIBMCDRIVER_FRAMEBUFFER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_FrameBufferAccess_DrawLine = (PLibMCDriver_FramebufferFrameBufferAccess_DrawLinePtr) GetProcAddress(hLibrary, "libmcdriver_framebuffer_framebufferaccess_drawline");
		#else // _WIN32
		pWrapperTable->m_FrameBufferAccess_DrawLine = (PLibMCDriver_FramebufferFrameBufferAccess_DrawLinePtr) dlsym(hLibrary, "libmcdriver_framebuffer_framebufferaccess_drawline");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_FrameBufferAccess_DrawLine == nullptr)
			return LIBMCDRIVER_FRAMEBUFFER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_FrameBufferAccess_FillRectangle = (PLibMCDriver_FramebufferFrameBufferAccess_FillRectanglePtr) GetProcAddress(hLibrary, "libmcdriver_framebuffer_framebufferaccess_fillrectangle");
		#else // _WIN32
		pWrapperTable->m_FrameBufferAccess_FillRectangle = (PLibMCDriver_FramebufferFrameBufferAccess_FillRectanglePtr) dlsym(hLibrary, "libmcdriver_framebuffer_framebufferaccess_fillrectangle");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_FrameBufferAccess_FillRectangle == nullptr)
			return LIBMCDRIVER_FRAMEBUFFER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_FrameBufferAccess_DrawImage = (PLibMCDriver_FramebufferFrameBufferAccess_DrawImagePtr) GetProcAddress(hLibrary, "libmcdriver_framebuffer_framebufferaccess_drawimage");
		#else // _WIN32
		pWrapperTable->m_FrameBufferAccess_DrawImage = (PLibMCDriver_FramebufferFrameBufferAccess_DrawImagePtr) dlsym(hLibrary, "libmcdriver_framebuffer_framebufferaccess_drawimage");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_FrameBufferAccess_DrawImage == nullptr)
			return LIBMCDRIVER_FRAMEBUFFER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_FrameBuffer_SupportsSimulation = (PLibMCDriver_FramebufferDriver_FrameBuffer_SupportsSimulationPtr) GetProcAddress(hLibrary, "libmcdriver_framebuffer_driver_framebuffer_supportssimulation");
		#else // _WIN32
		pWrapperTable->m_Driver_FrameBuffer_SupportsSimulation = (PLibMCDriver_FramebufferDriver_FrameBuffer_SupportsSimulationPtr) dlsym(hLibrary, "libmcdriver_framebuffer_driver_framebuffer_supportssimulation");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_FrameBuffer_SupportsSimulation == nullptr)
			return LIBMCDRIVER_FRAMEBUFFER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_FrameBuffer_SupportsDevice = (PLibMCDriver_FramebufferDriver_FrameBuffer_SupportsDevicePtr) GetProcAddress(hLibrary, "libmcdriver_framebuffer_driver_framebuffer_supportsdevice");
		#else // _WIN32
		pWrapperTable->m_Driver_FrameBuffer_SupportsDevice = (PLibMCDriver_FramebufferDriver_FrameBuffer_SupportsDevicePtr) dlsym(hLibrary, "libmcdriver_framebuffer_driver_framebuffer_supportsdevice");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_FrameBuffer_SupportsDevice == nullptr)
			return LIBMCDRIVER_FRAMEBUFFER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_FrameBuffer_CreateFrameBufferSimulation = (PLibMCDriver_FramebufferDriver_FrameBuffer_CreateFrameBufferSimulationPtr) GetProcAddress(hLibrary, "libmcdriver_framebuffer_driver_framebuffer_createframebuffersimulation");
		#else // _WIN32
		pWrapperTable->m_Driver_FrameBuffer_CreateFrameBufferSimulation = (PLibMCDriver_FramebufferDriver_FrameBuffer_CreateFrameBufferSimulationPtr) dlsym(hLibrary, "libmcdriver_framebuffer_driver_framebuffer_createframebuffersimulation");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_FrameBuffer_CreateFrameBufferSimulation == nullptr)
			return LIBMCDRIVER_FRAMEBUFFER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_FrameBuffer_OpenFrameBufferDevice = (PLibMCDriver_FramebufferDriver_FrameBuffer_OpenFrameBufferDevicePtr) GetProcAddress(hLibrary, "libmcdriver_framebuffer_driver_framebuffer_openframebufferdevice");
		#else // _WIN32
		pWrapperTable->m_Driver_FrameBuffer_OpenFrameBufferDevice = (PLibMCDriver_FramebufferDriver_FrameBuffer_OpenFrameBufferDevicePtr) dlsym(hLibrary, "libmcdriver_framebuffer_driver_framebuffer_openframebufferdevice");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_FrameBuffer_OpenFrameBufferDevice == nullptr)
			return LIBMCDRIVER_FRAMEBUFFER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_FrameBuffer_ReleaseFramebuffer = (PLibMCDriver_FramebufferDriver_FrameBuffer_ReleaseFramebufferPtr) GetProcAddress(hLibrary, "libmcdriver_framebuffer_driver_framebuffer_releaseframebuffer");
		#else // _WIN32
		pWrapperTable->m_Driver_FrameBuffer_ReleaseFramebuffer = (PLibMCDriver_FramebufferDriver_FrameBuffer_ReleaseFramebufferPtr) dlsym(hLibrary, "libmcdriver_framebuffer_driver_framebuffer_releaseframebuffer");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_FrameBuffer_ReleaseFramebuffer == nullptr)
			return LIBMCDRIVER_FRAMEBUFFER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_FrameBuffer_FindFrameBuffer = (PLibMCDriver_FramebufferDriver_FrameBuffer_FindFrameBufferPtr) GetProcAddress(hLibrary, "libmcdriver_framebuffer_driver_framebuffer_findframebuffer");
		#else // _WIN32
		pWrapperTable->m_Driver_FrameBuffer_FindFrameBuffer = (PLibMCDriver_FramebufferDriver_FrameBuffer_FindFrameBufferPtr) dlsym(hLibrary, "libmcdriver_framebuffer_driver_framebuffer_findframebuffer");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_FrameBuffer_FindFrameBuffer == nullptr)
			return LIBMCDRIVER_FRAMEBUFFER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_FrameBuffer_FrameBufferExists = (PLibMCDriver_FramebufferDriver_FrameBuffer_FrameBufferExistsPtr) GetProcAddress(hLibrary, "libmcdriver_framebuffer_driver_framebuffer_framebufferexists");
		#else // _WIN32
		pWrapperTable->m_Driver_FrameBuffer_FrameBufferExists = (PLibMCDriver_FramebufferDriver_FrameBuffer_FrameBufferExistsPtr) dlsym(hLibrary, "libmcdriver_framebuffer_driver_framebuffer_framebufferexists");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_FrameBuffer_FrameBufferExists == nullptr)
			return LIBMCDRIVER_FRAMEBUFFER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GetVersion = (PLibMCDriver_FramebufferGetVersionPtr) GetProcAddress(hLibrary, "libmcdriver_framebuffer_getversion");
		#else // _WIN32
		pWrapperTable->m_GetVersion = (PLibMCDriver_FramebufferGetVersionPtr) dlsym(hLibrary, "libmcdriver_framebuffer_getversion");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GetVersion == nullptr)
			return LIBMCDRIVER_FRAMEBUFFER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GetLastError = (PLibMCDriver_FramebufferGetLastErrorPtr) GetProcAddress(hLibrary, "libmcdriver_framebuffer_getlasterror");
		#else // _WIN32
		pWrapperTable->m_GetLastError = (PLibMCDriver_FramebufferGetLastErrorPtr) dlsym(hLibrary, "libmcdriver_framebuffer_getlasterror");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GetLastError == nullptr)
			return LIBMCDRIVER_FRAMEBUFFER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ReleaseInstance = (PLibMCDriver_FramebufferReleaseInstancePtr) GetProcAddress(hLibrary, "libmcdriver_framebuffer_releaseinstance");
		#else // _WIN32
		pWrapperTable->m_ReleaseInstance = (PLibMCDriver_FramebufferReleaseInstancePtr) dlsym(hLibrary, "libmcdriver_framebuffer_releaseinstance");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ReleaseInstance == nullptr)
			return LIBMCDRIVER_FRAMEBUFFER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_AcquireInstance = (PLibMCDriver_FramebufferAcquireInstancePtr) GetProcAddress(hLibrary, "libmcdriver_framebuffer_acquireinstance");
		#else // _WIN32
		pWrapperTable->m_AcquireInstance = (PLibMCDriver_FramebufferAcquireInstancePtr) dlsym(hLibrary, "libmcdriver_framebuffer_acquireinstance");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_AcquireInstance == nullptr)
			return LIBMCDRIVER_FRAMEBUFFER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_InjectComponent = (PLibMCDriver_FramebufferInjectComponentPtr) GetProcAddress(hLibrary, "libmcdriver_framebuffer_injectcomponent");
		#else // _WIN32
		pWrapperTable->m_InjectComponent = (PLibMCDriver_FramebufferInjectComponentPtr) dlsym(hLibrary, "libmcdriver_framebuffer_injectcomponent");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_InjectComponent == nullptr)
			return LIBMCDRIVER_FRAMEBUFFER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GetSymbolLookupMethod = (PLibMCDriver_FramebufferGetSymbolLookupMethodPtr) GetProcAddress(hLibrary, "libmcdriver_framebuffer_getsymbollookupmethod");
		#else // _WIN32
		pWrapperTable->m_GetSymbolLookupMethod = (PLibMCDriver_FramebufferGetSymbolLookupMethodPtr) dlsym(hLibrary, "libmcdriver_framebuffer_getsymbollookupmethod");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GetSymbolLookupMethod == nullptr)
			return LIBMCDRIVER_FRAMEBUFFER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_CreateDriver = (PLibMCDriver_FramebufferCreateDriverPtr) GetProcAddress(hLibrary, "libmcdriver_framebuffer_createdriver");
		#else // _WIN32
		pWrapperTable->m_CreateDriver = (PLibMCDriver_FramebufferCreateDriverPtr) dlsym(hLibrary, "libmcdriver_framebuffer_createdriver");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_CreateDriver == nullptr)
			return LIBMCDRIVER_FRAMEBUFFER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		pWrapperTable->m_LibraryHandle = hLibrary;
		return LIBMCDRIVER_FRAMEBUFFER_SUCCESS;
	}

	inline LibMCDriver_FramebufferResult CWrapper::loadWrapperTableFromSymbolLookupMethod(sLibMCDriver_FramebufferDynamicWrapperTable * pWrapperTable, void* pSymbolLookupMethod)
{
		if (pWrapperTable == nullptr)
			return LIBMCDRIVER_FRAMEBUFFER_ERROR_INVALIDPARAM;
		if (pSymbolLookupMethod == nullptr)
			return LIBMCDRIVER_FRAMEBUFFER_ERROR_INVALIDPARAM;
		
		typedef LibMCDriver_FramebufferResult(*SymbolLookupType)(const char*, void**);
		
		SymbolLookupType pLookup = (SymbolLookupType)pSymbolLookupMethod;
		
		LibMCDriver_FramebufferResult eLookupError = LIBMCDRIVER_FRAMEBUFFER_SUCCESS;
		eLookupError = (*pLookup)("libmcdriver_framebuffer_driver_configure", (void**)&(pWrapperTable->m_Driver_Configure));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_Configure == nullptr) )
			return LIBMCDRIVER_FRAMEBUFFER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_framebuffer_driver_getname", (void**)&(pWrapperTable->m_Driver_GetName));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_GetName == nullptr) )
			return LIBMCDRIVER_FRAMEBUFFER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_framebuffer_driver_gettype", (void**)&(pWrapperTable->m_Driver_GetType));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_GetType == nullptr) )
			return LIBMCDRIVER_FRAMEBUFFER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_framebuffer_driver_getversion", (void**)&(pWrapperTable->m_Driver_GetVersion));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_GetVersion == nullptr) )
			return LIBMCDRIVER_FRAMEBUFFER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_framebuffer_driver_queryparameters", (void**)&(pWrapperTable->m_Driver_QueryParameters));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_QueryParameters == nullptr) )
			return LIBMCDRIVER_FRAMEBUFFER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_framebuffer_driver_queryparametersex", (void**)&(pWrapperTable->m_Driver_QueryParametersEx));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_QueryParametersEx == nullptr) )
			return LIBMCDRIVER_FRAMEBUFFER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_framebuffer_framebufferaccess_getscreenwidth", (void**)&(pWrapperTable->m_FrameBufferAccess_GetScreenWidth));
		if ( (eLookupError != 0) || (pWrapperTable->m_FrameBufferAccess_GetScreenWidth == nullptr) )
			return LIBMCDRIVER_FRAMEBUFFER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_framebuffer_framebufferaccess_getscreenheight", (void**)&(pWrapperTable->m_FrameBufferAccess_GetScreenHeight));
		if ( (eLookupError != 0) || (pWrapperTable->m_FrameBufferAccess_GetScreenHeight == nullptr) )
			return LIBMCDRIVER_FRAMEBUFFER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_framebuffer_framebufferaccess_bitdepth", (void**)&(pWrapperTable->m_FrameBufferAccess_BitDepth));
		if ( (eLookupError != 0) || (pWrapperTable->m_FrameBufferAccess_BitDepth == nullptr) )
			return LIBMCDRIVER_FRAMEBUFFER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_framebuffer_framebufferaccess_usesdoublebuffering", (void**)&(pWrapperTable->m_FrameBufferAccess_UsesDoubleBuffering));
		if ( (eLookupError != 0) || (pWrapperTable->m_FrameBufferAccess_UsesDoubleBuffering == nullptr) )
			return LIBMCDRIVER_FRAMEBUFFER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_framebuffer_framebufferaccess_flip", (void**)&(pWrapperTable->m_FrameBufferAccess_Flip));
		if ( (eLookupError != 0) || (pWrapperTable->m_FrameBufferAccess_Flip == nullptr) )
			return LIBMCDRIVER_FRAMEBUFFER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_framebuffer_framebufferaccess_clearscreen", (void**)&(pWrapperTable->m_FrameBufferAccess_ClearScreen));
		if ( (eLookupError != 0) || (pWrapperTable->m_FrameBufferAccess_ClearScreen == nullptr) )
			return LIBMCDRIVER_FRAMEBUFFER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_framebuffer_framebufferaccess_drawline", (void**)&(pWrapperTable->m_FrameBufferAccess_DrawLine));
		if ( (eLookupError != 0) || (pWrapperTable->m_FrameBufferAccess_DrawLine == nullptr) )
			return LIBMCDRIVER_FRAMEBUFFER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_framebuffer_framebufferaccess_fillrectangle", (void**)&(pWrapperTable->m_FrameBufferAccess_FillRectangle));
		if ( (eLookupError != 0) || (pWrapperTable->m_FrameBufferAccess_FillRectangle == nullptr) )
			return LIBMCDRIVER_FRAMEBUFFER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_framebuffer_framebufferaccess_drawimage", (void**)&(pWrapperTable->m_FrameBufferAccess_DrawImage));
		if ( (eLookupError != 0) || (pWrapperTable->m_FrameBufferAccess_DrawImage == nullptr) )
			return LIBMCDRIVER_FRAMEBUFFER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_framebuffer_driver_framebuffer_supportssimulation", (void**)&(pWrapperTable->m_Driver_FrameBuffer_SupportsSimulation));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_FrameBuffer_SupportsSimulation == nullptr) )
			return LIBMCDRIVER_FRAMEBUFFER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_framebuffer_driver_framebuffer_supportsdevice", (void**)&(pWrapperTable->m_Driver_FrameBuffer_SupportsDevice));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_FrameBuffer_SupportsDevice == nullptr) )
			return LIBMCDRIVER_FRAMEBUFFER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_framebuffer_driver_framebuffer_createframebuffersimulation", (void**)&(pWrapperTable->m_Driver_FrameBuffer_CreateFrameBufferSimulation));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_FrameBuffer_CreateFrameBufferSimulation == nullptr) )
			return LIBMCDRIVER_FRAMEBUFFER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_framebuffer_driver_framebuffer_openframebufferdevice", (void**)&(pWrapperTable->m_Driver_FrameBuffer_OpenFrameBufferDevice));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_FrameBuffer_OpenFrameBufferDevice == nullptr) )
			return LIBMCDRIVER_FRAMEBUFFER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_framebuffer_driver_framebuffer_releaseframebuffer", (void**)&(pWrapperTable->m_Driver_FrameBuffer_ReleaseFramebuffer));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_FrameBuffer_ReleaseFramebuffer == nullptr) )
			return LIBMCDRIVER_FRAMEBUFFER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_framebuffer_driver_framebuffer_findframebuffer", (void**)&(pWrapperTable->m_Driver_FrameBuffer_FindFrameBuffer));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_FrameBuffer_FindFrameBuffer == nullptr) )
			return LIBMCDRIVER_FRAMEBUFFER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_framebuffer_driver_framebuffer_framebufferexists", (void**)&(pWrapperTable->m_Driver_FrameBuffer_FrameBufferExists));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_FrameBuffer_FrameBufferExists == nullptr) )
			return LIBMCDRIVER_FRAMEBUFFER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_framebuffer_getversion", (void**)&(pWrapperTable->m_GetVersion));
		if ( (eLookupError != 0) || (pWrapperTable->m_GetVersion == nullptr) )
			return LIBMCDRIVER_FRAMEBUFFER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_framebuffer_getlasterror", (void**)&(pWrapperTable->m_GetLastError));
		if ( (eLookupError != 0) || (pWrapperTable->m_GetLastError == nullptr) )
			return LIBMCDRIVER_FRAMEBUFFER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_framebuffer_releaseinstance", (void**)&(pWrapperTable->m_ReleaseInstance));
		if ( (eLookupError != 0) || (pWrapperTable->m_ReleaseInstance == nullptr) )
			return LIBMCDRIVER_FRAMEBUFFER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_framebuffer_acquireinstance", (void**)&(pWrapperTable->m_AcquireInstance));
		if ( (eLookupError != 0) || (pWrapperTable->m_AcquireInstance == nullptr) )
			return LIBMCDRIVER_FRAMEBUFFER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_framebuffer_injectcomponent", (void**)&(pWrapperTable->m_InjectComponent));
		if ( (eLookupError != 0) || (pWrapperTable->m_InjectComponent == nullptr) )
			return LIBMCDRIVER_FRAMEBUFFER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_framebuffer_getsymbollookupmethod", (void**)&(pWrapperTable->m_GetSymbolLookupMethod));
		if ( (eLookupError != 0) || (pWrapperTable->m_GetSymbolLookupMethod == nullptr) )
			return LIBMCDRIVER_FRAMEBUFFER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_framebuffer_createdriver", (void**)&(pWrapperTable->m_CreateDriver));
		if ( (eLookupError != 0) || (pWrapperTable->m_CreateDriver == nullptr) )
			return LIBMCDRIVER_FRAMEBUFFER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		return LIBMCDRIVER_FRAMEBUFFER_SUCCESS;
}

	
	
	/**
	 * Method definitions for class CBase
	 */
	
	/**
	 * Method definitions for class CDriver
	 */
	
	/**
	* CDriver::Configure - Configures a driver with its specific configuration data.
	* @param[in] sConfigurationString - Configuration data of driver.
	*/
	void CDriver::Configure(const std::string & sConfigurationString)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_Configure(m_pHandle, sConfigurationString.c_str()));
	}
	
	/**
	* CDriver::GetName - returns the name identifier of the driver
	* @return Name of the driver.
	*/
	std::string CDriver::GetName()
	{
		LibMCDriver_Framebuffer_uint32 bytesNeededName = 0;
		LibMCDriver_Framebuffer_uint32 bytesWrittenName = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetName(m_pHandle, 0, &bytesNeededName, nullptr));
		std::vector<char> bufferName(bytesNeededName);
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetName(m_pHandle, bytesNeededName, &bytesWrittenName, &bufferName[0]));
		
		return std::string(&bufferName[0]);
	}
	
	/**
	* CDriver::GetType - returns the type identifier of the driver
	* @return Type of the driver.
	*/
	std::string CDriver::GetType()
	{
		LibMCDriver_Framebuffer_uint32 bytesNeededType = 0;
		LibMCDriver_Framebuffer_uint32 bytesWrittenType = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetType(m_pHandle, 0, &bytesNeededType, nullptr));
		std::vector<char> bufferType(bytesNeededType);
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetType(m_pHandle, bytesNeededType, &bytesWrittenType, &bufferType[0]));
		
		return std::string(&bufferType[0]);
	}
	
	/**
	* CDriver::GetVersion - returns the version identifiers of the driver
	* @param[out] nMajor - Major version.
	* @param[out] nMinor - Minor version.
	* @param[out] nMicro - Micro version.
	* @param[out] sBuild - Build identifier.
	*/
	void CDriver::GetVersion(LibMCDriver_Framebuffer_uint32 & nMajor, LibMCDriver_Framebuffer_uint32 & nMinor, LibMCDriver_Framebuffer_uint32 & nMicro, std::string & sBuild)
	{
		LibMCDriver_Framebuffer_uint32 bytesNeededBuild = 0;
		LibMCDriver_Framebuffer_uint32 bytesWrittenBuild = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetVersion(m_pHandle, &nMajor, &nMinor, &nMicro, 0, &bytesNeededBuild, nullptr));
		std::vector<char> bufferBuild(bytesNeededBuild);
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetVersion(m_pHandle, &nMajor, &nMinor, &nMicro, bytesNeededBuild, &bytesWrittenBuild, &bufferBuild[0]));
		sBuild = std::string(&bufferBuild[0]);
	}
	
	/**
	* CDriver::QueryParameters - Updates the driver parameters in the driver environment. Should only be called in the driver thread.
	*/
	void CDriver::QueryParameters()
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_QueryParameters(m_pHandle));
	}
	
	/**
	* CDriver::QueryParametersEx - Updates the driver parameters in the driver environment. Might be called out of thread. Implementation MUST be able to handle parallel calls.
	* @param[in] pDriverUpdateInstance - Status update instance.
	*/
	void CDriver::QueryParametersEx(classParam<LibMCEnv::CDriverStatusUpdateSession> pDriverUpdateInstance)
	{
		LibMCEnvHandle hDriverUpdateInstance = pDriverUpdateInstance.GetHandle();
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_QueryParametersEx(m_pHandle, hDriverUpdateInstance));
	}
	
	/**
	 * Method definitions for class CFrameBufferAccess
	 */
	
	/**
	* CFrameBufferAccess::GetScreenWidth - Returns the width of the screen.
	* @return Screen width of Framebuffer. Minimum 128, Maximum 16348..
	*/
	LibMCDriver_Framebuffer_uint32 CFrameBufferAccess::GetScreenWidth()
	{
		LibMCDriver_Framebuffer_uint32 resultScreenWidth = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_FrameBufferAccess_GetScreenWidth(m_pHandle, &resultScreenWidth));
		
		return resultScreenWidth;
	}
	
	/**
	* CFrameBufferAccess::GetScreenHeight - Returns the height of the screen.
	* @return Screen height of Framebuffer. Minimum 128, Maximum 16348..
	*/
	LibMCDriver_Framebuffer_uint32 CFrameBufferAccess::GetScreenHeight()
	{
		LibMCDriver_Framebuffer_uint32 resultScreenHeight = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_FrameBufferAccess_GetScreenHeight(m_pHandle, &resultScreenHeight));
		
		return resultScreenHeight;
	}
	
	/**
	* CFrameBufferAccess::BitDepth - Returns the bitdepth of the screen.
	* @return Framebuffer bit depth.
	*/
	eFrameBufferBitDepth CFrameBufferAccess::BitDepth()
	{
		eFrameBufferBitDepth resultBitDepth = (eFrameBufferBitDepth) 0;
		CheckError(m_pWrapper->m_WrapperTable.m_FrameBufferAccess_BitDepth(m_pHandle, &resultBitDepth));
		
		return resultBitDepth;
	}
	
	/**
	* CFrameBufferAccess::UsesDoubleBuffering - Returns, if the frame buffer supports and uses double buffering.
	* @return Returns true if Double buffering is in enabled.
	*/
	bool CFrameBufferAccess::UsesDoubleBuffering()
	{
		bool resultDoubleBufferingIsEnabled = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_FrameBufferAccess_UsesDoubleBuffering(m_pHandle, &resultDoubleBufferingIsEnabled));
		
		return resultDoubleBufferingIsEnabled;
	}
	
	/**
	* CFrameBufferAccess::Flip - Flips the buffers and shows the current draw buffer on screen. Does nothing if double buffering is disabled.
	*/
	void CFrameBufferAccess::Flip()
	{
		CheckError(m_pWrapper->m_WrapperTable.m_FrameBufferAccess_Flip(m_pHandle));
	}
	
	/**
	* CFrameBufferAccess::ClearScreen - Clears the current draw buffer with an arbitrary precision color.
	* @param[in] RGBColor - Color to use.
	*/
	void CFrameBufferAccess::ClearScreen(const sColor & RGBColor)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_FrameBufferAccess_ClearScreen(m_pHandle, &RGBColor));
	}
	
	/**
	* CFrameBufferAccess::DrawLine - Draws a line in a certain color.
	* @param[in] nX1 - X Coordinate of first point to use.
	* @param[in] nY1 - Y Coordinate of first point to use.
	* @param[in] nX2 - X Coordinate of first point to use.
	* @param[in] nY2 - Y Coordinate of first point to use.
	* @param[in] dThickness - Thickness of the line in pixels.
	* @param[in] RGBColor - Color to use.
	*/
	void CFrameBufferAccess::DrawLine(const LibMCDriver_Framebuffer_uint32 nX1, const LibMCDriver_Framebuffer_uint32 nY1, const LibMCDriver_Framebuffer_uint32 nX2, const LibMCDriver_Framebuffer_uint32 nY2, const LibMCDriver_Framebuffer_double dThickness, const sColor & RGBColor)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_FrameBufferAccess_DrawLine(m_pHandle, nX1, nY1, nX2, nY2, dThickness, &RGBColor));
	}
	
	/**
	* CFrameBufferAccess::FillRectangle - Draws a rectangle in a certain color, including the corner points.
	* @param[in] nX1 - X Coordinate of first point to use.
	* @param[in] nY1 - Y Coordinate of first point to use.
	* @param[in] nX2 - X Coordinate of first point to use.
	* @param[in] nY2 - Y Coordinate of first point to use.
	* @param[in] RGBColor - Color to use.
	*/
	void CFrameBufferAccess::FillRectangle(const LibMCDriver_Framebuffer_uint32 nX1, const LibMCDriver_Framebuffer_uint32 nY1, const LibMCDriver_Framebuffer_uint32 nX2, const LibMCDriver_Framebuffer_uint32 nY2, const sColor & RGBColor)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_FrameBufferAccess_FillRectangle(m_pHandle, nX1, nY1, nX2, nY2, &RGBColor));
	}
	
	/**
	* CFrameBufferAccess::DrawImage - Draws an image at a certain position.
	* @param[in] nX - X Coordinate of image.
	* @param[in] nY - Y Coordinate of image.
	* @param[in] pImage - Image object to draw.
	*/
	void CFrameBufferAccess::DrawImage(const LibMCDriver_Framebuffer_uint32 nX, const LibMCDriver_Framebuffer_uint32 nY, classParam<LibMCEnv::CImageData> pImage)
	{
		LibMCEnvHandle hImage = pImage.GetHandle();
		CheckError(m_pWrapper->m_WrapperTable.m_FrameBufferAccess_DrawImage(m_pHandle, nX, nY, hImage));
	}
	
	/**
	 * Method definitions for class CDriver_FrameBuffer
	 */
	
	/**
	* CDriver_FrameBuffer::SupportsSimulation - Returns if a the driver supports simulation framebuffers
	* @return Returns true if simulation Framebuffer are supported.
	*/
	bool CDriver_FrameBuffer::SupportsSimulation()
	{
		bool resultSupportFlag = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_FrameBuffer_SupportsSimulation(m_pHandle, &resultSupportFlag));
		
		return resultSupportFlag;
	}
	
	/**
	* CDriver_FrameBuffer::SupportsDevice - Returns if a the driver supports physical framebuffer devices.
	* @return Returns true if physical framebuffer devices are supported. Returns false on platforms that do not support Framebuffers.
	*/
	bool CDriver_FrameBuffer::SupportsDevice()
	{
		bool resultSupportFlag = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_FrameBuffer_SupportsDevice(m_pHandle, &resultSupportFlag));
		
		return resultSupportFlag;
	}
	
	/**
	* CDriver_FrameBuffer::CreateFrameBufferSimulation - Creates a fake framebuffer instance. Failes if Simulation is not supported.
	* @param[in] sIdentifier - Identifier of the framebuffer instance. Alphanumeric string with optional _ and - character up to 256 characters. Fails if identifier is empty or already exists.
	* @param[in] nScreenWidth - Screen width to use. Minimum 128, Maximum 16348..
	* @param[in] nScreenHeight - Screen height to use. Minimum 128, Maximum 16348..
	* @param[in] eBitDepth - Framebuffer bit depth.
	* @return Framebuffer access instance.
	*/
	PFrameBufferAccess CDriver_FrameBuffer::CreateFrameBufferSimulation(const std::string & sIdentifier, const LibMCDriver_Framebuffer_uint32 nScreenWidth, const LibMCDriver_Framebuffer_uint32 nScreenHeight, const eFrameBufferBitDepth eBitDepth)
	{
		LibMCDriver_FramebufferHandle hFrameBufferInstance = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_FrameBuffer_CreateFrameBufferSimulation(m_pHandle, sIdentifier.c_str(), nScreenWidth, nScreenHeight, eBitDepth, &hFrameBufferInstance));
		
		if (!hFrameBufferInstance) {
			CheckError(LIBMCDRIVER_FRAMEBUFFER_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CFrameBufferAccess>(m_pWrapper, hFrameBufferInstance);
	}
	
	/**
	* CDriver_FrameBuffer::OpenFrameBufferDevice - Opens a new framebuffer device on Linux. Creates a simulation device on other platforms in 1920x1280x24.
	* @param[in] sIdentifier - Identifier of the framebuffer instance. Alphanumeric string with optional _ and - character up to 256 characters. Fails if identifier is empty or already exists.
	* @param[in] sDeviceName - Device name, for example /dev/fb0.
	* @return Framebuffer access instance.
	*/
	PFrameBufferAccess CDriver_FrameBuffer::OpenFrameBufferDevice(const std::string & sIdentifier, const std::string & sDeviceName)
	{
		LibMCDriver_FramebufferHandle hFrameBufferInstance = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_FrameBuffer_OpenFrameBufferDevice(m_pHandle, sIdentifier.c_str(), sDeviceName.c_str(), &hFrameBufferInstance));
		
		if (!hFrameBufferInstance) {
			CheckError(LIBMCDRIVER_FRAMEBUFFER_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CFrameBufferAccess>(m_pWrapper, hFrameBufferInstance);
	}
	
	/**
	* CDriver_FrameBuffer::ReleaseFramebuffer - Releases a Framebuffer instance. Does nothing if insance does not exist.
	* @param[in] sIdentifier - Identifier of the framebuffer instance. Alphanumeric string with optional _ and - character up to 256 characters. Fails if identifier is empty or already exists.
	*/
	void CDriver_FrameBuffer::ReleaseFramebuffer(const std::string & sIdentifier)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_FrameBuffer_ReleaseFramebuffer(m_pHandle, sIdentifier.c_str()));
	}
	
	/**
	* CDriver_FrameBuffer::FindFrameBuffer - Retrieves a previously created framebuffer instance. Fails if instance does not exist.
	* @param[in] sIdentifier - Identifier of the framebuffer instance. Alphanumeric string with optional _ and - character up to 256 characters. Fails if identifier is empty or already exists.
	* @return Framebuffer access instance.
	*/
	PFrameBufferAccess CDriver_FrameBuffer::FindFrameBuffer(const std::string & sIdentifier)
	{
		LibMCDriver_FramebufferHandle hFrameBufferInstance = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_FrameBuffer_FindFrameBuffer(m_pHandle, sIdentifier.c_str(), &hFrameBufferInstance));
		
		if (!hFrameBufferInstance) {
			CheckError(LIBMCDRIVER_FRAMEBUFFER_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CFrameBufferAccess>(m_pWrapper, hFrameBufferInstance);
	}
	
	/**
	* CDriver_FrameBuffer::FrameBufferExists - Returns if a framebuffer instance exists.
	* @param[in] sIdentifier - Identifier of the framebuffer instance. Alphanumeric string with optional _ and - character up to 256 characters. Fails if identifier is empty or already exists.
	* @return Returns true if Framebuffer exists.
	*/
	bool CDriver_FrameBuffer::FrameBufferExists(const std::string & sIdentifier)
	{
		bool resultExists = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_FrameBuffer_FrameBufferExists(m_pHandle, sIdentifier.c_str(), &resultExists));
		
		return resultExists;
	}

} // namespace LibMCDriver_Framebuffer

#endif // __LIBMCDRIVER_FRAMEBUFFER_CPPHEADER_DYNAMIC_CPP

