/*++

Copyright (C) 2024 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.8.0-develop.

Abstract: This is an autogenerated C++-Header file with basic types in
order to allow an easy use of Generic Linux Framebuffer Driver

Interface version: 2.0.0

*/

#ifndef __LIBMCDRIVER_FRAMEBUFFER_TYPES_HEADER_CPP
#define __LIBMCDRIVER_FRAMEBUFFER_TYPES_HEADER_CPP


/*************************************************************************************************************************
 Scalar types definition
**************************************************************************************************************************/

#ifdef LIBMCDRIVER_FRAMEBUFFER_USELEGACYINTEGERTYPES

typedef unsigned char LibMCDriver_Framebuffer_uint8;
typedef unsigned short LibMCDriver_Framebuffer_uint16 ;
typedef unsigned int LibMCDriver_Framebuffer_uint32;
typedef unsigned long long LibMCDriver_Framebuffer_uint64;
typedef char LibMCDriver_Framebuffer_int8;
typedef short LibMCDriver_Framebuffer_int16;
typedef int LibMCDriver_Framebuffer_int32;
typedef long long LibMCDriver_Framebuffer_int64;

#else // LIBMCDRIVER_FRAMEBUFFER_USELEGACYINTEGERTYPES

#include <stdint.h>

typedef uint8_t LibMCDriver_Framebuffer_uint8;
typedef uint16_t LibMCDriver_Framebuffer_uint16;
typedef uint32_t LibMCDriver_Framebuffer_uint32;
typedef uint64_t LibMCDriver_Framebuffer_uint64;
typedef int8_t LibMCDriver_Framebuffer_int8;
typedef int16_t LibMCDriver_Framebuffer_int16;
typedef int32_t LibMCDriver_Framebuffer_int32;
typedef int64_t LibMCDriver_Framebuffer_int64 ;

#endif // LIBMCDRIVER_FRAMEBUFFER_USELEGACYINTEGERTYPES

typedef float LibMCDriver_Framebuffer_single;
typedef double LibMCDriver_Framebuffer_double;

/*************************************************************************************************************************
 General type definitions
**************************************************************************************************************************/

typedef LibMCDriver_Framebuffer_int32 LibMCDriver_FramebufferResult;
typedef void * LibMCDriver_FramebufferHandle;
typedef void * LibMCDriver_Framebuffer_pvoid;

/*************************************************************************************************************************
 Version for LibMCDriver_Framebuffer
**************************************************************************************************************************/

#define LIBMCDRIVER_FRAMEBUFFER_VERSION_MAJOR 2
#define LIBMCDRIVER_FRAMEBUFFER_VERSION_MINOR 0
#define LIBMCDRIVER_FRAMEBUFFER_VERSION_MICRO 0
#define LIBMCDRIVER_FRAMEBUFFER_VERSION_PRERELEASEINFO ""
#define LIBMCDRIVER_FRAMEBUFFER_VERSION_BUILDINFO ""

/*************************************************************************************************************************
 Error constants for LibMCDriver_Framebuffer
**************************************************************************************************************************/

#define LIBMCDRIVER_FRAMEBUFFER_SUCCESS 0
#define LIBMCDRIVER_FRAMEBUFFER_ERROR_NOTIMPLEMENTED 1 /** functionality not implemented */
#define LIBMCDRIVER_FRAMEBUFFER_ERROR_INVALIDPARAM 2 /** an invalid parameter was passed */
#define LIBMCDRIVER_FRAMEBUFFER_ERROR_INVALIDCAST 3 /** a type cast failed */
#define LIBMCDRIVER_FRAMEBUFFER_ERROR_BUFFERTOOSMALL 4 /** a provided buffer is too small */
#define LIBMCDRIVER_FRAMEBUFFER_ERROR_GENERICEXCEPTION 5 /** a generic exception occurred */
#define LIBMCDRIVER_FRAMEBUFFER_ERROR_COULDNOTLOADLIBRARY 6 /** the library could not be loaded */
#define LIBMCDRIVER_FRAMEBUFFER_ERROR_COULDNOTFINDLIBRARYEXPORT 7 /** a required exported symbol could not be found in the library */
#define LIBMCDRIVER_FRAMEBUFFER_ERROR_INCOMPATIBLEBINARYVERSION 8 /** the version of the binary interface does not match the bindings interface */
#define LIBMCDRIVER_FRAMEBUFFER_ERROR_DRIVERERROR 1000 /** a driver error occured */
#define LIBMCDRIVER_FRAMEBUFFER_ERROR_DEVICENOTSUPPORTEDONPLATFORM 1001 /** device not supported on platform */
#define LIBMCDRIVER_FRAMEBUFFER_ERROR_COULDNOTOPENFRAMEBUFFERDEVICE 1002 /** could not open framebuffer device */
#define LIBMCDRIVER_FRAMEBUFFER_ERROR_COULDNOTGETFIXEDSCREENINFO 1003 /** could not get fixed screen info */
#define LIBMCDRIVER_FRAMEBUFFER_ERROR_COULDNOTGETVARIABLESCREENINFO 1004 /** could not get fixed variable info */
#define LIBMCDRIVER_FRAMEBUFFER_ERROR_COULDNOTMAPFRAMEBUFFERMEMORY 1005 /** could not get map framebuffer memory */
#define LIBMCDRIVER_FRAMEBUFFER_ERROR_UNKNOWNFRAMEBUFFERBITDEPTH 1006 /** unknown framebuffer bit depth */

/*************************************************************************************************************************
 Error strings for LibMCDriver_Framebuffer
**************************************************************************************************************************/

inline const char * LIBMCDRIVER_FRAMEBUFFER_GETERRORSTRING (LibMCDriver_FramebufferResult nErrorCode) {
  switch (nErrorCode) {
    case LIBMCDRIVER_FRAMEBUFFER_SUCCESS: return "no error";
    case LIBMCDRIVER_FRAMEBUFFER_ERROR_NOTIMPLEMENTED: return "functionality not implemented";
    case LIBMCDRIVER_FRAMEBUFFER_ERROR_INVALIDPARAM: return "an invalid parameter was passed";
    case LIBMCDRIVER_FRAMEBUFFER_ERROR_INVALIDCAST: return "a type cast failed";
    case LIBMCDRIVER_FRAMEBUFFER_ERROR_BUFFERTOOSMALL: return "a provided buffer is too small";
    case LIBMCDRIVER_FRAMEBUFFER_ERROR_GENERICEXCEPTION: return "a generic exception occurred";
    case LIBMCDRIVER_FRAMEBUFFER_ERROR_COULDNOTLOADLIBRARY: return "the library could not be loaded";
    case LIBMCDRIVER_FRAMEBUFFER_ERROR_COULDNOTFINDLIBRARYEXPORT: return "a required exported symbol could not be found in the library";
    case LIBMCDRIVER_FRAMEBUFFER_ERROR_INCOMPATIBLEBINARYVERSION: return "the version of the binary interface does not match the bindings interface";
    case LIBMCDRIVER_FRAMEBUFFER_ERROR_DRIVERERROR: return "a driver error occured";
    case LIBMCDRIVER_FRAMEBUFFER_ERROR_DEVICENOTSUPPORTEDONPLATFORM: return "device not supported on platform";
    case LIBMCDRIVER_FRAMEBUFFER_ERROR_COULDNOTOPENFRAMEBUFFERDEVICE: return "could not open framebuffer device";
    case LIBMCDRIVER_FRAMEBUFFER_ERROR_COULDNOTGETFIXEDSCREENINFO: return "could not get fixed screen info";
    case LIBMCDRIVER_FRAMEBUFFER_ERROR_COULDNOTGETVARIABLESCREENINFO: return "could not get fixed variable info";
    case LIBMCDRIVER_FRAMEBUFFER_ERROR_COULDNOTMAPFRAMEBUFFERMEMORY: return "could not get map framebuffer memory";
    case LIBMCDRIVER_FRAMEBUFFER_ERROR_UNKNOWNFRAMEBUFFERBITDEPTH: return "unknown framebuffer bit depth";
    default: return "unknown error";
  }
}

/*************************************************************************************************************************
 Declaration of handle classes 
**************************************************************************************************************************/

typedef LibMCDriver_FramebufferHandle LibMCDriver_Framebuffer_Base;
typedef LibMCDriver_FramebufferHandle LibMCDriver_Framebuffer_Driver;
typedef LibMCDriver_FramebufferHandle LibMCDriver_Framebuffer_FrameBufferAccess;
typedef LibMCDriver_FramebufferHandle LibMCDriver_Framebuffer_Driver_FrameBuffer;

namespace LibMCDriver_Framebuffer {

  /*************************************************************************************************************************
   Declaration of enums
  **************************************************************************************************************************/
  
  /**
  * enum class eFrameBufferBitDepth - Bit Depth of a frame buffer
  */
  enum class eFrameBufferBitDepth : LibMCDriver_Framebuffer_int32 {
    Unknown = 0,
    RGB888 = 1,
    RGBA8888 = 2,
    RGB565 = 3
  };
  
  /*************************************************************************************************************************
   Declaration of structs
  **************************************************************************************************************************/
  
  #pragma pack (1)
  
  typedef struct sColor {
      LibMCDriver_Framebuffer_uint8 m_Red;
      LibMCDriver_Framebuffer_uint8 m_Green;
      LibMCDriver_Framebuffer_uint8 m_Blue;
  } sColor;
  
  #pragma pack ()
  
} // namespace LibMCDriver_Framebuffer;

// define legacy C-names for enums, structs and function types
typedef LibMCDriver_Framebuffer::eFrameBufferBitDepth eLibMCDriver_FramebufferFrameBufferBitDepth;
typedef LibMCDriver_Framebuffer::sColor sLibMCDriver_FramebufferColor;

#endif // __LIBMCDRIVER_FRAMEBUFFER_TYPES_HEADER_CPP
