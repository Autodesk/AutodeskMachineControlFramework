/*++

Copyright (C) 2021 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.7.0-develop.

Abstract: This is an autogenerated C++-Header file in order to allow an easy
 use of MQTT Library

Interface version: 1.0.0

*/

#ifndef __LIBMQTT_CPPHEADER_DYNAMIC_CPP
#define __LIBMQTT_CPPHEADER_DYNAMIC_CPP

#include "libmqtt_types.hpp"
#include "libmqtt_dynamic.h"


#ifdef _WIN32
#include <windows.h>
#else // _WIN32
#include <dlfcn.h>
#endif // _WIN32
#include <string>
#include <memory>
#include <vector>
#include <exception>

namespace LibMQTT {

/*************************************************************************************************************************
 Forward Declaration of all classes
**************************************************************************************************************************/
class CWrapper;
class CBase;
class CMQTTContext;

/*************************************************************************************************************************
 Declaration of deprecated class types
**************************************************************************************************************************/
typedef CWrapper CLibMQTTWrapper;
typedef CBase CLibMQTTBase;
typedef CMQTTContext CLibMQTTMQTTContext;

/*************************************************************************************************************************
 Declaration of shared pointer types
**************************************************************************************************************************/
typedef std::shared_ptr<CWrapper> PWrapper;
typedef std::shared_ptr<CBase> PBase;
typedef std::shared_ptr<CMQTTContext> PMQTTContext;

/*************************************************************************************************************************
 Declaration of deprecated shared pointer types
**************************************************************************************************************************/
typedef PWrapper PLibMQTTWrapper;
typedef PBase PLibMQTTBase;
typedef PMQTTContext PLibMQTTMQTTContext;


/*************************************************************************************************************************
 classParam Definition
**************************************************************************************************************************/

template<class T> class classParam {
private:
	const T* m_ptr;

public:
	classParam(const T* ptr)
		: m_ptr (ptr)
	{
	}

	classParam(std::shared_ptr <T> sharedPtr)
		: m_ptr (sharedPtr.get())
	{
	}

	LibMQTTHandle GetHandle()
	{
		if (m_ptr != nullptr)
			return m_ptr->handle();
		return nullptr;
	}
};

/*************************************************************************************************************************
 Class ELibMQTTException 
**************************************************************************************************************************/
class ELibMQTTException : public std::exception {
protected:
	/**
	* Error code for the Exception.
	*/
	LibMQTTResult m_errorCode;
	/**
	* Error message for the Exception.
	*/
	std::string m_errorMessage;

public:
	/**
	* Exception Constructor.
	*/
	ELibMQTTException(LibMQTTResult errorCode, const std::string & sErrorMessage)
		: m_errorMessage("LibMQTT Error " + std::to_string(errorCode) + " (" + sErrorMessage + ")")
	{
		m_errorCode = errorCode;
	}

	/**
	* Returns error code
	*/
	LibMQTTResult getErrorCode() const noexcept
	{
		return m_errorCode;
	}

	/**
	* Returns error message
	*/
	const char* what() const noexcept
	{
		return m_errorMessage.c_str();
	}

};

/*************************************************************************************************************************
 Class CInputVector
**************************************************************************************************************************/
template <typename T>
class CInputVector {
private:
	
	const T* m_data;
	size_t m_size;
	
public:
	
	CInputVector( const std::vector<T>& vec)
		: m_data( vec.data() ), m_size( vec.size() )
	{
	}
	
	CInputVector( const T* in_data, size_t in_size)
		: m_data( in_data ), m_size(in_size )
	{
	}
	
	const T* data() const
	{
		return m_data;
	}
	
	size_t size() const
	{
		return m_size;
	}
	
};

// declare deprecated class name
template<typename T>
using CLibMQTTInputVector = CInputVector<T>;

/*************************************************************************************************************************
 Class CWrapper 
**************************************************************************************************************************/
class CWrapper {
public:
	
	CWrapper(void* pSymbolLookupMethod)
	{
		CheckError(nullptr, initWrapperTable(&m_WrapperTable));
		CheckError(nullptr, loadWrapperTableFromSymbolLookupMethod(&m_WrapperTable, pSymbolLookupMethod));
		
		CheckError(nullptr, checkBinaryVersion());
	}
	
	CWrapper(const std::string &sFileName)
	{
		CheckError(nullptr, initWrapperTable(&m_WrapperTable));
		CheckError(nullptr, loadWrapperTable(&m_WrapperTable, sFileName.c_str()));
		
		CheckError(nullptr, checkBinaryVersion());
	}
	
	static PWrapper loadLibrary(const std::string &sFileName)
	{
		return std::make_shared<CWrapper>(sFileName);
	}
	
	static PWrapper loadLibraryFromSymbolLookupMethod(void* pSymbolLookupMethod)
	{
		return std::make_shared<CWrapper>(pSymbolLookupMethod);
	}
	
	~CWrapper()
	{
		releaseWrapperTable(&m_WrapperTable);
	}
	
	inline void CheckError(CBase * pBaseClass, LibMQTTResult nResult);

	inline void GetVersion(LibMQTT_uint32 & nMajor, LibMQTT_uint32 & nMinor, LibMQTT_uint32 & nMicro);
	inline bool GetLastError(classParam<CBase> pInstance, std::string & sErrorMessage);
	inline void ReleaseInstance(classParam<CBase> pInstance);
	inline void AcquireInstance(classParam<CBase> pInstance);
	inline void InjectComponent(const std::string & sNameSpace, const LibMQTT_pvoid pSymbolAddressMethod);
	inline PMQTTContext CreateContext(const std::string & sInstanceName);

private:
	sLibMQTTDynamicWrapperTable m_WrapperTable;
	
	LibMQTTResult checkBinaryVersion()
	{
		LibMQTT_uint32 nMajor, nMinor, nMicro;
		GetVersion(nMajor, nMinor, nMicro);
		if ( (nMajor != LIBMQTT_VERSION_MAJOR) || (nMinor < LIBMQTT_VERSION_MINOR) ) {
			return LIBMQTT_ERROR_INCOMPATIBLEBINARYVERSION;
		}
		return LIBMQTT_SUCCESS;
	}
	LibMQTTResult initWrapperTable(sLibMQTTDynamicWrapperTable * pWrapperTable);
	LibMQTTResult releaseWrapperTable(sLibMQTTDynamicWrapperTable * pWrapperTable);
	LibMQTTResult loadWrapperTable(sLibMQTTDynamicWrapperTable * pWrapperTable, const char * pLibraryFileName);
	LibMQTTResult loadWrapperTableFromSymbolLookupMethod(sLibMQTTDynamicWrapperTable * pWrapperTable, void* pSymbolLookupMethod);

	friend class CBase;
	friend class CMQTTContext;

};

	
/*************************************************************************************************************************
 Class CBase 
**************************************************************************************************************************/
class CBase {
public:
	
protected:
	/* Wrapper Object that created the class. */
	CWrapper * m_pWrapper;
	/* Handle to Instance in library*/
	LibMQTTHandle m_pHandle;

	/* Checks for an Error code and raises Exceptions */
	void CheckError(LibMQTTResult nResult)
	{
		if (m_pWrapper != nullptr)
			m_pWrapper->CheckError(this, nResult);
	}
public:
	/**
	* CBase::CBase - Constructor for Base class.
	*/
	CBase(CWrapper * pWrapper, LibMQTTHandle pHandle)
		: m_pWrapper(pWrapper), m_pHandle(pHandle)
	{
	}

	/**
	* CBase::~CBase - Destructor for Base class.
	*/
	virtual ~CBase()
	{
		if (m_pWrapper != nullptr)
			m_pWrapper->ReleaseInstance(this);
		m_pWrapper = nullptr;
	}

	/**
	* CBase::handle - Returns handle to instance.
	*/
	LibMQTTHandle handle() const
	{
		return m_pHandle;
	}

	/**
	* CBase::wrapper - Returns wrapper instance.
	*/
	CWrapper * wrapper() const
	{
		return m_pWrapper;
	}
	
	friend class CWrapper;
};
	
/*************************************************************************************************************************
 Class CMQTTContext 
**************************************************************************************************************************/
class CMQTTContext : public CBase {
public:
	
	/**
	* CMQTTContext::CMQTTContext - Constructor for MQTTContext class.
	*/
	CMQTTContext(CWrapper* pWrapper, LibMQTTHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline void SetIotEndpoint(const std::string & sEndPoint, const LibMQTT_uint32 nPort);
	inline void SetRootCertificate(const std::string & sCertificateString);
	inline void SetClientInformation(const std::string & sClientIdentifier, const std::string & sClientCertificateString, const std::string & sCertificatePrivateKeyString);
	inline void SetMqttTopic(const std::string & sMqttTopic);
	inline void SetMqttMessage(const std::string & sMqttMessage);
	inline void Connect();
	inline void Disconnect();
	inline void SendMQTTMessage(const std::string & sMessageJSON);
};
	
	/**
	* CWrapper::GetVersion - retrieves the binary version of this library.
	* @param[out] nMajor - returns the major version of this library
	* @param[out] nMinor - returns the minor version of this library
	* @param[out] nMicro - returns the micro version of this library
	*/
	inline void CWrapper::GetVersion(LibMQTT_uint32 & nMajor, LibMQTT_uint32 & nMinor, LibMQTT_uint32 & nMicro)
	{
		CheckError(nullptr,m_WrapperTable.m_GetVersion(&nMajor, &nMinor, &nMicro));
	}
	
	/**
	* CWrapper::GetLastError - Returns the last error recorded on this object
	* @param[in] pInstance - Instance Handle
	* @param[out] sErrorMessage - Message of the last error
	* @return Is there a last error to query
	*/
	inline bool CWrapper::GetLastError(classParam<CBase> pInstance, std::string & sErrorMessage)
	{
		LibMQTTHandle hInstance = pInstance.GetHandle();
		LibMQTT_uint32 bytesNeededErrorMessage = 0;
		LibMQTT_uint32 bytesWrittenErrorMessage = 0;
		bool resultHasError = 0;
		CheckError(nullptr,m_WrapperTable.m_GetLastError(hInstance, 0, &bytesNeededErrorMessage, nullptr, &resultHasError));
		std::vector<char> bufferErrorMessage(bytesNeededErrorMessage);
		CheckError(nullptr,m_WrapperTable.m_GetLastError(hInstance, bytesNeededErrorMessage, &bytesWrittenErrorMessage, &bufferErrorMessage[0], &resultHasError));
		sErrorMessage = std::string(&bufferErrorMessage[0]);
		
		return resultHasError;
	}
	
	/**
	* CWrapper::ReleaseInstance - Releases shared ownership of an Instance
	* @param[in] pInstance - Instance Handle
	*/
	inline void CWrapper::ReleaseInstance(classParam<CBase> pInstance)
	{
		LibMQTTHandle hInstance = pInstance.GetHandle();
		CheckError(nullptr,m_WrapperTable.m_ReleaseInstance(hInstance));
	}
	
	/**
	* CWrapper::AcquireInstance - Acquires shared ownership of an Instance
	* @param[in] pInstance - Instance Handle
	*/
	inline void CWrapper::AcquireInstance(classParam<CBase> pInstance)
	{
		LibMQTTHandle hInstance = pInstance.GetHandle();
		CheckError(nullptr,m_WrapperTable.m_AcquireInstance(hInstance));
	}
	
	/**
	* CWrapper::InjectComponent - Injects an imported component for usage within this component
	* @param[in] sNameSpace - NameSpace of the injected component
	* @param[in] pSymbolAddressMethod - Address of the SymbolAddressMethod of the injected component
	*/
	inline void CWrapper::InjectComponent(const std::string & sNameSpace, const LibMQTT_pvoid pSymbolAddressMethod)
	{
		CheckError(nullptr,m_WrapperTable.m_InjectComponent(sNameSpace.c_str(), pSymbolAddressMethod));
		
		bool bNameSpaceFound = false;
		if (!bNameSpaceFound)
			throw ELibMQTTException(LIBMQTT_ERROR_COULDNOTLOADLIBRARY, "Unknown namespace " + sNameSpace);
	}
	
	/**
	* CWrapper::CreateContext - Creates a MQTT Context.
	* @param[in] sInstanceName - Name of instance to be created.
	* @return New Context instance
	*/
	inline PMQTTContext CWrapper::CreateContext(const std::string & sInstanceName)
	{
		LibMQTTHandle hInstance = nullptr;
		CheckError(nullptr,m_WrapperTable.m_CreateContext(sInstanceName.c_str(), &hInstance));
		
		if (!hInstance) {
			CheckError(nullptr,LIBMQTT_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CMQTTContext>(this, hInstance);
	}
	
	inline void CWrapper::CheckError(CBase * pBaseClass, LibMQTTResult nResult)
	{
		if (nResult != 0) {
			std::string sErrorMessage;
			if (pBaseClass != nullptr) {
				GetLastError(pBaseClass, sErrorMessage);
			}
			throw ELibMQTTException(nResult, sErrorMessage);
		}
	}
	

	inline LibMQTTResult CWrapper::initWrapperTable(sLibMQTTDynamicWrapperTable * pWrapperTable)
	{
		if (pWrapperTable == nullptr)
			return LIBMQTT_ERROR_INVALIDPARAM;
		
		pWrapperTable->m_LibraryHandle = nullptr;
		pWrapperTable->m_MQTTContext_SetIotEndpoint = nullptr;
		pWrapperTable->m_MQTTContext_SetRootCertificate = nullptr;
		pWrapperTable->m_MQTTContext_SetClientInformation = nullptr;
		pWrapperTable->m_MQTTContext_SetMqttTopic = nullptr;
		pWrapperTable->m_MQTTContext_SetMqttMessage = nullptr;
		pWrapperTable->m_MQTTContext_Connect = nullptr;
		pWrapperTable->m_MQTTContext_Disconnect = nullptr;
		pWrapperTable->m_MQTTContext_SendMQTTMessage = nullptr;
		pWrapperTable->m_GetVersion = nullptr;
		pWrapperTable->m_GetLastError = nullptr;
		pWrapperTable->m_ReleaseInstance = nullptr;
		pWrapperTable->m_AcquireInstance = nullptr;
		pWrapperTable->m_InjectComponent = nullptr;
		pWrapperTable->m_CreateContext = nullptr;
		
		return LIBMQTT_SUCCESS;
	}

	inline LibMQTTResult CWrapper::releaseWrapperTable(sLibMQTTDynamicWrapperTable * pWrapperTable)
	{
		if (pWrapperTable == nullptr)
			return LIBMQTT_ERROR_INVALIDPARAM;
		
		if (pWrapperTable->m_LibraryHandle != nullptr) {
		#ifdef _WIN32
			HMODULE hModule = (HMODULE) pWrapperTable->m_LibraryHandle;
			FreeLibrary(hModule);
		#else // _WIN32
			dlclose(pWrapperTable->m_LibraryHandle);
		#endif // _WIN32
			return initWrapperTable(pWrapperTable);
		}
		
		return LIBMQTT_SUCCESS;
	}

	inline LibMQTTResult CWrapper::loadWrapperTable(sLibMQTTDynamicWrapperTable * pWrapperTable, const char * pLibraryFileName)
	{
		if (pWrapperTable == nullptr)
			return LIBMQTT_ERROR_INVALIDPARAM;
		if (pLibraryFileName == nullptr)
			return LIBMQTT_ERROR_INVALIDPARAM;
		
		#ifdef _WIN32
		// Convert filename to UTF16-string
		int nLength = (int)strlen(pLibraryFileName);
		int nBufferSize = nLength * 2 + 2;
		std::vector<wchar_t> wsLibraryFileName(nBufferSize);
		int nResult = MultiByteToWideChar(CP_UTF8, 0, pLibraryFileName, nLength, &wsLibraryFileName[0], nBufferSize);
		if (nResult == 0)
			return LIBMQTT_ERROR_COULDNOTLOADLIBRARY;
		
		HMODULE hLibrary = LoadLibraryW(wsLibraryFileName.data());
		if (hLibrary == 0) 
			return LIBMQTT_ERROR_COULDNOTLOADLIBRARY;
		#else // _WIN32
		void* hLibrary = dlopen(pLibraryFileName, RTLD_LAZY);
		if (hLibrary == 0) 
			return LIBMQTT_ERROR_COULDNOTLOADLIBRARY;
		dlerror();
		#endif // _WIN32
		
		#ifdef _WIN32
		pWrapperTable->m_MQTTContext_SetIotEndpoint = (PLibMQTTMQTTContext_SetIotEndpointPtr) GetProcAddress(hLibrary, "libmqtt_mqttcontext_setiotendpoint");
		#else // _WIN32
		pWrapperTable->m_MQTTContext_SetIotEndpoint = (PLibMQTTMQTTContext_SetIotEndpointPtr) dlsym(hLibrary, "libmqtt_mqttcontext_setiotendpoint");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_MQTTContext_SetIotEndpoint == nullptr)
			return LIBMQTT_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_MQTTContext_SetRootCertificate = (PLibMQTTMQTTContext_SetRootCertificatePtr) GetProcAddress(hLibrary, "libmqtt_mqttcontext_setrootcertificate");
		#else // _WIN32
		pWrapperTable->m_MQTTContext_SetRootCertificate = (PLibMQTTMQTTContext_SetRootCertificatePtr) dlsym(hLibrary, "libmqtt_mqttcontext_setrootcertificate");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_MQTTContext_SetRootCertificate == nullptr)
			return LIBMQTT_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_MQTTContext_SetClientInformation = (PLibMQTTMQTTContext_SetClientInformationPtr) GetProcAddress(hLibrary, "libmqtt_mqttcontext_setclientinformation");
		#else // _WIN32
		pWrapperTable->m_MQTTContext_SetClientInformation = (PLibMQTTMQTTContext_SetClientInformationPtr) dlsym(hLibrary, "libmqtt_mqttcontext_setclientinformation");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_MQTTContext_SetClientInformation == nullptr)
			return LIBMQTT_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_MQTTContext_SetMqttTopic = (PLibMQTTMQTTContext_SetMqttTopicPtr) GetProcAddress(hLibrary, "libmqtt_mqttcontext_setmqtttopic");
		#else // _WIN32
		pWrapperTable->m_MQTTContext_SetMqttTopic = (PLibMQTTMQTTContext_SetMqttTopicPtr) dlsym(hLibrary, "libmqtt_mqttcontext_setmqtttopic");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_MQTTContext_SetMqttTopic == nullptr)
			return LIBMQTT_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_MQTTContext_SetMqttMessage = (PLibMQTTMQTTContext_SetMqttMessagePtr) GetProcAddress(hLibrary, "libmqtt_mqttcontext_setmqttmessage");
		#else // _WIN32
		pWrapperTable->m_MQTTContext_SetMqttMessage = (PLibMQTTMQTTContext_SetMqttMessagePtr) dlsym(hLibrary, "libmqtt_mqttcontext_setmqttmessage");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_MQTTContext_SetMqttMessage == nullptr)
			return LIBMQTT_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_MQTTContext_Connect = (PLibMQTTMQTTContext_ConnectPtr) GetProcAddress(hLibrary, "libmqtt_mqttcontext_connect");
		#else // _WIN32
		pWrapperTable->m_MQTTContext_Connect = (PLibMQTTMQTTContext_ConnectPtr) dlsym(hLibrary, "libmqtt_mqttcontext_connect");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_MQTTContext_Connect == nullptr)
			return LIBMQTT_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_MQTTContext_Disconnect = (PLibMQTTMQTTContext_DisconnectPtr) GetProcAddress(hLibrary, "libmqtt_mqttcontext_disconnect");
		#else // _WIN32
		pWrapperTable->m_MQTTContext_Disconnect = (PLibMQTTMQTTContext_DisconnectPtr) dlsym(hLibrary, "libmqtt_mqttcontext_disconnect");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_MQTTContext_Disconnect == nullptr)
			return LIBMQTT_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_MQTTContext_SendMQTTMessage = (PLibMQTTMQTTContext_SendMQTTMessagePtr) GetProcAddress(hLibrary, "libmqtt_mqttcontext_sendmqttmessage");
		#else // _WIN32
		pWrapperTable->m_MQTTContext_SendMQTTMessage = (PLibMQTTMQTTContext_SendMQTTMessagePtr) dlsym(hLibrary, "libmqtt_mqttcontext_sendmqttmessage");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_MQTTContext_SendMQTTMessage == nullptr)
			return LIBMQTT_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GetVersion = (PLibMQTTGetVersionPtr) GetProcAddress(hLibrary, "libmqtt_getversion");
		#else // _WIN32
		pWrapperTable->m_GetVersion = (PLibMQTTGetVersionPtr) dlsym(hLibrary, "libmqtt_getversion");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GetVersion == nullptr)
			return LIBMQTT_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GetLastError = (PLibMQTTGetLastErrorPtr) GetProcAddress(hLibrary, "libmqtt_getlasterror");
		#else // _WIN32
		pWrapperTable->m_GetLastError = (PLibMQTTGetLastErrorPtr) dlsym(hLibrary, "libmqtt_getlasterror");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GetLastError == nullptr)
			return LIBMQTT_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ReleaseInstance = (PLibMQTTReleaseInstancePtr) GetProcAddress(hLibrary, "libmqtt_releaseinstance");
		#else // _WIN32
		pWrapperTable->m_ReleaseInstance = (PLibMQTTReleaseInstancePtr) dlsym(hLibrary, "libmqtt_releaseinstance");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ReleaseInstance == nullptr)
			return LIBMQTT_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_AcquireInstance = (PLibMQTTAcquireInstancePtr) GetProcAddress(hLibrary, "libmqtt_acquireinstance");
		#else // _WIN32
		pWrapperTable->m_AcquireInstance = (PLibMQTTAcquireInstancePtr) dlsym(hLibrary, "libmqtt_acquireinstance");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_AcquireInstance == nullptr)
			return LIBMQTT_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_InjectComponent = (PLibMQTTInjectComponentPtr) GetProcAddress(hLibrary, "libmqtt_injectcomponent");
		#else // _WIN32
		pWrapperTable->m_InjectComponent = (PLibMQTTInjectComponentPtr) dlsym(hLibrary, "libmqtt_injectcomponent");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_InjectComponent == nullptr)
			return LIBMQTT_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_CreateContext = (PLibMQTTCreateContextPtr) GetProcAddress(hLibrary, "libmqtt_createcontext");
		#else // _WIN32
		pWrapperTable->m_CreateContext = (PLibMQTTCreateContextPtr) dlsym(hLibrary, "libmqtt_createcontext");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_CreateContext == nullptr)
			return LIBMQTT_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		pWrapperTable->m_LibraryHandle = hLibrary;
		return LIBMQTT_SUCCESS;
	}

	inline LibMQTTResult CWrapper::loadWrapperTableFromSymbolLookupMethod(sLibMQTTDynamicWrapperTable * pWrapperTable, void* pSymbolLookupMethod)
{
		if (pWrapperTable == nullptr)
			return LIBMQTT_ERROR_INVALIDPARAM;
		if (pSymbolLookupMethod == nullptr)
			return LIBMQTT_ERROR_INVALIDPARAM;
		
		typedef LibMQTTResult(*SymbolLookupType)(const char*, void**);
		
		SymbolLookupType pLookup = (SymbolLookupType)pSymbolLookupMethod;
		
		LibMQTTResult eLookupError = LIBMQTT_SUCCESS;
		eLookupError = (*pLookup)("libmqtt_mqttcontext_setiotendpoint", (void**)&(pWrapperTable->m_MQTTContext_SetIotEndpoint));
		if ( (eLookupError != 0) || (pWrapperTable->m_MQTTContext_SetIotEndpoint == nullptr) )
			return LIBMQTT_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmqtt_mqttcontext_setrootcertificate", (void**)&(pWrapperTable->m_MQTTContext_SetRootCertificate));
		if ( (eLookupError != 0) || (pWrapperTable->m_MQTTContext_SetRootCertificate == nullptr) )
			return LIBMQTT_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmqtt_mqttcontext_setclientinformation", (void**)&(pWrapperTable->m_MQTTContext_SetClientInformation));
		if ( (eLookupError != 0) || (pWrapperTable->m_MQTTContext_SetClientInformation == nullptr) )
			return LIBMQTT_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmqtt_mqttcontext_setmqtttopic", (void**)&(pWrapperTable->m_MQTTContext_SetMqttTopic));
		if ( (eLookupError != 0) || (pWrapperTable->m_MQTTContext_SetMqttTopic == nullptr) )
			return LIBMQTT_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmqtt_mqttcontext_setmqttmessage", (void**)&(pWrapperTable->m_MQTTContext_SetMqttMessage));
		if ( (eLookupError != 0) || (pWrapperTable->m_MQTTContext_SetMqttMessage == nullptr) )
			return LIBMQTT_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmqtt_mqttcontext_connect", (void**)&(pWrapperTable->m_MQTTContext_Connect));
		if ( (eLookupError != 0) || (pWrapperTable->m_MQTTContext_Connect == nullptr) )
			return LIBMQTT_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmqtt_mqttcontext_disconnect", (void**)&(pWrapperTable->m_MQTTContext_Disconnect));
		if ( (eLookupError != 0) || (pWrapperTable->m_MQTTContext_Disconnect == nullptr) )
			return LIBMQTT_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmqtt_mqttcontext_sendmqttmessage", (void**)&(pWrapperTable->m_MQTTContext_SendMQTTMessage));
		if ( (eLookupError != 0) || (pWrapperTable->m_MQTTContext_SendMQTTMessage == nullptr) )
			return LIBMQTT_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmqtt_getversion", (void**)&(pWrapperTable->m_GetVersion));
		if ( (eLookupError != 0) || (pWrapperTable->m_GetVersion == nullptr) )
			return LIBMQTT_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmqtt_getlasterror", (void**)&(pWrapperTable->m_GetLastError));
		if ( (eLookupError != 0) || (pWrapperTable->m_GetLastError == nullptr) )
			return LIBMQTT_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmqtt_releaseinstance", (void**)&(pWrapperTable->m_ReleaseInstance));
		if ( (eLookupError != 0) || (pWrapperTable->m_ReleaseInstance == nullptr) )
			return LIBMQTT_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmqtt_acquireinstance", (void**)&(pWrapperTable->m_AcquireInstance));
		if ( (eLookupError != 0) || (pWrapperTable->m_AcquireInstance == nullptr) )
			return LIBMQTT_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmqtt_injectcomponent", (void**)&(pWrapperTable->m_InjectComponent));
		if ( (eLookupError != 0) || (pWrapperTable->m_InjectComponent == nullptr) )
			return LIBMQTT_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmqtt_createcontext", (void**)&(pWrapperTable->m_CreateContext));
		if ( (eLookupError != 0) || (pWrapperTable->m_CreateContext == nullptr) )
			return LIBMQTT_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		return LIBMQTT_SUCCESS;
}

	
	
	/**
	 * Method definitions for class CBase
	 */
	
	/**
	 * Method definitions for class CMQTTContext
	 */
	
	/**
	* CMQTTContext::SetIotEndpoint - sets the IOT end point
	* @param[in] sEndPoint - IOT End point.
	* @param[in] nPort - MQTT Port.
	*/
	void CMQTTContext::SetIotEndpoint(const std::string & sEndPoint, const LibMQTT_uint32 nPort)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_MQTTContext_SetIotEndpoint(m_pHandle, sEndPoint.c_str(), nPort));
	}
	
	/**
	* CMQTTContext::SetRootCertificate - sets the Server root certificate.
	* @param[in] sCertificateString - Root certificate (in PEM string format).
	*/
	void CMQTTContext::SetRootCertificate(const std::string & sCertificateString)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_MQTTContext_SetRootCertificate(m_pHandle, sCertificateString.c_str()));
	}
	
	/**
	* CMQTTContext::SetClientInformation - sets the Client certificate and keys.
	* @param[in] sClientIdentifier - Client identifier.
	* @param[in] sClientCertificateString - Client public key (in PEM string format).
	* @param[in] sCertificatePrivateKeyString - Client private key (in PEM string format).
	*/
	void CMQTTContext::SetClientInformation(const std::string & sClientIdentifier, const std::string & sClientCertificateString, const std::string & sCertificatePrivateKeyString)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_MQTTContext_SetClientInformation(m_pHandle, sClientIdentifier.c_str(), sClientCertificateString.c_str(), sCertificatePrivateKeyString.c_str()));
	}
	
	/**
	* CMQTTContext::SetMqttTopic - sets MQTT topic
	* @param[in] sMqttTopic - MQTT topic.
	*/
	void CMQTTContext::SetMqttTopic(const std::string & sMqttTopic)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_MQTTContext_SetMqttTopic(m_pHandle, sMqttTopic.c_str()));
	}
	
	/**
	* CMQTTContext::SetMqttMessage - sets MQTT message
	* @param[in] sMqttMessage - MQTT message.
	*/
	void CMQTTContext::SetMqttMessage(const std::string & sMqttMessage)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_MQTTContext_SetMqttMessage(m_pHandle, sMqttMessage.c_str()));
	}
	
	/**
	* CMQTTContext::Connect - Establish a MQTT connection. Disconnects if connected.
	*/
	void CMQTTContext::Connect()
	{
		CheckError(m_pWrapper->m_WrapperTable.m_MQTTContext_Connect(m_pHandle));
	}
	
	/**
	* CMQTTContext::Disconnect - Disconnect a running MQTT connection
	*/
	void CMQTTContext::Disconnect()
	{
		CheckError(m_pWrapper->m_WrapperTable.m_MQTTContext_Disconnect(m_pHandle));
	}
	
	/**
	* CMQTTContext::SendMQTTMessage - Sends an MQTT Message.
	* @param[in] sMessageJSON - Message in JSON format.
	*/
	void CMQTTContext::SendMQTTMessage(const std::string & sMessageJSON)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_MQTTContext_SendMQTTMessage(m_pHandle, sMessageJSON.c_str()));
	}

} // namespace LibMQTT

#endif // __LIBMQTT_CPPHEADER_DYNAMIC_CPP

