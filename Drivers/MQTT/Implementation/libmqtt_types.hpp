/*++

Copyright (C) 2021 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.7.0-develop.

Abstract: This is an autogenerated C++-Header file with basic types in
order to allow an easy use of MQTT Library

Interface version: 1.0.0

*/

#ifndef __LIBMQTT_TYPES_HEADER_CPP
#define __LIBMQTT_TYPES_HEADER_CPP


/*************************************************************************************************************************
 Scalar types definition
**************************************************************************************************************************/

#ifdef LIBMQTT_USELEGACYINTEGERTYPES

typedef unsigned char LibMQTT_uint8;
typedef unsigned short LibMQTT_uint16 ;
typedef unsigned int LibMQTT_uint32;
typedef unsigned long long LibMQTT_uint64;
typedef char LibMQTT_int8;
typedef short LibMQTT_int16;
typedef int LibMQTT_int32;
typedef long long LibMQTT_int64;

#else // LIBMQTT_USELEGACYINTEGERTYPES

#include <stdint.h>

typedef uint8_t LibMQTT_uint8;
typedef uint16_t LibMQTT_uint16;
typedef uint32_t LibMQTT_uint32;
typedef uint64_t LibMQTT_uint64;
typedef int8_t LibMQTT_int8;
typedef int16_t LibMQTT_int16;
typedef int32_t LibMQTT_int32;
typedef int64_t LibMQTT_int64 ;

#endif // LIBMQTT_USELEGACYINTEGERTYPES

typedef float LibMQTT_single;
typedef double LibMQTT_double;

/*************************************************************************************************************************
 General type definitions
**************************************************************************************************************************/

typedef LibMQTT_int32 LibMQTTResult;
typedef void * LibMQTTHandle;
typedef void * LibMQTT_pvoid;

/*************************************************************************************************************************
 Version for LibMQTT
**************************************************************************************************************************/

#define LIBMQTT_VERSION_MAJOR 1
#define LIBMQTT_VERSION_MINOR 0
#define LIBMQTT_VERSION_MICRO 0
#define LIBMQTT_VERSION_PRERELEASEINFO ""
#define LIBMQTT_VERSION_BUILDINFO ""

/*************************************************************************************************************************
 Error constants for LibMQTT
**************************************************************************************************************************/

#define LIBMQTT_SUCCESS 0
#define LIBMQTT_ERROR_NOTIMPLEMENTED 1
#define LIBMQTT_ERROR_INVALIDPARAM 2
#define LIBMQTT_ERROR_INVALIDCAST 3
#define LIBMQTT_ERROR_BUFFERTOOSMALL 4
#define LIBMQTT_ERROR_GENERICEXCEPTION 5
#define LIBMQTT_ERROR_COULDNOTLOADLIBRARY 6
#define LIBMQTT_ERROR_COULDNOTFINDLIBRARYEXPORT 7
#define LIBMQTT_ERROR_INCOMPATIBLEBINARYVERSION 8

/*************************************************************************************************************************
 Error strings for LibMQTT
**************************************************************************************************************************/

inline const char * LIBMQTT_GETERRORSTRING (LibMQTTResult nErrorCode) {
  switch (nErrorCode) {
    case LIBMQTT_SUCCESS: return "no error";
    case LIBMQTT_ERROR_NOTIMPLEMENTED: return "functionality not implemented";
    case LIBMQTT_ERROR_INVALIDPARAM: return "an invalid parameter was passed";
    case LIBMQTT_ERROR_INVALIDCAST: return "a type cast failed";
    case LIBMQTT_ERROR_BUFFERTOOSMALL: return "a provided buffer is too small";
    case LIBMQTT_ERROR_GENERICEXCEPTION: return "a generic exception occurred";
    case LIBMQTT_ERROR_COULDNOTLOADLIBRARY: return "the library could not be loaded";
    case LIBMQTT_ERROR_COULDNOTFINDLIBRARYEXPORT: return "a required exported symbol could not be found in the library";
    case LIBMQTT_ERROR_INCOMPATIBLEBINARYVERSION: return "the version of the binary interface does not match the bindings interface";
    default: return "unknown error";
  }
}

/*************************************************************************************************************************
 Declaration of handle classes 
**************************************************************************************************************************/

typedef LibMQTTHandle LibMQTT_Base;
typedef LibMQTTHandle LibMQTT_MQTTContext;

namespace LibMQTT {

} // namespace LibMQTT;

// define legacy C-names for enums, structs and function types

#endif // __LIBMQTT_TYPES_HEADER_CPP
