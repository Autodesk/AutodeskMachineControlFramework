/*++

Copyright (C) 2020 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.7.0-develop.

Abstract: This is an autogenerated C++ implementation file in order to allow easy
development of MC Driver MQTT Connection. The functions in this file need to be implemented. It needs to be generated only once.

Interface version: 1.0.0

*/

#include "libmcdriver_mqtt_abi.hpp"
#include "libmcdriver_mqtt_interfaces.hpp"
#include "libmcdriver_mqtt_interfaceexception.hpp"

#include <map>

using namespace LibMCDriver_MQTT::Impl;

LibMCDriver_MQTTResult handleLibMCDriver_MQTTException(IBase * pIBaseClass, ELibMCDriver_MQTTInterfaceException & Exception)
{
	LibMCDriver_MQTTResult errorCode = Exception.getErrorCode();

	if (pIBaseClass != nullptr)
		pIBaseClass->RegisterErrorMessage(Exception.what());

	return errorCode;
}

LibMCDriver_MQTTResult handleStdException(IBase * pIBaseClass, std::exception & Exception)
{
	LibMCDriver_MQTTResult errorCode = LIBMCDRIVER_MQTT_ERROR_GENERICEXCEPTION;

	if (pIBaseClass != nullptr)
		pIBaseClass->RegisterErrorMessage(Exception.what());

	return errorCode;
}

LibMCDriver_MQTTResult handleUnhandledException(IBase * pIBaseClass)
{
	LibMCDriver_MQTTResult errorCode = LIBMCDRIVER_MQTT_ERROR_GENERICEXCEPTION;

	if (pIBaseClass != nullptr)
		pIBaseClass->RegisterErrorMessage("Unhandled Exception");

	return errorCode;
}



/*************************************************************************************************************************
 Class implementation for Base
**************************************************************************************************************************/

/*************************************************************************************************************************
 Class implementation for Driver
**************************************************************************************************************************/
LibMCDriver_MQTTResult libmcdriver_mqtt_driver_configure(LibMCDriver_MQTT_Driver pDriver, const char * pConfigurationString)
{
	IBase* pIBaseClass = (IBase *)pDriver;

	try {
		if (pConfigurationString == nullptr)
			throw ELibMCDriver_MQTTInterfaceException (LIBMCDRIVER_MQTT_ERROR_INVALIDPARAM);
		std::string sConfigurationString(pConfigurationString);
		IDriver* pIDriver = dynamic_cast<IDriver*>(pIBaseClass);
		if (!pIDriver)
			throw ELibMCDriver_MQTTInterfaceException(LIBMCDRIVER_MQTT_ERROR_INVALIDCAST);
		
		pIDriver->Configure(sConfigurationString);

		return LIBMCDRIVER_MQTT_SUCCESS;
	}
	catch (ELibMCDriver_MQTTInterfaceException & Exception) {
		return handleLibMCDriver_MQTTException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_MQTTResult libmcdriver_mqtt_driver_getname(LibMCDriver_MQTT_Driver pDriver, const LibMCDriver_MQTT_uint32 nNameBufferSize, LibMCDriver_MQTT_uint32* pNameNeededChars, char * pNameBuffer)
{
	IBase* pIBaseClass = (IBase *)pDriver;

	try {
		if ( (!pNameBuffer) && !(pNameNeededChars) )
			throw ELibMCDriver_MQTTInterfaceException (LIBMCDRIVER_MQTT_ERROR_INVALIDPARAM);
		std::string sName("");
		IDriver* pIDriver = dynamic_cast<IDriver*>(pIBaseClass);
		if (!pIDriver)
			throw ELibMCDriver_MQTTInterfaceException(LIBMCDRIVER_MQTT_ERROR_INVALIDCAST);
		
		bool isCacheCall = (pNameBuffer == nullptr);
		if (isCacheCall) {
			sName = pIDriver->GetName();

			pIDriver->_setCache (new ParameterCache_1<std::string> (sName));
		}
		else {
			auto cache = dynamic_cast<ParameterCache_1<std::string>*> (pIDriver->_getCache ());
			if (cache == nullptr)
				throw ELibMCDriver_MQTTInterfaceException(LIBMCDRIVER_MQTT_ERROR_INVALIDCAST);
			cache->retrieveData (sName);
			pIDriver->_setCache (nullptr);
		}
		
		if (pNameNeededChars)
			*pNameNeededChars = (LibMCDriver_MQTT_uint32) (sName.size()+1);
		if (pNameBuffer) {
			if (sName.size() >= nNameBufferSize)
				throw ELibMCDriver_MQTTInterfaceException (LIBMCDRIVER_MQTT_ERROR_BUFFERTOOSMALL);
			for (size_t iName = 0; iName < sName.size(); iName++)
				pNameBuffer[iName] = sName[iName];
			pNameBuffer[sName.size()] = 0;
		}
		return LIBMCDRIVER_MQTT_SUCCESS;
	}
	catch (ELibMCDriver_MQTTInterfaceException & Exception) {
		return handleLibMCDriver_MQTTException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_MQTTResult libmcdriver_mqtt_driver_gettype(LibMCDriver_MQTT_Driver pDriver, const LibMCDriver_MQTT_uint32 nTypeBufferSize, LibMCDriver_MQTT_uint32* pTypeNeededChars, char * pTypeBuffer)
{
	IBase* pIBaseClass = (IBase *)pDriver;

	try {
		if ( (!pTypeBuffer) && !(pTypeNeededChars) )
			throw ELibMCDriver_MQTTInterfaceException (LIBMCDRIVER_MQTT_ERROR_INVALIDPARAM);
		std::string sType("");
		IDriver* pIDriver = dynamic_cast<IDriver*>(pIBaseClass);
		if (!pIDriver)
			throw ELibMCDriver_MQTTInterfaceException(LIBMCDRIVER_MQTT_ERROR_INVALIDCAST);
		
		bool isCacheCall = (pTypeBuffer == nullptr);
		if (isCacheCall) {
			sType = pIDriver->GetType();

			pIDriver->_setCache (new ParameterCache_1<std::string> (sType));
		}
		else {
			auto cache = dynamic_cast<ParameterCache_1<std::string>*> (pIDriver->_getCache ());
			if (cache == nullptr)
				throw ELibMCDriver_MQTTInterfaceException(LIBMCDRIVER_MQTT_ERROR_INVALIDCAST);
			cache->retrieveData (sType);
			pIDriver->_setCache (nullptr);
		}
		
		if (pTypeNeededChars)
			*pTypeNeededChars = (LibMCDriver_MQTT_uint32) (sType.size()+1);
		if (pTypeBuffer) {
			if (sType.size() >= nTypeBufferSize)
				throw ELibMCDriver_MQTTInterfaceException (LIBMCDRIVER_MQTT_ERROR_BUFFERTOOSMALL);
			for (size_t iType = 0; iType < sType.size(); iType++)
				pTypeBuffer[iType] = sType[iType];
			pTypeBuffer[sType.size()] = 0;
		}
		return LIBMCDRIVER_MQTT_SUCCESS;
	}
	catch (ELibMCDriver_MQTTInterfaceException & Exception) {
		return handleLibMCDriver_MQTTException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_MQTTResult libmcdriver_mqtt_driver_getversion(LibMCDriver_MQTT_Driver pDriver, LibMCDriver_MQTT_uint32 * pMajor, LibMCDriver_MQTT_uint32 * pMinor, LibMCDriver_MQTT_uint32 * pMicro, const LibMCDriver_MQTT_uint32 nBuildBufferSize, LibMCDriver_MQTT_uint32* pBuildNeededChars, char * pBuildBuffer)
{
	IBase* pIBaseClass = (IBase *)pDriver;

	try {
		if (!pMajor)
			throw ELibMCDriver_MQTTInterfaceException (LIBMCDRIVER_MQTT_ERROR_INVALIDPARAM);
		if (!pMinor)
			throw ELibMCDriver_MQTTInterfaceException (LIBMCDRIVER_MQTT_ERROR_INVALIDPARAM);
		if (!pMicro)
			throw ELibMCDriver_MQTTInterfaceException (LIBMCDRIVER_MQTT_ERROR_INVALIDPARAM);
		if ( (!pBuildBuffer) && !(pBuildNeededChars) )
			throw ELibMCDriver_MQTTInterfaceException (LIBMCDRIVER_MQTT_ERROR_INVALIDPARAM);
		std::string sBuild("");
		IDriver* pIDriver = dynamic_cast<IDriver*>(pIBaseClass);
		if (!pIDriver)
			throw ELibMCDriver_MQTTInterfaceException(LIBMCDRIVER_MQTT_ERROR_INVALIDCAST);
		
		bool isCacheCall = (pBuildBuffer == nullptr);
		if (isCacheCall) {
			pIDriver->GetVersion(*pMajor, *pMinor, *pMicro, sBuild);

			pIDriver->_setCache (new ParameterCache_4<LibMCDriver_MQTT_uint32, LibMCDriver_MQTT_uint32, LibMCDriver_MQTT_uint32, std::string> (*pMajor, *pMinor, *pMicro, sBuild));
		}
		else {
			auto cache = dynamic_cast<ParameterCache_4<LibMCDriver_MQTT_uint32, LibMCDriver_MQTT_uint32, LibMCDriver_MQTT_uint32, std::string>*> (pIDriver->_getCache ());
			if (cache == nullptr)
				throw ELibMCDriver_MQTTInterfaceException(LIBMCDRIVER_MQTT_ERROR_INVALIDCAST);
			cache->retrieveData (*pMajor, *pMinor, *pMicro, sBuild);
			pIDriver->_setCache (nullptr);
		}
		
		if (pBuildNeededChars)
			*pBuildNeededChars = (LibMCDriver_MQTT_uint32) (sBuild.size()+1);
		if (pBuildBuffer) {
			if (sBuild.size() >= nBuildBufferSize)
				throw ELibMCDriver_MQTTInterfaceException (LIBMCDRIVER_MQTT_ERROR_BUFFERTOOSMALL);
			for (size_t iBuild = 0; iBuild < sBuild.size(); iBuild++)
				pBuildBuffer[iBuild] = sBuild[iBuild];
			pBuildBuffer[sBuild.size()] = 0;
		}
		return LIBMCDRIVER_MQTT_SUCCESS;
	}
	catch (ELibMCDriver_MQTTInterfaceException & Exception) {
		return handleLibMCDriver_MQTTException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_MQTTResult libmcdriver_mqtt_driver_getheaderinformation(LibMCDriver_MQTT_Driver pDriver, const LibMCDriver_MQTT_uint32 nNameSpaceBufferSize, LibMCDriver_MQTT_uint32* pNameSpaceNeededChars, char * pNameSpaceBuffer, const LibMCDriver_MQTT_uint32 nBaseNameBufferSize, LibMCDriver_MQTT_uint32* pBaseNameNeededChars, char * pBaseNameBuffer)
{
	IBase* pIBaseClass = (IBase *)pDriver;

	try {
		if ( (!pNameSpaceBuffer) && !(pNameSpaceNeededChars) )
			throw ELibMCDriver_MQTTInterfaceException (LIBMCDRIVER_MQTT_ERROR_INVALIDPARAM);
		if ( (!pBaseNameBuffer) && !(pBaseNameNeededChars) )
			throw ELibMCDriver_MQTTInterfaceException (LIBMCDRIVER_MQTT_ERROR_INVALIDPARAM);
		std::string sNameSpace("");
		std::string sBaseName("");
		IDriver* pIDriver = dynamic_cast<IDriver*>(pIBaseClass);
		if (!pIDriver)
			throw ELibMCDriver_MQTTInterfaceException(LIBMCDRIVER_MQTT_ERROR_INVALIDCAST);
		
		bool isCacheCall = (pNameSpaceBuffer == nullptr) || (pBaseNameBuffer == nullptr);
		if (isCacheCall) {
			pIDriver->GetHeaderInformation(sNameSpace, sBaseName);

			pIDriver->_setCache (new ParameterCache_2<std::string, std::string> (sNameSpace, sBaseName));
		}
		else {
			auto cache = dynamic_cast<ParameterCache_2<std::string, std::string>*> (pIDriver->_getCache ());
			if (cache == nullptr)
				throw ELibMCDriver_MQTTInterfaceException(LIBMCDRIVER_MQTT_ERROR_INVALIDCAST);
			cache->retrieveData (sNameSpace, sBaseName);
			pIDriver->_setCache (nullptr);
		}
		
		if (pNameSpaceNeededChars)
			*pNameSpaceNeededChars = (LibMCDriver_MQTT_uint32) (sNameSpace.size()+1);
		if (pNameSpaceBuffer) {
			if (sNameSpace.size() >= nNameSpaceBufferSize)
				throw ELibMCDriver_MQTTInterfaceException (LIBMCDRIVER_MQTT_ERROR_BUFFERTOOSMALL);
			for (size_t iNameSpace = 0; iNameSpace < sNameSpace.size(); iNameSpace++)
				pNameSpaceBuffer[iNameSpace] = sNameSpace[iNameSpace];
			pNameSpaceBuffer[sNameSpace.size()] = 0;
		}
		if (pBaseNameNeededChars)
			*pBaseNameNeededChars = (LibMCDriver_MQTT_uint32) (sBaseName.size()+1);
		if (pBaseNameBuffer) {
			if (sBaseName.size() >= nBaseNameBufferSize)
				throw ELibMCDriver_MQTTInterfaceException (LIBMCDRIVER_MQTT_ERROR_BUFFERTOOSMALL);
			for (size_t iBaseName = 0; iBaseName < sBaseName.size(); iBaseName++)
				pBaseNameBuffer[iBaseName] = sBaseName[iBaseName];
			pBaseNameBuffer[sBaseName.size()] = 0;
		}
		return LIBMCDRIVER_MQTT_SUCCESS;
	}
	catch (ELibMCDriver_MQTTInterfaceException & Exception) {
		return handleLibMCDriver_MQTTException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_MQTTResult libmcdriver_mqtt_driver_queryparameters(LibMCDriver_MQTT_Driver pDriver)
{
	IBase* pIBaseClass = (IBase *)pDriver;

	try {
		IDriver* pIDriver = dynamic_cast<IDriver*>(pIBaseClass);
		if (!pIDriver)
			throw ELibMCDriver_MQTTInterfaceException(LIBMCDRIVER_MQTT_ERROR_INVALIDCAST);
		
		pIDriver->QueryParameters();

		return LIBMCDRIVER_MQTT_SUCCESS;
	}
	catch (ELibMCDriver_MQTTInterfaceException & Exception) {
		return handleLibMCDriver_MQTTException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}


/*************************************************************************************************************************
 Class implementation for Driver_MQTT
**************************************************************************************************************************/
LibMCDriver_MQTTResult libmcdriver_mqtt_driver_mqtt_connect(LibMCDriver_MQTT_Driver_MQTT pDriver_MQTT)
{
	IBase* pIBaseClass = (IBase *)pDriver_MQTT;

	try {
		IDriver_MQTT* pIDriver_MQTT = dynamic_cast<IDriver_MQTT*>(pIBaseClass);
		if (!pIDriver_MQTT)
			throw ELibMCDriver_MQTTInterfaceException(LIBMCDRIVER_MQTT_ERROR_INVALIDCAST);
		
		pIDriver_MQTT->Connect();

		return LIBMCDRIVER_MQTT_SUCCESS;
	}
	catch (ELibMCDriver_MQTTInterfaceException & Exception) {
		return handleLibMCDriver_MQTTException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_MQTTResult libmcdriver_mqtt_driver_mqtt_disconnect(LibMCDriver_MQTT_Driver_MQTT pDriver_MQTT)
{
	IBase* pIBaseClass = (IBase *)pDriver_MQTT;

	try {
		IDriver_MQTT* pIDriver_MQTT = dynamic_cast<IDriver_MQTT*>(pIBaseClass);
		if (!pIDriver_MQTT)
			throw ELibMCDriver_MQTTInterfaceException(LIBMCDRIVER_MQTT_ERROR_INVALIDCAST);
		
		pIDriver_MQTT->Disconnect();

		return LIBMCDRIVER_MQTT_SUCCESS;
	}
	catch (ELibMCDriver_MQTTInterfaceException & Exception) {
		return handleLibMCDriver_MQTTException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_MQTTResult libmcdriver_mqtt_driver_mqtt_sendmqttmessage(LibMCDriver_MQTT_Driver_MQTT pDriver_MQTT, const char * pMessageJSON)
{
	IBase* pIBaseClass = (IBase *)pDriver_MQTT;

	try {
		if (pMessageJSON == nullptr)
			throw ELibMCDriver_MQTTInterfaceException (LIBMCDRIVER_MQTT_ERROR_INVALIDPARAM);
		std::string sMessageJSON(pMessageJSON);
		IDriver_MQTT* pIDriver_MQTT = dynamic_cast<IDriver_MQTT*>(pIBaseClass);
		if (!pIDriver_MQTT)
			throw ELibMCDriver_MQTTInterfaceException(LIBMCDRIVER_MQTT_ERROR_INVALIDCAST);
		
		pIDriver_MQTT->SendMQTTMessage(sMessageJSON);

		return LIBMCDRIVER_MQTT_SUCCESS;
	}
	catch (ELibMCDriver_MQTTInterfaceException & Exception) {
		return handleLibMCDriver_MQTTException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}



/*************************************************************************************************************************
 Function table lookup implementation
**************************************************************************************************************************/

LibMCDriver_MQTTResult LibMCDriver_MQTT::Impl::LibMCDriver_MQTT_GetProcAddress (const char * pProcName, void ** ppProcAddress)
{
	if (pProcName == nullptr)
		return LIBMCDRIVER_MQTT_ERROR_INVALIDPARAM;
	if (ppProcAddress == nullptr)
		return LIBMCDRIVER_MQTT_ERROR_INVALIDPARAM;
	*ppProcAddress = nullptr;
	std::string sProcName (pProcName);
	
	if (sProcName == "libmcdriver_mqtt_driver_configure") 
		*ppProcAddress = (void*) &libmcdriver_mqtt_driver_configure;
	if (sProcName == "libmcdriver_mqtt_driver_getname") 
		*ppProcAddress = (void*) &libmcdriver_mqtt_driver_getname;
	if (sProcName == "libmcdriver_mqtt_driver_gettype") 
		*ppProcAddress = (void*) &libmcdriver_mqtt_driver_gettype;
	if (sProcName == "libmcdriver_mqtt_driver_getversion") 
		*ppProcAddress = (void*) &libmcdriver_mqtt_driver_getversion;
	if (sProcName == "libmcdriver_mqtt_driver_getheaderinformation") 
		*ppProcAddress = (void*) &libmcdriver_mqtt_driver_getheaderinformation;
	if (sProcName == "libmcdriver_mqtt_driver_queryparameters") 
		*ppProcAddress = (void*) &libmcdriver_mqtt_driver_queryparameters;
	if (sProcName == "libmcdriver_mqtt_driver_mqtt_connect") 
		*ppProcAddress = (void*) &libmcdriver_mqtt_driver_mqtt_connect;
	if (sProcName == "libmcdriver_mqtt_driver_mqtt_disconnect") 
		*ppProcAddress = (void*) &libmcdriver_mqtt_driver_mqtt_disconnect;
	if (sProcName == "libmcdriver_mqtt_driver_mqtt_sendmqttmessage") 
		*ppProcAddress = (void*) &libmcdriver_mqtt_driver_mqtt_sendmqttmessage;
	if (sProcName == "libmcdriver_mqtt_getversion") 
		*ppProcAddress = (void*) &libmcdriver_mqtt_getversion;
	if (sProcName == "libmcdriver_mqtt_getlasterror") 
		*ppProcAddress = (void*) &libmcdriver_mqtt_getlasterror;
	if (sProcName == "libmcdriver_mqtt_releaseinstance") 
		*ppProcAddress = (void*) &libmcdriver_mqtt_releaseinstance;
	if (sProcName == "libmcdriver_mqtt_acquireinstance") 
		*ppProcAddress = (void*) &libmcdriver_mqtt_acquireinstance;
	if (sProcName == "libmcdriver_mqtt_injectcomponent") 
		*ppProcAddress = (void*) &libmcdriver_mqtt_injectcomponent;
	if (sProcName == "libmcdriver_mqtt_getsymbollookupmethod") 
		*ppProcAddress = (void*) &libmcdriver_mqtt_getsymbollookupmethod;
	if (sProcName == "libmcdriver_mqtt_createdriver") 
		*ppProcAddress = (void*) &libmcdriver_mqtt_createdriver;
	
	if (*ppProcAddress == nullptr) 
		return LIBMCDRIVER_MQTT_ERROR_COULDNOTFINDLIBRARYEXPORT;
	return LIBMCDRIVER_MQTT_SUCCESS;
}

/*************************************************************************************************************************
 Global functions implementation
**************************************************************************************************************************/
LibMCDriver_MQTTResult libmcdriver_mqtt_getversion(LibMCDriver_MQTT_uint32 * pMajor, LibMCDriver_MQTT_uint32 * pMinor, LibMCDriver_MQTT_uint32 * pMicro)
{
	IBase* pIBaseClass = nullptr;

	try {
		if (!pMajor)
			throw ELibMCDriver_MQTTInterfaceException (LIBMCDRIVER_MQTT_ERROR_INVALIDPARAM);
		if (!pMinor)
			throw ELibMCDriver_MQTTInterfaceException (LIBMCDRIVER_MQTT_ERROR_INVALIDPARAM);
		if (!pMicro)
			throw ELibMCDriver_MQTTInterfaceException (LIBMCDRIVER_MQTT_ERROR_INVALIDPARAM);
		CWrapper::GetVersion(*pMajor, *pMinor, *pMicro);

		return LIBMCDRIVER_MQTT_SUCCESS;
	}
	catch (ELibMCDriver_MQTTInterfaceException & Exception) {
		return handleLibMCDriver_MQTTException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_MQTTResult libmcdriver_mqtt_getlasterror(LibMCDriver_MQTT_Base pInstance, const LibMCDriver_MQTT_uint32 nErrorMessageBufferSize, LibMCDriver_MQTT_uint32* pErrorMessageNeededChars, char * pErrorMessageBuffer, bool * pHasError)
{
	IBase* pIBaseClass = nullptr;

	try {
		if ( (!pErrorMessageBuffer) && !(pErrorMessageNeededChars) )
			throw ELibMCDriver_MQTTInterfaceException (LIBMCDRIVER_MQTT_ERROR_INVALIDPARAM);
		if (pHasError == nullptr)
			throw ELibMCDriver_MQTTInterfaceException (LIBMCDRIVER_MQTT_ERROR_INVALIDPARAM);
		IBase* pIBaseClassInstance = (IBase *)pInstance;
		IBase* pIInstance = dynamic_cast<IBase*>(pIBaseClassInstance);
		if (!pIInstance)
			throw ELibMCDriver_MQTTInterfaceException (LIBMCDRIVER_MQTT_ERROR_INVALIDCAST);
		
		std::string sErrorMessage("");
		*pHasError = CWrapper::GetLastError(pIInstance, sErrorMessage);

		if (pErrorMessageNeededChars)
			*pErrorMessageNeededChars = (LibMCDriver_MQTT_uint32) (sErrorMessage.size()+1);
		if (pErrorMessageBuffer) {
			if (sErrorMessage.size() >= nErrorMessageBufferSize)
				throw ELibMCDriver_MQTTInterfaceException (LIBMCDRIVER_MQTT_ERROR_BUFFERTOOSMALL);
			for (size_t iErrorMessage = 0; iErrorMessage < sErrorMessage.size(); iErrorMessage++)
				pErrorMessageBuffer[iErrorMessage] = sErrorMessage[iErrorMessage];
			pErrorMessageBuffer[sErrorMessage.size()] = 0;
		}
		return LIBMCDRIVER_MQTT_SUCCESS;
	}
	catch (ELibMCDriver_MQTTInterfaceException & Exception) {
		return handleLibMCDriver_MQTTException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_MQTTResult libmcdriver_mqtt_releaseinstance(LibMCDriver_MQTT_Base pInstance)
{
	IBase* pIBaseClass = nullptr;

	try {
		IBase* pIBaseClassInstance = (IBase *)pInstance;
		IBase* pIInstance = dynamic_cast<IBase*>(pIBaseClassInstance);
		if (!pIInstance)
			throw ELibMCDriver_MQTTInterfaceException (LIBMCDRIVER_MQTT_ERROR_INVALIDCAST);
		
		CWrapper::ReleaseInstance(pIInstance);

		return LIBMCDRIVER_MQTT_SUCCESS;
	}
	catch (ELibMCDriver_MQTTInterfaceException & Exception) {
		return handleLibMCDriver_MQTTException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_MQTTResult libmcdriver_mqtt_acquireinstance(LibMCDriver_MQTT_Base pInstance)
{
	IBase* pIBaseClass = nullptr;

	try {
		IBase* pIBaseClassInstance = (IBase *)pInstance;
		IBase* pIInstance = dynamic_cast<IBase*>(pIBaseClassInstance);
		if (!pIInstance)
			throw ELibMCDriver_MQTTInterfaceException (LIBMCDRIVER_MQTT_ERROR_INVALIDCAST);
		
		CWrapper::AcquireInstance(pIInstance);

		return LIBMCDRIVER_MQTT_SUCCESS;
	}
	catch (ELibMCDriver_MQTTInterfaceException & Exception) {
		return handleLibMCDriver_MQTTException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_MQTTResult libmcdriver_mqtt_injectcomponent(const char * pNameSpace, LibMCDriver_MQTT_pvoid pSymbolAddressMethod)
{
	IBase* pIBaseClass = nullptr;

	try {
		if (pNameSpace == nullptr)
			throw ELibMCDriver_MQTTInterfaceException (LIBMCDRIVER_MQTT_ERROR_INVALIDPARAM);
		std::string sNameSpace(pNameSpace);
		
		bool bNameSpaceFound = false;
		
		if (sNameSpace == "LibMCEnv") {
			if (CWrapper::sPLibMCEnvWrapper.get() != nullptr) {
				throw ELibMCDriver_MQTTInterfaceException(LIBMCDRIVER_MQTT_ERROR_COULDNOTLOADLIBRARY);
			}
			CWrapper::sPLibMCEnvWrapper = LibMCEnv::CWrapper::loadLibraryFromSymbolLookupMethod(pSymbolAddressMethod);
			bNameSpaceFound = true;
		}
		
		if (!bNameSpaceFound)
			throw ELibMCDriver_MQTTInterfaceException(LIBMCDRIVER_MQTT_ERROR_COULDNOTLOADLIBRARY);
		
		return LIBMCDRIVER_MQTT_SUCCESS;
	}
	catch (ELibMCDriver_MQTTInterfaceException & Exception) {
		return handleLibMCDriver_MQTTException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_MQTTResult libmcdriver_mqtt_getsymbollookupmethod(LibMCDriver_MQTT_pvoid * pSymbolLookupMethod)
{
	IBase* pIBaseClass = nullptr;

	try {
		if (pSymbolLookupMethod == nullptr)
			throw ELibMCDriver_MQTTInterfaceException (LIBMCDRIVER_MQTT_ERROR_INVALIDPARAM);
		*pSymbolLookupMethod = (void*)&LibMCDriver_MQTT::Impl::LibMCDriver_MQTT_GetProcAddress;
		return LIBMCDRIVER_MQTT_SUCCESS;
	}
	catch (ELibMCDriver_MQTTInterfaceException & Exception) {
		return handleLibMCDriver_MQTTException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_MQTTResult libmcdriver_mqtt_createdriver(const char * pName, const char * pType, LibMCEnv_DriverEnvironment pDriverEnvironment, LibMCDriver_MQTT_Driver * pInstance)
{
	IBase* pIBaseClass = nullptr;

	try {
		if (pName == nullptr)
			throw ELibMCDriver_MQTTInterfaceException (LIBMCDRIVER_MQTT_ERROR_INVALIDPARAM);
		if (pType == nullptr)
			throw ELibMCDriver_MQTTInterfaceException (LIBMCDRIVER_MQTT_ERROR_INVALIDPARAM);
		if (pInstance == nullptr)
			throw ELibMCDriver_MQTTInterfaceException (LIBMCDRIVER_MQTT_ERROR_INVALIDPARAM);
		std::string sName(pName);
		std::string sType(pType);
		LibMCEnv::PDriverEnvironment pIDriverEnvironment = std::make_shared<LibMCEnv::CDriverEnvironment>(CWrapper::sPLibMCEnvWrapper.get(), pDriverEnvironment);
		CWrapper::sPLibMCEnvWrapper->AcquireInstance(pIDriverEnvironment.get());
		if (!pIDriverEnvironment)
			throw ELibMCDriver_MQTTInterfaceException (LIBMCDRIVER_MQTT_ERROR_INVALIDCAST);
		
		IBase* pBaseInstance(nullptr);
		pBaseInstance = CWrapper::CreateDriver(sName, sType, pIDriverEnvironment);

		*pInstance = (IBase*)(pBaseInstance);
		return LIBMCDRIVER_MQTT_SUCCESS;
	}
	catch (ELibMCDriver_MQTTInterfaceException & Exception) {
		return handleLibMCDriver_MQTTException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}


