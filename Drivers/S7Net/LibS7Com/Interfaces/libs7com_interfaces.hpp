/*++

Copyright (C) 2020 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.7.0-develop.

Abstract: This is an autogenerated C++ header file in order to allow easy
development of S7Net Communication Protocol. The implementer of S7Net Communication Protocol needs to
derive concrete classes from the abstract classes in this header.

Interface version: 3.1.3

*/


#ifndef __LIBS7COM_CPPINTERFACES
#define __LIBS7COM_CPPINTERFACES

#include <string>
#include <memory>

#include "libs7com_types.hpp"


#include "libs7net_dynamic.hpp"

namespace LibS7Com {
namespace Impl {

/**
 Forward declarations of class interfaces
*/
class IBase;
class ICommandParameters;
class IPLCCommunication;



/*************************************************************************************************************************
 Parameter Cache definitions
**************************************************************************************************************************/

class ParameterCache {
	public:
		virtual ~ParameterCache() {}
};

template <class T1> class ParameterCache_1 : public ParameterCache {
	private:
		T1 m_param1;
	public:
		ParameterCache_1 (const T1 & param1)
			: m_param1 (param1)
		{
		}

		void retrieveData (T1 & param1)
		{
			param1 = m_param1;
		}
};

template <class T1, class T2> class ParameterCache_2 : public ParameterCache {
	private:
		T1 m_param1;
		T2 m_param2;
	public:
		ParameterCache_2 (const T1 & param1, const T2 & param2)
			: m_param1 (param1), m_param2 (param2)
		{
		}

		void retrieveData (T1 & param1, T2 & param2)
		{
			param1 = m_param1;
			param2 = m_param2;
		}
};

template <class T1, class T2, class T3> class ParameterCache_3 : public ParameterCache {
	private:
		T1 m_param1;
		T2 m_param2;
		T3 m_param3;
	public:
		ParameterCache_3 (const T1 & param1, const T2 & param2, const T3 & param3)
			: m_param1 (param1), m_param2 (param2), m_param3 (param3)
		{
		}

		void retrieveData (T1 & param1, T2 & param2, T3 & param3)
		{
			param1 = m_param1;
			param2 = m_param2;
			param3 = m_param3;
		}
};


/*************************************************************************************************************************
 Class interface for Base 
**************************************************************************************************************************/

class IBase {
private:
	std::unique_ptr<ParameterCache> m_ParameterCache;
public:
	/**
	* IBase::~IBase - virtual destructor of IBase
	*/
	virtual ~IBase() {};

	/**
	* IBase::ReleaseBaseClassInterface - Releases ownership of a base class interface. Deletes the reference, if necessary.
	* @param[in] pIBase - The base class instance to release
	*/
	static void ReleaseBaseClassInterface(IBase* pIBase)
	{
		if (pIBase) {
			pIBase->DecRefCount();
		}
	};

	/**
	* IBase::AcquireBaseClassInterface - Acquires shared ownership of a base class interface.
	* @param[in] pIBase - The base class instance to acquire
	*/
	static void AcquireBaseClassInterface(IBase* pIBase)
	{
		if (pIBase) {
			pIBase->IncRefCount();
		}
	};


	/**
	* IBase::GetLastErrorMessage - Returns the last error registered of this class instance
	* @param[out] sErrorMessage - Message of the last error registered
	* @return Has an error been registered already
	*/
	virtual bool GetLastErrorMessage(std::string & sErrorMessage) = 0;

	/**
	* IBase::ClearErrorMessages - Clears all registered messages of this class instance
	*/
	virtual void ClearErrorMessages() = 0;

	/**
	* IBase::RegisterErrorMessage - Registers an error message with this class instance
	* @param[in] sErrorMessage - Error message to register
	*/
	virtual void RegisterErrorMessage(const std::string & sErrorMessage) = 0;

	/**
	* IBase::IncRefCount - Increases the reference count of a class instance
	*/
	virtual void IncRefCount() = 0;

	/**
	* IBase::DecRefCount - Decreases the reference count of a class instance and free releases it, if the last reference has been removed
	* @return Has the object been released
	*/
	virtual bool DecRefCount() = 0;

	/**
	* IBase::_setCache - set parameter cache of object
	*/
	void _setCache(ParameterCache * pCache)
	{
		m_ParameterCache.reset(pCache);
	}

	/**
	* IBase::_getCache - returns parameter cache of object
	*/
	ParameterCache* _getCache()
	{
		return m_ParameterCache.get();
	}

};


/**
 Definition of a shared pointer class for IBase
*/
template<class T>
class IBaseSharedPtr : public std::shared_ptr<T>
{
public:
	explicit IBaseSharedPtr(T* t = nullptr)
		: std::shared_ptr<T>(t, IBase::ReleaseBaseClassInterface)
	{
		t->IncRefCount();
	}

	// Reset function, as it also needs to properly set the deleter.
	void reset(T* t = nullptr)
	{
		std::shared_ptr<T>::reset(t, IBase::ReleaseBaseClassInterface);
	}

	// Get-function that increases the Base class's reference count
	T* getCoOwningPtr()
	{
		T* t = this->get();
		t->IncRefCount();
		return t;
	}
};


typedef IBaseSharedPtr<IBase> PIBase;


/*************************************************************************************************************************
 Class interface for CommandParameters 
**************************************************************************************************************************/

class ICommandParameters : public virtual IBase {
public:
	/**
	* ICommandParameters::WriteString - Writes string value.
	* @param[in] nAddress - Address of String Variable.
	* @param[in] nMaxLength - Maximum length.
	* @param[in] sValue - Value of variable.
	*/
	virtual void WriteString(const LibS7Com_uint32 nAddress, const LibS7Com_uint32 nMaxLength, const std::string & sValue) = 0;

	/**
	* ICommandParameters::WriteBool - Writes bool value.
	* @param[in] nAddress - Address of Bit Variable.
	* @param[in] nBit - Bit of the variable (0-7)
	* @param[in] bValue - Value of variable.
	*/
	virtual void WriteBool(const LibS7Com_uint32 nAddress, const LibS7Com_uint32 nBit, const bool bValue) = 0;

	/**
	* ICommandParameters::WriteByte - Writes byte value.
	* @param[in] nAddress - Address of Bit Variable.
	* @param[in] nValue - Value of variable.
	*/
	virtual void WriteByte(const LibS7Com_uint32 nAddress, const LibS7Com_uint8 nValue) = 0;

	/**
	* ICommandParameters::WriteInt16 - Writes Int16 value.
	* @param[in] nAddress - Address of Int16 Variable.
	* @param[in] nValue - Value of variable.
	*/
	virtual void WriteInt16(const LibS7Com_uint32 nAddress, const LibS7Com_int16 nValue) = 0;

	/**
	* ICommandParameters::WriteUint16 - Writes Uint16 value.
	* @param[in] nAddress - Address of Int16 Variable.
	* @param[in] nValue - Value of variable.
	*/
	virtual void WriteUint16(const LibS7Com_uint32 nAddress, const LibS7Com_uint16 nValue) = 0;

	/**
	* ICommandParameters::WriteInt32 - Writes Int32 value.
	* @param[in] nAddress - Address of Int32 Variable.
	* @param[in] nValue - Value of variable.
	*/
	virtual void WriteInt32(const LibS7Com_uint32 nAddress, const LibS7Com_int32 nValue) = 0;

	/**
	* ICommandParameters::WriteUint32 - Writes Uint32 value.
	* @param[in] nAddress - Address of Int32 Variable.
	* @param[in] nValue - Value of variable.
	*/
	virtual void WriteUint32(const LibS7Com_uint32 nAddress, const LibS7Com_uint32 nValue) = 0;

	/**
	* ICommandParameters::WriteReal - Writes Real value.
	* @param[in] nAddress - Address of Real Variable.
	* @param[in] dValue - Value of variable.
	*/
	virtual void WriteReal(const LibS7Com_uint32 nAddress, const LibS7Com_double dValue) = 0;

	/**
	* ICommandParameters::WriteLReal - Writes LReal value.
	* @param[in] nAddress - Address of Real Variable.
	* @param[in] dValue - Value of variable.
	*/
	virtual void WriteLReal(const LibS7Com_uint32 nAddress, const LibS7Com_double dValue) = 0;

};

typedef IBaseSharedPtr<ICommandParameters> PICommandParameters;


/*************************************************************************************************************************
 Class interface for PLCCommunication 
**************************************************************************************************************************/

class IPLCCommunication : public virtual IBase {
public:
	/**
	* IPLCCommunication::SetProtocolConfiguration - Configures the protocol
	* @param[in] nMajorVersion - Major Protocol Version
	* @param[in] nMinorVersion - Minor Protocol Version
	* @param[in] nPatchVersion - Patch Protocol Version
	* @param[in] nPLCtoAMC_DBNo - DB Number of PLC to AMC connection
	* @param[in] nPLCtoAMC_Size - Size of PLC to AMC protocol buffer.
	* @param[in] nAMCtoPLC_DBNo - DB Number of AMC to PLC connection
	* @param[in] nAMCtoPLC_Size - Size of AMC to PLC protocol buffer.
	*/
	virtual void SetProtocolConfiguration(const LibS7Com_uint32 nMajorVersion, const LibS7Com_uint32 nMinorVersion, const LibS7Com_uint32 nPatchVersion, const LibS7Com_uint32 nPLCtoAMC_DBNo, const LibS7Com_uint32 nPLCtoAMC_Size, const LibS7Com_uint32 nAMCtoPLC_DBNo, const LibS7Com_uint32 nAMCtoPLC_Size) = 0;

	/**
	* IPLCCommunication::SetAMCTOPLCOffsets - Configures the command offsets
	* @param[in] nMajorVersionAddress - Major Protocol Version Address
	* @param[in] nMinorVersionAddress - Minor Protocol Version Address
	* @param[in] nPatchVersionAddress - Patch Protocol Version Address
	* @param[in] nBuildVersionAddress - Build Protocol Version Address
	* @param[in] nCommandSequenceAddress - Command Sequence Address
	* @param[in] nCommandIDAddress - Command ID Address
	* @param[in] nCommandChecksumAddress - Command Checksum Address
	*/
	virtual void SetAMCTOPLCOffsets(const LibS7Com_uint32 nMajorVersionAddress, const LibS7Com_uint32 nMinorVersionAddress, const LibS7Com_uint32 nPatchVersionAddress, const LibS7Com_uint32 nBuildVersionAddress, const LibS7Com_uint32 nCommandSequenceAddress, const LibS7Com_uint32 nCommandIDAddress, const LibS7Com_uint32 nCommandChecksumAddress) = 0;

	/**
	* IPLCCommunication::SetPLCToAMCOffsets - Configures the command offsets
	* @param[in] nMajorVersionAddress - Major Protocol Version Address
	* @param[in] nMinorVersionAddress - Minor Protocol Version Address
	* @param[in] nPatchVersionAddress - Patch Protocol Version Address
	* @param[in] nBuildVersionAddress - Build Protocol Version Address
	* @param[in] nSequenceRunningAddress - Sequence Running Address
	* @param[in] nSequenceFinishedAddress - Sequence Finished Address
	* @param[in] nSequenceStatusAddress - Sequence Status Address
	* @param[in] nSequenceErrorAddress - Sequence Error Address
	*/
	virtual void SetPLCToAMCOffsets(const LibS7Com_uint32 nMajorVersionAddress, const LibS7Com_uint32 nMinorVersionAddress, const LibS7Com_uint32 nPatchVersionAddress, const LibS7Com_uint32 nBuildVersionAddress, const LibS7Com_uint32 nSequenceRunningAddress, const LibS7Com_uint32 nSequenceFinishedAddress, const LibS7Com_uint32 nSequenceStatusAddress, const LibS7Com_uint32 nSequenceErrorAddress) = 0;

	/**
	* IPLCCommunication::StartCommunication - Starts communication with the S7 PLC Instance
	* @param[in] pPLC - PLC Instance
	*/
	virtual void StartCommunication(LibS7Net::PPLC pPLC) = 0;

	/**
	* IPLCCommunication::RetrieveStatus - Retrieves the status of the PLC
	*/
	virtual void RetrieveStatus() = 0;

	/**
	* IPLCCommunication::StopCommunication - Stops communication with the S7 PLC Instance
	*/
	virtual void StopCommunication() = 0;

	/**
	* IPLCCommunication::PrepareParameters - Prepares Command Parameters
	* @return Instance of the parameters class.
	*/
	virtual ICommandParameters * PrepareParameters() = 0;

	/**
	* IPLCCommunication::ExecuteCommand - Executes a command
	* @param[in] pParametersInstance - Instance of the parameters class.
	* @param[in] nCommandID - ID of command to be triggered.
	* @return Sequence ID of the executed command.
	*/
	virtual LibS7Com_uint32 ExecuteCommand(ICommandParameters* pParametersInstance, const LibS7Com_uint32 nCommandID) = 0;

	/**
	* IPLCCommunication::CheckCommandExecution - Checks the command execution state.
	* @param[in] nSequenceID - Sequence ID of the executed command.
	* @param[out] bSequenceIsActive - Returns if the sequence is active.
	* @param[out] bSequenceIsFinished - Returns if the sequence is finished.
	* @param[out] nErrorCode - Current error code if sequence is active and not yet finished.
	*/
	virtual void CheckCommandExecution(const LibS7Com_uint32 nSequenceID, bool & bSequenceIsActive, bool & bSequenceIsFinished, LibS7Com_uint32 & nErrorCode) = 0;

	/**
	* IPLCCommunication::ReadVariableString - Returns value of string variable.
	* @param[in] nAddress - Address of String Variable.
	* @param[in] nMaxLength - Maximum length.
	* @return Value of variable.
	*/
	virtual std::string ReadVariableString(const LibS7Com_uint32 nAddress, const LibS7Com_uint32 nMaxLength) = 0;

	/**
	* IPLCCommunication::ReadVariableBool - Returns value of bool variable.
	* @param[in] nAddress - Address of Bit Variable.
	* @param[in] nBit - Bit of the variable (0-7)
	* @return Value of variable.
	*/
	virtual bool ReadVariableBool(const LibS7Com_uint32 nAddress, const LibS7Com_uint32 nBit) = 0;

	/**
	* IPLCCommunication::ReadVariableByte - Returns value of byte variable.
	* @param[in] nAddress - Address of Bit Variable.
	* @return Value of variable.
	*/
	virtual LibS7Com_uint8 ReadVariableByte(const LibS7Com_uint32 nAddress) = 0;

	/**
	* IPLCCommunication::ReadVariableInt16 - Returns value of Int16 variable.
	* @param[in] nAddress - Address of Int16 Variable.
	* @return Value of variable.
	*/
	virtual LibS7Com_int16 ReadVariableInt16(const LibS7Com_uint32 nAddress) = 0;

	/**
	* IPLCCommunication::ReadVariableUint16 - Returns value of Uint16 variable.
	* @param[in] nAddress - Address of Int16 Variable.
	* @return Value of variable.
	*/
	virtual LibS7Com_uint16 ReadVariableUint16(const LibS7Com_uint32 nAddress) = 0;

	/**
	* IPLCCommunication::ReadVariableInt32 - Returns value of Int32 variable.
	* @param[in] nAddress - Address of Int32 Variable.
	* @return Value of variable.
	*/
	virtual LibS7Com_int32 ReadVariableInt32(const LibS7Com_uint32 nAddress) = 0;

	/**
	* IPLCCommunication::ReadVariableUint32 - Returns value of Uint32 variable.
	* @param[in] nAddress - Address of Int32 Variable.
	* @return Value of variable.
	*/
	virtual LibS7Com_uint32 ReadVariableUint32(const LibS7Com_uint32 nAddress) = 0;

	/**
	* IPLCCommunication::ReadVariableReal - Returns value of single precision variable.
	* @param[in] nAddress - Address of Real Variable.
	* @return Value of variable.
	*/
	virtual LibS7Com_double ReadVariableReal(const LibS7Com_uint32 nAddress) = 0;

	/**
	* IPLCCommunication::ReadVariableLReal - Returns value of double precision variable.
	* @param[in] nAddress - Address of Real Variable.
	* @return Value of variable.
	*/
	virtual LibS7Com_double ReadVariableLReal(const LibS7Com_uint32 nAddress) = 0;

};

typedef IBaseSharedPtr<IPLCCommunication> PIPLCCommunication;


/*************************************************************************************************************************
 Global functions declarations
**************************************************************************************************************************/
class CWrapper {
public:
	// Injected Components
	static LibS7Net::PWrapper sPLibS7NetWrapper;

	/**
	* Ilibs7com::GetVersion - retrieves the binary version of this library.
	* @param[out] nMajor - returns the major version of this library
	* @param[out] nMinor - returns the minor version of this library
	* @param[out] nMicro - returns the micro version of this library
	*/
	static void GetVersion(LibS7Com_uint32 & nMajor, LibS7Com_uint32 & nMinor, LibS7Com_uint32 & nMicro);

	/**
	* Ilibs7com::GetLastError - Returns the last error recorded on this object
	* @param[in] pInstance - Instance Handle
	* @param[out] sErrorMessage - Message of the last error
	* @return Is there a last error to query
	*/
	static bool GetLastError(IBase* pInstance, std::string & sErrorMessage);

	/**
	* Ilibs7com::AcquireInstance - Acquire shared ownership of an Instance
	* @param[in] pInstance - Instance Handle
	*/
	static void AcquireInstance(IBase* pInstance);

	/**
	* Ilibs7com::ReleaseInstance - Releases shared ownership of an Instance
	* @param[in] pInstance - Instance Handle
	*/
	static void ReleaseInstance(IBase* pInstance);

	/**
	* Ilibs7com::CreatePLCCommunication - Returns a PLC Communication instance
	* @return PLC Communication Instance
	*/
	static IPLCCommunication * CreatePLCCommunication();

};

LibS7ComResult LibS7Com_GetProcAddress (const char * pProcName, void ** ppProcAddress);

} // namespace Impl
} // namespace LibS7Com

#endif // __LIBS7COM_CPPINTERFACES
