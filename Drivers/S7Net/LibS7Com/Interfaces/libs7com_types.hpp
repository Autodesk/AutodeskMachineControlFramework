/*++

Copyright (C) 2020 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.7.0-develop.

Abstract: This is an autogenerated C++-Header file with basic types in
order to allow an easy use of S7Net Communication Protocol

Interface version: 3.1.3

*/

#ifndef __LIBS7COM_TYPES_HEADER_CPP
#define __LIBS7COM_TYPES_HEADER_CPP


/*************************************************************************************************************************
 Scalar types definition
**************************************************************************************************************************/

#ifdef LIBS7COM_USELEGACYINTEGERTYPES

typedef unsigned char LibS7Com_uint8;
typedef unsigned short LibS7Com_uint16 ;
typedef unsigned int LibS7Com_uint32;
typedef unsigned long long LibS7Com_uint64;
typedef char LibS7Com_int8;
typedef short LibS7Com_int16;
typedef int LibS7Com_int32;
typedef long long LibS7Com_int64;

#else // LIBS7COM_USELEGACYINTEGERTYPES

#include <stdint.h>

typedef uint8_t LibS7Com_uint8;
typedef uint16_t LibS7Com_uint16;
typedef uint32_t LibS7Com_uint32;
typedef uint64_t LibS7Com_uint64;
typedef int8_t LibS7Com_int8;
typedef int16_t LibS7Com_int16;
typedef int32_t LibS7Com_int32;
typedef int64_t LibS7Com_int64 ;

#endif // LIBS7COM_USELEGACYINTEGERTYPES

typedef float LibS7Com_single;
typedef double LibS7Com_double;

/*************************************************************************************************************************
 General type definitions
**************************************************************************************************************************/

typedef LibS7Com_int32 LibS7ComResult;
typedef void * LibS7ComHandle;
typedef void * LibS7Com_pvoid;

/*************************************************************************************************************************
 Version for LibS7Com
**************************************************************************************************************************/

#define LIBS7COM_VERSION_MAJOR 3
#define LIBS7COM_VERSION_MINOR 1
#define LIBS7COM_VERSION_MICRO 3
#define LIBS7COM_VERSION_PRERELEASEINFO ""
#define LIBS7COM_VERSION_BUILDINFO ""

/*************************************************************************************************************************
 Error constants for LibS7Com
**************************************************************************************************************************/

#define LIBS7COM_SUCCESS 0
#define LIBS7COM_ERROR_NOTIMPLEMENTED 1001
#define LIBS7COM_ERROR_INVALIDPARAM 1002
#define LIBS7COM_ERROR_INVALIDCAST 1003
#define LIBS7COM_ERROR_BUFFERTOOSMALL 1004
#define LIBS7COM_ERROR_GENERICEXCEPTION 1005
#define LIBS7COM_ERROR_COULDNOTLOADLIBRARY 1006
#define LIBS7COM_ERROR_COULDNOTFINDLIBRARYEXPORT 1007
#define LIBS7COM_ERROR_INCOMPATIBLEBINARYVERSION 1008
#define LIBS7COM_ERROR_NOTCONNECTED 1009
#define LIBS7COM_ERROR_COMNOTINITIALIZED 1010
#define LIBS7COM_ERROR_COULDNOTINITIALIZECOM 1011
#define LIBS7COM_ERROR_WRONGCPUTYPE 1
#define LIBS7COM_ERROR_CONNECTIONERROR 2
#define LIBS7COM_ERROR_IPADDRESSNOTAVAILABLE 3
#define LIBS7COM_ERROR_WRONGVARFORMAT 10
#define LIBS7COM_ERROR_WRONGNUMBERRECEIVEDBYTES 11
#define LIBS7COM_ERROR_SENDDATA 20
#define LIBS7COM_ERROR_READDATA 30
#define LIBS7COM_ERROR_WRITEDATA 50
#define LIBS7COM_ERROR_INVALIDREADADDRESS 60

/*************************************************************************************************************************
 Error strings for LibS7Com
**************************************************************************************************************************/

inline const char * LIBS7COM_GETERRORSTRING (LibS7ComResult nErrorCode) {
  switch (nErrorCode) {
    case LIBS7COM_SUCCESS: return "no error";
    case LIBS7COM_ERROR_NOTIMPLEMENTED: return "functionality not implemented";
    case LIBS7COM_ERROR_INVALIDPARAM: return "an invalid parameter was passed";
    case LIBS7COM_ERROR_INVALIDCAST: return "a type cast failed";
    case LIBS7COM_ERROR_BUFFERTOOSMALL: return "a provided buffer is too small";
    case LIBS7COM_ERROR_GENERICEXCEPTION: return "a generic exception occurred";
    case LIBS7COM_ERROR_COULDNOTLOADLIBRARY: return "the library could not be loaded";
    case LIBS7COM_ERROR_COULDNOTFINDLIBRARYEXPORT: return "a required exported symbol could not be found in the library";
    case LIBS7COM_ERROR_INCOMPATIBLEBINARYVERSION: return "the version of the binary interface does not match the bindings interface";
    case LIBS7COM_ERROR_NOTCONNECTED: return "PLC is not connected";
    case LIBS7COM_ERROR_COMNOTINITIALIZED: return "COM is not initialized";
    case LIBS7COM_ERROR_COULDNOTINITIALIZECOM: return "Could not initialize COM";
    case LIBS7COM_ERROR_WRONGCPUTYPE: return "Wrong type of CPU.";
    case LIBS7COM_ERROR_CONNECTIONERROR: return "Connection error.";
    case LIBS7COM_ERROR_IPADDRESSNOTAVAILABLE: return "IP Address not available.";
    case LIBS7COM_ERROR_WRONGVARFORMAT: return "Wrong format of the variable.";
    case LIBS7COM_ERROR_WRONGNUMBERRECEIVEDBYTES: return "Wrong number of received bytes.";
    case LIBS7COM_ERROR_SENDDATA: return "Error on send data.";
    case LIBS7COM_ERROR_READDATA: return "Error on read data.";
    case LIBS7COM_ERROR_WRITEDATA: return "Error on write data.";
    case LIBS7COM_ERROR_INVALIDREADADDRESS: return "Invalid address.";
    default: return "unknown error";
  }
}

/*************************************************************************************************************************
 Declaration of handle classes 
**************************************************************************************************************************/

typedef LibS7ComHandle LibS7Com_Base;
typedef LibS7ComHandle LibS7Com_PLCCommunication;

namespace LibS7Com {

} // namespace LibS7Com;

// define legacy C-names for enums, structs and function types

#endif // __LIBS7COM_TYPES_HEADER_CPP
