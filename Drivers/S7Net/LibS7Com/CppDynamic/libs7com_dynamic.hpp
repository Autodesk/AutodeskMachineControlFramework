/*++

Copyright (C) 2020 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.7.0-develop.

Abstract: This is an autogenerated C++-Header file in order to allow an easy
 use of S7Net Communication Protocol

Interface version: 3.1.3

*/

#ifndef __LIBS7COM_CPPHEADER_DYNAMIC_CPP
#define __LIBS7COM_CPPHEADER_DYNAMIC_CPP

#include "libs7com_types.hpp"
#include "libs7com_dynamic.h"

#include "libs7net_dynamic.hpp"

#ifdef _WIN32
#include <windows.h>
#else // _WIN32
#include <dlfcn.h>
#endif // _WIN32
#include <string>
#include <memory>
#include <vector>
#include <exception>

namespace LibS7Com {

/*************************************************************************************************************************
 Forward Declaration of all classes
**************************************************************************************************************************/
class CWrapper;
class CBase;
class CPLCCommunication;

/*************************************************************************************************************************
 Declaration of deprecated class types
**************************************************************************************************************************/
typedef CWrapper CLibS7ComWrapper;
typedef CBase CLibS7ComBase;
typedef CPLCCommunication CLibS7ComPLCCommunication;

/*************************************************************************************************************************
 Declaration of shared pointer types
**************************************************************************************************************************/
typedef std::shared_ptr<CWrapper> PWrapper;
typedef std::shared_ptr<CBase> PBase;
typedef std::shared_ptr<CPLCCommunication> PPLCCommunication;

/*************************************************************************************************************************
 Declaration of deprecated shared pointer types
**************************************************************************************************************************/
typedef PWrapper PLibS7ComWrapper;
typedef PBase PLibS7ComBase;
typedef PPLCCommunication PLibS7ComPLCCommunication;


/*************************************************************************************************************************
 classParam Definition
**************************************************************************************************************************/

template<class T> class classParam {
private:
	const T* m_ptr;

public:
	classParam(const T* ptr)
		: m_ptr (ptr)
	{
	}

	classParam(std::shared_ptr <T> sharedPtr)
		: m_ptr (sharedPtr.get())
	{
	}

	LibS7ComHandle GetHandle()
	{
		if (m_ptr != nullptr)
			return m_ptr->handle();
		return nullptr;
	}
};

/*************************************************************************************************************************
 Class ELibS7ComException 
**************************************************************************************************************************/
class ELibS7ComException : public std::exception {
protected:
	/**
	* Error code for the Exception.
	*/
	LibS7ComResult m_errorCode;
	/**
	* Error message for the Exception.
	*/
	std::string m_errorMessage;

public:
	/**
	* Exception Constructor.
	*/
	ELibS7ComException(LibS7ComResult errorCode, const std::string & sErrorMessage)
		: m_errorMessage("LibS7Com Error " + std::to_string(errorCode) + " (" + sErrorMessage + ")")
	{
		m_errorCode = errorCode;
	}

	/**
	* Returns error code
	*/
	LibS7ComResult getErrorCode() const noexcept
	{
		return m_errorCode;
	}

	/**
	* Returns error message
	*/
	const char* what() const noexcept
	{
		return m_errorMessage.c_str();
	}

};

/*************************************************************************************************************************
 Class CInputVector
**************************************************************************************************************************/
template <typename T>
class CInputVector {
private:
	
	const T* m_data;
	size_t m_size;
	
public:
	
	CInputVector( const std::vector<T>& vec)
		: m_data( vec.data() ), m_size( vec.size() )
	{
	}
	
	CInputVector( const T* in_data, size_t in_size)
		: m_data( in_data ), m_size(in_size )
	{
	}
	
	const T* data() const
	{
		return m_data;
	}
	
	size_t size() const
	{
		return m_size;
	}
	
};

// declare deprecated class name
template<typename T>
using CLibS7ComInputVector = CInputVector<T>;

/*************************************************************************************************************************
 Class CWrapper 
**************************************************************************************************************************/
class CWrapper {
public:
	
	CWrapper(void* pSymbolLookupMethod)
	{
		CheckError(nullptr, initWrapperTable(&m_WrapperTable));
		CheckError(nullptr, loadWrapperTableFromSymbolLookupMethod(&m_WrapperTable, pSymbolLookupMethod));
		
		CheckError(nullptr, checkBinaryVersion());
	}
	
	CWrapper(const std::string &sFileName)
	{
		CheckError(nullptr, initWrapperTable(&m_WrapperTable));
		CheckError(nullptr, loadWrapperTable(&m_WrapperTable, sFileName.c_str()));
		
		CheckError(nullptr, checkBinaryVersion());
	}
	
	static PWrapper loadLibrary(const std::string &sFileName)
	{
		return std::make_shared<CWrapper>(sFileName);
	}
	
	static PWrapper loadLibraryFromSymbolLookupMethod(void* pSymbolLookupMethod)
	{
		return std::make_shared<CWrapper>(pSymbolLookupMethod);
	}
	
	~CWrapper()
	{
		releaseWrapperTable(&m_WrapperTable);
	}
	
	inline void CheckError(CBase * pBaseClass, LibS7ComResult nResult);

	inline void GetVersion(LibS7Com_uint32 & nMajor, LibS7Com_uint32 & nMinor, LibS7Com_uint32 & nMicro);
	inline bool GetLastError(classParam<CBase> pInstance, std::string & sErrorMessage);
	inline void AcquireInstance(classParam<CBase> pInstance);
	inline void ReleaseInstance(classParam<CBase> pInstance);
	inline void InjectComponent(const std::string & sNameSpace, const LibS7Com_pvoid pSymbolAddressMethod);
	inline LibS7Com_pvoid GetSymbolLookupMethod();
	inline PPLCCommunication CreatePLCCommunication();

private:
	sLibS7ComDynamicWrapperTable m_WrapperTable;
	// Injected Components
	LibS7Net::PWrapper m_pLibS7NetWrapper;

	
	LibS7ComResult checkBinaryVersion()
	{
		LibS7Com_uint32 nMajor, nMinor, nMicro;
		GetVersion(nMajor, nMinor, nMicro);
		if ( (nMajor != LIBS7COM_VERSION_MAJOR) || (nMinor < LIBS7COM_VERSION_MINOR) ) {
			return LIBS7COM_ERROR_INCOMPATIBLEBINARYVERSION;
		}
		return LIBS7COM_SUCCESS;
	}
	LibS7ComResult initWrapperTable(sLibS7ComDynamicWrapperTable * pWrapperTable);
	LibS7ComResult releaseWrapperTable(sLibS7ComDynamicWrapperTable * pWrapperTable);
	LibS7ComResult loadWrapperTable(sLibS7ComDynamicWrapperTable * pWrapperTable, const char * pLibraryFileName);
	LibS7ComResult loadWrapperTableFromSymbolLookupMethod(sLibS7ComDynamicWrapperTable * pWrapperTable, void* pSymbolLookupMethod);

	friend class CBase;
	friend class CPLCCommunication;

};

	
/*************************************************************************************************************************
 Class CBase 
**************************************************************************************************************************/
class CBase {
public:
	
protected:
	/* Wrapper Object that created the class. */
	CWrapper * m_pWrapper;
	/* Handle to Instance in library*/
	LibS7ComHandle m_pHandle;

	/* Checks for an Error code and raises Exceptions */
	void CheckError(LibS7ComResult nResult)
	{
		if (m_pWrapper != nullptr)
			m_pWrapper->CheckError(this, nResult);
	}
public:
	/**
	* CBase::CBase - Constructor for Base class.
	*/
	CBase(CWrapper * pWrapper, LibS7ComHandle pHandle)
		: m_pWrapper(pWrapper), m_pHandle(pHandle)
	{
	}

	/**
	* CBase::~CBase - Destructor for Base class.
	*/
	virtual ~CBase()
	{
		if (m_pWrapper != nullptr)
			m_pWrapper->ReleaseInstance(this);
		m_pWrapper = nullptr;
	}

	/**
	* CBase::handle - Returns handle to instance.
	*/
	LibS7ComHandle handle() const
	{
		return m_pHandle;
	}

	/**
	* CBase::wrapper - Returns wrapper instance.
	*/
	CWrapper * wrapper() const
	{
		return m_pWrapper;
	}
	
	friend class CWrapper;
};
	
/*************************************************************************************************************************
 Class CPLCCommunication 
**************************************************************************************************************************/
class CPLCCommunication : public CBase {
public:
	
	/**
	* CPLCCommunication::CPLCCommunication - Constructor for PLCCommunication class.
	*/
	CPLCCommunication(CWrapper* pWrapper, LibS7ComHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline void SetProtocolConfiguration(const LibS7Com_uint32 nPLCtoAMC_DBNo, const LibS7Com_uint32 nPLCtoAMC_Size, const LibS7Com_uint32 nAMCtoPLC_DBNo);
	inline void StartCommunication(classParam<LibS7Net::CPLC> pPLC);
	inline void RetrieveStatus();
	inline void StopCommunication();
	inline LibS7Com_uint32 ExecuteCommand(const LibS7Com_uint32 nCommandID);
	inline void CheckCommandExecution(const LibS7Com_uint32 nSequenceID, bool & bSequenceIsActive, bool & bSequenceIsFinished, LibS7Com_uint32 & nErrorCode);
	inline std::string ReadVariableString(const LibS7Com_uint32 nAddress, const LibS7Com_uint32 nMaxLength);
	inline bool ReadVariableBool(const LibS7Com_uint32 nAddress, const LibS7Com_uint32 nBit);
	inline LibS7Com_uint8 ReadVariableByte(const LibS7Com_uint32 nAddress);
	inline LibS7Com_int32 ReadVariableInt32(const LibS7Com_uint32 nAddress);
	inline LibS7Com_int32 ReadVariableUint32(const LibS7Com_uint32 nAddress);
	inline LibS7Com_double ReadVariableReal(const LibS7Com_uint32 nAddress);
	inline LibS7Com_double ReadVariableLReal(const LibS7Com_uint32 nAddress);
};
	
	/**
	* CWrapper::GetVersion - retrieves the binary version of this library.
	* @param[out] nMajor - returns the major version of this library
	* @param[out] nMinor - returns the minor version of this library
	* @param[out] nMicro - returns the micro version of this library
	*/
	inline void CWrapper::GetVersion(LibS7Com_uint32 & nMajor, LibS7Com_uint32 & nMinor, LibS7Com_uint32 & nMicro)
	{
		CheckError(nullptr,m_WrapperTable.m_GetVersion(&nMajor, &nMinor, &nMicro));
	}
	
	/**
	* CWrapper::GetLastError - Returns the last error recorded on this object
	* @param[in] pInstance - Instance Handle
	* @param[out] sErrorMessage - Message of the last error
	* @return Is there a last error to query
	*/
	inline bool CWrapper::GetLastError(classParam<CBase> pInstance, std::string & sErrorMessage)
	{
		LibS7ComHandle hInstance = pInstance.GetHandle();
		LibS7Com_uint32 bytesNeededErrorMessage = 0;
		LibS7Com_uint32 bytesWrittenErrorMessage = 0;
		bool resultHasError = 0;
		CheckError(nullptr,m_WrapperTable.m_GetLastError(hInstance, 0, &bytesNeededErrorMessage, nullptr, &resultHasError));
		std::vector<char> bufferErrorMessage(bytesNeededErrorMessage);
		CheckError(nullptr,m_WrapperTable.m_GetLastError(hInstance, bytesNeededErrorMessage, &bytesWrittenErrorMessage, &bufferErrorMessage[0], &resultHasError));
		sErrorMessage = std::string(&bufferErrorMessage[0]);
		
		return resultHasError;
	}
	
	/**
	* CWrapper::AcquireInstance - Acquire shared ownership of an Instance
	* @param[in] pInstance - Instance Handle
	*/
	inline void CWrapper::AcquireInstance(classParam<CBase> pInstance)
	{
		LibS7ComHandle hInstance = pInstance.GetHandle();
		CheckError(nullptr,m_WrapperTable.m_AcquireInstance(hInstance));
	}
	
	/**
	* CWrapper::ReleaseInstance - Releases shared ownership of an Instance
	* @param[in] pInstance - Instance Handle
	*/
	inline void CWrapper::ReleaseInstance(classParam<CBase> pInstance)
	{
		LibS7ComHandle hInstance = pInstance.GetHandle();
		CheckError(nullptr,m_WrapperTable.m_ReleaseInstance(hInstance));
	}
	
	/**
	* CWrapper::InjectComponent - Injects an imported component for usage within this component
	* @param[in] sNameSpace - NameSpace of the injected component
	* @param[in] pSymbolAddressMethod - Address of the SymbolAddressMethod of the injected component
	*/
	inline void CWrapper::InjectComponent(const std::string & sNameSpace, const LibS7Com_pvoid pSymbolAddressMethod)
	{
		CheckError(nullptr,m_WrapperTable.m_InjectComponent(sNameSpace.c_str(), pSymbolAddressMethod));
		
		bool bNameSpaceFound = false;
		if (sNameSpace == "LibS7Net") {
			if (m_pLibS7NetWrapper != nullptr) {
				throw ELibS7ComException(LIBS7COM_ERROR_COULDNOTLOADLIBRARY, "Library with namespace " + sNameSpace + " is already registered.");
			}
			m_pLibS7NetWrapper = LibS7Net::CWrapper::loadLibraryFromSymbolLookupMethod(pSymbolAddressMethod);
			bNameSpaceFound = true;
		}
		if (!bNameSpaceFound)
			throw ELibS7ComException(LIBS7COM_ERROR_COULDNOTLOADLIBRARY, "Unknown namespace " + sNameSpace);
	}
	
	/**
	* CWrapper::GetSymbolLookupMethod - Returns the address of the SymbolLookupMethod
	* @return Address of the SymbolAddressMethod
	*/
	inline LibS7Com_pvoid CWrapper::GetSymbolLookupMethod()
	{
		LibS7Com_pvoid resultSymbolLookupMethod = 0;
		CheckError(nullptr,m_WrapperTable.m_GetSymbolLookupMethod(&resultSymbolLookupMethod));
		
		return resultSymbolLookupMethod;
	}
	
	/**
	* CWrapper::CreatePLCCommunication - Returns a PLC Communication instance
	* @return PLC Communication Instance
	*/
	inline PPLCCommunication CWrapper::CreatePLCCommunication()
	{
		LibS7ComHandle hPLCCommunication = nullptr;
		CheckError(nullptr,m_WrapperTable.m_CreatePLCCommunication(&hPLCCommunication));
		
		if (!hPLCCommunication) {
			CheckError(nullptr,LIBS7COM_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CPLCCommunication>(this, hPLCCommunication);
	}
	
	inline void CWrapper::CheckError(CBase * pBaseClass, LibS7ComResult nResult)
	{
		if (nResult != 0) {
			std::string sErrorMessage;
			if (pBaseClass != nullptr) {
				GetLastError(pBaseClass, sErrorMessage);
			}
			throw ELibS7ComException(nResult, sErrorMessage);
		}
	}
	

	inline LibS7ComResult CWrapper::initWrapperTable(sLibS7ComDynamicWrapperTable * pWrapperTable)
	{
		if (pWrapperTable == nullptr)
			return LIBS7COM_ERROR_INVALIDPARAM;
		
		pWrapperTable->m_LibraryHandle = nullptr;
		pWrapperTable->m_PLCCommunication_SetProtocolConfiguration = nullptr;
		pWrapperTable->m_PLCCommunication_StartCommunication = nullptr;
		pWrapperTable->m_PLCCommunication_RetrieveStatus = nullptr;
		pWrapperTable->m_PLCCommunication_StopCommunication = nullptr;
		pWrapperTable->m_PLCCommunication_ExecuteCommand = nullptr;
		pWrapperTable->m_PLCCommunication_CheckCommandExecution = nullptr;
		pWrapperTable->m_PLCCommunication_ReadVariableString = nullptr;
		pWrapperTable->m_PLCCommunication_ReadVariableBool = nullptr;
		pWrapperTable->m_PLCCommunication_ReadVariableByte = nullptr;
		pWrapperTable->m_PLCCommunication_ReadVariableInt32 = nullptr;
		pWrapperTable->m_PLCCommunication_ReadVariableUint32 = nullptr;
		pWrapperTable->m_PLCCommunication_ReadVariableReal = nullptr;
		pWrapperTable->m_PLCCommunication_ReadVariableLReal = nullptr;
		pWrapperTable->m_GetVersion = nullptr;
		pWrapperTable->m_GetLastError = nullptr;
		pWrapperTable->m_AcquireInstance = nullptr;
		pWrapperTable->m_ReleaseInstance = nullptr;
		pWrapperTable->m_InjectComponent = nullptr;
		pWrapperTable->m_GetSymbolLookupMethod = nullptr;
		pWrapperTable->m_CreatePLCCommunication = nullptr;
		
		return LIBS7COM_SUCCESS;
	}

	inline LibS7ComResult CWrapper::releaseWrapperTable(sLibS7ComDynamicWrapperTable * pWrapperTable)
	{
		if (pWrapperTable == nullptr)
			return LIBS7COM_ERROR_INVALIDPARAM;
		
		if (pWrapperTable->m_LibraryHandle != nullptr) {
		#ifdef _WIN32
			HMODULE hModule = (HMODULE) pWrapperTable->m_LibraryHandle;
			FreeLibrary(hModule);
		#else // _WIN32
			dlclose(pWrapperTable->m_LibraryHandle);
		#endif // _WIN32
			return initWrapperTable(pWrapperTable);
		}
		
		return LIBS7COM_SUCCESS;
	}

	inline LibS7ComResult CWrapper::loadWrapperTable(sLibS7ComDynamicWrapperTable * pWrapperTable, const char * pLibraryFileName)
	{
		if (pWrapperTable == nullptr)
			return LIBS7COM_ERROR_INVALIDPARAM;
		if (pLibraryFileName == nullptr)
			return LIBS7COM_ERROR_INVALIDPARAM;
		
		#ifdef _WIN32
		// Convert filename to UTF16-string
		int nLength = (int)strlen(pLibraryFileName);
		int nBufferSize = nLength * 2 + 2;
		std::vector<wchar_t> wsLibraryFileName(nBufferSize);
		int nResult = MultiByteToWideChar(CP_UTF8, 0, pLibraryFileName, nLength, &wsLibraryFileName[0], nBufferSize);
		if (nResult == 0)
			return LIBS7COM_ERROR_COULDNOTLOADLIBRARY;
		
		HMODULE hLibrary = LoadLibraryW(wsLibraryFileName.data());
		if (hLibrary == 0) 
			return LIBS7COM_ERROR_COULDNOTLOADLIBRARY;
		#else // _WIN32
		void* hLibrary = dlopen(pLibraryFileName, RTLD_LAZY);
		if (hLibrary == 0) 
			return LIBS7COM_ERROR_COULDNOTLOADLIBRARY;
		dlerror();
		#endif // _WIN32
		
		#ifdef _WIN32
		pWrapperTable->m_PLCCommunication_SetProtocolConfiguration = (PLibS7ComPLCCommunication_SetProtocolConfigurationPtr) GetProcAddress(hLibrary, "libs7com_plccommunication_setprotocolconfiguration");
		#else // _WIN32
		pWrapperTable->m_PLCCommunication_SetProtocolConfiguration = (PLibS7ComPLCCommunication_SetProtocolConfigurationPtr) dlsym(hLibrary, "libs7com_plccommunication_setprotocolconfiguration");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_PLCCommunication_SetProtocolConfiguration == nullptr)
			return LIBS7COM_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_PLCCommunication_StartCommunication = (PLibS7ComPLCCommunication_StartCommunicationPtr) GetProcAddress(hLibrary, "libs7com_plccommunication_startcommunication");
		#else // _WIN32
		pWrapperTable->m_PLCCommunication_StartCommunication = (PLibS7ComPLCCommunication_StartCommunicationPtr) dlsym(hLibrary, "libs7com_plccommunication_startcommunication");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_PLCCommunication_StartCommunication == nullptr)
			return LIBS7COM_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_PLCCommunication_RetrieveStatus = (PLibS7ComPLCCommunication_RetrieveStatusPtr) GetProcAddress(hLibrary, "libs7com_plccommunication_retrievestatus");
		#else // _WIN32
		pWrapperTable->m_PLCCommunication_RetrieveStatus = (PLibS7ComPLCCommunication_RetrieveStatusPtr) dlsym(hLibrary, "libs7com_plccommunication_retrievestatus");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_PLCCommunication_RetrieveStatus == nullptr)
			return LIBS7COM_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_PLCCommunication_StopCommunication = (PLibS7ComPLCCommunication_StopCommunicationPtr) GetProcAddress(hLibrary, "libs7com_plccommunication_stopcommunication");
		#else // _WIN32
		pWrapperTable->m_PLCCommunication_StopCommunication = (PLibS7ComPLCCommunication_StopCommunicationPtr) dlsym(hLibrary, "libs7com_plccommunication_stopcommunication");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_PLCCommunication_StopCommunication == nullptr)
			return LIBS7COM_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_PLCCommunication_ExecuteCommand = (PLibS7ComPLCCommunication_ExecuteCommandPtr) GetProcAddress(hLibrary, "libs7com_plccommunication_executecommand");
		#else // _WIN32
		pWrapperTable->m_PLCCommunication_ExecuteCommand = (PLibS7ComPLCCommunication_ExecuteCommandPtr) dlsym(hLibrary, "libs7com_plccommunication_executecommand");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_PLCCommunication_ExecuteCommand == nullptr)
			return LIBS7COM_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_PLCCommunication_CheckCommandExecution = (PLibS7ComPLCCommunication_CheckCommandExecutionPtr) GetProcAddress(hLibrary, "libs7com_plccommunication_checkcommandexecution");
		#else // _WIN32
		pWrapperTable->m_PLCCommunication_CheckCommandExecution = (PLibS7ComPLCCommunication_CheckCommandExecutionPtr) dlsym(hLibrary, "libs7com_plccommunication_checkcommandexecution");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_PLCCommunication_CheckCommandExecution == nullptr)
			return LIBS7COM_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_PLCCommunication_ReadVariableString = (PLibS7ComPLCCommunication_ReadVariableStringPtr) GetProcAddress(hLibrary, "libs7com_plccommunication_readvariablestring");
		#else // _WIN32
		pWrapperTable->m_PLCCommunication_ReadVariableString = (PLibS7ComPLCCommunication_ReadVariableStringPtr) dlsym(hLibrary, "libs7com_plccommunication_readvariablestring");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_PLCCommunication_ReadVariableString == nullptr)
			return LIBS7COM_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_PLCCommunication_ReadVariableBool = (PLibS7ComPLCCommunication_ReadVariableBoolPtr) GetProcAddress(hLibrary, "libs7com_plccommunication_readvariablebool");
		#else // _WIN32
		pWrapperTable->m_PLCCommunication_ReadVariableBool = (PLibS7ComPLCCommunication_ReadVariableBoolPtr) dlsym(hLibrary, "libs7com_plccommunication_readvariablebool");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_PLCCommunication_ReadVariableBool == nullptr)
			return LIBS7COM_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_PLCCommunication_ReadVariableByte = (PLibS7ComPLCCommunication_ReadVariableBytePtr) GetProcAddress(hLibrary, "libs7com_plccommunication_readvariablebyte");
		#else // _WIN32
		pWrapperTable->m_PLCCommunication_ReadVariableByte = (PLibS7ComPLCCommunication_ReadVariableBytePtr) dlsym(hLibrary, "libs7com_plccommunication_readvariablebyte");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_PLCCommunication_ReadVariableByte == nullptr)
			return LIBS7COM_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_PLCCommunication_ReadVariableInt32 = (PLibS7ComPLCCommunication_ReadVariableInt32Ptr) GetProcAddress(hLibrary, "libs7com_plccommunication_readvariableint32");
		#else // _WIN32
		pWrapperTable->m_PLCCommunication_ReadVariableInt32 = (PLibS7ComPLCCommunication_ReadVariableInt32Ptr) dlsym(hLibrary, "libs7com_plccommunication_readvariableint32");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_PLCCommunication_ReadVariableInt32 == nullptr)
			return LIBS7COM_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_PLCCommunication_ReadVariableUint32 = (PLibS7ComPLCCommunication_ReadVariableUint32Ptr) GetProcAddress(hLibrary, "libs7com_plccommunication_readvariableuint32");
		#else // _WIN32
		pWrapperTable->m_PLCCommunication_ReadVariableUint32 = (PLibS7ComPLCCommunication_ReadVariableUint32Ptr) dlsym(hLibrary, "libs7com_plccommunication_readvariableuint32");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_PLCCommunication_ReadVariableUint32 == nullptr)
			return LIBS7COM_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_PLCCommunication_ReadVariableReal = (PLibS7ComPLCCommunication_ReadVariableRealPtr) GetProcAddress(hLibrary, "libs7com_plccommunication_readvariablereal");
		#else // _WIN32
		pWrapperTable->m_PLCCommunication_ReadVariableReal = (PLibS7ComPLCCommunication_ReadVariableRealPtr) dlsym(hLibrary, "libs7com_plccommunication_readvariablereal");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_PLCCommunication_ReadVariableReal == nullptr)
			return LIBS7COM_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_PLCCommunication_ReadVariableLReal = (PLibS7ComPLCCommunication_ReadVariableLRealPtr) GetProcAddress(hLibrary, "libs7com_plccommunication_readvariablelreal");
		#else // _WIN32
		pWrapperTable->m_PLCCommunication_ReadVariableLReal = (PLibS7ComPLCCommunication_ReadVariableLRealPtr) dlsym(hLibrary, "libs7com_plccommunication_readvariablelreal");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_PLCCommunication_ReadVariableLReal == nullptr)
			return LIBS7COM_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GetVersion = (PLibS7ComGetVersionPtr) GetProcAddress(hLibrary, "libs7com_getversion");
		#else // _WIN32
		pWrapperTable->m_GetVersion = (PLibS7ComGetVersionPtr) dlsym(hLibrary, "libs7com_getversion");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GetVersion == nullptr)
			return LIBS7COM_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GetLastError = (PLibS7ComGetLastErrorPtr) GetProcAddress(hLibrary, "libs7com_getlasterror");
		#else // _WIN32
		pWrapperTable->m_GetLastError = (PLibS7ComGetLastErrorPtr) dlsym(hLibrary, "libs7com_getlasterror");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GetLastError == nullptr)
			return LIBS7COM_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_AcquireInstance = (PLibS7ComAcquireInstancePtr) GetProcAddress(hLibrary, "libs7com_acquireinstance");
		#else // _WIN32
		pWrapperTable->m_AcquireInstance = (PLibS7ComAcquireInstancePtr) dlsym(hLibrary, "libs7com_acquireinstance");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_AcquireInstance == nullptr)
			return LIBS7COM_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ReleaseInstance = (PLibS7ComReleaseInstancePtr) GetProcAddress(hLibrary, "libs7com_releaseinstance");
		#else // _WIN32
		pWrapperTable->m_ReleaseInstance = (PLibS7ComReleaseInstancePtr) dlsym(hLibrary, "libs7com_releaseinstance");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ReleaseInstance == nullptr)
			return LIBS7COM_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_InjectComponent = (PLibS7ComInjectComponentPtr) GetProcAddress(hLibrary, "libs7com_injectcomponent");
		#else // _WIN32
		pWrapperTable->m_InjectComponent = (PLibS7ComInjectComponentPtr) dlsym(hLibrary, "libs7com_injectcomponent");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_InjectComponent == nullptr)
			return LIBS7COM_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GetSymbolLookupMethod = (PLibS7ComGetSymbolLookupMethodPtr) GetProcAddress(hLibrary, "libs7com_getsymbollookupmethod");
		#else // _WIN32
		pWrapperTable->m_GetSymbolLookupMethod = (PLibS7ComGetSymbolLookupMethodPtr) dlsym(hLibrary, "libs7com_getsymbollookupmethod");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GetSymbolLookupMethod == nullptr)
			return LIBS7COM_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_CreatePLCCommunication = (PLibS7ComCreatePLCCommunicationPtr) GetProcAddress(hLibrary, "libs7com_createplccommunication");
		#else // _WIN32
		pWrapperTable->m_CreatePLCCommunication = (PLibS7ComCreatePLCCommunicationPtr) dlsym(hLibrary, "libs7com_createplccommunication");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_CreatePLCCommunication == nullptr)
			return LIBS7COM_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		pWrapperTable->m_LibraryHandle = hLibrary;
		return LIBS7COM_SUCCESS;
	}

	inline LibS7ComResult CWrapper::loadWrapperTableFromSymbolLookupMethod(sLibS7ComDynamicWrapperTable * pWrapperTable, void* pSymbolLookupMethod)
{
		if (pWrapperTable == nullptr)
			return LIBS7COM_ERROR_INVALIDPARAM;
		if (pSymbolLookupMethod == nullptr)
			return LIBS7COM_ERROR_INVALIDPARAM;
		
		typedef LibS7ComResult(*SymbolLookupType)(const char*, void**);
		
		SymbolLookupType pLookup = (SymbolLookupType)pSymbolLookupMethod;
		
		LibS7ComResult eLookupError = LIBS7COM_SUCCESS;
		eLookupError = (*pLookup)("libs7com_plccommunication_setprotocolconfiguration", (void**)&(pWrapperTable->m_PLCCommunication_SetProtocolConfiguration));
		if ( (eLookupError != 0) || (pWrapperTable->m_PLCCommunication_SetProtocolConfiguration == nullptr) )
			return LIBS7COM_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libs7com_plccommunication_startcommunication", (void**)&(pWrapperTable->m_PLCCommunication_StartCommunication));
		if ( (eLookupError != 0) || (pWrapperTable->m_PLCCommunication_StartCommunication == nullptr) )
			return LIBS7COM_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libs7com_plccommunication_retrievestatus", (void**)&(pWrapperTable->m_PLCCommunication_RetrieveStatus));
		if ( (eLookupError != 0) || (pWrapperTable->m_PLCCommunication_RetrieveStatus == nullptr) )
			return LIBS7COM_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libs7com_plccommunication_stopcommunication", (void**)&(pWrapperTable->m_PLCCommunication_StopCommunication));
		if ( (eLookupError != 0) || (pWrapperTable->m_PLCCommunication_StopCommunication == nullptr) )
			return LIBS7COM_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libs7com_plccommunication_executecommand", (void**)&(pWrapperTable->m_PLCCommunication_ExecuteCommand));
		if ( (eLookupError != 0) || (pWrapperTable->m_PLCCommunication_ExecuteCommand == nullptr) )
			return LIBS7COM_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libs7com_plccommunication_checkcommandexecution", (void**)&(pWrapperTable->m_PLCCommunication_CheckCommandExecution));
		if ( (eLookupError != 0) || (pWrapperTable->m_PLCCommunication_CheckCommandExecution == nullptr) )
			return LIBS7COM_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libs7com_plccommunication_readvariablestring", (void**)&(pWrapperTable->m_PLCCommunication_ReadVariableString));
		if ( (eLookupError != 0) || (pWrapperTable->m_PLCCommunication_ReadVariableString == nullptr) )
			return LIBS7COM_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libs7com_plccommunication_readvariablebool", (void**)&(pWrapperTable->m_PLCCommunication_ReadVariableBool));
		if ( (eLookupError != 0) || (pWrapperTable->m_PLCCommunication_ReadVariableBool == nullptr) )
			return LIBS7COM_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libs7com_plccommunication_readvariablebyte", (void**)&(pWrapperTable->m_PLCCommunication_ReadVariableByte));
		if ( (eLookupError != 0) || (pWrapperTable->m_PLCCommunication_ReadVariableByte == nullptr) )
			return LIBS7COM_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libs7com_plccommunication_readvariableint32", (void**)&(pWrapperTable->m_PLCCommunication_ReadVariableInt32));
		if ( (eLookupError != 0) || (pWrapperTable->m_PLCCommunication_ReadVariableInt32 == nullptr) )
			return LIBS7COM_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libs7com_plccommunication_readvariableuint32", (void**)&(pWrapperTable->m_PLCCommunication_ReadVariableUint32));
		if ( (eLookupError != 0) || (pWrapperTable->m_PLCCommunication_ReadVariableUint32 == nullptr) )
			return LIBS7COM_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libs7com_plccommunication_readvariablereal", (void**)&(pWrapperTable->m_PLCCommunication_ReadVariableReal));
		if ( (eLookupError != 0) || (pWrapperTable->m_PLCCommunication_ReadVariableReal == nullptr) )
			return LIBS7COM_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libs7com_plccommunication_readvariablelreal", (void**)&(pWrapperTable->m_PLCCommunication_ReadVariableLReal));
		if ( (eLookupError != 0) || (pWrapperTable->m_PLCCommunication_ReadVariableLReal == nullptr) )
			return LIBS7COM_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libs7com_getversion", (void**)&(pWrapperTable->m_GetVersion));
		if ( (eLookupError != 0) || (pWrapperTable->m_GetVersion == nullptr) )
			return LIBS7COM_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libs7com_getlasterror", (void**)&(pWrapperTable->m_GetLastError));
		if ( (eLookupError != 0) || (pWrapperTable->m_GetLastError == nullptr) )
			return LIBS7COM_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libs7com_acquireinstance", (void**)&(pWrapperTable->m_AcquireInstance));
		if ( (eLookupError != 0) || (pWrapperTable->m_AcquireInstance == nullptr) )
			return LIBS7COM_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libs7com_releaseinstance", (void**)&(pWrapperTable->m_ReleaseInstance));
		if ( (eLookupError != 0) || (pWrapperTable->m_ReleaseInstance == nullptr) )
			return LIBS7COM_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libs7com_injectcomponent", (void**)&(pWrapperTable->m_InjectComponent));
		if ( (eLookupError != 0) || (pWrapperTable->m_InjectComponent == nullptr) )
			return LIBS7COM_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libs7com_getsymbollookupmethod", (void**)&(pWrapperTable->m_GetSymbolLookupMethod));
		if ( (eLookupError != 0) || (pWrapperTable->m_GetSymbolLookupMethod == nullptr) )
			return LIBS7COM_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libs7com_createplccommunication", (void**)&(pWrapperTable->m_CreatePLCCommunication));
		if ( (eLookupError != 0) || (pWrapperTable->m_CreatePLCCommunication == nullptr) )
			return LIBS7COM_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		return LIBS7COM_SUCCESS;
}

	
	
	/**
	 * Method definitions for class CBase
	 */
	
	/**
	 * Method definitions for class CPLCCommunication
	 */
	
	/**
	* CPLCCommunication::SetProtocolConfiguration - Configures the protocol
	* @param[in] nPLCtoAMC_DBNo - DB Number of PLC to AMC connection
	* @param[in] nPLCtoAMC_Size - Size of PLC to AMC protocol buffer.
	* @param[in] nAMCtoPLC_DBNo - DB Number of AMC to PLC connection
	*/
	void CPLCCommunication::SetProtocolConfiguration(const LibS7Com_uint32 nPLCtoAMC_DBNo, const LibS7Com_uint32 nPLCtoAMC_Size, const LibS7Com_uint32 nAMCtoPLC_DBNo)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_PLCCommunication_SetProtocolConfiguration(m_pHandle, nPLCtoAMC_DBNo, nPLCtoAMC_Size, nAMCtoPLC_DBNo));
	}
	
	/**
	* CPLCCommunication::StartCommunication - Starts communication with the S7 PLC Instance
	* @param[in] pPLC - PLC Instance
	*/
	void CPLCCommunication::StartCommunication(classParam<LibS7Net::CPLC> pPLC)
	{
		LibS7NetHandle hPLC = pPLC.GetHandle();
		CheckError(m_pWrapper->m_WrapperTable.m_PLCCommunication_StartCommunication(m_pHandle, hPLC));
	}
	
	/**
	* CPLCCommunication::RetrieveStatus - Retrieves the status of the PLC
	*/
	void CPLCCommunication::RetrieveStatus()
	{
		CheckError(m_pWrapper->m_WrapperTable.m_PLCCommunication_RetrieveStatus(m_pHandle));
	}
	
	/**
	* CPLCCommunication::StopCommunication - Stops communication with the S7 PLC Instance
	*/
	void CPLCCommunication::StopCommunication()
	{
		CheckError(m_pWrapper->m_WrapperTable.m_PLCCommunication_StopCommunication(m_pHandle));
	}
	
	/**
	* CPLCCommunication::ExecuteCommand - Executes a command
	* @param[in] nCommandID - ID of command to be triggered.
	* @return Sequence ID of the executed command.
	*/
	LibS7Com_uint32 CPLCCommunication::ExecuteCommand(const LibS7Com_uint32 nCommandID)
	{
		LibS7Com_uint32 resultSequenceID = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_PLCCommunication_ExecuteCommand(m_pHandle, nCommandID, &resultSequenceID));
		
		return resultSequenceID;
	}
	
	/**
	* CPLCCommunication::CheckCommandExecution - Checks the command execution state.
	* @param[in] nSequenceID - Sequence ID of the executed command.
	* @param[out] bSequenceIsActive - Returns if the sequence is active.
	* @param[out] bSequenceIsFinished - Returns if the sequence is finished.
	* @param[out] nErrorCode - Current error code if sequence is active and not yet finished.
	*/
	void CPLCCommunication::CheckCommandExecution(const LibS7Com_uint32 nSequenceID, bool & bSequenceIsActive, bool & bSequenceIsFinished, LibS7Com_uint32 & nErrorCode)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_PLCCommunication_CheckCommandExecution(m_pHandle, nSequenceID, &bSequenceIsActive, &bSequenceIsFinished, &nErrorCode));
	}
	
	/**
	* CPLCCommunication::ReadVariableString - Returns value of string variable.
	* @param[in] nAddress - Address of String Variable.
	* @param[in] nMaxLength - Maximum length.
	* @return Value of variable.
	*/
	std::string CPLCCommunication::ReadVariableString(const LibS7Com_uint32 nAddress, const LibS7Com_uint32 nMaxLength)
	{
		LibS7Com_uint32 bytesNeededValue = 0;
		LibS7Com_uint32 bytesWrittenValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_PLCCommunication_ReadVariableString(m_pHandle, nAddress, nMaxLength, 0, &bytesNeededValue, nullptr));
		std::vector<char> bufferValue(bytesNeededValue);
		CheckError(m_pWrapper->m_WrapperTable.m_PLCCommunication_ReadVariableString(m_pHandle, nAddress, nMaxLength, bytesNeededValue, &bytesWrittenValue, &bufferValue[0]));
		
		return std::string(&bufferValue[0]);
	}
	
	/**
	* CPLCCommunication::ReadVariableBool - Returns value of bool variable.
	* @param[in] nAddress - Address of Bit Variable.
	* @param[in] nBit - Bit of the variable (0-7)
	* @return Value of variable.
	*/
	bool CPLCCommunication::ReadVariableBool(const LibS7Com_uint32 nAddress, const LibS7Com_uint32 nBit)
	{
		bool resultValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_PLCCommunication_ReadVariableBool(m_pHandle, nAddress, nBit, &resultValue));
		
		return resultValue;
	}
	
	/**
	* CPLCCommunication::ReadVariableByte - Returns value of byte variable.
	* @param[in] nAddress - Address of Bit Variable.
	* @return Value of variable.
	*/
	LibS7Com_uint8 CPLCCommunication::ReadVariableByte(const LibS7Com_uint32 nAddress)
	{
		LibS7Com_uint8 resultValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_PLCCommunication_ReadVariableByte(m_pHandle, nAddress, &resultValue));
		
		return resultValue;
	}
	
	/**
	* CPLCCommunication::ReadVariableInt32 - Returns value of Int32 variable.
	* @param[in] nAddress - Address of Int32 Variable.
	* @return Value of variable.
	*/
	LibS7Com_int32 CPLCCommunication::ReadVariableInt32(const LibS7Com_uint32 nAddress)
	{
		LibS7Com_int32 resultValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_PLCCommunication_ReadVariableInt32(m_pHandle, nAddress, &resultValue));
		
		return resultValue;
	}
	
	/**
	* CPLCCommunication::ReadVariableUint32 - Returns value of Uint32 variable.
	* @param[in] nAddress - Address of Int32 Variable.
	* @return Value of variable.
	*/
	LibS7Com_int32 CPLCCommunication::ReadVariableUint32(const LibS7Com_uint32 nAddress)
	{
		LibS7Com_int32 resultValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_PLCCommunication_ReadVariableUint32(m_pHandle, nAddress, &resultValue));
		
		return resultValue;
	}
	
	/**
	* CPLCCommunication::ReadVariableReal - Returns value of single precision variable.
	* @param[in] nAddress - Address of Real Variable.
	* @return Value of variable.
	*/
	LibS7Com_double CPLCCommunication::ReadVariableReal(const LibS7Com_uint32 nAddress)
	{
		LibS7Com_double resultValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_PLCCommunication_ReadVariableReal(m_pHandle, nAddress, &resultValue));
		
		return resultValue;
	}
	
	/**
	* CPLCCommunication::ReadVariableLReal - Returns value of double precision variable.
	* @param[in] nAddress - Address of Real Variable.
	* @return Value of variable.
	*/
	LibS7Com_double CPLCCommunication::ReadVariableLReal(const LibS7Com_uint32 nAddress)
	{
		LibS7Com_double resultValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_PLCCommunication_ReadVariableLReal(m_pHandle, nAddress, &resultValue));
		
		return resultValue;
	}

} // namespace LibS7Com

#endif // __LIBS7COM_CPPHEADER_DYNAMIC_CPP

