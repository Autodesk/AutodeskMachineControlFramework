/*++

Copyright (C) 2020 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.8.0-develop.

Abstract: This is an autogenerated C++ implementation file in order to allow easy
development of S7Net Library Wrapper. The functions in this file need to be implemented. It needs to be generated only once.

Interface version: 1.2.0

*/

#include "libs7net_abi.hpp"
#include "libs7net_interfaces.hpp"
#include "libs7net_interfaceexception.hpp"
#include "libs7net_interfacejournal.hpp"

#include <map>

using namespace LibS7Net::Impl;

PLibS7NetInterfaceJournal m_GlobalJournal;

LibS7NetResult handleLibS7NetException(IBase * pIBaseClass, ELibS7NetInterfaceException & Exception, CLibS7NetInterfaceJournalEntry * pJournalEntry = nullptr)
{
	LibS7NetResult errorCode = Exception.getErrorCode();

	if (pJournalEntry != nullptr)
		pJournalEntry->writeError(errorCode);

	if (pIBaseClass != nullptr)
		pIBaseClass->RegisterErrorMessage(Exception.what());

	return errorCode;
}

LibS7NetResult handleStdException(IBase * pIBaseClass, std::exception & Exception, CLibS7NetInterfaceJournalEntry * pJournalEntry = nullptr)
{
	LibS7NetResult errorCode = LIBS7NET_ERROR_GENERICEXCEPTION;

	if (pJournalEntry != nullptr)
		pJournalEntry->writeError(errorCode);

	if (pIBaseClass != nullptr)
		pIBaseClass->RegisterErrorMessage(Exception.what());

	return errorCode;
}

LibS7NetResult handleUnhandledException(IBase * pIBaseClass, CLibS7NetInterfaceJournalEntry * pJournalEntry = nullptr)
{
	LibS7NetResult errorCode = LIBS7NET_ERROR_GENERICEXCEPTION;

	if (pJournalEntry != nullptr)
		pJournalEntry->writeError(errorCode);

	if (pIBaseClass != nullptr)
		pIBaseClass->RegisterErrorMessage("Unhandled Exception");

	return errorCode;
}



/*************************************************************************************************************************
 Class implementation for Base
**************************************************************************************************************************/

/*************************************************************************************************************************
 Class implementation for PLCReadData
**************************************************************************************************************************/
LibS7NetResult libs7net_plcreaddata_getdata(LibS7Net_PLCReadData pPLCReadData, const LibS7Net_uint64 nDataBufferSize, LibS7Net_uint64* pDataNeededCount, LibS7Net_uint8 * pDataBuffer)
{
	IBase* pIBaseClass = (IBase *)pPLCReadData;

	PLibS7NetInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pPLCReadData, "PLCReadData", "GetData");
		}
		if ((!pDataBuffer) && !(pDataNeededCount))
			throw ELibS7NetInterfaceException (LIBS7NET_ERROR_INVALIDPARAM);
		IPLCReadData* pIPLCReadData = dynamic_cast<IPLCReadData*>(pIBaseClass);
		if (!pIPLCReadData)
			throw ELibS7NetInterfaceException(LIBS7NET_ERROR_INVALIDCAST);
		
		pIPLCReadData->GetData(nDataBufferSize, pDataNeededCount, pDataBuffer);

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}
		return LIBS7NET_SUCCESS;
	}
	catch (ELibS7NetInterfaceException & Exception) {
		return handleLibS7NetException(pIBaseClass, Exception, pJournalEntry.get());
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException, pJournalEntry.get());
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass, pJournalEntry.get());
	}
}


/*************************************************************************************************************************
 Class implementation for PLC
**************************************************************************************************************************/
LibS7NetResult libs7net_plc_connect(LibS7Net_PLC pPLC, eLibS7NetCPUType eCPUType, const char * pIP, LibS7Net_uint32 nRack, LibS7Net_uint32 nSlot)
{
	IBase* pIBaseClass = (IBase *)pPLC;

	PLibS7NetInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pPLC, "PLC", "Connect");
			pJournalEntry->addEnumParameter("CPUType", "CPUType", (LibS7Net_int32)(eCPUType));
			pJournalEntry->addStringParameter("IP", pIP);
			pJournalEntry->addUInt32Parameter("Rack", nRack);
			pJournalEntry->addUInt32Parameter("Slot", nSlot);
		}
		if (pIP == nullptr)
			throw ELibS7NetInterfaceException (LIBS7NET_ERROR_INVALIDPARAM);
		std::string sIP(pIP);
		IPLC* pIPLC = dynamic_cast<IPLC*>(pIBaseClass);
		if (!pIPLC)
			throw ELibS7NetInterfaceException(LIBS7NET_ERROR_INVALIDCAST);
		
		pIPLC->Connect(eCPUType, sIP, nRack, nSlot);

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}
		return LIBS7NET_SUCCESS;
	}
	catch (ELibS7NetInterfaceException & Exception) {
		return handleLibS7NetException(pIBaseClass, Exception, pJournalEntry.get());
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException, pJournalEntry.get());
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass, pJournalEntry.get());
	}
}

LibS7NetResult libs7net_plc_isconnected(LibS7Net_PLC pPLC, bool * pConnected)
{
	IBase* pIBaseClass = (IBase *)pPLC;

	PLibS7NetInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pPLC, "PLC", "IsConnected");
		}
		if (pConnected == nullptr)
			throw ELibS7NetInterfaceException (LIBS7NET_ERROR_INVALIDPARAM);
		IPLC* pIPLC = dynamic_cast<IPLC*>(pIBaseClass);
		if (!pIPLC)
			throw ELibS7NetInterfaceException(LIBS7NET_ERROR_INVALIDCAST);
		
		*pConnected = pIPLC->IsConnected();

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addBooleanResult("Connected", *pConnected);
			pJournalEntry->writeSuccess();
		}
		return LIBS7NET_SUCCESS;
	}
	catch (ELibS7NetInterfaceException & Exception) {
		return handleLibS7NetException(pIBaseClass, Exception, pJournalEntry.get());
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException, pJournalEntry.get());
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass, pJournalEntry.get());
	}
}

LibS7NetResult libs7net_plc_isavailable(LibS7Net_PLC pPLC, bool * pConnected)
{
	IBase* pIBaseClass = (IBase *)pPLC;

	PLibS7NetInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pPLC, "PLC", "IsAvailable");
		}
		if (pConnected == nullptr)
			throw ELibS7NetInterfaceException (LIBS7NET_ERROR_INVALIDPARAM);
		IPLC* pIPLC = dynamic_cast<IPLC*>(pIBaseClass);
		if (!pIPLC)
			throw ELibS7NetInterfaceException(LIBS7NET_ERROR_INVALIDCAST);
		
		*pConnected = pIPLC->IsAvailable();

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addBooleanResult("Connected", *pConnected);
			pJournalEntry->writeSuccess();
		}
		return LIBS7NET_SUCCESS;
	}
	catch (ELibS7NetInterfaceException & Exception) {
		return handleLibS7NetException(pIBaseClass, Exception, pJournalEntry.get());
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException, pJournalEntry.get());
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass, pJournalEntry.get());
	}
}

LibS7NetResult libs7net_plc_getslot(LibS7Net_PLC pPLC, LibS7Net_uint32 * pSlot)
{
	IBase* pIBaseClass = (IBase *)pPLC;

	PLibS7NetInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pPLC, "PLC", "GetSlot");
		}
		if (pSlot == nullptr)
			throw ELibS7NetInterfaceException (LIBS7NET_ERROR_INVALIDPARAM);
		IPLC* pIPLC = dynamic_cast<IPLC*>(pIBaseClass);
		if (!pIPLC)
			throw ELibS7NetInterfaceException(LIBS7NET_ERROR_INVALIDCAST);
		
		*pSlot = pIPLC->GetSlot();

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addUInt32Result("Slot", *pSlot);
			pJournalEntry->writeSuccess();
		}
		return LIBS7NET_SUCCESS;
	}
	catch (ELibS7NetInterfaceException & Exception) {
		return handleLibS7NetException(pIBaseClass, Exception, pJournalEntry.get());
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException, pJournalEntry.get());
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass, pJournalEntry.get());
	}
}

LibS7NetResult libs7net_plc_getrack(LibS7Net_PLC pPLC, LibS7Net_uint32 * pSlot)
{
	IBase* pIBaseClass = (IBase *)pPLC;

	PLibS7NetInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pPLC, "PLC", "GetRack");
		}
		if (pSlot == nullptr)
			throw ELibS7NetInterfaceException (LIBS7NET_ERROR_INVALIDPARAM);
		IPLC* pIPLC = dynamic_cast<IPLC*>(pIBaseClass);
		if (!pIPLC)
			throw ELibS7NetInterfaceException(LIBS7NET_ERROR_INVALIDCAST);
		
		*pSlot = pIPLC->GetRack();

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addUInt32Result("Slot", *pSlot);
			pJournalEntry->writeSuccess();
		}
		return LIBS7NET_SUCCESS;
	}
	catch (ELibS7NetInterfaceException & Exception) {
		return handleLibS7NetException(pIBaseClass, Exception, pJournalEntry.get());
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException, pJournalEntry.get());
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass, pJournalEntry.get());
	}
}

LibS7NetResult libs7net_plc_getcputype(LibS7Net_PLC pPLC, eLibS7NetCPUType * pCPUType)
{
	IBase* pIBaseClass = (IBase *)pPLC;

	PLibS7NetInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pPLC, "PLC", "GetCPUType");
		}
		if (pCPUType == nullptr)
			throw ELibS7NetInterfaceException (LIBS7NET_ERROR_INVALIDPARAM);
		IPLC* pIPLC = dynamic_cast<IPLC*>(pIBaseClass);
		if (!pIPLC)
			throw ELibS7NetInterfaceException(LIBS7NET_ERROR_INVALIDCAST);
		
		*pCPUType = pIPLC->GetCPUType();

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addEnumResult("CPUType", "CPUType", (LibS7Net_int32)(*pCPUType));
			pJournalEntry->writeSuccess();
		}
		return LIBS7NET_SUCCESS;
	}
	catch (ELibS7NetInterfaceException & Exception) {
		return handleLibS7NetException(pIBaseClass, Exception, pJournalEntry.get());
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException, pJournalEntry.get());
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass, pJournalEntry.get());
	}
}

LibS7NetResult libs7net_plc_getipaddress(LibS7Net_PLC pPLC, const LibS7Net_uint32 nIPAddressBufferSize, LibS7Net_uint32* pIPAddressNeededChars, char * pIPAddressBuffer)
{
	IBase* pIBaseClass = (IBase *)pPLC;

	PLibS7NetInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pPLC, "PLC", "GetIPAddress");
		}
		if ( (!pIPAddressBuffer) && !(pIPAddressNeededChars) )
			throw ELibS7NetInterfaceException (LIBS7NET_ERROR_INVALIDPARAM);
		std::string sIPAddress("");
		IPLC* pIPLC = dynamic_cast<IPLC*>(pIBaseClass);
		if (!pIPLC)
			throw ELibS7NetInterfaceException(LIBS7NET_ERROR_INVALIDCAST);
		
		bool isCacheCall = (pIPAddressBuffer == nullptr);
		if (isCacheCall) {
			sIPAddress = pIPLC->GetIPAddress();

			pIPLC->_setCache (new ParameterCache_1<std::string> (sIPAddress));
		}
		else {
			auto cache = dynamic_cast<ParameterCache_1<std::string>*> (pIPLC->_getCache ());
			if (cache == nullptr)
				throw ELibS7NetInterfaceException(LIBS7NET_ERROR_INVALIDCAST);
			cache->retrieveData (sIPAddress);
			pIPLC->_setCache (nullptr);
		}
		
		if (pIPAddressNeededChars)
			*pIPAddressNeededChars = (LibS7Net_uint32) (sIPAddress.size()+1);
		if (pIPAddressBuffer) {
			if (sIPAddress.size() >= nIPAddressBufferSize)
				throw ELibS7NetInterfaceException (LIBS7NET_ERROR_BUFFERTOOSMALL);
			for (size_t iIPAddress = 0; iIPAddress < sIPAddress.size(); iIPAddress++)
				pIPAddressBuffer[iIPAddress] = sIPAddress[iIPAddress];
			pIPAddressBuffer[sIPAddress.size()] = 0;
		}
		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addStringResult("IPAddress", sIPAddress.c_str());
			pJournalEntry->writeSuccess();
		}
		return LIBS7NET_SUCCESS;
	}
	catch (ELibS7NetInterfaceException & Exception) {
		return handleLibS7NetException(pIBaseClass, Exception, pJournalEntry.get());
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException, pJournalEntry.get());
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass, pJournalEntry.get());
	}
}

LibS7NetResult libs7net_plc_writebytes(LibS7Net_PLC pPLC, LibS7Net_uint32 nDB, LibS7Net_uint32 nOffset, LibS7Net_uint64 nBytesBufferSize, const LibS7Net_uint8 * pBytesBuffer)
{
	IBase* pIBaseClass = (IBase *)pPLC;

	PLibS7NetInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pPLC, "PLC", "WriteBytes");
			pJournalEntry->addUInt32Parameter("DB", nDB);
			pJournalEntry->addUInt32Parameter("Offset", nOffset);
		}
		if ( (!pBytesBuffer) && (nBytesBufferSize>0))
			throw ELibS7NetInterfaceException (LIBS7NET_ERROR_INVALIDPARAM);
		IPLC* pIPLC = dynamic_cast<IPLC*>(pIBaseClass);
		if (!pIPLC)
			throw ELibS7NetInterfaceException(LIBS7NET_ERROR_INVALIDCAST);
		
		pIPLC->WriteBytes(nDB, nOffset, nBytesBufferSize, pBytesBuffer);

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}
		return LIBS7NET_SUCCESS;
	}
	catch (ELibS7NetInterfaceException & Exception) {
		return handleLibS7NetException(pIBaseClass, Exception, pJournalEntry.get());
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException, pJournalEntry.get());
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass, pJournalEntry.get());
	}
}

LibS7NetResult libs7net_plc_readbytes(LibS7Net_PLC pPLC, LibS7Net_uint32 nDB, LibS7Net_uint32 nOffset, LibS7Net_uint32 nCount, LibS7Net_PLCReadData * pReadData)
{
	IBase* pIBaseClass = (IBase *)pPLC;

	PLibS7NetInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pPLC, "PLC", "ReadBytes");
			pJournalEntry->addUInt32Parameter("DB", nDB);
			pJournalEntry->addUInt32Parameter("Offset", nOffset);
			pJournalEntry->addUInt32Parameter("Count", nCount);
		}
		if (pReadData == nullptr)
			throw ELibS7NetInterfaceException (LIBS7NET_ERROR_INVALIDPARAM);
		IBase* pBaseReadData(nullptr);
		IPLC* pIPLC = dynamic_cast<IPLC*>(pIBaseClass);
		if (!pIPLC)
			throw ELibS7NetInterfaceException(LIBS7NET_ERROR_INVALIDCAST);
		
		pBaseReadData = pIPLC->ReadBytes(nDB, nOffset, nCount);

		*pReadData = (IBase*)(pBaseReadData);
		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addHandleResult("ReadData", *pReadData);
			pJournalEntry->writeSuccess();
		}
		return LIBS7NET_SUCCESS;
	}
	catch (ELibS7NetInterfaceException & Exception) {
		return handleLibS7NetException(pIBaseClass, Exception, pJournalEntry.get());
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException, pJournalEntry.get());
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass, pJournalEntry.get());
	}
}



/*************************************************************************************************************************
 Function table lookup implementation
**************************************************************************************************************************/

LibS7NetResult LibS7Net::Impl::LibS7Net_GetProcAddress (const char * pProcName, void ** ppProcAddress)
{
	if (pProcName == nullptr)
		return LIBS7NET_ERROR_INVALIDPARAM;
	if (ppProcAddress == nullptr)
		return LIBS7NET_ERROR_INVALIDPARAM;
	*ppProcAddress = nullptr;
	std::string sProcName (pProcName);
	
	if (sProcName == "libs7net_plcreaddata_getdata") 
		*ppProcAddress = (void*) &libs7net_plcreaddata_getdata;
	if (sProcName == "libs7net_plc_connect") 
		*ppProcAddress = (void*) &libs7net_plc_connect;
	if (sProcName == "libs7net_plc_isconnected") 
		*ppProcAddress = (void*) &libs7net_plc_isconnected;
	if (sProcName == "libs7net_plc_isavailable") 
		*ppProcAddress = (void*) &libs7net_plc_isavailable;
	if (sProcName == "libs7net_plc_getslot") 
		*ppProcAddress = (void*) &libs7net_plc_getslot;
	if (sProcName == "libs7net_plc_getrack") 
		*ppProcAddress = (void*) &libs7net_plc_getrack;
	if (sProcName == "libs7net_plc_getcputype") 
		*ppProcAddress = (void*) &libs7net_plc_getcputype;
	if (sProcName == "libs7net_plc_getipaddress") 
		*ppProcAddress = (void*) &libs7net_plc_getipaddress;
	if (sProcName == "libs7net_plc_writebytes") 
		*ppProcAddress = (void*) &libs7net_plc_writebytes;
	if (sProcName == "libs7net_plc_readbytes") 
		*ppProcAddress = (void*) &libs7net_plc_readbytes;
	if (sProcName == "libs7net_getversion") 
		*ppProcAddress = (void*) &libs7net_getversion;
	if (sProcName == "libs7net_getlasterror") 
		*ppProcAddress = (void*) &libs7net_getlasterror;
	if (sProcName == "libs7net_acquireinstance") 
		*ppProcAddress = (void*) &libs7net_acquireinstance;
	if (sProcName == "libs7net_releaseinstance") 
		*ppProcAddress = (void*) &libs7net_releaseinstance;
	if (sProcName == "libs7net_getsymbollookupmethod") 
		*ppProcAddress = (void*) &libs7net_getsymbollookupmethod;
	if (sProcName == "libs7net_createplc") 
		*ppProcAddress = (void*) &libs7net_createplc;
	
	if (*ppProcAddress == nullptr) 
		return LIBS7NET_ERROR_COULDNOTFINDLIBRARYEXPORT;
	return LIBS7NET_SUCCESS;
}

/*************************************************************************************************************************
 Global functions implementation
**************************************************************************************************************************/
LibS7NetResult libs7net_getversion(LibS7Net_uint32 * pMajor, LibS7Net_uint32 * pMinor, LibS7Net_uint32 * pMicro)
{
	IBase* pIBaseClass = nullptr;

	PLibS7NetInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginStaticFunction("GetVersion");
		}
		if (!pMajor)
			throw ELibS7NetInterfaceException (LIBS7NET_ERROR_INVALIDPARAM);
		if (!pMinor)
			throw ELibS7NetInterfaceException (LIBS7NET_ERROR_INVALIDPARAM);
		if (!pMicro)
			throw ELibS7NetInterfaceException (LIBS7NET_ERROR_INVALIDPARAM);
		CWrapper::GetVersion(*pMajor, *pMinor, *pMicro);

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addUInt32Result("Major", *pMajor);
			pJournalEntry->addUInt32Result("Minor", *pMinor);
			pJournalEntry->addUInt32Result("Micro", *pMicro);
			pJournalEntry->writeSuccess();
		}
		return LIBS7NET_SUCCESS;
	}
	catch (ELibS7NetInterfaceException & Exception) {
		return handleLibS7NetException(pIBaseClass, Exception, pJournalEntry.get());
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException, pJournalEntry.get());
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass, pJournalEntry.get());
	}
}

LibS7NetResult libs7net_getlasterror(LibS7Net_Base pInstance, const LibS7Net_uint32 nErrorMessageBufferSize, LibS7Net_uint32* pErrorMessageNeededChars, char * pErrorMessageBuffer, bool * pHasError)
{
	IBase* pIBaseClass = nullptr;

	PLibS7NetInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginStaticFunction("GetLastError");
			pJournalEntry->addHandleParameter("Instance", pInstance);
		}
		if ( (!pErrorMessageBuffer) && !(pErrorMessageNeededChars) )
			throw ELibS7NetInterfaceException (LIBS7NET_ERROR_INVALIDPARAM);
		if (pHasError == nullptr)
			throw ELibS7NetInterfaceException (LIBS7NET_ERROR_INVALIDPARAM);
		IBase* pIBaseClassInstance = (IBase *)pInstance;
		IBase* pIInstance = dynamic_cast<IBase*>(pIBaseClassInstance);
		if (!pIInstance)
			throw ELibS7NetInterfaceException (LIBS7NET_ERROR_INVALIDCAST);
		
		std::string sErrorMessage("");
		*pHasError = CWrapper::GetLastError(pIInstance, sErrorMessage);

		if (pErrorMessageNeededChars)
			*pErrorMessageNeededChars = (LibS7Net_uint32) (sErrorMessage.size()+1);
		if (pErrorMessageBuffer) {
			if (sErrorMessage.size() >= nErrorMessageBufferSize)
				throw ELibS7NetInterfaceException (LIBS7NET_ERROR_BUFFERTOOSMALL);
			for (size_t iErrorMessage = 0; iErrorMessage < sErrorMessage.size(); iErrorMessage++)
				pErrorMessageBuffer[iErrorMessage] = sErrorMessage[iErrorMessage];
			pErrorMessageBuffer[sErrorMessage.size()] = 0;
		}
		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addStringResult("ErrorMessage", sErrorMessage.c_str());
			pJournalEntry->addBooleanResult("HasError", *pHasError);
			pJournalEntry->writeSuccess();
		}
		return LIBS7NET_SUCCESS;
	}
	catch (ELibS7NetInterfaceException & Exception) {
		return handleLibS7NetException(pIBaseClass, Exception, pJournalEntry.get());
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException, pJournalEntry.get());
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass, pJournalEntry.get());
	}
}

LibS7NetResult libs7net_acquireinstance(LibS7Net_Base pInstance)
{
	IBase* pIBaseClass = nullptr;

	PLibS7NetInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginStaticFunction("AcquireInstance");
			pJournalEntry->addHandleParameter("Instance", pInstance);
		}
		IBase* pIBaseClassInstance = (IBase *)pInstance;
		IBase* pIInstance = dynamic_cast<IBase*>(pIBaseClassInstance);
		if (!pIInstance)
			throw ELibS7NetInterfaceException (LIBS7NET_ERROR_INVALIDCAST);
		
		CWrapper::AcquireInstance(pIInstance);

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}
		return LIBS7NET_SUCCESS;
	}
	catch (ELibS7NetInterfaceException & Exception) {
		return handleLibS7NetException(pIBaseClass, Exception, pJournalEntry.get());
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException, pJournalEntry.get());
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass, pJournalEntry.get());
	}
}

LibS7NetResult libs7net_releaseinstance(LibS7Net_Base pInstance)
{
	IBase* pIBaseClass = nullptr;

	PLibS7NetInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginStaticFunction("ReleaseInstance");
			pJournalEntry->addHandleParameter("Instance", pInstance);
		}
		IBase* pIBaseClassInstance = (IBase *)pInstance;
		IBase* pIInstance = dynamic_cast<IBase*>(pIBaseClassInstance);
		if (!pIInstance)
			throw ELibS7NetInterfaceException (LIBS7NET_ERROR_INVALIDCAST);
		
		CWrapper::ReleaseInstance(pIInstance);

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}
		return LIBS7NET_SUCCESS;
	}
	catch (ELibS7NetInterfaceException & Exception) {
		return handleLibS7NetException(pIBaseClass, Exception, pJournalEntry.get());
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException, pJournalEntry.get());
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass, pJournalEntry.get());
	}
}

LibS7NetResult libs7net_getsymbollookupmethod(LibS7Net_pvoid * pSymbolLookupMethod)
{
	IBase* pIBaseClass = nullptr;

	PLibS7NetInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginStaticFunction("GetSymbolLookupMethod");
		}
		if (pSymbolLookupMethod == nullptr)
			throw ELibS7NetInterfaceException (LIBS7NET_ERROR_INVALIDPARAM);
		*pSymbolLookupMethod = (void*)&LibS7Net::Impl::LibS7Net_GetProcAddress;
		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addPointerResult("SymbolLookupMethod", *pSymbolLookupMethod);
			pJournalEntry->writeSuccess();
		}
		return LIBS7NET_SUCCESS;
	}
	catch (ELibS7NetInterfaceException & Exception) {
		return handleLibS7NetException(pIBaseClass, Exception, pJournalEntry.get());
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException, pJournalEntry.get());
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass, pJournalEntry.get());
	}
}

LibS7NetResult libs7net_createplc(const char * pCOMHost, LibS7Net_PLC * pPLCInstance)
{
	IBase* pIBaseClass = nullptr;

	PLibS7NetInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginStaticFunction("CreatePLC");
			pJournalEntry->addStringParameter("COMHost", pCOMHost);
		}
		if (pCOMHost == nullptr)
			throw ELibS7NetInterfaceException (LIBS7NET_ERROR_INVALIDPARAM);
		if (pPLCInstance == nullptr)
			throw ELibS7NetInterfaceException (LIBS7NET_ERROR_INVALIDPARAM);
		std::string sCOMHost(pCOMHost);
		IBase* pBasePLCInstance(nullptr);
		pBasePLCInstance = CWrapper::CreatePLC(sCOMHost);

		*pPLCInstance = (IBase*)(pBasePLCInstance);
		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addHandleResult("PLCInstance", *pPLCInstance);
			pJournalEntry->writeSuccess();
		}
		return LIBS7NET_SUCCESS;
	}
	catch (ELibS7NetInterfaceException & Exception) {
		return handleLibS7NetException(pIBaseClass, Exception, pJournalEntry.get());
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException, pJournalEntry.get());
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass, pJournalEntry.get());
	}
}


