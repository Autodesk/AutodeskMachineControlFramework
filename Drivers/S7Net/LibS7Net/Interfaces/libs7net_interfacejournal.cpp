/*++

Copyright (C) 2020 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.8.0-develop.

Abstract: This is an autogenerated C++ implementation file in order to allow easy
development of S7Net Library Wrapper. It provides an automatic Journaling mechanism for the library implementation.

Interface version: 1.2.0

*/


#include <string>
#include <sstream>
#include <iomanip>

#include "libs7net_interfacejournal.hpp"
#include "libs7net_interfaceexception.hpp"


std::string LibS7NetHandleToHex (LibS7NetHandle pHandle)
{
	std::stringstream stream;
	stream << std::setfill('0') << std::setw(sizeof(LibS7Net_uint64) * 2)
		<< std::hex << (LibS7Net_uint64) pHandle;
	return stream.str();
}

CLibS7NetInterfaceJournalEntry::CLibS7NetInterfaceJournalEntry(CLibS7NetInterfaceJournal * pJournal, std::string sClassName, std::string sMethodName, LibS7NetHandle pInstanceHandle)
	: m_pJournal(pJournal), m_ErrorCode(LIBS7NET_SUCCESS), m_sClassName(sClassName), m_sMethodName(sMethodName), m_nInitTimeStamp(0), m_nFinishTimeStamp(0)
{
	if (pJournal == nullptr)
		throw ELibS7NetInterfaceException(LIBS7NET_ERROR_INVALIDPARAM);
	m_nInitTimeStamp = m_pJournal->getTimeStamp ();
	m_sInstanceHandle = LibS7NetHandleToHex (pInstanceHandle);
}

CLibS7NetInterfaceJournalEntry::~CLibS7NetInterfaceJournalEntry()
{
}

void CLibS7NetInterfaceJournalEntry::addParameter(const std::string & sName, const std::string & sParameterType, const std::string & sParameterValue)
{
	m_sParameters.push_back(std::make_pair(std::make_pair(sName, sParameterType), sParameterValue));
}

void CLibS7NetInterfaceJournalEntry::addResult(const std::string & sName, const std::string & sResultType, const std::string & sResultValue)
{
	m_sResultValues.push_back(std::make_pair(std::make_pair(sName, sResultType), sResultValue));
}

std::string CLibS7NetInterfaceJournalEntry::getXMLString()
{
	std::stringstream sStream;
	LibS7Net_uint64 nDuration = 0;

	if (m_nFinishTimeStamp > m_nInitTimeStamp)
		nDuration = m_nFinishTimeStamp - m_nInitTimeStamp;

	sStream << "    <entry";
	if (m_sClassName != "")
		sStream << " class=\"" << m_sClassName << "\"";
	sStream << " method=\"" << m_sMethodName << "\"";
	if (m_ErrorCode != LIBS7NET_SUCCESS)
		sStream << " errorcode=\"" << m_ErrorCode << "\"";
	sStream << " timestamp=\"" << m_nInitTimeStamp << "\" duration=\"" << nDuration << "\">\n";

	if (m_sClassName != "")
		sStream << "        <instance handle=\"" << m_sInstanceHandle << "\" />\n";

	auto iParamIter = m_sParameters.begin();
	while (iParamIter != m_sParameters.end()) {
		sStream << "        <parameter name=\"" << iParamIter->first.first << "\" type=\"" << iParamIter->first.second << "\" value=\"" << iParamIter->second <<"\" />\n";
		iParamIter++;
	}

	auto iResultIter = m_sResultValues.begin();
	while (iResultIter != m_sResultValues.end()) {
		sStream << "        <result name=\"" << iResultIter->first.first << "\" type=\"" << iResultIter->first.second << "\" value=\"" << iResultIter->second << "\" />\n";
		iResultIter++;
	}

	sStream << "    </entry>\n";
	return sStream.str ();
}

void CLibS7NetInterfaceJournalEntry::writeSuccess()
{
	writeError(LIBS7NET_SUCCESS);
}

void CLibS7NetInterfaceJournalEntry::writeError(LibS7NetResult nErrorCode)
{
	m_ErrorCode = nErrorCode;
	m_nFinishTimeStamp = m_pJournal->getTimeStamp();
	m_pJournal->writeEntry(this);
}

void CLibS7NetInterfaceJournalEntry::addBooleanParameter(const std::string & sName, const bool bValue)
{
	addParameter (sName, "bool", std::to_string((int)bValue));
}

void CLibS7NetInterfaceJournalEntry::addUInt8Parameter(const std::string & sName, const LibS7Net_uint8 nValue)
{
	addParameter(sName, "uint8", std::to_string(nValue));
}

void CLibS7NetInterfaceJournalEntry::addUInt16Parameter(const std::string & sName, const LibS7Net_uint16 nValue)
{
	addParameter(sName, "uint16", std::to_string(nValue));
}

void CLibS7NetInterfaceJournalEntry::addUInt32Parameter(const std::string & sName, const LibS7Net_uint32 nValue)
{
	addParameter(sName, "uint32", std::to_string(nValue));
}

void CLibS7NetInterfaceJournalEntry::addUInt64Parameter(const std::string & sName, const LibS7Net_uint64 nValue)
{
	addParameter(sName, "uint64", std::to_string(nValue));
}

void CLibS7NetInterfaceJournalEntry::addInt8Parameter(const std::string & sName, const LibS7Net_int8 nValue)
{
	addParameter(sName, "int8", std::to_string(nValue));
}

void CLibS7NetInterfaceJournalEntry::addInt16Parameter(const std::string & sName, const LibS7Net_int16 nValue)
{
	addParameter(sName, "int16", std::to_string(nValue));
}

void CLibS7NetInterfaceJournalEntry::addInt32Parameter(const std::string & sName, const LibS7Net_int32 nValue)
{
	addParameter(sName, "uint32", std::to_string(nValue));
}

void CLibS7NetInterfaceJournalEntry::addInt64Parameter(const std::string & sName, const LibS7Net_int64 nValue)
{
	addParameter(sName, "int64", std::to_string(nValue));
}

void CLibS7NetInterfaceJournalEntry::addSingleParameter(const std::string & sName,  const LibS7Net_single fValue)
{
	addParameter(sName, "single", std::to_string(fValue));
}

void CLibS7NetInterfaceJournalEntry::addDoubleParameter(const std::string & sName, const LibS7Net_double dValue)
{
	addParameter(sName, "double", std::to_string(dValue));
}
void CLibS7NetInterfaceJournalEntry::addPointerParameter(const std::string & sName, const LibS7Net_pvoid pValue)
{
	addParameter(sName, "pointer", std::to_string(reinterpret_cast<const LibS7Net_uint64>(pValue)));
}

void CLibS7NetInterfaceJournalEntry::addStringParameter(const std::string & sName, const char * pValue)
{
	if (pValue != nullptr) {
		addParameter(sName, "string", pValue);
	}
	else {
		addParameter(sName, "nullstring", "");
	}
}

void CLibS7NetInterfaceJournalEntry::addHandleParameter(const std::string & sName, const LibS7NetHandle pHandle)
{
	addParameter(sName, "handle", LibS7NetHandleToHex(pHandle));
}

void CLibS7NetInterfaceJournalEntry::addEnumParameter(const std::string & sName, const std::string & sEnumType, const LibS7Net_int32 nValue)
{
	addParameter(sName, "enum" + sEnumType, std::to_string(nValue));
}

void CLibS7NetInterfaceJournalEntry::addBooleanResult(const std::string & sName, const bool bValue)
{
	addResult(sName, "bool", std::to_string((int)bValue));
}

void CLibS7NetInterfaceJournalEntry::addUInt8Result(const std::string & sName, const LibS7Net_uint8 nValue)
{
	addResult(sName, "uint8", std::to_string(nValue));
}

void CLibS7NetInterfaceJournalEntry::addUInt16Result(const std::string & sName, const LibS7Net_uint16 nValue)
{
	addResult(sName, "uint16", std::to_string(nValue));
}

void CLibS7NetInterfaceJournalEntry::addUInt32Result(const std::string & sName, const LibS7Net_uint32 nValue)
{
	addResult(sName, "uint32", std::to_string(nValue));
}

void CLibS7NetInterfaceJournalEntry::addUInt64Result(const std::string & sName, const LibS7Net_uint64 nValue)
{
	addResult(sName, "uint64", std::to_string(nValue));
}

void CLibS7NetInterfaceJournalEntry::addInt8Result(const std::string & sName, const LibS7Net_int8 nValue)
{
	addResult(sName, "int8", std::to_string(nValue));
}

void CLibS7NetInterfaceJournalEntry::addInt16Result(const std::string & sName, const LibS7Net_int16 nValue)
{
	addResult(sName, "int16", std::to_string(nValue));
}

void CLibS7NetInterfaceJournalEntry::addInt32Result(const std::string & sName, const LibS7Net_int32 nValue)
{
	addResult(sName, "uint32", std::to_string(nValue));
}

void CLibS7NetInterfaceJournalEntry::addInt64Result(const std::string & sName, const LibS7Net_int64 nValue)
{
	addResult(sName, "int64", std::to_string(nValue));
}

void CLibS7NetInterfaceJournalEntry::addSingleResult(const std::string & sName,  const LibS7Net_single fValue)
{
	addResult(sName, "single", std::to_string(fValue));
}

void CLibS7NetInterfaceJournalEntry::addDoubleResult(const std::string & sName, const LibS7Net_double dValue)
{
	addResult(sName, "double", std::to_string(dValue));
}

void CLibS7NetInterfaceJournalEntry::addPointerResult(const std::string & sName, const LibS7Net_pvoid pValue)
{
	addResult(sName, "pointer", std::to_string(reinterpret_cast<const LibS7Net_uint64>(pValue)));
}

void CLibS7NetInterfaceJournalEntry::addStringResult(const std::string & sName, const char * pValue)
{
	if (pValue != nullptr) {
		addResult(sName, "string", pValue);
	}
	else {
		addResult(sName, "nullstring", "");
	}
}

void CLibS7NetInterfaceJournalEntry::addHandleResult(const std::string & sName, const LibS7NetHandle pHandle)
{
	addResult(sName, "handle", LibS7NetHandleToHex(pHandle));
}

void CLibS7NetInterfaceJournalEntry::addEnumResult(const std::string & sName, const std::string & sEnumType, const LibS7Net_int32 nValue)
{
	addResult(sName, "enum" + sEnumType, std::to_string(nValue));
}


CLibS7NetInterfaceJournal::CLibS7NetInterfaceJournal (const std::string & sFileName)
	: m_sFileName (sFileName)
{
	m_StartTime = std::chrono::high_resolution_clock::now();
	m_Stream.open (sFileName, std::ios::out);
	m_Stream << "<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n";
	m_Stream << "<journal library=\"LibS7Net\" version=\"1.2.0\" xmlns=\"http://schemas.autodesk.com/components/LibS7Net/1.2.0\">\n";
	m_Stream << "\n";

}

CLibS7NetInterfaceJournal::~CLibS7NetInterfaceJournal ()
{
	m_Stream << "</journal>\n";
}

PLibS7NetInterfaceJournalEntry CLibS7NetInterfaceJournal::beginClassMethod(const LibS7NetHandle pHandle, const std::string & sClassName, const std::string & sMethodName)
{
	return std::make_shared<CLibS7NetInterfaceJournalEntry>(this, sClassName, sMethodName, pHandle);
}

PLibS7NetInterfaceJournalEntry CLibS7NetInterfaceJournal::beginStaticFunction(const std::string & sMethodName)
{
	return std::make_shared<CLibS7NetInterfaceJournalEntry>(this, "", sMethodName, nullptr);
}

void CLibS7NetInterfaceJournal::writeEntry (CLibS7NetInterfaceJournalEntry * pEntry)
{
	if (pEntry == nullptr)
		throw ELibS7NetInterfaceException (LIBS7NET_ERROR_INVALIDPARAM);

	std::string sXMLString = pEntry->getXMLString();
	m_Mutex.lock();
	try {
		m_Stream << sXMLString;
		m_Stream << "\n";

		m_Mutex.unlock();
	}
	catch (...) {
		m_Mutex.unlock();
	}
}

LibS7Net_uint64 CLibS7NetInterfaceJournal::getTimeStamp ()
{
	auto currentTime = std::chrono::high_resolution_clock::now();
	if (m_StartTime < currentTime) {
		auto duration = currentTime - m_StartTime;
		auto milliSeconds = std::chrono::duration_cast<std::chrono::milliseconds> (duration);

		return (LibS7Net_uint64) milliSeconds.count();
	}
	else {
		return 0;
	}

}

