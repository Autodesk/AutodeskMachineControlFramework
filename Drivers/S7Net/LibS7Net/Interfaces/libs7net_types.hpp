/*++

Copyright (C) 2020 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.8.0-develop.

Abstract: This is an autogenerated C++-Header file with basic types in
order to allow an easy use of S7Net Library Wrapper

Interface version: 1.2.0

*/

#ifndef __LIBS7NET_TYPES_HEADER_CPP
#define __LIBS7NET_TYPES_HEADER_CPP


/*************************************************************************************************************************
 Scalar types definition
**************************************************************************************************************************/

#ifdef LIBS7NET_USELEGACYINTEGERTYPES

typedef unsigned char LibS7Net_uint8;
typedef unsigned short LibS7Net_uint16 ;
typedef unsigned int LibS7Net_uint32;
typedef unsigned long long LibS7Net_uint64;
typedef char LibS7Net_int8;
typedef short LibS7Net_int16;
typedef int LibS7Net_int32;
typedef long long LibS7Net_int64;

#else // LIBS7NET_USELEGACYINTEGERTYPES

#include <stdint.h>

typedef uint8_t LibS7Net_uint8;
typedef uint16_t LibS7Net_uint16;
typedef uint32_t LibS7Net_uint32;
typedef uint64_t LibS7Net_uint64;
typedef int8_t LibS7Net_int8;
typedef int16_t LibS7Net_int16;
typedef int32_t LibS7Net_int32;
typedef int64_t LibS7Net_int64 ;

#endif // LIBS7NET_USELEGACYINTEGERTYPES

typedef float LibS7Net_single;
typedef double LibS7Net_double;

/*************************************************************************************************************************
 General type definitions
**************************************************************************************************************************/

typedef LibS7Net_int32 LibS7NetResult;
typedef void * LibS7NetHandle;
typedef void * LibS7Net_pvoid;

/*************************************************************************************************************************
 Version for LibS7Net
**************************************************************************************************************************/

#define LIBS7NET_VERSION_MAJOR 1
#define LIBS7NET_VERSION_MINOR 2
#define LIBS7NET_VERSION_MICRO 0
#define LIBS7NET_VERSION_PRERELEASEINFO ""
#define LIBS7NET_VERSION_BUILDINFO ""

/*************************************************************************************************************************
 Error constants for LibS7Net
**************************************************************************************************************************/

#define LIBS7NET_SUCCESS 0
#define LIBS7NET_ERROR_NOTIMPLEMENTED 1001 /** functionality not implemented */
#define LIBS7NET_ERROR_INVALIDPARAM 1002 /** an invalid parameter was passed */
#define LIBS7NET_ERROR_INVALIDCAST 1003 /** a type cast failed */
#define LIBS7NET_ERROR_BUFFERTOOSMALL 1004 /** a provided buffer is too small */
#define LIBS7NET_ERROR_GENERICEXCEPTION 1005 /** a generic exception occurred */
#define LIBS7NET_ERROR_COULDNOTLOADLIBRARY 1006 /** the library could not be loaded */
#define LIBS7NET_ERROR_COULDNOTFINDLIBRARYEXPORT 1007 /** a required exported symbol could not be found in the library */
#define LIBS7NET_ERROR_INCOMPATIBLEBINARYVERSION 1008 /** the version of the binary interface does not match the bindings interface */
#define LIBS7NET_ERROR_NOTCONNECTED 1009 /** PLC is not connected */
#define LIBS7NET_ERROR_COMNOTINITIALIZED 1010 /** COM is not initialized */
#define LIBS7NET_ERROR_COULDNOTINITIALIZECOM 1011 /** Could not initialize COM */
#define LIBS7NET_ERROR_WRONGCPUTYPE 1 /** Wrong type of CPU. */
#define LIBS7NET_ERROR_CONNECTIONERROR 2 /** Connection error. */
#define LIBS7NET_ERROR_IPADDRESSNOTAVAILABLE 3 /** IP Address not available. */
#define LIBS7NET_ERROR_WRONGVARFORMAT 10 /** Wrong format of the variable. */
#define LIBS7NET_ERROR_WRONGNUMBERRECEIVEDBYTES 11 /** Wrong number of received bytes. */
#define LIBS7NET_ERROR_SENDDATA 20 /** Error on send data. */
#define LIBS7NET_ERROR_READDATA 30 /** Error on read data. */
#define LIBS7NET_ERROR_WRITEDATA 50 /** Error on write data. */

/*************************************************************************************************************************
 Error strings for LibS7Net
**************************************************************************************************************************/

inline const char * LIBS7NET_GETERRORSTRING (LibS7NetResult nErrorCode) {
  switch (nErrorCode) {
    case LIBS7NET_SUCCESS: return "no error";
    case LIBS7NET_ERROR_NOTIMPLEMENTED: return "functionality not implemented";
    case LIBS7NET_ERROR_INVALIDPARAM: return "an invalid parameter was passed";
    case LIBS7NET_ERROR_INVALIDCAST: return "a type cast failed";
    case LIBS7NET_ERROR_BUFFERTOOSMALL: return "a provided buffer is too small";
    case LIBS7NET_ERROR_GENERICEXCEPTION: return "a generic exception occurred";
    case LIBS7NET_ERROR_COULDNOTLOADLIBRARY: return "the library could not be loaded";
    case LIBS7NET_ERROR_COULDNOTFINDLIBRARYEXPORT: return "a required exported symbol could not be found in the library";
    case LIBS7NET_ERROR_INCOMPATIBLEBINARYVERSION: return "the version of the binary interface does not match the bindings interface";
    case LIBS7NET_ERROR_NOTCONNECTED: return "PLC is not connected";
    case LIBS7NET_ERROR_COMNOTINITIALIZED: return "COM is not initialized";
    case LIBS7NET_ERROR_COULDNOTINITIALIZECOM: return "Could not initialize COM";
    case LIBS7NET_ERROR_WRONGCPUTYPE: return "Wrong type of CPU.";
    case LIBS7NET_ERROR_CONNECTIONERROR: return "Connection error.";
    case LIBS7NET_ERROR_IPADDRESSNOTAVAILABLE: return "IP Address not available.";
    case LIBS7NET_ERROR_WRONGVARFORMAT: return "Wrong format of the variable.";
    case LIBS7NET_ERROR_WRONGNUMBERRECEIVEDBYTES: return "Wrong number of received bytes.";
    case LIBS7NET_ERROR_SENDDATA: return "Error on send data.";
    case LIBS7NET_ERROR_READDATA: return "Error on read data.";
    case LIBS7NET_ERROR_WRITEDATA: return "Error on write data.";
    default: return "unknown error";
  }
}

/*************************************************************************************************************************
 Declaration of handle classes 
**************************************************************************************************************************/

typedef LibS7NetHandle LibS7Net_Base;
typedef LibS7NetHandle LibS7Net_PLCReadData;
typedef LibS7NetHandle LibS7Net_PLC;

namespace LibS7Net {

  /*************************************************************************************************************************
   Declaration of enums
  **************************************************************************************************************************/
  
  enum class eCPUType : LibS7Net_int32 {
    S7200 = 0,
    S7300 = 10,
    S7400 = 20,
    S71200 = 30,
    S71500 = 40
  };
  
} // namespace LibS7Net;

// define legacy C-names for enums, structs and function types
typedef LibS7Net::eCPUType eLibS7NetCPUType;

#endif // __LIBS7NET_TYPES_HEADER_CPP
