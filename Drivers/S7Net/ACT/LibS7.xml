<?xml version="1.0" encoding="UTF-8"?>
<component xmlns="http://schemas.autodesk.com/netfabb/automaticcomponenttoolkit/2018" 
	libraryname="S7Net Library Wrapper" namespace="LibS7Net" copyright="Autodesk Inc." year="2020" basename="libs7net"
	version="1.2.0">
	<license>
		<line value="All rights reserved." />
		<line value="" />
		<line value="Redistribution and use in source and binary forms, with or without" />
		<line value="modification, are permitted provided that the following conditions are met:" />
		<line value="    * Redistributions of source code must retain the above copyright" />
		<line value="      notice, this list of conditions and the following disclaimer." />
		<line value="    * Redistributions in binary form must reproduce the above copyright" />
		<line value="      notice, this list of conditions and the following disclaimer in the" />
		<line value="      documentation and/or other materials provided with the distribution." />
		<line value="    * Neither the name of the Autodesk Inc. nor the" />
		<line value="      names of its contributors may be used to endorse or promote products" />
		<line value="      derived from this software without specific prior written permission." />
		<line value="" />
		<line value="THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND" />
		<line value="ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED" />
		<line value="WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE" />
		<line value="DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY" />
		<line value="DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES" />
		<line value="(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;" />
		<line value="LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND" />
		<line value="ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT" />
		<line value="(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS" />
		<line value="SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." />
		<line value="" />
	</license>
	
	<bindings>
		<binding language="CppDynamic" indentation="tabs" />
	</bindings>
	<implementations>
		<implementation language="Cpp" indentation="tabs"/>
	</implementations>
	
	<errors>
			
		<error name="NOTIMPLEMENTED" code="1001" description="functionality not implemented" />
		<error name="INVALIDPARAM" code="1002" description="an invalid parameter was passed" />
		<error name="INVALIDCAST" code="1003" description="a type cast failed" />
		<error name="BUFFERTOOSMALL" code="1004" description="a provided buffer is too small" />
		<error name="GENERICEXCEPTION" code="1005" description="a generic exception occurred" />
		<error name="COULDNOTLOADLIBRARY" code="1006" description="the library could not be loaded" />
		<error name="COULDNOTFINDLIBRARYEXPORT" code="1007" description="a required exported symbol could not be found in the library" />
		<error name="INCOMPATIBLEBINARYVERSION" code="1008" description="the version of the binary interface does not match the bindings interface" />
		<error name="NOTCONNECTED" code="1009" description="PLC is not connected" />
				
		<error name="WRONGCPUTYPE" code="1" description="Wrong type of CPU." />
		<error name="CONNECTIONERROR" code="2" description="Connection error." />
		<error name="IPADDRESSNOTAVAILABLE" code="3" description="IP Address not available." />
		<error name="WRONGVARFORMAT" code="10" description="Wrong format of the variable." />
		<error name="WRONGNUMBERRECEIVEDBYTES" code="11" description="Wrong number of received bytes." />
		<error name="SENDDATA" code="20" description="Error on send data." />
		<error name="READDATA" code="30" description="Error on read data." />
		<error name="WRITEDATA" code="50" description="Error on write data." />
				
	</errors>
	
	<enum name="CPUType">
		<option name="S7200" value="0" />
		<option name="S7300" value="10" />
		<option name="S7400" value="20" />
		<option name="S71200" value="30" />
		<option name="S71500" value="40" />
	</enum>	
	  
	
		
	<class name="Base" clsid="1c0b49dc-9be4-4157-97b4-79225aad7907" iid="c27effb2-951b-4af9-bb47-faeabbde5598">
	</class>
	

	<class name="PLCReadData" parent="Base" clsid="cb767ba1-e821-4849-8b81-9852f5053384" iid="1c670d16-177d-44b2-b9e5-b264520178d6">

		<method name="GetData" description="Returns the binary data.">
			<param name="Data" type="basicarray" class="uint8" pass="out" description="Binary data." />
		</method>

	
	</class>

	<class name="PLC" parent="Base" clsid="0cdeecf2-4252-4a1a-ae01-c98a9b02c78f" iid="c7adb662-c099-41c1-831d-0f11baa29640">
						
		<method name="Connect" description="Connects to a PLC Instance">
			<param name="CPUType" type="enum" class="CPUType" pass="in" description="CPU type to connect to." />		
			<param name="IP" type="string" pass="in" description="IP address to connect to." />
			<param name="Rack" type="uint32" pass="in" description="Rack to connect to." />
			<param name="Slot" type="uint32" pass="in" description="Slot to connect to." />
		</method>
		
		<method name="IsConnected" description="Checks if the socket is connected and polls the other peer (the plc) to see if it is connected.">
			<param name="Connected" type="bool" pass="return" description="Flag if the socket is connected." />
		</method>
		
		<method name="IsAvailable" description="Returns true if a connection to the plc can be established.">
			<param name="Connected" type="bool" pass="return" description="Flag if the socket is connected." />
		</method>

		<method name="GetSlot" description="Returns slot of the CPU of the plc.">
			<param name="Slot" type="uint32" pass="return" description="Slot of the CPU of the plc." />
		</method>
		
		<method name="GetRack" description="Returns rack of the plc.">
			<param name="Slot" type="uint32" pass="return" description="Rack of the plc." />
		</method>

		<method name="GetCPUType" description="Returns Cpu type of the plc.">
			<param name="CPUType" type="enum" class="CPUType" pass="return" description="Cpu type of the plc." />
		</method>
		
		<method name="GetIPAddress" description="Returns Ip address of the plc.">
			<param name="IPAddress" type="string" pass="return" description="Ip address of the plc." />
		</method>

		<method name="WriteBytes" description="Writes bytes into a PLC DB.">
			<param name="DB" type="uint32" pass="in" description="ID of DB." />
			<param name="Offset" type="uint32" pass="in" description="Address to write into." /> 
			<param name="Bytes" type="basicarray" class="uint8" pass="in" description="ByteArray to write." />
		</method>

		<method name="ReadBytes" description="Read bytes from a PLC DB.">
			<param name="DB" type="uint32" pass="in" description="ID of DB." />
			<param name="Offset" type="uint32" pass="in" description="Address to write into." /> 
			<param name="Count" type="uint32" pass="in" description="Number of bytes to read." /> 
			<param name="ReadData" type="class" class="PLCReadData" pass="return" description="Read Data Instance." />
		</method>
				
	</class>

	<global baseclassname="Base" stringoutclassname="Base" acquiremethod="AcquireInstance"
		releasemethod="ReleaseInstance" versionmethod="GetVersion" errormethod="GetLastError" journalmethod="SetJournal"
		clsid="eb056ea7-29d5-480e-a351-c95a544dcc95" iid="10c868f6-6fca-47fb-b7aa-0160193ba204"
		>
		<method name="GetVersion" description = "retrieves the binary version of this library.">
			<param name="Major" type="uint32" pass="out" description="returns the major version of this library" />
			<param name="Minor" type="uint32" pass="out" description="returns the minor version of this library" />
			<param name="Micro" type="uint32" pass="out" description="returns the micro version of this library" />
		</method>
		<method name="GetLastError" description="Returns the last error recorded on this object">
			<param name="Instance" type="class" class="Base" pass="in" description="Instance Handle" />
			<param name="ErrorMessage" type="string" pass="out" description="Message of the last error" />
			<param name="HasError" type="bool" pass="return" description="Is there a last error to query" />
		</method>
		<method name="AcquireInstance" description="Acquire shared ownership of an Instance">
			<param name="Instance" type="class" class="Base" pass="in" description="Instance Handle" />
		</method>
		<method name="ReleaseInstance" description="Releases shared ownership of an Instance">
			<param name="Instance" type="class" class="Base" pass="in" description="Instance Handle" />
		</method>

		<method name="CreatePLC" description="Returns a PLC instance">
			<param name="Value" type="class" class="PLC" pass="return" description="PLC Instance" />
		</method>

	</global>
</component>
