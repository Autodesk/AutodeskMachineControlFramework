/*++

Copyright (C) 2020 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.8.0-develop.

Abstract: This is an autogenerated C++-Header file in order to allow an easy
 use of MC Driver S7Net 2.0

Interface version: 2.0.0

*/

#ifndef __LIBMCDRIVER_S7NET_CPPHEADER_DYNAMIC_CPP
#define __LIBMCDRIVER_S7NET_CPPHEADER_DYNAMIC_CPP

#include "libmcdriver_s7net_types.hpp"
#include "libmcdriver_s7net_dynamic.h"

#include "libmcenv_dynamic.hpp"

#ifdef _WIN32
#include <windows.h>
#else // _WIN32
#include <dlfcn.h>
#endif // _WIN32
#include <string>
#include <memory>
#include <vector>
#include <exception>

namespace LibMCDriver_S7Net {

/*************************************************************************************************************************
 Forward Declaration of all classes
**************************************************************************************************************************/
class CWrapper;
class CBase;
class CDriver;
class CPLCCommand;
class CDriver_S7Net;

/*************************************************************************************************************************
 Declaration of deprecated class types
**************************************************************************************************************************/
typedef CWrapper CLibMCDriver_S7NetWrapper;
typedef CBase CLibMCDriver_S7NetBase;
typedef CDriver CLibMCDriver_S7NetDriver;
typedef CPLCCommand CLibMCDriver_S7NetPLCCommand;
typedef CDriver_S7Net CLibMCDriver_S7NetDriver_S7Net;

/*************************************************************************************************************************
 Declaration of shared pointer types
**************************************************************************************************************************/
typedef std::shared_ptr<CWrapper> PWrapper;
typedef std::shared_ptr<CBase> PBase;
typedef std::shared_ptr<CDriver> PDriver;
typedef std::shared_ptr<CPLCCommand> PPLCCommand;
typedef std::shared_ptr<CDriver_S7Net> PDriver_S7Net;

/*************************************************************************************************************************
 Declaration of deprecated shared pointer types
**************************************************************************************************************************/
typedef PWrapper PLibMCDriver_S7NetWrapper;
typedef PBase PLibMCDriver_S7NetBase;
typedef PDriver PLibMCDriver_S7NetDriver;
typedef PPLCCommand PLibMCDriver_S7NetPLCCommand;
typedef PDriver_S7Net PLibMCDriver_S7NetDriver_S7Net;


/*************************************************************************************************************************
 classParam Definition
**************************************************************************************************************************/

template<class T> class classParam {
private:
	const T* m_ptr;

public:
	classParam(const T* ptr)
		: m_ptr (ptr)
	{
	}

	classParam(std::shared_ptr <T> sharedPtr)
		: m_ptr (sharedPtr.get())
	{
	}

	LibMCDriver_S7NetHandle GetHandle()
	{
		if (m_ptr != nullptr)
			return m_ptr->handle();
		return nullptr;
	}
};

/*************************************************************************************************************************
 Class ELibMCDriver_S7NetException 
**************************************************************************************************************************/
class ELibMCDriver_S7NetException : public std::exception {
protected:
	/**
	* Error code for the Exception.
	*/
	LibMCDriver_S7NetResult m_errorCode;
	/**
	* Error message for the Exception.
	*/
	std::string m_errorMessage;
	std::string m_originalErrorMessage;

public:
	/**
	* Exception Constructor.
	*/
	ELibMCDriver_S7NetException(LibMCDriver_S7NetResult errorCode, const std::string & sErrorMessage)
		: m_errorCode(errorCode), m_originalErrorMessage(sErrorMessage)
	{
		m_errorMessage = buildErrorMessage();
	}

	/**
	* Returns error code
	*/
	LibMCDriver_S7NetResult getErrorCode() const noexcept
	{
		return m_errorCode;
	}

	/**
	* Returns error message
	*/
	const char* what() const noexcept
	{
		return m_errorMessage.c_str();
	}

	const char* getErrorMessage() const noexcept
	{
		return m_originalErrorMessage.c_str();
	}

	const char* getErrorName() const noexcept
	{
		switch(getErrorCode()) {
			case LIBMCDRIVER_S7NET_SUCCESS: return "SUCCESS";
			case LIBMCDRIVER_S7NET_ERROR_NOTIMPLEMENTED: return "NOTIMPLEMENTED";
			case LIBMCDRIVER_S7NET_ERROR_INVALIDPARAM: return "INVALIDPARAM";
			case LIBMCDRIVER_S7NET_ERROR_INVALIDCAST: return "INVALIDCAST";
			case LIBMCDRIVER_S7NET_ERROR_BUFFERTOOSMALL: return "BUFFERTOOSMALL";
			case LIBMCDRIVER_S7NET_ERROR_GENERICEXCEPTION: return "GENERICEXCEPTION";
			case LIBMCDRIVER_S7NET_ERROR_COULDNOTLOADLIBRARY: return "COULDNOTLOADLIBRARY";
			case LIBMCDRIVER_S7NET_ERROR_COULDNOTFINDLIBRARYEXPORT: return "COULDNOTFINDLIBRARYEXPORT";
			case LIBMCDRIVER_S7NET_ERROR_INCOMPATIBLEBINARYVERSION: return "INCOMPATIBLEBINARYVERSION";
			case LIBMCDRIVER_S7NET_ERROR_DRIVERERROR: return "DRIVERERROR";
			case LIBMCDRIVER_S7NET_ERROR_DRIVERNOTINITIALISED: return "DRIVERNOTINITIALISED";
			case LIBMCDRIVER_S7NET_ERROR_DRIVERNOTCONNECTED: return "DRIVERNOTCONNECTED";
			case LIBMCDRIVER_S7NET_ERROR_INVALIDDRIVERPROTOCOL: return "INVALIDDRIVERPROTOCOL";
			case LIBMCDRIVER_S7NET_ERROR_COULDNOTPARSEDRIVERPROTOCOL: return "COULDNOTPARSEDRIVERPROTOCOL";
			case LIBMCDRIVER_S7NET_ERROR_NOSTATUSDBDEFINITION: return "NOSTATUSDBDEFINITION";
			case LIBMCDRIVER_S7NET_ERROR_NOSTATUSDBNUMBER: return "NOSTATUSDBNUMBER";
			case LIBMCDRIVER_S7NET_ERROR_INVALIDSTATUSDBNUMBER: return "INVALIDSTATUSDBNUMBER";
			case LIBMCDRIVER_S7NET_ERROR_NOSTATUSDBSIZE: return "NOSTATUSDBSIZE";
			case LIBMCDRIVER_S7NET_ERROR_INVALIDSTATUSDBSIZE: return "INVALIDSTATUSDBSIZE";
			case LIBMCDRIVER_S7NET_ERROR_NONAMEATTRIBUTE: return "NONAMEATTRIBUTE";
			case LIBMCDRIVER_S7NET_ERROR_NOADDRESSEATTRIBUTE: return "NOADDRESSEATTRIBUTE";
			case LIBMCDRIVER_S7NET_ERROR_NODESCRIPTIONATTRIBUTE: return "NODESCRIPTIONATTRIBUTE";
			case LIBMCDRIVER_S7NET_ERROR_NOBITATTRIBUTE: return "NOBITATTRIBUTE";
			case LIBMCDRIVER_S7NET_ERROR_INVALIDNAMEATTRIBUTE: return "INVALIDNAMEATTRIBUTE";
			case LIBMCDRIVER_S7NET_ERROR_INVALIDADDRESSEATTRIBUTE: return "INVALIDADDRESSEATTRIBUTE";
			case LIBMCDRIVER_S7NET_ERROR_INVALIDDESCRIPTIONATTRIBUTE: return "INVALIDDESCRIPTIONATTRIBUTE";
			case LIBMCDRIVER_S7NET_ERROR_INVALIDBITATTRIBUTE: return "INVALIDBITATTRIBUTE";
			case LIBMCDRIVER_S7NET_ERROR_INVALIDCPUTYPE: return "INVALIDCPUTYPE";
			case LIBMCDRIVER_S7NET_ERROR_NOCONTROLDBDEFINITION: return "NOCONTROLDBDEFINITION";
			case LIBMCDRIVER_S7NET_ERROR_NOCONTROLDBNUMBER: return "NOCONTROLDBNUMBER";
			case LIBMCDRIVER_S7NET_ERROR_INVALIDCONTROLDBNUMBER: return "INVALIDCONTROLDBNUMBER";
			case LIBMCDRIVER_S7NET_ERROR_UNKNOWNCOMMANDNAME: return "UNKNOWNCOMMANDNAME";
			case LIBMCDRIVER_S7NET_ERROR_NOCOMMANDNAME: return "NOCOMMANDNAME";
			case LIBMCDRIVER_S7NET_ERROR_NOCOMMANDID: return "NOCOMMANDID";
			case LIBMCDRIVER_S7NET_ERROR_INVALIDCOMMANDNAME: return "INVALIDCOMMANDNAME";
			case LIBMCDRIVER_S7NET_ERROR_INVALIDCOMMANDID: return "INVALIDCOMMANDID";
			case LIBMCDRIVER_S7NET_ERROR_COMMANDHASALREADYBEENEXECUTED: return "COMMANDHASALREADYBEENEXECUTED";
			case LIBMCDRIVER_S7NET_ERROR_COMMANDHASNOTBEENEXECUTED: return "COMMANDHASNOTBEENEXECUTED";
			case LIBMCDRIVER_S7NET_ERROR_INVALIDSEQUENCEID: return "INVALIDSEQUENCEID";
			case LIBMCDRIVER_S7NET_ERROR_COMMANDSEQUENCEERROR: return "COMMANDSEQUENCEERROR";
			case LIBMCDRIVER_S7NET_ERROR_COMMANDREACTIONTIMEOUT: return "COMMANDREACTIONTIMEOUT";
			case LIBMCDRIVER_S7NET_ERROR_NOCOMMANDSDEFINITION: return "NOCOMMANDSDEFINITION";
			case LIBMCDRIVER_S7NET_ERROR_NOVERSIONDEFINITION: return "NOVERSIONDEFINITION";
			case LIBMCDRIVER_S7NET_ERROR_NOMAJORVERSION: return "NOMAJORVERSION";
			case LIBMCDRIVER_S7NET_ERROR_NOMINORVERSION: return "NOMINORVERSION";
			case LIBMCDRIVER_S7NET_ERROR_NOPATCHVERSION: return "NOPATCHVERSION";
			case LIBMCDRIVER_S7NET_ERROR_NOCONTROLDBSIZE: return "NOCONTROLDBSIZE";
			case LIBMCDRIVER_S7NET_ERROR_INVALIDCONTROLDBSIZE: return "INVALIDCONTROLDBSIZE";
			case LIBMCDRIVER_S7NET_ERROR_COULDNOTFINDADDRESS: return "COULDNOTFINDADDRESS";
			case LIBMCDRIVER_S7NET_ERROR_FIELDISNOINTPARAM: return "FIELDISNOINTPARAM";
			case LIBMCDRIVER_S7NET_ERROR_FIELDISNODINTPARAM: return "FIELDISNODINTPARAM";
			case LIBMCDRIVER_S7NET_ERROR_FIELDISNOSTRINGPARAM: return "FIELDISNOSTRINGPARAM";
			case LIBMCDRIVER_S7NET_ERROR_NOLENGTHATTRIBUTE: return "NOLENGTHATTRIBUTE";
			case LIBMCDRIVER_S7NET_ERROR_INVALIDLENGTHATTRIBUTE: return "INVALIDLENGTHATTRIBUTE";
			case LIBMCDRIVER_S7NET_ERROR_COMMANDPARAMETERNAMEMISSING: return "COMMANDPARAMETERNAMEMISSING";
			case LIBMCDRIVER_S7NET_ERROR_COMMANDPARAMETERDESCRIPTIONMISSING: return "COMMANDPARAMETERDESCRIPTIONMISSING";
			case LIBMCDRIVER_S7NET_ERROR_COMMANDPARAMETERFIELDMISSING: return "COMMANDPARAMETERFIELDMISSING";
			case LIBMCDRIVER_S7NET_ERROR_COMMANDPARAMETERNOTFOUND: return "COMMANDPARAMETERNOTFOUND";
			case LIBMCDRIVER_S7NET_ERROR_COMMANDFIELDNOTFOUND: return "COMMANDFIELDNOTFOUND";
			case LIBMCDRIVER_S7NET_ERROR_INVALIDPARAMETERTYPE: return "INVALIDPARAMETERTYPE";
			case LIBMCDRIVER_S7NET_ERROR_COMMANDPARAMETEROUTOFBOUNDS: return "COMMANDPARAMETEROUTOFBOUNDS";
		}
		return "UNKNOWN";
	}

	const char* getErrorDescription() const noexcept
	{
		switch(getErrorCode()) {
			case LIBMCDRIVER_S7NET_SUCCESS: return "success";
			case LIBMCDRIVER_S7NET_ERROR_NOTIMPLEMENTED: return "functionality not implemented";
			case LIBMCDRIVER_S7NET_ERROR_INVALIDPARAM: return "an invalid parameter was passed";
			case LIBMCDRIVER_S7NET_ERROR_INVALIDCAST: return "a type cast failed";
			case LIBMCDRIVER_S7NET_ERROR_BUFFERTOOSMALL: return "a provided buffer is too small";
			case LIBMCDRIVER_S7NET_ERROR_GENERICEXCEPTION: return "a generic exception occurred";
			case LIBMCDRIVER_S7NET_ERROR_COULDNOTLOADLIBRARY: return "the library could not be loaded";
			case LIBMCDRIVER_S7NET_ERROR_COULDNOTFINDLIBRARYEXPORT: return "a required exported symbol could not be found in the library";
			case LIBMCDRIVER_S7NET_ERROR_INCOMPATIBLEBINARYVERSION: return "the version of the binary interface does not match the bindings interface";
			case LIBMCDRIVER_S7NET_ERROR_DRIVERERROR: return "a driver error occured";
			case LIBMCDRIVER_S7NET_ERROR_DRIVERNOTINITIALISED: return "the driver is not initialised";
			case LIBMCDRIVER_S7NET_ERROR_DRIVERNOTCONNECTED: return "the driver is not connected";
			case LIBMCDRIVER_S7NET_ERROR_INVALIDDRIVERPROTOCOL: return "invalid driver protocol definition";
			case LIBMCDRIVER_S7NET_ERROR_COULDNOTPARSEDRIVERPROTOCOL: return "could not parse driver protocol";
			case LIBMCDRIVER_S7NET_ERROR_NOSTATUSDBDEFINITION: return "no status db definition";
			case LIBMCDRIVER_S7NET_ERROR_NOSTATUSDBNUMBER: return "no status db number";
			case LIBMCDRIVER_S7NET_ERROR_INVALIDSTATUSDBNUMBER: return "invalid status db number";
			case LIBMCDRIVER_S7NET_ERROR_NOSTATUSDBSIZE: return "no status db size";
			case LIBMCDRIVER_S7NET_ERROR_INVALIDSTATUSDBSIZE: return "invalid status db size";
			case LIBMCDRIVER_S7NET_ERROR_NONAMEATTRIBUTE: return "no name attribute";
			case LIBMCDRIVER_S7NET_ERROR_NOADDRESSEATTRIBUTE: return "no address attribute";
			case LIBMCDRIVER_S7NET_ERROR_NODESCRIPTIONATTRIBUTE: return "no description attribute";
			case LIBMCDRIVER_S7NET_ERROR_NOBITATTRIBUTE: return "no bit attribute";
			case LIBMCDRIVER_S7NET_ERROR_INVALIDNAMEATTRIBUTE: return "invalid name attribute";
			case LIBMCDRIVER_S7NET_ERROR_INVALIDADDRESSEATTRIBUTE: return "invalid address attribute";
			case LIBMCDRIVER_S7NET_ERROR_INVALIDDESCRIPTIONATTRIBUTE: return "invalid description attribute";
			case LIBMCDRIVER_S7NET_ERROR_INVALIDBITATTRIBUTE: return "invalid bit attribute";
			case LIBMCDRIVER_S7NET_ERROR_INVALIDCPUTYPE: return "invalid cpu type";
			case LIBMCDRIVER_S7NET_ERROR_NOCONTROLDBDEFINITION: return "no control db definition";
			case LIBMCDRIVER_S7NET_ERROR_NOCONTROLDBNUMBER: return "no control db number";
			case LIBMCDRIVER_S7NET_ERROR_INVALIDCONTROLDBNUMBER: return "invalid control db number";
			case LIBMCDRIVER_S7NET_ERROR_UNKNOWNCOMMANDNAME: return "unknown command name";
			case LIBMCDRIVER_S7NET_ERROR_NOCOMMANDNAME: return "no command name";
			case LIBMCDRIVER_S7NET_ERROR_NOCOMMANDID: return "no command id";
			case LIBMCDRIVER_S7NET_ERROR_INVALIDCOMMANDNAME: return "invalid command name";
			case LIBMCDRIVER_S7NET_ERROR_INVALIDCOMMANDID: return "invalid command id";
			case LIBMCDRIVER_S7NET_ERROR_COMMANDHASALREADYBEENEXECUTED: return "command has already been executed";
			case LIBMCDRIVER_S7NET_ERROR_COMMANDHASNOTBEENEXECUTED: return "command has not been executed";
			case LIBMCDRIVER_S7NET_ERROR_INVALIDSEQUENCEID: return "invalid sequence id";
			case LIBMCDRIVER_S7NET_ERROR_COMMANDSEQUENCEERROR: return "command sequence communication error";
			case LIBMCDRIVER_S7NET_ERROR_COMMANDREACTIONTIMEOUT: return "command reaction timeout";
			case LIBMCDRIVER_S7NET_ERROR_NOCOMMANDSDEFINITION: return "no commands definition";
			case LIBMCDRIVER_S7NET_ERROR_NOVERSIONDEFINITION: return "no version definition";
			case LIBMCDRIVER_S7NET_ERROR_NOMAJORVERSION: return "no major version";
			case LIBMCDRIVER_S7NET_ERROR_NOMINORVERSION: return "no minor version";
			case LIBMCDRIVER_S7NET_ERROR_NOPATCHVERSION: return "no patch version";
			case LIBMCDRIVER_S7NET_ERROR_NOCONTROLDBSIZE: return "no control db size";
			case LIBMCDRIVER_S7NET_ERROR_INVALIDCONTROLDBSIZE: return "invalid control db size";
			case LIBMCDRIVER_S7NET_ERROR_COULDNOTFINDADDRESS: return "could not find address";
			case LIBMCDRIVER_S7NET_ERROR_FIELDISNOINTPARAM: return "field is no int parameter";
			case LIBMCDRIVER_S7NET_ERROR_FIELDISNODINTPARAM: return "field is no dint parameter";
			case LIBMCDRIVER_S7NET_ERROR_FIELDISNOSTRINGPARAM: return "field is no string parameter";
			case LIBMCDRIVER_S7NET_ERROR_NOLENGTHATTRIBUTE: return "no length attribute";
			case LIBMCDRIVER_S7NET_ERROR_INVALIDLENGTHATTRIBUTE: return "invalid length attribute";
			case LIBMCDRIVER_S7NET_ERROR_COMMANDPARAMETERNAMEMISSING: return "command parameter name missing";
			case LIBMCDRIVER_S7NET_ERROR_COMMANDPARAMETERDESCRIPTIONMISSING: return "command parameter description missing";
			case LIBMCDRIVER_S7NET_ERROR_COMMANDPARAMETERFIELDMISSING: return "command parameter field missing";
			case LIBMCDRIVER_S7NET_ERROR_COMMANDPARAMETERNOTFOUND: return "command parameter not found";
			case LIBMCDRIVER_S7NET_ERROR_COMMANDFIELDNOTFOUND: return "command field not found";
			case LIBMCDRIVER_S7NET_ERROR_INVALIDPARAMETERTYPE: return "command field parameter is of wrong type";
			case LIBMCDRIVER_S7NET_ERROR_COMMANDPARAMETEROUTOFBOUNDS: return "command field parameter is out of bounds";
		}
		return "unknown error";
	}

private:

	std::string buildErrorMessage() const noexcept
	{
		std::string msg = m_originalErrorMessage;
		if (msg.empty()) {
			msg = getErrorDescription();
		}
		return std::string("Error: ") + getErrorName() + ": " + msg;
	}
};

/*************************************************************************************************************************
 Class CInputVector
**************************************************************************************************************************/
template <typename T>
class CInputVector {
private:
	
	const T* m_data;
	size_t m_size;
	
public:
	
	CInputVector(const std::vector<T>& vec)
		: m_data( vec.data() ), m_size( vec.size() )
	{
	}
	
	CInputVector(const T* in_data, size_t in_size)
		: m_data( in_data ), m_size(in_size )
	{
	}
	
	const T* data() const
	{
		return m_data;
	}
	
	size_t size() const
	{
		return m_size;
	}
	
};

// declare deprecated class name
template<typename T>
using CLibMCDriver_S7NetInputVector = CInputVector<T>;

/*************************************************************************************************************************
 Class CWrapper 
**************************************************************************************************************************/
class CWrapper {
public:
	
	explicit CWrapper(void* pSymbolLookupMethod)
	{
		CheckError(nullptr, initWrapperTable(&m_WrapperTable));
		CheckError(nullptr, loadWrapperTableFromSymbolLookupMethod(&m_WrapperTable, pSymbolLookupMethod));
		
		CheckError(nullptr, checkBinaryVersion());
	}
	
	explicit CWrapper(const std::string &sFileName)
	{
		CheckError(nullptr, initWrapperTable(&m_WrapperTable));
		CheckError(nullptr, loadWrapperTable(&m_WrapperTable, sFileName.c_str()));
		
		CheckError(nullptr, checkBinaryVersion());
	}
	
	static PWrapper loadLibrary(const std::string &sFileName)
	{
		return std::make_shared<CWrapper>(sFileName);
	}
	
	static PWrapper loadLibraryFromSymbolLookupMethod(void* pSymbolLookupMethod)
	{
		return std::make_shared<CWrapper>(pSymbolLookupMethod);
	}
	
	~CWrapper()
	{
		releaseWrapperTable(&m_WrapperTable);
	}
	
	inline void CheckError(CBase * pBaseClass, LibMCDriver_S7NetResult nResult);

	inline void GetVersion(LibMCDriver_S7Net_uint32 & nMajor, LibMCDriver_S7Net_uint32 & nMinor, LibMCDriver_S7Net_uint32 & nMicro);
	inline bool GetLastError(classParam<CBase> pInstance, std::string & sErrorMessage);
	inline void ReleaseInstance(classParam<CBase> pInstance);
	inline void AcquireInstance(classParam<CBase> pInstance);
	inline void InjectComponent(const std::string & sNameSpace, const LibMCDriver_S7Net_pvoid pSymbolAddressMethod);
	inline LibMCDriver_S7Net_pvoid GetSymbolLookupMethod();
	inline PDriver CreateDriver(const std::string & sName, const std::string & sType, classParam<LibMCEnv::CDriverEnvironment> pDriverEnvironment);

private:
	sLibMCDriver_S7NetDynamicWrapperTable m_WrapperTable;
	// Injected Components
	LibMCEnv::PWrapper m_pLibMCEnvWrapper;

	
	LibMCDriver_S7NetResult checkBinaryVersion()
	{
		LibMCDriver_S7Net_uint32 nMajor, nMinor, nMicro;
		GetVersion(nMajor, nMinor, nMicro);
		if (nMajor != LIBMCDRIVER_S7NET_VERSION_MAJOR) {
			return LIBMCDRIVER_S7NET_ERROR_INCOMPATIBLEBINARYVERSION;
		}
		return LIBMCDRIVER_S7NET_SUCCESS;
	}
	LibMCDriver_S7NetResult initWrapperTable(sLibMCDriver_S7NetDynamicWrapperTable * pWrapperTable);
	LibMCDriver_S7NetResult releaseWrapperTable(sLibMCDriver_S7NetDynamicWrapperTable * pWrapperTable);
	LibMCDriver_S7NetResult loadWrapperTable(sLibMCDriver_S7NetDynamicWrapperTable * pWrapperTable, const char * pLibraryFileName);
	LibMCDriver_S7NetResult loadWrapperTableFromSymbolLookupMethod(sLibMCDriver_S7NetDynamicWrapperTable * pWrapperTable, void* pSymbolLookupMethod);

	friend class CBase;
	friend class CDriver;
	friend class CPLCCommand;
	friend class CDriver_S7Net;

};

	
/*************************************************************************************************************************
 Class CBase 
**************************************************************************************************************************/
class CBase {
public:
	
protected:
	/* Wrapper Object that created the class. */
	CWrapper * m_pWrapper;
	/* Handle to Instance in library*/
	LibMCDriver_S7NetHandle m_pHandle;

	/* Checks for an Error code and raises Exceptions */
	void CheckError(LibMCDriver_S7NetResult nResult)
	{
		if (m_pWrapper != nullptr)
			m_pWrapper->CheckError(this, nResult);
	}
public:
	/**
	* CBase::CBase - Constructor for Base class.
	*/
	CBase(CWrapper * pWrapper, LibMCDriver_S7NetHandle pHandle)
		: m_pWrapper(pWrapper), m_pHandle(pHandle)
	{
	}

	/**
	* CBase::~CBase - Destructor for Base class.
	*/
	virtual ~CBase()
	{
		if (m_pWrapper != nullptr)
			m_pWrapper->ReleaseInstance(this);
		m_pWrapper = nullptr;
	}

	/**
	* CBase::handle - Returns handle to instance.
	*/
	LibMCDriver_S7NetHandle handle() const
	{
		return m_pHandle;
	}

	/**
	* CBase::wrapper - Returns wrapper instance.
	*/
	CWrapper * wrapper() const
	{
		return m_pWrapper;
	}
	
	friend class CWrapper;
};
	
/*************************************************************************************************************************
 Class CDriver 
**************************************************************************************************************************/
class CDriver : public CBase {
public:
	
	/**
	* CDriver::CDriver - Constructor for Driver class.
	*/
	CDriver(CWrapper* pWrapper, LibMCDriver_S7NetHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline void Configure(const std::string & sConfigurationString);
	inline std::string GetName();
	inline std::string GetType();
	inline void GetVersion(LibMCDriver_S7Net_uint32 & nMajor, LibMCDriver_S7Net_uint32 & nMinor, LibMCDriver_S7Net_uint32 & nMicro, std::string & sBuild);
	inline void QueryParameters();
	inline void QueryParametersEx(classParam<LibMCEnv::CDriverStatusUpdateSession> pDriverUpdateInstance);
};
	
/*************************************************************************************************************************
 Class CPLCCommand 
**************************************************************************************************************************/
class CPLCCommand : public CBase {
public:
	
	/**
	* CPLCCommand::CPLCCommand - Constructor for PLCCommand class.
	*/
	CPLCCommand(CWrapper* pWrapper, LibMCDriver_S7NetHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline void SetIntegerParameter(const std::string & sParameterName, const LibMCDriver_S7Net_int32 nValue);
	inline void SetStringParameter(const std::string & sParameterName, const std::string & sValue);
	inline void SetBoolParameter(const std::string & sParameterName, const bool bValue);
	inline void SetDoubleParameter(const std::string & sParameterName, const LibMCDriver_S7Net_double dValue);
};
	
/*************************************************************************************************************************
 Class CDriver_S7Net 
**************************************************************************************************************************/
class CDriver_S7Net : public CDriver {
public:
	
	/**
	* CDriver_S7Net::CDriver_S7Net - Constructor for Driver_S7Net class.
	*/
	CDriver_S7Net(CWrapper* pWrapper, LibMCDriver_S7NetHandle pHandle)
		: CDriver(pWrapper, pHandle)
	{
	}
	
	inline void Connect(const eS7CPUType eCPUType, const std::string & sIPAddress, const LibMCDriver_S7Net_uint32 nRack, const LibMCDriver_S7Net_uint32 nSlot);
	inline void Disconnect();
	inline PPLCCommand CreateCommand(const std::string & sCommand);
	inline void ExecuteCommand(classParam<CPLCCommand> pPLCCommand);
	inline bool WaitForCommand(classParam<CPLCCommand> pPLCCommand, const LibMCDriver_S7Net_uint32 nReactionTimeInMS, const LibMCDriver_S7Net_uint32 nWaitForTimeInMS);
};
	
	/**
	* CWrapper::GetVersion - retrieves the binary version of this library.
	* @param[out] nMajor - returns the major version of this library
	* @param[out] nMinor - returns the minor version of this library
	* @param[out] nMicro - returns the micro version of this library
	*/
	inline void CWrapper::GetVersion(LibMCDriver_S7Net_uint32 & nMajor, LibMCDriver_S7Net_uint32 & nMinor, LibMCDriver_S7Net_uint32 & nMicro)
	{
		CheckError(nullptr,m_WrapperTable.m_GetVersion(&nMajor, &nMinor, &nMicro));
	}
	
	/**
	* CWrapper::GetLastError - Returns the last error recorded on this object
	* @param[in] pInstance - Instance Handle
	* @param[out] sErrorMessage - Message of the last error
	* @return Is there a last error to query
	*/
	inline bool CWrapper::GetLastError(classParam<CBase> pInstance, std::string & sErrorMessage)
	{
		LibMCDriver_S7NetHandle hInstance = pInstance.GetHandle();
		LibMCDriver_S7Net_uint32 bytesNeededErrorMessage = 0;
		LibMCDriver_S7Net_uint32 bytesWrittenErrorMessage = 0;
		bool resultHasError = 0;
		CheckError(nullptr,m_WrapperTable.m_GetLastError(hInstance, 0, &bytesNeededErrorMessage, nullptr, &resultHasError));
		std::vector<char> bufferErrorMessage(bytesNeededErrorMessage);
		CheckError(nullptr,m_WrapperTable.m_GetLastError(hInstance, bytesNeededErrorMessage, &bytesWrittenErrorMessage, &bufferErrorMessage[0], &resultHasError));
		sErrorMessage = std::string(&bufferErrorMessage[0]);
		
		return resultHasError;
	}
	
	/**
	* CWrapper::ReleaseInstance - Releases shared ownership of an Instance
	* @param[in] pInstance - Instance Handle
	*/
	inline void CWrapper::ReleaseInstance(classParam<CBase> pInstance)
	{
		LibMCDriver_S7NetHandle hInstance = pInstance.GetHandle();
		CheckError(nullptr,m_WrapperTable.m_ReleaseInstance(hInstance));
	}
	
	/**
	* CWrapper::AcquireInstance - Acquires shared ownership of an Instance
	* @param[in] pInstance - Instance Handle
	*/
	inline void CWrapper::AcquireInstance(classParam<CBase> pInstance)
	{
		LibMCDriver_S7NetHandle hInstance = pInstance.GetHandle();
		CheckError(nullptr,m_WrapperTable.m_AcquireInstance(hInstance));
	}
	
	/**
	* CWrapper::InjectComponent - Injects an imported component for usage within this component
	* @param[in] sNameSpace - NameSpace of the injected component
	* @param[in] pSymbolAddressMethod - Address of the SymbolAddressMethod of the injected component
	*/
	inline void CWrapper::InjectComponent(const std::string & sNameSpace, const LibMCDriver_S7Net_pvoid pSymbolAddressMethod)
	{
		CheckError(nullptr,m_WrapperTable.m_InjectComponent(sNameSpace.c_str(), pSymbolAddressMethod));
		
		bool bNameSpaceFound = false;
		if (sNameSpace == "LibMCEnv") {
			if (m_pLibMCEnvWrapper != nullptr) {
				throw ELibMCDriver_S7NetException(LIBMCDRIVER_S7NET_ERROR_COULDNOTLOADLIBRARY, "Library with namespace " + sNameSpace + " is already registered.");
			}
			m_pLibMCEnvWrapper = LibMCEnv::CWrapper::loadLibraryFromSymbolLookupMethod(pSymbolAddressMethod);
			bNameSpaceFound = true;
		}
		if (!bNameSpaceFound)
			throw ELibMCDriver_S7NetException(LIBMCDRIVER_S7NET_ERROR_COULDNOTLOADLIBRARY, "Unknown namespace " + sNameSpace);
	}
	
	/**
	* CWrapper::GetSymbolLookupMethod - Returns the address of the SymbolLookupMethod
	* @return Address of the SymbolAddressMethod
	*/
	inline LibMCDriver_S7Net_pvoid CWrapper::GetSymbolLookupMethod()
	{
		LibMCDriver_S7Net_pvoid resultSymbolLookupMethod = 0;
		CheckError(nullptr,m_WrapperTable.m_GetSymbolLookupMethod(&resultSymbolLookupMethod));
		
		return resultSymbolLookupMethod;
	}
	
	/**
	* CWrapper::CreateDriver - Creates a driver instance with a specific name.
	* @param[in] sName - Name of driver to be created.
	* @param[in] sType - Type of driver to be created.
	* @param[in] pDriverEnvironment - Environment of this driver.
	* @return New Driver instance
	*/
	inline PDriver CWrapper::CreateDriver(const std::string & sName, const std::string & sType, classParam<LibMCEnv::CDriverEnvironment> pDriverEnvironment)
	{
		LibMCEnvHandle hDriverEnvironment = pDriverEnvironment.GetHandle();
		LibMCDriver_S7NetHandle hInstance = nullptr;
		CheckError(nullptr,m_WrapperTable.m_CreateDriver(sName.c_str(), sType.c_str(), hDriverEnvironment, &hInstance));
		
		if (hInstance) {
			return std::make_shared<CDriver>(this, hInstance);
		} else {
			return nullptr;
		}
	}
	
	inline void CWrapper::CheckError(CBase * pBaseClass, LibMCDriver_S7NetResult nResult)
	{
		if (nResult != 0) {
			std::string sErrorMessage;
			if (pBaseClass != nullptr) {
				GetLastError(pBaseClass, sErrorMessage);
			}
			throw ELibMCDriver_S7NetException(nResult, sErrorMessage);
		}
	}
	

	inline LibMCDriver_S7NetResult CWrapper::initWrapperTable(sLibMCDriver_S7NetDynamicWrapperTable * pWrapperTable)
	{
		if (pWrapperTable == nullptr)
			return LIBMCDRIVER_S7NET_ERROR_INVALIDPARAM;
		
		pWrapperTable->m_LibraryHandle = nullptr;
		pWrapperTable->m_Driver_Configure = nullptr;
		pWrapperTable->m_Driver_GetName = nullptr;
		pWrapperTable->m_Driver_GetType = nullptr;
		pWrapperTable->m_Driver_GetVersion = nullptr;
		pWrapperTable->m_Driver_QueryParameters = nullptr;
		pWrapperTable->m_Driver_QueryParametersEx = nullptr;
		pWrapperTable->m_PLCCommand_SetIntegerParameter = nullptr;
		pWrapperTable->m_PLCCommand_SetStringParameter = nullptr;
		pWrapperTable->m_PLCCommand_SetBoolParameter = nullptr;
		pWrapperTable->m_PLCCommand_SetDoubleParameter = nullptr;
		pWrapperTable->m_Driver_S7Net_Connect = nullptr;
		pWrapperTable->m_Driver_S7Net_Disconnect = nullptr;
		pWrapperTable->m_Driver_S7Net_CreateCommand = nullptr;
		pWrapperTable->m_Driver_S7Net_ExecuteCommand = nullptr;
		pWrapperTable->m_Driver_S7Net_WaitForCommand = nullptr;
		pWrapperTable->m_GetVersion = nullptr;
		pWrapperTable->m_GetLastError = nullptr;
		pWrapperTable->m_ReleaseInstance = nullptr;
		pWrapperTable->m_AcquireInstance = nullptr;
		pWrapperTable->m_InjectComponent = nullptr;
		pWrapperTable->m_GetSymbolLookupMethod = nullptr;
		pWrapperTable->m_CreateDriver = nullptr;
		
		return LIBMCDRIVER_S7NET_SUCCESS;
	}

	inline LibMCDriver_S7NetResult CWrapper::releaseWrapperTable(sLibMCDriver_S7NetDynamicWrapperTable * pWrapperTable)
	{
		if (pWrapperTable == nullptr)
			return LIBMCDRIVER_S7NET_ERROR_INVALIDPARAM;
		
		if (pWrapperTable->m_LibraryHandle != nullptr) {
		#ifdef _WIN32
			HMODULE hModule = (HMODULE) pWrapperTable->m_LibraryHandle;
			FreeLibrary(hModule);
		#else // _WIN32
			dlclose(pWrapperTable->m_LibraryHandle);
		#endif // _WIN32
			return initWrapperTable(pWrapperTable);
		}
		
		return LIBMCDRIVER_S7NET_SUCCESS;
	}

	inline LibMCDriver_S7NetResult CWrapper::loadWrapperTable(sLibMCDriver_S7NetDynamicWrapperTable * pWrapperTable, const char * pLibraryFileName)
	{
		if (pWrapperTable == nullptr)
			return LIBMCDRIVER_S7NET_ERROR_INVALIDPARAM;
		if (pLibraryFileName == nullptr)
			return LIBMCDRIVER_S7NET_ERROR_INVALIDPARAM;
		
		#ifdef _WIN32
		// Convert filename to UTF16-string
		int nLength = 0;
		while ((pLibraryFileName[nLength] != 0) && (nLength < MAX_PATH))
			nLength++;
		int nBufferSize = nLength * 2 + 2;
		std::vector<wchar_t> wsLibraryFileName(nBufferSize);
		int nResult = MultiByteToWideChar(CP_UTF8, 0, pLibraryFileName, nLength, &wsLibraryFileName[0], nBufferSize);
		if (nResult == 0)
			return LIBMCDRIVER_S7NET_ERROR_COULDNOTLOADLIBRARY;
		
		HMODULE hLibrary = LoadLibraryW(wsLibraryFileName.data());
		if (hLibrary == 0) 
			return LIBMCDRIVER_S7NET_ERROR_COULDNOTLOADLIBRARY;
		#else // _WIN32
		void* hLibrary = dlopen(pLibraryFileName, RTLD_LAZY);
		if (hLibrary == 0) 
			return LIBMCDRIVER_S7NET_ERROR_COULDNOTLOADLIBRARY;
		dlerror();
		#endif // _WIN32
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_Configure = (PLibMCDriver_S7NetDriver_ConfigurePtr) GetProcAddress(hLibrary, "libmcdriver_s7net_driver_configure");
		#else // _WIN32
		pWrapperTable->m_Driver_Configure = (PLibMCDriver_S7NetDriver_ConfigurePtr) dlsym(hLibrary, "libmcdriver_s7net_driver_configure");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_Configure == nullptr)
			return LIBMCDRIVER_S7NET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_GetName = (PLibMCDriver_S7NetDriver_GetNamePtr) GetProcAddress(hLibrary, "libmcdriver_s7net_driver_getname");
		#else // _WIN32
		pWrapperTable->m_Driver_GetName = (PLibMCDriver_S7NetDriver_GetNamePtr) dlsym(hLibrary, "libmcdriver_s7net_driver_getname");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_GetName == nullptr)
			return LIBMCDRIVER_S7NET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_GetType = (PLibMCDriver_S7NetDriver_GetTypePtr) GetProcAddress(hLibrary, "libmcdriver_s7net_driver_gettype");
		#else // _WIN32
		pWrapperTable->m_Driver_GetType = (PLibMCDriver_S7NetDriver_GetTypePtr) dlsym(hLibrary, "libmcdriver_s7net_driver_gettype");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_GetType == nullptr)
			return LIBMCDRIVER_S7NET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_GetVersion = (PLibMCDriver_S7NetDriver_GetVersionPtr) GetProcAddress(hLibrary, "libmcdriver_s7net_driver_getversion");
		#else // _WIN32
		pWrapperTable->m_Driver_GetVersion = (PLibMCDriver_S7NetDriver_GetVersionPtr) dlsym(hLibrary, "libmcdriver_s7net_driver_getversion");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_GetVersion == nullptr)
			return LIBMCDRIVER_S7NET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_QueryParameters = (PLibMCDriver_S7NetDriver_QueryParametersPtr) GetProcAddress(hLibrary, "libmcdriver_s7net_driver_queryparameters");
		#else // _WIN32
		pWrapperTable->m_Driver_QueryParameters = (PLibMCDriver_S7NetDriver_QueryParametersPtr) dlsym(hLibrary, "libmcdriver_s7net_driver_queryparameters");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_QueryParameters == nullptr)
			return LIBMCDRIVER_S7NET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_QueryParametersEx = (PLibMCDriver_S7NetDriver_QueryParametersExPtr) GetProcAddress(hLibrary, "libmcdriver_s7net_driver_queryparametersex");
		#else // _WIN32
		pWrapperTable->m_Driver_QueryParametersEx = (PLibMCDriver_S7NetDriver_QueryParametersExPtr) dlsym(hLibrary, "libmcdriver_s7net_driver_queryparametersex");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_QueryParametersEx == nullptr)
			return LIBMCDRIVER_S7NET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_PLCCommand_SetIntegerParameter = (PLibMCDriver_S7NetPLCCommand_SetIntegerParameterPtr) GetProcAddress(hLibrary, "libmcdriver_s7net_plccommand_setintegerparameter");
		#else // _WIN32
		pWrapperTable->m_PLCCommand_SetIntegerParameter = (PLibMCDriver_S7NetPLCCommand_SetIntegerParameterPtr) dlsym(hLibrary, "libmcdriver_s7net_plccommand_setintegerparameter");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_PLCCommand_SetIntegerParameter == nullptr)
			return LIBMCDRIVER_S7NET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_PLCCommand_SetStringParameter = (PLibMCDriver_S7NetPLCCommand_SetStringParameterPtr) GetProcAddress(hLibrary, "libmcdriver_s7net_plccommand_setstringparameter");
		#else // _WIN32
		pWrapperTable->m_PLCCommand_SetStringParameter = (PLibMCDriver_S7NetPLCCommand_SetStringParameterPtr) dlsym(hLibrary, "libmcdriver_s7net_plccommand_setstringparameter");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_PLCCommand_SetStringParameter == nullptr)
			return LIBMCDRIVER_S7NET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_PLCCommand_SetBoolParameter = (PLibMCDriver_S7NetPLCCommand_SetBoolParameterPtr) GetProcAddress(hLibrary, "libmcdriver_s7net_plccommand_setboolparameter");
		#else // _WIN32
		pWrapperTable->m_PLCCommand_SetBoolParameter = (PLibMCDriver_S7NetPLCCommand_SetBoolParameterPtr) dlsym(hLibrary, "libmcdriver_s7net_plccommand_setboolparameter");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_PLCCommand_SetBoolParameter == nullptr)
			return LIBMCDRIVER_S7NET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_PLCCommand_SetDoubleParameter = (PLibMCDriver_S7NetPLCCommand_SetDoubleParameterPtr) GetProcAddress(hLibrary, "libmcdriver_s7net_plccommand_setdoubleparameter");
		#else // _WIN32
		pWrapperTable->m_PLCCommand_SetDoubleParameter = (PLibMCDriver_S7NetPLCCommand_SetDoubleParameterPtr) dlsym(hLibrary, "libmcdriver_s7net_plccommand_setdoubleparameter");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_PLCCommand_SetDoubleParameter == nullptr)
			return LIBMCDRIVER_S7NET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_S7Net_Connect = (PLibMCDriver_S7NetDriver_S7Net_ConnectPtr) GetProcAddress(hLibrary, "libmcdriver_s7net_driver_s7net_connect");
		#else // _WIN32
		pWrapperTable->m_Driver_S7Net_Connect = (PLibMCDriver_S7NetDriver_S7Net_ConnectPtr) dlsym(hLibrary, "libmcdriver_s7net_driver_s7net_connect");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_S7Net_Connect == nullptr)
			return LIBMCDRIVER_S7NET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_S7Net_Disconnect = (PLibMCDriver_S7NetDriver_S7Net_DisconnectPtr) GetProcAddress(hLibrary, "libmcdriver_s7net_driver_s7net_disconnect");
		#else // _WIN32
		pWrapperTable->m_Driver_S7Net_Disconnect = (PLibMCDriver_S7NetDriver_S7Net_DisconnectPtr) dlsym(hLibrary, "libmcdriver_s7net_driver_s7net_disconnect");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_S7Net_Disconnect == nullptr)
			return LIBMCDRIVER_S7NET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_S7Net_CreateCommand = (PLibMCDriver_S7NetDriver_S7Net_CreateCommandPtr) GetProcAddress(hLibrary, "libmcdriver_s7net_driver_s7net_createcommand");
		#else // _WIN32
		pWrapperTable->m_Driver_S7Net_CreateCommand = (PLibMCDriver_S7NetDriver_S7Net_CreateCommandPtr) dlsym(hLibrary, "libmcdriver_s7net_driver_s7net_createcommand");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_S7Net_CreateCommand == nullptr)
			return LIBMCDRIVER_S7NET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_S7Net_ExecuteCommand = (PLibMCDriver_S7NetDriver_S7Net_ExecuteCommandPtr) GetProcAddress(hLibrary, "libmcdriver_s7net_driver_s7net_executecommand");
		#else // _WIN32
		pWrapperTable->m_Driver_S7Net_ExecuteCommand = (PLibMCDriver_S7NetDriver_S7Net_ExecuteCommandPtr) dlsym(hLibrary, "libmcdriver_s7net_driver_s7net_executecommand");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_S7Net_ExecuteCommand == nullptr)
			return LIBMCDRIVER_S7NET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_S7Net_WaitForCommand = (PLibMCDriver_S7NetDriver_S7Net_WaitForCommandPtr) GetProcAddress(hLibrary, "libmcdriver_s7net_driver_s7net_waitforcommand");
		#else // _WIN32
		pWrapperTable->m_Driver_S7Net_WaitForCommand = (PLibMCDriver_S7NetDriver_S7Net_WaitForCommandPtr) dlsym(hLibrary, "libmcdriver_s7net_driver_s7net_waitforcommand");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_S7Net_WaitForCommand == nullptr)
			return LIBMCDRIVER_S7NET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GetVersion = (PLibMCDriver_S7NetGetVersionPtr) GetProcAddress(hLibrary, "libmcdriver_s7net_getversion");
		#else // _WIN32
		pWrapperTable->m_GetVersion = (PLibMCDriver_S7NetGetVersionPtr) dlsym(hLibrary, "libmcdriver_s7net_getversion");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GetVersion == nullptr)
			return LIBMCDRIVER_S7NET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GetLastError = (PLibMCDriver_S7NetGetLastErrorPtr) GetProcAddress(hLibrary, "libmcdriver_s7net_getlasterror");
		#else // _WIN32
		pWrapperTable->m_GetLastError = (PLibMCDriver_S7NetGetLastErrorPtr) dlsym(hLibrary, "libmcdriver_s7net_getlasterror");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GetLastError == nullptr)
			return LIBMCDRIVER_S7NET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ReleaseInstance = (PLibMCDriver_S7NetReleaseInstancePtr) GetProcAddress(hLibrary, "libmcdriver_s7net_releaseinstance");
		#else // _WIN32
		pWrapperTable->m_ReleaseInstance = (PLibMCDriver_S7NetReleaseInstancePtr) dlsym(hLibrary, "libmcdriver_s7net_releaseinstance");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ReleaseInstance == nullptr)
			return LIBMCDRIVER_S7NET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_AcquireInstance = (PLibMCDriver_S7NetAcquireInstancePtr) GetProcAddress(hLibrary, "libmcdriver_s7net_acquireinstance");
		#else // _WIN32
		pWrapperTable->m_AcquireInstance = (PLibMCDriver_S7NetAcquireInstancePtr) dlsym(hLibrary, "libmcdriver_s7net_acquireinstance");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_AcquireInstance == nullptr)
			return LIBMCDRIVER_S7NET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_InjectComponent = (PLibMCDriver_S7NetInjectComponentPtr) GetProcAddress(hLibrary, "libmcdriver_s7net_injectcomponent");
		#else // _WIN32
		pWrapperTable->m_InjectComponent = (PLibMCDriver_S7NetInjectComponentPtr) dlsym(hLibrary, "libmcdriver_s7net_injectcomponent");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_InjectComponent == nullptr)
			return LIBMCDRIVER_S7NET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GetSymbolLookupMethod = (PLibMCDriver_S7NetGetSymbolLookupMethodPtr) GetProcAddress(hLibrary, "libmcdriver_s7net_getsymbollookupmethod");
		#else // _WIN32
		pWrapperTable->m_GetSymbolLookupMethod = (PLibMCDriver_S7NetGetSymbolLookupMethodPtr) dlsym(hLibrary, "libmcdriver_s7net_getsymbollookupmethod");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GetSymbolLookupMethod == nullptr)
			return LIBMCDRIVER_S7NET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_CreateDriver = (PLibMCDriver_S7NetCreateDriverPtr) GetProcAddress(hLibrary, "libmcdriver_s7net_createdriver");
		#else // _WIN32
		pWrapperTable->m_CreateDriver = (PLibMCDriver_S7NetCreateDriverPtr) dlsym(hLibrary, "libmcdriver_s7net_createdriver");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_CreateDriver == nullptr)
			return LIBMCDRIVER_S7NET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		pWrapperTable->m_LibraryHandle = hLibrary;
		return LIBMCDRIVER_S7NET_SUCCESS;
	}

	inline LibMCDriver_S7NetResult CWrapper::loadWrapperTableFromSymbolLookupMethod(sLibMCDriver_S7NetDynamicWrapperTable * pWrapperTable, void* pSymbolLookupMethod)
{
		if (pWrapperTable == nullptr)
			return LIBMCDRIVER_S7NET_ERROR_INVALIDPARAM;
		if (pSymbolLookupMethod == nullptr)
			return LIBMCDRIVER_S7NET_ERROR_INVALIDPARAM;
		
		typedef LibMCDriver_S7NetResult(*SymbolLookupType)(const char*, void**);
		
		SymbolLookupType pLookup = (SymbolLookupType)pSymbolLookupMethod;
		
		LibMCDriver_S7NetResult eLookupError = LIBMCDRIVER_S7NET_SUCCESS;
		eLookupError = (*pLookup)("libmcdriver_s7net_driver_configure", (void**)&(pWrapperTable->m_Driver_Configure));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_Configure == nullptr) )
			return LIBMCDRIVER_S7NET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_s7net_driver_getname", (void**)&(pWrapperTable->m_Driver_GetName));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_GetName == nullptr) )
			return LIBMCDRIVER_S7NET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_s7net_driver_gettype", (void**)&(pWrapperTable->m_Driver_GetType));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_GetType == nullptr) )
			return LIBMCDRIVER_S7NET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_s7net_driver_getversion", (void**)&(pWrapperTable->m_Driver_GetVersion));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_GetVersion == nullptr) )
			return LIBMCDRIVER_S7NET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_s7net_driver_queryparameters", (void**)&(pWrapperTable->m_Driver_QueryParameters));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_QueryParameters == nullptr) )
			return LIBMCDRIVER_S7NET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_s7net_driver_queryparametersex", (void**)&(pWrapperTable->m_Driver_QueryParametersEx));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_QueryParametersEx == nullptr) )
			return LIBMCDRIVER_S7NET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_s7net_plccommand_setintegerparameter", (void**)&(pWrapperTable->m_PLCCommand_SetIntegerParameter));
		if ( (eLookupError != 0) || (pWrapperTable->m_PLCCommand_SetIntegerParameter == nullptr) )
			return LIBMCDRIVER_S7NET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_s7net_plccommand_setstringparameter", (void**)&(pWrapperTable->m_PLCCommand_SetStringParameter));
		if ( (eLookupError != 0) || (pWrapperTable->m_PLCCommand_SetStringParameter == nullptr) )
			return LIBMCDRIVER_S7NET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_s7net_plccommand_setboolparameter", (void**)&(pWrapperTable->m_PLCCommand_SetBoolParameter));
		if ( (eLookupError != 0) || (pWrapperTable->m_PLCCommand_SetBoolParameter == nullptr) )
			return LIBMCDRIVER_S7NET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_s7net_plccommand_setdoubleparameter", (void**)&(pWrapperTable->m_PLCCommand_SetDoubleParameter));
		if ( (eLookupError != 0) || (pWrapperTable->m_PLCCommand_SetDoubleParameter == nullptr) )
			return LIBMCDRIVER_S7NET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_s7net_driver_s7net_connect", (void**)&(pWrapperTable->m_Driver_S7Net_Connect));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_S7Net_Connect == nullptr) )
			return LIBMCDRIVER_S7NET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_s7net_driver_s7net_disconnect", (void**)&(pWrapperTable->m_Driver_S7Net_Disconnect));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_S7Net_Disconnect == nullptr) )
			return LIBMCDRIVER_S7NET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_s7net_driver_s7net_createcommand", (void**)&(pWrapperTable->m_Driver_S7Net_CreateCommand));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_S7Net_CreateCommand == nullptr) )
			return LIBMCDRIVER_S7NET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_s7net_driver_s7net_executecommand", (void**)&(pWrapperTable->m_Driver_S7Net_ExecuteCommand));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_S7Net_ExecuteCommand == nullptr) )
			return LIBMCDRIVER_S7NET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_s7net_driver_s7net_waitforcommand", (void**)&(pWrapperTable->m_Driver_S7Net_WaitForCommand));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_S7Net_WaitForCommand == nullptr) )
			return LIBMCDRIVER_S7NET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_s7net_getversion", (void**)&(pWrapperTable->m_GetVersion));
		if ( (eLookupError != 0) || (pWrapperTable->m_GetVersion == nullptr) )
			return LIBMCDRIVER_S7NET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_s7net_getlasterror", (void**)&(pWrapperTable->m_GetLastError));
		if ( (eLookupError != 0) || (pWrapperTable->m_GetLastError == nullptr) )
			return LIBMCDRIVER_S7NET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_s7net_releaseinstance", (void**)&(pWrapperTable->m_ReleaseInstance));
		if ( (eLookupError != 0) || (pWrapperTable->m_ReleaseInstance == nullptr) )
			return LIBMCDRIVER_S7NET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_s7net_acquireinstance", (void**)&(pWrapperTable->m_AcquireInstance));
		if ( (eLookupError != 0) || (pWrapperTable->m_AcquireInstance == nullptr) )
			return LIBMCDRIVER_S7NET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_s7net_injectcomponent", (void**)&(pWrapperTable->m_InjectComponent));
		if ( (eLookupError != 0) || (pWrapperTable->m_InjectComponent == nullptr) )
			return LIBMCDRIVER_S7NET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_s7net_getsymbollookupmethod", (void**)&(pWrapperTable->m_GetSymbolLookupMethod));
		if ( (eLookupError != 0) || (pWrapperTable->m_GetSymbolLookupMethod == nullptr) )
			return LIBMCDRIVER_S7NET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_s7net_createdriver", (void**)&(pWrapperTable->m_CreateDriver));
		if ( (eLookupError != 0) || (pWrapperTable->m_CreateDriver == nullptr) )
			return LIBMCDRIVER_S7NET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		return LIBMCDRIVER_S7NET_SUCCESS;
}

	
	
	/**
	 * Method definitions for class CBase
	 */
	
	/**
	 * Method definitions for class CDriver
	 */
	
	/**
	* CDriver::Configure - Configures a driver with its specific configuration data.
	* @param[in] sConfigurationString - Configuration data of driver.
	*/
	void CDriver::Configure(const std::string & sConfigurationString)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_Configure(m_pHandle, sConfigurationString.c_str()));
	}
	
	/**
	* CDriver::GetName - returns the name identifier of the driver
	* @return Name of the driver.
	*/
	std::string CDriver::GetName()
	{
		LibMCDriver_S7Net_uint32 bytesNeededName = 0;
		LibMCDriver_S7Net_uint32 bytesWrittenName = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetName(m_pHandle, 0, &bytesNeededName, nullptr));
		std::vector<char> bufferName(bytesNeededName);
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetName(m_pHandle, bytesNeededName, &bytesWrittenName, &bufferName[0]));
		
		return std::string(&bufferName[0]);
	}
	
	/**
	* CDriver::GetType - returns the type identifier of the driver
	* @return Type of the driver.
	*/
	std::string CDriver::GetType()
	{
		LibMCDriver_S7Net_uint32 bytesNeededType = 0;
		LibMCDriver_S7Net_uint32 bytesWrittenType = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetType(m_pHandle, 0, &bytesNeededType, nullptr));
		std::vector<char> bufferType(bytesNeededType);
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetType(m_pHandle, bytesNeededType, &bytesWrittenType, &bufferType[0]));
		
		return std::string(&bufferType[0]);
	}
	
	/**
	* CDriver::GetVersion - returns the version identifiers of the driver
	* @param[out] nMajor - Major version.
	* @param[out] nMinor - Minor version.
	* @param[out] nMicro - Micro version.
	* @param[out] sBuild - Build identifier.
	*/
	void CDriver::GetVersion(LibMCDriver_S7Net_uint32 & nMajor, LibMCDriver_S7Net_uint32 & nMinor, LibMCDriver_S7Net_uint32 & nMicro, std::string & sBuild)
	{
		LibMCDriver_S7Net_uint32 bytesNeededBuild = 0;
		LibMCDriver_S7Net_uint32 bytesWrittenBuild = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetVersion(m_pHandle, &nMajor, &nMinor, &nMicro, 0, &bytesNeededBuild, nullptr));
		std::vector<char> bufferBuild(bytesNeededBuild);
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetVersion(m_pHandle, &nMajor, &nMinor, &nMicro, bytesNeededBuild, &bytesWrittenBuild, &bufferBuild[0]));
		sBuild = std::string(&bufferBuild[0]);
	}
	
	/**
	* CDriver::QueryParameters - Updates the driver parameters in the driver environment. Should only be called in the driver thread.
	*/
	void CDriver::QueryParameters()
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_QueryParameters(m_pHandle));
	}
	
	/**
	* CDriver::QueryParametersEx - Updates the driver parameters in the driver environment. Might be called out of thread. Implementation MUST be able to handle parallel calls.
	* @param[in] pDriverUpdateInstance - Status update instance.
	*/
	void CDriver::QueryParametersEx(classParam<LibMCEnv::CDriverStatusUpdateSession> pDriverUpdateInstance)
	{
		LibMCEnvHandle hDriverUpdateInstance = pDriverUpdateInstance.GetHandle();
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_QueryParametersEx(m_pHandle, hDriverUpdateInstance));
	}
	
	/**
	 * Method definitions for class CPLCCommand
	 */
	
	/**
	* CPLCCommand::SetIntegerParameter - Sets an integer parameter of the command
	* @param[in] sParameterName - Parameter Value
	* @param[in] nValue - Parameter Value
	*/
	void CPLCCommand::SetIntegerParameter(const std::string & sParameterName, const LibMCDriver_S7Net_int32 nValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_PLCCommand_SetIntegerParameter(m_pHandle, sParameterName.c_str(), nValue));
	}
	
	/**
	* CPLCCommand::SetStringParameter - Sets a string parameter of the command
	* @param[in] sParameterName - Parameter Value
	* @param[in] sValue - Parameter Value
	*/
	void CPLCCommand::SetStringParameter(const std::string & sParameterName, const std::string & sValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_PLCCommand_SetStringParameter(m_pHandle, sParameterName.c_str(), sValue.c_str()));
	}
	
	/**
	* CPLCCommand::SetBoolParameter - Sets a bool parameter of the command
	* @param[in] sParameterName - Parameter Value
	* @param[in] bValue - Parameter Value
	*/
	void CPLCCommand::SetBoolParameter(const std::string & sParameterName, const bool bValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_PLCCommand_SetBoolParameter(m_pHandle, sParameterName.c_str(), bValue));
	}
	
	/**
	* CPLCCommand::SetDoubleParameter - Sets a double parameter of the command
	* @param[in] sParameterName - Parameter Value
	* @param[in] dValue - Parameter Value
	*/
	void CPLCCommand::SetDoubleParameter(const std::string & sParameterName, const LibMCDriver_S7Net_double dValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_PLCCommand_SetDoubleParameter(m_pHandle, sParameterName.c_str(), dValue));
	}
	
	/**
	 * Method definitions for class CDriver_S7Net
	 */
	
	/**
	* CDriver_S7Net::Connect - Creates and initializes a new S7 PLC.
	* @param[in] eCPUType - S7 CPU Type
	* @param[in] sIPAddress - PLC IP Address
	* @param[in] nRack - Rack Number
	* @param[in] nSlot - Slot Number
	*/
	void CDriver_S7Net::Connect(const eS7CPUType eCPUType, const std::string & sIPAddress, const LibMCDriver_S7Net_uint32 nRack, const LibMCDriver_S7Net_uint32 nSlot)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_S7Net_Connect(m_pHandle, eCPUType, sIPAddress.c_str(), nRack, nSlot));
	}
	
	/**
	* CDriver_S7Net::Disconnect - Disconnects from the S7 PLC.
	*/
	void CDriver_S7Net::Disconnect()
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_S7Net_Disconnect(m_pHandle));
	}
	
	/**
	* CDriver_S7Net::CreateCommand - Create Command
	* @param[in] sCommand - Command to execute
	* @return Command instance
	*/
	PPLCCommand CDriver_S7Net::CreateCommand(const std::string & sCommand)
	{
		LibMCDriver_S7NetHandle hPLCCommand = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_S7Net_CreateCommand(m_pHandle, sCommand.c_str(), &hPLCCommand));
		
		if (!hPLCCommand) {
			CheckError(LIBMCDRIVER_S7NET_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CPLCCommand>(m_pWrapper, hPLCCommand);
	}
	
	/**
	* CDriver_S7Net::ExecuteCommand - Execute Command
	* @param[in] pPLCCommand - Command instance
	*/
	void CDriver_S7Net::ExecuteCommand(classParam<CPLCCommand> pPLCCommand)
	{
		LibMCDriver_S7NetHandle hPLCCommand = pPLCCommand.GetHandle();
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_S7Net_ExecuteCommand(m_pHandle, hPLCCommand));
	}
	
	/**
	* CDriver_S7Net::WaitForCommand - Wait for Command to finish executing
	* @param[in] pPLCCommand - Command instance
	* @param[in] nReactionTimeInMS - How much time the PLC may need to react to the command in Milliseconds. Will fail if no reaction in that time.
	* @param[in] nWaitForTimeInMS - How long to wait for the command to be finished in Milliseconds. Will return false if command has not finished.
	* @return Returns true if the command was finished successfully.
	*/
	bool CDriver_S7Net::WaitForCommand(classParam<CPLCCommand> pPLCCommand, const LibMCDriver_S7Net_uint32 nReactionTimeInMS, const LibMCDriver_S7Net_uint32 nWaitForTimeInMS)
	{
		LibMCDriver_S7NetHandle hPLCCommand = pPLCCommand.GetHandle();
		bool resultCommandSuccess = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_S7Net_WaitForCommand(m_pHandle, hPLCCommand, nReactionTimeInMS, nWaitForTimeInMS, &resultCommandSuccess));
		
		return resultCommandSuccess;
	}

} // namespace LibMCDriver_S7Net

#endif // __LIBMCDRIVER_S7NET_CPPHEADER_DYNAMIC_CPP

