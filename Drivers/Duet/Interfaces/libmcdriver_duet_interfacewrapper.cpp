/*++

Copyright (C) 2020 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.7.0-develop.

Abstract: This is an autogenerated C++ implementation file in order to allow easy
development of MC Driver Duet. The functions in this file need to be implemented. It needs to be generated only once.

Interface version: 1.0.0

*/

#include "libmcdriver_duet_abi.hpp"
#include "libmcdriver_duet_interfaces.hpp"
#include "libmcdriver_duet_interfaceexception.hpp"

#include <map>

using namespace LibMCDriver_Duet::Impl;

LibMCDriver_DuetResult handleLibMCDriver_DuetException(IBase * pIBaseClass, ELibMCDriver_DuetInterfaceException & Exception)
{
	LibMCDriver_DuetResult errorCode = Exception.getErrorCode();

	if (pIBaseClass != nullptr)
		pIBaseClass->RegisterErrorMessage(Exception.what());

	return errorCode;
}

LibMCDriver_DuetResult handleStdException(IBase * pIBaseClass, std::exception & Exception)
{
	LibMCDriver_DuetResult errorCode = LIBMCDRIVER_DUET_ERROR_GENERICEXCEPTION;

	if (pIBaseClass != nullptr)
		pIBaseClass->RegisterErrorMessage(Exception.what());

	return errorCode;
}

LibMCDriver_DuetResult handleUnhandledException(IBase * pIBaseClass)
{
	LibMCDriver_DuetResult errorCode = LIBMCDRIVER_DUET_ERROR_GENERICEXCEPTION;

	if (pIBaseClass != nullptr)
		pIBaseClass->RegisterErrorMessage("Unhandled Exception");

	return errorCode;
}



/*************************************************************************************************************************
 Class implementation for Base
**************************************************************************************************************************/

/*************************************************************************************************************************
 Class implementation for Driver
**************************************************************************************************************************/
LibMCDriver_DuetResult libmcdriver_duet_driver_getname(LibMCDriver_Duet_Driver pDriver, const LibMCDriver_Duet_uint32 nNameBufferSize, LibMCDriver_Duet_uint32* pNameNeededChars, char * pNameBuffer)
{
	IBase* pIBaseClass = (IBase *)pDriver;

	try {
		if ( (!pNameBuffer) && !(pNameNeededChars) )
			throw ELibMCDriver_DuetInterfaceException (LIBMCDRIVER_DUET_ERROR_INVALIDPARAM);
		std::string sName("");
		IDriver* pIDriver = dynamic_cast<IDriver*>(pIBaseClass);
		if (!pIDriver)
			throw ELibMCDriver_DuetInterfaceException(LIBMCDRIVER_DUET_ERROR_INVALIDCAST);
		
		bool isCacheCall = (pNameBuffer == nullptr);
		if (isCacheCall) {
			sName = pIDriver->GetName();

			pIDriver->_setCache (new ParameterCache_1<std::string> (sName));
		}
		else {
			auto cache = dynamic_cast<ParameterCache_1<std::string>*> (pIDriver->_getCache ());
			if (cache == nullptr)
				throw ELibMCDriver_DuetInterfaceException(LIBMCDRIVER_DUET_ERROR_INVALIDCAST);
			cache->retrieveData (sName);
			pIDriver->_setCache (nullptr);
		}
		
		if (pNameNeededChars)
			*pNameNeededChars = (LibMCDriver_Duet_uint32) (sName.size()+1);
		if (pNameBuffer) {
			if (sName.size() >= nNameBufferSize)
				throw ELibMCDriver_DuetInterfaceException (LIBMCDRIVER_DUET_ERROR_BUFFERTOOSMALL);
			for (size_t iName = 0; iName < sName.size(); iName++)
				pNameBuffer[iName] = sName[iName];
			pNameBuffer[sName.size()] = 0;
		}
		return LIBMCDRIVER_DUET_SUCCESS;
	}
	catch (ELibMCDriver_DuetInterfaceException & Exception) {
		return handleLibMCDriver_DuetException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_DuetResult libmcdriver_duet_driver_gettype(LibMCDriver_Duet_Driver pDriver, const LibMCDriver_Duet_uint32 nTypeBufferSize, LibMCDriver_Duet_uint32* pTypeNeededChars, char * pTypeBuffer)
{
	IBase* pIBaseClass = (IBase *)pDriver;

	try {
		if ( (!pTypeBuffer) && !(pTypeNeededChars) )
			throw ELibMCDriver_DuetInterfaceException (LIBMCDRIVER_DUET_ERROR_INVALIDPARAM);
		std::string sType("");
		IDriver* pIDriver = dynamic_cast<IDriver*>(pIBaseClass);
		if (!pIDriver)
			throw ELibMCDriver_DuetInterfaceException(LIBMCDRIVER_DUET_ERROR_INVALIDCAST);
		
		bool isCacheCall = (pTypeBuffer == nullptr);
		if (isCacheCall) {
			sType = pIDriver->GetType();

			pIDriver->_setCache (new ParameterCache_1<std::string> (sType));
		}
		else {
			auto cache = dynamic_cast<ParameterCache_1<std::string>*> (pIDriver->_getCache ());
			if (cache == nullptr)
				throw ELibMCDriver_DuetInterfaceException(LIBMCDRIVER_DUET_ERROR_INVALIDCAST);
			cache->retrieveData (sType);
			pIDriver->_setCache (nullptr);
		}
		
		if (pTypeNeededChars)
			*pTypeNeededChars = (LibMCDriver_Duet_uint32) (sType.size()+1);
		if (pTypeBuffer) {
			if (sType.size() >= nTypeBufferSize)
				throw ELibMCDriver_DuetInterfaceException (LIBMCDRIVER_DUET_ERROR_BUFFERTOOSMALL);
			for (size_t iType = 0; iType < sType.size(); iType++)
				pTypeBuffer[iType] = sType[iType];
			pTypeBuffer[sType.size()] = 0;
		}
		return LIBMCDRIVER_DUET_SUCCESS;
	}
	catch (ELibMCDriver_DuetInterfaceException & Exception) {
		return handleLibMCDriver_DuetException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_DuetResult libmcdriver_duet_driver_getversion(LibMCDriver_Duet_Driver pDriver, LibMCDriver_Duet_uint32 * pMajor, LibMCDriver_Duet_uint32 * pMinor, LibMCDriver_Duet_uint32 * pMicro, const LibMCDriver_Duet_uint32 nBuildBufferSize, LibMCDriver_Duet_uint32* pBuildNeededChars, char * pBuildBuffer)
{
	IBase* pIBaseClass = (IBase *)pDriver;

	try {
		if (!pMajor)
			throw ELibMCDriver_DuetInterfaceException (LIBMCDRIVER_DUET_ERROR_INVALIDPARAM);
		if (!pMinor)
			throw ELibMCDriver_DuetInterfaceException (LIBMCDRIVER_DUET_ERROR_INVALIDPARAM);
		if (!pMicro)
			throw ELibMCDriver_DuetInterfaceException (LIBMCDRIVER_DUET_ERROR_INVALIDPARAM);
		if ( (!pBuildBuffer) && !(pBuildNeededChars) )
			throw ELibMCDriver_DuetInterfaceException (LIBMCDRIVER_DUET_ERROR_INVALIDPARAM);
		std::string sBuild("");
		IDriver* pIDriver = dynamic_cast<IDriver*>(pIBaseClass);
		if (!pIDriver)
			throw ELibMCDriver_DuetInterfaceException(LIBMCDRIVER_DUET_ERROR_INVALIDCAST);
		
		bool isCacheCall = (pBuildBuffer == nullptr);
		if (isCacheCall) {
			pIDriver->GetVersion(*pMajor, *pMinor, *pMicro, sBuild);

			pIDriver->_setCache (new ParameterCache_4<LibMCDriver_Duet_uint32, LibMCDriver_Duet_uint32, LibMCDriver_Duet_uint32, std::string> (*pMajor, *pMinor, *pMicro, sBuild));
		}
		else {
			auto cache = dynamic_cast<ParameterCache_4<LibMCDriver_Duet_uint32, LibMCDriver_Duet_uint32, LibMCDriver_Duet_uint32, std::string>*> (pIDriver->_getCache ());
			if (cache == nullptr)
				throw ELibMCDriver_DuetInterfaceException(LIBMCDRIVER_DUET_ERROR_INVALIDCAST);
			cache->retrieveData (*pMajor, *pMinor, *pMicro, sBuild);
			pIDriver->_setCache (nullptr);
		}
		
		if (pBuildNeededChars)
			*pBuildNeededChars = (LibMCDriver_Duet_uint32) (sBuild.size()+1);
		if (pBuildBuffer) {
			if (sBuild.size() >= nBuildBufferSize)
				throw ELibMCDriver_DuetInterfaceException (LIBMCDRIVER_DUET_ERROR_BUFFERTOOSMALL);
			for (size_t iBuild = 0; iBuild < sBuild.size(); iBuild++)
				pBuildBuffer[iBuild] = sBuild[iBuild];
			pBuildBuffer[sBuild.size()] = 0;
		}
		return LIBMCDRIVER_DUET_SUCCESS;
	}
	catch (ELibMCDriver_DuetInterfaceException & Exception) {
		return handleLibMCDriver_DuetException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_DuetResult libmcdriver_duet_driver_getheaderinformation(LibMCDriver_Duet_Driver pDriver, const LibMCDriver_Duet_uint32 nNameSpaceBufferSize, LibMCDriver_Duet_uint32* pNameSpaceNeededChars, char * pNameSpaceBuffer, const LibMCDriver_Duet_uint32 nBaseNameBufferSize, LibMCDriver_Duet_uint32* pBaseNameNeededChars, char * pBaseNameBuffer)
{
	IBase* pIBaseClass = (IBase *)pDriver;

	try {
		if ( (!pNameSpaceBuffer) && !(pNameSpaceNeededChars) )
			throw ELibMCDriver_DuetInterfaceException (LIBMCDRIVER_DUET_ERROR_INVALIDPARAM);
		if ( (!pBaseNameBuffer) && !(pBaseNameNeededChars) )
			throw ELibMCDriver_DuetInterfaceException (LIBMCDRIVER_DUET_ERROR_INVALIDPARAM);
		std::string sNameSpace("");
		std::string sBaseName("");
		IDriver* pIDriver = dynamic_cast<IDriver*>(pIBaseClass);
		if (!pIDriver)
			throw ELibMCDriver_DuetInterfaceException(LIBMCDRIVER_DUET_ERROR_INVALIDCAST);
		
		bool isCacheCall = (pNameSpaceBuffer == nullptr) || (pBaseNameBuffer == nullptr);
		if (isCacheCall) {
			pIDriver->GetHeaderInformation(sNameSpace, sBaseName);

			pIDriver->_setCache (new ParameterCache_2<std::string, std::string> (sNameSpace, sBaseName));
		}
		else {
			auto cache = dynamic_cast<ParameterCache_2<std::string, std::string>*> (pIDriver->_getCache ());
			if (cache == nullptr)
				throw ELibMCDriver_DuetInterfaceException(LIBMCDRIVER_DUET_ERROR_INVALIDCAST);
			cache->retrieveData (sNameSpace, sBaseName);
			pIDriver->_setCache (nullptr);
		}
		
		if (pNameSpaceNeededChars)
			*pNameSpaceNeededChars = (LibMCDriver_Duet_uint32) (sNameSpace.size()+1);
		if (pNameSpaceBuffer) {
			if (sNameSpace.size() >= nNameSpaceBufferSize)
				throw ELibMCDriver_DuetInterfaceException (LIBMCDRIVER_DUET_ERROR_BUFFERTOOSMALL);
			for (size_t iNameSpace = 0; iNameSpace < sNameSpace.size(); iNameSpace++)
				pNameSpaceBuffer[iNameSpace] = sNameSpace[iNameSpace];
			pNameSpaceBuffer[sNameSpace.size()] = 0;
		}
		if (pBaseNameNeededChars)
			*pBaseNameNeededChars = (LibMCDriver_Duet_uint32) (sBaseName.size()+1);
		if (pBaseNameBuffer) {
			if (sBaseName.size() >= nBaseNameBufferSize)
				throw ELibMCDriver_DuetInterfaceException (LIBMCDRIVER_DUET_ERROR_BUFFERTOOSMALL);
			for (size_t iBaseName = 0; iBaseName < sBaseName.size(); iBaseName++)
				pBaseNameBuffer[iBaseName] = sBaseName[iBaseName];
			pBaseNameBuffer[sBaseName.size()] = 0;
		}
		return LIBMCDRIVER_DUET_SUCCESS;
	}
	catch (ELibMCDriver_DuetInterfaceException & Exception) {
		return handleLibMCDriver_DuetException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_DuetResult libmcdriver_duet_driver_queryparameters(LibMCDriver_Duet_Driver pDriver)
{
	IBase* pIBaseClass = (IBase *)pDriver;

	try {
		IDriver* pIDriver = dynamic_cast<IDriver*>(pIBaseClass);
		if (!pIDriver)
			throw ELibMCDriver_DuetInterfaceException(LIBMCDRIVER_DUET_ERROR_INVALIDCAST);
		
		pIDriver->QueryParameters();

		return LIBMCDRIVER_DUET_SUCCESS;
	}
	catch (ELibMCDriver_DuetInterfaceException & Exception) {
		return handleLibMCDriver_DuetException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}


/*************************************************************************************************************************
 Class implementation for Driver_Duet
**************************************************************************************************************************/
LibMCDriver_DuetResult libmcdriver_duet_driver_duet_connect(LibMCDriver_Duet_Driver_Duet pDriver_Duet, const char * pCOMPort, LibMCDriver_Duet_uint32 nBaudrate, LibMCDriver_Duet_double dStatusUpdateInterval, LibMCDriver_Duet_uint32 nConnectTimeout)
{
	IBase* pIBaseClass = (IBase *)pDriver_Duet;

	try {
		if (pCOMPort == nullptr)
			throw ELibMCDriver_DuetInterfaceException (LIBMCDRIVER_DUET_ERROR_INVALIDPARAM);
		std::string sCOMPort(pCOMPort);
		IDriver_Duet* pIDriver_Duet = dynamic_cast<IDriver_Duet*>(pIBaseClass);
		if (!pIDriver_Duet)
			throw ELibMCDriver_DuetInterfaceException(LIBMCDRIVER_DUET_ERROR_INVALIDCAST);
		
		pIDriver_Duet->Connect(sCOMPort, nBaudrate, dStatusUpdateInterval, nConnectTimeout);

		return LIBMCDRIVER_DUET_SUCCESS;
	}
	catch (ELibMCDriver_DuetInterfaceException & Exception) {
		return handleLibMCDriver_DuetException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_DuetResult libmcdriver_duet_driver_duet_disconnect(LibMCDriver_Duet_Driver_Duet pDriver_Duet)
{
	IBase* pIBaseClass = (IBase *)pDriver_Duet;

	try {
		IDriver_Duet* pIDriver_Duet = dynamic_cast<IDriver_Duet*>(pIBaseClass);
		if (!pIDriver_Duet)
			throw ELibMCDriver_DuetInterfaceException(LIBMCDRIVER_DUET_ERROR_INVALIDCAST);
		
		pIDriver_Duet->Disconnect();

		return LIBMCDRIVER_DUET_SUCCESS;
	}
	catch (ELibMCDriver_DuetInterfaceException & Exception) {
		return handleLibMCDriver_DuetException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_DuetResult libmcdriver_duet_driver_duet_setabsolutepositioning(LibMCDriver_Duet_Driver_Duet pDriver_Duet, bool bAbsolute)
{
	IBase* pIBaseClass = (IBase *)pDriver_Duet;

	try {
		IDriver_Duet* pIDriver_Duet = dynamic_cast<IDriver_Duet*>(pIBaseClass);
		if (!pIDriver_Duet)
			throw ELibMCDriver_DuetInterfaceException(LIBMCDRIVER_DUET_ERROR_INVALIDCAST);
		
		pIDriver_Duet->SetAbsolutePositioning(bAbsolute);

		return LIBMCDRIVER_DUET_SUCCESS;
	}
	catch (ELibMCDriver_DuetInterfaceException & Exception) {
		return handleLibMCDriver_DuetException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_DuetResult libmcdriver_duet_driver_duet_queryparameters(LibMCDriver_Duet_Driver_Duet pDriver_Duet)
{
	IBase* pIBaseClass = (IBase *)pDriver_Duet;

	try {
		IDriver_Duet* pIDriver_Duet = dynamic_cast<IDriver_Duet*>(pIBaseClass);
		if (!pIDriver_Duet)
			throw ELibMCDriver_DuetInterfaceException(LIBMCDRIVER_DUET_ERROR_INVALIDCAST);
		
		pIDriver_Duet->QueryParameters();

		return LIBMCDRIVER_DUET_SUCCESS;
	}
	catch (ELibMCDriver_DuetInterfaceException & Exception) {
		return handleLibMCDriver_DuetException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_DuetResult libmcdriver_duet_driver_duet_gettargetposition(LibMCDriver_Duet_Driver_Duet pDriver_Duet, LibMCDriver_Duet_double * pX, LibMCDriver_Duet_double * pY, LibMCDriver_Duet_double * pZ, LibMCDriver_Duet_double * pA, LibMCDriver_Duet_double * pB)
{
	IBase* pIBaseClass = (IBase *)pDriver_Duet;

	try {
		if (!pX)
			throw ELibMCDriver_DuetInterfaceException (LIBMCDRIVER_DUET_ERROR_INVALIDPARAM);
		if (!pY)
			throw ELibMCDriver_DuetInterfaceException (LIBMCDRIVER_DUET_ERROR_INVALIDPARAM);
		if (!pZ)
			throw ELibMCDriver_DuetInterfaceException (LIBMCDRIVER_DUET_ERROR_INVALIDPARAM);
		if (!pA)
			throw ELibMCDriver_DuetInterfaceException (LIBMCDRIVER_DUET_ERROR_INVALIDPARAM);
		if (!pB)
			throw ELibMCDriver_DuetInterfaceException (LIBMCDRIVER_DUET_ERROR_INVALIDPARAM);
		IDriver_Duet* pIDriver_Duet = dynamic_cast<IDriver_Duet*>(pIBaseClass);
		if (!pIDriver_Duet)
			throw ELibMCDriver_DuetInterfaceException(LIBMCDRIVER_DUET_ERROR_INVALIDCAST);
		
		pIDriver_Duet->GetTargetPosition(*pX, *pY, *pZ, *pA, *pB);

		return LIBMCDRIVER_DUET_SUCCESS;
	}
	catch (ELibMCDriver_DuetInterfaceException & Exception) {
		return handleLibMCDriver_DuetException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_DuetResult libmcdriver_duet_driver_duet_getcurrentposition(LibMCDriver_Duet_Driver_Duet pDriver_Duet, LibMCDriver_Duet_double * pX, LibMCDriver_Duet_double * pY, LibMCDriver_Duet_double * pZ, LibMCDriver_Duet_double * pA, LibMCDriver_Duet_double * pB)
{
	IBase* pIBaseClass = (IBase *)pDriver_Duet;

	try {
		if (!pX)
			throw ELibMCDriver_DuetInterfaceException (LIBMCDRIVER_DUET_ERROR_INVALIDPARAM);
		if (!pY)
			throw ELibMCDriver_DuetInterfaceException (LIBMCDRIVER_DUET_ERROR_INVALIDPARAM);
		if (!pZ)
			throw ELibMCDriver_DuetInterfaceException (LIBMCDRIVER_DUET_ERROR_INVALIDPARAM);
		if (!pA)
			throw ELibMCDriver_DuetInterfaceException (LIBMCDRIVER_DUET_ERROR_INVALIDPARAM);
		if (!pB)
			throw ELibMCDriver_DuetInterfaceException (LIBMCDRIVER_DUET_ERROR_INVALIDPARAM);
		IDriver_Duet* pIDriver_Duet = dynamic_cast<IDriver_Duet*>(pIBaseClass);
		if (!pIDriver_Duet)
			throw ELibMCDriver_DuetInterfaceException(LIBMCDRIVER_DUET_ERROR_INVALIDCAST);
		
		pIDriver_Duet->GetCurrentPosition(*pX, *pY, *pZ, *pA, *pB);

		return LIBMCDRIVER_DUET_SUCCESS;
	}
	catch (ELibMCDriver_DuetInterfaceException & Exception) {
		return handleLibMCDriver_DuetException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_DuetResult libmcdriver_duet_driver_duet_canexecutemovement(LibMCDriver_Duet_Driver_Duet pDriver_Duet, bool * pValue)
{
	IBase* pIBaseClass = (IBase *)pDriver_Duet;

	try {
		if (pValue == nullptr)
			throw ELibMCDriver_DuetInterfaceException (LIBMCDRIVER_DUET_ERROR_INVALIDPARAM);
		IDriver_Duet* pIDriver_Duet = dynamic_cast<IDriver_Duet*>(pIBaseClass);
		if (!pIDriver_Duet)
			throw ELibMCDriver_DuetInterfaceException(LIBMCDRIVER_DUET_ERROR_INVALIDCAST);
		
		*pValue = pIDriver_Duet->CanExecuteMovement();

		return LIBMCDRIVER_DUET_SUCCESS;
	}
	catch (ELibMCDriver_DuetInterfaceException & Exception) {
		return handleLibMCDriver_DuetException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_DuetResult libmcdriver_duet_driver_duet_ismoving(LibMCDriver_Duet_Driver_Duet pDriver_Duet, bool * pValue)
{
	IBase* pIBaseClass = (IBase *)pDriver_Duet;

	try {
		if (pValue == nullptr)
			throw ELibMCDriver_DuetInterfaceException (LIBMCDRIVER_DUET_ERROR_INVALIDPARAM);
		IDriver_Duet* pIDriver_Duet = dynamic_cast<IDriver_Duet*>(pIBaseClass);
		if (!pIDriver_Duet)
			throw ELibMCDriver_DuetInterfaceException(LIBMCDRIVER_DUET_ERROR_INVALIDCAST);
		
		*pValue = pIDriver_Duet->IsMoving();

		return LIBMCDRIVER_DUET_SUCCESS;
	}
	catch (ELibMCDriver_DuetInterfaceException & Exception) {
		return handleLibMCDriver_DuetException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_DuetResult libmcdriver_duet_driver_duet_ishomed(LibMCDriver_Duet_Driver_Duet pDriver_Duet, bool * pValue)
{
	IBase* pIBaseClass = (IBase *)pDriver_Duet;

	try {
		if (pValue == nullptr)
			throw ELibMCDriver_DuetInterfaceException (LIBMCDRIVER_DUET_ERROR_INVALIDPARAM);
		IDriver_Duet* pIDriver_Duet = dynamic_cast<IDriver_Duet*>(pIBaseClass);
		if (!pIDriver_Duet)
			throw ELibMCDriver_DuetInterfaceException(LIBMCDRIVER_DUET_ERROR_INVALIDCAST);
		
		*pValue = pIDriver_Duet->IsHomed();

		return LIBMCDRIVER_DUET_SUCCESS;
	}
	catch (ELibMCDriver_DuetInterfaceException & Exception) {
		return handleLibMCDriver_DuetException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_DuetResult libmcdriver_duet_driver_duet_isconnected(LibMCDriver_Duet_Driver_Duet pDriver_Duet, bool * pValue)
{
	IBase* pIBaseClass = (IBase *)pDriver_Duet;

	try {
		if (pValue == nullptr)
			throw ELibMCDriver_DuetInterfaceException (LIBMCDRIVER_DUET_ERROR_INVALIDPARAM);
		IDriver_Duet* pIDriver_Duet = dynamic_cast<IDriver_Duet*>(pIBaseClass);
		if (!pIDriver_Duet)
			throw ELibMCDriver_DuetInterfaceException(LIBMCDRIVER_DUET_ERROR_INVALIDCAST);
		
		*pValue = pIDriver_Duet->IsConnected();

		return LIBMCDRIVER_DUET_SUCCESS;
	}
	catch (ELibMCDriver_DuetInterfaceException & Exception) {
		return handleLibMCDriver_DuetException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_DuetResult libmcdriver_duet_driver_duet_movetoxy(LibMCDriver_Duet_Driver_Duet pDriver_Duet, LibMCDriver_Duet_double dX, LibMCDriver_Duet_double dY, LibMCDriver_Duet_double dLaserPower, LibMCDriver_Duet_double dSpeed)
{
	IBase* pIBaseClass = (IBase *)pDriver_Duet;

	try {
		IDriver_Duet* pIDriver_Duet = dynamic_cast<IDriver_Duet*>(pIBaseClass);
		if (!pIDriver_Duet)
			throw ELibMCDriver_DuetInterfaceException(LIBMCDRIVER_DUET_ERROR_INVALIDCAST);
		
		pIDriver_Duet->MoveToXY(dX, dY, dLaserPower, dSpeed);

		return LIBMCDRIVER_DUET_SUCCESS;
	}
	catch (ELibMCDriver_DuetInterfaceException & Exception) {
		return handleLibMCDriver_DuetException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_DuetResult libmcdriver_duet_driver_duet_movefasttoxy(LibMCDriver_Duet_Driver_Duet pDriver_Duet, LibMCDriver_Duet_double dX, LibMCDriver_Duet_double dY, LibMCDriver_Duet_double dSpeed)
{
	IBase* pIBaseClass = (IBase *)pDriver_Duet;

	try {
		IDriver_Duet* pIDriver_Duet = dynamic_cast<IDriver_Duet*>(pIBaseClass);
		if (!pIDriver_Duet)
			throw ELibMCDriver_DuetInterfaceException(LIBMCDRIVER_DUET_ERROR_INVALIDCAST);
		
		pIDriver_Duet->MoveFastToXY(dX, dY, dSpeed);

		return LIBMCDRIVER_DUET_SUCCESS;
	}
	catch (ELibMCDriver_DuetInterfaceException & Exception) {
		return handleLibMCDriver_DuetException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_DuetResult libmcdriver_duet_driver_duet_movetoz(LibMCDriver_Duet_Driver_Duet pDriver_Duet, LibMCDriver_Duet_double dZ, LibMCDriver_Duet_double dSpeed)
{
	IBase* pIBaseClass = (IBase *)pDriver_Duet;

	try {
		IDriver_Duet* pIDriver_Duet = dynamic_cast<IDriver_Duet*>(pIBaseClass);
		if (!pIDriver_Duet)
			throw ELibMCDriver_DuetInterfaceException(LIBMCDRIVER_DUET_ERROR_INVALIDCAST);
		
		pIDriver_Duet->MoveToZ(dZ, dSpeed);

		return LIBMCDRIVER_DUET_SUCCESS;
	}
	catch (ELibMCDriver_DuetInterfaceException & Exception) {
		return handleLibMCDriver_DuetException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_DuetResult libmcdriver_duet_driver_duet_movetoa(LibMCDriver_Duet_Driver_Duet pDriver_Duet, LibMCDriver_Duet_double dA, LibMCDriver_Duet_double dSpeed)
{
	IBase* pIBaseClass = (IBase *)pDriver_Duet;

	try {
		IDriver_Duet* pIDriver_Duet = dynamic_cast<IDriver_Duet*>(pIBaseClass);
		if (!pIDriver_Duet)
			throw ELibMCDriver_DuetInterfaceException(LIBMCDRIVER_DUET_ERROR_INVALIDCAST);
		
		pIDriver_Duet->MoveToA(dA, dSpeed);

		return LIBMCDRIVER_DUET_SUCCESS;
	}
	catch (ELibMCDriver_DuetInterfaceException & Exception) {
		return handleLibMCDriver_DuetException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_DuetResult libmcdriver_duet_driver_duet_movetob(LibMCDriver_Duet_Driver_Duet pDriver_Duet, LibMCDriver_Duet_double dB, LibMCDriver_Duet_double dSpeed)
{
	IBase* pIBaseClass = (IBase *)pDriver_Duet;

	try {
		IDriver_Duet* pIDriver_Duet = dynamic_cast<IDriver_Duet*>(pIBaseClass);
		if (!pIDriver_Duet)
			throw ELibMCDriver_DuetInterfaceException(LIBMCDRIVER_DUET_ERROR_INVALIDCAST);
		
		pIDriver_Duet->MoveToB(dB, dSpeed);

		return LIBMCDRIVER_DUET_SUCCESS;
	}
	catch (ELibMCDriver_DuetInterfaceException & Exception) {
		return handleLibMCDriver_DuetException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_DuetResult libmcdriver_duet_driver_duet_starthoming(LibMCDriver_Duet_Driver_Duet pDriver_Duet)
{
	IBase* pIBaseClass = (IBase *)pDriver_Duet;

	try {
		IDriver_Duet* pIDriver_Duet = dynamic_cast<IDriver_Duet*>(pIBaseClass);
		if (!pIDriver_Duet)
			throw ELibMCDriver_DuetInterfaceException(LIBMCDRIVER_DUET_ERROR_INVALIDCAST);
		
		pIDriver_Duet->StartHoming();

		return LIBMCDRIVER_DUET_SUCCESS;
	}
	catch (ELibMCDriver_DuetInterfaceException & Exception) {
		return handleLibMCDriver_DuetException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_DuetResult libmcdriver_duet_driver_duet_emergencystop(LibMCDriver_Duet_Driver_Duet pDriver_Duet)
{
	IBase* pIBaseClass = (IBase *)pDriver_Duet;

	try {
		IDriver_Duet* pIDriver_Duet = dynamic_cast<IDriver_Duet*>(pIBaseClass);
		if (!pIDriver_Duet)
			throw ELibMCDriver_DuetInterfaceException(LIBMCDRIVER_DUET_ERROR_INVALIDCAST);
		
		pIDriver_Duet->EmergencyStop();

		return LIBMCDRIVER_DUET_SUCCESS;
	}
	catch (ELibMCDriver_DuetInterfaceException & Exception) {
		return handleLibMCDriver_DuetException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_DuetResult libmcdriver_duet_driver_duet_setaxisposition(LibMCDriver_Duet_Driver_Duet pDriver_Duet, const char * pAxis, LibMCDriver_Duet_double dValue)
{
	IBase* pIBaseClass = (IBase *)pDriver_Duet;

	try {
		if (pAxis == nullptr)
			throw ELibMCDriver_DuetInterfaceException (LIBMCDRIVER_DUET_ERROR_INVALIDPARAM);
		std::string sAxis(pAxis);
		IDriver_Duet* pIDriver_Duet = dynamic_cast<IDriver_Duet*>(pIBaseClass);
		if (!pIDriver_Duet)
			throw ELibMCDriver_DuetInterfaceException(LIBMCDRIVER_DUET_ERROR_INVALIDCAST);
		
		pIDriver_Duet->SetAxisPosition(sAxis, dValue);

		return LIBMCDRIVER_DUET_SUCCESS;
	}
	catch (ELibMCDriver_DuetInterfaceException & Exception) {
		return handleLibMCDriver_DuetException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_DuetResult libmcdriver_duet_driver_duet_poweroff(LibMCDriver_Duet_Driver_Duet pDriver_Duet)
{
	IBase* pIBaseClass = (IBase *)pDriver_Duet;

	try {
		IDriver_Duet* pIDriver_Duet = dynamic_cast<IDriver_Duet*>(pIBaseClass);
		if (!pIDriver_Duet)
			throw ELibMCDriver_DuetInterfaceException(LIBMCDRIVER_DUET_ERROR_INVALIDCAST);
		
		pIDriver_Duet->PowerOff();

		return LIBMCDRIVER_DUET_SUCCESS;
	}
	catch (ELibMCDriver_DuetInterfaceException & Exception) {
		return handleLibMCDriver_DuetException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}



/*************************************************************************************************************************
 Function table lookup implementation
**************************************************************************************************************************/

LibMCDriver_DuetResult LibMCDriver_Duet::Impl::LibMCDriver_Duet_GetProcAddress (const char * pProcName, void ** ppProcAddress)
{
	if (pProcName == nullptr)
		return LIBMCDRIVER_DUET_ERROR_INVALIDPARAM;
	if (ppProcAddress == nullptr)
		return LIBMCDRIVER_DUET_ERROR_INVALIDPARAM;
	*ppProcAddress = nullptr;
	std::string sProcName (pProcName);
	
	if (sProcName == "libmcdriver_duet_driver_getname") 
		*ppProcAddress = (void*) &libmcdriver_duet_driver_getname;
	if (sProcName == "libmcdriver_duet_driver_gettype") 
		*ppProcAddress = (void*) &libmcdriver_duet_driver_gettype;
	if (sProcName == "libmcdriver_duet_driver_getversion") 
		*ppProcAddress = (void*) &libmcdriver_duet_driver_getversion;
	if (sProcName == "libmcdriver_duet_driver_getheaderinformation") 
		*ppProcAddress = (void*) &libmcdriver_duet_driver_getheaderinformation;
	if (sProcName == "libmcdriver_duet_driver_queryparameters") 
		*ppProcAddress = (void*) &libmcdriver_duet_driver_queryparameters;
	if (sProcName == "libmcdriver_duet_driver_duet_connect") 
		*ppProcAddress = (void*) &libmcdriver_duet_driver_duet_connect;
	if (sProcName == "libmcdriver_duet_driver_duet_disconnect") 
		*ppProcAddress = (void*) &libmcdriver_duet_driver_duet_disconnect;
	if (sProcName == "libmcdriver_duet_driver_duet_setabsolutepositioning") 
		*ppProcAddress = (void*) &libmcdriver_duet_driver_duet_setabsolutepositioning;
	if (sProcName == "libmcdriver_duet_driver_duet_queryparameters") 
		*ppProcAddress = (void*) &libmcdriver_duet_driver_duet_queryparameters;
	if (sProcName == "libmcdriver_duet_driver_duet_gettargetposition") 
		*ppProcAddress = (void*) &libmcdriver_duet_driver_duet_gettargetposition;
	if (sProcName == "libmcdriver_duet_driver_duet_getcurrentposition") 
		*ppProcAddress = (void*) &libmcdriver_duet_driver_duet_getcurrentposition;
	if (sProcName == "libmcdriver_duet_driver_duet_canexecutemovement") 
		*ppProcAddress = (void*) &libmcdriver_duet_driver_duet_canexecutemovement;
	if (sProcName == "libmcdriver_duet_driver_duet_ismoving") 
		*ppProcAddress = (void*) &libmcdriver_duet_driver_duet_ismoving;
	if (sProcName == "libmcdriver_duet_driver_duet_ishomed") 
		*ppProcAddress = (void*) &libmcdriver_duet_driver_duet_ishomed;
	if (sProcName == "libmcdriver_duet_driver_duet_isconnected") 
		*ppProcAddress = (void*) &libmcdriver_duet_driver_duet_isconnected;
	if (sProcName == "libmcdriver_duet_driver_duet_movetoxy") 
		*ppProcAddress = (void*) &libmcdriver_duet_driver_duet_movetoxy;
	if (sProcName == "libmcdriver_duet_driver_duet_movefasttoxy") 
		*ppProcAddress = (void*) &libmcdriver_duet_driver_duet_movefasttoxy;
	if (sProcName == "libmcdriver_duet_driver_duet_movetoz") 
		*ppProcAddress = (void*) &libmcdriver_duet_driver_duet_movetoz;
	if (sProcName == "libmcdriver_duet_driver_duet_movetoa") 
		*ppProcAddress = (void*) &libmcdriver_duet_driver_duet_movetoa;
	if (sProcName == "libmcdriver_duet_driver_duet_movetob") 
		*ppProcAddress = (void*) &libmcdriver_duet_driver_duet_movetob;
	if (sProcName == "libmcdriver_duet_driver_duet_starthoming") 
		*ppProcAddress = (void*) &libmcdriver_duet_driver_duet_starthoming;
	if (sProcName == "libmcdriver_duet_driver_duet_emergencystop") 
		*ppProcAddress = (void*) &libmcdriver_duet_driver_duet_emergencystop;
	if (sProcName == "libmcdriver_duet_driver_duet_setaxisposition") 
		*ppProcAddress = (void*) &libmcdriver_duet_driver_duet_setaxisposition;
	if (sProcName == "libmcdriver_duet_driver_duet_poweroff") 
		*ppProcAddress = (void*) &libmcdriver_duet_driver_duet_poweroff;
	if (sProcName == "libmcdriver_duet_getversion") 
		*ppProcAddress = (void*) &libmcdriver_duet_getversion;
	if (sProcName == "libmcdriver_duet_getlasterror") 
		*ppProcAddress = (void*) &libmcdriver_duet_getlasterror;
	if (sProcName == "libmcdriver_duet_releaseinstance") 
		*ppProcAddress = (void*) &libmcdriver_duet_releaseinstance;
	if (sProcName == "libmcdriver_duet_acquireinstance") 
		*ppProcAddress = (void*) &libmcdriver_duet_acquireinstance;
	if (sProcName == "libmcdriver_duet_injectcomponent") 
		*ppProcAddress = (void*) &libmcdriver_duet_injectcomponent;
	if (sProcName == "libmcdriver_duet_getsymbollookupmethod") 
		*ppProcAddress = (void*) &libmcdriver_duet_getsymbollookupmethod;
	if (sProcName == "libmcdriver_duet_createdriver") 
		*ppProcAddress = (void*) &libmcdriver_duet_createdriver;
	
	if (*ppProcAddress == nullptr) 
		return LIBMCDRIVER_DUET_ERROR_COULDNOTFINDLIBRARYEXPORT;
	return LIBMCDRIVER_DUET_SUCCESS;
}

/*************************************************************************************************************************
 Global functions implementation
**************************************************************************************************************************/
LibMCDriver_DuetResult libmcdriver_duet_getversion(LibMCDriver_Duet_uint32 * pMajor, LibMCDriver_Duet_uint32 * pMinor, LibMCDriver_Duet_uint32 * pMicro)
{
	IBase* pIBaseClass = nullptr;

	try {
		if (!pMajor)
			throw ELibMCDriver_DuetInterfaceException (LIBMCDRIVER_DUET_ERROR_INVALIDPARAM);
		if (!pMinor)
			throw ELibMCDriver_DuetInterfaceException (LIBMCDRIVER_DUET_ERROR_INVALIDPARAM);
		if (!pMicro)
			throw ELibMCDriver_DuetInterfaceException (LIBMCDRIVER_DUET_ERROR_INVALIDPARAM);
		CWrapper::GetVersion(*pMajor, *pMinor, *pMicro);

		return LIBMCDRIVER_DUET_SUCCESS;
	}
	catch (ELibMCDriver_DuetInterfaceException & Exception) {
		return handleLibMCDriver_DuetException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_DuetResult libmcdriver_duet_getlasterror(LibMCDriver_Duet_Base pInstance, const LibMCDriver_Duet_uint32 nErrorMessageBufferSize, LibMCDriver_Duet_uint32* pErrorMessageNeededChars, char * pErrorMessageBuffer, bool * pHasError)
{
	IBase* pIBaseClass = nullptr;

	try {
		if ( (!pErrorMessageBuffer) && !(pErrorMessageNeededChars) )
			throw ELibMCDriver_DuetInterfaceException (LIBMCDRIVER_DUET_ERROR_INVALIDPARAM);
		if (pHasError == nullptr)
			throw ELibMCDriver_DuetInterfaceException (LIBMCDRIVER_DUET_ERROR_INVALIDPARAM);
		IBase* pIBaseClassInstance = (IBase *)pInstance;
		IBase* pIInstance = dynamic_cast<IBase*>(pIBaseClassInstance);
		if (!pIInstance)
			throw ELibMCDriver_DuetInterfaceException (LIBMCDRIVER_DUET_ERROR_INVALIDCAST);
		
		std::string sErrorMessage("");
		*pHasError = CWrapper::GetLastError(pIInstance, sErrorMessage);

		if (pErrorMessageNeededChars)
			*pErrorMessageNeededChars = (LibMCDriver_Duet_uint32) (sErrorMessage.size()+1);
		if (pErrorMessageBuffer) {
			if (sErrorMessage.size() >= nErrorMessageBufferSize)
				throw ELibMCDriver_DuetInterfaceException (LIBMCDRIVER_DUET_ERROR_BUFFERTOOSMALL);
			for (size_t iErrorMessage = 0; iErrorMessage < sErrorMessage.size(); iErrorMessage++)
				pErrorMessageBuffer[iErrorMessage] = sErrorMessage[iErrorMessage];
			pErrorMessageBuffer[sErrorMessage.size()] = 0;
		}
		return LIBMCDRIVER_DUET_SUCCESS;
	}
	catch (ELibMCDriver_DuetInterfaceException & Exception) {
		return handleLibMCDriver_DuetException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_DuetResult libmcdriver_duet_releaseinstance(LibMCDriver_Duet_Base pInstance)
{
	IBase* pIBaseClass = nullptr;

	try {
		IBase* pIBaseClassInstance = (IBase *)pInstance;
		IBase* pIInstance = dynamic_cast<IBase*>(pIBaseClassInstance);
		if (!pIInstance)
			throw ELibMCDriver_DuetInterfaceException (LIBMCDRIVER_DUET_ERROR_INVALIDCAST);
		
		CWrapper::ReleaseInstance(pIInstance);

		return LIBMCDRIVER_DUET_SUCCESS;
	}
	catch (ELibMCDriver_DuetInterfaceException & Exception) {
		return handleLibMCDriver_DuetException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_DuetResult libmcdriver_duet_acquireinstance(LibMCDriver_Duet_Base pInstance)
{
	IBase* pIBaseClass = nullptr;

	try {
		IBase* pIBaseClassInstance = (IBase *)pInstance;
		IBase* pIInstance = dynamic_cast<IBase*>(pIBaseClassInstance);
		if (!pIInstance)
			throw ELibMCDriver_DuetInterfaceException (LIBMCDRIVER_DUET_ERROR_INVALIDCAST);
		
		CWrapper::AcquireInstance(pIInstance);

		return LIBMCDRIVER_DUET_SUCCESS;
	}
	catch (ELibMCDriver_DuetInterfaceException & Exception) {
		return handleLibMCDriver_DuetException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_DuetResult libmcdriver_duet_injectcomponent(const char * pNameSpace, LibMCDriver_Duet_pvoid pSymbolAddressMethod)
{
	IBase* pIBaseClass = nullptr;

	try {
		if (pNameSpace == nullptr)
			throw ELibMCDriver_DuetInterfaceException (LIBMCDRIVER_DUET_ERROR_INVALIDPARAM);
		std::string sNameSpace(pNameSpace);
		
		bool bNameSpaceFound = false;
		
		if (sNameSpace == "LibMCEnv") {
			if (CWrapper::sPLibMCEnvWrapper.get() != nullptr) {
				throw ELibMCDriver_DuetInterfaceException(LIBMCDRIVER_DUET_ERROR_COULDNOTLOADLIBRARY);
			}
			CWrapper::sPLibMCEnvWrapper = LibMCEnv::CWrapper::loadLibraryFromSymbolLookupMethod(pSymbolAddressMethod);
			bNameSpaceFound = true;
		}
		
		if (!bNameSpaceFound)
			throw ELibMCDriver_DuetInterfaceException(LIBMCDRIVER_DUET_ERROR_COULDNOTLOADLIBRARY);
		
		return LIBMCDRIVER_DUET_SUCCESS;
	}
	catch (ELibMCDriver_DuetInterfaceException & Exception) {
		return handleLibMCDriver_DuetException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_DuetResult libmcdriver_duet_getsymbollookupmethod(LibMCDriver_Duet_pvoid * pSymbolLookupMethod)
{
	IBase* pIBaseClass = nullptr;

	try {
		if (pSymbolLookupMethod == nullptr)
			throw ELibMCDriver_DuetInterfaceException (LIBMCDRIVER_DUET_ERROR_INVALIDPARAM);
		*pSymbolLookupMethod = (void*)&LibMCDriver_Duet::Impl::LibMCDriver_Duet_GetProcAddress;
		return LIBMCDRIVER_DUET_SUCCESS;
	}
	catch (ELibMCDriver_DuetInterfaceException & Exception) {
		return handleLibMCDriver_DuetException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_DuetResult libmcdriver_duet_createdriver(const char * pName, const char * pType, LibMCEnv_DriverEnvironment pDriverEnvironment, LibMCDriver_Duet_Driver * pInstance)
{
	IBase* pIBaseClass = nullptr;

	try {
		if (pName == nullptr)
			throw ELibMCDriver_DuetInterfaceException (LIBMCDRIVER_DUET_ERROR_INVALIDPARAM);
		if (pType == nullptr)
			throw ELibMCDriver_DuetInterfaceException (LIBMCDRIVER_DUET_ERROR_INVALIDPARAM);
		if (pInstance == nullptr)
			throw ELibMCDriver_DuetInterfaceException (LIBMCDRIVER_DUET_ERROR_INVALIDPARAM);
		std::string sName(pName);
		std::string sType(pType);
		LibMCEnv::PDriverEnvironment pIDriverEnvironment = std::make_shared<LibMCEnv::CDriverEnvironment>(CWrapper::sPLibMCEnvWrapper.get(), pDriverEnvironment);
		CWrapper::sPLibMCEnvWrapper->AcquireInstance(pIDriverEnvironment.get());
		if (!pIDriverEnvironment)
			throw ELibMCDriver_DuetInterfaceException (LIBMCDRIVER_DUET_ERROR_INVALIDCAST);
		
		IBase* pBaseInstance(nullptr);
		pBaseInstance = CWrapper::CreateDriver(sName, sType, pIDriverEnvironment);

		*pInstance = (IBase*)(pBaseInstance);
		return LIBMCDRIVER_DUET_SUCCESS;
	}
	catch (ELibMCDriver_DuetInterfaceException & Exception) {
		return handleLibMCDriver_DuetException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}


