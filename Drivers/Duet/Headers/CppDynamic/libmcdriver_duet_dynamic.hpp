/*++

Copyright (C) 2020 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.7.0-develop.

Abstract: This is an autogenerated C++-Header file in order to allow an easy
 use of MC Driver Duet

Interface version: 1.0.0

*/

#ifndef __LIBMCDRIVER_DUET_CPPHEADER_DYNAMIC_CPP
#define __LIBMCDRIVER_DUET_CPPHEADER_DYNAMIC_CPP

#include "libmcdriver_duet_types.hpp"
#include "libmcdriver_duet_dynamic.h"

#include "libmcenv_dynamic.hpp"

#ifdef _WIN32
#include <windows.h>
#else // _WIN32
#include <dlfcn.h>
#endif // _WIN32
#include <string>
#include <memory>
#include <vector>
#include <exception>

namespace LibMCDriver_Duet {

/*************************************************************************************************************************
 Forward Declaration of all classes
**************************************************************************************************************************/
class CWrapper;
class CBase;
class CDriver;
class CDriver_Duet;

/*************************************************************************************************************************
 Declaration of deprecated class types
**************************************************************************************************************************/
typedef CWrapper CLibMCDriver_DuetWrapper;
typedef CBase CLibMCDriver_DuetBase;
typedef CDriver CLibMCDriver_DuetDriver;
typedef CDriver_Duet CLibMCDriver_DuetDriver_Duet;

/*************************************************************************************************************************
 Declaration of shared pointer types
**************************************************************************************************************************/
typedef std::shared_ptr<CWrapper> PWrapper;
typedef std::shared_ptr<CBase> PBase;
typedef std::shared_ptr<CDriver> PDriver;
typedef std::shared_ptr<CDriver_Duet> PDriver_Duet;

/*************************************************************************************************************************
 Declaration of deprecated shared pointer types
**************************************************************************************************************************/
typedef PWrapper PLibMCDriver_DuetWrapper;
typedef PBase PLibMCDriver_DuetBase;
typedef PDriver PLibMCDriver_DuetDriver;
typedef PDriver_Duet PLibMCDriver_DuetDriver_Duet;


/*************************************************************************************************************************
 classParam Definition
**************************************************************************************************************************/

template<class T> class classParam {
private:
	const T* m_ptr;

public:
	classParam(const T* ptr)
		: m_ptr (ptr)
	{
	}

	classParam(std::shared_ptr <T> sharedPtr)
		: m_ptr (sharedPtr.get())
	{
	}

	LibMCDriver_DuetHandle GetHandle()
	{
		if (m_ptr != nullptr)
			return m_ptr->handle();
		return nullptr;
	}
};

/*************************************************************************************************************************
 Class ELibMCDriver_DuetException 
**************************************************************************************************************************/
class ELibMCDriver_DuetException : public std::exception {
protected:
	/**
	* Error code for the Exception.
	*/
	LibMCDriver_DuetResult m_errorCode;
	/**
	* Error message for the Exception.
	*/
	std::string m_errorMessage;

public:
	/**
	* Exception Constructor.
	*/
	ELibMCDriver_DuetException(LibMCDriver_DuetResult errorCode, const std::string & sErrorMessage)
		: m_errorMessage("LibMCDriver_Duet Error " + std::to_string(errorCode) + " (" + sErrorMessage + ")")
	{
		m_errorCode = errorCode;
	}

	/**
	* Returns error code
	*/
	LibMCDriver_DuetResult getErrorCode() const noexcept
	{
		return m_errorCode;
	}

	/**
	* Returns error message
	*/
	const char* what() const noexcept
	{
		return m_errorMessage.c_str();
	}

};

/*************************************************************************************************************************
 Class CInputVector
**************************************************************************************************************************/
template <typename T>
class CInputVector {
private:
	
	const T* m_data;
	size_t m_size;
	
public:
	
	CInputVector( const std::vector<T>& vec)
		: m_data( vec.data() ), m_size( vec.size() )
	{
	}
	
	CInputVector( const T* in_data, size_t in_size)
		: m_data( in_data ), m_size(in_size )
	{
	}
	
	const T* data() const
	{
		return m_data;
	}
	
	size_t size() const
	{
		return m_size;
	}
	
};

// declare deprecated class name
template<typename T>
using CLibMCDriver_DuetInputVector = CInputVector<T>;

/*************************************************************************************************************************
 Class CWrapper 
**************************************************************************************************************************/
class CWrapper {
public:
	
	CWrapper(void* pSymbolLookupMethod)
	{
		CheckError(nullptr, initWrapperTable(&m_WrapperTable));
		CheckError(nullptr, loadWrapperTableFromSymbolLookupMethod(&m_WrapperTable, pSymbolLookupMethod));
		
		CheckError(nullptr, checkBinaryVersion());
	}
	
	CWrapper(const std::string &sFileName)
	{
		CheckError(nullptr, initWrapperTable(&m_WrapperTable));
		CheckError(nullptr, loadWrapperTable(&m_WrapperTable, sFileName.c_str()));
		
		CheckError(nullptr, checkBinaryVersion());
	}
	
	static PWrapper loadLibrary(const std::string &sFileName)
	{
		return std::make_shared<CWrapper>(sFileName);
	}
	
	static PWrapper loadLibraryFromSymbolLookupMethod(void* pSymbolLookupMethod)
	{
		return std::make_shared<CWrapper>(pSymbolLookupMethod);
	}
	
	~CWrapper()
	{
		releaseWrapperTable(&m_WrapperTable);
	}
	
	inline void CheckError(CBase * pBaseClass, LibMCDriver_DuetResult nResult);

	inline void GetVersion(LibMCDriver_Duet_uint32 & nMajor, LibMCDriver_Duet_uint32 & nMinor, LibMCDriver_Duet_uint32 & nMicro);
	inline bool GetLastError(classParam<CBase> pInstance, std::string & sErrorMessage);
	inline void ReleaseInstance(classParam<CBase> pInstance);
	inline void AcquireInstance(classParam<CBase> pInstance);
	inline void InjectComponent(const std::string & sNameSpace, const LibMCDriver_Duet_pvoid pSymbolAddressMethod);
	inline LibMCDriver_Duet_pvoid GetSymbolLookupMethod();
	inline PDriver CreateDriver(const std::string & sName, const std::string & sType, classParam<LibMCEnv::CDriverEnvironment> pDriverEnvironment);

private:
	sLibMCDriver_DuetDynamicWrapperTable m_WrapperTable;
	// Injected Components
	LibMCEnv::PWrapper m_pLibMCEnvWrapper;

	
	LibMCDriver_DuetResult checkBinaryVersion()
	{
		LibMCDriver_Duet_uint32 nMajor, nMinor, nMicro;
		GetVersion(nMajor, nMinor, nMicro);
		if ( (nMajor != LIBMCDRIVER_DUET_VERSION_MAJOR) || (nMinor < LIBMCDRIVER_DUET_VERSION_MINOR) ) {
			return LIBMCDRIVER_DUET_ERROR_INCOMPATIBLEBINARYVERSION;
		}
		return LIBMCDRIVER_DUET_SUCCESS;
	}
	LibMCDriver_DuetResult initWrapperTable(sLibMCDriver_DuetDynamicWrapperTable * pWrapperTable);
	LibMCDriver_DuetResult releaseWrapperTable(sLibMCDriver_DuetDynamicWrapperTable * pWrapperTable);
	LibMCDriver_DuetResult loadWrapperTable(sLibMCDriver_DuetDynamicWrapperTable * pWrapperTable, const char * pLibraryFileName);
	LibMCDriver_DuetResult loadWrapperTableFromSymbolLookupMethod(sLibMCDriver_DuetDynamicWrapperTable * pWrapperTable, void* pSymbolLookupMethod);

	friend class CBase;
	friend class CDriver;
	friend class CDriver_Duet;

};

	
/*************************************************************************************************************************
 Class CBase 
**************************************************************************************************************************/
class CBase {
public:
	
protected:
	/* Wrapper Object that created the class. */
	CWrapper * m_pWrapper;
	/* Handle to Instance in library*/
	LibMCDriver_DuetHandle m_pHandle;

	/* Checks for an Error code and raises Exceptions */
	void CheckError(LibMCDriver_DuetResult nResult)
	{
		if (m_pWrapper != nullptr)
			m_pWrapper->CheckError(this, nResult);
	}
public:
	/**
	* CBase::CBase - Constructor for Base class.
	*/
	CBase(CWrapper * pWrapper, LibMCDriver_DuetHandle pHandle)
		: m_pWrapper(pWrapper), m_pHandle(pHandle)
	{
	}

	/**
	* CBase::~CBase - Destructor for Base class.
	*/
	virtual ~CBase()
	{
		if (m_pWrapper != nullptr)
			m_pWrapper->ReleaseInstance(this);
		m_pWrapper = nullptr;
	}

	/**
	* CBase::handle - Returns handle to instance.
	*/
	LibMCDriver_DuetHandle handle() const
	{
		return m_pHandle;
	}

	/**
	* CBase::wrapper - Returns wrapper instance.
	*/
	CWrapper * wrapper() const
	{
		return m_pWrapper;
	}
	
	friend class CWrapper;
};
	
/*************************************************************************************************************************
 Class CDriver 
**************************************************************************************************************************/
class CDriver : public CBase {
public:
	
	/**
	* CDriver::CDriver - Constructor for Driver class.
	*/
	CDriver(CWrapper* pWrapper, LibMCDriver_DuetHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline std::string GetName();
	inline std::string GetType();
	inline void GetVersion(LibMCDriver_Duet_uint32 & nMajor, LibMCDriver_Duet_uint32 & nMinor, LibMCDriver_Duet_uint32 & nMicro, std::string & sBuild);
	inline void GetHeaderInformation(std::string & sNameSpace, std::string & sBaseName);
	inline void QueryParameters();
};
	
/*************************************************************************************************************************
 Class CDriver_Duet 
**************************************************************************************************************************/
class CDriver_Duet : public CDriver {
public:
	
	/**
	* CDriver_Duet::CDriver_Duet - Constructor for Driver_Duet class.
	*/
	CDriver_Duet(CWrapper* pWrapper, LibMCDriver_DuetHandle pHandle)
		: CDriver(pWrapper, pHandle)
	{
	}
	
	inline void Connect(const std::string & sCOMPort, const LibMCDriver_Duet_uint32 nBaudrate, const LibMCDriver_Duet_double dStatusUpdateInterval, const LibMCDriver_Duet_uint32 nConnectTimeout);
	inline void Disconnect();
	inline void SetAbsolutePositioning(const bool bAbsolute);
	inline void QueryParameters();
	inline void GetTargetPosition(LibMCDriver_Duet_double & dX, LibMCDriver_Duet_double & dY, LibMCDriver_Duet_double & dZ, LibMCDriver_Duet_double & dA, LibMCDriver_Duet_double & dB);
	inline void GetCurrentPosition(LibMCDriver_Duet_double & dX, LibMCDriver_Duet_double & dY, LibMCDriver_Duet_double & dZ, LibMCDriver_Duet_double & dA, LibMCDriver_Duet_double & dB);
	inline bool CanExecuteMovement();
	inline bool IsMoving();
	inline bool IsHomed();
	inline bool IsConnected();
	inline void MoveToXY(const LibMCDriver_Duet_double dX, const LibMCDriver_Duet_double dY, const LibMCDriver_Duet_double dLaserPower, const LibMCDriver_Duet_double dSpeed);
	inline void MoveFastToXY(const LibMCDriver_Duet_double dX, const LibMCDriver_Duet_double dY, const LibMCDriver_Duet_double dSpeed);
	inline void MoveToZ(const LibMCDriver_Duet_double dZ, const LibMCDriver_Duet_double dSpeed);
	inline void MoveToA(const LibMCDriver_Duet_double dA, const LibMCDriver_Duet_double dSpeed);
	inline void MoveToB(const LibMCDriver_Duet_double dB, const LibMCDriver_Duet_double dSpeed);
	inline void StartHoming();
	inline void EmergencyStop();
	inline void SetAxisPosition(const std::string & sAxis, const LibMCDriver_Duet_double dValue);
	inline void PowerOff();
};
	
	/**
	* CWrapper::GetVersion - retrieves the binary version of this library.
	* @param[out] nMajor - returns the major version of this library
	* @param[out] nMinor - returns the minor version of this library
	* @param[out] nMicro - returns the micro version of this library
	*/
	inline void CWrapper::GetVersion(LibMCDriver_Duet_uint32 & nMajor, LibMCDriver_Duet_uint32 & nMinor, LibMCDriver_Duet_uint32 & nMicro)
	{
		CheckError(nullptr,m_WrapperTable.m_GetVersion(&nMajor, &nMinor, &nMicro));
	}
	
	/**
	* CWrapper::GetLastError - Returns the last error recorded on this object
	* @param[in] pInstance - Instance Handle
	* @param[out] sErrorMessage - Message of the last error
	* @return Is there a last error to query
	*/
	inline bool CWrapper::GetLastError(classParam<CBase> pInstance, std::string & sErrorMessage)
	{
		LibMCDriver_DuetHandle hInstance = pInstance.GetHandle();
		LibMCDriver_Duet_uint32 bytesNeededErrorMessage = 0;
		LibMCDriver_Duet_uint32 bytesWrittenErrorMessage = 0;
		bool resultHasError = 0;
		CheckError(nullptr,m_WrapperTable.m_GetLastError(hInstance, 0, &bytesNeededErrorMessage, nullptr, &resultHasError));
		std::vector<char> bufferErrorMessage(bytesNeededErrorMessage);
		CheckError(nullptr,m_WrapperTable.m_GetLastError(hInstance, bytesNeededErrorMessage, &bytesWrittenErrorMessage, &bufferErrorMessage[0], &resultHasError));
		sErrorMessage = std::string(&bufferErrorMessage[0]);
		
		return resultHasError;
	}
	
	/**
	* CWrapper::ReleaseInstance - Releases shared ownership of an Instance
	* @param[in] pInstance - Instance Handle
	*/
	inline void CWrapper::ReleaseInstance(classParam<CBase> pInstance)
	{
		LibMCDriver_DuetHandle hInstance = pInstance.GetHandle();
		CheckError(nullptr,m_WrapperTable.m_ReleaseInstance(hInstance));
	}
	
	/**
	* CWrapper::AcquireInstance - Acquires shared ownership of an Instance
	* @param[in] pInstance - Instance Handle
	*/
	inline void CWrapper::AcquireInstance(classParam<CBase> pInstance)
	{
		LibMCDriver_DuetHandle hInstance = pInstance.GetHandle();
		CheckError(nullptr,m_WrapperTable.m_AcquireInstance(hInstance));
	}
	
	/**
	* CWrapper::InjectComponent - Injects an imported component for usage within this component
	* @param[in] sNameSpace - NameSpace of the injected component
	* @param[in] pSymbolAddressMethod - Address of the SymbolAddressMethod of the injected component
	*/
	inline void CWrapper::InjectComponent(const std::string & sNameSpace, const LibMCDriver_Duet_pvoid pSymbolAddressMethod)
	{
		CheckError(nullptr,m_WrapperTable.m_InjectComponent(sNameSpace.c_str(), pSymbolAddressMethod));
		
		bool bNameSpaceFound = false;
		if (sNameSpace == "LibMCEnv") {
			if (m_pLibMCEnvWrapper != nullptr) {
				throw ELibMCDriver_DuetException(LIBMCDRIVER_DUET_ERROR_COULDNOTLOADLIBRARY, "Library with namespace " + sNameSpace + " is already registered.");
			}
			m_pLibMCEnvWrapper = LibMCEnv::CWrapper::loadLibraryFromSymbolLookupMethod(pSymbolAddressMethod);
			bNameSpaceFound = true;
		}
		if (!bNameSpaceFound)
			throw ELibMCDriver_DuetException(LIBMCDRIVER_DUET_ERROR_COULDNOTLOADLIBRARY, "Unknown namespace " + sNameSpace);
	}
	
	/**
	* CWrapper::GetSymbolLookupMethod - Returns the address of the SymbolLookupMethod
	* @return Address of the SymbolAddressMethod
	*/
	inline LibMCDriver_Duet_pvoid CWrapper::GetSymbolLookupMethod()
	{
		LibMCDriver_Duet_pvoid resultSymbolLookupMethod = 0;
		CheckError(nullptr,m_WrapperTable.m_GetSymbolLookupMethod(&resultSymbolLookupMethod));
		
		return resultSymbolLookupMethod;
	}
	
	/**
	* CWrapper::CreateDriver - Creates a driver instance with a specific name.
	* @param[in] sName - Name of driver to be created.
	* @param[in] sType - Type of driver to be created.
	* @param[in] pDriverEnvironment - Environment of this driver.
	* @return New Driver instance
	*/
	inline PDriver CWrapper::CreateDriver(const std::string & sName, const std::string & sType, classParam<LibMCEnv::CDriverEnvironment> pDriverEnvironment)
	{
		LibMCEnvHandle hDriverEnvironment = pDriverEnvironment.GetHandle();
		LibMCDriver_DuetHandle hInstance = nullptr;
		CheckError(nullptr,m_WrapperTable.m_CreateDriver(sName.c_str(), sType.c_str(), hDriverEnvironment, &hInstance));
		
		if (!hInstance) {
			CheckError(nullptr,LIBMCDRIVER_DUET_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CDriver>(this, hInstance);
	}
	
	inline void CWrapper::CheckError(CBase * pBaseClass, LibMCDriver_DuetResult nResult)
	{
		if (nResult != 0) {
			std::string sErrorMessage;
			if (pBaseClass != nullptr) {
				GetLastError(pBaseClass, sErrorMessage);
			}
			throw ELibMCDriver_DuetException(nResult, sErrorMessage);
		}
	}
	

	inline LibMCDriver_DuetResult CWrapper::initWrapperTable(sLibMCDriver_DuetDynamicWrapperTable * pWrapperTable)
	{
		if (pWrapperTable == nullptr)
			return LIBMCDRIVER_DUET_ERROR_INVALIDPARAM;
		
		pWrapperTable->m_LibraryHandle = nullptr;
		pWrapperTable->m_Driver_GetName = nullptr;
		pWrapperTable->m_Driver_GetType = nullptr;
		pWrapperTable->m_Driver_GetVersion = nullptr;
		pWrapperTable->m_Driver_GetHeaderInformation = nullptr;
		pWrapperTable->m_Driver_QueryParameters = nullptr;
		pWrapperTable->m_Driver_Duet_Connect = nullptr;
		pWrapperTable->m_Driver_Duet_Disconnect = nullptr;
		pWrapperTable->m_Driver_Duet_SetAbsolutePositioning = nullptr;
		pWrapperTable->m_Driver_Duet_QueryParameters = nullptr;
		pWrapperTable->m_Driver_Duet_GetTargetPosition = nullptr;
		pWrapperTable->m_Driver_Duet_GetCurrentPosition = nullptr;
		pWrapperTable->m_Driver_Duet_CanExecuteMovement = nullptr;
		pWrapperTable->m_Driver_Duet_IsMoving = nullptr;
		pWrapperTable->m_Driver_Duet_IsHomed = nullptr;
		pWrapperTable->m_Driver_Duet_IsConnected = nullptr;
		pWrapperTable->m_Driver_Duet_MoveToXY = nullptr;
		pWrapperTable->m_Driver_Duet_MoveFastToXY = nullptr;
		pWrapperTable->m_Driver_Duet_MoveToZ = nullptr;
		pWrapperTable->m_Driver_Duet_MoveToA = nullptr;
		pWrapperTable->m_Driver_Duet_MoveToB = nullptr;
		pWrapperTable->m_Driver_Duet_StartHoming = nullptr;
		pWrapperTable->m_Driver_Duet_EmergencyStop = nullptr;
		pWrapperTable->m_Driver_Duet_SetAxisPosition = nullptr;
		pWrapperTable->m_Driver_Duet_PowerOff = nullptr;
		pWrapperTable->m_GetVersion = nullptr;
		pWrapperTable->m_GetLastError = nullptr;
		pWrapperTable->m_ReleaseInstance = nullptr;
		pWrapperTable->m_AcquireInstance = nullptr;
		pWrapperTable->m_InjectComponent = nullptr;
		pWrapperTable->m_GetSymbolLookupMethod = nullptr;
		pWrapperTable->m_CreateDriver = nullptr;
		
		return LIBMCDRIVER_DUET_SUCCESS;
	}

	inline LibMCDriver_DuetResult CWrapper::releaseWrapperTable(sLibMCDriver_DuetDynamicWrapperTable * pWrapperTable)
	{
		if (pWrapperTable == nullptr)
			return LIBMCDRIVER_DUET_ERROR_INVALIDPARAM;
		
		if (pWrapperTable->m_LibraryHandle != nullptr) {
		#ifdef _WIN32
			HMODULE hModule = (HMODULE) pWrapperTable->m_LibraryHandle;
			FreeLibrary(hModule);
		#else // _WIN32
			dlclose(pWrapperTable->m_LibraryHandle);
		#endif // _WIN32
			return initWrapperTable(pWrapperTable);
		}
		
		return LIBMCDRIVER_DUET_SUCCESS;
	}

	inline LibMCDriver_DuetResult CWrapper::loadWrapperTable(sLibMCDriver_DuetDynamicWrapperTable * pWrapperTable, const char * pLibraryFileName)
	{
		if (pWrapperTable == nullptr)
			return LIBMCDRIVER_DUET_ERROR_INVALIDPARAM;
		if (pLibraryFileName == nullptr)
			return LIBMCDRIVER_DUET_ERROR_INVALIDPARAM;
		
		#ifdef _WIN32
		// Convert filename to UTF16-string
		int nLength = (int)strlen(pLibraryFileName);
		int nBufferSize = nLength * 2 + 2;
		std::vector<wchar_t> wsLibraryFileName(nBufferSize);
		int nResult = MultiByteToWideChar(CP_UTF8, 0, pLibraryFileName, nLength, &wsLibraryFileName[0], nBufferSize);
		if (nResult == 0)
			return LIBMCDRIVER_DUET_ERROR_COULDNOTLOADLIBRARY;
		
		HMODULE hLibrary = LoadLibraryW(wsLibraryFileName.data());
		if (hLibrary == 0) 
			return LIBMCDRIVER_DUET_ERROR_COULDNOTLOADLIBRARY;
		#else // _WIN32
		void* hLibrary = dlopen(pLibraryFileName, RTLD_LAZY);
		if (hLibrary == 0) 
			return LIBMCDRIVER_DUET_ERROR_COULDNOTLOADLIBRARY;
		dlerror();
		#endif // _WIN32
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_GetName = (PLibMCDriver_DuetDriver_GetNamePtr) GetProcAddress(hLibrary, "libmcdriver_duet_driver_getname");
		#else // _WIN32
		pWrapperTable->m_Driver_GetName = (PLibMCDriver_DuetDriver_GetNamePtr) dlsym(hLibrary, "libmcdriver_duet_driver_getname");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_GetName == nullptr)
			return LIBMCDRIVER_DUET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_GetType = (PLibMCDriver_DuetDriver_GetTypePtr) GetProcAddress(hLibrary, "libmcdriver_duet_driver_gettype");
		#else // _WIN32
		pWrapperTable->m_Driver_GetType = (PLibMCDriver_DuetDriver_GetTypePtr) dlsym(hLibrary, "libmcdriver_duet_driver_gettype");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_GetType == nullptr)
			return LIBMCDRIVER_DUET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_GetVersion = (PLibMCDriver_DuetDriver_GetVersionPtr) GetProcAddress(hLibrary, "libmcdriver_duet_driver_getversion");
		#else // _WIN32
		pWrapperTable->m_Driver_GetVersion = (PLibMCDriver_DuetDriver_GetVersionPtr) dlsym(hLibrary, "libmcdriver_duet_driver_getversion");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_GetVersion == nullptr)
			return LIBMCDRIVER_DUET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_GetHeaderInformation = (PLibMCDriver_DuetDriver_GetHeaderInformationPtr) GetProcAddress(hLibrary, "libmcdriver_duet_driver_getheaderinformation");
		#else // _WIN32
		pWrapperTable->m_Driver_GetHeaderInformation = (PLibMCDriver_DuetDriver_GetHeaderInformationPtr) dlsym(hLibrary, "libmcdriver_duet_driver_getheaderinformation");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_GetHeaderInformation == nullptr)
			return LIBMCDRIVER_DUET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_QueryParameters = (PLibMCDriver_DuetDriver_QueryParametersPtr) GetProcAddress(hLibrary, "libmcdriver_duet_driver_queryparameters");
		#else // _WIN32
		pWrapperTable->m_Driver_QueryParameters = (PLibMCDriver_DuetDriver_QueryParametersPtr) dlsym(hLibrary, "libmcdriver_duet_driver_queryparameters");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_QueryParameters == nullptr)
			return LIBMCDRIVER_DUET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_Duet_Connect = (PLibMCDriver_DuetDriver_Duet_ConnectPtr) GetProcAddress(hLibrary, "libmcdriver_duet_driver_duet_connect");
		#else // _WIN32
		pWrapperTable->m_Driver_Duet_Connect = (PLibMCDriver_DuetDriver_Duet_ConnectPtr) dlsym(hLibrary, "libmcdriver_duet_driver_duet_connect");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_Duet_Connect == nullptr)
			return LIBMCDRIVER_DUET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_Duet_Disconnect = (PLibMCDriver_DuetDriver_Duet_DisconnectPtr) GetProcAddress(hLibrary, "libmcdriver_duet_driver_duet_disconnect");
		#else // _WIN32
		pWrapperTable->m_Driver_Duet_Disconnect = (PLibMCDriver_DuetDriver_Duet_DisconnectPtr) dlsym(hLibrary, "libmcdriver_duet_driver_duet_disconnect");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_Duet_Disconnect == nullptr)
			return LIBMCDRIVER_DUET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_Duet_SetAbsolutePositioning = (PLibMCDriver_DuetDriver_Duet_SetAbsolutePositioningPtr) GetProcAddress(hLibrary, "libmcdriver_duet_driver_duet_setabsolutepositioning");
		#else // _WIN32
		pWrapperTable->m_Driver_Duet_SetAbsolutePositioning = (PLibMCDriver_DuetDriver_Duet_SetAbsolutePositioningPtr) dlsym(hLibrary, "libmcdriver_duet_driver_duet_setabsolutepositioning");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_Duet_SetAbsolutePositioning == nullptr)
			return LIBMCDRIVER_DUET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_Duet_QueryParameters = (PLibMCDriver_DuetDriver_Duet_QueryParametersPtr) GetProcAddress(hLibrary, "libmcdriver_duet_driver_duet_queryparameters");
		#else // _WIN32
		pWrapperTable->m_Driver_Duet_QueryParameters = (PLibMCDriver_DuetDriver_Duet_QueryParametersPtr) dlsym(hLibrary, "libmcdriver_duet_driver_duet_queryparameters");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_Duet_QueryParameters == nullptr)
			return LIBMCDRIVER_DUET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_Duet_GetTargetPosition = (PLibMCDriver_DuetDriver_Duet_GetTargetPositionPtr) GetProcAddress(hLibrary, "libmcdriver_duet_driver_duet_gettargetposition");
		#else // _WIN32
		pWrapperTable->m_Driver_Duet_GetTargetPosition = (PLibMCDriver_DuetDriver_Duet_GetTargetPositionPtr) dlsym(hLibrary, "libmcdriver_duet_driver_duet_gettargetposition");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_Duet_GetTargetPosition == nullptr)
			return LIBMCDRIVER_DUET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_Duet_GetCurrentPosition = (PLibMCDriver_DuetDriver_Duet_GetCurrentPositionPtr) GetProcAddress(hLibrary, "libmcdriver_duet_driver_duet_getcurrentposition");
		#else // _WIN32
		pWrapperTable->m_Driver_Duet_GetCurrentPosition = (PLibMCDriver_DuetDriver_Duet_GetCurrentPositionPtr) dlsym(hLibrary, "libmcdriver_duet_driver_duet_getcurrentposition");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_Duet_GetCurrentPosition == nullptr)
			return LIBMCDRIVER_DUET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_Duet_CanExecuteMovement = (PLibMCDriver_DuetDriver_Duet_CanExecuteMovementPtr) GetProcAddress(hLibrary, "libmcdriver_duet_driver_duet_canexecutemovement");
		#else // _WIN32
		pWrapperTable->m_Driver_Duet_CanExecuteMovement = (PLibMCDriver_DuetDriver_Duet_CanExecuteMovementPtr) dlsym(hLibrary, "libmcdriver_duet_driver_duet_canexecutemovement");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_Duet_CanExecuteMovement == nullptr)
			return LIBMCDRIVER_DUET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_Duet_IsMoving = (PLibMCDriver_DuetDriver_Duet_IsMovingPtr) GetProcAddress(hLibrary, "libmcdriver_duet_driver_duet_ismoving");
		#else // _WIN32
		pWrapperTable->m_Driver_Duet_IsMoving = (PLibMCDriver_DuetDriver_Duet_IsMovingPtr) dlsym(hLibrary, "libmcdriver_duet_driver_duet_ismoving");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_Duet_IsMoving == nullptr)
			return LIBMCDRIVER_DUET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_Duet_IsHomed = (PLibMCDriver_DuetDriver_Duet_IsHomedPtr) GetProcAddress(hLibrary, "libmcdriver_duet_driver_duet_ishomed");
		#else // _WIN32
		pWrapperTable->m_Driver_Duet_IsHomed = (PLibMCDriver_DuetDriver_Duet_IsHomedPtr) dlsym(hLibrary, "libmcdriver_duet_driver_duet_ishomed");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_Duet_IsHomed == nullptr)
			return LIBMCDRIVER_DUET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_Duet_IsConnected = (PLibMCDriver_DuetDriver_Duet_IsConnectedPtr) GetProcAddress(hLibrary, "libmcdriver_duet_driver_duet_isconnected");
		#else // _WIN32
		pWrapperTable->m_Driver_Duet_IsConnected = (PLibMCDriver_DuetDriver_Duet_IsConnectedPtr) dlsym(hLibrary, "libmcdriver_duet_driver_duet_isconnected");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_Duet_IsConnected == nullptr)
			return LIBMCDRIVER_DUET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_Duet_MoveToXY = (PLibMCDriver_DuetDriver_Duet_MoveToXYPtr) GetProcAddress(hLibrary, "libmcdriver_duet_driver_duet_movetoxy");
		#else // _WIN32
		pWrapperTable->m_Driver_Duet_MoveToXY = (PLibMCDriver_DuetDriver_Duet_MoveToXYPtr) dlsym(hLibrary, "libmcdriver_duet_driver_duet_movetoxy");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_Duet_MoveToXY == nullptr)
			return LIBMCDRIVER_DUET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_Duet_MoveFastToXY = (PLibMCDriver_DuetDriver_Duet_MoveFastToXYPtr) GetProcAddress(hLibrary, "libmcdriver_duet_driver_duet_movefasttoxy");
		#else // _WIN32
		pWrapperTable->m_Driver_Duet_MoveFastToXY = (PLibMCDriver_DuetDriver_Duet_MoveFastToXYPtr) dlsym(hLibrary, "libmcdriver_duet_driver_duet_movefasttoxy");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_Duet_MoveFastToXY == nullptr)
			return LIBMCDRIVER_DUET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_Duet_MoveToZ = (PLibMCDriver_DuetDriver_Duet_MoveToZPtr) GetProcAddress(hLibrary, "libmcdriver_duet_driver_duet_movetoz");
		#else // _WIN32
		pWrapperTable->m_Driver_Duet_MoveToZ = (PLibMCDriver_DuetDriver_Duet_MoveToZPtr) dlsym(hLibrary, "libmcdriver_duet_driver_duet_movetoz");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_Duet_MoveToZ == nullptr)
			return LIBMCDRIVER_DUET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_Duet_MoveToA = (PLibMCDriver_DuetDriver_Duet_MoveToAPtr) GetProcAddress(hLibrary, "libmcdriver_duet_driver_duet_movetoa");
		#else // _WIN32
		pWrapperTable->m_Driver_Duet_MoveToA = (PLibMCDriver_DuetDriver_Duet_MoveToAPtr) dlsym(hLibrary, "libmcdriver_duet_driver_duet_movetoa");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_Duet_MoveToA == nullptr)
			return LIBMCDRIVER_DUET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_Duet_MoveToB = (PLibMCDriver_DuetDriver_Duet_MoveToBPtr) GetProcAddress(hLibrary, "libmcdriver_duet_driver_duet_movetob");
		#else // _WIN32
		pWrapperTable->m_Driver_Duet_MoveToB = (PLibMCDriver_DuetDriver_Duet_MoveToBPtr) dlsym(hLibrary, "libmcdriver_duet_driver_duet_movetob");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_Duet_MoveToB == nullptr)
			return LIBMCDRIVER_DUET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_Duet_StartHoming = (PLibMCDriver_DuetDriver_Duet_StartHomingPtr) GetProcAddress(hLibrary, "libmcdriver_duet_driver_duet_starthoming");
		#else // _WIN32
		pWrapperTable->m_Driver_Duet_StartHoming = (PLibMCDriver_DuetDriver_Duet_StartHomingPtr) dlsym(hLibrary, "libmcdriver_duet_driver_duet_starthoming");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_Duet_StartHoming == nullptr)
			return LIBMCDRIVER_DUET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_Duet_EmergencyStop = (PLibMCDriver_DuetDriver_Duet_EmergencyStopPtr) GetProcAddress(hLibrary, "libmcdriver_duet_driver_duet_emergencystop");
		#else // _WIN32
		pWrapperTable->m_Driver_Duet_EmergencyStop = (PLibMCDriver_DuetDriver_Duet_EmergencyStopPtr) dlsym(hLibrary, "libmcdriver_duet_driver_duet_emergencystop");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_Duet_EmergencyStop == nullptr)
			return LIBMCDRIVER_DUET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_Duet_SetAxisPosition = (PLibMCDriver_DuetDriver_Duet_SetAxisPositionPtr) GetProcAddress(hLibrary, "libmcdriver_duet_driver_duet_setaxisposition");
		#else // _WIN32
		pWrapperTable->m_Driver_Duet_SetAxisPosition = (PLibMCDriver_DuetDriver_Duet_SetAxisPositionPtr) dlsym(hLibrary, "libmcdriver_duet_driver_duet_setaxisposition");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_Duet_SetAxisPosition == nullptr)
			return LIBMCDRIVER_DUET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_Duet_PowerOff = (PLibMCDriver_DuetDriver_Duet_PowerOffPtr) GetProcAddress(hLibrary, "libmcdriver_duet_driver_duet_poweroff");
		#else // _WIN32
		pWrapperTable->m_Driver_Duet_PowerOff = (PLibMCDriver_DuetDriver_Duet_PowerOffPtr) dlsym(hLibrary, "libmcdriver_duet_driver_duet_poweroff");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_Duet_PowerOff == nullptr)
			return LIBMCDRIVER_DUET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GetVersion = (PLibMCDriver_DuetGetVersionPtr) GetProcAddress(hLibrary, "libmcdriver_duet_getversion");
		#else // _WIN32
		pWrapperTable->m_GetVersion = (PLibMCDriver_DuetGetVersionPtr) dlsym(hLibrary, "libmcdriver_duet_getversion");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GetVersion == nullptr)
			return LIBMCDRIVER_DUET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GetLastError = (PLibMCDriver_DuetGetLastErrorPtr) GetProcAddress(hLibrary, "libmcdriver_duet_getlasterror");
		#else // _WIN32
		pWrapperTable->m_GetLastError = (PLibMCDriver_DuetGetLastErrorPtr) dlsym(hLibrary, "libmcdriver_duet_getlasterror");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GetLastError == nullptr)
			return LIBMCDRIVER_DUET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ReleaseInstance = (PLibMCDriver_DuetReleaseInstancePtr) GetProcAddress(hLibrary, "libmcdriver_duet_releaseinstance");
		#else // _WIN32
		pWrapperTable->m_ReleaseInstance = (PLibMCDriver_DuetReleaseInstancePtr) dlsym(hLibrary, "libmcdriver_duet_releaseinstance");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ReleaseInstance == nullptr)
			return LIBMCDRIVER_DUET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_AcquireInstance = (PLibMCDriver_DuetAcquireInstancePtr) GetProcAddress(hLibrary, "libmcdriver_duet_acquireinstance");
		#else // _WIN32
		pWrapperTable->m_AcquireInstance = (PLibMCDriver_DuetAcquireInstancePtr) dlsym(hLibrary, "libmcdriver_duet_acquireinstance");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_AcquireInstance == nullptr)
			return LIBMCDRIVER_DUET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_InjectComponent = (PLibMCDriver_DuetInjectComponentPtr) GetProcAddress(hLibrary, "libmcdriver_duet_injectcomponent");
		#else // _WIN32
		pWrapperTable->m_InjectComponent = (PLibMCDriver_DuetInjectComponentPtr) dlsym(hLibrary, "libmcdriver_duet_injectcomponent");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_InjectComponent == nullptr)
			return LIBMCDRIVER_DUET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GetSymbolLookupMethod = (PLibMCDriver_DuetGetSymbolLookupMethodPtr) GetProcAddress(hLibrary, "libmcdriver_duet_getsymbollookupmethod");
		#else // _WIN32
		pWrapperTable->m_GetSymbolLookupMethod = (PLibMCDriver_DuetGetSymbolLookupMethodPtr) dlsym(hLibrary, "libmcdriver_duet_getsymbollookupmethod");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GetSymbolLookupMethod == nullptr)
			return LIBMCDRIVER_DUET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_CreateDriver = (PLibMCDriver_DuetCreateDriverPtr) GetProcAddress(hLibrary, "libmcdriver_duet_createdriver");
		#else // _WIN32
		pWrapperTable->m_CreateDriver = (PLibMCDriver_DuetCreateDriverPtr) dlsym(hLibrary, "libmcdriver_duet_createdriver");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_CreateDriver == nullptr)
			return LIBMCDRIVER_DUET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		pWrapperTable->m_LibraryHandle = hLibrary;
		return LIBMCDRIVER_DUET_SUCCESS;
	}

	inline LibMCDriver_DuetResult CWrapper::loadWrapperTableFromSymbolLookupMethod(sLibMCDriver_DuetDynamicWrapperTable * pWrapperTable, void* pSymbolLookupMethod)
{
		if (pWrapperTable == nullptr)
			return LIBMCDRIVER_DUET_ERROR_INVALIDPARAM;
		if (pSymbolLookupMethod == nullptr)
			return LIBMCDRIVER_DUET_ERROR_INVALIDPARAM;
		
		typedef LibMCDriver_DuetResult(*SymbolLookupType)(const char*, void**);
		
		SymbolLookupType pLookup = (SymbolLookupType)pSymbolLookupMethod;
		
		LibMCDriver_DuetResult eLookupError = LIBMCDRIVER_DUET_SUCCESS;
		eLookupError = (*pLookup)("libmcdriver_duet_driver_getname", (void**)&(pWrapperTable->m_Driver_GetName));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_GetName == nullptr) )
			return LIBMCDRIVER_DUET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_duet_driver_gettype", (void**)&(pWrapperTable->m_Driver_GetType));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_GetType == nullptr) )
			return LIBMCDRIVER_DUET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_duet_driver_getversion", (void**)&(pWrapperTable->m_Driver_GetVersion));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_GetVersion == nullptr) )
			return LIBMCDRIVER_DUET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_duet_driver_getheaderinformation", (void**)&(pWrapperTable->m_Driver_GetHeaderInformation));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_GetHeaderInformation == nullptr) )
			return LIBMCDRIVER_DUET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_duet_driver_queryparameters", (void**)&(pWrapperTable->m_Driver_QueryParameters));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_QueryParameters == nullptr) )
			return LIBMCDRIVER_DUET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_duet_driver_duet_connect", (void**)&(pWrapperTable->m_Driver_Duet_Connect));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_Duet_Connect == nullptr) )
			return LIBMCDRIVER_DUET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_duet_driver_duet_disconnect", (void**)&(pWrapperTable->m_Driver_Duet_Disconnect));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_Duet_Disconnect == nullptr) )
			return LIBMCDRIVER_DUET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_duet_driver_duet_setabsolutepositioning", (void**)&(pWrapperTable->m_Driver_Duet_SetAbsolutePositioning));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_Duet_SetAbsolutePositioning == nullptr) )
			return LIBMCDRIVER_DUET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_duet_driver_duet_queryparameters", (void**)&(pWrapperTable->m_Driver_Duet_QueryParameters));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_Duet_QueryParameters == nullptr) )
			return LIBMCDRIVER_DUET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_duet_driver_duet_gettargetposition", (void**)&(pWrapperTable->m_Driver_Duet_GetTargetPosition));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_Duet_GetTargetPosition == nullptr) )
			return LIBMCDRIVER_DUET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_duet_driver_duet_getcurrentposition", (void**)&(pWrapperTable->m_Driver_Duet_GetCurrentPosition));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_Duet_GetCurrentPosition == nullptr) )
			return LIBMCDRIVER_DUET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_duet_driver_duet_canexecutemovement", (void**)&(pWrapperTable->m_Driver_Duet_CanExecuteMovement));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_Duet_CanExecuteMovement == nullptr) )
			return LIBMCDRIVER_DUET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_duet_driver_duet_ismoving", (void**)&(pWrapperTable->m_Driver_Duet_IsMoving));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_Duet_IsMoving == nullptr) )
			return LIBMCDRIVER_DUET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_duet_driver_duet_ishomed", (void**)&(pWrapperTable->m_Driver_Duet_IsHomed));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_Duet_IsHomed == nullptr) )
			return LIBMCDRIVER_DUET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_duet_driver_duet_isconnected", (void**)&(pWrapperTable->m_Driver_Duet_IsConnected));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_Duet_IsConnected == nullptr) )
			return LIBMCDRIVER_DUET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_duet_driver_duet_movetoxy", (void**)&(pWrapperTable->m_Driver_Duet_MoveToXY));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_Duet_MoveToXY == nullptr) )
			return LIBMCDRIVER_DUET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_duet_driver_duet_movefasttoxy", (void**)&(pWrapperTable->m_Driver_Duet_MoveFastToXY));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_Duet_MoveFastToXY == nullptr) )
			return LIBMCDRIVER_DUET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_duet_driver_duet_movetoz", (void**)&(pWrapperTable->m_Driver_Duet_MoveToZ));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_Duet_MoveToZ == nullptr) )
			return LIBMCDRIVER_DUET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_duet_driver_duet_movetoa", (void**)&(pWrapperTable->m_Driver_Duet_MoveToA));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_Duet_MoveToA == nullptr) )
			return LIBMCDRIVER_DUET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_duet_driver_duet_movetob", (void**)&(pWrapperTable->m_Driver_Duet_MoveToB));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_Duet_MoveToB == nullptr) )
			return LIBMCDRIVER_DUET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_duet_driver_duet_starthoming", (void**)&(pWrapperTable->m_Driver_Duet_StartHoming));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_Duet_StartHoming == nullptr) )
			return LIBMCDRIVER_DUET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_duet_driver_duet_emergencystop", (void**)&(pWrapperTable->m_Driver_Duet_EmergencyStop));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_Duet_EmergencyStop == nullptr) )
			return LIBMCDRIVER_DUET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_duet_driver_duet_setaxisposition", (void**)&(pWrapperTable->m_Driver_Duet_SetAxisPosition));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_Duet_SetAxisPosition == nullptr) )
			return LIBMCDRIVER_DUET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_duet_driver_duet_poweroff", (void**)&(pWrapperTable->m_Driver_Duet_PowerOff));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_Duet_PowerOff == nullptr) )
			return LIBMCDRIVER_DUET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_duet_getversion", (void**)&(pWrapperTable->m_GetVersion));
		if ( (eLookupError != 0) || (pWrapperTable->m_GetVersion == nullptr) )
			return LIBMCDRIVER_DUET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_duet_getlasterror", (void**)&(pWrapperTable->m_GetLastError));
		if ( (eLookupError != 0) || (pWrapperTable->m_GetLastError == nullptr) )
			return LIBMCDRIVER_DUET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_duet_releaseinstance", (void**)&(pWrapperTable->m_ReleaseInstance));
		if ( (eLookupError != 0) || (pWrapperTable->m_ReleaseInstance == nullptr) )
			return LIBMCDRIVER_DUET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_duet_acquireinstance", (void**)&(pWrapperTable->m_AcquireInstance));
		if ( (eLookupError != 0) || (pWrapperTable->m_AcquireInstance == nullptr) )
			return LIBMCDRIVER_DUET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_duet_injectcomponent", (void**)&(pWrapperTable->m_InjectComponent));
		if ( (eLookupError != 0) || (pWrapperTable->m_InjectComponent == nullptr) )
			return LIBMCDRIVER_DUET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_duet_getsymbollookupmethod", (void**)&(pWrapperTable->m_GetSymbolLookupMethod));
		if ( (eLookupError != 0) || (pWrapperTable->m_GetSymbolLookupMethod == nullptr) )
			return LIBMCDRIVER_DUET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_duet_createdriver", (void**)&(pWrapperTable->m_CreateDriver));
		if ( (eLookupError != 0) || (pWrapperTable->m_CreateDriver == nullptr) )
			return LIBMCDRIVER_DUET_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		return LIBMCDRIVER_DUET_SUCCESS;
}

	
	
	/**
	 * Method definitions for class CBase
	 */
	
	/**
	 * Method definitions for class CDriver
	 */
	
	/**
	* CDriver::GetName - returns the name identifier of the driver
	* @return Name of the driver.
	*/
	std::string CDriver::GetName()
	{
		LibMCDriver_Duet_uint32 bytesNeededName = 0;
		LibMCDriver_Duet_uint32 bytesWrittenName = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetName(m_pHandle, 0, &bytesNeededName, nullptr));
		std::vector<char> bufferName(bytesNeededName);
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetName(m_pHandle, bytesNeededName, &bytesWrittenName, &bufferName[0]));
		
		return std::string(&bufferName[0]);
	}
	
	/**
	* CDriver::GetType - returns the type identifier of the driver
	* @return Type of the driver.
	*/
	std::string CDriver::GetType()
	{
		LibMCDriver_Duet_uint32 bytesNeededType = 0;
		LibMCDriver_Duet_uint32 bytesWrittenType = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetType(m_pHandle, 0, &bytesNeededType, nullptr));
		std::vector<char> bufferType(bytesNeededType);
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetType(m_pHandle, bytesNeededType, &bytesWrittenType, &bufferType[0]));
		
		return std::string(&bufferType[0]);
	}
	
	/**
	* CDriver::GetVersion - returns the version identifiers of the driver
	* @param[out] nMajor - Major version.
	* @param[out] nMinor - Minor version.
	* @param[out] nMicro - Micro version.
	* @param[out] sBuild - Build identifier.
	*/
	void CDriver::GetVersion(LibMCDriver_Duet_uint32 & nMajor, LibMCDriver_Duet_uint32 & nMinor, LibMCDriver_Duet_uint32 & nMicro, std::string & sBuild)
	{
		LibMCDriver_Duet_uint32 bytesNeededBuild = 0;
		LibMCDriver_Duet_uint32 bytesWrittenBuild = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetVersion(m_pHandle, &nMajor, &nMinor, &nMicro, 0, &bytesNeededBuild, nullptr));
		std::vector<char> bufferBuild(bytesNeededBuild);
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetVersion(m_pHandle, &nMajor, &nMinor, &nMicro, bytesNeededBuild, &bytesWrittenBuild, &bufferBuild[0]));
		sBuild = std::string(&bufferBuild[0]);
	}
	
	/**
	* CDriver::GetHeaderInformation - returns the header information
	* @param[out] sNameSpace - NameSpace of the driver.
	* @param[out] sBaseName - BaseName of the driver.
	*/
	void CDriver::GetHeaderInformation(std::string & sNameSpace, std::string & sBaseName)
	{
		LibMCDriver_Duet_uint32 bytesNeededNameSpace = 0;
		LibMCDriver_Duet_uint32 bytesWrittenNameSpace = 0;
		LibMCDriver_Duet_uint32 bytesNeededBaseName = 0;
		LibMCDriver_Duet_uint32 bytesWrittenBaseName = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetHeaderInformation(m_pHandle, 0, &bytesNeededNameSpace, nullptr, 0, &bytesNeededBaseName, nullptr));
		std::vector<char> bufferNameSpace(bytesNeededNameSpace);
		std::vector<char> bufferBaseName(bytesNeededBaseName);
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetHeaderInformation(m_pHandle, bytesNeededNameSpace, &bytesWrittenNameSpace, &bufferNameSpace[0], bytesNeededBaseName, &bytesWrittenBaseName, &bufferBaseName[0]));
		sNameSpace = std::string(&bufferNameSpace[0]);
		sBaseName = std::string(&bufferBaseName[0]);
	}
	
	/**
	* CDriver::QueryParameters - Stores the driver parameters in the driver environment.
	*/
	void CDriver::QueryParameters()
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_QueryParameters(m_pHandle));
	}
	
	/**
	 * Method definitions for class CDriver_Duet
	 */
	
	/**
	* CDriver_Duet::Connect - Creates and initializes a new Duet Connector.
	* @param[in] sCOMPort - Device Port to connect to
	* @param[in] nBaudrate - Baudrate to use
	* @param[in] dStatusUpdateInterval - Timer interval [ms] for updating status
	* @param[in] nConnectTimeout - Timeout [ms] for connecting printer
	*/
	void CDriver_Duet::Connect(const std::string & sCOMPort, const LibMCDriver_Duet_uint32 nBaudrate, const LibMCDriver_Duet_double dStatusUpdateInterval, const LibMCDriver_Duet_uint32 nConnectTimeout)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_Duet_Connect(m_pHandle, sCOMPort.c_str(), nBaudrate, dStatusUpdateInterval, nConnectTimeout));
	}
	
	/**
	* CDriver_Duet::Disconnect - Disconnects from the Marlin board.
	*/
	void CDriver_Duet::Disconnect()
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_Duet_Disconnect(m_pHandle));
	}
	
	/**
	* CDriver_Duet::SetAbsolutePositioning - Sets the positioning to absolute values (default true).
	* @param[in] bAbsolute - If true, sets positioning to absolute, if false to relative
	*/
	void CDriver_Duet::SetAbsolutePositioning(const bool bAbsolute)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_Duet_SetAbsolutePositioning(m_pHandle, bAbsolute));
	}
	
	/**
	* CDriver_Duet::QueryParameters - Stores the driver parameters in the driver environment.
	*/
	void CDriver_Duet::QueryParameters()
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_Duet_QueryParameters(m_pHandle));
	}
	
	/**
	* CDriver_Duet::GetTargetPosition - Returns the current target position.
	* @param[out] dX - X Value in mm
	* @param[out] dY - Y Value in mm
	* @param[out] dZ - Z Value in mm
	* @param[out] dA - A Value in mm
	* @param[out] dB - B Value in mm
	*/
	void CDriver_Duet::GetTargetPosition(LibMCDriver_Duet_double & dX, LibMCDriver_Duet_double & dY, LibMCDriver_Duet_double & dZ, LibMCDriver_Duet_double & dA, LibMCDriver_Duet_double & dB)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_Duet_GetTargetPosition(m_pHandle, &dX, &dY, &dZ, &dA, &dB));
	}
	
	/**
	* CDriver_Duet::GetCurrentPosition - Returns the current position.
	* @param[out] dX - X Value in mm
	* @param[out] dY - Y Value in mm
	* @param[out] dZ - Z Value in mm
	* @param[out] dA - A Value in mm
	* @param[out] dB - B Value in mm
	*/
	void CDriver_Duet::GetCurrentPosition(LibMCDriver_Duet_double & dX, LibMCDriver_Duet_double & dY, LibMCDriver_Duet_double & dZ, LibMCDriver_Duet_double & dA, LibMCDriver_Duet_double & dB)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_Duet_GetCurrentPosition(m_pHandle, &dX, &dY, &dZ, &dA, &dB));
	}
	
	/**
	* CDriver_Duet::CanExecuteMovement - Returns if the movement buffer can receive another movement command..
	* @return True if a MoveTo or MoveFastTo command can be triggered.
	*/
	bool CDriver_Duet::CanExecuteMovement()
	{
		bool resultValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_Duet_CanExecuteMovement(m_pHandle, &resultValue));
		
		return resultValue;
	}
	
	/**
	* CDriver_Duet::IsMoving - Returns if the extruder is moving..
	* @return Extruder is moving
	*/
	bool CDriver_Duet::IsMoving()
	{
		bool resultValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_Duet_IsMoving(m_pHandle, &resultValue));
		
		return resultValue;
	}
	
	/**
	* CDriver_Duet::IsHomed - Returns if the printer is homed
	* @return True if printer is homed.
	*/
	bool CDriver_Duet::IsHomed()
	{
		bool resultValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_Duet_IsHomed(m_pHandle, &resultValue));
		
		return resultValue;
	}
	
	/**
	* CDriver_Duet::IsConnected - Returns if the printer is connected
	* @return True if printer is connected.
	*/
	bool CDriver_Duet::IsConnected()
	{
		bool resultValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_Duet_IsConnected(m_pHandle, &resultValue));
		
		return resultValue;
	}
	
	/**
	* CDriver_Duet::MoveToXY - Moves to/by a certain position by a linear move. Takes the relative/absolute mode into account. Fails if it cannot execute a movement.
	* @param[in] dX - X Value in mm
	* @param[in] dY - Y Value in mm
	* @param[in] dLaserPower - Laser power in percent of maximum power
	* @param[in] dSpeed - Movement speed in mm/s
	*/
	void CDriver_Duet::MoveToXY(const LibMCDriver_Duet_double dX, const LibMCDriver_Duet_double dY, const LibMCDriver_Duet_double dLaserPower, const LibMCDriver_Duet_double dSpeed)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_Duet_MoveToXY(m_pHandle, dX, dY, dLaserPower, dSpeed));
	}
	
	/**
	* CDriver_Duet::MoveFastToXY - Moves to/by a certain position by a fast move. Takes the relative/absolute mode into account. Fails if it cannot execute a movement.
	* @param[in] dX - X Value in mm
	* @param[in] dY - Y Value in mm
	* @param[in] dSpeed - Movement speed in mm/s
	*/
	void CDriver_Duet::MoveFastToXY(const LibMCDriver_Duet_double dX, const LibMCDriver_Duet_double dY, const LibMCDriver_Duet_double dSpeed)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_Duet_MoveFastToXY(m_pHandle, dX, dY, dSpeed));
	}
	
	/**
	* CDriver_Duet::MoveToZ - Moves to/by a certain position by a linear move. Takes the relative/absolute mode into account. Fails if it cannot execute a movement.
	* @param[in] dZ - Z Value in mm
	* @param[in] dSpeed - Movement speed in mm/s
	*/
	void CDriver_Duet::MoveToZ(const LibMCDriver_Duet_double dZ, const LibMCDriver_Duet_double dSpeed)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_Duet_MoveToZ(m_pHandle, dZ, dSpeed));
	}
	
	/**
	* CDriver_Duet::MoveToA - Moves to/by a certain position by a linear move. Takes the relative/absolute mode into account. Fails if it cannot execute a movement.
	* @param[in] dA - A Value in mm
	* @param[in] dSpeed - Movement speed in mm/s
	*/
	void CDriver_Duet::MoveToA(const LibMCDriver_Duet_double dA, const LibMCDriver_Duet_double dSpeed)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_Duet_MoveToA(m_pHandle, dA, dSpeed));
	}
	
	/**
	* CDriver_Duet::MoveToB - Moves to/by a certain position by a linear move. Takes the relative/absolute mode into account. Fails if it cannot execute a movement.
	* @param[in] dB - B Value in mm
	* @param[in] dSpeed - Movement speed in mm/s
	*/
	void CDriver_Duet::MoveToB(const LibMCDriver_Duet_double dB, const LibMCDriver_Duet_double dSpeed)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_Duet_MoveToB(m_pHandle, dB, dSpeed));
	}
	
	/**
	* CDriver_Duet::StartHoming - Start Homing of printer.
	*/
	void CDriver_Duet::StartHoming()
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_Duet_StartHoming(m_pHandle));
	}
	
	/**
	* CDriver_Duet::EmergencyStop - Used for emergency stopping. Shuts down the machine, turns off all the steppers and heaters, and if possible, turns off the power supply.
	*/
	void CDriver_Duet::EmergencyStop()
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_Duet_EmergencyStop(m_pHandle));
	}
	
	/**
	* CDriver_Duet::SetAxisPosition - Set the current position of given axis to the specified value.
	* @param[in] sAxis - Axis whose value is to be set.
	* @param[in] dValue - New value for given Axis.
	*/
	void CDriver_Duet::SetAxisPosition(const std::string & sAxis, const LibMCDriver_Duet_double dValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_Duet_SetAxisPosition(m_pHandle, sAxis.c_str(), dValue));
	}
	
	/**
	* CDriver_Duet::PowerOff - Turn off the high-voltage power supply.
	*/
	void CDriver_Duet::PowerOff()
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_Duet_PowerOff(m_pHandle));
	}

} // namespace LibMCDriver_Duet

#endif // __LIBMCDRIVER_DUET_CPPHEADER_DYNAMIC_CPP

