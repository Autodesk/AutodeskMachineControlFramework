/*++

Copyright (C) 2022 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.7.0-develop.

Abstract: This is an autogenerated C++-Header file in order to allow an easy
 use of Generic TCP IP Driver

Interface version: 1.0.0

*/

#ifndef __LIBMCDRIVER_TCPIP_CPPHEADER_DYNAMIC_CPP
#define __LIBMCDRIVER_TCPIP_CPPHEADER_DYNAMIC_CPP

#include "libmcdriver_tcpip_types.hpp"
#include "libmcdriver_tcpip_dynamic.h"

#include "libmcenv_dynamic.hpp"

#ifdef _WIN32
#include <windows.h>
#else // _WIN32
#include <dlfcn.h>
#endif // _WIN32
#include <string>
#include <memory>
#include <vector>
#include <exception>

namespace LibMCDriver_TCPIP {

/*************************************************************************************************************************
 Forward Declaration of all classes
**************************************************************************************************************************/
class CWrapper;
class CBase;
class CDriver;
class CDriver_TCPIP;

/*************************************************************************************************************************
 Declaration of deprecated class types
**************************************************************************************************************************/
typedef CWrapper CLibMCDriver_TCPIPWrapper;
typedef CBase CLibMCDriver_TCPIPBase;
typedef CDriver CLibMCDriver_TCPIPDriver;
typedef CDriver_TCPIP CLibMCDriver_TCPIPDriver_TCPIP;

/*************************************************************************************************************************
 Declaration of shared pointer types
**************************************************************************************************************************/
typedef std::shared_ptr<CWrapper> PWrapper;
typedef std::shared_ptr<CBase> PBase;
typedef std::shared_ptr<CDriver> PDriver;
typedef std::shared_ptr<CDriver_TCPIP> PDriver_TCPIP;

/*************************************************************************************************************************
 Declaration of deprecated shared pointer types
**************************************************************************************************************************/
typedef PWrapper PLibMCDriver_TCPIPWrapper;
typedef PBase PLibMCDriver_TCPIPBase;
typedef PDriver PLibMCDriver_TCPIPDriver;
typedef PDriver_TCPIP PLibMCDriver_TCPIPDriver_TCPIP;


/*************************************************************************************************************************
 classParam Definition
**************************************************************************************************************************/

template<class T> class classParam {
private:
	const T* m_ptr;

public:
	classParam(const T* ptr)
		: m_ptr (ptr)
	{
	}

	classParam(std::shared_ptr <T> sharedPtr)
		: m_ptr (sharedPtr.get())
	{
	}

	LibMCDriver_TCPIPHandle GetHandle()
	{
		if (m_ptr != nullptr)
			return m_ptr->handle();
		return nullptr;
	}
};

/*************************************************************************************************************************
 Class ELibMCDriver_TCPIPException 
**************************************************************************************************************************/
class ELibMCDriver_TCPIPException : public std::exception {
protected:
	/**
	* Error code for the Exception.
	*/
	LibMCDriver_TCPIPResult m_errorCode;
	/**
	* Error message for the Exception.
	*/
	std::string m_errorMessage;

public:
	/**
	* Exception Constructor.
	*/
	ELibMCDriver_TCPIPException(LibMCDriver_TCPIPResult errorCode, const std::string & sErrorMessage)
		: m_errorMessage("LibMCDriver_TCPIP Error " + std::to_string(errorCode) + " (" + sErrorMessage + ")")
	{
		m_errorCode = errorCode;
	}

	/**
	* Returns error code
	*/
	LibMCDriver_TCPIPResult getErrorCode() const noexcept
	{
		return m_errorCode;
	}

	/**
	* Returns error message
	*/
	const char* what() const noexcept
	{
		return m_errorMessage.c_str();
	}

};

/*************************************************************************************************************************
 Class CInputVector
**************************************************************************************************************************/
template <typename T>
class CInputVector {
private:
	
	const T* m_data;
	size_t m_size;
	
public:
	
	CInputVector( const std::vector<T>& vec)
		: m_data( vec.data() ), m_size( vec.size() )
	{
	}
	
	CInputVector( const T* in_data, size_t in_size)
		: m_data( in_data ), m_size(in_size )
	{
	}
	
	const T* data() const
	{
		return m_data;
	}
	
	size_t size() const
	{
		return m_size;
	}
	
};

// declare deprecated class name
template<typename T>
using CLibMCDriver_TCPIPInputVector = CInputVector<T>;

/*************************************************************************************************************************
 Class CWrapper 
**************************************************************************************************************************/
class CWrapper {
public:
	
	CWrapper(void* pSymbolLookupMethod)
	{
		CheckError(nullptr, initWrapperTable(&m_WrapperTable));
		CheckError(nullptr, loadWrapperTableFromSymbolLookupMethod(&m_WrapperTable, pSymbolLookupMethod));
		
		CheckError(nullptr, checkBinaryVersion());
	}
	
	CWrapper(const std::string &sFileName)
	{
		CheckError(nullptr, initWrapperTable(&m_WrapperTable));
		CheckError(nullptr, loadWrapperTable(&m_WrapperTable, sFileName.c_str()));
		
		CheckError(nullptr, checkBinaryVersion());
	}
	
	static PWrapper loadLibrary(const std::string &sFileName)
	{
		return std::make_shared<CWrapper>(sFileName);
	}
	
	static PWrapper loadLibraryFromSymbolLookupMethod(void* pSymbolLookupMethod)
	{
		return std::make_shared<CWrapper>(pSymbolLookupMethod);
	}
	
	~CWrapper()
	{
		releaseWrapperTable(&m_WrapperTable);
	}
	
	inline void CheckError(CBase * pBaseClass, LibMCDriver_TCPIPResult nResult);

	inline void GetVersion(LibMCDriver_TCPIP_uint32 & nMajor, LibMCDriver_TCPIP_uint32 & nMinor, LibMCDriver_TCPIP_uint32 & nMicro);
	inline bool GetLastError(classParam<CBase> pInstance, std::string & sErrorMessage);
	inline void ReleaseInstance(classParam<CBase> pInstance);
	inline void AcquireInstance(classParam<CBase> pInstance);
	inline void InjectComponent(const std::string & sNameSpace, const LibMCDriver_TCPIP_pvoid pSymbolAddressMethod);
	inline LibMCDriver_TCPIP_pvoid GetSymbolLookupMethod();
	inline PDriver CreateDriver(const std::string & sName, const std::string & sType, classParam<LibMCEnv::CDriverEnvironment> pDriverEnvironment);

private:
	sLibMCDriver_TCPIPDynamicWrapperTable m_WrapperTable;
	// Injected Components
	LibMCEnv::PWrapper m_pLibMCEnvWrapper;

	
	LibMCDriver_TCPIPResult checkBinaryVersion()
	{
		LibMCDriver_TCPIP_uint32 nMajor, nMinor, nMicro;
		GetVersion(nMajor, nMinor, nMicro);
		if ( (nMajor != LIBMCDRIVER_TCPIP_VERSION_MAJOR) || (nMinor < LIBMCDRIVER_TCPIP_VERSION_MINOR) ) {
			return LIBMCDRIVER_TCPIP_ERROR_INCOMPATIBLEBINARYVERSION;
		}
		return LIBMCDRIVER_TCPIP_SUCCESS;
	}
	LibMCDriver_TCPIPResult initWrapperTable(sLibMCDriver_TCPIPDynamicWrapperTable * pWrapperTable);
	LibMCDriver_TCPIPResult releaseWrapperTable(sLibMCDriver_TCPIPDynamicWrapperTable * pWrapperTable);
	LibMCDriver_TCPIPResult loadWrapperTable(sLibMCDriver_TCPIPDynamicWrapperTable * pWrapperTable, const char * pLibraryFileName);
	LibMCDriver_TCPIPResult loadWrapperTableFromSymbolLookupMethod(sLibMCDriver_TCPIPDynamicWrapperTable * pWrapperTable, void* pSymbolLookupMethod);

	friend class CBase;
	friend class CDriver;
	friend class CDriver_TCPIP;

};

	
/*************************************************************************************************************************
 Class CBase 
**************************************************************************************************************************/
class CBase {
public:
	
protected:
	/* Wrapper Object that created the class. */
	CWrapper * m_pWrapper;
	/* Handle to Instance in library*/
	LibMCDriver_TCPIPHandle m_pHandle;

	/* Checks for an Error code and raises Exceptions */
	void CheckError(LibMCDriver_TCPIPResult nResult)
	{
		if (m_pWrapper != nullptr)
			m_pWrapper->CheckError(this, nResult);
	}
public:
	/**
	* CBase::CBase - Constructor for Base class.
	*/
	CBase(CWrapper * pWrapper, LibMCDriver_TCPIPHandle pHandle)
		: m_pWrapper(pWrapper), m_pHandle(pHandle)
	{
	}

	/**
	* CBase::~CBase - Destructor for Base class.
	*/
	virtual ~CBase()
	{
		if (m_pWrapper != nullptr)
			m_pWrapper->ReleaseInstance(this);
		m_pWrapper = nullptr;
	}

	/**
	* CBase::handle - Returns handle to instance.
	*/
	LibMCDriver_TCPIPHandle handle() const
	{
		return m_pHandle;
	}

	/**
	* CBase::wrapper - Returns wrapper instance.
	*/
	CWrapper * wrapper() const
	{
		return m_pWrapper;
	}
	
	friend class CWrapper;
};
	
/*************************************************************************************************************************
 Class CDriver 
**************************************************************************************************************************/
class CDriver : public CBase {
public:
	
	/**
	* CDriver::CDriver - Constructor for Driver class.
	*/
	CDriver(CWrapper* pWrapper, LibMCDriver_TCPIPHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline void Configure(const std::string & sConfigurationString);
	inline std::string GetName();
	inline std::string GetType();
	inline void GetVersion(LibMCDriver_TCPIP_uint32 & nMajor, LibMCDriver_TCPIP_uint32 & nMinor, LibMCDriver_TCPIP_uint32 & nMicro, std::string & sBuild);
	inline void GetHeaderInformation(std::string & sNameSpace, std::string & sBaseName);
	inline void QueryParameters();
};
	
/*************************************************************************************************************************
 Class CDriver_TCPIP 
**************************************************************************************************************************/
class CDriver_TCPIP : public CDriver {
public:
	
	/**
	* CDriver_TCPIP::CDriver_TCPIP - Constructor for Driver_TCPIP class.
	*/
	CDriver_TCPIP(CWrapper* pWrapper, LibMCDriver_TCPIPHandle pHandle)
		: CDriver(pWrapper, pHandle)
	{
	}
	
	inline void SetToSimulationMode();
	inline bool IsSimulationMode();
	inline void Connect(const std::string & sIPAddress, const LibMCDriver_TCPIP_uint32 nPort, const LibMCDriver_TCPIP_uint32 nTimeout);
	inline bool IsConnected();
	inline void Disconnect();
};
	
	/**
	* CWrapper::GetVersion - retrieves the binary version of this library.
	* @param[out] nMajor - returns the major version of this library
	* @param[out] nMinor - returns the minor version of this library
	* @param[out] nMicro - returns the micro version of this library
	*/
	inline void CWrapper::GetVersion(LibMCDriver_TCPIP_uint32 & nMajor, LibMCDriver_TCPIP_uint32 & nMinor, LibMCDriver_TCPIP_uint32 & nMicro)
	{
		CheckError(nullptr,m_WrapperTable.m_GetVersion(&nMajor, &nMinor, &nMicro));
	}
	
	/**
	* CWrapper::GetLastError - Returns the last error recorded on this object
	* @param[in] pInstance - Instance Handle
	* @param[out] sErrorMessage - Message of the last error
	* @return Is there a last error to query
	*/
	inline bool CWrapper::GetLastError(classParam<CBase> pInstance, std::string & sErrorMessage)
	{
		LibMCDriver_TCPIPHandle hInstance = pInstance.GetHandle();
		LibMCDriver_TCPIP_uint32 bytesNeededErrorMessage = 0;
		LibMCDriver_TCPIP_uint32 bytesWrittenErrorMessage = 0;
		bool resultHasError = 0;
		CheckError(nullptr,m_WrapperTable.m_GetLastError(hInstance, 0, &bytesNeededErrorMessage, nullptr, &resultHasError));
		std::vector<char> bufferErrorMessage(bytesNeededErrorMessage);
		CheckError(nullptr,m_WrapperTable.m_GetLastError(hInstance, bytesNeededErrorMessage, &bytesWrittenErrorMessage, &bufferErrorMessage[0], &resultHasError));
		sErrorMessage = std::string(&bufferErrorMessage[0]);
		
		return resultHasError;
	}
	
	/**
	* CWrapper::ReleaseInstance - Releases shared ownership of an Instance
	* @param[in] pInstance - Instance Handle
	*/
	inline void CWrapper::ReleaseInstance(classParam<CBase> pInstance)
	{
		LibMCDriver_TCPIPHandle hInstance = pInstance.GetHandle();
		CheckError(nullptr,m_WrapperTable.m_ReleaseInstance(hInstance));
	}
	
	/**
	* CWrapper::AcquireInstance - Acquires shared ownership of an Instance
	* @param[in] pInstance - Instance Handle
	*/
	inline void CWrapper::AcquireInstance(classParam<CBase> pInstance)
	{
		LibMCDriver_TCPIPHandle hInstance = pInstance.GetHandle();
		CheckError(nullptr,m_WrapperTable.m_AcquireInstance(hInstance));
	}
	
	/**
	* CWrapper::InjectComponent - Injects an imported component for usage within this component
	* @param[in] sNameSpace - NameSpace of the injected component
	* @param[in] pSymbolAddressMethod - Address of the SymbolAddressMethod of the injected component
	*/
	inline void CWrapper::InjectComponent(const std::string & sNameSpace, const LibMCDriver_TCPIP_pvoid pSymbolAddressMethod)
	{
		CheckError(nullptr,m_WrapperTable.m_InjectComponent(sNameSpace.c_str(), pSymbolAddressMethod));
		
		bool bNameSpaceFound = false;
		if (sNameSpace == "LibMCEnv") {
			if (m_pLibMCEnvWrapper != nullptr) {
				throw ELibMCDriver_TCPIPException(LIBMCDRIVER_TCPIP_ERROR_COULDNOTLOADLIBRARY, "Library with namespace " + sNameSpace + " is already registered.");
			}
			m_pLibMCEnvWrapper = LibMCEnv::CWrapper::loadLibraryFromSymbolLookupMethod(pSymbolAddressMethod);
			bNameSpaceFound = true;
		}
		if (!bNameSpaceFound)
			throw ELibMCDriver_TCPIPException(LIBMCDRIVER_TCPIP_ERROR_COULDNOTLOADLIBRARY, "Unknown namespace " + sNameSpace);
	}
	
	/**
	* CWrapper::GetSymbolLookupMethod - Returns the address of the SymbolLookupMethod
	* @return Address of the SymbolAddressMethod
	*/
	inline LibMCDriver_TCPIP_pvoid CWrapper::GetSymbolLookupMethod()
	{
		LibMCDriver_TCPIP_pvoid resultSymbolLookupMethod = 0;
		CheckError(nullptr,m_WrapperTable.m_GetSymbolLookupMethod(&resultSymbolLookupMethod));
		
		return resultSymbolLookupMethod;
	}
	
	/**
	* CWrapper::CreateDriver - Creates a driver instance with a specific name.
	* @param[in] sName - Name of driver to be created.
	* @param[in] sType - Type of driver to be created.
	* @param[in] pDriverEnvironment - Environment of this driver.
	* @return New Driver instance
	*/
	inline PDriver CWrapper::CreateDriver(const std::string & sName, const std::string & sType, classParam<LibMCEnv::CDriverEnvironment> pDriverEnvironment)
	{
		LibMCEnvHandle hDriverEnvironment = pDriverEnvironment.GetHandle();
		LibMCDriver_TCPIPHandle hInstance = nullptr;
		CheckError(nullptr,m_WrapperTable.m_CreateDriver(sName.c_str(), sType.c_str(), hDriverEnvironment, &hInstance));
		
		if (!hInstance) {
			CheckError(nullptr,LIBMCDRIVER_TCPIP_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CDriver>(this, hInstance);
	}
	
	inline void CWrapper::CheckError(CBase * pBaseClass, LibMCDriver_TCPIPResult nResult)
	{
		if (nResult != 0) {
			std::string sErrorMessage;
			if (pBaseClass != nullptr) {
				GetLastError(pBaseClass, sErrorMessage);
			}
			throw ELibMCDriver_TCPIPException(nResult, sErrorMessage);
		}
	}
	

	inline LibMCDriver_TCPIPResult CWrapper::initWrapperTable(sLibMCDriver_TCPIPDynamicWrapperTable * pWrapperTable)
	{
		if (pWrapperTable == nullptr)
			return LIBMCDRIVER_TCPIP_ERROR_INVALIDPARAM;
		
		pWrapperTable->m_LibraryHandle = nullptr;
		pWrapperTable->m_Driver_Configure = nullptr;
		pWrapperTable->m_Driver_GetName = nullptr;
		pWrapperTable->m_Driver_GetType = nullptr;
		pWrapperTable->m_Driver_GetVersion = nullptr;
		pWrapperTable->m_Driver_GetHeaderInformation = nullptr;
		pWrapperTable->m_Driver_QueryParameters = nullptr;
		pWrapperTable->m_Driver_TCPIP_SetToSimulationMode = nullptr;
		pWrapperTable->m_Driver_TCPIP_IsSimulationMode = nullptr;
		pWrapperTable->m_Driver_TCPIP_Connect = nullptr;
		pWrapperTable->m_Driver_TCPIP_IsConnected = nullptr;
		pWrapperTable->m_Driver_TCPIP_Disconnect = nullptr;
		pWrapperTable->m_GetVersion = nullptr;
		pWrapperTable->m_GetLastError = nullptr;
		pWrapperTable->m_ReleaseInstance = nullptr;
		pWrapperTable->m_AcquireInstance = nullptr;
		pWrapperTable->m_InjectComponent = nullptr;
		pWrapperTable->m_GetSymbolLookupMethod = nullptr;
		pWrapperTable->m_CreateDriver = nullptr;
		
		return LIBMCDRIVER_TCPIP_SUCCESS;
	}

	inline LibMCDriver_TCPIPResult CWrapper::releaseWrapperTable(sLibMCDriver_TCPIPDynamicWrapperTable * pWrapperTable)
	{
		if (pWrapperTable == nullptr)
			return LIBMCDRIVER_TCPIP_ERROR_INVALIDPARAM;
		
		if (pWrapperTable->m_LibraryHandle != nullptr) {
		#ifdef _WIN32
			HMODULE hModule = (HMODULE) pWrapperTable->m_LibraryHandle;
			FreeLibrary(hModule);
		#else // _WIN32
			dlclose(pWrapperTable->m_LibraryHandle);
		#endif // _WIN32
			return initWrapperTable(pWrapperTable);
		}
		
		return LIBMCDRIVER_TCPIP_SUCCESS;
	}

	inline LibMCDriver_TCPIPResult CWrapper::loadWrapperTable(sLibMCDriver_TCPIPDynamicWrapperTable * pWrapperTable, const char * pLibraryFileName)
	{
		if (pWrapperTable == nullptr)
			return LIBMCDRIVER_TCPIP_ERROR_INVALIDPARAM;
		if (pLibraryFileName == nullptr)
			return LIBMCDRIVER_TCPIP_ERROR_INVALIDPARAM;
		
		#ifdef _WIN32
		// Convert filename to UTF16-string
		int nLength = (int)strlen(pLibraryFileName);
		int nBufferSize = nLength * 2 + 2;
		std::vector<wchar_t> wsLibraryFileName(nBufferSize);
		int nResult = MultiByteToWideChar(CP_UTF8, 0, pLibraryFileName, nLength, &wsLibraryFileName[0], nBufferSize);
		if (nResult == 0)
			return LIBMCDRIVER_TCPIP_ERROR_COULDNOTLOADLIBRARY;
		
		HMODULE hLibrary = LoadLibraryW(wsLibraryFileName.data());
		if (hLibrary == 0) 
			return LIBMCDRIVER_TCPIP_ERROR_COULDNOTLOADLIBRARY;
		#else // _WIN32
		void* hLibrary = dlopen(pLibraryFileName, RTLD_LAZY);
		if (hLibrary == 0) 
			return LIBMCDRIVER_TCPIP_ERROR_COULDNOTLOADLIBRARY;
		dlerror();
		#endif // _WIN32
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_Configure = (PLibMCDriver_TCPIPDriver_ConfigurePtr) GetProcAddress(hLibrary, "libmcdriver_tcpip_driver_configure");
		#else // _WIN32
		pWrapperTable->m_Driver_Configure = (PLibMCDriver_TCPIPDriver_ConfigurePtr) dlsym(hLibrary, "libmcdriver_tcpip_driver_configure");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_Configure == nullptr)
			return LIBMCDRIVER_TCPIP_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_GetName = (PLibMCDriver_TCPIPDriver_GetNamePtr) GetProcAddress(hLibrary, "libmcdriver_tcpip_driver_getname");
		#else // _WIN32
		pWrapperTable->m_Driver_GetName = (PLibMCDriver_TCPIPDriver_GetNamePtr) dlsym(hLibrary, "libmcdriver_tcpip_driver_getname");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_GetName == nullptr)
			return LIBMCDRIVER_TCPIP_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_GetType = (PLibMCDriver_TCPIPDriver_GetTypePtr) GetProcAddress(hLibrary, "libmcdriver_tcpip_driver_gettype");
		#else // _WIN32
		pWrapperTable->m_Driver_GetType = (PLibMCDriver_TCPIPDriver_GetTypePtr) dlsym(hLibrary, "libmcdriver_tcpip_driver_gettype");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_GetType == nullptr)
			return LIBMCDRIVER_TCPIP_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_GetVersion = (PLibMCDriver_TCPIPDriver_GetVersionPtr) GetProcAddress(hLibrary, "libmcdriver_tcpip_driver_getversion");
		#else // _WIN32
		pWrapperTable->m_Driver_GetVersion = (PLibMCDriver_TCPIPDriver_GetVersionPtr) dlsym(hLibrary, "libmcdriver_tcpip_driver_getversion");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_GetVersion == nullptr)
			return LIBMCDRIVER_TCPIP_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_GetHeaderInformation = (PLibMCDriver_TCPIPDriver_GetHeaderInformationPtr) GetProcAddress(hLibrary, "libmcdriver_tcpip_driver_getheaderinformation");
		#else // _WIN32
		pWrapperTable->m_Driver_GetHeaderInformation = (PLibMCDriver_TCPIPDriver_GetHeaderInformationPtr) dlsym(hLibrary, "libmcdriver_tcpip_driver_getheaderinformation");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_GetHeaderInformation == nullptr)
			return LIBMCDRIVER_TCPIP_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_QueryParameters = (PLibMCDriver_TCPIPDriver_QueryParametersPtr) GetProcAddress(hLibrary, "libmcdriver_tcpip_driver_queryparameters");
		#else // _WIN32
		pWrapperTable->m_Driver_QueryParameters = (PLibMCDriver_TCPIPDriver_QueryParametersPtr) dlsym(hLibrary, "libmcdriver_tcpip_driver_queryparameters");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_QueryParameters == nullptr)
			return LIBMCDRIVER_TCPIP_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_TCPIP_SetToSimulationMode = (PLibMCDriver_TCPIPDriver_TCPIP_SetToSimulationModePtr) GetProcAddress(hLibrary, "libmcdriver_tcpip_driver_tcpip_settosimulationmode");
		#else // _WIN32
		pWrapperTable->m_Driver_TCPIP_SetToSimulationMode = (PLibMCDriver_TCPIPDriver_TCPIP_SetToSimulationModePtr) dlsym(hLibrary, "libmcdriver_tcpip_driver_tcpip_settosimulationmode");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_TCPIP_SetToSimulationMode == nullptr)
			return LIBMCDRIVER_TCPIP_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_TCPIP_IsSimulationMode = (PLibMCDriver_TCPIPDriver_TCPIP_IsSimulationModePtr) GetProcAddress(hLibrary, "libmcdriver_tcpip_driver_tcpip_issimulationmode");
		#else // _WIN32
		pWrapperTable->m_Driver_TCPIP_IsSimulationMode = (PLibMCDriver_TCPIPDriver_TCPIP_IsSimulationModePtr) dlsym(hLibrary, "libmcdriver_tcpip_driver_tcpip_issimulationmode");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_TCPIP_IsSimulationMode == nullptr)
			return LIBMCDRIVER_TCPIP_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_TCPIP_Connect = (PLibMCDriver_TCPIPDriver_TCPIP_ConnectPtr) GetProcAddress(hLibrary, "libmcdriver_tcpip_driver_tcpip_connect");
		#else // _WIN32
		pWrapperTable->m_Driver_TCPIP_Connect = (PLibMCDriver_TCPIPDriver_TCPIP_ConnectPtr) dlsym(hLibrary, "libmcdriver_tcpip_driver_tcpip_connect");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_TCPIP_Connect == nullptr)
			return LIBMCDRIVER_TCPIP_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_TCPIP_IsConnected = (PLibMCDriver_TCPIPDriver_TCPIP_IsConnectedPtr) GetProcAddress(hLibrary, "libmcdriver_tcpip_driver_tcpip_isconnected");
		#else // _WIN32
		pWrapperTable->m_Driver_TCPIP_IsConnected = (PLibMCDriver_TCPIPDriver_TCPIP_IsConnectedPtr) dlsym(hLibrary, "libmcdriver_tcpip_driver_tcpip_isconnected");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_TCPIP_IsConnected == nullptr)
			return LIBMCDRIVER_TCPIP_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_TCPIP_Disconnect = (PLibMCDriver_TCPIPDriver_TCPIP_DisconnectPtr) GetProcAddress(hLibrary, "libmcdriver_tcpip_driver_tcpip_disconnect");
		#else // _WIN32
		pWrapperTable->m_Driver_TCPIP_Disconnect = (PLibMCDriver_TCPIPDriver_TCPIP_DisconnectPtr) dlsym(hLibrary, "libmcdriver_tcpip_driver_tcpip_disconnect");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_TCPIP_Disconnect == nullptr)
			return LIBMCDRIVER_TCPIP_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GetVersion = (PLibMCDriver_TCPIPGetVersionPtr) GetProcAddress(hLibrary, "libmcdriver_tcpip_getversion");
		#else // _WIN32
		pWrapperTable->m_GetVersion = (PLibMCDriver_TCPIPGetVersionPtr) dlsym(hLibrary, "libmcdriver_tcpip_getversion");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GetVersion == nullptr)
			return LIBMCDRIVER_TCPIP_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GetLastError = (PLibMCDriver_TCPIPGetLastErrorPtr) GetProcAddress(hLibrary, "libmcdriver_tcpip_getlasterror");
		#else // _WIN32
		pWrapperTable->m_GetLastError = (PLibMCDriver_TCPIPGetLastErrorPtr) dlsym(hLibrary, "libmcdriver_tcpip_getlasterror");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GetLastError == nullptr)
			return LIBMCDRIVER_TCPIP_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ReleaseInstance = (PLibMCDriver_TCPIPReleaseInstancePtr) GetProcAddress(hLibrary, "libmcdriver_tcpip_releaseinstance");
		#else // _WIN32
		pWrapperTable->m_ReleaseInstance = (PLibMCDriver_TCPIPReleaseInstancePtr) dlsym(hLibrary, "libmcdriver_tcpip_releaseinstance");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ReleaseInstance == nullptr)
			return LIBMCDRIVER_TCPIP_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_AcquireInstance = (PLibMCDriver_TCPIPAcquireInstancePtr) GetProcAddress(hLibrary, "libmcdriver_tcpip_acquireinstance");
		#else // _WIN32
		pWrapperTable->m_AcquireInstance = (PLibMCDriver_TCPIPAcquireInstancePtr) dlsym(hLibrary, "libmcdriver_tcpip_acquireinstance");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_AcquireInstance == nullptr)
			return LIBMCDRIVER_TCPIP_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_InjectComponent = (PLibMCDriver_TCPIPInjectComponentPtr) GetProcAddress(hLibrary, "libmcdriver_tcpip_injectcomponent");
		#else // _WIN32
		pWrapperTable->m_InjectComponent = (PLibMCDriver_TCPIPInjectComponentPtr) dlsym(hLibrary, "libmcdriver_tcpip_injectcomponent");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_InjectComponent == nullptr)
			return LIBMCDRIVER_TCPIP_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GetSymbolLookupMethod = (PLibMCDriver_TCPIPGetSymbolLookupMethodPtr) GetProcAddress(hLibrary, "libmcdriver_tcpip_getsymbollookupmethod");
		#else // _WIN32
		pWrapperTable->m_GetSymbolLookupMethod = (PLibMCDriver_TCPIPGetSymbolLookupMethodPtr) dlsym(hLibrary, "libmcdriver_tcpip_getsymbollookupmethod");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GetSymbolLookupMethod == nullptr)
			return LIBMCDRIVER_TCPIP_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_CreateDriver = (PLibMCDriver_TCPIPCreateDriverPtr) GetProcAddress(hLibrary, "libmcdriver_tcpip_createdriver");
		#else // _WIN32
		pWrapperTable->m_CreateDriver = (PLibMCDriver_TCPIPCreateDriverPtr) dlsym(hLibrary, "libmcdriver_tcpip_createdriver");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_CreateDriver == nullptr)
			return LIBMCDRIVER_TCPIP_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		pWrapperTable->m_LibraryHandle = hLibrary;
		return LIBMCDRIVER_TCPIP_SUCCESS;
	}

	inline LibMCDriver_TCPIPResult CWrapper::loadWrapperTableFromSymbolLookupMethod(sLibMCDriver_TCPIPDynamicWrapperTable * pWrapperTable, void* pSymbolLookupMethod)
{
		if (pWrapperTable == nullptr)
			return LIBMCDRIVER_TCPIP_ERROR_INVALIDPARAM;
		if (pSymbolLookupMethod == nullptr)
			return LIBMCDRIVER_TCPIP_ERROR_INVALIDPARAM;
		
		typedef LibMCDriver_TCPIPResult(*SymbolLookupType)(const char*, void**);
		
		SymbolLookupType pLookup = (SymbolLookupType)pSymbolLookupMethod;
		
		LibMCDriver_TCPIPResult eLookupError = LIBMCDRIVER_TCPIP_SUCCESS;
		eLookupError = (*pLookup)("libmcdriver_tcpip_driver_configure", (void**)&(pWrapperTable->m_Driver_Configure));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_Configure == nullptr) )
			return LIBMCDRIVER_TCPIP_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_tcpip_driver_getname", (void**)&(pWrapperTable->m_Driver_GetName));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_GetName == nullptr) )
			return LIBMCDRIVER_TCPIP_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_tcpip_driver_gettype", (void**)&(pWrapperTable->m_Driver_GetType));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_GetType == nullptr) )
			return LIBMCDRIVER_TCPIP_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_tcpip_driver_getversion", (void**)&(pWrapperTable->m_Driver_GetVersion));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_GetVersion == nullptr) )
			return LIBMCDRIVER_TCPIP_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_tcpip_driver_getheaderinformation", (void**)&(pWrapperTable->m_Driver_GetHeaderInformation));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_GetHeaderInformation == nullptr) )
			return LIBMCDRIVER_TCPIP_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_tcpip_driver_queryparameters", (void**)&(pWrapperTable->m_Driver_QueryParameters));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_QueryParameters == nullptr) )
			return LIBMCDRIVER_TCPIP_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_tcpip_driver_tcpip_settosimulationmode", (void**)&(pWrapperTable->m_Driver_TCPIP_SetToSimulationMode));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_TCPIP_SetToSimulationMode == nullptr) )
			return LIBMCDRIVER_TCPIP_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_tcpip_driver_tcpip_issimulationmode", (void**)&(pWrapperTable->m_Driver_TCPIP_IsSimulationMode));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_TCPIP_IsSimulationMode == nullptr) )
			return LIBMCDRIVER_TCPIP_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_tcpip_driver_tcpip_connect", (void**)&(pWrapperTable->m_Driver_TCPIP_Connect));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_TCPIP_Connect == nullptr) )
			return LIBMCDRIVER_TCPIP_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_tcpip_driver_tcpip_isconnected", (void**)&(pWrapperTable->m_Driver_TCPIP_IsConnected));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_TCPIP_IsConnected == nullptr) )
			return LIBMCDRIVER_TCPIP_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_tcpip_driver_tcpip_disconnect", (void**)&(pWrapperTable->m_Driver_TCPIP_Disconnect));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_TCPIP_Disconnect == nullptr) )
			return LIBMCDRIVER_TCPIP_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_tcpip_getversion", (void**)&(pWrapperTable->m_GetVersion));
		if ( (eLookupError != 0) || (pWrapperTable->m_GetVersion == nullptr) )
			return LIBMCDRIVER_TCPIP_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_tcpip_getlasterror", (void**)&(pWrapperTable->m_GetLastError));
		if ( (eLookupError != 0) || (pWrapperTable->m_GetLastError == nullptr) )
			return LIBMCDRIVER_TCPIP_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_tcpip_releaseinstance", (void**)&(pWrapperTable->m_ReleaseInstance));
		if ( (eLookupError != 0) || (pWrapperTable->m_ReleaseInstance == nullptr) )
			return LIBMCDRIVER_TCPIP_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_tcpip_acquireinstance", (void**)&(pWrapperTable->m_AcquireInstance));
		if ( (eLookupError != 0) || (pWrapperTable->m_AcquireInstance == nullptr) )
			return LIBMCDRIVER_TCPIP_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_tcpip_injectcomponent", (void**)&(pWrapperTable->m_InjectComponent));
		if ( (eLookupError != 0) || (pWrapperTable->m_InjectComponent == nullptr) )
			return LIBMCDRIVER_TCPIP_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_tcpip_getsymbollookupmethod", (void**)&(pWrapperTable->m_GetSymbolLookupMethod));
		if ( (eLookupError != 0) || (pWrapperTable->m_GetSymbolLookupMethod == nullptr) )
			return LIBMCDRIVER_TCPIP_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_tcpip_createdriver", (void**)&(pWrapperTable->m_CreateDriver));
		if ( (eLookupError != 0) || (pWrapperTable->m_CreateDriver == nullptr) )
			return LIBMCDRIVER_TCPIP_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		return LIBMCDRIVER_TCPIP_SUCCESS;
}

	
	
	/**
	 * Method definitions for class CBase
	 */
	
	/**
	 * Method definitions for class CDriver
	 */
	
	/**
	* CDriver::Configure - Configures a driver with its specific configuration data.
	* @param[in] sConfigurationString - Configuration data of driver.
	*/
	void CDriver::Configure(const std::string & sConfigurationString)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_Configure(m_pHandle, sConfigurationString.c_str()));
	}
	
	/**
	* CDriver::GetName - returns the name identifier of the driver
	* @return Name of the driver.
	*/
	std::string CDriver::GetName()
	{
		LibMCDriver_TCPIP_uint32 bytesNeededName = 0;
		LibMCDriver_TCPIP_uint32 bytesWrittenName = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetName(m_pHandle, 0, &bytesNeededName, nullptr));
		std::vector<char> bufferName(bytesNeededName);
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetName(m_pHandle, bytesNeededName, &bytesWrittenName, &bufferName[0]));
		
		return std::string(&bufferName[0]);
	}
	
	/**
	* CDriver::GetType - returns the type identifier of the driver
	* @return Type of the driver.
	*/
	std::string CDriver::GetType()
	{
		LibMCDriver_TCPIP_uint32 bytesNeededType = 0;
		LibMCDriver_TCPIP_uint32 bytesWrittenType = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetType(m_pHandle, 0, &bytesNeededType, nullptr));
		std::vector<char> bufferType(bytesNeededType);
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetType(m_pHandle, bytesNeededType, &bytesWrittenType, &bufferType[0]));
		
		return std::string(&bufferType[0]);
	}
	
	/**
	* CDriver::GetVersion - returns the version identifiers of the driver
	* @param[out] nMajor - Major version.
	* @param[out] nMinor - Minor version.
	* @param[out] nMicro - Micro version.
	* @param[out] sBuild - Build identifier.
	*/
	void CDriver::GetVersion(LibMCDriver_TCPIP_uint32 & nMajor, LibMCDriver_TCPIP_uint32 & nMinor, LibMCDriver_TCPIP_uint32 & nMicro, std::string & sBuild)
	{
		LibMCDriver_TCPIP_uint32 bytesNeededBuild = 0;
		LibMCDriver_TCPIP_uint32 bytesWrittenBuild = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetVersion(m_pHandle, &nMajor, &nMinor, &nMicro, 0, &bytesNeededBuild, nullptr));
		std::vector<char> bufferBuild(bytesNeededBuild);
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetVersion(m_pHandle, &nMajor, &nMinor, &nMicro, bytesNeededBuild, &bytesWrittenBuild, &bufferBuild[0]));
		sBuild = std::string(&bufferBuild[0]);
	}
	
	/**
	* CDriver::GetHeaderInformation - returns the header information
	* @param[out] sNameSpace - NameSpace of the driver.
	* @param[out] sBaseName - BaseName of the driver.
	*/
	void CDriver::GetHeaderInformation(std::string & sNameSpace, std::string & sBaseName)
	{
		LibMCDriver_TCPIP_uint32 bytesNeededNameSpace = 0;
		LibMCDriver_TCPIP_uint32 bytesWrittenNameSpace = 0;
		LibMCDriver_TCPIP_uint32 bytesNeededBaseName = 0;
		LibMCDriver_TCPIP_uint32 bytesWrittenBaseName = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetHeaderInformation(m_pHandle, 0, &bytesNeededNameSpace, nullptr, 0, &bytesNeededBaseName, nullptr));
		std::vector<char> bufferNameSpace(bytesNeededNameSpace);
		std::vector<char> bufferBaseName(bytesNeededBaseName);
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetHeaderInformation(m_pHandle, bytesNeededNameSpace, &bytesWrittenNameSpace, &bufferNameSpace[0], bytesNeededBaseName, &bytesWrittenBaseName, &bufferBaseName[0]));
		sNameSpace = std::string(&bufferNameSpace[0]);
		sBaseName = std::string(&bufferBaseName[0]);
	}
	
	/**
	* CDriver::QueryParameters - Stores the driver parameters in the driver environment.
	*/
	void CDriver::QueryParameters()
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_QueryParameters(m_pHandle));
	}
	
	/**
	 * Method definitions for class CDriver_TCPIP
	 */
	
	/**
	* CDriver_TCPIP::SetToSimulationMode - Turns the driver into a simulation mode.
	*/
	void CDriver_TCPIP::SetToSimulationMode()
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_TCPIP_SetToSimulationMode(m_pHandle));
	}
	
	/**
	* CDriver_TCPIP::IsSimulationMode - Returns if the driver is in simulation mode.
	* @return Flag if driver is in simulation mode.
	*/
	bool CDriver_TCPIP::IsSimulationMode()
	{
		bool resultSimulationModeEnabled = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_TCPIP_IsSimulationMode(m_pHandle, &resultSimulationModeEnabled));
		
		return resultSimulationModeEnabled;
	}
	
	/**
	* CDriver_TCPIP::Connect - Connects to TCP Server.
	* @param[in] sIPAddress - IP Address.
	* @param[in] nPort - Port.
	* @param[in] nTimeout - Timeout in milliseconds.
	*/
	void CDriver_TCPIP::Connect(const std::string & sIPAddress, const LibMCDriver_TCPIP_uint32 nPort, const LibMCDriver_TCPIP_uint32 nTimeout)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_TCPIP_Connect(m_pHandle, sIPAddress.c_str(), nPort, nTimeout));
	}
	
	/**
	* CDriver_TCPIP::IsConnected - Returns if the driver is connected.
	* @return .
	*/
	bool CDriver_TCPIP::IsConnected()
	{
		bool resultIsConnected = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_TCPIP_IsConnected(m_pHandle, &resultIsConnected));
		
		return resultIsConnected;
	}
	
	/**
	* CDriver_TCPIP::Disconnect - Disconnects from the Server.
	*/
	void CDriver_TCPIP::Disconnect()
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_TCPIP_Disconnect(m_pHandle));
	}

} // namespace LibMCDriver_TCPIP

#endif // __LIBMCDRIVER_TCPIP_CPPHEADER_DYNAMIC_CPP

