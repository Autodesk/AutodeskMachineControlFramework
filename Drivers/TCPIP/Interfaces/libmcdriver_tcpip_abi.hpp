/*++

Copyright (C) 2022 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.8.0-develop.

Abstract: This is an autogenerated C++-Header file in order to allow an easy
 use of Generic TCP IP Driver

Interface version: 1.0.0

*/

#ifndef __LIBMCDRIVER_TCPIP_HEADER_CPP
#define __LIBMCDRIVER_TCPIP_HEADER_CPP

#ifdef __LIBMCDRIVER_TCPIP_EXPORTS
#ifdef _WIN32
#define LIBMCDRIVER_TCPIP_DECLSPEC __declspec (dllexport)
#else // _WIN32
#define LIBMCDRIVER_TCPIP_DECLSPEC __attribute__((visibility("default")))
#endif // _WIN32
#else // __LIBMCDRIVER_TCPIP_EXPORTS
#define LIBMCDRIVER_TCPIP_DECLSPEC
#endif // __LIBMCDRIVER_TCPIP_EXPORTS

#include "libmcdriver_tcpip_types.hpp"

#include "libmcenv_dynamic.hpp"

#ifdef __cplusplus
extern "C" {
#endif

/*************************************************************************************************************************
 Class definition for Base
**************************************************************************************************************************/

/*************************************************************************************************************************
 Class definition for Driver
**************************************************************************************************************************/

/**
* Configures a driver with its specific configuration data.
*
* @param[in] pDriver - Driver instance.
* @param[in] pConfigurationString - Configuration data of driver.
* @return error code or 0 (success)
*/
LIBMCDRIVER_TCPIP_DECLSPEC LibMCDriver_TCPIPResult libmcdriver_tcpip_driver_configure(LibMCDriver_TCPIP_Driver pDriver, const char * pConfigurationString);

/**
* returns the name identifier of the driver
*
* @param[in] pDriver - Driver instance.
* @param[in] nNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNameBuffer -  buffer of Name of the driver., may be NULL
* @return error code or 0 (success)
*/
LIBMCDRIVER_TCPIP_DECLSPEC LibMCDriver_TCPIPResult libmcdriver_tcpip_driver_getname(LibMCDriver_TCPIP_Driver pDriver, const LibMCDriver_TCPIP_uint32 nNameBufferSize, LibMCDriver_TCPIP_uint32* pNameNeededChars, char * pNameBuffer);

/**
* returns the type identifier of the driver
*
* @param[in] pDriver - Driver instance.
* @param[in] nTypeBufferSize - size of the buffer (including trailing 0)
* @param[out] pTypeNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pTypeBuffer -  buffer of Type of the driver., may be NULL
* @return error code or 0 (success)
*/
LIBMCDRIVER_TCPIP_DECLSPEC LibMCDriver_TCPIPResult libmcdriver_tcpip_driver_gettype(LibMCDriver_TCPIP_Driver pDriver, const LibMCDriver_TCPIP_uint32 nTypeBufferSize, LibMCDriver_TCPIP_uint32* pTypeNeededChars, char * pTypeBuffer);

/**
* returns the version identifiers of the driver
*
* @param[in] pDriver - Driver instance.
* @param[out] pMajor - Major version.
* @param[out] pMinor - Minor version.
* @param[out] pMicro - Micro version.
* @param[in] nBuildBufferSize - size of the buffer (including trailing 0)
* @param[out] pBuildNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pBuildBuffer -  buffer of Build identifier., may be NULL
* @return error code or 0 (success)
*/
LIBMCDRIVER_TCPIP_DECLSPEC LibMCDriver_TCPIPResult libmcdriver_tcpip_driver_getversion(LibMCDriver_TCPIP_Driver pDriver, LibMCDriver_TCPIP_uint32 * pMajor, LibMCDriver_TCPIP_uint32 * pMinor, LibMCDriver_TCPIP_uint32 * pMicro, const LibMCDriver_TCPIP_uint32 nBuildBufferSize, LibMCDriver_TCPIP_uint32* pBuildNeededChars, char * pBuildBuffer);

/**
* returns the header information
*
* @param[in] pDriver - Driver instance.
* @param[in] nNameSpaceBufferSize - size of the buffer (including trailing 0)
* @param[out] pNameSpaceNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNameSpaceBuffer -  buffer of NameSpace of the driver., may be NULL
* @param[in] nBaseNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pBaseNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pBaseNameBuffer -  buffer of BaseName of the driver., may be NULL
* @return error code or 0 (success)
*/
LIBMCDRIVER_TCPIP_DECLSPEC LibMCDriver_TCPIPResult libmcdriver_tcpip_driver_getheaderinformation(LibMCDriver_TCPIP_Driver pDriver, const LibMCDriver_TCPIP_uint32 nNameSpaceBufferSize, LibMCDriver_TCPIP_uint32* pNameSpaceNeededChars, char * pNameSpaceBuffer, const LibMCDriver_TCPIP_uint32 nBaseNameBufferSize, LibMCDriver_TCPIP_uint32* pBaseNameNeededChars, char * pBaseNameBuffer);

/**
* Stores the driver parameters in the driver environment.
*
* @param[in] pDriver - Driver instance.
* @return error code or 0 (success)
*/
LIBMCDRIVER_TCPIP_DECLSPEC LibMCDriver_TCPIPResult libmcdriver_tcpip_driver_queryparameters(LibMCDriver_TCPIP_Driver pDriver);

/*************************************************************************************************************************
 Class definition for Driver_TCPIPPacket
**************************************************************************************************************************/

/**
* Returns the size of the packet.
*
* @param[in] pDriver_TCPIPPacket - Driver_TCPIPPacket instance.
* @param[out] pPacketSize - returns size of packet.
* @return error code or 0 (success)
*/
LIBMCDRIVER_TCPIP_DECLSPEC LibMCDriver_TCPIPResult libmcdriver_tcpip_driver_tcpippacket_getsize(LibMCDriver_TCPIP_Driver_TCPIPPacket pDriver_TCPIPPacket, LibMCDriver_TCPIP_uint32 * pPacketSize);

/**
* Returns the data of the packet.
*
* @param[in] pDriver_TCPIPPacket - Driver_TCPIPPacket instance.
* @param[in] nBufferBufferSize - Number of elements in buffer
* @param[out] pBufferNeededCount - will be filled with the count of the written elements, or needed buffer size.
* @param[out] pBufferBuffer - uint8  buffer of packet data.
* @return error code or 0 (success)
*/
LIBMCDRIVER_TCPIP_DECLSPEC LibMCDriver_TCPIPResult libmcdriver_tcpip_driver_tcpippacket_getdata(LibMCDriver_TCPIP_Driver_TCPIPPacket pDriver_TCPIPPacket, const LibMCDriver_TCPIP_uint64 nBufferBufferSize, LibMCDriver_TCPIP_uint64* pBufferNeededCount, LibMCDriver_TCPIP_uint8 * pBufferBuffer);

/*************************************************************************************************************************
 Class definition for Driver_TCPIP
**************************************************************************************************************************/

/**
* Turns the driver into a simulation mode.
*
* @param[in] pDriver_TCPIP - Driver_TCPIP instance.
* @return error code or 0 (success)
*/
LIBMCDRIVER_TCPIP_DECLSPEC LibMCDriver_TCPIPResult libmcdriver_tcpip_driver_tcpip_settosimulationmode(LibMCDriver_TCPIP_Driver_TCPIP pDriver_TCPIP);

/**
* Returns if the driver is in simulation mode.
*
* @param[in] pDriver_TCPIP - Driver_TCPIP instance.
* @param[out] pSimulationModeEnabled - Flag if driver is in simulation mode.
* @return error code or 0 (success)
*/
LIBMCDRIVER_TCPIP_DECLSPEC LibMCDriver_TCPIPResult libmcdriver_tcpip_driver_tcpip_issimulationmode(LibMCDriver_TCPIP_Driver_TCPIP pDriver_TCPIP, bool * pSimulationModeEnabled);

/**
* Connects to TCP Server.
*
* @param[in] pDriver_TCPIP - Driver_TCPIP instance.
* @param[in] pIPAddress - IP Address.
* @param[in] nPort - Port.
* @param[in] nTimeout - Timeout in milliseconds.
* @return error code or 0 (success)
*/
LIBMCDRIVER_TCPIP_DECLSPEC LibMCDriver_TCPIPResult libmcdriver_tcpip_driver_tcpip_connect(LibMCDriver_TCPIP_Driver_TCPIP pDriver_TCPIP, const char * pIPAddress, LibMCDriver_TCPIP_uint32 nPort, LibMCDriver_TCPIP_uint32 nTimeout);

/**
* Returns if the driver is connected.
*
* @param[in] pDriver_TCPIP - Driver_TCPIP instance.
* @param[out] pIsConnected - .
* @return error code or 0 (success)
*/
LIBMCDRIVER_TCPIP_DECLSPEC LibMCDriver_TCPIPResult libmcdriver_tcpip_driver_tcpip_isconnected(LibMCDriver_TCPIP_Driver_TCPIP pDriver_TCPIP, bool * pIsConnected);

/**
* Disconnects from the Server.
*
* @param[in] pDriver_TCPIP - Driver_TCPIP instance.
* @return error code or 0 (success)
*/
LIBMCDRIVER_TCPIP_DECLSPEC LibMCDriver_TCPIPResult libmcdriver_tcpip_driver_tcpip_disconnect(LibMCDriver_TCPIP_Driver_TCPIP pDriver_TCPIP);

/**
* Sends a buffer of bytes to the Server.
*
* @param[in] pDriver_TCPIP - Driver_TCPIP instance.
* @param[in] nBufferBufferSize - Number of elements in buffer
* @param[in] pBufferBuffer - uint8 buffer of packet payload.
* @return error code or 0 (success)
*/
LIBMCDRIVER_TCPIP_DECLSPEC LibMCDriver_TCPIPResult libmcdriver_tcpip_driver_tcpip_sendbuffer(LibMCDriver_TCPIP_Driver_TCPIP pDriver_TCPIP, LibMCDriver_TCPIP_uint64 nBufferBufferSize, const LibMCDriver_TCPIP_uint8 * pBufferBuffer);

/**
* Waits for a server packet to arrive.
*
* @param[in] pDriver_TCPIP - Driver_TCPIP instance.
* @param[in] nTimeOutInMS - timeout in Milliseconds.
* @param[out] pDataAvailable - Flag if a new packet has arrived.
* @return error code or 0 (success)
*/
LIBMCDRIVER_TCPIP_DECLSPEC LibMCDriver_TCPIPResult libmcdriver_tcpip_driver_tcpip_waitfordata(LibMCDriver_TCPIP_Driver_TCPIP pDriver_TCPIP, LibMCDriver_TCPIP_uint32 nTimeOutInMS, bool * pDataAvailable);

/**
* Receives a fixed length packet. Fails if there is a connection error.
*
* @param[in] pDriver_TCPIP - Driver_TCPIP instance.
* @param[in] nPacketSize - Size of packet to receive.
* @param[in] nTimeOutInMS - timeout in Milliseconds.
* @param[out] pPacket - Port.
* @return error code or 0 (success)
*/
LIBMCDRIVER_TCPIP_DECLSPEC LibMCDriver_TCPIPResult libmcdriver_tcpip_driver_tcpip_receivepacket(LibMCDriver_TCPIP_Driver_TCPIP pDriver_TCPIP, LibMCDriver_TCPIP_uint32 nPacketSize, LibMCDriver_TCPIP_uint32 nTimeOutInMS, LibMCDriver_TCPIP_Driver_TCPIPPacket * pPacket);

/*************************************************************************************************************************
 Global functions
**************************************************************************************************************************/

/**
* retrieves the binary version of this library.
*
* @param[out] pMajor - returns the major version of this library
* @param[out] pMinor - returns the minor version of this library
* @param[out] pMicro - returns the micro version of this library
* @return error code or 0 (success)
*/
LIBMCDRIVER_TCPIP_DECLSPEC LibMCDriver_TCPIPResult libmcdriver_tcpip_getversion(LibMCDriver_TCPIP_uint32 * pMajor, LibMCDriver_TCPIP_uint32 * pMinor, LibMCDriver_TCPIP_uint32 * pMicro);

/**
* Returns the last error recorded on this object
*
* @param[in] pInstance - Instance Handle
* @param[in] nErrorMessageBufferSize - size of the buffer (including trailing 0)
* @param[out] pErrorMessageNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pErrorMessageBuffer -  buffer of Message of the last error, may be NULL
* @param[out] pHasError - Is there a last error to query
* @return error code or 0 (success)
*/
LIBMCDRIVER_TCPIP_DECLSPEC LibMCDriver_TCPIPResult libmcdriver_tcpip_getlasterror(LibMCDriver_TCPIP_Base pInstance, const LibMCDriver_TCPIP_uint32 nErrorMessageBufferSize, LibMCDriver_TCPIP_uint32* pErrorMessageNeededChars, char * pErrorMessageBuffer, bool * pHasError);

/**
* Releases shared ownership of an Instance
*
* @param[in] pInstance - Instance Handle
* @return error code or 0 (success)
*/
LIBMCDRIVER_TCPIP_DECLSPEC LibMCDriver_TCPIPResult libmcdriver_tcpip_releaseinstance(LibMCDriver_TCPIP_Base pInstance);

/**
* Acquires shared ownership of an Instance
*
* @param[in] pInstance - Instance Handle
* @return error code or 0 (success)
*/
LIBMCDRIVER_TCPIP_DECLSPEC LibMCDriver_TCPIPResult libmcdriver_tcpip_acquireinstance(LibMCDriver_TCPIP_Base pInstance);

/**
* Injects an imported component for usage within this component
*
* @param[in] pNameSpace - NameSpace of the injected component
* @param[in] pSymbolAddressMethod - Address of the SymbolAddressMethod of the injected component
* @return error code or 0 (success)
*/
LIBMCDRIVER_TCPIP_DECLSPEC LibMCDriver_TCPIPResult libmcdriver_tcpip_injectcomponent(const char * pNameSpace, LibMCDriver_TCPIP_pvoid pSymbolAddressMethod);

/**
* Returns the address of the SymbolLookupMethod
*
* @param[out] pSymbolLookupMethod - Address of the SymbolAddressMethod
* @return error code or 0 (success)
*/
LIBMCDRIVER_TCPIP_DECLSPEC LibMCDriver_TCPIPResult libmcdriver_tcpip_getsymbollookupmethod(LibMCDriver_TCPIP_pvoid * pSymbolLookupMethod);

/**
* Creates a driver instance with a specific name.
*
* @param[in] pName - Name of driver to be created.
* @param[in] pType - Type of driver to be created.
* @param[in] pDriverEnvironment - Environment of this driver.
* @param[out] pInstance - New Driver instance
* @return error code or 0 (success)
*/
LIBMCDRIVER_TCPIP_DECLSPEC LibMCDriver_TCPIPResult libmcdriver_tcpip_createdriver(const char * pName, const char * pType, LibMCEnv_DriverEnvironment pDriverEnvironment, LibMCDriver_TCPIP_Driver * pInstance);

#ifdef __cplusplus
}
#endif

#endif // __LIBMCDRIVER_TCPIP_HEADER_CPP

