/*++

Copyright (C) 2022 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.7.0-develop.

Abstract: This is an autogenerated C++-Header file with basic types in
order to allow an easy use of Generic TCP IP Driver

Interface version: 1.0.0

*/

#ifndef __LIBMCDRIVER_TCPIP_TYPES_HEADER_CPP
#define __LIBMCDRIVER_TCPIP_TYPES_HEADER_CPP


/*************************************************************************************************************************
 Scalar types definition
**************************************************************************************************************************/

#ifdef LIBMCDRIVER_TCPIP_USELEGACYINTEGERTYPES

typedef unsigned char LibMCDriver_TCPIP_uint8;
typedef unsigned short LibMCDriver_TCPIP_uint16 ;
typedef unsigned int LibMCDriver_TCPIP_uint32;
typedef unsigned long long LibMCDriver_TCPIP_uint64;
typedef char LibMCDriver_TCPIP_int8;
typedef short LibMCDriver_TCPIP_int16;
typedef int LibMCDriver_TCPIP_int32;
typedef long long LibMCDriver_TCPIP_int64;

#else // LIBMCDRIVER_TCPIP_USELEGACYINTEGERTYPES

#include <stdint.h>

typedef uint8_t LibMCDriver_TCPIP_uint8;
typedef uint16_t LibMCDriver_TCPIP_uint16;
typedef uint32_t LibMCDriver_TCPIP_uint32;
typedef uint64_t LibMCDriver_TCPIP_uint64;
typedef int8_t LibMCDriver_TCPIP_int8;
typedef int16_t LibMCDriver_TCPIP_int16;
typedef int32_t LibMCDriver_TCPIP_int32;
typedef int64_t LibMCDriver_TCPIP_int64 ;

#endif // LIBMCDRIVER_TCPIP_USELEGACYINTEGERTYPES

typedef float LibMCDriver_TCPIP_single;
typedef double LibMCDriver_TCPIP_double;

/*************************************************************************************************************************
 General type definitions
**************************************************************************************************************************/

typedef LibMCDriver_TCPIP_int32 LibMCDriver_TCPIPResult;
typedef void * LibMCDriver_TCPIPHandle;
typedef void * LibMCDriver_TCPIP_pvoid;

/*************************************************************************************************************************
 Version for LibMCDriver_TCPIP
**************************************************************************************************************************/

#define LIBMCDRIVER_TCPIP_VERSION_MAJOR 1
#define LIBMCDRIVER_TCPIP_VERSION_MINOR 0
#define LIBMCDRIVER_TCPIP_VERSION_MICRO 0
#define LIBMCDRIVER_TCPIP_VERSION_PRERELEASEINFO ""
#define LIBMCDRIVER_TCPIP_VERSION_BUILDINFO ""

/*************************************************************************************************************************
 Error constants for LibMCDriver_TCPIP
**************************************************************************************************************************/

#define LIBMCDRIVER_TCPIP_SUCCESS 0
#define LIBMCDRIVER_TCPIP_ERROR_NOTIMPLEMENTED 1
#define LIBMCDRIVER_TCPIP_ERROR_INVALIDPARAM 2
#define LIBMCDRIVER_TCPIP_ERROR_INVALIDCAST 3
#define LIBMCDRIVER_TCPIP_ERROR_BUFFERTOOSMALL 4
#define LIBMCDRIVER_TCPIP_ERROR_GENERICEXCEPTION 5
#define LIBMCDRIVER_TCPIP_ERROR_COULDNOTLOADLIBRARY 6
#define LIBMCDRIVER_TCPIP_ERROR_COULDNOTFINDLIBRARYEXPORT 7
#define LIBMCDRIVER_TCPIP_ERROR_INCOMPATIBLEBINARYVERSION 8
#define LIBMCDRIVER_TCPIP_ERROR_INVALIDSTATENAME 9
#define LIBMCDRIVER_TCPIP_ERROR_DRIVERERROR 1000
#define LIBMCDRIVER_TCPIP_ERROR_DRIVERNOTINITIALISED 1001
#define LIBMCDRIVER_TCPIP_ERROR_DRIVERNOTCONNECTED 1002
#define LIBMCDRIVER_TCPIP_ERROR_COULDNOTGETADDRESSINFO 1003
#define LIBMCDRIVER_TCPIP_ERROR_COULDNOTCREATESOCKET 1004
#define LIBMCDRIVER_TCPIP_ERROR_COULDNOTCONNECT 1005
#define LIBMCDRIVER_TCPIP_ERROR_SENDERROR 1006
#define LIBMCDRIVER_TCPIP_ERROR_RECEIVECOUNTEXCEEDSMAXIMUM 1007
#define LIBMCDRIVER_TCPIP_ERROR_CONNECTIONCLOSED 1008
#define LIBMCDRIVER_TCPIP_ERROR_RECEIVEERROR 1009
#define LIBMCDRIVER_TCPIP_ERROR_SENDCOUNTEXCEEDSMAXIMUM 1010

/*************************************************************************************************************************
 Error strings for LibMCDriver_TCPIP
**************************************************************************************************************************/

inline const char * LIBMCDRIVER_TCPIP_GETERRORSTRING (LibMCDriver_TCPIPResult nErrorCode) {
  switch (nErrorCode) {
    case LIBMCDRIVER_TCPIP_SUCCESS: return "no error";
    case LIBMCDRIVER_TCPIP_ERROR_NOTIMPLEMENTED: return "functionality not implemented";
    case LIBMCDRIVER_TCPIP_ERROR_INVALIDPARAM: return "an invalid parameter was passed";
    case LIBMCDRIVER_TCPIP_ERROR_INVALIDCAST: return "a type cast failed";
    case LIBMCDRIVER_TCPIP_ERROR_BUFFERTOOSMALL: return "a provided buffer is too small";
    case LIBMCDRIVER_TCPIP_ERROR_GENERICEXCEPTION: return "a generic exception occurred";
    case LIBMCDRIVER_TCPIP_ERROR_COULDNOTLOADLIBRARY: return "the library could not be loaded";
    case LIBMCDRIVER_TCPIP_ERROR_COULDNOTFINDLIBRARYEXPORT: return "a required exported symbol could not be found in the library";
    case LIBMCDRIVER_TCPIP_ERROR_INCOMPATIBLEBINARYVERSION: return "the version of the binary interface does not match the bindings interface";
    case LIBMCDRIVER_TCPIP_ERROR_INVALIDSTATENAME: return "invalid state name";
    case LIBMCDRIVER_TCPIP_ERROR_DRIVERERROR: return "a driver error occured";
    case LIBMCDRIVER_TCPIP_ERROR_DRIVERNOTINITIALISED: return "the driver is not initialised";
    case LIBMCDRIVER_TCPIP_ERROR_DRIVERNOTCONNECTED: return "the driver is not connected";
    case LIBMCDRIVER_TCPIP_ERROR_COULDNOTGETADDRESSINFO: return "Could not get address info.";
    case LIBMCDRIVER_TCPIP_ERROR_COULDNOTCREATESOCKET: return "Could not create socket.";
    case LIBMCDRIVER_TCPIP_ERROR_COULDNOTCONNECT: return "Could not connect.";
    case LIBMCDRIVER_TCPIP_ERROR_SENDERROR: return "Send error.";
    case LIBMCDRIVER_TCPIP_ERROR_RECEIVECOUNTEXCEEDSMAXIMUM: return "Receive count exceeds maximum.";
    case LIBMCDRIVER_TCPIP_ERROR_CONNECTIONCLOSED: return "Connection closed.";
    case LIBMCDRIVER_TCPIP_ERROR_RECEIVEERROR: return "Receive error.";
    case LIBMCDRIVER_TCPIP_ERROR_SENDCOUNTEXCEEDSMAXIMUM: return "Send count exceeds maximum.";
    default: return "unknown error";
  }
}

/*************************************************************************************************************************
 Declaration of handle classes 
**************************************************************************************************************************/

typedef LibMCDriver_TCPIPHandle LibMCDriver_TCPIP_Base;
typedef LibMCDriver_TCPIPHandle LibMCDriver_TCPIP_Driver;
typedef LibMCDriver_TCPIPHandle LibMCDriver_TCPIP_Driver_TCPIPPacket;
typedef LibMCDriver_TCPIPHandle LibMCDriver_TCPIP_Driver_TCPIP;

namespace LibMCDriver_TCPIP {

} // namespace LibMCDriver_TCPIP;

// define legacy C-names for enums, structs and function types

#endif // __LIBMCDRIVER_TCPIP_TYPES_HEADER_CPP
