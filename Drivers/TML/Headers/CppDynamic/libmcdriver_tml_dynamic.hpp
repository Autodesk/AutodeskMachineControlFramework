/*++

Copyright (C) 2024 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.8.0-develop.

Abstract: This is an autogenerated C++-Header file in order to allow an easy
 use of MC Driver Technosoft Motion Library

Interface version: 2.0.0

*/

#ifndef __LIBMCDRIVER_TML_CPPHEADER_DYNAMIC_CPP
#define __LIBMCDRIVER_TML_CPPHEADER_DYNAMIC_CPP

#include "libmcdriver_tml_types.hpp"
#include "libmcdriver_tml_dynamic.h"

#include "libmcenv_dynamic.hpp"

#ifdef _WIN32
#include <windows.h>
#else // _WIN32
#include <dlfcn.h>
#endif // _WIN32
#include <string>
#include <memory>
#include <vector>
#include <exception>

namespace LibMCDriver_TML {

/*************************************************************************************************************************
 Forward Declaration of all classes
**************************************************************************************************************************/
class CWrapper;
class CBase;
class CDriver;
class CAxis;
class CChannel;
class CDriver_TML;

/*************************************************************************************************************************
 Declaration of deprecated class types
**************************************************************************************************************************/
typedef CWrapper CLibMCDriver_TMLWrapper;
typedef CBase CLibMCDriver_TMLBase;
typedef CDriver CLibMCDriver_TMLDriver;
typedef CAxis CLibMCDriver_TMLAxis;
typedef CChannel CLibMCDriver_TMLChannel;
typedef CDriver_TML CLibMCDriver_TMLDriver_TML;

/*************************************************************************************************************************
 Declaration of shared pointer types
**************************************************************************************************************************/
typedef std::shared_ptr<CWrapper> PWrapper;
typedef std::shared_ptr<CBase> PBase;
typedef std::shared_ptr<CDriver> PDriver;
typedef std::shared_ptr<CAxis> PAxis;
typedef std::shared_ptr<CChannel> PChannel;
typedef std::shared_ptr<CDriver_TML> PDriver_TML;

/*************************************************************************************************************************
 Declaration of deprecated shared pointer types
**************************************************************************************************************************/
typedef PWrapper PLibMCDriver_TMLWrapper;
typedef PBase PLibMCDriver_TMLBase;
typedef PDriver PLibMCDriver_TMLDriver;
typedef PAxis PLibMCDriver_TMLAxis;
typedef PChannel PLibMCDriver_TMLChannel;
typedef PDriver_TML PLibMCDriver_TMLDriver_TML;


/*************************************************************************************************************************
 classParam Definition
**************************************************************************************************************************/

template<class T> class classParam {
private:
	const T* m_ptr;

public:
	classParam(const T* ptr)
		: m_ptr (ptr)
	{
	}

	classParam(std::shared_ptr <T> sharedPtr)
		: m_ptr (sharedPtr.get())
	{
	}

	LibMCDriver_TMLHandle GetHandle()
	{
		if (m_ptr != nullptr)
			return m_ptr->handle();
		return nullptr;
	}
};

/*************************************************************************************************************************
 Class ELibMCDriver_TMLException 
**************************************************************************************************************************/
class ELibMCDriver_TMLException : public std::exception {
protected:
	/**
	* Error code for the Exception.
	*/
	LibMCDriver_TMLResult m_errorCode;
	/**
	* Error message for the Exception.
	*/
	std::string m_errorMessage;
	std::string m_originalErrorMessage;

public:
	/**
	* Exception Constructor.
	*/
	ELibMCDriver_TMLException(LibMCDriver_TMLResult errorCode, const std::string & sErrorMessage)
		: m_errorCode(errorCode), m_originalErrorMessage(sErrorMessage)
	{
		m_errorMessage = buildErrorMessage();
	}

	/**
	* Returns error code
	*/
	LibMCDriver_TMLResult getErrorCode() const noexcept
	{
		return m_errorCode;
	}

	/**
	* Returns error message
	*/
	const char* what() const noexcept
	{
		return m_errorMessage.c_str();
	}

	const char* getErrorMessage() const noexcept
	{
		return m_originalErrorMessage.c_str();
	}

	const char* getErrorName() const noexcept
	{
		switch(getErrorCode()) {
			case LIBMCDRIVER_TML_SUCCESS: return "SUCCESS";
			case LIBMCDRIVER_TML_ERROR_NOTIMPLEMENTED: return "NOTIMPLEMENTED";
			case LIBMCDRIVER_TML_ERROR_INVALIDPARAM: return "INVALIDPARAM";
			case LIBMCDRIVER_TML_ERROR_INVALIDCAST: return "INVALIDCAST";
			case LIBMCDRIVER_TML_ERROR_BUFFERTOOSMALL: return "BUFFERTOOSMALL";
			case LIBMCDRIVER_TML_ERROR_GENERICEXCEPTION: return "GENERICEXCEPTION";
			case LIBMCDRIVER_TML_ERROR_COULDNOTLOADLIBRARY: return "COULDNOTLOADLIBRARY";
			case LIBMCDRIVER_TML_ERROR_COULDNOTFINDLIBRARYEXPORT: return "COULDNOTFINDLIBRARYEXPORT";
			case LIBMCDRIVER_TML_ERROR_INCOMPATIBLEBINARYVERSION: return "INCOMPATIBLEBINARYVERSION";
			case LIBMCDRIVER_TML_ERROR_DRIVERERROR: return "DRIVERERROR";
			case LIBMCDRIVER_TML_ERROR_SDKALREADYLOADED: return "SDKALREADYLOADED";
		}
		return "UNKNOWN";
	}

	const char* getErrorDescription() const noexcept
	{
		switch(getErrorCode()) {
			case LIBMCDRIVER_TML_SUCCESS: return "success";
			case LIBMCDRIVER_TML_ERROR_NOTIMPLEMENTED: return "functionality not implemented";
			case LIBMCDRIVER_TML_ERROR_INVALIDPARAM: return "an invalid parameter was passed";
			case LIBMCDRIVER_TML_ERROR_INVALIDCAST: return "a type cast failed";
			case LIBMCDRIVER_TML_ERROR_BUFFERTOOSMALL: return "a provided buffer is too small";
			case LIBMCDRIVER_TML_ERROR_GENERICEXCEPTION: return "a generic exception occurred";
			case LIBMCDRIVER_TML_ERROR_COULDNOTLOADLIBRARY: return "the library could not be loaded";
			case LIBMCDRIVER_TML_ERROR_COULDNOTFINDLIBRARYEXPORT: return "a required exported symbol could not be found in the library";
			case LIBMCDRIVER_TML_ERROR_INCOMPATIBLEBINARYVERSION: return "the version of the binary interface does not match the bindings interface";
			case LIBMCDRIVER_TML_ERROR_DRIVERERROR: return "a driver error occured";
			case LIBMCDRIVER_TML_ERROR_SDKALREADYLOADED: return "SDK already loaded";
		}
		return "unknown error";
	}

private:

	std::string buildErrorMessage() const noexcept
	{
		std::string msg = m_originalErrorMessage;
		if (msg.empty()) {
			msg = getErrorDescription();
		}
		return std::string("Error: ") + getErrorName() + ": " + msg;
	}
};

/*************************************************************************************************************************
 Class CInputVector
**************************************************************************************************************************/
template <typename T>
class CInputVector {
private:
	
	const T* m_data;
	size_t m_size;
	
public:
	
	CInputVector(const std::vector<T>& vec)
		: m_data( vec.data() ), m_size( vec.size() )
	{
	}
	
	CInputVector(const T* in_data, size_t in_size)
		: m_data( in_data ), m_size(in_size )
	{
	}
	
	const T* data() const
	{
		return m_data;
	}
	
	size_t size() const
	{
		return m_size;
	}
	
};

// declare deprecated class name
template<typename T>
using CLibMCDriver_TMLInputVector = CInputVector<T>;

/*************************************************************************************************************************
 Class CWrapper 
**************************************************************************************************************************/
class CWrapper {
public:
	
	explicit CWrapper(void* pSymbolLookupMethod)
	{
		CheckError(nullptr, initWrapperTable(&m_WrapperTable));
		CheckError(nullptr, loadWrapperTableFromSymbolLookupMethod(&m_WrapperTable, pSymbolLookupMethod));
		
		CheckError(nullptr, checkBinaryVersion());
	}
	
	explicit CWrapper(const std::string &sFileName)
	{
		CheckError(nullptr, initWrapperTable(&m_WrapperTable));
		CheckError(nullptr, loadWrapperTable(&m_WrapperTable, sFileName.c_str()));
		
		CheckError(nullptr, checkBinaryVersion());
	}
	
	static PWrapper loadLibrary(const std::string &sFileName)
	{
		return std::make_shared<CWrapper>(sFileName);
	}
	
	static PWrapper loadLibraryFromSymbolLookupMethod(void* pSymbolLookupMethod)
	{
		return std::make_shared<CWrapper>(pSymbolLookupMethod);
	}
	
	~CWrapper()
	{
		releaseWrapperTable(&m_WrapperTable);
	}
	
	inline void CheckError(CBase * pBaseClass, LibMCDriver_TMLResult nResult);

	inline void GetVersion(LibMCDriver_TML_uint32 & nMajor, LibMCDriver_TML_uint32 & nMinor, LibMCDriver_TML_uint32 & nMicro);
	inline bool GetLastError(classParam<CBase> pInstance, std::string & sErrorMessage);
	inline void ReleaseInstance(classParam<CBase> pInstance);
	inline void AcquireInstance(classParam<CBase> pInstance);
	inline void InjectComponent(const std::string & sNameSpace, const LibMCDriver_TML_pvoid pSymbolAddressMethod);
	inline LibMCDriver_TML_pvoid GetSymbolLookupMethod();
	inline PDriver CreateDriver(const std::string & sName, const std::string & sType, classParam<LibMCEnv::CDriverEnvironment> pDriverEnvironment);

private:
	sLibMCDriver_TMLDynamicWrapperTable m_WrapperTable;
	// Injected Components
	LibMCEnv::PWrapper m_pLibMCEnvWrapper;

	
	LibMCDriver_TMLResult checkBinaryVersion()
	{
		LibMCDriver_TML_uint32 nMajor, nMinor, nMicro;
		GetVersion(nMajor, nMinor, nMicro);
		if (nMajor != LIBMCDRIVER_TML_VERSION_MAJOR) {
			return LIBMCDRIVER_TML_ERROR_INCOMPATIBLEBINARYVERSION;
		}
		return LIBMCDRIVER_TML_SUCCESS;
	}
	LibMCDriver_TMLResult initWrapperTable(sLibMCDriver_TMLDynamicWrapperTable * pWrapperTable);
	LibMCDriver_TMLResult releaseWrapperTable(sLibMCDriver_TMLDynamicWrapperTable * pWrapperTable);
	LibMCDriver_TMLResult loadWrapperTable(sLibMCDriver_TMLDynamicWrapperTable * pWrapperTable, const char * pLibraryFileName);
	LibMCDriver_TMLResult loadWrapperTableFromSymbolLookupMethod(sLibMCDriver_TMLDynamicWrapperTable * pWrapperTable, void* pSymbolLookupMethod);

	friend class CBase;
	friend class CDriver;
	friend class CAxis;
	friend class CChannel;
	friend class CDriver_TML;

};

	
/*************************************************************************************************************************
 Class CBase 
**************************************************************************************************************************/
class CBase {
public:
	
protected:
	/* Wrapper Object that created the class. */
	CWrapper * m_pWrapper;
	/* Handle to Instance in library*/
	LibMCDriver_TMLHandle m_pHandle;

	/* Checks for an Error code and raises Exceptions */
	void CheckError(LibMCDriver_TMLResult nResult)
	{
		if (m_pWrapper != nullptr)
			m_pWrapper->CheckError(this, nResult);
	}
public:
	/**
	* CBase::CBase - Constructor for Base class.
	*/
	CBase(CWrapper * pWrapper, LibMCDriver_TMLHandle pHandle)
		: m_pWrapper(pWrapper), m_pHandle(pHandle)
	{
	}

	/**
	* CBase::~CBase - Destructor for Base class.
	*/
	virtual ~CBase()
	{
		if (m_pWrapper != nullptr)
			m_pWrapper->ReleaseInstance(this);
		m_pWrapper = nullptr;
	}

	/**
	* CBase::handle - Returns handle to instance.
	*/
	LibMCDriver_TMLHandle handle() const
	{
		return m_pHandle;
	}

	/**
	* CBase::wrapper - Returns wrapper instance.
	*/
	CWrapper * wrapper() const
	{
		return m_pWrapper;
	}
	
	friend class CWrapper;
};
	
/*************************************************************************************************************************
 Class CDriver 
**************************************************************************************************************************/
class CDriver : public CBase {
public:
	
	/**
	* CDriver::CDriver - Constructor for Driver class.
	*/
	CDriver(CWrapper* pWrapper, LibMCDriver_TMLHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline void Configure(const std::string & sConfigurationString);
	inline std::string GetName();
	inline std::string GetType();
	inline void GetVersion(LibMCDriver_TML_uint32 & nMajor, LibMCDriver_TML_uint32 & nMinor, LibMCDriver_TML_uint32 & nMicro, std::string & sBuild);
	inline void QueryParameters();
	inline void QueryParametersEx(classParam<LibMCEnv::CDriverStatusUpdateSession> pDriverUpdateInstance);
};
	
/*************************************************************************************************************************
 Class CAxis 
**************************************************************************************************************************/
class CAxis : public CBase {
public:
	
	/**
	* CAxis::CAxis - Constructor for Axis class.
	*/
	CAxis(CWrapper* pWrapper, LibMCDriver_TMLHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline void SetPower(const bool bEnable);
};
	
/*************************************************************************************************************************
 Class CChannel 
**************************************************************************************************************************/
class CChannel : public CBase {
public:
	
	/**
	* CChannel::CChannel - Constructor for Channel class.
	*/
	CChannel(CWrapper* pWrapper, LibMCDriver_TMLHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline PAxis SetupAxis(const std::string & sIdentifier, const LibMCDriver_TML_uint32 nIndexInSetup);
	inline void Close();
};
	
/*************************************************************************************************************************
 Class CDriver_TML 
**************************************************************************************************************************/
class CDriver_TML : public CDriver {
public:
	
	/**
	* CDriver_TML::CDriver_TML - Constructor for Driver_TML class.
	*/
	CDriver_TML(CWrapper* pWrapper, LibMCDriver_TMLHandle pHandle)
		: CDriver(pWrapper, pHandle)
	{
	}
	
	inline void SetToSimulationMode();
	inline bool IsSimulationMode();
	inline void SetCustomSDKResource(const std::string & sResourceName);
	inline void LoadSetup(const std::string & sSetupConfig, const std::string & sVariablesConfig);
	inline PChannel OpenChannel(const std::string & sIdentifier, const std::string & sDeviceName, const eChannelType eChannelTypeToUse, const eProtocolType eProtocolTypeToUse, const LibMCDriver_TML_uint32 nHostID, const LibMCDriver_TML_uint32 nBaudrate);
	inline PChannel FindChannel(const std::string & sIdentifier);
};
	
	/**
	* CWrapper::GetVersion - retrieves the binary version of this library.
	* @param[out] nMajor - returns the major version of this library
	* @param[out] nMinor - returns the minor version of this library
	* @param[out] nMicro - returns the micro version of this library
	*/
	inline void CWrapper::GetVersion(LibMCDriver_TML_uint32 & nMajor, LibMCDriver_TML_uint32 & nMinor, LibMCDriver_TML_uint32 & nMicro)
	{
		CheckError(nullptr,m_WrapperTable.m_GetVersion(&nMajor, &nMinor, &nMicro));
	}
	
	/**
	* CWrapper::GetLastError - Returns the last error recorded on this object
	* @param[in] pInstance - Instance Handle
	* @param[out] sErrorMessage - Message of the last error
	* @return Is there a last error to query
	*/
	inline bool CWrapper::GetLastError(classParam<CBase> pInstance, std::string & sErrorMessage)
	{
		LibMCDriver_TMLHandle hInstance = pInstance.GetHandle();
		LibMCDriver_TML_uint32 bytesNeededErrorMessage = 0;
		LibMCDriver_TML_uint32 bytesWrittenErrorMessage = 0;
		bool resultHasError = 0;
		CheckError(nullptr,m_WrapperTable.m_GetLastError(hInstance, 0, &bytesNeededErrorMessage, nullptr, &resultHasError));
		std::vector<char> bufferErrorMessage(bytesNeededErrorMessage);
		CheckError(nullptr,m_WrapperTable.m_GetLastError(hInstance, bytesNeededErrorMessage, &bytesWrittenErrorMessage, &bufferErrorMessage[0], &resultHasError));
		sErrorMessage = std::string(&bufferErrorMessage[0]);
		
		return resultHasError;
	}
	
	/**
	* CWrapper::ReleaseInstance - Releases shared ownership of an Instance
	* @param[in] pInstance - Instance Handle
	*/
	inline void CWrapper::ReleaseInstance(classParam<CBase> pInstance)
	{
		LibMCDriver_TMLHandle hInstance = pInstance.GetHandle();
		CheckError(nullptr,m_WrapperTable.m_ReleaseInstance(hInstance));
	}
	
	/**
	* CWrapper::AcquireInstance - Acquires shared ownership of an Instance
	* @param[in] pInstance - Instance Handle
	*/
	inline void CWrapper::AcquireInstance(classParam<CBase> pInstance)
	{
		LibMCDriver_TMLHandle hInstance = pInstance.GetHandle();
		CheckError(nullptr,m_WrapperTable.m_AcquireInstance(hInstance));
	}
	
	/**
	* CWrapper::InjectComponent - Injects an imported component for usage within this component
	* @param[in] sNameSpace - NameSpace of the injected component
	* @param[in] pSymbolAddressMethod - Address of the SymbolAddressMethod of the injected component
	*/
	inline void CWrapper::InjectComponent(const std::string & sNameSpace, const LibMCDriver_TML_pvoid pSymbolAddressMethod)
	{
		CheckError(nullptr,m_WrapperTable.m_InjectComponent(sNameSpace.c_str(), pSymbolAddressMethod));
		
		bool bNameSpaceFound = false;
		if (sNameSpace == "LibMCEnv") {
			if (m_pLibMCEnvWrapper != nullptr) {
				throw ELibMCDriver_TMLException(LIBMCDRIVER_TML_ERROR_COULDNOTLOADLIBRARY, "Library with namespace " + sNameSpace + " is already registered.");
			}
			m_pLibMCEnvWrapper = LibMCEnv::CWrapper::loadLibraryFromSymbolLookupMethod(pSymbolAddressMethod);
			bNameSpaceFound = true;
		}
		if (!bNameSpaceFound)
			throw ELibMCDriver_TMLException(LIBMCDRIVER_TML_ERROR_COULDNOTLOADLIBRARY, "Unknown namespace " + sNameSpace);
	}
	
	/**
	* CWrapper::GetSymbolLookupMethod - Returns the address of the SymbolLookupMethod
	* @return Address of the SymbolAddressMethod
	*/
	inline LibMCDriver_TML_pvoid CWrapper::GetSymbolLookupMethod()
	{
		LibMCDriver_TML_pvoid resultSymbolLookupMethod = 0;
		CheckError(nullptr,m_WrapperTable.m_GetSymbolLookupMethod(&resultSymbolLookupMethod));
		
		return resultSymbolLookupMethod;
	}
	
	/**
	* CWrapper::CreateDriver - Creates a driver instance with a specific name.
	* @param[in] sName - Name of driver to be created.
	* @param[in] sType - Type of driver to be created.
	* @param[in] pDriverEnvironment - Environment of this driver.
	* @return New Driver instance
	*/
	inline PDriver CWrapper::CreateDriver(const std::string & sName, const std::string & sType, classParam<LibMCEnv::CDriverEnvironment> pDriverEnvironment)
	{
		LibMCEnvHandle hDriverEnvironment = pDriverEnvironment.GetHandle();
		LibMCDriver_TMLHandle hInstance = nullptr;
		CheckError(nullptr,m_WrapperTable.m_CreateDriver(sName.c_str(), sType.c_str(), hDriverEnvironment, &hInstance));
		
		if (hInstance) {
			return std::make_shared<CDriver>(this, hInstance);
		} else {
			return nullptr;
		}
	}
	
	inline void CWrapper::CheckError(CBase * pBaseClass, LibMCDriver_TMLResult nResult)
	{
		if (nResult != 0) {
			std::string sErrorMessage;
			if (pBaseClass != nullptr) {
				GetLastError(pBaseClass, sErrorMessage);
			}
			throw ELibMCDriver_TMLException(nResult, sErrorMessage);
		}
	}
	

	inline LibMCDriver_TMLResult CWrapper::initWrapperTable(sLibMCDriver_TMLDynamicWrapperTable * pWrapperTable)
	{
		if (pWrapperTable == nullptr)
			return LIBMCDRIVER_TML_ERROR_INVALIDPARAM;
		
		pWrapperTable->m_LibraryHandle = nullptr;
		pWrapperTable->m_Driver_Configure = nullptr;
		pWrapperTable->m_Driver_GetName = nullptr;
		pWrapperTable->m_Driver_GetType = nullptr;
		pWrapperTable->m_Driver_GetVersion = nullptr;
		pWrapperTable->m_Driver_QueryParameters = nullptr;
		pWrapperTable->m_Driver_QueryParametersEx = nullptr;
		pWrapperTable->m_Axis_SetPower = nullptr;
		pWrapperTable->m_Channel_SetupAxis = nullptr;
		pWrapperTable->m_Channel_Close = nullptr;
		pWrapperTable->m_Driver_TML_SetToSimulationMode = nullptr;
		pWrapperTable->m_Driver_TML_IsSimulationMode = nullptr;
		pWrapperTable->m_Driver_TML_SetCustomSDKResource = nullptr;
		pWrapperTable->m_Driver_TML_LoadSetup = nullptr;
		pWrapperTable->m_Driver_TML_OpenChannel = nullptr;
		pWrapperTable->m_Driver_TML_FindChannel = nullptr;
		pWrapperTable->m_GetVersion = nullptr;
		pWrapperTable->m_GetLastError = nullptr;
		pWrapperTable->m_ReleaseInstance = nullptr;
		pWrapperTable->m_AcquireInstance = nullptr;
		pWrapperTable->m_InjectComponent = nullptr;
		pWrapperTable->m_GetSymbolLookupMethod = nullptr;
		pWrapperTable->m_CreateDriver = nullptr;
		
		return LIBMCDRIVER_TML_SUCCESS;
	}

	inline LibMCDriver_TMLResult CWrapper::releaseWrapperTable(sLibMCDriver_TMLDynamicWrapperTable * pWrapperTable)
	{
		if (pWrapperTable == nullptr)
			return LIBMCDRIVER_TML_ERROR_INVALIDPARAM;
		
		if (pWrapperTable->m_LibraryHandle != nullptr) {
		#ifdef _WIN32
			HMODULE hModule = (HMODULE) pWrapperTable->m_LibraryHandle;
			FreeLibrary(hModule);
		#else // _WIN32
			dlclose(pWrapperTable->m_LibraryHandle);
		#endif // _WIN32
			return initWrapperTable(pWrapperTable);
		}
		
		return LIBMCDRIVER_TML_SUCCESS;
	}

	inline LibMCDriver_TMLResult CWrapper::loadWrapperTable(sLibMCDriver_TMLDynamicWrapperTable * pWrapperTable, const char * pLibraryFileName)
	{
		if (pWrapperTable == nullptr)
			return LIBMCDRIVER_TML_ERROR_INVALIDPARAM;
		if (pLibraryFileName == nullptr)
			return LIBMCDRIVER_TML_ERROR_INVALIDPARAM;
		
		#ifdef _WIN32
		// Convert filename to UTF16-string
		int nLength = 0;
		while ((pLibraryFileName[nLength] != 0) && (nLength < MAX_PATH))
			nLength++;
		int nBufferSize = nLength * 2 + 2;
		std::vector<wchar_t> wsLibraryFileName(nBufferSize);
		int nResult = MultiByteToWideChar(CP_UTF8, 0, pLibraryFileName, nLength, &wsLibraryFileName[0], nBufferSize);
		if (nResult == 0)
			return LIBMCDRIVER_TML_ERROR_COULDNOTLOADLIBRARY;
		
		HMODULE hLibrary = LoadLibraryW(wsLibraryFileName.data());
		if (hLibrary == 0) 
			return LIBMCDRIVER_TML_ERROR_COULDNOTLOADLIBRARY;
		#else // _WIN32
		void* hLibrary = dlopen(pLibraryFileName, RTLD_LAZY);
		if (hLibrary == 0) 
			return LIBMCDRIVER_TML_ERROR_COULDNOTLOADLIBRARY;
		dlerror();
		#endif // _WIN32
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_Configure = (PLibMCDriver_TMLDriver_ConfigurePtr) GetProcAddress(hLibrary, "libmcdriver_tml_driver_configure");
		#else // _WIN32
		pWrapperTable->m_Driver_Configure = (PLibMCDriver_TMLDriver_ConfigurePtr) dlsym(hLibrary, "libmcdriver_tml_driver_configure");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_Configure == nullptr)
			return LIBMCDRIVER_TML_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_GetName = (PLibMCDriver_TMLDriver_GetNamePtr) GetProcAddress(hLibrary, "libmcdriver_tml_driver_getname");
		#else // _WIN32
		pWrapperTable->m_Driver_GetName = (PLibMCDriver_TMLDriver_GetNamePtr) dlsym(hLibrary, "libmcdriver_tml_driver_getname");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_GetName == nullptr)
			return LIBMCDRIVER_TML_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_GetType = (PLibMCDriver_TMLDriver_GetTypePtr) GetProcAddress(hLibrary, "libmcdriver_tml_driver_gettype");
		#else // _WIN32
		pWrapperTable->m_Driver_GetType = (PLibMCDriver_TMLDriver_GetTypePtr) dlsym(hLibrary, "libmcdriver_tml_driver_gettype");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_GetType == nullptr)
			return LIBMCDRIVER_TML_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_GetVersion = (PLibMCDriver_TMLDriver_GetVersionPtr) GetProcAddress(hLibrary, "libmcdriver_tml_driver_getversion");
		#else // _WIN32
		pWrapperTable->m_Driver_GetVersion = (PLibMCDriver_TMLDriver_GetVersionPtr) dlsym(hLibrary, "libmcdriver_tml_driver_getversion");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_GetVersion == nullptr)
			return LIBMCDRIVER_TML_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_QueryParameters = (PLibMCDriver_TMLDriver_QueryParametersPtr) GetProcAddress(hLibrary, "libmcdriver_tml_driver_queryparameters");
		#else // _WIN32
		pWrapperTable->m_Driver_QueryParameters = (PLibMCDriver_TMLDriver_QueryParametersPtr) dlsym(hLibrary, "libmcdriver_tml_driver_queryparameters");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_QueryParameters == nullptr)
			return LIBMCDRIVER_TML_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_QueryParametersEx = (PLibMCDriver_TMLDriver_QueryParametersExPtr) GetProcAddress(hLibrary, "libmcdriver_tml_driver_queryparametersex");
		#else // _WIN32
		pWrapperTable->m_Driver_QueryParametersEx = (PLibMCDriver_TMLDriver_QueryParametersExPtr) dlsym(hLibrary, "libmcdriver_tml_driver_queryparametersex");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_QueryParametersEx == nullptr)
			return LIBMCDRIVER_TML_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Axis_SetPower = (PLibMCDriver_TMLAxis_SetPowerPtr) GetProcAddress(hLibrary, "libmcdriver_tml_axis_setpower");
		#else // _WIN32
		pWrapperTable->m_Axis_SetPower = (PLibMCDriver_TMLAxis_SetPowerPtr) dlsym(hLibrary, "libmcdriver_tml_axis_setpower");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Axis_SetPower == nullptr)
			return LIBMCDRIVER_TML_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Channel_SetupAxis = (PLibMCDriver_TMLChannel_SetupAxisPtr) GetProcAddress(hLibrary, "libmcdriver_tml_channel_setupaxis");
		#else // _WIN32
		pWrapperTable->m_Channel_SetupAxis = (PLibMCDriver_TMLChannel_SetupAxisPtr) dlsym(hLibrary, "libmcdriver_tml_channel_setupaxis");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Channel_SetupAxis == nullptr)
			return LIBMCDRIVER_TML_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Channel_Close = (PLibMCDriver_TMLChannel_ClosePtr) GetProcAddress(hLibrary, "libmcdriver_tml_channel_close");
		#else // _WIN32
		pWrapperTable->m_Channel_Close = (PLibMCDriver_TMLChannel_ClosePtr) dlsym(hLibrary, "libmcdriver_tml_channel_close");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Channel_Close == nullptr)
			return LIBMCDRIVER_TML_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_TML_SetToSimulationMode = (PLibMCDriver_TMLDriver_TML_SetToSimulationModePtr) GetProcAddress(hLibrary, "libmcdriver_tml_driver_tml_settosimulationmode");
		#else // _WIN32
		pWrapperTable->m_Driver_TML_SetToSimulationMode = (PLibMCDriver_TMLDriver_TML_SetToSimulationModePtr) dlsym(hLibrary, "libmcdriver_tml_driver_tml_settosimulationmode");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_TML_SetToSimulationMode == nullptr)
			return LIBMCDRIVER_TML_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_TML_IsSimulationMode = (PLibMCDriver_TMLDriver_TML_IsSimulationModePtr) GetProcAddress(hLibrary, "libmcdriver_tml_driver_tml_issimulationmode");
		#else // _WIN32
		pWrapperTable->m_Driver_TML_IsSimulationMode = (PLibMCDriver_TMLDriver_TML_IsSimulationModePtr) dlsym(hLibrary, "libmcdriver_tml_driver_tml_issimulationmode");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_TML_IsSimulationMode == nullptr)
			return LIBMCDRIVER_TML_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_TML_SetCustomSDKResource = (PLibMCDriver_TMLDriver_TML_SetCustomSDKResourcePtr) GetProcAddress(hLibrary, "libmcdriver_tml_driver_tml_setcustomsdkresource");
		#else // _WIN32
		pWrapperTable->m_Driver_TML_SetCustomSDKResource = (PLibMCDriver_TMLDriver_TML_SetCustomSDKResourcePtr) dlsym(hLibrary, "libmcdriver_tml_driver_tml_setcustomsdkresource");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_TML_SetCustomSDKResource == nullptr)
			return LIBMCDRIVER_TML_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_TML_LoadSetup = (PLibMCDriver_TMLDriver_TML_LoadSetupPtr) GetProcAddress(hLibrary, "libmcdriver_tml_driver_tml_loadsetup");
		#else // _WIN32
		pWrapperTable->m_Driver_TML_LoadSetup = (PLibMCDriver_TMLDriver_TML_LoadSetupPtr) dlsym(hLibrary, "libmcdriver_tml_driver_tml_loadsetup");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_TML_LoadSetup == nullptr)
			return LIBMCDRIVER_TML_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_TML_OpenChannel = (PLibMCDriver_TMLDriver_TML_OpenChannelPtr) GetProcAddress(hLibrary, "libmcdriver_tml_driver_tml_openchannel");
		#else // _WIN32
		pWrapperTable->m_Driver_TML_OpenChannel = (PLibMCDriver_TMLDriver_TML_OpenChannelPtr) dlsym(hLibrary, "libmcdriver_tml_driver_tml_openchannel");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_TML_OpenChannel == nullptr)
			return LIBMCDRIVER_TML_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_TML_FindChannel = (PLibMCDriver_TMLDriver_TML_FindChannelPtr) GetProcAddress(hLibrary, "libmcdriver_tml_driver_tml_findchannel");
		#else // _WIN32
		pWrapperTable->m_Driver_TML_FindChannel = (PLibMCDriver_TMLDriver_TML_FindChannelPtr) dlsym(hLibrary, "libmcdriver_tml_driver_tml_findchannel");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_TML_FindChannel == nullptr)
			return LIBMCDRIVER_TML_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GetVersion = (PLibMCDriver_TMLGetVersionPtr) GetProcAddress(hLibrary, "libmcdriver_tml_getversion");
		#else // _WIN32
		pWrapperTable->m_GetVersion = (PLibMCDriver_TMLGetVersionPtr) dlsym(hLibrary, "libmcdriver_tml_getversion");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GetVersion == nullptr)
			return LIBMCDRIVER_TML_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GetLastError = (PLibMCDriver_TMLGetLastErrorPtr) GetProcAddress(hLibrary, "libmcdriver_tml_getlasterror");
		#else // _WIN32
		pWrapperTable->m_GetLastError = (PLibMCDriver_TMLGetLastErrorPtr) dlsym(hLibrary, "libmcdriver_tml_getlasterror");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GetLastError == nullptr)
			return LIBMCDRIVER_TML_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ReleaseInstance = (PLibMCDriver_TMLReleaseInstancePtr) GetProcAddress(hLibrary, "libmcdriver_tml_releaseinstance");
		#else // _WIN32
		pWrapperTable->m_ReleaseInstance = (PLibMCDriver_TMLReleaseInstancePtr) dlsym(hLibrary, "libmcdriver_tml_releaseinstance");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ReleaseInstance == nullptr)
			return LIBMCDRIVER_TML_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_AcquireInstance = (PLibMCDriver_TMLAcquireInstancePtr) GetProcAddress(hLibrary, "libmcdriver_tml_acquireinstance");
		#else // _WIN32
		pWrapperTable->m_AcquireInstance = (PLibMCDriver_TMLAcquireInstancePtr) dlsym(hLibrary, "libmcdriver_tml_acquireinstance");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_AcquireInstance == nullptr)
			return LIBMCDRIVER_TML_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_InjectComponent = (PLibMCDriver_TMLInjectComponentPtr) GetProcAddress(hLibrary, "libmcdriver_tml_injectcomponent");
		#else // _WIN32
		pWrapperTable->m_InjectComponent = (PLibMCDriver_TMLInjectComponentPtr) dlsym(hLibrary, "libmcdriver_tml_injectcomponent");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_InjectComponent == nullptr)
			return LIBMCDRIVER_TML_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GetSymbolLookupMethod = (PLibMCDriver_TMLGetSymbolLookupMethodPtr) GetProcAddress(hLibrary, "libmcdriver_tml_getsymbollookupmethod");
		#else // _WIN32
		pWrapperTable->m_GetSymbolLookupMethod = (PLibMCDriver_TMLGetSymbolLookupMethodPtr) dlsym(hLibrary, "libmcdriver_tml_getsymbollookupmethod");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GetSymbolLookupMethod == nullptr)
			return LIBMCDRIVER_TML_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_CreateDriver = (PLibMCDriver_TMLCreateDriverPtr) GetProcAddress(hLibrary, "libmcdriver_tml_createdriver");
		#else // _WIN32
		pWrapperTable->m_CreateDriver = (PLibMCDriver_TMLCreateDriverPtr) dlsym(hLibrary, "libmcdriver_tml_createdriver");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_CreateDriver == nullptr)
			return LIBMCDRIVER_TML_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		pWrapperTable->m_LibraryHandle = hLibrary;
		return LIBMCDRIVER_TML_SUCCESS;
	}

	inline LibMCDriver_TMLResult CWrapper::loadWrapperTableFromSymbolLookupMethod(sLibMCDriver_TMLDynamicWrapperTable * pWrapperTable, void* pSymbolLookupMethod)
{
		if (pWrapperTable == nullptr)
			return LIBMCDRIVER_TML_ERROR_INVALIDPARAM;
		if (pSymbolLookupMethod == nullptr)
			return LIBMCDRIVER_TML_ERROR_INVALIDPARAM;
		
		typedef LibMCDriver_TMLResult(*SymbolLookupType)(const char*, void**);
		
		SymbolLookupType pLookup = (SymbolLookupType)pSymbolLookupMethod;
		
		LibMCDriver_TMLResult eLookupError = LIBMCDRIVER_TML_SUCCESS;
		eLookupError = (*pLookup)("libmcdriver_tml_driver_configure", (void**)&(pWrapperTable->m_Driver_Configure));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_Configure == nullptr) )
			return LIBMCDRIVER_TML_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_tml_driver_getname", (void**)&(pWrapperTable->m_Driver_GetName));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_GetName == nullptr) )
			return LIBMCDRIVER_TML_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_tml_driver_gettype", (void**)&(pWrapperTable->m_Driver_GetType));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_GetType == nullptr) )
			return LIBMCDRIVER_TML_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_tml_driver_getversion", (void**)&(pWrapperTable->m_Driver_GetVersion));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_GetVersion == nullptr) )
			return LIBMCDRIVER_TML_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_tml_driver_queryparameters", (void**)&(pWrapperTable->m_Driver_QueryParameters));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_QueryParameters == nullptr) )
			return LIBMCDRIVER_TML_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_tml_driver_queryparametersex", (void**)&(pWrapperTable->m_Driver_QueryParametersEx));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_QueryParametersEx == nullptr) )
			return LIBMCDRIVER_TML_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_tml_axis_setpower", (void**)&(pWrapperTable->m_Axis_SetPower));
		if ( (eLookupError != 0) || (pWrapperTable->m_Axis_SetPower == nullptr) )
			return LIBMCDRIVER_TML_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_tml_channel_setupaxis", (void**)&(pWrapperTable->m_Channel_SetupAxis));
		if ( (eLookupError != 0) || (pWrapperTable->m_Channel_SetupAxis == nullptr) )
			return LIBMCDRIVER_TML_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_tml_channel_close", (void**)&(pWrapperTable->m_Channel_Close));
		if ( (eLookupError != 0) || (pWrapperTable->m_Channel_Close == nullptr) )
			return LIBMCDRIVER_TML_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_tml_driver_tml_settosimulationmode", (void**)&(pWrapperTable->m_Driver_TML_SetToSimulationMode));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_TML_SetToSimulationMode == nullptr) )
			return LIBMCDRIVER_TML_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_tml_driver_tml_issimulationmode", (void**)&(pWrapperTable->m_Driver_TML_IsSimulationMode));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_TML_IsSimulationMode == nullptr) )
			return LIBMCDRIVER_TML_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_tml_driver_tml_setcustomsdkresource", (void**)&(pWrapperTable->m_Driver_TML_SetCustomSDKResource));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_TML_SetCustomSDKResource == nullptr) )
			return LIBMCDRIVER_TML_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_tml_driver_tml_loadsetup", (void**)&(pWrapperTable->m_Driver_TML_LoadSetup));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_TML_LoadSetup == nullptr) )
			return LIBMCDRIVER_TML_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_tml_driver_tml_openchannel", (void**)&(pWrapperTable->m_Driver_TML_OpenChannel));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_TML_OpenChannel == nullptr) )
			return LIBMCDRIVER_TML_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_tml_driver_tml_findchannel", (void**)&(pWrapperTable->m_Driver_TML_FindChannel));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_TML_FindChannel == nullptr) )
			return LIBMCDRIVER_TML_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_tml_getversion", (void**)&(pWrapperTable->m_GetVersion));
		if ( (eLookupError != 0) || (pWrapperTable->m_GetVersion == nullptr) )
			return LIBMCDRIVER_TML_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_tml_getlasterror", (void**)&(pWrapperTable->m_GetLastError));
		if ( (eLookupError != 0) || (pWrapperTable->m_GetLastError == nullptr) )
			return LIBMCDRIVER_TML_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_tml_releaseinstance", (void**)&(pWrapperTable->m_ReleaseInstance));
		if ( (eLookupError != 0) || (pWrapperTable->m_ReleaseInstance == nullptr) )
			return LIBMCDRIVER_TML_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_tml_acquireinstance", (void**)&(pWrapperTable->m_AcquireInstance));
		if ( (eLookupError != 0) || (pWrapperTable->m_AcquireInstance == nullptr) )
			return LIBMCDRIVER_TML_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_tml_injectcomponent", (void**)&(pWrapperTable->m_InjectComponent));
		if ( (eLookupError != 0) || (pWrapperTable->m_InjectComponent == nullptr) )
			return LIBMCDRIVER_TML_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_tml_getsymbollookupmethod", (void**)&(pWrapperTable->m_GetSymbolLookupMethod));
		if ( (eLookupError != 0) || (pWrapperTable->m_GetSymbolLookupMethod == nullptr) )
			return LIBMCDRIVER_TML_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_tml_createdriver", (void**)&(pWrapperTable->m_CreateDriver));
		if ( (eLookupError != 0) || (pWrapperTable->m_CreateDriver == nullptr) )
			return LIBMCDRIVER_TML_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		return LIBMCDRIVER_TML_SUCCESS;
}

	
	
	/**
	 * Method definitions for class CBase
	 */
	
	/**
	 * Method definitions for class CDriver
	 */
	
	/**
	* CDriver::Configure - Configures a driver with its specific configuration data.
	* @param[in] sConfigurationString - Configuration data of driver.
	*/
	void CDriver::Configure(const std::string & sConfigurationString)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_Configure(m_pHandle, sConfigurationString.c_str()));
	}
	
	/**
	* CDriver::GetName - returns the name identifier of the driver
	* @return Name of the driver.
	*/
	std::string CDriver::GetName()
	{
		LibMCDriver_TML_uint32 bytesNeededName = 0;
		LibMCDriver_TML_uint32 bytesWrittenName = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetName(m_pHandle, 0, &bytesNeededName, nullptr));
		std::vector<char> bufferName(bytesNeededName);
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetName(m_pHandle, bytesNeededName, &bytesWrittenName, &bufferName[0]));
		
		return std::string(&bufferName[0]);
	}
	
	/**
	* CDriver::GetType - returns the type identifier of the driver
	* @return Type of the driver.
	*/
	std::string CDriver::GetType()
	{
		LibMCDriver_TML_uint32 bytesNeededType = 0;
		LibMCDriver_TML_uint32 bytesWrittenType = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetType(m_pHandle, 0, &bytesNeededType, nullptr));
		std::vector<char> bufferType(bytesNeededType);
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetType(m_pHandle, bytesNeededType, &bytesWrittenType, &bufferType[0]));
		
		return std::string(&bufferType[0]);
	}
	
	/**
	* CDriver::GetVersion - returns the version identifiers of the driver
	* @param[out] nMajor - Major version.
	* @param[out] nMinor - Minor version.
	* @param[out] nMicro - Micro version.
	* @param[out] sBuild - Build identifier.
	*/
	void CDriver::GetVersion(LibMCDriver_TML_uint32 & nMajor, LibMCDriver_TML_uint32 & nMinor, LibMCDriver_TML_uint32 & nMicro, std::string & sBuild)
	{
		LibMCDriver_TML_uint32 bytesNeededBuild = 0;
		LibMCDriver_TML_uint32 bytesWrittenBuild = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetVersion(m_pHandle, &nMajor, &nMinor, &nMicro, 0, &bytesNeededBuild, nullptr));
		std::vector<char> bufferBuild(bytesNeededBuild);
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetVersion(m_pHandle, &nMajor, &nMinor, &nMicro, bytesNeededBuild, &bytesWrittenBuild, &bufferBuild[0]));
		sBuild = std::string(&bufferBuild[0]);
	}
	
	/**
	* CDriver::QueryParameters - Updates the driver parameters in the driver environment. Should only be called in the driver thread.
	*/
	void CDriver::QueryParameters()
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_QueryParameters(m_pHandle));
	}
	
	/**
	* CDriver::QueryParametersEx - Updates the driver parameters in the driver environment. Might be called out of thread. Implementation MUST be able to handle parallel calls.
	* @param[in] pDriverUpdateInstance - Status update instance.
	*/
	void CDriver::QueryParametersEx(classParam<LibMCEnv::CDriverStatusUpdateSession> pDriverUpdateInstance)
	{
		LibMCEnvHandle hDriverUpdateInstance = pDriverUpdateInstance.GetHandle();
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_QueryParametersEx(m_pHandle, hDriverUpdateInstance));
	}
	
	/**
	 * Method definitions for class CAxis
	 */
	
	/**
	* CAxis::SetPower - Sets the power for an axis.
	* @param[in] bEnable - Flag if the power is enabled or not enabled.
	*/
	void CAxis::SetPower(const bool bEnable)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Axis_SetPower(m_pHandle, bEnable));
	}
	
	/**
	 * Method definitions for class CChannel
	 */
	
	/**
	* CChannel::SetupAxis - Setups an axis for this channel.
	* @param[in] sIdentifier - Identifier for the axis. Fails if axis already exist.
	* @param[in] nIndexInSetup - Index of the setup to use for this axis.
	* @return Returns the axis instance.
	*/
	PAxis CChannel::SetupAxis(const std::string & sIdentifier, const LibMCDriver_TML_uint32 nIndexInSetup)
	{
		LibMCDriver_TMLHandle hAxisInstance = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_Channel_SetupAxis(m_pHandle, sIdentifier.c_str(), nIndexInSetup, &hAxisInstance));
		
		if (!hAxisInstance) {
			CheckError(LIBMCDRIVER_TML_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CAxis>(m_pWrapper, hAxisInstance);
	}
	
	/**
	* CChannel::Close - Closes the channel. Any other call will fail after closing.
	*/
	void CChannel::Close()
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Channel_Close(m_pHandle));
	}
	
	/**
	 * Method definitions for class CDriver_TML
	 */
	
	/**
	* CDriver_TML::SetToSimulationMode - Turns the driver into a simulation mode.
	*/
	void CDriver_TML::SetToSimulationMode()
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_TML_SetToSimulationMode(m_pHandle));
	}
	
	/**
	* CDriver_TML::IsSimulationMode - Returns if the driver is in simulation mode.
	* @return Flag if driver is in simulation mode.
	*/
	bool CDriver_TML::IsSimulationMode()
	{
		bool resultSimulationModeEnabled = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_TML_IsSimulationMode(m_pHandle, &resultSimulationModeEnabled));
		
		return resultSimulationModeEnabled;
	}
	
	/**
	* CDriver_TML::SetCustomSDKResource - Sets the machine resource name of the TML SDK to load. MUST be called before Connect or it has no effect.
	* @param[in] sResourceName - Resource name of core machine package. Empty means standard naming applies.
	*/
	void CDriver_TML::SetCustomSDKResource(const std::string & sResourceName)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_TML_SetCustomSDKResource(m_pHandle, sResourceName.c_str()));
	}
	
	/**
	* CDriver_TML::LoadSetup - Loads the driver configuration files manually.
	* @param[in] sSetupConfig - Content of the setup config.
	* @param[in] sVariablesConfig - Content of the variables config.
	*/
	void CDriver_TML::LoadSetup(const std::string & sSetupConfig, const std::string & sVariablesConfig)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_TML_LoadSetup(m_pHandle, sSetupConfig.c_str(), sVariablesConfig.c_str()));
	}
	
	/**
	* CDriver_TML::OpenChannel - Opens a communication channel.
	* @param[in] sIdentifier - Identifier of the device.
	* @param[in] sDeviceName - Name of the device.
	* @param[in] eChannelTypeToUse - Type of the interface device.
	* @param[in] eProtocolTypeToUse - Type of the protocol.
	* @param[in] nHostID - Host ID to use.
	* @param[in] nBaudrate - Baudrate to use.
	* @return Returns the channel instance.
	*/
	PChannel CDriver_TML::OpenChannel(const std::string & sIdentifier, const std::string & sDeviceName, const eChannelType eChannelTypeToUse, const eProtocolType eProtocolTypeToUse, const LibMCDriver_TML_uint32 nHostID, const LibMCDriver_TML_uint32 nBaudrate)
	{
		LibMCDriver_TMLHandle hChannelInstance = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_TML_OpenChannel(m_pHandle, sIdentifier.c_str(), sDeviceName.c_str(), eChannelTypeToUse, eProtocolTypeToUse, nHostID, nBaudrate, &hChannelInstance));
		
		if (!hChannelInstance) {
			CheckError(LIBMCDRIVER_TML_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CChannel>(m_pWrapper, hChannelInstance);
	}
	
	/**
	* CDriver_TML::FindChannel - Find a communication channel by integer.
	* @param[in] sIdentifier - Identifier of the device.
	* @return Returns the channel instance.
	*/
	PChannel CDriver_TML::FindChannel(const std::string & sIdentifier)
	{
		LibMCDriver_TMLHandle hChannelInstance = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_TML_FindChannel(m_pHandle, sIdentifier.c_str(), &hChannelInstance));
		
		if (!hChannelInstance) {
			CheckError(LIBMCDRIVER_TML_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CChannel>(m_pWrapper, hChannelInstance);
	}

} // namespace LibMCDriver_TML

#endif // __LIBMCDRIVER_TML_CPPHEADER_DYNAMIC_CPP

