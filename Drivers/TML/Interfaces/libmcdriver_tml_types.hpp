/*++

Copyright (C) 2024 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.8.0-develop.

Abstract: This is an autogenerated C++-Header file with basic types in
order to allow an easy use of MC Driver Technosoft Motion Library

Interface version: 2.0.0

*/

#ifndef __LIBMCDRIVER_TML_TYPES_HEADER_CPP
#define __LIBMCDRIVER_TML_TYPES_HEADER_CPP


/*************************************************************************************************************************
 Scalar types definition
**************************************************************************************************************************/

#ifdef LIBMCDRIVER_TML_USELEGACYINTEGERTYPES

typedef unsigned char LibMCDriver_TML_uint8;
typedef unsigned short LibMCDriver_TML_uint16 ;
typedef unsigned int LibMCDriver_TML_uint32;
typedef unsigned long long LibMCDriver_TML_uint64;
typedef char LibMCDriver_TML_int8;
typedef short LibMCDriver_TML_int16;
typedef int LibMCDriver_TML_int32;
typedef long long LibMCDriver_TML_int64;

#else // LIBMCDRIVER_TML_USELEGACYINTEGERTYPES

#include <stdint.h>

typedef uint8_t LibMCDriver_TML_uint8;
typedef uint16_t LibMCDriver_TML_uint16;
typedef uint32_t LibMCDriver_TML_uint32;
typedef uint64_t LibMCDriver_TML_uint64;
typedef int8_t LibMCDriver_TML_int8;
typedef int16_t LibMCDriver_TML_int16;
typedef int32_t LibMCDriver_TML_int32;
typedef int64_t LibMCDriver_TML_int64 ;

#endif // LIBMCDRIVER_TML_USELEGACYINTEGERTYPES

typedef float LibMCDriver_TML_single;
typedef double LibMCDriver_TML_double;

/*************************************************************************************************************************
 General type definitions
**************************************************************************************************************************/

typedef LibMCDriver_TML_int32 LibMCDriver_TMLResult;
typedef void * LibMCDriver_TMLHandle;
typedef void * LibMCDriver_TML_pvoid;

/*************************************************************************************************************************
 Version for LibMCDriver_TML
**************************************************************************************************************************/

#define LIBMCDRIVER_TML_VERSION_MAJOR 2
#define LIBMCDRIVER_TML_VERSION_MINOR 0
#define LIBMCDRIVER_TML_VERSION_MICRO 0
#define LIBMCDRIVER_TML_VERSION_PRERELEASEINFO ""
#define LIBMCDRIVER_TML_VERSION_BUILDINFO ""

/*************************************************************************************************************************
 Error constants for LibMCDriver_TML
**************************************************************************************************************************/

#define LIBMCDRIVER_TML_SUCCESS 0
#define LIBMCDRIVER_TML_ERROR_NOTIMPLEMENTED 1 /** functionality not implemented */
#define LIBMCDRIVER_TML_ERROR_INVALIDPARAM 2 /** an invalid parameter was passed */
#define LIBMCDRIVER_TML_ERROR_INVALIDCAST 3 /** a type cast failed */
#define LIBMCDRIVER_TML_ERROR_BUFFERTOOSMALL 4 /** a provided buffer is too small */
#define LIBMCDRIVER_TML_ERROR_GENERICEXCEPTION 5 /** a generic exception occurred */
#define LIBMCDRIVER_TML_ERROR_COULDNOTLOADLIBRARY 6 /** the library could not be loaded */
#define LIBMCDRIVER_TML_ERROR_COULDNOTFINDLIBRARYEXPORT 7 /** a required exported symbol could not be found in the library */
#define LIBMCDRIVER_TML_ERROR_INCOMPATIBLEBINARYVERSION 8 /** the version of the binary interface does not match the bindings interface */
#define LIBMCDRIVER_TML_ERROR_DRIVERERROR 1000 /** a driver error occured */
#define LIBMCDRIVER_TML_ERROR_SDKALREADYLOADED 1001 /** SDK already loaded */
#define LIBMCDRIVER_TML_ERROR_NOSDKLIBRESOURCEDLLGIVEN 1002 /** No SDK library resource DLL given */
#define LIBMCDRIVER_TML_ERROR_NOSDKLIBRESOURCECOMMSGIVEN 1003 /** No SDK comms resource DLL given */
#define LIBMCDRIVER_TML_ERROR_EMPTYCHANNELIDENTIFIER 1004 /** Empty channel identifier */
#define LIBMCDRIVER_TML_ERROR_CHANNELIDENTIFIERTOOLONG 1005 /** Channel name too long */
#define LIBMCDRIVER_TML_ERROR_INVALIDCHANNELIDENTIFIER 1006 /** Invalid channel identifier */
#define LIBMCDRIVER_TML_ERROR_CHANNELDOESNOTEXIST 1007 /** Channel does not exist */
#define LIBMCDRIVER_TML_ERROR_CHANNELALREADYEXISTS 1008 /** Channel already exists */
#define LIBMCDRIVER_TML_ERROR_EMPTYDEVICENAME 1009 /** Empty device name */
#define LIBMCDRIVER_TML_ERROR_UNSUPPORTEDPROTOCOLTYPE 1010 /** Unsupported protocol type */
#define LIBMCDRIVER_TML_ERROR_UNSUPPORTEDCHANNELTYPE 1011 /** Unsupported channel type */
#define LIBMCDRIVER_TML_ERROR_TMLSDKERROR 1012 /** TML SDK Error */
#define LIBMCDRIVER_TML_ERROR_UNKNOWNTMLSDKERROR 1013 /** Unknown TML SDK Error */
#define LIBMCDRIVER_TML_ERROR_INVALIDHOSTID 1014 /** TML SDK Error */
#define LIBMCDRIVER_TML_ERROR_EMPTYAXISIDENTIFIER 1015 /** Empty Axis identifier */
#define LIBMCDRIVER_TML_ERROR_AXISIDENTIFIERTOOLONG 1016 /** Axis name too long */
#define LIBMCDRIVER_TML_ERROR_INVALIDAXISIDENTIFIER 1017 /** Invalid axis identifier */
#define LIBMCDRIVER_TML_ERROR_INVALIDAXISCONFIGURATIONBUFFER 1018 /** Invalid axis configuration buffer */
#define LIBMCDRIVER_TML_ERROR_AXISDOESNOTEXIST 1019 /** Axis does not exist */
#define LIBMCDRIVER_TML_ERROR_INVALIDAXISHARDWAREID 1020 /** Invalid Axis Hardware ID */
#define LIBMCDRIVER_TML_ERROR_AXISALREADYEXISTS 1021 /** Axis already exists */
#define LIBMCDRIVER_TML_ERROR_AXISNOTFOUND 1022 /** Axis not found */
#define LIBMCDRIVER_TML_ERROR_AXISNOTINCHANNEL 1023 /** Axis not in channel */

/*************************************************************************************************************************
 Error strings for LibMCDriver_TML
**************************************************************************************************************************/

inline const char * LIBMCDRIVER_TML_GETERRORSTRING (LibMCDriver_TMLResult nErrorCode) {
  switch (nErrorCode) {
    case LIBMCDRIVER_TML_SUCCESS: return "no error";
    case LIBMCDRIVER_TML_ERROR_NOTIMPLEMENTED: return "functionality not implemented";
    case LIBMCDRIVER_TML_ERROR_INVALIDPARAM: return "an invalid parameter was passed";
    case LIBMCDRIVER_TML_ERROR_INVALIDCAST: return "a type cast failed";
    case LIBMCDRIVER_TML_ERROR_BUFFERTOOSMALL: return "a provided buffer is too small";
    case LIBMCDRIVER_TML_ERROR_GENERICEXCEPTION: return "a generic exception occurred";
    case LIBMCDRIVER_TML_ERROR_COULDNOTLOADLIBRARY: return "the library could not be loaded";
    case LIBMCDRIVER_TML_ERROR_COULDNOTFINDLIBRARYEXPORT: return "a required exported symbol could not be found in the library";
    case LIBMCDRIVER_TML_ERROR_INCOMPATIBLEBINARYVERSION: return "the version of the binary interface does not match the bindings interface";
    case LIBMCDRIVER_TML_ERROR_DRIVERERROR: return "a driver error occured";
    case LIBMCDRIVER_TML_ERROR_SDKALREADYLOADED: return "SDK already loaded";
    case LIBMCDRIVER_TML_ERROR_NOSDKLIBRESOURCEDLLGIVEN: return "No SDK library resource DLL given";
    case LIBMCDRIVER_TML_ERROR_NOSDKLIBRESOURCECOMMSGIVEN: return "No SDK comms resource DLL given";
    case LIBMCDRIVER_TML_ERROR_EMPTYCHANNELIDENTIFIER: return "Empty channel identifier";
    case LIBMCDRIVER_TML_ERROR_CHANNELIDENTIFIERTOOLONG: return "Channel name too long";
    case LIBMCDRIVER_TML_ERROR_INVALIDCHANNELIDENTIFIER: return "Invalid channel identifier";
    case LIBMCDRIVER_TML_ERROR_CHANNELDOESNOTEXIST: return "Channel does not exist";
    case LIBMCDRIVER_TML_ERROR_CHANNELALREADYEXISTS: return "Channel already exists";
    case LIBMCDRIVER_TML_ERROR_EMPTYDEVICENAME: return "Empty device name";
    case LIBMCDRIVER_TML_ERROR_UNSUPPORTEDPROTOCOLTYPE: return "Unsupported protocol type";
    case LIBMCDRIVER_TML_ERROR_UNSUPPORTEDCHANNELTYPE: return "Unsupported channel type";
    case LIBMCDRIVER_TML_ERROR_TMLSDKERROR: return "TML SDK Error";
    case LIBMCDRIVER_TML_ERROR_UNKNOWNTMLSDKERROR: return "Unknown TML SDK Error";
    case LIBMCDRIVER_TML_ERROR_INVALIDHOSTID: return "TML SDK Error";
    case LIBMCDRIVER_TML_ERROR_EMPTYAXISIDENTIFIER: return "Empty Axis identifier";
    case LIBMCDRIVER_TML_ERROR_AXISIDENTIFIERTOOLONG: return "Axis name too long";
    case LIBMCDRIVER_TML_ERROR_INVALIDAXISIDENTIFIER: return "Invalid axis identifier";
    case LIBMCDRIVER_TML_ERROR_INVALIDAXISCONFIGURATIONBUFFER: return "Invalid axis configuration buffer";
    case LIBMCDRIVER_TML_ERROR_AXISDOESNOTEXIST: return "Axis does not exist";
    case LIBMCDRIVER_TML_ERROR_INVALIDAXISHARDWAREID: return "Invalid Axis Hardware ID";
    case LIBMCDRIVER_TML_ERROR_AXISALREADYEXISTS: return "Axis already exists";
    case LIBMCDRIVER_TML_ERROR_AXISNOTFOUND: return "Axis not found";
    case LIBMCDRIVER_TML_ERROR_AXISNOTINCHANNEL: return "Axis not in channel";
    default: return "unknown error";
  }
}

/*************************************************************************************************************************
 Declaration of handle classes 
**************************************************************************************************************************/

typedef LibMCDriver_TMLHandle LibMCDriver_TML_Base;
typedef LibMCDriver_TMLHandle LibMCDriver_TML_Driver;
typedef LibMCDriver_TMLHandle LibMCDriver_TML_Axis;
typedef LibMCDriver_TMLHandle LibMCDriver_TML_Channel;
typedef LibMCDriver_TMLHandle LibMCDriver_TML_Driver_TML;

namespace LibMCDriver_TML {

  /*************************************************************************************************************************
   Declaration of enums
  **************************************************************************************************************************/
  
  enum class eChannelType : LibMCDriver_TML_int32 {
    Unknown = 0, /** Unknown Channel */
    RS232 = 1000, /** RS232 Channel */
    RS485 = 1001, /** RS485 Channel */
    IXXAT_CAN = 1002, /** IXXAT_CAN Canbus Channel */
    SysTecUSBCAN = 1003, /** SYS_TEC_USBCAN Canbus Channel */
    PEAK_SYS_PCAN_PCI = 1004, /** PEAK_SYS_PCAN_PCI Canbus Channel */
    CHANNEL_ESD_CAN = 1005 /** CHANNEL_ESD_CAN Canbus Channel */
  };
  
  enum class eReferenceType : LibMCDriver_TML_int32 {
    Unknown = 0, /** Unknown Reference */
    Target = 1000, /** Use the target reference (no feedback). */
    Actual_Motor = 1001, /** Use the motor reference. */
    Actual_Load = 1002, /** Use the load reference. */
    Error = 1003 /** Get the error. */
  };
  
  enum class eProtocolType : LibMCDriver_TML_int32 {
    Unknown = 0, /** Unknown Protocol */
    TMLCAN = 1, /** TMLCAN Protocol */
    TechnoCAN = 2 /** TechnoCAN Protocol */
  };
  
  enum class eMERType : LibMCDriver_TML_int32 {
    CANBER = 0, /** CANBus */
    SCER = 1, /** short-circuit protection */
    STPLTBL = 2, /** setup table */
    CTRER = 3, /** control */
    SCIER = 4, /** communication */
    WRPSER = 5, /** feedback */
    LSPST = 6, /** positive limit */
    LSNST = 7, /** negative limit */
    OCER = 8, /** over-current */
    I2TER = 9, /** I2T protection */
    OTERM = 10, /** motor temperature */
    OTERD = 11, /** drive temperature */
    OVER = 12, /** over voltage */
    UVER = 13, /** under voltage */
    CMDER = 14, /** command */
    ENST = 15 /** enable status */
  };
  
} // namespace LibMCDriver_TML;

// define legacy C-names for enums, structs and function types
typedef LibMCDriver_TML::eChannelType eLibMCDriver_TMLChannelType;
typedef LibMCDriver_TML::eReferenceType eLibMCDriver_TMLReferenceType;
typedef LibMCDriver_TML::eProtocolType eLibMCDriver_TMLProtocolType;
typedef LibMCDriver_TML::eMERType eLibMCDriver_TMLMERType;

#endif // __LIBMCDRIVER_TML_TYPES_HEADER_CPP
