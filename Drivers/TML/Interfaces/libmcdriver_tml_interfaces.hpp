/*++

Copyright (C) 2024 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.8.0-develop.

Abstract: This is an autogenerated C++ header file in order to allow easy
development of MC Driver Technosoft Motion Library. The implementer of MC Driver Technosoft Motion Library needs to
derive concrete classes from the abstract classes in this header.

Interface version: 2.0.0

*/


#ifndef __LIBMCDRIVER_TML_CPPINTERFACES
#define __LIBMCDRIVER_TML_CPPINTERFACES

#include <string>
#include <memory>

#include "libmcdriver_tml_types.hpp"


#include "libmcenv_dynamic.hpp"

namespace LibMCDriver_TML {
namespace Impl {

/**
 Forward declarations of class interfaces
*/
class IBase;
class IDriver;
class IAxis;
class IChannel;
class IDriver_TML;



/*************************************************************************************************************************
 Parameter Cache definitions
**************************************************************************************************************************/

class ParameterCache {
	public:
		virtual ~ParameterCache() {}
};

template <class T1> class ParameterCache_1 : public ParameterCache {
	private:
		T1 m_param1;
	public:
		ParameterCache_1 (const T1 & param1)
			: m_param1 (param1)
		{
		}

		void retrieveData (T1 & param1)
		{
			param1 = m_param1;
		}
};

template <class T1, class T2> class ParameterCache_2 : public ParameterCache {
	private:
		T1 m_param1;
		T2 m_param2;
	public:
		ParameterCache_2 (const T1 & param1, const T2 & param2)
			: m_param1 (param1), m_param2 (param2)
		{
		}

		void retrieveData (T1 & param1, T2 & param2)
		{
			param1 = m_param1;
			param2 = m_param2;
		}
};

template <class T1, class T2, class T3> class ParameterCache_3 : public ParameterCache {
	private:
		T1 m_param1;
		T2 m_param2;
		T3 m_param3;
	public:
		ParameterCache_3 (const T1 & param1, const T2 & param2, const T3 & param3)
			: m_param1 (param1), m_param2 (param2), m_param3 (param3)
		{
		}

		void retrieveData (T1 & param1, T2 & param2, T3 & param3)
		{
			param1 = m_param1;
			param2 = m_param2;
			param3 = m_param3;
		}
};

template <class T1, class T2, class T3, class T4> class ParameterCache_4 : public ParameterCache {
	private:
		T1 m_param1;
		T2 m_param2;
		T3 m_param3;
		T4 m_param4;
	public:
		ParameterCache_4 (const T1 & param1, const T2 & param2, const T3 & param3, const T4 & param4)
			: m_param1 (param1), m_param2 (param2), m_param3 (param3), m_param4 (param4)
		{
		}

		void retrieveData (T1 & param1, T2 & param2, T3 & param3, T4 & param4)
		{
			param1 = m_param1;
			param2 = m_param2;
			param3 = m_param3;
			param4 = m_param4;
		}
};


/*************************************************************************************************************************
 Class interface for Base 
**************************************************************************************************************************/

class IBase {
private:
	std::unique_ptr<ParameterCache> m_ParameterCache;
public:
	/**
	* IBase::~IBase - virtual destructor of IBase
	*/
	virtual ~IBase() {};

	/**
	* IBase::ReleaseBaseClassInterface - Releases ownership of a base class interface. Deletes the reference, if necessary.
	* @param[in] pIBase - The base class instance to release
	*/
	static void ReleaseBaseClassInterface(IBase* pIBase)
	{
		if (pIBase) {
			pIBase->DecRefCount();
		}
	};

	/**
	* IBase::AcquireBaseClassInterface - Acquires shared ownership of a base class interface.
	* @param[in] pIBase - The base class instance to acquire
	*/
	static void AcquireBaseClassInterface(IBase* pIBase)
	{
		if (pIBase) {
			pIBase->IncRefCount();
		}
	};


	/**
	* IBase::GetLastErrorMessage - Returns the last error registered of this class instance
	* @param[out] sErrorMessage - Message of the last error registered
	* @return Has an error been registered already
	*/
	virtual bool GetLastErrorMessage(std::string & sErrorMessage) = 0;

	/**
	* IBase::ClearErrorMessages - Clears all registered messages of this class instance
	*/
	virtual void ClearErrorMessages() = 0;

	/**
	* IBase::RegisterErrorMessage - Registers an error message with this class instance
	* @param[in] sErrorMessage - Error message to register
	*/
	virtual void RegisterErrorMessage(const std::string & sErrorMessage) = 0;

	/**
	* IBase::IncRefCount - Increases the reference count of a class instance
	*/
	virtual void IncRefCount() = 0;

	/**
	* IBase::DecRefCount - Decreases the reference count of a class instance and free releases it, if the last reference has been removed
	* @return Has the object been released
	*/
	virtual bool DecRefCount() = 0;

	/**
	* IBase::_setCache - set parameter cache of object
	*/
	void _setCache(ParameterCache * pCache)
	{
		m_ParameterCache.reset(pCache);
	}

	/**
	* IBase::_getCache - returns parameter cache of object
	*/
	ParameterCache* _getCache()
	{
		return m_ParameterCache.get();
	}

};


/**
 Definition of a shared pointer class for IBase
*/
template<class T>
class IBaseSharedPtr : public std::shared_ptr<T>
{
public:
	explicit IBaseSharedPtr(T* t = nullptr)
		: std::shared_ptr<T>(t, IBase::ReleaseBaseClassInterface)
	{
		t->IncRefCount();
	}

	// Reset function, as it also needs to properly set the deleter.
	void reset(T* t = nullptr)
	{
		std::shared_ptr<T>::reset(t, IBase::ReleaseBaseClassInterface);
	}

	// Get-function that increases the Base class's reference count
	T* getCoOwningPtr()
	{
		T* t = this->get();
		t->IncRefCount();
		return t;
	}
};


typedef IBaseSharedPtr<IBase> PIBase;


/*************************************************************************************************************************
 Class interface for Driver 
**************************************************************************************************************************/

class IDriver : public virtual IBase {
public:
	/**
	* IDriver::Configure - Configures a driver with its specific configuration data.
	* @param[in] sConfigurationString - Configuration data of driver.
	*/
	virtual void Configure(const std::string & sConfigurationString) = 0;

	/**
	* IDriver::GetName - returns the name identifier of the driver
	* @return Name of the driver.
	*/
	virtual std::string GetName() = 0;

	/**
	* IDriver::GetType - returns the type identifier of the driver
	* @return Type of the driver.
	*/
	virtual std::string GetType() = 0;

	/**
	* IDriver::GetVersion - returns the version identifiers of the driver
	* @param[out] nMajor - Major version.
	* @param[out] nMinor - Minor version.
	* @param[out] nMicro - Micro version.
	* @param[out] sBuild - Build identifier.
	*/
	virtual void GetVersion(LibMCDriver_TML_uint32 & nMajor, LibMCDriver_TML_uint32 & nMinor, LibMCDriver_TML_uint32 & nMicro, std::string & sBuild) = 0;

	/**
	* IDriver::QueryParameters - Updates the driver parameters in the driver environment. Should only be called in the driver thread.
	*/
	virtual void QueryParameters() = 0;

	/**
	* IDriver::QueryParametersEx - Updates the driver parameters in the driver environment. Might be called out of thread. Implementation MUST be able to handle parallel calls.
	* @param[in] pDriverUpdateInstance - Status update instance.
	*/
	virtual void QueryParametersEx(LibMCEnv::PDriverStatusUpdateSession pDriverUpdateInstance) = 0;

};

typedef IBaseSharedPtr<IDriver> PIDriver;


/*************************************************************************************************************************
 Class interface for Axis 
**************************************************************************************************************************/

class IAxis : public virtual IBase {
public:
	/**
	* IAxis::MoveRelative - Moves the selected drive a relative distance.
	* @param[in] dDistance - Distance (mm)
	* @param[in] dSpeed - Speed (mm/s)
	* @param[in] dAcceleration - Acceleration (mm/s^2)
	*/
	virtual void MoveRelative(const LibMCDriver_TML_double dDistance, const LibMCDriver_TML_double dSpeed, const LibMCDriver_TML_double dAcceleration) = 0;

	/**
	* IAxis::MoveAbsolute - Moves the selected drive to an absolute location.
	* @param[in] dDistance - Distance (mm)
	* @param[in] dSpeed - Speed (mm/s)
	* @param[in] dAcceleration - Acceleration (mm/s^2)
	*/
	virtual void MoveAbsolute(const LibMCDriver_TML_double dDistance, const LibMCDriver_TML_double dSpeed, const LibMCDriver_TML_double dAcceleration) = 0;

	/**
	* IAxis::CallSubroutine - Runs a subroutine on the selected drive.
	* @param[in] sRoutine - Label of routine
	*/
	virtual void CallSubroutine(const std::string & sRoutine) = 0;

	/**
	* IAxis::GetPosition - Retrieves the current position of the drive.
	* @return Position (mm)
	*/
	virtual LibMCDriver_TML_double GetPosition() = 0;

	/**
	* IAxis::GetSpeed - Retrieves the current speed of the drive.
	* @return Speed (mm/s)
	*/
	virtual LibMCDriver_TML_double GetSpeed() = 0;

	/**
	* IAxis::GetIntVariable - Retrieves the current position of the drive.
	* @param[in] sVariableName - Variable name
	* @return Value
	*/
	virtual LibMCDriver_TML_int32 GetIntVariable(const std::string & sVariableName) = 0;

	/**
	* IAxis::MotionComplete - Checks to see if the is currently moving.
	* @return Boolean reflecting if the drive is in currently moving.
	*/
	virtual bool MotionComplete() = 0;

	/**
	* IAxis::GetIdentifier - Returns the axis identifier.
	* @return Axis identifier.
	*/
	virtual std::string GetIdentifier() = 0;

	/**
	* IAxis::GetChannelIdentifier - Returns the identifier of the channel of the axis.
	* @return Channel identifier.
	*/
	virtual std::string GetChannelIdentifier() = 0;

	/**
	* IAxis::SetPower - Sets the power for an axis.
	* @param[in] bEnable - Flag if the power is enabled or not enabled.
	*/
	virtual void SetPower(const bool bEnable) = 0;

	/**
	* IAxis::ReadRegister - Reads the selected register of an axis.
	* @param[in] nRegister - Selected register.
	* @return Value inside register.
	*/
	virtual LibMCDriver_TML_uint32 ReadRegister(const LibMCDriver_TML_uint32 nRegister) = 0;

	/**
	* IAxis::CheckPower - Checks the power of the selected axis.
	* @return True for power on.
	*/
	virtual bool CheckPower() = 0;

};

typedef IBaseSharedPtr<IAxis> PIAxis;


/*************************************************************************************************************************
 Class interface for Channel 
**************************************************************************************************************************/

class IChannel : public virtual IBase {
public:
	/**
	* IChannel::GetIdentifier - Returns the channel identifier.
	* @return Channel identifier.
	*/
	virtual std::string GetIdentifier() = 0;

	/**
	* IChannel::SetupAxis - Setups an axis for this channel. The identifier MUST be globally unique.
	* @param[in] sIdentifier - Identifier for the axis. Fails if axis already exist.
	* @param[in] nAxisID - Hardware ID of the axis. MUST be unique in the channel.
	* @param[in] nConfigurationBufferSize - Number of elements in buffer
	* @param[in] pConfigurationBuffer - Configuration ZIP file for the axis.
	* @param[in] nCountsPerMM - Sets the mm per count used for all moves and accelerations.
	* @return Returns the axis instance.
	*/
	virtual IAxis * SetupAxis(const std::string & sIdentifier, const LibMCDriver_TML_uint32 nAxisID, const LibMCDriver_TML_uint64 nConfigurationBufferSize, const LibMCDriver_TML_uint8 * pConfigurationBuffer, const LibMCDriver_TML_uint32 nCountsPerMM) = 0;

	/**
	* IChannel::FindAxis - Finds an existing axis of this channel.
	* @param[in] sIdentifier - Identifier for the axis. Fails if axis already exist.
	* @return Returns the axis instance.
	*/
	virtual IAxis * FindAxis(const std::string & sIdentifier) = 0;

	/**
	* IChannel::AxisExists - Returns if the axis exists on this channel.
	* @param[in] sIdentifier - Identifier of the axis.
	* @return Flag if the axis exists.
	*/
	virtual bool AxisExists(const std::string & sIdentifier) = 0;

	/**
	* IChannel::Close - Closes the channel. Any other call will fail after closing.
	*/
	virtual void Close() = 0;

};

typedef IBaseSharedPtr<IChannel> PIChannel;


/*************************************************************************************************************************
 Class interface for Driver_TML 
**************************************************************************************************************************/

class IDriver_TML : public virtual IDriver {
public:
	/**
	* IDriver_TML::SetToSimulationMode - Turns the driver into a simulation mode.
	*/
	virtual void SetToSimulationMode() = 0;

	/**
	* IDriver_TML::IsSimulationMode - Returns if the driver is in simulation mode.
	* @return Flag if driver is in simulation mode.
	*/
	virtual bool IsSimulationMode() = 0;

	/**
	* IDriver_TML::SetCustomSDKResource - Sets the machine resource name of the TML SDK to load. MUST be called before Connect or it has no effect.
	* @param[in] sLibResourceName - Resource name of core machine package that contains the proprietary tml_lib.dll. Empty means standard naming applies.
	* @param[in] sCommsResourceName - Resource name of core machine package that contains the proprietary tmlcomms.dll. Empty means standard naming applies.
	*/
	virtual void SetCustomSDKResource(const std::string & sLibResourceName, const std::string & sCommsResourceName) = 0;

	/**
	* IDriver_TML::OpenChannel - Opens a communication channel.
	* @param[in] sIdentifier - Identifier of the device.
	* @param[in] sDeviceName - Name of the device.
	* @param[in] eChannelTypeToUse - Type of the interface device.
	* @param[in] eProtocolTypeToUse - Type of the protocol.
	* @param[in] nHostID - Host ID to use.
	* @param[in] nBaudrate - Baudrate to use.
	* @return Returns the channel instance.
	*/
	virtual IChannel * OpenChannel(const std::string & sIdentifier, const std::string & sDeviceName, const LibMCDriver_TML::eChannelType eChannelTypeToUse, const LibMCDriver_TML::eProtocolType eProtocolTypeToUse, const LibMCDriver_TML_uint32 nHostID, const LibMCDriver_TML_uint32 nBaudrate) = 0;

	/**
	* IDriver_TML::ChannelExists - Returns if the channel exists..
	* @param[in] sIdentifier - Identifier of the device.
	* @return Flag if the channel exists.
	*/
	virtual bool ChannelExists(const std::string & sIdentifier) = 0;

	/**
	* IDriver_TML::FindChannel - Find a communication channel by integer. Fails if the channel does not exist.
	* @param[in] sIdentifier - Identifier of the device.
	* @return Returns the channel instance.
	*/
	virtual IChannel * FindChannel(const std::string & sIdentifier) = 0;

};

typedef IBaseSharedPtr<IDriver_TML> PIDriver_TML;


/*************************************************************************************************************************
 Global functions declarations
**************************************************************************************************************************/
class CWrapper {
public:
	// Injected Components
	static LibMCEnv::PWrapper sPLibMCEnvWrapper;

	/**
	* Ilibmcdriver_tml::GetVersion - retrieves the binary version of this library.
	* @param[out] nMajor - returns the major version of this library
	* @param[out] nMinor - returns the minor version of this library
	* @param[out] nMicro - returns the micro version of this library
	*/
	static void GetVersion(LibMCDriver_TML_uint32 & nMajor, LibMCDriver_TML_uint32 & nMinor, LibMCDriver_TML_uint32 & nMicro);

	/**
	* Ilibmcdriver_tml::GetLastError - Returns the last error recorded on this object
	* @param[in] pInstance - Instance Handle
	* @param[out] sErrorMessage - Message of the last error
	* @return Is there a last error to query
	*/
	static bool GetLastError(IBase* pInstance, std::string & sErrorMessage);

	/**
	* Ilibmcdriver_tml::ReleaseInstance - Releases shared ownership of an Instance
	* @param[in] pInstance - Instance Handle
	*/
	static void ReleaseInstance(IBase* pInstance);

	/**
	* Ilibmcdriver_tml::AcquireInstance - Acquires shared ownership of an Instance
	* @param[in] pInstance - Instance Handle
	*/
	static void AcquireInstance(IBase* pInstance);

	/**
	* Ilibmcdriver_tml::CreateDriver - Creates a driver instance with a specific name.
	* @param[in] sName - Name of driver to be created.
	* @param[in] sType - Type of driver to be created.
	* @param[in] pDriverEnvironment - Environment of this driver.
	* @return New Driver instance
	*/
	static IDriver * CreateDriver(const std::string & sName, const std::string & sType, LibMCEnv::PDriverEnvironment pDriverEnvironment);

};

LibMCDriver_TMLResult LibMCDriver_TML_GetProcAddress (const char * pProcName, void ** ppProcAddress);

} // namespace Impl
} // namespace LibMCDriver_TML

#endif // __LIBMCDRIVER_TML_CPPINTERFACES
