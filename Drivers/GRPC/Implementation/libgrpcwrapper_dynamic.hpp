/*++

Copyright (C) 2023 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.8.0-develop.

Abstract: This is an autogenerated C++-Header file in order to allow an easy
 use of GRPC Library Wrapper

Interface version: 1.2.0

*/

#ifndef __LIBGRPCWRAPPER_CPPHEADER_DYNAMIC_CPP
#define __LIBGRPCWRAPPER_CPPHEADER_DYNAMIC_CPP

#include "libgrpcwrapper_types.hpp"
#include "libgrpcwrapper_dynamic.h"


#ifdef _WIN32
#include <windows.h>
#else // _WIN32
#include <dlfcn.h>
#endif // _WIN32
#include <string>
#include <memory>
#include <vector>
#include <exception>

namespace LibGRPCWrapper {

/*************************************************************************************************************************
 Forward Declaration of all classes
**************************************************************************************************************************/
class CWrapper;
class CBase;
class CMessage;
class CResponse;
class CRequest;
class CConnection;
class CProtocol;

/*************************************************************************************************************************
 Declaration of deprecated class types
**************************************************************************************************************************/
typedef CWrapper CLibGRPCWrapperWrapper;
typedef CBase CLibGRPCWrapperBase;
typedef CMessage CLibGRPCWrapperMessage;
typedef CResponse CLibGRPCWrapperResponse;
typedef CRequest CLibGRPCWrapperRequest;
typedef CConnection CLibGRPCWrapperConnection;
typedef CProtocol CLibGRPCWrapperProtocol;

/*************************************************************************************************************************
 Declaration of shared pointer types
**************************************************************************************************************************/
typedef std::shared_ptr<CWrapper> PWrapper;
typedef std::shared_ptr<CBase> PBase;
typedef std::shared_ptr<CMessage> PMessage;
typedef std::shared_ptr<CResponse> PResponse;
typedef std::shared_ptr<CRequest> PRequest;
typedef std::shared_ptr<CConnection> PConnection;
typedef std::shared_ptr<CProtocol> PProtocol;

/*************************************************************************************************************************
 Declaration of deprecated shared pointer types
**************************************************************************************************************************/
typedef PWrapper PLibGRPCWrapperWrapper;
typedef PBase PLibGRPCWrapperBase;
typedef PMessage PLibGRPCWrapperMessage;
typedef PResponse PLibGRPCWrapperResponse;
typedef PRequest PLibGRPCWrapperRequest;
typedef PConnection PLibGRPCWrapperConnection;
typedef PProtocol PLibGRPCWrapperProtocol;


/*************************************************************************************************************************
 classParam Definition
**************************************************************************************************************************/

template<class T> class classParam {
private:
	const T* m_ptr;

public:
	classParam(const T* ptr)
		: m_ptr (ptr)
	{
	}

	classParam(std::shared_ptr <T> sharedPtr)
		: m_ptr (sharedPtr.get())
	{
	}

	LibGRPCWrapperHandle GetHandle()
	{
		if (m_ptr != nullptr)
			return m_ptr->handle();
		return nullptr;
	}
};

/*************************************************************************************************************************
 Class ELibGRPCWrapperException 
**************************************************************************************************************************/
class ELibGRPCWrapperException : public std::exception {
protected:
	/**
	* Error code for the Exception.
	*/
	LibGRPCWrapperResult m_errorCode;
	/**
	* Error message for the Exception.
	*/
	std::string m_errorMessage;
	std::string m_originalErrorMessage;

public:
	/**
	* Exception Constructor.
	*/
	ELibGRPCWrapperException(LibGRPCWrapperResult errorCode, const std::string & sErrorMessage)
		: m_errorCode(errorCode), m_originalErrorMessage(sErrorMessage)
	{
		m_errorMessage = buildErrorMessage();
	}

	/**
	* Returns error code
	*/
	LibGRPCWrapperResult getErrorCode() const noexcept
	{
		return m_errorCode;
	}

	/**
	* Returns error message
	*/
	const char* what() const noexcept
	{
		return m_errorMessage.c_str();
	}

	const char* getErrorMessage() const noexcept
	{
		return m_originalErrorMessage.c_str();
	}

	const char* getErrorName() const noexcept
	{
		switch(getErrorCode()) {
			case LIBGRPCWRAPPER_SUCCESS: return "SUCCESS";
			case LIBGRPCWRAPPER_ERROR_NOTIMPLEMENTED: return "NOTIMPLEMENTED";
			case LIBGRPCWRAPPER_ERROR_INVALIDPARAM: return "INVALIDPARAM";
			case LIBGRPCWRAPPER_ERROR_INVALIDCAST: return "INVALIDCAST";
			case LIBGRPCWRAPPER_ERROR_BUFFERTOOSMALL: return "BUFFERTOOSMALL";
			case LIBGRPCWRAPPER_ERROR_GENERICEXCEPTION: return "GENERICEXCEPTION";
			case LIBGRPCWRAPPER_ERROR_COULDNOTLOADLIBRARY: return "COULDNOTLOADLIBRARY";
			case LIBGRPCWRAPPER_ERROR_COULDNOTFINDLIBRARYEXPORT: return "COULDNOTFINDLIBRARYEXPORT";
			case LIBGRPCWRAPPER_ERROR_INCOMPATIBLEBINARYVERSION: return "INCOMPATIBLEBINARYVERSION";
			case LIBGRPCWRAPPER_ERROR_COULDNOTCREATECHANNEL: return "COULDNOTCREATECHANNEL";
			case LIBGRPCWRAPPER_ERROR_FAILEDTOIMPORTPROTODEFINITION: return "FAILEDTOIMPORTPROTODEFINITION";
			case LIBGRPCWRAPPER_ERROR_EMPTYREQUESTTYPEIDENTIFIER: return "EMPTYREQUESTTYPEIDENTIFIER";
			case LIBGRPCWRAPPER_ERROR_INVALIDREQUESTTYPEIDENTIFIER: return "INVALIDREQUESTTYPEIDENTIFIER";
			case LIBGRPCWRAPPER_ERROR_EMPTYRESPONSETYPEIDENTIFIER: return "EMPTYRESPONSETYPEIDENTIFIER";
			case LIBGRPCWRAPPER_ERROR_INVALIDRESPONSETYPEIDENTIFIER: return "INVALIDRESPONSETYPEIDENTIFIER";
			case LIBGRPCWRAPPER_ERROR_UNKNOWNMESSAGETYPENAME: return "UNKNOWNMESSAGETYPENAME";
			case LIBGRPCWRAPPER_ERROR_EMPTYMESSAGETYPENAME: return "EMPTYMESSAGETYPENAME";
			case LIBGRPCWRAPPER_ERROR_COULDNOTGETMESSAGEPROTOTYPE: return "COULDNOTGETMESSAGEPROTOTYPE";
			case LIBGRPCWRAPPER_ERROR_REQUESTFIELDNOTFOUND: return "REQUESTFIELDNOTFOUND";
			case LIBGRPCWRAPPER_ERROR_RESPONSEFIELDNOTFOUND: return "RESPONSEFIELDNOTFOUND";
			case LIBGRPCWRAPPER_ERROR_EMPTYSERVICEMETHOD: return "EMPTYSERVICEMETHOD";
			case LIBGRPCWRAPPER_ERROR_EMPTYREQUESTRESPONSE: return "EMPTYREQUESTRESPONSE";
			case LIBGRPCWRAPPER_ERROR_FAILEDTOPARSEREQUESTRESPONSE: return "FAILEDTOPARSEREQUESTRESPONSE";
			case LIBGRPCWRAPPER_ERROR_MESSAGEDESCRIPTORISNULL: return "MESSAGEDESCRIPTORISNULL";
			case LIBGRPCWRAPPER_ERROR_MESSAGISNULL: return "MESSAGISNULL";
			case LIBGRPCWRAPPER_ERROR_MESSAGREFLECTIONISNULL: return "MESSAGREFLECTIONISNULL";
		}
		return "UNKNOWN";
	}

	const char* getErrorDescription() const noexcept
	{
		switch(getErrorCode()) {
			case LIBGRPCWRAPPER_SUCCESS: return "success";
			case LIBGRPCWRAPPER_ERROR_NOTIMPLEMENTED: return "functionality not implemented";
			case LIBGRPCWRAPPER_ERROR_INVALIDPARAM: return "an invalid parameter was passed";
			case LIBGRPCWRAPPER_ERROR_INVALIDCAST: return "a type cast failed";
			case LIBGRPCWRAPPER_ERROR_BUFFERTOOSMALL: return "a provided buffer is too small";
			case LIBGRPCWRAPPER_ERROR_GENERICEXCEPTION: return "a generic exception occurred";
			case LIBGRPCWRAPPER_ERROR_COULDNOTLOADLIBRARY: return "the library could not be loaded";
			case LIBGRPCWRAPPER_ERROR_COULDNOTFINDLIBRARYEXPORT: return "a required exported symbol could not be found in the library";
			case LIBGRPCWRAPPER_ERROR_INCOMPATIBLEBINARYVERSION: return "the version of the binary interface does not match the bindings interface";
			case LIBGRPCWRAPPER_ERROR_COULDNOTCREATECHANNEL: return "Could not create channel.";
			case LIBGRPCWRAPPER_ERROR_FAILEDTOIMPORTPROTODEFINITION: return "Failed to import proto definition.";
			case LIBGRPCWRAPPER_ERROR_EMPTYREQUESTTYPEIDENTIFIER: return "Empty request type identifier.";
			case LIBGRPCWRAPPER_ERROR_INVALIDREQUESTTYPEIDENTIFIER: return "Invalid request type identifier.";
			case LIBGRPCWRAPPER_ERROR_EMPTYRESPONSETYPEIDENTIFIER: return "Empty request type identifier.";
			case LIBGRPCWRAPPER_ERROR_INVALIDRESPONSETYPEIDENTIFIER: return "Invalid request type identifier.";
			case LIBGRPCWRAPPER_ERROR_UNKNOWNMESSAGETYPENAME: return "Unknown message type name.";
			case LIBGRPCWRAPPER_ERROR_EMPTYMESSAGETYPENAME: return "Empty messsage type name.";
			case LIBGRPCWRAPPER_ERROR_COULDNOTGETMESSAGEPROTOTYPE: return "Could not get message prototype.";
			case LIBGRPCWRAPPER_ERROR_REQUESTFIELDNOTFOUND: return "Request field not found.";
			case LIBGRPCWRAPPER_ERROR_RESPONSEFIELDNOTFOUND: return "Response field not found.";
			case LIBGRPCWRAPPER_ERROR_EMPTYSERVICEMETHOD: return "Empty service method.";
			case LIBGRPCWRAPPER_ERROR_EMPTYREQUESTRESPONSE: return "Empty request response.";
			case LIBGRPCWRAPPER_ERROR_FAILEDTOPARSEREQUESTRESPONSE: return "Failed to parse request response.";
			case LIBGRPCWRAPPER_ERROR_MESSAGEDESCRIPTORISNULL: return "Internal error: Message descriptor is null";
			case LIBGRPCWRAPPER_ERROR_MESSAGISNULL: return "Internal error: Message is null";
			case LIBGRPCWRAPPER_ERROR_MESSAGREFLECTIONISNULL: return "Internal error: Message reflection is null";
		}
		return "unknown error";
	}

private:

	std::string buildErrorMessage() const noexcept
	{
		std::string msg = m_originalErrorMessage;
		if (msg.empty()) {
			msg = getErrorDescription();
		}
		return std::string("Error: ") + getErrorName() + ": " + msg;
	}
};

/*************************************************************************************************************************
 Class CInputVector
**************************************************************************************************************************/
template <typename T>
class CInputVector {
private:
	
	const T* m_data;
	size_t m_size;
	
public:
	
	CInputVector(const std::vector<T>& vec)
		: m_data( vec.data() ), m_size( vec.size() )
	{
	}
	
	CInputVector(const T* in_data, size_t in_size)
		: m_data( in_data ), m_size(in_size )
	{
	}
	
	const T* data() const
	{
		return m_data;
	}
	
	size_t size() const
	{
		return m_size;
	}
	
};

// declare deprecated class name
template<typename T>
using CLibGRPCWrapperInputVector = CInputVector<T>;

/*************************************************************************************************************************
 Class CWrapper 
**************************************************************************************************************************/
class CWrapper {
public:
	
	explicit CWrapper(void* pSymbolLookupMethod)
	{
		CheckError(nullptr, initWrapperTable(&m_WrapperTable));
		CheckError(nullptr, loadWrapperTableFromSymbolLookupMethod(&m_WrapperTable, pSymbolLookupMethod));
		
		CheckError(nullptr, checkBinaryVersion());
	}
	
	explicit CWrapper(const std::string &sFileName)
	{
		CheckError(nullptr, initWrapperTable(&m_WrapperTable));
		CheckError(nullptr, loadWrapperTable(&m_WrapperTable, sFileName.c_str()));
		
		CheckError(nullptr, checkBinaryVersion());
	}
	
	static PWrapper loadLibrary(const std::string &sFileName)
	{
		return std::make_shared<CWrapper>(sFileName);
	}
	
	static PWrapper loadLibraryFromSymbolLookupMethod(void* pSymbolLookupMethod)
	{
		return std::make_shared<CWrapper>(pSymbolLookupMethod);
	}
	
	~CWrapper()
	{
		releaseWrapperTable(&m_WrapperTable);
	}
	
	inline void CheckError(CBase * pBaseClass, LibGRPCWrapperResult nResult);

	inline void GetVersion(LibGRPCWrapper_uint32 & nMajor, LibGRPCWrapper_uint32 & nMinor, LibGRPCWrapper_uint32 & nMicro);
	inline bool GetLastError(classParam<CBase> pInstance, std::string & sErrorMessage);
	inline void AcquireInstance(classParam<CBase> pInstance);
	inline void ReleaseInstance(classParam<CBase> pInstance);
	inline LibGRPCWrapper_pvoid GetSymbolLookupMethod();
	inline PProtocol CreateProtocol(const std::string & sProtoBufferDefinition);

private:
	sLibGRPCWrapperDynamicWrapperTable m_WrapperTable;
	
	LibGRPCWrapperResult checkBinaryVersion()
	{
		LibGRPCWrapper_uint32 nMajor, nMinor, nMicro;
		GetVersion(nMajor, nMinor, nMicro);
		if ( (nMajor != LIBGRPCWRAPPER_VERSION_MAJOR) || (nMinor < LIBGRPCWRAPPER_VERSION_MINOR) ) {
			return LIBGRPCWRAPPER_ERROR_INCOMPATIBLEBINARYVERSION;
		}
		return LIBGRPCWRAPPER_SUCCESS;
	}
	LibGRPCWrapperResult initWrapperTable(sLibGRPCWrapperDynamicWrapperTable * pWrapperTable);
	LibGRPCWrapperResult releaseWrapperTable(sLibGRPCWrapperDynamicWrapperTable * pWrapperTable);
	LibGRPCWrapperResult loadWrapperTable(sLibGRPCWrapperDynamicWrapperTable * pWrapperTable, const char * pLibraryFileName);
	LibGRPCWrapperResult loadWrapperTableFromSymbolLookupMethod(sLibGRPCWrapperDynamicWrapperTable * pWrapperTable, void* pSymbolLookupMethod);

	friend class CBase;
	friend class CMessage;
	friend class CResponse;
	friend class CRequest;
	friend class CConnection;
	friend class CProtocol;

};

	
/*************************************************************************************************************************
 Class CBase 
**************************************************************************************************************************/
class CBase {
public:
	
protected:
	/* Wrapper Object that created the class. */
	CWrapper * m_pWrapper;
	/* Handle to Instance in library*/
	LibGRPCWrapperHandle m_pHandle;

	/* Checks for an Error code and raises Exceptions */
	void CheckError(LibGRPCWrapperResult nResult)
	{
		if (m_pWrapper != nullptr)
			m_pWrapper->CheckError(this, nResult);
	}
public:
	/**
	* CBase::CBase - Constructor for Base class.
	*/
	CBase(CWrapper * pWrapper, LibGRPCWrapperHandle pHandle)
		: m_pWrapper(pWrapper), m_pHandle(pHandle)
	{
	}

	/**
	* CBase::~CBase - Destructor for Base class.
	*/
	virtual ~CBase()
	{
		if (m_pWrapper != nullptr)
			m_pWrapper->ReleaseInstance(this);
		m_pWrapper = nullptr;
	}

	/**
	* CBase::handle - Returns handle to instance.
	*/
	LibGRPCWrapperHandle handle() const
	{
		return m_pHandle;
	}

	/**
	* CBase::wrapper - Returns wrapper instance.
	*/
	CWrapper * wrapper() const
	{
		return m_pWrapper;
	}
	
	friend class CWrapper;
};
	
/*************************************************************************************************************************
 Class CMessage 
**************************************************************************************************************************/
class CMessage : public CBase {
public:
	
	/**
	* CMessage::CMessage - Constructor for Message class.
	*/
	CMessage(CWrapper* pWrapper, LibGRPCWrapperHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline bool HasField(const std::string & sFieldName);
	inline bool HasStringField(const std::string & sFieldName);
	inline void SetStringField(const std::string & sFieldName, const std::string & sValue);
	inline std::string GetStringField(const std::string & sFieldName);
	inline void SetInt32Field(const std::string & sFieldName, const LibGRPCWrapper_int32 nValue);
	inline LibGRPCWrapper_int32 GetInt32Field(const std::string & sFieldName);
	inline void SetUInt32Field(const std::string & sFieldName, const LibGRPCWrapper_uint32 nValue);
	inline LibGRPCWrapper_uint32 GetUInt32Field(const std::string & sFieldName);
	inline void SetInt64Field(const std::string & sFieldName, const LibGRPCWrapper_int64 nValue);
	inline LibGRPCWrapper_int64 GetInt64Field(const std::string & sFieldName);
	inline void SetUInt64Field(const std::string & sFieldName, const LibGRPCWrapper_uint64 nValue);
	inline LibGRPCWrapper_uint64 GetUInt64Field(const std::string & sFieldName);
	inline void SetBoolField(const std::string & sFieldName, const bool bValue);
	inline bool GetBoolField(const std::string & sFieldName);
	inline void SetFloatField(const std::string & sFieldName, const LibGRPCWrapper_single fValue);
	inline LibGRPCWrapper_single GetFloatField(const std::string & sFieldName);
	inline void SetDoubleField(const std::string & sFieldName, const LibGRPCWrapper_double dValue);
	inline LibGRPCWrapper_int32 GetDoubleField(const std::string & sFieldName);
};
	
/*************************************************************************************************************************
 Class CResponse 
**************************************************************************************************************************/
class CResponse : public CMessage {
public:
	
	/**
	* CResponse::CResponse - Constructor for Response class.
	*/
	CResponse(CWrapper* pWrapper, LibGRPCWrapperHandle pHandle)
		: CMessage(pWrapper, pHandle)
	{
	}
	
	inline std::string GetResponseType();
};
	
/*************************************************************************************************************************
 Class CRequest 
**************************************************************************************************************************/
class CRequest : public CMessage {
public:
	
	/**
	* CRequest::CRequest - Constructor for Request class.
	*/
	CRequest(CWrapper* pWrapper, LibGRPCWrapperHandle pHandle)
		: CMessage(pWrapper, pHandle)
	{
	}
	
	inline std::string GetRequestType();
	inline std::string GetExpectedResponseType();
	inline PResponse SendBlocking(const std::string & sServiceMethod, const LibGRPCWrapper_uint32 nTimeOutInMS);
};
	
/*************************************************************************************************************************
 Class CConnection 
**************************************************************************************************************************/
class CConnection : public CBase {
public:
	
	/**
	* CConnection::CConnection - Constructor for Connection class.
	*/
	CConnection(CWrapper* pWrapper, LibGRPCWrapperHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline std::string GetEndPoint();
	inline void Close();
	inline PRequest CreateStaticRequest(const std::string & sRequestTypeIdentifier, const std::string & sResponseTypeIdentifier);
};
	
/*************************************************************************************************************************
 Class CProtocol 
**************************************************************************************************************************/
class CProtocol : public CBase {
public:
	
	/**
	* CProtocol::CProtocol - Constructor for Protocol class.
	*/
	CProtocol(CWrapper* pWrapper, LibGRPCWrapperHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline PConnection ConnectUnsecure(const std::string & sNetworkCredentials);
	inline std::string GetProtobufDefinition();
	inline bool HasMessageType(const std::string & sMessageTypeIdentifier);
};
	
	/**
	* CWrapper::GetVersion - retrieves the binary version of this library.
	* @param[out] nMajor - returns the major version of this library
	* @param[out] nMinor - returns the minor version of this library
	* @param[out] nMicro - returns the micro version of this library
	*/
	inline void CWrapper::GetVersion(LibGRPCWrapper_uint32 & nMajor, LibGRPCWrapper_uint32 & nMinor, LibGRPCWrapper_uint32 & nMicro)
	{
		CheckError(nullptr,m_WrapperTable.m_GetVersion(&nMajor, &nMinor, &nMicro));
	}
	
	/**
	* CWrapper::GetLastError - Returns the last error recorded on this object
	* @param[in] pInstance - Instance Handle
	* @param[out] sErrorMessage - Message of the last error
	* @return Is there a last error to query
	*/
	inline bool CWrapper::GetLastError(classParam<CBase> pInstance, std::string & sErrorMessage)
	{
		LibGRPCWrapperHandle hInstance = pInstance.GetHandle();
		LibGRPCWrapper_uint32 bytesNeededErrorMessage = 0;
		LibGRPCWrapper_uint32 bytesWrittenErrorMessage = 0;
		bool resultHasError = 0;
		CheckError(nullptr,m_WrapperTable.m_GetLastError(hInstance, 0, &bytesNeededErrorMessage, nullptr, &resultHasError));
		std::vector<char> bufferErrorMessage(bytesNeededErrorMessage);
		CheckError(nullptr,m_WrapperTable.m_GetLastError(hInstance, bytesNeededErrorMessage, &bytesWrittenErrorMessage, &bufferErrorMessage[0], &resultHasError));
		sErrorMessage = std::string(&bufferErrorMessage[0]);
		
		return resultHasError;
	}
	
	/**
	* CWrapper::AcquireInstance - Acquire shared ownership of an Instance
	* @param[in] pInstance - Instance Handle
	*/
	inline void CWrapper::AcquireInstance(classParam<CBase> pInstance)
	{
		LibGRPCWrapperHandle hInstance = pInstance.GetHandle();
		CheckError(nullptr,m_WrapperTable.m_AcquireInstance(hInstance));
	}
	
	/**
	* CWrapper::ReleaseInstance - Releases shared ownership of an Instance
	* @param[in] pInstance - Instance Handle
	*/
	inline void CWrapper::ReleaseInstance(classParam<CBase> pInstance)
	{
		LibGRPCWrapperHandle hInstance = pInstance.GetHandle();
		CheckError(nullptr,m_WrapperTable.m_ReleaseInstance(hInstance));
	}
	
	/**
	* CWrapper::GetSymbolLookupMethod - Returns the address of the SymbolLookupMethod
	* @return Address of the SymbolAddressMethod
	*/
	inline LibGRPCWrapper_pvoid CWrapper::GetSymbolLookupMethod()
	{
		LibGRPCWrapper_pvoid resultSymbolLookupMethod = 0;
		CheckError(nullptr,m_WrapperTable.m_GetSymbolLookupMethod(&resultSymbolLookupMethod));
		
		return resultSymbolLookupMethod;
	}
	
	/**
	* CWrapper::CreateProtocol - Returns a PLC instance
	* @param[in] sProtoBufferDefinition - Protobuf structure definition as string.
	* @return Protocol Instance
	*/
	inline PProtocol CWrapper::CreateProtocol(const std::string & sProtoBufferDefinition)
	{
		LibGRPCWrapperHandle hProtocolInstance = nullptr;
		CheckError(nullptr,m_WrapperTable.m_CreateProtocol(sProtoBufferDefinition.c_str(), &hProtocolInstance));
		
		if (!hProtocolInstance) {
			CheckError(nullptr,LIBGRPCWRAPPER_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CProtocol>(this, hProtocolInstance);
	}
	
	inline void CWrapper::CheckError(CBase * pBaseClass, LibGRPCWrapperResult nResult)
	{
		if (nResult != 0) {
			std::string sErrorMessage;
			if (pBaseClass != nullptr) {
				GetLastError(pBaseClass, sErrorMessage);
			}
			throw ELibGRPCWrapperException(nResult, sErrorMessage);
		}
	}
	

	inline LibGRPCWrapperResult CWrapper::initWrapperTable(sLibGRPCWrapperDynamicWrapperTable * pWrapperTable)
	{
		if (pWrapperTable == nullptr)
			return LIBGRPCWRAPPER_ERROR_INVALIDPARAM;
		
		pWrapperTable->m_LibraryHandle = nullptr;
		pWrapperTable->m_Message_HasField = nullptr;
		pWrapperTable->m_Message_HasStringField = nullptr;
		pWrapperTable->m_Message_SetStringField = nullptr;
		pWrapperTable->m_Message_GetStringField = nullptr;
		pWrapperTable->m_Message_SetInt32Field = nullptr;
		pWrapperTable->m_Message_GetInt32Field = nullptr;
		pWrapperTable->m_Message_SetUInt32Field = nullptr;
		pWrapperTable->m_Message_GetUInt32Field = nullptr;
		pWrapperTable->m_Message_SetInt64Field = nullptr;
		pWrapperTable->m_Message_GetInt64Field = nullptr;
		pWrapperTable->m_Message_SetUInt64Field = nullptr;
		pWrapperTable->m_Message_GetUInt64Field = nullptr;
		pWrapperTable->m_Message_SetBoolField = nullptr;
		pWrapperTable->m_Message_GetBoolField = nullptr;
		pWrapperTable->m_Message_SetFloatField = nullptr;
		pWrapperTable->m_Message_GetFloatField = nullptr;
		pWrapperTable->m_Message_SetDoubleField = nullptr;
		pWrapperTable->m_Message_GetDoubleField = nullptr;
		pWrapperTable->m_Response_GetResponseType = nullptr;
		pWrapperTable->m_Request_GetRequestType = nullptr;
		pWrapperTable->m_Request_GetExpectedResponseType = nullptr;
		pWrapperTable->m_Request_SendBlocking = nullptr;
		pWrapperTable->m_Connection_GetEndPoint = nullptr;
		pWrapperTable->m_Connection_Close = nullptr;
		pWrapperTable->m_Connection_CreateStaticRequest = nullptr;
		pWrapperTable->m_Protocol_ConnectUnsecure = nullptr;
		pWrapperTable->m_Protocol_GetProtobufDefinition = nullptr;
		pWrapperTable->m_Protocol_HasMessageType = nullptr;
		pWrapperTable->m_GetVersion = nullptr;
		pWrapperTable->m_GetLastError = nullptr;
		pWrapperTable->m_AcquireInstance = nullptr;
		pWrapperTable->m_ReleaseInstance = nullptr;
		pWrapperTable->m_GetSymbolLookupMethod = nullptr;
		pWrapperTable->m_CreateProtocol = nullptr;
		
		return LIBGRPCWRAPPER_SUCCESS;
	}

	inline LibGRPCWrapperResult CWrapper::releaseWrapperTable(sLibGRPCWrapperDynamicWrapperTable * pWrapperTable)
	{
		if (pWrapperTable == nullptr)
			return LIBGRPCWRAPPER_ERROR_INVALIDPARAM;
		
		if (pWrapperTable->m_LibraryHandle != nullptr) {
		#ifdef _WIN32
			HMODULE hModule = (HMODULE) pWrapperTable->m_LibraryHandle;
			FreeLibrary(hModule);
		#else // _WIN32
			dlclose(pWrapperTable->m_LibraryHandle);
		#endif // _WIN32
			return initWrapperTable(pWrapperTable);
		}
		
		return LIBGRPCWRAPPER_SUCCESS;
	}

	inline LibGRPCWrapperResult CWrapper::loadWrapperTable(sLibGRPCWrapperDynamicWrapperTable * pWrapperTable, const char * pLibraryFileName)
	{
		if (pWrapperTable == nullptr)
			return LIBGRPCWRAPPER_ERROR_INVALIDPARAM;
		if (pLibraryFileName == nullptr)
			return LIBGRPCWRAPPER_ERROR_INVALIDPARAM;
		
		#ifdef _WIN32
		// Convert filename to UTF16-string
		int nLength = 0;
		while ((pLibraryFileName[nLength] != 0) && (nLength < MAX_PATH))
			nLength++;
		int nBufferSize = nLength * 2 + 2;
		std::vector<wchar_t> wsLibraryFileName(nBufferSize);
		int nResult = MultiByteToWideChar(CP_UTF8, 0, pLibraryFileName, nLength, &wsLibraryFileName[0], nBufferSize);
		if (nResult == 0)
			return LIBGRPCWRAPPER_ERROR_COULDNOTLOADLIBRARY;
		
		HMODULE hLibrary = LoadLibraryW(wsLibraryFileName.data());
		if (hLibrary == 0) 
			return LIBGRPCWRAPPER_ERROR_COULDNOTLOADLIBRARY;
		#else // _WIN32
		void* hLibrary = dlopen(pLibraryFileName, RTLD_LAZY);
		if (hLibrary == 0) 
			return LIBGRPCWRAPPER_ERROR_COULDNOTLOADLIBRARY;
		dlerror();
		#endif // _WIN32
		
		#ifdef _WIN32
		pWrapperTable->m_Message_HasField = (PLibGRPCWrapperMessage_HasFieldPtr) GetProcAddress(hLibrary, "libgrpcwrapper_message_hasfield");
		#else // _WIN32
		pWrapperTable->m_Message_HasField = (PLibGRPCWrapperMessage_HasFieldPtr) dlsym(hLibrary, "libgrpcwrapper_message_hasfield");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Message_HasField == nullptr)
			return LIBGRPCWRAPPER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Message_HasStringField = (PLibGRPCWrapperMessage_HasStringFieldPtr) GetProcAddress(hLibrary, "libgrpcwrapper_message_hasstringfield");
		#else // _WIN32
		pWrapperTable->m_Message_HasStringField = (PLibGRPCWrapperMessage_HasStringFieldPtr) dlsym(hLibrary, "libgrpcwrapper_message_hasstringfield");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Message_HasStringField == nullptr)
			return LIBGRPCWRAPPER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Message_SetStringField = (PLibGRPCWrapperMessage_SetStringFieldPtr) GetProcAddress(hLibrary, "libgrpcwrapper_message_setstringfield");
		#else // _WIN32
		pWrapperTable->m_Message_SetStringField = (PLibGRPCWrapperMessage_SetStringFieldPtr) dlsym(hLibrary, "libgrpcwrapper_message_setstringfield");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Message_SetStringField == nullptr)
			return LIBGRPCWRAPPER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Message_GetStringField = (PLibGRPCWrapperMessage_GetStringFieldPtr) GetProcAddress(hLibrary, "libgrpcwrapper_message_getstringfield");
		#else // _WIN32
		pWrapperTable->m_Message_GetStringField = (PLibGRPCWrapperMessage_GetStringFieldPtr) dlsym(hLibrary, "libgrpcwrapper_message_getstringfield");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Message_GetStringField == nullptr)
			return LIBGRPCWRAPPER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Message_SetInt32Field = (PLibGRPCWrapperMessage_SetInt32FieldPtr) GetProcAddress(hLibrary, "libgrpcwrapper_message_setint32field");
		#else // _WIN32
		pWrapperTable->m_Message_SetInt32Field = (PLibGRPCWrapperMessage_SetInt32FieldPtr) dlsym(hLibrary, "libgrpcwrapper_message_setint32field");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Message_SetInt32Field == nullptr)
			return LIBGRPCWRAPPER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Message_GetInt32Field = (PLibGRPCWrapperMessage_GetInt32FieldPtr) GetProcAddress(hLibrary, "libgrpcwrapper_message_getint32field");
		#else // _WIN32
		pWrapperTable->m_Message_GetInt32Field = (PLibGRPCWrapperMessage_GetInt32FieldPtr) dlsym(hLibrary, "libgrpcwrapper_message_getint32field");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Message_GetInt32Field == nullptr)
			return LIBGRPCWRAPPER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Message_SetUInt32Field = (PLibGRPCWrapperMessage_SetUInt32FieldPtr) GetProcAddress(hLibrary, "libgrpcwrapper_message_setuint32field");
		#else // _WIN32
		pWrapperTable->m_Message_SetUInt32Field = (PLibGRPCWrapperMessage_SetUInt32FieldPtr) dlsym(hLibrary, "libgrpcwrapper_message_setuint32field");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Message_SetUInt32Field == nullptr)
			return LIBGRPCWRAPPER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Message_GetUInt32Field = (PLibGRPCWrapperMessage_GetUInt32FieldPtr) GetProcAddress(hLibrary, "libgrpcwrapper_message_getuint32field");
		#else // _WIN32
		pWrapperTable->m_Message_GetUInt32Field = (PLibGRPCWrapperMessage_GetUInt32FieldPtr) dlsym(hLibrary, "libgrpcwrapper_message_getuint32field");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Message_GetUInt32Field == nullptr)
			return LIBGRPCWRAPPER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Message_SetInt64Field = (PLibGRPCWrapperMessage_SetInt64FieldPtr) GetProcAddress(hLibrary, "libgrpcwrapper_message_setint64field");
		#else // _WIN32
		pWrapperTable->m_Message_SetInt64Field = (PLibGRPCWrapperMessage_SetInt64FieldPtr) dlsym(hLibrary, "libgrpcwrapper_message_setint64field");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Message_SetInt64Field == nullptr)
			return LIBGRPCWRAPPER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Message_GetInt64Field = (PLibGRPCWrapperMessage_GetInt64FieldPtr) GetProcAddress(hLibrary, "libgrpcwrapper_message_getint64field");
		#else // _WIN32
		pWrapperTable->m_Message_GetInt64Field = (PLibGRPCWrapperMessage_GetInt64FieldPtr) dlsym(hLibrary, "libgrpcwrapper_message_getint64field");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Message_GetInt64Field == nullptr)
			return LIBGRPCWRAPPER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Message_SetUInt64Field = (PLibGRPCWrapperMessage_SetUInt64FieldPtr) GetProcAddress(hLibrary, "libgrpcwrapper_message_setuint64field");
		#else // _WIN32
		pWrapperTable->m_Message_SetUInt64Field = (PLibGRPCWrapperMessage_SetUInt64FieldPtr) dlsym(hLibrary, "libgrpcwrapper_message_setuint64field");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Message_SetUInt64Field == nullptr)
			return LIBGRPCWRAPPER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Message_GetUInt64Field = (PLibGRPCWrapperMessage_GetUInt64FieldPtr) GetProcAddress(hLibrary, "libgrpcwrapper_message_getuint64field");
		#else // _WIN32
		pWrapperTable->m_Message_GetUInt64Field = (PLibGRPCWrapperMessage_GetUInt64FieldPtr) dlsym(hLibrary, "libgrpcwrapper_message_getuint64field");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Message_GetUInt64Field == nullptr)
			return LIBGRPCWRAPPER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Message_SetBoolField = (PLibGRPCWrapperMessage_SetBoolFieldPtr) GetProcAddress(hLibrary, "libgrpcwrapper_message_setboolfield");
		#else // _WIN32
		pWrapperTable->m_Message_SetBoolField = (PLibGRPCWrapperMessage_SetBoolFieldPtr) dlsym(hLibrary, "libgrpcwrapper_message_setboolfield");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Message_SetBoolField == nullptr)
			return LIBGRPCWRAPPER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Message_GetBoolField = (PLibGRPCWrapperMessage_GetBoolFieldPtr) GetProcAddress(hLibrary, "libgrpcwrapper_message_getboolfield");
		#else // _WIN32
		pWrapperTable->m_Message_GetBoolField = (PLibGRPCWrapperMessage_GetBoolFieldPtr) dlsym(hLibrary, "libgrpcwrapper_message_getboolfield");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Message_GetBoolField == nullptr)
			return LIBGRPCWRAPPER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Message_SetFloatField = (PLibGRPCWrapperMessage_SetFloatFieldPtr) GetProcAddress(hLibrary, "libgrpcwrapper_message_setfloatfield");
		#else // _WIN32
		pWrapperTable->m_Message_SetFloatField = (PLibGRPCWrapperMessage_SetFloatFieldPtr) dlsym(hLibrary, "libgrpcwrapper_message_setfloatfield");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Message_SetFloatField == nullptr)
			return LIBGRPCWRAPPER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Message_GetFloatField = (PLibGRPCWrapperMessage_GetFloatFieldPtr) GetProcAddress(hLibrary, "libgrpcwrapper_message_getfloatfield");
		#else // _WIN32
		pWrapperTable->m_Message_GetFloatField = (PLibGRPCWrapperMessage_GetFloatFieldPtr) dlsym(hLibrary, "libgrpcwrapper_message_getfloatfield");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Message_GetFloatField == nullptr)
			return LIBGRPCWRAPPER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Message_SetDoubleField = (PLibGRPCWrapperMessage_SetDoubleFieldPtr) GetProcAddress(hLibrary, "libgrpcwrapper_message_setdoublefield");
		#else // _WIN32
		pWrapperTable->m_Message_SetDoubleField = (PLibGRPCWrapperMessage_SetDoubleFieldPtr) dlsym(hLibrary, "libgrpcwrapper_message_setdoublefield");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Message_SetDoubleField == nullptr)
			return LIBGRPCWRAPPER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Message_GetDoubleField = (PLibGRPCWrapperMessage_GetDoubleFieldPtr) GetProcAddress(hLibrary, "libgrpcwrapper_message_getdoublefield");
		#else // _WIN32
		pWrapperTable->m_Message_GetDoubleField = (PLibGRPCWrapperMessage_GetDoubleFieldPtr) dlsym(hLibrary, "libgrpcwrapper_message_getdoublefield");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Message_GetDoubleField == nullptr)
			return LIBGRPCWRAPPER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Response_GetResponseType = (PLibGRPCWrapperResponse_GetResponseTypePtr) GetProcAddress(hLibrary, "libgrpcwrapper_response_getresponsetype");
		#else // _WIN32
		pWrapperTable->m_Response_GetResponseType = (PLibGRPCWrapperResponse_GetResponseTypePtr) dlsym(hLibrary, "libgrpcwrapper_response_getresponsetype");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Response_GetResponseType == nullptr)
			return LIBGRPCWRAPPER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Request_GetRequestType = (PLibGRPCWrapperRequest_GetRequestTypePtr) GetProcAddress(hLibrary, "libgrpcwrapper_request_getrequesttype");
		#else // _WIN32
		pWrapperTable->m_Request_GetRequestType = (PLibGRPCWrapperRequest_GetRequestTypePtr) dlsym(hLibrary, "libgrpcwrapper_request_getrequesttype");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Request_GetRequestType == nullptr)
			return LIBGRPCWRAPPER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Request_GetExpectedResponseType = (PLibGRPCWrapperRequest_GetExpectedResponseTypePtr) GetProcAddress(hLibrary, "libgrpcwrapper_request_getexpectedresponsetype");
		#else // _WIN32
		pWrapperTable->m_Request_GetExpectedResponseType = (PLibGRPCWrapperRequest_GetExpectedResponseTypePtr) dlsym(hLibrary, "libgrpcwrapper_request_getexpectedresponsetype");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Request_GetExpectedResponseType == nullptr)
			return LIBGRPCWRAPPER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Request_SendBlocking = (PLibGRPCWrapperRequest_SendBlockingPtr) GetProcAddress(hLibrary, "libgrpcwrapper_request_sendblocking");
		#else // _WIN32
		pWrapperTable->m_Request_SendBlocking = (PLibGRPCWrapperRequest_SendBlockingPtr) dlsym(hLibrary, "libgrpcwrapper_request_sendblocking");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Request_SendBlocking == nullptr)
			return LIBGRPCWRAPPER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Connection_GetEndPoint = (PLibGRPCWrapperConnection_GetEndPointPtr) GetProcAddress(hLibrary, "libgrpcwrapper_connection_getendpoint");
		#else // _WIN32
		pWrapperTable->m_Connection_GetEndPoint = (PLibGRPCWrapperConnection_GetEndPointPtr) dlsym(hLibrary, "libgrpcwrapper_connection_getendpoint");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Connection_GetEndPoint == nullptr)
			return LIBGRPCWRAPPER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Connection_Close = (PLibGRPCWrapperConnection_ClosePtr) GetProcAddress(hLibrary, "libgrpcwrapper_connection_close");
		#else // _WIN32
		pWrapperTable->m_Connection_Close = (PLibGRPCWrapperConnection_ClosePtr) dlsym(hLibrary, "libgrpcwrapper_connection_close");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Connection_Close == nullptr)
			return LIBGRPCWRAPPER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Connection_CreateStaticRequest = (PLibGRPCWrapperConnection_CreateStaticRequestPtr) GetProcAddress(hLibrary, "libgrpcwrapper_connection_createstaticrequest");
		#else // _WIN32
		pWrapperTable->m_Connection_CreateStaticRequest = (PLibGRPCWrapperConnection_CreateStaticRequestPtr) dlsym(hLibrary, "libgrpcwrapper_connection_createstaticrequest");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Connection_CreateStaticRequest == nullptr)
			return LIBGRPCWRAPPER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Protocol_ConnectUnsecure = (PLibGRPCWrapperProtocol_ConnectUnsecurePtr) GetProcAddress(hLibrary, "libgrpcwrapper_protocol_connectunsecure");
		#else // _WIN32
		pWrapperTable->m_Protocol_ConnectUnsecure = (PLibGRPCWrapperProtocol_ConnectUnsecurePtr) dlsym(hLibrary, "libgrpcwrapper_protocol_connectunsecure");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Protocol_ConnectUnsecure == nullptr)
			return LIBGRPCWRAPPER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Protocol_GetProtobufDefinition = (PLibGRPCWrapperProtocol_GetProtobufDefinitionPtr) GetProcAddress(hLibrary, "libgrpcwrapper_protocol_getprotobufdefinition");
		#else // _WIN32
		pWrapperTable->m_Protocol_GetProtobufDefinition = (PLibGRPCWrapperProtocol_GetProtobufDefinitionPtr) dlsym(hLibrary, "libgrpcwrapper_protocol_getprotobufdefinition");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Protocol_GetProtobufDefinition == nullptr)
			return LIBGRPCWRAPPER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Protocol_HasMessageType = (PLibGRPCWrapperProtocol_HasMessageTypePtr) GetProcAddress(hLibrary, "libgrpcwrapper_protocol_hasmessagetype");
		#else // _WIN32
		pWrapperTable->m_Protocol_HasMessageType = (PLibGRPCWrapperProtocol_HasMessageTypePtr) dlsym(hLibrary, "libgrpcwrapper_protocol_hasmessagetype");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Protocol_HasMessageType == nullptr)
			return LIBGRPCWRAPPER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GetVersion = (PLibGRPCWrapperGetVersionPtr) GetProcAddress(hLibrary, "libgrpcwrapper_getversion");
		#else // _WIN32
		pWrapperTable->m_GetVersion = (PLibGRPCWrapperGetVersionPtr) dlsym(hLibrary, "libgrpcwrapper_getversion");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GetVersion == nullptr)
			return LIBGRPCWRAPPER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GetLastError = (PLibGRPCWrapperGetLastErrorPtr) GetProcAddress(hLibrary, "libgrpcwrapper_getlasterror");
		#else // _WIN32
		pWrapperTable->m_GetLastError = (PLibGRPCWrapperGetLastErrorPtr) dlsym(hLibrary, "libgrpcwrapper_getlasterror");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GetLastError == nullptr)
			return LIBGRPCWRAPPER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_AcquireInstance = (PLibGRPCWrapperAcquireInstancePtr) GetProcAddress(hLibrary, "libgrpcwrapper_acquireinstance");
		#else // _WIN32
		pWrapperTable->m_AcquireInstance = (PLibGRPCWrapperAcquireInstancePtr) dlsym(hLibrary, "libgrpcwrapper_acquireinstance");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_AcquireInstance == nullptr)
			return LIBGRPCWRAPPER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ReleaseInstance = (PLibGRPCWrapperReleaseInstancePtr) GetProcAddress(hLibrary, "libgrpcwrapper_releaseinstance");
		#else // _WIN32
		pWrapperTable->m_ReleaseInstance = (PLibGRPCWrapperReleaseInstancePtr) dlsym(hLibrary, "libgrpcwrapper_releaseinstance");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ReleaseInstance == nullptr)
			return LIBGRPCWRAPPER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GetSymbolLookupMethod = (PLibGRPCWrapperGetSymbolLookupMethodPtr) GetProcAddress(hLibrary, "libgrpcwrapper_getsymbollookupmethod");
		#else // _WIN32
		pWrapperTable->m_GetSymbolLookupMethod = (PLibGRPCWrapperGetSymbolLookupMethodPtr) dlsym(hLibrary, "libgrpcwrapper_getsymbollookupmethod");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GetSymbolLookupMethod == nullptr)
			return LIBGRPCWRAPPER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_CreateProtocol = (PLibGRPCWrapperCreateProtocolPtr) GetProcAddress(hLibrary, "libgrpcwrapper_createprotocol");
		#else // _WIN32
		pWrapperTable->m_CreateProtocol = (PLibGRPCWrapperCreateProtocolPtr) dlsym(hLibrary, "libgrpcwrapper_createprotocol");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_CreateProtocol == nullptr)
			return LIBGRPCWRAPPER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		pWrapperTable->m_LibraryHandle = hLibrary;
		return LIBGRPCWRAPPER_SUCCESS;
	}

	inline LibGRPCWrapperResult CWrapper::loadWrapperTableFromSymbolLookupMethod(sLibGRPCWrapperDynamicWrapperTable * pWrapperTable, void* pSymbolLookupMethod)
{
		if (pWrapperTable == nullptr)
			return LIBGRPCWRAPPER_ERROR_INVALIDPARAM;
		if (pSymbolLookupMethod == nullptr)
			return LIBGRPCWRAPPER_ERROR_INVALIDPARAM;
		
		typedef LibGRPCWrapperResult(*SymbolLookupType)(const char*, void**);
		
		SymbolLookupType pLookup = (SymbolLookupType)pSymbolLookupMethod;
		
		LibGRPCWrapperResult eLookupError = LIBGRPCWRAPPER_SUCCESS;
		eLookupError = (*pLookup)("libgrpcwrapper_message_hasfield", (void**)&(pWrapperTable->m_Message_HasField));
		if ( (eLookupError != 0) || (pWrapperTable->m_Message_HasField == nullptr) )
			return LIBGRPCWRAPPER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libgrpcwrapper_message_hasstringfield", (void**)&(pWrapperTable->m_Message_HasStringField));
		if ( (eLookupError != 0) || (pWrapperTable->m_Message_HasStringField == nullptr) )
			return LIBGRPCWRAPPER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libgrpcwrapper_message_setstringfield", (void**)&(pWrapperTable->m_Message_SetStringField));
		if ( (eLookupError != 0) || (pWrapperTable->m_Message_SetStringField == nullptr) )
			return LIBGRPCWRAPPER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libgrpcwrapper_message_getstringfield", (void**)&(pWrapperTable->m_Message_GetStringField));
		if ( (eLookupError != 0) || (pWrapperTable->m_Message_GetStringField == nullptr) )
			return LIBGRPCWRAPPER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libgrpcwrapper_message_setint32field", (void**)&(pWrapperTable->m_Message_SetInt32Field));
		if ( (eLookupError != 0) || (pWrapperTable->m_Message_SetInt32Field == nullptr) )
			return LIBGRPCWRAPPER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libgrpcwrapper_message_getint32field", (void**)&(pWrapperTable->m_Message_GetInt32Field));
		if ( (eLookupError != 0) || (pWrapperTable->m_Message_GetInt32Field == nullptr) )
			return LIBGRPCWRAPPER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libgrpcwrapper_message_setuint32field", (void**)&(pWrapperTable->m_Message_SetUInt32Field));
		if ( (eLookupError != 0) || (pWrapperTable->m_Message_SetUInt32Field == nullptr) )
			return LIBGRPCWRAPPER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libgrpcwrapper_message_getuint32field", (void**)&(pWrapperTable->m_Message_GetUInt32Field));
		if ( (eLookupError != 0) || (pWrapperTable->m_Message_GetUInt32Field == nullptr) )
			return LIBGRPCWRAPPER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libgrpcwrapper_message_setint64field", (void**)&(pWrapperTable->m_Message_SetInt64Field));
		if ( (eLookupError != 0) || (pWrapperTable->m_Message_SetInt64Field == nullptr) )
			return LIBGRPCWRAPPER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libgrpcwrapper_message_getint64field", (void**)&(pWrapperTable->m_Message_GetInt64Field));
		if ( (eLookupError != 0) || (pWrapperTable->m_Message_GetInt64Field == nullptr) )
			return LIBGRPCWRAPPER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libgrpcwrapper_message_setuint64field", (void**)&(pWrapperTable->m_Message_SetUInt64Field));
		if ( (eLookupError != 0) || (pWrapperTable->m_Message_SetUInt64Field == nullptr) )
			return LIBGRPCWRAPPER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libgrpcwrapper_message_getuint64field", (void**)&(pWrapperTable->m_Message_GetUInt64Field));
		if ( (eLookupError != 0) || (pWrapperTable->m_Message_GetUInt64Field == nullptr) )
			return LIBGRPCWRAPPER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libgrpcwrapper_message_setboolfield", (void**)&(pWrapperTable->m_Message_SetBoolField));
		if ( (eLookupError != 0) || (pWrapperTable->m_Message_SetBoolField == nullptr) )
			return LIBGRPCWRAPPER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libgrpcwrapper_message_getboolfield", (void**)&(pWrapperTable->m_Message_GetBoolField));
		if ( (eLookupError != 0) || (pWrapperTable->m_Message_GetBoolField == nullptr) )
			return LIBGRPCWRAPPER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libgrpcwrapper_message_setfloatfield", (void**)&(pWrapperTable->m_Message_SetFloatField));
		if ( (eLookupError != 0) || (pWrapperTable->m_Message_SetFloatField == nullptr) )
			return LIBGRPCWRAPPER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libgrpcwrapper_message_getfloatfield", (void**)&(pWrapperTable->m_Message_GetFloatField));
		if ( (eLookupError != 0) || (pWrapperTable->m_Message_GetFloatField == nullptr) )
			return LIBGRPCWRAPPER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libgrpcwrapper_message_setdoublefield", (void**)&(pWrapperTable->m_Message_SetDoubleField));
		if ( (eLookupError != 0) || (pWrapperTable->m_Message_SetDoubleField == nullptr) )
			return LIBGRPCWRAPPER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libgrpcwrapper_message_getdoublefield", (void**)&(pWrapperTable->m_Message_GetDoubleField));
		if ( (eLookupError != 0) || (pWrapperTable->m_Message_GetDoubleField == nullptr) )
			return LIBGRPCWRAPPER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libgrpcwrapper_response_getresponsetype", (void**)&(pWrapperTable->m_Response_GetResponseType));
		if ( (eLookupError != 0) || (pWrapperTable->m_Response_GetResponseType == nullptr) )
			return LIBGRPCWRAPPER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libgrpcwrapper_request_getrequesttype", (void**)&(pWrapperTable->m_Request_GetRequestType));
		if ( (eLookupError != 0) || (pWrapperTable->m_Request_GetRequestType == nullptr) )
			return LIBGRPCWRAPPER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libgrpcwrapper_request_getexpectedresponsetype", (void**)&(pWrapperTable->m_Request_GetExpectedResponseType));
		if ( (eLookupError != 0) || (pWrapperTable->m_Request_GetExpectedResponseType == nullptr) )
			return LIBGRPCWRAPPER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libgrpcwrapper_request_sendblocking", (void**)&(pWrapperTable->m_Request_SendBlocking));
		if ( (eLookupError != 0) || (pWrapperTable->m_Request_SendBlocking == nullptr) )
			return LIBGRPCWRAPPER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libgrpcwrapper_connection_getendpoint", (void**)&(pWrapperTable->m_Connection_GetEndPoint));
		if ( (eLookupError != 0) || (pWrapperTable->m_Connection_GetEndPoint == nullptr) )
			return LIBGRPCWRAPPER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libgrpcwrapper_connection_close", (void**)&(pWrapperTable->m_Connection_Close));
		if ( (eLookupError != 0) || (pWrapperTable->m_Connection_Close == nullptr) )
			return LIBGRPCWRAPPER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libgrpcwrapper_connection_createstaticrequest", (void**)&(pWrapperTable->m_Connection_CreateStaticRequest));
		if ( (eLookupError != 0) || (pWrapperTable->m_Connection_CreateStaticRequest == nullptr) )
			return LIBGRPCWRAPPER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libgrpcwrapper_protocol_connectunsecure", (void**)&(pWrapperTable->m_Protocol_ConnectUnsecure));
		if ( (eLookupError != 0) || (pWrapperTable->m_Protocol_ConnectUnsecure == nullptr) )
			return LIBGRPCWRAPPER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libgrpcwrapper_protocol_getprotobufdefinition", (void**)&(pWrapperTable->m_Protocol_GetProtobufDefinition));
		if ( (eLookupError != 0) || (pWrapperTable->m_Protocol_GetProtobufDefinition == nullptr) )
			return LIBGRPCWRAPPER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libgrpcwrapper_protocol_hasmessagetype", (void**)&(pWrapperTable->m_Protocol_HasMessageType));
		if ( (eLookupError != 0) || (pWrapperTable->m_Protocol_HasMessageType == nullptr) )
			return LIBGRPCWRAPPER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libgrpcwrapper_getversion", (void**)&(pWrapperTable->m_GetVersion));
		if ( (eLookupError != 0) || (pWrapperTable->m_GetVersion == nullptr) )
			return LIBGRPCWRAPPER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libgrpcwrapper_getlasterror", (void**)&(pWrapperTable->m_GetLastError));
		if ( (eLookupError != 0) || (pWrapperTable->m_GetLastError == nullptr) )
			return LIBGRPCWRAPPER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libgrpcwrapper_acquireinstance", (void**)&(pWrapperTable->m_AcquireInstance));
		if ( (eLookupError != 0) || (pWrapperTable->m_AcquireInstance == nullptr) )
			return LIBGRPCWRAPPER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libgrpcwrapper_releaseinstance", (void**)&(pWrapperTable->m_ReleaseInstance));
		if ( (eLookupError != 0) || (pWrapperTable->m_ReleaseInstance == nullptr) )
			return LIBGRPCWRAPPER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libgrpcwrapper_getsymbollookupmethod", (void**)&(pWrapperTable->m_GetSymbolLookupMethod));
		if ( (eLookupError != 0) || (pWrapperTable->m_GetSymbolLookupMethod == nullptr) )
			return LIBGRPCWRAPPER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libgrpcwrapper_createprotocol", (void**)&(pWrapperTable->m_CreateProtocol));
		if ( (eLookupError != 0) || (pWrapperTable->m_CreateProtocol == nullptr) )
			return LIBGRPCWRAPPER_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		return LIBGRPCWRAPPER_SUCCESS;
}

	
	
	/**
	 * Method definitions for class CBase
	 */
	
	/**
	 * Method definitions for class CMessage
	 */
	
	/**
	* CMessage::HasField - Returns if the message has a field of a certain name.
	* @param[in] sFieldName - Name of the field.
	* @return True if field exists.
	*/
	bool CMessage::HasField(const std::string & sFieldName)
	{
		bool resultFieldExists = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Message_HasField(m_pHandle, sFieldName.c_str(), &resultFieldExists));
		
		return resultFieldExists;
	}
	
	/**
	* CMessage::HasStringField - Returns if the message has a field of a certain name and this field is a string field.
	* @param[in] sFieldName - Name of the field.
	* @return True if field exists and is of type string.
	*/
	bool CMessage::HasStringField(const std::string & sFieldName)
	{
		bool resultStringFieldExists = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Message_HasStringField(m_pHandle, sFieldName.c_str(), &resultStringFieldExists));
		
		return resultStringFieldExists;
	}
	
	/**
	* CMessage::SetStringField - Sets a string field of the message. Fails if the field does not exist or is not a string field.
	* @param[in] sFieldName - Name of the field.
	* @param[in] sValue - New value of the field.
	*/
	void CMessage::SetStringField(const std::string & sFieldName, const std::string & sValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Message_SetStringField(m_pHandle, sFieldName.c_str(), sValue.c_str()));
	}
	
	/**
	* CMessage::GetStringField - Gets a string field of the message. Fails if the field does not exist or is not a string field.
	* @param[in] sFieldName - Name of the field.
	* @return Current value of the field.
	*/
	std::string CMessage::GetStringField(const std::string & sFieldName)
	{
		LibGRPCWrapper_uint32 bytesNeededValue = 0;
		LibGRPCWrapper_uint32 bytesWrittenValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Message_GetStringField(m_pHandle, sFieldName.c_str(), 0, &bytesNeededValue, nullptr));
		std::vector<char> bufferValue(bytesNeededValue);
		CheckError(m_pWrapper->m_WrapperTable.m_Message_GetStringField(m_pHandle, sFieldName.c_str(), bytesNeededValue, &bytesWrittenValue, &bufferValue[0]));
		
		return std::string(&bufferValue[0]);
	}
	
	/**
	* CMessage::SetInt32Field - Sets a int32 field of the message. Fails if the field does not exist or is not a int32 field.
	* @param[in] sFieldName - Name of the field.
	* @param[in] nValue - New value of the field.
	*/
	void CMessage::SetInt32Field(const std::string & sFieldName, const LibGRPCWrapper_int32 nValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Message_SetInt32Field(m_pHandle, sFieldName.c_str(), nValue));
	}
	
	/**
	* CMessage::GetInt32Field - Gets a int32 field of the message. Fails if the field does not exist or is not a int32 field.
	* @param[in] sFieldName - Name of the field.
	* @return Current value of the field.
	*/
	LibGRPCWrapper_int32 CMessage::GetInt32Field(const std::string & sFieldName)
	{
		LibGRPCWrapper_int32 resultValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Message_GetInt32Field(m_pHandle, sFieldName.c_str(), &resultValue));
		
		return resultValue;
	}
	
	/**
	* CMessage::SetUInt32Field - Sets a uint32 field of the message. Fails if the field does not exist or is not a uint32 field.
	* @param[in] sFieldName - Name of the field.
	* @param[in] nValue - New value of the field.
	*/
	void CMessage::SetUInt32Field(const std::string & sFieldName, const LibGRPCWrapper_uint32 nValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Message_SetUInt32Field(m_pHandle, sFieldName.c_str(), nValue));
	}
	
	/**
	* CMessage::GetUInt32Field - Gets a uint32 field of the message. Fails if the field does not exist or is not a uint32 field.
	* @param[in] sFieldName - Name of the field.
	* @return Current value of the field.
	*/
	LibGRPCWrapper_uint32 CMessage::GetUInt32Field(const std::string & sFieldName)
	{
		LibGRPCWrapper_uint32 resultValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Message_GetUInt32Field(m_pHandle, sFieldName.c_str(), &resultValue));
		
		return resultValue;
	}
	
	/**
	* CMessage::SetInt64Field - Sets a int64 field of the message. Fails if the field does not exist or is not a int64 field.
	* @param[in] sFieldName - Name of the field.
	* @param[in] nValue - New value of the field.
	*/
	void CMessage::SetInt64Field(const std::string & sFieldName, const LibGRPCWrapper_int64 nValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Message_SetInt64Field(m_pHandle, sFieldName.c_str(), nValue));
	}
	
	/**
	* CMessage::GetInt64Field - Gets a int64 field of the message. Fails if the field does not exist or is not a int64 field.
	* @param[in] sFieldName - Name of the field.
	* @return Current value of the field.
	*/
	LibGRPCWrapper_int64 CMessage::GetInt64Field(const std::string & sFieldName)
	{
		LibGRPCWrapper_int64 resultValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Message_GetInt64Field(m_pHandle, sFieldName.c_str(), &resultValue));
		
		return resultValue;
	}
	
	/**
	* CMessage::SetUInt64Field - Sets a uint64 field of the message. Fails if the field does not exist or is not a uint64 field.
	* @param[in] sFieldName - Name of the field.
	* @param[in] nValue - New value of the field.
	*/
	void CMessage::SetUInt64Field(const std::string & sFieldName, const LibGRPCWrapper_uint64 nValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Message_SetUInt64Field(m_pHandle, sFieldName.c_str(), nValue));
	}
	
	/**
	* CMessage::GetUInt64Field - Gets a uint64 field of the message. Fails if the field does not exist or is not a uint64 field.
	* @param[in] sFieldName - Name of the field.
	* @return Current value of the field.
	*/
	LibGRPCWrapper_uint64 CMessage::GetUInt64Field(const std::string & sFieldName)
	{
		LibGRPCWrapper_uint64 resultValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Message_GetUInt64Field(m_pHandle, sFieldName.c_str(), &resultValue));
		
		return resultValue;
	}
	
	/**
	* CMessage::SetBoolField - Sets a bool field of the message. Fails if the field does not exist or is not a bool field.
	* @param[in] sFieldName - Name of the field.
	* @param[in] bValue - New value of the field.
	*/
	void CMessage::SetBoolField(const std::string & sFieldName, const bool bValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Message_SetBoolField(m_pHandle, sFieldName.c_str(), bValue));
	}
	
	/**
	* CMessage::GetBoolField - Gets a bool field of the message. Fails if the field does not exist or is not a bool field.
	* @param[in] sFieldName - Name of the field.
	* @return Current value of the field.
	*/
	bool CMessage::GetBoolField(const std::string & sFieldName)
	{
		bool resultValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Message_GetBoolField(m_pHandle, sFieldName.c_str(), &resultValue));
		
		return resultValue;
	}
	
	/**
	* CMessage::SetFloatField - Sets a float field of the message. Fails if the field does not exist or is not a float field.
	* @param[in] sFieldName - Name of the field.
	* @param[in] fValue - New value of the field.
	*/
	void CMessage::SetFloatField(const std::string & sFieldName, const LibGRPCWrapper_single fValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Message_SetFloatField(m_pHandle, sFieldName.c_str(), fValue));
	}
	
	/**
	* CMessage::GetFloatField - Gets a float field of the message. Fails if the field does not exist or is not a float field.
	* @param[in] sFieldName - Name of the field.
	* @return Current value of the field.
	*/
	LibGRPCWrapper_single CMessage::GetFloatField(const std::string & sFieldName)
	{
		LibGRPCWrapper_single resultValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Message_GetFloatField(m_pHandle, sFieldName.c_str(), &resultValue));
		
		return resultValue;
	}
	
	/**
	* CMessage::SetDoubleField - Sets a double field of the message. Fails if the field does not exist or is not a double field.
	* @param[in] sFieldName - Name of the field.
	* @param[in] dValue - New value of the field.
	*/
	void CMessage::SetDoubleField(const std::string & sFieldName, const LibGRPCWrapper_double dValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Message_SetDoubleField(m_pHandle, sFieldName.c_str(), dValue));
	}
	
	/**
	* CMessage::GetDoubleField - Gets a double field of the message. Fails if the field does not exist or is not a double field.
	* @param[in] sFieldName - Name of the field.
	* @return Current value of the field.
	*/
	LibGRPCWrapper_int32 CMessage::GetDoubleField(const std::string & sFieldName)
	{
		LibGRPCWrapper_int32 resultValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Message_GetDoubleField(m_pHandle, sFieldName.c_str(), &resultValue));
		
		return resultValue;
	}
	
	/**
	 * Method definitions for class CResponse
	 */
	
	/**
	* CResponse::GetResponseType - Returns the response type of the connection.
	* @return Message type identifier.
	*/
	std::string CResponse::GetResponseType()
	{
		LibGRPCWrapper_uint32 bytesNeededResponseType = 0;
		LibGRPCWrapper_uint32 bytesWrittenResponseType = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Response_GetResponseType(m_pHandle, 0, &bytesNeededResponseType, nullptr));
		std::vector<char> bufferResponseType(bytesNeededResponseType);
		CheckError(m_pWrapper->m_WrapperTable.m_Response_GetResponseType(m_pHandle, bytesNeededResponseType, &bytesWrittenResponseType, &bufferResponseType[0]));
		
		return std::string(&bufferResponseType[0]);
	}
	
	/**
	 * Method definitions for class CRequest
	 */
	
	/**
	* CRequest::GetRequestType - Returns the request type of the connection.
	* @return Message type identifier.
	*/
	std::string CRequest::GetRequestType()
	{
		LibGRPCWrapper_uint32 bytesNeededRequestType = 0;
		LibGRPCWrapper_uint32 bytesWrittenRequestType = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Request_GetRequestType(m_pHandle, 0, &bytesNeededRequestType, nullptr));
		std::vector<char> bufferRequestType(bytesNeededRequestType);
		CheckError(m_pWrapper->m_WrapperTable.m_Request_GetRequestType(m_pHandle, bytesNeededRequestType, &bytesWrittenRequestType, &bufferRequestType[0]));
		
		return std::string(&bufferRequestType[0]);
	}
	
	/**
	* CRequest::GetExpectedResponseType - Returns the expected response type of the connection.
	* @return Message type identifier.
	*/
	std::string CRequest::GetExpectedResponseType()
	{
		LibGRPCWrapper_uint32 bytesNeededExpectedResponseType = 0;
		LibGRPCWrapper_uint32 bytesWrittenExpectedResponseType = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Request_GetExpectedResponseType(m_pHandle, 0, &bytesNeededExpectedResponseType, nullptr));
		std::vector<char> bufferExpectedResponseType(bytesNeededExpectedResponseType);
		CheckError(m_pWrapper->m_WrapperTable.m_Request_GetExpectedResponseType(m_pHandle, bytesNeededExpectedResponseType, &bytesWrittenExpectedResponseType, &bufferExpectedResponseType[0]));
		
		return std::string(&bufferExpectedResponseType[0]);
	}
	
	/**
	* CRequest::SendBlocking - Sends the request to the end point and waits for a response.
	* @param[in] sServiceMethod - Service method to call.
	* @param[in] nTimeOutInMS - Timeout for the response in MS.
	* @return Response Instance
	*/
	PResponse CRequest::SendBlocking(const std::string & sServiceMethod, const LibGRPCWrapper_uint32 nTimeOutInMS)
	{
		LibGRPCWrapperHandle hResponseInstance = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_Request_SendBlocking(m_pHandle, sServiceMethod.c_str(), nTimeOutInMS, &hResponseInstance));
		
		if (!hResponseInstance) {
			CheckError(LIBGRPCWRAPPER_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CResponse>(m_pWrapper, hResponseInstance);
	}
	
	/**
	 * Method definitions for class CConnection
	 */
	
	/**
	* CConnection::GetEndPoint - Returns the end point of the connection.
	* @return End point of the connection.
	*/
	std::string CConnection::GetEndPoint()
	{
		LibGRPCWrapper_uint32 bytesNeededEndPoint = 0;
		LibGRPCWrapper_uint32 bytesWrittenEndPoint = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Connection_GetEndPoint(m_pHandle, 0, &bytesNeededEndPoint, nullptr));
		std::vector<char> bufferEndPoint(bytesNeededEndPoint);
		CheckError(m_pWrapper->m_WrapperTable.m_Connection_GetEndPoint(m_pHandle, bytesNeededEndPoint, &bytesWrittenEndPoint, &bufferEndPoint[0]));
		
		return std::string(&bufferEndPoint[0]);
	}
	
	/**
	* CConnection::Close - Closes the connection. All subsequent calls to the connection will fail.
	*/
	void CConnection::Close()
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Connection_Close(m_pHandle));
	}
	
	/**
	* CConnection::CreateStaticRequest - Creates a message request to the end point.
	* @param[in] sRequestTypeIdentifier - Message Type Identifier of the request.
	* @param[in] sResponseTypeIdentifier - Message Type Identifier of the expected response.
	* @return Request Instance
	*/
	PRequest CConnection::CreateStaticRequest(const std::string & sRequestTypeIdentifier, const std::string & sResponseTypeIdentifier)
	{
		LibGRPCWrapperHandle hRequestInstance = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_Connection_CreateStaticRequest(m_pHandle, sRequestTypeIdentifier.c_str(), sResponseTypeIdentifier.c_str(), &hRequestInstance));
		
		if (!hRequestInstance) {
			CheckError(LIBGRPCWRAPPER_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CRequest>(m_pWrapper, hRequestInstance);
	}
	
	/**
	 * Method definitions for class CProtocol
	 */
	
	/**
	* CProtocol::ConnectUnsecure - Connects to an end point
	* @param[in] sNetworkCredentials - Host to connect to
	* @return Connection Instance
	*/
	PConnection CProtocol::ConnectUnsecure(const std::string & sNetworkCredentials)
	{
		LibGRPCWrapperHandle hConnectionInstance = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_Protocol_ConnectUnsecure(m_pHandle, sNetworkCredentials.c_str(), &hConnectionInstance));
		
		if (!hConnectionInstance) {
			CheckError(LIBGRPCWRAPPER_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CConnection>(m_pWrapper, hConnectionInstance);
	}
	
	/**
	* CProtocol::GetProtobufDefinition - Returns protobuf definition as string.
	* @return Protobuf file as string.
	*/
	std::string CProtocol::GetProtobufDefinition()
	{
		LibGRPCWrapper_uint32 bytesNeededProtobufDefinition = 0;
		LibGRPCWrapper_uint32 bytesWrittenProtobufDefinition = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Protocol_GetProtobufDefinition(m_pHandle, 0, &bytesNeededProtobufDefinition, nullptr));
		std::vector<char> bufferProtobufDefinition(bytesNeededProtobufDefinition);
		CheckError(m_pWrapper->m_WrapperTable.m_Protocol_GetProtobufDefinition(m_pHandle, bytesNeededProtobufDefinition, &bytesWrittenProtobufDefinition, &bufferProtobufDefinition[0]));
		
		return std::string(&bufferProtobufDefinition[0]);
	}
	
	/**
	* CProtocol::HasMessageType - Returns if protocol buffer has a certain message type.
	* @param[in] sMessageTypeIdentifier - Message Type Identifier.
	* @return Returns if message type exists.
	*/
	bool CProtocol::HasMessageType(const std::string & sMessageTypeIdentifier)
	{
		bool resultExists = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Protocol_HasMessageType(m_pHandle, sMessageTypeIdentifier.c_str(), &resultExists));
		
		return resultExists;
	}

} // namespace LibGRPCWrapper

#endif // __LIBGRPCWRAPPER_CPPHEADER_DYNAMIC_CPP

