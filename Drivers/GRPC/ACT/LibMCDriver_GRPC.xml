<?xml version="1.0" encoding="UTF-8"?>
<component xmlns="http://schemas.autodesk.com/netfabb/automaticcomponenttoolkit/2018" 
	libraryname="MC Driver GRPC" namespace="LibMCDriver_GRPC" copyright="Autodesk Inc." year="2023" basename="libmcdriver_grpc"
	version="2.0.0">
	<license>
		<line value="All rights reserved." />
		<line value="" />
		<line value="Redistribution and use in source and binary forms, with or without" />
		<line value="modification, are permitted provided that the following conditions are met:" />
		<line value="    * Redistributions of source code must retain the above copyright" />
		<line value="      notice, this list of conditions and the following disclaimer." />
		<line value="    * Redistributions in binary form must reproduce the above copyright" />
		<line value="      notice, this list of conditions and the following disclaimer in the" />
		<line value="      documentation and/or other materials provided with the distribution." />
		<line value="    * Neither the name of the Autodesk Inc. nor the" />
		<line value="      names of its contributors may be used to endorse or promote products" />
		<line value="      derived from this software without specific prior written permission." />
		<line value="" />
		<line value="THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND" />
		<line value="ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED" />
		<line value="WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE" />
		<line value="DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY" />
		<line value="DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES" />
		<line value="(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;" />
		<line value="LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND" />
		<line value="ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT" />
		<line value="(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS" />
		<line value="SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." />
		<line value="" />
	</license>
	
	<bindings>
		<binding language="CppDynamic" indentation="tabs" documentation="1" />
	</bindings>
	<implementations>
		<implementation language="Cpp" indentation="tabs"/>
	</implementations>
	
	
	<importcomponent uri="../../../ACT/LibMCEnv.xml" namespace="LibMCEnv"/>
	
	<errors>
		<error name="NOTIMPLEMENTED" code="1001" description="functionality not implemented" />
		<error name="INVALIDPARAM" code="1002" description="an invalid parameter was passed" />
		<error name="INVALIDCAST" code="1003" description="a type cast failed" />
		<error name="BUFFERTOOSMALL" code="1004" description="a provided buffer is too small" />
		<error name="GENERICEXCEPTION" code="1005" description="a generic exception occurred" />
		<error name="COULDNOTLOADLIBRARY" code="1006" description="the library could not be loaded" />
		<error name="COULDNOTFINDLIBRARYEXPORT" code="1007" description="a required exported symbol could not be found in the library" />
		<error name="INCOMPATIBLEBINARYVERSION" code="1008" description="the version of the binary interface does not match the bindings interface" />
		<error name="DRIVERERROR" code="1009" description="a driver error occured" />
		<error name="DRIVERNOTINITIALISED" code="1010" description="the driver is not initialised" />
		<error name="DRIVERNOTCONNECTED" code="1011" description="the driver is not connected" />
		<error name="COULDNOTLOADGRPCWRAPPER" code="1012" description="Could not load grpc wrapper" />
		<error name="DRIVERTYPENOTSUPPORTED" code="1013" description="the driver type is not supported" />
		<error name="EMPTYCONNECTIONIDENTIFIER" code="1014" description="Empty connection identifier" />
		<error name="INVALIDCONNECTIONIDENTIFIER" code="1015" description="Invalid connection identifier" />
		<error name="GRPCWRAPPERNOTLOADED" code="1016" description="GRPC Wrapper not loaded" />
		<error name="COULDNOTFINDCONNECTIONIDENTIFIER" code="1017" description="Could not find connection identifier" />
		<error name="DUPLICATECONNECTIONIDENTIFIER" code="1018" description="Duplicate connection identifier" />
		<error name="COULDNOTCASTTOGRPCREQUEST" code="1019" description="Could not cast to GRPC Request" />
		<error name="COULDNOTCASTTOGRPCRESPONSE" code="1020" description="Could not cast to GRPC Response" />
		
		
	</errors>

	
<!--

This base Driver interface MUST be in Sync with LibMCDriver.xml

-->
	
	<class name="Base">
	</class>

	
	<class name="Driver" parent="Base" description="An abstract Machine Control Driver">

		<method name="Configure" description = "Configures a driver with its specific configuration data.">
			<param name="ConfigurationString" type="string" pass="in" description="Configuration data of driver." />
		</method>
	
		<method name="GetName" description = "returns the name identifier of the driver">
			<param name="Name" type="string" pass="return" description="Name of the driver." />
		</method>

		<method name="GetType" description = "returns the type identifier of the driver">
			<param name="Type" type="string" pass="return" description="Type of the driver." />
		</method>

		<method name="GetVersion" description = "returns the version identifiers of the driver">
			<param name="Major" type="uint32" pass="out" description="Major version." />
			<param name="Minor" type="uint32" pass="out" description="Minor version." />
			<param name="Micro" type="uint32" pass="out" description="Micro version." />
			<param name="Build" type="string" pass="out" description="Build identifier." />
		</method>
				
		<method name="QueryParameters" description = "Updates the driver parameters in the driver environment. Should only be called in the driver thread.">
		</method>
		
		<method name="QueryParametersEx" description = "Updates the driver parameters in the driver environment. Might be called out of thread. Implementation MUST be able to handle parallel calls.">
			<param name="DriverUpdateInstance" type="class" class="LibMCEnv:DriverStatusUpdateSession" pass="in" description="Status update instance." />
		</method>
	
	</class>

<!--

End Interface

-->


<!--

Custom implementation

-->

	<class name="GRPCMessage" parent="Base">

		<method name="HasField" description="Returns if the message has a field of a certain name.">
			<param name="FieldName" type="string" pass="in" description="Name of the field." />
			<param name="FieldExists" type="bool" pass="return" description="True if field exists." />
		</method>

		<method name="HasStringField" description="Returns if the message has a field of a certain name and this field is a string field.">
			<param name="FieldName" type="string" pass="in" description="Name of the field." />
			<param name="StringFieldExists" type="bool" pass="return" description="True if field exists and is of type string." />
		</method>

		<method name="SetStringField" description="Sets a string field of the message. Fails if the field does not exist or is not a string field.">
			<param name="FieldName" type="string" pass="in" description="Name of the field." />
			<param name="Value" type="string" pass="in" description="New value of the field." />
		</method>

		<method name="GetStringField" description="Gets a string field of the message. Fails if the field does not exist or is not a string field.">
			<param name="FieldName" type="string" pass="in" description="Name of the field." />
			<param name="Value" type="string" pass="return" description="Current value of the field." />
		</method>

		<method name="SetInt32Field" description="Sets a int32 field of the message. Fails if the field does not exist or is not a int32 field.">
			<param name="FieldName" type="string" pass="in" description="Name of the field." />
			<param name="Value" type="int32" pass="in" description="New value of the field." />
		</method>

		<method name="GetInt32Field" description="Gets a int32 field of the message. Fails if the field does not exist or is not a int32 field.">
			<param name="FieldName" type="string" pass="in" description="Name of the field." />
			<param name="Value" type="int32" pass="return" description="Current value of the field." />
		</method>

		<method name="SetUInt32Field" description="Sets a uint32 field of the message. Fails if the field does not exist or is not a uint32 field.">
			<param name="FieldName" type="string" pass="in" description="Name of the field." />
			<param name="Value" type="uint32" pass="in" description="New value of the field." />
		</method>

		<method name="GetUInt32Field" description="Gets a uint32 field of the message. Fails if the field does not exist or is not a uint32 field.">
			<param name="FieldName" type="string" pass="in" description="Name of the field." />
			<param name="Value" type="uint32" pass="return" description="Current value of the field." />
		</method>
		
		<method name="SetInt64Field" description="Sets a int64 field of the message. Fails if the field does not exist or is not a int64 field.">
			<param name="FieldName" type="string" pass="in" description="Name of the field." />
			<param name="Value" type="int64" pass="in" description="New value of the field." />
		</method>

		<method name="GetInt64Field" description="Gets a int64 field of the message. Fails if the field does not exist or is not a int64 field.">
			<param name="FieldName" type="string" pass="in" description="Name of the field." />
			<param name="Value" type="int64" pass="return" description="Current value of the field." />
		</method>

		<method name="SetUInt64Field" description="Sets a uint64 field of the message. Fails if the field does not exist or is not a uint64 field.">
			<param name="FieldName" type="string" pass="in" description="Name of the field." />
			<param name="Value" type="uint64" pass="in" description="New value of the field." />
		</method>

		<method name="GetUInt64Field" description="Gets a uint64 field of the message. Fails if the field does not exist or is not a uint64 field.">
			<param name="FieldName" type="string" pass="in" description="Name of the field." />
			<param name="Value" type="uint64" pass="return" description="Current value of the field." />
		</method>

		<method name="SetBoolField" description="Sets a bool field of the message. Fails if the field does not exist or is not a bool field.">
			<param name="FieldName" type="string" pass="in" description="Name of the field." />
			<param name="Value" type="bool" pass="in" description="New value of the field." />
		</method>

		<method name="GetBoolField" description="Gets a bool field of the message. Fails if the field does not exist or is not a bool field.">
			<param name="FieldName" type="string" pass="in" description="Name of the field." />
			<param name="Value" type="bool" pass="return" description="Current value of the field." />
		</method>
		
		<method name="SetFloatField" description="Sets a float field of the message. Fails if the field does not exist or is not a float field.">
			<param name="FieldName" type="string" pass="in" description="Name of the field." />
			<param name="Value" type="single" pass="in" description="New value of the field." />
		</method>

		<method name="GetFloatField" description="Gets a float field of the message. Fails if the field does not exist or is not a float field.">
			<param name="FieldName" type="string" pass="in" description="Name of the field." />
			<param name="Value" type="single" pass="return" description="Current value of the field." />
		</method>

		<method name="SetDoubleField" description="Sets a double field of the message. Fails if the field does not exist or is not a double field.">
			<param name="FieldName" type="string" pass="in" description="Name of the field." />
			<param name="Value" type="double" pass="in" description="New value of the field." />
		</method>

		<method name="GetDoubleField" description="Gets a double field of the message. Fails if the field does not exist or is not a double field.">
			<param name="FieldName" type="string" pass="in" description="Name of the field." />
			<param name="Value" type="double" pass="return" description="Current value of the field." />
		</method>

	</class>	

	<class name="GRPCResponse" parent="GRPCMessage">

		<method name="GetResponseType" description="Returns the response type of the connection.">
			<param name="ResponseType" type="string" pass="return" description="Message type identifier." />
		</method>

	</class>	

	<class name="GRPCRequest" parent="GRPCMessage">
		<method name="GetRequestType" description="Returns the request type of the connection.">
			<param name="RequestType" type="string" pass="return" description="Message type identifier." />
		</method>
		
		<method name="GetExpectedResponseType" description="Returns the expected response type of the connection.">
			<param name="ExpectedResponseType" type="string" pass="return" description="Message type identifier." />
		</method>
		
		
		<method name="SendBlocking" description="Sends the request to the end point and waits for a response.">
			<param name="ServiceMethod" type="string" pass="in" description="Service method to call." />
			<param name="TimeOutInMS" type="uint32" pass="in" description="Timeout for the response in MS." />
			<param name="ResponseInstance" type="class" class="GRPCResponse" pass="return" description="Response Instance" />			
		</method>
		
	</class>	

	<class name="GRPCConnection" description="A Connection instance of a GRPC communication end point.">
	
		<method name="GetEndPoint" description="Returns the end point of the connection.">
			<param name="EndPoint" type="string" pass="return" description="End point of the connection." />
		</method>

		<method name="Close" description="Closes the connection. All subsequent calls to the connection will fail.">
		</method>

		<method name="CreateStaticRequest" description="Creates a message request to the end point.">		
			<param name="RequestTypeIdentifier" type="string" pass="in" description="Message Type Identifier of the request." />
			<param name="ResponseTypeIdentifier" type="string" pass="in" description="Message Type Identifier of the expected response." />
			<param name="RequestInstance" type="class" class="GRPCRequest" pass="return" description="Request Instance" />			
		</method>
	
	</class>


	<class name="Driver_GRPC" parent="Driver" description="A Driver for a generic GRPC communication end point.">

		<method name="SetToSimulationMode" description="Turns the driver into a simulation mode.">		
		</method>
		
		<method name="IsSimulationMode" description="Returns if the driver is in simulation mode.">		
			<param name="SimulationModeEnabled" type="bool" pass="return" description="Flag if driver is in simulation mode." />
		</method>	
		
		<method name="ConnectUnsecure" description= "Connects to a GRPC end point.">
			<param name="Identifier" type="string" pass="in" description="Connection Identifier." />
			<param name="NetworkCredentials" type="string" pass="in" description="Network Credentials." />
			<param name="ProtobufDefinition" type="string" pass="in" description="Protobuf definition file." />
			<param name="ConnectionInstance" type="class" class="GRPCConnection" pass="return" description="Connection instance in case of success." />
		</method>

		<method name="FindConnection" description= "Finds a connection with a certain name.">
			<param name="Identifier" type="string" pass="in" description="Connection Identifier." />
			<param name="MustExist" type="bool" pass="in" description="Connection Identifier. If true, the call fails if the connection does not exist." />
			<param name="ConnectionInstance" type="optionalclass" class="GRPCConnection" pass="return" description="Connection instance in case of success. Null if the connection is not found." />
		</method>


	</class>




<!--

End of Custom implementation

-->

		
	<global baseclassname="Base" stringoutclassname="Base" releasemethod="ReleaseInstance" acquiremethod="AcquireInstance" versionmethod="GetVersion" errormethod="GetLastError" injectionmethod="InjectComponent" symbollookupmethod="GetSymbolLookupMethod">
		
		<method name="GetVersion" description = "retrieves the binary version of this library.">
			<param name="Major" type="uint32" pass="out" description="returns the major version of this library" />
			<param name="Minor" type="uint32" pass="out" description="returns the minor version of this library" />
			<param name="Micro" type="uint32" pass="out" description="returns the micro version of this library" />
		</method>
		<method name="GetLastError" description="Returns the last error recorded on this object">
			<param name="Instance" type="class" class="Base" pass="in" description="Instance Handle" />
			<param name="ErrorMessage" type="string" pass="out" description="Message of the last error" />
			<param name="HasError" type="bool" pass="return" description="Is there a last error to query" />
		</method>
		<method name="ReleaseInstance" description="Releases shared ownership of an Instance">
			<param name="Instance" type="class" class="Base" pass="in" description="Instance Handle" />
		</method>
		<method name="AcquireInstance" description="Acquires shared ownership of an Instance">
			<param name="Instance" type="class" class="Base" pass="in" description="Instance Handle" />
		</method>
		<method name="InjectComponent" description="Injects an imported component for usage within this component">
			<param name="NameSpace" type="string" pass="in" description="NameSpace of the injected component" />
			<param name="SymbolAddressMethod" type="pointer" pass="in" description="Address of the SymbolAddressMethod of the injected component" />
		</method>		
		<method name="GetSymbolLookupMethod" description="Returns the address of the SymbolLookupMethod">
			<param name="SymbolLookupMethod" type="pointer" pass="return" description="Address of the SymbolAddressMethod" />
		</method>				
		<method name="CreateDriver" description="Creates a driver instance with a specific name.">
			<param name="Name" type="string" pass="in" description="Name of driver to be created." />
			<param name="Type" type="string" pass="in" description="Type of driver to be created." />
			<param name="DriverEnvironment" type="class" class="LibMCEnv:DriverEnvironment" pass="in" description="Environment of this driver." />
			<param name="Instance" type="optionalclass" class="Driver" pass="return" description="New Driver instance" />
		</method>
		
	</global>
	
	
</component>


