/*++

Copyright (C) 2023 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.8.0-develop.

Abstract: This is an autogenerated C++-Header file in order to allow an easy
 use of MC Driver GRPC

Interface version: 2.0.0

*/

#ifndef __LIBMCDRIVER_GRPC_CPPHEADER_DYNAMIC_CPP
#define __LIBMCDRIVER_GRPC_CPPHEADER_DYNAMIC_CPP

#include "libmcdriver_grpc_types.hpp"
#include "libmcdriver_grpc_dynamic.h"

#include "libmcenv_dynamic.hpp"

#ifdef _WIN32
#include <windows.h>
#else // _WIN32
#include <dlfcn.h>
#endif // _WIN32
#include <string>
#include <memory>
#include <vector>
#include <exception>

namespace LibMCDriver_GRPC {

/*************************************************************************************************************************
 Forward Declaration of all classes
**************************************************************************************************************************/
class CWrapper;
class CBase;
class CDriver;
class CGRPCMessage;
class CGRPCResponse;
class CGRPCRequest;
class CGRPCConnection;
class CDriver_GRPC;

/*************************************************************************************************************************
 Declaration of deprecated class types
**************************************************************************************************************************/
typedef CWrapper CLibMCDriver_GRPCWrapper;
typedef CBase CLibMCDriver_GRPCBase;
typedef CDriver CLibMCDriver_GRPCDriver;
typedef CGRPCMessage CLibMCDriver_GRPCGRPCMessage;
typedef CGRPCResponse CLibMCDriver_GRPCGRPCResponse;
typedef CGRPCRequest CLibMCDriver_GRPCGRPCRequest;
typedef CGRPCConnection CLibMCDriver_GRPCGRPCConnection;
typedef CDriver_GRPC CLibMCDriver_GRPCDriver_GRPC;

/*************************************************************************************************************************
 Declaration of shared pointer types
**************************************************************************************************************************/
typedef std::shared_ptr<CWrapper> PWrapper;
typedef std::shared_ptr<CBase> PBase;
typedef std::shared_ptr<CDriver> PDriver;
typedef std::shared_ptr<CGRPCMessage> PGRPCMessage;
typedef std::shared_ptr<CGRPCResponse> PGRPCResponse;
typedef std::shared_ptr<CGRPCRequest> PGRPCRequest;
typedef std::shared_ptr<CGRPCConnection> PGRPCConnection;
typedef std::shared_ptr<CDriver_GRPC> PDriver_GRPC;

/*************************************************************************************************************************
 Declaration of deprecated shared pointer types
**************************************************************************************************************************/
typedef PWrapper PLibMCDriver_GRPCWrapper;
typedef PBase PLibMCDriver_GRPCBase;
typedef PDriver PLibMCDriver_GRPCDriver;
typedef PGRPCMessage PLibMCDriver_GRPCGRPCMessage;
typedef PGRPCResponse PLibMCDriver_GRPCGRPCResponse;
typedef PGRPCRequest PLibMCDriver_GRPCGRPCRequest;
typedef PGRPCConnection PLibMCDriver_GRPCGRPCConnection;
typedef PDriver_GRPC PLibMCDriver_GRPCDriver_GRPC;


/*************************************************************************************************************************
 classParam Definition
**************************************************************************************************************************/

template<class T> class classParam {
private:
	const T* m_ptr;

public:
	classParam(const T* ptr)
		: m_ptr (ptr)
	{
	}

	classParam(std::shared_ptr <T> sharedPtr)
		: m_ptr (sharedPtr.get())
	{
	}

	LibMCDriver_GRPCHandle GetHandle()
	{
		if (m_ptr != nullptr)
			return m_ptr->handle();
		return nullptr;
	}
};

/*************************************************************************************************************************
 Class ELibMCDriver_GRPCException 
**************************************************************************************************************************/
class ELibMCDriver_GRPCException : public std::exception {
protected:
	/**
	* Error code for the Exception.
	*/
	LibMCDriver_GRPCResult m_errorCode;
	/**
	* Error message for the Exception.
	*/
	std::string m_errorMessage;
	std::string m_originalErrorMessage;

public:
	/**
	* Exception Constructor.
	*/
	ELibMCDriver_GRPCException(LibMCDriver_GRPCResult errorCode, const std::string & sErrorMessage)
		: m_errorCode(errorCode), m_originalErrorMessage(sErrorMessage)
	{
		m_errorMessage = buildErrorMessage();
	}

	/**
	* Returns error code
	*/
	LibMCDriver_GRPCResult getErrorCode() const noexcept
	{
		return m_errorCode;
	}

	/**
	* Returns error message
	*/
	const char* what() const noexcept
	{
		return m_errorMessage.c_str();
	}

	const char* getErrorMessage() const noexcept
	{
		return m_originalErrorMessage.c_str();
	}

	const char* getErrorName() const noexcept
	{
		switch(getErrorCode()) {
			case LIBMCDRIVER_GRPC_SUCCESS: return "SUCCESS";
			case LIBMCDRIVER_GRPC_ERROR_NOTIMPLEMENTED: return "NOTIMPLEMENTED";
			case LIBMCDRIVER_GRPC_ERROR_INVALIDPARAM: return "INVALIDPARAM";
			case LIBMCDRIVER_GRPC_ERROR_INVALIDCAST: return "INVALIDCAST";
			case LIBMCDRIVER_GRPC_ERROR_BUFFERTOOSMALL: return "BUFFERTOOSMALL";
			case LIBMCDRIVER_GRPC_ERROR_GENERICEXCEPTION: return "GENERICEXCEPTION";
			case LIBMCDRIVER_GRPC_ERROR_COULDNOTLOADLIBRARY: return "COULDNOTLOADLIBRARY";
			case LIBMCDRIVER_GRPC_ERROR_COULDNOTFINDLIBRARYEXPORT: return "COULDNOTFINDLIBRARYEXPORT";
			case LIBMCDRIVER_GRPC_ERROR_INCOMPATIBLEBINARYVERSION: return "INCOMPATIBLEBINARYVERSION";
			case LIBMCDRIVER_GRPC_ERROR_DRIVERERROR: return "DRIVERERROR";
			case LIBMCDRIVER_GRPC_ERROR_DRIVERNOTINITIALISED: return "DRIVERNOTINITIALISED";
			case LIBMCDRIVER_GRPC_ERROR_DRIVERNOTCONNECTED: return "DRIVERNOTCONNECTED";
			case LIBMCDRIVER_GRPC_ERROR_COULDNOTLOADGRPCWRAPPER: return "COULDNOTLOADGRPCWRAPPER";
			case LIBMCDRIVER_GRPC_ERROR_DRIVERTYPENOTSUPPORTED: return "DRIVERTYPENOTSUPPORTED";
			case LIBMCDRIVER_GRPC_ERROR_EMPTYCONNECTIONIDENTIFIER: return "EMPTYCONNECTIONIDENTIFIER";
			case LIBMCDRIVER_GRPC_ERROR_INVALIDCONNECTIONIDENTIFIER: return "INVALIDCONNECTIONIDENTIFIER";
			case LIBMCDRIVER_GRPC_ERROR_GRPCWRAPPERNOTLOADED: return "GRPCWRAPPERNOTLOADED";
			case LIBMCDRIVER_GRPC_ERROR_COULDNOTFINDCONNECTIONIDENTIFIER: return "COULDNOTFINDCONNECTIONIDENTIFIER";
			case LIBMCDRIVER_GRPC_ERROR_DUPLICATECONNECTIONIDENTIFIER: return "DUPLICATECONNECTIONIDENTIFIER";
			case LIBMCDRIVER_GRPC_ERROR_COULDNOTCASTTOGRPCREQUEST: return "COULDNOTCASTTOGRPCREQUEST";
			case LIBMCDRIVER_GRPC_ERROR_COULDNOTCASTTOGRPCRESPONSE: return "COULDNOTCASTTOGRPCRESPONSE";
		}
		return "UNKNOWN";
	}

	const char* getErrorDescription() const noexcept
	{
		switch(getErrorCode()) {
			case LIBMCDRIVER_GRPC_SUCCESS: return "success";
			case LIBMCDRIVER_GRPC_ERROR_NOTIMPLEMENTED: return "functionality not implemented";
			case LIBMCDRIVER_GRPC_ERROR_INVALIDPARAM: return "an invalid parameter was passed";
			case LIBMCDRIVER_GRPC_ERROR_INVALIDCAST: return "a type cast failed";
			case LIBMCDRIVER_GRPC_ERROR_BUFFERTOOSMALL: return "a provided buffer is too small";
			case LIBMCDRIVER_GRPC_ERROR_GENERICEXCEPTION: return "a generic exception occurred";
			case LIBMCDRIVER_GRPC_ERROR_COULDNOTLOADLIBRARY: return "the library could not be loaded";
			case LIBMCDRIVER_GRPC_ERROR_COULDNOTFINDLIBRARYEXPORT: return "a required exported symbol could not be found in the library";
			case LIBMCDRIVER_GRPC_ERROR_INCOMPATIBLEBINARYVERSION: return "the version of the binary interface does not match the bindings interface";
			case LIBMCDRIVER_GRPC_ERROR_DRIVERERROR: return "a driver error occured";
			case LIBMCDRIVER_GRPC_ERROR_DRIVERNOTINITIALISED: return "the driver is not initialised";
			case LIBMCDRIVER_GRPC_ERROR_DRIVERNOTCONNECTED: return "the driver is not connected";
			case LIBMCDRIVER_GRPC_ERROR_COULDNOTLOADGRPCWRAPPER: return "Could not load grpc wrapper";
			case LIBMCDRIVER_GRPC_ERROR_DRIVERTYPENOTSUPPORTED: return "the driver type is not supported";
			case LIBMCDRIVER_GRPC_ERROR_EMPTYCONNECTIONIDENTIFIER: return "Empty connection identifier";
			case LIBMCDRIVER_GRPC_ERROR_INVALIDCONNECTIONIDENTIFIER: return "Invalid connection identifier";
			case LIBMCDRIVER_GRPC_ERROR_GRPCWRAPPERNOTLOADED: return "GRPC Wrapper not loaded";
			case LIBMCDRIVER_GRPC_ERROR_COULDNOTFINDCONNECTIONIDENTIFIER: return "Could not find connection identifier";
			case LIBMCDRIVER_GRPC_ERROR_DUPLICATECONNECTIONIDENTIFIER: return "Duplicate connection identifier";
			case LIBMCDRIVER_GRPC_ERROR_COULDNOTCASTTOGRPCREQUEST: return "Could not cast to GRPC Request";
			case LIBMCDRIVER_GRPC_ERROR_COULDNOTCASTTOGRPCRESPONSE: return "Could not cast to GRPC Response";
		}
		return "unknown error";
	}

private:

	std::string buildErrorMessage() const noexcept
	{
		std::string msg = m_originalErrorMessage;
		if (msg.empty()) {
			msg = getErrorDescription();
		}
		return std::string("Error: ") + getErrorName() + ": " + msg;
	}
};

/*************************************************************************************************************************
 Class CInputVector
**************************************************************************************************************************/
template <typename T>
class CInputVector {
private:
	
	const T* m_data;
	size_t m_size;
	
public:
	
	CInputVector(const std::vector<T>& vec)
		: m_data( vec.data() ), m_size( vec.size() )
	{
	}
	
	CInputVector(const T* in_data, size_t in_size)
		: m_data( in_data ), m_size(in_size )
	{
	}
	
	const T* data() const
	{
		return m_data;
	}
	
	size_t size() const
	{
		return m_size;
	}
	
};

// declare deprecated class name
template<typename T>
using CLibMCDriver_GRPCInputVector = CInputVector<T>;

/*************************************************************************************************************************
 Class CWrapper 
**************************************************************************************************************************/
class CWrapper {
public:
	
	explicit CWrapper(void* pSymbolLookupMethod)
	{
		CheckError(nullptr, initWrapperTable(&m_WrapperTable));
		CheckError(nullptr, loadWrapperTableFromSymbolLookupMethod(&m_WrapperTable, pSymbolLookupMethod));
		
		CheckError(nullptr, checkBinaryVersion());
	}
	
	explicit CWrapper(const std::string &sFileName)
	{
		CheckError(nullptr, initWrapperTable(&m_WrapperTable));
		CheckError(nullptr, loadWrapperTable(&m_WrapperTable, sFileName.c_str()));
		
		CheckError(nullptr, checkBinaryVersion());
	}
	
	static PWrapper loadLibrary(const std::string &sFileName)
	{
		return std::make_shared<CWrapper>(sFileName);
	}
	
	static PWrapper loadLibraryFromSymbolLookupMethod(void* pSymbolLookupMethod)
	{
		return std::make_shared<CWrapper>(pSymbolLookupMethod);
	}
	
	~CWrapper()
	{
		releaseWrapperTable(&m_WrapperTable);
	}
	
	inline void CheckError(CBase * pBaseClass, LibMCDriver_GRPCResult nResult);

	inline void GetVersion(LibMCDriver_GRPC_uint32 & nMajor, LibMCDriver_GRPC_uint32 & nMinor, LibMCDriver_GRPC_uint32 & nMicro);
	inline bool GetLastError(classParam<CBase> pInstance, std::string & sErrorMessage);
	inline void ReleaseInstance(classParam<CBase> pInstance);
	inline void AcquireInstance(classParam<CBase> pInstance);
	inline void InjectComponent(const std::string & sNameSpace, const LibMCDriver_GRPC_pvoid pSymbolAddressMethod);
	inline LibMCDriver_GRPC_pvoid GetSymbolLookupMethod();
	inline PDriver CreateDriver(const std::string & sName, const std::string & sType, classParam<LibMCEnv::CDriverEnvironment> pDriverEnvironment);

private:
	sLibMCDriver_GRPCDynamicWrapperTable m_WrapperTable;
	// Injected Components
	LibMCEnv::PWrapper m_pLibMCEnvWrapper;

	
	LibMCDriver_GRPCResult checkBinaryVersion()
	{
		LibMCDriver_GRPC_uint32 nMajor, nMinor, nMicro;
		GetVersion(nMajor, nMinor, nMicro);
		if (nMajor != LIBMCDRIVER_GRPC_VERSION_MAJOR) {
			return LIBMCDRIVER_GRPC_ERROR_INCOMPATIBLEBINARYVERSION;
		}
		return LIBMCDRIVER_GRPC_SUCCESS;
	}
	LibMCDriver_GRPCResult initWrapperTable(sLibMCDriver_GRPCDynamicWrapperTable * pWrapperTable);
	LibMCDriver_GRPCResult releaseWrapperTable(sLibMCDriver_GRPCDynamicWrapperTable * pWrapperTable);
	LibMCDriver_GRPCResult loadWrapperTable(sLibMCDriver_GRPCDynamicWrapperTable * pWrapperTable, const char * pLibraryFileName);
	LibMCDriver_GRPCResult loadWrapperTableFromSymbolLookupMethod(sLibMCDriver_GRPCDynamicWrapperTable * pWrapperTable, void* pSymbolLookupMethod);

	friend class CBase;
	friend class CDriver;
	friend class CGRPCMessage;
	friend class CGRPCResponse;
	friend class CGRPCRequest;
	friend class CGRPCConnection;
	friend class CDriver_GRPC;

};

	
/*************************************************************************************************************************
 Class CBase 
**************************************************************************************************************************/
class CBase {
public:
	
protected:
	/* Wrapper Object that created the class. */
	CWrapper * m_pWrapper;
	/* Handle to Instance in library*/
	LibMCDriver_GRPCHandle m_pHandle;

	/* Checks for an Error code and raises Exceptions */
	void CheckError(LibMCDriver_GRPCResult nResult)
	{
		if (m_pWrapper != nullptr)
			m_pWrapper->CheckError(this, nResult);
	}
public:
	/**
	* CBase::CBase - Constructor for Base class.
	*/
	CBase(CWrapper * pWrapper, LibMCDriver_GRPCHandle pHandle)
		: m_pWrapper(pWrapper), m_pHandle(pHandle)
	{
	}

	/**
	* CBase::~CBase - Destructor for Base class.
	*/
	virtual ~CBase()
	{
		if (m_pWrapper != nullptr)
			m_pWrapper->ReleaseInstance(this);
		m_pWrapper = nullptr;
	}

	/**
	* CBase::handle - Returns handle to instance.
	*/
	LibMCDriver_GRPCHandle handle() const
	{
		return m_pHandle;
	}

	/**
	* CBase::wrapper - Returns wrapper instance.
	*/
	CWrapper * wrapper() const
	{
		return m_pWrapper;
	}
	
	friend class CWrapper;
};
	
/*************************************************************************************************************************
 Class CDriver 
**************************************************************************************************************************/
class CDriver : public CBase {
public:
	
	/**
	* CDriver::CDriver - Constructor for Driver class.
	*/
	CDriver(CWrapper* pWrapper, LibMCDriver_GRPCHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline void Configure(const std::string & sConfigurationString);
	inline std::string GetName();
	inline std::string GetType();
	inline void GetVersion(LibMCDriver_GRPC_uint32 & nMajor, LibMCDriver_GRPC_uint32 & nMinor, LibMCDriver_GRPC_uint32 & nMicro, std::string & sBuild);
	inline void QueryParameters();
	inline void QueryParametersEx(classParam<LibMCEnv::CDriverStatusUpdateSession> pDriverUpdateInstance);
};
	
/*************************************************************************************************************************
 Class CGRPCMessage 
**************************************************************************************************************************/
class CGRPCMessage : public CBase {
public:
	
	/**
	* CGRPCMessage::CGRPCMessage - Constructor for GRPCMessage class.
	*/
	CGRPCMessage(CWrapper* pWrapper, LibMCDriver_GRPCHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline bool HasField(const std::string & sFieldName);
	inline bool HasMessageField(const std::string & sFieldName);
	inline PGRPCMessage GetMessageField(const std::string & sFieldName);
	inline bool HasStringField(const std::string & sFieldName);
	inline void SetStringField(const std::string & sFieldName, const std::string & sValue);
	inline std::string GetStringField(const std::string & sFieldName);
	inline void SetInt32Field(const std::string & sFieldName, const LibMCDriver_GRPC_int32 nValue);
	inline LibMCDriver_GRPC_int32 GetInt32Field(const std::string & sFieldName);
	inline void SetUInt32Field(const std::string & sFieldName, const LibMCDriver_GRPC_uint32 nValue);
	inline LibMCDriver_GRPC_uint32 GetUInt32Field(const std::string & sFieldName);
	inline void SetInt64Field(const std::string & sFieldName, const LibMCDriver_GRPC_int64 nValue);
	inline LibMCDriver_GRPC_int64 GetInt64Field(const std::string & sFieldName);
	inline void SetUInt64Field(const std::string & sFieldName, const LibMCDriver_GRPC_uint64 nValue);
	inline LibMCDriver_GRPC_uint64 GetUInt64Field(const std::string & sFieldName);
	inline void SetBoolField(const std::string & sFieldName, const bool bValue);
	inline bool GetBoolField(const std::string & sFieldName);
	inline void SetFloatField(const std::string & sFieldName, const LibMCDriver_GRPC_single fValue);
	inline LibMCDriver_GRPC_single GetFloatField(const std::string & sFieldName);
	inline void SetDoubleField(const std::string & sFieldName, const LibMCDriver_GRPC_double dValue);
	inline LibMCDriver_GRPC_double GetDoubleField(const std::string & sFieldName);
};
	
/*************************************************************************************************************************
 Class CGRPCResponse 
**************************************************************************************************************************/
class CGRPCResponse : public CGRPCMessage {
public:
	
	/**
	* CGRPCResponse::CGRPCResponse - Constructor for GRPCResponse class.
	*/
	CGRPCResponse(CWrapper* pWrapper, LibMCDriver_GRPCHandle pHandle)
		: CGRPCMessage(pWrapper, pHandle)
	{
	}
	
	inline std::string GetResponseType();
};
	
/*************************************************************************************************************************
 Class CGRPCRequest 
**************************************************************************************************************************/
class CGRPCRequest : public CGRPCMessage {
public:
	
	/**
	* CGRPCRequest::CGRPCRequest - Constructor for GRPCRequest class.
	*/
	CGRPCRequest(CWrapper* pWrapper, LibMCDriver_GRPCHandle pHandle)
		: CGRPCMessage(pWrapper, pHandle)
	{
	}
	
	inline std::string GetRequestType();
	inline std::string GetExpectedResponseType();
	inline PGRPCResponse SendBlocking(const std::string & sServiceMethod, const LibMCDriver_GRPC_uint32 nTimeOutInMS);
};
	
/*************************************************************************************************************************
 Class CGRPCConnection 
**************************************************************************************************************************/
class CGRPCConnection : public CBase {
public:
	
	/**
	* CGRPCConnection::CGRPCConnection - Constructor for GRPCConnection class.
	*/
	CGRPCConnection(CWrapper* pWrapper, LibMCDriver_GRPCHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline std::string GetEndPoint();
	inline void Close();
	inline PGRPCRequest CreateStaticRequest(const std::string & sRequestTypeIdentifier, const std::string & sResponseTypeIdentifier);
};
	
/*************************************************************************************************************************
 Class CDriver_GRPC 
**************************************************************************************************************************/
class CDriver_GRPC : public CDriver {
public:
	
	/**
	* CDriver_GRPC::CDriver_GRPC - Constructor for Driver_GRPC class.
	*/
	CDriver_GRPC(CWrapper* pWrapper, LibMCDriver_GRPCHandle pHandle)
		: CDriver(pWrapper, pHandle)
	{
	}
	
	inline void SetToSimulationMode();
	inline bool IsSimulationMode();
	inline PGRPCConnection ConnectUnsecure(const std::string & sIdentifier, const std::string & sNetworkCredentials, const std::string & sProtobufDefinition);
	inline PGRPCConnection FindConnection(const std::string & sIdentifier, const bool bMustExist);
};
	
	/**
	* CWrapper::GetVersion - retrieves the binary version of this library.
	* @param[out] nMajor - returns the major version of this library
	* @param[out] nMinor - returns the minor version of this library
	* @param[out] nMicro - returns the micro version of this library
	*/
	inline void CWrapper::GetVersion(LibMCDriver_GRPC_uint32 & nMajor, LibMCDriver_GRPC_uint32 & nMinor, LibMCDriver_GRPC_uint32 & nMicro)
	{
		CheckError(nullptr,m_WrapperTable.m_GetVersion(&nMajor, &nMinor, &nMicro));
	}
	
	/**
	* CWrapper::GetLastError - Returns the last error recorded on this object
	* @param[in] pInstance - Instance Handle
	* @param[out] sErrorMessage - Message of the last error
	* @return Is there a last error to query
	*/
	inline bool CWrapper::GetLastError(classParam<CBase> pInstance, std::string & sErrorMessage)
	{
		LibMCDriver_GRPCHandle hInstance = pInstance.GetHandle();
		LibMCDriver_GRPC_uint32 bytesNeededErrorMessage = 0;
		LibMCDriver_GRPC_uint32 bytesWrittenErrorMessage = 0;
		bool resultHasError = 0;
		CheckError(nullptr,m_WrapperTable.m_GetLastError(hInstance, 0, &bytesNeededErrorMessage, nullptr, &resultHasError));
		std::vector<char> bufferErrorMessage(bytesNeededErrorMessage);
		CheckError(nullptr,m_WrapperTable.m_GetLastError(hInstance, bytesNeededErrorMessage, &bytesWrittenErrorMessage, &bufferErrorMessage[0], &resultHasError));
		sErrorMessage = std::string(&bufferErrorMessage[0]);
		
		return resultHasError;
	}
	
	/**
	* CWrapper::ReleaseInstance - Releases shared ownership of an Instance
	* @param[in] pInstance - Instance Handle
	*/
	inline void CWrapper::ReleaseInstance(classParam<CBase> pInstance)
	{
		LibMCDriver_GRPCHandle hInstance = pInstance.GetHandle();
		CheckError(nullptr,m_WrapperTable.m_ReleaseInstance(hInstance));
	}
	
	/**
	* CWrapper::AcquireInstance - Acquires shared ownership of an Instance
	* @param[in] pInstance - Instance Handle
	*/
	inline void CWrapper::AcquireInstance(classParam<CBase> pInstance)
	{
		LibMCDriver_GRPCHandle hInstance = pInstance.GetHandle();
		CheckError(nullptr,m_WrapperTable.m_AcquireInstance(hInstance));
	}
	
	/**
	* CWrapper::InjectComponent - Injects an imported component for usage within this component
	* @param[in] sNameSpace - NameSpace of the injected component
	* @param[in] pSymbolAddressMethod - Address of the SymbolAddressMethod of the injected component
	*/
	inline void CWrapper::InjectComponent(const std::string & sNameSpace, const LibMCDriver_GRPC_pvoid pSymbolAddressMethod)
	{
		CheckError(nullptr,m_WrapperTable.m_InjectComponent(sNameSpace.c_str(), pSymbolAddressMethod));
		
		bool bNameSpaceFound = false;
		if (sNameSpace == "LibMCEnv") {
			if (m_pLibMCEnvWrapper != nullptr) {
				throw ELibMCDriver_GRPCException(LIBMCDRIVER_GRPC_ERROR_COULDNOTLOADLIBRARY, "Library with namespace " + sNameSpace + " is already registered.");
			}
			m_pLibMCEnvWrapper = LibMCEnv::CWrapper::loadLibraryFromSymbolLookupMethod(pSymbolAddressMethod);
			bNameSpaceFound = true;
		}
		if (!bNameSpaceFound)
			throw ELibMCDriver_GRPCException(LIBMCDRIVER_GRPC_ERROR_COULDNOTLOADLIBRARY, "Unknown namespace " + sNameSpace);
	}
	
	/**
	* CWrapper::GetSymbolLookupMethod - Returns the address of the SymbolLookupMethod
	* @return Address of the SymbolAddressMethod
	*/
	inline LibMCDriver_GRPC_pvoid CWrapper::GetSymbolLookupMethod()
	{
		LibMCDriver_GRPC_pvoid resultSymbolLookupMethod = 0;
		CheckError(nullptr,m_WrapperTable.m_GetSymbolLookupMethod(&resultSymbolLookupMethod));
		
		return resultSymbolLookupMethod;
	}
	
	/**
	* CWrapper::CreateDriver - Creates a driver instance with a specific name.
	* @param[in] sName - Name of driver to be created.
	* @param[in] sType - Type of driver to be created.
	* @param[in] pDriverEnvironment - Environment of this driver.
	* @return New Driver instance
	*/
	inline PDriver CWrapper::CreateDriver(const std::string & sName, const std::string & sType, classParam<LibMCEnv::CDriverEnvironment> pDriverEnvironment)
	{
		LibMCEnvHandle hDriverEnvironment = pDriverEnvironment.GetHandle();
		LibMCDriver_GRPCHandle hInstance = nullptr;
		CheckError(nullptr,m_WrapperTable.m_CreateDriver(sName.c_str(), sType.c_str(), hDriverEnvironment, &hInstance));
		
		if (hInstance) {
			return std::make_shared<CDriver>(this, hInstance);
		} else {
			return nullptr;
		}
	}
	
	inline void CWrapper::CheckError(CBase * pBaseClass, LibMCDriver_GRPCResult nResult)
	{
		if (nResult != 0) {
			std::string sErrorMessage;
			if (pBaseClass != nullptr) {
				GetLastError(pBaseClass, sErrorMessage);
			}
			throw ELibMCDriver_GRPCException(nResult, sErrorMessage);
		}
	}
	

	inline LibMCDriver_GRPCResult CWrapper::initWrapperTable(sLibMCDriver_GRPCDynamicWrapperTable * pWrapperTable)
	{
		if (pWrapperTable == nullptr)
			return LIBMCDRIVER_GRPC_ERROR_INVALIDPARAM;
		
		pWrapperTable->m_LibraryHandle = nullptr;
		pWrapperTable->m_Driver_Configure = nullptr;
		pWrapperTable->m_Driver_GetName = nullptr;
		pWrapperTable->m_Driver_GetType = nullptr;
		pWrapperTable->m_Driver_GetVersion = nullptr;
		pWrapperTable->m_Driver_QueryParameters = nullptr;
		pWrapperTable->m_Driver_QueryParametersEx = nullptr;
		pWrapperTable->m_GRPCMessage_HasField = nullptr;
		pWrapperTable->m_GRPCMessage_HasMessageField = nullptr;
		pWrapperTable->m_GRPCMessage_GetMessageField = nullptr;
		pWrapperTable->m_GRPCMessage_HasStringField = nullptr;
		pWrapperTable->m_GRPCMessage_SetStringField = nullptr;
		pWrapperTable->m_GRPCMessage_GetStringField = nullptr;
		pWrapperTable->m_GRPCMessage_SetInt32Field = nullptr;
		pWrapperTable->m_GRPCMessage_GetInt32Field = nullptr;
		pWrapperTable->m_GRPCMessage_SetUInt32Field = nullptr;
		pWrapperTable->m_GRPCMessage_GetUInt32Field = nullptr;
		pWrapperTable->m_GRPCMessage_SetInt64Field = nullptr;
		pWrapperTable->m_GRPCMessage_GetInt64Field = nullptr;
		pWrapperTable->m_GRPCMessage_SetUInt64Field = nullptr;
		pWrapperTable->m_GRPCMessage_GetUInt64Field = nullptr;
		pWrapperTable->m_GRPCMessage_SetBoolField = nullptr;
		pWrapperTable->m_GRPCMessage_GetBoolField = nullptr;
		pWrapperTable->m_GRPCMessage_SetFloatField = nullptr;
		pWrapperTable->m_GRPCMessage_GetFloatField = nullptr;
		pWrapperTable->m_GRPCMessage_SetDoubleField = nullptr;
		pWrapperTable->m_GRPCMessage_GetDoubleField = nullptr;
		pWrapperTable->m_GRPCResponse_GetResponseType = nullptr;
		pWrapperTable->m_GRPCRequest_GetRequestType = nullptr;
		pWrapperTable->m_GRPCRequest_GetExpectedResponseType = nullptr;
		pWrapperTable->m_GRPCRequest_SendBlocking = nullptr;
		pWrapperTable->m_GRPCConnection_GetEndPoint = nullptr;
		pWrapperTable->m_GRPCConnection_Close = nullptr;
		pWrapperTable->m_GRPCConnection_CreateStaticRequest = nullptr;
		pWrapperTable->m_Driver_GRPC_SetToSimulationMode = nullptr;
		pWrapperTable->m_Driver_GRPC_IsSimulationMode = nullptr;
		pWrapperTable->m_Driver_GRPC_ConnectUnsecure = nullptr;
		pWrapperTable->m_Driver_GRPC_FindConnection = nullptr;
		pWrapperTable->m_GetVersion = nullptr;
		pWrapperTable->m_GetLastError = nullptr;
		pWrapperTable->m_ReleaseInstance = nullptr;
		pWrapperTable->m_AcquireInstance = nullptr;
		pWrapperTable->m_InjectComponent = nullptr;
		pWrapperTable->m_GetSymbolLookupMethod = nullptr;
		pWrapperTable->m_CreateDriver = nullptr;
		
		return LIBMCDRIVER_GRPC_SUCCESS;
	}

	inline LibMCDriver_GRPCResult CWrapper::releaseWrapperTable(sLibMCDriver_GRPCDynamicWrapperTable * pWrapperTable)
	{
		if (pWrapperTable == nullptr)
			return LIBMCDRIVER_GRPC_ERROR_INVALIDPARAM;
		
		if (pWrapperTable->m_LibraryHandle != nullptr) {
		#ifdef _WIN32
			HMODULE hModule = (HMODULE) pWrapperTable->m_LibraryHandle;
			FreeLibrary(hModule);
		#else // _WIN32
			dlclose(pWrapperTable->m_LibraryHandle);
		#endif // _WIN32
			return initWrapperTable(pWrapperTable);
		}
		
		return LIBMCDRIVER_GRPC_SUCCESS;
	}

	inline LibMCDriver_GRPCResult CWrapper::loadWrapperTable(sLibMCDriver_GRPCDynamicWrapperTable * pWrapperTable, const char * pLibraryFileName)
	{
		if (pWrapperTable == nullptr)
			return LIBMCDRIVER_GRPC_ERROR_INVALIDPARAM;
		if (pLibraryFileName == nullptr)
			return LIBMCDRIVER_GRPC_ERROR_INVALIDPARAM;
		
		#ifdef _WIN32
		// Convert filename to UTF16-string
		int nLength = 0;
		while ((pLibraryFileName[nLength] != 0) && (nLength < MAX_PATH))
			nLength++;
		int nBufferSize = nLength * 2 + 2;
		std::vector<wchar_t> wsLibraryFileName(nBufferSize);
		int nResult = MultiByteToWideChar(CP_UTF8, 0, pLibraryFileName, nLength, &wsLibraryFileName[0], nBufferSize);
		if (nResult == 0)
			return LIBMCDRIVER_GRPC_ERROR_COULDNOTLOADLIBRARY;
		
		HMODULE hLibrary = LoadLibraryW(wsLibraryFileName.data());
		if (hLibrary == 0) 
			return LIBMCDRIVER_GRPC_ERROR_COULDNOTLOADLIBRARY;
		#else // _WIN32
		void* hLibrary = dlopen(pLibraryFileName, RTLD_LAZY);
		if (hLibrary == 0) 
			return LIBMCDRIVER_GRPC_ERROR_COULDNOTLOADLIBRARY;
		dlerror();
		#endif // _WIN32
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_Configure = (PLibMCDriver_GRPCDriver_ConfigurePtr) GetProcAddress(hLibrary, "libmcdriver_grpc_driver_configure");
		#else // _WIN32
		pWrapperTable->m_Driver_Configure = (PLibMCDriver_GRPCDriver_ConfigurePtr) dlsym(hLibrary, "libmcdriver_grpc_driver_configure");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_Configure == nullptr)
			return LIBMCDRIVER_GRPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_GetName = (PLibMCDriver_GRPCDriver_GetNamePtr) GetProcAddress(hLibrary, "libmcdriver_grpc_driver_getname");
		#else // _WIN32
		pWrapperTable->m_Driver_GetName = (PLibMCDriver_GRPCDriver_GetNamePtr) dlsym(hLibrary, "libmcdriver_grpc_driver_getname");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_GetName == nullptr)
			return LIBMCDRIVER_GRPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_GetType = (PLibMCDriver_GRPCDriver_GetTypePtr) GetProcAddress(hLibrary, "libmcdriver_grpc_driver_gettype");
		#else // _WIN32
		pWrapperTable->m_Driver_GetType = (PLibMCDriver_GRPCDriver_GetTypePtr) dlsym(hLibrary, "libmcdriver_grpc_driver_gettype");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_GetType == nullptr)
			return LIBMCDRIVER_GRPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_GetVersion = (PLibMCDriver_GRPCDriver_GetVersionPtr) GetProcAddress(hLibrary, "libmcdriver_grpc_driver_getversion");
		#else // _WIN32
		pWrapperTable->m_Driver_GetVersion = (PLibMCDriver_GRPCDriver_GetVersionPtr) dlsym(hLibrary, "libmcdriver_grpc_driver_getversion");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_GetVersion == nullptr)
			return LIBMCDRIVER_GRPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_QueryParameters = (PLibMCDriver_GRPCDriver_QueryParametersPtr) GetProcAddress(hLibrary, "libmcdriver_grpc_driver_queryparameters");
		#else // _WIN32
		pWrapperTable->m_Driver_QueryParameters = (PLibMCDriver_GRPCDriver_QueryParametersPtr) dlsym(hLibrary, "libmcdriver_grpc_driver_queryparameters");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_QueryParameters == nullptr)
			return LIBMCDRIVER_GRPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_QueryParametersEx = (PLibMCDriver_GRPCDriver_QueryParametersExPtr) GetProcAddress(hLibrary, "libmcdriver_grpc_driver_queryparametersex");
		#else // _WIN32
		pWrapperTable->m_Driver_QueryParametersEx = (PLibMCDriver_GRPCDriver_QueryParametersExPtr) dlsym(hLibrary, "libmcdriver_grpc_driver_queryparametersex");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_QueryParametersEx == nullptr)
			return LIBMCDRIVER_GRPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GRPCMessage_HasField = (PLibMCDriver_GRPCGRPCMessage_HasFieldPtr) GetProcAddress(hLibrary, "libmcdriver_grpc_grpcmessage_hasfield");
		#else // _WIN32
		pWrapperTable->m_GRPCMessage_HasField = (PLibMCDriver_GRPCGRPCMessage_HasFieldPtr) dlsym(hLibrary, "libmcdriver_grpc_grpcmessage_hasfield");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GRPCMessage_HasField == nullptr)
			return LIBMCDRIVER_GRPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GRPCMessage_HasMessageField = (PLibMCDriver_GRPCGRPCMessage_HasMessageFieldPtr) GetProcAddress(hLibrary, "libmcdriver_grpc_grpcmessage_hasmessagefield");
		#else // _WIN32
		pWrapperTable->m_GRPCMessage_HasMessageField = (PLibMCDriver_GRPCGRPCMessage_HasMessageFieldPtr) dlsym(hLibrary, "libmcdriver_grpc_grpcmessage_hasmessagefield");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GRPCMessage_HasMessageField == nullptr)
			return LIBMCDRIVER_GRPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GRPCMessage_GetMessageField = (PLibMCDriver_GRPCGRPCMessage_GetMessageFieldPtr) GetProcAddress(hLibrary, "libmcdriver_grpc_grpcmessage_getmessagefield");
		#else // _WIN32
		pWrapperTable->m_GRPCMessage_GetMessageField = (PLibMCDriver_GRPCGRPCMessage_GetMessageFieldPtr) dlsym(hLibrary, "libmcdriver_grpc_grpcmessage_getmessagefield");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GRPCMessage_GetMessageField == nullptr)
			return LIBMCDRIVER_GRPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GRPCMessage_HasStringField = (PLibMCDriver_GRPCGRPCMessage_HasStringFieldPtr) GetProcAddress(hLibrary, "libmcdriver_grpc_grpcmessage_hasstringfield");
		#else // _WIN32
		pWrapperTable->m_GRPCMessage_HasStringField = (PLibMCDriver_GRPCGRPCMessage_HasStringFieldPtr) dlsym(hLibrary, "libmcdriver_grpc_grpcmessage_hasstringfield");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GRPCMessage_HasStringField == nullptr)
			return LIBMCDRIVER_GRPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GRPCMessage_SetStringField = (PLibMCDriver_GRPCGRPCMessage_SetStringFieldPtr) GetProcAddress(hLibrary, "libmcdriver_grpc_grpcmessage_setstringfield");
		#else // _WIN32
		pWrapperTable->m_GRPCMessage_SetStringField = (PLibMCDriver_GRPCGRPCMessage_SetStringFieldPtr) dlsym(hLibrary, "libmcdriver_grpc_grpcmessage_setstringfield");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GRPCMessage_SetStringField == nullptr)
			return LIBMCDRIVER_GRPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GRPCMessage_GetStringField = (PLibMCDriver_GRPCGRPCMessage_GetStringFieldPtr) GetProcAddress(hLibrary, "libmcdriver_grpc_grpcmessage_getstringfield");
		#else // _WIN32
		pWrapperTable->m_GRPCMessage_GetStringField = (PLibMCDriver_GRPCGRPCMessage_GetStringFieldPtr) dlsym(hLibrary, "libmcdriver_grpc_grpcmessage_getstringfield");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GRPCMessage_GetStringField == nullptr)
			return LIBMCDRIVER_GRPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GRPCMessage_SetInt32Field = (PLibMCDriver_GRPCGRPCMessage_SetInt32FieldPtr) GetProcAddress(hLibrary, "libmcdriver_grpc_grpcmessage_setint32field");
		#else // _WIN32
		pWrapperTable->m_GRPCMessage_SetInt32Field = (PLibMCDriver_GRPCGRPCMessage_SetInt32FieldPtr) dlsym(hLibrary, "libmcdriver_grpc_grpcmessage_setint32field");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GRPCMessage_SetInt32Field == nullptr)
			return LIBMCDRIVER_GRPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GRPCMessage_GetInt32Field = (PLibMCDriver_GRPCGRPCMessage_GetInt32FieldPtr) GetProcAddress(hLibrary, "libmcdriver_grpc_grpcmessage_getint32field");
		#else // _WIN32
		pWrapperTable->m_GRPCMessage_GetInt32Field = (PLibMCDriver_GRPCGRPCMessage_GetInt32FieldPtr) dlsym(hLibrary, "libmcdriver_grpc_grpcmessage_getint32field");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GRPCMessage_GetInt32Field == nullptr)
			return LIBMCDRIVER_GRPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GRPCMessage_SetUInt32Field = (PLibMCDriver_GRPCGRPCMessage_SetUInt32FieldPtr) GetProcAddress(hLibrary, "libmcdriver_grpc_grpcmessage_setuint32field");
		#else // _WIN32
		pWrapperTable->m_GRPCMessage_SetUInt32Field = (PLibMCDriver_GRPCGRPCMessage_SetUInt32FieldPtr) dlsym(hLibrary, "libmcdriver_grpc_grpcmessage_setuint32field");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GRPCMessage_SetUInt32Field == nullptr)
			return LIBMCDRIVER_GRPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GRPCMessage_GetUInt32Field = (PLibMCDriver_GRPCGRPCMessage_GetUInt32FieldPtr) GetProcAddress(hLibrary, "libmcdriver_grpc_grpcmessage_getuint32field");
		#else // _WIN32
		pWrapperTable->m_GRPCMessage_GetUInt32Field = (PLibMCDriver_GRPCGRPCMessage_GetUInt32FieldPtr) dlsym(hLibrary, "libmcdriver_grpc_grpcmessage_getuint32field");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GRPCMessage_GetUInt32Field == nullptr)
			return LIBMCDRIVER_GRPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GRPCMessage_SetInt64Field = (PLibMCDriver_GRPCGRPCMessage_SetInt64FieldPtr) GetProcAddress(hLibrary, "libmcdriver_grpc_grpcmessage_setint64field");
		#else // _WIN32
		pWrapperTable->m_GRPCMessage_SetInt64Field = (PLibMCDriver_GRPCGRPCMessage_SetInt64FieldPtr) dlsym(hLibrary, "libmcdriver_grpc_grpcmessage_setint64field");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GRPCMessage_SetInt64Field == nullptr)
			return LIBMCDRIVER_GRPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GRPCMessage_GetInt64Field = (PLibMCDriver_GRPCGRPCMessage_GetInt64FieldPtr) GetProcAddress(hLibrary, "libmcdriver_grpc_grpcmessage_getint64field");
		#else // _WIN32
		pWrapperTable->m_GRPCMessage_GetInt64Field = (PLibMCDriver_GRPCGRPCMessage_GetInt64FieldPtr) dlsym(hLibrary, "libmcdriver_grpc_grpcmessage_getint64field");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GRPCMessage_GetInt64Field == nullptr)
			return LIBMCDRIVER_GRPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GRPCMessage_SetUInt64Field = (PLibMCDriver_GRPCGRPCMessage_SetUInt64FieldPtr) GetProcAddress(hLibrary, "libmcdriver_grpc_grpcmessage_setuint64field");
		#else // _WIN32
		pWrapperTable->m_GRPCMessage_SetUInt64Field = (PLibMCDriver_GRPCGRPCMessage_SetUInt64FieldPtr) dlsym(hLibrary, "libmcdriver_grpc_grpcmessage_setuint64field");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GRPCMessage_SetUInt64Field == nullptr)
			return LIBMCDRIVER_GRPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GRPCMessage_GetUInt64Field = (PLibMCDriver_GRPCGRPCMessage_GetUInt64FieldPtr) GetProcAddress(hLibrary, "libmcdriver_grpc_grpcmessage_getuint64field");
		#else // _WIN32
		pWrapperTable->m_GRPCMessage_GetUInt64Field = (PLibMCDriver_GRPCGRPCMessage_GetUInt64FieldPtr) dlsym(hLibrary, "libmcdriver_grpc_grpcmessage_getuint64field");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GRPCMessage_GetUInt64Field == nullptr)
			return LIBMCDRIVER_GRPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GRPCMessage_SetBoolField = (PLibMCDriver_GRPCGRPCMessage_SetBoolFieldPtr) GetProcAddress(hLibrary, "libmcdriver_grpc_grpcmessage_setboolfield");
		#else // _WIN32
		pWrapperTable->m_GRPCMessage_SetBoolField = (PLibMCDriver_GRPCGRPCMessage_SetBoolFieldPtr) dlsym(hLibrary, "libmcdriver_grpc_grpcmessage_setboolfield");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GRPCMessage_SetBoolField == nullptr)
			return LIBMCDRIVER_GRPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GRPCMessage_GetBoolField = (PLibMCDriver_GRPCGRPCMessage_GetBoolFieldPtr) GetProcAddress(hLibrary, "libmcdriver_grpc_grpcmessage_getboolfield");
		#else // _WIN32
		pWrapperTable->m_GRPCMessage_GetBoolField = (PLibMCDriver_GRPCGRPCMessage_GetBoolFieldPtr) dlsym(hLibrary, "libmcdriver_grpc_grpcmessage_getboolfield");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GRPCMessage_GetBoolField == nullptr)
			return LIBMCDRIVER_GRPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GRPCMessage_SetFloatField = (PLibMCDriver_GRPCGRPCMessage_SetFloatFieldPtr) GetProcAddress(hLibrary, "libmcdriver_grpc_grpcmessage_setfloatfield");
		#else // _WIN32
		pWrapperTable->m_GRPCMessage_SetFloatField = (PLibMCDriver_GRPCGRPCMessage_SetFloatFieldPtr) dlsym(hLibrary, "libmcdriver_grpc_grpcmessage_setfloatfield");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GRPCMessage_SetFloatField == nullptr)
			return LIBMCDRIVER_GRPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GRPCMessage_GetFloatField = (PLibMCDriver_GRPCGRPCMessage_GetFloatFieldPtr) GetProcAddress(hLibrary, "libmcdriver_grpc_grpcmessage_getfloatfield");
		#else // _WIN32
		pWrapperTable->m_GRPCMessage_GetFloatField = (PLibMCDriver_GRPCGRPCMessage_GetFloatFieldPtr) dlsym(hLibrary, "libmcdriver_grpc_grpcmessage_getfloatfield");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GRPCMessage_GetFloatField == nullptr)
			return LIBMCDRIVER_GRPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GRPCMessage_SetDoubleField = (PLibMCDriver_GRPCGRPCMessage_SetDoubleFieldPtr) GetProcAddress(hLibrary, "libmcdriver_grpc_grpcmessage_setdoublefield");
		#else // _WIN32
		pWrapperTable->m_GRPCMessage_SetDoubleField = (PLibMCDriver_GRPCGRPCMessage_SetDoubleFieldPtr) dlsym(hLibrary, "libmcdriver_grpc_grpcmessage_setdoublefield");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GRPCMessage_SetDoubleField == nullptr)
			return LIBMCDRIVER_GRPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GRPCMessage_GetDoubleField = (PLibMCDriver_GRPCGRPCMessage_GetDoubleFieldPtr) GetProcAddress(hLibrary, "libmcdriver_grpc_grpcmessage_getdoublefield");
		#else // _WIN32
		pWrapperTable->m_GRPCMessage_GetDoubleField = (PLibMCDriver_GRPCGRPCMessage_GetDoubleFieldPtr) dlsym(hLibrary, "libmcdriver_grpc_grpcmessage_getdoublefield");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GRPCMessage_GetDoubleField == nullptr)
			return LIBMCDRIVER_GRPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GRPCResponse_GetResponseType = (PLibMCDriver_GRPCGRPCResponse_GetResponseTypePtr) GetProcAddress(hLibrary, "libmcdriver_grpc_grpcresponse_getresponsetype");
		#else // _WIN32
		pWrapperTable->m_GRPCResponse_GetResponseType = (PLibMCDriver_GRPCGRPCResponse_GetResponseTypePtr) dlsym(hLibrary, "libmcdriver_grpc_grpcresponse_getresponsetype");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GRPCResponse_GetResponseType == nullptr)
			return LIBMCDRIVER_GRPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GRPCRequest_GetRequestType = (PLibMCDriver_GRPCGRPCRequest_GetRequestTypePtr) GetProcAddress(hLibrary, "libmcdriver_grpc_grpcrequest_getrequesttype");
		#else // _WIN32
		pWrapperTable->m_GRPCRequest_GetRequestType = (PLibMCDriver_GRPCGRPCRequest_GetRequestTypePtr) dlsym(hLibrary, "libmcdriver_grpc_grpcrequest_getrequesttype");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GRPCRequest_GetRequestType == nullptr)
			return LIBMCDRIVER_GRPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GRPCRequest_GetExpectedResponseType = (PLibMCDriver_GRPCGRPCRequest_GetExpectedResponseTypePtr) GetProcAddress(hLibrary, "libmcdriver_grpc_grpcrequest_getexpectedresponsetype");
		#else // _WIN32
		pWrapperTable->m_GRPCRequest_GetExpectedResponseType = (PLibMCDriver_GRPCGRPCRequest_GetExpectedResponseTypePtr) dlsym(hLibrary, "libmcdriver_grpc_grpcrequest_getexpectedresponsetype");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GRPCRequest_GetExpectedResponseType == nullptr)
			return LIBMCDRIVER_GRPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GRPCRequest_SendBlocking = (PLibMCDriver_GRPCGRPCRequest_SendBlockingPtr) GetProcAddress(hLibrary, "libmcdriver_grpc_grpcrequest_sendblocking");
		#else // _WIN32
		pWrapperTable->m_GRPCRequest_SendBlocking = (PLibMCDriver_GRPCGRPCRequest_SendBlockingPtr) dlsym(hLibrary, "libmcdriver_grpc_grpcrequest_sendblocking");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GRPCRequest_SendBlocking == nullptr)
			return LIBMCDRIVER_GRPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GRPCConnection_GetEndPoint = (PLibMCDriver_GRPCGRPCConnection_GetEndPointPtr) GetProcAddress(hLibrary, "libmcdriver_grpc_grpcconnection_getendpoint");
		#else // _WIN32
		pWrapperTable->m_GRPCConnection_GetEndPoint = (PLibMCDriver_GRPCGRPCConnection_GetEndPointPtr) dlsym(hLibrary, "libmcdriver_grpc_grpcconnection_getendpoint");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GRPCConnection_GetEndPoint == nullptr)
			return LIBMCDRIVER_GRPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GRPCConnection_Close = (PLibMCDriver_GRPCGRPCConnection_ClosePtr) GetProcAddress(hLibrary, "libmcdriver_grpc_grpcconnection_close");
		#else // _WIN32
		pWrapperTable->m_GRPCConnection_Close = (PLibMCDriver_GRPCGRPCConnection_ClosePtr) dlsym(hLibrary, "libmcdriver_grpc_grpcconnection_close");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GRPCConnection_Close == nullptr)
			return LIBMCDRIVER_GRPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GRPCConnection_CreateStaticRequest = (PLibMCDriver_GRPCGRPCConnection_CreateStaticRequestPtr) GetProcAddress(hLibrary, "libmcdriver_grpc_grpcconnection_createstaticrequest");
		#else // _WIN32
		pWrapperTable->m_GRPCConnection_CreateStaticRequest = (PLibMCDriver_GRPCGRPCConnection_CreateStaticRequestPtr) dlsym(hLibrary, "libmcdriver_grpc_grpcconnection_createstaticrequest");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GRPCConnection_CreateStaticRequest == nullptr)
			return LIBMCDRIVER_GRPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_GRPC_SetToSimulationMode = (PLibMCDriver_GRPCDriver_GRPC_SetToSimulationModePtr) GetProcAddress(hLibrary, "libmcdriver_grpc_driver_grpc_settosimulationmode");
		#else // _WIN32
		pWrapperTable->m_Driver_GRPC_SetToSimulationMode = (PLibMCDriver_GRPCDriver_GRPC_SetToSimulationModePtr) dlsym(hLibrary, "libmcdriver_grpc_driver_grpc_settosimulationmode");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_GRPC_SetToSimulationMode == nullptr)
			return LIBMCDRIVER_GRPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_GRPC_IsSimulationMode = (PLibMCDriver_GRPCDriver_GRPC_IsSimulationModePtr) GetProcAddress(hLibrary, "libmcdriver_grpc_driver_grpc_issimulationmode");
		#else // _WIN32
		pWrapperTable->m_Driver_GRPC_IsSimulationMode = (PLibMCDriver_GRPCDriver_GRPC_IsSimulationModePtr) dlsym(hLibrary, "libmcdriver_grpc_driver_grpc_issimulationmode");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_GRPC_IsSimulationMode == nullptr)
			return LIBMCDRIVER_GRPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_GRPC_ConnectUnsecure = (PLibMCDriver_GRPCDriver_GRPC_ConnectUnsecurePtr) GetProcAddress(hLibrary, "libmcdriver_grpc_driver_grpc_connectunsecure");
		#else // _WIN32
		pWrapperTable->m_Driver_GRPC_ConnectUnsecure = (PLibMCDriver_GRPCDriver_GRPC_ConnectUnsecurePtr) dlsym(hLibrary, "libmcdriver_grpc_driver_grpc_connectunsecure");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_GRPC_ConnectUnsecure == nullptr)
			return LIBMCDRIVER_GRPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_GRPC_FindConnection = (PLibMCDriver_GRPCDriver_GRPC_FindConnectionPtr) GetProcAddress(hLibrary, "libmcdriver_grpc_driver_grpc_findconnection");
		#else // _WIN32
		pWrapperTable->m_Driver_GRPC_FindConnection = (PLibMCDriver_GRPCDriver_GRPC_FindConnectionPtr) dlsym(hLibrary, "libmcdriver_grpc_driver_grpc_findconnection");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_GRPC_FindConnection == nullptr)
			return LIBMCDRIVER_GRPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GetVersion = (PLibMCDriver_GRPCGetVersionPtr) GetProcAddress(hLibrary, "libmcdriver_grpc_getversion");
		#else // _WIN32
		pWrapperTable->m_GetVersion = (PLibMCDriver_GRPCGetVersionPtr) dlsym(hLibrary, "libmcdriver_grpc_getversion");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GetVersion == nullptr)
			return LIBMCDRIVER_GRPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GetLastError = (PLibMCDriver_GRPCGetLastErrorPtr) GetProcAddress(hLibrary, "libmcdriver_grpc_getlasterror");
		#else // _WIN32
		pWrapperTable->m_GetLastError = (PLibMCDriver_GRPCGetLastErrorPtr) dlsym(hLibrary, "libmcdriver_grpc_getlasterror");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GetLastError == nullptr)
			return LIBMCDRIVER_GRPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ReleaseInstance = (PLibMCDriver_GRPCReleaseInstancePtr) GetProcAddress(hLibrary, "libmcdriver_grpc_releaseinstance");
		#else // _WIN32
		pWrapperTable->m_ReleaseInstance = (PLibMCDriver_GRPCReleaseInstancePtr) dlsym(hLibrary, "libmcdriver_grpc_releaseinstance");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ReleaseInstance == nullptr)
			return LIBMCDRIVER_GRPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_AcquireInstance = (PLibMCDriver_GRPCAcquireInstancePtr) GetProcAddress(hLibrary, "libmcdriver_grpc_acquireinstance");
		#else // _WIN32
		pWrapperTable->m_AcquireInstance = (PLibMCDriver_GRPCAcquireInstancePtr) dlsym(hLibrary, "libmcdriver_grpc_acquireinstance");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_AcquireInstance == nullptr)
			return LIBMCDRIVER_GRPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_InjectComponent = (PLibMCDriver_GRPCInjectComponentPtr) GetProcAddress(hLibrary, "libmcdriver_grpc_injectcomponent");
		#else // _WIN32
		pWrapperTable->m_InjectComponent = (PLibMCDriver_GRPCInjectComponentPtr) dlsym(hLibrary, "libmcdriver_grpc_injectcomponent");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_InjectComponent == nullptr)
			return LIBMCDRIVER_GRPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GetSymbolLookupMethod = (PLibMCDriver_GRPCGetSymbolLookupMethodPtr) GetProcAddress(hLibrary, "libmcdriver_grpc_getsymbollookupmethod");
		#else // _WIN32
		pWrapperTable->m_GetSymbolLookupMethod = (PLibMCDriver_GRPCGetSymbolLookupMethodPtr) dlsym(hLibrary, "libmcdriver_grpc_getsymbollookupmethod");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GetSymbolLookupMethod == nullptr)
			return LIBMCDRIVER_GRPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_CreateDriver = (PLibMCDriver_GRPCCreateDriverPtr) GetProcAddress(hLibrary, "libmcdriver_grpc_createdriver");
		#else // _WIN32
		pWrapperTable->m_CreateDriver = (PLibMCDriver_GRPCCreateDriverPtr) dlsym(hLibrary, "libmcdriver_grpc_createdriver");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_CreateDriver == nullptr)
			return LIBMCDRIVER_GRPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		pWrapperTable->m_LibraryHandle = hLibrary;
		return LIBMCDRIVER_GRPC_SUCCESS;
	}

	inline LibMCDriver_GRPCResult CWrapper::loadWrapperTableFromSymbolLookupMethod(sLibMCDriver_GRPCDynamicWrapperTable * pWrapperTable, void* pSymbolLookupMethod)
{
		if (pWrapperTable == nullptr)
			return LIBMCDRIVER_GRPC_ERROR_INVALIDPARAM;
		if (pSymbolLookupMethod == nullptr)
			return LIBMCDRIVER_GRPC_ERROR_INVALIDPARAM;
		
		typedef LibMCDriver_GRPCResult(*SymbolLookupType)(const char*, void**);
		
		SymbolLookupType pLookup = (SymbolLookupType)pSymbolLookupMethod;
		
		LibMCDriver_GRPCResult eLookupError = LIBMCDRIVER_GRPC_SUCCESS;
		eLookupError = (*pLookup)("libmcdriver_grpc_driver_configure", (void**)&(pWrapperTable->m_Driver_Configure));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_Configure == nullptr) )
			return LIBMCDRIVER_GRPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_grpc_driver_getname", (void**)&(pWrapperTable->m_Driver_GetName));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_GetName == nullptr) )
			return LIBMCDRIVER_GRPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_grpc_driver_gettype", (void**)&(pWrapperTable->m_Driver_GetType));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_GetType == nullptr) )
			return LIBMCDRIVER_GRPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_grpc_driver_getversion", (void**)&(pWrapperTable->m_Driver_GetVersion));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_GetVersion == nullptr) )
			return LIBMCDRIVER_GRPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_grpc_driver_queryparameters", (void**)&(pWrapperTable->m_Driver_QueryParameters));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_QueryParameters == nullptr) )
			return LIBMCDRIVER_GRPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_grpc_driver_queryparametersex", (void**)&(pWrapperTable->m_Driver_QueryParametersEx));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_QueryParametersEx == nullptr) )
			return LIBMCDRIVER_GRPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_grpc_grpcmessage_hasfield", (void**)&(pWrapperTable->m_GRPCMessage_HasField));
		if ( (eLookupError != 0) || (pWrapperTable->m_GRPCMessage_HasField == nullptr) )
			return LIBMCDRIVER_GRPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_grpc_grpcmessage_hasmessagefield", (void**)&(pWrapperTable->m_GRPCMessage_HasMessageField));
		if ( (eLookupError != 0) || (pWrapperTable->m_GRPCMessage_HasMessageField == nullptr) )
			return LIBMCDRIVER_GRPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_grpc_grpcmessage_getmessagefield", (void**)&(pWrapperTable->m_GRPCMessage_GetMessageField));
		if ( (eLookupError != 0) || (pWrapperTable->m_GRPCMessage_GetMessageField == nullptr) )
			return LIBMCDRIVER_GRPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_grpc_grpcmessage_hasstringfield", (void**)&(pWrapperTable->m_GRPCMessage_HasStringField));
		if ( (eLookupError != 0) || (pWrapperTable->m_GRPCMessage_HasStringField == nullptr) )
			return LIBMCDRIVER_GRPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_grpc_grpcmessage_setstringfield", (void**)&(pWrapperTable->m_GRPCMessage_SetStringField));
		if ( (eLookupError != 0) || (pWrapperTable->m_GRPCMessage_SetStringField == nullptr) )
			return LIBMCDRIVER_GRPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_grpc_grpcmessage_getstringfield", (void**)&(pWrapperTable->m_GRPCMessage_GetStringField));
		if ( (eLookupError != 0) || (pWrapperTable->m_GRPCMessage_GetStringField == nullptr) )
			return LIBMCDRIVER_GRPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_grpc_grpcmessage_setint32field", (void**)&(pWrapperTable->m_GRPCMessage_SetInt32Field));
		if ( (eLookupError != 0) || (pWrapperTable->m_GRPCMessage_SetInt32Field == nullptr) )
			return LIBMCDRIVER_GRPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_grpc_grpcmessage_getint32field", (void**)&(pWrapperTable->m_GRPCMessage_GetInt32Field));
		if ( (eLookupError != 0) || (pWrapperTable->m_GRPCMessage_GetInt32Field == nullptr) )
			return LIBMCDRIVER_GRPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_grpc_grpcmessage_setuint32field", (void**)&(pWrapperTable->m_GRPCMessage_SetUInt32Field));
		if ( (eLookupError != 0) || (pWrapperTable->m_GRPCMessage_SetUInt32Field == nullptr) )
			return LIBMCDRIVER_GRPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_grpc_grpcmessage_getuint32field", (void**)&(pWrapperTable->m_GRPCMessage_GetUInt32Field));
		if ( (eLookupError != 0) || (pWrapperTable->m_GRPCMessage_GetUInt32Field == nullptr) )
			return LIBMCDRIVER_GRPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_grpc_grpcmessage_setint64field", (void**)&(pWrapperTable->m_GRPCMessage_SetInt64Field));
		if ( (eLookupError != 0) || (pWrapperTable->m_GRPCMessage_SetInt64Field == nullptr) )
			return LIBMCDRIVER_GRPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_grpc_grpcmessage_getint64field", (void**)&(pWrapperTable->m_GRPCMessage_GetInt64Field));
		if ( (eLookupError != 0) || (pWrapperTable->m_GRPCMessage_GetInt64Field == nullptr) )
			return LIBMCDRIVER_GRPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_grpc_grpcmessage_setuint64field", (void**)&(pWrapperTable->m_GRPCMessage_SetUInt64Field));
		if ( (eLookupError != 0) || (pWrapperTable->m_GRPCMessage_SetUInt64Field == nullptr) )
			return LIBMCDRIVER_GRPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_grpc_grpcmessage_getuint64field", (void**)&(pWrapperTable->m_GRPCMessage_GetUInt64Field));
		if ( (eLookupError != 0) || (pWrapperTable->m_GRPCMessage_GetUInt64Field == nullptr) )
			return LIBMCDRIVER_GRPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_grpc_grpcmessage_setboolfield", (void**)&(pWrapperTable->m_GRPCMessage_SetBoolField));
		if ( (eLookupError != 0) || (pWrapperTable->m_GRPCMessage_SetBoolField == nullptr) )
			return LIBMCDRIVER_GRPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_grpc_grpcmessage_getboolfield", (void**)&(pWrapperTable->m_GRPCMessage_GetBoolField));
		if ( (eLookupError != 0) || (pWrapperTable->m_GRPCMessage_GetBoolField == nullptr) )
			return LIBMCDRIVER_GRPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_grpc_grpcmessage_setfloatfield", (void**)&(pWrapperTable->m_GRPCMessage_SetFloatField));
		if ( (eLookupError != 0) || (pWrapperTable->m_GRPCMessage_SetFloatField == nullptr) )
			return LIBMCDRIVER_GRPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_grpc_grpcmessage_getfloatfield", (void**)&(pWrapperTable->m_GRPCMessage_GetFloatField));
		if ( (eLookupError != 0) || (pWrapperTable->m_GRPCMessage_GetFloatField == nullptr) )
			return LIBMCDRIVER_GRPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_grpc_grpcmessage_setdoublefield", (void**)&(pWrapperTable->m_GRPCMessage_SetDoubleField));
		if ( (eLookupError != 0) || (pWrapperTable->m_GRPCMessage_SetDoubleField == nullptr) )
			return LIBMCDRIVER_GRPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_grpc_grpcmessage_getdoublefield", (void**)&(pWrapperTable->m_GRPCMessage_GetDoubleField));
		if ( (eLookupError != 0) || (pWrapperTable->m_GRPCMessage_GetDoubleField == nullptr) )
			return LIBMCDRIVER_GRPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_grpc_grpcresponse_getresponsetype", (void**)&(pWrapperTable->m_GRPCResponse_GetResponseType));
		if ( (eLookupError != 0) || (pWrapperTable->m_GRPCResponse_GetResponseType == nullptr) )
			return LIBMCDRIVER_GRPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_grpc_grpcrequest_getrequesttype", (void**)&(pWrapperTable->m_GRPCRequest_GetRequestType));
		if ( (eLookupError != 0) || (pWrapperTable->m_GRPCRequest_GetRequestType == nullptr) )
			return LIBMCDRIVER_GRPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_grpc_grpcrequest_getexpectedresponsetype", (void**)&(pWrapperTable->m_GRPCRequest_GetExpectedResponseType));
		if ( (eLookupError != 0) || (pWrapperTable->m_GRPCRequest_GetExpectedResponseType == nullptr) )
			return LIBMCDRIVER_GRPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_grpc_grpcrequest_sendblocking", (void**)&(pWrapperTable->m_GRPCRequest_SendBlocking));
		if ( (eLookupError != 0) || (pWrapperTable->m_GRPCRequest_SendBlocking == nullptr) )
			return LIBMCDRIVER_GRPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_grpc_grpcconnection_getendpoint", (void**)&(pWrapperTable->m_GRPCConnection_GetEndPoint));
		if ( (eLookupError != 0) || (pWrapperTable->m_GRPCConnection_GetEndPoint == nullptr) )
			return LIBMCDRIVER_GRPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_grpc_grpcconnection_close", (void**)&(pWrapperTable->m_GRPCConnection_Close));
		if ( (eLookupError != 0) || (pWrapperTable->m_GRPCConnection_Close == nullptr) )
			return LIBMCDRIVER_GRPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_grpc_grpcconnection_createstaticrequest", (void**)&(pWrapperTable->m_GRPCConnection_CreateStaticRequest));
		if ( (eLookupError != 0) || (pWrapperTable->m_GRPCConnection_CreateStaticRequest == nullptr) )
			return LIBMCDRIVER_GRPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_grpc_driver_grpc_settosimulationmode", (void**)&(pWrapperTable->m_Driver_GRPC_SetToSimulationMode));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_GRPC_SetToSimulationMode == nullptr) )
			return LIBMCDRIVER_GRPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_grpc_driver_grpc_issimulationmode", (void**)&(pWrapperTable->m_Driver_GRPC_IsSimulationMode));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_GRPC_IsSimulationMode == nullptr) )
			return LIBMCDRIVER_GRPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_grpc_driver_grpc_connectunsecure", (void**)&(pWrapperTable->m_Driver_GRPC_ConnectUnsecure));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_GRPC_ConnectUnsecure == nullptr) )
			return LIBMCDRIVER_GRPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_grpc_driver_grpc_findconnection", (void**)&(pWrapperTable->m_Driver_GRPC_FindConnection));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_GRPC_FindConnection == nullptr) )
			return LIBMCDRIVER_GRPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_grpc_getversion", (void**)&(pWrapperTable->m_GetVersion));
		if ( (eLookupError != 0) || (pWrapperTable->m_GetVersion == nullptr) )
			return LIBMCDRIVER_GRPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_grpc_getlasterror", (void**)&(pWrapperTable->m_GetLastError));
		if ( (eLookupError != 0) || (pWrapperTable->m_GetLastError == nullptr) )
			return LIBMCDRIVER_GRPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_grpc_releaseinstance", (void**)&(pWrapperTable->m_ReleaseInstance));
		if ( (eLookupError != 0) || (pWrapperTable->m_ReleaseInstance == nullptr) )
			return LIBMCDRIVER_GRPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_grpc_acquireinstance", (void**)&(pWrapperTable->m_AcquireInstance));
		if ( (eLookupError != 0) || (pWrapperTable->m_AcquireInstance == nullptr) )
			return LIBMCDRIVER_GRPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_grpc_injectcomponent", (void**)&(pWrapperTable->m_InjectComponent));
		if ( (eLookupError != 0) || (pWrapperTable->m_InjectComponent == nullptr) )
			return LIBMCDRIVER_GRPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_grpc_getsymbollookupmethod", (void**)&(pWrapperTable->m_GetSymbolLookupMethod));
		if ( (eLookupError != 0) || (pWrapperTable->m_GetSymbolLookupMethod == nullptr) )
			return LIBMCDRIVER_GRPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_grpc_createdriver", (void**)&(pWrapperTable->m_CreateDriver));
		if ( (eLookupError != 0) || (pWrapperTable->m_CreateDriver == nullptr) )
			return LIBMCDRIVER_GRPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		return LIBMCDRIVER_GRPC_SUCCESS;
}

	
	
	/**
	 * Method definitions for class CBase
	 */
	
	/**
	 * Method definitions for class CDriver
	 */
	
	/**
	* CDriver::Configure - Configures a driver with its specific configuration data.
	* @param[in] sConfigurationString - Configuration data of driver.
	*/
	void CDriver::Configure(const std::string & sConfigurationString)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_Configure(m_pHandle, sConfigurationString.c_str()));
	}
	
	/**
	* CDriver::GetName - returns the name identifier of the driver
	* @return Name of the driver.
	*/
	std::string CDriver::GetName()
	{
		LibMCDriver_GRPC_uint32 bytesNeededName = 0;
		LibMCDriver_GRPC_uint32 bytesWrittenName = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetName(m_pHandle, 0, &bytesNeededName, nullptr));
		std::vector<char> bufferName(bytesNeededName);
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetName(m_pHandle, bytesNeededName, &bytesWrittenName, &bufferName[0]));
		
		return std::string(&bufferName[0]);
	}
	
	/**
	* CDriver::GetType - returns the type identifier of the driver
	* @return Type of the driver.
	*/
	std::string CDriver::GetType()
	{
		LibMCDriver_GRPC_uint32 bytesNeededType = 0;
		LibMCDriver_GRPC_uint32 bytesWrittenType = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetType(m_pHandle, 0, &bytesNeededType, nullptr));
		std::vector<char> bufferType(bytesNeededType);
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetType(m_pHandle, bytesNeededType, &bytesWrittenType, &bufferType[0]));
		
		return std::string(&bufferType[0]);
	}
	
	/**
	* CDriver::GetVersion - returns the version identifiers of the driver
	* @param[out] nMajor - Major version.
	* @param[out] nMinor - Minor version.
	* @param[out] nMicro - Micro version.
	* @param[out] sBuild - Build identifier.
	*/
	void CDriver::GetVersion(LibMCDriver_GRPC_uint32 & nMajor, LibMCDriver_GRPC_uint32 & nMinor, LibMCDriver_GRPC_uint32 & nMicro, std::string & sBuild)
	{
		LibMCDriver_GRPC_uint32 bytesNeededBuild = 0;
		LibMCDriver_GRPC_uint32 bytesWrittenBuild = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetVersion(m_pHandle, &nMajor, &nMinor, &nMicro, 0, &bytesNeededBuild, nullptr));
		std::vector<char> bufferBuild(bytesNeededBuild);
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetVersion(m_pHandle, &nMajor, &nMinor, &nMicro, bytesNeededBuild, &bytesWrittenBuild, &bufferBuild[0]));
		sBuild = std::string(&bufferBuild[0]);
	}
	
	/**
	* CDriver::QueryParameters - Updates the driver parameters in the driver environment. Should only be called in the driver thread.
	*/
	void CDriver::QueryParameters()
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_QueryParameters(m_pHandle));
	}
	
	/**
	* CDriver::QueryParametersEx - Updates the driver parameters in the driver environment. Might be called out of thread. Implementation MUST be able to handle parallel calls.
	* @param[in] pDriverUpdateInstance - Status update instance.
	*/
	void CDriver::QueryParametersEx(classParam<LibMCEnv::CDriverStatusUpdateSession> pDriverUpdateInstance)
	{
		LibMCEnvHandle hDriverUpdateInstance = pDriverUpdateInstance.GetHandle();
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_QueryParametersEx(m_pHandle, hDriverUpdateInstance));
	}
	
	/**
	 * Method definitions for class CGRPCMessage
	 */
	
	/**
	* CGRPCMessage::HasField - Returns if the message has a field of a certain name.
	* @param[in] sFieldName - Name of the field.
	* @return True if field exists.
	*/
	bool CGRPCMessage::HasField(const std::string & sFieldName)
	{
		bool resultFieldExists = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_GRPCMessage_HasField(m_pHandle, sFieldName.c_str(), &resultFieldExists));
		
		return resultFieldExists;
	}
	
	/**
	* CGRPCMessage::HasMessageField - Returns if the message has a field of a certain name and this field is a submessage field.
	* @param[in] sFieldName - Name of the field.
	* @return True if field exists and is of type message.
	*/
	bool CGRPCMessage::HasMessageField(const std::string & sFieldName)
	{
		bool resultMessageFieldExists = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_GRPCMessage_HasMessageField(m_pHandle, sFieldName.c_str(), &resultMessageFieldExists));
		
		return resultMessageFieldExists;
	}
	
	/**
	* CGRPCMessage::GetMessageField - Returns the submessage of a field. Fails if the field does not exist or is not a submessage field.
	* @param[in] sFieldName - Name of the field.
	* @return Sub message object
	*/
	PGRPCMessage CGRPCMessage::GetMessageField(const std::string & sFieldName)
	{
		LibMCDriver_GRPCHandle hMessageFieldInstance = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_GRPCMessage_GetMessageField(m_pHandle, sFieldName.c_str(), &hMessageFieldInstance));
		
		if (!hMessageFieldInstance) {
			CheckError(LIBMCDRIVER_GRPC_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CGRPCMessage>(m_pWrapper, hMessageFieldInstance);
	}
	
	/**
	* CGRPCMessage::HasStringField - Returns if the message has a field of a certain name and this field is a string field.
	* @param[in] sFieldName - Name of the field.
	* @return True if field exists and is of type string.
	*/
	bool CGRPCMessage::HasStringField(const std::string & sFieldName)
	{
		bool resultStringFieldExists = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_GRPCMessage_HasStringField(m_pHandle, sFieldName.c_str(), &resultStringFieldExists));
		
		return resultStringFieldExists;
	}
	
	/**
	* CGRPCMessage::SetStringField - Sets a string field of the message. Fails if the field does not exist or is not a string field.
	* @param[in] sFieldName - Name of the field.
	* @param[in] sValue - New value of the field.
	*/
	void CGRPCMessage::SetStringField(const std::string & sFieldName, const std::string & sValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_GRPCMessage_SetStringField(m_pHandle, sFieldName.c_str(), sValue.c_str()));
	}
	
	/**
	* CGRPCMessage::GetStringField - Gets a string field of the message. Fails if the field does not exist or is not a string field.
	* @param[in] sFieldName - Name of the field.
	* @return Current value of the field.
	*/
	std::string CGRPCMessage::GetStringField(const std::string & sFieldName)
	{
		LibMCDriver_GRPC_uint32 bytesNeededValue = 0;
		LibMCDriver_GRPC_uint32 bytesWrittenValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_GRPCMessage_GetStringField(m_pHandle, sFieldName.c_str(), 0, &bytesNeededValue, nullptr));
		std::vector<char> bufferValue(bytesNeededValue);
		CheckError(m_pWrapper->m_WrapperTable.m_GRPCMessage_GetStringField(m_pHandle, sFieldName.c_str(), bytesNeededValue, &bytesWrittenValue, &bufferValue[0]));
		
		return std::string(&bufferValue[0]);
	}
	
	/**
	* CGRPCMessage::SetInt32Field - Sets a int32 field of the message. Fails if the field does not exist or is not a int32 field.
	* @param[in] sFieldName - Name of the field.
	* @param[in] nValue - New value of the field.
	*/
	void CGRPCMessage::SetInt32Field(const std::string & sFieldName, const LibMCDriver_GRPC_int32 nValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_GRPCMessage_SetInt32Field(m_pHandle, sFieldName.c_str(), nValue));
	}
	
	/**
	* CGRPCMessage::GetInt32Field - Gets a int32 field of the message. Fails if the field does not exist or is not a int32 field.
	* @param[in] sFieldName - Name of the field.
	* @return Current value of the field.
	*/
	LibMCDriver_GRPC_int32 CGRPCMessage::GetInt32Field(const std::string & sFieldName)
	{
		LibMCDriver_GRPC_int32 resultValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_GRPCMessage_GetInt32Field(m_pHandle, sFieldName.c_str(), &resultValue));
		
		return resultValue;
	}
	
	/**
	* CGRPCMessage::SetUInt32Field - Sets a uint32 field of the message. Fails if the field does not exist or is not a uint32 field.
	* @param[in] sFieldName - Name of the field.
	* @param[in] nValue - New value of the field.
	*/
	void CGRPCMessage::SetUInt32Field(const std::string & sFieldName, const LibMCDriver_GRPC_uint32 nValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_GRPCMessage_SetUInt32Field(m_pHandle, sFieldName.c_str(), nValue));
	}
	
	/**
	* CGRPCMessage::GetUInt32Field - Gets a uint32 field of the message. Fails if the field does not exist or is not a uint32 field.
	* @param[in] sFieldName - Name of the field.
	* @return Current value of the field.
	*/
	LibMCDriver_GRPC_uint32 CGRPCMessage::GetUInt32Field(const std::string & sFieldName)
	{
		LibMCDriver_GRPC_uint32 resultValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_GRPCMessage_GetUInt32Field(m_pHandle, sFieldName.c_str(), &resultValue));
		
		return resultValue;
	}
	
	/**
	* CGRPCMessage::SetInt64Field - Sets a int64 field of the message. Fails if the field does not exist or is not a int64 field.
	* @param[in] sFieldName - Name of the field.
	* @param[in] nValue - New value of the field.
	*/
	void CGRPCMessage::SetInt64Field(const std::string & sFieldName, const LibMCDriver_GRPC_int64 nValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_GRPCMessage_SetInt64Field(m_pHandle, sFieldName.c_str(), nValue));
	}
	
	/**
	* CGRPCMessage::GetInt64Field - Gets a int64 field of the message. Fails if the field does not exist or is not a int64 field.
	* @param[in] sFieldName - Name of the field.
	* @return Current value of the field.
	*/
	LibMCDriver_GRPC_int64 CGRPCMessage::GetInt64Field(const std::string & sFieldName)
	{
		LibMCDriver_GRPC_int64 resultValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_GRPCMessage_GetInt64Field(m_pHandle, sFieldName.c_str(), &resultValue));
		
		return resultValue;
	}
	
	/**
	* CGRPCMessage::SetUInt64Field - Sets a uint64 field of the message. Fails if the field does not exist or is not a uint64 field.
	* @param[in] sFieldName - Name of the field.
	* @param[in] nValue - New value of the field.
	*/
	void CGRPCMessage::SetUInt64Field(const std::string & sFieldName, const LibMCDriver_GRPC_uint64 nValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_GRPCMessage_SetUInt64Field(m_pHandle, sFieldName.c_str(), nValue));
	}
	
	/**
	* CGRPCMessage::GetUInt64Field - Gets a uint64 field of the message. Fails if the field does not exist or is not a uint64 field.
	* @param[in] sFieldName - Name of the field.
	* @return Current value of the field.
	*/
	LibMCDriver_GRPC_uint64 CGRPCMessage::GetUInt64Field(const std::string & sFieldName)
	{
		LibMCDriver_GRPC_uint64 resultValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_GRPCMessage_GetUInt64Field(m_pHandle, sFieldName.c_str(), &resultValue));
		
		return resultValue;
	}
	
	/**
	* CGRPCMessage::SetBoolField - Sets a bool field of the message. Fails if the field does not exist or is not a bool field.
	* @param[in] sFieldName - Name of the field.
	* @param[in] bValue - New value of the field.
	*/
	void CGRPCMessage::SetBoolField(const std::string & sFieldName, const bool bValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_GRPCMessage_SetBoolField(m_pHandle, sFieldName.c_str(), bValue));
	}
	
	/**
	* CGRPCMessage::GetBoolField - Gets a bool field of the message. Fails if the field does not exist or is not a bool field.
	* @param[in] sFieldName - Name of the field.
	* @return Current value of the field.
	*/
	bool CGRPCMessage::GetBoolField(const std::string & sFieldName)
	{
		bool resultValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_GRPCMessage_GetBoolField(m_pHandle, sFieldName.c_str(), &resultValue));
		
		return resultValue;
	}
	
	/**
	* CGRPCMessage::SetFloatField - Sets a float field of the message. Fails if the field does not exist or is not a float field.
	* @param[in] sFieldName - Name of the field.
	* @param[in] fValue - New value of the field.
	*/
	void CGRPCMessage::SetFloatField(const std::string & sFieldName, const LibMCDriver_GRPC_single fValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_GRPCMessage_SetFloatField(m_pHandle, sFieldName.c_str(), fValue));
	}
	
	/**
	* CGRPCMessage::GetFloatField - Gets a float field of the message. Fails if the field does not exist or is not a float field.
	* @param[in] sFieldName - Name of the field.
	* @return Current value of the field.
	*/
	LibMCDriver_GRPC_single CGRPCMessage::GetFloatField(const std::string & sFieldName)
	{
		LibMCDriver_GRPC_single resultValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_GRPCMessage_GetFloatField(m_pHandle, sFieldName.c_str(), &resultValue));
		
		return resultValue;
	}
	
	/**
	* CGRPCMessage::SetDoubleField - Sets a double field of the message. Fails if the field does not exist or is not a double field.
	* @param[in] sFieldName - Name of the field.
	* @param[in] dValue - New value of the field.
	*/
	void CGRPCMessage::SetDoubleField(const std::string & sFieldName, const LibMCDriver_GRPC_double dValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_GRPCMessage_SetDoubleField(m_pHandle, sFieldName.c_str(), dValue));
	}
	
	/**
	* CGRPCMessage::GetDoubleField - Gets a double field of the message. Fails if the field does not exist or is not a double field.
	* @param[in] sFieldName - Name of the field.
	* @return Current value of the field.
	*/
	LibMCDriver_GRPC_double CGRPCMessage::GetDoubleField(const std::string & sFieldName)
	{
		LibMCDriver_GRPC_double resultValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_GRPCMessage_GetDoubleField(m_pHandle, sFieldName.c_str(), &resultValue));
		
		return resultValue;
	}
	
	/**
	 * Method definitions for class CGRPCResponse
	 */
	
	/**
	* CGRPCResponse::GetResponseType - Returns the response type of the connection.
	* @return Message type identifier.
	*/
	std::string CGRPCResponse::GetResponseType()
	{
		LibMCDriver_GRPC_uint32 bytesNeededResponseType = 0;
		LibMCDriver_GRPC_uint32 bytesWrittenResponseType = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_GRPCResponse_GetResponseType(m_pHandle, 0, &bytesNeededResponseType, nullptr));
		std::vector<char> bufferResponseType(bytesNeededResponseType);
		CheckError(m_pWrapper->m_WrapperTable.m_GRPCResponse_GetResponseType(m_pHandle, bytesNeededResponseType, &bytesWrittenResponseType, &bufferResponseType[0]));
		
		return std::string(&bufferResponseType[0]);
	}
	
	/**
	 * Method definitions for class CGRPCRequest
	 */
	
	/**
	* CGRPCRequest::GetRequestType - Returns the request type of the connection.
	* @return Message type identifier.
	*/
	std::string CGRPCRequest::GetRequestType()
	{
		LibMCDriver_GRPC_uint32 bytesNeededRequestType = 0;
		LibMCDriver_GRPC_uint32 bytesWrittenRequestType = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_GRPCRequest_GetRequestType(m_pHandle, 0, &bytesNeededRequestType, nullptr));
		std::vector<char> bufferRequestType(bytesNeededRequestType);
		CheckError(m_pWrapper->m_WrapperTable.m_GRPCRequest_GetRequestType(m_pHandle, bytesNeededRequestType, &bytesWrittenRequestType, &bufferRequestType[0]));
		
		return std::string(&bufferRequestType[0]);
	}
	
	/**
	* CGRPCRequest::GetExpectedResponseType - Returns the expected response type of the connection.
	* @return Message type identifier.
	*/
	std::string CGRPCRequest::GetExpectedResponseType()
	{
		LibMCDriver_GRPC_uint32 bytesNeededExpectedResponseType = 0;
		LibMCDriver_GRPC_uint32 bytesWrittenExpectedResponseType = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_GRPCRequest_GetExpectedResponseType(m_pHandle, 0, &bytesNeededExpectedResponseType, nullptr));
		std::vector<char> bufferExpectedResponseType(bytesNeededExpectedResponseType);
		CheckError(m_pWrapper->m_WrapperTable.m_GRPCRequest_GetExpectedResponseType(m_pHandle, bytesNeededExpectedResponseType, &bytesWrittenExpectedResponseType, &bufferExpectedResponseType[0]));
		
		return std::string(&bufferExpectedResponseType[0]);
	}
	
	/**
	* CGRPCRequest::SendBlocking - Sends the request to the end point and waits for a response.
	* @param[in] sServiceMethod - Service method to call.
	* @param[in] nTimeOutInMS - Timeout for the response in MS.
	* @return Response Instance
	*/
	PGRPCResponse CGRPCRequest::SendBlocking(const std::string & sServiceMethod, const LibMCDriver_GRPC_uint32 nTimeOutInMS)
	{
		LibMCDriver_GRPCHandle hResponseInstance = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_GRPCRequest_SendBlocking(m_pHandle, sServiceMethod.c_str(), nTimeOutInMS, &hResponseInstance));
		
		if (!hResponseInstance) {
			CheckError(LIBMCDRIVER_GRPC_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CGRPCResponse>(m_pWrapper, hResponseInstance);
	}
	
	/**
	 * Method definitions for class CGRPCConnection
	 */
	
	/**
	* CGRPCConnection::GetEndPoint - Returns the end point of the connection.
	* @return End point of the connection.
	*/
	std::string CGRPCConnection::GetEndPoint()
	{
		LibMCDriver_GRPC_uint32 bytesNeededEndPoint = 0;
		LibMCDriver_GRPC_uint32 bytesWrittenEndPoint = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_GRPCConnection_GetEndPoint(m_pHandle, 0, &bytesNeededEndPoint, nullptr));
		std::vector<char> bufferEndPoint(bytesNeededEndPoint);
		CheckError(m_pWrapper->m_WrapperTable.m_GRPCConnection_GetEndPoint(m_pHandle, bytesNeededEndPoint, &bytesWrittenEndPoint, &bufferEndPoint[0]));
		
		return std::string(&bufferEndPoint[0]);
	}
	
	/**
	* CGRPCConnection::Close - Closes the connection. All subsequent calls to the connection will fail.
	*/
	void CGRPCConnection::Close()
	{
		CheckError(m_pWrapper->m_WrapperTable.m_GRPCConnection_Close(m_pHandle));
	}
	
	/**
	* CGRPCConnection::CreateStaticRequest - Creates a message request to the end point.
	* @param[in] sRequestTypeIdentifier - Message Type Identifier of the request.
	* @param[in] sResponseTypeIdentifier - Message Type Identifier of the expected response.
	* @return Request Instance
	*/
	PGRPCRequest CGRPCConnection::CreateStaticRequest(const std::string & sRequestTypeIdentifier, const std::string & sResponseTypeIdentifier)
	{
		LibMCDriver_GRPCHandle hRequestInstance = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_GRPCConnection_CreateStaticRequest(m_pHandle, sRequestTypeIdentifier.c_str(), sResponseTypeIdentifier.c_str(), &hRequestInstance));
		
		if (!hRequestInstance) {
			CheckError(LIBMCDRIVER_GRPC_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CGRPCRequest>(m_pWrapper, hRequestInstance);
	}
	
	/**
	 * Method definitions for class CDriver_GRPC
	 */
	
	/**
	* CDriver_GRPC::SetToSimulationMode - Turns the driver into a simulation mode.
	*/
	void CDriver_GRPC::SetToSimulationMode()
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GRPC_SetToSimulationMode(m_pHandle));
	}
	
	/**
	* CDriver_GRPC::IsSimulationMode - Returns if the driver is in simulation mode.
	* @return Flag if driver is in simulation mode.
	*/
	bool CDriver_GRPC::IsSimulationMode()
	{
		bool resultSimulationModeEnabled = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GRPC_IsSimulationMode(m_pHandle, &resultSimulationModeEnabled));
		
		return resultSimulationModeEnabled;
	}
	
	/**
	* CDriver_GRPC::ConnectUnsecure - Connects to a GRPC end point.
	* @param[in] sIdentifier - Connection Identifier.
	* @param[in] sNetworkCredentials - Network Credentials.
	* @param[in] sProtobufDefinition - Protobuf definition file.
	* @return Connection instance in case of success.
	*/
	PGRPCConnection CDriver_GRPC::ConnectUnsecure(const std::string & sIdentifier, const std::string & sNetworkCredentials, const std::string & sProtobufDefinition)
	{
		LibMCDriver_GRPCHandle hConnectionInstance = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GRPC_ConnectUnsecure(m_pHandle, sIdentifier.c_str(), sNetworkCredentials.c_str(), sProtobufDefinition.c_str(), &hConnectionInstance));
		
		if (!hConnectionInstance) {
			CheckError(LIBMCDRIVER_GRPC_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CGRPCConnection>(m_pWrapper, hConnectionInstance);
	}
	
	/**
	* CDriver_GRPC::FindConnection - Finds a connection with a certain name.
	* @param[in] sIdentifier - Connection Identifier.
	* @param[in] bMustExist - Connection Identifier. If true, the call fails if the connection does not exist.
	* @return Connection instance in case of success. Null if the connection is not found.
	*/
	PGRPCConnection CDriver_GRPC::FindConnection(const std::string & sIdentifier, const bool bMustExist)
	{
		LibMCDriver_GRPCHandle hConnectionInstance = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GRPC_FindConnection(m_pHandle, sIdentifier.c_str(), bMustExist, &hConnectionInstance));
		
		if (hConnectionInstance) {
			return std::make_shared<CGRPCConnection>(m_pWrapper, hConnectionInstance);
		} else {
			return nullptr;
		}
	}

} // namespace LibMCDriver_GRPC

#endif // __LIBMCDRIVER_GRPC_CPPHEADER_DYNAMIC_CPP

