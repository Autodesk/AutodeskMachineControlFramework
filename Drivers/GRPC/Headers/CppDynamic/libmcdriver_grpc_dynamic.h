/*++

Copyright (C) 2023 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.8.0-develop.

Abstract: This is an autogenerated C++-Header file in order to allow an easy
 use of MC Driver GRPC

Interface version: 2.0.0

*/

#ifndef __LIBMCDRIVER_GRPC_DYNAMICHEADER_CPPTYPES
#define __LIBMCDRIVER_GRPC_DYNAMICHEADER_CPPTYPES

#include "libmcdriver_grpc_types.hpp"

#include "libmcenv_types.hpp"


/*************************************************************************************************************************
 Class definition for Base
**************************************************************************************************************************/

/*************************************************************************************************************************
 Class definition for Driver
**************************************************************************************************************************/

/**
* Configures a driver with its specific configuration data.
*
* @param[in] pDriver - Driver instance.
* @param[in] pConfigurationString - Configuration data of driver.
* @return error code or 0 (success)
*/
typedef LibMCDriver_GRPCResult (*PLibMCDriver_GRPCDriver_ConfigurePtr) (LibMCDriver_GRPC_Driver pDriver, const char * pConfigurationString);

/**
* returns the name identifier of the driver
*
* @param[in] pDriver - Driver instance.
* @param[in] nNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNameBuffer -  buffer of Name of the driver., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCDriver_GRPCResult (*PLibMCDriver_GRPCDriver_GetNamePtr) (LibMCDriver_GRPC_Driver pDriver, const LibMCDriver_GRPC_uint32 nNameBufferSize, LibMCDriver_GRPC_uint32* pNameNeededChars, char * pNameBuffer);

/**
* returns the type identifier of the driver
*
* @param[in] pDriver - Driver instance.
* @param[in] nTypeBufferSize - size of the buffer (including trailing 0)
* @param[out] pTypeNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pTypeBuffer -  buffer of Type of the driver., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCDriver_GRPCResult (*PLibMCDriver_GRPCDriver_GetTypePtr) (LibMCDriver_GRPC_Driver pDriver, const LibMCDriver_GRPC_uint32 nTypeBufferSize, LibMCDriver_GRPC_uint32* pTypeNeededChars, char * pTypeBuffer);

/**
* returns the version identifiers of the driver
*
* @param[in] pDriver - Driver instance.
* @param[out] pMajor - Major version.
* @param[out] pMinor - Minor version.
* @param[out] pMicro - Micro version.
* @param[in] nBuildBufferSize - size of the buffer (including trailing 0)
* @param[out] pBuildNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pBuildBuffer -  buffer of Build identifier., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCDriver_GRPCResult (*PLibMCDriver_GRPCDriver_GetVersionPtr) (LibMCDriver_GRPC_Driver pDriver, LibMCDriver_GRPC_uint32 * pMajor, LibMCDriver_GRPC_uint32 * pMinor, LibMCDriver_GRPC_uint32 * pMicro, const LibMCDriver_GRPC_uint32 nBuildBufferSize, LibMCDriver_GRPC_uint32* pBuildNeededChars, char * pBuildBuffer);

/**
* Updates the driver parameters in the driver environment. Should only be called in the driver thread.
*
* @param[in] pDriver - Driver instance.
* @return error code or 0 (success)
*/
typedef LibMCDriver_GRPCResult (*PLibMCDriver_GRPCDriver_QueryParametersPtr) (LibMCDriver_GRPC_Driver pDriver);

/**
* Updates the driver parameters in the driver environment. Might be called out of thread. Implementation MUST be able to handle parallel calls.
*
* @param[in] pDriver - Driver instance.
* @param[in] pDriverUpdateInstance - Status update instance.
* @return error code or 0 (success)
*/
typedef LibMCDriver_GRPCResult (*PLibMCDriver_GRPCDriver_QueryParametersExPtr) (LibMCDriver_GRPC_Driver pDriver, LibMCEnv_DriverStatusUpdateSession pDriverUpdateInstance);

/*************************************************************************************************************************
 Class definition for GRPCMessage
**************************************************************************************************************************/

/**
* Returns if the message has a field of a certain name.
*
* @param[in] pGRPCMessage - GRPCMessage instance.
* @param[in] pFieldName - Name of the field.
* @param[out] pFieldExists - True if field exists.
* @return error code or 0 (success)
*/
typedef LibMCDriver_GRPCResult (*PLibMCDriver_GRPCGRPCMessage_HasFieldPtr) (LibMCDriver_GRPC_GRPCMessage pGRPCMessage, const char * pFieldName, bool * pFieldExists);

/**
* Returns if the message has a field of a certain name and this field is a string field.
*
* @param[in] pGRPCMessage - GRPCMessage instance.
* @param[in] pFieldName - Name of the field.
* @param[out] pStringFieldExists - True if field exists and is of type string.
* @return error code or 0 (success)
*/
typedef LibMCDriver_GRPCResult (*PLibMCDriver_GRPCGRPCMessage_HasStringFieldPtr) (LibMCDriver_GRPC_GRPCMessage pGRPCMessage, const char * pFieldName, bool * pStringFieldExists);

/**
* Sets a string field of the message. Fails if the field does not exist or is not a string field.
*
* @param[in] pGRPCMessage - GRPCMessage instance.
* @param[in] pFieldName - Name of the field.
* @param[in] pValue - New value of the field.
* @return error code or 0 (success)
*/
typedef LibMCDriver_GRPCResult (*PLibMCDriver_GRPCGRPCMessage_SetStringFieldPtr) (LibMCDriver_GRPC_GRPCMessage pGRPCMessage, const char * pFieldName, const char * pValue);

/**
* Gets a string field of the message. Fails if the field does not exist or is not a string field.
*
* @param[in] pGRPCMessage - GRPCMessage instance.
* @param[in] pFieldName - Name of the field.
* @param[in] nValueBufferSize - size of the buffer (including trailing 0)
* @param[out] pValueNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pValueBuffer -  buffer of Current value of the field., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCDriver_GRPCResult (*PLibMCDriver_GRPCGRPCMessage_GetStringFieldPtr) (LibMCDriver_GRPC_GRPCMessage pGRPCMessage, const char * pFieldName, const LibMCDriver_GRPC_uint32 nValueBufferSize, LibMCDriver_GRPC_uint32* pValueNeededChars, char * pValueBuffer);

/**
* Sets a int32 field of the message. Fails if the field does not exist or is not a int32 field.
*
* @param[in] pGRPCMessage - GRPCMessage instance.
* @param[in] pFieldName - Name of the field.
* @param[in] nValue - New value of the field.
* @return error code or 0 (success)
*/
typedef LibMCDriver_GRPCResult (*PLibMCDriver_GRPCGRPCMessage_SetInt32FieldPtr) (LibMCDriver_GRPC_GRPCMessage pGRPCMessage, const char * pFieldName, LibMCDriver_GRPC_int32 nValue);

/**
* Gets a int32 field of the message. Fails if the field does not exist or is not a int32 field.
*
* @param[in] pGRPCMessage - GRPCMessage instance.
* @param[in] pFieldName - Name of the field.
* @param[out] pValue - Current value of the field.
* @return error code or 0 (success)
*/
typedef LibMCDriver_GRPCResult (*PLibMCDriver_GRPCGRPCMessage_GetInt32FieldPtr) (LibMCDriver_GRPC_GRPCMessage pGRPCMessage, const char * pFieldName, LibMCDriver_GRPC_int32 * pValue);

/**
* Sets a uint32 field of the message. Fails if the field does not exist or is not a uint32 field.
*
* @param[in] pGRPCMessage - GRPCMessage instance.
* @param[in] pFieldName - Name of the field.
* @param[in] nValue - New value of the field.
* @return error code or 0 (success)
*/
typedef LibMCDriver_GRPCResult (*PLibMCDriver_GRPCGRPCMessage_SetUInt32FieldPtr) (LibMCDriver_GRPC_GRPCMessage pGRPCMessage, const char * pFieldName, LibMCDriver_GRPC_uint32 nValue);

/**
* Gets a uint32 field of the message. Fails if the field does not exist or is not a uint32 field.
*
* @param[in] pGRPCMessage - GRPCMessage instance.
* @param[in] pFieldName - Name of the field.
* @param[out] pValue - Current value of the field.
* @return error code or 0 (success)
*/
typedef LibMCDriver_GRPCResult (*PLibMCDriver_GRPCGRPCMessage_GetUInt32FieldPtr) (LibMCDriver_GRPC_GRPCMessage pGRPCMessage, const char * pFieldName, LibMCDriver_GRPC_uint32 * pValue);

/**
* Sets a int64 field of the message. Fails if the field does not exist or is not a int64 field.
*
* @param[in] pGRPCMessage - GRPCMessage instance.
* @param[in] pFieldName - Name of the field.
* @param[in] nValue - New value of the field.
* @return error code or 0 (success)
*/
typedef LibMCDriver_GRPCResult (*PLibMCDriver_GRPCGRPCMessage_SetInt64FieldPtr) (LibMCDriver_GRPC_GRPCMessage pGRPCMessage, const char * pFieldName, LibMCDriver_GRPC_int64 nValue);

/**
* Gets a int64 field of the message. Fails if the field does not exist or is not a int64 field.
*
* @param[in] pGRPCMessage - GRPCMessage instance.
* @param[in] pFieldName - Name of the field.
* @param[out] pValue - Current value of the field.
* @return error code or 0 (success)
*/
typedef LibMCDriver_GRPCResult (*PLibMCDriver_GRPCGRPCMessage_GetInt64FieldPtr) (LibMCDriver_GRPC_GRPCMessage pGRPCMessage, const char * pFieldName, LibMCDriver_GRPC_int64 * pValue);

/**
* Sets a uint64 field of the message. Fails if the field does not exist or is not a uint64 field.
*
* @param[in] pGRPCMessage - GRPCMessage instance.
* @param[in] pFieldName - Name of the field.
* @param[in] nValue - New value of the field.
* @return error code or 0 (success)
*/
typedef LibMCDriver_GRPCResult (*PLibMCDriver_GRPCGRPCMessage_SetUInt64FieldPtr) (LibMCDriver_GRPC_GRPCMessage pGRPCMessage, const char * pFieldName, LibMCDriver_GRPC_uint64 nValue);

/**
* Gets a uint64 field of the message. Fails if the field does not exist or is not a uint64 field.
*
* @param[in] pGRPCMessage - GRPCMessage instance.
* @param[in] pFieldName - Name of the field.
* @param[out] pValue - Current value of the field.
* @return error code or 0 (success)
*/
typedef LibMCDriver_GRPCResult (*PLibMCDriver_GRPCGRPCMessage_GetUInt64FieldPtr) (LibMCDriver_GRPC_GRPCMessage pGRPCMessage, const char * pFieldName, LibMCDriver_GRPC_uint64 * pValue);

/**
* Sets a bool field of the message. Fails if the field does not exist or is not a bool field.
*
* @param[in] pGRPCMessage - GRPCMessage instance.
* @param[in] pFieldName - Name of the field.
* @param[in] bValue - New value of the field.
* @return error code or 0 (success)
*/
typedef LibMCDriver_GRPCResult (*PLibMCDriver_GRPCGRPCMessage_SetBoolFieldPtr) (LibMCDriver_GRPC_GRPCMessage pGRPCMessage, const char * pFieldName, bool bValue);

/**
* Gets a bool field of the message. Fails if the field does not exist or is not a bool field.
*
* @param[in] pGRPCMessage - GRPCMessage instance.
* @param[in] pFieldName - Name of the field.
* @param[out] pValue - Current value of the field.
* @return error code or 0 (success)
*/
typedef LibMCDriver_GRPCResult (*PLibMCDriver_GRPCGRPCMessage_GetBoolFieldPtr) (LibMCDriver_GRPC_GRPCMessage pGRPCMessage, const char * pFieldName, bool * pValue);

/**
* Sets a float field of the message. Fails if the field does not exist or is not a float field.
*
* @param[in] pGRPCMessage - GRPCMessage instance.
* @param[in] pFieldName - Name of the field.
* @param[in] fValue - New value of the field.
* @return error code or 0 (success)
*/
typedef LibMCDriver_GRPCResult (*PLibMCDriver_GRPCGRPCMessage_SetFloatFieldPtr) (LibMCDriver_GRPC_GRPCMessage pGRPCMessage, const char * pFieldName, LibMCDriver_GRPC_single fValue);

/**
* Gets a float field of the message. Fails if the field does not exist or is not a float field.
*
* @param[in] pGRPCMessage - GRPCMessage instance.
* @param[in] pFieldName - Name of the field.
* @param[out] pValue - Current value of the field.
* @return error code or 0 (success)
*/
typedef LibMCDriver_GRPCResult (*PLibMCDriver_GRPCGRPCMessage_GetFloatFieldPtr) (LibMCDriver_GRPC_GRPCMessage pGRPCMessage, const char * pFieldName, LibMCDriver_GRPC_single * pValue);

/**
* Sets a double field of the message. Fails if the field does not exist or is not a double field.
*
* @param[in] pGRPCMessage - GRPCMessage instance.
* @param[in] pFieldName - Name of the field.
* @param[in] dValue - New value of the field.
* @return error code or 0 (success)
*/
typedef LibMCDriver_GRPCResult (*PLibMCDriver_GRPCGRPCMessage_SetDoubleFieldPtr) (LibMCDriver_GRPC_GRPCMessage pGRPCMessage, const char * pFieldName, LibMCDriver_GRPC_double dValue);

/**
* Gets a double field of the message. Fails if the field does not exist or is not a double field.
*
* @param[in] pGRPCMessage - GRPCMessage instance.
* @param[in] pFieldName - Name of the field.
* @param[out] pValue - Current value of the field.
* @return error code or 0 (success)
*/
typedef LibMCDriver_GRPCResult (*PLibMCDriver_GRPCGRPCMessage_GetDoubleFieldPtr) (LibMCDriver_GRPC_GRPCMessage pGRPCMessage, const char * pFieldName, LibMCDriver_GRPC_double * pValue);

/*************************************************************************************************************************
 Class definition for GRPCResponse
**************************************************************************************************************************/

/**
* Returns the response type of the connection.
*
* @param[in] pGRPCResponse - GRPCResponse instance.
* @param[in] nResponseTypeBufferSize - size of the buffer (including trailing 0)
* @param[out] pResponseTypeNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pResponseTypeBuffer -  buffer of Message type identifier., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCDriver_GRPCResult (*PLibMCDriver_GRPCGRPCResponse_GetResponseTypePtr) (LibMCDriver_GRPC_GRPCResponse pGRPCResponse, const LibMCDriver_GRPC_uint32 nResponseTypeBufferSize, LibMCDriver_GRPC_uint32* pResponseTypeNeededChars, char * pResponseTypeBuffer);

/*************************************************************************************************************************
 Class definition for GRPCRequest
**************************************************************************************************************************/

/**
* Returns the request type of the connection.
*
* @param[in] pGRPCRequest - GRPCRequest instance.
* @param[in] nRequestTypeBufferSize - size of the buffer (including trailing 0)
* @param[out] pRequestTypeNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pRequestTypeBuffer -  buffer of Message type identifier., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCDriver_GRPCResult (*PLibMCDriver_GRPCGRPCRequest_GetRequestTypePtr) (LibMCDriver_GRPC_GRPCRequest pGRPCRequest, const LibMCDriver_GRPC_uint32 nRequestTypeBufferSize, LibMCDriver_GRPC_uint32* pRequestTypeNeededChars, char * pRequestTypeBuffer);

/**
* Returns the expected response type of the connection.
*
* @param[in] pGRPCRequest - GRPCRequest instance.
* @param[in] nExpectedResponseTypeBufferSize - size of the buffer (including trailing 0)
* @param[out] pExpectedResponseTypeNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pExpectedResponseTypeBuffer -  buffer of Message type identifier., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCDriver_GRPCResult (*PLibMCDriver_GRPCGRPCRequest_GetExpectedResponseTypePtr) (LibMCDriver_GRPC_GRPCRequest pGRPCRequest, const LibMCDriver_GRPC_uint32 nExpectedResponseTypeBufferSize, LibMCDriver_GRPC_uint32* pExpectedResponseTypeNeededChars, char * pExpectedResponseTypeBuffer);

/**
* Sends the request to the end point and waits for a response.
*
* @param[in] pGRPCRequest - GRPCRequest instance.
* @param[in] pServiceMethod - Service method to call.
* @param[in] nTimeOutInMS - Timeout for the response in MS.
* @param[out] pResponseInstance - Response Instance
* @return error code or 0 (success)
*/
typedef LibMCDriver_GRPCResult (*PLibMCDriver_GRPCGRPCRequest_SendBlockingPtr) (LibMCDriver_GRPC_GRPCRequest pGRPCRequest, const char * pServiceMethod, LibMCDriver_GRPC_uint32 nTimeOutInMS, LibMCDriver_GRPC_GRPCResponse * pResponseInstance);

/*************************************************************************************************************************
 Class definition for GRPCConnection
**************************************************************************************************************************/

/**
* Returns the end point of the connection.
*
* @param[in] pGRPCConnection - GRPCConnection instance.
* @param[in] nEndPointBufferSize - size of the buffer (including trailing 0)
* @param[out] pEndPointNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pEndPointBuffer -  buffer of End point of the connection., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCDriver_GRPCResult (*PLibMCDriver_GRPCGRPCConnection_GetEndPointPtr) (LibMCDriver_GRPC_GRPCConnection pGRPCConnection, const LibMCDriver_GRPC_uint32 nEndPointBufferSize, LibMCDriver_GRPC_uint32* pEndPointNeededChars, char * pEndPointBuffer);

/**
* Closes the connection. All subsequent calls to the connection will fail.
*
* @param[in] pGRPCConnection - GRPCConnection instance.
* @return error code or 0 (success)
*/
typedef LibMCDriver_GRPCResult (*PLibMCDriver_GRPCGRPCConnection_ClosePtr) (LibMCDriver_GRPC_GRPCConnection pGRPCConnection);

/**
* Creates a message request to the end point.
*
* @param[in] pGRPCConnection - GRPCConnection instance.
* @param[in] pRequestTypeIdentifier - Message Type Identifier of the request.
* @param[in] pResponseTypeIdentifier - Message Type Identifier of the expected response.
* @param[out] pRequestInstance - Request Instance
* @return error code or 0 (success)
*/
typedef LibMCDriver_GRPCResult (*PLibMCDriver_GRPCGRPCConnection_CreateStaticRequestPtr) (LibMCDriver_GRPC_GRPCConnection pGRPCConnection, const char * pRequestTypeIdentifier, const char * pResponseTypeIdentifier, LibMCDriver_GRPC_GRPCRequest * pRequestInstance);

/*************************************************************************************************************************
 Class definition for Driver_GRPC
**************************************************************************************************************************/

/**
* Turns the driver into a simulation mode.
*
* @param[in] pDriver_GRPC - Driver_GRPC instance.
* @return error code or 0 (success)
*/
typedef LibMCDriver_GRPCResult (*PLibMCDriver_GRPCDriver_GRPC_SetToSimulationModePtr) (LibMCDriver_GRPC_Driver_GRPC pDriver_GRPC);

/**
* Returns if the driver is in simulation mode.
*
* @param[in] pDriver_GRPC - Driver_GRPC instance.
* @param[out] pSimulationModeEnabled - Flag if driver is in simulation mode.
* @return error code or 0 (success)
*/
typedef LibMCDriver_GRPCResult (*PLibMCDriver_GRPCDriver_GRPC_IsSimulationModePtr) (LibMCDriver_GRPC_Driver_GRPC pDriver_GRPC, bool * pSimulationModeEnabled);

/**
* Connects to a GRPC end point.
*
* @param[in] pDriver_GRPC - Driver_GRPC instance.
* @param[in] pIdentifier - Connection Identifier.
* @param[in] pNetworkCredentials - Network Credentials.
* @param[in] pProtobufDefinition - Protobuf definition file.
* @param[out] pConnectionInstance - Connection instance in case of success.
* @return error code or 0 (success)
*/
typedef LibMCDriver_GRPCResult (*PLibMCDriver_GRPCDriver_GRPC_ConnectUnsecurePtr) (LibMCDriver_GRPC_Driver_GRPC pDriver_GRPC, const char * pIdentifier, const char * pNetworkCredentials, const char * pProtobufDefinition, LibMCDriver_GRPC_GRPCConnection * pConnectionInstance);

/**
* Finds a connection with a certain name.
*
* @param[in] pDriver_GRPC - Driver_GRPC instance.
* @param[in] pIdentifier - Connection Identifier.
* @param[in] bMustExist - Connection Identifier. If true, the call fails if the connection does not exist.
* @param[out] pConnectionInstance - Connection instance in case of success. Null if the connection is not found.
* @return error code or 0 (success)
*/
typedef LibMCDriver_GRPCResult (*PLibMCDriver_GRPCDriver_GRPC_FindConnectionPtr) (LibMCDriver_GRPC_Driver_GRPC pDriver_GRPC, const char * pIdentifier, bool bMustExist, LibMCDriver_GRPC_GRPCConnection * pConnectionInstance);

/*************************************************************************************************************************
 Global functions
**************************************************************************************************************************/

/**
* retrieves the binary version of this library.
*
* @param[out] pMajor - returns the major version of this library
* @param[out] pMinor - returns the minor version of this library
* @param[out] pMicro - returns the micro version of this library
* @return error code or 0 (success)
*/
typedef LibMCDriver_GRPCResult (*PLibMCDriver_GRPCGetVersionPtr) (LibMCDriver_GRPC_uint32 * pMajor, LibMCDriver_GRPC_uint32 * pMinor, LibMCDriver_GRPC_uint32 * pMicro);

/**
* Returns the last error recorded on this object
*
* @param[in] pInstance - Instance Handle
* @param[in] nErrorMessageBufferSize - size of the buffer (including trailing 0)
* @param[out] pErrorMessageNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pErrorMessageBuffer -  buffer of Message of the last error, may be NULL
* @param[out] pHasError - Is there a last error to query
* @return error code or 0 (success)
*/
typedef LibMCDriver_GRPCResult (*PLibMCDriver_GRPCGetLastErrorPtr) (LibMCDriver_GRPC_Base pInstance, const LibMCDriver_GRPC_uint32 nErrorMessageBufferSize, LibMCDriver_GRPC_uint32* pErrorMessageNeededChars, char * pErrorMessageBuffer, bool * pHasError);

/**
* Releases shared ownership of an Instance
*
* @param[in] pInstance - Instance Handle
* @return error code or 0 (success)
*/
typedef LibMCDriver_GRPCResult (*PLibMCDriver_GRPCReleaseInstancePtr) (LibMCDriver_GRPC_Base pInstance);

/**
* Acquires shared ownership of an Instance
*
* @param[in] pInstance - Instance Handle
* @return error code or 0 (success)
*/
typedef LibMCDriver_GRPCResult (*PLibMCDriver_GRPCAcquireInstancePtr) (LibMCDriver_GRPC_Base pInstance);

/**
* Injects an imported component for usage within this component
*
* @param[in] pNameSpace - NameSpace of the injected component
* @param[in] pSymbolAddressMethod - Address of the SymbolAddressMethod of the injected component
* @return error code or 0 (success)
*/
typedef LibMCDriver_GRPCResult (*PLibMCDriver_GRPCInjectComponentPtr) (const char * pNameSpace, LibMCDriver_GRPC_pvoid pSymbolAddressMethod);

/**
* Returns the address of the SymbolLookupMethod
*
* @param[out] pSymbolLookupMethod - Address of the SymbolAddressMethod
* @return error code or 0 (success)
*/
typedef LibMCDriver_GRPCResult (*PLibMCDriver_GRPCGetSymbolLookupMethodPtr) (LibMCDriver_GRPC_pvoid * pSymbolLookupMethod);

/**
* Creates a driver instance with a specific name.
*
* @param[in] pName - Name of driver to be created.
* @param[in] pType - Type of driver to be created.
* @param[in] pDriverEnvironment - Environment of this driver.
* @param[out] pInstance - New Driver instance
* @return error code or 0 (success)
*/
typedef LibMCDriver_GRPCResult (*PLibMCDriver_GRPCCreateDriverPtr) (const char * pName, const char * pType, LibMCEnv_DriverEnvironment pDriverEnvironment, LibMCDriver_GRPC_Driver * pInstance);

/*************************************************************************************************************************
 Function Table Structure
**************************************************************************************************************************/

typedef struct {
	void * m_LibraryHandle;
	PLibMCDriver_GRPCDriver_ConfigurePtr m_Driver_Configure;
	PLibMCDriver_GRPCDriver_GetNamePtr m_Driver_GetName;
	PLibMCDriver_GRPCDriver_GetTypePtr m_Driver_GetType;
	PLibMCDriver_GRPCDriver_GetVersionPtr m_Driver_GetVersion;
	PLibMCDriver_GRPCDriver_QueryParametersPtr m_Driver_QueryParameters;
	PLibMCDriver_GRPCDriver_QueryParametersExPtr m_Driver_QueryParametersEx;
	PLibMCDriver_GRPCGRPCMessage_HasFieldPtr m_GRPCMessage_HasField;
	PLibMCDriver_GRPCGRPCMessage_HasStringFieldPtr m_GRPCMessage_HasStringField;
	PLibMCDriver_GRPCGRPCMessage_SetStringFieldPtr m_GRPCMessage_SetStringField;
	PLibMCDriver_GRPCGRPCMessage_GetStringFieldPtr m_GRPCMessage_GetStringField;
	PLibMCDriver_GRPCGRPCMessage_SetInt32FieldPtr m_GRPCMessage_SetInt32Field;
	PLibMCDriver_GRPCGRPCMessage_GetInt32FieldPtr m_GRPCMessage_GetInt32Field;
	PLibMCDriver_GRPCGRPCMessage_SetUInt32FieldPtr m_GRPCMessage_SetUInt32Field;
	PLibMCDriver_GRPCGRPCMessage_GetUInt32FieldPtr m_GRPCMessage_GetUInt32Field;
	PLibMCDriver_GRPCGRPCMessage_SetInt64FieldPtr m_GRPCMessage_SetInt64Field;
	PLibMCDriver_GRPCGRPCMessage_GetInt64FieldPtr m_GRPCMessage_GetInt64Field;
	PLibMCDriver_GRPCGRPCMessage_SetUInt64FieldPtr m_GRPCMessage_SetUInt64Field;
	PLibMCDriver_GRPCGRPCMessage_GetUInt64FieldPtr m_GRPCMessage_GetUInt64Field;
	PLibMCDriver_GRPCGRPCMessage_SetBoolFieldPtr m_GRPCMessage_SetBoolField;
	PLibMCDriver_GRPCGRPCMessage_GetBoolFieldPtr m_GRPCMessage_GetBoolField;
	PLibMCDriver_GRPCGRPCMessage_SetFloatFieldPtr m_GRPCMessage_SetFloatField;
	PLibMCDriver_GRPCGRPCMessage_GetFloatFieldPtr m_GRPCMessage_GetFloatField;
	PLibMCDriver_GRPCGRPCMessage_SetDoubleFieldPtr m_GRPCMessage_SetDoubleField;
	PLibMCDriver_GRPCGRPCMessage_GetDoubleFieldPtr m_GRPCMessage_GetDoubleField;
	PLibMCDriver_GRPCGRPCResponse_GetResponseTypePtr m_GRPCResponse_GetResponseType;
	PLibMCDriver_GRPCGRPCRequest_GetRequestTypePtr m_GRPCRequest_GetRequestType;
	PLibMCDriver_GRPCGRPCRequest_GetExpectedResponseTypePtr m_GRPCRequest_GetExpectedResponseType;
	PLibMCDriver_GRPCGRPCRequest_SendBlockingPtr m_GRPCRequest_SendBlocking;
	PLibMCDriver_GRPCGRPCConnection_GetEndPointPtr m_GRPCConnection_GetEndPoint;
	PLibMCDriver_GRPCGRPCConnection_ClosePtr m_GRPCConnection_Close;
	PLibMCDriver_GRPCGRPCConnection_CreateStaticRequestPtr m_GRPCConnection_CreateStaticRequest;
	PLibMCDriver_GRPCDriver_GRPC_SetToSimulationModePtr m_Driver_GRPC_SetToSimulationMode;
	PLibMCDriver_GRPCDriver_GRPC_IsSimulationModePtr m_Driver_GRPC_IsSimulationMode;
	PLibMCDriver_GRPCDriver_GRPC_ConnectUnsecurePtr m_Driver_GRPC_ConnectUnsecure;
	PLibMCDriver_GRPCDriver_GRPC_FindConnectionPtr m_Driver_GRPC_FindConnection;
	PLibMCDriver_GRPCGetVersionPtr m_GetVersion;
	PLibMCDriver_GRPCGetLastErrorPtr m_GetLastError;
	PLibMCDriver_GRPCReleaseInstancePtr m_ReleaseInstance;
	PLibMCDriver_GRPCAcquireInstancePtr m_AcquireInstance;
	PLibMCDriver_GRPCInjectComponentPtr m_InjectComponent;
	PLibMCDriver_GRPCGetSymbolLookupMethodPtr m_GetSymbolLookupMethod;
	PLibMCDriver_GRPCCreateDriverPtr m_CreateDriver;
} sLibMCDriver_GRPCDynamicWrapperTable;

#endif // __LIBMCDRIVER_GRPC_DYNAMICHEADER_CPPTYPES

