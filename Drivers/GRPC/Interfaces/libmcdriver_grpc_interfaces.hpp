/*++

Copyright (C) 2023 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.8.0-develop.

Abstract: This is an autogenerated C++ header file in order to allow easy
development of MC Driver GRPC. The implementer of MC Driver GRPC needs to
derive concrete classes from the abstract classes in this header.

Interface version: 2.0.0

*/


#ifndef __LIBMCDRIVER_GRPC_CPPINTERFACES
#define __LIBMCDRIVER_GRPC_CPPINTERFACES

#include <string>
#include <memory>

#include "libmcdriver_grpc_types.hpp"


#include "libmcenv_dynamic.hpp"

namespace LibMCDriver_GRPC {
namespace Impl {

/**
 Forward declarations of class interfaces
*/
class IBase;
class IDriver;
class IGRPCMessage;
class IGRPCResponse;
class IGRPCRequest;
class IGRPCConnection;
class IDriver_GRPC;



/*************************************************************************************************************************
 Parameter Cache definitions
**************************************************************************************************************************/

class ParameterCache {
	public:
		virtual ~ParameterCache() {}
};

template <class T1> class ParameterCache_1 : public ParameterCache {
	private:
		T1 m_param1;
	public:
		ParameterCache_1 (const T1 & param1)
			: m_param1 (param1)
		{
		}

		void retrieveData (T1 & param1)
		{
			param1 = m_param1;
		}
};

template <class T1, class T2> class ParameterCache_2 : public ParameterCache {
	private:
		T1 m_param1;
		T2 m_param2;
	public:
		ParameterCache_2 (const T1 & param1, const T2 & param2)
			: m_param1 (param1), m_param2 (param2)
		{
		}

		void retrieveData (T1 & param1, T2 & param2)
		{
			param1 = m_param1;
			param2 = m_param2;
		}
};

template <class T1, class T2, class T3> class ParameterCache_3 : public ParameterCache {
	private:
		T1 m_param1;
		T2 m_param2;
		T3 m_param3;
	public:
		ParameterCache_3 (const T1 & param1, const T2 & param2, const T3 & param3)
			: m_param1 (param1), m_param2 (param2), m_param3 (param3)
		{
		}

		void retrieveData (T1 & param1, T2 & param2, T3 & param3)
		{
			param1 = m_param1;
			param2 = m_param2;
			param3 = m_param3;
		}
};

template <class T1, class T2, class T3, class T4> class ParameterCache_4 : public ParameterCache {
	private:
		T1 m_param1;
		T2 m_param2;
		T3 m_param3;
		T4 m_param4;
	public:
		ParameterCache_4 (const T1 & param1, const T2 & param2, const T3 & param3, const T4 & param4)
			: m_param1 (param1), m_param2 (param2), m_param3 (param3), m_param4 (param4)
		{
		}

		void retrieveData (T1 & param1, T2 & param2, T3 & param3, T4 & param4)
		{
			param1 = m_param1;
			param2 = m_param2;
			param3 = m_param3;
			param4 = m_param4;
		}
};


/*************************************************************************************************************************
 Class interface for Base 
**************************************************************************************************************************/

class IBase {
private:
	std::unique_ptr<ParameterCache> m_ParameterCache;
public:
	/**
	* IBase::~IBase - virtual destructor of IBase
	*/
	virtual ~IBase() {};

	/**
	* IBase::ReleaseBaseClassInterface - Releases ownership of a base class interface. Deletes the reference, if necessary.
	* @param[in] pIBase - The base class instance to release
	*/
	static void ReleaseBaseClassInterface(IBase* pIBase)
	{
		if (pIBase) {
			pIBase->DecRefCount();
		}
	};

	/**
	* IBase::AcquireBaseClassInterface - Acquires shared ownership of a base class interface.
	* @param[in] pIBase - The base class instance to acquire
	*/
	static void AcquireBaseClassInterface(IBase* pIBase)
	{
		if (pIBase) {
			pIBase->IncRefCount();
		}
	};


	/**
	* IBase::GetLastErrorMessage - Returns the last error registered of this class instance
	* @param[out] sErrorMessage - Message of the last error registered
	* @return Has an error been registered already
	*/
	virtual bool GetLastErrorMessage(std::string & sErrorMessage) = 0;

	/**
	* IBase::ClearErrorMessages - Clears all registered messages of this class instance
	*/
	virtual void ClearErrorMessages() = 0;

	/**
	* IBase::RegisterErrorMessage - Registers an error message with this class instance
	* @param[in] sErrorMessage - Error message to register
	*/
	virtual void RegisterErrorMessage(const std::string & sErrorMessage) = 0;

	/**
	* IBase::IncRefCount - Increases the reference count of a class instance
	*/
	virtual void IncRefCount() = 0;

	/**
	* IBase::DecRefCount - Decreases the reference count of a class instance and free releases it, if the last reference has been removed
	* @return Has the object been released
	*/
	virtual bool DecRefCount() = 0;

	/**
	* IBase::_setCache - set parameter cache of object
	*/
	void _setCache(ParameterCache * pCache)
	{
		m_ParameterCache.reset(pCache);
	}

	/**
	* IBase::_getCache - returns parameter cache of object
	*/
	ParameterCache* _getCache()
	{
		return m_ParameterCache.get();
	}

};


/**
 Definition of a shared pointer class for IBase
*/
template<class T>
class IBaseSharedPtr : public std::shared_ptr<T>
{
public:
	explicit IBaseSharedPtr(T* t = nullptr)
		: std::shared_ptr<T>(t, IBase::ReleaseBaseClassInterface)
	{
		t->IncRefCount();
	}

	// Reset function, as it also needs to properly set the deleter.
	void reset(T* t = nullptr)
	{
		std::shared_ptr<T>::reset(t, IBase::ReleaseBaseClassInterface);
	}

	// Get-function that increases the Base class's reference count
	T* getCoOwningPtr()
	{
		T* t = this->get();
		t->IncRefCount();
		return t;
	}
};


typedef IBaseSharedPtr<IBase> PIBase;


/*************************************************************************************************************************
 Class interface for Driver 
**************************************************************************************************************************/

class IDriver : public virtual IBase {
public:
	/**
	* IDriver::Configure - Configures a driver with its specific configuration data.
	* @param[in] sConfigurationString - Configuration data of driver.
	*/
	virtual void Configure(const std::string & sConfigurationString) = 0;

	/**
	* IDriver::GetName - returns the name identifier of the driver
	* @return Name of the driver.
	*/
	virtual std::string GetName() = 0;

	/**
	* IDriver::GetType - returns the type identifier of the driver
	* @return Type of the driver.
	*/
	virtual std::string GetType() = 0;

	/**
	* IDriver::GetVersion - returns the version identifiers of the driver
	* @param[out] nMajor - Major version.
	* @param[out] nMinor - Minor version.
	* @param[out] nMicro - Micro version.
	* @param[out] sBuild - Build identifier.
	*/
	virtual void GetVersion(LibMCDriver_GRPC_uint32 & nMajor, LibMCDriver_GRPC_uint32 & nMinor, LibMCDriver_GRPC_uint32 & nMicro, std::string & sBuild) = 0;

	/**
	* IDriver::QueryParameters - Updates the driver parameters in the driver environment. Should only be called in the driver thread.
	*/
	virtual void QueryParameters() = 0;

	/**
	* IDriver::QueryParametersEx - Updates the driver parameters in the driver environment. Might be called out of thread. Implementation MUST be able to handle parallel calls.
	* @param[in] pDriverUpdateInstance - Status update instance.
	*/
	virtual void QueryParametersEx(LibMCEnv::PDriverStatusUpdateSession pDriverUpdateInstance) = 0;

};

typedef IBaseSharedPtr<IDriver> PIDriver;


/*************************************************************************************************************************
 Class interface for GRPCMessage 
**************************************************************************************************************************/

class IGRPCMessage : public virtual IBase {
public:
	/**
	* IGRPCMessage::HasField - Returns if the message has a field of a certain name.
	* @param[in] sFieldName - Name of the field.
	* @return True if field exists.
	*/
	virtual bool HasField(const std::string & sFieldName) = 0;

	/**
	* IGRPCMessage::HasMessageField - Returns if the message has a field of a certain name and this field is a submessage field.
	* @param[in] sFieldName - Name of the field.
	* @return True if field exists and is of type message.
	*/
	virtual bool HasMessageField(const std::string & sFieldName) = 0;

	/**
	* IGRPCMessage::GetMessageField - Returns the submessage of a field. Fails if the field does not exist or is not a submessage field.
	* @param[in] sFieldName - Name of the field.
	* @return Sub message object
	*/
	virtual IGRPCMessage * GetMessageField(const std::string & sFieldName) = 0;

	/**
	* IGRPCMessage::HasStringField - Returns if the message has a field of a certain name and this field is a string field.
	* @param[in] sFieldName - Name of the field.
	* @return True if field exists and is of type string.
	*/
	virtual bool HasStringField(const std::string & sFieldName) = 0;

	/**
	* IGRPCMessage::SetStringField - Sets a string field of the message. Fails if the field does not exist or is not a string field.
	* @param[in] sFieldName - Name of the field.
	* @param[in] sValue - New value of the field.
	*/
	virtual void SetStringField(const std::string & sFieldName, const std::string & sValue) = 0;

	/**
	* IGRPCMessage::GetStringField - Gets a string field of the message. Fails if the field does not exist or is not a string field.
	* @param[in] sFieldName - Name of the field.
	* @return Current value of the field.
	*/
	virtual std::string GetStringField(const std::string & sFieldName) = 0;

	/**
	* IGRPCMessage::SetInt32Field - Sets a int32 field of the message. Fails if the field does not exist or is not a int32 field.
	* @param[in] sFieldName - Name of the field.
	* @param[in] nValue - New value of the field.
	*/
	virtual void SetInt32Field(const std::string & sFieldName, const LibMCDriver_GRPC_int32 nValue) = 0;

	/**
	* IGRPCMessage::GetInt32Field - Gets a int32 field of the message. Fails if the field does not exist or is not a int32 field.
	* @param[in] sFieldName - Name of the field.
	* @return Current value of the field.
	*/
	virtual LibMCDriver_GRPC_int32 GetInt32Field(const std::string & sFieldName) = 0;

	/**
	* IGRPCMessage::SetUInt32Field - Sets a uint32 field of the message. Fails if the field does not exist or is not a uint32 field.
	* @param[in] sFieldName - Name of the field.
	* @param[in] nValue - New value of the field.
	*/
	virtual void SetUInt32Field(const std::string & sFieldName, const LibMCDriver_GRPC_uint32 nValue) = 0;

	/**
	* IGRPCMessage::GetUInt32Field - Gets a uint32 field of the message. Fails if the field does not exist or is not a uint32 field.
	* @param[in] sFieldName - Name of the field.
	* @return Current value of the field.
	*/
	virtual LibMCDriver_GRPC_uint32 GetUInt32Field(const std::string & sFieldName) = 0;

	/**
	* IGRPCMessage::SetInt64Field - Sets a int64 field of the message. Fails if the field does not exist or is not a int64 field.
	* @param[in] sFieldName - Name of the field.
	* @param[in] nValue - New value of the field.
	*/
	virtual void SetInt64Field(const std::string & sFieldName, const LibMCDriver_GRPC_int64 nValue) = 0;

	/**
	* IGRPCMessage::GetInt64Field - Gets a int64 field of the message. Fails if the field does not exist or is not a int64 field.
	* @param[in] sFieldName - Name of the field.
	* @return Current value of the field.
	*/
	virtual LibMCDriver_GRPC_int64 GetInt64Field(const std::string & sFieldName) = 0;

	/**
	* IGRPCMessage::SetUInt64Field - Sets a uint64 field of the message. Fails if the field does not exist or is not a uint64 field.
	* @param[in] sFieldName - Name of the field.
	* @param[in] nValue - New value of the field.
	*/
	virtual void SetUInt64Field(const std::string & sFieldName, const LibMCDriver_GRPC_uint64 nValue) = 0;

	/**
	* IGRPCMessage::GetUInt64Field - Gets a uint64 field of the message. Fails if the field does not exist or is not a uint64 field.
	* @param[in] sFieldName - Name of the field.
	* @return Current value of the field.
	*/
	virtual LibMCDriver_GRPC_uint64 GetUInt64Field(const std::string & sFieldName) = 0;

	/**
	* IGRPCMessage::SetBoolField - Sets a bool field of the message. Fails if the field does not exist or is not a bool field.
	* @param[in] sFieldName - Name of the field.
	* @param[in] bValue - New value of the field.
	*/
	virtual void SetBoolField(const std::string & sFieldName, const bool bValue) = 0;

	/**
	* IGRPCMessage::GetBoolField - Gets a bool field of the message. Fails if the field does not exist or is not a bool field.
	* @param[in] sFieldName - Name of the field.
	* @return Current value of the field.
	*/
	virtual bool GetBoolField(const std::string & sFieldName) = 0;

	/**
	* IGRPCMessage::SetFloatField - Sets a float field of the message. Fails if the field does not exist or is not a float field.
	* @param[in] sFieldName - Name of the field.
	* @param[in] fValue - New value of the field.
	*/
	virtual void SetFloatField(const std::string & sFieldName, const LibMCDriver_GRPC_single fValue) = 0;

	/**
	* IGRPCMessage::GetFloatField - Gets a float field of the message. Fails if the field does not exist or is not a float field.
	* @param[in] sFieldName - Name of the field.
	* @return Current value of the field.
	*/
	virtual LibMCDriver_GRPC_single GetFloatField(const std::string & sFieldName) = 0;

	/**
	* IGRPCMessage::SetDoubleField - Sets a double field of the message. Fails if the field does not exist or is not a double field.
	* @param[in] sFieldName - Name of the field.
	* @param[in] dValue - New value of the field.
	*/
	virtual void SetDoubleField(const std::string & sFieldName, const LibMCDriver_GRPC_double dValue) = 0;

	/**
	* IGRPCMessage::GetDoubleField - Gets a double field of the message. Fails if the field does not exist or is not a double field.
	* @param[in] sFieldName - Name of the field.
	* @return Current value of the field.
	*/
	virtual LibMCDriver_GRPC_double GetDoubleField(const std::string & sFieldName) = 0;

};

typedef IBaseSharedPtr<IGRPCMessage> PIGRPCMessage;


/*************************************************************************************************************************
 Class interface for GRPCResponse 
**************************************************************************************************************************/

class IGRPCResponse : public virtual IGRPCMessage {
public:
	/**
	* IGRPCResponse::GetResponseType - Returns the response type of the connection.
	* @return Message type identifier.
	*/
	virtual std::string GetResponseType() = 0;

};

typedef IBaseSharedPtr<IGRPCResponse> PIGRPCResponse;


/*************************************************************************************************************************
 Class interface for GRPCRequest 
**************************************************************************************************************************/

class IGRPCRequest : public virtual IGRPCMessage {
public:
	/**
	* IGRPCRequest::GetRequestType - Returns the request type of the connection.
	* @return Message type identifier.
	*/
	virtual std::string GetRequestType() = 0;

	/**
	* IGRPCRequest::GetExpectedResponseType - Returns the expected response type of the connection.
	* @return Message type identifier.
	*/
	virtual std::string GetExpectedResponseType() = 0;

	/**
	* IGRPCRequest::SendBlocking - Sends the request to the end point and waits for a response.
	* @param[in] sServiceMethod - Service method to call.
	* @param[in] nTimeOutInMS - Timeout for the response in MS.
	* @return Response Instance
	*/
	virtual IGRPCResponse * SendBlocking(const std::string & sServiceMethod, const LibMCDriver_GRPC_uint32 nTimeOutInMS) = 0;

};

typedef IBaseSharedPtr<IGRPCRequest> PIGRPCRequest;


/*************************************************************************************************************************
 Class interface for GRPCConnection 
**************************************************************************************************************************/

class IGRPCConnection : public virtual IBase {
public:
	/**
	* IGRPCConnection::GetEndPoint - Returns the end point of the connection.
	* @return End point of the connection.
	*/
	virtual std::string GetEndPoint() = 0;

	/**
	* IGRPCConnection::Close - Closes the connection. All subsequent calls to the connection will fail.
	*/
	virtual void Close() = 0;

	/**
	* IGRPCConnection::CreateStaticRequest - Creates a message request to the end point.
	* @param[in] sRequestTypeIdentifier - Message Type Identifier of the request.
	* @param[in] sResponseTypeIdentifier - Message Type Identifier of the expected response.
	* @return Request Instance
	*/
	virtual IGRPCRequest * CreateStaticRequest(const std::string & sRequestTypeIdentifier, const std::string & sResponseTypeIdentifier) = 0;

};

typedef IBaseSharedPtr<IGRPCConnection> PIGRPCConnection;


/*************************************************************************************************************************
 Class interface for Driver_GRPC 
**************************************************************************************************************************/

class IDriver_GRPC : public virtual IDriver {
public:
	/**
	* IDriver_GRPC::SetToSimulationMode - Turns the driver into a simulation mode.
	*/
	virtual void SetToSimulationMode() = 0;

	/**
	* IDriver_GRPC::IsSimulationMode - Returns if the driver is in simulation mode.
	* @return Flag if driver is in simulation mode.
	*/
	virtual bool IsSimulationMode() = 0;

	/**
	* IDriver_GRPC::ConnectUnsecure - Connects to a GRPC end point.
	* @param[in] sIdentifier - Connection Identifier.
	* @param[in] sNetworkCredentials - Network Credentials.
	* @param[in] sProtobufDefinition - Protobuf definition file.
	* @return Connection instance in case of success.
	*/
	virtual IGRPCConnection * ConnectUnsecure(const std::string & sIdentifier, const std::string & sNetworkCredentials, const std::string & sProtobufDefinition) = 0;

	/**
	* IDriver_GRPC::FindConnection - Finds a connection with a certain name.
	* @param[in] sIdentifier - Connection Identifier.
	* @param[in] bMustExist - Connection Identifier. If true, the call fails if the connection does not exist.
	* @return Connection instance in case of success. Null if the connection is not found.
	*/
	virtual IGRPCConnection * FindConnection(const std::string & sIdentifier, const bool bMustExist) = 0;

};

typedef IBaseSharedPtr<IDriver_GRPC> PIDriver_GRPC;


/*************************************************************************************************************************
 Global functions declarations
**************************************************************************************************************************/
class CWrapper {
public:
	// Injected Components
	static LibMCEnv::PWrapper sPLibMCEnvWrapper;

	/**
	* Ilibmcdriver_grpc::GetVersion - retrieves the binary version of this library.
	* @param[out] nMajor - returns the major version of this library
	* @param[out] nMinor - returns the minor version of this library
	* @param[out] nMicro - returns the micro version of this library
	*/
	static void GetVersion(LibMCDriver_GRPC_uint32 & nMajor, LibMCDriver_GRPC_uint32 & nMinor, LibMCDriver_GRPC_uint32 & nMicro);

	/**
	* Ilibmcdriver_grpc::GetLastError - Returns the last error recorded on this object
	* @param[in] pInstance - Instance Handle
	* @param[out] sErrorMessage - Message of the last error
	* @return Is there a last error to query
	*/
	static bool GetLastError(IBase* pInstance, std::string & sErrorMessage);

	/**
	* Ilibmcdriver_grpc::ReleaseInstance - Releases shared ownership of an Instance
	* @param[in] pInstance - Instance Handle
	*/
	static void ReleaseInstance(IBase* pInstance);

	/**
	* Ilibmcdriver_grpc::AcquireInstance - Acquires shared ownership of an Instance
	* @param[in] pInstance - Instance Handle
	*/
	static void AcquireInstance(IBase* pInstance);

	/**
	* Ilibmcdriver_grpc::CreateDriver - Creates a driver instance with a specific name.
	* @param[in] sName - Name of driver to be created.
	* @param[in] sType - Type of driver to be created.
	* @param[in] pDriverEnvironment - Environment of this driver.
	* @return New Driver instance
	*/
	static IDriver * CreateDriver(const std::string & sName, const std::string & sType, LibMCEnv::PDriverEnvironment pDriverEnvironment);

};

LibMCDriver_GRPCResult LibMCDriver_GRPC_GetProcAddress (const char * pProcName, void ** ppProcAddress);

} // namespace Impl
} // namespace LibMCDriver_GRPC

#endif // __LIBMCDRIVER_GRPC_CPPINTERFACES
