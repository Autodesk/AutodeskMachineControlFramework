/*++

Copyright (C) 2023 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.8.0-develop.

Abstract: This is an autogenerated C++-Header file with basic types in
order to allow an easy use of MC Driver GRPC

Interface version: 2.0.0

*/

#ifndef __LIBMCDRIVER_GRPC_TYPES_HEADER_CPP
#define __LIBMCDRIVER_GRPC_TYPES_HEADER_CPP


/*************************************************************************************************************************
 Scalar types definition
**************************************************************************************************************************/

#ifdef LIBMCDRIVER_GRPC_USELEGACYINTEGERTYPES

typedef unsigned char LibMCDriver_GRPC_uint8;
typedef unsigned short LibMCDriver_GRPC_uint16 ;
typedef unsigned int LibMCDriver_GRPC_uint32;
typedef unsigned long long LibMCDriver_GRPC_uint64;
typedef char LibMCDriver_GRPC_int8;
typedef short LibMCDriver_GRPC_int16;
typedef int LibMCDriver_GRPC_int32;
typedef long long LibMCDriver_GRPC_int64;

#else // LIBMCDRIVER_GRPC_USELEGACYINTEGERTYPES

#include <stdint.h>

typedef uint8_t LibMCDriver_GRPC_uint8;
typedef uint16_t LibMCDriver_GRPC_uint16;
typedef uint32_t LibMCDriver_GRPC_uint32;
typedef uint64_t LibMCDriver_GRPC_uint64;
typedef int8_t LibMCDriver_GRPC_int8;
typedef int16_t LibMCDriver_GRPC_int16;
typedef int32_t LibMCDriver_GRPC_int32;
typedef int64_t LibMCDriver_GRPC_int64 ;

#endif // LIBMCDRIVER_GRPC_USELEGACYINTEGERTYPES

typedef float LibMCDriver_GRPC_single;
typedef double LibMCDriver_GRPC_double;

/*************************************************************************************************************************
 General type definitions
**************************************************************************************************************************/

typedef LibMCDriver_GRPC_int32 LibMCDriver_GRPCResult;
typedef void * LibMCDriver_GRPCHandle;
typedef void * LibMCDriver_GRPC_pvoid;

/*************************************************************************************************************************
 Version for LibMCDriver_GRPC
**************************************************************************************************************************/

#define LIBMCDRIVER_GRPC_VERSION_MAJOR 2
#define LIBMCDRIVER_GRPC_VERSION_MINOR 0
#define LIBMCDRIVER_GRPC_VERSION_MICRO 0
#define LIBMCDRIVER_GRPC_VERSION_PRERELEASEINFO ""
#define LIBMCDRIVER_GRPC_VERSION_BUILDINFO ""

/*************************************************************************************************************************
 Error constants for LibMCDriver_GRPC
**************************************************************************************************************************/

#define LIBMCDRIVER_GRPC_SUCCESS 0
#define LIBMCDRIVER_GRPC_ERROR_NOTIMPLEMENTED 1001 /** functionality not implemented */
#define LIBMCDRIVER_GRPC_ERROR_INVALIDPARAM 1002 /** an invalid parameter was passed */
#define LIBMCDRIVER_GRPC_ERROR_INVALIDCAST 1003 /** a type cast failed */
#define LIBMCDRIVER_GRPC_ERROR_BUFFERTOOSMALL 1004 /** a provided buffer is too small */
#define LIBMCDRIVER_GRPC_ERROR_GENERICEXCEPTION 1005 /** a generic exception occurred */
#define LIBMCDRIVER_GRPC_ERROR_COULDNOTLOADLIBRARY 1006 /** the library could not be loaded */
#define LIBMCDRIVER_GRPC_ERROR_COULDNOTFINDLIBRARYEXPORT 1007 /** a required exported symbol could not be found in the library */
#define LIBMCDRIVER_GRPC_ERROR_INCOMPATIBLEBINARYVERSION 1008 /** the version of the binary interface does not match the bindings interface */
#define LIBMCDRIVER_GRPC_ERROR_DRIVERERROR 1009 /** a driver error occured */
#define LIBMCDRIVER_GRPC_ERROR_DRIVERNOTINITIALISED 1010 /** the driver is not initialised */
#define LIBMCDRIVER_GRPC_ERROR_DRIVERNOTCONNECTED 1011 /** the driver is not connected */
#define LIBMCDRIVER_GRPC_ERROR_COULDNOTLOADGRPCWRAPPER 1012 /** Could not load grpc wrapper */
#define LIBMCDRIVER_GRPC_ERROR_DRIVERTYPENOTSUPPORTED 1013 /** the driver type is not supported */
#define LIBMCDRIVER_GRPC_ERROR_EMPTYCONNECTIONIDENTIFIER 1014 /** Empty connection identifier */
#define LIBMCDRIVER_GRPC_ERROR_INVALIDCONNECTIONIDENTIFIER 1015 /** Invalid connection identifier */
#define LIBMCDRIVER_GRPC_ERROR_GRPCWRAPPERNOTLOADED 1016 /** GRPC Wrapper not loaded */
#define LIBMCDRIVER_GRPC_ERROR_COULDNOTFINDCONNECTIONIDENTIFIER 1017 /** Could not find connection identifier */
#define LIBMCDRIVER_GRPC_ERROR_DUPLICATECONNECTIONIDENTIFIER 1018 /** Duplicate connection identifier */
#define LIBMCDRIVER_GRPC_ERROR_COULDNOTCASTTOGRPCREQUEST 1019 /** Could not cast to GRPC Request */
#define LIBMCDRIVER_GRPC_ERROR_COULDNOTCASTTOGRPCRESPONSE 1020 /** Could not cast to GRPC Response */

/*************************************************************************************************************************
 Error strings for LibMCDriver_GRPC
**************************************************************************************************************************/

inline const char * LIBMCDRIVER_GRPC_GETERRORSTRING (LibMCDriver_GRPCResult nErrorCode) {
  switch (nErrorCode) {
    case LIBMCDRIVER_GRPC_SUCCESS: return "no error";
    case LIBMCDRIVER_GRPC_ERROR_NOTIMPLEMENTED: return "functionality not implemented";
    case LIBMCDRIVER_GRPC_ERROR_INVALIDPARAM: return "an invalid parameter was passed";
    case LIBMCDRIVER_GRPC_ERROR_INVALIDCAST: return "a type cast failed";
    case LIBMCDRIVER_GRPC_ERROR_BUFFERTOOSMALL: return "a provided buffer is too small";
    case LIBMCDRIVER_GRPC_ERROR_GENERICEXCEPTION: return "a generic exception occurred";
    case LIBMCDRIVER_GRPC_ERROR_COULDNOTLOADLIBRARY: return "the library could not be loaded";
    case LIBMCDRIVER_GRPC_ERROR_COULDNOTFINDLIBRARYEXPORT: return "a required exported symbol could not be found in the library";
    case LIBMCDRIVER_GRPC_ERROR_INCOMPATIBLEBINARYVERSION: return "the version of the binary interface does not match the bindings interface";
    case LIBMCDRIVER_GRPC_ERROR_DRIVERERROR: return "a driver error occured";
    case LIBMCDRIVER_GRPC_ERROR_DRIVERNOTINITIALISED: return "the driver is not initialised";
    case LIBMCDRIVER_GRPC_ERROR_DRIVERNOTCONNECTED: return "the driver is not connected";
    case LIBMCDRIVER_GRPC_ERROR_COULDNOTLOADGRPCWRAPPER: return "Could not load grpc wrapper";
    case LIBMCDRIVER_GRPC_ERROR_DRIVERTYPENOTSUPPORTED: return "the driver type is not supported";
    case LIBMCDRIVER_GRPC_ERROR_EMPTYCONNECTIONIDENTIFIER: return "Empty connection identifier";
    case LIBMCDRIVER_GRPC_ERROR_INVALIDCONNECTIONIDENTIFIER: return "Invalid connection identifier";
    case LIBMCDRIVER_GRPC_ERROR_GRPCWRAPPERNOTLOADED: return "GRPC Wrapper not loaded";
    case LIBMCDRIVER_GRPC_ERROR_COULDNOTFINDCONNECTIONIDENTIFIER: return "Could not find connection identifier";
    case LIBMCDRIVER_GRPC_ERROR_DUPLICATECONNECTIONIDENTIFIER: return "Duplicate connection identifier";
    case LIBMCDRIVER_GRPC_ERROR_COULDNOTCASTTOGRPCREQUEST: return "Could not cast to GRPC Request";
    case LIBMCDRIVER_GRPC_ERROR_COULDNOTCASTTOGRPCRESPONSE: return "Could not cast to GRPC Response";
    default: return "unknown error";
  }
}

/*************************************************************************************************************************
 Declaration of handle classes 
**************************************************************************************************************************/

typedef LibMCDriver_GRPCHandle LibMCDriver_GRPC_Base;
typedef LibMCDriver_GRPCHandle LibMCDriver_GRPC_Driver;
typedef LibMCDriver_GRPCHandle LibMCDriver_GRPC_GRPCMessage;
typedef LibMCDriver_GRPCHandle LibMCDriver_GRPC_GRPCResponse;
typedef LibMCDriver_GRPCHandle LibMCDriver_GRPC_GRPCRequest;
typedef LibMCDriver_GRPCHandle LibMCDriver_GRPC_GRPCConnection;
typedef LibMCDriver_GRPCHandle LibMCDriver_GRPC_Driver_GRPC;

namespace LibMCDriver_GRPC {

} // namespace LibMCDriver_GRPC;

// define legacy C-names for enums, structs and function types

#endif // __LIBMCDRIVER_GRPC_TYPES_HEADER_CPP
