/*++

Copyright (C) 2023 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.8.0-develop.

Abstract: This is an autogenerated C++ implementation file in order to allow easy
development of MC Driver GRPC. The functions in this file need to be implemented. It needs to be generated only once.

Interface version: 2.0.0

*/

#include "libmcdriver_grpc_abi.hpp"
#include "libmcdriver_grpc_interfaces.hpp"
#include "libmcdriver_grpc_interfaceexception.hpp"

#include <map>

using namespace LibMCDriver_GRPC::Impl;

LibMCDriver_GRPCResult handleLibMCDriver_GRPCException(IBase * pIBaseClass, ELibMCDriver_GRPCInterfaceException & Exception)
{
	LibMCDriver_GRPCResult errorCode = Exception.getErrorCode();

	if (pIBaseClass != nullptr)
		pIBaseClass->RegisterErrorMessage(Exception.what());

	return errorCode;
}

LibMCDriver_GRPCResult handleStdException(IBase * pIBaseClass, std::exception & Exception)
{
	LibMCDriver_GRPCResult errorCode = LIBMCDRIVER_GRPC_ERROR_GENERICEXCEPTION;

	if (pIBaseClass != nullptr)
		pIBaseClass->RegisterErrorMessage(Exception.what());

	return errorCode;
}

LibMCDriver_GRPCResult handleUnhandledException(IBase * pIBaseClass)
{
	LibMCDriver_GRPCResult errorCode = LIBMCDRIVER_GRPC_ERROR_GENERICEXCEPTION;

	if (pIBaseClass != nullptr)
		pIBaseClass->RegisterErrorMessage("Unhandled Exception");

	return errorCode;
}



/*************************************************************************************************************************
 Class implementation for Base
**************************************************************************************************************************/

/*************************************************************************************************************************
 Class implementation for Driver
**************************************************************************************************************************/
LibMCDriver_GRPCResult libmcdriver_grpc_driver_configure(LibMCDriver_GRPC_Driver pDriver, const char * pConfigurationString)
{
	IBase* pIBaseClass = (IBase *)pDriver;

	try {
		if (pConfigurationString == nullptr)
			throw ELibMCDriver_GRPCInterfaceException (LIBMCDRIVER_GRPC_ERROR_INVALIDPARAM);
		std::string sConfigurationString(pConfigurationString);
		IDriver* pIDriver = dynamic_cast<IDriver*>(pIBaseClass);
		if (!pIDriver)
			throw ELibMCDriver_GRPCInterfaceException(LIBMCDRIVER_GRPC_ERROR_INVALIDCAST);
		
		pIDriver->Configure(sConfigurationString);

		return LIBMCDRIVER_GRPC_SUCCESS;
	}
	catch (ELibMCDriver_GRPCInterfaceException & Exception) {
		return handleLibMCDriver_GRPCException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_GRPCResult libmcdriver_grpc_driver_getname(LibMCDriver_GRPC_Driver pDriver, const LibMCDriver_GRPC_uint32 nNameBufferSize, LibMCDriver_GRPC_uint32* pNameNeededChars, char * pNameBuffer)
{
	IBase* pIBaseClass = (IBase *)pDriver;

	try {
		if ( (!pNameBuffer) && !(pNameNeededChars) )
			throw ELibMCDriver_GRPCInterfaceException (LIBMCDRIVER_GRPC_ERROR_INVALIDPARAM);
		std::string sName("");
		IDriver* pIDriver = dynamic_cast<IDriver*>(pIBaseClass);
		if (!pIDriver)
			throw ELibMCDriver_GRPCInterfaceException(LIBMCDRIVER_GRPC_ERROR_INVALIDCAST);
		
		bool isCacheCall = (pNameBuffer == nullptr);
		if (isCacheCall) {
			sName = pIDriver->GetName();

			pIDriver->_setCache (new ParameterCache_1<std::string> (sName));
		}
		else {
			auto cache = dynamic_cast<ParameterCache_1<std::string>*> (pIDriver->_getCache ());
			if (cache == nullptr)
				throw ELibMCDriver_GRPCInterfaceException(LIBMCDRIVER_GRPC_ERROR_INVALIDCAST);
			cache->retrieveData (sName);
			pIDriver->_setCache (nullptr);
		}
		
		if (pNameNeededChars)
			*pNameNeededChars = (LibMCDriver_GRPC_uint32) (sName.size()+1);
		if (pNameBuffer) {
			if (sName.size() >= nNameBufferSize)
				throw ELibMCDriver_GRPCInterfaceException (LIBMCDRIVER_GRPC_ERROR_BUFFERTOOSMALL);
			for (size_t iName = 0; iName < sName.size(); iName++)
				pNameBuffer[iName] = sName[iName];
			pNameBuffer[sName.size()] = 0;
		}
		return LIBMCDRIVER_GRPC_SUCCESS;
	}
	catch (ELibMCDriver_GRPCInterfaceException & Exception) {
		return handleLibMCDriver_GRPCException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_GRPCResult libmcdriver_grpc_driver_gettype(LibMCDriver_GRPC_Driver pDriver, const LibMCDriver_GRPC_uint32 nTypeBufferSize, LibMCDriver_GRPC_uint32* pTypeNeededChars, char * pTypeBuffer)
{
	IBase* pIBaseClass = (IBase *)pDriver;

	try {
		if ( (!pTypeBuffer) && !(pTypeNeededChars) )
			throw ELibMCDriver_GRPCInterfaceException (LIBMCDRIVER_GRPC_ERROR_INVALIDPARAM);
		std::string sType("");
		IDriver* pIDriver = dynamic_cast<IDriver*>(pIBaseClass);
		if (!pIDriver)
			throw ELibMCDriver_GRPCInterfaceException(LIBMCDRIVER_GRPC_ERROR_INVALIDCAST);
		
		bool isCacheCall = (pTypeBuffer == nullptr);
		if (isCacheCall) {
			sType = pIDriver->GetType();

			pIDriver->_setCache (new ParameterCache_1<std::string> (sType));
		}
		else {
			auto cache = dynamic_cast<ParameterCache_1<std::string>*> (pIDriver->_getCache ());
			if (cache == nullptr)
				throw ELibMCDriver_GRPCInterfaceException(LIBMCDRIVER_GRPC_ERROR_INVALIDCAST);
			cache->retrieveData (sType);
			pIDriver->_setCache (nullptr);
		}
		
		if (pTypeNeededChars)
			*pTypeNeededChars = (LibMCDriver_GRPC_uint32) (sType.size()+1);
		if (pTypeBuffer) {
			if (sType.size() >= nTypeBufferSize)
				throw ELibMCDriver_GRPCInterfaceException (LIBMCDRIVER_GRPC_ERROR_BUFFERTOOSMALL);
			for (size_t iType = 0; iType < sType.size(); iType++)
				pTypeBuffer[iType] = sType[iType];
			pTypeBuffer[sType.size()] = 0;
		}
		return LIBMCDRIVER_GRPC_SUCCESS;
	}
	catch (ELibMCDriver_GRPCInterfaceException & Exception) {
		return handleLibMCDriver_GRPCException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_GRPCResult libmcdriver_grpc_driver_getversion(LibMCDriver_GRPC_Driver pDriver, LibMCDriver_GRPC_uint32 * pMajor, LibMCDriver_GRPC_uint32 * pMinor, LibMCDriver_GRPC_uint32 * pMicro, const LibMCDriver_GRPC_uint32 nBuildBufferSize, LibMCDriver_GRPC_uint32* pBuildNeededChars, char * pBuildBuffer)
{
	IBase* pIBaseClass = (IBase *)pDriver;

	try {
		if (!pMajor)
			throw ELibMCDriver_GRPCInterfaceException (LIBMCDRIVER_GRPC_ERROR_INVALIDPARAM);
		if (!pMinor)
			throw ELibMCDriver_GRPCInterfaceException (LIBMCDRIVER_GRPC_ERROR_INVALIDPARAM);
		if (!pMicro)
			throw ELibMCDriver_GRPCInterfaceException (LIBMCDRIVER_GRPC_ERROR_INVALIDPARAM);
		if ( (!pBuildBuffer) && !(pBuildNeededChars) )
			throw ELibMCDriver_GRPCInterfaceException (LIBMCDRIVER_GRPC_ERROR_INVALIDPARAM);
		std::string sBuild("");
		IDriver* pIDriver = dynamic_cast<IDriver*>(pIBaseClass);
		if (!pIDriver)
			throw ELibMCDriver_GRPCInterfaceException(LIBMCDRIVER_GRPC_ERROR_INVALIDCAST);
		
		bool isCacheCall = (pBuildBuffer == nullptr);
		if (isCacheCall) {
			pIDriver->GetVersion(*pMajor, *pMinor, *pMicro, sBuild);

			pIDriver->_setCache (new ParameterCache_4<LibMCDriver_GRPC_uint32, LibMCDriver_GRPC_uint32, LibMCDriver_GRPC_uint32, std::string> (*pMajor, *pMinor, *pMicro, sBuild));
		}
		else {
			auto cache = dynamic_cast<ParameterCache_4<LibMCDriver_GRPC_uint32, LibMCDriver_GRPC_uint32, LibMCDriver_GRPC_uint32, std::string>*> (pIDriver->_getCache ());
			if (cache == nullptr)
				throw ELibMCDriver_GRPCInterfaceException(LIBMCDRIVER_GRPC_ERROR_INVALIDCAST);
			cache->retrieveData (*pMajor, *pMinor, *pMicro, sBuild);
			pIDriver->_setCache (nullptr);
		}
		
		if (pBuildNeededChars)
			*pBuildNeededChars = (LibMCDriver_GRPC_uint32) (sBuild.size()+1);
		if (pBuildBuffer) {
			if (sBuild.size() >= nBuildBufferSize)
				throw ELibMCDriver_GRPCInterfaceException (LIBMCDRIVER_GRPC_ERROR_BUFFERTOOSMALL);
			for (size_t iBuild = 0; iBuild < sBuild.size(); iBuild++)
				pBuildBuffer[iBuild] = sBuild[iBuild];
			pBuildBuffer[sBuild.size()] = 0;
		}
		return LIBMCDRIVER_GRPC_SUCCESS;
	}
	catch (ELibMCDriver_GRPCInterfaceException & Exception) {
		return handleLibMCDriver_GRPCException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_GRPCResult libmcdriver_grpc_driver_queryparameters(LibMCDriver_GRPC_Driver pDriver)
{
	IBase* pIBaseClass = (IBase *)pDriver;

	try {
		IDriver* pIDriver = dynamic_cast<IDriver*>(pIBaseClass);
		if (!pIDriver)
			throw ELibMCDriver_GRPCInterfaceException(LIBMCDRIVER_GRPC_ERROR_INVALIDCAST);
		
		pIDriver->QueryParameters();

		return LIBMCDRIVER_GRPC_SUCCESS;
	}
	catch (ELibMCDriver_GRPCInterfaceException & Exception) {
		return handleLibMCDriver_GRPCException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_GRPCResult libmcdriver_grpc_driver_queryparametersex(LibMCDriver_GRPC_Driver pDriver, LibMCEnv_DriverStatusUpdateSession pDriverUpdateInstance)
{
	IBase* pIBaseClass = (IBase *)pDriver;

	try {
		LibMCEnv::PDriverStatusUpdateSession pIDriverUpdateInstance = std::make_shared<LibMCEnv::CDriverStatusUpdateSession>(CWrapper::sPLibMCEnvWrapper.get(), pDriverUpdateInstance);
		CWrapper::sPLibMCEnvWrapper->AcquireInstance(pIDriverUpdateInstance.get());
		if (!pIDriverUpdateInstance)
			throw ELibMCDriver_GRPCInterfaceException (LIBMCDRIVER_GRPC_ERROR_INVALIDCAST);
		
		IDriver* pIDriver = dynamic_cast<IDriver*>(pIBaseClass);
		if (!pIDriver)
			throw ELibMCDriver_GRPCInterfaceException(LIBMCDRIVER_GRPC_ERROR_INVALIDCAST);
		
		pIDriver->QueryParametersEx(pIDriverUpdateInstance);

		return LIBMCDRIVER_GRPC_SUCCESS;
	}
	catch (ELibMCDriver_GRPCInterfaceException & Exception) {
		return handleLibMCDriver_GRPCException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}


/*************************************************************************************************************************
 Class implementation for GRPCConnection
**************************************************************************************************************************/

/*************************************************************************************************************************
 Class implementation for Driver_GRPC
**************************************************************************************************************************/
LibMCDriver_GRPCResult libmcdriver_grpc_driver_grpc_settosimulationmode(LibMCDriver_GRPC_Driver_GRPC pDriver_GRPC)
{
	IBase* pIBaseClass = (IBase *)pDriver_GRPC;

	try {
		IDriver_GRPC* pIDriver_GRPC = dynamic_cast<IDriver_GRPC*>(pIBaseClass);
		if (!pIDriver_GRPC)
			throw ELibMCDriver_GRPCInterfaceException(LIBMCDRIVER_GRPC_ERROR_INVALIDCAST);
		
		pIDriver_GRPC->SetToSimulationMode();

		return LIBMCDRIVER_GRPC_SUCCESS;
	}
	catch (ELibMCDriver_GRPCInterfaceException & Exception) {
		return handleLibMCDriver_GRPCException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_GRPCResult libmcdriver_grpc_driver_grpc_issimulationmode(LibMCDriver_GRPC_Driver_GRPC pDriver_GRPC, bool * pSimulationModeEnabled)
{
	IBase* pIBaseClass = (IBase *)pDriver_GRPC;

	try {
		if (pSimulationModeEnabled == nullptr)
			throw ELibMCDriver_GRPCInterfaceException (LIBMCDRIVER_GRPC_ERROR_INVALIDPARAM);
		IDriver_GRPC* pIDriver_GRPC = dynamic_cast<IDriver_GRPC*>(pIBaseClass);
		if (!pIDriver_GRPC)
			throw ELibMCDriver_GRPCInterfaceException(LIBMCDRIVER_GRPC_ERROR_INVALIDCAST);
		
		*pSimulationModeEnabled = pIDriver_GRPC->IsSimulationMode();

		return LIBMCDRIVER_GRPC_SUCCESS;
	}
	catch (ELibMCDriver_GRPCInterfaceException & Exception) {
		return handleLibMCDriver_GRPCException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_GRPCResult libmcdriver_grpc_driver_grpc_connectunsecure(LibMCDriver_GRPC_Driver_GRPC pDriver_GRPC, const char * pIdentifier, const char * pNetworkCredentials, const char * pProtobufDefinition, LibMCDriver_GRPC_GRPCConnection * pConnectionInstance)
{
	IBase* pIBaseClass = (IBase *)pDriver_GRPC;

	try {
		if (pIdentifier == nullptr)
			throw ELibMCDriver_GRPCInterfaceException (LIBMCDRIVER_GRPC_ERROR_INVALIDPARAM);
		if (pNetworkCredentials == nullptr)
			throw ELibMCDriver_GRPCInterfaceException (LIBMCDRIVER_GRPC_ERROR_INVALIDPARAM);
		if (pProtobufDefinition == nullptr)
			throw ELibMCDriver_GRPCInterfaceException (LIBMCDRIVER_GRPC_ERROR_INVALIDPARAM);
		if (pConnectionInstance == nullptr)
			throw ELibMCDriver_GRPCInterfaceException (LIBMCDRIVER_GRPC_ERROR_INVALIDPARAM);
		std::string sIdentifier(pIdentifier);
		std::string sNetworkCredentials(pNetworkCredentials);
		std::string sProtobufDefinition(pProtobufDefinition);
		IBase* pBaseConnectionInstance(nullptr);
		IDriver_GRPC* pIDriver_GRPC = dynamic_cast<IDriver_GRPC*>(pIBaseClass);
		if (!pIDriver_GRPC)
			throw ELibMCDriver_GRPCInterfaceException(LIBMCDRIVER_GRPC_ERROR_INVALIDCAST);
		
		pBaseConnectionInstance = pIDriver_GRPC->ConnectUnsecure(sIdentifier, sNetworkCredentials, sProtobufDefinition);

		*pConnectionInstance = (IBase*)(pBaseConnectionInstance);
		return LIBMCDRIVER_GRPC_SUCCESS;
	}
	catch (ELibMCDriver_GRPCInterfaceException & Exception) {
		return handleLibMCDriver_GRPCException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_GRPCResult libmcdriver_grpc_driver_grpc_findconnection(LibMCDriver_GRPC_Driver_GRPC pDriver_GRPC)
{
	IBase* pIBaseClass = (IBase *)pDriver_GRPC;

	try {
		IDriver_GRPC* pIDriver_GRPC = dynamic_cast<IDriver_GRPC*>(pIBaseClass);
		if (!pIDriver_GRPC)
			throw ELibMCDriver_GRPCInterfaceException(LIBMCDRIVER_GRPC_ERROR_INVALIDCAST);
		
		pIDriver_GRPC->FindConnection();

		return LIBMCDRIVER_GRPC_SUCCESS;
	}
	catch (ELibMCDriver_GRPCInterfaceException & Exception) {
		return handleLibMCDriver_GRPCException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}



/*************************************************************************************************************************
 Function table lookup implementation
**************************************************************************************************************************/

LibMCDriver_GRPCResult LibMCDriver_GRPC::Impl::LibMCDriver_GRPC_GetProcAddress (const char * pProcName, void ** ppProcAddress)
{
	if (pProcName == nullptr)
		return LIBMCDRIVER_GRPC_ERROR_INVALIDPARAM;
	if (ppProcAddress == nullptr)
		return LIBMCDRIVER_GRPC_ERROR_INVALIDPARAM;
	*ppProcAddress = nullptr;
	std::string sProcName (pProcName);
	
	if (sProcName == "libmcdriver_grpc_driver_configure") 
		*ppProcAddress = (void*) &libmcdriver_grpc_driver_configure;
	if (sProcName == "libmcdriver_grpc_driver_getname") 
		*ppProcAddress = (void*) &libmcdriver_grpc_driver_getname;
	if (sProcName == "libmcdriver_grpc_driver_gettype") 
		*ppProcAddress = (void*) &libmcdriver_grpc_driver_gettype;
	if (sProcName == "libmcdriver_grpc_driver_getversion") 
		*ppProcAddress = (void*) &libmcdriver_grpc_driver_getversion;
	if (sProcName == "libmcdriver_grpc_driver_queryparameters") 
		*ppProcAddress = (void*) &libmcdriver_grpc_driver_queryparameters;
	if (sProcName == "libmcdriver_grpc_driver_queryparametersex") 
		*ppProcAddress = (void*) &libmcdriver_grpc_driver_queryparametersex;
	if (sProcName == "libmcdriver_grpc_driver_grpc_settosimulationmode") 
		*ppProcAddress = (void*) &libmcdriver_grpc_driver_grpc_settosimulationmode;
	if (sProcName == "libmcdriver_grpc_driver_grpc_issimulationmode") 
		*ppProcAddress = (void*) &libmcdriver_grpc_driver_grpc_issimulationmode;
	if (sProcName == "libmcdriver_grpc_driver_grpc_connectunsecure") 
		*ppProcAddress = (void*) &libmcdriver_grpc_driver_grpc_connectunsecure;
	if (sProcName == "libmcdriver_grpc_driver_grpc_findconnection") 
		*ppProcAddress = (void*) &libmcdriver_grpc_driver_grpc_findconnection;
	if (sProcName == "libmcdriver_grpc_getversion") 
		*ppProcAddress = (void*) &libmcdriver_grpc_getversion;
	if (sProcName == "libmcdriver_grpc_getlasterror") 
		*ppProcAddress = (void*) &libmcdriver_grpc_getlasterror;
	if (sProcName == "libmcdriver_grpc_releaseinstance") 
		*ppProcAddress = (void*) &libmcdriver_grpc_releaseinstance;
	if (sProcName == "libmcdriver_grpc_acquireinstance") 
		*ppProcAddress = (void*) &libmcdriver_grpc_acquireinstance;
	if (sProcName == "libmcdriver_grpc_injectcomponent") 
		*ppProcAddress = (void*) &libmcdriver_grpc_injectcomponent;
	if (sProcName == "libmcdriver_grpc_getsymbollookupmethod") 
		*ppProcAddress = (void*) &libmcdriver_grpc_getsymbollookupmethod;
	if (sProcName == "libmcdriver_grpc_createdriver") 
		*ppProcAddress = (void*) &libmcdriver_grpc_createdriver;
	
	if (*ppProcAddress == nullptr) 
		return LIBMCDRIVER_GRPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
	return LIBMCDRIVER_GRPC_SUCCESS;
}

/*************************************************************************************************************************
 Global functions implementation
**************************************************************************************************************************/
LibMCDriver_GRPCResult libmcdriver_grpc_getversion(LibMCDriver_GRPC_uint32 * pMajor, LibMCDriver_GRPC_uint32 * pMinor, LibMCDriver_GRPC_uint32 * pMicro)
{
	IBase* pIBaseClass = nullptr;

	try {
		if (!pMajor)
			throw ELibMCDriver_GRPCInterfaceException (LIBMCDRIVER_GRPC_ERROR_INVALIDPARAM);
		if (!pMinor)
			throw ELibMCDriver_GRPCInterfaceException (LIBMCDRIVER_GRPC_ERROR_INVALIDPARAM);
		if (!pMicro)
			throw ELibMCDriver_GRPCInterfaceException (LIBMCDRIVER_GRPC_ERROR_INVALIDPARAM);
		CWrapper::GetVersion(*pMajor, *pMinor, *pMicro);

		return LIBMCDRIVER_GRPC_SUCCESS;
	}
	catch (ELibMCDriver_GRPCInterfaceException & Exception) {
		return handleLibMCDriver_GRPCException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_GRPCResult libmcdriver_grpc_getlasterror(LibMCDriver_GRPC_Base pInstance, const LibMCDriver_GRPC_uint32 nErrorMessageBufferSize, LibMCDriver_GRPC_uint32* pErrorMessageNeededChars, char * pErrorMessageBuffer, bool * pHasError)
{
	IBase* pIBaseClass = nullptr;

	try {
		if ( (!pErrorMessageBuffer) && !(pErrorMessageNeededChars) )
			throw ELibMCDriver_GRPCInterfaceException (LIBMCDRIVER_GRPC_ERROR_INVALIDPARAM);
		if (pHasError == nullptr)
			throw ELibMCDriver_GRPCInterfaceException (LIBMCDRIVER_GRPC_ERROR_INVALIDPARAM);
		IBase* pIBaseClassInstance = (IBase *)pInstance;
		IBase* pIInstance = dynamic_cast<IBase*>(pIBaseClassInstance);
		if (!pIInstance)
			throw ELibMCDriver_GRPCInterfaceException (LIBMCDRIVER_GRPC_ERROR_INVALIDCAST);
		
		std::string sErrorMessage("");
		*pHasError = CWrapper::GetLastError(pIInstance, sErrorMessage);

		if (pErrorMessageNeededChars)
			*pErrorMessageNeededChars = (LibMCDriver_GRPC_uint32) (sErrorMessage.size()+1);
		if (pErrorMessageBuffer) {
			if (sErrorMessage.size() >= nErrorMessageBufferSize)
				throw ELibMCDriver_GRPCInterfaceException (LIBMCDRIVER_GRPC_ERROR_BUFFERTOOSMALL);
			for (size_t iErrorMessage = 0; iErrorMessage < sErrorMessage.size(); iErrorMessage++)
				pErrorMessageBuffer[iErrorMessage] = sErrorMessage[iErrorMessage];
			pErrorMessageBuffer[sErrorMessage.size()] = 0;
		}
		return LIBMCDRIVER_GRPC_SUCCESS;
	}
	catch (ELibMCDriver_GRPCInterfaceException & Exception) {
		return handleLibMCDriver_GRPCException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_GRPCResult libmcdriver_grpc_releaseinstance(LibMCDriver_GRPC_Base pInstance)
{
	IBase* pIBaseClass = nullptr;

	try {
		IBase* pIBaseClassInstance = (IBase *)pInstance;
		IBase* pIInstance = dynamic_cast<IBase*>(pIBaseClassInstance);
		if (!pIInstance)
			throw ELibMCDriver_GRPCInterfaceException (LIBMCDRIVER_GRPC_ERROR_INVALIDCAST);
		
		CWrapper::ReleaseInstance(pIInstance);

		return LIBMCDRIVER_GRPC_SUCCESS;
	}
	catch (ELibMCDriver_GRPCInterfaceException & Exception) {
		return handleLibMCDriver_GRPCException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_GRPCResult libmcdriver_grpc_acquireinstance(LibMCDriver_GRPC_Base pInstance)
{
	IBase* pIBaseClass = nullptr;

	try {
		IBase* pIBaseClassInstance = (IBase *)pInstance;
		IBase* pIInstance = dynamic_cast<IBase*>(pIBaseClassInstance);
		if (!pIInstance)
			throw ELibMCDriver_GRPCInterfaceException (LIBMCDRIVER_GRPC_ERROR_INVALIDCAST);
		
		CWrapper::AcquireInstance(pIInstance);

		return LIBMCDRIVER_GRPC_SUCCESS;
	}
	catch (ELibMCDriver_GRPCInterfaceException & Exception) {
		return handleLibMCDriver_GRPCException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_GRPCResult libmcdriver_grpc_injectcomponent(const char * pNameSpace, LibMCDriver_GRPC_pvoid pSymbolAddressMethod)
{
	IBase* pIBaseClass = nullptr;

	try {
		if (pNameSpace == nullptr)
			throw ELibMCDriver_GRPCInterfaceException (LIBMCDRIVER_GRPC_ERROR_INVALIDPARAM);
		std::string sNameSpace(pNameSpace);
		
		bool bNameSpaceFound = false;
		
		if (sNameSpace == "LibMCEnv") {
			if (CWrapper::sPLibMCEnvWrapper.get() != nullptr) {
				throw ELibMCDriver_GRPCInterfaceException(LIBMCDRIVER_GRPC_ERROR_COULDNOTLOADLIBRARY);
			}
			CWrapper::sPLibMCEnvWrapper = LibMCEnv::CWrapper::loadLibraryFromSymbolLookupMethod(pSymbolAddressMethod);
			bNameSpaceFound = true;
		}
		
		if (!bNameSpaceFound)
			throw ELibMCDriver_GRPCInterfaceException(LIBMCDRIVER_GRPC_ERROR_COULDNOTLOADLIBRARY);
		
		return LIBMCDRIVER_GRPC_SUCCESS;
	}
	catch (ELibMCDriver_GRPCInterfaceException & Exception) {
		return handleLibMCDriver_GRPCException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_GRPCResult libmcdriver_grpc_getsymbollookupmethod(LibMCDriver_GRPC_pvoid * pSymbolLookupMethod)
{
	IBase* pIBaseClass = nullptr;

	try {
		if (pSymbolLookupMethod == nullptr)
			throw ELibMCDriver_GRPCInterfaceException (LIBMCDRIVER_GRPC_ERROR_INVALIDPARAM);
		*pSymbolLookupMethod = (void*)&LibMCDriver_GRPC::Impl::LibMCDriver_GRPC_GetProcAddress;
		return LIBMCDRIVER_GRPC_SUCCESS;
	}
	catch (ELibMCDriver_GRPCInterfaceException & Exception) {
		return handleLibMCDriver_GRPCException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_GRPCResult libmcdriver_grpc_createdriver(const char * pName, const char * pType, LibMCEnv_DriverEnvironment pDriverEnvironment, LibMCDriver_GRPC_Driver * pInstance)
{
	IBase* pIBaseClass = nullptr;

	try {
		if (pName == nullptr)
			throw ELibMCDriver_GRPCInterfaceException (LIBMCDRIVER_GRPC_ERROR_INVALIDPARAM);
		if (pType == nullptr)
			throw ELibMCDriver_GRPCInterfaceException (LIBMCDRIVER_GRPC_ERROR_INVALIDPARAM);
		if (pInstance == nullptr)
			throw ELibMCDriver_GRPCInterfaceException (LIBMCDRIVER_GRPC_ERROR_INVALIDPARAM);
		std::string sName(pName);
		std::string sType(pType);
		LibMCEnv::PDriverEnvironment pIDriverEnvironment = std::make_shared<LibMCEnv::CDriverEnvironment>(CWrapper::sPLibMCEnvWrapper.get(), pDriverEnvironment);
		CWrapper::sPLibMCEnvWrapper->AcquireInstance(pIDriverEnvironment.get());
		if (!pIDriverEnvironment)
			throw ELibMCDriver_GRPCInterfaceException (LIBMCDRIVER_GRPC_ERROR_INVALIDCAST);
		
		IBase* pBaseInstance(nullptr);
		pBaseInstance = CWrapper::CreateDriver(sName, sType, pIDriverEnvironment);

		*pInstance = (IBase*)(pBaseInstance);
		return LIBMCDRIVER_GRPC_SUCCESS;
	}
	catch (ELibMCDriver_GRPCInterfaceException & Exception) {
		return handleLibMCDriver_GRPCException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}


