/*++

Copyright (C) 2024 ASL Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.8.0-develop.

Abstract: This is an autogenerated C++-Header file in order to allow an easy
 use of ASL Inkjet Driver Interface

Interface version: 2.0.0

*/

#ifndef __LIBMCDRIVER_ASL_CPPHEADER_DYNAMIC_CPP
#define __LIBMCDRIVER_ASL_CPPHEADER_DYNAMIC_CPP

#include "libmcdriver_asl_types.hpp"
#include "libmcdriver_asl_dynamic.h"

#include "libmcenv_dynamic.hpp"

#ifdef _WIN32
#include <windows.h>
#else // _WIN32
#include <dlfcn.h>
#endif // _WIN32
#include <string>
#include <memory>
#include <vector>
#include <exception>

namespace LibMCDriver_ASL {

/*************************************************************************************************************************
 Forward Declaration of all classes
**************************************************************************************************************************/
class CWrapper;
class CBase;
class CDriver;
class CDriverContext;
class CDriver_ASL;

/*************************************************************************************************************************
 Declaration of deprecated class types
**************************************************************************************************************************/
typedef CWrapper CLibMCDriver_ASLWrapper;
typedef CBase CLibMCDriver_ASLBase;
typedef CDriver CLibMCDriver_ASLDriver;
typedef CDriverContext CLibMCDriver_ASLDriverContext;
typedef CDriver_ASL CLibMCDriver_ASLDriver_ASL;

/*************************************************************************************************************************
 Declaration of shared pointer types
**************************************************************************************************************************/
typedef std::shared_ptr<CWrapper> PWrapper;
typedef std::shared_ptr<CBase> PBase;
typedef std::shared_ptr<CDriver> PDriver;
typedef std::shared_ptr<CDriverContext> PDriverContext;
typedef std::shared_ptr<CDriver_ASL> PDriver_ASL;

/*************************************************************************************************************************
 Declaration of deprecated shared pointer types
**************************************************************************************************************************/
typedef PWrapper PLibMCDriver_ASLWrapper;
typedef PBase PLibMCDriver_ASLBase;
typedef PDriver PLibMCDriver_ASLDriver;
typedef PDriverContext PLibMCDriver_ASLDriverContext;
typedef PDriver_ASL PLibMCDriver_ASLDriver_ASL;


/*************************************************************************************************************************
 classParam Definition
**************************************************************************************************************************/

template<class T> class classParam {
private:
	const T* m_ptr;

public:
	classParam(const T* ptr)
		: m_ptr (ptr)
	{
	}

	classParam(std::shared_ptr <T> sharedPtr)
		: m_ptr (sharedPtr.get())
	{
	}

	LibMCDriver_ASLHandle GetHandle()
	{
		if (m_ptr != nullptr)
			return m_ptr->handle();
		return nullptr;
	}
};

/*************************************************************************************************************************
 Class ELibMCDriver_ASLException 
**************************************************************************************************************************/
class ELibMCDriver_ASLException : public std::exception {
protected:
	/**
	* Error code for the Exception.
	*/
	LibMCDriver_ASLResult m_errorCode;
	/**
	* Error message for the Exception.
	*/
	std::string m_errorMessage;
	std::string m_originalErrorMessage;

public:
	/**
	* Exception Constructor.
	*/
	ELibMCDriver_ASLException(LibMCDriver_ASLResult errorCode, const std::string & sErrorMessage)
		: m_errorCode(errorCode), m_originalErrorMessage(sErrorMessage)
	{
		m_errorMessage = buildErrorMessage();
	}

	/**
	* Returns error code
	*/
	LibMCDriver_ASLResult getErrorCode() const noexcept
	{
		return m_errorCode;
	}

	/**
	* Returns error message
	*/
	const char* what() const noexcept
	{
		return m_errorMessage.c_str();
	}

	const char* getErrorMessage() const noexcept
	{
		return m_originalErrorMessage.c_str();
	}

	const char* getErrorName() const noexcept
	{
		switch(getErrorCode()) {
			case LIBMCDRIVER_ASL_SUCCESS: return "SUCCESS";
			case LIBMCDRIVER_ASL_ERROR_NOTIMPLEMENTED: return "NOTIMPLEMENTED";
			case LIBMCDRIVER_ASL_ERROR_INVALIDPARAM: return "INVALIDPARAM";
			case LIBMCDRIVER_ASL_ERROR_INVALIDCAST: return "INVALIDCAST";
			case LIBMCDRIVER_ASL_ERROR_BUFFERTOOSMALL: return "BUFFERTOOSMALL";
			case LIBMCDRIVER_ASL_ERROR_GENERICEXCEPTION: return "GENERICEXCEPTION";
			case LIBMCDRIVER_ASL_ERROR_COULDNOTLOADLIBRARY: return "COULDNOTLOADLIBRARY";
			case LIBMCDRIVER_ASL_ERROR_COULDNOTFINDLIBRARYEXPORT: return "COULDNOTFINDLIBRARYEXPORT";
			case LIBMCDRIVER_ASL_ERROR_INCOMPATIBLEBINARYVERSION: return "INCOMPATIBLEBINARYVERSION";
		}
		return "UNKNOWN";
	}

	const char* getErrorDescription() const noexcept
	{
		switch(getErrorCode()) {
			case LIBMCDRIVER_ASL_SUCCESS: return "success";
			case LIBMCDRIVER_ASL_ERROR_NOTIMPLEMENTED: return "functionality not implemented";
			case LIBMCDRIVER_ASL_ERROR_INVALIDPARAM: return "an invalid parameter was passed";
			case LIBMCDRIVER_ASL_ERROR_INVALIDCAST: return "a type cast failed";
			case LIBMCDRIVER_ASL_ERROR_BUFFERTOOSMALL: return "a provided buffer is too small";
			case LIBMCDRIVER_ASL_ERROR_GENERICEXCEPTION: return "a generic exception occurred";
			case LIBMCDRIVER_ASL_ERROR_COULDNOTLOADLIBRARY: return "the library could not be loaded";
			case LIBMCDRIVER_ASL_ERROR_COULDNOTFINDLIBRARYEXPORT: return "a required exported symbol could not be found in the library";
			case LIBMCDRIVER_ASL_ERROR_INCOMPATIBLEBINARYVERSION: return "the version of the binary interface does not match the bindings interface";
		}
		return "unknown error";
	}

private:

	std::string buildErrorMessage() const noexcept
	{
		std::string msg = m_originalErrorMessage;
		if (msg.empty()) {
			msg = getErrorDescription();
		}
		return std::string("Error: ") + getErrorName() + ": " + msg;
	}
};

/*************************************************************************************************************************
 Class CInputVector
**************************************************************************************************************************/
template <typename T>
class CInputVector {
private:
	
	const T* m_data;
	size_t m_size;
	
public:
	
	CInputVector(const std::vector<T>& vec)
		: m_data( vec.data() ), m_size( vec.size() )
	{
	}
	
	CInputVector(const T* in_data, size_t in_size)
		: m_data( in_data ), m_size(in_size )
	{
	}
	
	const T* data() const
	{
		return m_data;
	}
	
	size_t size() const
	{
		return m_size;
	}
	
};

// declare deprecated class name
template<typename T>
using CLibMCDriver_ASLInputVector = CInputVector<T>;

/*************************************************************************************************************************
 Class CWrapper 
**************************************************************************************************************************/
class CWrapper {
public:
	
	explicit CWrapper(void* pSymbolLookupMethod)
	{
		CheckError(nullptr, initWrapperTable(&m_WrapperTable));
		CheckError(nullptr, loadWrapperTableFromSymbolLookupMethod(&m_WrapperTable, pSymbolLookupMethod));
		
		CheckError(nullptr, checkBinaryVersion());
	}
	
	explicit CWrapper(const std::string &sFileName)
	{
		CheckError(nullptr, initWrapperTable(&m_WrapperTable));
		CheckError(nullptr, loadWrapperTable(&m_WrapperTable, sFileName.c_str()));
		
		CheckError(nullptr, checkBinaryVersion());
	}
	
	static PWrapper loadLibrary(const std::string &sFileName)
	{
		return std::make_shared<CWrapper>(sFileName);
	}
	
	static PWrapper loadLibraryFromSymbolLookupMethod(void* pSymbolLookupMethod)
	{
		return std::make_shared<CWrapper>(pSymbolLookupMethod);
	}
	
	~CWrapper()
	{
		releaseWrapperTable(&m_WrapperTable);
	}
	
	inline void CheckError(CBase * pBaseClass, LibMCDriver_ASLResult nResult);

	inline void GetVersion(LibMCDriver_ASL_uint32 & nMajor, LibMCDriver_ASL_uint32 & nMinor, LibMCDriver_ASL_uint32 & nMicro);
	inline bool GetLastError(classParam<CBase> pInstance, std::string & sErrorMessage);
	inline void ReleaseInstance(classParam<CBase> pInstance);
	inline void AcquireInstance(classParam<CBase> pInstance);
	inline void InjectComponent(const std::string & sNameSpace, const LibMCDriver_ASL_pvoid pSymbolAddressMethod);
	inline LibMCDriver_ASL_pvoid GetSymbolLookupMethod();
	inline PDriver CreateDriver(const std::string & sName, const std::string & sType, classParam<LibMCEnv::CDriverEnvironment> pDriverEnvironment);

private:
	sLibMCDriver_ASLDynamicWrapperTable m_WrapperTable;
	// Injected Components
	LibMCEnv::PWrapper m_pLibMCEnvWrapper;

	
	LibMCDriver_ASLResult checkBinaryVersion()
	{
		LibMCDriver_ASL_uint32 nMajor, nMinor, nMicro;
		GetVersion(nMajor, nMinor, nMicro);
		if (nMajor != LIBMCDRIVER_ASL_VERSION_MAJOR) {
			return LIBMCDRIVER_ASL_ERROR_INCOMPATIBLEBINARYVERSION;
		}
		return LIBMCDRIVER_ASL_SUCCESS;
	}
	LibMCDriver_ASLResult initWrapperTable(sLibMCDriver_ASLDynamicWrapperTable * pWrapperTable);
	LibMCDriver_ASLResult releaseWrapperTable(sLibMCDriver_ASLDynamicWrapperTable * pWrapperTable);
	LibMCDriver_ASLResult loadWrapperTable(sLibMCDriver_ASLDynamicWrapperTable * pWrapperTable, const char * pLibraryFileName);
	LibMCDriver_ASLResult loadWrapperTableFromSymbolLookupMethod(sLibMCDriver_ASLDynamicWrapperTable * pWrapperTable, void* pSymbolLookupMethod);

	friend class CBase;
	friend class CDriver;
	friend class CDriverContext;
	friend class CDriver_ASL;

};

	
/*************************************************************************************************************************
 Class CBase 
**************************************************************************************************************************/
class CBase {
public:
	
protected:
	/* Wrapper Object that created the class. */
	CWrapper * m_pWrapper;
	/* Handle to Instance in library*/
	LibMCDriver_ASLHandle m_pHandle;

	/* Checks for an Error code and raises Exceptions */
	void CheckError(LibMCDriver_ASLResult nResult)
	{
		if (m_pWrapper != nullptr)
			m_pWrapper->CheckError(this, nResult);
	}
public:
	/**
	* CBase::CBase - Constructor for Base class.
	*/
	CBase(CWrapper * pWrapper, LibMCDriver_ASLHandle pHandle)
		: m_pWrapper(pWrapper), m_pHandle(pHandle)
	{
	}

	/**
	* CBase::~CBase - Destructor for Base class.
	*/
	virtual ~CBase()
	{
		if (m_pWrapper != nullptr)
			m_pWrapper->ReleaseInstance(this);
		m_pWrapper = nullptr;
	}

	/**
	* CBase::handle - Returns handle to instance.
	*/
	LibMCDriver_ASLHandle handle() const
	{
		return m_pHandle;
	}

	/**
	* CBase::wrapper - Returns wrapper instance.
	*/
	CWrapper * wrapper() const
	{
		return m_pWrapper;
	}
	
	friend class CWrapper;
};
	
/*************************************************************************************************************************
 Class CDriver 
**************************************************************************************************************************/
class CDriver : public CBase {
public:
	
	/**
	* CDriver::CDriver - Constructor for Driver class.
	*/
	CDriver(CWrapper* pWrapper, LibMCDriver_ASLHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline void Configure(const std::string & sConfigurationString);
	inline std::string GetName();
	inline std::string GetType();
	inline void GetVersion(LibMCDriver_ASL_uint32 & nMajor, LibMCDriver_ASL_uint32 & nMinor, LibMCDriver_ASL_uint32 & nMicro, std::string & sBuild);
	inline void QueryParameters();
	inline void QueryParametersEx(classParam<LibMCEnv::CDriverStatusUpdateSession> pDriverUpdateInstance);
};
	
/*************************************************************************************************************************
 Class CDriverContext 
**************************************************************************************************************************/
class CDriverContext : public CBase {
public:
	
	/**
	* CDriverContext::CDriverContext - Constructor for DriverContext class.
	*/
	CDriverContext(CWrapper* pWrapper, LibMCDriver_ASLHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline std::string GetSerialNumber();
};
	
/*************************************************************************************************************************
 Class CDriver_ASL 
**************************************************************************************************************************/
class CDriver_ASL : public CDriver {
public:
	
	/**
	* CDriver_ASL::CDriver_ASL - Constructor for Driver_ASL class.
	*/
	CDriver_ASL(CWrapper* pWrapper, LibMCDriver_ASLHandle pHandle)
		: CDriver(pWrapper, pHandle)
	{
	}
	
	inline void SetToSimulationMode();
	inline bool IsSimulationMode();
	inline PDriverContext Connect(const std::string & sIdentifier, const std::string & sCOMPort);
	inline bool ContextExists(const std::string & sIdentifier);
	inline PDriverContext FindContext(const std::string & sIdentifier);
};
	
	/**
	* CWrapper::GetVersion - retrieves the binary version of this library.
	* @param[out] nMajor - returns the major version of this library
	* @param[out] nMinor - returns the minor version of this library
	* @param[out] nMicro - returns the micro version of this library
	*/
	inline void CWrapper::GetVersion(LibMCDriver_ASL_uint32 & nMajor, LibMCDriver_ASL_uint32 & nMinor, LibMCDriver_ASL_uint32 & nMicro)
	{
		CheckError(nullptr,m_WrapperTable.m_GetVersion(&nMajor, &nMinor, &nMicro));
	}
	
	/**
	* CWrapper::GetLastError - Returns the last error recorded on this object
	* @param[in] pInstance - Instance Handle
	* @param[out] sErrorMessage - Message of the last error
	* @return Is there a last error to query
	*/
	inline bool CWrapper::GetLastError(classParam<CBase> pInstance, std::string & sErrorMessage)
	{
		LibMCDriver_ASLHandle hInstance = pInstance.GetHandle();
		LibMCDriver_ASL_uint32 bytesNeededErrorMessage = 0;
		LibMCDriver_ASL_uint32 bytesWrittenErrorMessage = 0;
		bool resultHasError = 0;
		CheckError(nullptr,m_WrapperTable.m_GetLastError(hInstance, 0, &bytesNeededErrorMessage, nullptr, &resultHasError));
		std::vector<char> bufferErrorMessage(bytesNeededErrorMessage);
		CheckError(nullptr,m_WrapperTable.m_GetLastError(hInstance, bytesNeededErrorMessage, &bytesWrittenErrorMessage, &bufferErrorMessage[0], &resultHasError));
		sErrorMessage = std::string(&bufferErrorMessage[0]);
		
		return resultHasError;
	}
	
	/**
	* CWrapper::ReleaseInstance - Releases shared ownership of an Instance
	* @param[in] pInstance - Instance Handle
	*/
	inline void CWrapper::ReleaseInstance(classParam<CBase> pInstance)
	{
		LibMCDriver_ASLHandle hInstance = pInstance.GetHandle();
		CheckError(nullptr,m_WrapperTable.m_ReleaseInstance(hInstance));
	}
	
	/**
	* CWrapper::AcquireInstance - Acquires shared ownership of an Instance
	* @param[in] pInstance - Instance Handle
	*/
	inline void CWrapper::AcquireInstance(classParam<CBase> pInstance)
	{
		LibMCDriver_ASLHandle hInstance = pInstance.GetHandle();
		CheckError(nullptr,m_WrapperTable.m_AcquireInstance(hInstance));
	}
	
	/**
	* CWrapper::InjectComponent - Injects an imported component for usage within this component
	* @param[in] sNameSpace - NameSpace of the injected component
	* @param[in] pSymbolAddressMethod - Address of the SymbolAddressMethod of the injected component
	*/
	inline void CWrapper::InjectComponent(const std::string & sNameSpace, const LibMCDriver_ASL_pvoid pSymbolAddressMethod)
	{
		CheckError(nullptr,m_WrapperTable.m_InjectComponent(sNameSpace.c_str(), pSymbolAddressMethod));
		
		bool bNameSpaceFound = false;
		if (sNameSpace == "LibMCEnv") {
			if (m_pLibMCEnvWrapper != nullptr) {
				throw ELibMCDriver_ASLException(LIBMCDRIVER_ASL_ERROR_COULDNOTLOADLIBRARY, "Library with namespace " + sNameSpace + " is already registered.");
			}
			m_pLibMCEnvWrapper = LibMCEnv::CWrapper::loadLibraryFromSymbolLookupMethod(pSymbolAddressMethod);
			bNameSpaceFound = true;
		}
		if (!bNameSpaceFound)
			throw ELibMCDriver_ASLException(LIBMCDRIVER_ASL_ERROR_COULDNOTLOADLIBRARY, "Unknown namespace " + sNameSpace);
	}
	
	/**
	* CWrapper::GetSymbolLookupMethod - Returns the address of the SymbolLookupMethod
	* @return Address of the SymbolAddressMethod
	*/
	inline LibMCDriver_ASL_pvoid CWrapper::GetSymbolLookupMethod()
	{
		LibMCDriver_ASL_pvoid resultSymbolLookupMethod = 0;
		CheckError(nullptr,m_WrapperTable.m_GetSymbolLookupMethod(&resultSymbolLookupMethod));
		
		return resultSymbolLookupMethod;
	}
	
	/**
	* CWrapper::CreateDriver - Creates a driver instance with a specific name.
	* @param[in] sName - Name of driver to be created.
	* @param[in] sType - Type of driver to be created.
	* @param[in] pDriverEnvironment - Environment of this driver.
	* @return New Driver instance
	*/
	inline PDriver CWrapper::CreateDriver(const std::string & sName, const std::string & sType, classParam<LibMCEnv::CDriverEnvironment> pDriverEnvironment)
	{
		LibMCEnvHandle hDriverEnvironment = pDriverEnvironment.GetHandle();
		LibMCDriver_ASLHandle hInstance = nullptr;
		CheckError(nullptr,m_WrapperTable.m_CreateDriver(sName.c_str(), sType.c_str(), hDriverEnvironment, &hInstance));
		
		if (hInstance) {
			return std::make_shared<CDriver>(this, hInstance);
		} else {
			return nullptr;
		}
	}
	
	inline void CWrapper::CheckError(CBase * pBaseClass, LibMCDriver_ASLResult nResult)
	{
		if (nResult != 0) {
			std::string sErrorMessage;
			if (pBaseClass != nullptr) {
				GetLastError(pBaseClass, sErrorMessage);
			}
			throw ELibMCDriver_ASLException(nResult, sErrorMessage);
		}
	}
	

	inline LibMCDriver_ASLResult CWrapper::initWrapperTable(sLibMCDriver_ASLDynamicWrapperTable * pWrapperTable)
	{
		if (pWrapperTable == nullptr)
			return LIBMCDRIVER_ASL_ERROR_INVALIDPARAM;
		
		pWrapperTable->m_LibraryHandle = nullptr;
		pWrapperTable->m_Driver_Configure = nullptr;
		pWrapperTable->m_Driver_GetName = nullptr;
		pWrapperTable->m_Driver_GetType = nullptr;
		pWrapperTable->m_Driver_GetVersion = nullptr;
		pWrapperTable->m_Driver_QueryParameters = nullptr;
		pWrapperTable->m_Driver_QueryParametersEx = nullptr;
		pWrapperTable->m_DriverContext_GetSerialNumber = nullptr;
		pWrapperTable->m_Driver_ASL_SetToSimulationMode = nullptr;
		pWrapperTable->m_Driver_ASL_IsSimulationMode = nullptr;
		pWrapperTable->m_Driver_ASL_Connect = nullptr;
		pWrapperTable->m_Driver_ASL_ContextExists = nullptr;
		pWrapperTable->m_Driver_ASL_FindContext = nullptr;
		pWrapperTable->m_GetVersion = nullptr;
		pWrapperTable->m_GetLastError = nullptr;
		pWrapperTable->m_ReleaseInstance = nullptr;
		pWrapperTable->m_AcquireInstance = nullptr;
		pWrapperTable->m_InjectComponent = nullptr;
		pWrapperTable->m_GetSymbolLookupMethod = nullptr;
		pWrapperTable->m_CreateDriver = nullptr;
		
		return LIBMCDRIVER_ASL_SUCCESS;
	}

	inline LibMCDriver_ASLResult CWrapper::releaseWrapperTable(sLibMCDriver_ASLDynamicWrapperTable * pWrapperTable)
	{
		if (pWrapperTable == nullptr)
			return LIBMCDRIVER_ASL_ERROR_INVALIDPARAM;
		
		if (pWrapperTable->m_LibraryHandle != nullptr) {
		#ifdef _WIN32
			HMODULE hModule = (HMODULE) pWrapperTable->m_LibraryHandle;
			FreeLibrary(hModule);
		#else // _WIN32
			dlclose(pWrapperTable->m_LibraryHandle);
		#endif // _WIN32
			return initWrapperTable(pWrapperTable);
		}
		
		return LIBMCDRIVER_ASL_SUCCESS;
	}

	inline LibMCDriver_ASLResult CWrapper::loadWrapperTable(sLibMCDriver_ASLDynamicWrapperTable * pWrapperTable, const char * pLibraryFileName)
	{
		if (pWrapperTable == nullptr)
			return LIBMCDRIVER_ASL_ERROR_INVALIDPARAM;
		if (pLibraryFileName == nullptr)
			return LIBMCDRIVER_ASL_ERROR_INVALIDPARAM;
		
		#ifdef _WIN32
		// Convert filename to UTF16-string
		int nLength = 0;
		while ((pLibraryFileName[nLength] != 0) && (nLength < MAX_PATH))
			nLength++;
		int nBufferSize = nLength * 2 + 2;
		std::vector<wchar_t> wsLibraryFileName(nBufferSize);
		int nResult = MultiByteToWideChar(CP_UTF8, 0, pLibraryFileName, nLength, &wsLibraryFileName[0], nBufferSize);
		if (nResult == 0)
			return LIBMCDRIVER_ASL_ERROR_COULDNOTLOADLIBRARY;
		
		HMODULE hLibrary = LoadLibraryW(wsLibraryFileName.data());
		if (hLibrary == 0) 
			return LIBMCDRIVER_ASL_ERROR_COULDNOTLOADLIBRARY;
		#else // _WIN32
		void* hLibrary = dlopen(pLibraryFileName, RTLD_LAZY);
		if (hLibrary == 0) 
			return LIBMCDRIVER_ASL_ERROR_COULDNOTLOADLIBRARY;
		dlerror();
		#endif // _WIN32
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_Configure = (PLibMCDriver_ASLDriver_ConfigurePtr) GetProcAddress(hLibrary, "libmcdriver_asl_driver_configure");
		#else // _WIN32
		pWrapperTable->m_Driver_Configure = (PLibMCDriver_ASLDriver_ConfigurePtr) dlsym(hLibrary, "libmcdriver_asl_driver_configure");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_Configure == nullptr)
			return LIBMCDRIVER_ASL_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_GetName = (PLibMCDriver_ASLDriver_GetNamePtr) GetProcAddress(hLibrary, "libmcdriver_asl_driver_getname");
		#else // _WIN32
		pWrapperTable->m_Driver_GetName = (PLibMCDriver_ASLDriver_GetNamePtr) dlsym(hLibrary, "libmcdriver_asl_driver_getname");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_GetName == nullptr)
			return LIBMCDRIVER_ASL_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_GetType = (PLibMCDriver_ASLDriver_GetTypePtr) GetProcAddress(hLibrary, "libmcdriver_asl_driver_gettype");
		#else // _WIN32
		pWrapperTable->m_Driver_GetType = (PLibMCDriver_ASLDriver_GetTypePtr) dlsym(hLibrary, "libmcdriver_asl_driver_gettype");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_GetType == nullptr)
			return LIBMCDRIVER_ASL_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_GetVersion = (PLibMCDriver_ASLDriver_GetVersionPtr) GetProcAddress(hLibrary, "libmcdriver_asl_driver_getversion");
		#else // _WIN32
		pWrapperTable->m_Driver_GetVersion = (PLibMCDriver_ASLDriver_GetVersionPtr) dlsym(hLibrary, "libmcdriver_asl_driver_getversion");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_GetVersion == nullptr)
			return LIBMCDRIVER_ASL_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_QueryParameters = (PLibMCDriver_ASLDriver_QueryParametersPtr) GetProcAddress(hLibrary, "libmcdriver_asl_driver_queryparameters");
		#else // _WIN32
		pWrapperTable->m_Driver_QueryParameters = (PLibMCDriver_ASLDriver_QueryParametersPtr) dlsym(hLibrary, "libmcdriver_asl_driver_queryparameters");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_QueryParameters == nullptr)
			return LIBMCDRIVER_ASL_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_QueryParametersEx = (PLibMCDriver_ASLDriver_QueryParametersExPtr) GetProcAddress(hLibrary, "libmcdriver_asl_driver_queryparametersex");
		#else // _WIN32
		pWrapperTable->m_Driver_QueryParametersEx = (PLibMCDriver_ASLDriver_QueryParametersExPtr) dlsym(hLibrary, "libmcdriver_asl_driver_queryparametersex");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_QueryParametersEx == nullptr)
			return LIBMCDRIVER_ASL_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_DriverContext_GetSerialNumber = (PLibMCDriver_ASLDriverContext_GetSerialNumberPtr) GetProcAddress(hLibrary, "libmcdriver_asl_drivercontext_getserialnumber");
		#else // _WIN32
		pWrapperTable->m_DriverContext_GetSerialNumber = (PLibMCDriver_ASLDriverContext_GetSerialNumberPtr) dlsym(hLibrary, "libmcdriver_asl_drivercontext_getserialnumber");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_DriverContext_GetSerialNumber == nullptr)
			return LIBMCDRIVER_ASL_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_ASL_SetToSimulationMode = (PLibMCDriver_ASLDriver_ASL_SetToSimulationModePtr) GetProcAddress(hLibrary, "libmcdriver_asl_driver_asl_settosimulationmode");
		#else // _WIN32
		pWrapperTable->m_Driver_ASL_SetToSimulationMode = (PLibMCDriver_ASLDriver_ASL_SetToSimulationModePtr) dlsym(hLibrary, "libmcdriver_asl_driver_asl_settosimulationmode");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_ASL_SetToSimulationMode == nullptr)
			return LIBMCDRIVER_ASL_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_ASL_IsSimulationMode = (PLibMCDriver_ASLDriver_ASL_IsSimulationModePtr) GetProcAddress(hLibrary, "libmcdriver_asl_driver_asl_issimulationmode");
		#else // _WIN32
		pWrapperTable->m_Driver_ASL_IsSimulationMode = (PLibMCDriver_ASLDriver_ASL_IsSimulationModePtr) dlsym(hLibrary, "libmcdriver_asl_driver_asl_issimulationmode");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_ASL_IsSimulationMode == nullptr)
			return LIBMCDRIVER_ASL_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_ASL_Connect = (PLibMCDriver_ASLDriver_ASL_ConnectPtr) GetProcAddress(hLibrary, "libmcdriver_asl_driver_asl_connect");
		#else // _WIN32
		pWrapperTable->m_Driver_ASL_Connect = (PLibMCDriver_ASLDriver_ASL_ConnectPtr) dlsym(hLibrary, "libmcdriver_asl_driver_asl_connect");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_ASL_Connect == nullptr)
			return LIBMCDRIVER_ASL_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_ASL_ContextExists = (PLibMCDriver_ASLDriver_ASL_ContextExistsPtr) GetProcAddress(hLibrary, "libmcdriver_asl_driver_asl_contextexists");
		#else // _WIN32
		pWrapperTable->m_Driver_ASL_ContextExists = (PLibMCDriver_ASLDriver_ASL_ContextExistsPtr) dlsym(hLibrary, "libmcdriver_asl_driver_asl_contextexists");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_ASL_ContextExists == nullptr)
			return LIBMCDRIVER_ASL_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_ASL_FindContext = (PLibMCDriver_ASLDriver_ASL_FindContextPtr) GetProcAddress(hLibrary, "libmcdriver_asl_driver_asl_findcontext");
		#else // _WIN32
		pWrapperTable->m_Driver_ASL_FindContext = (PLibMCDriver_ASLDriver_ASL_FindContextPtr) dlsym(hLibrary, "libmcdriver_asl_driver_asl_findcontext");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_ASL_FindContext == nullptr)
			return LIBMCDRIVER_ASL_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GetVersion = (PLibMCDriver_ASLGetVersionPtr) GetProcAddress(hLibrary, "libmcdriver_asl_getversion");
		#else // _WIN32
		pWrapperTable->m_GetVersion = (PLibMCDriver_ASLGetVersionPtr) dlsym(hLibrary, "libmcdriver_asl_getversion");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GetVersion == nullptr)
			return LIBMCDRIVER_ASL_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GetLastError = (PLibMCDriver_ASLGetLastErrorPtr) GetProcAddress(hLibrary, "libmcdriver_asl_getlasterror");
		#else // _WIN32
		pWrapperTable->m_GetLastError = (PLibMCDriver_ASLGetLastErrorPtr) dlsym(hLibrary, "libmcdriver_asl_getlasterror");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GetLastError == nullptr)
			return LIBMCDRIVER_ASL_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ReleaseInstance = (PLibMCDriver_ASLReleaseInstancePtr) GetProcAddress(hLibrary, "libmcdriver_asl_releaseinstance");
		#else // _WIN32
		pWrapperTable->m_ReleaseInstance = (PLibMCDriver_ASLReleaseInstancePtr) dlsym(hLibrary, "libmcdriver_asl_releaseinstance");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ReleaseInstance == nullptr)
			return LIBMCDRIVER_ASL_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_AcquireInstance = (PLibMCDriver_ASLAcquireInstancePtr) GetProcAddress(hLibrary, "libmcdriver_asl_acquireinstance");
		#else // _WIN32
		pWrapperTable->m_AcquireInstance = (PLibMCDriver_ASLAcquireInstancePtr) dlsym(hLibrary, "libmcdriver_asl_acquireinstance");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_AcquireInstance == nullptr)
			return LIBMCDRIVER_ASL_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_InjectComponent = (PLibMCDriver_ASLInjectComponentPtr) GetProcAddress(hLibrary, "libmcdriver_asl_injectcomponent");
		#else // _WIN32
		pWrapperTable->m_InjectComponent = (PLibMCDriver_ASLInjectComponentPtr) dlsym(hLibrary, "libmcdriver_asl_injectcomponent");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_InjectComponent == nullptr)
			return LIBMCDRIVER_ASL_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GetSymbolLookupMethod = (PLibMCDriver_ASLGetSymbolLookupMethodPtr) GetProcAddress(hLibrary, "libmcdriver_asl_getsymbollookupmethod");
		#else // _WIN32
		pWrapperTable->m_GetSymbolLookupMethod = (PLibMCDriver_ASLGetSymbolLookupMethodPtr) dlsym(hLibrary, "libmcdriver_asl_getsymbollookupmethod");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GetSymbolLookupMethod == nullptr)
			return LIBMCDRIVER_ASL_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_CreateDriver = (PLibMCDriver_ASLCreateDriverPtr) GetProcAddress(hLibrary, "libmcdriver_asl_createdriver");
		#else // _WIN32
		pWrapperTable->m_CreateDriver = (PLibMCDriver_ASLCreateDriverPtr) dlsym(hLibrary, "libmcdriver_asl_createdriver");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_CreateDriver == nullptr)
			return LIBMCDRIVER_ASL_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		pWrapperTable->m_LibraryHandle = hLibrary;
		return LIBMCDRIVER_ASL_SUCCESS;
	}

	inline LibMCDriver_ASLResult CWrapper::loadWrapperTableFromSymbolLookupMethod(sLibMCDriver_ASLDynamicWrapperTable * pWrapperTable, void* pSymbolLookupMethod)
{
		if (pWrapperTable == nullptr)
			return LIBMCDRIVER_ASL_ERROR_INVALIDPARAM;
		if (pSymbolLookupMethod == nullptr)
			return LIBMCDRIVER_ASL_ERROR_INVALIDPARAM;
		
		typedef LibMCDriver_ASLResult(*SymbolLookupType)(const char*, void**);
		
		SymbolLookupType pLookup = (SymbolLookupType)pSymbolLookupMethod;
		
		LibMCDriver_ASLResult eLookupError = LIBMCDRIVER_ASL_SUCCESS;
		eLookupError = (*pLookup)("libmcdriver_asl_driver_configure", (void**)&(pWrapperTable->m_Driver_Configure));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_Configure == nullptr) )
			return LIBMCDRIVER_ASL_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_asl_driver_getname", (void**)&(pWrapperTable->m_Driver_GetName));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_GetName == nullptr) )
			return LIBMCDRIVER_ASL_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_asl_driver_gettype", (void**)&(pWrapperTable->m_Driver_GetType));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_GetType == nullptr) )
			return LIBMCDRIVER_ASL_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_asl_driver_getversion", (void**)&(pWrapperTable->m_Driver_GetVersion));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_GetVersion == nullptr) )
			return LIBMCDRIVER_ASL_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_asl_driver_queryparameters", (void**)&(pWrapperTable->m_Driver_QueryParameters));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_QueryParameters == nullptr) )
			return LIBMCDRIVER_ASL_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_asl_driver_queryparametersex", (void**)&(pWrapperTable->m_Driver_QueryParametersEx));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_QueryParametersEx == nullptr) )
			return LIBMCDRIVER_ASL_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_asl_drivercontext_getserialnumber", (void**)&(pWrapperTable->m_DriverContext_GetSerialNumber));
		if ( (eLookupError != 0) || (pWrapperTable->m_DriverContext_GetSerialNumber == nullptr) )
			return LIBMCDRIVER_ASL_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_asl_driver_asl_settosimulationmode", (void**)&(pWrapperTable->m_Driver_ASL_SetToSimulationMode));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_ASL_SetToSimulationMode == nullptr) )
			return LIBMCDRIVER_ASL_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_asl_driver_asl_issimulationmode", (void**)&(pWrapperTable->m_Driver_ASL_IsSimulationMode));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_ASL_IsSimulationMode == nullptr) )
			return LIBMCDRIVER_ASL_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_asl_driver_asl_connect", (void**)&(pWrapperTable->m_Driver_ASL_Connect));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_ASL_Connect == nullptr) )
			return LIBMCDRIVER_ASL_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_asl_driver_asl_contextexists", (void**)&(pWrapperTable->m_Driver_ASL_ContextExists));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_ASL_ContextExists == nullptr) )
			return LIBMCDRIVER_ASL_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_asl_driver_asl_findcontext", (void**)&(pWrapperTable->m_Driver_ASL_FindContext));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_ASL_FindContext == nullptr) )
			return LIBMCDRIVER_ASL_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_asl_getversion", (void**)&(pWrapperTable->m_GetVersion));
		if ( (eLookupError != 0) || (pWrapperTable->m_GetVersion == nullptr) )
			return LIBMCDRIVER_ASL_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_asl_getlasterror", (void**)&(pWrapperTable->m_GetLastError));
		if ( (eLookupError != 0) || (pWrapperTable->m_GetLastError == nullptr) )
			return LIBMCDRIVER_ASL_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_asl_releaseinstance", (void**)&(pWrapperTable->m_ReleaseInstance));
		if ( (eLookupError != 0) || (pWrapperTable->m_ReleaseInstance == nullptr) )
			return LIBMCDRIVER_ASL_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_asl_acquireinstance", (void**)&(pWrapperTable->m_AcquireInstance));
		if ( (eLookupError != 0) || (pWrapperTable->m_AcquireInstance == nullptr) )
			return LIBMCDRIVER_ASL_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_asl_injectcomponent", (void**)&(pWrapperTable->m_InjectComponent));
		if ( (eLookupError != 0) || (pWrapperTable->m_InjectComponent == nullptr) )
			return LIBMCDRIVER_ASL_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_asl_getsymbollookupmethod", (void**)&(pWrapperTable->m_GetSymbolLookupMethod));
		if ( (eLookupError != 0) || (pWrapperTable->m_GetSymbolLookupMethod == nullptr) )
			return LIBMCDRIVER_ASL_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_asl_createdriver", (void**)&(pWrapperTable->m_CreateDriver));
		if ( (eLookupError != 0) || (pWrapperTable->m_CreateDriver == nullptr) )
			return LIBMCDRIVER_ASL_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		return LIBMCDRIVER_ASL_SUCCESS;
}

	
	
	/**
	 * Method definitions for class CBase
	 */
	
	/**
	 * Method definitions for class CDriver
	 */
	
	/**
	* CDriver::Configure - Configures a driver with its specific configuration data.
	* @param[in] sConfigurationString - Configuration data of driver.
	*/
	void CDriver::Configure(const std::string & sConfigurationString)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_Configure(m_pHandle, sConfigurationString.c_str()));
	}
	
	/**
	* CDriver::GetName - returns the name identifier of the driver
	* @return Name of the driver.
	*/
	std::string CDriver::GetName()
	{
		LibMCDriver_ASL_uint32 bytesNeededName = 0;
		LibMCDriver_ASL_uint32 bytesWrittenName = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetName(m_pHandle, 0, &bytesNeededName, nullptr));
		std::vector<char> bufferName(bytesNeededName);
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetName(m_pHandle, bytesNeededName, &bytesWrittenName, &bufferName[0]));
		
		return std::string(&bufferName[0]);
	}
	
	/**
	* CDriver::GetType - returns the type identifier of the driver
	* @return Type of the driver.
	*/
	std::string CDriver::GetType()
	{
		LibMCDriver_ASL_uint32 bytesNeededType = 0;
		LibMCDriver_ASL_uint32 bytesWrittenType = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetType(m_pHandle, 0, &bytesNeededType, nullptr));
		std::vector<char> bufferType(bytesNeededType);
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetType(m_pHandle, bytesNeededType, &bytesWrittenType, &bufferType[0]));
		
		return std::string(&bufferType[0]);
	}
	
	/**
	* CDriver::GetVersion - returns the version identifiers of the driver
	* @param[out] nMajor - Major version.
	* @param[out] nMinor - Minor version.
	* @param[out] nMicro - Micro version.
	* @param[out] sBuild - Build identifier.
	*/
	void CDriver::GetVersion(LibMCDriver_ASL_uint32 & nMajor, LibMCDriver_ASL_uint32 & nMinor, LibMCDriver_ASL_uint32 & nMicro, std::string & sBuild)
	{
		LibMCDriver_ASL_uint32 bytesNeededBuild = 0;
		LibMCDriver_ASL_uint32 bytesWrittenBuild = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetVersion(m_pHandle, &nMajor, &nMinor, &nMicro, 0, &bytesNeededBuild, nullptr));
		std::vector<char> bufferBuild(bytesNeededBuild);
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetVersion(m_pHandle, &nMajor, &nMinor, &nMicro, bytesNeededBuild, &bytesWrittenBuild, &bufferBuild[0]));
		sBuild = std::string(&bufferBuild[0]);
	}
	
	/**
	* CDriver::QueryParameters - Updates the driver parameters in the driver environment. Should only be called in the driver thread.
	*/
	void CDriver::QueryParameters()
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_QueryParameters(m_pHandle));
	}
	
	/**
	* CDriver::QueryParametersEx - Updates the driver parameters in the driver environment. Might be called out of thread. Implementation MUST be able to handle parallel calls.
	* @param[in] pDriverUpdateInstance - Status update instance.
	*/
	void CDriver::QueryParametersEx(classParam<LibMCEnv::CDriverStatusUpdateSession> pDriverUpdateInstance)
	{
		LibMCEnvHandle hDriverUpdateInstance = pDriverUpdateInstance.GetHandle();
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_QueryParametersEx(m_pHandle, hDriverUpdateInstance));
	}
	
	/**
	 * Method definitions for class CDriverContext
	 */
	
	/**
	* CDriverContext::GetSerialNumber - Returns the serial number of board
	* @return Type of the driver.
	*/
	std::string CDriverContext::GetSerialNumber()
	{
		LibMCDriver_ASL_uint32 bytesNeededType = 0;
		LibMCDriver_ASL_uint32 bytesWrittenType = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_DriverContext_GetSerialNumber(m_pHandle, 0, &bytesNeededType, nullptr));
		std::vector<char> bufferType(bytesNeededType);
		CheckError(m_pWrapper->m_WrapperTable.m_DriverContext_GetSerialNumber(m_pHandle, bytesNeededType, &bytesWrittenType, &bufferType[0]));
		
		return std::string(&bufferType[0]);
	}
	
	/**
	 * Method definitions for class CDriver_ASL
	 */
	
	/**
	* CDriver_ASL::SetToSimulationMode - Turns the driver into a simulation mode.
	*/
	void CDriver_ASL::SetToSimulationMode()
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_ASL_SetToSimulationMode(m_pHandle));
	}
	
	/**
	* CDriver_ASL::IsSimulationMode - Returns if the driver is in simulation mode.
	* @return Flag if driver is in simulation mode.
	*/
	bool CDriver_ASL::IsSimulationMode()
	{
		bool resultSimulationModeEnabled = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_ASL_IsSimulationMode(m_pHandle, &resultSimulationModeEnabled));
		
		return resultSimulationModeEnabled;
	}
	
	/**
	* CDriver_ASL::Connect - Connects to driver board.
	* @param[in] sIdentifier - Identifier of the device.
	* @param[in] sCOMPort - Name of the device.
	* @return Returns the channel instance.
	*/
	PDriverContext CDriver_ASL::Connect(const std::string & sIdentifier, const std::string & sCOMPort)
	{
		LibMCDriver_ASLHandle hChannelInstance = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_ASL_Connect(m_pHandle, sIdentifier.c_str(), sCOMPort.c_str(), &hChannelInstance));
		
		if (!hChannelInstance) {
			CheckError(LIBMCDRIVER_ASL_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CDriverContext>(m_pWrapper, hChannelInstance);
	}
	
	/**
	* CDriver_ASL::ContextExists - Returns if the channel exists..
	* @param[in] sIdentifier - Identifier of the device.
	* @return Flag if the channel exists.
	*/
	bool CDriver_ASL::ContextExists(const std::string & sIdentifier)
	{
		bool resultValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_ASL_ContextExists(m_pHandle, sIdentifier.c_str(), &resultValue));
		
		return resultValue;
	}
	
	/**
	* CDriver_ASL::FindContext - Find a communication channel by integer. Fails if the channel does not exist.
	* @param[in] sIdentifier - Identifier of the device.
	* @return Returns the channel instance.
	*/
	PDriverContext CDriver_ASL::FindContext(const std::string & sIdentifier)
	{
		LibMCDriver_ASLHandle hChannelInstance = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_ASL_FindContext(m_pHandle, sIdentifier.c_str(), &hChannelInstance));
		
		if (!hChannelInstance) {
			CheckError(LIBMCDRIVER_ASL_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CDriverContext>(m_pWrapper, hChannelInstance);
	}

} // namespace LibMCDriver_ASL

#endif // __LIBMCDRIVER_ASL_CPPHEADER_DYNAMIC_CPP

