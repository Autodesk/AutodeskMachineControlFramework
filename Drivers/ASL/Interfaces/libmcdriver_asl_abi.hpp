/*++

Copyright (C) 2024 ASL Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.8.0-develop.

Abstract: This is an autogenerated C++-Header file in order to allow an easy
 use of ASL Inkjet Driver Interface

Interface version: 2.0.0

*/

#ifndef __LIBMCDRIVER_ASL_HEADER_CPP
#define __LIBMCDRIVER_ASL_HEADER_CPP

#ifdef __LIBMCDRIVER_ASL_EXPORTS
#ifdef _WIN32
#define LIBMCDRIVER_ASL_DECLSPEC __declspec (dllexport)
#else // _WIN32
#define LIBMCDRIVER_ASL_DECLSPEC __attribute__((visibility("default")))
#endif // _WIN32
#else // __LIBMCDRIVER_ASL_EXPORTS
#define LIBMCDRIVER_ASL_DECLSPEC
#endif // __LIBMCDRIVER_ASL_EXPORTS

#include "libmcdriver_asl_types.hpp"

#include "libmcenv_dynamic.hpp"

#ifdef __cplusplus
extern "C" {
#endif

/*************************************************************************************************************************
 Class definition for Base
**************************************************************************************************************************/

/*************************************************************************************************************************
 Class definition for Driver
**************************************************************************************************************************/

/**
* Configures a driver with its specific configuration data.
*
* @param[in] pDriver - Driver instance.
* @param[in] pConfigurationString - Configuration data of driver.
* @return error code or 0 (success)
*/
LIBMCDRIVER_ASL_DECLSPEC LibMCDriver_ASLResult libmcdriver_asl_driver_configure(LibMCDriver_ASL_Driver pDriver, const char * pConfigurationString);

/**
* returns the name identifier of the driver
*
* @param[in] pDriver - Driver instance.
* @param[in] nNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNameBuffer -  buffer of Name of the driver., may be NULL
* @return error code or 0 (success)
*/
LIBMCDRIVER_ASL_DECLSPEC LibMCDriver_ASLResult libmcdriver_asl_driver_getname(LibMCDriver_ASL_Driver pDriver, const LibMCDriver_ASL_uint32 nNameBufferSize, LibMCDriver_ASL_uint32* pNameNeededChars, char * pNameBuffer);

/**
* returns the type identifier of the driver
*
* @param[in] pDriver - Driver instance.
* @param[in] nTypeBufferSize - size of the buffer (including trailing 0)
* @param[out] pTypeNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pTypeBuffer -  buffer of Type of the driver., may be NULL
* @return error code or 0 (success)
*/
LIBMCDRIVER_ASL_DECLSPEC LibMCDriver_ASLResult libmcdriver_asl_driver_gettype(LibMCDriver_ASL_Driver pDriver, const LibMCDriver_ASL_uint32 nTypeBufferSize, LibMCDriver_ASL_uint32* pTypeNeededChars, char * pTypeBuffer);

/**
* returns the version identifiers of the driver
*
* @param[in] pDriver - Driver instance.
* @param[out] pMajor - Major version.
* @param[out] pMinor - Minor version.
* @param[out] pMicro - Micro version.
* @param[in] nBuildBufferSize - size of the buffer (including trailing 0)
* @param[out] pBuildNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pBuildBuffer -  buffer of Build identifier., may be NULL
* @return error code or 0 (success)
*/
LIBMCDRIVER_ASL_DECLSPEC LibMCDriver_ASLResult libmcdriver_asl_driver_getversion(LibMCDriver_ASL_Driver pDriver, LibMCDriver_ASL_uint32 * pMajor, LibMCDriver_ASL_uint32 * pMinor, LibMCDriver_ASL_uint32 * pMicro, const LibMCDriver_ASL_uint32 nBuildBufferSize, LibMCDriver_ASL_uint32* pBuildNeededChars, char * pBuildBuffer);

/**
* Updates the driver parameters in the driver environment. Should only be called in the driver thread.
*
* @param[in] pDriver - Driver instance.
* @return error code or 0 (success)
*/
LIBMCDRIVER_ASL_DECLSPEC LibMCDriver_ASLResult libmcdriver_asl_driver_queryparameters(LibMCDriver_ASL_Driver pDriver);

/**
* Updates the driver parameters in the driver environment. Might be called out of thread. Implementation MUST be able to handle parallel calls.
*
* @param[in] pDriver - Driver instance.
* @param[in] pDriverUpdateInstance - Status update instance.
* @return error code or 0 (success)
*/
LIBMCDRIVER_ASL_DECLSPEC LibMCDriver_ASLResult libmcdriver_asl_driver_queryparametersex(LibMCDriver_ASL_Driver pDriver, LibMCEnv_DriverStatusUpdateSession pDriverUpdateInstance);

/*************************************************************************************************************************
 Class definition for DriverContext
**************************************************************************************************************************/

/**
* Returns the serial number of board
*
* @param[in] pDriverContext - DriverContext instance.
* @param[in] nTypeBufferSize - size of the buffer (including trailing 0)
* @param[out] pTypeNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pTypeBuffer -  buffer of Type of the driver., may be NULL
* @return error code or 0 (success)
*/
LIBMCDRIVER_ASL_DECLSPEC LibMCDriver_ASLResult libmcdriver_asl_drivercontext_getserialnumber(LibMCDriver_ASL_DriverContext pDriverContext, const LibMCDriver_ASL_uint32 nTypeBufferSize, LibMCDriver_ASL_uint32* pTypeNeededChars, char * pTypeBuffer);

/**
* Returns the time the board has been running
*
* @param[in] pDriverContext - DriverContext instance.
* @param[out] pType - Time on.
* @return error code or 0 (success)
*/
LIBMCDRIVER_ASL_DECLSPEC LibMCDriver_ASLResult libmcdriver_asl_drivercontext_getheadtimeon(LibMCDriver_ASL_DriverContext pDriverContext, LibMCDriver_ASL_uint32 * pType);

/**
* Set the board power.
*
* @param[in] pDriverContext - DriverContext instance.
* @param[in] bPower - Power on/off.
* @return error code or 0 (success)
*/
LIBMCDRIVER_ASL_DECLSPEC LibMCDriver_ASLResult libmcdriver_asl_drivercontext_setpower(LibMCDriver_ASL_DriverContext pDriverContext, bool bPower);

/**
* set the mode of the board for printing
*
* @param[in] pDriverContext - DriverContext instance.
* @param[in] eMode - Type of the driver.
* @return error code or 0 (success)
*/
LIBMCDRIVER_ASL_DECLSPEC LibMCDriver_ASLResult libmcdriver_asl_drivercontext_setprintheadmode(LibMCDriver_ASL_DriverContext pDriverContext, LibMCDriver_ASL::eBoardMode eMode);

/**
* Set the frequency of the board (only supported in certain modes).
*
* @param[in] pDriverContext - DriverContext instance.
* @param[in] nFrequency - Frequency in Hz
* @return error code or 0 (success)
*/
LIBMCDRIVER_ASL_DECLSPEC LibMCDriver_ASLResult libmcdriver_asl_drivercontext_setfrequency(LibMCDriver_ASL_DriverContext pDriverContext, LibMCDriver_ASL_uint32 nFrequency);

/**
* Set the temperature of a specific head.
*
* @param[in] pDriverContext - DriverContext instance.
* @param[in] nIndex - Head index
* @param[in] dTemperature - Temperature to set
* @return error code or 0 (success)
*/
LIBMCDRIVER_ASL_DECLSPEC LibMCDriver_ASLResult libmcdriver_asl_drivercontext_settemperature(LibMCDriver_ASL_DriverContext pDriverContext, LibMCDriver_ASL_uint8 nIndex, LibMCDriver_ASL_double dTemperature);

/**
* Zeroes the encoder counts on the driver board.
*
* @param[in] pDriverContext - DriverContext instance.
* @return error code or 0 (success)
*/
LIBMCDRIVER_ASL_DECLSPEC LibMCDriver_ASLResult libmcdriver_asl_drivercontext_homelocation(LibMCDriver_ASL_DriverContext pDriverContext);

/**
* Set the print start location.
*
* @param[in] pDriverContext - DriverContext instance.
* @param[in] nStartLocation - The start location of the print.
* @return error code or 0 (success)
*/
LIBMCDRIVER_ASL_DECLSPEC LibMCDriver_ASLResult libmcdriver_asl_drivercontext_setprintstart(LibMCDriver_ASL_DriverContext pDriverContext, LibMCDriver_ASL_uint32 nStartLocation);

/**
* Send the image data.
*
* @param[in] pDriverContext - DriverContext instance.
* @param[in] nIndex - Head index
* @param[in] nPadding - White space padding to add
* @param[in] pImageObject - Image to print
* @return error code or 0 (success)
*/
LIBMCDRIVER_ASL_DECLSPEC LibMCDriver_ASLResult libmcdriver_asl_drivercontext_sendimage(LibMCDriver_ASL_DriverContext pDriverContext, LibMCDriver_ASL_uint8 nIndex, LibMCDriver_ASL_uint32 nPadding, LibMCEnv_ImageData pImageObject);

/**
* Verifies images that have been sent.
*
* @param[in] pDriverContext - DriverContext instance.
* @param[out] pVerified - Images are verfied or not
* @return error code or 0 (success)
*/
LIBMCDRIVER_ASL_DECLSPEC LibMCDriver_ASLResult libmcdriver_asl_drivercontext_verifyimages(LibMCDriver_ASL_DriverContext pDriverContext, bool * pVerified);

/**
* Force update driver data.
*
* @param[in] pDriverContext - DriverContext instance.
* @return error code or 0 (success)
*/
LIBMCDRIVER_ASL_DECLSPEC LibMCDriver_ASLResult libmcdriver_asl_drivercontext_poll(LibMCDriver_ASL_DriverContext pDriverContext);

/**
* Get the data from the driver.
*
* @param[in] pDriverContext - DriverContext instance.
* @param[in] nIndex - Head index
* @param[in] bSet - Request set or actual temperature
* @param[out] pData - Requested data
* @return error code or 0 (success)
*/
LIBMCDRIVER_ASL_DECLSPEC LibMCDriver_ASLResult libmcdriver_asl_drivercontext_gettemperature(LibMCDriver_ASL_DriverContext pDriverContext, LibMCDriver_ASL_uint8 nIndex, bool bSet, LibMCDriver_ASL_double * pData);

/**
* Get the data from the driver.
*
* @param[in] pDriverContext - DriverContext instance.
* @param[in] nIndex - Head index
* @param[out] pData - Requested data
* @return error code or 0 (success)
*/
LIBMCDRIVER_ASL_DECLSPEC LibMCDriver_ASLResult libmcdriver_asl_drivercontext_getprintcounts(LibMCDriver_ASL_DriverContext pDriverContext, LibMCDriver_ASL_uint8 nIndex, LibMCDriver_ASL_double * pData);

/**
* Get the data from the driver.
*
* @param[in] pDriverContext - DriverContext instance.
* @param[in] nIndex - Head index
* @param[out] pData - Requested data
* @return error code or 0 (success)
*/
LIBMCDRIVER_ASL_DECLSPEC LibMCDriver_ASLResult libmcdriver_asl_drivercontext_getimagelength(LibMCDriver_ASL_DriverContext pDriverContext, LibMCDriver_ASL_uint8 nIndex, LibMCDriver_ASL_double * pData);

/**
* Get the data from the driver.
*
* @param[in] pDriverContext - DriverContext instance.
* @param[in] nIndex - Head index
* @param[out] pData - Requested data
* @return error code or 0 (success)
*/
LIBMCDRIVER_ASL_DECLSPEC LibMCDriver_ASLResult libmcdriver_asl_drivercontext_getheadstate(LibMCDriver_ASL_DriverContext pDriverContext, LibMCDriver_ASL_uint8 nIndex, LibMCDriver_ASL_double * pData);

/**
* Get the data from the driver.
*
* @param[in] pDriverContext - DriverContext instance.
* @param[in] nIndex - Head index
* @param[out] pData - Requested data
* @return error code or 0 (success)
*/
LIBMCDRIVER_ASL_DECLSPEC LibMCDriver_ASLResult libmcdriver_asl_drivercontext_isheating(LibMCDriver_ASL_DriverContext pDriverContext, LibMCDriver_ASL_uint8 nIndex, bool * pData);

/**
* Get the data from the driver.
*
* @param[in] pDriverContext - DriverContext instance.
* @param[out] pData - Requested data
* @return error code or 0 (success)
*/
LIBMCDRIVER_ASL_DECLSPEC LibMCDriver_ASLResult libmcdriver_asl_drivercontext_getpower(LibMCDriver_ASL_DriverContext pDriverContext, bool * pData);

/*************************************************************************************************************************
 Class definition for Driver_ASL
**************************************************************************************************************************/

/**
* Turns the driver into a simulation mode.
*
* @param[in] pDriver_ASL - Driver_ASL instance.
* @return error code or 0 (success)
*/
LIBMCDRIVER_ASL_DECLSPEC LibMCDriver_ASLResult libmcdriver_asl_driver_asl_settosimulationmode(LibMCDriver_ASL_Driver_ASL pDriver_ASL);

/**
* Returns if the driver is in simulation mode.
*
* @param[in] pDriver_ASL - Driver_ASL instance.
* @param[out] pSimulationModeEnabled - Flag if driver is in simulation mode.
* @return error code or 0 (success)
*/
LIBMCDRIVER_ASL_DECLSPEC LibMCDriver_ASLResult libmcdriver_asl_driver_asl_issimulationmode(LibMCDriver_ASL_Driver_ASL pDriver_ASL, bool * pSimulationModeEnabled);

/**
* Connects to driver board.
*
* @param[in] pDriver_ASL - Driver_ASL instance.
* @param[in] pIdentifier - Identifier of the device.
* @param[in] pCOMPort - Name of the device.
* @param[out] pChannelInstance - Returns the channel instance.
* @return error code or 0 (success)
*/
LIBMCDRIVER_ASL_DECLSPEC LibMCDriver_ASLResult libmcdriver_asl_driver_asl_connect(LibMCDriver_ASL_Driver_ASL pDriver_ASL, const char * pIdentifier, const char * pCOMPort, LibMCDriver_ASL_DriverContext * pChannelInstance);

/**
* Returns if the channel exists..
*
* @param[in] pDriver_ASL - Driver_ASL instance.
* @param[in] pIdentifier - Identifier of the device.
* @param[out] pValue - Flag if the channel exists.
* @return error code or 0 (success)
*/
LIBMCDRIVER_ASL_DECLSPEC LibMCDriver_ASLResult libmcdriver_asl_driver_asl_contextexists(LibMCDriver_ASL_Driver_ASL pDriver_ASL, const char * pIdentifier, bool * pValue);

/**
* Find a communication channel by integer. Fails if the channel does not exist.
*
* @param[in] pDriver_ASL - Driver_ASL instance.
* @param[in] pIdentifier - Identifier of the device.
* @param[out] pChannelInstance - Returns the channel instance.
* @return error code or 0 (success)
*/
LIBMCDRIVER_ASL_DECLSPEC LibMCDriver_ASLResult libmcdriver_asl_driver_asl_findcontext(LibMCDriver_ASL_Driver_ASL pDriver_ASL, const char * pIdentifier, LibMCDriver_ASL_DriverContext * pChannelInstance);

/**
* Clears any contexts to release objects.
*
* @param[in] pDriver_ASL - Driver_ASL instance.
* @return error code or 0 (success)
*/
LIBMCDRIVER_ASL_DECLSPEC LibMCDriver_ASLResult libmcdriver_asl_driver_asl_clearcontexts(LibMCDriver_ASL_Driver_ASL pDriver_ASL);

/*************************************************************************************************************************
 Global functions
**************************************************************************************************************************/

/**
* retrieves the binary version of this library.
*
* @param[out] pMajor - returns the major version of this library
* @param[out] pMinor - returns the minor version of this library
* @param[out] pMicro - returns the micro version of this library
* @return error code or 0 (success)
*/
LIBMCDRIVER_ASL_DECLSPEC LibMCDriver_ASLResult libmcdriver_asl_getversion(LibMCDriver_ASL_uint32 * pMajor, LibMCDriver_ASL_uint32 * pMinor, LibMCDriver_ASL_uint32 * pMicro);

/**
* Returns the last error recorded on this object
*
* @param[in] pInstance - Instance Handle
* @param[in] nErrorMessageBufferSize - size of the buffer (including trailing 0)
* @param[out] pErrorMessageNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pErrorMessageBuffer -  buffer of Message of the last error, may be NULL
* @param[out] pHasError - Is there a last error to query
* @return error code or 0 (success)
*/
LIBMCDRIVER_ASL_DECLSPEC LibMCDriver_ASLResult libmcdriver_asl_getlasterror(LibMCDriver_ASL_Base pInstance, const LibMCDriver_ASL_uint32 nErrorMessageBufferSize, LibMCDriver_ASL_uint32* pErrorMessageNeededChars, char * pErrorMessageBuffer, bool * pHasError);

/**
* Releases shared ownership of an Instance
*
* @param[in] pInstance - Instance Handle
* @return error code or 0 (success)
*/
LIBMCDRIVER_ASL_DECLSPEC LibMCDriver_ASLResult libmcdriver_asl_releaseinstance(LibMCDriver_ASL_Base pInstance);

/**
* Acquires shared ownership of an Instance
*
* @param[in] pInstance - Instance Handle
* @return error code or 0 (success)
*/
LIBMCDRIVER_ASL_DECLSPEC LibMCDriver_ASLResult libmcdriver_asl_acquireinstance(LibMCDriver_ASL_Base pInstance);

/**
* Injects an imported component for usage within this component
*
* @param[in] pNameSpace - NameSpace of the injected component
* @param[in] pSymbolAddressMethod - Address of the SymbolAddressMethod of the injected component
* @return error code or 0 (success)
*/
LIBMCDRIVER_ASL_DECLSPEC LibMCDriver_ASLResult libmcdriver_asl_injectcomponent(const char * pNameSpace, LibMCDriver_ASL_pvoid pSymbolAddressMethod);

/**
* Returns the address of the SymbolLookupMethod
*
* @param[out] pSymbolLookupMethod - Address of the SymbolAddressMethod
* @return error code or 0 (success)
*/
LIBMCDRIVER_ASL_DECLSPEC LibMCDriver_ASLResult libmcdriver_asl_getsymbollookupmethod(LibMCDriver_ASL_pvoid * pSymbolLookupMethod);

/**
* Creates a driver instance with a specific name.
*
* @param[in] pName - Name of driver to be created.
* @param[in] pType - Type of driver to be created.
* @param[in] pDriverEnvironment - Environment of this driver.
* @param[out] pInstance - New Driver instance
* @return error code or 0 (success)
*/
LIBMCDRIVER_ASL_DECLSPEC LibMCDriver_ASLResult libmcdriver_asl_createdriver(const char * pName, const char * pType, LibMCEnv_DriverEnvironment pDriverEnvironment, LibMCDriver_ASL_Driver * pInstance);

#ifdef __cplusplus
}
#endif

#endif // __LIBMCDRIVER_ASL_HEADER_CPP

