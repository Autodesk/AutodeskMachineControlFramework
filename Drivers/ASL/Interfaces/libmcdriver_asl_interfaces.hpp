/*++

Copyright (C) 2024 ASL Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.8.0-develop.

Abstract: This is an autogenerated C++ header file in order to allow easy
development of ASL Inkjet Driver Interface. The implementer of ASL Inkjet Driver Interface needs to
derive concrete classes from the abstract classes in this header.

Interface version: 2.0.0

*/


#ifndef __LIBMCDRIVER_ASL_CPPINTERFACES
#define __LIBMCDRIVER_ASL_CPPINTERFACES

#include <string>
#include <memory>

#include "libmcdriver_asl_types.hpp"


#include "libmcenv_dynamic.hpp"

namespace LibMCDriver_ASL {
namespace Impl {

/**
 Forward declarations of class interfaces
*/
class IBase;
class IDriver;
class IDriverContext;
class IDriver_ASL;



/*************************************************************************************************************************
 Parameter Cache definitions
**************************************************************************************************************************/

class ParameterCache {
	public:
		virtual ~ParameterCache() {}
};

template <class T1> class ParameterCache_1 : public ParameterCache {
	private:
		T1 m_param1;
	public:
		ParameterCache_1 (const T1 & param1)
			: m_param1 (param1)
		{
		}

		void retrieveData (T1 & param1)
		{
			param1 = m_param1;
		}
};

template <class T1, class T2> class ParameterCache_2 : public ParameterCache {
	private:
		T1 m_param1;
		T2 m_param2;
	public:
		ParameterCache_2 (const T1 & param1, const T2 & param2)
			: m_param1 (param1), m_param2 (param2)
		{
		}

		void retrieveData (T1 & param1, T2 & param2)
		{
			param1 = m_param1;
			param2 = m_param2;
		}
};

template <class T1, class T2, class T3> class ParameterCache_3 : public ParameterCache {
	private:
		T1 m_param1;
		T2 m_param2;
		T3 m_param3;
	public:
		ParameterCache_3 (const T1 & param1, const T2 & param2, const T3 & param3)
			: m_param1 (param1), m_param2 (param2), m_param3 (param3)
		{
		}

		void retrieveData (T1 & param1, T2 & param2, T3 & param3)
		{
			param1 = m_param1;
			param2 = m_param2;
			param3 = m_param3;
		}
};

template <class T1, class T2, class T3, class T4> class ParameterCache_4 : public ParameterCache {
	private:
		T1 m_param1;
		T2 m_param2;
		T3 m_param3;
		T4 m_param4;
	public:
		ParameterCache_4 (const T1 & param1, const T2 & param2, const T3 & param3, const T4 & param4)
			: m_param1 (param1), m_param2 (param2), m_param3 (param3), m_param4 (param4)
		{
		}

		void retrieveData (T1 & param1, T2 & param2, T3 & param3, T4 & param4)
		{
			param1 = m_param1;
			param2 = m_param2;
			param3 = m_param3;
			param4 = m_param4;
		}
};


/*************************************************************************************************************************
 Class interface for Base 
**************************************************************************************************************************/

class IBase {
private:
	std::unique_ptr<ParameterCache> m_ParameterCache;
public:
	/**
	* IBase::~IBase - virtual destructor of IBase
	*/
	virtual ~IBase() {};

	/**
	* IBase::ReleaseBaseClassInterface - Releases ownership of a base class interface. Deletes the reference, if necessary.
	* @param[in] pIBase - The base class instance to release
	*/
	static void ReleaseBaseClassInterface(IBase* pIBase)
	{
		if (pIBase) {
			pIBase->DecRefCount();
		}
	};

	/**
	* IBase::AcquireBaseClassInterface - Acquires shared ownership of a base class interface.
	* @param[in] pIBase - The base class instance to acquire
	*/
	static void AcquireBaseClassInterface(IBase* pIBase)
	{
		if (pIBase) {
			pIBase->IncRefCount();
		}
	};


	/**
	* IBase::GetLastErrorMessage - Returns the last error registered of this class instance
	* @param[out] sErrorMessage - Message of the last error registered
	* @return Has an error been registered already
	*/
	virtual bool GetLastErrorMessage(std::string & sErrorMessage) = 0;

	/**
	* IBase::ClearErrorMessages - Clears all registered messages of this class instance
	*/
	virtual void ClearErrorMessages() = 0;

	/**
	* IBase::RegisterErrorMessage - Registers an error message with this class instance
	* @param[in] sErrorMessage - Error message to register
	*/
	virtual void RegisterErrorMessage(const std::string & sErrorMessage) = 0;

	/**
	* IBase::IncRefCount - Increases the reference count of a class instance
	*/
	virtual void IncRefCount() = 0;

	/**
	* IBase::DecRefCount - Decreases the reference count of a class instance and free releases it, if the last reference has been removed
	* @return Has the object been released
	*/
	virtual bool DecRefCount() = 0;

	/**
	* IBase::_setCache - set parameter cache of object
	*/
	void _setCache(ParameterCache * pCache)
	{
		m_ParameterCache.reset(pCache);
	}

	/**
	* IBase::_getCache - returns parameter cache of object
	*/
	ParameterCache* _getCache()
	{
		return m_ParameterCache.get();
	}

};


/**
 Definition of a shared pointer class for IBase
*/
template<class T>
class IBaseSharedPtr : public std::shared_ptr<T>
{
public:
	explicit IBaseSharedPtr(T* t = nullptr)
		: std::shared_ptr<T>(t, IBase::ReleaseBaseClassInterface)
	{
		t->IncRefCount();
	}

	// Reset function, as it also needs to properly set the deleter.
	void reset(T* t = nullptr)
	{
		std::shared_ptr<T>::reset(t, IBase::ReleaseBaseClassInterface);
	}

	// Get-function that increases the Base class's reference count
	T* getCoOwningPtr()
	{
		T* t = this->get();
		t->IncRefCount();
		return t;
	}
};


typedef IBaseSharedPtr<IBase> PIBase;


/*************************************************************************************************************************
 Class interface for Driver 
**************************************************************************************************************************/

class IDriver : public virtual IBase {
public:
	/**
	* IDriver::Configure - Configures a driver with its specific configuration data.
	* @param[in] sConfigurationString - Configuration data of driver.
	*/
	virtual void Configure(const std::string & sConfigurationString) = 0;

	/**
	* IDriver::GetName - returns the name identifier of the driver
	* @return Name of the driver.
	*/
	virtual std::string GetName() = 0;

	/**
	* IDriver::GetType - returns the type identifier of the driver
	* @return Type of the driver.
	*/
	virtual std::string GetType() = 0;

	/**
	* IDriver::GetVersion - returns the version identifiers of the driver
	* @param[out] nMajor - Major version.
	* @param[out] nMinor - Minor version.
	* @param[out] nMicro - Micro version.
	* @param[out] sBuild - Build identifier.
	*/
	virtual void GetVersion(LibMCDriver_ASL_uint32 & nMajor, LibMCDriver_ASL_uint32 & nMinor, LibMCDriver_ASL_uint32 & nMicro, std::string & sBuild) = 0;

	/**
	* IDriver::QueryParameters - Updates the driver parameters in the driver environment. Should only be called in the driver thread.
	*/
	virtual void QueryParameters() = 0;

	/**
	* IDriver::QueryParametersEx - Updates the driver parameters in the driver environment. Might be called out of thread. Implementation MUST be able to handle parallel calls.
	* @param[in] pDriverUpdateInstance - Status update instance.
	*/
	virtual void QueryParametersEx(LibMCEnv::PDriverStatusUpdateSession pDriverUpdateInstance) = 0;

};

typedef IBaseSharedPtr<IDriver> PIDriver;


/*************************************************************************************************************************
 Class interface for DriverContext 
**************************************************************************************************************************/

class IDriverContext : public virtual IBase {
public:
	/**
	* IDriverContext::GetSerialNumber - Returns the serial number of board
	* @return Type of the driver.
	*/
	virtual std::string GetSerialNumber() = 0;

	/**
	* IDriverContext::SetPower - Set the board power.
	* @param[in] bPower - Power on/off.
	*/
	virtual void SetPower(const bool bPower) = 0;

	/**
	* IDriverContext::SetPrintheadMode - set the mode of the board for printing
	* @param[in] eMode - Type of the driver.
	*/
	virtual void SetPrintheadMode(const LibMCDriver_ASL::eBoardMode eMode) = 0;

	/**
	* IDriverContext::SetFrequency - Set the frequency of the board (only supported in certain modes).
	* @param[in] nFrequency - Frequency in Hz
	*/
	virtual void SetFrequency(const LibMCDriver_ASL_uint32 nFrequency) = 0;

	/**
	* IDriverContext::SetTemperature - Set the temperature of a specific head.
	* @param[in] nIndex - Head index
	* @param[in] dTemperature - Temperature to set
	*/
	virtual void SetTemperature(const LibMCDriver_ASL_uint8 nIndex, const LibMCDriver_ASL_double dTemperature) = 0;

	/**
	* IDriverContext::HomeLocation - Zeroes the encoder counts on the driver board.
	*/
	virtual void HomeLocation() = 0;

	/**
	* IDriverContext::SetPrintStart - Set the print start location.
	* @param[in] nStartLocation - The start location of the print.
	*/
	virtual void SetPrintStart(const LibMCDriver_ASL_uint32 nStartLocation) = 0;

	/**
	* IDriverContext::SendImage - Send the image data.
	* @param[in] pImageObject - Image to print
	*/
	virtual void SendImage(LibMCEnv::PImageData pImageObject) = 0;

	/**
	* IDriverContext::Poll - Force update driver data.
	*/
	virtual void Poll() = 0;

	/**
	* IDriverContext::GetTemperature - Get the data from the driver.
	* @param[in] nIndex - Head index
	* @return Requested data
	*/
	virtual LibMCDriver_ASL_double GetTemperature(const LibMCDriver_ASL_uint8 nIndex) = 0;

	/**
	* IDriverContext::GetPrintCounts - Get the data from the driver.
	* @param[in] nIndex - Head index
	* @return Requested data
	*/
	virtual LibMCDriver_ASL_double GetPrintCounts(const LibMCDriver_ASL_uint8 nIndex) = 0;

	/**
	* IDriverContext::GetImageLength - Get the data from the driver.
	* @param[in] nIndex - Head index
	* @return Requested data
	*/
	virtual LibMCDriver_ASL_double GetImageLength(const LibMCDriver_ASL_uint8 nIndex) = 0;

	/**
	* IDriverContext::GetHeadState - Get the data from the driver.
	* @param[in] nIndex - Head index
	* @return Requested data
	*/
	virtual LibMCDriver_ASL_double GetHeadState(const LibMCDriver_ASL_uint8 nIndex) = 0;

	/**
	* IDriverContext::IsHeating - Get the data from the driver.
	* @param[in] nIndex - Head index
	* @return Requested data
	*/
	virtual bool IsHeating(const LibMCDriver_ASL_uint8 nIndex) = 0;

	/**
	* IDriverContext::GetPower - Get the data from the driver.
	* @return Requested data
	*/
	virtual bool GetPower() = 0;

};

typedef IBaseSharedPtr<IDriverContext> PIDriverContext;


/*************************************************************************************************************************
 Class interface for Driver_ASL 
**************************************************************************************************************************/

class IDriver_ASL : public virtual IDriver {
public:
	/**
	* IDriver_ASL::SetToSimulationMode - Turns the driver into a simulation mode.
	*/
	virtual void SetToSimulationMode() = 0;

	/**
	* IDriver_ASL::IsSimulationMode - Returns if the driver is in simulation mode.
	* @return Flag if driver is in simulation mode.
	*/
	virtual bool IsSimulationMode() = 0;

	/**
	* IDriver_ASL::Connect - Connects to driver board.
	* @param[in] sIdentifier - Identifier of the device.
	* @param[in] sCOMPort - Name of the device.
	* @return Returns the channel instance.
	*/
	virtual IDriverContext * Connect(const std::string & sIdentifier, const std::string & sCOMPort) = 0;

	/**
	* IDriver_ASL::ContextExists - Returns if the channel exists..
	* @param[in] sIdentifier - Identifier of the device.
	* @return Flag if the channel exists.
	*/
	virtual bool ContextExists(const std::string & sIdentifier) = 0;

	/**
	* IDriver_ASL::FindContext - Find a communication channel by integer. Fails if the channel does not exist.
	* @param[in] sIdentifier - Identifier of the device.
	* @return Returns the channel instance.
	*/
	virtual IDriverContext * FindContext(const std::string & sIdentifier) = 0;

};

typedef IBaseSharedPtr<IDriver_ASL> PIDriver_ASL;


/*************************************************************************************************************************
 Global functions declarations
**************************************************************************************************************************/
class CWrapper {
public:
	// Injected Components
	static LibMCEnv::PWrapper sPLibMCEnvWrapper;

	/**
	* Ilibmcdriver_asl::GetVersion - retrieves the binary version of this library.
	* @param[out] nMajor - returns the major version of this library
	* @param[out] nMinor - returns the minor version of this library
	* @param[out] nMicro - returns the micro version of this library
	*/
	static void GetVersion(LibMCDriver_ASL_uint32 & nMajor, LibMCDriver_ASL_uint32 & nMinor, LibMCDriver_ASL_uint32 & nMicro);

	/**
	* Ilibmcdriver_asl::GetLastError - Returns the last error recorded on this object
	* @param[in] pInstance - Instance Handle
	* @param[out] sErrorMessage - Message of the last error
	* @return Is there a last error to query
	*/
	static bool GetLastError(IBase* pInstance, std::string & sErrorMessage);

	/**
	* Ilibmcdriver_asl::ReleaseInstance - Releases shared ownership of an Instance
	* @param[in] pInstance - Instance Handle
	*/
	static void ReleaseInstance(IBase* pInstance);

	/**
	* Ilibmcdriver_asl::AcquireInstance - Acquires shared ownership of an Instance
	* @param[in] pInstance - Instance Handle
	*/
	static void AcquireInstance(IBase* pInstance);

	/**
	* Ilibmcdriver_asl::CreateDriver - Creates a driver instance with a specific name.
	* @param[in] sName - Name of driver to be created.
	* @param[in] sType - Type of driver to be created.
	* @param[in] pDriverEnvironment - Environment of this driver.
	* @return New Driver instance
	*/
	static IDriver * CreateDriver(const std::string & sName, const std::string & sType, LibMCEnv::PDriverEnvironment pDriverEnvironment);

};

LibMCDriver_ASLResult LibMCDriver_ASL_GetProcAddress (const char * pProcName, void ** ppProcAddress);

} // namespace Impl
} // namespace LibMCDriver_ASL

#endif // __LIBMCDRIVER_ASL_CPPINTERFACES
