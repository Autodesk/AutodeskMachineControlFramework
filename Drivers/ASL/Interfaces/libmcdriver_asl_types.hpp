/*++

Copyright (C) 2024 ASL Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.8.0-develop.

Abstract: This is an autogenerated C++-Header file with basic types in
order to allow an easy use of ASL Inkjet Driver Interface

Interface version: 2.0.0

*/

#ifndef __LIBMCDRIVER_ASL_TYPES_HEADER_CPP
#define __LIBMCDRIVER_ASL_TYPES_HEADER_CPP


/*************************************************************************************************************************
 Scalar types definition
**************************************************************************************************************************/

#ifdef LIBMCDRIVER_ASL_USELEGACYINTEGERTYPES

typedef unsigned char LibMCDriver_ASL_uint8;
typedef unsigned short LibMCDriver_ASL_uint16 ;
typedef unsigned int LibMCDriver_ASL_uint32;
typedef unsigned long long LibMCDriver_ASL_uint64;
typedef char LibMCDriver_ASL_int8;
typedef short LibMCDriver_ASL_int16;
typedef int LibMCDriver_ASL_int32;
typedef long long LibMCDriver_ASL_int64;

#else // LIBMCDRIVER_ASL_USELEGACYINTEGERTYPES

#include <stdint.h>

typedef uint8_t LibMCDriver_ASL_uint8;
typedef uint16_t LibMCDriver_ASL_uint16;
typedef uint32_t LibMCDriver_ASL_uint32;
typedef uint64_t LibMCDriver_ASL_uint64;
typedef int8_t LibMCDriver_ASL_int8;
typedef int16_t LibMCDriver_ASL_int16;
typedef int32_t LibMCDriver_ASL_int32;
typedef int64_t LibMCDriver_ASL_int64 ;

#endif // LIBMCDRIVER_ASL_USELEGACYINTEGERTYPES

typedef float LibMCDriver_ASL_single;
typedef double LibMCDriver_ASL_double;

/*************************************************************************************************************************
 General type definitions
**************************************************************************************************************************/

typedef LibMCDriver_ASL_int32 LibMCDriver_ASLResult;
typedef void * LibMCDriver_ASLHandle;
typedef void * LibMCDriver_ASL_pvoid;

/*************************************************************************************************************************
 Version for LibMCDriver_ASL
**************************************************************************************************************************/

#define LIBMCDRIVER_ASL_VERSION_MAJOR 2
#define LIBMCDRIVER_ASL_VERSION_MINOR 0
#define LIBMCDRIVER_ASL_VERSION_MICRO 0
#define LIBMCDRIVER_ASL_VERSION_PRERELEASEINFO ""
#define LIBMCDRIVER_ASL_VERSION_BUILDINFO ""

/*************************************************************************************************************************
 Error constants for LibMCDriver_ASL
**************************************************************************************************************************/

#define LIBMCDRIVER_ASL_SUCCESS 0
#define LIBMCDRIVER_ASL_ERROR_NOTIMPLEMENTED 1 /** functionality not implemented */
#define LIBMCDRIVER_ASL_ERROR_INVALIDPARAM 2 /** an invalid parameter was passed */
#define LIBMCDRIVER_ASL_ERROR_INVALIDCAST 3 /** a type cast failed */
#define LIBMCDRIVER_ASL_ERROR_BUFFERTOOSMALL 4 /** a provided buffer is too small */
#define LIBMCDRIVER_ASL_ERROR_GENERICEXCEPTION 5 /** a generic exception occurred */
#define LIBMCDRIVER_ASL_ERROR_COULDNOTLOADLIBRARY 6 /** the library could not be loaded */
#define LIBMCDRIVER_ASL_ERROR_COULDNOTFINDLIBRARYEXPORT 7 /** a required exported symbol could not be found in the library */
#define LIBMCDRIVER_ASL_ERROR_INCOMPATIBLEBINARYVERSION 8 /** the version of the binary interface does not match the bindings interface */

/*************************************************************************************************************************
 Error strings for LibMCDriver_ASL
**************************************************************************************************************************/

inline const char * LIBMCDRIVER_ASL_GETERRORSTRING (LibMCDriver_ASLResult nErrorCode) {
  switch (nErrorCode) {
    case LIBMCDRIVER_ASL_SUCCESS: return "no error";
    case LIBMCDRIVER_ASL_ERROR_NOTIMPLEMENTED: return "functionality not implemented";
    case LIBMCDRIVER_ASL_ERROR_INVALIDPARAM: return "an invalid parameter was passed";
    case LIBMCDRIVER_ASL_ERROR_INVALIDCAST: return "a type cast failed";
    case LIBMCDRIVER_ASL_ERROR_BUFFERTOOSMALL: return "a provided buffer is too small";
    case LIBMCDRIVER_ASL_ERROR_GENERICEXCEPTION: return "a generic exception occurred";
    case LIBMCDRIVER_ASL_ERROR_COULDNOTLOADLIBRARY: return "the library could not be loaded";
    case LIBMCDRIVER_ASL_ERROR_COULDNOTFINDLIBRARYEXPORT: return "a required exported symbol could not be found in the library";
    case LIBMCDRIVER_ASL_ERROR_INCOMPATIBLEBINARYVERSION: return "the version of the binary interface does not match the bindings interface";
    default: return "unknown error";
  }
}

/*************************************************************************************************************************
 Declaration of handle classes 
**************************************************************************************************************************/

typedef LibMCDriver_ASLHandle LibMCDriver_ASL_Base;
typedef LibMCDriver_ASLHandle LibMCDriver_ASL_Driver;
typedef LibMCDriver_ASLHandle LibMCDriver_ASL_DriverContext;
typedef LibMCDriver_ASLHandle LibMCDriver_ASL_Driver_ASL;

namespace LibMCDriver_ASL {

} // namespace LibMCDriver_ASL;

// define legacy C-names for enums, structs and function types

#endif // __LIBMCDRIVER_ASL_TYPES_HEADER_CPP
