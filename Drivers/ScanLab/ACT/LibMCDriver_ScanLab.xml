<?xml version="1.0" encoding="UTF-8"?>
<component xmlns="http://schemas.autodesk.com/netfabb/automaticcomponenttoolkit/2018" 
	libraryname="MC Driver ScanLab RTC5" namespace="LibMCDriver_ScanLab" copyright="Autodesk Inc." year="2020" basename="libmcdriver_scanlab"
	version="1.0.0">
	<license>
		<line value="All rights reserved." />
		<line value="" />
		<line value="Redistribution and use in source and binary forms, with or without" />
		<line value="modification, are permitted provided that the following conditions are met:" />
		<line value="    * Redistributions of source code must retain the above copyright" />
		<line value="      notice, this list of conditions and the following disclaimer." />
		<line value="    * Redistributions in binary form must reproduce the above copyright" />
		<line value="      notice, this list of conditions and the following disclaimer in the" />
		<line value="      documentation and/or other materials provided with the distribution." />
		<line value="    * Neither the name of the Autodesk Inc. nor the" />
		<line value="      names of its contributors may be used to endorse or promote products" />
		<line value="      derived from this software without specific prior written permission." />
		<line value="" />
		<line value="THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND" />
		<line value="ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED" />
		<line value="WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE" />
		<line value="DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY" />
		<line value="DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES" />
		<line value="(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;" />
		<line value="LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND" />
		<line value="ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT" />
		<line value="(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS" />
		<line value="SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." />
		<line value="" />
	</license>
	
	<bindings>
		<binding language="CppDynamic" indentation="tabs" />
	</bindings>
	<implementations>
		<implementation language="Cpp" indentation="tabs"/>
	</implementations>
	
	
	<importcomponent uri="../../../ACT/LibMCEnv.xml" namespace="LibMCEnv"/>
	
	<errors>
		<error name="NOTIMPLEMENTED" code="1" description="functionality not implemented" />
		<error name="INVALIDPARAM" code="2" description="an invalid parameter was passed" />
		<error name="INVALIDCAST" code="3" description="a type cast failed" />
		<error name="BUFFERTOOSMALL" code="4" description="a provided buffer is too small" />
		<error name="GENERICEXCEPTION" code="5" description="a generic exception occurred" />
		<error name="COULDNOTLOADLIBRARY" code="6" description="the library could not be loaded" />
		<error name="COULDNOTFINDLIBRARYEXPORT" code="7" description="a required exported symbol could not be found in the library" />
		<error name="INCOMPATIBLEBINARYVERSION" code="8" description="the version of the binary interface does not match the bindings interface" />
		<error name="INVALIDSTATENAME" code="9" description="invalid state name" />

		<error name="DRIVERERROR" code="1000" description="a driver error occured" />
		<error name="RTC6_NO_PCIE_CARD_FOUND" code="1001" description="RTC6: No PCIE Card was found" />
		<error name="RTC6_ACCESS_DENIED" code="1002" description="RTC6: Access Denied" />
		<error name="RTC6_SEND_ERROR" code="1003" description="RTC6: Send Error" />
		<error name="RTC6_TIMEOUT" code="1004" description="RTC6: Timeout" />
		<error name="RTC6_PARAM_ERROR" code="1005" description="RTC6: Param Error" />
		<error name="RTC6_BUSY" code="1006" description="RTC6: Busy" />
		<error name="RTC6_REJECTED" code="1007" description="RTC6: Rejected" />
		<error name="RTC6_IGNORED" code="1008" description="RTC6: Ignored" />
		<error name="RTC6_VERSION_MISMATCH" code="1009" description="RTC6: Version Mismatch" />
		<error name="RTC6_VERIFY_ERROR" code="1010" description="RTC6: Verify Error" />
		<error name="RTC6_TYPE_REJECTED" code="1011" description="RTC6: Type Rejected" />
		<error name="RTC6_OUT_OF_MEMORY" code="1012" description="RTC6: Out of Memory" />
		<error name="RTC6_FLASH_ERROR" code="1013" description="RTC6: Flash Error" />
		<error name="RTC6_ETH_ERROR" code="1014" description="RTC6: Eth Error" />
		<error name="RTC6_CONFIG_ERROR" code="1015" description="RTC6: Config Error" />
		<error name="RTC6_UNKNOWN_ERROR" code="1016" description="RTC6: Unknown Error" />
		<error name="RTCOPEN_FAILED" code="1017" description="RTC open failed" />
		<error name="INVALIDRTCPROC" code="1018" description="Invalid RTC proc" />
		<error name="INVALIDIPADDRESS" code="1019" description="Invalid IP Address" />
		<error name="INVALIDNETMASK" code="1020" description="Invalid NetMask" />
		<error name="CARDALREADYACQUIRED" code="1021" description="Card already acquired" />
		<error name="CARDNOTFOUND" code="1022" description="Card not found" />
		<error name="COULDNOTLOADPROGRAMFILE" code="1023" description="Could not load program file" />
		<error name="COULDNOTLOADCORRECTIONFILE" code="1024" description="Could not load correction file" />
		<error name="DELAYSMUSTBEMULTIPLEOF10" code="1025" description="Delays must be a multiple of 10 microseconds" />		
		<error name="SCANLABSDKNOTLOADED" code="1026" description="Scanlab RTC has not been loaded" />
		<error name="SCANLABSDKALREADYLOADED" code="1027" description="Scanlab RTC has already been loaded" />
		<error name="CARDALREADYINITIALIZED" code="1028" description="Scanlab RTC card is already initialized" />
		<error name="CARDNOTINITIALIZED" code="1029" description="Scanlab RTC card is not initialized" />		
		<error name="INVALIDPOINTCOUNT" code="1030" description="Invalid point count" />
		<error name="INVALIDMAXLASERPOWER" code="1031" description="Invalid max laser power." />
		
		
	</errors>


	<enum name="LaserMode">
	   <option name="CO2" value="0" />
	   <option name="YAG1" value="1" />
	   <option name="YAG2" value="2" />
	   <option name="YAG3" value="3" />
	   <option name="LaserMode4" value="4" />
	   <option name="YAG5" value="5" />
	   <option name="LaserMode6" value="6" />
	</enum>

	<enum name="LaserPort">
	   <option name="Port8bitDigital" value="1" />
	   <option name="Port16bitDigital" value="2" />
	   <option name="Port12BitAnalog1" value="3" />
	   <option name="Port12BitAnalog2" value="4" />
	</enum>

	<struct name="Point2D">
		<member name="X" type="single" />
		<member name="Y" type="single" />
	</struct>

	<struct name="Hatch2D">
		<member name="X1" type="single" />
		<member name="Y1" type="single" />
		<member name="X2" type="single" />
		<member name="Y2" type="single" />
	</struct>

	
<!--

This base Driver interface MUST be in Sync with LibMCDriver.xml

-->
	
	<class name="Base">
	</class>
	
	<class name="Driver" parent="Base" description="An abstract Machine Control Driver">

		<method name="Configure" description = "Configures a driver with its specific configuration data.">
			<param name="ConfigurationString" type="string" pass="in" description="Configuration data of driver." />
		</method>
	
		<method name="GetName" description = "returns the name identifier of the driver">
			<param name="Name" type="string" pass="return" description="Name of the driver." />
		</method>

		<method name="GetType" description = "returns the type identifier of the driver">
			<param name="Type" type="string" pass="return" description="Type of the driver." />
		</method>

		<method name="GetVersion" description = "returns the version identifiers of the driver">
			<param name="Major" type="uint32" pass="out" description="Major version." />
			<param name="Minor" type="uint32" pass="out" description="Minor version." />
			<param name="Micro" type="uint32" pass="out" description="Micro version." />
			<param name="Build" type="string" pass="out" description="Build identifier." />
		</method>

		<method name="GetHeaderInformation" description = "returns the header information">
			<param name="NameSpace" type="string" pass="out" description="NameSpace of the driver." />
			<param name="BaseName" type="string" pass="out" description="BaseName of the driver." />
		</method>

		<method name="QueryParameters" description = "Stores the driver parameters in the driver environment.">			
		</method>

	</class>

<!--

End Interface

-->


<!--

Custom implementation

-->



	<class name="RTCContext" parent="Base" description="Selector of the RTC Controller Card">

		<method name="LoadFirmware" description="Loads card firmware from resource files.">
			<param name="FirmwareResource" type="string" pass="in" description="resource name of the firmware program file." />
			<param name="FPGAResource" type="string" pass="in" description="resource name of the firmware FPGA file." />
			<param name="AuxiliaryResource" type="string" pass="in" description="resource name of the binary auxiliary file." />
		</method>

		<method name="LoadCorrectionFile" description="Loads card calibration file from given resource file.">
			<param name="CorrectionFile" type="basicarray" class="uint8" pass="in" description="binary data of the correction file." />
			<param name="TableNumber" type="uint32" pass="in" description="Correction table index of card (1..8)" />
			<param name="Dimension" type="uint32" pass="in" description="Is it a 2D or 3D correction file." />
		</method>

		<method name="SelectCorrectionTable" description="Selects Correction Table on card.">
			<param name="TableNumberHeadA" type="uint32" pass="in" description="Table Number for HeadA (1..8) or off (0)." />
			<param name="TableNumberHeadB" type="uint32" pass="in" description="Table Number for HeadA (1..8) or off (0)." />
		</method>
		
		<method name="ConfigureLists" description="Configures list buffer size.">
			<param name="SizeListA" type="uint32" pass="in" description="Size of List A" />
			<param name="SizeListB" type="uint32" pass="in" description="Size of List B" />
		</method>

		<method name="SetLaserMode" description="Sets laser mode of card.">
			<param name="LaserMode" type="enum" class="LaserMode" pass="in" description="Laser Mode Enum" />
			<param name="LaserPort" type="enum" class="LaserPort" pass="in" description="Laser Port Enum" />
		</method>

		<method name="DisableAutoLaserControl" description="Disables automatic laser control.">
		</method>

		<method name="SetLaserControlParameters" description="Sets laser control parameters of card.">
			<param name="DisableLaser" type="bool" pass="in" description="Laser is disabled" />
			<param name="FinishLaserPulseAfterOn" type="bool" pass="in" description="Finish laser pulse after LaserOn" />
			<param name="PhaseShiftOfLaserSignal" type="bool" pass="in" description="180 degree phase shift of Laser signal" />
			<param name="LaserOnSignalLowActive" type="bool" pass="in" description="Set Laser On Signal Low Active" />
			<param name="LaserHalfSignalsLowActive" type="bool" pass="in" description="Set Laser Half Signal Low Active" />
			<param name="SetDigitalInOneHighActive" type="bool" pass="in" description="Set Digital In 1 high Active" />
			<param name="OutputSynchronizationActive" type="bool" pass="in" description="Output synchronization active" />
		</method>

		<method name="SetLaserPulsesInBits" description="Sets laser control pulse interval (in 1/64th microseconds)">
			<param name="HalfPeriod" type="uint32" pass="in" description="Half Output period in 1/64th microseconds" />
			<param name="PulseLength" type="uint32" pass="in" description="Pulse Length in 1/64th microseconds" />
		</method>

		<method name="SetLaserPulsesInMicroSeconds" description="Sets laser control pulse interval (in microseconds)">
			<param name="HalfPeriod" type="double" pass="in" description="Half Output period in microseconds" />
			<param name="PulseLength" type="double" pass="in" description="Pulse Length in microseconds" />
		</method>

		<method name="SetStandbyInBits" description="Sets standby pulse interval (in 1/64th microseconds)">
			<param name="HalfPeriod" type="uint32" pass="in" description="Half Output period in 1/64th microseconds" />
			<param name="PulseLength" type="uint32" pass="in" description="Pulse Length in 1/64th microseconds" />
		</method>

		<method name="SetStandbyInMicroSeconds" description="Sets laser control pulse interval (in microseconds)">
			<param name="HalfPeriod" type="double" pass="in" description="Half Output period in microseconds" />
			<param name="PulseLength" type="double" pass="in" description="Pulse Length in microseconds" />
		</method>

		<method name="GetSerialNumber" description="Returns serial number of card">
			<param name="SerialNumber" type="uint32" pass="return" description="Returns serial number of board." />
		</method>
		
		<method name="SetStartList" description="Opens the list to write">
			<param name="ListIndex" type="uint32" pass="in" description="Index of List (1 or 2)." />
			<param name="Position" type="uint32" pass="in" description="Relative Position in List." />
		</method>

		<method name="SetEndOfList" description="Closes the currently open list">
		</method>
		
		<method name="ExecuteList" description="Executes the list">
			<param name="ListIndex" type="uint32" pass="in" description="Index of List (1 or 2)." />
			<param name="Position" type="uint32" pass="in" description="Relative Position in List." />
		</method>

		<method name="SetAutoChangePos" description="Sets the AutoChange Position of the currently not running list.">
			<param name="Position" type="uint32" pass="in" description="Relative Position in List." />
		</method>
		


		<method name="SetDelays" description="Sets the laser delays (on the list)">
			<param name="MarkDelay" type="uint32" pass="in" description="Mark delay in microseconds (MUST be multiple of 10)" />
			<param name="JumpDelay" type="uint32" pass="in" description="Jump delay in microseconds (MUST be multiple of 10)" />
			<param name="PolygonDelay" type="uint32" pass="in" description="Polygon delay in microseconds (MUST be multiple of 10)" />
		</method>
		
		<method name="SetLaserDelaysInMicroseconds" description="Sets the laser delays (on the list)">
			<param name="LaserOnDelay" type="double" pass="in" description="LaserOn delay in microseconds" />
			<param name="LaserOffDelay" type="double" pass="in" description="LaserOff delay in microseconds" />
		</method>

		<method name="SetLaserDelaysInBits" description="Sets the laser delays (on the list)">
			<param name="LaserOnDelay" type="uint32" pass="in" description="LaserOn delay in bits (1/64th microseconds)" />
			<param name="LaserOffDelay" type="uint32" pass="in" description="LaserOff delay in bits (1/64th microseconds)" />
		</method>
		
		<method name="DrawPolyline" description="Writes a polyline into the open list">
			<param name="Points" type="structarray" class="Point2D" pass="in" description="Points of polyline to draw." />
			<param name="MarkSpeed" type="single" pass="in" description="Mark speed in mm/s" />
			<param name="JumpSpeed" type="single" pass="in" description="Mark speed in mm/s" />
			<param name="Power" type="single" pass="in" description="Laser power in percent" />
		</method>
		
		<method name="DrawHatches" description="Writes a list of hatches into the open list">
			<param name="Hatches" type="structarray" class="Hatch2D" pass="in" description="Hatches to draw." />
			<param name="MarkSpeed" type="single" pass="in" description="Mark speed in mm/s" />
			<param name="JumpSpeed" type="single" pass="in" description="Mark speed in mm/s" />
			<param name="Power" type="single" pass="in" description="Laser power in percent" />
		</method>

		<method name="AddCustomDelay" description="Adds a custom delay to the list">
			<param name="Delay" type="uint32" pass="in" description="Custom delay value in microseconds (MUST be multiple of 10)" />
		</method>

		<method name="GetCorrectionFactor" description="Returns correction factor of Card Calibration (in bits per mm)">
			<param name="CorrectionFactor" type="double" pass="return" description="CorrectionFactor" />
		</method>
		
		<method name="GetStatus" description="Returns status of list execution">
			<param name="Busy" type="bool" pass="out" description="Execution is busy" />
			<param name="Position" type="uint32" pass="out" description="Returns current executed position" />
		</method>

		<method name="GetInputPointer" description="returns current input list position">
			<param name="Position" type="uint32" pass="return" description="Returns current position of open list" />
		</method>
						
	</class>

	
	<class name="RTCSelector" parent="Base" description="Selector of the RTC Controller">
		
		<method name="SearchCards" description="Searches Ethernet Cards">
			<param name="IP" type="string" pass="in" description="IP Network Address." />
			<param name="Netmask" type="string" pass="in" description="IP Netmask Address." />
			<param name="Timeout" type="uint32" pass="in" description="Time out in microseconds." />
			<param name="Count" type="uint32" pass="return" description="Returns how many ethernet cards have been found." />
		</method>
		
		<method name="SearchCardsByRange" description="Searches Ethernet Cards">
			<param name="StartIP" type="string" pass="in" description="IP Network Address." />
			<param name="EndIP" type="string" pass="in" description="IP Network Address." />
			<param name="Timeout" type="uint32" pass="in" description="Time out in microseconds." />
			<param name="Count" type="uint32" pass="return" description="Returns how many ethernet cards have been found." />
		</method>
		
		<method name="GetCardCount" description="Returns number of detected Cards">
			<param name="Count" type="uint32" pass="return" description="Returns how many cards have been found." />
		</method>

		<method name="GetEthernetCardCount" description="Returns number of found ethernet cards">
			<param name="Count" type="uint32" pass="return" description="Returns how many ethernet cards have been found." />
		</method>

		<method name="AcquireCard" description="Acquires a card and returns an RTCContext instance.">
			<param name="Number" type="uint32" pass="in" description="Number of Card (1-based). Must be between 1 and CardCount." />
			<param name="Instance" type="class" class="RTCContext" pass="return" description="New Context# instance" />
		</method>

		<method name="AcquireCardBySerial" description="Acquires a card and returns an RTCContext instance.">
			<param name="SerialNumber" type="uint32" pass="in" description="Desired Serial Number of card." />
			<param name="Instance" type="class" class="RTCContext" pass="return" description="New Context# instance" />
		</method>

		<method name="AcquireEthernetCard" description="Acquires an ethernet card and returns an RTCContext instance.">
			<param name="Number" type="uint32" pass="in" description="Number of Card (1-based). Must be between 1 and EthernetCardCount." />
			<param name="Instance" type="class" class="RTCContext" pass="return" description="New Context# instance" />
		</method>
		
		<method name="AcquireEthernetCardBySerial" description="Acquires an ethernet card and returns an RTCContext instance.">
			<param name="SerialNumber" type="uint32" pass="in" description="Desired Serial Number of card." />
			<param name="Instance" type="class" class="RTCContext" pass="return" description="New Context# instance" />
		</method>
				

	
	</class>


	<class name="Driver_ScanLab" parent="Driver" description="A LaserScanner Driver for a ScanLAB card.">

		<method name="LoadSDK" description="Initializes the ScanLab SDK.">
			<param name="ResourceName" type="string" pass="in" description="Resource name of Scanlab DLL" />
		</method>

		<method name="CreateRTCSelector" description="Creates and initializes a new RTC selector singleton. Should only be called once per Process.">
			<param name="Instance" type="class" class="RTCSelector" pass="return" description="New Selector instance" />
		</method>

	</class>


	<class name="Driver_ScanLab_RTC5" parent="Driver_ScanLab" description="A LaserScanner Driver for a single laser ScanLAB RTC5 card.">

		<method name="Initialise" description="Initializes the RTC5 Scanner Driver.">
			<param name="IP" type="string" pass="in" description="IP Network Address. Empty string for local card." />
			<param name="Netmask" type="string" pass="in" description="IP Netmask Address. Empty string for local card." />
			<param name="Timeout" type="uint32" pass="in" description="Time out in microseconds." />
			<param name="SerialNumber" type="uint32" pass="in" description="Desired Serial Number of card." />
		</method>


		<method name="LoadFirmware" description="Loads the firmware from the driver resources.">
			<param name="FirmwareResource" type="string" pass="in" description="resource name of the firmware program file." />
			<param name="FPGAResource" type="string" pass="in" description="resource name of the firmware FPGA file." />
			<param name="AuxiliaryResource" type="string" pass="in" description="resource name of the binary auxiliary file." />
		</method>		
		
		<method name="SetCorrectionFile" description="Sets the correction file stream.">
			<param name="CorrectionFile" type="basicarray" class="uint8" pass="in" description="binary data of the correction file." />
			<param name="TableNumber" type="uint32" pass="in" description="Correction table index of card (1..8)" />
			<param name="Dimension" type="uint32" pass="in" description="Is it a 2D or 3D correction file." />
			<param name="TableNumberHeadA" type="uint32" pass="in" description="Table number of Head A." />
			<param name="TableNumberHeadB" type="uint32" pass="in" description="Table number of Head B." />
		</method>		

		<method name="ConfigureLaserMode" description="Configures the laser mode.">
			<param name="LaserMode" type="enum" class="LaserMode" pass="in" description="Laser Mode Enum" />
			<param name="LaserPort" type="enum" class="LaserPort" pass="in" description="Laser Port Enum" />
			<param name="MaxLaserPower" type="double" pass="in" description="Maximum laser power." />
			<param name="FinishLaserPulseAfterOn" type="bool" pass="in" description="Finish laser pulse after LaserOn" />
			<param name="PhaseShiftOfLaserSignal" type="bool" pass="in" description="180 degree phase shift of Laser signal" />
			<param name="LaserOnSignalLowActive" type="bool" pass="in" description="Set Laser On Signal Low Active" />
			<param name="LaserHalfSignalsLowActive" type="bool" pass="in" description="Set Laser Half Signal Low Active" />
			<param name="SetDigitalInOneHighActive" type="bool" pass="in" description="Set Digital In 1 high Active" />
			<param name="OutputSynchronizationActive" type="bool" pass="in" description="Output synchronization active" />
		</method>

		<method name="DrawLayer" description="Draws a layer of a build stream. Blocks until the layer is drawn.">
			<param name="StreamUUID" type="string" pass="in" description="UUID of the build stream. Must have been loaded in memory by the system." />
			<param name="LayerIndex" type="uint32" pass="in" description="Layer index of the build file." />
		</method>
		
	</class>





<!--

End of Custom implementation

-->

		
	<global baseclassname="Base" stringoutclassname="Base" releasemethod="ReleaseInstance" acquiremethod="AcquireInstance" versionmethod="GetVersion" errormethod="GetLastError" injectionmethod="InjectComponent" symbollookupmethod="GetSymbolLookupMethod">
		
		<method name="GetVersion" description = "retrieves the binary version of this library.">
			<param name="Major" type="uint32" pass="out" description="returns the major version of this library" />
			<param name="Minor" type="uint32" pass="out" description="returns the minor version of this library" />
			<param name="Micro" type="uint32" pass="out" description="returns the micro version of this library" />
		</method>
		<method name="GetLastError" description="Returns the last error recorded on this object">
			<param name="Instance" type="class" class="Base" pass="in" description="Instance Handle" />
			<param name="ErrorMessage" type="string" pass="out" description="Message of the last error" />
			<param name="HasError" type="bool" pass="return" description="Is there a last error to query" />
		</method>
		<method name="ReleaseInstance" description="Releases shared ownership of an Instance">
			<param name="Instance" type="class" class="Base" pass="in" description="Instance Handle" />
		</method>
		<method name="AcquireInstance" description="Acquires shared ownership of an Instance">
			<param name="Instance" type="class" class="Base" pass="in" description="Instance Handle" />
		</method>
		<method name="InjectComponent" description="Injects an imported component for usage within this component">
			<param name="NameSpace" type="string" pass="in" description="NameSpace of the injected component" />
			<param name="SymbolAddressMethod" type="pointer" pass="in" description="Address of the SymbolAddressMethod of the injected component" />
		</method>		
		<method name="GetSymbolLookupMethod" description="Returns the address of the SymbolLookupMethod">
			<param name="SymbolLookupMethod" type="pointer" pass="return" description="Address of the SymbolAddressMethod" />
		</method>				
		<method name="CreateDriver" description="Creates a driver instance with a specific name.">
			<param name="Name" type="string" pass="in" description="Name of driver to be created." />
			<param name="Type" type="string" pass="in" description="Type of driver to be created." />
			<param name="DriverEnvironment" type="class" class="LibMCEnv:DriverEnvironment" pass="in" description="Environment of this driver." />
			<param name="Instance" type="class" class="Driver" pass="return" description="New Driver instance" />
		</method>
		
	</global>
	
	
</component>

