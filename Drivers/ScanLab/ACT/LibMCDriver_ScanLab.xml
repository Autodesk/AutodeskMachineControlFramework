<?xml version="1.0" encoding="UTF-8"?>
<component xmlns="http://schemas.autodesk.com/netfabb/automaticcomponenttoolkit/2018" 
	libraryname="MC Driver ScanLab RTC" namespace="LibMCDriver_ScanLab" copyright="Autodesk Inc." year="2020" basename="libmcdriver_scanlab"
	version="2.0.0">
	<license>
		<line value="All rights reserved." />
		<line value="" />
		<line value="Redistribution and use in source and binary forms, with or without" />
		<line value="modification, are permitted provided that the following conditions are met:" />
		<line value="    * Redistributions of source code must retain the above copyright" />
		<line value="      notice, this list of conditions and the following disclaimer." />
		<line value="    * Redistributions in binary form must reproduce the above copyright" />
		<line value="      notice, this list of conditions and the following disclaimer in the" />
		<line value="      documentation and/or other materials provided with the distribution." />
		<line value="    * Neither the name of the Autodesk Inc. nor the" />
		<line value="      names of its contributors may be used to endorse or promote products" />
		<line value="      derived from this software without specific prior written permission." />
		<line value="" />
		<line value="THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND" />
		<line value="ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED" />
		<line value="WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE" />
		<line value="DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY" />
		<line value="DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES" />
		<line value="(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;" />
		<line value="LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND" />
		<line value="ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT" />
		<line value="(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS" />
		<line value="SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." />
		<line value="" />
	</license>
	
	<bindings>
		<binding language="CppDynamic" indentation="tabs" documentation="1" />
	</bindings>
	<implementations>
		<implementation language="Cpp" indentation="tabs"/>
	</implementations>
	
	
	<importcomponent uri="../../../ACT/LibMCEnv.xml" namespace="LibMCEnv"/>
	
	<errors>
		<error name="NOTIMPLEMENTED" code="1" description="functionality not implemented" />
		<error name="INVALIDPARAM" code="2" description="an invalid parameter was passed" />
		<error name="INVALIDCAST" code="3" description="a type cast failed" />
		<error name="BUFFERTOOSMALL" code="4" description="a provided buffer is too small" />
		<error name="GENERICEXCEPTION" code="5" description="a generic exception occurred" />
		<error name="COULDNOTLOADLIBRARY" code="6" description="the library could not be loaded" />
		<error name="COULDNOTFINDLIBRARYEXPORT" code="7" description="a required exported symbol could not be found in the library" />
		<error name="INCOMPATIBLEBINARYVERSION" code="8" description="the version of the binary interface does not match the bindings interface" />

		<error name="DRIVERERROR" code="1000" description="a driver error occured" />
		<error name="RTC6_NO_PCIE_CARD_FOUND" code="1001" description="RTC6: No PCIE Card was found" />
		<error name="RTC6_ACCESS_DENIED" code="1002" description="RTC6: Access Denied" />
		<error name="RTC6_SEND_ERROR" code="1003" description="RTC6: Send Error" />
		<error name="RTC6_TIMEOUT" code="1004" description="RTC6: Timeout" />
		<error name="RTC6_PARAM_ERROR" code="1005" description="RTC6: Param Error" />
		<error name="RTC6_BUSY" code="1006" description="RTC6: Busy" />
		<error name="RTC6_REJECTED" code="1007" description="RTC6: Rejected" />
		<error name="RTC6_IGNORED" code="1008" description="RTC6: Ignored" />
		<error name="RTC6_VERSION_MISMATCH" code="1009" description="RTC6: Version Mismatch" />
		<error name="RTC6_VERIFY_ERROR" code="1010" description="RTC6: Verify Error" />
		<error name="RTC6_TYPE_REJECTED" code="1011" description="RTC6: Type Rejected" />
		<error name="RTC6_OUT_OF_MEMORY" code="1012" description="RTC6: Out of Memory" />
		<error name="RTC6_FLASH_ERROR" code="1013" description="RTC6: Flash Error" />
		<error name="RTC6_ETH_ERROR" code="1014" description="RTC6: Eth Error" />
		<error name="RTC6_CONFIG_ERROR" code="1015" description="RTC6: Config Error" />
		<error name="RTC6_UNKNOWN_ERROR" code="1016" description="RTC6: Unknown Error" />
		<error name="RTCOPEN_FAILED" code="1017" description="RTC open failed" />
		<error name="INVALIDRTCPROC" code="1018" description="Invalid RTC proc" />
		<error name="INVALIDIPADDRESS" code="1019" description="Invalid IP Address" />
		<error name="INVALIDNETMASK" code="1020" description="Invalid NetMask" />
		<error name="CARDALREADYACQUIRED" code="1021" description="Card already acquired" />
		<error name="CARDNOTFOUND" code="1022" description="Card not found" />
		<error name="COULDNOTLOADPROGRAMFILE" code="1023" description="Could not load program file" />
		<error name="COULDNOTLOADCORRECTIONFILE" code="1024" description="Could not load correction file" />
		<error name="DELAYSMUSTBEMULTIPLEOF10" code="1025" description="Delays must be a multiple of 10 microseconds" />		
		<error name="SCANLABSDKNOTLOADED" code="1026" description="Scanlab RTC has not been loaded" />
		<error name="SCANLABSDKALREADYLOADED" code="1027" description="Scanlab RTC has already been loaded" />
		<error name="CARDALREADYINITIALIZED" code="1028" description="Scanlab RTC card is already initialized" />
		<error name="CARDNOTINITIALIZED" code="1029" description="Scanlab RTC card is not initialized" />		
		<error name="INVALIDPOINTCOUNT" code="1030" description="Invalid point count" />
		<error name="INVALIDMAXLASERPOWER" code="1031" description="Invalid max laser power." />
		<error name="INVALIDLASERDELAY" code="1032" description="Invalid laser delay." />
		<error name="INVALIDSCANNERDELAY" code="1033" description="Invalid scanner delay." />
		<error name="INVALIDSCANLABSDK" code="1034" description="Invalid SCANLAB SDK." />		
		<error name="INVALIDOIESIGNALBUFFERARRAY" code="1035" description="Invalid OIE Signal buffer array." />
		<error name="INVALIDSKYWRITINGTIMELAG" code="1036" description="Invalid Skywriting Timelag." />
		<error name="INVALIDSKYWRITINGLASERONSHIFT" code="1037" description="Invalid Skywriting Laser On Shift." />
		<error name="INVALIDSKYWRITINGNPREV" code="1038" description="Invalid Skywriting N Prev." />
		<error name="INVALIDSKYWRITINGNPOST" code="1039" description="Invalid Skywriting N Post." />		
		<error name="OIEHASNOTBEENINITIALIZED" code="1040" description="OIE has not been initialized." />
		<error name="UNSUPPORTEDOIEOPERATIONMODE" code="1041" description="Unsupported OIE Operation Mode." />		
		<error name="INVALIDRTCCORRECTIONDATA" code="1042" description="Invalid RTC Correction data." />		
		<error name="CONFIGURATIONPRESETNOTFOUND" code="1043" description="Configuration preset not found." />				
		<error name="INVALIDSCANNERCOUNT" code="1044" description="Invalid scanner count." />
		<error name="INVALIDSCANNERINDEX" code="1045" description="Invalid scanner index." />			
		<error name="LASERINDEXHASNOASSIGNEDSCANNER" code="1046" description="Laser index has no assigned scanner." />			
		<error name="LASERINDEXNOTFOUND" code="1047" description="Laser index not found." />			
		<error name="DUPLICATELASERINDEX" code="1048" description="Duplicate laser index." />			
		<error name="INVALIDCONFIGURATIONSCHEMA" code="1049" description="Invalid configuration schema." />
		<error name="NOVERSIONDEFINITION" code="1050" description="No version definition." />			
		<error name="DUPLICATECONFIGURATIONPRESETNAME" code="1051" description="Duplicate configuration preset name." />					
		<error name="OIEPIDVARIABLEOUTOFBOUNDS" code="1052" description="OIE PID Variable out of bounds." />		
		<error name="TIMELAGMUSTBEAMULTIPLEOF10" code="1053" description="Timelag must be a multiple of 10 microseconds." />				
		<error name="INVALIDENCODERSCALINGINX" code="1054" description="Invalid Encoder Scaling in X" />		
		<error name="INVALIDENCODERSCALINGINY" code="1055" description="Invalid Encoder Scaling in Y" />		
		<error name="ONTHEFLYMARKINGERROR" code="1056" description="On the fly marking error" />		
		<error name="MARKONTHEFLYISDISABLED" code="1057" description="Mark on the fly is disabled" />		
		<error name="INVALIDLASERFIELDCOORDINATES" code="1058" description="Invalid laser field coordinates" />		
		<error name="NOLASERFIELDSET" code="1059" description="No laser field has been set." />
		<error name="INVALIDFREEVARIABLEINDEX" code="1060" description="Invalid free variable index." />		
		<error name="DUPLICATELASERPOWERCALIBRATIONSETPOINT" code="1061" description="Duplicate laser power calibration set point." />		
		<error name="INVALIDPOWERCALIBRATIONSETPOINT" code="1062" description="Invalid power calibration set point." />		
		<error name="INVALIDPOWERCALIBRATIONOUTPUTSCALING" code="1063" description="Invalid power calibration output scaling." />		
		<error name="POWERCALIBRATIONLOOKUPFAILED" code="1064" description="Power calibration lookup failed." />		
		<error name="INVALIDMODULATIONCALLBACK" code="1065" description="Invalid modulation callback." />		
		<error name="INVALIDSUBDIVISIONTHRESHOLD" code="1066" description="Invalid subdivision threshold." />		
		<error name="MULTIPLELASERPORTSNOTCOMPATIBLEWITHPID" code="1067" description="Multiple laser ports are not compatible with PID control." />		
		<error name="INVALIDOIEMEASUREMENTTAG" code="1068" description="Invalid OIE measurement tag." />		
		<error name="RS232READTIMEOUT" code="1069" description="RS232 read timeout." />		
		<error name="RS232READLINEOVERRUN" code="1070" description="RS232 read line overrun." />		
		<error name="RS232RINGBUFFEROVERRUN" code="1071" description="RS232 ring buffer overrun." />		
		<error name="NOSCANAHEADOPTION" code="1072" description="No Scanahead option." />		
		<error name="NOEXCELLISCAN" code="1073" description="No Excelli Scan." />		
		<error name="SCANAHEADLISTISACTIVE" code="1074" description="Scanahead - list is active." />		
		<error name="SCANAHEADPARAMETERERROR" code="1075" description="Scanahead parameter error." />		
		<error name="SCANAHEADSCALINGERROR" code="1076" description="Scanahead scaling error." />		
		<error name="SCANAHEADMISSINGRTCRESPONSE" code="1077" description="Scanahead missing rtc response." />		
		<error name="SCANAHEADPCIERROR" code="1078" description="Scanahead PCI error." />		
		<error name="SCANAHEADUNKNOWNERROR" code="1079" description="Scanahead unknown error." />		
		
						
	</errors>


	<enum name="LaserMode">
	   <option name="CO2" value="0" />
	   <option name="YAG1" value="1" />
	   <option name="YAG2" value="2" />
	   <option name="YAG3" value="3" />
	   <option name="LaserMode4" value="4" />
	   <option name="YAG5" value="5" />
	   <option name="LaserMode6" value="6" />
	</enum>

	<enum name="LaserPort">
	   <option name="Port8bitDigital" value="1" />
	   <option name="Port16bitDigital" value="2" />
	   <option name="Port12BitAnalog1" value="3" />
	   <option name="Port12BitAnalog2" value="4" />
	   <option name="Port12BitAnalog1andAnalog2" value="5" />
	</enum>


	<enum name="OIEOperationMode">
	   <option name="OIENotInitialized" value="0" />
	   <option name="OIEVersion2" value="1" />
	   <option name="OIEVersion3Compatibility" value="2" />
	   <option name="OIEVersion3" value="3" />
	</enum>
	
	
	<enum name="OIERecordingMode">
	   <option name="OIERecordingDisabled" value="0" description="OIE shall not record anything." />
	   <option name="OIEContinuousMeasurement" value="1" description="OIE shall continuously record, even if the laser is off. OIE must be enabled before drawing a layer." />
	   <option name="OIEEnableAndContinuousMeasurement" value="2" description="OIE shall continuously record, even if the laser is off. OIE will be specifically enabled for the layer." />
	   <option name="OIELaserActiveMeasurement" value="3" description="OIE shall record when the laser is on. OIE must be enabled before drawing a layer." />
	   <option name="OIEEnableAndLaserActiveMeasurement" value="4" description="OIE shall record when the laser is on. OIE will be specifically enabled for the layer." />
	</enum>	

	<struct name="Point2D">
		<member name="X" type="single" />
		<member name="Y" type="single" />
	</struct>

	<struct name="Hatch2D">
		<member name="X1" type="single" />
		<member name="Y1" type="single" />
		<member name="X2" type="single" />
		<member name="Y2" type="single" />
	</struct>

	<struct name="LaserCalibrationPoint" description="The laser output calibration at a point will be calculated by ((PowerSetPointInPercent + PowerOffsetInPercent) * PowerOutputScaling). The result is clamped to [0, 100]">
		<member name="PowerSetPointInPercent" type="double" description="Set point of the power in Percent." />
		<member name="PowerOffsetInPercent" type="double" description="Additional offset of the Power value. ." />
		<member name="PowerOutputScaling" type="double" description="Scaling factor of the laser output. MUST be positive." />
	</struct>

	<functiontype name="SpatialPowerModulationCallback" description="A callback function to modulate laser power depending on the position of the laser.">
		<param name="StartX" type="double" pass="in" description="The X start position of the marking in mm"/>
		<param name="StartY" type="double" pass="in" description="The Y start position of the marking in mm"/>
		<param name="TargetX" type="double" pass="in" description="The X target position of the marking in mm"/>
		<param name="TargetY" type="double" pass="in" description="The Y target position of the marking in mm"/>	
		<param name="LaserPowerInPercent" type="double" pass="in" description="The nominal laser power to be used in percent."/>
		<param name="ModulationType" type="int32" pass="in" description="A type ID from the build file that specifies the modulation type to use."/>	
		<param name="UserData" type="pointer" pass="in" description="Userdata that is passed to the callback function"/>
		<param name="AdjustedLaserPowerInPercent" type="double" pass="return" description="Returns the adjusted laser power in percent."/>
	</functiontype>

	
<!--

This base Driver interface MUST be in Sync with LibMCDriver.xml

-->
	
	<class name="Base">
	</class>
	
	<class name="Driver" parent="Base" description="An abstract Machine Control Driver">

		<method name="Configure" description = "Configures a driver with its specific configuration data.">
			<param name="ConfigurationString" type="string" pass="in" description="Configuration data of driver." />
		</method>
	
		<method name="GetName" description = "returns the name identifier of the driver">
			<param name="Name" type="string" pass="return" description="Name of the driver." />
		</method>

		<method name="GetType" description = "returns the type identifier of the driver">
			<param name="Type" type="string" pass="return" description="Type of the driver." />
		</method>

		<method name="GetVersion" description = "returns the version identifiers of the driver">
			<param name="Major" type="uint32" pass="out" description="Major version." />
			<param name="Minor" type="uint32" pass="out" description="Minor version." />
			<param name="Micro" type="uint32" pass="out" description="Micro version." />
			<param name="Build" type="string" pass="out" description="Build identifier." />
		</method>

		<method name="QueryParameters" description = "Updates the driver parameters in the driver environment. Should only be called in the driver thread.">
		</method>

		<method name="QueryParametersEx" description = "Updates the driver parameters in the driver environment. Might be called out of thread. Implementation MUST be able to handle parallel calls.">
			<param name="DriverUpdateInstance" type="class" class="LibMCEnv:DriverStatusUpdateSession" pass="in" description="Status update instance." />
		</method>

	</class>

<!--

End Interface

-->


<!--

Custom implementation

-->
	<class name="UARTConnection" parent="Base" description="A UART Connection Class. Will receive data into a buffer as long as the instance exists.">
	
		<method name="GetBaudRate" description="Returns the actual baud rate of the RS232 Interface.">
			<param name="BaudRate" type="uint32" pass="return" description="Baud rate." />
		</method>
	
		<method name="GetConfiguredBaudRate" description="Returns the configured baud rate of the RS232 Interface.">
			<param name="BaudRate" type="uint32" pass="return" description="Baud rate." />
		</method>

		<method name="ClearReceiveBuffer" description="Clears the receive buffer.">
		</method>
		
		<method name="AvailableBytes" description="Returns the number of currently received bytes.">
			<param name="ByteCount" type="uint32" pass="return" description="Number of currently received bytes." />
		</method>

		<method name="WriteString" description="Sends a string over the interface. The call is blocking.">
			<param name="Value" type="string" pass="in" description="String to send." />
		</method>

		<method name="WriteData" description="Sends a data buffer over the interface. The call is blocking.">
			<param name="Data" type="basicarray" class="uint8" pass="in" description="Data to send." />
		</method>

		<method name="ReadData" description="Blocking call for reading a certain number of bytes. Will remove the bytes from the received buffer. Fails if not enough data is available after the timeout.">
			<param name="ByteCount" type="uint32" pass="in" description="Number of bytes to read." />
			<param name="TimeOutInMS" type="uint32" pass="in" description="Timeout in Milliseconds." />
			<param name="Data" type="basicarray" class="uint8" pass="out" description="Receive buffer." />
		</method>

		<method name="ReadLine" description="Blocking call for reading until a line end signature is coming. Fails if timeout is hit or number of bytes have been reached.">
			<param name="Separator" type="string" pass="in" description="Line Separator to search for." />
			<param name="MaxLineLength" type="uint32" pass="in" description="Maximum line length to receive, excluding line separator." />
			<param name="TimeOutInMS" type="uint32" pass="in" description="Timeout in Milliseconds." />
			<param name="Line" type="string" pass="return" description="Received line." />
		</method>
		
		
	</class>


	<class name="RTCContext" parent="Base" description="Selector of the RTC Controller Card">

		<method name="LoadFirmware" description="Loads card firmware from resource files.">
			<param name="FirmwareData" type="basicarray" class="uint8" pass="in" description="byte array of the firmware program file." />
			<param name="FPGAData" type="basicarray" class="uint8" pass="in" description="byte array of the firmware FPGA file." />
			<param name="AuxiliaryData" type="basicarray" class="uint8" pass="in" description="byte array of the binary auxiliary file." />
		</method>

		<method name="LoadCorrectionFile" description="Loads card calibration file from given resource file.">
			<param name="CorrectionFile" type="basicarray" class="uint8" pass="in" description="binary data of the correction file." />
			<param name="TableNumber" type="uint32" pass="in" description="Correction table index of card (1..8)" />
			<param name="Dimension" type="uint32" pass="in" description="Is it a 2D or 3D correction file." />
		</method>

		<method name="SelectCorrectionTable" description="Selects Correction Table on card.">
			<param name="TableNumberHeadA" type="uint32" pass="in" description="Table Number for HeadA (1..8) or off (0)." />
			<param name="TableNumberHeadB" type="uint32" pass="in" description="Table Number for HeadA (1..8) or off (0)." />
		</method>
		
		<method name="ConfigureLists" description="Configures list buffer size.">
			<param name="SizeListA" type="uint32" pass="in" description="Size of List A" />
			<param name="SizeListB" type="uint32" pass="in" description="Size of List B" />
		</method>

		<method name="SetLaserMode" description="Sets laser mode of card.">
			<param name="LaserMode" type="enum" class="LaserMode" pass="in" description="Laser Mode Enum" />
			<param name="LaserPort" type="enum" class="LaserPort" pass="in" description="Laser Port Enum" />
		</method>

		<method name="DisableAutoLaserControl" description="Disables automatic laser control.">
		</method>

		<method name="SetLaserControlParameters" description="Sets laser control parameters of card.">
			<param name="DisableLaser" type="bool" pass="in" description="Laser is disabled" />
			<param name="FinishLaserPulseAfterOn" type="bool" pass="in" description="Finish laser pulse after LaserOn" />
			<param name="PhaseShiftOfLaserSignal" type="bool" pass="in" description="180 degree phase shift of Laser signal" />
			<param name="LaserOnSignalLowActive" type="bool" pass="in" description="Set Laser On Signal Low Active" />
			<param name="LaserHalfSignalsLowActive" type="bool" pass="in" description="Set Laser Half Signal Low Active" />
			<param name="SetDigitalInOneHighActive" type="bool" pass="in" description="Set Digital In 1 high Active" />
			<param name="OutputSynchronizationActive" type="bool" pass="in" description="Output synchronization active" />
		</method>

		<method name="SetLaserPulsesInBits" description="Sets laser control pulse interval (in 1/64th microseconds)">
			<param name="HalfPeriod" type="uint32" pass="in" description="Half Output period in 1/64th microseconds" />
			<param name="PulseLength" type="uint32" pass="in" description="Pulse Length in 1/64th microseconds" />
		</method>

		<method name="SetLaserPulsesInMicroSeconds" description="Sets laser control pulse interval (in microseconds)">
			<param name="HalfPeriod" type="double" pass="in" description="Half Output period in microseconds" />
			<param name="PulseLength" type="double" pass="in" description="Pulse Length in microseconds" />
		</method>

		<method name="SetStandbyInBits" description="Sets standby pulse interval (in 1/64th microseconds)">
			<param name="HalfPeriod" type="uint32" pass="in" description="Half Output period in 1/64th microseconds" />
			<param name="PulseLength" type="uint32" pass="in" description="Pulse Length in 1/64th microseconds" />
		</method>

		<method name="SetStandbyInMicroSeconds" description="Sets laser control pulse interval (in microseconds)">
			<param name="HalfPeriod" type="double" pass="in" description="Half Output period in microseconds" />
			<param name="PulseLength" type="double" pass="in" description="Pulse Length in microseconds" />
		</method>

		<method name="GetIPAddress" description="Returns the IP Address of the RTC Card. Fails if driver has not been initialized.">		
			<param name="IPAddress" type="string" pass="return" description="IP Address Value." />
		</method>		

		<method name="GetNetmask" description="Returns the Netmask of the RTC Card. Fails if driver has not been initialized.">		
			<param name="Netmask" type="string" pass="return" description="Netmask Value." />
		</method>		

		<method name="GetSerialNumber" description="Returns serial number of card">
			<param name="SerialNumber" type="uint32" pass="return" description="Returns serial number of board." />
		</method>
		
		<method name="GetLaserIndex" description="Returns the laser index assigned to the card. This is the laser index that will be used to map the toolpath laser data to the according device.">
			<param name="LaserIndex" type="uint32" pass="return" description="Returns laser index of board." />
		</method>

		<method name="SetLaserOrigin" description="Sets the laser origin in absolute coordinates. This origin will be used to relatively position lasers to one another.">
			<param name="OriginX" type="double" pass="in" description="Sets laser origin X coordinate of the laser in mm. All laser movements will be moved by that minus that amount in X." />
			<param name="OriginY" type="double" pass="in" description="Sets laser origin Y coordinate of the laser in mm. All laser movements will be moved by that minus that amount in X." />
		</method>

		<method name="GetLaserOrigin" description="Returns the laser origin in absolute coordinates. This origin will be used to relatively position lasers to one another.">
			<param name="OriginX" type="double" pass="out" description="Laser origin X coordinate of the laser in mm. All laser movements will be moved by that minus that amount in X." />
			<param name="OriginY" type="double" pass="out" description="Laser origin Y coordinate of the laser in mm. All laser movements will be moved by that minus that amount in X." />
		</method>

		<method name="SetLaserField" description="Sets the laser field limits in absolute coordinates.">
			<param name="MinX" type="double" pass="in" description="Sets minimum laser X coordinate in mm." />
			<param name="MinY" type="double" pass="in" description="Sets minimum laser Y coordinate in mm." />
			<param name="MaxX" type="double" pass="in" description="Sets maximum laser X coordinate in mm." />
			<param name="MaxY" type="double" pass="in" description="Sets maximum laser Y coordinate in mm." />
		</method>

		<method name="ResetLaserField" description="Resets the laser field to default values.">
		</method>
		
		<method name="EnableRangeChecking" description="Enables range checking of the laser field. A laser field MUST have been set before.">
		</method>

		<method name="DisableRangeChecking" description="Disables range checking of the laser field.">
		</method>

		<method name="GetLaserField" description="Returns the laser field limits in absolute coordinates.">
			<param name="MinX" type="double" pass="out" description="Sets minimum laser X coordinate in mm." />
			<param name="MinY" type="double" pass="out" description="Sets minimum laser Y coordinate in mm." />
			<param name="MaxX" type="double" pass="out" description="Sets maximum laser X coordinate in mm." />
			<param name="MaxY" type="double" pass="out" description="Sets maximum laser Y coordinate in mm." />
			<param name="HasLaserField" type="bool" pass="return" description="Returns true if a laser field has been set." />
		</method>

		<method name="SetStartList" description="Opens the list to write">
			<param name="ListIndex" type="uint32" pass="in" description="Index of List (1 or 2)." />
			<param name="Position" type="uint32" pass="in" description="Relative Position in List." />
		</method>

		<method name="SetEndOfList" description="Closes the currently open list">
		</method>
		
		<method name="ExecuteList" description="Executes the list">
			<param name="ListIndex" type="uint32" pass="in" description="Index of List (1 or 2)." />
			<param name="Position" type="uint32" pass="in" description="Relative Position in List." />
		</method>

		<method name="SetAutoChangePos" description="Sets the AutoChange Position of the currently not running list.">
			<param name="Position" type="uint32" pass="in" description="Relative Position in List." />
		</method>
		


		<method name="SetDelays" description="Sets the laser delays">
			<param name="MarkDelay" type="uint32" pass="in" description="Mark delay in microseconds (MUST be multiple of 10)" />
			<param name="JumpDelay" type="uint32" pass="in" description="Jump delay in microseconds (MUST be multiple of 10)" />
			<param name="PolygonDelay" type="uint32" pass="in" description="Polygon delay in microseconds (MUST be multiple of 10)" />
		</method>
		
		<method name="SetLaserDelaysInMicroseconds" description="Sets the laser delays (on the list)">
			<param name="LaserOnDelay" type="double" pass="in" description="LaserOn delay in microseconds" />
			<param name="LaserOffDelay" type="double" pass="in" description="LaserOff delay in microseconds" />
		</method>

		<method name="SetLaserDelaysInBits" description="Sets the laser delays (on the list)">
			<param name="LaserOnDelay" type="int32" pass="in" description="LaserOn delay in bits (1/64th microseconds)" />
			<param name="LaserOffDelay" type="int32" pass="in" description="LaserOff delay in bits (1/64th microseconds)" />
		</method>
		
		<method name="DrawPolyline" description="Writes a polyline into the open list">
			<param name="Points" type="structarray" class="Point2D" pass="in" description="Points of polyline to draw." />
			<param name="MarkSpeed" type="single" pass="in" description="Mark speed in mm/s" />
			<param name="JumpSpeed" type="single" pass="in" description="Jump speed in mm/s" />
			<param name="Power" type="single" pass="in" description="Laser power in percent" />
			<param name="ZValue" type="single" pass="in" description="Focus Z Value" />
		</method>
		
		<method name="DrawPolylineOIE" description="Writes a polyline into the open list with OIE Enabled.">
			<param name="Points" type="structarray" class="Point2D" pass="in" description="Points of polyline to draw." />
			<param name="MarkSpeed" type="single" pass="in" description="Mark speed in mm/s" />
			<param name="JumpSpeed" type="single" pass="in" description="Jump speed in mm/s" />
			<param name="Power" type="single" pass="in" description="Laser power in percent" />
			<param name="ZValue" type="single" pass="in" description="Focus Z Value" />
			<param name="OIEPIDControlIndex" type="uint32" pass="in" description="OIE PID Control Index. 0 disables PID Control, MUST be smaller or equal 63." />
		</method>

		<method name="DrawHatches" description="Writes a list of hatches into the open list">
			<param name="Hatches" type="structarray" class="Hatch2D" pass="in" description="Hatches to draw." />
			<param name="MarkSpeed" type="single" pass="in" description="Mark speed in mm/s" />
			<param name="JumpSpeed" type="single" pass="in" description="Jump speed in mm/s" />
			<param name="Power" type="single" pass="in" description="Laser power in percent" />
			<param name="ZValue" type="single" pass="in" description="Focus Z Value" />
		</method>
		
		<method name="AddSetPower" description="adds a power change to the open list. MUST NOT be used for PID control.">
			<param name="PowerInPercent" type="single" pass="in" description="Laser power in percent" />
		</method>

		<method name="AddSetPowerForPIDControl" description="adds a base power change to the open list. If using PID control, this base power will be used at starting power when the laser is turned on.">
			<param name="PowerInPercent" type="single" pass="in" description="Laser power in percent" />
		</method>
		
		<method name="AddSetJumpSpeed" description="adds a jump speed change to the open list">
			<param name="JumpSpeedInMMPerSecond" type="single" pass="in" description="Jump speed in mm/s" />
		</method>

		<method name="AddSetMarkSpeed" description="adds a mark speed change to the open list">
			<param name="MarkSpeedInMMPerSecond" type="single" pass="in" description="Mark speed in mm/s" />
		</method>

		<method name="AddJumpMovement" description="Adds a Jump movement to the open list">
			<param name="TargetX" type="double" pass="in" description="X Position." />
			<param name="TargetY" type="double" pass="in" description="Y Position." />
		</method>		

		<method name="AddMarkMovement" description="Adds a Mark movement to the open list">
			<param name="TargetX" type="double" pass="in" description="X Position." />
			<param name="TargetY" type="double" pass="in" description="Y Position." />
		</method>		

		<method name="AddTimedMarkMovement" description="Adds a timed Mark movement to the open list">
			<param name="TargetX" type="double" pass="in" description="X Position." />
			<param name="TargetY" type="double" pass="in" description="Y Position." />
			<param name="DurationInMicroseconds" type="double" pass="in" description="Duration of mark movement in Microseconds." />
		</method>		

		<method name="AddFreeVariable" description="Adds a free variable set to the open list">
			<param name="VariableNo" type="uint32" pass="in" description="Number of the variable (0-7)." />
			<param name="Value" type="uint32" pass="in" description="Value to set." />
		</method>	
		
		<method name="GetCurrentFreeVariable" description="Returns the currently set free variable.">
			<param name="VariableNo" type="uint32" pass="in" description="Number of the variable (0-7)." />
			<param name="Value" type="uint32" pass="return" description="Value to return." />
		</method>	

		<method name="GetTimeStamp" description="Returns the current RTC time stamp.">
			<param name="TimeStamp" type="uint32" pass="return" description="TimeStamp Value." />
		</method>	

		<method name="StopExecution" description="Stops the execution of the current list immediately.">
		</method>	

		<method name="DrawHatchesOIE" description="Writes a list of hatches into the open list with OIE Enabled.">
			<param name="Hatches" type="structarray" class="Hatch2D" pass="in" description="Hatches to draw." />
			<param name="MarkSpeed" type="single" pass="in" description="Mark speed in mm/s" />
			<param name="JumpSpeed" type="single" pass="in" description="Jump speed in mm/s" />
			<param name="Power" type="single" pass="in" description="Laser power in percent" />
			<param name="ZValue" type="single" pass="in" description="Focus Z Value" />
			<param name="OIEPIDControlIndex" type="uint32" pass="in" description="OIE PID Control Index. 0 disables PID Control, MUST be smaller or equal 63." />
		</method>

		<method name="AddLayerToList" description="Adds a layer instance to the current open list.">
			<param name="Layer" type="class" class="LibMCEnv:ToolpathLayer" pass="in" description="Instance of the layer to add to the lists." />
			<param name="FailIfNonAssignedDataExists" type="bool" pass="in" description="If true, fails if there is a laser index that does not match." />
		</method>

		<method name="WaitForEncoderX" description="Adds a command to wait for the encoder for reaching an X axis position. Fails if Mark on the Fly is not enabled.">
			<param name="PositionInMM" type="double" pass="in" description="Position Value to reach in mm." />
			<param name="InPositiveHalfPlane" type="bool" pass="in" description="If true, waits for the encoder reaching a value that is larger than PositionInMM. If false, waits for the encoder reaching a value that is smaller than PositionInMM." />
		</method>

		<method name="WaitForEncoderY" description="Adds a command to wait for the encoder for reaching an Y axis position. Fails if Mark on the Fly is not enabled.">
			<param name="PositionInMM" type="double" pass="in" description="Position Value to reach in mm." />
			<param name="InPositiveHalfPlane" type="bool" pass="in" description="If true, waits for the encoder reaching a value that is larger than PositionInMM. If false, waits for the encoder reaching a value that is smaller than PositionInMM." />
		</method>

		<method name="WaitForEncoderXSteps" description="Adds a command to wait for the encoder for reaching an X axis position. Fails if Mark on the Fly is not enabled.">
			<param name="PositionInSteps" type="int32" pass="in" description="Position Value to reach in steps." />
			<param name="InPositiveHalfPlane" type="bool" pass="in" description="If true, waits for the encoder reaching a value that is larger than PositionInMM. If false, waits for the encoder reaching a value that is smaller than PositionInMM." />
		</method>

		<method name="WaitForEncoderYSteps" description="Adds a command to wait for the encoder for reaching an Y axis position. Fails if Mark on the Fly is not enabled.">
			<param name="PositionInSteps" type="int32" pass="in" description="Position Value to reach in steps." />
			<param name="InPositiveHalfPlane" type="bool" pass="in" description="If true, waits for the encoder reaching a value that is larger than PositionInMM. If false, waits for the encoder reaching a value that is smaller than PositionInMM." />
		</method>

		<method name="AddCustomDelay" description="Adds a custom delay to the list">
			<param name="DelayInMicroseconds" type="uint32" pass="in" description="Custom delay value in microseconds (MUST be multiple of 10)" />
		</method>

		<method name="GetCorrectionFactor" description="Returns correction factor of Card Calibration (in bits per mm)">
			<param name="CorrectionFactor" type="double" pass="return" description="CorrectionFactor" />
		</method>
		
		<method name="GetStatus" description="Returns status of list execution">
			<param name="Busy" type="bool" pass="out" description="Execution is busy" />
			<param name="Position" type="uint32" pass="out" description="Returns current executed position" />
		</method>

		<method name="GetHeadStatus" description="Returns status of scan head">
			<param name="HeadNo" type="uint32" pass="in" description="Head Number" />
			<param name="PositionXisOK" type="bool" pass="out" description="Position X is ok" />
			<param name="PositionYisOK" type="bool" pass="out" description="Position Y is ok" />
			<param name="TemperatureisOK" type="bool" pass="out" description="Temperature is ok" />
			<param name="PowerisOK" type="bool" pass="out" description="Power is ok" />
		</method>

		<method name="GetStateValues" description="Returns status values of scan head">
			<param name="LaserIsOn" type="bool" pass="out" description="Laser is on" />
			<param name="PositionX" type="int32" pass="out" description="Current Position X in Units" />
			<param name="PositionY" type="int32" pass="out" description="Current Position Y in Units" />
			<param name="PositionZ" type="int32" pass="out" description="Current Position Z in Units" />
			<param name="CorrectedPositionX" type="int32" pass="out" description="Current Position X in Units" />
			<param name="CorrectedPositionY" type="int32" pass="out" description="Current Position Y in Units" />
			<param name="CorrectedPositionZ" type="int32" pass="out" description="Current Position Z in Units" />
			<param name="FocusShift" type="int32" pass="out" description="Current Focus Shift in Units" />
			<param name="MarkSpeed" type="int32" pass="out" description="Current Mark Speed in Units" />
		</method>

		<method name="GetInputPointer" description="returns current input list position">
			<param name="Position" type="uint32" pass="return" description="Returns current position of open list" />
		</method>

		<method name="GetRTCVersion" description="Returns version information of the RTC Card">
			<param name="RTCVersion" type="uint32" pass="out" description="RTC Card Version" />
			<param name="RTCType" type="uint32" pass="out" description="RTC Card Type" />
			<param name="DLLVersion" type="uint32" pass="out" description="RTC DLL Version" />
			<param name="HEXVersion" type="uint32" pass="out" description="RTC HEX Version" />
			<param name="BIOSVersion" type="uint32" pass="out" description="RTC BIOS Version" />
		</method>
		
		<method name="SetCommunicationTimeouts" description="Set RTC Ethernet communication timeouts">
			<param name="InitialTimeout" type="double" pass="in" description="Initial timeout in ms" />
			<param name="MaxTimeout" type="double" pass="in" description="Max timeout in ms" />
			<param name="Multiplier" type="double" pass="in" description="Multiplier" />
		</method>		
						
		<method name="GetCommunicationTimeouts" description="Get RTC Ethernet communication timeouts">
			<param name="InitialTimeout" type="double" pass="out" description="Initial timeout in ms" />
			<param name="MaxTimeout" type="double" pass="out" description="Max timeout in ms" />
			<param name="Multiplier" type="double" pass="out" description="Multiplier" />
		</method>
		
		<method name="InitializeForOIE" description="Initializes the RTC card for the open interface extension. MUST be called before the OIE is initialized.">
			<param name="SignalChannels" type="basicarray" class="uint32" pass="in" description="Array of signal channels. MUST NOT be empty" />
			<param name="OperationMode" type="enum" class="OIEOperationMode" pass="in" description="OIE Operation Mode" />			
		</method>

		<method name="SetLaserPinOut" description="Sets the laser pin outputs to a certain state. Control command, has immediate effect.">
			<param name="LaserOut1" type="bool" pass="in" description="Value for Laser Out Pin 1" />
			<param name="LaserOut2" type="bool" pass="in" description="Value for Laser Out Pin 2" />
		</method>

		<method name="GetLaserPinIn" description="Read the laser pin input values. Control command, has immediate effect.">
			<param name="LaserOut1" type="bool" pass="out" description="Value for Laser In Pin 1" />
			<param name="LaserOut2" type="bool" pass="out" description="Value for Laser In Pin 2" />
		</method>

		<method name="AddLaserPinOutToList" description="Adds the laser pin command to the current open list.">
			<param name="LaserOut1" type="bool" pass="in" description="Value for Laser Out Pin 1" />
			<param name="LaserOut2" type="bool" pass="in" description="Value for Laser Out Pin 2" />
		</method>
				
		<method name="EnableOIE" description="Writes an OIE enabling command block to the open list.">
		</method>

		<method name="DisableOIE" description="Writes an OIE disabling command block to the open list.">
		</method>
				
		<method name="StartOIEMeasurement" description="Writes an OIE measurement start command block to the open list. Same as StartOIEMeasurement with false as parameter.">
		</method>

		<method name="StartOIEMeasurementEx" description="Writes an OIE measurement start command block to the open list, with parameterized LaserOn Trigger">
			<param name="LaserOnTrigger" type="bool" pass="in" description="If true, only triggers a measurement, when the laser is on." />
		</method>

		<method name="StopOIEMeasurement" description="Writes an OIE measurement start command block to the open list.">
		</method>
		
		<method name="SetOIEPIDMode" description="Sets OIE PID Index.">
			<param name="OIEPIDIndex" type="uint32" pass="in" description="OIE PID Index. MUST be between 0 and 63. 0 means PID disabled." />
		</method>

		<method name="EnableOIEPIDControl" description="Enables OIE PID Control. Affects only subsequent layers that are drawn into lists.">
		</method>

		<method name="DisableOIEPIDControl" description="Disables OIE PID Control.">
		</method>

		<method name="ClearOIEMeasurementTags" description="Clears all stored OIE Measurement tags of the context. New Tag Indices will start from 0 again.">
		</method>

		<method name="EnableOIEMeasurementTagging" description="Enables OIE Measurement tagging.">
		</method>

		<method name="DisableOIEMeasurementTagging" description="Disables OIE Measurement tagging.">
		</method>

		<method name="MapOIEMeasurementTag" description="Maps an OIE Measurement tag back to the original scan parameters.">
			<param name="MeasurementTag" type="uint32" pass="in" description="Measurement Tag that has been sent to the OIE." />
			<param name="PartID" type="uint32" pass="out" description="ID of the part." />
			<param name="ProfileID" type="uint32" pass="out" description="ID of the profile." />
			<param name="SegmentID" type="uint32" pass="out" description="ID of the segment." />
			<param name="VectorID" type="uint32" pass="out" description="ID of the vector." />
		</method>

		<method name="DisableSkyWriting" description="Disable skywriting.">
		</method>

		<method name="EnableSkyWritingMode1" description="Enables skywriting on the list in mode 1. See Scanlab RTC Documentation for details.">
			<param name="Timelag" type="double" pass="in" description="Skywriting Timelag" />
			<param name="LaserOnShift" type="int64" pass="in" description="Skywriting Laser On Shift" />
			<param name="NPrev" type="int64" pass="in" description="Duration of pre-motion in ticks" />
			<param name="NPost" type="int64" pass="in" description="Duration of post-motion in ticks. " />
		</method>

		<method name="EnableSkyWritingMode2" description="Enables skywriting on the list in mode 2. See Scanlab RTC Documentation for details.">
			<param name="Timelag" type="double" pass="in" description="Skywriting Timelag" />
			<param name="LaserOnShift" type="int64" pass="in" description="Skywriting Laser On Shift" />
			<param name="NPrev" type="int64" pass="in" description="Duration of pre-motion in ticks" />
			<param name="NPost" type="int64" pass="in" description="Duration of post-motion in ticks. " />
		</method>

		<method name="EnableSkyWritingMode3" description="Enables skywriting on the list in mode 3. See Scanlab RTC Documentation for details.">
			<param name="Timelag" type="double" pass="in" description="Skywriting Timelag" />
			<param name="LaserOnShift" type="int64" pass="in" description="Skywriting Laser On Shift" />
			<param name="NPrev" type="int64" pass="in" description="Duration of pre-motion in ticks" />
			<param name="NPost" type="int64" pass="in" description="Duration of post-motion in ticks. " />
			<param name="Limit" type="double" pass="in" description="Skywriting Angle limit" />
		</method>

		<method name="EnableSkyWritingMode4" description="Enables skywriting on the list in mode 4. See Scanlab RTC Documentation for details.">
			<param name="Timelag" type="double" pass="in" description="Skywriting Timelag" />
			<param name="LaserOnShift" type="int64" pass="in" description="Skywriting Laser On Shift" />
			<param name="NPrev" type="int64" pass="in" description="Duration of pre-motion in ticks" />
			<param name="NPost" type="int64" pass="in" description="Duration of post-motion in ticks. " />
			<param name="Limit" type="double" pass="in" description="Skywriting Angle limit" />
		</method>
		
		<method name="SetTransformationAngle" description="Sets the transformation angle of the scan field.">
			<param name="AngleInDegrees" type="double" pass="in" description="Angle in Degrees" />
		</method>
		
		<method name="SetTransformationScale" description="Sets the transformation scale of the scan field.">
			<param name="ScaleFactor" type="double" pass="in" description="Scale Factor (1.0 is no scaling). Allowed value is -16 to 16." />
		</method>

		<method name="SetTransformationOffset" description="Sets the transformation offset of the scan field.">
			<param name="OffsetX" type="int32" pass="in" description="Offset in X (in bits)" />
			<param name="OffsetY" type="int32" pass="in" description="Offset in X (in bits)" />
		</method>

		<method name="SetTransformationMatrix" description="Sets the transformation matrix of the scan field.">
			<param name="M11" type="double" pass="in" description="Upper left field of the transformation matrix" />
			<param name="M12" type="double" pass="in" description="Upper right field of the transformation matrix" />
			<param name="M21" type="double" pass="in" description="Lower left field of the transformation matrix" />
			<param name="M22" type="double" pass="in" description="Lower right field of the transformation matrix" />
		</method>

		<method name="PrepareRecording" description="Prepares recording of position data of the RTC Card. This needs to be called before any list is started.">
		</method>

		<method name="EnableRecording" description="Enables recording of position data of the RTC Card. This is a list command.">
		</method>

		<method name="DisableRecording" description="Disables recording of position data of the RTC Card. This is a list command.">
		</method>

		<method name="ExecuteListWithRecording" description="Executes the list with recording the position data from the RTC card.">
			<param name="ListIndex" type="uint32" pass="in" description="Index of List (1 or 2)." />
			<param name="Position" type="uint32" pass="in" description="Relative Position in List." />
		</method>

		<method name="EnableTimelagCompensation" description="Enables timelag compensation.">
			<param name="TimeLagXYInMicroseconds" type="uint32" pass="in" description="Time lag of XY axes (in microseconds). MUST be a multiple of 10." />
			<param name="TimeLagZInMicroseconds" type="uint32" pass="in" description="Time lag of Z axis (in microseconds). MUST be a multiple of 10." />
		</method>

		<method name="DisableTimelagCompensation" description="Disables timelag compensation.">
		</method>
		
		<method name="EnableMarkOnTheFly2D" description="Enables mark on the fly 2D. This is a list command.">
			<param name="ScaleXInMMperEncoderStep" type="double" pass="in" description="Scale factor X in mm per encoder step" />
			<param name="ScaleYInMMperEncoderStep" type="double" pass="in" description="Scale factor Y in mm per encoder step" />
		</method>
		
		<method name="DisableMarkOnTheFly2D" description="Disable mark on the fly 2D. This is a list command.">
		</method>

		<method name="MarkOnTheFly2DIsEnabled" description="Returns if mark on the fly 2D has been enabled.">
			<param name="IsEnabled" type="bool" pass="return" description="Returns true if mark on the fly 2D is enabled." />
		</method>

		<method name="Get2DMarkOnTheFlyPosition" description="Returns 2D mark on the fly position.">
			<param name="PositionX" type="int32" pass="out" description="Mark on the fly position X" />
			<param name="PositionY" type="int32" pass="out" description="Mark on the fly position Y" />
		</method>
		
		<method name="CheckOnTheFlyError" description="Checks mark on the fly error.">
			<param name="FailIfError" type="bool" pass="in" description="If true, the call will fail in case of an error." />
			<param name="ErrorCode" type="uint32" pass="return" description="Bitfield corresponding to the get_marking_info call, as described in the RTC SDK Documentation." />
		</method>

		<method name="LaserPowerCalibrationIsEnabled" description="Returns if the laser power calibration table is non-empty.">
			<param name="CalibrationEnabled" type="bool" pass="return" description="Laser Calibration Is Enabled" />			
		</method>
		
		<method name="LaserPowerCalibrationIsLinear" description="Returns if the laser power calibration table has one entry.">
			<param name="CalibrationIsLinear" type="bool" pass="return" description="Laser Calibration Is Affine Linear" />			
		</method>

		<method name="ClearLaserPowerCalibration" description="Clears the laser power calibration table.">
		</method>

		<method name="GetLaserPowerCalibration" description="Returns the laser power calibration table. Fails if laser calibration is not enabled.">
			<param name="CalibrationPoints" type="structarray" class="LaserCalibrationPoint" pass="out" description="Laser Calibration Points" />			
		</method>
				
		<method name="SetLinearLaserPowerCalibration" description="Enables the laser power calibration with an affine linear tranformation.">
			<param name="PowerOffsetInPercent" type="double" pass="in" description="Additional offset of the Power value." />
			<param name="PowerOutputScaling" type="double" pass="in" description="Scaling factor of the laser output." />			
		</method>
		
		<method name="SetPiecewiseLinearLaserPowerCalibration" description="Enables the laser power calibration with multiple calibration point values. Table MUST NOT have negative power entries. Laser Power Output will be linear scaled with the given values within their respective intervals. Any laser power outside of the minimum or maximum Power values will be scaled according to the respective minimum or maximum scaling value.">
			<param name="CalibrationPoints" type="structarray" class="LaserCalibrationPoint" pass="in" description="Laser Calibration Points. Array will be sorted by Laser Power Keys. Array MUST NOT be empty. Array MUST NOT have duplicate entries (to an accuracy of 0.01 Percent)." />
		</method>
				
		<method name="EnableSpatialLaserPowerModulation" description="Enables a spatial laser power modulation via callback.">
			<param name="ModulationCallback" type="functiontype" class="SpatialPowerModulationCallback" pass="in" description="Callback to call for modulating the laser power."/>			
			<param name="UserData" type="pointer" pass="in" description="Userdata that is passed to the callback function"/>
		</method>

		<method name="DisablePowerModulation" description="Disables all power modulation functions.">
		</method>
		
		<method name="EnableLineSubdivision" description="If this function is enabled, all mark lines will be subdivided so that the maximum length is small than the threshold.">
			<param name="LengthThreshold" type="double" pass="in" description="Length threshold in mm." />			
		</method>
		
		<method name="DisableLineSubdivision" description="Disables the subdivision of mark lines.">
		</method>
		
		<method name="ReadMultiMCBSP" description="Reads a multi MCBSP register from the RTC Card. Should be used only for debugging purposes.">
			<param name="RegisterNo" type="uint32" pass="in" description="Number of the register to read." />
			<param name="RegisterContent" type="int32" pass="return" description="Value of the register." />
		</method>
		
		<method name="CreateUARTConnection" description="Creates a new UART Connection. Closes any other one that might be active.">
			<param name="DesiredBaudRate" type="uint32" pass="in" description="Desired baud rate. 160 Bd…12.8 MBd.  The other RS-232 interface parameters cannot be altered (data bits: 8, start bits: 1, stop bits: 1, parity: none)." />
			<param name="Connection" type="class" class="UARTConnection" pass="return" description="UART Connection instance." />
		</method>

		<method name="EnableScanAhead" description="Enables the Scanahead mode of the RTC card.">
			<param name="HeadNo" type="uint32" pass="in" description="Head Number" />
			<param name="TableNo" type="uint32" pass="in" description="Table Number" />		
		</method>
		
		<method name="DisableScanAhead" description="Disables the Scanahead mode of the RTC card.">
		</method>

		<method name="ActivateScanAheadAutoDelays" description="Activates the ScanAhead Auto Delays.">
		</method>

		<method name="DeactivateScanAheadAutoDelays" description="Deactivates the ScanAhead Auto Delays.">
		</method>

		<method name="ScanAheadAutoDelaysAreActivated" description="Returns if ScanAhead Auto Delays are activated.">
			<param name="Activated" type="bool" pass="return" description="Returns true if Auto Delays are activated." />
		</method>

		<method name="SetScanAheadLaserShiftsInMicroseconds" description="Enables the Scanahead mode of the RTC card.">
			<param name="LaserOnShiftInMicroSeconds" type="double" pass="in" description="Laser on shift in Microseconds. Will be rounded to 64th microseconds." />
			<param name="LaserOffShiftInMicroSeconds" type="double" pass="in" description="Laser off shift in Microseconds. Will be rounded to 64th microseconds." />
		</method>

		<method name="SetScanAheadLaserShiftsInUnits" description="Enables the Scanahead mode of the RTC card.">
			<param name="LaserOnShift" type="int32" pass="in" description="Laser on shift in Units, which are 1/64th of a Microsecond." />
			<param name="LaserOffShift" type="int32" pass="in" description="Laser on shift in Units, which are 1/64th of a Microsecond." />
		</method>
		
		<method name="SetScanAheadLineParameters" description="Controls the Scanahead Line parameters.">
			<param name="CornerScale" type="uint32" pass="in" description="Corner sharpness scale in Percent.. 100 percent means sharp corners. Values above 100 will be clipped to 100." />
			<param name="EndScale" type="uint32" pass="in" description="Line end sharpness scale in Percent.. 100 percent means straight line ends. Values above 100 will be clipped to 100." />
			<param name="AccelerationScale" type="uint32" pass="in" description="Fraction of active laser time (not path lenght) during acceleration in Percent.. 100 percent means sharp corners. Values above 100 will be clipped to 100." />
		</method>
		
	</class>

	
	<class name="RTCSelector" parent="Base" description="Selector of the RTC Controller">
		
		<method name="SearchCards" description="Searches Ethernet Cards">
			<param name="IP" type="string" pass="in" description="IP Network Address." />
			<param name="Netmask" type="string" pass="in" description="IP Netmask Address." />
			<param name="Timeout" type="uint32" pass="in" description="Time out in microseconds." />
			<param name="Count" type="uint32" pass="return" description="Returns how many ethernet cards have been found." />
		</method>
		
		<method name="SearchCardsByRange" description="Searches Ethernet Cards">
			<param name="StartIP" type="string" pass="in" description="IP Network Address." />
			<param name="EndIP" type="string" pass="in" description="IP Network Address." />
			<param name="Timeout" type="uint32" pass="in" description="Time out in microseconds." />
			<param name="Count" type="uint32" pass="return" description="Returns how many ethernet cards have been found." />
		</method>
		
		<method name="GetCardCount" description="Returns number of detected Cards">
			<param name="Count" type="uint32" pass="return" description="Returns how many cards have been found." />
		</method>

		<method name="GetEthernetCardCount" description="Returns number of found ethernet cards">
			<param name="Count" type="uint32" pass="return" description="Returns how many ethernet cards have been found." />
		</method>

		<method name="AcquireCard" description="Acquires a card and returns an RTCContext instance.">
			<param name="Number" type="uint32" pass="in" description="Number of Card (1-based). Must be between 1 and CardCount." />
			<param name="Instance" type="class" class="RTCContext" pass="return" description="New Context# instance" />
		</method>

		<method name="AcquireCardBySerial" description="Acquires a card and returns an RTCContext instance.">
			<param name="SerialNumber" type="uint32" pass="in" description="Desired Serial Number of card." />
			<param name="Instance" type="class" class="RTCContext" pass="return" description="New Context# instance" />
		</method>

		<method name="AcquireEthernetCard" description="Acquires an ethernet card and returns an RTCContext instance.">
			<param name="Number" type="uint32" pass="in" description="Number of Card (1-based). Must be between 1 and EthernetCardCount." />
			<param name="Instance" type="class" class="RTCContext" pass="return" description="New Context# instance" />
		</method>
		
		<method name="AcquireEthernetCardBySerial" description="Acquires an ethernet card and returns an RTCContext instance.">
			<param name="SerialNumber" type="uint32" pass="in" description="Desired Serial Number of card." />
			<param name="Instance" type="class" class="RTCContext" pass="return" description="New Context# instance" />
		</method>
				


	
	</class>


	<class name="Driver_ScanLab" parent="Driver" description="A LaserScanner Driver for a ScanLAB card.">

		<method name="LoadSDK" description="Initializes the ScanLab SDK.">
			<param name="ResourceName" type="string" pass="in" description="Resource name of Scanlab DLL" />
		</method>

		<method name="LoadCustomSDK" description="Initializes the ScanLab SDK from an external source.">
			<param name="ScanlabDLL" type="basicarray" class="uint8" pass="in" description="Byte array of Scanlab DLL" />
		</method>
		
		<method name="CreateRTCSelector" description="Creates and initializes a new RTC selector singleton. Should only be called once per Process.">
			<param name="Instance" type="class" class="RTCSelector" pass="return" description="New Selector instance" />
		</method>

		<method name="EnableJournaling" description="Enables journaling of the SDK. MUST be called before LoadSDK or LoadCustomSDK.">
		</method>

	</class>


	<class name="Driver_ScanLab_RTC6" parent="Driver_ScanLab" description="A LaserScanner Driver for a single laser ScanLAB RTC6 card.">

		<method name="SetToSimulationMode" description="Turns the driver into a simulation mode.">		
		</method>
		
		<method name="IsSimulationMode" description="Returns if the driver is in simulation mode.">		
			<param name="SimulationModeEnabled" type="bool" pass="return" description="Flag if driver is in simulation mode." />
		</method>		

		<method name="IsInitialized" description="Returns if the driver is initalized.">		
			<param name="IsInitialized" type="bool" pass="return" description="Flag if driver is initialized." />
		</method>		

		<method name="Initialise" description="Manually initializes the RTC6 Scanner Driver.">
			<param name="IP" type="string" pass="in" description="IP Network Address. Empty string for local card." />
			<param name="Netmask" type="string" pass="in" description="IP Netmask Address. Empty string for local card." />
			<param name="Timeout" type="uint32" pass="in" description="Time out in microseconds." />
			<param name="SerialNumber" type="uint32" pass="in" description="Desired Serial Number of card." />
		</method>

		<method name="InitialiseFromConfiguration" description="Initializes the RTC6 Scanner Driver from a configuration preset. Calls Initialise, LoadFirmware, SetCorrectionFile, ConfigureLaserMode and ConfigureDelays.">
			<param name="PresetName" type="string" pass="in" description="Name of the configuration preset." />
		</method>

		<method name="SetCommunicationTimeouts" description="Set RTC Ethernet communication timeouts">
			<param name="InitialTimeout" type="double" pass="in" description="Initial timeout in ms" />
			<param name="MaxTimeout" type="double" pass="in" description="Max timeout in ms" />
			<param name="Multiplier" type="double" pass="in" description="Multiplier" />
		</method>		

		<method name="GetIPAddress" description="Returns the IP Address of the RTC Card. Fails if driver has not been initialized.">		
			<param name="IPAddress" type="string" pass="return" description="IP Address Value." />
		</method>		

		<method name="GetNetmask" description="Returns the Netmask of the RTC Card. Fails if driver has not been initialized.">		
			<param name="Netmask" type="string" pass="return" description="Netmask Value." />
		</method>		

		<method name="GetSerialNumber" description="Returns the Serial Number of the RTC Card. Fails if driver has not been initialized.">		
			<param name="SerialNumber" type="uint32" pass="return" description="Serial Number of card." />
		</method>		

		<method name="GetContext" description="Returns the RTC Context Instance. Fails if it card has not been initialised.">
			<param name="ContextInstance" type="class" class="RTCContext" pass="return" description="RTC Context Instance." />
		</method>
				
		<method name="GetSelector" description="Returns the RTC Selector Instance. Fails if it card has not been initialised.">
			<param name="SelectorInstance" type="class" class="RTCSelector" pass="return" description="RTC Selector Instance." />
		</method>

		<method name="LoadFirmware" description="Loads the firmware from the driver resources.">
			<param name="FirmwareResource" type="string" pass="in" description="resource name of the firmware program file." />
			<param name="FPGAResource" type="string" pass="in" description="resource name of the firmware FPGA file." />
			<param name="AuxiliaryResource" type="string" pass="in" description="resource name of the binary auxiliary file." />
		</method>		

		<method name="LoadCustomFirmware" description="Loads the firmware from custom resources.">
			<param name="FirmwareData" type="basicarray" class="uint8" pass="in" description="byte array of the firmware program file." />
			<param name="FPGAData" type="basicarray" class="uint8" pass="in" description="byte array of the firmware FPGA file." />
			<param name="AuxiliaryData" type="basicarray" class="uint8" pass="in" description="byte array of the binary auxiliary file." />
		</method>		
		
		<method name="SetCorrectionFile" description="Sets the correction file stream.">
			<param name="CorrectionFile" type="basicarray" class="uint8" pass="in" description="binary data of the correction file." />
			<param name="TableNumber" type="uint32" pass="in" description="Correction table index of card (1..8)" />
			<param name="Dimension" type="uint32" pass="in" description="Is it a 2D or 3D correction file." />
			<param name="TableNumberHeadA" type="uint32" pass="in" description="Table number of Head A." />
			<param name="TableNumberHeadB" type="uint32" pass="in" description="Table number of Head B." />
		</method>		

		<method name="ConfigureLaserMode" description="Configures the laser mode. MUST be called before any exposure.">
			<param name="LaserMode" type="enum" class="LaserMode" pass="in" description="Laser Mode Enum" />
			<param name="LaserPort" type="enum" class="LaserPort" pass="in" description="Laser Port Enum" />
			<param name="MaxLaserPower" type="double" pass="in" description="Maximum laser power." />
			<param name="FinishLaserPulseAfterOn" type="bool" pass="in" description="Finish laser pulse after LaserOn" />
			<param name="PhaseShiftOfLaserSignal" type="bool" pass="in" description="180 degree phase shift of Laser signal" />
			<param name="LaserOnSignalLowActive" type="bool" pass="in" description="Set Laser On Signal Low Active" />
			<param name="LaserHalfSignalsLowActive" type="bool" pass="in" description="Set Laser Half Signal Low Active" />
			<param name="SetDigitalInOneHighActive" type="bool" pass="in" description="Set Digital In 1 high Active" />
			<param name="OutputSynchronizationActive" type="bool" pass="in" description="Output synchronization active" />
		</method>

		<method name="ConfigureDelays" description="Configures the default laser and scanner delays. ATTENTION: Will create and overwrite execution list 1!">
			<param name="LaserOnDelay" type="double" pass="in" description="Laser On Delay in Microseconds" />
			<param name="LaserOffDelay" type="double" pass="in" description="Laser Off Delay in Microseconds" />
			<param name="MarkDelay" type="double" pass="in" description="Mark delay in microseconds (will be rounded to a multiple of 10)" />
			<param name="JumpDelay" type="double" pass="in" description="Jump delay in microseconds (will be rounded to a multiple of 10)" />
			<param name="PolygonDelay" type="double" pass="in" description="Polygon delay in microseconds (will be rounded to a multiple of 10)" />		
		</method>

		<method name="SetOIERecordingMode" description="Sets the recording mode for using the Open Interface extension. Will be taken into account by DrawLayer. Default is No Recording.">
			<param name="RecordingMode" type="enum" class="OIERecordingMode" pass="in" description="Recording mode enum" />
		</method>

		<method name="GetOIERecordingMode" description="Returns the recording mode for using the Open Interface extension, taking into account by DrawLayer. Default is No Recording.">
			<param name="RecordingMode" type="enum" class="OIERecordingMode" pass="return" description="Recording mode enum" />
		</method>

		<method name="EnableAttributeFilter" description="Enables filtering of the segments by segment attributes. A segment will only be drawn if the given integer attribute has the given value.">
			<param name="NameSpace" type="string" pass="in" description="Namespace of Attribute to filter for." />
			<param name="AttributeName" type="string" pass="in" description="Name of Attribute to filter for." />
			<param name="AttributeValue" type="int64" pass="in" description="Attribute Value to filter for." />
		</method>

		<method name="DisableAttributeFilter" description="Disables filtering of the segments by segment attributes.">
		</method>

		<method name="DrawLayer" description="Draws a layer of a build stream. Blocks until the layer is drawn.">
			<param name="StreamUUID" type="string" pass="in" description="UUID of the build stream. Must have been loaded in memory by the system." />
			<param name="LayerIndex" type="uint32" pass="in" description="Layer index of the build file." />
		</method>
						
		<method name="GetCommunicationTimeouts" description="Get RTC Ethernet communication timeouts">
			<param name="InitialTimeout" type="double" pass="out" description="Initial timeout in ms" />
			<param name="MaxTimeout" type="double" pass="out" description="Max timeout in ms" />
			<param name="Multiplier" type="double" pass="out" description="Multiplier" />
		</method>
						
		<method name="EnableTimelagCompensation" description="Enables timelag compensation.">
			<param name="TimeLagXYInMicroseconds" type="uint32" pass="in" description="Time lag of XY axes (in microseconds). MUST be a multiple of 10." />
			<param name="TimeLagZInMicroseconds" type="uint32" pass="in" description="Time lag of Z axis (in microseconds). MUST be a multiple of 10." />
		</method>

		<method name="DisableTimelagCompensation" description="Disables timelag compensation.">
		</method>
		
	</class>




	<class name="Driver_ScanLab_RTC6xN" parent="Driver_ScanLab" description="A LaserScanner Driver for multiple synchronized ScanLAB RTC6 cards.">

		<method name="SetToSimulationMode" description="Turns the driver into a simulation mode.">		
		</method>
		
		<method name="IsSimulationMode" description="Returns if the driver is in simulation mode.">		
			<param name="SimulationModeEnabled" type="bool" pass="return" description="Flag if driver is in simulation mode." />
		</method>		

		<method name="IsInitialized" description="Returns if all the scanners of the driver are initalized.">		
			<param name="IsInitialized" type="bool" pass="return" description="Flag if driver is initialized." />
		</method>		

		<method name="ScannerIsInitialized" description="Returns if a specific scanners of the driver are initalized.">		
			<param name="ScannerIndex" type="uint32" pass="in" description="Index of the scanner (0-based). MUST be smaller than ScannerCount" />
			<param name="IsInitialized" type="bool" pass="return" description="Flag if scanner is initialized." />
		</method>		

		<method name="GetScannerCount" description="Returns if number of scanners.">		
			<param name="NumberOfScanners" type="uint32" pass="return" description="Number of scanners supported by this driver." />
		</method>		

		<method name="InitialiseScanner" description="Initializes one of the RTC6 Scanner Drivers.">
			<param name="ScannerIndex" type="uint32" pass="in" description="Index of the scanner (0-based). MUST be smaller than ScannerCount" />
			<param name="IP" type="string" pass="in" description="IP Network Address. Empty string for local card." />
			<param name="Netmask" type="string" pass="in" description="IP Netmask Address. Empty string for local card." />
			<param name="Timeout" type="uint32" pass="in" description="Time out in microseconds." />
			<param name="SerialNumber" type="uint32" pass="in" description="Desired Serial Number of card." />
			<param name="LaserIndex" type="uint32" pass="in" description="Associated Laser Index from the toolpath data. 1-based, MUST NOT be 0. Each Scanner MUST own a unique laser index." />
		</method>

		<method name="InitialiseScannerFromConfiguration" description="Initializes the RTC6 Scanner Driver from a configuration preset. Calls Initialise, LoadFirmware, SetCorrectionFile, ConfigureLaserMode and ConfigureDelays.">
			<param name="ScannerIndex" type="uint32" pass="in" description="Index of the scanner (0-based). MUST be smaller than ScannerCount" />
			<param name="PresetName" type="string" pass="in" description="Name of the configuration preset." />
		</method>

		<method name="GetIPAddress" description="Returns the IP Address of the RTC Card. Fails if driver has not been initialized.">		
			<param name="ScannerIndex" type="uint32" pass="in" description="Index of the scanner (0-based). MUST be smaller than ScannerCount" />
			<param name="IPAddress" type="string" pass="return" description="IP Address Value." />
		</method>		

		<method name="GetNetmask" description="Returns the Netmask of the RTC Card. Fails if driver has not been initialized.">		
			<param name="ScannerIndex" type="uint32" pass="in" description="Index of the scanner (0-based). MUST be smaller than ScannerCount" />
			<param name="Netmask" type="string" pass="return" description="Netmask Value." />
		</method>		

		<method name="GetSerialNumber" description="Returns the Serial Number of the RTC Card. Fails if driver has not been initialized.">		
			<param name="ScannerIndex" type="uint32" pass="in" description="Index of the scanner (0-based). MUST be smaller than ScannerCount" />
			<param name="SerialNumber" type="uint32" pass="return" description="Serial Number of card." />
		</method>		
		
		<method name="GetLaserIndex" description="Returns associated Laser Index from the toolpath data.">		
			<param name="ScannerIndex" type="uint32" pass="in" description="Index of the scanner (0-based). MUST be smaller than ScannerCount" />
			<param name="LaserIndex" type="uint32" pass="return" description="Associated Laser Index from the toolpath data." />
		</method>		

		<method name="GetSelector" description="Returns the RTC Selector Instance. Fails if it card has not been initialised.">
			<param name="SelectorInstance" type="class" class="RTCSelector" pass="return" description="RTC Selector Instance." />
		</method>

		<method name="GetContext" description="Returns the RTC Context Instance. Fails if it card has not been initialised.">
			<param name="ScannerIndex" type="uint32" pass="in" description="Index of the scanner (0-based). MUST be smaller than ScannerCount" />
			<param name="ContextInstance" type="class" class="RTCContext" pass="return" description="RTC Context Instance." />
		</method>
				
		<method name="LoadFirmware" description="Loads the firmware from the driver resources.">
			<param name="ScannerIndex" type="uint32" pass="in" description="Index of the scanner (0-based). MUST be smaller than ScannerCount" />
			<param name="FirmwareResource" type="string" pass="in" description="resource name of the firmware program file." />
			<param name="FPGAResource" type="string" pass="in" description="resource name of the firmware FPGA file." />
			<param name="AuxiliaryResource" type="string" pass="in" description="resource name of the binary auxiliary file." />
		</method>		

		<method name="LoadCustomFirmware" description="Loads the firmware from custom resources.">
			<param name="ScannerIndex" type="uint32" pass="in" description="Index of the scanner (0-based). MUST be smaller than ScannerCount" />
			<param name="FirmwareData" type="basicarray" class="uint8" pass="in" description="byte array of the firmware program file." />
			<param name="FPGAData" type="basicarray" class="uint8" pass="in" description="byte array of the firmware FPGA file." />
			<param name="AuxiliaryData" type="basicarray" class="uint8" pass="in" description="byte array of the binary auxiliary file." />
		</method>		
		
		<method name="SetCorrectionFile" description="Sets the correction file stream.">
			<param name="ScannerIndex" type="uint32" pass="in" description="Index of the scanner (0-based). MUST be smaller than ScannerCount" />
			<param name="CorrectionFile" type="basicarray" class="uint8" pass="in" description="binary data of the correction file." />
			<param name="TableNumber" type="uint32" pass="in" description="Correction table index of card (1..8)" />
			<param name="Dimension" type="uint32" pass="in" description="Is it a 2D or 3D correction file." />
			<param name="TableNumberHeadA" type="uint32" pass="in" description="Table number of Head A." />
			<param name="TableNumberHeadB" type="uint32" pass="in" description="Table number of Head B." />
		</method>		

		<method name="ConfigureLaserMode" description="Configures the laser mode.">
			<param name="ScannerIndex" type="uint32" pass="in" description="Index of the scanner (0-based). MUST be smaller than ScannerCount" />
			<param name="LaserMode" type="enum" class="LaserMode" pass="in" description="Laser Mode Enum" />
			<param name="LaserPort" type="enum" class="LaserPort" pass="in" description="Laser Port Enum" />
			<param name="MaxLaserPower" type="double" pass="in" description="Maximum laser power." />
			<param name="FinishLaserPulseAfterOn" type="bool" pass="in" description="Finish laser pulse after LaserOn" />
			<param name="PhaseShiftOfLaserSignal" type="bool" pass="in" description="180 degree phase shift of Laser signal" />
			<param name="LaserOnSignalLowActive" type="bool" pass="in" description="Set Laser On Signal Low Active" />
			<param name="LaserHalfSignalsLowActive" type="bool" pass="in" description="Set Laser Half Signal Low Active" />
			<param name="SetDigitalInOneHighActive" type="bool" pass="in" description="Set Digital In 1 high Active" />
			<param name="OutputSynchronizationActive" type="bool" pass="in" description="Output synchronization active" />
		</method>

		<method name="ConfigureDelays" description="Configures the default laser and scanner delays. ATTENTION: Will create and overwrite execution list 1!">
			<param name="ScannerIndex" type="uint32" pass="in" description="Index of the scanner (0-based). MUST be smaller than ScannerCount" />
			<param name="LaserOnDelay" type="double" pass="in" description="Laser On Delay in Microseconds" />
			<param name="LaserOffDelay" type="double" pass="in" description="Laser Off Delay in Microseconds" />
			<param name="MarkDelay" type="double" pass="in" description="Mark delay in microseconds (will be rounded to a multiple of 10)" />
			<param name="JumpDelay" type="double" pass="in" description="Jump delay in microseconds (will be rounded to a multiple of 10)" />
			<param name="PolygonDelay" type="double" pass="in" description="Polygon delay in microseconds (will be rounded to a multiple of 10)" />		
		</method>

		<method name="SetOIERecordingMode" description="Sets the recording mode for using the Open Interface extension. Will be taken into account by DrawLayer. Default is No Recording.">
			<param name="RecordingMode" type="enum" class="OIERecordingMode" pass="in" description="Recording mode enum" />
		</method>

		<method name="GetOIERecordingMode" description="Returns the recording mode for using the Open Interface extension, taking into account by DrawLayer. Default is No Recording.">
			<param name="RecordingMode" type="enum" class="OIERecordingMode" pass="return" description="Recording mode enum" />
		</method>

		<method name="EnableAttributeFilter" description="Enables filtering of the segments by segment attributes. A segment will only be drawn if the given integer attribute has the given value.">
			<param name="NameSpace" type="string" pass="in" description="Namespace of Attribute to filter for." />
			<param name="AttributeName" type="string" pass="in" description="Name of Attribute to filter for." />
			<param name="AttributeValue" type="int64" pass="in" description="Attribute Value to filter for." />
		</method>

		<method name="DisableAttributeFilter" description="Disables filtering of the segments by segment attributes.">
		</method>

		<method name="DrawLayer" description="Draws a layer of a build stream on List 1. Blocks until the layer is drawn. Laser Indices are automatically assigned. Will fail if ">
			<param name="StreamUUID" type="string" pass="in" description="UUID of the build stream. Must have been loaded in memory by the system." />
			<param name="LayerIndex" type="uint32" pass="in" description="Layer index of the build file." />
			<param name="FailIfNonAssignedDataExists" type="bool" pass="in" description="If true, the call will fail in case a layer contains data that is not assigned to any defined scanner card." />
		</method>

		<method name="SetCommunicationTimeouts" description="Set RTC Ethernet communication timeouts">
			<param name="ScannerIndex" type="uint32" pass="in" description="Index of the scanner (0-based). MUST be smaller than ScannerCount" />
			<param name="InitialTimeout" type="double" pass="in" description="Initial timeout in ms" />
			<param name="MaxTimeout" type="double" pass="in" description="Max timeout in ms" />
			<param name="Multiplier" type="double" pass="in" description="Multiplier" />
		</method>		
						
		<method name="GetCommunicationTimeouts" description="Get RTC Ethernet communication timeouts">
			<param name="ScannerIndex" type="uint32" pass="in" description="Index of the scanner (0-based). MUST be smaller than ScannerCount" />
			<param name="InitialTimeout" type="double" pass="out" description="Initial timeout in ms" />
			<param name="MaxTimeout" type="double" pass="out" description="Max timeout in ms" />
			<param name="Multiplier" type="double" pass="out" description="Multiplier" />
		</method>
						
		<method name="EnableTimelagCompensation" description="Enables timelag compensation.">
			<param name="ScannerIndex" type="uint32" pass="in" description="Index of the scanner (0-based). MUST be smaller than ScannerCount" />
			<param name="TimeLagXYInMicroseconds" type="uint32" pass="in" description="Time lag of XY axes (in microseconds). MUST be a multiple of 10." />
			<param name="TimeLagZInMicroseconds" type="uint32" pass="in" description="Time lag of Z axis (in microseconds). MUST be a multiple of 10." />
		</method>

		<method name="DisableTimelagCompensation" description="Disables timelag compensation.">
			<param name="ScannerIndex" type="uint32" pass="in" description="Index of the scanner (0-based). MUST be smaller than ScannerCount" />
		</method>

	</class>


<!--

End of Custom implementation

-->

		
	<global baseclassname="Base" stringoutclassname="Base" releasemethod="ReleaseInstance" acquiremethod="AcquireInstance" versionmethod="GetVersion" errormethod="GetLastError" injectionmethod="InjectComponent" symbollookupmethod="GetSymbolLookupMethod">
		
		<method name="GetVersion" description = "retrieves the binary version of this library.">
			<param name="Major" type="uint32" pass="out" description="returns the major version of this library" />
			<param name="Minor" type="uint32" pass="out" description="returns the minor version of this library" />
			<param name="Micro" type="uint32" pass="out" description="returns the micro version of this library" />
		</method>
		<method name="GetLastError" description="Returns the last error recorded on this object">
			<param name="Instance" type="class" class="Base" pass="in" description="Instance Handle" />
			<param name="ErrorMessage" type="string" pass="out" description="Message of the last error" />
			<param name="HasError" type="bool" pass="return" description="Is there a last error to query" />
		</method>
		<method name="ReleaseInstance" description="Releases shared ownership of an Instance">
			<param name="Instance" type="class" class="Base" pass="in" description="Instance Handle" />
		</method>
		<method name="AcquireInstance" description="Acquires shared ownership of an Instance">
			<param name="Instance" type="class" class="Base" pass="in" description="Instance Handle" />
		</method>
		<method name="InjectComponent" description="Injects an imported component for usage within this component">
			<param name="NameSpace" type="string" pass="in" description="NameSpace of the injected component" />
			<param name="SymbolAddressMethod" type="pointer" pass="in" description="Address of the SymbolAddressMethod of the injected component" />
		</method>		
		<method name="GetSymbolLookupMethod" description="Returns the address of the SymbolLookupMethod">
			<param name="SymbolLookupMethod" type="pointer" pass="return" description="Address of the SymbolAddressMethod" />
		</method>				
		<method name="CreateDriver" description="Creates a driver instance with a specific name.">
			<param name="Name" type="string" pass="in" description="Name of driver to be created." />
			<param name="Type" type="string" pass="in" description="Type of driver to be created." />
			<param name="DriverEnvironment" type="class" class="LibMCEnv:DriverEnvironment" pass="in" description="Environment of this driver." />
			<param name="Instance" type="optionalclass" class="Driver" pass="return" description="New Driver instance" />
		</method>
		
	</global>
	
	
</component>

