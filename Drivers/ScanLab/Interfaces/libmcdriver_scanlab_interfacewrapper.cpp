/*++

Copyright (C) 2020 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.8.0-develop.

Abstract: This is an autogenerated C++ implementation file in order to allow easy
development of MC Driver ScanLab RTC. The functions in this file need to be implemented. It needs to be generated only once.

Interface version: 2.0.0

*/

#include "libmcdriver_scanlab_abi.hpp"
#include "libmcdriver_scanlab_interfaces.hpp"
#include "libmcdriver_scanlab_interfaceexception.hpp"

#include <map>

using namespace LibMCDriver_ScanLab::Impl;

LibMCDriver_ScanLabResult handleLibMCDriver_ScanLabException(IBase * pIBaseClass, ELibMCDriver_ScanLabInterfaceException & Exception)
{
	LibMCDriver_ScanLabResult errorCode = Exception.getErrorCode();

	if (pIBaseClass != nullptr)
		pIBaseClass->RegisterErrorMessage(Exception.what());

	return errorCode;
}

LibMCDriver_ScanLabResult handleStdException(IBase * pIBaseClass, std::exception & Exception)
{
	LibMCDriver_ScanLabResult errorCode = LIBMCDRIVER_SCANLAB_ERROR_GENERICEXCEPTION;

	if (pIBaseClass != nullptr)
		pIBaseClass->RegisterErrorMessage(Exception.what());

	return errorCode;
}

LibMCDriver_ScanLabResult handleUnhandledException(IBase * pIBaseClass)
{
	LibMCDriver_ScanLabResult errorCode = LIBMCDRIVER_SCANLAB_ERROR_GENERICEXCEPTION;

	if (pIBaseClass != nullptr)
		pIBaseClass->RegisterErrorMessage("Unhandled Exception");

	return errorCode;
}



/*************************************************************************************************************************
 Class implementation for Base
**************************************************************************************************************************/

/*************************************************************************************************************************
 Class implementation for Driver
**************************************************************************************************************************/
LibMCDriver_ScanLabResult libmcdriver_scanlab_driver_configure(LibMCDriver_ScanLab_Driver pDriver, const char * pConfigurationString)
{
	IBase* pIBaseClass = (IBase *)pDriver;

	try {
		if (pConfigurationString == nullptr)
			throw ELibMCDriver_ScanLabInterfaceException (LIBMCDRIVER_SCANLAB_ERROR_INVALIDPARAM);
		std::string sConfigurationString(pConfigurationString);
		IDriver* pIDriver = dynamic_cast<IDriver*>(pIBaseClass);
		if (!pIDriver)
			throw ELibMCDriver_ScanLabInterfaceException(LIBMCDRIVER_SCANLAB_ERROR_INVALIDCAST);
		
		pIDriver->Configure(sConfigurationString);

		return LIBMCDRIVER_SCANLAB_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabResult libmcdriver_scanlab_driver_getname(LibMCDriver_ScanLab_Driver pDriver, const LibMCDriver_ScanLab_uint32 nNameBufferSize, LibMCDriver_ScanLab_uint32* pNameNeededChars, char * pNameBuffer)
{
	IBase* pIBaseClass = (IBase *)pDriver;

	try {
		if ( (!pNameBuffer) && !(pNameNeededChars) )
			throw ELibMCDriver_ScanLabInterfaceException (LIBMCDRIVER_SCANLAB_ERROR_INVALIDPARAM);
		std::string sName("");
		IDriver* pIDriver = dynamic_cast<IDriver*>(pIBaseClass);
		if (!pIDriver)
			throw ELibMCDriver_ScanLabInterfaceException(LIBMCDRIVER_SCANLAB_ERROR_INVALIDCAST);
		
		bool isCacheCall = (pNameBuffer == nullptr);
		if (isCacheCall) {
			sName = pIDriver->GetName();

			pIDriver->_setCache (new ParameterCache_1<std::string> (sName));
		}
		else {
			auto cache = dynamic_cast<ParameterCache_1<std::string>*> (pIDriver->_getCache ());
			if (cache == nullptr)
				throw ELibMCDriver_ScanLabInterfaceException(LIBMCDRIVER_SCANLAB_ERROR_INVALIDCAST);
			cache->retrieveData (sName);
			pIDriver->_setCache (nullptr);
		}
		
		if (pNameNeededChars)
			*pNameNeededChars = (LibMCDriver_ScanLab_uint32) (sName.size()+1);
		if (pNameBuffer) {
			if (sName.size() >= nNameBufferSize)
				throw ELibMCDriver_ScanLabInterfaceException (LIBMCDRIVER_SCANLAB_ERROR_BUFFERTOOSMALL);
			for (size_t iName = 0; iName < sName.size(); iName++)
				pNameBuffer[iName] = sName[iName];
			pNameBuffer[sName.size()] = 0;
		}
		return LIBMCDRIVER_SCANLAB_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabResult libmcdriver_scanlab_driver_gettype(LibMCDriver_ScanLab_Driver pDriver, const LibMCDriver_ScanLab_uint32 nTypeBufferSize, LibMCDriver_ScanLab_uint32* pTypeNeededChars, char * pTypeBuffer)
{
	IBase* pIBaseClass = (IBase *)pDriver;

	try {
		if ( (!pTypeBuffer) && !(pTypeNeededChars) )
			throw ELibMCDriver_ScanLabInterfaceException (LIBMCDRIVER_SCANLAB_ERROR_INVALIDPARAM);
		std::string sType("");
		IDriver* pIDriver = dynamic_cast<IDriver*>(pIBaseClass);
		if (!pIDriver)
			throw ELibMCDriver_ScanLabInterfaceException(LIBMCDRIVER_SCANLAB_ERROR_INVALIDCAST);
		
		bool isCacheCall = (pTypeBuffer == nullptr);
		if (isCacheCall) {
			sType = pIDriver->GetType();

			pIDriver->_setCache (new ParameterCache_1<std::string> (sType));
		}
		else {
			auto cache = dynamic_cast<ParameterCache_1<std::string>*> (pIDriver->_getCache ());
			if (cache == nullptr)
				throw ELibMCDriver_ScanLabInterfaceException(LIBMCDRIVER_SCANLAB_ERROR_INVALIDCAST);
			cache->retrieveData (sType);
			pIDriver->_setCache (nullptr);
		}
		
		if (pTypeNeededChars)
			*pTypeNeededChars = (LibMCDriver_ScanLab_uint32) (sType.size()+1);
		if (pTypeBuffer) {
			if (sType.size() >= nTypeBufferSize)
				throw ELibMCDriver_ScanLabInterfaceException (LIBMCDRIVER_SCANLAB_ERROR_BUFFERTOOSMALL);
			for (size_t iType = 0; iType < sType.size(); iType++)
				pTypeBuffer[iType] = sType[iType];
			pTypeBuffer[sType.size()] = 0;
		}
		return LIBMCDRIVER_SCANLAB_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabResult libmcdriver_scanlab_driver_getversion(LibMCDriver_ScanLab_Driver pDriver, LibMCDriver_ScanLab_uint32 * pMajor, LibMCDriver_ScanLab_uint32 * pMinor, LibMCDriver_ScanLab_uint32 * pMicro, const LibMCDriver_ScanLab_uint32 nBuildBufferSize, LibMCDriver_ScanLab_uint32* pBuildNeededChars, char * pBuildBuffer)
{
	IBase* pIBaseClass = (IBase *)pDriver;

	try {
		if (!pMajor)
			throw ELibMCDriver_ScanLabInterfaceException (LIBMCDRIVER_SCANLAB_ERROR_INVALIDPARAM);
		if (!pMinor)
			throw ELibMCDriver_ScanLabInterfaceException (LIBMCDRIVER_SCANLAB_ERROR_INVALIDPARAM);
		if (!pMicro)
			throw ELibMCDriver_ScanLabInterfaceException (LIBMCDRIVER_SCANLAB_ERROR_INVALIDPARAM);
		if ( (!pBuildBuffer) && !(pBuildNeededChars) )
			throw ELibMCDriver_ScanLabInterfaceException (LIBMCDRIVER_SCANLAB_ERROR_INVALIDPARAM);
		std::string sBuild("");
		IDriver* pIDriver = dynamic_cast<IDriver*>(pIBaseClass);
		if (!pIDriver)
			throw ELibMCDriver_ScanLabInterfaceException(LIBMCDRIVER_SCANLAB_ERROR_INVALIDCAST);
		
		bool isCacheCall = (pBuildBuffer == nullptr);
		if (isCacheCall) {
			pIDriver->GetVersion(*pMajor, *pMinor, *pMicro, sBuild);

			pIDriver->_setCache (new ParameterCache_4<LibMCDriver_ScanLab_uint32, LibMCDriver_ScanLab_uint32, LibMCDriver_ScanLab_uint32, std::string> (*pMajor, *pMinor, *pMicro, sBuild));
		}
		else {
			auto cache = dynamic_cast<ParameterCache_4<LibMCDriver_ScanLab_uint32, LibMCDriver_ScanLab_uint32, LibMCDriver_ScanLab_uint32, std::string>*> (pIDriver->_getCache ());
			if (cache == nullptr)
				throw ELibMCDriver_ScanLabInterfaceException(LIBMCDRIVER_SCANLAB_ERROR_INVALIDCAST);
			cache->retrieveData (*pMajor, *pMinor, *pMicro, sBuild);
			pIDriver->_setCache (nullptr);
		}
		
		if (pBuildNeededChars)
			*pBuildNeededChars = (LibMCDriver_ScanLab_uint32) (sBuild.size()+1);
		if (pBuildBuffer) {
			if (sBuild.size() >= nBuildBufferSize)
				throw ELibMCDriver_ScanLabInterfaceException (LIBMCDRIVER_SCANLAB_ERROR_BUFFERTOOSMALL);
			for (size_t iBuild = 0; iBuild < sBuild.size(); iBuild++)
				pBuildBuffer[iBuild] = sBuild[iBuild];
			pBuildBuffer[sBuild.size()] = 0;
		}
		return LIBMCDRIVER_SCANLAB_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabResult libmcdriver_scanlab_driver_queryparameters(LibMCDriver_ScanLab_Driver pDriver)
{
	IBase* pIBaseClass = (IBase *)pDriver;

	try {
		IDriver* pIDriver = dynamic_cast<IDriver*>(pIBaseClass);
		if (!pIDriver)
			throw ELibMCDriver_ScanLabInterfaceException(LIBMCDRIVER_SCANLAB_ERROR_INVALIDCAST);
		
		pIDriver->QueryParameters();

		return LIBMCDRIVER_SCANLAB_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabResult libmcdriver_scanlab_driver_queryparametersex(LibMCDriver_ScanLab_Driver pDriver, LibMCEnv_DriverStatusUpdateSession pDriverUpdateInstance)
{
	IBase* pIBaseClass = (IBase *)pDriver;

	try {
		LibMCEnv::PDriverStatusUpdateSession pIDriverUpdateInstance = std::make_shared<LibMCEnv::CDriverStatusUpdateSession>(CWrapper::sPLibMCEnvWrapper.get(), pDriverUpdateInstance);
		CWrapper::sPLibMCEnvWrapper->AcquireInstance(pIDriverUpdateInstance.get());
		if (!pIDriverUpdateInstance)
			throw ELibMCDriver_ScanLabInterfaceException (LIBMCDRIVER_SCANLAB_ERROR_INVALIDCAST);
		
		IDriver* pIDriver = dynamic_cast<IDriver*>(pIBaseClass);
		if (!pIDriver)
			throw ELibMCDriver_ScanLabInterfaceException(LIBMCDRIVER_SCANLAB_ERROR_INVALIDCAST);
		
		pIDriver->QueryParametersEx(pIDriverUpdateInstance);

		return LIBMCDRIVER_SCANLAB_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}


/*************************************************************************************************************************
 Class implementation for RTCContext
**************************************************************************************************************************/
LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_loadfirmware(LibMCDriver_ScanLab_RTCContext pRTCContext, LibMCDriver_ScanLab_uint64 nFirmwareDataBufferSize, const LibMCDriver_ScanLab_uint8 * pFirmwareDataBuffer, LibMCDriver_ScanLab_uint64 nFPGADataBufferSize, const LibMCDriver_ScanLab_uint8 * pFPGADataBuffer, LibMCDriver_ScanLab_uint64 nAuxiliaryDataBufferSize, const LibMCDriver_ScanLab_uint8 * pAuxiliaryDataBuffer)
{
	IBase* pIBaseClass = (IBase *)pRTCContext;

	try {
		if ( (!pFirmwareDataBuffer) && (nFirmwareDataBufferSize>0))
			throw ELibMCDriver_ScanLabInterfaceException (LIBMCDRIVER_SCANLAB_ERROR_INVALIDPARAM);
		if ( (!pFPGADataBuffer) && (nFPGADataBufferSize>0))
			throw ELibMCDriver_ScanLabInterfaceException (LIBMCDRIVER_SCANLAB_ERROR_INVALIDPARAM);
		if ( (!pAuxiliaryDataBuffer) && (nAuxiliaryDataBufferSize>0))
			throw ELibMCDriver_ScanLabInterfaceException (LIBMCDRIVER_SCANLAB_ERROR_INVALIDPARAM);
		IRTCContext* pIRTCContext = dynamic_cast<IRTCContext*>(pIBaseClass);
		if (!pIRTCContext)
			throw ELibMCDriver_ScanLabInterfaceException(LIBMCDRIVER_SCANLAB_ERROR_INVALIDCAST);
		
		pIRTCContext->LoadFirmware(nFirmwareDataBufferSize, pFirmwareDataBuffer, nFPGADataBufferSize, pFPGADataBuffer, nAuxiliaryDataBufferSize, pAuxiliaryDataBuffer);

		return LIBMCDRIVER_SCANLAB_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_loadcorrectionfile(LibMCDriver_ScanLab_RTCContext pRTCContext, LibMCDriver_ScanLab_uint64 nCorrectionFileBufferSize, const LibMCDriver_ScanLab_uint8 * pCorrectionFileBuffer, LibMCDriver_ScanLab_uint32 nTableNumber, LibMCDriver_ScanLab_uint32 nDimension)
{
	IBase* pIBaseClass = (IBase *)pRTCContext;

	try {
		if ( (!pCorrectionFileBuffer) && (nCorrectionFileBufferSize>0))
			throw ELibMCDriver_ScanLabInterfaceException (LIBMCDRIVER_SCANLAB_ERROR_INVALIDPARAM);
		IRTCContext* pIRTCContext = dynamic_cast<IRTCContext*>(pIBaseClass);
		if (!pIRTCContext)
			throw ELibMCDriver_ScanLabInterfaceException(LIBMCDRIVER_SCANLAB_ERROR_INVALIDCAST);
		
		pIRTCContext->LoadCorrectionFile(nCorrectionFileBufferSize, pCorrectionFileBuffer, nTableNumber, nDimension);

		return LIBMCDRIVER_SCANLAB_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_selectcorrectiontable(LibMCDriver_ScanLab_RTCContext pRTCContext, LibMCDriver_ScanLab_uint32 nTableNumberHeadA, LibMCDriver_ScanLab_uint32 nTableNumberHeadB)
{
	IBase* pIBaseClass = (IBase *)pRTCContext;

	try {
		IRTCContext* pIRTCContext = dynamic_cast<IRTCContext*>(pIBaseClass);
		if (!pIRTCContext)
			throw ELibMCDriver_ScanLabInterfaceException(LIBMCDRIVER_SCANLAB_ERROR_INVALIDCAST);
		
		pIRTCContext->SelectCorrectionTable(nTableNumberHeadA, nTableNumberHeadB);

		return LIBMCDRIVER_SCANLAB_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_configurelists(LibMCDriver_ScanLab_RTCContext pRTCContext, LibMCDriver_ScanLab_uint32 nSizeListA, LibMCDriver_ScanLab_uint32 nSizeListB)
{
	IBase* pIBaseClass = (IBase *)pRTCContext;

	try {
		IRTCContext* pIRTCContext = dynamic_cast<IRTCContext*>(pIBaseClass);
		if (!pIRTCContext)
			throw ELibMCDriver_ScanLabInterfaceException(LIBMCDRIVER_SCANLAB_ERROR_INVALIDCAST);
		
		pIRTCContext->ConfigureLists(nSizeListA, nSizeListB);

		return LIBMCDRIVER_SCANLAB_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_setlasermode(LibMCDriver_ScanLab_RTCContext pRTCContext, eLibMCDriver_ScanLabLaserMode eLaserMode, eLibMCDriver_ScanLabLaserPort eLaserPort)
{
	IBase* pIBaseClass = (IBase *)pRTCContext;

	try {
		IRTCContext* pIRTCContext = dynamic_cast<IRTCContext*>(pIBaseClass);
		if (!pIRTCContext)
			throw ELibMCDriver_ScanLabInterfaceException(LIBMCDRIVER_SCANLAB_ERROR_INVALIDCAST);
		
		pIRTCContext->SetLaserMode(eLaserMode, eLaserPort);

		return LIBMCDRIVER_SCANLAB_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_disableautolasercontrol(LibMCDriver_ScanLab_RTCContext pRTCContext)
{
	IBase* pIBaseClass = (IBase *)pRTCContext;

	try {
		IRTCContext* pIRTCContext = dynamic_cast<IRTCContext*>(pIBaseClass);
		if (!pIRTCContext)
			throw ELibMCDriver_ScanLabInterfaceException(LIBMCDRIVER_SCANLAB_ERROR_INVALIDCAST);
		
		pIRTCContext->DisableAutoLaserControl();

		return LIBMCDRIVER_SCANLAB_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_setlasercontrolparameters(LibMCDriver_ScanLab_RTCContext pRTCContext, bool bDisableLaser, bool bFinishLaserPulseAfterOn, bool bPhaseShiftOfLaserSignal, bool bLaserOnSignalLowActive, bool bLaserHalfSignalsLowActive, bool bSetDigitalInOneHighActive, bool bOutputSynchronizationActive)
{
	IBase* pIBaseClass = (IBase *)pRTCContext;

	try {
		IRTCContext* pIRTCContext = dynamic_cast<IRTCContext*>(pIBaseClass);
		if (!pIRTCContext)
			throw ELibMCDriver_ScanLabInterfaceException(LIBMCDRIVER_SCANLAB_ERROR_INVALIDCAST);
		
		pIRTCContext->SetLaserControlParameters(bDisableLaser, bFinishLaserPulseAfterOn, bPhaseShiftOfLaserSignal, bLaserOnSignalLowActive, bLaserHalfSignalsLowActive, bSetDigitalInOneHighActive, bOutputSynchronizationActive);

		return LIBMCDRIVER_SCANLAB_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_setlaserpulsesinbits(LibMCDriver_ScanLab_RTCContext pRTCContext, LibMCDriver_ScanLab_uint32 nHalfPeriod, LibMCDriver_ScanLab_uint32 nPulseLength)
{
	IBase* pIBaseClass = (IBase *)pRTCContext;

	try {
		IRTCContext* pIRTCContext = dynamic_cast<IRTCContext*>(pIBaseClass);
		if (!pIRTCContext)
			throw ELibMCDriver_ScanLabInterfaceException(LIBMCDRIVER_SCANLAB_ERROR_INVALIDCAST);
		
		pIRTCContext->SetLaserPulsesInBits(nHalfPeriod, nPulseLength);

		return LIBMCDRIVER_SCANLAB_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_setlaserpulsesinmicroseconds(LibMCDriver_ScanLab_RTCContext pRTCContext, LibMCDriver_ScanLab_double dHalfPeriod, LibMCDriver_ScanLab_double dPulseLength)
{
	IBase* pIBaseClass = (IBase *)pRTCContext;

	try {
		IRTCContext* pIRTCContext = dynamic_cast<IRTCContext*>(pIBaseClass);
		if (!pIRTCContext)
			throw ELibMCDriver_ScanLabInterfaceException(LIBMCDRIVER_SCANLAB_ERROR_INVALIDCAST);
		
		pIRTCContext->SetLaserPulsesInMicroSeconds(dHalfPeriod, dPulseLength);

		return LIBMCDRIVER_SCANLAB_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_setstandbyinbits(LibMCDriver_ScanLab_RTCContext pRTCContext, LibMCDriver_ScanLab_uint32 nHalfPeriod, LibMCDriver_ScanLab_uint32 nPulseLength)
{
	IBase* pIBaseClass = (IBase *)pRTCContext;

	try {
		IRTCContext* pIRTCContext = dynamic_cast<IRTCContext*>(pIBaseClass);
		if (!pIRTCContext)
			throw ELibMCDriver_ScanLabInterfaceException(LIBMCDRIVER_SCANLAB_ERROR_INVALIDCAST);
		
		pIRTCContext->SetStandbyInBits(nHalfPeriod, nPulseLength);

		return LIBMCDRIVER_SCANLAB_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_setstandbyinmicroseconds(LibMCDriver_ScanLab_RTCContext pRTCContext, LibMCDriver_ScanLab_double dHalfPeriod, LibMCDriver_ScanLab_double dPulseLength)
{
	IBase* pIBaseClass = (IBase *)pRTCContext;

	try {
		IRTCContext* pIRTCContext = dynamic_cast<IRTCContext*>(pIBaseClass);
		if (!pIRTCContext)
			throw ELibMCDriver_ScanLabInterfaceException(LIBMCDRIVER_SCANLAB_ERROR_INVALIDCAST);
		
		pIRTCContext->SetStandbyInMicroSeconds(dHalfPeriod, dPulseLength);

		return LIBMCDRIVER_SCANLAB_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_getserialnumber(LibMCDriver_ScanLab_RTCContext pRTCContext, LibMCDriver_ScanLab_uint32 * pSerialNumber)
{
	IBase* pIBaseClass = (IBase *)pRTCContext;

	try {
		if (pSerialNumber == nullptr)
			throw ELibMCDriver_ScanLabInterfaceException (LIBMCDRIVER_SCANLAB_ERROR_INVALIDPARAM);
		IRTCContext* pIRTCContext = dynamic_cast<IRTCContext*>(pIBaseClass);
		if (!pIRTCContext)
			throw ELibMCDriver_ScanLabInterfaceException(LIBMCDRIVER_SCANLAB_ERROR_INVALIDCAST);
		
		*pSerialNumber = pIRTCContext->GetSerialNumber();

		return LIBMCDRIVER_SCANLAB_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_setstartlist(LibMCDriver_ScanLab_RTCContext pRTCContext, LibMCDriver_ScanLab_uint32 nListIndex, LibMCDriver_ScanLab_uint32 nPosition)
{
	IBase* pIBaseClass = (IBase *)pRTCContext;

	try {
		IRTCContext* pIRTCContext = dynamic_cast<IRTCContext*>(pIBaseClass);
		if (!pIRTCContext)
			throw ELibMCDriver_ScanLabInterfaceException(LIBMCDRIVER_SCANLAB_ERROR_INVALIDCAST);
		
		pIRTCContext->SetStartList(nListIndex, nPosition);

		return LIBMCDRIVER_SCANLAB_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_setendoflist(LibMCDriver_ScanLab_RTCContext pRTCContext)
{
	IBase* pIBaseClass = (IBase *)pRTCContext;

	try {
		IRTCContext* pIRTCContext = dynamic_cast<IRTCContext*>(pIBaseClass);
		if (!pIRTCContext)
			throw ELibMCDriver_ScanLabInterfaceException(LIBMCDRIVER_SCANLAB_ERROR_INVALIDCAST);
		
		pIRTCContext->SetEndOfList();

		return LIBMCDRIVER_SCANLAB_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_executelist(LibMCDriver_ScanLab_RTCContext pRTCContext, LibMCDriver_ScanLab_uint32 nListIndex, LibMCDriver_ScanLab_uint32 nPosition)
{
	IBase* pIBaseClass = (IBase *)pRTCContext;

	try {
		IRTCContext* pIRTCContext = dynamic_cast<IRTCContext*>(pIBaseClass);
		if (!pIRTCContext)
			throw ELibMCDriver_ScanLabInterfaceException(LIBMCDRIVER_SCANLAB_ERROR_INVALIDCAST);
		
		pIRTCContext->ExecuteList(nListIndex, nPosition);

		return LIBMCDRIVER_SCANLAB_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_setautochangepos(LibMCDriver_ScanLab_RTCContext pRTCContext, LibMCDriver_ScanLab_uint32 nPosition)
{
	IBase* pIBaseClass = (IBase *)pRTCContext;

	try {
		IRTCContext* pIRTCContext = dynamic_cast<IRTCContext*>(pIBaseClass);
		if (!pIRTCContext)
			throw ELibMCDriver_ScanLabInterfaceException(LIBMCDRIVER_SCANLAB_ERROR_INVALIDCAST);
		
		pIRTCContext->SetAutoChangePos(nPosition);

		return LIBMCDRIVER_SCANLAB_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_setdelays(LibMCDriver_ScanLab_RTCContext pRTCContext, LibMCDriver_ScanLab_uint32 nMarkDelay, LibMCDriver_ScanLab_uint32 nJumpDelay, LibMCDriver_ScanLab_uint32 nPolygonDelay)
{
	IBase* pIBaseClass = (IBase *)pRTCContext;

	try {
		IRTCContext* pIRTCContext = dynamic_cast<IRTCContext*>(pIBaseClass);
		if (!pIRTCContext)
			throw ELibMCDriver_ScanLabInterfaceException(LIBMCDRIVER_SCANLAB_ERROR_INVALIDCAST);
		
		pIRTCContext->SetDelays(nMarkDelay, nJumpDelay, nPolygonDelay);

		return LIBMCDRIVER_SCANLAB_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_setlaserdelaysinmicroseconds(LibMCDriver_ScanLab_RTCContext pRTCContext, LibMCDriver_ScanLab_double dLaserOnDelay, LibMCDriver_ScanLab_double dLaserOffDelay)
{
	IBase* pIBaseClass = (IBase *)pRTCContext;

	try {
		IRTCContext* pIRTCContext = dynamic_cast<IRTCContext*>(pIBaseClass);
		if (!pIRTCContext)
			throw ELibMCDriver_ScanLabInterfaceException(LIBMCDRIVER_SCANLAB_ERROR_INVALIDCAST);
		
		pIRTCContext->SetLaserDelaysInMicroseconds(dLaserOnDelay, dLaserOffDelay);

		return LIBMCDRIVER_SCANLAB_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_setlaserdelaysinbits(LibMCDriver_ScanLab_RTCContext pRTCContext, LibMCDriver_ScanLab_uint32 nLaserOnDelay, LibMCDriver_ScanLab_uint32 nLaserOffDelay)
{
	IBase* pIBaseClass = (IBase *)pRTCContext;

	try {
		IRTCContext* pIRTCContext = dynamic_cast<IRTCContext*>(pIBaseClass);
		if (!pIRTCContext)
			throw ELibMCDriver_ScanLabInterfaceException(LIBMCDRIVER_SCANLAB_ERROR_INVALIDCAST);
		
		pIRTCContext->SetLaserDelaysInBits(nLaserOnDelay, nLaserOffDelay);

		return LIBMCDRIVER_SCANLAB_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_drawpolyline(LibMCDriver_ScanLab_RTCContext pRTCContext, LibMCDriver_ScanLab_uint64 nPointsBufferSize, const sLibMCDriver_ScanLabPoint2D * pPointsBuffer, LibMCDriver_ScanLab_single fMarkSpeed, LibMCDriver_ScanLab_single fJumpSpeed, LibMCDriver_ScanLab_single fPower, LibMCDriver_ScanLab_single fZValue)
{
	IBase* pIBaseClass = (IBase *)pRTCContext;

	try {
		if ( (!pPointsBuffer) && (nPointsBufferSize>0))
			throw ELibMCDriver_ScanLabInterfaceException (LIBMCDRIVER_SCANLAB_ERROR_INVALIDPARAM);
		IRTCContext* pIRTCContext = dynamic_cast<IRTCContext*>(pIBaseClass);
		if (!pIRTCContext)
			throw ELibMCDriver_ScanLabInterfaceException(LIBMCDRIVER_SCANLAB_ERROR_INVALIDCAST);
		
		pIRTCContext->DrawPolyline(nPointsBufferSize, pPointsBuffer, fMarkSpeed, fJumpSpeed, fPower, fZValue);

		return LIBMCDRIVER_SCANLAB_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_drawhatches(LibMCDriver_ScanLab_RTCContext pRTCContext, LibMCDriver_ScanLab_uint64 nHatchesBufferSize, const sLibMCDriver_ScanLabHatch2D * pHatchesBuffer, LibMCDriver_ScanLab_single fMarkSpeed, LibMCDriver_ScanLab_single fJumpSpeed, LibMCDriver_ScanLab_single fPower, LibMCDriver_ScanLab_single fZValue)
{
	IBase* pIBaseClass = (IBase *)pRTCContext;

	try {
		if ( (!pHatchesBuffer) && (nHatchesBufferSize>0))
			throw ELibMCDriver_ScanLabInterfaceException (LIBMCDRIVER_SCANLAB_ERROR_INVALIDPARAM);
		IRTCContext* pIRTCContext = dynamic_cast<IRTCContext*>(pIBaseClass);
		if (!pIRTCContext)
			throw ELibMCDriver_ScanLabInterfaceException(LIBMCDRIVER_SCANLAB_ERROR_INVALIDCAST);
		
		pIRTCContext->DrawHatches(nHatchesBufferSize, pHatchesBuffer, fMarkSpeed, fJumpSpeed, fPower, fZValue);

		return LIBMCDRIVER_SCANLAB_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_addcustomdelay(LibMCDriver_ScanLab_RTCContext pRTCContext, LibMCDriver_ScanLab_uint32 nDelay)
{
	IBase* pIBaseClass = (IBase *)pRTCContext;

	try {
		IRTCContext* pIRTCContext = dynamic_cast<IRTCContext*>(pIBaseClass);
		if (!pIRTCContext)
			throw ELibMCDriver_ScanLabInterfaceException(LIBMCDRIVER_SCANLAB_ERROR_INVALIDCAST);
		
		pIRTCContext->AddCustomDelay(nDelay);

		return LIBMCDRIVER_SCANLAB_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_getcorrectionfactor(LibMCDriver_ScanLab_RTCContext pRTCContext, LibMCDriver_ScanLab_double * pCorrectionFactor)
{
	IBase* pIBaseClass = (IBase *)pRTCContext;

	try {
		if (pCorrectionFactor == nullptr)
			throw ELibMCDriver_ScanLabInterfaceException (LIBMCDRIVER_SCANLAB_ERROR_INVALIDPARAM);
		IRTCContext* pIRTCContext = dynamic_cast<IRTCContext*>(pIBaseClass);
		if (!pIRTCContext)
			throw ELibMCDriver_ScanLabInterfaceException(LIBMCDRIVER_SCANLAB_ERROR_INVALIDCAST);
		
		*pCorrectionFactor = pIRTCContext->GetCorrectionFactor();

		return LIBMCDRIVER_SCANLAB_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_getstatus(LibMCDriver_ScanLab_RTCContext pRTCContext, bool * pBusy, LibMCDriver_ScanLab_uint32 * pPosition)
{
	IBase* pIBaseClass = (IBase *)pRTCContext;

	try {
		if (!pBusy)
			throw ELibMCDriver_ScanLabInterfaceException (LIBMCDRIVER_SCANLAB_ERROR_INVALIDPARAM);
		if (!pPosition)
			throw ELibMCDriver_ScanLabInterfaceException (LIBMCDRIVER_SCANLAB_ERROR_INVALIDPARAM);
		IRTCContext* pIRTCContext = dynamic_cast<IRTCContext*>(pIBaseClass);
		if (!pIRTCContext)
			throw ELibMCDriver_ScanLabInterfaceException(LIBMCDRIVER_SCANLAB_ERROR_INVALIDCAST);
		
		pIRTCContext->GetStatus(*pBusy, *pPosition);

		return LIBMCDRIVER_SCANLAB_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_getheadstatus(LibMCDriver_ScanLab_RTCContext pRTCContext, LibMCDriver_ScanLab_uint32 nHeadNo, bool * pPositionXisOK, bool * pPositionYisOK, bool * pTemperatureisOK, bool * pPowerisOK)
{
	IBase* pIBaseClass = (IBase *)pRTCContext;

	try {
		if (!pPositionXisOK)
			throw ELibMCDriver_ScanLabInterfaceException (LIBMCDRIVER_SCANLAB_ERROR_INVALIDPARAM);
		if (!pPositionYisOK)
			throw ELibMCDriver_ScanLabInterfaceException (LIBMCDRIVER_SCANLAB_ERROR_INVALIDPARAM);
		if (!pTemperatureisOK)
			throw ELibMCDriver_ScanLabInterfaceException (LIBMCDRIVER_SCANLAB_ERROR_INVALIDPARAM);
		if (!pPowerisOK)
			throw ELibMCDriver_ScanLabInterfaceException (LIBMCDRIVER_SCANLAB_ERROR_INVALIDPARAM);
		IRTCContext* pIRTCContext = dynamic_cast<IRTCContext*>(pIBaseClass);
		if (!pIRTCContext)
			throw ELibMCDriver_ScanLabInterfaceException(LIBMCDRIVER_SCANLAB_ERROR_INVALIDCAST);
		
		pIRTCContext->GetHeadStatus(nHeadNo, *pPositionXisOK, *pPositionYisOK, *pTemperatureisOK, *pPowerisOK);

		return LIBMCDRIVER_SCANLAB_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_getstatevalues(LibMCDriver_ScanLab_RTCContext pRTCContext, bool * pLaserIsOn, LibMCDriver_ScanLab_int32 * pPositionX, LibMCDriver_ScanLab_int32 * pPositionY, LibMCDriver_ScanLab_int32 * pPositionZ, LibMCDriver_ScanLab_int32 * pCorrectedPositionX, LibMCDriver_ScanLab_int32 * pCorrectedPositionY, LibMCDriver_ScanLab_int32 * pCorrectedPositionZ, LibMCDriver_ScanLab_int32 * pFocusShift, LibMCDriver_ScanLab_int32 * pMarkSpeed)
{
	IBase* pIBaseClass = (IBase *)pRTCContext;

	try {
		if (!pLaserIsOn)
			throw ELibMCDriver_ScanLabInterfaceException (LIBMCDRIVER_SCANLAB_ERROR_INVALIDPARAM);
		if (!pPositionX)
			throw ELibMCDriver_ScanLabInterfaceException (LIBMCDRIVER_SCANLAB_ERROR_INVALIDPARAM);
		if (!pPositionY)
			throw ELibMCDriver_ScanLabInterfaceException (LIBMCDRIVER_SCANLAB_ERROR_INVALIDPARAM);
		if (!pPositionZ)
			throw ELibMCDriver_ScanLabInterfaceException (LIBMCDRIVER_SCANLAB_ERROR_INVALIDPARAM);
		if (!pCorrectedPositionX)
			throw ELibMCDriver_ScanLabInterfaceException (LIBMCDRIVER_SCANLAB_ERROR_INVALIDPARAM);
		if (!pCorrectedPositionY)
			throw ELibMCDriver_ScanLabInterfaceException (LIBMCDRIVER_SCANLAB_ERROR_INVALIDPARAM);
		if (!pCorrectedPositionZ)
			throw ELibMCDriver_ScanLabInterfaceException (LIBMCDRIVER_SCANLAB_ERROR_INVALIDPARAM);
		if (!pFocusShift)
			throw ELibMCDriver_ScanLabInterfaceException (LIBMCDRIVER_SCANLAB_ERROR_INVALIDPARAM);
		if (!pMarkSpeed)
			throw ELibMCDriver_ScanLabInterfaceException (LIBMCDRIVER_SCANLAB_ERROR_INVALIDPARAM);
		IRTCContext* pIRTCContext = dynamic_cast<IRTCContext*>(pIBaseClass);
		if (!pIRTCContext)
			throw ELibMCDriver_ScanLabInterfaceException(LIBMCDRIVER_SCANLAB_ERROR_INVALIDCAST);
		
		pIRTCContext->GetStateValues(*pLaserIsOn, *pPositionX, *pPositionY, *pPositionZ, *pCorrectedPositionX, *pCorrectedPositionY, *pCorrectedPositionZ, *pFocusShift, *pMarkSpeed);

		return LIBMCDRIVER_SCANLAB_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_getinputpointer(LibMCDriver_ScanLab_RTCContext pRTCContext, LibMCDriver_ScanLab_uint32 * pPosition)
{
	IBase* pIBaseClass = (IBase *)pRTCContext;

	try {
		if (pPosition == nullptr)
			throw ELibMCDriver_ScanLabInterfaceException (LIBMCDRIVER_SCANLAB_ERROR_INVALIDPARAM);
		IRTCContext* pIRTCContext = dynamic_cast<IRTCContext*>(pIBaseClass);
		if (!pIRTCContext)
			throw ELibMCDriver_ScanLabInterfaceException(LIBMCDRIVER_SCANLAB_ERROR_INVALIDCAST);
		
		*pPosition = pIRTCContext->GetInputPointer();

		return LIBMCDRIVER_SCANLAB_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_getrtcversion(LibMCDriver_ScanLab_RTCContext pRTCContext, LibMCDriver_ScanLab_uint32 * pRTCVersion, LibMCDriver_ScanLab_uint32 * pRTCType, LibMCDriver_ScanLab_uint32 * pDLLVersion, LibMCDriver_ScanLab_uint32 * pHEXVersion, LibMCDriver_ScanLab_uint32 * pBIOSVersion)
{
	IBase* pIBaseClass = (IBase *)pRTCContext;

	try {
		if (!pRTCVersion)
			throw ELibMCDriver_ScanLabInterfaceException (LIBMCDRIVER_SCANLAB_ERROR_INVALIDPARAM);
		if (!pRTCType)
			throw ELibMCDriver_ScanLabInterfaceException (LIBMCDRIVER_SCANLAB_ERROR_INVALIDPARAM);
		if (!pDLLVersion)
			throw ELibMCDriver_ScanLabInterfaceException (LIBMCDRIVER_SCANLAB_ERROR_INVALIDPARAM);
		if (!pHEXVersion)
			throw ELibMCDriver_ScanLabInterfaceException (LIBMCDRIVER_SCANLAB_ERROR_INVALIDPARAM);
		if (!pBIOSVersion)
			throw ELibMCDriver_ScanLabInterfaceException (LIBMCDRIVER_SCANLAB_ERROR_INVALIDPARAM);
		IRTCContext* pIRTCContext = dynamic_cast<IRTCContext*>(pIBaseClass);
		if (!pIRTCContext)
			throw ELibMCDriver_ScanLabInterfaceException(LIBMCDRIVER_SCANLAB_ERROR_INVALIDCAST);
		
		pIRTCContext->GetRTCVersion(*pRTCVersion, *pRTCType, *pDLLVersion, *pHEXVersion, *pBIOSVersion);

		return LIBMCDRIVER_SCANLAB_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_setcommunicationtimeouts(LibMCDriver_ScanLab_RTCContext pRTCContext, LibMCDriver_ScanLab_double dInitialTimeout, LibMCDriver_ScanLab_double dMaxTimeout, LibMCDriver_ScanLab_double dMultiplier)
{
	IBase* pIBaseClass = (IBase *)pRTCContext;

	try {
		IRTCContext* pIRTCContext = dynamic_cast<IRTCContext*>(pIBaseClass);
		if (!pIRTCContext)
			throw ELibMCDriver_ScanLabInterfaceException(LIBMCDRIVER_SCANLAB_ERROR_INVALIDCAST);
		
		pIRTCContext->SetCommunicationTimeouts(dInitialTimeout, dMaxTimeout, dMultiplier);

		return LIBMCDRIVER_SCANLAB_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_getcommunicationtimeouts(LibMCDriver_ScanLab_RTCContext pRTCContext, LibMCDriver_ScanLab_double * pInitialTimeout, LibMCDriver_ScanLab_double * pMaxTimeout, LibMCDriver_ScanLab_double * pMultiplier)
{
	IBase* pIBaseClass = (IBase *)pRTCContext;

	try {
		if (!pInitialTimeout)
			throw ELibMCDriver_ScanLabInterfaceException (LIBMCDRIVER_SCANLAB_ERROR_INVALIDPARAM);
		if (!pMaxTimeout)
			throw ELibMCDriver_ScanLabInterfaceException (LIBMCDRIVER_SCANLAB_ERROR_INVALIDPARAM);
		if (!pMultiplier)
			throw ELibMCDriver_ScanLabInterfaceException (LIBMCDRIVER_SCANLAB_ERROR_INVALIDPARAM);
		IRTCContext* pIRTCContext = dynamic_cast<IRTCContext*>(pIBaseClass);
		if (!pIRTCContext)
			throw ELibMCDriver_ScanLabInterfaceException(LIBMCDRIVER_SCANLAB_ERROR_INVALIDCAST);
		
		pIRTCContext->GetCommunicationTimeouts(*pInitialTimeout, *pMaxTimeout, *pMultiplier);

		return LIBMCDRIVER_SCANLAB_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_initializeforoie(LibMCDriver_ScanLab_RTCContext pRTCContext, LibMCDriver_ScanLab_uint64 nSignalChannelsBufferSize, const LibMCDriver_ScanLab_uint32 * pSignalChannelsBuffer)
{
	IBase* pIBaseClass = (IBase *)pRTCContext;

	try {
		if ( (!pSignalChannelsBuffer) && (nSignalChannelsBufferSize>0))
			throw ELibMCDriver_ScanLabInterfaceException (LIBMCDRIVER_SCANLAB_ERROR_INVALIDPARAM);
		IRTCContext* pIRTCContext = dynamic_cast<IRTCContext*>(pIBaseClass);
		if (!pIRTCContext)
			throw ELibMCDriver_ScanLabInterfaceException(LIBMCDRIVER_SCANLAB_ERROR_INVALIDCAST);
		
		pIRTCContext->InitializeForOIE(nSignalChannelsBufferSize, pSignalChannelsBuffer);

		return LIBMCDRIVER_SCANLAB_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_enableoie(LibMCDriver_ScanLab_RTCContext pRTCContext)
{
	IBase* pIBaseClass = (IBase *)pRTCContext;

	try {
		IRTCContext* pIRTCContext = dynamic_cast<IRTCContext*>(pIBaseClass);
		if (!pIRTCContext)
			throw ELibMCDriver_ScanLabInterfaceException(LIBMCDRIVER_SCANLAB_ERROR_INVALIDCAST);
		
		pIRTCContext->EnableOIE();

		return LIBMCDRIVER_SCANLAB_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_disableoie(LibMCDriver_ScanLab_RTCContext pRTCContext)
{
	IBase* pIBaseClass = (IBase *)pRTCContext;

	try {
		IRTCContext* pIRTCContext = dynamic_cast<IRTCContext*>(pIBaseClass);
		if (!pIRTCContext)
			throw ELibMCDriver_ScanLabInterfaceException(LIBMCDRIVER_SCANLAB_ERROR_INVALIDCAST);
		
		pIRTCContext->DisableOIE();

		return LIBMCDRIVER_SCANLAB_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_startoiemeasurement(LibMCDriver_ScanLab_RTCContext pRTCContext)
{
	IBase* pIBaseClass = (IBase *)pRTCContext;

	try {
		IRTCContext* pIRTCContext = dynamic_cast<IRTCContext*>(pIBaseClass);
		if (!pIRTCContext)
			throw ELibMCDriver_ScanLabInterfaceException(LIBMCDRIVER_SCANLAB_ERROR_INVALIDCAST);
		
		pIRTCContext->StartOIEMeasurement();

		return LIBMCDRIVER_SCANLAB_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_stopoiemeasurement(LibMCDriver_ScanLab_RTCContext pRTCContext)
{
	IBase* pIBaseClass = (IBase *)pRTCContext;

	try {
		IRTCContext* pIRTCContext = dynamic_cast<IRTCContext*>(pIBaseClass);
		if (!pIRTCContext)
			throw ELibMCDriver_ScanLabInterfaceException(LIBMCDRIVER_SCANLAB_ERROR_INVALIDCAST);
		
		pIRTCContext->StopOIEMeasurement();

		return LIBMCDRIVER_SCANLAB_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}


/*************************************************************************************************************************
 Class implementation for RTCSelector
**************************************************************************************************************************/
LibMCDriver_ScanLabResult libmcdriver_scanlab_rtcselector_searchcards(LibMCDriver_ScanLab_RTCSelector pRTCSelector, const char * pIP, const char * pNetmask, LibMCDriver_ScanLab_uint32 nTimeout, LibMCDriver_ScanLab_uint32 * pCount)
{
	IBase* pIBaseClass = (IBase *)pRTCSelector;

	try {
		if (pIP == nullptr)
			throw ELibMCDriver_ScanLabInterfaceException (LIBMCDRIVER_SCANLAB_ERROR_INVALIDPARAM);
		if (pNetmask == nullptr)
			throw ELibMCDriver_ScanLabInterfaceException (LIBMCDRIVER_SCANLAB_ERROR_INVALIDPARAM);
		if (pCount == nullptr)
			throw ELibMCDriver_ScanLabInterfaceException (LIBMCDRIVER_SCANLAB_ERROR_INVALIDPARAM);
		std::string sIP(pIP);
		std::string sNetmask(pNetmask);
		IRTCSelector* pIRTCSelector = dynamic_cast<IRTCSelector*>(pIBaseClass);
		if (!pIRTCSelector)
			throw ELibMCDriver_ScanLabInterfaceException(LIBMCDRIVER_SCANLAB_ERROR_INVALIDCAST);
		
		*pCount = pIRTCSelector->SearchCards(sIP, sNetmask, nTimeout);

		return LIBMCDRIVER_SCANLAB_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabResult libmcdriver_scanlab_rtcselector_searchcardsbyrange(LibMCDriver_ScanLab_RTCSelector pRTCSelector, const char * pStartIP, const char * pEndIP, LibMCDriver_ScanLab_uint32 nTimeout, LibMCDriver_ScanLab_uint32 * pCount)
{
	IBase* pIBaseClass = (IBase *)pRTCSelector;

	try {
		if (pStartIP == nullptr)
			throw ELibMCDriver_ScanLabInterfaceException (LIBMCDRIVER_SCANLAB_ERROR_INVALIDPARAM);
		if (pEndIP == nullptr)
			throw ELibMCDriver_ScanLabInterfaceException (LIBMCDRIVER_SCANLAB_ERROR_INVALIDPARAM);
		if (pCount == nullptr)
			throw ELibMCDriver_ScanLabInterfaceException (LIBMCDRIVER_SCANLAB_ERROR_INVALIDPARAM);
		std::string sStartIP(pStartIP);
		std::string sEndIP(pEndIP);
		IRTCSelector* pIRTCSelector = dynamic_cast<IRTCSelector*>(pIBaseClass);
		if (!pIRTCSelector)
			throw ELibMCDriver_ScanLabInterfaceException(LIBMCDRIVER_SCANLAB_ERROR_INVALIDCAST);
		
		*pCount = pIRTCSelector->SearchCardsByRange(sStartIP, sEndIP, nTimeout);

		return LIBMCDRIVER_SCANLAB_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabResult libmcdriver_scanlab_rtcselector_getcardcount(LibMCDriver_ScanLab_RTCSelector pRTCSelector, LibMCDriver_ScanLab_uint32 * pCount)
{
	IBase* pIBaseClass = (IBase *)pRTCSelector;

	try {
		if (pCount == nullptr)
			throw ELibMCDriver_ScanLabInterfaceException (LIBMCDRIVER_SCANLAB_ERROR_INVALIDPARAM);
		IRTCSelector* pIRTCSelector = dynamic_cast<IRTCSelector*>(pIBaseClass);
		if (!pIRTCSelector)
			throw ELibMCDriver_ScanLabInterfaceException(LIBMCDRIVER_SCANLAB_ERROR_INVALIDCAST);
		
		*pCount = pIRTCSelector->GetCardCount();

		return LIBMCDRIVER_SCANLAB_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabResult libmcdriver_scanlab_rtcselector_getethernetcardcount(LibMCDriver_ScanLab_RTCSelector pRTCSelector, LibMCDriver_ScanLab_uint32 * pCount)
{
	IBase* pIBaseClass = (IBase *)pRTCSelector;

	try {
		if (pCount == nullptr)
			throw ELibMCDriver_ScanLabInterfaceException (LIBMCDRIVER_SCANLAB_ERROR_INVALIDPARAM);
		IRTCSelector* pIRTCSelector = dynamic_cast<IRTCSelector*>(pIBaseClass);
		if (!pIRTCSelector)
			throw ELibMCDriver_ScanLabInterfaceException(LIBMCDRIVER_SCANLAB_ERROR_INVALIDCAST);
		
		*pCount = pIRTCSelector->GetEthernetCardCount();

		return LIBMCDRIVER_SCANLAB_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabResult libmcdriver_scanlab_rtcselector_acquirecard(LibMCDriver_ScanLab_RTCSelector pRTCSelector, LibMCDriver_ScanLab_uint32 nNumber, LibMCDriver_ScanLab_RTCContext * pInstance)
{
	IBase* pIBaseClass = (IBase *)pRTCSelector;

	try {
		if (pInstance == nullptr)
			throw ELibMCDriver_ScanLabInterfaceException (LIBMCDRIVER_SCANLAB_ERROR_INVALIDPARAM);
		IBase* pBaseInstance(nullptr);
		IRTCSelector* pIRTCSelector = dynamic_cast<IRTCSelector*>(pIBaseClass);
		if (!pIRTCSelector)
			throw ELibMCDriver_ScanLabInterfaceException(LIBMCDRIVER_SCANLAB_ERROR_INVALIDCAST);
		
		pBaseInstance = pIRTCSelector->AcquireCard(nNumber);

		*pInstance = (IBase*)(pBaseInstance);
		return LIBMCDRIVER_SCANLAB_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabResult libmcdriver_scanlab_rtcselector_acquirecardbyserial(LibMCDriver_ScanLab_RTCSelector pRTCSelector, LibMCDriver_ScanLab_uint32 nSerialNumber, LibMCDriver_ScanLab_RTCContext * pInstance)
{
	IBase* pIBaseClass = (IBase *)pRTCSelector;

	try {
		if (pInstance == nullptr)
			throw ELibMCDriver_ScanLabInterfaceException (LIBMCDRIVER_SCANLAB_ERROR_INVALIDPARAM);
		IBase* pBaseInstance(nullptr);
		IRTCSelector* pIRTCSelector = dynamic_cast<IRTCSelector*>(pIBaseClass);
		if (!pIRTCSelector)
			throw ELibMCDriver_ScanLabInterfaceException(LIBMCDRIVER_SCANLAB_ERROR_INVALIDCAST);
		
		pBaseInstance = pIRTCSelector->AcquireCardBySerial(nSerialNumber);

		*pInstance = (IBase*)(pBaseInstance);
		return LIBMCDRIVER_SCANLAB_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabResult libmcdriver_scanlab_rtcselector_acquireethernetcard(LibMCDriver_ScanLab_RTCSelector pRTCSelector, LibMCDriver_ScanLab_uint32 nNumber, LibMCDriver_ScanLab_RTCContext * pInstance)
{
	IBase* pIBaseClass = (IBase *)pRTCSelector;

	try {
		if (pInstance == nullptr)
			throw ELibMCDriver_ScanLabInterfaceException (LIBMCDRIVER_SCANLAB_ERROR_INVALIDPARAM);
		IBase* pBaseInstance(nullptr);
		IRTCSelector* pIRTCSelector = dynamic_cast<IRTCSelector*>(pIBaseClass);
		if (!pIRTCSelector)
			throw ELibMCDriver_ScanLabInterfaceException(LIBMCDRIVER_SCANLAB_ERROR_INVALIDCAST);
		
		pBaseInstance = pIRTCSelector->AcquireEthernetCard(nNumber);

		*pInstance = (IBase*)(pBaseInstance);
		return LIBMCDRIVER_SCANLAB_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabResult libmcdriver_scanlab_rtcselector_acquireethernetcardbyserial(LibMCDriver_ScanLab_RTCSelector pRTCSelector, LibMCDriver_ScanLab_uint32 nSerialNumber, LibMCDriver_ScanLab_RTCContext * pInstance)
{
	IBase* pIBaseClass = (IBase *)pRTCSelector;

	try {
		if (pInstance == nullptr)
			throw ELibMCDriver_ScanLabInterfaceException (LIBMCDRIVER_SCANLAB_ERROR_INVALIDPARAM);
		IBase* pBaseInstance(nullptr);
		IRTCSelector* pIRTCSelector = dynamic_cast<IRTCSelector*>(pIBaseClass);
		if (!pIRTCSelector)
			throw ELibMCDriver_ScanLabInterfaceException(LIBMCDRIVER_SCANLAB_ERROR_INVALIDCAST);
		
		pBaseInstance = pIRTCSelector->AcquireEthernetCardBySerial(nSerialNumber);

		*pInstance = (IBase*)(pBaseInstance);
		return LIBMCDRIVER_SCANLAB_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}


/*************************************************************************************************************************
 Class implementation for Driver_ScanLab
**************************************************************************************************************************/
LibMCDriver_ScanLabResult libmcdriver_scanlab_driver_scanlab_loadsdk(LibMCDriver_ScanLab_Driver_ScanLab pDriver_ScanLab, const char * pResourceName)
{
	IBase* pIBaseClass = (IBase *)pDriver_ScanLab;

	try {
		if (pResourceName == nullptr)
			throw ELibMCDriver_ScanLabInterfaceException (LIBMCDRIVER_SCANLAB_ERROR_INVALIDPARAM);
		std::string sResourceName(pResourceName);
		IDriver_ScanLab* pIDriver_ScanLab = dynamic_cast<IDriver_ScanLab*>(pIBaseClass);
		if (!pIDriver_ScanLab)
			throw ELibMCDriver_ScanLabInterfaceException(LIBMCDRIVER_SCANLAB_ERROR_INVALIDCAST);
		
		pIDriver_ScanLab->LoadSDK(sResourceName);

		return LIBMCDRIVER_SCANLAB_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabResult libmcdriver_scanlab_driver_scanlab_loadcustomsdk(LibMCDriver_ScanLab_Driver_ScanLab pDriver_ScanLab, LibMCDriver_ScanLab_uint64 nScanlabDLLBufferSize, const LibMCDriver_ScanLab_uint8 * pScanlabDLLBuffer)
{
	IBase* pIBaseClass = (IBase *)pDriver_ScanLab;

	try {
		if ( (!pScanlabDLLBuffer) && (nScanlabDLLBufferSize>0))
			throw ELibMCDriver_ScanLabInterfaceException (LIBMCDRIVER_SCANLAB_ERROR_INVALIDPARAM);
		IDriver_ScanLab* pIDriver_ScanLab = dynamic_cast<IDriver_ScanLab*>(pIBaseClass);
		if (!pIDriver_ScanLab)
			throw ELibMCDriver_ScanLabInterfaceException(LIBMCDRIVER_SCANLAB_ERROR_INVALIDCAST);
		
		pIDriver_ScanLab->LoadCustomSDK(nScanlabDLLBufferSize, pScanlabDLLBuffer);

		return LIBMCDRIVER_SCANLAB_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabResult libmcdriver_scanlab_driver_scanlab_creatertcselector(LibMCDriver_ScanLab_Driver_ScanLab pDriver_ScanLab, LibMCDriver_ScanLab_RTCSelector * pInstance)
{
	IBase* pIBaseClass = (IBase *)pDriver_ScanLab;

	try {
		if (pInstance == nullptr)
			throw ELibMCDriver_ScanLabInterfaceException (LIBMCDRIVER_SCANLAB_ERROR_INVALIDPARAM);
		IBase* pBaseInstance(nullptr);
		IDriver_ScanLab* pIDriver_ScanLab = dynamic_cast<IDriver_ScanLab*>(pIBaseClass);
		if (!pIDriver_ScanLab)
			throw ELibMCDriver_ScanLabInterfaceException(LIBMCDRIVER_SCANLAB_ERROR_INVALIDCAST);
		
		pBaseInstance = pIDriver_ScanLab->CreateRTCSelector();

		*pInstance = (IBase*)(pBaseInstance);
		return LIBMCDRIVER_SCANLAB_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}


/*************************************************************************************************************************
 Class implementation for Driver_ScanLab_RTC6
**************************************************************************************************************************/
LibMCDriver_ScanLabResult libmcdriver_scanlab_driver_scanlab_rtc6_settosimulationmode(LibMCDriver_ScanLab_Driver_ScanLab_RTC6 pDriver_ScanLab_RTC6)
{
	IBase* pIBaseClass = (IBase *)pDriver_ScanLab_RTC6;

	try {
		IDriver_ScanLab_RTC6* pIDriver_ScanLab_RTC6 = dynamic_cast<IDriver_ScanLab_RTC6*>(pIBaseClass);
		if (!pIDriver_ScanLab_RTC6)
			throw ELibMCDriver_ScanLabInterfaceException(LIBMCDRIVER_SCANLAB_ERROR_INVALIDCAST);
		
		pIDriver_ScanLab_RTC6->SetToSimulationMode();

		return LIBMCDRIVER_SCANLAB_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabResult libmcdriver_scanlab_driver_scanlab_rtc6_issimulationmode(LibMCDriver_ScanLab_Driver_ScanLab_RTC6 pDriver_ScanLab_RTC6, bool * pSimulationModeEnabled)
{
	IBase* pIBaseClass = (IBase *)pDriver_ScanLab_RTC6;

	try {
		if (pSimulationModeEnabled == nullptr)
			throw ELibMCDriver_ScanLabInterfaceException (LIBMCDRIVER_SCANLAB_ERROR_INVALIDPARAM);
		IDriver_ScanLab_RTC6* pIDriver_ScanLab_RTC6 = dynamic_cast<IDriver_ScanLab_RTC6*>(pIBaseClass);
		if (!pIDriver_ScanLab_RTC6)
			throw ELibMCDriver_ScanLabInterfaceException(LIBMCDRIVER_SCANLAB_ERROR_INVALIDCAST);
		
		*pSimulationModeEnabled = pIDriver_ScanLab_RTC6->IsSimulationMode();

		return LIBMCDRIVER_SCANLAB_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabResult libmcdriver_scanlab_driver_scanlab_rtc6_initialise(LibMCDriver_ScanLab_Driver_ScanLab_RTC6 pDriver_ScanLab_RTC6, const char * pIP, const char * pNetmask, LibMCDriver_ScanLab_uint32 nTimeout, LibMCDriver_ScanLab_uint32 nSerialNumber)
{
	IBase* pIBaseClass = (IBase *)pDriver_ScanLab_RTC6;

	try {
		if (pIP == nullptr)
			throw ELibMCDriver_ScanLabInterfaceException (LIBMCDRIVER_SCANLAB_ERROR_INVALIDPARAM);
		if (pNetmask == nullptr)
			throw ELibMCDriver_ScanLabInterfaceException (LIBMCDRIVER_SCANLAB_ERROR_INVALIDPARAM);
		std::string sIP(pIP);
		std::string sNetmask(pNetmask);
		IDriver_ScanLab_RTC6* pIDriver_ScanLab_RTC6 = dynamic_cast<IDriver_ScanLab_RTC6*>(pIBaseClass);
		if (!pIDriver_ScanLab_RTC6)
			throw ELibMCDriver_ScanLabInterfaceException(LIBMCDRIVER_SCANLAB_ERROR_INVALIDCAST);
		
		pIDriver_ScanLab_RTC6->Initialise(sIP, sNetmask, nTimeout, nSerialNumber);

		return LIBMCDRIVER_SCANLAB_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabResult libmcdriver_scanlab_driver_scanlab_rtc6_getcontext(LibMCDriver_ScanLab_Driver_ScanLab_RTC6 pDriver_ScanLab_RTC6, LibMCDriver_ScanLab_RTCContext * pContextInstance)
{
	IBase* pIBaseClass = (IBase *)pDriver_ScanLab_RTC6;

	try {
		if (pContextInstance == nullptr)
			throw ELibMCDriver_ScanLabInterfaceException (LIBMCDRIVER_SCANLAB_ERROR_INVALIDPARAM);
		IBase* pBaseContextInstance(nullptr);
		IDriver_ScanLab_RTC6* pIDriver_ScanLab_RTC6 = dynamic_cast<IDriver_ScanLab_RTC6*>(pIBaseClass);
		if (!pIDriver_ScanLab_RTC6)
			throw ELibMCDriver_ScanLabInterfaceException(LIBMCDRIVER_SCANLAB_ERROR_INVALIDCAST);
		
		pBaseContextInstance = pIDriver_ScanLab_RTC6->GetContext();

		*pContextInstance = (IBase*)(pBaseContextInstance);
		return LIBMCDRIVER_SCANLAB_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabResult libmcdriver_scanlab_driver_scanlab_rtc6_getselector(LibMCDriver_ScanLab_Driver_ScanLab_RTC6 pDriver_ScanLab_RTC6, LibMCDriver_ScanLab_RTCSelector * pSelectorInstance)
{
	IBase* pIBaseClass = (IBase *)pDriver_ScanLab_RTC6;

	try {
		if (pSelectorInstance == nullptr)
			throw ELibMCDriver_ScanLabInterfaceException (LIBMCDRIVER_SCANLAB_ERROR_INVALIDPARAM);
		IBase* pBaseSelectorInstance(nullptr);
		IDriver_ScanLab_RTC6* pIDriver_ScanLab_RTC6 = dynamic_cast<IDriver_ScanLab_RTC6*>(pIBaseClass);
		if (!pIDriver_ScanLab_RTC6)
			throw ELibMCDriver_ScanLabInterfaceException(LIBMCDRIVER_SCANLAB_ERROR_INVALIDCAST);
		
		pBaseSelectorInstance = pIDriver_ScanLab_RTC6->GetSelector();

		*pSelectorInstance = (IBase*)(pBaseSelectorInstance);
		return LIBMCDRIVER_SCANLAB_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabResult libmcdriver_scanlab_driver_scanlab_rtc6_loadfirmware(LibMCDriver_ScanLab_Driver_ScanLab_RTC6 pDriver_ScanLab_RTC6, const char * pFirmwareResource, const char * pFPGAResource, const char * pAuxiliaryResource)
{
	IBase* pIBaseClass = (IBase *)pDriver_ScanLab_RTC6;

	try {
		if (pFirmwareResource == nullptr)
			throw ELibMCDriver_ScanLabInterfaceException (LIBMCDRIVER_SCANLAB_ERROR_INVALIDPARAM);
		if (pFPGAResource == nullptr)
			throw ELibMCDriver_ScanLabInterfaceException (LIBMCDRIVER_SCANLAB_ERROR_INVALIDPARAM);
		if (pAuxiliaryResource == nullptr)
			throw ELibMCDriver_ScanLabInterfaceException (LIBMCDRIVER_SCANLAB_ERROR_INVALIDPARAM);
		std::string sFirmwareResource(pFirmwareResource);
		std::string sFPGAResource(pFPGAResource);
		std::string sAuxiliaryResource(pAuxiliaryResource);
		IDriver_ScanLab_RTC6* pIDriver_ScanLab_RTC6 = dynamic_cast<IDriver_ScanLab_RTC6*>(pIBaseClass);
		if (!pIDriver_ScanLab_RTC6)
			throw ELibMCDriver_ScanLabInterfaceException(LIBMCDRIVER_SCANLAB_ERROR_INVALIDCAST);
		
		pIDriver_ScanLab_RTC6->LoadFirmware(sFirmwareResource, sFPGAResource, sAuxiliaryResource);

		return LIBMCDRIVER_SCANLAB_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabResult libmcdriver_scanlab_driver_scanlab_rtc6_loadcustomfirmware(LibMCDriver_ScanLab_Driver_ScanLab_RTC6 pDriver_ScanLab_RTC6, LibMCDriver_ScanLab_uint64 nFirmwareDataBufferSize, const LibMCDriver_ScanLab_uint8 * pFirmwareDataBuffer, LibMCDriver_ScanLab_uint64 nFPGADataBufferSize, const LibMCDriver_ScanLab_uint8 * pFPGADataBuffer, LibMCDriver_ScanLab_uint64 nAuxiliaryDataBufferSize, const LibMCDriver_ScanLab_uint8 * pAuxiliaryDataBuffer)
{
	IBase* pIBaseClass = (IBase *)pDriver_ScanLab_RTC6;

	try {
		if ( (!pFirmwareDataBuffer) && (nFirmwareDataBufferSize>0))
			throw ELibMCDriver_ScanLabInterfaceException (LIBMCDRIVER_SCANLAB_ERROR_INVALIDPARAM);
		if ( (!pFPGADataBuffer) && (nFPGADataBufferSize>0))
			throw ELibMCDriver_ScanLabInterfaceException (LIBMCDRIVER_SCANLAB_ERROR_INVALIDPARAM);
		if ( (!pAuxiliaryDataBuffer) && (nAuxiliaryDataBufferSize>0))
			throw ELibMCDriver_ScanLabInterfaceException (LIBMCDRIVER_SCANLAB_ERROR_INVALIDPARAM);
		IDriver_ScanLab_RTC6* pIDriver_ScanLab_RTC6 = dynamic_cast<IDriver_ScanLab_RTC6*>(pIBaseClass);
		if (!pIDriver_ScanLab_RTC6)
			throw ELibMCDriver_ScanLabInterfaceException(LIBMCDRIVER_SCANLAB_ERROR_INVALIDCAST);
		
		pIDriver_ScanLab_RTC6->LoadCustomFirmware(nFirmwareDataBufferSize, pFirmwareDataBuffer, nFPGADataBufferSize, pFPGADataBuffer, nAuxiliaryDataBufferSize, pAuxiliaryDataBuffer);

		return LIBMCDRIVER_SCANLAB_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabResult libmcdriver_scanlab_driver_scanlab_rtc6_setcorrectionfile(LibMCDriver_ScanLab_Driver_ScanLab_RTC6 pDriver_ScanLab_RTC6, LibMCDriver_ScanLab_uint64 nCorrectionFileBufferSize, const LibMCDriver_ScanLab_uint8 * pCorrectionFileBuffer, LibMCDriver_ScanLab_uint32 nTableNumber, LibMCDriver_ScanLab_uint32 nDimension, LibMCDriver_ScanLab_uint32 nTableNumberHeadA, LibMCDriver_ScanLab_uint32 nTableNumberHeadB)
{
	IBase* pIBaseClass = (IBase *)pDriver_ScanLab_RTC6;

	try {
		if ( (!pCorrectionFileBuffer) && (nCorrectionFileBufferSize>0))
			throw ELibMCDriver_ScanLabInterfaceException (LIBMCDRIVER_SCANLAB_ERROR_INVALIDPARAM);
		IDriver_ScanLab_RTC6* pIDriver_ScanLab_RTC6 = dynamic_cast<IDriver_ScanLab_RTC6*>(pIBaseClass);
		if (!pIDriver_ScanLab_RTC6)
			throw ELibMCDriver_ScanLabInterfaceException(LIBMCDRIVER_SCANLAB_ERROR_INVALIDCAST);
		
		pIDriver_ScanLab_RTC6->SetCorrectionFile(nCorrectionFileBufferSize, pCorrectionFileBuffer, nTableNumber, nDimension, nTableNumberHeadA, nTableNumberHeadB);

		return LIBMCDRIVER_SCANLAB_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabResult libmcdriver_scanlab_driver_scanlab_rtc6_configurelasermode(LibMCDriver_ScanLab_Driver_ScanLab_RTC6 pDriver_ScanLab_RTC6, eLibMCDriver_ScanLabLaserMode eLaserMode, eLibMCDriver_ScanLabLaserPort eLaserPort, LibMCDriver_ScanLab_double dMaxLaserPower, bool bFinishLaserPulseAfterOn, bool bPhaseShiftOfLaserSignal, bool bLaserOnSignalLowActive, bool bLaserHalfSignalsLowActive, bool bSetDigitalInOneHighActive, bool bOutputSynchronizationActive)
{
	IBase* pIBaseClass = (IBase *)pDriver_ScanLab_RTC6;

	try {
		IDriver_ScanLab_RTC6* pIDriver_ScanLab_RTC6 = dynamic_cast<IDriver_ScanLab_RTC6*>(pIBaseClass);
		if (!pIDriver_ScanLab_RTC6)
			throw ELibMCDriver_ScanLabInterfaceException(LIBMCDRIVER_SCANLAB_ERROR_INVALIDCAST);
		
		pIDriver_ScanLab_RTC6->ConfigureLaserMode(eLaserMode, eLaserPort, dMaxLaserPower, bFinishLaserPulseAfterOn, bPhaseShiftOfLaserSignal, bLaserOnSignalLowActive, bLaserHalfSignalsLowActive, bSetDigitalInOneHighActive, bOutputSynchronizationActive);

		return LIBMCDRIVER_SCANLAB_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabResult libmcdriver_scanlab_driver_scanlab_rtc6_configuredelays(LibMCDriver_ScanLab_Driver_ScanLab_RTC6 pDriver_ScanLab_RTC6, LibMCDriver_ScanLab_double dLaserOnDelay, LibMCDriver_ScanLab_double dLaserOffDelay, LibMCDriver_ScanLab_double dMarkDelay, LibMCDriver_ScanLab_double dJumpDelay, LibMCDriver_ScanLab_double dPolygonDelay)
{
	IBase* pIBaseClass = (IBase *)pDriver_ScanLab_RTC6;

	try {
		IDriver_ScanLab_RTC6* pIDriver_ScanLab_RTC6 = dynamic_cast<IDriver_ScanLab_RTC6*>(pIBaseClass);
		if (!pIDriver_ScanLab_RTC6)
			throw ELibMCDriver_ScanLabInterfaceException(LIBMCDRIVER_SCANLAB_ERROR_INVALIDCAST);
		
		pIDriver_ScanLab_RTC6->ConfigureDelays(dLaserOnDelay, dLaserOffDelay, dMarkDelay, dJumpDelay, dPolygonDelay);

		return LIBMCDRIVER_SCANLAB_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabResult libmcdriver_scanlab_driver_scanlab_rtc6_drawlayer(LibMCDriver_ScanLab_Driver_ScanLab_RTC6 pDriver_ScanLab_RTC6, const char * pStreamUUID, LibMCDriver_ScanLab_uint32 nLayerIndex)
{
	IBase* pIBaseClass = (IBase *)pDriver_ScanLab_RTC6;

	try {
		if (pStreamUUID == nullptr)
			throw ELibMCDriver_ScanLabInterfaceException (LIBMCDRIVER_SCANLAB_ERROR_INVALIDPARAM);
		std::string sStreamUUID(pStreamUUID);
		IDriver_ScanLab_RTC6* pIDriver_ScanLab_RTC6 = dynamic_cast<IDriver_ScanLab_RTC6*>(pIBaseClass);
		if (!pIDriver_ScanLab_RTC6)
			throw ELibMCDriver_ScanLabInterfaceException(LIBMCDRIVER_SCANLAB_ERROR_INVALIDCAST);
		
		pIDriver_ScanLab_RTC6->DrawLayer(sStreamUUID, nLayerIndex);

		return LIBMCDRIVER_SCANLAB_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabResult libmcdriver_scanlab_driver_scanlab_rtc6_setcommunicationtimeouts(LibMCDriver_ScanLab_Driver_ScanLab_RTC6 pDriver_ScanLab_RTC6, LibMCDriver_ScanLab_double dInitialTimeout, LibMCDriver_ScanLab_double dMaxTimeout, LibMCDriver_ScanLab_double dMultiplier)
{
	IBase* pIBaseClass = (IBase *)pDriver_ScanLab_RTC6;

	try {
		IDriver_ScanLab_RTC6* pIDriver_ScanLab_RTC6 = dynamic_cast<IDriver_ScanLab_RTC6*>(pIBaseClass);
		if (!pIDriver_ScanLab_RTC6)
			throw ELibMCDriver_ScanLabInterfaceException(LIBMCDRIVER_SCANLAB_ERROR_INVALIDCAST);
		
		pIDriver_ScanLab_RTC6->SetCommunicationTimeouts(dInitialTimeout, dMaxTimeout, dMultiplier);

		return LIBMCDRIVER_SCANLAB_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabResult libmcdriver_scanlab_driver_scanlab_rtc6_getcommunicationtimeouts(LibMCDriver_ScanLab_Driver_ScanLab_RTC6 pDriver_ScanLab_RTC6, LibMCDriver_ScanLab_double * pInitialTimeout, LibMCDriver_ScanLab_double * pMaxTimeout, LibMCDriver_ScanLab_double * pMultiplier)
{
	IBase* pIBaseClass = (IBase *)pDriver_ScanLab_RTC6;

	try {
		if (!pInitialTimeout)
			throw ELibMCDriver_ScanLabInterfaceException (LIBMCDRIVER_SCANLAB_ERROR_INVALIDPARAM);
		if (!pMaxTimeout)
			throw ELibMCDriver_ScanLabInterfaceException (LIBMCDRIVER_SCANLAB_ERROR_INVALIDPARAM);
		if (!pMultiplier)
			throw ELibMCDriver_ScanLabInterfaceException (LIBMCDRIVER_SCANLAB_ERROR_INVALIDPARAM);
		IDriver_ScanLab_RTC6* pIDriver_ScanLab_RTC6 = dynamic_cast<IDriver_ScanLab_RTC6*>(pIBaseClass);
		if (!pIDriver_ScanLab_RTC6)
			throw ELibMCDriver_ScanLabInterfaceException(LIBMCDRIVER_SCANLAB_ERROR_INVALIDCAST);
		
		pIDriver_ScanLab_RTC6->GetCommunicationTimeouts(*pInitialTimeout, *pMaxTimeout, *pMultiplier);

		return LIBMCDRIVER_SCANLAB_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}



/*************************************************************************************************************************
 Function table lookup implementation
**************************************************************************************************************************/

LibMCDriver_ScanLabResult LibMCDriver_ScanLab::Impl::LibMCDriver_ScanLab_GetProcAddress (const char * pProcName, void ** ppProcAddress)
{
	if (pProcName == nullptr)
		return LIBMCDRIVER_SCANLAB_ERROR_INVALIDPARAM;
	if (ppProcAddress == nullptr)
		return LIBMCDRIVER_SCANLAB_ERROR_INVALIDPARAM;
	*ppProcAddress = nullptr;
	std::string sProcName (pProcName);
	
	if (sProcName == "libmcdriver_scanlab_driver_configure") 
		*ppProcAddress = (void*) &libmcdriver_scanlab_driver_configure;
	if (sProcName == "libmcdriver_scanlab_driver_getname") 
		*ppProcAddress = (void*) &libmcdriver_scanlab_driver_getname;
	if (sProcName == "libmcdriver_scanlab_driver_gettype") 
		*ppProcAddress = (void*) &libmcdriver_scanlab_driver_gettype;
	if (sProcName == "libmcdriver_scanlab_driver_getversion") 
		*ppProcAddress = (void*) &libmcdriver_scanlab_driver_getversion;
	if (sProcName == "libmcdriver_scanlab_driver_queryparameters") 
		*ppProcAddress = (void*) &libmcdriver_scanlab_driver_queryparameters;
	if (sProcName == "libmcdriver_scanlab_driver_queryparametersex") 
		*ppProcAddress = (void*) &libmcdriver_scanlab_driver_queryparametersex;
	if (sProcName == "libmcdriver_scanlab_rtccontext_loadfirmware") 
		*ppProcAddress = (void*) &libmcdriver_scanlab_rtccontext_loadfirmware;
	if (sProcName == "libmcdriver_scanlab_rtccontext_loadcorrectionfile") 
		*ppProcAddress = (void*) &libmcdriver_scanlab_rtccontext_loadcorrectionfile;
	if (sProcName == "libmcdriver_scanlab_rtccontext_selectcorrectiontable") 
		*ppProcAddress = (void*) &libmcdriver_scanlab_rtccontext_selectcorrectiontable;
	if (sProcName == "libmcdriver_scanlab_rtccontext_configurelists") 
		*ppProcAddress = (void*) &libmcdriver_scanlab_rtccontext_configurelists;
	if (sProcName == "libmcdriver_scanlab_rtccontext_setlasermode") 
		*ppProcAddress = (void*) &libmcdriver_scanlab_rtccontext_setlasermode;
	if (sProcName == "libmcdriver_scanlab_rtccontext_disableautolasercontrol") 
		*ppProcAddress = (void*) &libmcdriver_scanlab_rtccontext_disableautolasercontrol;
	if (sProcName == "libmcdriver_scanlab_rtccontext_setlasercontrolparameters") 
		*ppProcAddress = (void*) &libmcdriver_scanlab_rtccontext_setlasercontrolparameters;
	if (sProcName == "libmcdriver_scanlab_rtccontext_setlaserpulsesinbits") 
		*ppProcAddress = (void*) &libmcdriver_scanlab_rtccontext_setlaserpulsesinbits;
	if (sProcName == "libmcdriver_scanlab_rtccontext_setlaserpulsesinmicroseconds") 
		*ppProcAddress = (void*) &libmcdriver_scanlab_rtccontext_setlaserpulsesinmicroseconds;
	if (sProcName == "libmcdriver_scanlab_rtccontext_setstandbyinbits") 
		*ppProcAddress = (void*) &libmcdriver_scanlab_rtccontext_setstandbyinbits;
	if (sProcName == "libmcdriver_scanlab_rtccontext_setstandbyinmicroseconds") 
		*ppProcAddress = (void*) &libmcdriver_scanlab_rtccontext_setstandbyinmicroseconds;
	if (sProcName == "libmcdriver_scanlab_rtccontext_getserialnumber") 
		*ppProcAddress = (void*) &libmcdriver_scanlab_rtccontext_getserialnumber;
	if (sProcName == "libmcdriver_scanlab_rtccontext_setstartlist") 
		*ppProcAddress = (void*) &libmcdriver_scanlab_rtccontext_setstartlist;
	if (sProcName == "libmcdriver_scanlab_rtccontext_setendoflist") 
		*ppProcAddress = (void*) &libmcdriver_scanlab_rtccontext_setendoflist;
	if (sProcName == "libmcdriver_scanlab_rtccontext_executelist") 
		*ppProcAddress = (void*) &libmcdriver_scanlab_rtccontext_executelist;
	if (sProcName == "libmcdriver_scanlab_rtccontext_setautochangepos") 
		*ppProcAddress = (void*) &libmcdriver_scanlab_rtccontext_setautochangepos;
	if (sProcName == "libmcdriver_scanlab_rtccontext_setdelays") 
		*ppProcAddress = (void*) &libmcdriver_scanlab_rtccontext_setdelays;
	if (sProcName == "libmcdriver_scanlab_rtccontext_setlaserdelaysinmicroseconds") 
		*ppProcAddress = (void*) &libmcdriver_scanlab_rtccontext_setlaserdelaysinmicroseconds;
	if (sProcName == "libmcdriver_scanlab_rtccontext_setlaserdelaysinbits") 
		*ppProcAddress = (void*) &libmcdriver_scanlab_rtccontext_setlaserdelaysinbits;
	if (sProcName == "libmcdriver_scanlab_rtccontext_drawpolyline") 
		*ppProcAddress = (void*) &libmcdriver_scanlab_rtccontext_drawpolyline;
	if (sProcName == "libmcdriver_scanlab_rtccontext_drawhatches") 
		*ppProcAddress = (void*) &libmcdriver_scanlab_rtccontext_drawhatches;
	if (sProcName == "libmcdriver_scanlab_rtccontext_addcustomdelay") 
		*ppProcAddress = (void*) &libmcdriver_scanlab_rtccontext_addcustomdelay;
	if (sProcName == "libmcdriver_scanlab_rtccontext_getcorrectionfactor") 
		*ppProcAddress = (void*) &libmcdriver_scanlab_rtccontext_getcorrectionfactor;
	if (sProcName == "libmcdriver_scanlab_rtccontext_getstatus") 
		*ppProcAddress = (void*) &libmcdriver_scanlab_rtccontext_getstatus;
	if (sProcName == "libmcdriver_scanlab_rtccontext_getheadstatus") 
		*ppProcAddress = (void*) &libmcdriver_scanlab_rtccontext_getheadstatus;
	if (sProcName == "libmcdriver_scanlab_rtccontext_getstatevalues") 
		*ppProcAddress = (void*) &libmcdriver_scanlab_rtccontext_getstatevalues;
	if (sProcName == "libmcdriver_scanlab_rtccontext_getinputpointer") 
		*ppProcAddress = (void*) &libmcdriver_scanlab_rtccontext_getinputpointer;
	if (sProcName == "libmcdriver_scanlab_rtccontext_getrtcversion") 
		*ppProcAddress = (void*) &libmcdriver_scanlab_rtccontext_getrtcversion;
	if (sProcName == "libmcdriver_scanlab_rtccontext_setcommunicationtimeouts") 
		*ppProcAddress = (void*) &libmcdriver_scanlab_rtccontext_setcommunicationtimeouts;
	if (sProcName == "libmcdriver_scanlab_rtccontext_getcommunicationtimeouts") 
		*ppProcAddress = (void*) &libmcdriver_scanlab_rtccontext_getcommunicationtimeouts;
	if (sProcName == "libmcdriver_scanlab_rtccontext_initializeforoie") 
		*ppProcAddress = (void*) &libmcdriver_scanlab_rtccontext_initializeforoie;
	if (sProcName == "libmcdriver_scanlab_rtccontext_enableoie") 
		*ppProcAddress = (void*) &libmcdriver_scanlab_rtccontext_enableoie;
	if (sProcName == "libmcdriver_scanlab_rtccontext_disableoie") 
		*ppProcAddress = (void*) &libmcdriver_scanlab_rtccontext_disableoie;
	if (sProcName == "libmcdriver_scanlab_rtccontext_startoiemeasurement") 
		*ppProcAddress = (void*) &libmcdriver_scanlab_rtccontext_startoiemeasurement;
	if (sProcName == "libmcdriver_scanlab_rtccontext_stopoiemeasurement") 
		*ppProcAddress = (void*) &libmcdriver_scanlab_rtccontext_stopoiemeasurement;
	if (sProcName == "libmcdriver_scanlab_rtcselector_searchcards") 
		*ppProcAddress = (void*) &libmcdriver_scanlab_rtcselector_searchcards;
	if (sProcName == "libmcdriver_scanlab_rtcselector_searchcardsbyrange") 
		*ppProcAddress = (void*) &libmcdriver_scanlab_rtcselector_searchcardsbyrange;
	if (sProcName == "libmcdriver_scanlab_rtcselector_getcardcount") 
		*ppProcAddress = (void*) &libmcdriver_scanlab_rtcselector_getcardcount;
	if (sProcName == "libmcdriver_scanlab_rtcselector_getethernetcardcount") 
		*ppProcAddress = (void*) &libmcdriver_scanlab_rtcselector_getethernetcardcount;
	if (sProcName == "libmcdriver_scanlab_rtcselector_acquirecard") 
		*ppProcAddress = (void*) &libmcdriver_scanlab_rtcselector_acquirecard;
	if (sProcName == "libmcdriver_scanlab_rtcselector_acquirecardbyserial") 
		*ppProcAddress = (void*) &libmcdriver_scanlab_rtcselector_acquirecardbyserial;
	if (sProcName == "libmcdriver_scanlab_rtcselector_acquireethernetcard") 
		*ppProcAddress = (void*) &libmcdriver_scanlab_rtcselector_acquireethernetcard;
	if (sProcName == "libmcdriver_scanlab_rtcselector_acquireethernetcardbyserial") 
		*ppProcAddress = (void*) &libmcdriver_scanlab_rtcselector_acquireethernetcardbyserial;
	if (sProcName == "libmcdriver_scanlab_driver_scanlab_loadsdk") 
		*ppProcAddress = (void*) &libmcdriver_scanlab_driver_scanlab_loadsdk;
	if (sProcName == "libmcdriver_scanlab_driver_scanlab_loadcustomsdk") 
		*ppProcAddress = (void*) &libmcdriver_scanlab_driver_scanlab_loadcustomsdk;
	if (sProcName == "libmcdriver_scanlab_driver_scanlab_creatertcselector") 
		*ppProcAddress = (void*) &libmcdriver_scanlab_driver_scanlab_creatertcselector;
	if (sProcName == "libmcdriver_scanlab_driver_scanlab_rtc6_settosimulationmode") 
		*ppProcAddress = (void*) &libmcdriver_scanlab_driver_scanlab_rtc6_settosimulationmode;
	if (sProcName == "libmcdriver_scanlab_driver_scanlab_rtc6_issimulationmode") 
		*ppProcAddress = (void*) &libmcdriver_scanlab_driver_scanlab_rtc6_issimulationmode;
	if (sProcName == "libmcdriver_scanlab_driver_scanlab_rtc6_initialise") 
		*ppProcAddress = (void*) &libmcdriver_scanlab_driver_scanlab_rtc6_initialise;
	if (sProcName == "libmcdriver_scanlab_driver_scanlab_rtc6_getcontext") 
		*ppProcAddress = (void*) &libmcdriver_scanlab_driver_scanlab_rtc6_getcontext;
	if (sProcName == "libmcdriver_scanlab_driver_scanlab_rtc6_getselector") 
		*ppProcAddress = (void*) &libmcdriver_scanlab_driver_scanlab_rtc6_getselector;
	if (sProcName == "libmcdriver_scanlab_driver_scanlab_rtc6_loadfirmware") 
		*ppProcAddress = (void*) &libmcdriver_scanlab_driver_scanlab_rtc6_loadfirmware;
	if (sProcName == "libmcdriver_scanlab_driver_scanlab_rtc6_loadcustomfirmware") 
		*ppProcAddress = (void*) &libmcdriver_scanlab_driver_scanlab_rtc6_loadcustomfirmware;
	if (sProcName == "libmcdriver_scanlab_driver_scanlab_rtc6_setcorrectionfile") 
		*ppProcAddress = (void*) &libmcdriver_scanlab_driver_scanlab_rtc6_setcorrectionfile;
	if (sProcName == "libmcdriver_scanlab_driver_scanlab_rtc6_configurelasermode") 
		*ppProcAddress = (void*) &libmcdriver_scanlab_driver_scanlab_rtc6_configurelasermode;
	if (sProcName == "libmcdriver_scanlab_driver_scanlab_rtc6_configuredelays") 
		*ppProcAddress = (void*) &libmcdriver_scanlab_driver_scanlab_rtc6_configuredelays;
	if (sProcName == "libmcdriver_scanlab_driver_scanlab_rtc6_drawlayer") 
		*ppProcAddress = (void*) &libmcdriver_scanlab_driver_scanlab_rtc6_drawlayer;
	if (sProcName == "libmcdriver_scanlab_driver_scanlab_rtc6_setcommunicationtimeouts") 
		*ppProcAddress = (void*) &libmcdriver_scanlab_driver_scanlab_rtc6_setcommunicationtimeouts;
	if (sProcName == "libmcdriver_scanlab_driver_scanlab_rtc6_getcommunicationtimeouts") 
		*ppProcAddress = (void*) &libmcdriver_scanlab_driver_scanlab_rtc6_getcommunicationtimeouts;
	if (sProcName == "libmcdriver_scanlab_getversion") 
		*ppProcAddress = (void*) &libmcdriver_scanlab_getversion;
	if (sProcName == "libmcdriver_scanlab_getlasterror") 
		*ppProcAddress = (void*) &libmcdriver_scanlab_getlasterror;
	if (sProcName == "libmcdriver_scanlab_releaseinstance") 
		*ppProcAddress = (void*) &libmcdriver_scanlab_releaseinstance;
	if (sProcName == "libmcdriver_scanlab_acquireinstance") 
		*ppProcAddress = (void*) &libmcdriver_scanlab_acquireinstance;
	if (sProcName == "libmcdriver_scanlab_injectcomponent") 
		*ppProcAddress = (void*) &libmcdriver_scanlab_injectcomponent;
	if (sProcName == "libmcdriver_scanlab_getsymbollookupmethod") 
		*ppProcAddress = (void*) &libmcdriver_scanlab_getsymbollookupmethod;
	if (sProcName == "libmcdriver_scanlab_createdriver") 
		*ppProcAddress = (void*) &libmcdriver_scanlab_createdriver;
	
	if (*ppProcAddress == nullptr) 
		return LIBMCDRIVER_SCANLAB_ERROR_COULDNOTFINDLIBRARYEXPORT;
	return LIBMCDRIVER_SCANLAB_SUCCESS;
}

/*************************************************************************************************************************
 Global functions implementation
**************************************************************************************************************************/
LibMCDriver_ScanLabResult libmcdriver_scanlab_getversion(LibMCDriver_ScanLab_uint32 * pMajor, LibMCDriver_ScanLab_uint32 * pMinor, LibMCDriver_ScanLab_uint32 * pMicro)
{
	IBase* pIBaseClass = nullptr;

	try {
		if (!pMajor)
			throw ELibMCDriver_ScanLabInterfaceException (LIBMCDRIVER_SCANLAB_ERROR_INVALIDPARAM);
		if (!pMinor)
			throw ELibMCDriver_ScanLabInterfaceException (LIBMCDRIVER_SCANLAB_ERROR_INVALIDPARAM);
		if (!pMicro)
			throw ELibMCDriver_ScanLabInterfaceException (LIBMCDRIVER_SCANLAB_ERROR_INVALIDPARAM);
		CWrapper::GetVersion(*pMajor, *pMinor, *pMicro);

		return LIBMCDRIVER_SCANLAB_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabResult libmcdriver_scanlab_getlasterror(LibMCDriver_ScanLab_Base pInstance, const LibMCDriver_ScanLab_uint32 nErrorMessageBufferSize, LibMCDriver_ScanLab_uint32* pErrorMessageNeededChars, char * pErrorMessageBuffer, bool * pHasError)
{
	IBase* pIBaseClass = nullptr;

	try {
		if ( (!pErrorMessageBuffer) && !(pErrorMessageNeededChars) )
			throw ELibMCDriver_ScanLabInterfaceException (LIBMCDRIVER_SCANLAB_ERROR_INVALIDPARAM);
		if (pHasError == nullptr)
			throw ELibMCDriver_ScanLabInterfaceException (LIBMCDRIVER_SCANLAB_ERROR_INVALIDPARAM);
		IBase* pIBaseClassInstance = (IBase *)pInstance;
		IBase* pIInstance = dynamic_cast<IBase*>(pIBaseClassInstance);
		if (!pIInstance)
			throw ELibMCDriver_ScanLabInterfaceException (LIBMCDRIVER_SCANLAB_ERROR_INVALIDCAST);
		
		std::string sErrorMessage("");
		*pHasError = CWrapper::GetLastError(pIInstance, sErrorMessage);

		if (pErrorMessageNeededChars)
			*pErrorMessageNeededChars = (LibMCDriver_ScanLab_uint32) (sErrorMessage.size()+1);
		if (pErrorMessageBuffer) {
			if (sErrorMessage.size() >= nErrorMessageBufferSize)
				throw ELibMCDriver_ScanLabInterfaceException (LIBMCDRIVER_SCANLAB_ERROR_BUFFERTOOSMALL);
			for (size_t iErrorMessage = 0; iErrorMessage < sErrorMessage.size(); iErrorMessage++)
				pErrorMessageBuffer[iErrorMessage] = sErrorMessage[iErrorMessage];
			pErrorMessageBuffer[sErrorMessage.size()] = 0;
		}
		return LIBMCDRIVER_SCANLAB_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabResult libmcdriver_scanlab_releaseinstance(LibMCDriver_ScanLab_Base pInstance)
{
	IBase* pIBaseClass = nullptr;

	try {
		IBase* pIBaseClassInstance = (IBase *)pInstance;
		IBase* pIInstance = dynamic_cast<IBase*>(pIBaseClassInstance);
		if (!pIInstance)
			throw ELibMCDriver_ScanLabInterfaceException (LIBMCDRIVER_SCANLAB_ERROR_INVALIDCAST);
		
		CWrapper::ReleaseInstance(pIInstance);

		return LIBMCDRIVER_SCANLAB_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabResult libmcdriver_scanlab_acquireinstance(LibMCDriver_ScanLab_Base pInstance)
{
	IBase* pIBaseClass = nullptr;

	try {
		IBase* pIBaseClassInstance = (IBase *)pInstance;
		IBase* pIInstance = dynamic_cast<IBase*>(pIBaseClassInstance);
		if (!pIInstance)
			throw ELibMCDriver_ScanLabInterfaceException (LIBMCDRIVER_SCANLAB_ERROR_INVALIDCAST);
		
		CWrapper::AcquireInstance(pIInstance);

		return LIBMCDRIVER_SCANLAB_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabResult libmcdriver_scanlab_injectcomponent(const char * pNameSpace, LibMCDriver_ScanLab_pvoid pSymbolAddressMethod)
{
	IBase* pIBaseClass = nullptr;

	try {
		if (pNameSpace == nullptr)
			throw ELibMCDriver_ScanLabInterfaceException (LIBMCDRIVER_SCANLAB_ERROR_INVALIDPARAM);
		std::string sNameSpace(pNameSpace);
		
		bool bNameSpaceFound = false;
		
		if (sNameSpace == "LibMCEnv") {
			if (CWrapper::sPLibMCEnvWrapper.get() != nullptr) {
				throw ELibMCDriver_ScanLabInterfaceException(LIBMCDRIVER_SCANLAB_ERROR_COULDNOTLOADLIBRARY);
			}
			CWrapper::sPLibMCEnvWrapper = LibMCEnv::CWrapper::loadLibraryFromSymbolLookupMethod(pSymbolAddressMethod);
			bNameSpaceFound = true;
		}
		
		if (!bNameSpaceFound)
			throw ELibMCDriver_ScanLabInterfaceException(LIBMCDRIVER_SCANLAB_ERROR_COULDNOTLOADLIBRARY);
		
		return LIBMCDRIVER_SCANLAB_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabResult libmcdriver_scanlab_getsymbollookupmethod(LibMCDriver_ScanLab_pvoid * pSymbolLookupMethod)
{
	IBase* pIBaseClass = nullptr;

	try {
		if (pSymbolLookupMethod == nullptr)
			throw ELibMCDriver_ScanLabInterfaceException (LIBMCDRIVER_SCANLAB_ERROR_INVALIDPARAM);
		*pSymbolLookupMethod = (void*)&LibMCDriver_ScanLab::Impl::LibMCDriver_ScanLab_GetProcAddress;
		return LIBMCDRIVER_SCANLAB_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabResult libmcdriver_scanlab_createdriver(const char * pName, const char * pType, LibMCEnv_DriverEnvironment pDriverEnvironment, LibMCDriver_ScanLab_Driver * pInstance)
{
	IBase* pIBaseClass = nullptr;

	try {
		if (pName == nullptr)
			throw ELibMCDriver_ScanLabInterfaceException (LIBMCDRIVER_SCANLAB_ERROR_INVALIDPARAM);
		if (pType == nullptr)
			throw ELibMCDriver_ScanLabInterfaceException (LIBMCDRIVER_SCANLAB_ERROR_INVALIDPARAM);
		if (pInstance == nullptr)
			throw ELibMCDriver_ScanLabInterfaceException (LIBMCDRIVER_SCANLAB_ERROR_INVALIDPARAM);
		std::string sName(pName);
		std::string sType(pType);
		LibMCEnv::PDriverEnvironment pIDriverEnvironment = std::make_shared<LibMCEnv::CDriverEnvironment>(CWrapper::sPLibMCEnvWrapper.get(), pDriverEnvironment);
		CWrapper::sPLibMCEnvWrapper->AcquireInstance(pIDriverEnvironment.get());
		if (!pIDriverEnvironment)
			throw ELibMCDriver_ScanLabInterfaceException (LIBMCDRIVER_SCANLAB_ERROR_INVALIDCAST);
		
		IBase* pBaseInstance(nullptr);
		pBaseInstance = CWrapper::CreateDriver(sName, sType, pIDriverEnvironment);

		*pInstance = (IBase*)(pBaseInstance);
		return LIBMCDRIVER_SCANLAB_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}


