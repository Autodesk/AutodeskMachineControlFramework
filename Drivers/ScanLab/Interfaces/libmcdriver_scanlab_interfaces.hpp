/*++

Copyright (C) 2020 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.8.0-develop.

Abstract: This is an autogenerated C++ header file in order to allow easy
development of MC Driver ScanLab RTC. The implementer of MC Driver ScanLab RTC needs to
derive concrete classes from the abstract classes in this header.

Interface version: 2.0.0

*/


#ifndef __LIBMCDRIVER_SCANLAB_CPPINTERFACES
#define __LIBMCDRIVER_SCANLAB_CPPINTERFACES

#include <string>
#include <memory>

#include "libmcdriver_scanlab_types.hpp"


#include "libmcenv_dynamic.hpp"

namespace LibMCDriver_ScanLab {
namespace Impl {

/**
 Forward declarations of class interfaces
*/
class IBase;
class IDriver;
class IUARTConnection;
class IRTCJob;
class IRTCRecording;
class IRTCContext;
class IRTCSelector;
class IDriver_ScanLab;
class IDriver_ScanLab_RTC6;
class IDriver_ScanLab_RTC6xN;



/*************************************************************************************************************************
 Parameter Cache definitions
**************************************************************************************************************************/

class ParameterCache {
	public:
		virtual ~ParameterCache() {}
};

template <class T1> class ParameterCache_1 : public ParameterCache {
	private:
		T1 m_param1;
	public:
		ParameterCache_1 (const T1 & param1)
			: m_param1 (param1)
		{
		}

		void retrieveData (T1 & param1)
		{
			param1 = m_param1;
		}
};

template <class T1, class T2> class ParameterCache_2 : public ParameterCache {
	private:
		T1 m_param1;
		T2 m_param2;
	public:
		ParameterCache_2 (const T1 & param1, const T2 & param2)
			: m_param1 (param1), m_param2 (param2)
		{
		}

		void retrieveData (T1 & param1, T2 & param2)
		{
			param1 = m_param1;
			param2 = m_param2;
		}
};

template <class T1, class T2, class T3> class ParameterCache_3 : public ParameterCache {
	private:
		T1 m_param1;
		T2 m_param2;
		T3 m_param3;
	public:
		ParameterCache_3 (const T1 & param1, const T2 & param2, const T3 & param3)
			: m_param1 (param1), m_param2 (param2), m_param3 (param3)
		{
		}

		void retrieveData (T1 & param1, T2 & param2, T3 & param3)
		{
			param1 = m_param1;
			param2 = m_param2;
			param3 = m_param3;
		}
};

template <class T1, class T2, class T3, class T4> class ParameterCache_4 : public ParameterCache {
	private:
		T1 m_param1;
		T2 m_param2;
		T3 m_param3;
		T4 m_param4;
	public:
		ParameterCache_4 (const T1 & param1, const T2 & param2, const T3 & param3, const T4 & param4)
			: m_param1 (param1), m_param2 (param2), m_param3 (param3), m_param4 (param4)
		{
		}

		void retrieveData (T1 & param1, T2 & param2, T3 & param3, T4 & param4)
		{
			param1 = m_param1;
			param2 = m_param2;
			param3 = m_param3;
			param4 = m_param4;
		}
};

template <class T1, class T2, class T3, class T4, class T5> class ParameterCache_5 : public ParameterCache {
	private:
		T1 m_param1;
		T2 m_param2;
		T3 m_param3;
		T4 m_param4;
		T5 m_param5;
	public:
		ParameterCache_5 (const T1 & param1, const T2 & param2, const T3 & param3, const T4 & param4, const T5 & param5)
			: m_param1 (param1), m_param2 (param2), m_param3 (param3), m_param4 (param4), m_param5 (param5)
		{
		}

		void retrieveData (T1 & param1, T2 & param2, T3 & param3, T4 & param4, T5 & param5)
		{
			param1 = m_param1;
			param2 = m_param2;
			param3 = m_param3;
			param4 = m_param4;
			param5 = m_param5;
		}
};

template <class T1, class T2, class T3, class T4, class T5, class T6> class ParameterCache_6 : public ParameterCache {
	private:
		T1 m_param1;
		T2 m_param2;
		T3 m_param3;
		T4 m_param4;
		T5 m_param5;
		T6 m_param6;
	public:
		ParameterCache_6 (const T1 & param1, const T2 & param2, const T3 & param3, const T4 & param4, const T5 & param5, const T6 & param6)
			: m_param1 (param1), m_param2 (param2), m_param3 (param3), m_param4 (param4), m_param5 (param5), m_param6 (param6)
		{
		}

		void retrieveData (T1 & param1, T2 & param2, T3 & param3, T4 & param4, T5 & param5, T6 & param6)
		{
			param1 = m_param1;
			param2 = m_param2;
			param3 = m_param3;
			param4 = m_param4;
			param5 = m_param5;
			param6 = m_param6;
		}
};

template <class T1, class T2, class T3, class T4, class T5, class T6, class T7> class ParameterCache_7 : public ParameterCache {
	private:
		T1 m_param1;
		T2 m_param2;
		T3 m_param3;
		T4 m_param4;
		T5 m_param5;
		T6 m_param6;
		T7 m_param7;
	public:
		ParameterCache_7 (const T1 & param1, const T2 & param2, const T3 & param3, const T4 & param4, const T5 & param5, const T6 & param6, const T7 & param7)
			: m_param1 (param1), m_param2 (param2), m_param3 (param3), m_param4 (param4), m_param5 (param5), m_param6 (param6), m_param7 (param7)
		{
		}

		void retrieveData (T1 & param1, T2 & param2, T3 & param3, T4 & param4, T5 & param5, T6 & param6, T7 & param7)
		{
			param1 = m_param1;
			param2 = m_param2;
			param3 = m_param3;
			param4 = m_param4;
			param5 = m_param5;
			param6 = m_param6;
			param7 = m_param7;
		}
};

template <class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8> class ParameterCache_8 : public ParameterCache {
	private:
		T1 m_param1;
		T2 m_param2;
		T3 m_param3;
		T4 m_param4;
		T5 m_param5;
		T6 m_param6;
		T7 m_param7;
		T8 m_param8;
	public:
		ParameterCache_8 (const T1 & param1, const T2 & param2, const T3 & param3, const T4 & param4, const T5 & param5, const T6 & param6, const T7 & param7, const T8 & param8)
			: m_param1 (param1), m_param2 (param2), m_param3 (param3), m_param4 (param4), m_param5 (param5), m_param6 (param6), m_param7 (param7), m_param8 (param8)
		{
		}

		void retrieveData (T1 & param1, T2 & param2, T3 & param3, T4 & param4, T5 & param5, T6 & param6, T7 & param7, T8 & param8)
		{
			param1 = m_param1;
			param2 = m_param2;
			param3 = m_param3;
			param4 = m_param4;
			param5 = m_param5;
			param6 = m_param6;
			param7 = m_param7;
			param8 = m_param8;
		}
};

template <class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9> class ParameterCache_9 : public ParameterCache {
	private:
		T1 m_param1;
		T2 m_param2;
		T3 m_param3;
		T4 m_param4;
		T5 m_param5;
		T6 m_param6;
		T7 m_param7;
		T8 m_param8;
		T9 m_param9;
	public:
		ParameterCache_9 (const T1 & param1, const T2 & param2, const T3 & param3, const T4 & param4, const T5 & param5, const T6 & param6, const T7 & param7, const T8 & param8, const T9 & param9)
			: m_param1 (param1), m_param2 (param2), m_param3 (param3), m_param4 (param4), m_param5 (param5), m_param6 (param6), m_param7 (param7), m_param8 (param8), m_param9 (param9)
		{
		}

		void retrieveData (T1 & param1, T2 & param2, T3 & param3, T4 & param4, T5 & param5, T6 & param6, T7 & param7, T8 & param8, T9 & param9)
		{
			param1 = m_param1;
			param2 = m_param2;
			param3 = m_param3;
			param4 = m_param4;
			param5 = m_param5;
			param6 = m_param6;
			param7 = m_param7;
			param8 = m_param8;
			param9 = m_param9;
		}
};


/*************************************************************************************************************************
 Class interface for Base 
**************************************************************************************************************************/

class IBase {
private:
	std::unique_ptr<ParameterCache> m_ParameterCache;
public:
	/**
	* IBase::~IBase - virtual destructor of IBase
	*/
	virtual ~IBase() {};

	/**
	* IBase::ReleaseBaseClassInterface - Releases ownership of a base class interface. Deletes the reference, if necessary.
	* @param[in] pIBase - The base class instance to release
	*/
	static void ReleaseBaseClassInterface(IBase* pIBase)
	{
		if (pIBase) {
			pIBase->DecRefCount();
		}
	};

	/**
	* IBase::AcquireBaseClassInterface - Acquires shared ownership of a base class interface.
	* @param[in] pIBase - The base class instance to acquire
	*/
	static void AcquireBaseClassInterface(IBase* pIBase)
	{
		if (pIBase) {
			pIBase->IncRefCount();
		}
	};


	/**
	* IBase::GetLastErrorMessage - Returns the last error registered of this class instance
	* @param[out] sErrorMessage - Message of the last error registered
	* @return Has an error been registered already
	*/
	virtual bool GetLastErrorMessage(std::string & sErrorMessage) = 0;

	/**
	* IBase::ClearErrorMessages - Clears all registered messages of this class instance
	*/
	virtual void ClearErrorMessages() = 0;

	/**
	* IBase::RegisterErrorMessage - Registers an error message with this class instance
	* @param[in] sErrorMessage - Error message to register
	*/
	virtual void RegisterErrorMessage(const std::string & sErrorMessage) = 0;

	/**
	* IBase::IncRefCount - Increases the reference count of a class instance
	*/
	virtual void IncRefCount() = 0;

	/**
	* IBase::DecRefCount - Decreases the reference count of a class instance and free releases it, if the last reference has been removed
	* @return Has the object been released
	*/
	virtual bool DecRefCount() = 0;

	/**
	* IBase::_setCache - set parameter cache of object
	*/
	void _setCache(ParameterCache * pCache)
	{
		m_ParameterCache.reset(pCache);
	}

	/**
	* IBase::_getCache - returns parameter cache of object
	*/
	ParameterCache* _getCache()
	{
		return m_ParameterCache.get();
	}

};


/**
 Definition of a shared pointer class for IBase
*/
template<class T>
class IBaseSharedPtr : public std::shared_ptr<T>
{
public:
	explicit IBaseSharedPtr(T* t = nullptr)
		: std::shared_ptr<T>(t, IBase::ReleaseBaseClassInterface)
	{
		t->IncRefCount();
	}

	// Reset function, as it also needs to properly set the deleter.
	void reset(T* t = nullptr)
	{
		std::shared_ptr<T>::reset(t, IBase::ReleaseBaseClassInterface);
	}

	// Get-function that increases the Base class's reference count
	T* getCoOwningPtr()
	{
		T* t = this->get();
		t->IncRefCount();
		return t;
	}
};


typedef IBaseSharedPtr<IBase> PIBase;


/*************************************************************************************************************************
 Class interface for Driver 
**************************************************************************************************************************/

class IDriver : public virtual IBase {
public:
	/**
	* IDriver::Configure - Configures a driver with its specific configuration data.
	* @param[in] sConfigurationString - Configuration data of driver.
	*/
	virtual void Configure(const std::string & sConfigurationString) = 0;

	/**
	* IDriver::GetName - returns the name identifier of the driver
	* @return Name of the driver.
	*/
	virtual std::string GetName() = 0;

	/**
	* IDriver::GetType - returns the type identifier of the driver
	* @return Type of the driver.
	*/
	virtual std::string GetType() = 0;

	/**
	* IDriver::GetVersion - returns the version identifiers of the driver
	* @param[out] nMajor - Major version.
	* @param[out] nMinor - Minor version.
	* @param[out] nMicro - Micro version.
	* @param[out] sBuild - Build identifier.
	*/
	virtual void GetVersion(LibMCDriver_ScanLab_uint32 & nMajor, LibMCDriver_ScanLab_uint32 & nMinor, LibMCDriver_ScanLab_uint32 & nMicro, std::string & sBuild) = 0;

	/**
	* IDriver::QueryParameters - Updates the driver parameters in the driver environment. Should only be called in the driver thread.
	*/
	virtual void QueryParameters() = 0;

	/**
	* IDriver::QueryParametersEx - Updates the driver parameters in the driver environment. Might be called out of thread. Implementation MUST be able to handle parallel calls.
	* @param[in] pDriverUpdateInstance - Status update instance.
	*/
	virtual void QueryParametersEx(LibMCEnv::PDriverStatusUpdateSession pDriverUpdateInstance) = 0;

};

typedef IBaseSharedPtr<IDriver> PIDriver;


/*************************************************************************************************************************
 Class interface for UARTConnection 
**************************************************************************************************************************/

class IUARTConnection : public virtual IBase {
public:
	/**
	* IUARTConnection::GetBaudRate - Returns the actual baud rate of the RS232 Interface.
	* @return Baud rate.
	*/
	virtual LibMCDriver_ScanLab_uint32 GetBaudRate() = 0;

	/**
	* IUARTConnection::GetConfiguredBaudRate - Returns the configured baud rate of the RS232 Interface.
	* @return Baud rate.
	*/
	virtual LibMCDriver_ScanLab_uint32 GetConfiguredBaudRate() = 0;

	/**
	* IUARTConnection::ClearReceiveBuffer - Clears the receive buffer.
	*/
	virtual void ClearReceiveBuffer() = 0;

	/**
	* IUARTConnection::AvailableBytes - Returns the number of currently received bytes.
	* @return Number of currently received bytes.
	*/
	virtual LibMCDriver_ScanLab_uint32 AvailableBytes() = 0;

	/**
	* IUARTConnection::WriteString - Sends a string over the interface. The call is blocking.
	* @param[in] sValue - String to send.
	*/
	virtual void WriteString(const std::string & sValue) = 0;

	/**
	* IUARTConnection::WriteData - Sends a data buffer over the interface. The call is blocking.
	* @param[in] nDataBufferSize - Number of elements in buffer
	* @param[in] pDataBuffer - Data to send.
	*/
	virtual void WriteData(const LibMCDriver_ScanLab_uint64 nDataBufferSize, const LibMCDriver_ScanLab_uint8 * pDataBuffer) = 0;

	/**
	* IUARTConnection::ReadData - Blocking call for reading a certain number of bytes. Will remove the bytes from the received buffer. Fails if not enough data is available after the timeout.
	* @param[in] nByteCount - Number of bytes to read.
	* @param[in] nTimeOutInMS - Timeout in Milliseconds.
	* @param[in] nDataBufferSize - Number of elements in buffer
	* @param[out] pDataNeededCount - will be filled with the count of the written structs, or needed buffer size.
	* @param[out] pDataBuffer - uint8 buffer of Receive buffer.
	*/
	virtual void ReadData(const LibMCDriver_ScanLab_uint32 nByteCount, const LibMCDriver_ScanLab_uint32 nTimeOutInMS, LibMCDriver_ScanLab_uint64 nDataBufferSize, LibMCDriver_ScanLab_uint64* pDataNeededCount, LibMCDriver_ScanLab_uint8 * pDataBuffer) = 0;

	/**
	* IUARTConnection::ReadLine - Blocking call for reading until a line end signature is coming. Fails if timeout is hit or number of bytes have been reached.
	* @param[in] sSeparator - Line Separator to search for.
	* @param[in] nMaxLineLength - Maximum line length to receive, excluding line separator.
	* @param[in] nTimeOutInMS - Timeout in Milliseconds.
	* @return Received line.
	*/
	virtual std::string ReadLine(const std::string & sSeparator, const LibMCDriver_ScanLab_uint32 nMaxLineLength, const LibMCDriver_ScanLab_uint32 nTimeOutInMS) = 0;

};

typedef IBaseSharedPtr<IUARTConnection> PIUARTConnection;


/*************************************************************************************************************************
 Class interface for RTCJob 
**************************************************************************************************************************/

class IRTCJob : public virtual IBase {
public:
	/**
	* IRTCJob::DrawPolyline - Writes a polyline into the open list
	* @param[in] nPointsBufferSize - Number of elements in buffer
	* @param[in] pPointsBuffer - Points of polyline to draw.
	* @param[in] fMarkSpeed - Mark speed in mm/s
	* @param[in] fJumpSpeed - Jump speed in mm/s
	* @param[in] fPower - Laser power in percent
	* @param[in] fZValue - Focus Z Value
	*/
	virtual void DrawPolyline(const LibMCDriver_ScanLab_uint64 nPointsBufferSize, const LibMCDriver_ScanLab::sPoint2D * pPointsBuffer, const LibMCDriver_ScanLab_single fMarkSpeed, const LibMCDriver_ScanLab_single fJumpSpeed, const LibMCDriver_ScanLab_single fPower, const LibMCDriver_ScanLab_single fZValue) = 0;

	/**
	* IRTCJob::DrawPolylineOIE - Writes a polyline into the open list with OIE Enabled.
	* @param[in] nPointsBufferSize - Number of elements in buffer
	* @param[in] pPointsBuffer - Points of polyline to draw.
	* @param[in] fMarkSpeed - Mark speed in mm/s
	* @param[in] fJumpSpeed - Jump speed in mm/s
	* @param[in] fPower - Laser power in percent
	* @param[in] fZValue - Focus Z Value
	* @param[in] nOIEPIDControlIndex - OIE PID Control Index. 0 disables PID Control, MUST be smaller or equal 63.
	*/
	virtual void DrawPolylineOIE(const LibMCDriver_ScanLab_uint64 nPointsBufferSize, const LibMCDriver_ScanLab::sPoint2D * pPointsBuffer, const LibMCDriver_ScanLab_single fMarkSpeed, const LibMCDriver_ScanLab_single fJumpSpeed, const LibMCDriver_ScanLab_single fPower, const LibMCDriver_ScanLab_single fZValue, const LibMCDriver_ScanLab_uint32 nOIEPIDControlIndex) = 0;

	/**
	* IRTCJob::DrawHatches - Writes a list of hatches into the open list
	* @param[in] nHatchesBufferSize - Number of elements in buffer
	* @param[in] pHatchesBuffer - Hatches to draw.
	* @param[in] fMarkSpeed - Mark speed in mm/s
	* @param[in] fJumpSpeed - Jump speed in mm/s
	* @param[in] fPower - Laser power in percent
	* @param[in] fZValue - Focus Z Value
	*/
	virtual void DrawHatches(const LibMCDriver_ScanLab_uint64 nHatchesBufferSize, const LibMCDriver_ScanLab::sHatch2D * pHatchesBuffer, const LibMCDriver_ScanLab_single fMarkSpeed, const LibMCDriver_ScanLab_single fJumpSpeed, const LibMCDriver_ScanLab_single fPower, const LibMCDriver_ScanLab_single fZValue) = 0;

	/**
	* IRTCJob::AddSetPower - adds a power change to the open list. MUST NOT be used for PID control.
	* @param[in] fPowerInPercent - Laser power in percent
	*/
	virtual void AddSetPower(const LibMCDriver_ScanLab_single fPowerInPercent) = 0;

	/**
	* IRTCJob::AddSetAnalogOut - Adds changing an analog port to the open list. Should not interfere with laser power control.
	* @param[in] eLaserPort - Laser port to set. MUST not be an analog port or the call fails.
	* @param[in] fOutputValue - New Normalized output value. Value is clipped between 0 and 1.
	*/
	virtual void AddSetAnalogOut(const LibMCDriver_ScanLab::eLaserPort eLaserPort, const LibMCDriver_ScanLab_single fOutputValue) = 0;

	/**
	* IRTCJob::AddSetDigitalOut - Adds changing an digital port to the open list. Should not interfere with laser power control.
	* @param[in] eLaserPort - Laser port to set. MUST not be an digital port or the call fails.
	* @param[in] fOutputValue - New Normalized output value. Value is clipped between 0 and 1.
	*/
	virtual void AddSetDigitalOut(const LibMCDriver_ScanLab::eLaserPort eLaserPort, const LibMCDriver_ScanLab_single fOutputValue) = 0;

	/**
	* IRTCJob::AddSetPowerForPIDControl - adds a base power change to the open list. If using PID control, this base power will be used at starting power when the laser is turned on.
	* @param[in] fPowerInPercent - Laser power in percent
	*/
	virtual void AddSetPowerForPIDControl(const LibMCDriver_ScanLab_single fPowerInPercent) = 0;

	/**
	* IRTCJob::AddSetJumpSpeed - adds a jump speed change to the open list
	* @param[in] fJumpSpeedInMMPerSecond - Jump speed in mm/s
	*/
	virtual void AddSetJumpSpeed(const LibMCDriver_ScanLab_single fJumpSpeedInMMPerSecond) = 0;

	/**
	* IRTCJob::AddSetMarkSpeed - adds a mark speed change to the open list
	* @param[in] fMarkSpeedInMMPerSecond - Mark speed in mm/s
	*/
	virtual void AddSetMarkSpeed(const LibMCDriver_ScanLab_single fMarkSpeedInMMPerSecond) = 0;

	/**
	* IRTCJob::AddJumpMovement - Adds a Jump movement to the open list
	* @param[in] dTargetX - X Position.
	* @param[in] dTargetY - Y Position.
	*/
	virtual void AddJumpMovement(const LibMCDriver_ScanLab_double dTargetX, const LibMCDriver_ScanLab_double dTargetY) = 0;

	/**
	* IRTCJob::AddMarkMovement - Adds a Mark movement to the open list
	* @param[in] dTargetX - X Position.
	* @param[in] dTargetY - Y Position.
	*/
	virtual void AddMarkMovement(const LibMCDriver_ScanLab_double dTargetX, const LibMCDriver_ScanLab_double dTargetY) = 0;

	/**
	* IRTCJob::AddTimedMarkMovement - Adds a timed Mark movement to the open list
	* @param[in] dTargetX - X Position.
	* @param[in] dTargetY - Y Position.
	* @param[in] dDurationInMicroseconds - Duration of mark movement in Microseconds.
	*/
	virtual void AddTimedMarkMovement(const LibMCDriver_ScanLab_double dTargetX, const LibMCDriver_ScanLab_double dTargetY, const LibMCDriver_ScanLab_double dDurationInMicroseconds) = 0;

	/**
	* IRTCJob::AddFreeVariable - Adds a free variable set to the open list
	* @param[in] nVariableNo - Number of the variable (0-7).
	* @param[in] nValue - Value to set.
	*/
	virtual void AddFreeVariable(const LibMCDriver_ScanLab_uint32 nVariableNo, const LibMCDriver_ScanLab_uint32 nValue) = 0;

};

typedef IBaseSharedPtr<IRTCJob> PIRTCJob;


/*************************************************************************************************************************
 Class interface for RTCRecording 
**************************************************************************************************************************/

class IRTCRecording : public virtual IBase {
public:
	/**
	* IRTCRecording::ScanheadConnectionCheckIsEnabled - Returns if the scan head connection is checked when recording
	* @return If true, the Scanhead connection will be checked for an error when recording.
	*/
	virtual bool ScanheadConnectionCheckIsEnabled() = 0;

	/**
	* IRTCRecording::EnableScanheadConnectionCheck - Enables the Scanhead connection check. The check is enabled by default.
	*/
	virtual void EnableScanheadConnectionCheck() = 0;

	/**
	* IRTCRecording::DisableScanheadConnectionCheck - Disables the Scanhead connection check.
	*/
	virtual void DisableScanheadConnectionCheck() = 0;

	/**
	* IRTCRecording::Clear - Clears all recording data and channels.
	*/
	virtual void Clear() = 0;

	/**
	* IRTCRecording::AddChannel - Adds a new channel to record. Fails if more than 8 channels are recorded. Fails if recording has been already started.
	* @param[in] sChannelName - Identifier string. MUST be a non-empty alphanumeric string, with optional scores and underscores. MUST be unique.
	* @param[in] eChannelType - Channel type enum. MUST NOT be Undefined.
	*/
	virtual void AddChannel(const std::string & sChannelName, const LibMCDriver_ScanLab::eRTCChannelType eChannelType) = 0;

	/**
	* IRTCRecording::RemoveChannel - Removes a new channel from the recording and all recorded data of that channel. Does nothing if channel does not exist. 
	* @param[in] sChannelName - Identifier string. MUST be a non-empty alphanumeric string, with optional scores and underscores.
	*/
	virtual void RemoveChannel(const std::string & sChannelName) = 0;

	/**
	* IRTCRecording::HasChannel - Returns if a channel name exist.
	* @param[in] sChannelName - Identifier string. MUST be a non-empty alphanumeric string, with optional scores and underscores.
	* @return Returns true if channel exists.
	*/
	virtual bool HasChannel(const std::string & sChannelName) = 0;

	/**
	* IRTCRecording::GetChannelType - Returns the type of a channel. Returns Undefined if channel does not exist.
	* @param[in] sChannelName - Identifier string. MUST be a non-empty alphanumeric string, with optional scores and underscores.
	* @return Channel type enum.
	*/
	virtual LibMCDriver_ScanLab::eRTCChannelType GetChannelType(const std::string & sChannelName) = 0;

	/**
	* IRTCRecording::GetRecordCount - Returns how many record entries have been recorded.
	* @param[in] sChannelName - Identifier string. MUST be a non-empty alphanumeric string, with optional scores and underscores.
	* @return The number of record entries.
	*/
	virtual LibMCDriver_ScanLab_uint64 GetRecordCount(const std::string & sChannelName) = 0;

	/**
	* IRTCRecording::GetRecordEntry - Returns a specific record entry. Fails if Channel does not exist.
	* @param[in] sChannelName - Identifier string. MUST be a non-empty alphanumeric string, with optional scores and underscores.
	* @param[in] nRecordIndex - Index of Record entry. MUST be between 0 and RecordCount - 1.
	* @return Value of record entry.
	*/
	virtual LibMCDriver_ScanLab_int32 GetRecordEntry(const std::string & sChannelName, const LibMCDriver_ScanLab_uint64 nRecordIndex) = 0;

	/**
	* IRTCRecording::GetAllRecordEntries - Returns all record entries of a channel. Fails if Channel does not exist.
	* @param[in] sChannelName - Identifier string. MUST be a non-empty alphanumeric string, with optional scores and underscores.
	* @param[in] nValuesBufferSize - Number of elements in buffer
	* @param[out] pValuesNeededCount - will be filled with the count of the written structs, or needed buffer size.
	* @param[out] pValuesBuffer - int32 buffer of Array of all record entries.
	*/
	virtual void GetAllRecordEntries(const std::string & sChannelName, LibMCDriver_ScanLab_uint64 nValuesBufferSize, LibMCDriver_ScanLab_uint64* pValuesNeededCount, LibMCDriver_ScanLab_int32 * pValuesBuffer) = 0;

	/**
	* IRTCRecording::EnableRecording - Enables recording of position data of the RTC Card. This is a list command.
	* @param[in] eFrequency - Recording frequency.
	*/
	virtual void EnableRecording(const LibMCDriver_ScanLab::eRTCRecordingFrequency eFrequency) = 0;

	/**
	* IRTCRecording::DisableRecording - Disables recording of position data of the RTC Card. This is a list command.
	*/
	virtual void DisableRecording() = 0;

	/**
	* IRTCRecording::ExecuteListWithRecording - Executes the list with recording the position data from the RTC card. DEPRECIATED!
	*/
	virtual void ExecuteListWithRecording() = 0;

	/**
	* IRTCRecording::AddRecordsToDataTable - Writes a certain channel to a data table as int32 columns. Fails if Channel does not exist
	* @param[in] sChannelName - Identifier string. MUST be a non-empty alphanumeric string, with optional scores and underscores.
	* @param[in] pDataTable - Data table instance to write to.
	* @param[in] sColumnIdentifier - Identifier of the Column.
	* @param[in] sColumnDescription - Description of the Column.
	*/
	virtual void AddRecordsToDataTable(const std::string & sChannelName, LibMCEnv::PDataTable pDataTable, const std::string & sColumnIdentifier, const std::string & sColumnDescription) = 0;

	/**
	* IRTCRecording::AddScaledRecordsToDataTable - Writes a certain channel to a data table as double columns, while linearly transforming the values. The DataTable will be filled with the transform RawValue times ScaleFactor + Offset. Fails if Channel does not exist.
	* @param[in] sChannelName - Identifier string. MUST be a non-empty alphanumeric string, with optional scores and underscores.
	* @param[in] pDataTable - Data table instance to write to.
	* @param[in] sColumnIdentifier - Identifier of the Column.
	* @param[in] sColumnDescription - Description of the Column.
	* @param[in] dScaleFactor - Factor that the raw value is scaled with.
	* @param[in] dOffset - Offset that the raw value is scaled with.
	*/
	virtual void AddScaledRecordsToDataTable(const std::string & sChannelName, LibMCEnv::PDataTable pDataTable, const std::string & sColumnIdentifier, const std::string & sColumnDescription, const LibMCDriver_ScanLab_double dScaleFactor, const LibMCDriver_ScanLab_double dOffset) = 0;

};

typedef IBaseSharedPtr<IRTCRecording> PIRTCRecording;


/*************************************************************************************************************************
 Class interface for RTCContext 
**************************************************************************************************************************/

class IRTCContext : public virtual IBase {
public:
	/**
	* IRTCContext::LoadFirmware - Loads card firmware from resource files.
	* @param[in] nFirmwareDataBufferSize - Number of elements in buffer
	* @param[in] pFirmwareDataBuffer - byte array of the firmware program file.
	* @param[in] nFPGADataBufferSize - Number of elements in buffer
	* @param[in] pFPGADataBuffer - byte array of the firmware FPGA file.
	* @param[in] nAuxiliaryDataBufferSize - Number of elements in buffer
	* @param[in] pAuxiliaryDataBuffer - byte array of the binary auxiliary file.
	*/
	virtual void LoadFirmware(const LibMCDriver_ScanLab_uint64 nFirmwareDataBufferSize, const LibMCDriver_ScanLab_uint8 * pFirmwareDataBuffer, const LibMCDriver_ScanLab_uint64 nFPGADataBufferSize, const LibMCDriver_ScanLab_uint8 * pFPGADataBuffer, const LibMCDriver_ScanLab_uint64 nAuxiliaryDataBufferSize, const LibMCDriver_ScanLab_uint8 * pAuxiliaryDataBuffer) = 0;

	/**
	* IRTCContext::LoadCorrectionFile - Loads card calibration file from given resource file.
	* @param[in] nCorrectionFileBufferSize - Number of elements in buffer
	* @param[in] pCorrectionFileBuffer - binary data of the correction file.
	* @param[in] nTableNumber - Correction table index of card (1..8)
	* @param[in] nDimension - Is it a 2D or 3D correction file.
	*/
	virtual void LoadCorrectionFile(const LibMCDriver_ScanLab_uint64 nCorrectionFileBufferSize, const LibMCDriver_ScanLab_uint8 * pCorrectionFileBuffer, const LibMCDriver_ScanLab_uint32 nTableNumber, const LibMCDriver_ScanLab_uint32 nDimension) = 0;

	/**
	* IRTCContext::SelectCorrectionTable - Selects Correction Table on card.
	* @param[in] nTableNumberHeadA - Table Number for HeadA (1..8) or off (0).
	* @param[in] nTableNumberHeadB - Table Number for HeadA (1..8) or off (0).
	*/
	virtual void SelectCorrectionTable(const LibMCDriver_ScanLab_uint32 nTableNumberHeadA, const LibMCDriver_ScanLab_uint32 nTableNumberHeadB) = 0;

	/**
	* IRTCContext::ConfigureLists - Configures list buffer size.
	* @param[in] nSizeListA - Size of List A
	* @param[in] nSizeListB - Size of List B
	*/
	virtual void ConfigureLists(const LibMCDriver_ScanLab_uint32 nSizeListA, const LibMCDriver_ScanLab_uint32 nSizeListB) = 0;

	/**
	* IRTCContext::SetLaserMode - Sets laser mode of card.
	* @param[in] eLaserMode - Laser Mode Enum
	* @param[in] eLaserPort - Laser Port Enum
	*/
	virtual void SetLaserMode(const LibMCDriver_ScanLab::eLaserMode eLaserMode, const LibMCDriver_ScanLab::eLaserPort eLaserPort) = 0;

	/**
	* IRTCContext::DisableAutoLaserControl - Disables automatic laser control.
	*/
	virtual void DisableAutoLaserControl() = 0;

	/**
	* IRTCContext::SetLaserControlParameters - Sets laser control parameters of card.
	* @param[in] bDisableLaser - Laser is disabled
	* @param[in] bFinishLaserPulseAfterOn - Finish laser pulse after LaserOn
	* @param[in] bPhaseShiftOfLaserSignal - 180 degree phase shift of Laser signal
	* @param[in] bLaserOnSignalLowActive - Set Laser On Signal Low Active
	* @param[in] bLaserHalfSignalsLowActive - Set Laser Half Signal Low Active
	* @param[in] bSetDigitalInOneHighActive - Set Digital In 1 high Active
	* @param[in] bOutputSynchronizationActive - Output synchronization active
	*/
	virtual void SetLaserControlParameters(const bool bDisableLaser, const bool bFinishLaserPulseAfterOn, const bool bPhaseShiftOfLaserSignal, const bool bLaserOnSignalLowActive, const bool bLaserHalfSignalsLowActive, const bool bSetDigitalInOneHighActive, const bool bOutputSynchronizationActive) = 0;

	/**
	* IRTCContext::SetLaserPulsesInBits - Sets laser control pulse interval (in 1/64th microseconds)
	* @param[in] nHalfPeriod - Half Output period in 1/64th microseconds
	* @param[in] nPulseLength - Pulse Length in 1/64th microseconds
	*/
	virtual void SetLaserPulsesInBits(const LibMCDriver_ScanLab_uint32 nHalfPeriod, const LibMCDriver_ScanLab_uint32 nPulseLength) = 0;

	/**
	* IRTCContext::SetLaserPulsesInMicroSeconds - Sets laser control pulse interval (in microseconds)
	* @param[in] dHalfPeriod - Half Output period in microseconds
	* @param[in] dPulseLength - Pulse Length in microseconds
	*/
	virtual void SetLaserPulsesInMicroSeconds(const LibMCDriver_ScanLab_double dHalfPeriod, const LibMCDriver_ScanLab_double dPulseLength) = 0;

	/**
	* IRTCContext::SetStandbyInBits - Sets standby pulse interval (in 1/64th microseconds)
	* @param[in] nHalfPeriod - Half Output period in 1/64th microseconds
	* @param[in] nPulseLength - Pulse Length in 1/64th microseconds
	*/
	virtual void SetStandbyInBits(const LibMCDriver_ScanLab_uint32 nHalfPeriod, const LibMCDriver_ScanLab_uint32 nPulseLength) = 0;

	/**
	* IRTCContext::SetStandbyInMicroSeconds - Sets laser control pulse interval (in microseconds)
	* @param[in] dHalfPeriod - Half Output period in microseconds
	* @param[in] dPulseLength - Pulse Length in microseconds
	*/
	virtual void SetStandbyInMicroSeconds(const LibMCDriver_ScanLab_double dHalfPeriod, const LibMCDriver_ScanLab_double dPulseLength) = 0;

	/**
	* IRTCContext::GetIPAddress - Returns the IP Address of the RTC Card. Fails if driver has not been initialized.
	* @return IP Address Value.
	*/
	virtual std::string GetIPAddress() = 0;

	/**
	* IRTCContext::GetNetmask - Returns the Netmask of the RTC Card. Fails if driver has not been initialized.
	* @return Netmask Value.
	*/
	virtual std::string GetNetmask() = 0;

	/**
	* IRTCContext::GetSerialNumber - Returns serial number of card
	* @return Returns serial number of board.
	*/
	virtual LibMCDriver_ScanLab_uint32 GetSerialNumber() = 0;

	/**
	* IRTCContext::GetLaserIndex - Returns the laser index assigned to the card. This is the laser index that will be used to map the toolpath laser data to the according device.
	* @return Returns laser index of board.
	*/
	virtual LibMCDriver_ScanLab_uint32 GetLaserIndex() = 0;

	/**
	* IRTCContext::SetLaserOrigin - Sets the laser origin in absolute coordinates. This origin will be used to relatively position lasers to one another.
	* @param[in] dOriginX - Sets laser origin X coordinate of the laser in mm. All laser movements will be moved by that minus that amount in X.
	* @param[in] dOriginY - Sets laser origin Y coordinate of the laser in mm. All laser movements will be moved by that minus that amount in X.
	*/
	virtual void SetLaserOrigin(const LibMCDriver_ScanLab_double dOriginX, const LibMCDriver_ScanLab_double dOriginY) = 0;

	/**
	* IRTCContext::GetLaserOrigin - Returns the laser origin in absolute coordinates. This origin will be used to relatively position lasers to one another.
	* @param[out] dOriginX - Laser origin X coordinate of the laser in mm. All laser movements will be moved by that minus that amount in X.
	* @param[out] dOriginY - Laser origin Y coordinate of the laser in mm. All laser movements will be moved by that minus that amount in X.
	*/
	virtual void GetLaserOrigin(LibMCDriver_ScanLab_double & dOriginX, LibMCDriver_ScanLab_double & dOriginY) = 0;

	/**
	* IRTCContext::SetLaserField - Sets the laser field limits in absolute coordinates.
	* @param[in] dMinX - Sets minimum laser X coordinate in mm.
	* @param[in] dMinY - Sets minimum laser Y coordinate in mm.
	* @param[in] dMaxX - Sets maximum laser X coordinate in mm.
	* @param[in] dMaxY - Sets maximum laser Y coordinate in mm.
	*/
	virtual void SetLaserField(const LibMCDriver_ScanLab_double dMinX, const LibMCDriver_ScanLab_double dMinY, const LibMCDriver_ScanLab_double dMaxX, const LibMCDriver_ScanLab_double dMaxY) = 0;

	/**
	* IRTCContext::ResetLaserField - Resets the laser field to default values.
	*/
	virtual void ResetLaserField() = 0;

	/**
	* IRTCContext::EnableRangeChecking - Enables range checking of the laser field. A laser field MUST have been set before.
	*/
	virtual void EnableRangeChecking() = 0;

	/**
	* IRTCContext::DisableRangeChecking - Disables range checking of the laser field.
	*/
	virtual void DisableRangeChecking() = 0;

	/**
	* IRTCContext::GetLaserField - Returns the laser field limits in absolute coordinates.
	* @param[out] dMinX - Sets minimum laser X coordinate in mm.
	* @param[out] dMinY - Sets minimum laser Y coordinate in mm.
	* @param[out] dMaxX - Sets maximum laser X coordinate in mm.
	* @param[out] dMaxY - Sets maximum laser Y coordinate in mm.
	* @return Returns true if a laser field has been set.
	*/
	virtual bool GetLaserField(LibMCDriver_ScanLab_double & dMinX, LibMCDriver_ScanLab_double & dMinY, LibMCDriver_ScanLab_double & dMaxX, LibMCDriver_ScanLab_double & dMaxY) = 0;

	/**
	* IRTCContext::SetStartList - Opens the list to write
	* @param[in] nListIndex - Index of List (1 or 2).
	* @param[in] nPosition - Relative Position in List.
	*/
	virtual void SetStartList(const LibMCDriver_ScanLab_uint32 nListIndex, const LibMCDriver_ScanLab_uint32 nPosition) = 0;

	/**
	* IRTCContext::SetEndOfList - Closes the currently open list
	*/
	virtual void SetEndOfList() = 0;

	/**
	* IRTCContext::ExecuteList - Executes the list
	* @param[in] nListIndex - Index of List (1 or 2).
	* @param[in] nPosition - Relative Position in List.
	*/
	virtual void ExecuteList(const LibMCDriver_ScanLab_uint32 nListIndex, const LibMCDriver_ScanLab_uint32 nPosition) = 0;

	/**
	* IRTCContext::SetAutoChangePos - Sets the AutoChange Position of the currently not running list.
	* @param[in] nPosition - Relative Position in List.
	*/
	virtual void SetAutoChangePos(const LibMCDriver_ScanLab_uint32 nPosition) = 0;

	/**
	* IRTCContext::SetDelays - Sets the laser delays
	* @param[in] nMarkDelay - Mark delay in microseconds (MUST be multiple of 10)
	* @param[in] nJumpDelay - Jump delay in microseconds (MUST be multiple of 10)
	* @param[in] nPolygonDelay - Polygon delay in microseconds (MUST be multiple of 10)
	*/
	virtual void SetDelays(const LibMCDriver_ScanLab_uint32 nMarkDelay, const LibMCDriver_ScanLab_uint32 nJumpDelay, const LibMCDriver_ScanLab_uint32 nPolygonDelay) = 0;

	/**
	* IRTCContext::SetLaserDelaysInMicroseconds - Sets the laser delays (on the list)
	* @param[in] dLaserOnDelay - LaserOn delay in microseconds
	* @param[in] dLaserOffDelay - LaserOff delay in microseconds
	*/
	virtual void SetLaserDelaysInMicroseconds(const LibMCDriver_ScanLab_double dLaserOnDelay, const LibMCDriver_ScanLab_double dLaserOffDelay) = 0;

	/**
	* IRTCContext::SetLaserDelaysInBits - Sets the laser delays (on the list)
	* @param[in] nLaserOnDelay - LaserOn delay in bits (1/64th microseconds)
	* @param[in] nLaserOffDelay - LaserOff delay in bits (1/64th microseconds)
	*/
	virtual void SetLaserDelaysInBits(const LibMCDriver_ScanLab_int32 nLaserOnDelay, const LibMCDriver_ScanLab_int32 nLaserOffDelay) = 0;

	/**
	* IRTCContext::DrawPolyline - Writes a polyline into the open list
	* @param[in] nPointsBufferSize - Number of elements in buffer
	* @param[in] pPointsBuffer - Points of polyline to draw.
	* @param[in] fMarkSpeed - Mark speed in mm/s
	* @param[in] fJumpSpeed - Jump speed in mm/s
	* @param[in] fPower - Laser power in percent
	* @param[in] fZValue - Focus Z Value
	*/
	virtual void DrawPolyline(const LibMCDriver_ScanLab_uint64 nPointsBufferSize, const LibMCDriver_ScanLab::sPoint2D * pPointsBuffer, const LibMCDriver_ScanLab_single fMarkSpeed, const LibMCDriver_ScanLab_single fJumpSpeed, const LibMCDriver_ScanLab_single fPower, const LibMCDriver_ScanLab_single fZValue) = 0;

	/**
	* IRTCContext::DrawPolylineOIE - Writes a polyline into the open list with OIE Enabled.
	* @param[in] nPointsBufferSize - Number of elements in buffer
	* @param[in] pPointsBuffer - Points of polyline to draw.
	* @param[in] fMarkSpeed - Mark speed in mm/s
	* @param[in] fJumpSpeed - Jump speed in mm/s
	* @param[in] fPower - Laser power in percent
	* @param[in] fZValue - Focus Z Value
	* @param[in] nOIEPIDControlIndex - OIE PID Control Index. 0 disables PID Control, MUST be smaller or equal 63.
	*/
	virtual void DrawPolylineOIE(const LibMCDriver_ScanLab_uint64 nPointsBufferSize, const LibMCDriver_ScanLab::sPoint2D * pPointsBuffer, const LibMCDriver_ScanLab_single fMarkSpeed, const LibMCDriver_ScanLab_single fJumpSpeed, const LibMCDriver_ScanLab_single fPower, const LibMCDriver_ScanLab_single fZValue, const LibMCDriver_ScanLab_uint32 nOIEPIDControlIndex) = 0;

	/**
	* IRTCContext::DrawHatches - Writes a list of hatches into the open list
	* @param[in] nHatchesBufferSize - Number of elements in buffer
	* @param[in] pHatchesBuffer - Hatches to draw.
	* @param[in] fMarkSpeed - Mark speed in mm/s
	* @param[in] fJumpSpeed - Jump speed in mm/s
	* @param[in] fPower - Laser power in percent
	* @param[in] fZValue - Focus Z Value
	*/
	virtual void DrawHatches(const LibMCDriver_ScanLab_uint64 nHatchesBufferSize, const LibMCDriver_ScanLab::sHatch2D * pHatchesBuffer, const LibMCDriver_ScanLab_single fMarkSpeed, const LibMCDriver_ScanLab_single fJumpSpeed, const LibMCDriver_ScanLab_single fPower, const LibMCDriver_ScanLab_single fZValue) = 0;

	/**
	* IRTCContext::AddSetPower - adds a power change to the open list. MUST NOT be used for PID control.
	* @param[in] fPowerInPercent - Laser power in percent
	*/
	virtual void AddSetPower(const LibMCDriver_ScanLab_single fPowerInPercent) = 0;

	/**
	* IRTCContext::AddSetAnalogOut - Adds changing an analog port to the open list. Should not interfere with laser power control.
	* @param[in] eLaserPort - Laser port to set. MUST not be an analog port or the call fails.
	* @param[in] fOutputValue - New Normalized output value. Value is clipped between 0 and 1.
	*/
	virtual void AddSetAnalogOut(const LibMCDriver_ScanLab::eLaserPort eLaserPort, const LibMCDriver_ScanLab_single fOutputValue) = 0;

	/**
	* IRTCContext::AddSetDigitalOut - Adds changing an digital port to the open list. Should not interfere with laser power control.
	* @param[in] eLaserPort - Laser port to set. MUST not be an digital port or the call fails.
	* @param[in] fOutputValue - New Normalized output value. Value is clipped between 0 and 1.
	*/
	virtual void AddSetDigitalOut(const LibMCDriver_ScanLab::eLaserPort eLaserPort, const LibMCDriver_ScanLab_single fOutputValue) = 0;

	/**
	* IRTCContext::AddSetPowerForPIDControl - adds a base power change to the open list. If using PID control, this base power will be used at starting power when the laser is turned on.
	* @param[in] fPowerInPercent - Laser power in percent
	*/
	virtual void AddSetPowerForPIDControl(const LibMCDriver_ScanLab_single fPowerInPercent) = 0;

	/**
	* IRTCContext::AddSetJumpSpeed - adds a jump speed change to the open list
	* @param[in] fJumpSpeedInMMPerSecond - Jump speed in mm/s
	*/
	virtual void AddSetJumpSpeed(const LibMCDriver_ScanLab_single fJumpSpeedInMMPerSecond) = 0;

	/**
	* IRTCContext::AddSetMarkSpeed - adds a mark speed change to the open list
	* @param[in] fMarkSpeedInMMPerSecond - Mark speed in mm/s
	*/
	virtual void AddSetMarkSpeed(const LibMCDriver_ScanLab_single fMarkSpeedInMMPerSecond) = 0;

	/**
	* IRTCContext::AddJumpMovement - Adds a Jump movement to the open list
	* @param[in] dTargetX - X Position.
	* @param[in] dTargetY - Y Position.
	*/
	virtual void AddJumpMovement(const LibMCDriver_ScanLab_double dTargetX, const LibMCDriver_ScanLab_double dTargetY) = 0;

	/**
	* IRTCContext::AddMarkMovement - Adds a Mark movement to the open list
	* @param[in] dTargetX - X Position.
	* @param[in] dTargetY - Y Position.
	*/
	virtual void AddMarkMovement(const LibMCDriver_ScanLab_double dTargetX, const LibMCDriver_ScanLab_double dTargetY) = 0;

	/**
	* IRTCContext::AddTimedMarkMovement - Adds a timed Mark movement to the open list
	* @param[in] dTargetX - X Position.
	* @param[in] dTargetY - Y Position.
	* @param[in] dDurationInMicroseconds - Duration of mark movement in Microseconds.
	*/
	virtual void AddTimedMarkMovement(const LibMCDriver_ScanLab_double dTargetX, const LibMCDriver_ScanLab_double dTargetY, const LibMCDriver_ScanLab_double dDurationInMicroseconds) = 0;

	/**
	* IRTCContext::AddFreeVariable - Adds a free variable set to the open list
	* @param[in] nVariableNo - Number of the variable (0-7).
	* @param[in] nValue - Value to set.
	*/
	virtual void AddFreeVariable(const LibMCDriver_ScanLab_uint32 nVariableNo, const LibMCDriver_ScanLab_uint32 nValue) = 0;

	/**
	* IRTCContext::GetCurrentFreeVariable - Returns the currently set free variable.
	* @param[in] nVariableNo - Number of the variable (0-7).
	* @return Value to return.
	*/
	virtual LibMCDriver_ScanLab_uint32 GetCurrentFreeVariable(const LibMCDriver_ScanLab_uint32 nVariableNo) = 0;

	/**
	* IRTCContext::GetTimeStamp - Returns the current RTC time stamp.
	* @return TimeStamp Value.
	*/
	virtual LibMCDriver_ScanLab_uint32 GetTimeStamp() = 0;

	/**
	* IRTCContext::StopExecution - Stops the execution of the current list immediately.
	*/
	virtual void StopExecution() = 0;

	/**
	* IRTCContext::DrawHatchesOIE - Writes a list of hatches into the open list with OIE Enabled.
	* @param[in] nHatchesBufferSize - Number of elements in buffer
	* @param[in] pHatchesBuffer - Hatches to draw.
	* @param[in] fMarkSpeed - Mark speed in mm/s
	* @param[in] fJumpSpeed - Jump speed in mm/s
	* @param[in] fPower - Laser power in percent
	* @param[in] fZValue - Focus Z Value
	* @param[in] nOIEPIDControlIndex - OIE PID Control Index. 0 disables PID Control, MUST be smaller or equal 63.
	*/
	virtual void DrawHatchesOIE(const LibMCDriver_ScanLab_uint64 nHatchesBufferSize, const LibMCDriver_ScanLab::sHatch2D * pHatchesBuffer, const LibMCDriver_ScanLab_single fMarkSpeed, const LibMCDriver_ScanLab_single fJumpSpeed, const LibMCDriver_ScanLab_single fPower, const LibMCDriver_ScanLab_single fZValue, const LibMCDriver_ScanLab_uint32 nOIEPIDControlIndex) = 0;

	/**
	* IRTCContext::AddLayerToList - Adds a layer instance to the current open list.
	* @param[in] pLayer - Instance of the layer to add to the lists.
	* @param[in] bFailIfNonAssignedDataExists - If true, fails if there is a laser index that does not match.
	*/
	virtual void AddLayerToList(LibMCEnv::PToolpathLayer pLayer, const bool bFailIfNonAssignedDataExists) = 0;

	/**
	* IRTCContext::WaitForEncoderX - Adds a command to wait for the encoder for reaching an X axis position. Fails if Mark on the Fly is not enabled.
	* @param[in] dPositionInMM - Position Value to reach in mm.
	* @param[in] bInPositiveHalfPlane - If true, waits for the encoder reaching a value that is larger than PositionInMM. If false, waits for the encoder reaching a value that is smaller than PositionInMM.
	*/
	virtual void WaitForEncoderX(const LibMCDriver_ScanLab_double dPositionInMM, const bool bInPositiveHalfPlane) = 0;

	/**
	* IRTCContext::WaitForEncoderY - Adds a command to wait for the encoder for reaching an Y axis position. Fails if Mark on the Fly is not enabled.
	* @param[in] dPositionInMM - Position Value to reach in mm.
	* @param[in] bInPositiveHalfPlane - If true, waits for the encoder reaching a value that is larger than PositionInMM. If false, waits for the encoder reaching a value that is smaller than PositionInMM.
	*/
	virtual void WaitForEncoderY(const LibMCDriver_ScanLab_double dPositionInMM, const bool bInPositiveHalfPlane) = 0;

	/**
	* IRTCContext::WaitForEncoderXSteps - Adds a command to wait for the encoder for reaching an X axis position. Fails if Mark on the Fly is not enabled.
	* @param[in] nPositionInSteps - Position Value to reach in steps.
	* @param[in] bInPositiveHalfPlane - If true, waits for the encoder reaching a value that is larger than PositionInMM. If false, waits for the encoder reaching a value that is smaller than PositionInMM.
	*/
	virtual void WaitForEncoderXSteps(const LibMCDriver_ScanLab_int32 nPositionInSteps, const bool bInPositiveHalfPlane) = 0;

	/**
	* IRTCContext::WaitForEncoderYSteps - Adds a command to wait for the encoder for reaching an Y axis position. Fails if Mark on the Fly is not enabled.
	* @param[in] nPositionInSteps - Position Value to reach in steps.
	* @param[in] bInPositiveHalfPlane - If true, waits for the encoder reaching a value that is larger than PositionInMM. If false, waits for the encoder reaching a value that is smaller than PositionInMM.
	*/
	virtual void WaitForEncoderYSteps(const LibMCDriver_ScanLab_int32 nPositionInSteps, const bool bInPositiveHalfPlane) = 0;

	/**
	* IRTCContext::AddCustomDelay - Adds a custom delay to the list
	* @param[in] nDelayInMicroseconds - Custom delay value in microseconds (MUST be multiple of 10)
	*/
	virtual void AddCustomDelay(const LibMCDriver_ScanLab_uint32 nDelayInMicroseconds) = 0;

	/**
	* IRTCContext::GetCorrectionFactor - Returns correction factor of Card Calibration (in bits per mm)
	* @return CorrectionFactor
	*/
	virtual LibMCDriver_ScanLab_double GetCorrectionFactor() = 0;

	/**
	* IRTCContext::GetStatus - Returns status of list execution
	* @param[out] bBusy - Execution is busy
	* @param[out] nPosition - Returns current executed position
	*/
	virtual void GetStatus(bool & bBusy, LibMCDriver_ScanLab_uint32 & nPosition) = 0;

	/**
	* IRTCContext::GetHeadStatus - Returns status of scan head
	* @param[in] nHeadNo - Head Number
	* @param[out] bPositionXisOK - Position X is ok
	* @param[out] bPositionYisOK - Position Y is ok
	* @param[out] bTemperatureisOK - Temperature is ok
	* @param[out] bPowerisOK - Power is ok
	*/
	virtual void GetHeadStatus(const LibMCDriver_ScanLab_uint32 nHeadNo, bool & bPositionXisOK, bool & bPositionYisOK, bool & bTemperatureisOK, bool & bPowerisOK) = 0;

	/**
	* IRTCContext::GetStateValues - Returns status values of scan head
	* @param[out] bLaserIsOn - Laser is on
	* @param[out] nPositionX - Current Position X in Units
	* @param[out] nPositionY - Current Position Y in Units
	* @param[out] nPositionZ - Current Position Z in Units
	* @param[out] nCorrectedPositionX - Current Position X in Units
	* @param[out] nCorrectedPositionY - Current Position Y in Units
	* @param[out] nCorrectedPositionZ - Current Position Z in Units
	* @param[out] nFocusShift - Current Focus Shift in Units
	* @param[out] nMarkSpeed - Current Mark Speed in Units
	*/
	virtual void GetStateValues(bool & bLaserIsOn, LibMCDriver_ScanLab_int32 & nPositionX, LibMCDriver_ScanLab_int32 & nPositionY, LibMCDriver_ScanLab_int32 & nPositionZ, LibMCDriver_ScanLab_int32 & nCorrectedPositionX, LibMCDriver_ScanLab_int32 & nCorrectedPositionY, LibMCDriver_ScanLab_int32 & nCorrectedPositionZ, LibMCDriver_ScanLab_int32 & nFocusShift, LibMCDriver_ScanLab_int32 & nMarkSpeed) = 0;

	/**
	* IRTCContext::GetInputPointer - returns current input list position
	* @return Returns current position of open list
	*/
	virtual LibMCDriver_ScanLab_uint32 GetInputPointer() = 0;

	/**
	* IRTCContext::GetRTCVersion - Returns version information of the RTC Card
	* @param[out] nRTCVersion - RTC Card Version
	* @param[out] nRTCType - RTC Card Type
	* @param[out] nDLLVersion - RTC DLL Version
	* @param[out] nHEXVersion - RTC HEX Version
	* @param[out] nBIOSVersion - RTC BIOS Version
	*/
	virtual void GetRTCVersion(LibMCDriver_ScanLab_uint32 & nRTCVersion, LibMCDriver_ScanLab_uint32 & nRTCType, LibMCDriver_ScanLab_uint32 & nDLLVersion, LibMCDriver_ScanLab_uint32 & nHEXVersion, LibMCDriver_ScanLab_uint32 & nBIOSVersion) = 0;

	/**
	* IRTCContext::SetCommunicationTimeouts - Set RTC Ethernet communication timeouts for a specific connection. The Driver defaults will not be changed.
	* @param[in] dInitialTimeout - Initial timeout in ms
	* @param[in] dMaxTimeout - Max timeout in ms
	* @param[in] dMultiplier - Multiplier
	*/
	virtual void SetCommunicationTimeouts(const LibMCDriver_ScanLab_double dInitialTimeout, const LibMCDriver_ScanLab_double dMaxTimeout, const LibMCDriver_ScanLab_double dMultiplier) = 0;

	/**
	* IRTCContext::GetCommunicationTimeouts - Get RTC Ethernet communication timeouts
	* @param[out] dInitialTimeout - Initial timeout in ms
	* @param[out] dMaxTimeout - Max timeout in ms
	* @param[out] dMultiplier - Multiplier
	*/
	virtual void GetCommunicationTimeouts(LibMCDriver_ScanLab_double & dInitialTimeout, LibMCDriver_ScanLab_double & dMaxTimeout, LibMCDriver_ScanLab_double & dMultiplier) = 0;

	/**
	* IRTCContext::InitializeForOIE - Initializes the RTC card for the open interface extension. MUST be called before the OIE is initialized.
	* @param[in] nSignalChannelsBufferSize - Number of elements in buffer
	* @param[in] pSignalChannelsBuffer - Array of signal channels. MUST NOT be empty
	* @param[in] eOperationMode - OIE Operation Mode
	*/
	virtual void InitializeForOIE(const LibMCDriver_ScanLab_uint64 nSignalChannelsBufferSize, const LibMCDriver_ScanLab_uint32 * pSignalChannelsBuffer, const LibMCDriver_ScanLab::eOIEOperationMode eOperationMode) = 0;

	/**
	* IRTCContext::SetLaserPinOut - Sets the laser pin outputs to a certain state. Control command, has immediate effect.
	* @param[in] bLaserOut1 - Value for Laser Out Pin 1
	* @param[in] bLaserOut2 - Value for Laser Out Pin 2
	*/
	virtual void SetLaserPinOut(const bool bLaserOut1, const bool bLaserOut2) = 0;

	/**
	* IRTCContext::GetLaserPinIn - Read the laser pin input values. Control command, has immediate effect.
	* @param[out] bLaserOut1 - Value for Laser In Pin 1
	* @param[out] bLaserOut2 - Value for Laser In Pin 2
	*/
	virtual void GetLaserPinIn(bool & bLaserOut1, bool & bLaserOut2) = 0;

	/**
	* IRTCContext::AddLaserPinOutToList - Adds the laser pin command to the current open list.
	* @param[in] bLaserOut1 - Value for Laser Out Pin 1
	* @param[in] bLaserOut2 - Value for Laser Out Pin 2
	*/
	virtual void AddLaserPinOutToList(const bool bLaserOut1, const bool bLaserOut2) = 0;

	/**
	* IRTCContext::EnableOIE - Writes an OIE enabling command block to the open list.
	*/
	virtual void EnableOIE() = 0;

	/**
	* IRTCContext::DisableOIE - Writes an OIE disabling command block to the open list.
	*/
	virtual void DisableOIE() = 0;

	/**
	* IRTCContext::StartOIEMeasurement - Writes an OIE measurement start command block to the open list. Same as StartOIEMeasurement with false as parameter.
	*/
	virtual void StartOIEMeasurement() = 0;

	/**
	* IRTCContext::StartOIEMeasurementEx - Writes an OIE measurement start command block to the open list, with parameterized LaserOn Trigger
	* @param[in] bLaserOnTrigger - If true, only triggers a measurement, when the laser is on.
	*/
	virtual void StartOIEMeasurementEx(const bool bLaserOnTrigger) = 0;

	/**
	* IRTCContext::StopOIEMeasurement - Writes an OIE measurement start command block to the open list.
	*/
	virtual void StopOIEMeasurement() = 0;

	/**
	* IRTCContext::SetOIEPIDMode - Sets OIE PID Index.
	* @param[in] nOIEPIDIndex - OIE PID Index. MUST be between 0 and 63. 0 means PID disabled.
	*/
	virtual void SetOIEPIDMode(const LibMCDriver_ScanLab_uint32 nOIEPIDIndex) = 0;

	/**
	* IRTCContext::EnableOIEPIDControl - Enables OIE PID Control. Affects only subsequent layers that are drawn into lists.
	*/
	virtual void EnableOIEPIDControl() = 0;

	/**
	* IRTCContext::DisableOIEPIDControl - Disables OIE PID Control.
	*/
	virtual void DisableOIEPIDControl() = 0;

	/**
	* IRTCContext::ClearOIEMeasurementTags - Clears all stored OIE Measurement tags of the context. New Tag Indices will start from 0 again.
	*/
	virtual void ClearOIEMeasurementTags() = 0;

	/**
	* IRTCContext::EnableOIEMeasurementTagging - Enables OIE Measurement tagging.
	*/
	virtual void EnableOIEMeasurementTagging() = 0;

	/**
	* IRTCContext::DisableOIEMeasurementTagging - Disables OIE Measurement tagging.
	*/
	virtual void DisableOIEMeasurementTagging() = 0;

	/**
	* IRTCContext::MapOIEMeasurementTag - Maps an OIE Measurement tag back to the original scan parameters.
	* @param[in] nMeasurementTag - Measurement Tag that has been sent to the OIE.
	* @param[out] nPartID - ID of the part.
	* @param[out] nProfileID - ID of the profile.
	* @param[out] nSegmentID - ID of the segment.
	* @param[out] nVectorID - ID of the vector.
	*/
	virtual void MapOIEMeasurementTag(const LibMCDriver_ScanLab_uint32 nMeasurementTag, LibMCDriver_ScanLab_uint32 & nPartID, LibMCDriver_ScanLab_uint32 & nProfileID, LibMCDriver_ScanLab_uint32 & nSegmentID, LibMCDriver_ScanLab_uint32 & nVectorID) = 0;

	/**
	* IRTCContext::DisableSkyWriting - Disable skywriting.
	*/
	virtual void DisableSkyWriting() = 0;

	/**
	* IRTCContext::EnableSkyWritingMode1 - Enables skywriting on the list in mode 1. See Scanlab RTC Documentation for details.
	* @param[in] dTimelag - Skywriting Timelag
	* @param[in] nLaserOnShift - Skywriting Laser On Shift
	* @param[in] nNPrev - Duration of pre-motion in ticks
	* @param[in] nNPost - Duration of post-motion in ticks. 
	*/
	virtual void EnableSkyWritingMode1(const LibMCDriver_ScanLab_double dTimelag, const LibMCDriver_ScanLab_int64 nLaserOnShift, const LibMCDriver_ScanLab_int64 nNPrev, const LibMCDriver_ScanLab_int64 nNPost) = 0;

	/**
	* IRTCContext::EnableSkyWritingMode2 - Enables skywriting on the list in mode 2. See Scanlab RTC Documentation for details.
	* @param[in] dTimelag - Skywriting Timelag
	* @param[in] nLaserOnShift - Skywriting Laser On Shift
	* @param[in] nNPrev - Duration of pre-motion in ticks
	* @param[in] nNPost - Duration of post-motion in ticks. 
	*/
	virtual void EnableSkyWritingMode2(const LibMCDriver_ScanLab_double dTimelag, const LibMCDriver_ScanLab_int64 nLaserOnShift, const LibMCDriver_ScanLab_int64 nNPrev, const LibMCDriver_ScanLab_int64 nNPost) = 0;

	/**
	* IRTCContext::EnableSkyWritingMode3 - Enables skywriting on the list in mode 3. See Scanlab RTC Documentation for details.
	* @param[in] dTimelag - Skywriting Timelag
	* @param[in] nLaserOnShift - Skywriting Laser On Shift
	* @param[in] nNPrev - Duration of pre-motion in ticks
	* @param[in] nNPost - Duration of post-motion in ticks. 
	* @param[in] dLimit - Skywriting Angle limit
	*/
	virtual void EnableSkyWritingMode3(const LibMCDriver_ScanLab_double dTimelag, const LibMCDriver_ScanLab_int64 nLaserOnShift, const LibMCDriver_ScanLab_int64 nNPrev, const LibMCDriver_ScanLab_int64 nNPost, const LibMCDriver_ScanLab_double dLimit) = 0;

	/**
	* IRTCContext::EnableSkyWritingMode4 - Enables skywriting on the list in mode 4. See Scanlab RTC Documentation for details.
	* @param[in] dTimelag - Skywriting Timelag
	* @param[in] nLaserOnShift - Skywriting Laser On Shift
	* @param[in] nNPrev - Duration of pre-motion in ticks
	* @param[in] nNPost - Duration of post-motion in ticks. 
	* @param[in] dLimit - Skywriting Angle limit
	*/
	virtual void EnableSkyWritingMode4(const LibMCDriver_ScanLab_double dTimelag, const LibMCDriver_ScanLab_int64 nLaserOnShift, const LibMCDriver_ScanLab_int64 nNPrev, const LibMCDriver_ScanLab_int64 nNPost, const LibMCDriver_ScanLab_double dLimit) = 0;

	/**
	* IRTCContext::SetTransformationAngle - Sets the transformation angle of the scan field.
	* @param[in] dAngleInDegrees - Angle in Degrees
	*/
	virtual void SetTransformationAngle(const LibMCDriver_ScanLab_double dAngleInDegrees) = 0;

	/**
	* IRTCContext::SetTransformationScale - Sets the transformation scale of the scan field.
	* @param[in] dScaleFactor - Scale Factor (1.0 is no scaling). Allowed value is -16 to 16.
	*/
	virtual void SetTransformationScale(const LibMCDriver_ScanLab_double dScaleFactor) = 0;

	/**
	* IRTCContext::SetTransformationOffset - Sets the transformation offset of the scan field.
	* @param[in] nOffsetX - Offset in X (in bits)
	* @param[in] nOffsetY - Offset in X (in bits)
	*/
	virtual void SetTransformationOffset(const LibMCDriver_ScanLab_int32 nOffsetX, const LibMCDriver_ScanLab_int32 nOffsetY) = 0;

	/**
	* IRTCContext::SetTransformationMatrix - Sets the transformation matrix of the scan field.
	* @param[in] dM11 - Upper left field of the transformation matrix
	* @param[in] dM12 - Upper right field of the transformation matrix
	* @param[in] dM21 - Lower left field of the transformation matrix
	* @param[in] dM22 - Lower right field of the transformation matrix
	*/
	virtual void SetTransformationMatrix(const LibMCDriver_ScanLab_double dM11, const LibMCDriver_ScanLab_double dM12, const LibMCDriver_ScanLab_double dM21, const LibMCDriver_ScanLab_double dM22) = 0;

	/**
	* IRTCContext::PrepareRecording - Prepares recording of position data of the RTC Card. This needs to be called before any list is started.
	* @param[in] bKeepInMemory - If true, the recording will be persisted in the driver and can be recovered by its UUID. If false, the lifetime of the recording data ends with the release of the recording instance. Persistent Recordings will eat up a lot of memory and should be taken under careful consideration. Recordings can be made non-persistent with the RemoveFromMemory function of the instance.
	* @return Recording instance.
	*/
	virtual IRTCRecording * PrepareRecording(const bool bKeepInMemory) = 0;

	/**
	* IRTCContext::HasRecording - Checks if a recording exists in the driver memory. Recording MUST have been created with KeepInMemory set to true.
	* @param[in] sUUID - UUID of the recording to find.
	* @return Returns if the recording exists.
	*/
	virtual bool HasRecording(const std::string & sUUID) = 0;

	/**
	* IRTCContext::FindRecording - Find a recording in the driver memory. Recording MUST have been created with KeepInMemory set to true. Fails if recording does not exist.
	* @param[in] sUUID - UUID of the recording to find.
	* @return Recording instance.
	*/
	virtual IRTCRecording * FindRecording(const std::string & sUUID) = 0;

	/**
	* IRTCContext::EnableTimelagCompensation - Enables timelag compensation.
	* @param[in] nTimeLagXYInMicroseconds - Time lag of XY axes (in microseconds). MUST be a multiple of 10.
	* @param[in] nTimeLagZInMicroseconds - Time lag of Z axis (in microseconds). MUST be a multiple of 10.
	*/
	virtual void EnableTimelagCompensation(const LibMCDriver_ScanLab_uint32 nTimeLagXYInMicroseconds, const LibMCDriver_ScanLab_uint32 nTimeLagZInMicroseconds) = 0;

	/**
	* IRTCContext::DisableTimelagCompensation - Disables timelag compensation.
	*/
	virtual void DisableTimelagCompensation() = 0;

	/**
	* IRTCContext::EnableMarkOnTheFly2D - Enables mark on the fly 2D. This is a list command.
	* @param[in] dScaleXInMMperEncoderStep - Scale factor X in mm per encoder step
	* @param[in] dScaleYInMMperEncoderStep - Scale factor Y in mm per encoder step
	*/
	virtual void EnableMarkOnTheFly2D(const LibMCDriver_ScanLab_double dScaleXInMMperEncoderStep, const LibMCDriver_ScanLab_double dScaleYInMMperEncoderStep) = 0;

	/**
	* IRTCContext::DisableMarkOnTheFly2D - Disable mark on the fly 2D. This is a list command.
	*/
	virtual void DisableMarkOnTheFly2D() = 0;

	/**
	* IRTCContext::MarkOnTheFly2DIsEnabled - Returns if mark on the fly 2D has been enabled.
	* @return Returns true if mark on the fly 2D is enabled.
	*/
	virtual bool MarkOnTheFly2DIsEnabled() = 0;

	/**
	* IRTCContext::Get2DMarkOnTheFlyPosition - Returns 2D mark on the fly position.
	* @param[out] nPositionX - Mark on the fly position X
	* @param[out] nPositionY - Mark on the fly position Y
	*/
	virtual void Get2DMarkOnTheFlyPosition(LibMCDriver_ScanLab_int32 & nPositionX, LibMCDriver_ScanLab_int32 & nPositionY) = 0;

	/**
	* IRTCContext::CheckOnTheFlyError - Checks mark on the fly error.
	* @param[in] bFailIfError - If true, the call will fail in case of an error.
	* @return Bitfield corresponding to the get_marking_info call, as described in the RTC SDK Documentation.
	*/
	virtual LibMCDriver_ScanLab_uint32 CheckOnTheFlyError(const bool bFailIfError) = 0;

	/**
	* IRTCContext::LaserPowerCalibrationIsEnabled - Returns if the laser power calibration table is non-empty.
	* @return Laser Calibration Is Enabled
	*/
	virtual bool LaserPowerCalibrationIsEnabled() = 0;

	/**
	* IRTCContext::LaserPowerCalibrationIsLinear - Returns if the laser power calibration table has one entry.
	* @return Laser Calibration Is Affine Linear
	*/
	virtual bool LaserPowerCalibrationIsLinear() = 0;

	/**
	* IRTCContext::ClearLaserPowerCalibration - Clears the laser power calibration table.
	*/
	virtual void ClearLaserPowerCalibration() = 0;

	/**
	* IRTCContext::GetLaserPowerCalibration - Returns the laser power calibration table. Fails if laser calibration is not enabled.
	* @param[in] nCalibrationPointsBufferSize - Number of elements in buffer
	* @param[out] pCalibrationPointsNeededCount - will be filled with the count of the written structs, or needed buffer size.
	* @param[out] pCalibrationPointsBuffer - LaserCalibrationPoint buffer of Laser Calibration Points
	*/
	virtual void GetLaserPowerCalibration(LibMCDriver_ScanLab_uint64 nCalibrationPointsBufferSize, LibMCDriver_ScanLab_uint64* pCalibrationPointsNeededCount, LibMCDriver_ScanLab::sLaserCalibrationPoint * pCalibrationPointsBuffer) = 0;

	/**
	* IRTCContext::SetLinearLaserPowerCalibration - Enables the laser power calibration with an affine linear tranformation.
	* @param[in] dPowerOffsetInPercent - Additional offset of the Power value.
	* @param[in] dPowerOutputScaling - Scaling factor of the laser output.
	*/
	virtual void SetLinearLaserPowerCalibration(const LibMCDriver_ScanLab_double dPowerOffsetInPercent, const LibMCDriver_ScanLab_double dPowerOutputScaling) = 0;

	/**
	* IRTCContext::SetPiecewiseLinearLaserPowerCalibration - Enables the laser power calibration with multiple calibration point values. Table MUST NOT have negative power entries. Laser Power Output will be linear scaled with the given values within their respective intervals. Any laser power outside of the minimum or maximum Power values will be scaled according to the respective minimum or maximum scaling value.
	* @param[in] nCalibrationPointsBufferSize - Number of elements in buffer
	* @param[in] pCalibrationPointsBuffer - Laser Calibration Points. Array will be sorted by Laser Power Keys. Array MUST NOT be empty. Array MUST NOT have duplicate entries (to an accuracy of 0.01 Percent).
	*/
	virtual void SetPiecewiseLinearLaserPowerCalibration(const LibMCDriver_ScanLab_uint64 nCalibrationPointsBufferSize, const LibMCDriver_ScanLab::sLaserCalibrationPoint * pCalibrationPointsBuffer) = 0;

	/**
	* IRTCContext::EnableSpatialLaserPowerModulation - Enables a spatial laser power modulation via callback.
	* @param[in] pModulationCallback - callback function
	* @param[in] nUserData - Userdata that is passed to the callback function
	*/
	virtual void EnableSpatialLaserPowerModulation(const LibMCDriver_ScanLab::SpatialPowerModulationCallback pModulationCallback, const LibMCDriver_ScanLab_pvoid pUserData) = 0;

	/**
	* IRTCContext::DisablePowerModulation - Disables all power modulation functions.
	*/
	virtual void DisablePowerModulation() = 0;

	/**
	* IRTCContext::EnableLineSubdivision - If this function is enabled, all mark lines will be subdivided so that the maximum length is small than the threshold.
	* @param[in] dLengthThreshold - Length threshold in mm.
	*/
	virtual void EnableLineSubdivision(const LibMCDriver_ScanLab_double dLengthThreshold) = 0;

	/**
	* IRTCContext::DisableLineSubdivision - Disables the subdivision of mark lines.
	*/
	virtual void DisableLineSubdivision() = 0;

	/**
	* IRTCContext::ReadMultiMCBSP - Reads a multi MCBSP register from the RTC Card. Should be used only for debugging purposes.
	* @param[in] nRegisterNo - Number of the register to read.
	* @return Value of the register.
	*/
	virtual LibMCDriver_ScanLab_int32 ReadMultiMCBSP(const LibMCDriver_ScanLab_uint32 nRegisterNo) = 0;

	/**
	* IRTCContext::CreateUARTConnection - Creates a new UART Connection. Closes any other one that might be active.
	* @param[in] nDesiredBaudRate - Desired baud rate. 160 Bd…12.8 MBd.  The other RS-232 interface parameters cannot be altered (data bits: 8, start bits: 1, stop bits: 1, parity: none).
	* @return UART Connection instance.
	*/
	virtual IUARTConnection * CreateUARTConnection(const LibMCDriver_ScanLab_uint32 nDesiredBaudRate) = 0;

	/**
	* IRTCContext::EnableScanAhead - Enables the Scanahead mode of the RTC card.
	* @param[in] nHeadNo - Head Number
	* @param[in] nTableNo - Table Number
	*/
	virtual void EnableScanAhead(const LibMCDriver_ScanLab_uint32 nHeadNo, const LibMCDriver_ScanLab_uint32 nTableNo) = 0;

	/**
	* IRTCContext::DisableScanAhead - Disables the Scanahead mode of the RTC card.
	*/
	virtual void DisableScanAhead() = 0;

	/**
	* IRTCContext::ActivateScanAheadAutoDelays - Activates the ScanAhead Auto Delays.
	*/
	virtual void ActivateScanAheadAutoDelays() = 0;

	/**
	* IRTCContext::DeactivateScanAheadAutoDelays - Deactivates the ScanAhead Auto Delays.
	*/
	virtual void DeactivateScanAheadAutoDelays() = 0;

	/**
	* IRTCContext::ScanAheadAutoDelaysAreActivated - Returns if ScanAhead Auto Delays are activated.
	* @return Returns true if Auto Delays are activated.
	*/
	virtual bool ScanAheadAutoDelaysAreActivated() = 0;

	/**
	* IRTCContext::SetScanAheadLaserShiftsInMicroseconds - Enables the Scanahead mode of the RTC card.
	* @param[in] dLaserOnShiftInMicroSeconds - Laser on shift in Microseconds. Will be rounded to 64th microseconds.
	* @param[in] dLaserOffShiftInMicroSeconds - Laser off shift in Microseconds. Will be rounded to 64th microseconds.
	*/
	virtual void SetScanAheadLaserShiftsInMicroseconds(const LibMCDriver_ScanLab_double dLaserOnShiftInMicroSeconds, const LibMCDriver_ScanLab_double dLaserOffShiftInMicroSeconds) = 0;

	/**
	* IRTCContext::SetScanAheadLaserShiftsInUnits - Enables the Scanahead mode of the RTC card.
	* @param[in] nLaserOnShift - Laser on shift in Units, which are 1/64th of a Microsecond.
	* @param[in] nLaserOffShift - Laser on shift in Units, which are 1/64th of a Microsecond.
	*/
	virtual void SetScanAheadLaserShiftsInUnits(const LibMCDriver_ScanLab_int32 nLaserOnShift, const LibMCDriver_ScanLab_int32 nLaserOffShift) = 0;

	/**
	* IRTCContext::SetScanAheadLineParameters - Controls the Scanahead Line parameters.
	* @param[in] nCornerScale - Corner sharpness scale in Percent.. 100 percent means sharp corners. Values above 100 will be clipped to 100.
	* @param[in] nEndScale - Line end sharpness scale in Percent.. 100 percent means straight line ends. Values above 100 will be clipped to 100.
	* @param[in] nAccelerationScale - Fraction of active laser time (not path lenght) during acceleration in Percent.. 100 percent means sharp corners. Values above 100 will be clipped to 100.
	*/
	virtual void SetScanAheadLineParameters(const LibMCDriver_ScanLab_uint32 nCornerScale, const LibMCDriver_ScanLab_uint32 nEndScale, const LibMCDriver_ScanLab_uint32 nAccelerationScale) = 0;

};

typedef IBaseSharedPtr<IRTCContext> PIRTCContext;


/*************************************************************************************************************************
 Class interface for RTCSelector 
**************************************************************************************************************************/

class IRTCSelector : public virtual IBase {
public:
	/**
	* IRTCSelector::SearchCards - Searches Ethernet Cards
	* @param[in] sIP - IP Network Address.
	* @param[in] sNetmask - IP Netmask Address.
	* @param[in] nTimeout - Time out in microseconds.
	* @return Returns how many ethernet cards have been found.
	*/
	virtual LibMCDriver_ScanLab_uint32 SearchCards(const std::string & sIP, const std::string & sNetmask, const LibMCDriver_ScanLab_uint32 nTimeout) = 0;

	/**
	* IRTCSelector::SearchCardsByRange - Searches Ethernet Cards
	* @param[in] sStartIP - IP Network Address.
	* @param[in] sEndIP - IP Network Address.
	* @param[in] nTimeout - Time out in microseconds.
	* @return Returns how many ethernet cards have been found.
	*/
	virtual LibMCDriver_ScanLab_uint32 SearchCardsByRange(const std::string & sStartIP, const std::string & sEndIP, const LibMCDriver_ScanLab_uint32 nTimeout) = 0;

	/**
	* IRTCSelector::GetCardCount - Returns number of detected Cards
	* @return Returns how many cards have been found.
	*/
	virtual LibMCDriver_ScanLab_uint32 GetCardCount() = 0;

	/**
	* IRTCSelector::GetEthernetCardCount - Returns number of found ethernet cards
	* @return Returns how many ethernet cards have been found.
	*/
	virtual LibMCDriver_ScanLab_uint32 GetEthernetCardCount() = 0;

	/**
	* IRTCSelector::AcquireCard - Acquires a card and returns an RTCContext instance.
	* @param[in] nNumber - Number of Card (1-based). Must be between 1 and CardCount.
	* @return New Context# instance
	*/
	virtual IRTCContext * AcquireCard(const LibMCDriver_ScanLab_uint32 nNumber) = 0;

	/**
	* IRTCSelector::AcquireCardBySerial - Acquires a card and returns an RTCContext instance.
	* @param[in] nSerialNumber - Desired Serial Number of card.
	* @return New Context# instance
	*/
	virtual IRTCContext * AcquireCardBySerial(const LibMCDriver_ScanLab_uint32 nSerialNumber) = 0;

	/**
	* IRTCSelector::AcquireEthernetCard - Acquires an ethernet card and returns an RTCContext instance.
	* @param[in] nNumber - Number of Card (1-based). Must be between 1 and EthernetCardCount.
	* @return New Context# instance
	*/
	virtual IRTCContext * AcquireEthernetCard(const LibMCDriver_ScanLab_uint32 nNumber) = 0;

	/**
	* IRTCSelector::AcquireEthernetCardBySerial - Acquires an ethernet card and returns an RTCContext instance.
	* @param[in] nSerialNumber - Desired Serial Number of card.
	* @return New Context# instance
	*/
	virtual IRTCContext * AcquireEthernetCardBySerial(const LibMCDriver_ScanLab_uint32 nSerialNumber) = 0;

};

typedef IBaseSharedPtr<IRTCSelector> PIRTCSelector;


/*************************************************************************************************************************
 Class interface for Driver_ScanLab 
**************************************************************************************************************************/

class IDriver_ScanLab : public virtual IDriver {
public:
	/**
	* IDriver_ScanLab::LoadSDK - Initializes the ScanLab SDK.
	* @param[in] sResourceName - Resource name of Scanlab DLL
	*/
	virtual void LoadSDK(const std::string & sResourceName) = 0;

	/**
	* IDriver_ScanLab::LoadCustomSDK - Initializes the ScanLab SDK from an external source.
	* @param[in] nScanlabDLLBufferSize - Number of elements in buffer
	* @param[in] pScanlabDLLBuffer - Byte array of Scanlab DLL
	*/
	virtual void LoadCustomSDK(const LibMCDriver_ScanLab_uint64 nScanlabDLLBufferSize, const LibMCDriver_ScanLab_uint8 * pScanlabDLLBuffer) = 0;

	/**
	* IDriver_ScanLab::CreateRTCSelector - Creates and initializes a new RTC selector singleton. Should only be called once per Process.
	* @return New Selector instance
	*/
	virtual IRTCSelector * CreateRTCSelector() = 0;

	/**
	* IDriver_ScanLab::EnableJournaling - Enables journaling of the SDK. MUST be called before LoadSDK or LoadCustomSDK.
	*/
	virtual void EnableJournaling() = 0;

	/**
	* IDriver_ScanLab::SetFirmware - Sets the default firmware from the driver resources. If given, Initialise will upload this firmware before acquiring the RTC card.
	* @param[in] sFirmwareResource - resource name of the firmware program file.
	* @param[in] sFPGAResource - resource name of the firmware FPGA file.
	* @param[in] sAuxiliaryResource - resource name of the binary auxiliary file.
	*/
	virtual void SetFirmware(const std::string & sFirmwareResource, const std::string & sFPGAResource, const std::string & sAuxiliaryResource) = 0;

	/**
	* IDriver_ScanLab::SetCustomFirmware - Sets the default firmware from a binary array. If given, Initialise will upload this firmware before acquiring the RTC card.
	* @param[in] nFirmwareDataBufferSize - Number of elements in buffer
	* @param[in] pFirmwareDataBuffer - byte array of the firmware program file.
	* @param[in] nFPGADataBufferSize - Number of elements in buffer
	* @param[in] pFPGADataBuffer - byte array of the firmware FPGA file.
	* @param[in] nAuxiliaryDataBufferSize - Number of elements in buffer
	* @param[in] pAuxiliaryDataBuffer - byte array of the binary auxiliary file.
	*/
	virtual void SetCustomFirmware(const LibMCDriver_ScanLab_uint64 nFirmwareDataBufferSize, const LibMCDriver_ScanLab_uint8 * pFirmwareDataBuffer, const LibMCDriver_ScanLab_uint64 nFPGADataBufferSize, const LibMCDriver_ScanLab_uint8 * pFPGADataBuffer, const LibMCDriver_ScanLab_uint64 nAuxiliaryDataBufferSize, const LibMCDriver_ScanLab_uint8 * pAuxiliaryDataBuffer) = 0;

};

typedef IBaseSharedPtr<IDriver_ScanLab> PIDriver_ScanLab;


/*************************************************************************************************************************
 Class interface for Driver_ScanLab_RTC6 
**************************************************************************************************************************/

class IDriver_ScanLab_RTC6 : public virtual IDriver_ScanLab {
public:
	/**
	* IDriver_ScanLab_RTC6::SetToSimulationMode - Turns the driver into a simulation mode.
	*/
	virtual void SetToSimulationMode() = 0;

	/**
	* IDriver_ScanLab_RTC6::IsSimulationMode - Returns if the driver is in simulation mode.
	* @return Flag if driver is in simulation mode.
	*/
	virtual bool IsSimulationMode() = 0;

	/**
	* IDriver_ScanLab_RTC6::IsInitialized - Returns if the driver is initalized.
	* @return Flag if driver is initialized.
	*/
	virtual bool IsInitialized() = 0;

	/**
	* IDriver_ScanLab_RTC6::Initialise - Manually initializes the RTC6 Scanner Driver.
	* @param[in] sIP - IP Network Address. Empty string for local card.
	* @param[in] sNetmask - IP Netmask Address. Empty string for local card.
	* @param[in] nTimeout - Time out in microseconds.
	* @param[in] nSerialNumber - Desired Serial Number of card.
	*/
	virtual void Initialise(const std::string & sIP, const std::string & sNetmask, const LibMCDriver_ScanLab_uint32 nTimeout, const LibMCDriver_ScanLab_uint32 nSerialNumber) = 0;

	/**
	* IDriver_ScanLab_RTC6::InitialiseFromConfiguration - Initializes the RTC6 Scanner Driver from a configuration preset. Calls Initialise, LoadFirmware, SetCorrectionFile, ConfigureLaserMode and ConfigureDelays.
	* @param[in] sPresetName - Name of the configuration preset.
	*/
	virtual void InitialiseFromConfiguration(const std::string & sPresetName) = 0;

	/**
	* IDriver_ScanLab_RTC6::SetCommunicationTimeouts - Set RTC Ethernet communication timeouts. The given values will be defaults for all subsequent connections.
	* @param[in] dInitialTimeout - Initial timeout in ms
	* @param[in] dMaxTimeout - Max timeout in ms
	* @param[in] dMultiplier - Multiplier
	*/
	virtual void SetCommunicationTimeouts(const LibMCDriver_ScanLab_double dInitialTimeout, const LibMCDriver_ScanLab_double dMaxTimeout, const LibMCDriver_ScanLab_double dMultiplier) = 0;

	/**
	* IDriver_ScanLab_RTC6::GetIPAddress - Returns the IP Address of the RTC Card. Fails if driver has not been initialized.
	* @return IP Address Value.
	*/
	virtual std::string GetIPAddress() = 0;

	/**
	* IDriver_ScanLab_RTC6::GetNetmask - Returns the Netmask of the RTC Card. Fails if driver has not been initialized.
	* @return Netmask Value.
	*/
	virtual std::string GetNetmask() = 0;

	/**
	* IDriver_ScanLab_RTC6::GetSerialNumber - Returns the Serial Number of the RTC Card. Fails if driver has not been initialized.
	* @return Serial Number of card.
	*/
	virtual LibMCDriver_ScanLab_uint32 GetSerialNumber() = 0;

	/**
	* IDriver_ScanLab_RTC6::GetContext - Returns the RTC Context Instance. Fails if it card has not been initialised.
	* @return RTC Context Instance.
	*/
	virtual IRTCContext * GetContext() = 0;

	/**
	* IDriver_ScanLab_RTC6::GetSelector - Returns the RTC Selector Instance. Fails if it card has not been initialised.
	* @return RTC Selector Instance.
	*/
	virtual IRTCSelector * GetSelector() = 0;

	/**
	* IDriver_ScanLab_RTC6::LoadFirmware - Loads the firmware from the driver resources. DEPRECIATED. Use SetFirmare before calling Initialise..
	* @param[in] sFirmwareResource - resource name of the firmware program file.
	* @param[in] sFPGAResource - resource name of the firmware FPGA file.
	* @param[in] sAuxiliaryResource - resource name of the binary auxiliary file.
	*/
	virtual void LoadFirmware(const std::string & sFirmwareResource, const std::string & sFPGAResource, const std::string & sAuxiliaryResource) = 0;

	/**
	* IDriver_ScanLab_RTC6::LoadCustomFirmware - Loads the firmware from custom resources. DEPRECIATED. Use SetCustomFirmare before calling Initialise..
	* @param[in] nFirmwareDataBufferSize - Number of elements in buffer
	* @param[in] pFirmwareDataBuffer - byte array of the firmware program file.
	* @param[in] nFPGADataBufferSize - Number of elements in buffer
	* @param[in] pFPGADataBuffer - byte array of the firmware FPGA file.
	* @param[in] nAuxiliaryDataBufferSize - Number of elements in buffer
	* @param[in] pAuxiliaryDataBuffer - byte array of the binary auxiliary file.
	*/
	virtual void LoadCustomFirmware(const LibMCDriver_ScanLab_uint64 nFirmwareDataBufferSize, const LibMCDriver_ScanLab_uint8 * pFirmwareDataBuffer, const LibMCDriver_ScanLab_uint64 nFPGADataBufferSize, const LibMCDriver_ScanLab_uint8 * pFPGADataBuffer, const LibMCDriver_ScanLab_uint64 nAuxiliaryDataBufferSize, const LibMCDriver_ScanLab_uint8 * pAuxiliaryDataBuffer) = 0;

	/**
	* IDriver_ScanLab_RTC6::SetCorrectionFile - Sets the correction file stream.
	* @param[in] nCorrectionFileBufferSize - Number of elements in buffer
	* @param[in] pCorrectionFileBuffer - binary data of the correction file.
	* @param[in] nTableNumber - Correction table index of card (1..8)
	* @param[in] nDimension - Is it a 2D or 3D correction file.
	* @param[in] nTableNumberHeadA - Table number of Head A.
	* @param[in] nTableNumberHeadB - Table number of Head B.
	*/
	virtual void SetCorrectionFile(const LibMCDriver_ScanLab_uint64 nCorrectionFileBufferSize, const LibMCDriver_ScanLab_uint8 * pCorrectionFileBuffer, const LibMCDriver_ScanLab_uint32 nTableNumber, const LibMCDriver_ScanLab_uint32 nDimension, const LibMCDriver_ScanLab_uint32 nTableNumberHeadA, const LibMCDriver_ScanLab_uint32 nTableNumberHeadB) = 0;

	/**
	* IDriver_ScanLab_RTC6::ConfigureLaserMode - Configures the laser mode. MUST be called before any exposure.
	* @param[in] eLaserMode - Laser Mode Enum
	* @param[in] eLaserPort - Laser Port Enum
	* @param[in] dMaxLaserPower - Maximum laser power.
	* @param[in] bFinishLaserPulseAfterOn - Finish laser pulse after LaserOn
	* @param[in] bPhaseShiftOfLaserSignal - 180 degree phase shift of Laser signal
	* @param[in] bLaserOnSignalLowActive - Set Laser On Signal Low Active
	* @param[in] bLaserHalfSignalsLowActive - Set Laser Half Signal Low Active
	* @param[in] bSetDigitalInOneHighActive - Set Digital In 1 high Active
	* @param[in] bOutputSynchronizationActive - Output synchronization active
	*/
	virtual void ConfigureLaserMode(const LibMCDriver_ScanLab::eLaserMode eLaserMode, const LibMCDriver_ScanLab::eLaserPort eLaserPort, const LibMCDriver_ScanLab_double dMaxLaserPower, const bool bFinishLaserPulseAfterOn, const bool bPhaseShiftOfLaserSignal, const bool bLaserOnSignalLowActive, const bool bLaserHalfSignalsLowActive, const bool bSetDigitalInOneHighActive, const bool bOutputSynchronizationActive) = 0;

	/**
	* IDriver_ScanLab_RTC6::ConfigureDelays - Configures the default laser and scanner delays. ATTENTION: Will create and overwrite execution list 1!
	* @param[in] dLaserOnDelay - Laser On Delay in Microseconds
	* @param[in] dLaserOffDelay - Laser Off Delay in Microseconds
	* @param[in] dMarkDelay - Mark delay in microseconds (will be rounded to a multiple of 10)
	* @param[in] dJumpDelay - Jump delay in microseconds (will be rounded to a multiple of 10)
	* @param[in] dPolygonDelay - Polygon delay in microseconds (will be rounded to a multiple of 10)
	*/
	virtual void ConfigureDelays(const LibMCDriver_ScanLab_double dLaserOnDelay, const LibMCDriver_ScanLab_double dLaserOffDelay, const LibMCDriver_ScanLab_double dMarkDelay, const LibMCDriver_ScanLab_double dJumpDelay, const LibMCDriver_ScanLab_double dPolygonDelay) = 0;

	/**
	* IDriver_ScanLab_RTC6::SetOIERecordingMode - Sets the recording mode for using the Open Interface extension. Will be taken into account by DrawLayer. Default is No Recording.
	* @param[in] eRecordingMode - Recording mode enum
	*/
	virtual void SetOIERecordingMode(const LibMCDriver_ScanLab::eOIERecordingMode eRecordingMode) = 0;

	/**
	* IDriver_ScanLab_RTC6::GetOIERecordingMode - Returns the recording mode for using the Open Interface extension, taking into account by DrawLayer. Default is No Recording.
	* @return Recording mode enum
	*/
	virtual LibMCDriver_ScanLab::eOIERecordingMode GetOIERecordingMode() = 0;

	/**
	* IDriver_ScanLab_RTC6::EnableAttributeFilter - Enables filtering of the segments by segment attributes. A segment will only be drawn if the given integer attribute has the given value.
	* @param[in] sNameSpace - Namespace of Attribute to filter for.
	* @param[in] sAttributeName - Name of Attribute to filter for.
	* @param[in] nAttributeValue - Attribute Value to filter for.
	*/
	virtual void EnableAttributeFilter(const std::string & sNameSpace, const std::string & sAttributeName, const LibMCDriver_ScanLab_int64 nAttributeValue) = 0;

	/**
	* IDriver_ScanLab_RTC6::DisableAttributeFilter - Disables filtering of the segments by segment attributes.
	*/
	virtual void DisableAttributeFilter() = 0;

	/**
	* IDriver_ScanLab_RTC6::DrawLayer - Draws a layer of a build stream. Blocks until the layer is drawn.
	* @param[in] sStreamUUID - UUID of the build stream. Must have been loaded in memory by the system.
	* @param[in] nLayerIndex - Layer index of the build file.
	*/
	virtual void DrawLayer(const std::string & sStreamUUID, const LibMCDriver_ScanLab_uint32 nLayerIndex) = 0;

	/**
	* IDriver_ScanLab_RTC6::GetCommunicationTimeouts - Returns the current RTC Ethernet communication timeouts. Fails, if no RTC card has been acquired yet.
	* @param[out] dInitialTimeout - Initial timeout in ms
	* @param[out] dMaxTimeout - Max timeout in ms
	* @param[out] dMultiplier - Multiplier
	*/
	virtual void GetCommunicationTimeouts(LibMCDriver_ScanLab_double & dInitialTimeout, LibMCDriver_ScanLab_double & dMaxTimeout, LibMCDriver_ScanLab_double & dMultiplier) = 0;

	/**
	* IDriver_ScanLab_RTC6::GetDefaultCommunicationTimeouts - Returns the RTC Ethernet communication timeouts that will be used for a subsequent connection.
	* @param[out] dInitialTimeout - Initial timeout in ms
	* @param[out] dMaxTimeout - Max timeout in ms
	* @param[out] dMultiplier - Multiplier
	*/
	virtual void GetDefaultCommunicationTimeouts(LibMCDriver_ScanLab_double & dInitialTimeout, LibMCDriver_ScanLab_double & dMaxTimeout, LibMCDriver_ScanLab_double & dMultiplier) = 0;

	/**
	* IDriver_ScanLab_RTC6::EnableTimelagCompensation - Enables timelag compensation.
	* @param[in] nTimeLagXYInMicroseconds - Time lag of XY axes (in microseconds). MUST be a multiple of 10.
	* @param[in] nTimeLagZInMicroseconds - Time lag of Z axis (in microseconds). MUST be a multiple of 10.
	*/
	virtual void EnableTimelagCompensation(const LibMCDriver_ScanLab_uint32 nTimeLagXYInMicroseconds, const LibMCDriver_ScanLab_uint32 nTimeLagZInMicroseconds) = 0;

	/**
	* IDriver_ScanLab_RTC6::DisableTimelagCompensation - Disables timelag compensation.
	*/
	virtual void DisableTimelagCompensation() = 0;

};

typedef IBaseSharedPtr<IDriver_ScanLab_RTC6> PIDriver_ScanLab_RTC6;


/*************************************************************************************************************************
 Class interface for Driver_ScanLab_RTC6xN 
**************************************************************************************************************************/

class IDriver_ScanLab_RTC6xN : public virtual IDriver_ScanLab {
public:
	/**
	* IDriver_ScanLab_RTC6xN::SetToSimulationMode - Turns the driver into a simulation mode.
	*/
	virtual void SetToSimulationMode() = 0;

	/**
	* IDriver_ScanLab_RTC6xN::IsSimulationMode - Returns if the driver is in simulation mode.
	* @return Flag if driver is in simulation mode.
	*/
	virtual bool IsSimulationMode() = 0;

	/**
	* IDriver_ScanLab_RTC6xN::IsInitialized - Returns if all the scanners of the driver are initalized.
	* @return Flag if driver is initialized.
	*/
	virtual bool IsInitialized() = 0;

	/**
	* IDriver_ScanLab_RTC6xN::ScannerIsInitialized - Returns if a specific scanners of the driver are initalized.
	* @param[in] nScannerIndex - Index of the scanner (0-based). MUST be smaller than ScannerCount
	* @return Flag if scanner is initialized.
	*/
	virtual bool ScannerIsInitialized(const LibMCDriver_ScanLab_uint32 nScannerIndex) = 0;

	/**
	* IDriver_ScanLab_RTC6xN::GetScannerCount - Returns if number of scanners.
	* @return Number of scanners supported by this driver.
	*/
	virtual LibMCDriver_ScanLab_uint32 GetScannerCount() = 0;

	/**
	* IDriver_ScanLab_RTC6xN::InitialiseScanner - Initializes one of the RTC6 Scanner Drivers.
	* @param[in] nScannerIndex - Index of the scanner (0-based). MUST be smaller than ScannerCount
	* @param[in] sIP - IP Network Address. Empty string for local card.
	* @param[in] sNetmask - IP Netmask Address. Empty string for local card.
	* @param[in] nTimeout - Time out in microseconds.
	* @param[in] nSerialNumber - Desired Serial Number of card.
	* @param[in] nLaserIndex - Associated Laser Index from the toolpath data. 1-based, MUST NOT be 0. Each Scanner MUST own a unique laser index.
	*/
	virtual void InitialiseScanner(const LibMCDriver_ScanLab_uint32 nScannerIndex, const std::string & sIP, const std::string & sNetmask, const LibMCDriver_ScanLab_uint32 nTimeout, const LibMCDriver_ScanLab_uint32 nSerialNumber, const LibMCDriver_ScanLab_uint32 nLaserIndex) = 0;

	/**
	* IDriver_ScanLab_RTC6xN::InitialiseScannerFromConfiguration - Initializes the RTC6 Scanner Driver from a configuration preset. Calls Initialise, LoadFirmware, SetCorrectionFile, ConfigureLaserMode and ConfigureDelays.
	* @param[in] nScannerIndex - Index of the scanner (0-based). MUST be smaller than ScannerCount
	* @param[in] sPresetName - Name of the configuration preset.
	*/
	virtual void InitialiseScannerFromConfiguration(const LibMCDriver_ScanLab_uint32 nScannerIndex, const std::string & sPresetName) = 0;

	/**
	* IDriver_ScanLab_RTC6xN::GetIPAddress - Returns the IP Address of the RTC Card. Fails if driver has not been initialized.
	* @param[in] nScannerIndex - Index of the scanner (0-based). MUST be smaller than ScannerCount
	* @return IP Address Value.
	*/
	virtual std::string GetIPAddress(const LibMCDriver_ScanLab_uint32 nScannerIndex) = 0;

	/**
	* IDriver_ScanLab_RTC6xN::GetNetmask - Returns the Netmask of the RTC Card. Fails if driver has not been initialized.
	* @param[in] nScannerIndex - Index of the scanner (0-based). MUST be smaller than ScannerCount
	* @return Netmask Value.
	*/
	virtual std::string GetNetmask(const LibMCDriver_ScanLab_uint32 nScannerIndex) = 0;

	/**
	* IDriver_ScanLab_RTC6xN::GetSerialNumber - Returns the Serial Number of the RTC Card. Fails if driver has not been initialized.
	* @param[in] nScannerIndex - Index of the scanner (0-based). MUST be smaller than ScannerCount
	* @return Serial Number of card.
	*/
	virtual LibMCDriver_ScanLab_uint32 GetSerialNumber(const LibMCDriver_ScanLab_uint32 nScannerIndex) = 0;

	/**
	* IDriver_ScanLab_RTC6xN::GetLaserIndex - Returns associated Laser Index from the toolpath data.
	* @param[in] nScannerIndex - Index of the scanner (0-based). MUST be smaller than ScannerCount
	* @return Associated Laser Index from the toolpath data.
	*/
	virtual LibMCDriver_ScanLab_uint32 GetLaserIndex(const LibMCDriver_ScanLab_uint32 nScannerIndex) = 0;

	/**
	* IDriver_ScanLab_RTC6xN::GetSelector - Returns the RTC Selector Instance. Fails if it card has not been initialised.
	* @return RTC Selector Instance.
	*/
	virtual IRTCSelector * GetSelector() = 0;

	/**
	* IDriver_ScanLab_RTC6xN::GetContext - Returns the RTC Context Instance. Fails if it card has not been initialised.
	* @param[in] nScannerIndex - Index of the scanner (0-based). MUST be smaller than ScannerCount
	* @return RTC Context Instance.
	*/
	virtual IRTCContext * GetContext(const LibMCDriver_ScanLab_uint32 nScannerIndex) = 0;

	/**
	* IDriver_ScanLab_RTC6xN::LoadFirmware - Loads the firmware from the driver resources and for a specific scanner. DEPRECIATED. Use SetFirmare before calling Initialise..
	* @param[in] nScannerIndex - Index of the scanner (0-based). MUST be smaller than ScannerCount
	* @param[in] sFirmwareResource - resource name of the firmware program file.
	* @param[in] sFPGAResource - resource name of the firmware FPGA file.
	* @param[in] sAuxiliaryResource - resource name of the binary auxiliary file.
	*/
	virtual void LoadFirmware(const LibMCDriver_ScanLab_uint32 nScannerIndex, const std::string & sFirmwareResource, const std::string & sFPGAResource, const std::string & sAuxiliaryResource) = 0;

	/**
	* IDriver_ScanLab_RTC6xN::LoadCustomFirmware - Loads the firmware from custom resources and for a specific scanner. DEPRECIATED. Use SetCustomFirmare before calling Initialise..
	* @param[in] nScannerIndex - Index of the scanner (0-based). MUST be smaller than ScannerCount
	* @param[in] nFirmwareDataBufferSize - Number of elements in buffer
	* @param[in] pFirmwareDataBuffer - byte array of the firmware program file.
	* @param[in] nFPGADataBufferSize - Number of elements in buffer
	* @param[in] pFPGADataBuffer - byte array of the firmware FPGA file.
	* @param[in] nAuxiliaryDataBufferSize - Number of elements in buffer
	* @param[in] pAuxiliaryDataBuffer - byte array of the binary auxiliary file.
	*/
	virtual void LoadCustomFirmware(const LibMCDriver_ScanLab_uint32 nScannerIndex, const LibMCDriver_ScanLab_uint64 nFirmwareDataBufferSize, const LibMCDriver_ScanLab_uint8 * pFirmwareDataBuffer, const LibMCDriver_ScanLab_uint64 nFPGADataBufferSize, const LibMCDriver_ScanLab_uint8 * pFPGADataBuffer, const LibMCDriver_ScanLab_uint64 nAuxiliaryDataBufferSize, const LibMCDriver_ScanLab_uint8 * pAuxiliaryDataBuffer) = 0;

	/**
	* IDriver_ScanLab_RTC6xN::SetCorrectionFile - Sets the correction file stream.
	* @param[in] nScannerIndex - Index of the scanner (0-based). MUST be smaller than ScannerCount
	* @param[in] nCorrectionFileBufferSize - Number of elements in buffer
	* @param[in] pCorrectionFileBuffer - binary data of the correction file.
	* @param[in] nTableNumber - Correction table index of card (1..8)
	* @param[in] nDimension - Is it a 2D or 3D correction file.
	* @param[in] nTableNumberHeadA - Table number of Head A.
	* @param[in] nTableNumberHeadB - Table number of Head B.
	*/
	virtual void SetCorrectionFile(const LibMCDriver_ScanLab_uint32 nScannerIndex, const LibMCDriver_ScanLab_uint64 nCorrectionFileBufferSize, const LibMCDriver_ScanLab_uint8 * pCorrectionFileBuffer, const LibMCDriver_ScanLab_uint32 nTableNumber, const LibMCDriver_ScanLab_uint32 nDimension, const LibMCDriver_ScanLab_uint32 nTableNumberHeadA, const LibMCDriver_ScanLab_uint32 nTableNumberHeadB) = 0;

	/**
	* IDriver_ScanLab_RTC6xN::ConfigureLaserMode - Configures the laser mode.
	* @param[in] nScannerIndex - Index of the scanner (0-based). MUST be smaller than ScannerCount
	* @param[in] eLaserMode - Laser Mode Enum
	* @param[in] eLaserPort - Laser Port Enum
	* @param[in] dMaxLaserPower - Maximum laser power.
	* @param[in] bFinishLaserPulseAfterOn - Finish laser pulse after LaserOn
	* @param[in] bPhaseShiftOfLaserSignal - 180 degree phase shift of Laser signal
	* @param[in] bLaserOnSignalLowActive - Set Laser On Signal Low Active
	* @param[in] bLaserHalfSignalsLowActive - Set Laser Half Signal Low Active
	* @param[in] bSetDigitalInOneHighActive - Set Digital In 1 high Active
	* @param[in] bOutputSynchronizationActive - Output synchronization active
	*/
	virtual void ConfigureLaserMode(const LibMCDriver_ScanLab_uint32 nScannerIndex, const LibMCDriver_ScanLab::eLaserMode eLaserMode, const LibMCDriver_ScanLab::eLaserPort eLaserPort, const LibMCDriver_ScanLab_double dMaxLaserPower, const bool bFinishLaserPulseAfterOn, const bool bPhaseShiftOfLaserSignal, const bool bLaserOnSignalLowActive, const bool bLaserHalfSignalsLowActive, const bool bSetDigitalInOneHighActive, const bool bOutputSynchronizationActive) = 0;

	/**
	* IDriver_ScanLab_RTC6xN::ConfigureDelays - Configures the default laser and scanner delays. ATTENTION: Will create and overwrite execution list 1!
	* @param[in] nScannerIndex - Index of the scanner (0-based). MUST be smaller than ScannerCount
	* @param[in] dLaserOnDelay - Laser On Delay in Microseconds
	* @param[in] dLaserOffDelay - Laser Off Delay in Microseconds
	* @param[in] dMarkDelay - Mark delay in microseconds (will be rounded to a multiple of 10)
	* @param[in] dJumpDelay - Jump delay in microseconds (will be rounded to a multiple of 10)
	* @param[in] dPolygonDelay - Polygon delay in microseconds (will be rounded to a multiple of 10)
	*/
	virtual void ConfigureDelays(const LibMCDriver_ScanLab_uint32 nScannerIndex, const LibMCDriver_ScanLab_double dLaserOnDelay, const LibMCDriver_ScanLab_double dLaserOffDelay, const LibMCDriver_ScanLab_double dMarkDelay, const LibMCDriver_ScanLab_double dJumpDelay, const LibMCDriver_ScanLab_double dPolygonDelay) = 0;

	/**
	* IDriver_ScanLab_RTC6xN::SetOIERecordingMode - Sets the recording mode for using the Open Interface extension. Will be taken into account by DrawLayer. Default is No Recording.
	* @param[in] eRecordingMode - Recording mode enum
	*/
	virtual void SetOIERecordingMode(const LibMCDriver_ScanLab::eOIERecordingMode eRecordingMode) = 0;

	/**
	* IDriver_ScanLab_RTC6xN::GetOIERecordingMode - Returns the recording mode for using the Open Interface extension, taking into account by DrawLayer. Default is No Recording.
	* @return Recording mode enum
	*/
	virtual LibMCDriver_ScanLab::eOIERecordingMode GetOIERecordingMode() = 0;

	/**
	* IDriver_ScanLab_RTC6xN::EnableAttributeFilter - Enables filtering of the segments by segment attributes. A segment will only be drawn if the given integer attribute has the given value.
	* @param[in] sNameSpace - Namespace of Attribute to filter for.
	* @param[in] sAttributeName - Name of Attribute to filter for.
	* @param[in] nAttributeValue - Attribute Value to filter for.
	*/
	virtual void EnableAttributeFilter(const std::string & sNameSpace, const std::string & sAttributeName, const LibMCDriver_ScanLab_int64 nAttributeValue) = 0;

	/**
	* IDriver_ScanLab_RTC6xN::DisableAttributeFilter - Disables filtering of the segments by segment attributes.
	*/
	virtual void DisableAttributeFilter() = 0;

	/**
	* IDriver_ScanLab_RTC6xN::DrawLayer - Draws a layer of a build stream on List 1. Blocks until the layer is drawn. Laser Indices are automatically assigned. Will fail if 
	* @param[in] sStreamUUID - UUID of the build stream. Must have been loaded in memory by the system.
	* @param[in] nLayerIndex - Layer index of the build file.
	* @param[in] bFailIfNonAssignedDataExists - If true, the call will fail in case a layer contains data that is not assigned to any defined scanner card.
	*/
	virtual void DrawLayer(const std::string & sStreamUUID, const LibMCDriver_ScanLab_uint32 nLayerIndex, const bool bFailIfNonAssignedDataExists) = 0;

	/**
	* IDriver_ScanLab_RTC6xN::SetAllCommunicationTimeouts - Set RTC Ethernet communication timeouts for all existing and future connections.
	* @param[in] dInitialTimeout - Initial timeout in ms
	* @param[in] dMaxTimeout - Max timeout in ms
	* @param[in] dMultiplier - Multiplier
	*/
	virtual void SetAllCommunicationTimeouts(const LibMCDriver_ScanLab_double dInitialTimeout, const LibMCDriver_ScanLab_double dMaxTimeout, const LibMCDriver_ScanLab_double dMultiplier) = 0;

	/**
	* IDriver_ScanLab_RTC6xN::SetCommunicationTimeouts - Set RTC Ethernet communication timeouts for a specific scanner. The given values will be defaults for all subsequent connections.
	* @param[in] nScannerIndex - Index of the scanner (0-based). MUST be smaller than ScannerCount
	* @param[in] dInitialTimeout - Initial timeout in ms
	* @param[in] dMaxTimeout - Max timeout in ms
	* @param[in] dMultiplier - Multiplier
	*/
	virtual void SetCommunicationTimeouts(const LibMCDriver_ScanLab_uint32 nScannerIndex, const LibMCDriver_ScanLab_double dInitialTimeout, const LibMCDriver_ScanLab_double dMaxTimeout, const LibMCDriver_ScanLab_double dMultiplier) = 0;

	/**
	* IDriver_ScanLab_RTC6xN::GetCommunicationTimeouts - Get RTC Ethernet communication timeouts. Fails if the RTC Card is not connected.
	* @param[in] nScannerIndex - Index of the scanner (0-based). MUST be smaller than ScannerCount
	* @param[out] dInitialTimeout - Initial timeout in ms
	* @param[out] dMaxTimeout - Max timeout in ms
	* @param[out] dMultiplier - Multiplier
	*/
	virtual void GetCommunicationTimeouts(const LibMCDriver_ScanLab_uint32 nScannerIndex, LibMCDriver_ScanLab_double & dInitialTimeout, LibMCDriver_ScanLab_double & dMaxTimeout, LibMCDriver_ScanLab_double & dMultiplier) = 0;

	/**
	* IDriver_ScanLab_RTC6xN::GetDefaultCommunicationTimeouts - Returns the RTC Ethernet communication timeouts that will be used for any subsequent connection.
	* @param[out] dInitialTimeout - Initial timeout in ms
	* @param[out] dMaxTimeout - Max timeout in ms
	* @param[out] dMultiplier - Multiplier
	*/
	virtual void GetDefaultCommunicationTimeouts(LibMCDriver_ScanLab_double & dInitialTimeout, LibMCDriver_ScanLab_double & dMaxTimeout, LibMCDriver_ScanLab_double & dMultiplier) = 0;

	/**
	* IDriver_ScanLab_RTC6xN::EnableTimelagCompensation - Enables timelag compensation.
	* @param[in] nScannerIndex - Index of the scanner (0-based). MUST be smaller than ScannerCount
	* @param[in] nTimeLagXYInMicroseconds - Time lag of XY axes (in microseconds). MUST be a multiple of 10.
	* @param[in] nTimeLagZInMicroseconds - Time lag of Z axis (in microseconds). MUST be a multiple of 10.
	*/
	virtual void EnableTimelagCompensation(const LibMCDriver_ScanLab_uint32 nScannerIndex, const LibMCDriver_ScanLab_uint32 nTimeLagXYInMicroseconds, const LibMCDriver_ScanLab_uint32 nTimeLagZInMicroseconds) = 0;

	/**
	* IDriver_ScanLab_RTC6xN::DisableTimelagCompensation - Disables timelag compensation.
	* @param[in] nScannerIndex - Index of the scanner (0-based). MUST be smaller than ScannerCount
	*/
	virtual void DisableTimelagCompensation(const LibMCDriver_ScanLab_uint32 nScannerIndex) = 0;

};

typedef IBaseSharedPtr<IDriver_ScanLab_RTC6xN> PIDriver_ScanLab_RTC6xN;


/*************************************************************************************************************************
 Global functions declarations
**************************************************************************************************************************/
class CWrapper {
public:
	// Injected Components
	static LibMCEnv::PWrapper sPLibMCEnvWrapper;

	/**
	* Ilibmcdriver_scanlab::GetVersion - retrieves the binary version of this library.
	* @param[out] nMajor - returns the major version of this library
	* @param[out] nMinor - returns the minor version of this library
	* @param[out] nMicro - returns the micro version of this library
	*/
	static void GetVersion(LibMCDriver_ScanLab_uint32 & nMajor, LibMCDriver_ScanLab_uint32 & nMinor, LibMCDriver_ScanLab_uint32 & nMicro);

	/**
	* Ilibmcdriver_scanlab::GetLastError - Returns the last error recorded on this object
	* @param[in] pInstance - Instance Handle
	* @param[out] sErrorMessage - Message of the last error
	* @return Is there a last error to query
	*/
	static bool GetLastError(IBase* pInstance, std::string & sErrorMessage);

	/**
	* Ilibmcdriver_scanlab::ReleaseInstance - Releases shared ownership of an Instance
	* @param[in] pInstance - Instance Handle
	*/
	static void ReleaseInstance(IBase* pInstance);

	/**
	* Ilibmcdriver_scanlab::AcquireInstance - Acquires shared ownership of an Instance
	* @param[in] pInstance - Instance Handle
	*/
	static void AcquireInstance(IBase* pInstance);

	/**
	* Ilibmcdriver_scanlab::CreateDriver - Creates a driver instance with a specific name.
	* @param[in] sName - Name of driver to be created.
	* @param[in] sType - Type of driver to be created.
	* @param[in] pDriverEnvironment - Environment of this driver.
	* @return New Driver instance
	*/
	static IDriver * CreateDriver(const std::string & sName, const std::string & sType, LibMCEnv::PDriverEnvironment pDriverEnvironment);

};

LibMCDriver_ScanLabResult LibMCDriver_ScanLab_GetProcAddress (const char * pProcName, void ** ppProcAddress);

} // namespace Impl
} // namespace LibMCDriver_ScanLab

#endif // __LIBMCDRIVER_SCANLAB_CPPINTERFACES
