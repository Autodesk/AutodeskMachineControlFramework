/*++

Copyright (C) 2020 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.8.0-develop.

Abstract: This is an autogenerated C++-Header file in order to allow an easy
 use of MC Driver ScanLab RTC

Interface version: 2.0.0

*/

#ifndef __LIBMCDRIVER_SCANLAB_HEADER_CPP
#define __LIBMCDRIVER_SCANLAB_HEADER_CPP

#ifdef __LIBMCDRIVER_SCANLAB_EXPORTS
#ifdef _WIN32
#define LIBMCDRIVER_SCANLAB_DECLSPEC __declspec (dllexport)
#else // _WIN32
#define LIBMCDRIVER_SCANLAB_DECLSPEC __attribute__((visibility("default")))
#endif // _WIN32
#else // __LIBMCDRIVER_SCANLAB_EXPORTS
#define LIBMCDRIVER_SCANLAB_DECLSPEC
#endif // __LIBMCDRIVER_SCANLAB_EXPORTS

#include "libmcdriver_scanlab_types.hpp"

#include "libmcenv_dynamic.hpp"

#ifdef __cplusplus
extern "C" {
#endif

/*************************************************************************************************************************
 Class definition for Base
**************************************************************************************************************************/

/*************************************************************************************************************************
 Class definition for Driver
**************************************************************************************************************************/

/**
* Configures a driver with its specific configuration data.
*
* @param[in] pDriver - Driver instance.
* @param[in] pConfigurationString - Configuration data of driver.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_driver_configure(LibMCDriver_ScanLab_Driver pDriver, const char * pConfigurationString);

/**
* returns the name identifier of the driver
*
* @param[in] pDriver - Driver instance.
* @param[in] nNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNameBuffer -  buffer of Name of the driver., may be NULL
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_driver_getname(LibMCDriver_ScanLab_Driver pDriver, const LibMCDriver_ScanLab_uint32 nNameBufferSize, LibMCDriver_ScanLab_uint32* pNameNeededChars, char * pNameBuffer);

/**
* returns the type identifier of the driver
*
* @param[in] pDriver - Driver instance.
* @param[in] nTypeBufferSize - size of the buffer (including trailing 0)
* @param[out] pTypeNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pTypeBuffer -  buffer of Type of the driver., may be NULL
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_driver_gettype(LibMCDriver_ScanLab_Driver pDriver, const LibMCDriver_ScanLab_uint32 nTypeBufferSize, LibMCDriver_ScanLab_uint32* pTypeNeededChars, char * pTypeBuffer);

/**
* returns the version identifiers of the driver
*
* @param[in] pDriver - Driver instance.
* @param[out] pMajor - Major version.
* @param[out] pMinor - Minor version.
* @param[out] pMicro - Micro version.
* @param[in] nBuildBufferSize - size of the buffer (including trailing 0)
* @param[out] pBuildNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pBuildBuffer -  buffer of Build identifier., may be NULL
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_driver_getversion(LibMCDriver_ScanLab_Driver pDriver, LibMCDriver_ScanLab_uint32 * pMajor, LibMCDriver_ScanLab_uint32 * pMinor, LibMCDriver_ScanLab_uint32 * pMicro, const LibMCDriver_ScanLab_uint32 nBuildBufferSize, LibMCDriver_ScanLab_uint32* pBuildNeededChars, char * pBuildBuffer);

/**
* Updates the driver parameters in the driver environment. Should only be called in the driver thread.
*
* @param[in] pDriver - Driver instance.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_driver_queryparameters(LibMCDriver_ScanLab_Driver pDriver);

/**
* Updates the driver parameters in the driver environment. Might be called out of thread. Implementation MUST be able to handle parallel calls.
*
* @param[in] pDriver - Driver instance.
* @param[in] pDriverUpdateInstance - Status update instance.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_driver_queryparametersex(LibMCDriver_ScanLab_Driver pDriver, LibMCEnv_DriverStatusUpdateSession pDriverUpdateInstance);

/*************************************************************************************************************************
 Class definition for RTCContext
**************************************************************************************************************************/

/**
* Loads card firmware from resource files.
*
* @param[in] pRTCContext - RTCContext instance.
* @param[in] nFirmwareDataBufferSize - Number of elements in buffer
* @param[in] pFirmwareDataBuffer - uint8 buffer of byte array of the firmware program file.
* @param[in] nFPGADataBufferSize - Number of elements in buffer
* @param[in] pFPGADataBuffer - uint8 buffer of byte array of the firmware FPGA file.
* @param[in] nAuxiliaryDataBufferSize - Number of elements in buffer
* @param[in] pAuxiliaryDataBuffer - uint8 buffer of byte array of the binary auxiliary file.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_loadfirmware(LibMCDriver_ScanLab_RTCContext pRTCContext, LibMCDriver_ScanLab_uint64 nFirmwareDataBufferSize, const LibMCDriver_ScanLab_uint8 * pFirmwareDataBuffer, LibMCDriver_ScanLab_uint64 nFPGADataBufferSize, const LibMCDriver_ScanLab_uint8 * pFPGADataBuffer, LibMCDriver_ScanLab_uint64 nAuxiliaryDataBufferSize, const LibMCDriver_ScanLab_uint8 * pAuxiliaryDataBuffer);

/**
* Loads card calibration file from given resource file.
*
* @param[in] pRTCContext - RTCContext instance.
* @param[in] nCorrectionFileBufferSize - Number of elements in buffer
* @param[in] pCorrectionFileBuffer - uint8 buffer of binary data of the correction file.
* @param[in] nTableNumber - Correction table index of card (1..8)
* @param[in] nDimension - Is it a 2D or 3D correction file.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_loadcorrectionfile(LibMCDriver_ScanLab_RTCContext pRTCContext, LibMCDriver_ScanLab_uint64 nCorrectionFileBufferSize, const LibMCDriver_ScanLab_uint8 * pCorrectionFileBuffer, LibMCDriver_ScanLab_uint32 nTableNumber, LibMCDriver_ScanLab_uint32 nDimension);

/**
* Selects Correction Table on card.
*
* @param[in] pRTCContext - RTCContext instance.
* @param[in] nTableNumberHeadA - Table Number for HeadA (1..8) or off (0).
* @param[in] nTableNumberHeadB - Table Number for HeadA (1..8) or off (0).
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_selectcorrectiontable(LibMCDriver_ScanLab_RTCContext pRTCContext, LibMCDriver_ScanLab_uint32 nTableNumberHeadA, LibMCDriver_ScanLab_uint32 nTableNumberHeadB);

/**
* Configures list buffer size.
*
* @param[in] pRTCContext - RTCContext instance.
* @param[in] nSizeListA - Size of List A
* @param[in] nSizeListB - Size of List B
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_configurelists(LibMCDriver_ScanLab_RTCContext pRTCContext, LibMCDriver_ScanLab_uint32 nSizeListA, LibMCDriver_ScanLab_uint32 nSizeListB);

/**
* Sets laser mode of card.
*
* @param[in] pRTCContext - RTCContext instance.
* @param[in] eLaserMode - Laser Mode Enum
* @param[in] eLaserPort - Laser Port Enum
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_setlasermode(LibMCDriver_ScanLab_RTCContext pRTCContext, LibMCDriver_ScanLab::eLaserMode eLaserMode, LibMCDriver_ScanLab::eLaserPort eLaserPort);

/**
* Disables automatic laser control.
*
* @param[in] pRTCContext - RTCContext instance.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_disableautolasercontrol(LibMCDriver_ScanLab_RTCContext pRTCContext);

/**
* Sets laser control parameters of card.
*
* @param[in] pRTCContext - RTCContext instance.
* @param[in] bDisableLaser - Laser is disabled
* @param[in] bFinishLaserPulseAfterOn - Finish laser pulse after LaserOn
* @param[in] bPhaseShiftOfLaserSignal - 180 degree phase shift of Laser signal
* @param[in] bLaserOnSignalLowActive - Set Laser On Signal Low Active
* @param[in] bLaserHalfSignalsLowActive - Set Laser Half Signal Low Active
* @param[in] bSetDigitalInOneHighActive - Set Digital In 1 high Active
* @param[in] bOutputSynchronizationActive - Output synchronization active
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_setlasercontrolparameters(LibMCDriver_ScanLab_RTCContext pRTCContext, bool bDisableLaser, bool bFinishLaserPulseAfterOn, bool bPhaseShiftOfLaserSignal, bool bLaserOnSignalLowActive, bool bLaserHalfSignalsLowActive, bool bSetDigitalInOneHighActive, bool bOutputSynchronizationActive);

/**
* Sets laser control pulse interval (in 1/64th microseconds)
*
* @param[in] pRTCContext - RTCContext instance.
* @param[in] nHalfPeriod - Half Output period in 1/64th microseconds
* @param[in] nPulseLength - Pulse Length in 1/64th microseconds
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_setlaserpulsesinbits(LibMCDriver_ScanLab_RTCContext pRTCContext, LibMCDriver_ScanLab_uint32 nHalfPeriod, LibMCDriver_ScanLab_uint32 nPulseLength);

/**
* Sets laser control pulse interval (in microseconds)
*
* @param[in] pRTCContext - RTCContext instance.
* @param[in] dHalfPeriod - Half Output period in microseconds
* @param[in] dPulseLength - Pulse Length in microseconds
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_setlaserpulsesinmicroseconds(LibMCDriver_ScanLab_RTCContext pRTCContext, LibMCDriver_ScanLab_double dHalfPeriod, LibMCDriver_ScanLab_double dPulseLength);

/**
* Sets standby pulse interval (in 1/64th microseconds)
*
* @param[in] pRTCContext - RTCContext instance.
* @param[in] nHalfPeriod - Half Output period in 1/64th microseconds
* @param[in] nPulseLength - Pulse Length in 1/64th microseconds
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_setstandbyinbits(LibMCDriver_ScanLab_RTCContext pRTCContext, LibMCDriver_ScanLab_uint32 nHalfPeriod, LibMCDriver_ScanLab_uint32 nPulseLength);

/**
* Sets laser control pulse interval (in microseconds)
*
* @param[in] pRTCContext - RTCContext instance.
* @param[in] dHalfPeriod - Half Output period in microseconds
* @param[in] dPulseLength - Pulse Length in microseconds
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_setstandbyinmicroseconds(LibMCDriver_ScanLab_RTCContext pRTCContext, LibMCDriver_ScanLab_double dHalfPeriod, LibMCDriver_ScanLab_double dPulseLength);

/**
* Returns the IP Address of the RTC Card. Fails if driver has not been initialized.
*
* @param[in] pRTCContext - RTCContext instance.
* @param[in] nIPAddressBufferSize - size of the buffer (including trailing 0)
* @param[out] pIPAddressNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pIPAddressBuffer -  buffer of IP Address Value., may be NULL
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_getipaddress(LibMCDriver_ScanLab_RTCContext pRTCContext, const LibMCDriver_ScanLab_uint32 nIPAddressBufferSize, LibMCDriver_ScanLab_uint32* pIPAddressNeededChars, char * pIPAddressBuffer);

/**
* Returns the Netmask of the RTC Card. Fails if driver has not been initialized.
*
* @param[in] pRTCContext - RTCContext instance.
* @param[in] nNetmaskBufferSize - size of the buffer (including trailing 0)
* @param[out] pNetmaskNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNetmaskBuffer -  buffer of Netmask Value., may be NULL
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_getnetmask(LibMCDriver_ScanLab_RTCContext pRTCContext, const LibMCDriver_ScanLab_uint32 nNetmaskBufferSize, LibMCDriver_ScanLab_uint32* pNetmaskNeededChars, char * pNetmaskBuffer);

/**
* Returns serial number of card
*
* @param[in] pRTCContext - RTCContext instance.
* @param[out] pSerialNumber - Returns serial number of board.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_getserialnumber(LibMCDriver_ScanLab_RTCContext pRTCContext, LibMCDriver_ScanLab_uint32 * pSerialNumber);

/**
* Returns the laser index assigned to the card. This is the laser index that will be used to map the toolpath laser data to the according device.
*
* @param[in] pRTCContext - RTCContext instance.
* @param[out] pLaserIndex - Returns laser index of board.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_getlaserindex(LibMCDriver_ScanLab_RTCContext pRTCContext, LibMCDriver_ScanLab_uint32 * pLaserIndex);

/**
* Sets the laser origin in absolute coordinates. This origin will be used to relatively position lasers to one another.
*
* @param[in] pRTCContext - RTCContext instance.
* @param[in] dOriginX - Sets laser origin X coordinate of the laser in mm. All laser movements will be moved by that minus that amount in X.
* @param[in] dOriginY - Sets laser origin Y coordinate of the laser in mm. All laser movements will be moved by that minus that amount in X.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_setlaserorigin(LibMCDriver_ScanLab_RTCContext pRTCContext, LibMCDriver_ScanLab_double dOriginX, LibMCDriver_ScanLab_double dOriginY);

/**
* Returns the laser origin in absolute coordinates. This origin will be used to relatively position lasers to one another.
*
* @param[in] pRTCContext - RTCContext instance.
* @param[out] pOriginX - Laser origin X coordinate of the laser in mm. All laser movements will be moved by that minus that amount in X.
* @param[out] pOriginY - Laser origin Y coordinate of the laser in mm. All laser movements will be moved by that minus that amount in X.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_getlaserorigin(LibMCDriver_ScanLab_RTCContext pRTCContext, LibMCDriver_ScanLab_double * pOriginX, LibMCDriver_ScanLab_double * pOriginY);

/**
* Sets the laser field limits in absolute coordinates.
*
* @param[in] pRTCContext - RTCContext instance.
* @param[in] dMinX - Sets minimum laser X coordinate in mm.
* @param[in] dMinY - Sets minimum laser Y coordinate in mm.
* @param[in] dMaxX - Sets maximum laser X coordinate in mm.
* @param[in] dMaxY - Sets maximum laser Y coordinate in mm.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_setlaserfield(LibMCDriver_ScanLab_RTCContext pRTCContext, LibMCDriver_ScanLab_double dMinX, LibMCDriver_ScanLab_double dMinY, LibMCDriver_ScanLab_double dMaxX, LibMCDriver_ScanLab_double dMaxY);

/**
* Resets the laser field to default values.
*
* @param[in] pRTCContext - RTCContext instance.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_resetlaserfield(LibMCDriver_ScanLab_RTCContext pRTCContext);

/**
* Enables range checking of the laser field. A laser field MUST have been set before.
*
* @param[in] pRTCContext - RTCContext instance.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_enablerangechecking(LibMCDriver_ScanLab_RTCContext pRTCContext);

/**
* Disables range checking of the laser field.
*
* @param[in] pRTCContext - RTCContext instance.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_disablerangechecking(LibMCDriver_ScanLab_RTCContext pRTCContext);

/**
* Returns the laser field limits in absolute coordinates.
*
* @param[in] pRTCContext - RTCContext instance.
* @param[out] pMinX - Sets minimum laser X coordinate in mm.
* @param[out] pMinY - Sets minimum laser Y coordinate in mm.
* @param[out] pMaxX - Sets maximum laser X coordinate in mm.
* @param[out] pMaxY - Sets maximum laser Y coordinate in mm.
* @param[out] pHasLaserField - Returns true if a laser field has been set.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_getlaserfield(LibMCDriver_ScanLab_RTCContext pRTCContext, LibMCDriver_ScanLab_double * pMinX, LibMCDriver_ScanLab_double * pMinY, LibMCDriver_ScanLab_double * pMaxX, LibMCDriver_ScanLab_double * pMaxY, bool * pHasLaserField);

/**
* Opens the list to write
*
* @param[in] pRTCContext - RTCContext instance.
* @param[in] nListIndex - Index of List (1 or 2).
* @param[in] nPosition - Relative Position in List.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_setstartlist(LibMCDriver_ScanLab_RTCContext pRTCContext, LibMCDriver_ScanLab_uint32 nListIndex, LibMCDriver_ScanLab_uint32 nPosition);

/**
* Closes the currently open list
*
* @param[in] pRTCContext - RTCContext instance.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_setendoflist(LibMCDriver_ScanLab_RTCContext pRTCContext);

/**
* Executes the list
*
* @param[in] pRTCContext - RTCContext instance.
* @param[in] nListIndex - Index of List (1 or 2).
* @param[in] nPosition - Relative Position in List.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_executelist(LibMCDriver_ScanLab_RTCContext pRTCContext, LibMCDriver_ScanLab_uint32 nListIndex, LibMCDriver_ScanLab_uint32 nPosition);

/**
* Sets the AutoChange Position of the currently not running list.
*
* @param[in] pRTCContext - RTCContext instance.
* @param[in] nPosition - Relative Position in List.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_setautochangepos(LibMCDriver_ScanLab_RTCContext pRTCContext, LibMCDriver_ScanLab_uint32 nPosition);

/**
* Sets the laser delays
*
* @param[in] pRTCContext - RTCContext instance.
* @param[in] nMarkDelay - Mark delay in microseconds (MUST be multiple of 10)
* @param[in] nJumpDelay - Jump delay in microseconds (MUST be multiple of 10)
* @param[in] nPolygonDelay - Polygon delay in microseconds (MUST be multiple of 10)
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_setdelays(LibMCDriver_ScanLab_RTCContext pRTCContext, LibMCDriver_ScanLab_uint32 nMarkDelay, LibMCDriver_ScanLab_uint32 nJumpDelay, LibMCDriver_ScanLab_uint32 nPolygonDelay);

/**
* Sets the laser delays (on the list)
*
* @param[in] pRTCContext - RTCContext instance.
* @param[in] dLaserOnDelay - LaserOn delay in microseconds
* @param[in] dLaserOffDelay - LaserOff delay in microseconds
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_setlaserdelaysinmicroseconds(LibMCDriver_ScanLab_RTCContext pRTCContext, LibMCDriver_ScanLab_double dLaserOnDelay, LibMCDriver_ScanLab_double dLaserOffDelay);

/**
* Sets the laser delays (on the list)
*
* @param[in] pRTCContext - RTCContext instance.
* @param[in] nLaserOnDelay - LaserOn delay in bits (1/64th microseconds)
* @param[in] nLaserOffDelay - LaserOff delay in bits (1/64th microseconds)
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_setlaserdelaysinbits(LibMCDriver_ScanLab_RTCContext pRTCContext, LibMCDriver_ScanLab_int32 nLaserOnDelay, LibMCDriver_ScanLab_int32 nLaserOffDelay);

/**
* Writes a polyline into the open list
*
* @param[in] pRTCContext - RTCContext instance.
* @param[in] nPointsBufferSize - Number of elements in buffer
* @param[in] pPointsBuffer - Point2D buffer of Points of polyline to draw.
* @param[in] fMarkSpeed - Mark speed in mm/s
* @param[in] fJumpSpeed - Jump speed in mm/s
* @param[in] fPower - Laser power in percent
* @param[in] fZValue - Focus Z Value
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_drawpolyline(LibMCDriver_ScanLab_RTCContext pRTCContext, LibMCDriver_ScanLab_uint64 nPointsBufferSize, const LibMCDriver_ScanLab::sPoint2D * pPointsBuffer, LibMCDriver_ScanLab_single fMarkSpeed, LibMCDriver_ScanLab_single fJumpSpeed, LibMCDriver_ScanLab_single fPower, LibMCDriver_ScanLab_single fZValue);

/**
* Writes a polyline into the open list with OIE Enabled.
*
* @param[in] pRTCContext - RTCContext instance.
* @param[in] nPointsBufferSize - Number of elements in buffer
* @param[in] pPointsBuffer - Point2D buffer of Points of polyline to draw.
* @param[in] fMarkSpeed - Mark speed in mm/s
* @param[in] fJumpSpeed - Jump speed in mm/s
* @param[in] fPower - Laser power in percent
* @param[in] fZValue - Focus Z Value
* @param[in] nOIEPIDControlIndex - OIE PID Control Index. 0 disables PID Control, MUST be smaller or equal 63.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_drawpolylineoie(LibMCDriver_ScanLab_RTCContext pRTCContext, LibMCDriver_ScanLab_uint64 nPointsBufferSize, const LibMCDriver_ScanLab::sPoint2D * pPointsBuffer, LibMCDriver_ScanLab_single fMarkSpeed, LibMCDriver_ScanLab_single fJumpSpeed, LibMCDriver_ScanLab_single fPower, LibMCDriver_ScanLab_single fZValue, LibMCDriver_ScanLab_uint32 nOIEPIDControlIndex);

/**
* Writes a list of hatches into the open list
*
* @param[in] pRTCContext - RTCContext instance.
* @param[in] nHatchesBufferSize - Number of elements in buffer
* @param[in] pHatchesBuffer - Hatch2D buffer of Hatches to draw.
* @param[in] fMarkSpeed - Mark speed in mm/s
* @param[in] fJumpSpeed - Jump speed in mm/s
* @param[in] fPower - Laser power in percent
* @param[in] fZValue - Focus Z Value
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_drawhatches(LibMCDriver_ScanLab_RTCContext pRTCContext, LibMCDriver_ScanLab_uint64 nHatchesBufferSize, const LibMCDriver_ScanLab::sHatch2D * pHatchesBuffer, LibMCDriver_ScanLab_single fMarkSpeed, LibMCDriver_ScanLab_single fJumpSpeed, LibMCDriver_ScanLab_single fPower, LibMCDriver_ScanLab_single fZValue);

/**
* adds a power change to the open list
*
* @param[in] pRTCContext - RTCContext instance.
* @param[in] fPowerInPercent - Laser power in percent
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_addsetpower(LibMCDriver_ScanLab_RTCContext pRTCContext, LibMCDriver_ScanLab_single fPowerInPercent);

/**
* adds a jump speed change to the open list
*
* @param[in] pRTCContext - RTCContext instance.
* @param[in] fJumpSpeedInMMPerSecond - Jump speed in mm/s
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_addsetjumpspeed(LibMCDriver_ScanLab_RTCContext pRTCContext, LibMCDriver_ScanLab_single fJumpSpeedInMMPerSecond);

/**
* adds a mark speed change to the open list
*
* @param[in] pRTCContext - RTCContext instance.
* @param[in] fMarkSpeedInMMPerSecond - Mark speed in mm/s
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_addsetmarkspeed(LibMCDriver_ScanLab_RTCContext pRTCContext, LibMCDriver_ScanLab_single fMarkSpeedInMMPerSecond);

/**
* Adds a Jump movement to the open list
*
* @param[in] pRTCContext - RTCContext instance.
* @param[in] dTargetX - X Position.
* @param[in] dTargetY - Y Position.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_addjumpmovement(LibMCDriver_ScanLab_RTCContext pRTCContext, LibMCDriver_ScanLab_double dTargetX, LibMCDriver_ScanLab_double dTargetY);

/**
* Adds a Mark movement to the open list
*
* @param[in] pRTCContext - RTCContext instance.
* @param[in] dTargetX - X Position.
* @param[in] dTargetY - Y Position.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_addmarkmovement(LibMCDriver_ScanLab_RTCContext pRTCContext, LibMCDriver_ScanLab_double dTargetX, LibMCDriver_ScanLab_double dTargetY);

/**
* Adds a timed Mark movement to the open list
*
* @param[in] pRTCContext - RTCContext instance.
* @param[in] dTargetX - X Position.
* @param[in] dTargetY - Y Position.
* @param[in] dDurationInMicroseconds - Duration of mark movement in Microseconds.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_addtimedmarkmovement(LibMCDriver_ScanLab_RTCContext pRTCContext, LibMCDriver_ScanLab_double dTargetX, LibMCDriver_ScanLab_double dTargetY, LibMCDriver_ScanLab_double dDurationInMicroseconds);

/**
* Adds a free variable set to the open list
*
* @param[in] pRTCContext - RTCContext instance.
* @param[in] nVariableNo - Number of the variable (0-7).
* @param[in] nValue - Value to set.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_addfreevariable(LibMCDriver_ScanLab_RTCContext pRTCContext, LibMCDriver_ScanLab_uint32 nVariableNo, LibMCDriver_ScanLab_uint32 nValue);

/**
* Returns the currently set free variable.
*
* @param[in] pRTCContext - RTCContext instance.
* @param[in] nVariableNo - Number of the variable (0-7).
* @param[out] pValue - Value to return.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_getcurrentfreevariable(LibMCDriver_ScanLab_RTCContext pRTCContext, LibMCDriver_ScanLab_uint32 nVariableNo, LibMCDriver_ScanLab_uint32 * pValue);

/**
* Returns the current RTC time stamp.
*
* @param[in] pRTCContext - RTCContext instance.
* @param[out] pTimeStamp - TimeStamp Value.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_gettimestamp(LibMCDriver_ScanLab_RTCContext pRTCContext, LibMCDriver_ScanLab_uint32 * pTimeStamp);

/**
* Stops the execution of the current list immediately.
*
* @param[in] pRTCContext - RTCContext instance.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_stopexecution(LibMCDriver_ScanLab_RTCContext pRTCContext);

/**
* Writes a list of hatches into the open list with OIE Enabled.
*
* @param[in] pRTCContext - RTCContext instance.
* @param[in] nHatchesBufferSize - Number of elements in buffer
* @param[in] pHatchesBuffer - Hatch2D buffer of Hatches to draw.
* @param[in] fMarkSpeed - Mark speed in mm/s
* @param[in] fJumpSpeed - Jump speed in mm/s
* @param[in] fPower - Laser power in percent
* @param[in] fZValue - Focus Z Value
* @param[in] nOIEPIDControlIndex - OIE PID Control Index. 0 disables PID Control, MUST be smaller or equal 63.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_drawhatchesoie(LibMCDriver_ScanLab_RTCContext pRTCContext, LibMCDriver_ScanLab_uint64 nHatchesBufferSize, const LibMCDriver_ScanLab::sHatch2D * pHatchesBuffer, LibMCDriver_ScanLab_single fMarkSpeed, LibMCDriver_ScanLab_single fJumpSpeed, LibMCDriver_ScanLab_single fPower, LibMCDriver_ScanLab_single fZValue, LibMCDriver_ScanLab_uint32 nOIEPIDControlIndex);

/**
* Adds a layer instance to the current open list.
*
* @param[in] pRTCContext - RTCContext instance.
* @param[in] pLayer - Instance of the layer to add to the lists.
* @param[in] bFailIfNonAssignedDataExists - If true, fails if there is a laser index that does not match.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_addlayertolist(LibMCDriver_ScanLab_RTCContext pRTCContext, LibMCEnv_ToolpathLayer pLayer, bool bFailIfNonAssignedDataExists);

/**
* Adds a command to wait for the encoder for reaching an X axis position. Fails if Mark on the Fly is not enabled.
*
* @param[in] pRTCContext - RTCContext instance.
* @param[in] dPositionInMM - Position Value to reach in mm.
* @param[in] bInPositiveHalfPlane - If true, waits for the encoder reaching a value that is larger than PositionInMM. If false, waits for the encoder reaching a value that is smaller than PositionInMM.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_waitforencoderx(LibMCDriver_ScanLab_RTCContext pRTCContext, LibMCDriver_ScanLab_double dPositionInMM, bool bInPositiveHalfPlane);

/**
* Adds a command to wait for the encoder for reaching an Y axis position. Fails if Mark on the Fly is not enabled.
*
* @param[in] pRTCContext - RTCContext instance.
* @param[in] dPositionInMM - Position Value to reach in mm.
* @param[in] bInPositiveHalfPlane - If true, waits for the encoder reaching a value that is larger than PositionInMM. If false, waits for the encoder reaching a value that is smaller than PositionInMM.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_waitforencodery(LibMCDriver_ScanLab_RTCContext pRTCContext, LibMCDriver_ScanLab_double dPositionInMM, bool bInPositiveHalfPlane);

/**
* Adds a command to wait for the encoder for reaching an X axis position. Fails if Mark on the Fly is not enabled.
*
* @param[in] pRTCContext - RTCContext instance.
* @param[in] nPositionInSteps - Position Value to reach in steps.
* @param[in] bInPositiveHalfPlane - If true, waits for the encoder reaching a value that is larger than PositionInMM. If false, waits for the encoder reaching a value that is smaller than PositionInMM.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_waitforencoderxsteps(LibMCDriver_ScanLab_RTCContext pRTCContext, LibMCDriver_ScanLab_int32 nPositionInSteps, bool bInPositiveHalfPlane);

/**
* Adds a command to wait for the encoder for reaching an Y axis position. Fails if Mark on the Fly is not enabled.
*
* @param[in] pRTCContext - RTCContext instance.
* @param[in] nPositionInSteps - Position Value to reach in steps.
* @param[in] bInPositiveHalfPlane - If true, waits for the encoder reaching a value that is larger than PositionInMM. If false, waits for the encoder reaching a value that is smaller than PositionInMM.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_waitforencoderysteps(LibMCDriver_ScanLab_RTCContext pRTCContext, LibMCDriver_ScanLab_int32 nPositionInSteps, bool bInPositiveHalfPlane);

/**
* Adds a custom delay to the list
*
* @param[in] pRTCContext - RTCContext instance.
* @param[in] nDelay - Custom delay value in microseconds (MUST be multiple of 10)
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_addcustomdelay(LibMCDriver_ScanLab_RTCContext pRTCContext, LibMCDriver_ScanLab_uint32 nDelay);

/**
* Returns correction factor of Card Calibration (in bits per mm)
*
* @param[in] pRTCContext - RTCContext instance.
* @param[out] pCorrectionFactor - CorrectionFactor
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_getcorrectionfactor(LibMCDriver_ScanLab_RTCContext pRTCContext, LibMCDriver_ScanLab_double * pCorrectionFactor);

/**
* Returns status of list execution
*
* @param[in] pRTCContext - RTCContext instance.
* @param[out] pBusy - Execution is busy
* @param[out] pPosition - Returns current executed position
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_getstatus(LibMCDriver_ScanLab_RTCContext pRTCContext, bool * pBusy, LibMCDriver_ScanLab_uint32 * pPosition);

/**
* Returns status of scan head
*
* @param[in] pRTCContext - RTCContext instance.
* @param[in] nHeadNo - Head Number
* @param[out] pPositionXisOK - Position X is ok
* @param[out] pPositionYisOK - Position Y is ok
* @param[out] pTemperatureisOK - Temperature is ok
* @param[out] pPowerisOK - Power is ok
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_getheadstatus(LibMCDriver_ScanLab_RTCContext pRTCContext, LibMCDriver_ScanLab_uint32 nHeadNo, bool * pPositionXisOK, bool * pPositionYisOK, bool * pTemperatureisOK, bool * pPowerisOK);

/**
* Returns status values of scan head
*
* @param[in] pRTCContext - RTCContext instance.
* @param[out] pLaserIsOn - Laser is on
* @param[out] pPositionX - Current Position X in Units
* @param[out] pPositionY - Current Position Y in Units
* @param[out] pPositionZ - Current Position Z in Units
* @param[out] pCorrectedPositionX - Current Position X in Units
* @param[out] pCorrectedPositionY - Current Position Y in Units
* @param[out] pCorrectedPositionZ - Current Position Z in Units
* @param[out] pFocusShift - Current Focus Shift in Units
* @param[out] pMarkSpeed - Current Mark Speed in Units
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_getstatevalues(LibMCDriver_ScanLab_RTCContext pRTCContext, bool * pLaserIsOn, LibMCDriver_ScanLab_int32 * pPositionX, LibMCDriver_ScanLab_int32 * pPositionY, LibMCDriver_ScanLab_int32 * pPositionZ, LibMCDriver_ScanLab_int32 * pCorrectedPositionX, LibMCDriver_ScanLab_int32 * pCorrectedPositionY, LibMCDriver_ScanLab_int32 * pCorrectedPositionZ, LibMCDriver_ScanLab_int32 * pFocusShift, LibMCDriver_ScanLab_int32 * pMarkSpeed);

/**
* returns current input list position
*
* @param[in] pRTCContext - RTCContext instance.
* @param[out] pPosition - Returns current position of open list
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_getinputpointer(LibMCDriver_ScanLab_RTCContext pRTCContext, LibMCDriver_ScanLab_uint32 * pPosition);

/**
* Returns version information of the RTC Card
*
* @param[in] pRTCContext - RTCContext instance.
* @param[out] pRTCVersion - RTC Card Version
* @param[out] pRTCType - RTC Card Type
* @param[out] pDLLVersion - RTC DLL Version
* @param[out] pHEXVersion - RTC HEX Version
* @param[out] pBIOSVersion - RTC BIOS Version
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_getrtcversion(LibMCDriver_ScanLab_RTCContext pRTCContext, LibMCDriver_ScanLab_uint32 * pRTCVersion, LibMCDriver_ScanLab_uint32 * pRTCType, LibMCDriver_ScanLab_uint32 * pDLLVersion, LibMCDriver_ScanLab_uint32 * pHEXVersion, LibMCDriver_ScanLab_uint32 * pBIOSVersion);

/**
* Set RTC Ethernet communication timeouts
*
* @param[in] pRTCContext - RTCContext instance.
* @param[in] dInitialTimeout - Initial timeout in ms
* @param[in] dMaxTimeout - Max timeout in ms
* @param[in] dMultiplier - Multiplier
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_setcommunicationtimeouts(LibMCDriver_ScanLab_RTCContext pRTCContext, LibMCDriver_ScanLab_double dInitialTimeout, LibMCDriver_ScanLab_double dMaxTimeout, LibMCDriver_ScanLab_double dMultiplier);

/**
* Get RTC Ethernet communication timeouts
*
* @param[in] pRTCContext - RTCContext instance.
* @param[out] pInitialTimeout - Initial timeout in ms
* @param[out] pMaxTimeout - Max timeout in ms
* @param[out] pMultiplier - Multiplier
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_getcommunicationtimeouts(LibMCDriver_ScanLab_RTCContext pRTCContext, LibMCDriver_ScanLab_double * pInitialTimeout, LibMCDriver_ScanLab_double * pMaxTimeout, LibMCDriver_ScanLab_double * pMultiplier);

/**
* Initializes the RTC card for the open interface extension. MUST be called before the OIE is initialized.
*
* @param[in] pRTCContext - RTCContext instance.
* @param[in] nSignalChannelsBufferSize - Number of elements in buffer
* @param[in] pSignalChannelsBuffer - uint32 buffer of Array of signal channels. MUST NOT be empty
* @param[in] eOperationMode - OIE Operation Mode
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_initializeforoie(LibMCDriver_ScanLab_RTCContext pRTCContext, LibMCDriver_ScanLab_uint64 nSignalChannelsBufferSize, const LibMCDriver_ScanLab_uint32 * pSignalChannelsBuffer, LibMCDriver_ScanLab::eOIEOperationMode eOperationMode);

/**
* Writes an OIE enabling command block to the open list.
*
* @param[in] pRTCContext - RTCContext instance.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_enableoie(LibMCDriver_ScanLab_RTCContext pRTCContext);

/**
* Writes an OIE disabling command block to the open list.
*
* @param[in] pRTCContext - RTCContext instance.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_disableoie(LibMCDriver_ScanLab_RTCContext pRTCContext);

/**
* Writes an OIE measurement start command block to the open list. Same as StartOIEMeasurement with false as parameter.
*
* @param[in] pRTCContext - RTCContext instance.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_startoiemeasurement(LibMCDriver_ScanLab_RTCContext pRTCContext);

/**
* Writes an OIE measurement start command block to the open list, with parameterized LaserOn Trigger
*
* @param[in] pRTCContext - RTCContext instance.
* @param[in] bLaserOnTrigger - If true, only triggers a measurement, when the laser is on.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_startoiemeasurementex(LibMCDriver_ScanLab_RTCContext pRTCContext, bool bLaserOnTrigger);

/**
* Writes an OIE measurement start command block to the open list.
*
* @param[in] pRTCContext - RTCContext instance.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_stopoiemeasurement(LibMCDriver_ScanLab_RTCContext pRTCContext);

/**
* Sets OIE PID Index.
*
* @param[in] pRTCContext - RTCContext instance.
* @param[in] nOIEPIDIndex - OIE PID Index. MUST be between 0 and 63. 0 means PID disabled.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_setoiepidmode(LibMCDriver_ScanLab_RTCContext pRTCContext, LibMCDriver_ScanLab_uint32 nOIEPIDIndex);

/**
* Enables OIE PID Control. Affects only subsequent layers that are drawn into lists.
*
* @param[in] pRTCContext - RTCContext instance.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_enableoiepidcontrol(LibMCDriver_ScanLab_RTCContext pRTCContext);

/**
* Disables OIE PID Control.
*
* @param[in] pRTCContext - RTCContext instance.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_disableoiepidcontrol(LibMCDriver_ScanLab_RTCContext pRTCContext);

/**
* Disable skywriting.
*
* @param[in] pRTCContext - RTCContext instance.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_disableskywriting(LibMCDriver_ScanLab_RTCContext pRTCContext);

/**
* Enables skywriting on the list in mode 1. See Scanlab RTC Documentation for details.
*
* @param[in] pRTCContext - RTCContext instance.
* @param[in] dTimelag - Skywriting Timelag
* @param[in] nLaserOnShift - Skywriting Laser On Shift
* @param[in] nNPrev - Duration of pre-motion in ticks
* @param[in] nNPost - Duration of post-motion in ticks. 
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_enableskywritingmode1(LibMCDriver_ScanLab_RTCContext pRTCContext, LibMCDriver_ScanLab_double dTimelag, LibMCDriver_ScanLab_int64 nLaserOnShift, LibMCDriver_ScanLab_int64 nNPrev, LibMCDriver_ScanLab_int64 nNPost);

/**
* Enables skywriting on the list in mode 2. See Scanlab RTC Documentation for details.
*
* @param[in] pRTCContext - RTCContext instance.
* @param[in] dTimelag - Skywriting Timelag
* @param[in] nLaserOnShift - Skywriting Laser On Shift
* @param[in] nNPrev - Duration of pre-motion in ticks
* @param[in] nNPost - Duration of post-motion in ticks. 
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_enableskywritingmode2(LibMCDriver_ScanLab_RTCContext pRTCContext, LibMCDriver_ScanLab_double dTimelag, LibMCDriver_ScanLab_int64 nLaserOnShift, LibMCDriver_ScanLab_int64 nNPrev, LibMCDriver_ScanLab_int64 nNPost);

/**
* Enables skywriting on the list in mode 3. See Scanlab RTC Documentation for details.
*
* @param[in] pRTCContext - RTCContext instance.
* @param[in] dTimelag - Skywriting Timelag
* @param[in] nLaserOnShift - Skywriting Laser On Shift
* @param[in] nNPrev - Duration of pre-motion in ticks
* @param[in] nNPost - Duration of post-motion in ticks. 
* @param[in] dLimit - Skywriting Angle limit
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_enableskywritingmode3(LibMCDriver_ScanLab_RTCContext pRTCContext, LibMCDriver_ScanLab_double dTimelag, LibMCDriver_ScanLab_int64 nLaserOnShift, LibMCDriver_ScanLab_int64 nNPrev, LibMCDriver_ScanLab_int64 nNPost, LibMCDriver_ScanLab_double dLimit);

/**
* Sets the transformation angle of the scan field.
*
* @param[in] pRTCContext - RTCContext instance.
* @param[in] dAngleInDegrees - Angle in Degrees
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_settransformationangle(LibMCDriver_ScanLab_RTCContext pRTCContext, LibMCDriver_ScanLab_double dAngleInDegrees);

/**
* Sets the transformation scale of the scan field.
*
* @param[in] pRTCContext - RTCContext instance.
* @param[in] dScaleFactor - Scale Factor (1.0 is no scaling). Allowed value is -16 to 16.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_settransformationscale(LibMCDriver_ScanLab_RTCContext pRTCContext, LibMCDriver_ScanLab_double dScaleFactor);

/**
* Sets the transformation offset of the scan field.
*
* @param[in] pRTCContext - RTCContext instance.
* @param[in] nOffsetX - Offset in X (in bits)
* @param[in] nOffsetY - Offset in X (in bits)
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_settransformationoffset(LibMCDriver_ScanLab_RTCContext pRTCContext, LibMCDriver_ScanLab_int32 nOffsetX, LibMCDriver_ScanLab_int32 nOffsetY);

/**
* Sets the transformation matrix of the scan field.
*
* @param[in] pRTCContext - RTCContext instance.
* @param[in] dM11 - Upper left field of the transformation matrix
* @param[in] dM12 - Upper right field of the transformation matrix
* @param[in] dM21 - Lower left field of the transformation matrix
* @param[in] dM22 - Lower right field of the transformation matrix
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_settransformationmatrix(LibMCDriver_ScanLab_RTCContext pRTCContext, LibMCDriver_ScanLab_double dM11, LibMCDriver_ScanLab_double dM12, LibMCDriver_ScanLab_double dM21, LibMCDriver_ScanLab_double dM22);

/**
* Prepares recording of position data of the RTC Card. This needs to be called before any list is started.
*
* @param[in] pRTCContext - RTCContext instance.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_preparerecording(LibMCDriver_ScanLab_RTCContext pRTCContext);

/**
* Enables recording of position data of the RTC Card. This is a list command.
*
* @param[in] pRTCContext - RTCContext instance.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_enablerecording(LibMCDriver_ScanLab_RTCContext pRTCContext);

/**
* Disables recording of position data of the RTC Card. This is a list command.
*
* @param[in] pRTCContext - RTCContext instance.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_disablerecording(LibMCDriver_ScanLab_RTCContext pRTCContext);

/**
* Executes the list with recording the position data from the RTC card.
*
* @param[in] pRTCContext - RTCContext instance.
* @param[in] nListIndex - Index of List (1 or 2).
* @param[in] nPosition - Relative Position in List.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_executelistwithrecording(LibMCDriver_ScanLab_RTCContext pRTCContext, LibMCDriver_ScanLab_uint32 nListIndex, LibMCDriver_ScanLab_uint32 nPosition);

/**
* Enables timelag compensation.
*
* @param[in] pRTCContext - RTCContext instance.
* @param[in] nTimeLagXYInMicroseconds - Time lag of XY axes (in microseconds). MUST be a multiple of 10.
* @param[in] nTimeLagZInMicroseconds - Time lag of Z axis (in microseconds). MUST be a multiple of 10.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_enabletimelagcompensation(LibMCDriver_ScanLab_RTCContext pRTCContext, LibMCDriver_ScanLab_uint32 nTimeLagXYInMicroseconds, LibMCDriver_ScanLab_uint32 nTimeLagZInMicroseconds);

/**
* Disables timelag compensation.
*
* @param[in] pRTCContext - RTCContext instance.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_disabletimelagcompensation(LibMCDriver_ScanLab_RTCContext pRTCContext);

/**
* Enables mark on the fly 2D. This is a list command.
*
* @param[in] pRTCContext - RTCContext instance.
* @param[in] dScaleXInMMperEncoderStep - Scale factor X in mm per encoder step
* @param[in] dScaleYInMMperEncoderStep - Scale factor Y in mm per encoder step
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_enablemarkonthefly2d(LibMCDriver_ScanLab_RTCContext pRTCContext, LibMCDriver_ScanLab_double dScaleXInMMperEncoderStep, LibMCDriver_ScanLab_double dScaleYInMMperEncoderStep);

/**
* Disable mark on the fly 2D. This is a list command.
*
* @param[in] pRTCContext - RTCContext instance.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_disablemarkonthefly2d(LibMCDriver_ScanLab_RTCContext pRTCContext);

/**
* Returns if mark on the fly 2D has been enabled.
*
* @param[in] pRTCContext - RTCContext instance.
* @param[out] pIsEnabled - Returns true if mark on the fly 2D is enabled.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_markonthefly2disenabled(LibMCDriver_ScanLab_RTCContext pRTCContext, bool * pIsEnabled);

/**
* Returns 2D mark on the fly position.
*
* @param[in] pRTCContext - RTCContext instance.
* @param[out] pPositionX - Mark on the fly position X
* @param[out] pPositionY - Mark on the fly position Y
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_get2dmarkontheflyposition(LibMCDriver_ScanLab_RTCContext pRTCContext, LibMCDriver_ScanLab_int32 * pPositionX, LibMCDriver_ScanLab_int32 * pPositionY);

/**
* Checks mark on the fly error.
*
* @param[in] pRTCContext - RTCContext instance.
* @param[in] bFailIfError - If true, the call will fail in case of an error.
* @param[out] pErrorCode - Bitfield corresponding to the get_marking_info call, as described in the RTC SDK Documentation.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_checkontheflyerror(LibMCDriver_ScanLab_RTCContext pRTCContext, bool bFailIfError, LibMCDriver_ScanLab_uint32 * pErrorCode);

/**
* Returns if the laser power calibration table is non-empty.
*
* @param[in] pRTCContext - RTCContext instance.
* @param[out] pCalibrationEnabled - Laser Calibration Is Enabled
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_laserpowercalibrationisenabled(LibMCDriver_ScanLab_RTCContext pRTCContext, bool * pCalibrationEnabled);

/**
* Returns if the laser power calibration table has one entry.
*
* @param[in] pRTCContext - RTCContext instance.
* @param[out] pCalibrationIsLinear - Laser Calibration Is Affine Linear
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_laserpowercalibrationislinear(LibMCDriver_ScanLab_RTCContext pRTCContext, bool * pCalibrationIsLinear);

/**
* Clears the laser power calibration table.
*
* @param[in] pRTCContext - RTCContext instance.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_clearlaserpowercalibration(LibMCDriver_ScanLab_RTCContext pRTCContext);

/**
* Returns the laser power calibration table. Fails if laser calibration is not enabled.
*
* @param[in] pRTCContext - RTCContext instance.
* @param[in] nCalibrationPointsBufferSize - Number of elements in buffer
* @param[out] pCalibrationPointsNeededCount - will be filled with the count of the written elements, or needed buffer size.
* @param[out] pCalibrationPointsBuffer - LaserCalibrationPoint  buffer of Laser Calibration Points
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_getlaserpowercalibration(LibMCDriver_ScanLab_RTCContext pRTCContext, const LibMCDriver_ScanLab_uint64 nCalibrationPointsBufferSize, LibMCDriver_ScanLab_uint64* pCalibrationPointsNeededCount, LibMCDriver_ScanLab::sLaserCalibrationPoint * pCalibrationPointsBuffer);

/**
* Enables the laser power calibration with an affine linear tranformation.
*
* @param[in] pRTCContext - RTCContext instance.
* @param[in] dPowerOffsetInPercent - Additional offset of the Power value.
* @param[in] dPowerOutputScaling - Scaling factor of the laser output.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_setlinearlaserpowercalibration(LibMCDriver_ScanLab_RTCContext pRTCContext, LibMCDriver_ScanLab_double dPowerOffsetInPercent, LibMCDriver_ScanLab_double dPowerOutputScaling);

/**
* Enables the laser power calibration with multiple calibration point values. Table MUST NOT have negative power entries. Laser Power Output will be linear scaled with the given values within their respective intervals. Any laser power outside of the minimum or maximum Power values will be scaled according to the respective minimum or maximum scaling value.
*
* @param[in] pRTCContext - RTCContext instance.
* @param[in] nCalibrationPointsBufferSize - Number of elements in buffer
* @param[in] pCalibrationPointsBuffer - LaserCalibrationPoint buffer of Laser Calibration Points. Array will be sorted by Laser Power Keys. Array MUST NOT be empty. Array MUST NOT have duplicate entries (to an accuracy of 0.01 Percent).
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_setpiecewiselinearlaserpowercalibration(LibMCDriver_ScanLab_RTCContext pRTCContext, LibMCDriver_ScanLab_uint64 nCalibrationPointsBufferSize, const LibMCDriver_ScanLab::sLaserCalibrationPoint * pCalibrationPointsBuffer);

/**
* Enables a spatial laser power modulation via callback.
*
* @param[in] pRTCContext - RTCContext instance.
* @param[in] pModulationCallback - Callback to call for modulating the laser power.
* @param[in] pUserData - Userdata that is passed to the callback function
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_enablespatiallaserpowermodulation(LibMCDriver_ScanLab_RTCContext pRTCContext, LibMCDriver_ScanLab::SpatialPowerModulationCallback pModulationCallback, LibMCDriver_ScanLab_pvoid pUserData);

/**
* Disables all power modulation functions.
*
* @param[in] pRTCContext - RTCContext instance.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_disablepowermodulation(LibMCDriver_ScanLab_RTCContext pRTCContext);

/**
* If this function is enabled, all mark lines will be subdivided so that the maximum length is small than the threshold.
*
* @param[in] pRTCContext - RTCContext instance.
* @param[in] dLengthThreshold - Length threshold in mm.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_enablelinesubdivision(LibMCDriver_ScanLab_RTCContext pRTCContext, LibMCDriver_ScanLab_double dLengthThreshold);

/**
* Disables the subdivision of mark lines.
*
* @param[in] pRTCContext - RTCContext instance.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_rtccontext_disablelinesubdivision(LibMCDriver_ScanLab_RTCContext pRTCContext);

/*************************************************************************************************************************
 Class definition for RTCSelector
**************************************************************************************************************************/

/**
* Searches Ethernet Cards
*
* @param[in] pRTCSelector - RTCSelector instance.
* @param[in] pIP - IP Network Address.
* @param[in] pNetmask - IP Netmask Address.
* @param[in] nTimeout - Time out in microseconds.
* @param[out] pCount - Returns how many ethernet cards have been found.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_rtcselector_searchcards(LibMCDriver_ScanLab_RTCSelector pRTCSelector, const char * pIP, const char * pNetmask, LibMCDriver_ScanLab_uint32 nTimeout, LibMCDriver_ScanLab_uint32 * pCount);

/**
* Searches Ethernet Cards
*
* @param[in] pRTCSelector - RTCSelector instance.
* @param[in] pStartIP - IP Network Address.
* @param[in] pEndIP - IP Network Address.
* @param[in] nTimeout - Time out in microseconds.
* @param[out] pCount - Returns how many ethernet cards have been found.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_rtcselector_searchcardsbyrange(LibMCDriver_ScanLab_RTCSelector pRTCSelector, const char * pStartIP, const char * pEndIP, LibMCDriver_ScanLab_uint32 nTimeout, LibMCDriver_ScanLab_uint32 * pCount);

/**
* Returns number of detected Cards
*
* @param[in] pRTCSelector - RTCSelector instance.
* @param[out] pCount - Returns how many cards have been found.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_rtcselector_getcardcount(LibMCDriver_ScanLab_RTCSelector pRTCSelector, LibMCDriver_ScanLab_uint32 * pCount);

/**
* Returns number of found ethernet cards
*
* @param[in] pRTCSelector - RTCSelector instance.
* @param[out] pCount - Returns how many ethernet cards have been found.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_rtcselector_getethernetcardcount(LibMCDriver_ScanLab_RTCSelector pRTCSelector, LibMCDriver_ScanLab_uint32 * pCount);

/**
* Acquires a card and returns an RTCContext instance.
*
* @param[in] pRTCSelector - RTCSelector instance.
* @param[in] nNumber - Number of Card (1-based). Must be between 1 and CardCount.
* @param[out] pInstance - New Context# instance
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_rtcselector_acquirecard(LibMCDriver_ScanLab_RTCSelector pRTCSelector, LibMCDriver_ScanLab_uint32 nNumber, LibMCDriver_ScanLab_RTCContext * pInstance);

/**
* Acquires a card and returns an RTCContext instance.
*
* @param[in] pRTCSelector - RTCSelector instance.
* @param[in] nSerialNumber - Desired Serial Number of card.
* @param[out] pInstance - New Context# instance
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_rtcselector_acquirecardbyserial(LibMCDriver_ScanLab_RTCSelector pRTCSelector, LibMCDriver_ScanLab_uint32 nSerialNumber, LibMCDriver_ScanLab_RTCContext * pInstance);

/**
* Acquires an ethernet card and returns an RTCContext instance.
*
* @param[in] pRTCSelector - RTCSelector instance.
* @param[in] nNumber - Number of Card (1-based). Must be between 1 and EthernetCardCount.
* @param[out] pInstance - New Context# instance
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_rtcselector_acquireethernetcard(LibMCDriver_ScanLab_RTCSelector pRTCSelector, LibMCDriver_ScanLab_uint32 nNumber, LibMCDriver_ScanLab_RTCContext * pInstance);

/**
* Acquires an ethernet card and returns an RTCContext instance.
*
* @param[in] pRTCSelector - RTCSelector instance.
* @param[in] nSerialNumber - Desired Serial Number of card.
* @param[out] pInstance - New Context# instance
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_rtcselector_acquireethernetcardbyserial(LibMCDriver_ScanLab_RTCSelector pRTCSelector, LibMCDriver_ScanLab_uint32 nSerialNumber, LibMCDriver_ScanLab_RTCContext * pInstance);

/*************************************************************************************************************************
 Class definition for Driver_ScanLab
**************************************************************************************************************************/

/**
* Initializes the ScanLab SDK.
*
* @param[in] pDriver_ScanLab - Driver_ScanLab instance.
* @param[in] pResourceName - Resource name of Scanlab DLL
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_driver_scanlab_loadsdk(LibMCDriver_ScanLab_Driver_ScanLab pDriver_ScanLab, const char * pResourceName);

/**
* Initializes the ScanLab SDK from an external source.
*
* @param[in] pDriver_ScanLab - Driver_ScanLab instance.
* @param[in] nScanlabDLLBufferSize - Number of elements in buffer
* @param[in] pScanlabDLLBuffer - uint8 buffer of Byte array of Scanlab DLL
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_driver_scanlab_loadcustomsdk(LibMCDriver_ScanLab_Driver_ScanLab pDriver_ScanLab, LibMCDriver_ScanLab_uint64 nScanlabDLLBufferSize, const LibMCDriver_ScanLab_uint8 * pScanlabDLLBuffer);

/**
* Creates and initializes a new RTC selector singleton. Should only be called once per Process.
*
* @param[in] pDriver_ScanLab - Driver_ScanLab instance.
* @param[out] pInstance - New Selector instance
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_driver_scanlab_creatertcselector(LibMCDriver_ScanLab_Driver_ScanLab pDriver_ScanLab, LibMCDriver_ScanLab_RTCSelector * pInstance);

/*************************************************************************************************************************
 Class definition for Driver_ScanLab_RTC6
**************************************************************************************************************************/

/**
* Turns the driver into a simulation mode.
*
* @param[in] pDriver_ScanLab_RTC6 - Driver_ScanLab_RTC6 instance.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_driver_scanlab_rtc6_settosimulationmode(LibMCDriver_ScanLab_Driver_ScanLab_RTC6 pDriver_ScanLab_RTC6);

/**
* Returns if the driver is in simulation mode.
*
* @param[in] pDriver_ScanLab_RTC6 - Driver_ScanLab_RTC6 instance.
* @param[out] pSimulationModeEnabled - Flag if driver is in simulation mode.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_driver_scanlab_rtc6_issimulationmode(LibMCDriver_ScanLab_Driver_ScanLab_RTC6 pDriver_ScanLab_RTC6, bool * pSimulationModeEnabled);

/**
* Returns if the driver is initalized.
*
* @param[in] pDriver_ScanLab_RTC6 - Driver_ScanLab_RTC6 instance.
* @param[out] pIsInitialized - Flag if driver is initialized.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_driver_scanlab_rtc6_isinitialized(LibMCDriver_ScanLab_Driver_ScanLab_RTC6 pDriver_ScanLab_RTC6, bool * pIsInitialized);

/**
* Manually initializes the RTC6 Scanner Driver.
*
* @param[in] pDriver_ScanLab_RTC6 - Driver_ScanLab_RTC6 instance.
* @param[in] pIP - IP Network Address. Empty string for local card.
* @param[in] pNetmask - IP Netmask Address. Empty string for local card.
* @param[in] nTimeout - Time out in microseconds.
* @param[in] nSerialNumber - Desired Serial Number of card.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_driver_scanlab_rtc6_initialise(LibMCDriver_ScanLab_Driver_ScanLab_RTC6 pDriver_ScanLab_RTC6, const char * pIP, const char * pNetmask, LibMCDriver_ScanLab_uint32 nTimeout, LibMCDriver_ScanLab_uint32 nSerialNumber);

/**
* Initializes the RTC6 Scanner Driver from a configuration preset. Calls Initialise, LoadFirmware, SetCorrectionFile, ConfigureLaserMode and ConfigureDelays.
*
* @param[in] pDriver_ScanLab_RTC6 - Driver_ScanLab_RTC6 instance.
* @param[in] pPresetName - Name of the configuration preset.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_driver_scanlab_rtc6_initialisefromconfiguration(LibMCDriver_ScanLab_Driver_ScanLab_RTC6 pDriver_ScanLab_RTC6, const char * pPresetName);

/**
* Set RTC Ethernet communication timeouts
*
* @param[in] pDriver_ScanLab_RTC6 - Driver_ScanLab_RTC6 instance.
* @param[in] dInitialTimeout - Initial timeout in ms
* @param[in] dMaxTimeout - Max timeout in ms
* @param[in] dMultiplier - Multiplier
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_driver_scanlab_rtc6_setcommunicationtimeouts(LibMCDriver_ScanLab_Driver_ScanLab_RTC6 pDriver_ScanLab_RTC6, LibMCDriver_ScanLab_double dInitialTimeout, LibMCDriver_ScanLab_double dMaxTimeout, LibMCDriver_ScanLab_double dMultiplier);

/**
* Returns the IP Address of the RTC Card. Fails if driver has not been initialized.
*
* @param[in] pDriver_ScanLab_RTC6 - Driver_ScanLab_RTC6 instance.
* @param[in] nIPAddressBufferSize - size of the buffer (including trailing 0)
* @param[out] pIPAddressNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pIPAddressBuffer -  buffer of IP Address Value., may be NULL
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_driver_scanlab_rtc6_getipaddress(LibMCDriver_ScanLab_Driver_ScanLab_RTC6 pDriver_ScanLab_RTC6, const LibMCDriver_ScanLab_uint32 nIPAddressBufferSize, LibMCDriver_ScanLab_uint32* pIPAddressNeededChars, char * pIPAddressBuffer);

/**
* Returns the Netmask of the RTC Card. Fails if driver has not been initialized.
*
* @param[in] pDriver_ScanLab_RTC6 - Driver_ScanLab_RTC6 instance.
* @param[in] nNetmaskBufferSize - size of the buffer (including trailing 0)
* @param[out] pNetmaskNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNetmaskBuffer -  buffer of Netmask Value., may be NULL
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_driver_scanlab_rtc6_getnetmask(LibMCDriver_ScanLab_Driver_ScanLab_RTC6 pDriver_ScanLab_RTC6, const LibMCDriver_ScanLab_uint32 nNetmaskBufferSize, LibMCDriver_ScanLab_uint32* pNetmaskNeededChars, char * pNetmaskBuffer);

/**
* Returns the Serial Number of the RTC Card. Fails if driver has not been initialized.
*
* @param[in] pDriver_ScanLab_RTC6 - Driver_ScanLab_RTC6 instance.
* @param[out] pSerialNumber - Serial Number of card.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_driver_scanlab_rtc6_getserialnumber(LibMCDriver_ScanLab_Driver_ScanLab_RTC6 pDriver_ScanLab_RTC6, LibMCDriver_ScanLab_uint32 * pSerialNumber);

/**
* Returns the RTC Context Instance. Fails if it card has not been initialised.
*
* @param[in] pDriver_ScanLab_RTC6 - Driver_ScanLab_RTC6 instance.
* @param[out] pContextInstance - RTC Context Instance.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_driver_scanlab_rtc6_getcontext(LibMCDriver_ScanLab_Driver_ScanLab_RTC6 pDriver_ScanLab_RTC6, LibMCDriver_ScanLab_RTCContext * pContextInstance);

/**
* Returns the RTC Selector Instance. Fails if it card has not been initialised.
*
* @param[in] pDriver_ScanLab_RTC6 - Driver_ScanLab_RTC6 instance.
* @param[out] pSelectorInstance - RTC Selector Instance.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_driver_scanlab_rtc6_getselector(LibMCDriver_ScanLab_Driver_ScanLab_RTC6 pDriver_ScanLab_RTC6, LibMCDriver_ScanLab_RTCSelector * pSelectorInstance);

/**
* Loads the firmware from the driver resources.
*
* @param[in] pDriver_ScanLab_RTC6 - Driver_ScanLab_RTC6 instance.
* @param[in] pFirmwareResource - resource name of the firmware program file.
* @param[in] pFPGAResource - resource name of the firmware FPGA file.
* @param[in] pAuxiliaryResource - resource name of the binary auxiliary file.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_driver_scanlab_rtc6_loadfirmware(LibMCDriver_ScanLab_Driver_ScanLab_RTC6 pDriver_ScanLab_RTC6, const char * pFirmwareResource, const char * pFPGAResource, const char * pAuxiliaryResource);

/**
* Loads the firmware from custom resources.
*
* @param[in] pDriver_ScanLab_RTC6 - Driver_ScanLab_RTC6 instance.
* @param[in] nFirmwareDataBufferSize - Number of elements in buffer
* @param[in] pFirmwareDataBuffer - uint8 buffer of byte array of the firmware program file.
* @param[in] nFPGADataBufferSize - Number of elements in buffer
* @param[in] pFPGADataBuffer - uint8 buffer of byte array of the firmware FPGA file.
* @param[in] nAuxiliaryDataBufferSize - Number of elements in buffer
* @param[in] pAuxiliaryDataBuffer - uint8 buffer of byte array of the binary auxiliary file.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_driver_scanlab_rtc6_loadcustomfirmware(LibMCDriver_ScanLab_Driver_ScanLab_RTC6 pDriver_ScanLab_RTC6, LibMCDriver_ScanLab_uint64 nFirmwareDataBufferSize, const LibMCDriver_ScanLab_uint8 * pFirmwareDataBuffer, LibMCDriver_ScanLab_uint64 nFPGADataBufferSize, const LibMCDriver_ScanLab_uint8 * pFPGADataBuffer, LibMCDriver_ScanLab_uint64 nAuxiliaryDataBufferSize, const LibMCDriver_ScanLab_uint8 * pAuxiliaryDataBuffer);

/**
* Sets the correction file stream.
*
* @param[in] pDriver_ScanLab_RTC6 - Driver_ScanLab_RTC6 instance.
* @param[in] nCorrectionFileBufferSize - Number of elements in buffer
* @param[in] pCorrectionFileBuffer - uint8 buffer of binary data of the correction file.
* @param[in] nTableNumber - Correction table index of card (1..8)
* @param[in] nDimension - Is it a 2D or 3D correction file.
* @param[in] nTableNumberHeadA - Table number of Head A.
* @param[in] nTableNumberHeadB - Table number of Head B.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_driver_scanlab_rtc6_setcorrectionfile(LibMCDriver_ScanLab_Driver_ScanLab_RTC6 pDriver_ScanLab_RTC6, LibMCDriver_ScanLab_uint64 nCorrectionFileBufferSize, const LibMCDriver_ScanLab_uint8 * pCorrectionFileBuffer, LibMCDriver_ScanLab_uint32 nTableNumber, LibMCDriver_ScanLab_uint32 nDimension, LibMCDriver_ScanLab_uint32 nTableNumberHeadA, LibMCDriver_ScanLab_uint32 nTableNumberHeadB);

/**
* Configures the laser mode. MUST be called before any exposure.
*
* @param[in] pDriver_ScanLab_RTC6 - Driver_ScanLab_RTC6 instance.
* @param[in] eLaserMode - Laser Mode Enum
* @param[in] eLaserPort - Laser Port Enum
* @param[in] dMaxLaserPower - Maximum laser power.
* @param[in] bFinishLaserPulseAfterOn - Finish laser pulse after LaserOn
* @param[in] bPhaseShiftOfLaserSignal - 180 degree phase shift of Laser signal
* @param[in] bLaserOnSignalLowActive - Set Laser On Signal Low Active
* @param[in] bLaserHalfSignalsLowActive - Set Laser Half Signal Low Active
* @param[in] bSetDigitalInOneHighActive - Set Digital In 1 high Active
* @param[in] bOutputSynchronizationActive - Output synchronization active
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_driver_scanlab_rtc6_configurelasermode(LibMCDriver_ScanLab_Driver_ScanLab_RTC6 pDriver_ScanLab_RTC6, LibMCDriver_ScanLab::eLaserMode eLaserMode, LibMCDriver_ScanLab::eLaserPort eLaserPort, LibMCDriver_ScanLab_double dMaxLaserPower, bool bFinishLaserPulseAfterOn, bool bPhaseShiftOfLaserSignal, bool bLaserOnSignalLowActive, bool bLaserHalfSignalsLowActive, bool bSetDigitalInOneHighActive, bool bOutputSynchronizationActive);

/**
* Configures the default laser and scanner delays. ATTENTION: Will create and overwrite execution list 1!
*
* @param[in] pDriver_ScanLab_RTC6 - Driver_ScanLab_RTC6 instance.
* @param[in] dLaserOnDelay - Laser On Delay in Microseconds
* @param[in] dLaserOffDelay - Laser Off Delay in Microseconds
* @param[in] dMarkDelay - Mark delay in microseconds (will be rounded to a multiple of 10)
* @param[in] dJumpDelay - Jump delay in microseconds (will be rounded to a multiple of 10)
* @param[in] dPolygonDelay - Polygon delay in microseconds (will be rounded to a multiple of 10)
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_driver_scanlab_rtc6_configuredelays(LibMCDriver_ScanLab_Driver_ScanLab_RTC6 pDriver_ScanLab_RTC6, LibMCDriver_ScanLab_double dLaserOnDelay, LibMCDriver_ScanLab_double dLaserOffDelay, LibMCDriver_ScanLab_double dMarkDelay, LibMCDriver_ScanLab_double dJumpDelay, LibMCDriver_ScanLab_double dPolygonDelay);

/**
* Sets the recording mode for using the Open Interface extension. Will be taken into account by DrawLayer. Default is No Recording.
*
* @param[in] pDriver_ScanLab_RTC6 - Driver_ScanLab_RTC6 instance.
* @param[in] eRecordingMode - Recording mode enum
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_driver_scanlab_rtc6_setoierecordingmode(LibMCDriver_ScanLab_Driver_ScanLab_RTC6 pDriver_ScanLab_RTC6, LibMCDriver_ScanLab::eOIERecordingMode eRecordingMode);

/**
* Returns the recording mode for using the Open Interface extension, taking into account by DrawLayer. Default is No Recording.
*
* @param[in] pDriver_ScanLab_RTC6 - Driver_ScanLab_RTC6 instance.
* @param[out] pRecordingMode - Recording mode enum
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_driver_scanlab_rtc6_getoierecordingmode(LibMCDriver_ScanLab_Driver_ScanLab_RTC6 pDriver_ScanLab_RTC6, LibMCDriver_ScanLab::eOIERecordingMode * pRecordingMode);

/**
* Enables filtering of the segments by segment attributes. A segment will only be drawn if the given integer attribute has the given value.
*
* @param[in] pDriver_ScanLab_RTC6 - Driver_ScanLab_RTC6 instance.
* @param[in] pNameSpace - Namespace of Attribute to filter for.
* @param[in] pAttributeName - Name of Attribute to filter for.
* @param[in] nAttributeValue - Attribute Value to filter for.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_driver_scanlab_rtc6_enableattributefilter(LibMCDriver_ScanLab_Driver_ScanLab_RTC6 pDriver_ScanLab_RTC6, const char * pNameSpace, const char * pAttributeName, LibMCDriver_ScanLab_int64 nAttributeValue);

/**
* Disables filtering of the segments by segment attributes.
*
* @param[in] pDriver_ScanLab_RTC6 - Driver_ScanLab_RTC6 instance.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_driver_scanlab_rtc6_disableattributefilter(LibMCDriver_ScanLab_Driver_ScanLab_RTC6 pDriver_ScanLab_RTC6);

/**
* Draws a layer of a build stream. Blocks until the layer is drawn.
*
* @param[in] pDriver_ScanLab_RTC6 - Driver_ScanLab_RTC6 instance.
* @param[in] pStreamUUID - UUID of the build stream. Must have been loaded in memory by the system.
* @param[in] nLayerIndex - Layer index of the build file.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_driver_scanlab_rtc6_drawlayer(LibMCDriver_ScanLab_Driver_ScanLab_RTC6 pDriver_ScanLab_RTC6, const char * pStreamUUID, LibMCDriver_ScanLab_uint32 nLayerIndex);

/**
* Get RTC Ethernet communication timeouts
*
* @param[in] pDriver_ScanLab_RTC6 - Driver_ScanLab_RTC6 instance.
* @param[out] pInitialTimeout - Initial timeout in ms
* @param[out] pMaxTimeout - Max timeout in ms
* @param[out] pMultiplier - Multiplier
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_driver_scanlab_rtc6_getcommunicationtimeouts(LibMCDriver_ScanLab_Driver_ScanLab_RTC6 pDriver_ScanLab_RTC6, LibMCDriver_ScanLab_double * pInitialTimeout, LibMCDriver_ScanLab_double * pMaxTimeout, LibMCDriver_ScanLab_double * pMultiplier);

/**
* Enables timelag compensation.
*
* @param[in] pDriver_ScanLab_RTC6 - Driver_ScanLab_RTC6 instance.
* @param[in] nTimeLagXYInMicroseconds - Time lag of XY axes (in microseconds). MUST be a multiple of 10.
* @param[in] nTimeLagZInMicroseconds - Time lag of Z axis (in microseconds). MUST be a multiple of 10.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_driver_scanlab_rtc6_enabletimelagcompensation(LibMCDriver_ScanLab_Driver_ScanLab_RTC6 pDriver_ScanLab_RTC6, LibMCDriver_ScanLab_uint32 nTimeLagXYInMicroseconds, LibMCDriver_ScanLab_uint32 nTimeLagZInMicroseconds);

/**
* Disables timelag compensation.
*
* @param[in] pDriver_ScanLab_RTC6 - Driver_ScanLab_RTC6 instance.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_driver_scanlab_rtc6_disabletimelagcompensation(LibMCDriver_ScanLab_Driver_ScanLab_RTC6 pDriver_ScanLab_RTC6);

/*************************************************************************************************************************
 Class definition for Driver_ScanLab_RTC6xN
**************************************************************************************************************************/

/**
* Turns the driver into a simulation mode.
*
* @param[in] pDriver_ScanLab_RTC6xN - Driver_ScanLab_RTC6xN instance.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_driver_scanlab_rtc6xn_settosimulationmode(LibMCDriver_ScanLab_Driver_ScanLab_RTC6xN pDriver_ScanLab_RTC6xN);

/**
* Returns if the driver is in simulation mode.
*
* @param[in] pDriver_ScanLab_RTC6xN - Driver_ScanLab_RTC6xN instance.
* @param[out] pSimulationModeEnabled - Flag if driver is in simulation mode.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_driver_scanlab_rtc6xn_issimulationmode(LibMCDriver_ScanLab_Driver_ScanLab_RTC6xN pDriver_ScanLab_RTC6xN, bool * pSimulationModeEnabled);

/**
* Returns if all the scanners of the driver are initalized.
*
* @param[in] pDriver_ScanLab_RTC6xN - Driver_ScanLab_RTC6xN instance.
* @param[out] pIsInitialized - Flag if driver is initialized.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_driver_scanlab_rtc6xn_isinitialized(LibMCDriver_ScanLab_Driver_ScanLab_RTC6xN pDriver_ScanLab_RTC6xN, bool * pIsInitialized);

/**
* Returns if a specific scanners of the driver are initalized.
*
* @param[in] pDriver_ScanLab_RTC6xN - Driver_ScanLab_RTC6xN instance.
* @param[in] nScannerIndex - Index of the scanner (0-based). MUST be smaller than ScannerCount
* @param[out] pIsInitialized - Flag if scanner is initialized.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_driver_scanlab_rtc6xn_scannerisinitialized(LibMCDriver_ScanLab_Driver_ScanLab_RTC6xN pDriver_ScanLab_RTC6xN, LibMCDriver_ScanLab_uint32 nScannerIndex, bool * pIsInitialized);

/**
* Returns if number of scanners.
*
* @param[in] pDriver_ScanLab_RTC6xN - Driver_ScanLab_RTC6xN instance.
* @param[out] pNumberOfScanners - Number of scanners supported by this driver.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_driver_scanlab_rtc6xn_getscannercount(LibMCDriver_ScanLab_Driver_ScanLab_RTC6xN pDriver_ScanLab_RTC6xN, LibMCDriver_ScanLab_uint32 * pNumberOfScanners);

/**
* Initializes one of the RTC6 Scanner Drivers.
*
* @param[in] pDriver_ScanLab_RTC6xN - Driver_ScanLab_RTC6xN instance.
* @param[in] nScannerIndex - Index of the scanner (0-based). MUST be smaller than ScannerCount
* @param[in] pIP - IP Network Address. Empty string for local card.
* @param[in] pNetmask - IP Netmask Address. Empty string for local card.
* @param[in] nTimeout - Time out in microseconds.
* @param[in] nSerialNumber - Desired Serial Number of card.
* @param[in] nLaserIndex - Associated Laser Index from the toolpath data. 1-based, MUST NOT be 0. Each Scanner MUST own a unique laser index.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_driver_scanlab_rtc6xn_initialisescanner(LibMCDriver_ScanLab_Driver_ScanLab_RTC6xN pDriver_ScanLab_RTC6xN, LibMCDriver_ScanLab_uint32 nScannerIndex, const char * pIP, const char * pNetmask, LibMCDriver_ScanLab_uint32 nTimeout, LibMCDriver_ScanLab_uint32 nSerialNumber, LibMCDriver_ScanLab_uint32 nLaserIndex);

/**
* Initializes the RTC6 Scanner Driver from a configuration preset. Calls Initialise, LoadFirmware, SetCorrectionFile, ConfigureLaserMode and ConfigureDelays.
*
* @param[in] pDriver_ScanLab_RTC6xN - Driver_ScanLab_RTC6xN instance.
* @param[in] nScannerIndex - Index of the scanner (0-based). MUST be smaller than ScannerCount
* @param[in] pPresetName - Name of the configuration preset.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_driver_scanlab_rtc6xn_initialisescannerfromconfiguration(LibMCDriver_ScanLab_Driver_ScanLab_RTC6xN pDriver_ScanLab_RTC6xN, LibMCDriver_ScanLab_uint32 nScannerIndex, const char * pPresetName);

/**
* Returns the IP Address of the RTC Card. Fails if driver has not been initialized.
*
* @param[in] pDriver_ScanLab_RTC6xN - Driver_ScanLab_RTC6xN instance.
* @param[in] nScannerIndex - Index of the scanner (0-based). MUST be smaller than ScannerCount
* @param[in] nIPAddressBufferSize - size of the buffer (including trailing 0)
* @param[out] pIPAddressNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pIPAddressBuffer -  buffer of IP Address Value., may be NULL
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_driver_scanlab_rtc6xn_getipaddress(LibMCDriver_ScanLab_Driver_ScanLab_RTC6xN pDriver_ScanLab_RTC6xN, LibMCDriver_ScanLab_uint32 nScannerIndex, const LibMCDriver_ScanLab_uint32 nIPAddressBufferSize, LibMCDriver_ScanLab_uint32* pIPAddressNeededChars, char * pIPAddressBuffer);

/**
* Returns the Netmask of the RTC Card. Fails if driver has not been initialized.
*
* @param[in] pDriver_ScanLab_RTC6xN - Driver_ScanLab_RTC6xN instance.
* @param[in] nScannerIndex - Index of the scanner (0-based). MUST be smaller than ScannerCount
* @param[in] nNetmaskBufferSize - size of the buffer (including trailing 0)
* @param[out] pNetmaskNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNetmaskBuffer -  buffer of Netmask Value., may be NULL
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_driver_scanlab_rtc6xn_getnetmask(LibMCDriver_ScanLab_Driver_ScanLab_RTC6xN pDriver_ScanLab_RTC6xN, LibMCDriver_ScanLab_uint32 nScannerIndex, const LibMCDriver_ScanLab_uint32 nNetmaskBufferSize, LibMCDriver_ScanLab_uint32* pNetmaskNeededChars, char * pNetmaskBuffer);

/**
* Returns the Serial Number of the RTC Card. Fails if driver has not been initialized.
*
* @param[in] pDriver_ScanLab_RTC6xN - Driver_ScanLab_RTC6xN instance.
* @param[in] nScannerIndex - Index of the scanner (0-based). MUST be smaller than ScannerCount
* @param[out] pSerialNumber - Serial Number of card.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_driver_scanlab_rtc6xn_getserialnumber(LibMCDriver_ScanLab_Driver_ScanLab_RTC6xN pDriver_ScanLab_RTC6xN, LibMCDriver_ScanLab_uint32 nScannerIndex, LibMCDriver_ScanLab_uint32 * pSerialNumber);

/**
* Returns associated Laser Index from the toolpath data.
*
* @param[in] pDriver_ScanLab_RTC6xN - Driver_ScanLab_RTC6xN instance.
* @param[in] nScannerIndex - Index of the scanner (0-based). MUST be smaller than ScannerCount
* @param[out] pLaserIndex - Associated Laser Index from the toolpath data.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_driver_scanlab_rtc6xn_getlaserindex(LibMCDriver_ScanLab_Driver_ScanLab_RTC6xN pDriver_ScanLab_RTC6xN, LibMCDriver_ScanLab_uint32 nScannerIndex, LibMCDriver_ScanLab_uint32 * pLaserIndex);

/**
* Returns the RTC Selector Instance. Fails if it card has not been initialised.
*
* @param[in] pDriver_ScanLab_RTC6xN - Driver_ScanLab_RTC6xN instance.
* @param[out] pSelectorInstance - RTC Selector Instance.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_driver_scanlab_rtc6xn_getselector(LibMCDriver_ScanLab_Driver_ScanLab_RTC6xN pDriver_ScanLab_RTC6xN, LibMCDriver_ScanLab_RTCSelector * pSelectorInstance);

/**
* Returns the RTC Context Instance. Fails if it card has not been initialised.
*
* @param[in] pDriver_ScanLab_RTC6xN - Driver_ScanLab_RTC6xN instance.
* @param[in] nScannerIndex - Index of the scanner (0-based). MUST be smaller than ScannerCount
* @param[out] pContextInstance - RTC Context Instance.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_driver_scanlab_rtc6xn_getcontext(LibMCDriver_ScanLab_Driver_ScanLab_RTC6xN pDriver_ScanLab_RTC6xN, LibMCDriver_ScanLab_uint32 nScannerIndex, LibMCDriver_ScanLab_RTCContext * pContextInstance);

/**
* Loads the firmware from the driver resources.
*
* @param[in] pDriver_ScanLab_RTC6xN - Driver_ScanLab_RTC6xN instance.
* @param[in] nScannerIndex - Index of the scanner (0-based). MUST be smaller than ScannerCount
* @param[in] pFirmwareResource - resource name of the firmware program file.
* @param[in] pFPGAResource - resource name of the firmware FPGA file.
* @param[in] pAuxiliaryResource - resource name of the binary auxiliary file.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_driver_scanlab_rtc6xn_loadfirmware(LibMCDriver_ScanLab_Driver_ScanLab_RTC6xN pDriver_ScanLab_RTC6xN, LibMCDriver_ScanLab_uint32 nScannerIndex, const char * pFirmwareResource, const char * pFPGAResource, const char * pAuxiliaryResource);

/**
* Loads the firmware from custom resources.
*
* @param[in] pDriver_ScanLab_RTC6xN - Driver_ScanLab_RTC6xN instance.
* @param[in] nScannerIndex - Index of the scanner (0-based). MUST be smaller than ScannerCount
* @param[in] nFirmwareDataBufferSize - Number of elements in buffer
* @param[in] pFirmwareDataBuffer - uint8 buffer of byte array of the firmware program file.
* @param[in] nFPGADataBufferSize - Number of elements in buffer
* @param[in] pFPGADataBuffer - uint8 buffer of byte array of the firmware FPGA file.
* @param[in] nAuxiliaryDataBufferSize - Number of elements in buffer
* @param[in] pAuxiliaryDataBuffer - uint8 buffer of byte array of the binary auxiliary file.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_driver_scanlab_rtc6xn_loadcustomfirmware(LibMCDriver_ScanLab_Driver_ScanLab_RTC6xN pDriver_ScanLab_RTC6xN, LibMCDriver_ScanLab_uint32 nScannerIndex, LibMCDriver_ScanLab_uint64 nFirmwareDataBufferSize, const LibMCDriver_ScanLab_uint8 * pFirmwareDataBuffer, LibMCDriver_ScanLab_uint64 nFPGADataBufferSize, const LibMCDriver_ScanLab_uint8 * pFPGADataBuffer, LibMCDriver_ScanLab_uint64 nAuxiliaryDataBufferSize, const LibMCDriver_ScanLab_uint8 * pAuxiliaryDataBuffer);

/**
* Sets the correction file stream.
*
* @param[in] pDriver_ScanLab_RTC6xN - Driver_ScanLab_RTC6xN instance.
* @param[in] nScannerIndex - Index of the scanner (0-based). MUST be smaller than ScannerCount
* @param[in] nCorrectionFileBufferSize - Number of elements in buffer
* @param[in] pCorrectionFileBuffer - uint8 buffer of binary data of the correction file.
* @param[in] nTableNumber - Correction table index of card (1..8)
* @param[in] nDimension - Is it a 2D or 3D correction file.
* @param[in] nTableNumberHeadA - Table number of Head A.
* @param[in] nTableNumberHeadB - Table number of Head B.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_driver_scanlab_rtc6xn_setcorrectionfile(LibMCDriver_ScanLab_Driver_ScanLab_RTC6xN pDriver_ScanLab_RTC6xN, LibMCDriver_ScanLab_uint32 nScannerIndex, LibMCDriver_ScanLab_uint64 nCorrectionFileBufferSize, const LibMCDriver_ScanLab_uint8 * pCorrectionFileBuffer, LibMCDriver_ScanLab_uint32 nTableNumber, LibMCDriver_ScanLab_uint32 nDimension, LibMCDriver_ScanLab_uint32 nTableNumberHeadA, LibMCDriver_ScanLab_uint32 nTableNumberHeadB);

/**
* Configures the laser mode.
*
* @param[in] pDriver_ScanLab_RTC6xN - Driver_ScanLab_RTC6xN instance.
* @param[in] nScannerIndex - Index of the scanner (0-based). MUST be smaller than ScannerCount
* @param[in] eLaserMode - Laser Mode Enum
* @param[in] eLaserPort - Laser Port Enum
* @param[in] dMaxLaserPower - Maximum laser power.
* @param[in] bFinishLaserPulseAfterOn - Finish laser pulse after LaserOn
* @param[in] bPhaseShiftOfLaserSignal - 180 degree phase shift of Laser signal
* @param[in] bLaserOnSignalLowActive - Set Laser On Signal Low Active
* @param[in] bLaserHalfSignalsLowActive - Set Laser Half Signal Low Active
* @param[in] bSetDigitalInOneHighActive - Set Digital In 1 high Active
* @param[in] bOutputSynchronizationActive - Output synchronization active
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_driver_scanlab_rtc6xn_configurelasermode(LibMCDriver_ScanLab_Driver_ScanLab_RTC6xN pDriver_ScanLab_RTC6xN, LibMCDriver_ScanLab_uint32 nScannerIndex, LibMCDriver_ScanLab::eLaserMode eLaserMode, LibMCDriver_ScanLab::eLaserPort eLaserPort, LibMCDriver_ScanLab_double dMaxLaserPower, bool bFinishLaserPulseAfterOn, bool bPhaseShiftOfLaserSignal, bool bLaserOnSignalLowActive, bool bLaserHalfSignalsLowActive, bool bSetDigitalInOneHighActive, bool bOutputSynchronizationActive);

/**
* Configures the default laser and scanner delays. ATTENTION: Will create and overwrite execution list 1!
*
* @param[in] pDriver_ScanLab_RTC6xN - Driver_ScanLab_RTC6xN instance.
* @param[in] nScannerIndex - Index of the scanner (0-based). MUST be smaller than ScannerCount
* @param[in] dLaserOnDelay - Laser On Delay in Microseconds
* @param[in] dLaserOffDelay - Laser Off Delay in Microseconds
* @param[in] dMarkDelay - Mark delay in microseconds (will be rounded to a multiple of 10)
* @param[in] dJumpDelay - Jump delay in microseconds (will be rounded to a multiple of 10)
* @param[in] dPolygonDelay - Polygon delay in microseconds (will be rounded to a multiple of 10)
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_driver_scanlab_rtc6xn_configuredelays(LibMCDriver_ScanLab_Driver_ScanLab_RTC6xN pDriver_ScanLab_RTC6xN, LibMCDriver_ScanLab_uint32 nScannerIndex, LibMCDriver_ScanLab_double dLaserOnDelay, LibMCDriver_ScanLab_double dLaserOffDelay, LibMCDriver_ScanLab_double dMarkDelay, LibMCDriver_ScanLab_double dJumpDelay, LibMCDriver_ScanLab_double dPolygonDelay);

/**
* Sets the recording mode for using the Open Interface extension. Will be taken into account by DrawLayer. Default is No Recording.
*
* @param[in] pDriver_ScanLab_RTC6xN - Driver_ScanLab_RTC6xN instance.
* @param[in] eRecordingMode - Recording mode enum
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_driver_scanlab_rtc6xn_setoierecordingmode(LibMCDriver_ScanLab_Driver_ScanLab_RTC6xN pDriver_ScanLab_RTC6xN, LibMCDriver_ScanLab::eOIERecordingMode eRecordingMode);

/**
* Returns the recording mode for using the Open Interface extension, taking into account by DrawLayer. Default is No Recording.
*
* @param[in] pDriver_ScanLab_RTC6xN - Driver_ScanLab_RTC6xN instance.
* @param[out] pRecordingMode - Recording mode enum
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_driver_scanlab_rtc6xn_getoierecordingmode(LibMCDriver_ScanLab_Driver_ScanLab_RTC6xN pDriver_ScanLab_RTC6xN, LibMCDriver_ScanLab::eOIERecordingMode * pRecordingMode);

/**
* Enables filtering of the segments by segment attributes. A segment will only be drawn if the given integer attribute has the given value.
*
* @param[in] pDriver_ScanLab_RTC6xN - Driver_ScanLab_RTC6xN instance.
* @param[in] pNameSpace - Namespace of Attribute to filter for.
* @param[in] pAttributeName - Name of Attribute to filter for.
* @param[in] nAttributeValue - Attribute Value to filter for.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_driver_scanlab_rtc6xn_enableattributefilter(LibMCDriver_ScanLab_Driver_ScanLab_RTC6xN pDriver_ScanLab_RTC6xN, const char * pNameSpace, const char * pAttributeName, LibMCDriver_ScanLab_int64 nAttributeValue);

/**
* Disables filtering of the segments by segment attributes.
*
* @param[in] pDriver_ScanLab_RTC6xN - Driver_ScanLab_RTC6xN instance.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_driver_scanlab_rtc6xn_disableattributefilter(LibMCDriver_ScanLab_Driver_ScanLab_RTC6xN pDriver_ScanLab_RTC6xN);

/**
* Draws a layer of a build stream on List 1. Blocks until the layer is drawn. Laser Indices are automatically assigned. Will fail if 
*
* @param[in] pDriver_ScanLab_RTC6xN - Driver_ScanLab_RTC6xN instance.
* @param[in] pStreamUUID - UUID of the build stream. Must have been loaded in memory by the system.
* @param[in] nLayerIndex - Layer index of the build file.
* @param[in] bFailIfNonAssignedDataExists - If true, the call will fail in case a layer contains data that is not assigned to any defined scanner card.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_driver_scanlab_rtc6xn_drawlayer(LibMCDriver_ScanLab_Driver_ScanLab_RTC6xN pDriver_ScanLab_RTC6xN, const char * pStreamUUID, LibMCDriver_ScanLab_uint32 nLayerIndex, bool bFailIfNonAssignedDataExists);

/**
* Set RTC Ethernet communication timeouts
*
* @param[in] pDriver_ScanLab_RTC6xN - Driver_ScanLab_RTC6xN instance.
* @param[in] nScannerIndex - Index of the scanner (0-based). MUST be smaller than ScannerCount
* @param[in] dInitialTimeout - Initial timeout in ms
* @param[in] dMaxTimeout - Max timeout in ms
* @param[in] dMultiplier - Multiplier
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_driver_scanlab_rtc6xn_setcommunicationtimeouts(LibMCDriver_ScanLab_Driver_ScanLab_RTC6xN pDriver_ScanLab_RTC6xN, LibMCDriver_ScanLab_uint32 nScannerIndex, LibMCDriver_ScanLab_double dInitialTimeout, LibMCDriver_ScanLab_double dMaxTimeout, LibMCDriver_ScanLab_double dMultiplier);

/**
* Get RTC Ethernet communication timeouts
*
* @param[in] pDriver_ScanLab_RTC6xN - Driver_ScanLab_RTC6xN instance.
* @param[in] nScannerIndex - Index of the scanner (0-based). MUST be smaller than ScannerCount
* @param[out] pInitialTimeout - Initial timeout in ms
* @param[out] pMaxTimeout - Max timeout in ms
* @param[out] pMultiplier - Multiplier
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_driver_scanlab_rtc6xn_getcommunicationtimeouts(LibMCDriver_ScanLab_Driver_ScanLab_RTC6xN pDriver_ScanLab_RTC6xN, LibMCDriver_ScanLab_uint32 nScannerIndex, LibMCDriver_ScanLab_double * pInitialTimeout, LibMCDriver_ScanLab_double * pMaxTimeout, LibMCDriver_ScanLab_double * pMultiplier);

/**
* Enables timelag compensation.
*
* @param[in] pDriver_ScanLab_RTC6xN - Driver_ScanLab_RTC6xN instance.
* @param[in] nScannerIndex - Index of the scanner (0-based). MUST be smaller than ScannerCount
* @param[in] nTimeLagXYInMicroseconds - Time lag of XY axes (in microseconds). MUST be a multiple of 10.
* @param[in] nTimeLagZInMicroseconds - Time lag of Z axis (in microseconds). MUST be a multiple of 10.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_driver_scanlab_rtc6xn_enabletimelagcompensation(LibMCDriver_ScanLab_Driver_ScanLab_RTC6xN pDriver_ScanLab_RTC6xN, LibMCDriver_ScanLab_uint32 nScannerIndex, LibMCDriver_ScanLab_uint32 nTimeLagXYInMicroseconds, LibMCDriver_ScanLab_uint32 nTimeLagZInMicroseconds);

/**
* Disables timelag compensation.
*
* @param[in] pDriver_ScanLab_RTC6xN - Driver_ScanLab_RTC6xN instance.
* @param[in] nScannerIndex - Index of the scanner (0-based). MUST be smaller than ScannerCount
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_driver_scanlab_rtc6xn_disabletimelagcompensation(LibMCDriver_ScanLab_Driver_ScanLab_RTC6xN pDriver_ScanLab_RTC6xN, LibMCDriver_ScanLab_uint32 nScannerIndex);

/*************************************************************************************************************************
 Global functions
**************************************************************************************************************************/

/**
* retrieves the binary version of this library.
*
* @param[out] pMajor - returns the major version of this library
* @param[out] pMinor - returns the minor version of this library
* @param[out] pMicro - returns the micro version of this library
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_getversion(LibMCDriver_ScanLab_uint32 * pMajor, LibMCDriver_ScanLab_uint32 * pMinor, LibMCDriver_ScanLab_uint32 * pMicro);

/**
* Returns the last error recorded on this object
*
* @param[in] pInstance - Instance Handle
* @param[in] nErrorMessageBufferSize - size of the buffer (including trailing 0)
* @param[out] pErrorMessageNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pErrorMessageBuffer -  buffer of Message of the last error, may be NULL
* @param[out] pHasError - Is there a last error to query
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_getlasterror(LibMCDriver_ScanLab_Base pInstance, const LibMCDriver_ScanLab_uint32 nErrorMessageBufferSize, LibMCDriver_ScanLab_uint32* pErrorMessageNeededChars, char * pErrorMessageBuffer, bool * pHasError);

/**
* Releases shared ownership of an Instance
*
* @param[in] pInstance - Instance Handle
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_releaseinstance(LibMCDriver_ScanLab_Base pInstance);

/**
* Acquires shared ownership of an Instance
*
* @param[in] pInstance - Instance Handle
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_acquireinstance(LibMCDriver_ScanLab_Base pInstance);

/**
* Injects an imported component for usage within this component
*
* @param[in] pNameSpace - NameSpace of the injected component
* @param[in] pSymbolAddressMethod - Address of the SymbolAddressMethod of the injected component
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_injectcomponent(const char * pNameSpace, LibMCDriver_ScanLab_pvoid pSymbolAddressMethod);

/**
* Returns the address of the SymbolLookupMethod
*
* @param[out] pSymbolLookupMethod - Address of the SymbolAddressMethod
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_getsymbollookupmethod(LibMCDriver_ScanLab_pvoid * pSymbolLookupMethod);

/**
* Creates a driver instance with a specific name.
*
* @param[in] pName - Name of driver to be created.
* @param[in] pType - Type of driver to be created.
* @param[in] pDriverEnvironment - Environment of this driver.
* @param[out] pInstance - New Driver instance
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLAB_DECLSPEC LibMCDriver_ScanLabResult libmcdriver_scanlab_createdriver(const char * pName, const char * pType, LibMCEnv_DriverEnvironment pDriverEnvironment, LibMCDriver_ScanLab_Driver * pInstance);

#ifdef __cplusplus
}
#endif

#endif // __LIBMCDRIVER_SCANLAB_HEADER_CPP

