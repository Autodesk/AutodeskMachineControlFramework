/*++

Copyright (C) 2020 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.8.0-develop.

Abstract: This is an autogenerated C++-Header file in order to allow an easy
 use of MC Driver OPCUA

Interface version: 2.0.0

*/

#ifndef __LIBMCDRIVER_OPCUA_HEADER_CPP
#define __LIBMCDRIVER_OPCUA_HEADER_CPP

#ifdef __LIBMCDRIVER_OPCUA_EXPORTS
#ifdef _WIN32
#define LIBMCDRIVER_OPCUA_DECLSPEC __declspec (dllexport)
#else // _WIN32
#define LIBMCDRIVER_OPCUA_DECLSPEC __attribute__((visibility("default")))
#endif // _WIN32
#else // __LIBMCDRIVER_OPCUA_EXPORTS
#define LIBMCDRIVER_OPCUA_DECLSPEC
#endif // __LIBMCDRIVER_OPCUA_EXPORTS

#include "libmcdriver_opcua_types.hpp"

#include "libmcenv_dynamic.hpp"

#ifdef __cplusplus
extern "C" {
#endif

/*************************************************************************************************************************
 Class definition for Base
**************************************************************************************************************************/

/*************************************************************************************************************************
 Class definition for Driver
**************************************************************************************************************************/

/**
* Configures a driver with its specific configuration data.
*
* @param[in] pDriver - Driver instance.
* @param[in] pConfigurationString - Configuration data of driver.
* @return error code or 0 (success)
*/
LIBMCDRIVER_OPCUA_DECLSPEC LibMCDriver_OPCUAResult libmcdriver_opcua_driver_configure(LibMCDriver_OPCUA_Driver pDriver, const char * pConfigurationString);

/**
* returns the name identifier of the driver
*
* @param[in] pDriver - Driver instance.
* @param[in] nNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNameBuffer -  buffer of Name of the driver., may be NULL
* @return error code or 0 (success)
*/
LIBMCDRIVER_OPCUA_DECLSPEC LibMCDriver_OPCUAResult libmcdriver_opcua_driver_getname(LibMCDriver_OPCUA_Driver pDriver, const LibMCDriver_OPCUA_uint32 nNameBufferSize, LibMCDriver_OPCUA_uint32* pNameNeededChars, char * pNameBuffer);

/**
* returns the type identifier of the driver
*
* @param[in] pDriver - Driver instance.
* @param[in] nTypeBufferSize - size of the buffer (including trailing 0)
* @param[out] pTypeNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pTypeBuffer -  buffer of Type of the driver., may be NULL
* @return error code or 0 (success)
*/
LIBMCDRIVER_OPCUA_DECLSPEC LibMCDriver_OPCUAResult libmcdriver_opcua_driver_gettype(LibMCDriver_OPCUA_Driver pDriver, const LibMCDriver_OPCUA_uint32 nTypeBufferSize, LibMCDriver_OPCUA_uint32* pTypeNeededChars, char * pTypeBuffer);

/**
* returns the version identifiers of the driver
*
* @param[in] pDriver - Driver instance.
* @param[out] pMajor - Major version.
* @param[out] pMinor - Minor version.
* @param[out] pMicro - Micro version.
* @param[in] nBuildBufferSize - size of the buffer (including trailing 0)
* @param[out] pBuildNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pBuildBuffer -  buffer of Build identifier., may be NULL
* @return error code or 0 (success)
*/
LIBMCDRIVER_OPCUA_DECLSPEC LibMCDriver_OPCUAResult libmcdriver_opcua_driver_getversion(LibMCDriver_OPCUA_Driver pDriver, LibMCDriver_OPCUA_uint32 * pMajor, LibMCDriver_OPCUA_uint32 * pMinor, LibMCDriver_OPCUA_uint32 * pMicro, const LibMCDriver_OPCUA_uint32 nBuildBufferSize, LibMCDriver_OPCUA_uint32* pBuildNeededChars, char * pBuildBuffer);

/**
* Updates the driver parameters in the driver environment. Should only be called in the driver thread.
*
* @param[in] pDriver - Driver instance.
* @return error code or 0 (success)
*/
LIBMCDRIVER_OPCUA_DECLSPEC LibMCDriver_OPCUAResult libmcdriver_opcua_driver_queryparameters(LibMCDriver_OPCUA_Driver pDriver);

/**
* Updates the driver parameters in the driver environment. Might be called out of thread. Implementation MUST be able to handle parallel calls.
*
* @param[in] pDriver - Driver instance.
* @param[in] pDriverUpdateInstance - Status update instance.
* @return error code or 0 (success)
*/
LIBMCDRIVER_OPCUA_DECLSPEC LibMCDriver_OPCUAResult libmcdriver_opcua_driver_queryparametersex(LibMCDriver_OPCUA_Driver pDriver, LibMCEnv_DriverStatusUpdateSession pDriverUpdateInstance);

/*************************************************************************************************************************
 Class definition for Driver_OPCUA
**************************************************************************************************************************/

/**
* Turns the driver into a simulation mode.
*
* @param[in] pDriver_OPCUA - Driver_OPCUA instance.
* @return error code or 0 (success)
*/
LIBMCDRIVER_OPCUA_DECLSPEC LibMCDriver_OPCUAResult libmcdriver_opcua_driver_opcua_settosimulationmode(LibMCDriver_OPCUA_Driver_OPCUA pDriver_OPCUA);

/**
* Returns if the driver is in simulation mode.
*
* @param[in] pDriver_OPCUA - Driver_OPCUA instance.
* @param[out] pSimulationModeEnabled - Flag if driver is in simulation mode.
* @return error code or 0 (success)
*/
LIBMCDRIVER_OPCUA_DECLSPEC LibMCDriver_OPCUAResult libmcdriver_opcua_driver_opcua_issimulationmode(LibMCDriver_OPCUA_Driver_OPCUA pDriver_OPCUA, bool * pSimulationModeEnabled);

/**
* Enables encryption for subsequent connects.
*
* @param[in] pDriver_OPCUA - Driver_OPCUA instance.
* @param[in] pLocalCertificate - Local Certificate String
* @param[in] pPrivateKey - Private Key
* @param[in] eSecurityMode - Security mode to use.
* @return error code or 0 (success)
*/
LIBMCDRIVER_OPCUA_DECLSPEC LibMCDriver_OPCUAResult libmcdriver_opcua_driver_opcua_enableencryption(LibMCDriver_OPCUA_Driver_OPCUA pDriver_OPCUA, const char * pLocalCertificate, const char * pPrivateKey, LibMCDriver_OPCUA::eUASecurityMode eSecurityMode);

/**
* Enables encryption for subsequent connects.
*
* @param[in] pDriver_OPCUA - Driver_OPCUA instance.
* @return error code or 0 (success)
*/
LIBMCDRIVER_OPCUA_DECLSPEC LibMCDriver_OPCUAResult libmcdriver_opcua_driver_opcua_disableencryption(LibMCDriver_OPCUA_Driver_OPCUA pDriver_OPCUA);

/**
* Connects to a OPCUA PLC Controller.
*
* @param[in] pDriver_OPCUA - Driver_OPCUA instance.
* @param[in] pEndPointURL - End point URL to connect to.
* @param[in] pUsername - User login.
* @param[in] pPassword - Password.
* @param[in] pApplicationURL - Application URL to use.
* @return error code or 0 (success)
*/
LIBMCDRIVER_OPCUA_DECLSPEC LibMCDriver_OPCUAResult libmcdriver_opcua_driver_opcua_connectwithusername(LibMCDriver_OPCUA_Driver_OPCUA pDriver_OPCUA, const char * pEndPointURL, const char * pUsername, const char * pPassword, const char * pApplicationURL);

/**
* Disconnect from the end point. Does nothing if not connected
*
* @param[in] pDriver_OPCUA - Driver_OPCUA instance.
* @return error code or 0 (success)
*/
LIBMCDRIVER_OPCUA_DECLSPEC LibMCDriver_OPCUAResult libmcdriver_opcua_driver_opcua_disconnect(LibMCDriver_OPCUA_Driver_OPCUA pDriver_OPCUA);

/**
* Returns if an end point is connected.
*
* @param[in] pDriver_OPCUA - Driver_OPCUA instance.
* @param[out] pValue - Returns true if connected.
* @return error code or 0 (success)
*/
LIBMCDRIVER_OPCUA_DECLSPEC LibMCDriver_OPCUAResult libmcdriver_opcua_driver_opcua_isconnected(LibMCDriver_OPCUA_Driver_OPCUA pDriver_OPCUA, bool * pValue);

/**
* Reads an integer node value. Fails if not connected or node does not exist.
*
* @param[in] pDriver_OPCUA - Driver_OPCUA instance.
* @param[in] nNameSpace - Namespace ID
* @param[in] pNodeName - NodeToRead
* @param[in] eNodeType - Type of Node to read
* @param[out] pValue - Retrieved Node Value
* @return error code or 0 (success)
*/
LIBMCDRIVER_OPCUA_DECLSPEC LibMCDriver_OPCUAResult libmcdriver_opcua_driver_opcua_readinteger(LibMCDriver_OPCUA_Driver_OPCUA pDriver_OPCUA, LibMCDriver_OPCUA_uint32 nNameSpace, const char * pNodeName, LibMCDriver_OPCUA::eUAIntegerType eNodeType, LibMCDriver_OPCUA_int64 * pValue);

/**
* Reads a double node value. Fails if not connected or node does not exist.
*
* @param[in] pDriver_OPCUA - Driver_OPCUA instance.
* @param[in] nNameSpace - Namespace ID
* @param[in] pNodeName - NodeToRead
* @param[in] eNodeType - Type of Node to read
* @param[out] pValue - Retrieved Node Value
* @return error code or 0 (success)
*/
LIBMCDRIVER_OPCUA_DECLSPEC LibMCDriver_OPCUAResult libmcdriver_opcua_driver_opcua_readdouble(LibMCDriver_OPCUA_Driver_OPCUA pDriver_OPCUA, LibMCDriver_OPCUA_uint32 nNameSpace, const char * pNodeName, LibMCDriver_OPCUA::eUADoubleType eNodeType, LibMCDriver_OPCUA_double * pValue);

/**
* Reads a string node value. Fails if not connected or node does not exist.
*
* @param[in] pDriver_OPCUA - Driver_OPCUA instance.
* @param[in] nNameSpace - Namespace ID
* @param[in] pNodeName - NodeToRead
* @param[in] nValueBufferSize - size of the buffer (including trailing 0)
* @param[out] pValueNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pValueBuffer -  buffer of Retrieved String Value, may be NULL
* @return error code or 0 (success)
*/
LIBMCDRIVER_OPCUA_DECLSPEC LibMCDriver_OPCUAResult libmcdriver_opcua_driver_opcua_readstring(LibMCDriver_OPCUA_Driver_OPCUA pDriver_OPCUA, LibMCDriver_OPCUA_uint32 nNameSpace, const char * pNodeName, const LibMCDriver_OPCUA_uint32 nValueBufferSize, LibMCDriver_OPCUA_uint32* pValueNeededChars, char * pValueBuffer);

/**
* Writes an integer node value. Fails if not connected or node does not exist.
*
* @param[in] pDriver_OPCUA - Driver_OPCUA instance.
* @param[in] nNameSpace - Namespace ID
* @param[in] pNodeName - NodeToRead
* @param[in] eNodeType - Type of Node to write
* @param[in] nValue - Node Value to write
* @return error code or 0 (success)
*/
LIBMCDRIVER_OPCUA_DECLSPEC LibMCDriver_OPCUAResult libmcdriver_opcua_driver_opcua_writeinteger(LibMCDriver_OPCUA_Driver_OPCUA pDriver_OPCUA, LibMCDriver_OPCUA_uint32 nNameSpace, const char * pNodeName, LibMCDriver_OPCUA::eUAIntegerType eNodeType, LibMCDriver_OPCUA_int64 nValue);

/**
* Writes a double node value. Fails if not connected or node does not exist.
*
* @param[in] pDriver_OPCUA - Driver_OPCUA instance.
* @param[in] nNameSpace - Namespace ID
* @param[in] pNodeName - NodeToRead
* @param[in] eNodeType - Type of Node to write
* @param[in] dValue - Node Value to write
* @return error code or 0 (success)
*/
LIBMCDRIVER_OPCUA_DECLSPEC LibMCDriver_OPCUAResult libmcdriver_opcua_driver_opcua_writedouble(LibMCDriver_OPCUA_Driver_OPCUA pDriver_OPCUA, LibMCDriver_OPCUA_uint32 nNameSpace, const char * pNodeName, LibMCDriver_OPCUA::eUADoubleType eNodeType, LibMCDriver_OPCUA_double dValue);

/**
* Writes a string node value. Fails if not connected.
*
* @param[in] pDriver_OPCUA - Driver_OPCUA instance.
* @param[in] nNameSpace - Namespace ID
* @param[in] pNodeName - NodeToRead
* @param[in] pValue - Node Value to write
* @return error code or 0 (success)
*/
LIBMCDRIVER_OPCUA_DECLSPEC LibMCDriver_OPCUAResult libmcdriver_opcua_driver_opcua_writestring(LibMCDriver_OPCUA_Driver_OPCUA pDriver_OPCUA, LibMCDriver_OPCUA_uint32 nNameSpace, const char * pNodeName, const char * pValue);

/*************************************************************************************************************************
 Global functions
**************************************************************************************************************************/

/**
* retrieves the binary version of this library.
*
* @param[out] pMajor - returns the major version of this library
* @param[out] pMinor - returns the minor version of this library
* @param[out] pMicro - returns the micro version of this library
* @return error code or 0 (success)
*/
LIBMCDRIVER_OPCUA_DECLSPEC LibMCDriver_OPCUAResult libmcdriver_opcua_getversion(LibMCDriver_OPCUA_uint32 * pMajor, LibMCDriver_OPCUA_uint32 * pMinor, LibMCDriver_OPCUA_uint32 * pMicro);

/**
* Returns the last error recorded on this object
*
* @param[in] pInstance - Instance Handle
* @param[in] nErrorMessageBufferSize - size of the buffer (including trailing 0)
* @param[out] pErrorMessageNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pErrorMessageBuffer -  buffer of Message of the last error, may be NULL
* @param[out] pHasError - Is there a last error to query
* @return error code or 0 (success)
*/
LIBMCDRIVER_OPCUA_DECLSPEC LibMCDriver_OPCUAResult libmcdriver_opcua_getlasterror(LibMCDriver_OPCUA_Base pInstance, const LibMCDriver_OPCUA_uint32 nErrorMessageBufferSize, LibMCDriver_OPCUA_uint32* pErrorMessageNeededChars, char * pErrorMessageBuffer, bool * pHasError);

/**
* Releases shared ownership of an Instance
*
* @param[in] pInstance - Instance Handle
* @return error code or 0 (success)
*/
LIBMCDRIVER_OPCUA_DECLSPEC LibMCDriver_OPCUAResult libmcdriver_opcua_releaseinstance(LibMCDriver_OPCUA_Base pInstance);

/**
* Acquires shared ownership of an Instance
*
* @param[in] pInstance - Instance Handle
* @return error code or 0 (success)
*/
LIBMCDRIVER_OPCUA_DECLSPEC LibMCDriver_OPCUAResult libmcdriver_opcua_acquireinstance(LibMCDriver_OPCUA_Base pInstance);

/**
* Injects an imported component for usage within this component
*
* @param[in] pNameSpace - NameSpace of the injected component
* @param[in] pSymbolAddressMethod - Address of the SymbolAddressMethod of the injected component
* @return error code or 0 (success)
*/
LIBMCDRIVER_OPCUA_DECLSPEC LibMCDriver_OPCUAResult libmcdriver_opcua_injectcomponent(const char * pNameSpace, LibMCDriver_OPCUA_pvoid pSymbolAddressMethod);

/**
* Returns the address of the SymbolLookupMethod
*
* @param[out] pSymbolLookupMethod - Address of the SymbolAddressMethod
* @return error code or 0 (success)
*/
LIBMCDRIVER_OPCUA_DECLSPEC LibMCDriver_OPCUAResult libmcdriver_opcua_getsymbollookupmethod(LibMCDriver_OPCUA_pvoid * pSymbolLookupMethod);

/**
* Creates a driver instance with a specific name.
*
* @param[in] pName - Name of driver to be created.
* @param[in] pType - Type of driver to be created.
* @param[in] pDriverEnvironment - Environment of this driver.
* @param[out] pInstance - New Driver instance
* @return error code or 0 (success)
*/
LIBMCDRIVER_OPCUA_DECLSPEC LibMCDriver_OPCUAResult libmcdriver_opcua_createdriver(const char * pName, const char * pType, LibMCEnv_DriverEnvironment pDriverEnvironment, LibMCDriver_OPCUA_Driver * pInstance);

#ifdef __cplusplus
}
#endif

#endif // __LIBMCDRIVER_OPCUA_HEADER_CPP

