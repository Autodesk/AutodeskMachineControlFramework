/*++

Copyright (C) 2020 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.8.0-develop.

Abstract: This is an autogenerated C++-Header file with basic types in
order to allow an easy use of MC Driver OPCUA

Interface version: 1.0.0

*/

#ifndef __LIBMCDRIVER_OPCUA_TYPES_HEADER_CPP
#define __LIBMCDRIVER_OPCUA_TYPES_HEADER_CPP


/*************************************************************************************************************************
 Scalar types definition
**************************************************************************************************************************/

#ifdef LIBMCDRIVER_OPCUA_USELEGACYINTEGERTYPES

typedef unsigned char LibMCDriver_OPCUA_uint8;
typedef unsigned short LibMCDriver_OPCUA_uint16 ;
typedef unsigned int LibMCDriver_OPCUA_uint32;
typedef unsigned long long LibMCDriver_OPCUA_uint64;
typedef char LibMCDriver_OPCUA_int8;
typedef short LibMCDriver_OPCUA_int16;
typedef int LibMCDriver_OPCUA_int32;
typedef long long LibMCDriver_OPCUA_int64;

#else // LIBMCDRIVER_OPCUA_USELEGACYINTEGERTYPES

#include <stdint.h>

typedef uint8_t LibMCDriver_OPCUA_uint8;
typedef uint16_t LibMCDriver_OPCUA_uint16;
typedef uint32_t LibMCDriver_OPCUA_uint32;
typedef uint64_t LibMCDriver_OPCUA_uint64;
typedef int8_t LibMCDriver_OPCUA_int8;
typedef int16_t LibMCDriver_OPCUA_int16;
typedef int32_t LibMCDriver_OPCUA_int32;
typedef int64_t LibMCDriver_OPCUA_int64 ;

#endif // LIBMCDRIVER_OPCUA_USELEGACYINTEGERTYPES

typedef float LibMCDriver_OPCUA_single;
typedef double LibMCDriver_OPCUA_double;

/*************************************************************************************************************************
 General type definitions
**************************************************************************************************************************/

typedef LibMCDriver_OPCUA_int32 LibMCDriver_OPCUAResult;
typedef void * LibMCDriver_OPCUAHandle;
typedef void * LibMCDriver_OPCUA_pvoid;

/*************************************************************************************************************************
 Version for LibMCDriver_OPCUA
**************************************************************************************************************************/

#define LIBMCDRIVER_OPCUA_VERSION_MAJOR 1
#define LIBMCDRIVER_OPCUA_VERSION_MINOR 0
#define LIBMCDRIVER_OPCUA_VERSION_MICRO 0
#define LIBMCDRIVER_OPCUA_VERSION_PRERELEASEINFO ""
#define LIBMCDRIVER_OPCUA_VERSION_BUILDINFO ""

/*************************************************************************************************************************
 Error constants for LibMCDriver_OPCUA
**************************************************************************************************************************/

#define LIBMCDRIVER_OPCUA_SUCCESS 0
#define LIBMCDRIVER_OPCUA_ERROR_NOTIMPLEMENTED 1 /** functionality not implemented */
#define LIBMCDRIVER_OPCUA_ERROR_INVALIDPARAM 2 /** an invalid parameter was passed */
#define LIBMCDRIVER_OPCUA_ERROR_INVALIDCAST 3 /** a type cast failed */
#define LIBMCDRIVER_OPCUA_ERROR_BUFFERTOOSMALL 4 /** a provided buffer is too small */
#define LIBMCDRIVER_OPCUA_ERROR_GENERICEXCEPTION 5 /** a generic exception occurred */
#define LIBMCDRIVER_OPCUA_ERROR_COULDNOTLOADLIBRARY 6 /** the library could not be loaded */
#define LIBMCDRIVER_OPCUA_ERROR_COULDNOTFINDLIBRARYEXPORT 7 /** a required exported symbol could not be found in the library */
#define LIBMCDRIVER_OPCUA_ERROR_INCOMPATIBLEBINARYVERSION 8 /** the version of the binary interface does not match the bindings interface */
#define LIBMCDRIVER_OPCUA_ERROR_INVALIDSTATENAME 9 /** invalid state name */
#define LIBMCDRIVER_OPCUA_ERROR_DRIVERERROR 1000 /** a driver error occured */
#define LIBMCDRIVER_OPCUA_ERROR_DRIVERNOTINITIALISED 1001 /** the driver is not initialised */
#define LIBMCDRIVER_OPCUA_ERROR_DRIVERNOTCONNECTED 1002 /** the driver is not connected */
#define LIBMCDRIVER_OPCUA_ERROR_INVALIDDRIVERPROTOCOL 1003 /** invalid driver protocol definition */
#define LIBMCDRIVER_OPCUA_ERROR_COULDNOTPARSEDRIVERPROTOCOL 1004 /** could not parse driver protocol */
#define LIBMCDRIVER_OPCUA_ERROR_NOMACHINESTATUSDEFINITION 1005 /** no machine status definition */
#define LIBMCDRIVER_OPCUA_ERROR_NONAMEATTRIBUTE 1010 /** no name attribute */
#define LIBMCDRIVER_OPCUA_ERROR_NOADDRESSEATTRIBUTE 1011 /** no address attribute */
#define LIBMCDRIVER_OPCUA_ERROR_NODESCRIPTIONATTRIBUTE 1012 /** no description attribute */
#define LIBMCDRIVER_OPCUA_ERROR_NOBITATTRIBUTE 1013 /** no bit attribute */
#define LIBMCDRIVER_OPCUA_ERROR_INVALIDNAMEATTRIBUTE 1014 /** invalid name attribute */
#define LIBMCDRIVER_OPCUA_ERROR_INVALIDADDRESSEATTRIBUTE 1015 /** invalid address attribute */
#define LIBMCDRIVER_OPCUA_ERROR_INVALIDDESCRIPTIONATTRIBUTE 1016 /** invalid description attribute */
#define LIBMCDRIVER_OPCUA_ERROR_INVALIDBITATTRIBUTE 1017 /** invalid bit attribute */
#define LIBMCDRIVER_OPCUA_ERROR_INVALIDCPUTYPE 1018 /** invalid cpu type */
#define LIBMCDRIVER_OPCUA_ERROR_UNKNOWNCOMMANDNAME 1022 /** unknown command name */
#define LIBMCDRIVER_OPCUA_ERROR_NOCOMMANDNAME 1023 /** no command name */
#define LIBMCDRIVER_OPCUA_ERROR_NOCOMMANDID 1024 /** no command id */
#define LIBMCDRIVER_OPCUA_ERROR_INVALIDCOMMANDNAME 1025 /** invalid command name */
#define LIBMCDRIVER_OPCUA_ERROR_INVALIDCOMMANDID 1026 /** invalid command id */
#define LIBMCDRIVER_OPCUA_ERROR_COMMANDHASALREADYBEENEXECUTED 1027 /** command has already been executed */
#define LIBMCDRIVER_OPCUA_ERROR_COMMANDHASNOTBEENEXECUTED 1028 /** command has not been executed */
#define LIBMCDRIVER_OPCUA_ERROR_INVALIDSEQUENCEID 1029 /** invalid sequence id */
#define LIBMCDRIVER_OPCUA_ERROR_COMMANDSEQUENCEERROR 1030 /** command sequence communication error */
#define LIBMCDRIVER_OPCUA_ERROR_COMMANDREACTIONTIMEOUT 1031 /** command reaction timeout */
#define LIBMCDRIVER_OPCUA_ERROR_NOCOMMANDSDEFINITION 1032 /** no commands definition */
#define LIBMCDRIVER_OPCUA_ERROR_NOVERSIONDEFINITION 1033 /** no version definition */
#define LIBMCDRIVER_OPCUA_ERROR_NOMAJORVERSION 1034 /** no major version */
#define LIBMCDRIVER_OPCUA_ERROR_NOMINORVERSION 1035 /** no minor version */
#define LIBMCDRIVER_OPCUA_ERROR_NOPATCHVERSION 1036 /** no patch version */
#define LIBMCDRIVER_OPCUA_ERROR_COULDNOTFINDADDRESS 1039 /** could not find address */
#define LIBMCDRIVER_OPCUA_ERROR_FIELDISNOINTPARAM 1040 /** field is no int parameter */
#define LIBMCDRIVER_OPCUA_ERROR_FIELDISNODINTPARAM 1041 /** field is no dint parameter */
#define LIBMCDRIVER_OPCUA_ERROR_FIELDISNOSTRINGPARAM 1042 /** field is no string parameter */
#define LIBMCDRIVER_OPCUA_ERROR_NOLENGTHATTRIBUTE 1043 /** no length attribute */
#define LIBMCDRIVER_OPCUA_ERROR_INVALIDLENGTHATTRIBUTE 1044 /** invalid length attribute */
#define LIBMCDRIVER_OPCUA_ERROR_COMMANDPARAMETERNAMEMISSING 1045 /** command parameter name missing */
#define LIBMCDRIVER_OPCUA_ERROR_COMMANDPARAMETERDESCRIPTIONMISSING 1046 /** command parameter description missing */
#define LIBMCDRIVER_OPCUA_ERROR_COMMANDPARAMETERFIELDMISSING 1047 /** command parameter field missing */
#define LIBMCDRIVER_OPCUA_ERROR_COMMANDPARAMETERNOTFOUND 1048 /** command parameter not found */
#define LIBMCDRIVER_OPCUA_ERROR_COMMANDFIELDNOTFOUND 1049 /** command field not found */
#define LIBMCDRIVER_OPCUA_ERROR_INVALIDPARAMETERTYPE 1050 /** command field parameter is of wrong type */
#define LIBMCDRIVER_OPCUA_ERROR_COMMANDPARAMETEROUTOFBOUNDS 1051 /** command field parameter is out of bounds */
#define LIBMCDRIVER_OPCUA_ERROR_INVALIDPARAMETERADDRESS 1052 /** invalid parameter address */
#define LIBMCDRIVER_OPCUA_ERROR_STRINGPARAMETEROVERFLOW 1053 /** string parameter overflow */
#define LIBMCDRIVER_OPCUA_ERROR_RECEIVEDINVALIDPACKETSIGNATURE 1054 /** received invalid packet signature */
#define LIBMCDRIVER_OPCUA_ERROR_INVALIDTCPCONNECTIONPOINTER 1055 /** invalid tcp connection pointer */
#define LIBMCDRIVER_OPCUA_ERROR_INVALIDCLIENTSEQUENCEID 1056 /** Invalid client sequence id */
#define LIBMCDRIVER_OPCUA_ERROR_INVALIDCLIENTID 1057 /** Invalid client id */
#define LIBMCDRIVER_OPCUA_ERROR_PACKETQUEUEOVERFLOW 1058 /** Packet queue overflow. */
#define LIBMCDRIVER_OPCUA_ERROR_NOCOMMANDSLIST 1059 /** No commands list. */
#define LIBMCDRIVER_OPCUA_ERROR_COMMANDNAMEMISSING 1060 /** Command name missing. */
#define LIBMCDRIVER_OPCUA_ERROR_COMMANDIDMISSING 1061 /** Command ID missing. */
#define LIBMCDRIVER_OPCUA_ERROR_DUPLICATECOMMANDPARAMETER 1062 /** Duplicate command parameter. */
#define LIBMCDRIVER_OPCUA_ERROR_INTEGERPARAMETERNOTFOUND 1063 /** Integer parameter not found. */
#define LIBMCDRIVER_OPCUA_ERROR_BOOLPARAMETERNOTFOUND 1064 /** Bool parameter not found. */
#define LIBMCDRIVER_OPCUA_ERROR_DOUBLEPARAMETERNOTFOUND 1065 /** Double parameter not found. */
#define LIBMCDRIVER_OPCUA_ERROR_VALUEISNOTINTEGERVALUE 1066 /** Value is not integer value. */
#define LIBMCDRIVER_OPCUA_ERROR_VALUEISNOTBOOLVALUE 1067 /** Value is not bool value. */
#define LIBMCDRIVER_OPCUA_ERROR_VALUEISNOTDOUBLEVALUE 1068 /** Value is not double value. */
#define LIBMCDRIVER_OPCUA_ERROR_COMMANDDEFINITIONNOTFOUND 1069 /** Command definition not found. */
#define LIBMCDRIVER_OPCUA_ERROR_NOTCONNECTED 1070 /** Not connected. */
#define LIBMCDRIVER_OPCUA_ERROR_COULDNOTGETADDRESSINFO 1071 /** Could not get address info. */
#define LIBMCDRIVER_OPCUA_ERROR_COULDNOTCREATESOCKET 1072 /** Could not create socket. */
#define LIBMCDRIVER_OPCUA_ERROR_COULDNOTCONNECT 1073 /** Could not connect. */
#define LIBMCDRIVER_OPCUA_ERROR_SENDERROR 1074 /** Send error. */
#define LIBMCDRIVER_OPCUA_ERROR_RECEIVECOUNTEXCEEDSMAXIMUM 1075 /** Receive count exceeds maximum. */
#define LIBMCDRIVER_OPCUA_ERROR_CONNECTIONCLOSED 1076 /** Connection closed. */
#define LIBMCDRIVER_OPCUA_ERROR_RECEIVEERROR 1077 /** Receive error. */
#define LIBMCDRIVER_OPCUA_ERROR_SENDCOUNTEXCEEDSMAXIMUM 1078 /** Send count exceeds maximum. */
#define LIBMCDRIVER_OPCUA_ERROR_RECEIVEDINVALIDPACKETLENGTH 1079 /** Received invalid packet length. */
#define LIBMCDRIVER_OPCUA_ERROR_COULDNOTWRITETOPAYLOAD 1080 /** Could not write to payload. */
#define LIBMCDRIVER_OPCUA_ERROR_INVALIDPAYLOADADDRESS 1081 /** Invalid payload address. */

/*************************************************************************************************************************
 Error strings for LibMCDriver_OPCUA
**************************************************************************************************************************/

inline const char * LIBMCDRIVER_OPCUA_GETERRORSTRING (LibMCDriver_OPCUAResult nErrorCode) {
  switch (nErrorCode) {
    case LIBMCDRIVER_OPCUA_SUCCESS: return "no error";
    case LIBMCDRIVER_OPCUA_ERROR_NOTIMPLEMENTED: return "functionality not implemented";
    case LIBMCDRIVER_OPCUA_ERROR_INVALIDPARAM: return "an invalid parameter was passed";
    case LIBMCDRIVER_OPCUA_ERROR_INVALIDCAST: return "a type cast failed";
    case LIBMCDRIVER_OPCUA_ERROR_BUFFERTOOSMALL: return "a provided buffer is too small";
    case LIBMCDRIVER_OPCUA_ERROR_GENERICEXCEPTION: return "a generic exception occurred";
    case LIBMCDRIVER_OPCUA_ERROR_COULDNOTLOADLIBRARY: return "the library could not be loaded";
    case LIBMCDRIVER_OPCUA_ERROR_COULDNOTFINDLIBRARYEXPORT: return "a required exported symbol could not be found in the library";
    case LIBMCDRIVER_OPCUA_ERROR_INCOMPATIBLEBINARYVERSION: return "the version of the binary interface does not match the bindings interface";
    case LIBMCDRIVER_OPCUA_ERROR_INVALIDSTATENAME: return "invalid state name";
    case LIBMCDRIVER_OPCUA_ERROR_DRIVERERROR: return "a driver error occured";
    case LIBMCDRIVER_OPCUA_ERROR_DRIVERNOTINITIALISED: return "the driver is not initialised";
    case LIBMCDRIVER_OPCUA_ERROR_DRIVERNOTCONNECTED: return "the driver is not connected";
    case LIBMCDRIVER_OPCUA_ERROR_INVALIDDRIVERPROTOCOL: return "invalid driver protocol definition";
    case LIBMCDRIVER_OPCUA_ERROR_COULDNOTPARSEDRIVERPROTOCOL: return "could not parse driver protocol";
    case LIBMCDRIVER_OPCUA_ERROR_NOMACHINESTATUSDEFINITION: return "no machine status definition";
    case LIBMCDRIVER_OPCUA_ERROR_NONAMEATTRIBUTE: return "no name attribute";
    case LIBMCDRIVER_OPCUA_ERROR_NOADDRESSEATTRIBUTE: return "no address attribute";
    case LIBMCDRIVER_OPCUA_ERROR_NODESCRIPTIONATTRIBUTE: return "no description attribute";
    case LIBMCDRIVER_OPCUA_ERROR_NOBITATTRIBUTE: return "no bit attribute";
    case LIBMCDRIVER_OPCUA_ERROR_INVALIDNAMEATTRIBUTE: return "invalid name attribute";
    case LIBMCDRIVER_OPCUA_ERROR_INVALIDADDRESSEATTRIBUTE: return "invalid address attribute";
    case LIBMCDRIVER_OPCUA_ERROR_INVALIDDESCRIPTIONATTRIBUTE: return "invalid description attribute";
    case LIBMCDRIVER_OPCUA_ERROR_INVALIDBITATTRIBUTE: return "invalid bit attribute";
    case LIBMCDRIVER_OPCUA_ERROR_INVALIDCPUTYPE: return "invalid cpu type";
    case LIBMCDRIVER_OPCUA_ERROR_UNKNOWNCOMMANDNAME: return "unknown command name";
    case LIBMCDRIVER_OPCUA_ERROR_NOCOMMANDNAME: return "no command name";
    case LIBMCDRIVER_OPCUA_ERROR_NOCOMMANDID: return "no command id";
    case LIBMCDRIVER_OPCUA_ERROR_INVALIDCOMMANDNAME: return "invalid command name";
    case LIBMCDRIVER_OPCUA_ERROR_INVALIDCOMMANDID: return "invalid command id";
    case LIBMCDRIVER_OPCUA_ERROR_COMMANDHASALREADYBEENEXECUTED: return "command has already been executed";
    case LIBMCDRIVER_OPCUA_ERROR_COMMANDHASNOTBEENEXECUTED: return "command has not been executed";
    case LIBMCDRIVER_OPCUA_ERROR_INVALIDSEQUENCEID: return "invalid sequence id";
    case LIBMCDRIVER_OPCUA_ERROR_COMMANDSEQUENCEERROR: return "command sequence communication error";
    case LIBMCDRIVER_OPCUA_ERROR_COMMANDREACTIONTIMEOUT: return "command reaction timeout";
    case LIBMCDRIVER_OPCUA_ERROR_NOCOMMANDSDEFINITION: return "no commands definition";
    case LIBMCDRIVER_OPCUA_ERROR_NOVERSIONDEFINITION: return "no version definition";
    case LIBMCDRIVER_OPCUA_ERROR_NOMAJORVERSION: return "no major version";
    case LIBMCDRIVER_OPCUA_ERROR_NOMINORVERSION: return "no minor version";
    case LIBMCDRIVER_OPCUA_ERROR_NOPATCHVERSION: return "no patch version";
    case LIBMCDRIVER_OPCUA_ERROR_COULDNOTFINDADDRESS: return "could not find address";
    case LIBMCDRIVER_OPCUA_ERROR_FIELDISNOINTPARAM: return "field is no int parameter";
    case LIBMCDRIVER_OPCUA_ERROR_FIELDISNODINTPARAM: return "field is no dint parameter";
    case LIBMCDRIVER_OPCUA_ERROR_FIELDISNOSTRINGPARAM: return "field is no string parameter";
    case LIBMCDRIVER_OPCUA_ERROR_NOLENGTHATTRIBUTE: return "no length attribute";
    case LIBMCDRIVER_OPCUA_ERROR_INVALIDLENGTHATTRIBUTE: return "invalid length attribute";
    case LIBMCDRIVER_OPCUA_ERROR_COMMANDPARAMETERNAMEMISSING: return "command parameter name missing";
    case LIBMCDRIVER_OPCUA_ERROR_COMMANDPARAMETERDESCRIPTIONMISSING: return "command parameter description missing";
    case LIBMCDRIVER_OPCUA_ERROR_COMMANDPARAMETERFIELDMISSING: return "command parameter field missing";
    case LIBMCDRIVER_OPCUA_ERROR_COMMANDPARAMETERNOTFOUND: return "command parameter not found";
    case LIBMCDRIVER_OPCUA_ERROR_COMMANDFIELDNOTFOUND: return "command field not found";
    case LIBMCDRIVER_OPCUA_ERROR_INVALIDPARAMETERTYPE: return "command field parameter is of wrong type";
    case LIBMCDRIVER_OPCUA_ERROR_COMMANDPARAMETEROUTOFBOUNDS: return "command field parameter is out of bounds";
    case LIBMCDRIVER_OPCUA_ERROR_INVALIDPARAMETERADDRESS: return "invalid parameter address";
    case LIBMCDRIVER_OPCUA_ERROR_STRINGPARAMETEROVERFLOW: return "string parameter overflow";
    case LIBMCDRIVER_OPCUA_ERROR_RECEIVEDINVALIDPACKETSIGNATURE: return "received invalid packet signature";
    case LIBMCDRIVER_OPCUA_ERROR_INVALIDTCPCONNECTIONPOINTER: return "invalid tcp connection pointer";
    case LIBMCDRIVER_OPCUA_ERROR_INVALIDCLIENTSEQUENCEID: return "Invalid client sequence id";
    case LIBMCDRIVER_OPCUA_ERROR_INVALIDCLIENTID: return "Invalid client id";
    case LIBMCDRIVER_OPCUA_ERROR_PACKETQUEUEOVERFLOW: return "Packet queue overflow.";
    case LIBMCDRIVER_OPCUA_ERROR_NOCOMMANDSLIST: return "No commands list.";
    case LIBMCDRIVER_OPCUA_ERROR_COMMANDNAMEMISSING: return "Command name missing.";
    case LIBMCDRIVER_OPCUA_ERROR_COMMANDIDMISSING: return "Command ID missing.";
    case LIBMCDRIVER_OPCUA_ERROR_DUPLICATECOMMANDPARAMETER: return "Duplicate command parameter.";
    case LIBMCDRIVER_OPCUA_ERROR_INTEGERPARAMETERNOTFOUND: return "Integer parameter not found.";
    case LIBMCDRIVER_OPCUA_ERROR_BOOLPARAMETERNOTFOUND: return "Bool parameter not found.";
    case LIBMCDRIVER_OPCUA_ERROR_DOUBLEPARAMETERNOTFOUND: return "Double parameter not found.";
    case LIBMCDRIVER_OPCUA_ERROR_VALUEISNOTINTEGERVALUE: return "Value is not integer value.";
    case LIBMCDRIVER_OPCUA_ERROR_VALUEISNOTBOOLVALUE: return "Value is not bool value.";
    case LIBMCDRIVER_OPCUA_ERROR_VALUEISNOTDOUBLEVALUE: return "Value is not double value.";
    case LIBMCDRIVER_OPCUA_ERROR_COMMANDDEFINITIONNOTFOUND: return "Command definition not found.";
    case LIBMCDRIVER_OPCUA_ERROR_NOTCONNECTED: return "Not connected.";
    case LIBMCDRIVER_OPCUA_ERROR_COULDNOTGETADDRESSINFO: return "Could not get address info.";
    case LIBMCDRIVER_OPCUA_ERROR_COULDNOTCREATESOCKET: return "Could not create socket.";
    case LIBMCDRIVER_OPCUA_ERROR_COULDNOTCONNECT: return "Could not connect.";
    case LIBMCDRIVER_OPCUA_ERROR_SENDERROR: return "Send error.";
    case LIBMCDRIVER_OPCUA_ERROR_RECEIVECOUNTEXCEEDSMAXIMUM: return "Receive count exceeds maximum.";
    case LIBMCDRIVER_OPCUA_ERROR_CONNECTIONCLOSED: return "Connection closed.";
    case LIBMCDRIVER_OPCUA_ERROR_RECEIVEERROR: return "Receive error.";
    case LIBMCDRIVER_OPCUA_ERROR_SENDCOUNTEXCEEDSMAXIMUM: return "Send count exceeds maximum.";
    case LIBMCDRIVER_OPCUA_ERROR_RECEIVEDINVALIDPACKETLENGTH: return "Received invalid packet length.";
    case LIBMCDRIVER_OPCUA_ERROR_COULDNOTWRITETOPAYLOAD: return "Could not write to payload.";
    case LIBMCDRIVER_OPCUA_ERROR_INVALIDPAYLOADADDRESS: return "Invalid payload address.";
    default: return "unknown error";
  }
}

/*************************************************************************************************************************
 Declaration of handle classes 
**************************************************************************************************************************/

typedef LibMCDriver_OPCUAHandle LibMCDriver_OPCUA_Base;
typedef LibMCDriver_OPCUAHandle LibMCDriver_OPCUA_Driver;
typedef LibMCDriver_OPCUAHandle LibMCDriver_OPCUA_PLCCommand;
typedef LibMCDriver_OPCUAHandle LibMCDriver_OPCUA_PLCCommandList;
typedef LibMCDriver_OPCUAHandle LibMCDriver_OPCUA_Driver_OPCUA;

namespace LibMCDriver_OPCUA {

} // namespace LibMCDriver_OPCUA;

// define legacy C-names for enums, structs and function types

#endif // __LIBMCDRIVER_OPCUA_TYPES_HEADER_CPP
