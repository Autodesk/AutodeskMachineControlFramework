/*++

Copyright (C) 2020 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.8.0-develop.

Abstract: This is an autogenerated C++ implementation file in order to allow easy
development of MC Driver OPCUA. The functions in this file need to be implemented. It needs to be generated only once.

Interface version: 2.0.0

*/

#include "libmcdriver_opcua_abi.hpp"
#include "libmcdriver_opcua_interfaces.hpp"
#include "libmcdriver_opcua_interfaceexception.hpp"

#include <map>

using namespace LibMCDriver_OPCUA::Impl;

LibMCDriver_OPCUAResult handleLibMCDriver_OPCUAException(IBase * pIBaseClass, ELibMCDriver_OPCUAInterfaceException & Exception)
{
	LibMCDriver_OPCUAResult errorCode = Exception.getErrorCode();

	if (pIBaseClass != nullptr)
		pIBaseClass->RegisterErrorMessage(Exception.what());

	return errorCode;
}

LibMCDriver_OPCUAResult handleStdException(IBase * pIBaseClass, std::exception & Exception)
{
	LibMCDriver_OPCUAResult errorCode = LIBMCDRIVER_OPCUA_ERROR_GENERICEXCEPTION;

	if (pIBaseClass != nullptr)
		pIBaseClass->RegisterErrorMessage(Exception.what());

	return errorCode;
}

LibMCDriver_OPCUAResult handleUnhandledException(IBase * pIBaseClass)
{
	LibMCDriver_OPCUAResult errorCode = LIBMCDRIVER_OPCUA_ERROR_GENERICEXCEPTION;

	if (pIBaseClass != nullptr)
		pIBaseClass->RegisterErrorMessage("Unhandled Exception");

	return errorCode;
}



/*************************************************************************************************************************
 Class implementation for Base
**************************************************************************************************************************/

/*************************************************************************************************************************
 Class implementation for Driver
**************************************************************************************************************************/
LibMCDriver_OPCUAResult libmcdriver_opcua_driver_configure(LibMCDriver_OPCUA_Driver pDriver, const char * pConfigurationString)
{
	IBase* pIBaseClass = (IBase *)pDriver;

	try {
		if (pConfigurationString == nullptr)
			throw ELibMCDriver_OPCUAInterfaceException (LIBMCDRIVER_OPCUA_ERROR_INVALIDPARAM);
		std::string sConfigurationString(pConfigurationString);
		IDriver* pIDriver = dynamic_cast<IDriver*>(pIBaseClass);
		if (!pIDriver)
			throw ELibMCDriver_OPCUAInterfaceException(LIBMCDRIVER_OPCUA_ERROR_INVALIDCAST);
		
		pIDriver->Configure(sConfigurationString);

		return LIBMCDRIVER_OPCUA_SUCCESS;
	}
	catch (ELibMCDriver_OPCUAInterfaceException & Exception) {
		return handleLibMCDriver_OPCUAException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_OPCUAResult libmcdriver_opcua_driver_getname(LibMCDriver_OPCUA_Driver pDriver, const LibMCDriver_OPCUA_uint32 nNameBufferSize, LibMCDriver_OPCUA_uint32* pNameNeededChars, char * pNameBuffer)
{
	IBase* pIBaseClass = (IBase *)pDriver;

	try {
		if ( (!pNameBuffer) && !(pNameNeededChars) )
			throw ELibMCDriver_OPCUAInterfaceException (LIBMCDRIVER_OPCUA_ERROR_INVALIDPARAM);
		std::string sName("");
		IDriver* pIDriver = dynamic_cast<IDriver*>(pIBaseClass);
		if (!pIDriver)
			throw ELibMCDriver_OPCUAInterfaceException(LIBMCDRIVER_OPCUA_ERROR_INVALIDCAST);
		
		bool isCacheCall = (pNameBuffer == nullptr);
		if (isCacheCall) {
			sName = pIDriver->GetName();

			pIDriver->_setCache (new ParameterCache_1<std::string> (sName));
		}
		else {
			auto cache = dynamic_cast<ParameterCache_1<std::string>*> (pIDriver->_getCache ());
			if (cache == nullptr)
				throw ELibMCDriver_OPCUAInterfaceException(LIBMCDRIVER_OPCUA_ERROR_INVALIDCAST);
			cache->retrieveData (sName);
			pIDriver->_setCache (nullptr);
		}
		
		if (pNameNeededChars)
			*pNameNeededChars = (LibMCDriver_OPCUA_uint32) (sName.size()+1);
		if (pNameBuffer) {
			if (sName.size() >= nNameBufferSize)
				throw ELibMCDriver_OPCUAInterfaceException (LIBMCDRIVER_OPCUA_ERROR_BUFFERTOOSMALL);
			for (size_t iName = 0; iName < sName.size(); iName++)
				pNameBuffer[iName] = sName[iName];
			pNameBuffer[sName.size()] = 0;
		}
		return LIBMCDRIVER_OPCUA_SUCCESS;
	}
	catch (ELibMCDriver_OPCUAInterfaceException & Exception) {
		return handleLibMCDriver_OPCUAException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_OPCUAResult libmcdriver_opcua_driver_gettype(LibMCDriver_OPCUA_Driver pDriver, const LibMCDriver_OPCUA_uint32 nTypeBufferSize, LibMCDriver_OPCUA_uint32* pTypeNeededChars, char * pTypeBuffer)
{
	IBase* pIBaseClass = (IBase *)pDriver;

	try {
		if ( (!pTypeBuffer) && !(pTypeNeededChars) )
			throw ELibMCDriver_OPCUAInterfaceException (LIBMCDRIVER_OPCUA_ERROR_INVALIDPARAM);
		std::string sType("");
		IDriver* pIDriver = dynamic_cast<IDriver*>(pIBaseClass);
		if (!pIDriver)
			throw ELibMCDriver_OPCUAInterfaceException(LIBMCDRIVER_OPCUA_ERROR_INVALIDCAST);
		
		bool isCacheCall = (pTypeBuffer == nullptr);
		if (isCacheCall) {
			sType = pIDriver->GetType();

			pIDriver->_setCache (new ParameterCache_1<std::string> (sType));
		}
		else {
			auto cache = dynamic_cast<ParameterCache_1<std::string>*> (pIDriver->_getCache ());
			if (cache == nullptr)
				throw ELibMCDriver_OPCUAInterfaceException(LIBMCDRIVER_OPCUA_ERROR_INVALIDCAST);
			cache->retrieveData (sType);
			pIDriver->_setCache (nullptr);
		}
		
		if (pTypeNeededChars)
			*pTypeNeededChars = (LibMCDriver_OPCUA_uint32) (sType.size()+1);
		if (pTypeBuffer) {
			if (sType.size() >= nTypeBufferSize)
				throw ELibMCDriver_OPCUAInterfaceException (LIBMCDRIVER_OPCUA_ERROR_BUFFERTOOSMALL);
			for (size_t iType = 0; iType < sType.size(); iType++)
				pTypeBuffer[iType] = sType[iType];
			pTypeBuffer[sType.size()] = 0;
		}
		return LIBMCDRIVER_OPCUA_SUCCESS;
	}
	catch (ELibMCDriver_OPCUAInterfaceException & Exception) {
		return handleLibMCDriver_OPCUAException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_OPCUAResult libmcdriver_opcua_driver_getversion(LibMCDriver_OPCUA_Driver pDriver, LibMCDriver_OPCUA_uint32 * pMajor, LibMCDriver_OPCUA_uint32 * pMinor, LibMCDriver_OPCUA_uint32 * pMicro, const LibMCDriver_OPCUA_uint32 nBuildBufferSize, LibMCDriver_OPCUA_uint32* pBuildNeededChars, char * pBuildBuffer)
{
	IBase* pIBaseClass = (IBase *)pDriver;

	try {
		if (!pMajor)
			throw ELibMCDriver_OPCUAInterfaceException (LIBMCDRIVER_OPCUA_ERROR_INVALIDPARAM);
		if (!pMinor)
			throw ELibMCDriver_OPCUAInterfaceException (LIBMCDRIVER_OPCUA_ERROR_INVALIDPARAM);
		if (!pMicro)
			throw ELibMCDriver_OPCUAInterfaceException (LIBMCDRIVER_OPCUA_ERROR_INVALIDPARAM);
		if ( (!pBuildBuffer) && !(pBuildNeededChars) )
			throw ELibMCDriver_OPCUAInterfaceException (LIBMCDRIVER_OPCUA_ERROR_INVALIDPARAM);
		std::string sBuild("");
		IDriver* pIDriver = dynamic_cast<IDriver*>(pIBaseClass);
		if (!pIDriver)
			throw ELibMCDriver_OPCUAInterfaceException(LIBMCDRIVER_OPCUA_ERROR_INVALIDCAST);
		
		bool isCacheCall = (pBuildBuffer == nullptr);
		if (isCacheCall) {
			pIDriver->GetVersion(*pMajor, *pMinor, *pMicro, sBuild);

			pIDriver->_setCache (new ParameterCache_4<LibMCDriver_OPCUA_uint32, LibMCDriver_OPCUA_uint32, LibMCDriver_OPCUA_uint32, std::string> (*pMajor, *pMinor, *pMicro, sBuild));
		}
		else {
			auto cache = dynamic_cast<ParameterCache_4<LibMCDriver_OPCUA_uint32, LibMCDriver_OPCUA_uint32, LibMCDriver_OPCUA_uint32, std::string>*> (pIDriver->_getCache ());
			if (cache == nullptr)
				throw ELibMCDriver_OPCUAInterfaceException(LIBMCDRIVER_OPCUA_ERROR_INVALIDCAST);
			cache->retrieveData (*pMajor, *pMinor, *pMicro, sBuild);
			pIDriver->_setCache (nullptr);
		}
		
		if (pBuildNeededChars)
			*pBuildNeededChars = (LibMCDriver_OPCUA_uint32) (sBuild.size()+1);
		if (pBuildBuffer) {
			if (sBuild.size() >= nBuildBufferSize)
				throw ELibMCDriver_OPCUAInterfaceException (LIBMCDRIVER_OPCUA_ERROR_BUFFERTOOSMALL);
			for (size_t iBuild = 0; iBuild < sBuild.size(); iBuild++)
				pBuildBuffer[iBuild] = sBuild[iBuild];
			pBuildBuffer[sBuild.size()] = 0;
		}
		return LIBMCDRIVER_OPCUA_SUCCESS;
	}
	catch (ELibMCDriver_OPCUAInterfaceException & Exception) {
		return handleLibMCDriver_OPCUAException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_OPCUAResult libmcdriver_opcua_driver_queryparameters(LibMCDriver_OPCUA_Driver pDriver)
{
	IBase* pIBaseClass = (IBase *)pDriver;

	try {
		IDriver* pIDriver = dynamic_cast<IDriver*>(pIBaseClass);
		if (!pIDriver)
			throw ELibMCDriver_OPCUAInterfaceException(LIBMCDRIVER_OPCUA_ERROR_INVALIDCAST);
		
		pIDriver->QueryParameters();

		return LIBMCDRIVER_OPCUA_SUCCESS;
	}
	catch (ELibMCDriver_OPCUAInterfaceException & Exception) {
		return handleLibMCDriver_OPCUAException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_OPCUAResult libmcdriver_opcua_driver_queryparametersex(LibMCDriver_OPCUA_Driver pDriver, LibMCEnv_DriverStatusUpdateSession pDriverUpdateInstance)
{
	IBase* pIBaseClass = (IBase *)pDriver;

	try {
		LibMCEnv::PDriverStatusUpdateSession pIDriverUpdateInstance = std::make_shared<LibMCEnv::CDriverStatusUpdateSession>(CWrapper::sPLibMCEnvWrapper.get(), pDriverUpdateInstance);
		CWrapper::sPLibMCEnvWrapper->AcquireInstance(pIDriverUpdateInstance.get());
		if (!pIDriverUpdateInstance)
			throw ELibMCDriver_OPCUAInterfaceException (LIBMCDRIVER_OPCUA_ERROR_INVALIDCAST);
		
		IDriver* pIDriver = dynamic_cast<IDriver*>(pIBaseClass);
		if (!pIDriver)
			throw ELibMCDriver_OPCUAInterfaceException(LIBMCDRIVER_OPCUA_ERROR_INVALIDCAST);
		
		pIDriver->QueryParametersEx(pIDriverUpdateInstance);

		return LIBMCDRIVER_OPCUA_SUCCESS;
	}
	catch (ELibMCDriver_OPCUAInterfaceException & Exception) {
		return handleLibMCDriver_OPCUAException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}


/*************************************************************************************************************************
 Class implementation for Driver_OPCUA
**************************************************************************************************************************/
LibMCDriver_OPCUAResult libmcdriver_opcua_driver_opcua_settosimulationmode(LibMCDriver_OPCUA_Driver_OPCUA pDriver_OPCUA)
{
	IBase* pIBaseClass = (IBase *)pDriver_OPCUA;

	try {
		IDriver_OPCUA* pIDriver_OPCUA = dynamic_cast<IDriver_OPCUA*>(pIBaseClass);
		if (!pIDriver_OPCUA)
			throw ELibMCDriver_OPCUAInterfaceException(LIBMCDRIVER_OPCUA_ERROR_INVALIDCAST);
		
		pIDriver_OPCUA->SetToSimulationMode();

		return LIBMCDRIVER_OPCUA_SUCCESS;
	}
	catch (ELibMCDriver_OPCUAInterfaceException & Exception) {
		return handleLibMCDriver_OPCUAException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_OPCUAResult libmcdriver_opcua_driver_opcua_issimulationmode(LibMCDriver_OPCUA_Driver_OPCUA pDriver_OPCUA, bool * pSimulationModeEnabled)
{
	IBase* pIBaseClass = (IBase *)pDriver_OPCUA;

	try {
		if (pSimulationModeEnabled == nullptr)
			throw ELibMCDriver_OPCUAInterfaceException (LIBMCDRIVER_OPCUA_ERROR_INVALIDPARAM);
		IDriver_OPCUA* pIDriver_OPCUA = dynamic_cast<IDriver_OPCUA*>(pIBaseClass);
		if (!pIDriver_OPCUA)
			throw ELibMCDriver_OPCUAInterfaceException(LIBMCDRIVER_OPCUA_ERROR_INVALIDCAST);
		
		*pSimulationModeEnabled = pIDriver_OPCUA->IsSimulationMode();

		return LIBMCDRIVER_OPCUA_SUCCESS;
	}
	catch (ELibMCDriver_OPCUAInterfaceException & Exception) {
		return handleLibMCDriver_OPCUAException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_OPCUAResult libmcdriver_opcua_driver_opcua_enableencryption(LibMCDriver_OPCUA_Driver_OPCUA pDriver_OPCUA, const char * pLocalCertificate, const char * pPrivateKey, eLibMCDriver_OPCUAUASecurityMode eSecurityMode)
{
	IBase* pIBaseClass = (IBase *)pDriver_OPCUA;

	try {
		if (pLocalCertificate == nullptr)
			throw ELibMCDriver_OPCUAInterfaceException (LIBMCDRIVER_OPCUA_ERROR_INVALIDPARAM);
		if (pPrivateKey == nullptr)
			throw ELibMCDriver_OPCUAInterfaceException (LIBMCDRIVER_OPCUA_ERROR_INVALIDPARAM);
		std::string sLocalCertificate(pLocalCertificate);
		std::string sPrivateKey(pPrivateKey);
		IDriver_OPCUA* pIDriver_OPCUA = dynamic_cast<IDriver_OPCUA*>(pIBaseClass);
		if (!pIDriver_OPCUA)
			throw ELibMCDriver_OPCUAInterfaceException(LIBMCDRIVER_OPCUA_ERROR_INVALIDCAST);
		
		pIDriver_OPCUA->EnableEncryption(sLocalCertificate, sPrivateKey, eSecurityMode);

		return LIBMCDRIVER_OPCUA_SUCCESS;
	}
	catch (ELibMCDriver_OPCUAInterfaceException & Exception) {
		return handleLibMCDriver_OPCUAException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_OPCUAResult libmcdriver_opcua_driver_opcua_disableencryption(LibMCDriver_OPCUA_Driver_OPCUA pDriver_OPCUA)
{
	IBase* pIBaseClass = (IBase *)pDriver_OPCUA;

	try {
		IDriver_OPCUA* pIDriver_OPCUA = dynamic_cast<IDriver_OPCUA*>(pIBaseClass);
		if (!pIDriver_OPCUA)
			throw ELibMCDriver_OPCUAInterfaceException(LIBMCDRIVER_OPCUA_ERROR_INVALIDCAST);
		
		pIDriver_OPCUA->DisableEncryption();

		return LIBMCDRIVER_OPCUA_SUCCESS;
	}
	catch (ELibMCDriver_OPCUAInterfaceException & Exception) {
		return handleLibMCDriver_OPCUAException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_OPCUAResult libmcdriver_opcua_driver_opcua_connectwithusername(LibMCDriver_OPCUA_Driver_OPCUA pDriver_OPCUA, const char * pEndPointURL, const char * pUsername, const char * pPassword, const char * pApplicationURL)
{
	IBase* pIBaseClass = (IBase *)pDriver_OPCUA;

	try {
		if (pEndPointURL == nullptr)
			throw ELibMCDriver_OPCUAInterfaceException (LIBMCDRIVER_OPCUA_ERROR_INVALIDPARAM);
		if (pUsername == nullptr)
			throw ELibMCDriver_OPCUAInterfaceException (LIBMCDRIVER_OPCUA_ERROR_INVALIDPARAM);
		if (pPassword == nullptr)
			throw ELibMCDriver_OPCUAInterfaceException (LIBMCDRIVER_OPCUA_ERROR_INVALIDPARAM);
		if (pApplicationURL == nullptr)
			throw ELibMCDriver_OPCUAInterfaceException (LIBMCDRIVER_OPCUA_ERROR_INVALIDPARAM);
		std::string sEndPointURL(pEndPointURL);
		std::string sUsername(pUsername);
		std::string sPassword(pPassword);
		std::string sApplicationURL(pApplicationURL);
		IDriver_OPCUA* pIDriver_OPCUA = dynamic_cast<IDriver_OPCUA*>(pIBaseClass);
		if (!pIDriver_OPCUA)
			throw ELibMCDriver_OPCUAInterfaceException(LIBMCDRIVER_OPCUA_ERROR_INVALIDCAST);
		
		pIDriver_OPCUA->ConnectWithUserName(sEndPointURL, sUsername, sPassword, sApplicationURL);

		return LIBMCDRIVER_OPCUA_SUCCESS;
	}
	catch (ELibMCDriver_OPCUAInterfaceException & Exception) {
		return handleLibMCDriver_OPCUAException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_OPCUAResult libmcdriver_opcua_driver_opcua_disconnect(LibMCDriver_OPCUA_Driver_OPCUA pDriver_OPCUA)
{
	IBase* pIBaseClass = (IBase *)pDriver_OPCUA;

	try {
		IDriver_OPCUA* pIDriver_OPCUA = dynamic_cast<IDriver_OPCUA*>(pIBaseClass);
		if (!pIDriver_OPCUA)
			throw ELibMCDriver_OPCUAInterfaceException(LIBMCDRIVER_OPCUA_ERROR_INVALIDCAST);
		
		pIDriver_OPCUA->Disconnect();

		return LIBMCDRIVER_OPCUA_SUCCESS;
	}
	catch (ELibMCDriver_OPCUAInterfaceException & Exception) {
		return handleLibMCDriver_OPCUAException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_OPCUAResult libmcdriver_opcua_driver_opcua_isconnected(LibMCDriver_OPCUA_Driver_OPCUA pDriver_OPCUA, bool * pValue)
{
	IBase* pIBaseClass = (IBase *)pDriver_OPCUA;

	try {
		if (pValue == nullptr)
			throw ELibMCDriver_OPCUAInterfaceException (LIBMCDRIVER_OPCUA_ERROR_INVALIDPARAM);
		IDriver_OPCUA* pIDriver_OPCUA = dynamic_cast<IDriver_OPCUA*>(pIBaseClass);
		if (!pIDriver_OPCUA)
			throw ELibMCDriver_OPCUAInterfaceException(LIBMCDRIVER_OPCUA_ERROR_INVALIDCAST);
		
		*pValue = pIDriver_OPCUA->IsConnected();

		return LIBMCDRIVER_OPCUA_SUCCESS;
	}
	catch (ELibMCDriver_OPCUAInterfaceException & Exception) {
		return handleLibMCDriver_OPCUAException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_OPCUAResult libmcdriver_opcua_driver_opcua_readinteger(LibMCDriver_OPCUA_Driver_OPCUA pDriver_OPCUA, LibMCDriver_OPCUA_uint32 nNameSpace, const char * pNodeName, eLibMCDriver_OPCUAUAIntegerType eNodeType, LibMCDriver_OPCUA_int64 * pValue)
{
	IBase* pIBaseClass = (IBase *)pDriver_OPCUA;

	try {
		if (pNodeName == nullptr)
			throw ELibMCDriver_OPCUAInterfaceException (LIBMCDRIVER_OPCUA_ERROR_INVALIDPARAM);
		if (pValue == nullptr)
			throw ELibMCDriver_OPCUAInterfaceException (LIBMCDRIVER_OPCUA_ERROR_INVALIDPARAM);
		std::string sNodeName(pNodeName);
		IDriver_OPCUA* pIDriver_OPCUA = dynamic_cast<IDriver_OPCUA*>(pIBaseClass);
		if (!pIDriver_OPCUA)
			throw ELibMCDriver_OPCUAInterfaceException(LIBMCDRIVER_OPCUA_ERROR_INVALIDCAST);
		
		*pValue = pIDriver_OPCUA->ReadInteger(nNameSpace, sNodeName, eNodeType);

		return LIBMCDRIVER_OPCUA_SUCCESS;
	}
	catch (ELibMCDriver_OPCUAInterfaceException & Exception) {
		return handleLibMCDriver_OPCUAException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_OPCUAResult libmcdriver_opcua_driver_opcua_readdouble(LibMCDriver_OPCUA_Driver_OPCUA pDriver_OPCUA, LibMCDriver_OPCUA_uint32 nNameSpace, const char * pNodeName, eLibMCDriver_OPCUAUADoubleType eNodeType, LibMCDriver_OPCUA_double * pValue)
{
	IBase* pIBaseClass = (IBase *)pDriver_OPCUA;

	try {
		if (pNodeName == nullptr)
			throw ELibMCDriver_OPCUAInterfaceException (LIBMCDRIVER_OPCUA_ERROR_INVALIDPARAM);
		if (pValue == nullptr)
			throw ELibMCDriver_OPCUAInterfaceException (LIBMCDRIVER_OPCUA_ERROR_INVALIDPARAM);
		std::string sNodeName(pNodeName);
		IDriver_OPCUA* pIDriver_OPCUA = dynamic_cast<IDriver_OPCUA*>(pIBaseClass);
		if (!pIDriver_OPCUA)
			throw ELibMCDriver_OPCUAInterfaceException(LIBMCDRIVER_OPCUA_ERROR_INVALIDCAST);
		
		*pValue = pIDriver_OPCUA->ReadDouble(nNameSpace, sNodeName, eNodeType);

		return LIBMCDRIVER_OPCUA_SUCCESS;
	}
	catch (ELibMCDriver_OPCUAInterfaceException & Exception) {
		return handleLibMCDriver_OPCUAException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_OPCUAResult libmcdriver_opcua_driver_opcua_readstring(LibMCDriver_OPCUA_Driver_OPCUA pDriver_OPCUA, LibMCDriver_OPCUA_uint32 nNameSpace, const char * pNodeName, const LibMCDriver_OPCUA_uint32 nValueBufferSize, LibMCDriver_OPCUA_uint32* pValueNeededChars, char * pValueBuffer)
{
	IBase* pIBaseClass = (IBase *)pDriver_OPCUA;

	try {
		if (pNodeName == nullptr)
			throw ELibMCDriver_OPCUAInterfaceException (LIBMCDRIVER_OPCUA_ERROR_INVALIDPARAM);
		if ( (!pValueBuffer) && !(pValueNeededChars) )
			throw ELibMCDriver_OPCUAInterfaceException (LIBMCDRIVER_OPCUA_ERROR_INVALIDPARAM);
		std::string sNodeName(pNodeName);
		std::string sValue("");
		IDriver_OPCUA* pIDriver_OPCUA = dynamic_cast<IDriver_OPCUA*>(pIBaseClass);
		if (!pIDriver_OPCUA)
			throw ELibMCDriver_OPCUAInterfaceException(LIBMCDRIVER_OPCUA_ERROR_INVALIDCAST);
		
		bool isCacheCall = (pValueBuffer == nullptr);
		if (isCacheCall) {
			sValue = pIDriver_OPCUA->ReadString(nNameSpace, sNodeName);

			pIDriver_OPCUA->_setCache (new ParameterCache_1<std::string> (sValue));
		}
		else {
			auto cache = dynamic_cast<ParameterCache_1<std::string>*> (pIDriver_OPCUA->_getCache ());
			if (cache == nullptr)
				throw ELibMCDriver_OPCUAInterfaceException(LIBMCDRIVER_OPCUA_ERROR_INVALIDCAST);
			cache->retrieveData (sValue);
			pIDriver_OPCUA->_setCache (nullptr);
		}
		
		if (pValueNeededChars)
			*pValueNeededChars = (LibMCDriver_OPCUA_uint32) (sValue.size()+1);
		if (pValueBuffer) {
			if (sValue.size() >= nValueBufferSize)
				throw ELibMCDriver_OPCUAInterfaceException (LIBMCDRIVER_OPCUA_ERROR_BUFFERTOOSMALL);
			for (size_t iValue = 0; iValue < sValue.size(); iValue++)
				pValueBuffer[iValue] = sValue[iValue];
			pValueBuffer[sValue.size()] = 0;
		}
		return LIBMCDRIVER_OPCUA_SUCCESS;
	}
	catch (ELibMCDriver_OPCUAInterfaceException & Exception) {
		return handleLibMCDriver_OPCUAException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_OPCUAResult libmcdriver_opcua_driver_opcua_writeinteger(LibMCDriver_OPCUA_Driver_OPCUA pDriver_OPCUA, LibMCDriver_OPCUA_uint32 nNameSpace, const char * pNodeName, eLibMCDriver_OPCUAUAIntegerType eNodeType, LibMCDriver_OPCUA_int64 nValue)
{
	IBase* pIBaseClass = (IBase *)pDriver_OPCUA;

	try {
		if (pNodeName == nullptr)
			throw ELibMCDriver_OPCUAInterfaceException (LIBMCDRIVER_OPCUA_ERROR_INVALIDPARAM);
		std::string sNodeName(pNodeName);
		IDriver_OPCUA* pIDriver_OPCUA = dynamic_cast<IDriver_OPCUA*>(pIBaseClass);
		if (!pIDriver_OPCUA)
			throw ELibMCDriver_OPCUAInterfaceException(LIBMCDRIVER_OPCUA_ERROR_INVALIDCAST);
		
		pIDriver_OPCUA->WriteInteger(nNameSpace, sNodeName, eNodeType, nValue);

		return LIBMCDRIVER_OPCUA_SUCCESS;
	}
	catch (ELibMCDriver_OPCUAInterfaceException & Exception) {
		return handleLibMCDriver_OPCUAException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_OPCUAResult libmcdriver_opcua_driver_opcua_writedouble(LibMCDriver_OPCUA_Driver_OPCUA pDriver_OPCUA, LibMCDriver_OPCUA_uint32 nNameSpace, const char * pNodeName, eLibMCDriver_OPCUAUADoubleType eNodeType, LibMCDriver_OPCUA_double dValue)
{
	IBase* pIBaseClass = (IBase *)pDriver_OPCUA;

	try {
		if (pNodeName == nullptr)
			throw ELibMCDriver_OPCUAInterfaceException (LIBMCDRIVER_OPCUA_ERROR_INVALIDPARAM);
		std::string sNodeName(pNodeName);
		IDriver_OPCUA* pIDriver_OPCUA = dynamic_cast<IDriver_OPCUA*>(pIBaseClass);
		if (!pIDriver_OPCUA)
			throw ELibMCDriver_OPCUAInterfaceException(LIBMCDRIVER_OPCUA_ERROR_INVALIDCAST);
		
		pIDriver_OPCUA->WriteDouble(nNameSpace, sNodeName, eNodeType, dValue);

		return LIBMCDRIVER_OPCUA_SUCCESS;
	}
	catch (ELibMCDriver_OPCUAInterfaceException & Exception) {
		return handleLibMCDriver_OPCUAException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_OPCUAResult libmcdriver_opcua_driver_opcua_writestring(LibMCDriver_OPCUA_Driver_OPCUA pDriver_OPCUA, LibMCDriver_OPCUA_uint32 nNameSpace, const char * pNodeName, const char * pValue)
{
	IBase* pIBaseClass = (IBase *)pDriver_OPCUA;

	try {
		if (pNodeName == nullptr)
			throw ELibMCDriver_OPCUAInterfaceException (LIBMCDRIVER_OPCUA_ERROR_INVALIDPARAM);
		if (pValue == nullptr)
			throw ELibMCDriver_OPCUAInterfaceException (LIBMCDRIVER_OPCUA_ERROR_INVALIDPARAM);
		std::string sNodeName(pNodeName);
		std::string sValue(pValue);
		IDriver_OPCUA* pIDriver_OPCUA = dynamic_cast<IDriver_OPCUA*>(pIBaseClass);
		if (!pIDriver_OPCUA)
			throw ELibMCDriver_OPCUAInterfaceException(LIBMCDRIVER_OPCUA_ERROR_INVALIDCAST);
		
		pIDriver_OPCUA->WriteString(nNameSpace, sNodeName, sValue);

		return LIBMCDRIVER_OPCUA_SUCCESS;
	}
	catch (ELibMCDriver_OPCUAInterfaceException & Exception) {
		return handleLibMCDriver_OPCUAException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}



/*************************************************************************************************************************
 Function table lookup implementation
**************************************************************************************************************************/

LibMCDriver_OPCUAResult LibMCDriver_OPCUA::Impl::LibMCDriver_OPCUA_GetProcAddress (const char * pProcName, void ** ppProcAddress)
{
	if (pProcName == nullptr)
		return LIBMCDRIVER_OPCUA_ERROR_INVALIDPARAM;
	if (ppProcAddress == nullptr)
		return LIBMCDRIVER_OPCUA_ERROR_INVALIDPARAM;
	*ppProcAddress = nullptr;
	std::string sProcName (pProcName);
	
	if (sProcName == "libmcdriver_opcua_driver_configure") 
		*ppProcAddress = (void*) &libmcdriver_opcua_driver_configure;
	if (sProcName == "libmcdriver_opcua_driver_getname") 
		*ppProcAddress = (void*) &libmcdriver_opcua_driver_getname;
	if (sProcName == "libmcdriver_opcua_driver_gettype") 
		*ppProcAddress = (void*) &libmcdriver_opcua_driver_gettype;
	if (sProcName == "libmcdriver_opcua_driver_getversion") 
		*ppProcAddress = (void*) &libmcdriver_opcua_driver_getversion;
	if (sProcName == "libmcdriver_opcua_driver_queryparameters") 
		*ppProcAddress = (void*) &libmcdriver_opcua_driver_queryparameters;
	if (sProcName == "libmcdriver_opcua_driver_queryparametersex") 
		*ppProcAddress = (void*) &libmcdriver_opcua_driver_queryparametersex;
	if (sProcName == "libmcdriver_opcua_driver_opcua_settosimulationmode") 
		*ppProcAddress = (void*) &libmcdriver_opcua_driver_opcua_settosimulationmode;
	if (sProcName == "libmcdriver_opcua_driver_opcua_issimulationmode") 
		*ppProcAddress = (void*) &libmcdriver_opcua_driver_opcua_issimulationmode;
	if (sProcName == "libmcdriver_opcua_driver_opcua_enableencryption") 
		*ppProcAddress = (void*) &libmcdriver_opcua_driver_opcua_enableencryption;
	if (sProcName == "libmcdriver_opcua_driver_opcua_disableencryption") 
		*ppProcAddress = (void*) &libmcdriver_opcua_driver_opcua_disableencryption;
	if (sProcName == "libmcdriver_opcua_driver_opcua_connectwithusername") 
		*ppProcAddress = (void*) &libmcdriver_opcua_driver_opcua_connectwithusername;
	if (sProcName == "libmcdriver_opcua_driver_opcua_disconnect") 
		*ppProcAddress = (void*) &libmcdriver_opcua_driver_opcua_disconnect;
	if (sProcName == "libmcdriver_opcua_driver_opcua_isconnected") 
		*ppProcAddress = (void*) &libmcdriver_opcua_driver_opcua_isconnected;
	if (sProcName == "libmcdriver_opcua_driver_opcua_readinteger") 
		*ppProcAddress = (void*) &libmcdriver_opcua_driver_opcua_readinteger;
	if (sProcName == "libmcdriver_opcua_driver_opcua_readdouble") 
		*ppProcAddress = (void*) &libmcdriver_opcua_driver_opcua_readdouble;
	if (sProcName == "libmcdriver_opcua_driver_opcua_readstring") 
		*ppProcAddress = (void*) &libmcdriver_opcua_driver_opcua_readstring;
	if (sProcName == "libmcdriver_opcua_driver_opcua_writeinteger") 
		*ppProcAddress = (void*) &libmcdriver_opcua_driver_opcua_writeinteger;
	if (sProcName == "libmcdriver_opcua_driver_opcua_writedouble") 
		*ppProcAddress = (void*) &libmcdriver_opcua_driver_opcua_writedouble;
	if (sProcName == "libmcdriver_opcua_driver_opcua_writestring") 
		*ppProcAddress = (void*) &libmcdriver_opcua_driver_opcua_writestring;
	if (sProcName == "libmcdriver_opcua_getversion") 
		*ppProcAddress = (void*) &libmcdriver_opcua_getversion;
	if (sProcName == "libmcdriver_opcua_getlasterror") 
		*ppProcAddress = (void*) &libmcdriver_opcua_getlasterror;
	if (sProcName == "libmcdriver_opcua_releaseinstance") 
		*ppProcAddress = (void*) &libmcdriver_opcua_releaseinstance;
	if (sProcName == "libmcdriver_opcua_acquireinstance") 
		*ppProcAddress = (void*) &libmcdriver_opcua_acquireinstance;
	if (sProcName == "libmcdriver_opcua_injectcomponent") 
		*ppProcAddress = (void*) &libmcdriver_opcua_injectcomponent;
	if (sProcName == "libmcdriver_opcua_getsymbollookupmethod") 
		*ppProcAddress = (void*) &libmcdriver_opcua_getsymbollookupmethod;
	if (sProcName == "libmcdriver_opcua_createdriver") 
		*ppProcAddress = (void*) &libmcdriver_opcua_createdriver;
	
	if (*ppProcAddress == nullptr) 
		return LIBMCDRIVER_OPCUA_ERROR_COULDNOTFINDLIBRARYEXPORT;
	return LIBMCDRIVER_OPCUA_SUCCESS;
}

/*************************************************************************************************************************
 Global functions implementation
**************************************************************************************************************************/
LibMCDriver_OPCUAResult libmcdriver_opcua_getversion(LibMCDriver_OPCUA_uint32 * pMajor, LibMCDriver_OPCUA_uint32 * pMinor, LibMCDriver_OPCUA_uint32 * pMicro)
{
	IBase* pIBaseClass = nullptr;

	try {
		if (!pMajor)
			throw ELibMCDriver_OPCUAInterfaceException (LIBMCDRIVER_OPCUA_ERROR_INVALIDPARAM);
		if (!pMinor)
			throw ELibMCDriver_OPCUAInterfaceException (LIBMCDRIVER_OPCUA_ERROR_INVALIDPARAM);
		if (!pMicro)
			throw ELibMCDriver_OPCUAInterfaceException (LIBMCDRIVER_OPCUA_ERROR_INVALIDPARAM);
		CWrapper::GetVersion(*pMajor, *pMinor, *pMicro);

		return LIBMCDRIVER_OPCUA_SUCCESS;
	}
	catch (ELibMCDriver_OPCUAInterfaceException & Exception) {
		return handleLibMCDriver_OPCUAException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_OPCUAResult libmcdriver_opcua_getlasterror(LibMCDriver_OPCUA_Base pInstance, const LibMCDriver_OPCUA_uint32 nErrorMessageBufferSize, LibMCDriver_OPCUA_uint32* pErrorMessageNeededChars, char * pErrorMessageBuffer, bool * pHasError)
{
	IBase* pIBaseClass = nullptr;

	try {
		if ( (!pErrorMessageBuffer) && !(pErrorMessageNeededChars) )
			throw ELibMCDriver_OPCUAInterfaceException (LIBMCDRIVER_OPCUA_ERROR_INVALIDPARAM);
		if (pHasError == nullptr)
			throw ELibMCDriver_OPCUAInterfaceException (LIBMCDRIVER_OPCUA_ERROR_INVALIDPARAM);
		IBase* pIBaseClassInstance = (IBase *)pInstance;
		IBase* pIInstance = dynamic_cast<IBase*>(pIBaseClassInstance);
		if (!pIInstance)
			throw ELibMCDriver_OPCUAInterfaceException (LIBMCDRIVER_OPCUA_ERROR_INVALIDCAST);
		
		std::string sErrorMessage("");
		*pHasError = CWrapper::GetLastError(pIInstance, sErrorMessage);

		if (pErrorMessageNeededChars)
			*pErrorMessageNeededChars = (LibMCDriver_OPCUA_uint32) (sErrorMessage.size()+1);
		if (pErrorMessageBuffer) {
			if (sErrorMessage.size() >= nErrorMessageBufferSize)
				throw ELibMCDriver_OPCUAInterfaceException (LIBMCDRIVER_OPCUA_ERROR_BUFFERTOOSMALL);
			for (size_t iErrorMessage = 0; iErrorMessage < sErrorMessage.size(); iErrorMessage++)
				pErrorMessageBuffer[iErrorMessage] = sErrorMessage[iErrorMessage];
			pErrorMessageBuffer[sErrorMessage.size()] = 0;
		}
		return LIBMCDRIVER_OPCUA_SUCCESS;
	}
	catch (ELibMCDriver_OPCUAInterfaceException & Exception) {
		return handleLibMCDriver_OPCUAException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_OPCUAResult libmcdriver_opcua_releaseinstance(LibMCDriver_OPCUA_Base pInstance)
{
	IBase* pIBaseClass = nullptr;

	try {
		IBase* pIBaseClassInstance = (IBase *)pInstance;
		IBase* pIInstance = dynamic_cast<IBase*>(pIBaseClassInstance);
		if (!pIInstance)
			throw ELibMCDriver_OPCUAInterfaceException (LIBMCDRIVER_OPCUA_ERROR_INVALIDCAST);
		
		CWrapper::ReleaseInstance(pIInstance);

		return LIBMCDRIVER_OPCUA_SUCCESS;
	}
	catch (ELibMCDriver_OPCUAInterfaceException & Exception) {
		return handleLibMCDriver_OPCUAException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_OPCUAResult libmcdriver_opcua_acquireinstance(LibMCDriver_OPCUA_Base pInstance)
{
	IBase* pIBaseClass = nullptr;

	try {
		IBase* pIBaseClassInstance = (IBase *)pInstance;
		IBase* pIInstance = dynamic_cast<IBase*>(pIBaseClassInstance);
		if (!pIInstance)
			throw ELibMCDriver_OPCUAInterfaceException (LIBMCDRIVER_OPCUA_ERROR_INVALIDCAST);
		
		CWrapper::AcquireInstance(pIInstance);

		return LIBMCDRIVER_OPCUA_SUCCESS;
	}
	catch (ELibMCDriver_OPCUAInterfaceException & Exception) {
		return handleLibMCDriver_OPCUAException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_OPCUAResult libmcdriver_opcua_injectcomponent(const char * pNameSpace, LibMCDriver_OPCUA_pvoid pSymbolAddressMethod)
{
	IBase* pIBaseClass = nullptr;

	try {
		if (pNameSpace == nullptr)
			throw ELibMCDriver_OPCUAInterfaceException (LIBMCDRIVER_OPCUA_ERROR_INVALIDPARAM);
		std::string sNameSpace(pNameSpace);
		
		bool bNameSpaceFound = false;
		
		if (sNameSpace == "LibMCEnv") {
			if (CWrapper::sPLibMCEnvWrapper.get() != nullptr) {
				throw ELibMCDriver_OPCUAInterfaceException(LIBMCDRIVER_OPCUA_ERROR_COULDNOTLOADLIBRARY);
			}
			CWrapper::sPLibMCEnvWrapper = LibMCEnv::CWrapper::loadLibraryFromSymbolLookupMethod(pSymbolAddressMethod);
			bNameSpaceFound = true;
		}
		
		if (!bNameSpaceFound)
			throw ELibMCDriver_OPCUAInterfaceException(LIBMCDRIVER_OPCUA_ERROR_COULDNOTLOADLIBRARY);
		
		return LIBMCDRIVER_OPCUA_SUCCESS;
	}
	catch (ELibMCDriver_OPCUAInterfaceException & Exception) {
		return handleLibMCDriver_OPCUAException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_OPCUAResult libmcdriver_opcua_getsymbollookupmethod(LibMCDriver_OPCUA_pvoid * pSymbolLookupMethod)
{
	IBase* pIBaseClass = nullptr;

	try {
		if (pSymbolLookupMethod == nullptr)
			throw ELibMCDriver_OPCUAInterfaceException (LIBMCDRIVER_OPCUA_ERROR_INVALIDPARAM);
		*pSymbolLookupMethod = (void*)&LibMCDriver_OPCUA::Impl::LibMCDriver_OPCUA_GetProcAddress;
		return LIBMCDRIVER_OPCUA_SUCCESS;
	}
	catch (ELibMCDriver_OPCUAInterfaceException & Exception) {
		return handleLibMCDriver_OPCUAException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_OPCUAResult libmcdriver_opcua_createdriver(const char * pName, const char * pType, LibMCEnv_DriverEnvironment pDriverEnvironment, LibMCDriver_OPCUA_Driver * pInstance)
{
	IBase* pIBaseClass = nullptr;

	try {
		if (pName == nullptr)
			throw ELibMCDriver_OPCUAInterfaceException (LIBMCDRIVER_OPCUA_ERROR_INVALIDPARAM);
		if (pType == nullptr)
			throw ELibMCDriver_OPCUAInterfaceException (LIBMCDRIVER_OPCUA_ERROR_INVALIDPARAM);
		if (pInstance == nullptr)
			throw ELibMCDriver_OPCUAInterfaceException (LIBMCDRIVER_OPCUA_ERROR_INVALIDPARAM);
		std::string sName(pName);
		std::string sType(pType);
		LibMCEnv::PDriverEnvironment pIDriverEnvironment = std::make_shared<LibMCEnv::CDriverEnvironment>(CWrapper::sPLibMCEnvWrapper.get(), pDriverEnvironment);
		CWrapper::sPLibMCEnvWrapper->AcquireInstance(pIDriverEnvironment.get());
		if (!pIDriverEnvironment)
			throw ELibMCDriver_OPCUAInterfaceException (LIBMCDRIVER_OPCUA_ERROR_INVALIDCAST);
		
		IBase* pBaseInstance(nullptr);
		pBaseInstance = CWrapper::CreateDriver(sName, sType, pIDriverEnvironment);

		*pInstance = (IBase*)(pBaseInstance);
		return LIBMCDRIVER_OPCUA_SUCCESS;
	}
	catch (ELibMCDriver_OPCUAInterfaceException & Exception) {
		return handleLibMCDriver_OPCUAException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}


