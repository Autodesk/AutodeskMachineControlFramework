/*++

Copyright (C) 2024 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.8.0-develop.

Abstract: This is an autogenerated C++-Header file in order to allow an easy
 use of Library Wrapper for open62541 OPCUA Library

Interface version: 1.2.0

*/

#ifndef __LIBOPEN62541_DYNAMICHEADER_CPPTYPES
#define __LIBOPEN62541_DYNAMICHEADER_CPPTYPES

#include "libopen62541_types.hpp"



/*************************************************************************************************************************
 Class definition for Base
**************************************************************************************************************************/

/*************************************************************************************************************************
 Class definition for OPCClient
**************************************************************************************************************************/

/**
* Enables encryption for subsequent connects.
*
* @param[in] pOPCClient - OPCClient instance.
* @param[in] pLocalCertificate - Local Certificate String
* @param[in] pPrivateKey - Private Key
* @param[in] eSecurityMode - Security mode to use.
* @return error code or 0 (success)
*/
typedef LibOpen62541Result (*PLibOpen62541OPCClient_EnableEncryptionPtr) (LibOpen62541_OPCClient pOPCClient, const char * pLocalCertificate, const char * pPrivateKey, LibOpen62541::eUASecurityMode eSecurityMode);

/**
* Enables encryption for subsequent connects.
*
* @param[in] pOPCClient - OPCClient instance.
* @return error code or 0 (success)
*/
typedef LibOpen62541Result (*PLibOpen62541OPCClient_DisableEncryptionPtr) (LibOpen62541_OPCClient pOPCClient);

/**
* Connects to the end point with a user name and password.
*
* @param[in] pOPCClient - OPCClient instance.
* @param[in] pEndPointURL - End point URL to connect to.
* @param[in] pUsername - User login.
* @param[in] pPassword - Password.
* @param[in] pApplicationURL - Application URL to use.
* @return error code or 0 (success)
*/
typedef LibOpen62541Result (*PLibOpen62541OPCClient_ConnectUserNamePtr) (LibOpen62541_OPCClient pOPCClient, const char * pEndPointURL, const char * pUsername, const char * pPassword, const char * pApplicationURL);

/**
* Disconnect from the end point. Does nothing if not connected
*
* @param[in] pOPCClient - OPCClient instance.
* @return error code or 0 (success)
*/
typedef LibOpen62541Result (*PLibOpen62541OPCClient_DisconnectPtr) (LibOpen62541_OPCClient pOPCClient);

/**
* Returns if an end point is connected.
*
* @param[in] pOPCClient - OPCClient instance.
* @param[out] pValue - Returns true if connected.
* @return error code or 0 (success)
*/
typedef LibOpen62541Result (*PLibOpen62541OPCClient_IsConnectedPtr) (LibOpen62541_OPCClient pOPCClient, bool * pValue);

/**
* Reads an integer node value. Fails if not connected or node does not exist.
*
* @param[in] pOPCClient - OPCClient instance.
* @param[in] nNameSpace - Namespace ID
* @param[in] pNodeName - NodeToRead
* @param[in] eNodeType - Type of Node to read
* @param[out] pValue - Retrieved Node Value
* @return error code or 0 (success)
*/
typedef LibOpen62541Result (*PLibOpen62541OPCClient_ReadIntegerPtr) (LibOpen62541_OPCClient pOPCClient, LibOpen62541_uint32 nNameSpace, const char * pNodeName, LibOpen62541::eUAIntegerType eNodeType, LibOpen62541_int64 * pValue);

/**
* Reads a double node value. Fails if not connected or node does not exist.
*
* @param[in] pOPCClient - OPCClient instance.
* @param[in] nNameSpace - Namespace ID
* @param[in] pNodeName - NodeToRead
* @param[in] eNodeType - Type of Node to read
* @param[out] pValue - Retrieved Node Value
* @return error code or 0 (success)
*/
typedef LibOpen62541Result (*PLibOpen62541OPCClient_ReadDoublePtr) (LibOpen62541_OPCClient pOPCClient, LibOpen62541_uint32 nNameSpace, const char * pNodeName, LibOpen62541::eUADoubleType eNodeType, LibOpen62541_double * pValue);

/**
* Reads a string node value. Fails if not connected or node does not exist.
*
* @param[in] pOPCClient - OPCClient instance.
* @param[in] nNameSpace - Namespace ID
* @param[in] pNodeName - NodeToRead
* @param[in] nValueBufferSize - size of the buffer (including trailing 0)
* @param[out] pValueNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pValueBuffer -  buffer of Retrieved String Value, may be NULL
* @return error code or 0 (success)
*/
typedef LibOpen62541Result (*PLibOpen62541OPCClient_ReadStringPtr) (LibOpen62541_OPCClient pOPCClient, LibOpen62541_uint32 nNameSpace, const char * pNodeName, const LibOpen62541_uint32 nValueBufferSize, LibOpen62541_uint32* pValueNeededChars, char * pValueBuffer);

/**
* Writes an integer node value. Fails if not connected or node does not exist.
*
* @param[in] pOPCClient - OPCClient instance.
* @param[in] nNameSpace - Namespace ID
* @param[in] pNodeName - NodeToRead
* @param[in] eNodeType - Type of Node to write
* @param[in] nValue - Node Value to write
* @return error code or 0 (success)
*/
typedef LibOpen62541Result (*PLibOpen62541OPCClient_WriteIntegerPtr) (LibOpen62541_OPCClient pOPCClient, LibOpen62541_uint32 nNameSpace, const char * pNodeName, LibOpen62541::eUAIntegerType eNodeType, LibOpen62541_int64 nValue);

/**
* Writes a double node value. Fails if not connected or node does not exist.
*
* @param[in] pOPCClient - OPCClient instance.
* @param[in] nNameSpace - Namespace ID
* @param[in] pNodeName - NodeToRead
* @param[in] eNodeType - Type of Node to write
* @param[in] dValue - Node Value to write
* @return error code or 0 (success)
*/
typedef LibOpen62541Result (*PLibOpen62541OPCClient_WriteDoublePtr) (LibOpen62541_OPCClient pOPCClient, LibOpen62541_uint32 nNameSpace, const char * pNodeName, LibOpen62541::eUADoubleType eNodeType, LibOpen62541_double dValue);

/**
* Writes a string node value. Fails if not connected.
*
* @param[in] pOPCClient - OPCClient instance.
* @param[in] nNameSpace - Namespace ID
* @param[in] pNodeName - NodeToRead
* @param[in] pValue - Node Value to write
* @return error code or 0 (success)
*/
typedef LibOpen62541Result (*PLibOpen62541OPCClient_WriteStringPtr) (LibOpen62541_OPCClient pOPCClient, LibOpen62541_uint32 nNameSpace, const char * pNodeName, const char * pValue);

/*************************************************************************************************************************
 Global functions
**************************************************************************************************************************/

/**
* retrieves the binary version of this library.
*
* @param[out] pMajor - returns the major version of this library
* @param[out] pMinor - returns the minor version of this library
* @param[out] pMicro - returns the micro version of this library
* @return error code or 0 (success)
*/
typedef LibOpen62541Result (*PLibOpen62541GetVersionPtr) (LibOpen62541_uint32 * pMajor, LibOpen62541_uint32 * pMinor, LibOpen62541_uint32 * pMicro);

/**
* Returns the last error recorded on this object
*
* @param[in] pInstance - Instance Handle
* @param[in] nErrorMessageBufferSize - size of the buffer (including trailing 0)
* @param[out] pErrorMessageNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pErrorMessageBuffer -  buffer of Message of the last error, may be NULL
* @param[out] pHasError - Is there a last error to query
* @return error code or 0 (success)
*/
typedef LibOpen62541Result (*PLibOpen62541GetLastErrorPtr) (LibOpen62541_Base pInstance, const LibOpen62541_uint32 nErrorMessageBufferSize, LibOpen62541_uint32* pErrorMessageNeededChars, char * pErrorMessageBuffer, bool * pHasError);

/**
* Acquire shared ownership of an Instance
*
* @param[in] pInstance - Instance Handle
* @return error code or 0 (success)
*/
typedef LibOpen62541Result (*PLibOpen62541AcquireInstancePtr) (LibOpen62541_Base pInstance);

/**
* Releases shared ownership of an Instance
*
* @param[in] pInstance - Instance Handle
* @return error code or 0 (success)
*/
typedef LibOpen62541Result (*PLibOpen62541ReleaseInstancePtr) (LibOpen62541_Base pInstance);

/**
* Returns the address of the SymbolLookupMethod
*
* @param[out] pSymbolLookupMethod - Address of the SymbolAddressMethod
* @return error code or 0 (success)
*/
typedef LibOpen62541Result (*PLibOpen62541GetSymbolLookupMethodPtr) (LibOpen62541_pvoid * pSymbolLookupMethod);

/**
* Creates an OPC Client
*
* @param[out] pClientInstance - OPCClient Instance
* @return error code or 0 (success)
*/
typedef LibOpen62541Result (*PLibOpen62541CreateClientPtr) (LibOpen62541_OPCClient * pClientInstance);

/*************************************************************************************************************************
 Function Table Structure
**************************************************************************************************************************/

typedef struct {
	void * m_LibraryHandle;
	PLibOpen62541OPCClient_EnableEncryptionPtr m_OPCClient_EnableEncryption;
	PLibOpen62541OPCClient_DisableEncryptionPtr m_OPCClient_DisableEncryption;
	PLibOpen62541OPCClient_ConnectUserNamePtr m_OPCClient_ConnectUserName;
	PLibOpen62541OPCClient_DisconnectPtr m_OPCClient_Disconnect;
	PLibOpen62541OPCClient_IsConnectedPtr m_OPCClient_IsConnected;
	PLibOpen62541OPCClient_ReadIntegerPtr m_OPCClient_ReadInteger;
	PLibOpen62541OPCClient_ReadDoublePtr m_OPCClient_ReadDouble;
	PLibOpen62541OPCClient_ReadStringPtr m_OPCClient_ReadString;
	PLibOpen62541OPCClient_WriteIntegerPtr m_OPCClient_WriteInteger;
	PLibOpen62541OPCClient_WriteDoublePtr m_OPCClient_WriteDouble;
	PLibOpen62541OPCClient_WriteStringPtr m_OPCClient_WriteString;
	PLibOpen62541GetVersionPtr m_GetVersion;
	PLibOpen62541GetLastErrorPtr m_GetLastError;
	PLibOpen62541AcquireInstancePtr m_AcquireInstance;
	PLibOpen62541ReleaseInstancePtr m_ReleaseInstance;
	PLibOpen62541GetSymbolLookupMethodPtr m_GetSymbolLookupMethod;
	PLibOpen62541CreateClientPtr m_CreateClient;
} sLibOpen62541DynamicWrapperTable;

#endif // __LIBOPEN62541_DYNAMICHEADER_CPPTYPES

