/*++

Copyright (C) 2024 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.8.0-develop.

Abstract: This is an autogenerated C++-Header file with basic types in
order to allow an easy use of Library Wrapper for open62541 OPCUA Library

Interface version: 1.2.0

*/

#ifndef __LIBOPEN62541_TYPES_HEADER_CPP
#define __LIBOPEN62541_TYPES_HEADER_CPP


/*************************************************************************************************************************
 Scalar types definition
**************************************************************************************************************************/

#ifdef LIBOPEN62541_USELEGACYINTEGERTYPES

typedef unsigned char LibOpen62541_uint8;
typedef unsigned short LibOpen62541_uint16 ;
typedef unsigned int LibOpen62541_uint32;
typedef unsigned long long LibOpen62541_uint64;
typedef char LibOpen62541_int8;
typedef short LibOpen62541_int16;
typedef int LibOpen62541_int32;
typedef long long LibOpen62541_int64;

#else // LIBOPEN62541_USELEGACYINTEGERTYPES

#include <stdint.h>

typedef uint8_t LibOpen62541_uint8;
typedef uint16_t LibOpen62541_uint16;
typedef uint32_t LibOpen62541_uint32;
typedef uint64_t LibOpen62541_uint64;
typedef int8_t LibOpen62541_int8;
typedef int16_t LibOpen62541_int16;
typedef int32_t LibOpen62541_int32;
typedef int64_t LibOpen62541_int64 ;

#endif // LIBOPEN62541_USELEGACYINTEGERTYPES

typedef float LibOpen62541_single;
typedef double LibOpen62541_double;

/*************************************************************************************************************************
 General type definitions
**************************************************************************************************************************/

typedef LibOpen62541_int32 LibOpen62541Result;
typedef void * LibOpen62541Handle;
typedef void * LibOpen62541_pvoid;

/*************************************************************************************************************************
 Version for LibOpen62541
**************************************************************************************************************************/

#define LIBOPEN62541_VERSION_MAJOR 1
#define LIBOPEN62541_VERSION_MINOR 2
#define LIBOPEN62541_VERSION_MICRO 0
#define LIBOPEN62541_VERSION_PRERELEASEINFO ""
#define LIBOPEN62541_VERSION_BUILDINFO ""

/*************************************************************************************************************************
 Error constants for LibOpen62541
**************************************************************************************************************************/

#define LIBOPEN62541_SUCCESS 0
#define LIBOPEN62541_ERROR_NOTIMPLEMENTED 1001 /** functionality not implemented */
#define LIBOPEN62541_ERROR_INVALIDPARAM 1002 /** an invalid parameter was passed */
#define LIBOPEN62541_ERROR_INVALIDCAST 1003 /** a type cast failed */
#define LIBOPEN62541_ERROR_BUFFERTOOSMALL 1004 /** a provided buffer is too small */
#define LIBOPEN62541_ERROR_GENERICEXCEPTION 1005 /** a generic exception occurred */
#define LIBOPEN62541_ERROR_COULDNOTLOADLIBRARY 1006 /** the library could not be loaded */
#define LIBOPEN62541_ERROR_COULDNOTFINDLIBRARYEXPORT 1007 /** a required exported symbol could not be found in the library */
#define LIBOPEN62541_ERROR_INCOMPATIBLEBINARYVERSION 1008 /** the version of the binary interface does not match the bindings interface */
#define LIBOPEN62541_ERROR_NOTCONNECTED 1009 /** PLC is not connected */
#define LIBOPEN62541_ERROR_COULDNOTCREATEOPCUACLIENT 1010 /** Could not create OPCUA Client */
#define LIBOPEN62541_ERROR_COULDNOTSENDOPCUACLIENTCONFIG 1011 /** Could not send OPCUA Client config */
#define LIBOPEN62541_ERROR_COULDNOTCONNECT 1012 /** Could not connect */
#define LIBOPEN62541_ERROR_INVALIDSECURITYMODE 1013 /** Invalid security mode */
#define LIBOPEN62541_ERROR_COULDNOTREADVALUE 1014 /** Could not read value */
#define LIBOPEN62541_ERROR_COULDNOTWRITEVALUE 1015 /** Could not write value */
#define LIBOPEN62541_ERROR_READVALUEISOFINCORRECTTYPE 1016 /** Read value is of incorrect type. */
#define LIBOPEN62541_ERROR_INVALIDFLOATNODETYPE 1017 /** Invalid float node type. */
#define LIBOPEN62541_ERROR_INVALIDINTEGERNODETYPE 1018 /** Invalid integer node type. */
#define LIBOPEN62541_ERROR_OPCUAVARIANTDATAISNULL 1019 /** OPCUA Variant data is null. */
#define LIBOPEN62541_ERROR_OPCUASTRINGDATAISNULL 1020 /** OPCUA String data is null. */
#define LIBOPEN62541_ERROR_OPCUAWRITEINTEGEROUTOFBOUNDS 1021 /** OPCUA Write integer out of bounds. */

/*************************************************************************************************************************
 Error strings for LibOpen62541
**************************************************************************************************************************/

inline const char * LIBOPEN62541_GETERRORSTRING (LibOpen62541Result nErrorCode) {
  switch (nErrorCode) {
    case LIBOPEN62541_SUCCESS: return "no error";
    case LIBOPEN62541_ERROR_NOTIMPLEMENTED: return "functionality not implemented";
    case LIBOPEN62541_ERROR_INVALIDPARAM: return "an invalid parameter was passed";
    case LIBOPEN62541_ERROR_INVALIDCAST: return "a type cast failed";
    case LIBOPEN62541_ERROR_BUFFERTOOSMALL: return "a provided buffer is too small";
    case LIBOPEN62541_ERROR_GENERICEXCEPTION: return "a generic exception occurred";
    case LIBOPEN62541_ERROR_COULDNOTLOADLIBRARY: return "the library could not be loaded";
    case LIBOPEN62541_ERROR_COULDNOTFINDLIBRARYEXPORT: return "a required exported symbol could not be found in the library";
    case LIBOPEN62541_ERROR_INCOMPATIBLEBINARYVERSION: return "the version of the binary interface does not match the bindings interface";
    case LIBOPEN62541_ERROR_NOTCONNECTED: return "PLC is not connected";
    case LIBOPEN62541_ERROR_COULDNOTCREATEOPCUACLIENT: return "Could not create OPCUA Client";
    case LIBOPEN62541_ERROR_COULDNOTSENDOPCUACLIENTCONFIG: return "Could not send OPCUA Client config";
    case LIBOPEN62541_ERROR_COULDNOTCONNECT: return "Could not connect";
    case LIBOPEN62541_ERROR_INVALIDSECURITYMODE: return "Invalid security mode";
    case LIBOPEN62541_ERROR_COULDNOTREADVALUE: return "Could not read value";
    case LIBOPEN62541_ERROR_COULDNOTWRITEVALUE: return "Could not write value";
    case LIBOPEN62541_ERROR_READVALUEISOFINCORRECTTYPE: return "Read value is of incorrect type.";
    case LIBOPEN62541_ERROR_INVALIDFLOATNODETYPE: return "Invalid float node type.";
    case LIBOPEN62541_ERROR_INVALIDINTEGERNODETYPE: return "Invalid integer node type.";
    case LIBOPEN62541_ERROR_OPCUAVARIANTDATAISNULL: return "OPCUA Variant data is null.";
    case LIBOPEN62541_ERROR_OPCUASTRINGDATAISNULL: return "OPCUA String data is null.";
    case LIBOPEN62541_ERROR_OPCUAWRITEINTEGEROUTOFBOUNDS: return "OPCUA Write integer out of bounds.";
    default: return "unknown error";
  }
}

/*************************************************************************************************************************
 Declaration of handle classes 
**************************************************************************************************************************/

typedef LibOpen62541Handle LibOpen62541_Base;
typedef LibOpen62541Handle LibOpen62541_OPCClient;

namespace LibOpen62541 {

  /*************************************************************************************************************************
   Declaration of enums
  **************************************************************************************************************************/
  
  enum class eUAIntegerType : LibOpen62541_int32 {
    Unknown = 0,
    UAUInt8 = 1,
    UAUInt16 = 2,
    UAUInt32 = 3,
    UAUInt64 = 4,
    UAInt8 = 5,
    UAInt16 = 6,
    UAInt32 = 7,
    UAInt64 = 8
  };
  
  enum class eUADoubleType : LibOpen62541_int32 {
    Unknown = 0,
    UAFloat32 = 1,
    UADouble64 = 2
  };
  
  enum class eUASecurityMode : LibOpen62541_int32 {
    None = 0,
    Sign = 1,
    SignAndEncrypt = 2
  };
  
} // namespace LibOpen62541;

// define legacy C-names for enums, structs and function types
typedef LibOpen62541::eUAIntegerType eLibOpen62541UAIntegerType;
typedef LibOpen62541::eUADoubleType eLibOpen62541UADoubleType;
typedef LibOpen62541::eUASecurityMode eLibOpen62541UASecurityMode;

#endif // __LIBOPEN62541_TYPES_HEADER_CPP
