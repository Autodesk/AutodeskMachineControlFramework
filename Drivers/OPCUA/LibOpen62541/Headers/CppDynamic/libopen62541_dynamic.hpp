/*++

Copyright (C) 2024 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.8.0-develop.

Abstract: This is an autogenerated C++-Header file in order to allow an easy
 use of Library Wrapper for open62541 OPCUA Library

Interface version: 1.2.0

*/

#ifndef __LIBOPEN62541_CPPHEADER_DYNAMIC_CPP
#define __LIBOPEN62541_CPPHEADER_DYNAMIC_CPP

#include "libopen62541_types.hpp"
#include "libopen62541_dynamic.h"


#ifdef _WIN32
#include <windows.h>
#else // _WIN32
#include <dlfcn.h>
#endif // _WIN32
#include <string>
#include <memory>
#include <vector>
#include <exception>

namespace LibOpen62541 {

/*************************************************************************************************************************
 Forward Declaration of all classes
**************************************************************************************************************************/
class CWrapper;
class CBase;
class COPCClient;

/*************************************************************************************************************************
 Declaration of deprecated class types
**************************************************************************************************************************/
typedef CWrapper CLibOpen62541Wrapper;
typedef CBase CLibOpen62541Base;
typedef COPCClient CLibOpen62541OPCClient;

/*************************************************************************************************************************
 Declaration of shared pointer types
**************************************************************************************************************************/
typedef std::shared_ptr<CWrapper> PWrapper;
typedef std::shared_ptr<CBase> PBase;
typedef std::shared_ptr<COPCClient> POPCClient;

/*************************************************************************************************************************
 Declaration of deprecated shared pointer types
**************************************************************************************************************************/
typedef PWrapper PLibOpen62541Wrapper;
typedef PBase PLibOpen62541Base;
typedef POPCClient PLibOpen62541OPCClient;


/*************************************************************************************************************************
 classParam Definition
**************************************************************************************************************************/

template<class T> class classParam {
private:
	const T* m_ptr;

public:
	classParam(const T* ptr)
		: m_ptr (ptr)
	{
	}

	classParam(std::shared_ptr <T> sharedPtr)
		: m_ptr (sharedPtr.get())
	{
	}

	LibOpen62541Handle GetHandle()
	{
		if (m_ptr != nullptr)
			return m_ptr->handle();
		return nullptr;
	}
};

/*************************************************************************************************************************
 Class ELibOpen62541Exception 
**************************************************************************************************************************/
class ELibOpen62541Exception : public std::exception {
protected:
	/**
	* Error code for the Exception.
	*/
	LibOpen62541Result m_errorCode;
	/**
	* Error message for the Exception.
	*/
	std::string m_errorMessage;
	std::string m_originalErrorMessage;

public:
	/**
	* Exception Constructor.
	*/
	ELibOpen62541Exception(LibOpen62541Result errorCode, const std::string & sErrorMessage)
		: m_errorCode(errorCode), m_originalErrorMessage(sErrorMessage)
	{
		m_errorMessage = buildErrorMessage();
	}

	/**
	* Returns error code
	*/
	LibOpen62541Result getErrorCode() const noexcept
	{
		return m_errorCode;
	}

	/**
	* Returns error message
	*/
	const char* what() const noexcept
	{
		return m_errorMessage.c_str();
	}

	const char* getErrorMessage() const noexcept
	{
		return m_originalErrorMessage.c_str();
	}

	const char* getErrorName() const noexcept
	{
		switch(getErrorCode()) {
			case LIBOPEN62541_SUCCESS: return "SUCCESS";
			case LIBOPEN62541_ERROR_NOTIMPLEMENTED: return "NOTIMPLEMENTED";
			case LIBOPEN62541_ERROR_INVALIDPARAM: return "INVALIDPARAM";
			case LIBOPEN62541_ERROR_INVALIDCAST: return "INVALIDCAST";
			case LIBOPEN62541_ERROR_BUFFERTOOSMALL: return "BUFFERTOOSMALL";
			case LIBOPEN62541_ERROR_GENERICEXCEPTION: return "GENERICEXCEPTION";
			case LIBOPEN62541_ERROR_COULDNOTLOADLIBRARY: return "COULDNOTLOADLIBRARY";
			case LIBOPEN62541_ERROR_COULDNOTFINDLIBRARYEXPORT: return "COULDNOTFINDLIBRARYEXPORT";
			case LIBOPEN62541_ERROR_INCOMPATIBLEBINARYVERSION: return "INCOMPATIBLEBINARYVERSION";
			case LIBOPEN62541_ERROR_NOTCONNECTED: return "NOTCONNECTED";
			case LIBOPEN62541_ERROR_COULDNOTCREATEOPCUACLIENT: return "COULDNOTCREATEOPCUACLIENT";
			case LIBOPEN62541_ERROR_COULDNOTSENDOPCUACLIENTCONFIG: return "COULDNOTSENDOPCUACLIENTCONFIG";
			case LIBOPEN62541_ERROR_COULDNOTCONNECT: return "COULDNOTCONNECT";
			case LIBOPEN62541_ERROR_INVALIDSECURITYMODE: return "INVALIDSECURITYMODE";
			case LIBOPEN62541_ERROR_COULDNOTREADVALUE: return "COULDNOTREADVALUE";
			case LIBOPEN62541_ERROR_COULDNOTWRITEVALUE: return "COULDNOTWRITEVALUE";
			case LIBOPEN62541_ERROR_READVALUEISOFINCORRECTTYPE: return "READVALUEISOFINCORRECTTYPE";
			case LIBOPEN62541_ERROR_INVALIDFLOATNODETYPE: return "INVALIDFLOATNODETYPE";
			case LIBOPEN62541_ERROR_INVALIDINTEGERNODETYPE: return "INVALIDINTEGERNODETYPE";
			case LIBOPEN62541_ERROR_OPCUAVARIANTDATAISNULL: return "OPCUAVARIANTDATAISNULL";
			case LIBOPEN62541_ERROR_OPCUASTRINGDATAISNULL: return "OPCUASTRINGDATAISNULL";
			case LIBOPEN62541_ERROR_OPCUAWRITEINTEGEROUTOFBOUNDS: return "OPCUAWRITEINTEGEROUTOFBOUNDS";
		}
		return "UNKNOWN";
	}

	const char* getErrorDescription() const noexcept
	{
		switch(getErrorCode()) {
			case LIBOPEN62541_SUCCESS: return "success";
			case LIBOPEN62541_ERROR_NOTIMPLEMENTED: return "functionality not implemented";
			case LIBOPEN62541_ERROR_INVALIDPARAM: return "an invalid parameter was passed";
			case LIBOPEN62541_ERROR_INVALIDCAST: return "a type cast failed";
			case LIBOPEN62541_ERROR_BUFFERTOOSMALL: return "a provided buffer is too small";
			case LIBOPEN62541_ERROR_GENERICEXCEPTION: return "a generic exception occurred";
			case LIBOPEN62541_ERROR_COULDNOTLOADLIBRARY: return "the library could not be loaded";
			case LIBOPEN62541_ERROR_COULDNOTFINDLIBRARYEXPORT: return "a required exported symbol could not be found in the library";
			case LIBOPEN62541_ERROR_INCOMPATIBLEBINARYVERSION: return "the version of the binary interface does not match the bindings interface";
			case LIBOPEN62541_ERROR_NOTCONNECTED: return "PLC is not connected";
			case LIBOPEN62541_ERROR_COULDNOTCREATEOPCUACLIENT: return "Could not create OPCUA Client";
			case LIBOPEN62541_ERROR_COULDNOTSENDOPCUACLIENTCONFIG: return "Could not send OPCUA Client config";
			case LIBOPEN62541_ERROR_COULDNOTCONNECT: return "Could not connect";
			case LIBOPEN62541_ERROR_INVALIDSECURITYMODE: return "Invalid security mode";
			case LIBOPEN62541_ERROR_COULDNOTREADVALUE: return "Could not read value";
			case LIBOPEN62541_ERROR_COULDNOTWRITEVALUE: return "Could not write value";
			case LIBOPEN62541_ERROR_READVALUEISOFINCORRECTTYPE: return "Read value is of incorrect type.";
			case LIBOPEN62541_ERROR_INVALIDFLOATNODETYPE: return "Invalid float node type.";
			case LIBOPEN62541_ERROR_INVALIDINTEGERNODETYPE: return "Invalid integer node type.";
			case LIBOPEN62541_ERROR_OPCUAVARIANTDATAISNULL: return "OPCUA Variant data is null.";
			case LIBOPEN62541_ERROR_OPCUASTRINGDATAISNULL: return "OPCUA String data is null.";
			case LIBOPEN62541_ERROR_OPCUAWRITEINTEGEROUTOFBOUNDS: return "OPCUA Write integer out of bounds.";
		}
		return "unknown error";
	}

private:

	std::string buildErrorMessage() const noexcept
	{
		std::string msg = m_originalErrorMessage;
		if (msg.empty()) {
			msg = getErrorDescription();
		}
		return std::string("Error: ") + getErrorName() + ": " + msg;
	}
};

/*************************************************************************************************************************
 Class CInputVector
**************************************************************************************************************************/
template <typename T>
class CInputVector {
private:
	
	const T* m_data;
	size_t m_size;
	
public:
	
	CInputVector(const std::vector<T>& vec)
		: m_data( vec.data() ), m_size( vec.size() )
	{
	}
	
	CInputVector(const T* in_data, size_t in_size)
		: m_data( in_data ), m_size(in_size )
	{
	}
	
	const T* data() const
	{
		return m_data;
	}
	
	size_t size() const
	{
		return m_size;
	}
	
};

// declare deprecated class name
template<typename T>
using CLibOpen62541InputVector = CInputVector<T>;

/*************************************************************************************************************************
 Class CWrapper 
**************************************************************************************************************************/
class CWrapper {
public:
	
	explicit CWrapper(void* pSymbolLookupMethod)
	{
		CheckError(nullptr, initWrapperTable(&m_WrapperTable));
		CheckError(nullptr, loadWrapperTableFromSymbolLookupMethod(&m_WrapperTable, pSymbolLookupMethod));
		
		CheckError(nullptr, checkBinaryVersion());
	}
	
	explicit CWrapper(const std::string &sFileName)
	{
		CheckError(nullptr, initWrapperTable(&m_WrapperTable));
		CheckError(nullptr, loadWrapperTable(&m_WrapperTable, sFileName.c_str()));
		
		CheckError(nullptr, checkBinaryVersion());
	}
	
	static PWrapper loadLibrary(const std::string &sFileName)
	{
		return std::make_shared<CWrapper>(sFileName);
	}
	
	static PWrapper loadLibraryFromSymbolLookupMethod(void* pSymbolLookupMethod)
	{
		return std::make_shared<CWrapper>(pSymbolLookupMethod);
	}
	
	~CWrapper()
	{
		releaseWrapperTable(&m_WrapperTable);
	}
	
	inline void CheckError(CBase * pBaseClass, LibOpen62541Result nResult);

	inline void GetVersion(LibOpen62541_uint32 & nMajor, LibOpen62541_uint32 & nMinor, LibOpen62541_uint32 & nMicro);
	inline bool GetLastError(classParam<CBase> pInstance, std::string & sErrorMessage);
	inline void AcquireInstance(classParam<CBase> pInstance);
	inline void ReleaseInstance(classParam<CBase> pInstance);
	inline LibOpen62541_pvoid GetSymbolLookupMethod();
	inline POPCClient CreateClient();

private:
	sLibOpen62541DynamicWrapperTable m_WrapperTable;
	
	LibOpen62541Result checkBinaryVersion()
	{
		LibOpen62541_uint32 nMajor, nMinor, nMicro;
		GetVersion(nMajor, nMinor, nMicro);
		if ( (nMajor != LIBOPEN62541_VERSION_MAJOR) || (nMinor < LIBOPEN62541_VERSION_MINOR) ) {
			return LIBOPEN62541_ERROR_INCOMPATIBLEBINARYVERSION;
		}
		return LIBOPEN62541_SUCCESS;
	}
	LibOpen62541Result initWrapperTable(sLibOpen62541DynamicWrapperTable * pWrapperTable);
	LibOpen62541Result releaseWrapperTable(sLibOpen62541DynamicWrapperTable * pWrapperTable);
	LibOpen62541Result loadWrapperTable(sLibOpen62541DynamicWrapperTable * pWrapperTable, const char * pLibraryFileName);
	LibOpen62541Result loadWrapperTableFromSymbolLookupMethod(sLibOpen62541DynamicWrapperTable * pWrapperTable, void* pSymbolLookupMethod);

	friend class CBase;
	friend class COPCClient;

};

	
/*************************************************************************************************************************
 Class CBase 
**************************************************************************************************************************/
class CBase {
public:
	
protected:
	/* Wrapper Object that created the class. */
	CWrapper * m_pWrapper;
	/* Handle to Instance in library*/
	LibOpen62541Handle m_pHandle;

	/* Checks for an Error code and raises Exceptions */
	void CheckError(LibOpen62541Result nResult)
	{
		if (m_pWrapper != nullptr)
			m_pWrapper->CheckError(this, nResult);
	}
public:
	/**
	* CBase::CBase - Constructor for Base class.
	*/
	CBase(CWrapper * pWrapper, LibOpen62541Handle pHandle)
		: m_pWrapper(pWrapper), m_pHandle(pHandle)
	{
	}

	/**
	* CBase::~CBase - Destructor for Base class.
	*/
	virtual ~CBase()
	{
		if (m_pWrapper != nullptr)
			m_pWrapper->ReleaseInstance(this);
		m_pWrapper = nullptr;
	}

	/**
	* CBase::handle - Returns handle to instance.
	*/
	LibOpen62541Handle handle() const
	{
		return m_pHandle;
	}

	/**
	* CBase::wrapper - Returns wrapper instance.
	*/
	CWrapper * wrapper() const
	{
		return m_pWrapper;
	}
	
	friend class CWrapper;
};
	
/*************************************************************************************************************************
 Class COPCClient 
**************************************************************************************************************************/
class COPCClient : public CBase {
public:
	
	/**
	* COPCClient::COPCClient - Constructor for OPCClient class.
	*/
	COPCClient(CWrapper* pWrapper, LibOpen62541Handle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline void EnableEncryption(const std::string & sLocalCertificate, const std::string & sPrivateKey, const eUASecurityMode eSecurityMode);
	inline void DisableEncryption();
	inline void ConnectUserName(const std::string & sEndPointURL, const std::string & sUsername, const std::string & sPassword, const std::string & sApplicationURL);
	inline void Disconnect();
	inline bool IsConnected();
	inline LibOpen62541_int64 ReadInteger(const LibOpen62541_uint32 nNameSpace, const std::string & sNodeName, const eUAIntegerType eNodeType);
	inline LibOpen62541_double ReadDouble(const LibOpen62541_uint32 nNameSpace, const std::string & sNodeName, const eUADoubleType eNodeType);
	inline std::string ReadString(const LibOpen62541_uint32 nNameSpace, const std::string & sNodeName);
	inline void WriteInteger(const LibOpen62541_uint32 nNameSpace, const std::string & sNodeName, const eUAIntegerType eNodeType, const LibOpen62541_int64 nValue);
	inline void WriteDouble(const LibOpen62541_uint32 nNameSpace, const std::string & sNodeName, const eUADoubleType eNodeType, const LibOpen62541_double dValue);
	inline void WriteString(const LibOpen62541_uint32 nNameSpace, const std::string & sNodeName, const std::string & sValue);
};
	
	/**
	* CWrapper::GetVersion - retrieves the binary version of this library.
	* @param[out] nMajor - returns the major version of this library
	* @param[out] nMinor - returns the minor version of this library
	* @param[out] nMicro - returns the micro version of this library
	*/
	inline void CWrapper::GetVersion(LibOpen62541_uint32 & nMajor, LibOpen62541_uint32 & nMinor, LibOpen62541_uint32 & nMicro)
	{
		CheckError(nullptr,m_WrapperTable.m_GetVersion(&nMajor, &nMinor, &nMicro));
	}
	
	/**
	* CWrapper::GetLastError - Returns the last error recorded on this object
	* @param[in] pInstance - Instance Handle
	* @param[out] sErrorMessage - Message of the last error
	* @return Is there a last error to query
	*/
	inline bool CWrapper::GetLastError(classParam<CBase> pInstance, std::string & sErrorMessage)
	{
		LibOpen62541Handle hInstance = pInstance.GetHandle();
		LibOpen62541_uint32 bytesNeededErrorMessage = 0;
		LibOpen62541_uint32 bytesWrittenErrorMessage = 0;
		bool resultHasError = 0;
		CheckError(nullptr,m_WrapperTable.m_GetLastError(hInstance, 0, &bytesNeededErrorMessage, nullptr, &resultHasError));
		std::vector<char> bufferErrorMessage(bytesNeededErrorMessage);
		CheckError(nullptr,m_WrapperTable.m_GetLastError(hInstance, bytesNeededErrorMessage, &bytesWrittenErrorMessage, &bufferErrorMessage[0], &resultHasError));
		sErrorMessage = std::string(&bufferErrorMessage[0]);
		
		return resultHasError;
	}
	
	/**
	* CWrapper::AcquireInstance - Acquire shared ownership of an Instance
	* @param[in] pInstance - Instance Handle
	*/
	inline void CWrapper::AcquireInstance(classParam<CBase> pInstance)
	{
		LibOpen62541Handle hInstance = pInstance.GetHandle();
		CheckError(nullptr,m_WrapperTable.m_AcquireInstance(hInstance));
	}
	
	/**
	* CWrapper::ReleaseInstance - Releases shared ownership of an Instance
	* @param[in] pInstance - Instance Handle
	*/
	inline void CWrapper::ReleaseInstance(classParam<CBase> pInstance)
	{
		LibOpen62541Handle hInstance = pInstance.GetHandle();
		CheckError(nullptr,m_WrapperTable.m_ReleaseInstance(hInstance));
	}
	
	/**
	* CWrapper::GetSymbolLookupMethod - Returns the address of the SymbolLookupMethod
	* @return Address of the SymbolAddressMethod
	*/
	inline LibOpen62541_pvoid CWrapper::GetSymbolLookupMethod()
	{
		LibOpen62541_pvoid resultSymbolLookupMethod = 0;
		CheckError(nullptr,m_WrapperTable.m_GetSymbolLookupMethod(&resultSymbolLookupMethod));
		
		return resultSymbolLookupMethod;
	}
	
	/**
	* CWrapper::CreateClient - Creates an OPC Client
	* @return OPCClient Instance
	*/
	inline POPCClient CWrapper::CreateClient()
	{
		LibOpen62541Handle hClientInstance = nullptr;
		CheckError(nullptr,m_WrapperTable.m_CreateClient(&hClientInstance));
		
		if (!hClientInstance) {
			CheckError(nullptr,LIBOPEN62541_ERROR_INVALIDPARAM);
		}
		return std::make_shared<COPCClient>(this, hClientInstance);
	}
	
	inline void CWrapper::CheckError(CBase * pBaseClass, LibOpen62541Result nResult)
	{
		if (nResult != 0) {
			std::string sErrorMessage;
			if (pBaseClass != nullptr) {
				GetLastError(pBaseClass, sErrorMessage);
			}
			throw ELibOpen62541Exception(nResult, sErrorMessage);
		}
	}
	

	inline LibOpen62541Result CWrapper::initWrapperTable(sLibOpen62541DynamicWrapperTable * pWrapperTable)
	{
		if (pWrapperTable == nullptr)
			return LIBOPEN62541_ERROR_INVALIDPARAM;
		
		pWrapperTable->m_LibraryHandle = nullptr;
		pWrapperTable->m_OPCClient_EnableEncryption = nullptr;
		pWrapperTable->m_OPCClient_DisableEncryption = nullptr;
		pWrapperTable->m_OPCClient_ConnectUserName = nullptr;
		pWrapperTable->m_OPCClient_Disconnect = nullptr;
		pWrapperTable->m_OPCClient_IsConnected = nullptr;
		pWrapperTable->m_OPCClient_ReadInteger = nullptr;
		pWrapperTable->m_OPCClient_ReadDouble = nullptr;
		pWrapperTable->m_OPCClient_ReadString = nullptr;
		pWrapperTable->m_OPCClient_WriteInteger = nullptr;
		pWrapperTable->m_OPCClient_WriteDouble = nullptr;
		pWrapperTable->m_OPCClient_WriteString = nullptr;
		pWrapperTable->m_GetVersion = nullptr;
		pWrapperTable->m_GetLastError = nullptr;
		pWrapperTable->m_AcquireInstance = nullptr;
		pWrapperTable->m_ReleaseInstance = nullptr;
		pWrapperTable->m_GetSymbolLookupMethod = nullptr;
		pWrapperTable->m_CreateClient = nullptr;
		
		return LIBOPEN62541_SUCCESS;
	}

	inline LibOpen62541Result CWrapper::releaseWrapperTable(sLibOpen62541DynamicWrapperTable * pWrapperTable)
	{
		if (pWrapperTable == nullptr)
			return LIBOPEN62541_ERROR_INVALIDPARAM;
		
		if (pWrapperTable->m_LibraryHandle != nullptr) {
		#ifdef _WIN32
			HMODULE hModule = (HMODULE) pWrapperTable->m_LibraryHandle;
			FreeLibrary(hModule);
		#else // _WIN32
			dlclose(pWrapperTable->m_LibraryHandle);
		#endif // _WIN32
			return initWrapperTable(pWrapperTable);
		}
		
		return LIBOPEN62541_SUCCESS;
	}

	inline LibOpen62541Result CWrapper::loadWrapperTable(sLibOpen62541DynamicWrapperTable * pWrapperTable, const char * pLibraryFileName)
	{
		if (pWrapperTable == nullptr)
			return LIBOPEN62541_ERROR_INVALIDPARAM;
		if (pLibraryFileName == nullptr)
			return LIBOPEN62541_ERROR_INVALIDPARAM;
		
		#ifdef _WIN32
		// Convert filename to UTF16-string
		int nLength = 0;
		while ((pLibraryFileName[nLength] != 0) && (nLength < MAX_PATH))
			nLength++;
		int nBufferSize = nLength * 2 + 2;
		std::vector<wchar_t> wsLibraryFileName(nBufferSize);
		int nResult = MultiByteToWideChar(CP_UTF8, 0, pLibraryFileName, nLength, &wsLibraryFileName[0], nBufferSize);
		if (nResult == 0)
			return LIBOPEN62541_ERROR_COULDNOTLOADLIBRARY;
		
		HMODULE hLibrary = LoadLibraryW(wsLibraryFileName.data());
		if (hLibrary == 0) 
			return LIBOPEN62541_ERROR_COULDNOTLOADLIBRARY;
		#else // _WIN32
		void* hLibrary = dlopen(pLibraryFileName, RTLD_LAZY);
		if (hLibrary == 0) 
			return LIBOPEN62541_ERROR_COULDNOTLOADLIBRARY;
		dlerror();
		#endif // _WIN32
		
		#ifdef _WIN32
		pWrapperTable->m_OPCClient_EnableEncryption = (PLibOpen62541OPCClient_EnableEncryptionPtr) GetProcAddress(hLibrary, "libopen62541_opcclient_enableencryption");
		#else // _WIN32
		pWrapperTable->m_OPCClient_EnableEncryption = (PLibOpen62541OPCClient_EnableEncryptionPtr) dlsym(hLibrary, "libopen62541_opcclient_enableencryption");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_OPCClient_EnableEncryption == nullptr)
			return LIBOPEN62541_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_OPCClient_DisableEncryption = (PLibOpen62541OPCClient_DisableEncryptionPtr) GetProcAddress(hLibrary, "libopen62541_opcclient_disableencryption");
		#else // _WIN32
		pWrapperTable->m_OPCClient_DisableEncryption = (PLibOpen62541OPCClient_DisableEncryptionPtr) dlsym(hLibrary, "libopen62541_opcclient_disableencryption");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_OPCClient_DisableEncryption == nullptr)
			return LIBOPEN62541_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_OPCClient_ConnectUserName = (PLibOpen62541OPCClient_ConnectUserNamePtr) GetProcAddress(hLibrary, "libopen62541_opcclient_connectusername");
		#else // _WIN32
		pWrapperTable->m_OPCClient_ConnectUserName = (PLibOpen62541OPCClient_ConnectUserNamePtr) dlsym(hLibrary, "libopen62541_opcclient_connectusername");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_OPCClient_ConnectUserName == nullptr)
			return LIBOPEN62541_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_OPCClient_Disconnect = (PLibOpen62541OPCClient_DisconnectPtr) GetProcAddress(hLibrary, "libopen62541_opcclient_disconnect");
		#else // _WIN32
		pWrapperTable->m_OPCClient_Disconnect = (PLibOpen62541OPCClient_DisconnectPtr) dlsym(hLibrary, "libopen62541_opcclient_disconnect");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_OPCClient_Disconnect == nullptr)
			return LIBOPEN62541_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_OPCClient_IsConnected = (PLibOpen62541OPCClient_IsConnectedPtr) GetProcAddress(hLibrary, "libopen62541_opcclient_isconnected");
		#else // _WIN32
		pWrapperTable->m_OPCClient_IsConnected = (PLibOpen62541OPCClient_IsConnectedPtr) dlsym(hLibrary, "libopen62541_opcclient_isconnected");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_OPCClient_IsConnected == nullptr)
			return LIBOPEN62541_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_OPCClient_ReadInteger = (PLibOpen62541OPCClient_ReadIntegerPtr) GetProcAddress(hLibrary, "libopen62541_opcclient_readinteger");
		#else // _WIN32
		pWrapperTable->m_OPCClient_ReadInteger = (PLibOpen62541OPCClient_ReadIntegerPtr) dlsym(hLibrary, "libopen62541_opcclient_readinteger");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_OPCClient_ReadInteger == nullptr)
			return LIBOPEN62541_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_OPCClient_ReadDouble = (PLibOpen62541OPCClient_ReadDoublePtr) GetProcAddress(hLibrary, "libopen62541_opcclient_readdouble");
		#else // _WIN32
		pWrapperTable->m_OPCClient_ReadDouble = (PLibOpen62541OPCClient_ReadDoublePtr) dlsym(hLibrary, "libopen62541_opcclient_readdouble");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_OPCClient_ReadDouble == nullptr)
			return LIBOPEN62541_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_OPCClient_ReadString = (PLibOpen62541OPCClient_ReadStringPtr) GetProcAddress(hLibrary, "libopen62541_opcclient_readstring");
		#else // _WIN32
		pWrapperTable->m_OPCClient_ReadString = (PLibOpen62541OPCClient_ReadStringPtr) dlsym(hLibrary, "libopen62541_opcclient_readstring");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_OPCClient_ReadString == nullptr)
			return LIBOPEN62541_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_OPCClient_WriteInteger = (PLibOpen62541OPCClient_WriteIntegerPtr) GetProcAddress(hLibrary, "libopen62541_opcclient_writeinteger");
		#else // _WIN32
		pWrapperTable->m_OPCClient_WriteInteger = (PLibOpen62541OPCClient_WriteIntegerPtr) dlsym(hLibrary, "libopen62541_opcclient_writeinteger");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_OPCClient_WriteInteger == nullptr)
			return LIBOPEN62541_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_OPCClient_WriteDouble = (PLibOpen62541OPCClient_WriteDoublePtr) GetProcAddress(hLibrary, "libopen62541_opcclient_writedouble");
		#else // _WIN32
		pWrapperTable->m_OPCClient_WriteDouble = (PLibOpen62541OPCClient_WriteDoublePtr) dlsym(hLibrary, "libopen62541_opcclient_writedouble");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_OPCClient_WriteDouble == nullptr)
			return LIBOPEN62541_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_OPCClient_WriteString = (PLibOpen62541OPCClient_WriteStringPtr) GetProcAddress(hLibrary, "libopen62541_opcclient_writestring");
		#else // _WIN32
		pWrapperTable->m_OPCClient_WriteString = (PLibOpen62541OPCClient_WriteStringPtr) dlsym(hLibrary, "libopen62541_opcclient_writestring");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_OPCClient_WriteString == nullptr)
			return LIBOPEN62541_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GetVersion = (PLibOpen62541GetVersionPtr) GetProcAddress(hLibrary, "libopen62541_getversion");
		#else // _WIN32
		pWrapperTable->m_GetVersion = (PLibOpen62541GetVersionPtr) dlsym(hLibrary, "libopen62541_getversion");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GetVersion == nullptr)
			return LIBOPEN62541_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GetLastError = (PLibOpen62541GetLastErrorPtr) GetProcAddress(hLibrary, "libopen62541_getlasterror");
		#else // _WIN32
		pWrapperTable->m_GetLastError = (PLibOpen62541GetLastErrorPtr) dlsym(hLibrary, "libopen62541_getlasterror");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GetLastError == nullptr)
			return LIBOPEN62541_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_AcquireInstance = (PLibOpen62541AcquireInstancePtr) GetProcAddress(hLibrary, "libopen62541_acquireinstance");
		#else // _WIN32
		pWrapperTable->m_AcquireInstance = (PLibOpen62541AcquireInstancePtr) dlsym(hLibrary, "libopen62541_acquireinstance");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_AcquireInstance == nullptr)
			return LIBOPEN62541_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ReleaseInstance = (PLibOpen62541ReleaseInstancePtr) GetProcAddress(hLibrary, "libopen62541_releaseinstance");
		#else // _WIN32
		pWrapperTable->m_ReleaseInstance = (PLibOpen62541ReleaseInstancePtr) dlsym(hLibrary, "libopen62541_releaseinstance");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ReleaseInstance == nullptr)
			return LIBOPEN62541_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GetSymbolLookupMethod = (PLibOpen62541GetSymbolLookupMethodPtr) GetProcAddress(hLibrary, "libopen62541_getsymbollookupmethod");
		#else // _WIN32
		pWrapperTable->m_GetSymbolLookupMethod = (PLibOpen62541GetSymbolLookupMethodPtr) dlsym(hLibrary, "libopen62541_getsymbollookupmethod");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GetSymbolLookupMethod == nullptr)
			return LIBOPEN62541_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_CreateClient = (PLibOpen62541CreateClientPtr) GetProcAddress(hLibrary, "libopen62541_createclient");
		#else // _WIN32
		pWrapperTable->m_CreateClient = (PLibOpen62541CreateClientPtr) dlsym(hLibrary, "libopen62541_createclient");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_CreateClient == nullptr)
			return LIBOPEN62541_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		pWrapperTable->m_LibraryHandle = hLibrary;
		return LIBOPEN62541_SUCCESS;
	}

	inline LibOpen62541Result CWrapper::loadWrapperTableFromSymbolLookupMethod(sLibOpen62541DynamicWrapperTable * pWrapperTable, void* pSymbolLookupMethod)
{
		if (pWrapperTable == nullptr)
			return LIBOPEN62541_ERROR_INVALIDPARAM;
		if (pSymbolLookupMethod == nullptr)
			return LIBOPEN62541_ERROR_INVALIDPARAM;
		
		typedef LibOpen62541Result(*SymbolLookupType)(const char*, void**);
		
		SymbolLookupType pLookup = (SymbolLookupType)pSymbolLookupMethod;
		
		LibOpen62541Result eLookupError = LIBOPEN62541_SUCCESS;
		eLookupError = (*pLookup)("libopen62541_opcclient_enableencryption", (void**)&(pWrapperTable->m_OPCClient_EnableEncryption));
		if ( (eLookupError != 0) || (pWrapperTable->m_OPCClient_EnableEncryption == nullptr) )
			return LIBOPEN62541_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libopen62541_opcclient_disableencryption", (void**)&(pWrapperTable->m_OPCClient_DisableEncryption));
		if ( (eLookupError != 0) || (pWrapperTable->m_OPCClient_DisableEncryption == nullptr) )
			return LIBOPEN62541_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libopen62541_opcclient_connectusername", (void**)&(pWrapperTable->m_OPCClient_ConnectUserName));
		if ( (eLookupError != 0) || (pWrapperTable->m_OPCClient_ConnectUserName == nullptr) )
			return LIBOPEN62541_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libopen62541_opcclient_disconnect", (void**)&(pWrapperTable->m_OPCClient_Disconnect));
		if ( (eLookupError != 0) || (pWrapperTable->m_OPCClient_Disconnect == nullptr) )
			return LIBOPEN62541_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libopen62541_opcclient_isconnected", (void**)&(pWrapperTable->m_OPCClient_IsConnected));
		if ( (eLookupError != 0) || (pWrapperTable->m_OPCClient_IsConnected == nullptr) )
			return LIBOPEN62541_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libopen62541_opcclient_readinteger", (void**)&(pWrapperTable->m_OPCClient_ReadInteger));
		if ( (eLookupError != 0) || (pWrapperTable->m_OPCClient_ReadInteger == nullptr) )
			return LIBOPEN62541_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libopen62541_opcclient_readdouble", (void**)&(pWrapperTable->m_OPCClient_ReadDouble));
		if ( (eLookupError != 0) || (pWrapperTable->m_OPCClient_ReadDouble == nullptr) )
			return LIBOPEN62541_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libopen62541_opcclient_readstring", (void**)&(pWrapperTable->m_OPCClient_ReadString));
		if ( (eLookupError != 0) || (pWrapperTable->m_OPCClient_ReadString == nullptr) )
			return LIBOPEN62541_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libopen62541_opcclient_writeinteger", (void**)&(pWrapperTable->m_OPCClient_WriteInteger));
		if ( (eLookupError != 0) || (pWrapperTable->m_OPCClient_WriteInteger == nullptr) )
			return LIBOPEN62541_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libopen62541_opcclient_writedouble", (void**)&(pWrapperTable->m_OPCClient_WriteDouble));
		if ( (eLookupError != 0) || (pWrapperTable->m_OPCClient_WriteDouble == nullptr) )
			return LIBOPEN62541_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libopen62541_opcclient_writestring", (void**)&(pWrapperTable->m_OPCClient_WriteString));
		if ( (eLookupError != 0) || (pWrapperTable->m_OPCClient_WriteString == nullptr) )
			return LIBOPEN62541_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libopen62541_getversion", (void**)&(pWrapperTable->m_GetVersion));
		if ( (eLookupError != 0) || (pWrapperTable->m_GetVersion == nullptr) )
			return LIBOPEN62541_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libopen62541_getlasterror", (void**)&(pWrapperTable->m_GetLastError));
		if ( (eLookupError != 0) || (pWrapperTable->m_GetLastError == nullptr) )
			return LIBOPEN62541_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libopen62541_acquireinstance", (void**)&(pWrapperTable->m_AcquireInstance));
		if ( (eLookupError != 0) || (pWrapperTable->m_AcquireInstance == nullptr) )
			return LIBOPEN62541_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libopen62541_releaseinstance", (void**)&(pWrapperTable->m_ReleaseInstance));
		if ( (eLookupError != 0) || (pWrapperTable->m_ReleaseInstance == nullptr) )
			return LIBOPEN62541_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libopen62541_getsymbollookupmethod", (void**)&(pWrapperTable->m_GetSymbolLookupMethod));
		if ( (eLookupError != 0) || (pWrapperTable->m_GetSymbolLookupMethod == nullptr) )
			return LIBOPEN62541_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libopen62541_createclient", (void**)&(pWrapperTable->m_CreateClient));
		if ( (eLookupError != 0) || (pWrapperTable->m_CreateClient == nullptr) )
			return LIBOPEN62541_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		return LIBOPEN62541_SUCCESS;
}

	
	
	/**
	 * Method definitions for class CBase
	 */
	
	/**
	 * Method definitions for class COPCClient
	 */
	
	/**
	* COPCClient::EnableEncryption - Enables encryption for subsequent connects.
	* @param[in] sLocalCertificate - Local Certificate String
	* @param[in] sPrivateKey - Private Key
	* @param[in] eSecurityMode - Security mode to use.
	*/
	void COPCClient::EnableEncryption(const std::string & sLocalCertificate, const std::string & sPrivateKey, const eUASecurityMode eSecurityMode)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_OPCClient_EnableEncryption(m_pHandle, sLocalCertificate.c_str(), sPrivateKey.c_str(), eSecurityMode));
	}
	
	/**
	* COPCClient::DisableEncryption - Enables encryption for subsequent connects.
	*/
	void COPCClient::DisableEncryption()
	{
		CheckError(m_pWrapper->m_WrapperTable.m_OPCClient_DisableEncryption(m_pHandle));
	}
	
	/**
	* COPCClient::ConnectUserName - Connects to the end point with a user name and password.
	* @param[in] sEndPointURL - End point URL to connect to.
	* @param[in] sUsername - User login.
	* @param[in] sPassword - Password.
	* @param[in] sApplicationURL - Application URL to use.
	*/
	void COPCClient::ConnectUserName(const std::string & sEndPointURL, const std::string & sUsername, const std::string & sPassword, const std::string & sApplicationURL)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_OPCClient_ConnectUserName(m_pHandle, sEndPointURL.c_str(), sUsername.c_str(), sPassword.c_str(), sApplicationURL.c_str()));
	}
	
	/**
	* COPCClient::Disconnect - Disconnect from the end point. Does nothing if not connected
	*/
	void COPCClient::Disconnect()
	{
		CheckError(m_pWrapper->m_WrapperTable.m_OPCClient_Disconnect(m_pHandle));
	}
	
	/**
	* COPCClient::IsConnected - Returns if an end point is connected.
	* @return Returns true if connected.
	*/
	bool COPCClient::IsConnected()
	{
		bool resultValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_OPCClient_IsConnected(m_pHandle, &resultValue));
		
		return resultValue;
	}
	
	/**
	* COPCClient::ReadInteger - Reads an integer node value. Fails if not connected or node does not exist.
	* @param[in] nNameSpace - Namespace ID
	* @param[in] sNodeName - NodeToRead
	* @param[in] eNodeType - Type of Node to read
	* @return Retrieved Node Value
	*/
	LibOpen62541_int64 COPCClient::ReadInteger(const LibOpen62541_uint32 nNameSpace, const std::string & sNodeName, const eUAIntegerType eNodeType)
	{
		LibOpen62541_int64 resultValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_OPCClient_ReadInteger(m_pHandle, nNameSpace, sNodeName.c_str(), eNodeType, &resultValue));
		
		return resultValue;
	}
	
	/**
	* COPCClient::ReadDouble - Reads a double node value. Fails if not connected or node does not exist.
	* @param[in] nNameSpace - Namespace ID
	* @param[in] sNodeName - NodeToRead
	* @param[in] eNodeType - Type of Node to read
	* @return Retrieved Node Value
	*/
	LibOpen62541_double COPCClient::ReadDouble(const LibOpen62541_uint32 nNameSpace, const std::string & sNodeName, const eUADoubleType eNodeType)
	{
		LibOpen62541_double resultValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_OPCClient_ReadDouble(m_pHandle, nNameSpace, sNodeName.c_str(), eNodeType, &resultValue));
		
		return resultValue;
	}
	
	/**
	* COPCClient::ReadString - Reads a string node value. Fails if not connected or node does not exist.
	* @param[in] nNameSpace - Namespace ID
	* @param[in] sNodeName - NodeToRead
	* @return Retrieved String Value
	*/
	std::string COPCClient::ReadString(const LibOpen62541_uint32 nNameSpace, const std::string & sNodeName)
	{
		LibOpen62541_uint32 bytesNeededValue = 0;
		LibOpen62541_uint32 bytesWrittenValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_OPCClient_ReadString(m_pHandle, nNameSpace, sNodeName.c_str(), 0, &bytesNeededValue, nullptr));
		std::vector<char> bufferValue(bytesNeededValue);
		CheckError(m_pWrapper->m_WrapperTable.m_OPCClient_ReadString(m_pHandle, nNameSpace, sNodeName.c_str(), bytesNeededValue, &bytesWrittenValue, &bufferValue[0]));
		
		return std::string(&bufferValue[0]);
	}
	
	/**
	* COPCClient::WriteInteger - Writes an integer node value. Fails if not connected or node does not exist.
	* @param[in] nNameSpace - Namespace ID
	* @param[in] sNodeName - NodeToRead
	* @param[in] eNodeType - Type of Node to write
	* @param[in] nValue - Node Value to write
	*/
	void COPCClient::WriteInteger(const LibOpen62541_uint32 nNameSpace, const std::string & sNodeName, const eUAIntegerType eNodeType, const LibOpen62541_int64 nValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_OPCClient_WriteInteger(m_pHandle, nNameSpace, sNodeName.c_str(), eNodeType, nValue));
	}
	
	/**
	* COPCClient::WriteDouble - Writes a double node value. Fails if not connected or node does not exist.
	* @param[in] nNameSpace - Namespace ID
	* @param[in] sNodeName - NodeToRead
	* @param[in] eNodeType - Type of Node to write
	* @param[in] dValue - Node Value to write
	*/
	void COPCClient::WriteDouble(const LibOpen62541_uint32 nNameSpace, const std::string & sNodeName, const eUADoubleType eNodeType, const LibOpen62541_double dValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_OPCClient_WriteDouble(m_pHandle, nNameSpace, sNodeName.c_str(), eNodeType, dValue));
	}
	
	/**
	* COPCClient::WriteString - Writes a string node value. Fails if not connected.
	* @param[in] nNameSpace - Namespace ID
	* @param[in] sNodeName - NodeToRead
	* @param[in] sValue - Node Value to write
	*/
	void COPCClient::WriteString(const LibOpen62541_uint32 nNameSpace, const std::string & sNodeName, const std::string & sValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_OPCClient_WriteString(m_pHandle, nNameSpace, sNodeName.c_str(), sValue.c_str()));
	}

} // namespace LibOpen62541

#endif // __LIBOPEN62541_CPPHEADER_DYNAMIC_CPP

