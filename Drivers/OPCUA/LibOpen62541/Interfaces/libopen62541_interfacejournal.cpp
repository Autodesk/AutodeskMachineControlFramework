/*++

Copyright (C) 2024 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.8.0-develop.

Abstract: This is an autogenerated C++ implementation file in order to allow easy
development of Library Wrapper for open62541 OPCUA Library. It provides an automatic Journaling mechanism for the library implementation.

Interface version: 1.2.0

*/


#include <string>
#include <sstream>
#include <iomanip>

#include "libopen62541_interfacejournal.hpp"
#include "libopen62541_interfaceexception.hpp"


std::string LibOpen62541HandleToHex (LibOpen62541Handle pHandle)
{
	std::stringstream stream;
	stream << std::setfill('0') << std::setw(sizeof(LibOpen62541_uint64) * 2)
		<< std::hex << (LibOpen62541_uint64) pHandle;
	return stream.str();
}

CLibOpen62541InterfaceJournalEntry::CLibOpen62541InterfaceJournalEntry(CLibOpen62541InterfaceJournal * pJournal, std::string sClassName, std::string sMethodName, LibOpen62541Handle pInstanceHandle)
	: m_pJournal(pJournal), m_ErrorCode(LIBOPEN62541_SUCCESS), m_sClassName(sClassName), m_sMethodName(sMethodName), m_nInitTimeStamp(0), m_nFinishTimeStamp(0)
{
	if (pJournal == nullptr)
		throw ELibOpen62541InterfaceException(LIBOPEN62541_ERROR_INVALIDPARAM);
	m_nInitTimeStamp = m_pJournal->getTimeStamp ();
	m_sInstanceHandle = LibOpen62541HandleToHex (pInstanceHandle);
}

CLibOpen62541InterfaceJournalEntry::~CLibOpen62541InterfaceJournalEntry()
{
}

void CLibOpen62541InterfaceJournalEntry::addParameter(const std::string & sName, const std::string & sParameterType, const std::string & sParameterValue)
{
	m_sParameters.push_back(std::make_pair(std::make_pair(sName, sParameterType), sParameterValue));
}

void CLibOpen62541InterfaceJournalEntry::addResult(const std::string & sName, const std::string & sResultType, const std::string & sResultValue)
{
	m_sResultValues.push_back(std::make_pair(std::make_pair(sName, sResultType), sResultValue));
}

std::string CLibOpen62541InterfaceJournalEntry::getXMLString()
{
	std::stringstream sStream;
	LibOpen62541_uint64 nDuration = 0;

	if (m_nFinishTimeStamp > m_nInitTimeStamp)
		nDuration = m_nFinishTimeStamp - m_nInitTimeStamp;

	sStream << "    <entry";
	if (m_sClassName != "")
		sStream << " class=\"" << m_sClassName << "\"";
	sStream << " method=\"" << m_sMethodName << "\"";
	if (m_ErrorCode != LIBOPEN62541_SUCCESS)
		sStream << " errorcode=\"" << m_ErrorCode << "\"";
	sStream << " timestamp=\"" << m_nInitTimeStamp << "\" duration=\"" << nDuration << "\">\n";

	if (m_sClassName != "")
		sStream << "        <instance handle=\"" << m_sInstanceHandle << "\" />\n";

	auto iParamIter = m_sParameters.begin();
	while (iParamIter != m_sParameters.end()) {
		sStream << "        <parameter name=\"" << iParamIter->first.first << "\" type=\"" << iParamIter->first.second << "\" value=\"" << iParamIter->second <<"\" />\n";
		iParamIter++;
	}

	auto iResultIter = m_sResultValues.begin();
	while (iResultIter != m_sResultValues.end()) {
		sStream << "        <result name=\"" << iResultIter->first.first << "\" type=\"" << iResultIter->first.second << "\" value=\"" << iResultIter->second << "\" />\n";
		iResultIter++;
	}

	sStream << "    </entry>\n";
	return sStream.str ();
}

void CLibOpen62541InterfaceJournalEntry::writeSuccess()
{
	writeError(LIBOPEN62541_SUCCESS);
}

void CLibOpen62541InterfaceJournalEntry::writeError(LibOpen62541Result nErrorCode)
{
	m_ErrorCode = nErrorCode;
	m_nFinishTimeStamp = m_pJournal->getTimeStamp();
	m_pJournal->writeEntry(this);
}

void CLibOpen62541InterfaceJournalEntry::addBooleanParameter(const std::string & sName, const bool bValue)
{
	addParameter (sName, "bool", std::to_string((int)bValue));
}

void CLibOpen62541InterfaceJournalEntry::addUInt8Parameter(const std::string & sName, const LibOpen62541_uint8 nValue)
{
	addParameter(sName, "uint8", std::to_string(nValue));
}

void CLibOpen62541InterfaceJournalEntry::addUInt16Parameter(const std::string & sName, const LibOpen62541_uint16 nValue)
{
	addParameter(sName, "uint16", std::to_string(nValue));
}

void CLibOpen62541InterfaceJournalEntry::addUInt32Parameter(const std::string & sName, const LibOpen62541_uint32 nValue)
{
	addParameter(sName, "uint32", std::to_string(nValue));
}

void CLibOpen62541InterfaceJournalEntry::addUInt64Parameter(const std::string & sName, const LibOpen62541_uint64 nValue)
{
	addParameter(sName, "uint64", std::to_string(nValue));
}

void CLibOpen62541InterfaceJournalEntry::addInt8Parameter(const std::string & sName, const LibOpen62541_int8 nValue)
{
	addParameter(sName, "int8", std::to_string(nValue));
}

void CLibOpen62541InterfaceJournalEntry::addInt16Parameter(const std::string & sName, const LibOpen62541_int16 nValue)
{
	addParameter(sName, "int16", std::to_string(nValue));
}

void CLibOpen62541InterfaceJournalEntry::addInt32Parameter(const std::string & sName, const LibOpen62541_int32 nValue)
{
	addParameter(sName, "uint32", std::to_string(nValue));
}

void CLibOpen62541InterfaceJournalEntry::addInt64Parameter(const std::string & sName, const LibOpen62541_int64 nValue)
{
	addParameter(sName, "int64", std::to_string(nValue));
}

void CLibOpen62541InterfaceJournalEntry::addSingleParameter(const std::string & sName,  const LibOpen62541_single fValue)
{
	addParameter(sName, "single", std::to_string(fValue));
}

void CLibOpen62541InterfaceJournalEntry::addDoubleParameter(const std::string & sName, const LibOpen62541_double dValue)
{
	addParameter(sName, "double", std::to_string(dValue));
}
void CLibOpen62541InterfaceJournalEntry::addPointerParameter(const std::string & sName, const LibOpen62541_pvoid pValue)
{
	addParameter(sName, "pointer", std::to_string(reinterpret_cast<const LibOpen62541_uint64>(pValue)));
}

void CLibOpen62541InterfaceJournalEntry::addStringParameter(const std::string & sName, const char * pValue)
{
	if (pValue != nullptr) {
		addParameter(sName, "string", pValue);
	}
	else {
		addParameter(sName, "nullstring", "");
	}
}

void CLibOpen62541InterfaceJournalEntry::addHandleParameter(const std::string & sName, const LibOpen62541Handle pHandle)
{
	addParameter(sName, "handle", LibOpen62541HandleToHex(pHandle));
}

void CLibOpen62541InterfaceJournalEntry::addEnumParameter(const std::string & sName, const std::string & sEnumType, const LibOpen62541_int32 nValue)
{
	addParameter(sName, "enum" + sEnumType, std::to_string(nValue));
}

void CLibOpen62541InterfaceJournalEntry::addBooleanResult(const std::string & sName, const bool bValue)
{
	addResult(sName, "bool", std::to_string((int)bValue));
}

void CLibOpen62541InterfaceJournalEntry::addUInt8Result(const std::string & sName, const LibOpen62541_uint8 nValue)
{
	addResult(sName, "uint8", std::to_string(nValue));
}

void CLibOpen62541InterfaceJournalEntry::addUInt16Result(const std::string & sName, const LibOpen62541_uint16 nValue)
{
	addResult(sName, "uint16", std::to_string(nValue));
}

void CLibOpen62541InterfaceJournalEntry::addUInt32Result(const std::string & sName, const LibOpen62541_uint32 nValue)
{
	addResult(sName, "uint32", std::to_string(nValue));
}

void CLibOpen62541InterfaceJournalEntry::addUInt64Result(const std::string & sName, const LibOpen62541_uint64 nValue)
{
	addResult(sName, "uint64", std::to_string(nValue));
}

void CLibOpen62541InterfaceJournalEntry::addInt8Result(const std::string & sName, const LibOpen62541_int8 nValue)
{
	addResult(sName, "int8", std::to_string(nValue));
}

void CLibOpen62541InterfaceJournalEntry::addInt16Result(const std::string & sName, const LibOpen62541_int16 nValue)
{
	addResult(sName, "int16", std::to_string(nValue));
}

void CLibOpen62541InterfaceJournalEntry::addInt32Result(const std::string & sName, const LibOpen62541_int32 nValue)
{
	addResult(sName, "uint32", std::to_string(nValue));
}

void CLibOpen62541InterfaceJournalEntry::addInt64Result(const std::string & sName, const LibOpen62541_int64 nValue)
{
	addResult(sName, "int64", std::to_string(nValue));
}

void CLibOpen62541InterfaceJournalEntry::addSingleResult(const std::string & sName,  const LibOpen62541_single fValue)
{
	addResult(sName, "single", std::to_string(fValue));
}

void CLibOpen62541InterfaceJournalEntry::addDoubleResult(const std::string & sName, const LibOpen62541_double dValue)
{
	addResult(sName, "double", std::to_string(dValue));
}

void CLibOpen62541InterfaceJournalEntry::addPointerResult(const std::string & sName, const LibOpen62541_pvoid pValue)
{
	addResult(sName, "pointer", std::to_string(reinterpret_cast<const LibOpen62541_uint64>(pValue)));
}

void CLibOpen62541InterfaceJournalEntry::addStringResult(const std::string & sName, const char * pValue)
{
	if (pValue != nullptr) {
		addResult(sName, "string", pValue);
	}
	else {
		addResult(sName, "nullstring", "");
	}
}

void CLibOpen62541InterfaceJournalEntry::addHandleResult(const std::string & sName, const LibOpen62541Handle pHandle)
{
	addResult(sName, "handle", LibOpen62541HandleToHex(pHandle));
}

void CLibOpen62541InterfaceJournalEntry::addEnumResult(const std::string & sName, const std::string & sEnumType, const LibOpen62541_int32 nValue)
{
	addResult(sName, "enum" + sEnumType, std::to_string(nValue));
}


CLibOpen62541InterfaceJournal::CLibOpen62541InterfaceJournal (const std::string & sFileName)
	: m_sFileName (sFileName)
{
	m_StartTime = std::chrono::high_resolution_clock::now();
	m_Stream.open (sFileName, std::ios::out);
	m_Stream << "<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n";
	m_Stream << "<journal library=\"LibOpen62541\" version=\"1.2.0\" xmlns=\"http://schemas.autodesk.com/components/LibOpen62541/1.2.0\">\n";
	m_Stream << "\n";

}

CLibOpen62541InterfaceJournal::~CLibOpen62541InterfaceJournal ()
{
	m_Stream << "</journal>\n";
}

PLibOpen62541InterfaceJournalEntry CLibOpen62541InterfaceJournal::beginClassMethod(const LibOpen62541Handle pHandle, const std::string & sClassName, const std::string & sMethodName)
{
	return std::make_shared<CLibOpen62541InterfaceJournalEntry>(this, sClassName, sMethodName, pHandle);
}

PLibOpen62541InterfaceJournalEntry CLibOpen62541InterfaceJournal::beginStaticFunction(const std::string & sMethodName)
{
	return std::make_shared<CLibOpen62541InterfaceJournalEntry>(this, "", sMethodName, nullptr);
}

void CLibOpen62541InterfaceJournal::writeEntry (CLibOpen62541InterfaceJournalEntry * pEntry)
{
	if (pEntry == nullptr)
		throw ELibOpen62541InterfaceException (LIBOPEN62541_ERROR_INVALIDPARAM);

	std::string sXMLString = pEntry->getXMLString();
	m_Mutex.lock();
	try {
		m_Stream << sXMLString;
		m_Stream << "\n";

		m_Mutex.unlock();
	}
	catch (...) {
		m_Mutex.unlock();
	}
}

LibOpen62541_uint64 CLibOpen62541InterfaceJournal::getTimeStamp ()
{
	auto currentTime = std::chrono::high_resolution_clock::now();
	if (m_StartTime < currentTime) {
		auto duration = currentTime - m_StartTime;
		auto milliSeconds = std::chrono::duration_cast<std::chrono::milliseconds> (duration);

		return (LibOpen62541_uint64) milliSeconds.count();
	}
	else {
		return 0;
	}

}

