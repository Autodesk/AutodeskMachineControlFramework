/*++

Copyright (C) 2024 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.8.0-develop.

Abstract: This is an autogenerated C++ header file in order to allow easy
development of Library Wrapper for open62541 OPCUA Library. The implementer of Library Wrapper for open62541 OPCUA Library needs to
derive concrete classes from the abstract classes in this header.

Interface version: 1.2.0

*/


#ifndef __LIBOPEN62541_CPPINTERFACES
#define __LIBOPEN62541_CPPINTERFACES

#include <string>
#include <memory>

#include "libopen62541_types.hpp"



namespace LibOpen62541 {
namespace Impl {

/**
 Forward declarations of class interfaces
*/
class IBase;
class IOPCClient;



/*************************************************************************************************************************
 Parameter Cache definitions
**************************************************************************************************************************/

class ParameterCache {
	public:
		virtual ~ParameterCache() {}
};

template <class T1> class ParameterCache_1 : public ParameterCache {
	private:
		T1 m_param1;
	public:
		ParameterCache_1 (const T1 & param1)
			: m_param1 (param1)
		{
		}

		void retrieveData (T1 & param1)
		{
			param1 = m_param1;
		}
};

template <class T1, class T2> class ParameterCache_2 : public ParameterCache {
	private:
		T1 m_param1;
		T2 m_param2;
	public:
		ParameterCache_2 (const T1 & param1, const T2 & param2)
			: m_param1 (param1), m_param2 (param2)
		{
		}

		void retrieveData (T1 & param1, T2 & param2)
		{
			param1 = m_param1;
			param2 = m_param2;
		}
};

template <class T1, class T2, class T3> class ParameterCache_3 : public ParameterCache {
	private:
		T1 m_param1;
		T2 m_param2;
		T3 m_param3;
	public:
		ParameterCache_3 (const T1 & param1, const T2 & param2, const T3 & param3)
			: m_param1 (param1), m_param2 (param2), m_param3 (param3)
		{
		}

		void retrieveData (T1 & param1, T2 & param2, T3 & param3)
		{
			param1 = m_param1;
			param2 = m_param2;
			param3 = m_param3;
		}
};


/*************************************************************************************************************************
 Class interface for Base 
**************************************************************************************************************************/

class IBase {
private:
	std::unique_ptr<ParameterCache> m_ParameterCache;
public:
	/**
	* IBase::~IBase - virtual destructor of IBase
	*/
	virtual ~IBase() {};

	/**
	* IBase::ReleaseBaseClassInterface - Releases ownership of a base class interface. Deletes the reference, if necessary.
	* @param[in] pIBase - The base class instance to release
	*/
	static void ReleaseBaseClassInterface(IBase* pIBase)
	{
		if (pIBase) {
			pIBase->DecRefCount();
		}
	};

	/**
	* IBase::AcquireBaseClassInterface - Acquires shared ownership of a base class interface.
	* @param[in] pIBase - The base class instance to acquire
	*/
	static void AcquireBaseClassInterface(IBase* pIBase)
	{
		if (pIBase) {
			pIBase->IncRefCount();
		}
	};


	/**
	* IBase::GetLastErrorMessage - Returns the last error registered of this class instance
	* @param[out] sErrorMessage - Message of the last error registered
	* @return Has an error been registered already
	*/
	virtual bool GetLastErrorMessage(std::string & sErrorMessage) = 0;

	/**
	* IBase::ClearErrorMessages - Clears all registered messages of this class instance
	*/
	virtual void ClearErrorMessages() = 0;

	/**
	* IBase::RegisterErrorMessage - Registers an error message with this class instance
	* @param[in] sErrorMessage - Error message to register
	*/
	virtual void RegisterErrorMessage(const std::string & sErrorMessage) = 0;

	/**
	* IBase::IncRefCount - Increases the reference count of a class instance
	*/
	virtual void IncRefCount() = 0;

	/**
	* IBase::DecRefCount - Decreases the reference count of a class instance and free releases it, if the last reference has been removed
	* @return Has the object been released
	*/
	virtual bool DecRefCount() = 0;

	/**
	* IBase::_setCache - set parameter cache of object
	*/
	void _setCache(ParameterCache * pCache)
	{
		m_ParameterCache.reset(pCache);
	}

	/**
	* IBase::_getCache - returns parameter cache of object
	*/
	ParameterCache* _getCache()
	{
		return m_ParameterCache.get();
	}

};


/**
 Definition of a shared pointer class for IBase
*/
template<class T>
class IBaseSharedPtr : public std::shared_ptr<T>
{
public:
	explicit IBaseSharedPtr(T* t = nullptr)
		: std::shared_ptr<T>(t, IBase::ReleaseBaseClassInterface)
	{
		t->IncRefCount();
	}

	// Reset function, as it also needs to properly set the deleter.
	void reset(T* t = nullptr)
	{
		std::shared_ptr<T>::reset(t, IBase::ReleaseBaseClassInterface);
	}

	// Get-function that increases the Base class's reference count
	T* getCoOwningPtr()
	{
		T* t = this->get();
		t->IncRefCount();
		return t;
	}
};


typedef IBaseSharedPtr<IBase> PIBase;


/*************************************************************************************************************************
 Class interface for OPCClient 
**************************************************************************************************************************/

class IOPCClient : public virtual IBase {
public:
	/**
	* IOPCClient::EnableEncryption - Enables encryption for subsequent connects.
	* @param[in] sLocalCertificate - Local Certificate String
	* @param[in] sPrivateKey - Private Key
	* @param[in] eSecurityMode - Security mode to use.
	*/
	virtual void EnableEncryption(const std::string & sLocalCertificate, const std::string & sPrivateKey, const LibOpen62541::eUASecurityMode eSecurityMode) = 0;

	/**
	* IOPCClient::DisableEncryption - Enables encryption for subsequent connects.
	*/
	virtual void DisableEncryption() = 0;

	/**
	* IOPCClient::ConnectUserName - Connects to the end point with a user name and password.
	* @param[in] sEndPointURL - End point URL to connect to.
	* @param[in] sUsername - User login.
	* @param[in] sPassword - Password.
	* @param[in] sApplicationURL - Application URL to use.
	*/
	virtual void ConnectUserName(const std::string & sEndPointURL, const std::string & sUsername, const std::string & sPassword, const std::string & sApplicationURL) = 0;

	/**
	* IOPCClient::Disconnect - Disconnect from the end point. Does nothing if not connected
	*/
	virtual void Disconnect() = 0;

	/**
	* IOPCClient::IsConnected - Returns if an end point is connected.
	* @return Returns true if connected.
	*/
	virtual bool IsConnected() = 0;

	/**
	* IOPCClient::ReadInteger - Reads an integer node value. Fails if not connected or node does not exist.
	* @param[in] nNameSpace - Namespace ID
	* @param[in] sNodeName - NodeToRead
	* @param[in] eNodeType - Type of Node to read
	* @return Retrieved Node Value
	*/
	virtual LibOpen62541_int64 ReadInteger(const LibOpen62541_uint32 nNameSpace, const std::string & sNodeName, const LibOpen62541::eUAIntegerType eNodeType) = 0;

	/**
	* IOPCClient::ReadDouble - Reads a double node value. Fails if not connected or node does not exist.
	* @param[in] nNameSpace - Namespace ID
	* @param[in] sNodeName - NodeToRead
	* @param[in] eNodeType - Type of Node to read
	* @return Retrieved Node Value
	*/
	virtual LibOpen62541_double ReadDouble(const LibOpen62541_uint32 nNameSpace, const std::string & sNodeName, const LibOpen62541::eUADoubleType eNodeType) = 0;

	/**
	* IOPCClient::ReadString - Reads a string node value. Fails if not connected or node does not exist.
	* @param[in] nNameSpace - Namespace ID
	* @param[in] sNodeName - NodeToRead
	* @return Retrieved String Value
	*/
	virtual std::string ReadString(const LibOpen62541_uint32 nNameSpace, const std::string & sNodeName) = 0;

	/**
	* IOPCClient::WriteInteger - Writes an integer node value. Fails if not connected or node does not exist.
	* @param[in] nNameSpace - Namespace ID
	* @param[in] sNodeName - NodeToRead
	* @param[in] eNodeType - Type of Node to write
	* @param[in] nValue - Node Value to write
	*/
	virtual void WriteInteger(const LibOpen62541_uint32 nNameSpace, const std::string & sNodeName, const LibOpen62541::eUAIntegerType eNodeType, const LibOpen62541_int64 nValue) = 0;

	/**
	* IOPCClient::WriteDouble - Writes a double node value. Fails if not connected or node does not exist.
	* @param[in] nNameSpace - Namespace ID
	* @param[in] sNodeName - NodeToRead
	* @param[in] eNodeType - Type of Node to write
	* @param[in] dValue - Node Value to write
	*/
	virtual void WriteDouble(const LibOpen62541_uint32 nNameSpace, const std::string & sNodeName, const LibOpen62541::eUADoubleType eNodeType, const LibOpen62541_double dValue) = 0;

	/**
	* IOPCClient::WriteString - Writes a string node value. Fails if not connected.
	* @param[in] nNameSpace - Namespace ID
	* @param[in] sNodeName - NodeToRead
	* @param[in] sValue - Node Value to write
	*/
	virtual void WriteString(const LibOpen62541_uint32 nNameSpace, const std::string & sNodeName, const std::string & sValue) = 0;

};

typedef IBaseSharedPtr<IOPCClient> PIOPCClient;


/*************************************************************************************************************************
 Global functions declarations
**************************************************************************************************************************/
class CWrapper {
public:
	/**
	* Ilibopen62541::GetVersion - retrieves the binary version of this library.
	* @param[out] nMajor - returns the major version of this library
	* @param[out] nMinor - returns the minor version of this library
	* @param[out] nMicro - returns the micro version of this library
	*/
	static void GetVersion(LibOpen62541_uint32 & nMajor, LibOpen62541_uint32 & nMinor, LibOpen62541_uint32 & nMicro);

	/**
	* Ilibopen62541::GetLastError - Returns the last error recorded on this object
	* @param[in] pInstance - Instance Handle
	* @param[out] sErrorMessage - Message of the last error
	* @return Is there a last error to query
	*/
	static bool GetLastError(IBase* pInstance, std::string & sErrorMessage);

	/**
	* Ilibopen62541::AcquireInstance - Acquire shared ownership of an Instance
	* @param[in] pInstance - Instance Handle
	*/
	static void AcquireInstance(IBase* pInstance);

	/**
	* Ilibopen62541::ReleaseInstance - Releases shared ownership of an Instance
	* @param[in] pInstance - Instance Handle
	*/
	static void ReleaseInstance(IBase* pInstance);

	/**
	* Ilibopen62541::CreateClient - Creates an OPC Client
	* @return OPCClient Instance
	*/
	static IOPCClient * CreateClient();

};

LibOpen62541Result LibOpen62541_GetProcAddress (const char * pProcName, void ** ppProcAddress);

} // namespace Impl
} // namespace LibOpen62541

#endif // __LIBOPEN62541_CPPINTERFACES
