/*++

Copyright (C) 2024 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.8.0-develop.

Abstract: This is an autogenerated C++ header file in order to allow easy
development of Library Wrapper for open62541 OPCUA Library. It provides an automatic Journaling mechanism for the library implementation.

Interface version: 1.2.0

*/

#ifndef __LIBOPEN62541_INTERFACEJOURNAL_HEADER
#define __LIBOPEN62541_INTERFACEJOURNAL_HEADER

#include <iostream>
#include <fstream>
#include <string>
#include <memory>
#include <list>
#include <mutex>
#include <chrono>
#include "libopen62541_types.hpp"

/*************************************************************************************************************************
 Class CLibOpen62541InterfaceJournal 
**************************************************************************************************************************/

class CLibOpen62541InterfaceJournal;

class CLibOpen62541InterfaceJournalEntry {

	protected:

		CLibOpen62541InterfaceJournal * m_pJournal;
		LibOpen62541Result m_ErrorCode;
		std::string m_sClassName;
		std::string m_sMethodName;
		std::string m_sInstanceHandle;
		LibOpen62541_uint64 m_nInitTimeStamp;
		LibOpen62541_uint64 m_nFinishTimeStamp;
		std::list<std::pair<std::pair<std::string, std::string>, std::string>> m_sParameters;
		std::list<std::pair<std::pair<std::string, std::string>, std::string>> m_sResultValues;

		std::string getXMLString();
		void addParameter (const std::string & sName, const std::string & sParameterType, const std::string & sParameterValue);
		void addResult (const std::string & sName, const std::string & sResultType, const std::string & sResultValue);

	public:
		CLibOpen62541InterfaceJournalEntry(CLibOpen62541InterfaceJournal * pJournal, std::string sClassName, std::string sMethodName, LibOpen62541Handle pInstanceHandle);
		~CLibOpen62541InterfaceJournalEntry();

		void writeSuccess ();
		void writeError (LibOpen62541Result nErrorCode);

		void addBooleanParameter(const std::string & sName, const bool bValue);
		void addUInt8Parameter(const std::string & sName, const LibOpen62541_uint8 nValue);
		void addUInt16Parameter(const std::string & sName, const LibOpen62541_uint16 nValue);
		void addUInt32Parameter(const std::string & sName, const LibOpen62541_uint32 nValue);
		void addUInt64Parameter(const std::string & sName, const LibOpen62541_uint64 nValue);
		void addInt8Parameter(const std::string & sName, const LibOpen62541_int8 nValue);
		void addInt16Parameter(const std::string & sName, const LibOpen62541_int16 nValue);
		void addInt32Parameter(const std::string & sName, const LibOpen62541_int32 nValue);
		void addInt64Parameter(const std::string & sName, const LibOpen62541_int64 nValue);
		void addSingleParameter(const std::string & sName, const LibOpen62541_single fValue);
		void addDoubleParameter(const std::string & sName, const LibOpen62541_double dValue);
		void addPointerParameter(const std::string & sName, const LibOpen62541_pvoid pValue);
		void addStringParameter(const std::string & sName, const char * pValue);
		void addHandleParameter(const std::string & sName, const LibOpen62541Handle pHandle);
		void addEnumParameter(const std::string & sName, const std::string & sEnumType, const LibOpen62541_int32 nValue);

		void addBooleanResult(const std::string & sName, const bool bValue);
		void addUInt8Result(const std::string & sName, const LibOpen62541_uint8 nValue);
		void addUInt16Result(const std::string & sName, const LibOpen62541_uint16 nValue);
		void addUInt32Result(const std::string & sName, const LibOpen62541_uint32 nValue);
		void addUInt64Result(const std::string & sName, const LibOpen62541_uint64 nValue);
		void addInt8Result(const std::string & sName, const LibOpen62541_int8 nValue);
		void addInt16Result(const std::string & sName, const LibOpen62541_int16 nValue);
		void addInt32Result(const std::string & sName, const LibOpen62541_int32 nValue);
		void addInt64Result(const std::string & sName, const LibOpen62541_int64 nValue);
		void addSingleResult(const std::string & sName, const LibOpen62541_single fValue);
		void addDoubleResult(const std::string & sName, const LibOpen62541_double dValue);
		void addPointerResult(const std::string & sName, const LibOpen62541_pvoid pValue);
		void addStringResult(const std::string & sName, const char * pValue);
		void addHandleResult(const std::string & sName, const LibOpen62541Handle pHandle);
		void addEnumResult(const std::string & sName, const std::string & sEnumType, const LibOpen62541_int32 nValue);

friend class CLibOpen62541InterfaceJournal;

};

typedef std::shared_ptr<CLibOpen62541InterfaceJournalEntry> PLibOpen62541InterfaceJournalEntry;



class CLibOpen62541InterfaceJournal {

	protected:

		std::string m_sFileName;
		std::mutex m_Mutex;
		std::ofstream m_Stream;
		std::chrono::time_point<std::chrono::high_resolution_clock> m_StartTime;
		void writeEntry (CLibOpen62541InterfaceJournalEntry * pEntry);
		LibOpen62541_uint64 getTimeStamp ();

	public:

		CLibOpen62541InterfaceJournal (const std::string & sFileName);
		~CLibOpen62541InterfaceJournal ();
		PLibOpen62541InterfaceJournalEntry beginClassMethod (const LibOpen62541Handle pHandle, const std::string & sClassName, const std::string & sMethodName);
		PLibOpen62541InterfaceJournalEntry beginStaticFunction (const std::string & sMethodName);
		friend class CLibOpen62541InterfaceJournalEntry;
};

typedef std::shared_ptr<CLibOpen62541InterfaceJournal> PLibOpen62541InterfaceJournal;

#endif // __LIBOPEN62541_INTERFACEJOURNAL_HEADER

