/*++

Copyright (C) 2020 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.8.0-develop.

Abstract: This is an autogenerated C++-Header file in order to allow an easy
 use of MC Driver OPCUA

Interface version: 1.0.0

*/

#ifndef __LIBMCDRIVER_OPCUA_CPPHEADER_DYNAMIC_CPP
#define __LIBMCDRIVER_OPCUA_CPPHEADER_DYNAMIC_CPP

#include "libmcdriver_opcua_types.hpp"
#include "libmcdriver_opcua_dynamic.h"

#include "libmcenv_dynamic.hpp"

#ifdef _WIN32
#include <windows.h>
#else // _WIN32
#include <dlfcn.h>
#endif // _WIN32
#include <string>
#include <memory>
#include <vector>
#include <exception>

namespace LibMCDriver_OPCUA {

/*************************************************************************************************************************
 Forward Declaration of all classes
**************************************************************************************************************************/
class CWrapper;
class CBase;
class CDriver;
class CPLCCommand;
class CPLCCommandList;
class CDriver_OPCUA;

/*************************************************************************************************************************
 Declaration of deprecated class types
**************************************************************************************************************************/
typedef CWrapper CLibMCDriver_OPCUAWrapper;
typedef CBase CLibMCDriver_OPCUABase;
typedef CDriver CLibMCDriver_OPCUADriver;
typedef CPLCCommand CLibMCDriver_OPCUAPLCCommand;
typedef CPLCCommandList CLibMCDriver_OPCUAPLCCommandList;
typedef CDriver_OPCUA CLibMCDriver_OPCUADriver_OPCUA;

/*************************************************************************************************************************
 Declaration of shared pointer types
**************************************************************************************************************************/
typedef std::shared_ptr<CWrapper> PWrapper;
typedef std::shared_ptr<CBase> PBase;
typedef std::shared_ptr<CDriver> PDriver;
typedef std::shared_ptr<CPLCCommand> PPLCCommand;
typedef std::shared_ptr<CPLCCommandList> PPLCCommandList;
typedef std::shared_ptr<CDriver_OPCUA> PDriver_OPCUA;

/*************************************************************************************************************************
 Declaration of deprecated shared pointer types
**************************************************************************************************************************/
typedef PWrapper PLibMCDriver_OPCUAWrapper;
typedef PBase PLibMCDriver_OPCUABase;
typedef PDriver PLibMCDriver_OPCUADriver;
typedef PPLCCommand PLibMCDriver_OPCUAPLCCommand;
typedef PPLCCommandList PLibMCDriver_OPCUAPLCCommandList;
typedef PDriver_OPCUA PLibMCDriver_OPCUADriver_OPCUA;


/*************************************************************************************************************************
 classParam Definition
**************************************************************************************************************************/

template<class T> class classParam {
private:
	const T* m_ptr;

public:
	classParam(const T* ptr)
		: m_ptr (ptr)
	{
	}

	classParam(std::shared_ptr <T> sharedPtr)
		: m_ptr (sharedPtr.get())
	{
	}

	LibMCDriver_OPCUAHandle GetHandle()
	{
		if (m_ptr != nullptr)
			return m_ptr->handle();
		return nullptr;
	}
};

/*************************************************************************************************************************
 Class ELibMCDriver_OPCUAException 
**************************************************************************************************************************/
class ELibMCDriver_OPCUAException : public std::exception {
protected:
	/**
	* Error code for the Exception.
	*/
	LibMCDriver_OPCUAResult m_errorCode;
	/**
	* Error message for the Exception.
	*/
	std::string m_errorMessage;
	std::string m_originalErrorMessage;

public:
	/**
	* Exception Constructor.
	*/
	ELibMCDriver_OPCUAException(LibMCDriver_OPCUAResult errorCode, const std::string & sErrorMessage)
		: m_errorCode(errorCode), m_originalErrorMessage(sErrorMessage)
	{
		m_errorMessage = buildErrorMessage();
	}

	/**
	* Returns error code
	*/
	LibMCDriver_OPCUAResult getErrorCode() const noexcept
	{
		return m_errorCode;
	}

	/**
	* Returns error message
	*/
	const char* what() const noexcept
	{
		return m_errorMessage.c_str();
	}

	const char* getErrorMessage() const noexcept
	{
		return m_originalErrorMessage.c_str();
	}

	const char* getErrorName() const noexcept
	{
		switch(getErrorCode()) {
			case LIBMCDRIVER_OPCUA_SUCCESS: return "SUCCESS";
			case LIBMCDRIVER_OPCUA_ERROR_NOTIMPLEMENTED: return "NOTIMPLEMENTED";
			case LIBMCDRIVER_OPCUA_ERROR_INVALIDPARAM: return "INVALIDPARAM";
			case LIBMCDRIVER_OPCUA_ERROR_INVALIDCAST: return "INVALIDCAST";
			case LIBMCDRIVER_OPCUA_ERROR_BUFFERTOOSMALL: return "BUFFERTOOSMALL";
			case LIBMCDRIVER_OPCUA_ERROR_GENERICEXCEPTION: return "GENERICEXCEPTION";
			case LIBMCDRIVER_OPCUA_ERROR_COULDNOTLOADLIBRARY: return "COULDNOTLOADLIBRARY";
			case LIBMCDRIVER_OPCUA_ERROR_COULDNOTFINDLIBRARYEXPORT: return "COULDNOTFINDLIBRARYEXPORT";
			case LIBMCDRIVER_OPCUA_ERROR_INCOMPATIBLEBINARYVERSION: return "INCOMPATIBLEBINARYVERSION";
			case LIBMCDRIVER_OPCUA_ERROR_INVALIDSTATENAME: return "INVALIDSTATENAME";
			case LIBMCDRIVER_OPCUA_ERROR_DRIVERERROR: return "DRIVERERROR";
			case LIBMCDRIVER_OPCUA_ERROR_DRIVERNOTINITIALISED: return "DRIVERNOTINITIALISED";
			case LIBMCDRIVER_OPCUA_ERROR_DRIVERNOTCONNECTED: return "DRIVERNOTCONNECTED";
			case LIBMCDRIVER_OPCUA_ERROR_INVALIDDRIVERPROTOCOL: return "INVALIDDRIVERPROTOCOL";
			case LIBMCDRIVER_OPCUA_ERROR_COULDNOTPARSEDRIVERPROTOCOL: return "COULDNOTPARSEDRIVERPROTOCOL";
			case LIBMCDRIVER_OPCUA_ERROR_NOMACHINESTATUSDEFINITION: return "NOMACHINESTATUSDEFINITION";
			case LIBMCDRIVER_OPCUA_ERROR_NONAMEATTRIBUTE: return "NONAMEATTRIBUTE";
			case LIBMCDRIVER_OPCUA_ERROR_NOADDRESSEATTRIBUTE: return "NOADDRESSEATTRIBUTE";
			case LIBMCDRIVER_OPCUA_ERROR_NODESCRIPTIONATTRIBUTE: return "NODESCRIPTIONATTRIBUTE";
			case LIBMCDRIVER_OPCUA_ERROR_NOBITATTRIBUTE: return "NOBITATTRIBUTE";
			case LIBMCDRIVER_OPCUA_ERROR_INVALIDNAMEATTRIBUTE: return "INVALIDNAMEATTRIBUTE";
			case LIBMCDRIVER_OPCUA_ERROR_INVALIDADDRESSEATTRIBUTE: return "INVALIDADDRESSEATTRIBUTE";
			case LIBMCDRIVER_OPCUA_ERROR_INVALIDDESCRIPTIONATTRIBUTE: return "INVALIDDESCRIPTIONATTRIBUTE";
			case LIBMCDRIVER_OPCUA_ERROR_INVALIDBITATTRIBUTE: return "INVALIDBITATTRIBUTE";
			case LIBMCDRIVER_OPCUA_ERROR_INVALIDCPUTYPE: return "INVALIDCPUTYPE";
			case LIBMCDRIVER_OPCUA_ERROR_UNKNOWNCOMMANDNAME: return "UNKNOWNCOMMANDNAME";
			case LIBMCDRIVER_OPCUA_ERROR_NOCOMMANDNAME: return "NOCOMMANDNAME";
			case LIBMCDRIVER_OPCUA_ERROR_NOCOMMANDID: return "NOCOMMANDID";
			case LIBMCDRIVER_OPCUA_ERROR_INVALIDCOMMANDNAME: return "INVALIDCOMMANDNAME";
			case LIBMCDRIVER_OPCUA_ERROR_INVALIDCOMMANDID: return "INVALIDCOMMANDID";
			case LIBMCDRIVER_OPCUA_ERROR_COMMANDHASALREADYBEENEXECUTED: return "COMMANDHASALREADYBEENEXECUTED";
			case LIBMCDRIVER_OPCUA_ERROR_COMMANDHASNOTBEENEXECUTED: return "COMMANDHASNOTBEENEXECUTED";
			case LIBMCDRIVER_OPCUA_ERROR_INVALIDSEQUENCEID: return "INVALIDSEQUENCEID";
			case LIBMCDRIVER_OPCUA_ERROR_COMMANDSEQUENCEERROR: return "COMMANDSEQUENCEERROR";
			case LIBMCDRIVER_OPCUA_ERROR_COMMANDREACTIONTIMEOUT: return "COMMANDREACTIONTIMEOUT";
			case LIBMCDRIVER_OPCUA_ERROR_NOCOMMANDSDEFINITION: return "NOCOMMANDSDEFINITION";
			case LIBMCDRIVER_OPCUA_ERROR_NOVERSIONDEFINITION: return "NOVERSIONDEFINITION";
			case LIBMCDRIVER_OPCUA_ERROR_NOMAJORVERSION: return "NOMAJORVERSION";
			case LIBMCDRIVER_OPCUA_ERROR_NOMINORVERSION: return "NOMINORVERSION";
			case LIBMCDRIVER_OPCUA_ERROR_NOPATCHVERSION: return "NOPATCHVERSION";
			case LIBMCDRIVER_OPCUA_ERROR_COULDNOTFINDADDRESS: return "COULDNOTFINDADDRESS";
			case LIBMCDRIVER_OPCUA_ERROR_FIELDISNOINTPARAM: return "FIELDISNOINTPARAM";
			case LIBMCDRIVER_OPCUA_ERROR_FIELDISNODINTPARAM: return "FIELDISNODINTPARAM";
			case LIBMCDRIVER_OPCUA_ERROR_FIELDISNOSTRINGPARAM: return "FIELDISNOSTRINGPARAM";
			case LIBMCDRIVER_OPCUA_ERROR_NOLENGTHATTRIBUTE: return "NOLENGTHATTRIBUTE";
			case LIBMCDRIVER_OPCUA_ERROR_INVALIDLENGTHATTRIBUTE: return "INVALIDLENGTHATTRIBUTE";
			case LIBMCDRIVER_OPCUA_ERROR_COMMANDPARAMETERNAMEMISSING: return "COMMANDPARAMETERNAMEMISSING";
			case LIBMCDRIVER_OPCUA_ERROR_COMMANDPARAMETERDESCRIPTIONMISSING: return "COMMANDPARAMETERDESCRIPTIONMISSING";
			case LIBMCDRIVER_OPCUA_ERROR_COMMANDPARAMETERFIELDMISSING: return "COMMANDPARAMETERFIELDMISSING";
			case LIBMCDRIVER_OPCUA_ERROR_COMMANDPARAMETERNOTFOUND: return "COMMANDPARAMETERNOTFOUND";
			case LIBMCDRIVER_OPCUA_ERROR_COMMANDFIELDNOTFOUND: return "COMMANDFIELDNOTFOUND";
			case LIBMCDRIVER_OPCUA_ERROR_INVALIDPARAMETERTYPE: return "INVALIDPARAMETERTYPE";
			case LIBMCDRIVER_OPCUA_ERROR_COMMANDPARAMETEROUTOFBOUNDS: return "COMMANDPARAMETEROUTOFBOUNDS";
			case LIBMCDRIVER_OPCUA_ERROR_INVALIDPARAMETERADDRESS: return "INVALIDPARAMETERADDRESS";
			case LIBMCDRIVER_OPCUA_ERROR_STRINGPARAMETEROVERFLOW: return "STRINGPARAMETEROVERFLOW";
			case LIBMCDRIVER_OPCUA_ERROR_RECEIVEDINVALIDPACKETSIGNATURE: return "RECEIVEDINVALIDPACKETSIGNATURE";
			case LIBMCDRIVER_OPCUA_ERROR_INVALIDTCPCONNECTIONPOINTER: return "INVALIDTCPCONNECTIONPOINTER";
			case LIBMCDRIVER_OPCUA_ERROR_INVALIDCLIENTSEQUENCEID: return "INVALIDCLIENTSEQUENCEID";
			case LIBMCDRIVER_OPCUA_ERROR_INVALIDCLIENTID: return "INVALIDCLIENTID";
			case LIBMCDRIVER_OPCUA_ERROR_PACKETQUEUEOVERFLOW: return "PACKETQUEUEOVERFLOW";
			case LIBMCDRIVER_OPCUA_ERROR_NOCOMMANDSLIST: return "NOCOMMANDSLIST";
			case LIBMCDRIVER_OPCUA_ERROR_COMMANDNAMEMISSING: return "COMMANDNAMEMISSING";
			case LIBMCDRIVER_OPCUA_ERROR_COMMANDIDMISSING: return "COMMANDIDMISSING";
			case LIBMCDRIVER_OPCUA_ERROR_DUPLICATECOMMANDPARAMETER: return "DUPLICATECOMMANDPARAMETER";
			case LIBMCDRIVER_OPCUA_ERROR_INTEGERPARAMETERNOTFOUND: return "INTEGERPARAMETERNOTFOUND";
			case LIBMCDRIVER_OPCUA_ERROR_BOOLPARAMETERNOTFOUND: return "BOOLPARAMETERNOTFOUND";
			case LIBMCDRIVER_OPCUA_ERROR_DOUBLEPARAMETERNOTFOUND: return "DOUBLEPARAMETERNOTFOUND";
			case LIBMCDRIVER_OPCUA_ERROR_VALUEISNOTINTEGERVALUE: return "VALUEISNOTINTEGERVALUE";
			case LIBMCDRIVER_OPCUA_ERROR_VALUEISNOTBOOLVALUE: return "VALUEISNOTBOOLVALUE";
			case LIBMCDRIVER_OPCUA_ERROR_VALUEISNOTDOUBLEVALUE: return "VALUEISNOTDOUBLEVALUE";
			case LIBMCDRIVER_OPCUA_ERROR_COMMANDDEFINITIONNOTFOUND: return "COMMANDDEFINITIONNOTFOUND";
			case LIBMCDRIVER_OPCUA_ERROR_NOTCONNECTED: return "NOTCONNECTED";
			case LIBMCDRIVER_OPCUA_ERROR_COULDNOTGETADDRESSINFO: return "COULDNOTGETADDRESSINFO";
			case LIBMCDRIVER_OPCUA_ERROR_COULDNOTCREATESOCKET: return "COULDNOTCREATESOCKET";
			case LIBMCDRIVER_OPCUA_ERROR_COULDNOTCONNECT: return "COULDNOTCONNECT";
			case LIBMCDRIVER_OPCUA_ERROR_SENDERROR: return "SENDERROR";
			case LIBMCDRIVER_OPCUA_ERROR_RECEIVECOUNTEXCEEDSMAXIMUM: return "RECEIVECOUNTEXCEEDSMAXIMUM";
			case LIBMCDRIVER_OPCUA_ERROR_CONNECTIONCLOSED: return "CONNECTIONCLOSED";
			case LIBMCDRIVER_OPCUA_ERROR_RECEIVEERROR: return "RECEIVEERROR";
			case LIBMCDRIVER_OPCUA_ERROR_SENDCOUNTEXCEEDSMAXIMUM: return "SENDCOUNTEXCEEDSMAXIMUM";
			case LIBMCDRIVER_OPCUA_ERROR_RECEIVEDINVALIDPACKETLENGTH: return "RECEIVEDINVALIDPACKETLENGTH";
			case LIBMCDRIVER_OPCUA_ERROR_COULDNOTWRITETOPAYLOAD: return "COULDNOTWRITETOPAYLOAD";
			case LIBMCDRIVER_OPCUA_ERROR_INVALIDPAYLOADADDRESS: return "INVALIDPAYLOADADDRESS";
		}
		return "UNKNOWN";
	}

	const char* getErrorDescription() const noexcept
	{
		switch(getErrorCode()) {
			case LIBMCDRIVER_OPCUA_SUCCESS: return "success";
			case LIBMCDRIVER_OPCUA_ERROR_NOTIMPLEMENTED: return "functionality not implemented";
			case LIBMCDRIVER_OPCUA_ERROR_INVALIDPARAM: return "an invalid parameter was passed";
			case LIBMCDRIVER_OPCUA_ERROR_INVALIDCAST: return "a type cast failed";
			case LIBMCDRIVER_OPCUA_ERROR_BUFFERTOOSMALL: return "a provided buffer is too small";
			case LIBMCDRIVER_OPCUA_ERROR_GENERICEXCEPTION: return "a generic exception occurred";
			case LIBMCDRIVER_OPCUA_ERROR_COULDNOTLOADLIBRARY: return "the library could not be loaded";
			case LIBMCDRIVER_OPCUA_ERROR_COULDNOTFINDLIBRARYEXPORT: return "a required exported symbol could not be found in the library";
			case LIBMCDRIVER_OPCUA_ERROR_INCOMPATIBLEBINARYVERSION: return "the version of the binary interface does not match the bindings interface";
			case LIBMCDRIVER_OPCUA_ERROR_INVALIDSTATENAME: return "invalid state name";
			case LIBMCDRIVER_OPCUA_ERROR_DRIVERERROR: return "a driver error occured";
			case LIBMCDRIVER_OPCUA_ERROR_DRIVERNOTINITIALISED: return "the driver is not initialised";
			case LIBMCDRIVER_OPCUA_ERROR_DRIVERNOTCONNECTED: return "the driver is not connected";
			case LIBMCDRIVER_OPCUA_ERROR_INVALIDDRIVERPROTOCOL: return "invalid driver protocol definition";
			case LIBMCDRIVER_OPCUA_ERROR_COULDNOTPARSEDRIVERPROTOCOL: return "could not parse driver protocol";
			case LIBMCDRIVER_OPCUA_ERROR_NOMACHINESTATUSDEFINITION: return "no machine status definition";
			case LIBMCDRIVER_OPCUA_ERROR_NONAMEATTRIBUTE: return "no name attribute";
			case LIBMCDRIVER_OPCUA_ERROR_NOADDRESSEATTRIBUTE: return "no address attribute";
			case LIBMCDRIVER_OPCUA_ERROR_NODESCRIPTIONATTRIBUTE: return "no description attribute";
			case LIBMCDRIVER_OPCUA_ERROR_NOBITATTRIBUTE: return "no bit attribute";
			case LIBMCDRIVER_OPCUA_ERROR_INVALIDNAMEATTRIBUTE: return "invalid name attribute";
			case LIBMCDRIVER_OPCUA_ERROR_INVALIDADDRESSEATTRIBUTE: return "invalid address attribute";
			case LIBMCDRIVER_OPCUA_ERROR_INVALIDDESCRIPTIONATTRIBUTE: return "invalid description attribute";
			case LIBMCDRIVER_OPCUA_ERROR_INVALIDBITATTRIBUTE: return "invalid bit attribute";
			case LIBMCDRIVER_OPCUA_ERROR_INVALIDCPUTYPE: return "invalid cpu type";
			case LIBMCDRIVER_OPCUA_ERROR_UNKNOWNCOMMANDNAME: return "unknown command name";
			case LIBMCDRIVER_OPCUA_ERROR_NOCOMMANDNAME: return "no command name";
			case LIBMCDRIVER_OPCUA_ERROR_NOCOMMANDID: return "no command id";
			case LIBMCDRIVER_OPCUA_ERROR_INVALIDCOMMANDNAME: return "invalid command name";
			case LIBMCDRIVER_OPCUA_ERROR_INVALIDCOMMANDID: return "invalid command id";
			case LIBMCDRIVER_OPCUA_ERROR_COMMANDHASALREADYBEENEXECUTED: return "command has already been executed";
			case LIBMCDRIVER_OPCUA_ERROR_COMMANDHASNOTBEENEXECUTED: return "command has not been executed";
			case LIBMCDRIVER_OPCUA_ERROR_INVALIDSEQUENCEID: return "invalid sequence id";
			case LIBMCDRIVER_OPCUA_ERROR_COMMANDSEQUENCEERROR: return "command sequence communication error";
			case LIBMCDRIVER_OPCUA_ERROR_COMMANDREACTIONTIMEOUT: return "command reaction timeout";
			case LIBMCDRIVER_OPCUA_ERROR_NOCOMMANDSDEFINITION: return "no commands definition";
			case LIBMCDRIVER_OPCUA_ERROR_NOVERSIONDEFINITION: return "no version definition";
			case LIBMCDRIVER_OPCUA_ERROR_NOMAJORVERSION: return "no major version";
			case LIBMCDRIVER_OPCUA_ERROR_NOMINORVERSION: return "no minor version";
			case LIBMCDRIVER_OPCUA_ERROR_NOPATCHVERSION: return "no patch version";
			case LIBMCDRIVER_OPCUA_ERROR_COULDNOTFINDADDRESS: return "could not find address";
			case LIBMCDRIVER_OPCUA_ERROR_FIELDISNOINTPARAM: return "field is no int parameter";
			case LIBMCDRIVER_OPCUA_ERROR_FIELDISNODINTPARAM: return "field is no dint parameter";
			case LIBMCDRIVER_OPCUA_ERROR_FIELDISNOSTRINGPARAM: return "field is no string parameter";
			case LIBMCDRIVER_OPCUA_ERROR_NOLENGTHATTRIBUTE: return "no length attribute";
			case LIBMCDRIVER_OPCUA_ERROR_INVALIDLENGTHATTRIBUTE: return "invalid length attribute";
			case LIBMCDRIVER_OPCUA_ERROR_COMMANDPARAMETERNAMEMISSING: return "command parameter name missing";
			case LIBMCDRIVER_OPCUA_ERROR_COMMANDPARAMETERDESCRIPTIONMISSING: return "command parameter description missing";
			case LIBMCDRIVER_OPCUA_ERROR_COMMANDPARAMETERFIELDMISSING: return "command parameter field missing";
			case LIBMCDRIVER_OPCUA_ERROR_COMMANDPARAMETERNOTFOUND: return "command parameter not found";
			case LIBMCDRIVER_OPCUA_ERROR_COMMANDFIELDNOTFOUND: return "command field not found";
			case LIBMCDRIVER_OPCUA_ERROR_INVALIDPARAMETERTYPE: return "command field parameter is of wrong type";
			case LIBMCDRIVER_OPCUA_ERROR_COMMANDPARAMETEROUTOFBOUNDS: return "command field parameter is out of bounds";
			case LIBMCDRIVER_OPCUA_ERROR_INVALIDPARAMETERADDRESS: return "invalid parameter address";
			case LIBMCDRIVER_OPCUA_ERROR_STRINGPARAMETEROVERFLOW: return "string parameter overflow";
			case LIBMCDRIVER_OPCUA_ERROR_RECEIVEDINVALIDPACKETSIGNATURE: return "received invalid packet signature";
			case LIBMCDRIVER_OPCUA_ERROR_INVALIDTCPCONNECTIONPOINTER: return "invalid tcp connection pointer";
			case LIBMCDRIVER_OPCUA_ERROR_INVALIDCLIENTSEQUENCEID: return "Invalid client sequence id";
			case LIBMCDRIVER_OPCUA_ERROR_INVALIDCLIENTID: return "Invalid client id";
			case LIBMCDRIVER_OPCUA_ERROR_PACKETQUEUEOVERFLOW: return "Packet queue overflow.";
			case LIBMCDRIVER_OPCUA_ERROR_NOCOMMANDSLIST: return "No commands list.";
			case LIBMCDRIVER_OPCUA_ERROR_COMMANDNAMEMISSING: return "Command name missing.";
			case LIBMCDRIVER_OPCUA_ERROR_COMMANDIDMISSING: return "Command ID missing.";
			case LIBMCDRIVER_OPCUA_ERROR_DUPLICATECOMMANDPARAMETER: return "Duplicate command parameter.";
			case LIBMCDRIVER_OPCUA_ERROR_INTEGERPARAMETERNOTFOUND: return "Integer parameter not found.";
			case LIBMCDRIVER_OPCUA_ERROR_BOOLPARAMETERNOTFOUND: return "Bool parameter not found.";
			case LIBMCDRIVER_OPCUA_ERROR_DOUBLEPARAMETERNOTFOUND: return "Double parameter not found.";
			case LIBMCDRIVER_OPCUA_ERROR_VALUEISNOTINTEGERVALUE: return "Value is not integer value.";
			case LIBMCDRIVER_OPCUA_ERROR_VALUEISNOTBOOLVALUE: return "Value is not bool value.";
			case LIBMCDRIVER_OPCUA_ERROR_VALUEISNOTDOUBLEVALUE: return "Value is not double value.";
			case LIBMCDRIVER_OPCUA_ERROR_COMMANDDEFINITIONNOTFOUND: return "Command definition not found.";
			case LIBMCDRIVER_OPCUA_ERROR_NOTCONNECTED: return "Not connected.";
			case LIBMCDRIVER_OPCUA_ERROR_COULDNOTGETADDRESSINFO: return "Could not get address info.";
			case LIBMCDRIVER_OPCUA_ERROR_COULDNOTCREATESOCKET: return "Could not create socket.";
			case LIBMCDRIVER_OPCUA_ERROR_COULDNOTCONNECT: return "Could not connect.";
			case LIBMCDRIVER_OPCUA_ERROR_SENDERROR: return "Send error.";
			case LIBMCDRIVER_OPCUA_ERROR_RECEIVECOUNTEXCEEDSMAXIMUM: return "Receive count exceeds maximum.";
			case LIBMCDRIVER_OPCUA_ERROR_CONNECTIONCLOSED: return "Connection closed.";
			case LIBMCDRIVER_OPCUA_ERROR_RECEIVEERROR: return "Receive error.";
			case LIBMCDRIVER_OPCUA_ERROR_SENDCOUNTEXCEEDSMAXIMUM: return "Send count exceeds maximum.";
			case LIBMCDRIVER_OPCUA_ERROR_RECEIVEDINVALIDPACKETLENGTH: return "Received invalid packet length.";
			case LIBMCDRIVER_OPCUA_ERROR_COULDNOTWRITETOPAYLOAD: return "Could not write to payload.";
			case LIBMCDRIVER_OPCUA_ERROR_INVALIDPAYLOADADDRESS: return "Invalid payload address.";
		}
		return "unknown error";
	}

private:

	std::string buildErrorMessage() const noexcept
	{
		std::string msg = m_originalErrorMessage;
		if (msg.empty()) {
			msg = getErrorDescription();
		}
		return std::string("Error: ") + getErrorName() + ": " + msg;
	}
};

/*************************************************************************************************************************
 Class CInputVector
**************************************************************************************************************************/
template <typename T>
class CInputVector {
private:
	
	const T* m_data;
	size_t m_size;
	
public:
	
	CInputVector(const std::vector<T>& vec)
		: m_data( vec.data() ), m_size( vec.size() )
	{
	}
	
	CInputVector(const T* in_data, size_t in_size)
		: m_data( in_data ), m_size(in_size )
	{
	}
	
	const T* data() const
	{
		return m_data;
	}
	
	size_t size() const
	{
		return m_size;
	}
	
};

// declare deprecated class name
template<typename T>
using CLibMCDriver_OPCUAInputVector = CInputVector<T>;

/*************************************************************************************************************************
 Class CWrapper 
**************************************************************************************************************************/
class CWrapper {
public:
	
	explicit CWrapper(void* pSymbolLookupMethod)
	{
		CheckError(nullptr, initWrapperTable(&m_WrapperTable));
		CheckError(nullptr, loadWrapperTableFromSymbolLookupMethod(&m_WrapperTable, pSymbolLookupMethod));
		
		CheckError(nullptr, checkBinaryVersion());
	}
	
	explicit CWrapper(const std::string &sFileName)
	{
		CheckError(nullptr, initWrapperTable(&m_WrapperTable));
		CheckError(nullptr, loadWrapperTable(&m_WrapperTable, sFileName.c_str()));
		
		CheckError(nullptr, checkBinaryVersion());
	}
	
	static PWrapper loadLibrary(const std::string &sFileName)
	{
		return std::make_shared<CWrapper>(sFileName);
	}
	
	static PWrapper loadLibraryFromSymbolLookupMethod(void* pSymbolLookupMethod)
	{
		return std::make_shared<CWrapper>(pSymbolLookupMethod);
	}
	
	~CWrapper()
	{
		releaseWrapperTable(&m_WrapperTable);
	}
	
	inline void CheckError(CBase * pBaseClass, LibMCDriver_OPCUAResult nResult);

	inline void GetVersion(LibMCDriver_OPCUA_uint32 & nMajor, LibMCDriver_OPCUA_uint32 & nMinor, LibMCDriver_OPCUA_uint32 & nMicro);
	inline bool GetLastError(classParam<CBase> pInstance, std::string & sErrorMessage);
	inline void ReleaseInstance(classParam<CBase> pInstance);
	inline void AcquireInstance(classParam<CBase> pInstance);
	inline void InjectComponent(const std::string & sNameSpace, const LibMCDriver_OPCUA_pvoid pSymbolAddressMethod);
	inline LibMCDriver_OPCUA_pvoid GetSymbolLookupMethod();
	inline PDriver CreateDriver(const std::string & sName, const std::string & sType, classParam<LibMCEnv::CDriverEnvironment> pDriverEnvironment);

private:
	sLibMCDriver_OPCUADynamicWrapperTable m_WrapperTable;
	// Injected Components
	LibMCEnv::PWrapper m_pLibMCEnvWrapper;

	
	LibMCDriver_OPCUAResult checkBinaryVersion()
	{
		LibMCDriver_OPCUA_uint32 nMajor, nMinor, nMicro;
		GetVersion(nMajor, nMinor, nMicro);
		if (nMajor != LIBMCDRIVER_OPCUA_VERSION_MAJOR) {
			return LIBMCDRIVER_OPCUA_ERROR_INCOMPATIBLEBINARYVERSION;
		}
		return LIBMCDRIVER_OPCUA_SUCCESS;
	}
	LibMCDriver_OPCUAResult initWrapperTable(sLibMCDriver_OPCUADynamicWrapperTable * pWrapperTable);
	LibMCDriver_OPCUAResult releaseWrapperTable(sLibMCDriver_OPCUADynamicWrapperTable * pWrapperTable);
	LibMCDriver_OPCUAResult loadWrapperTable(sLibMCDriver_OPCUADynamicWrapperTable * pWrapperTable, const char * pLibraryFileName);
	LibMCDriver_OPCUAResult loadWrapperTableFromSymbolLookupMethod(sLibMCDriver_OPCUADynamicWrapperTable * pWrapperTable, void* pSymbolLookupMethod);

	friend class CBase;
	friend class CDriver;
	friend class CPLCCommand;
	friend class CPLCCommandList;
	friend class CDriver_OPCUA;

};

	
/*************************************************************************************************************************
 Class CBase 
**************************************************************************************************************************/
class CBase {
public:
	
protected:
	/* Wrapper Object that created the class. */
	CWrapper * m_pWrapper;
	/* Handle to Instance in library*/
	LibMCDriver_OPCUAHandle m_pHandle;

	/* Checks for an Error code and raises Exceptions */
	void CheckError(LibMCDriver_OPCUAResult nResult)
	{
		if (m_pWrapper != nullptr)
			m_pWrapper->CheckError(this, nResult);
	}
public:
	/**
	* CBase::CBase - Constructor for Base class.
	*/
	CBase(CWrapper * pWrapper, LibMCDriver_OPCUAHandle pHandle)
		: m_pWrapper(pWrapper), m_pHandle(pHandle)
	{
	}

	/**
	* CBase::~CBase - Destructor for Base class.
	*/
	virtual ~CBase()
	{
		if (m_pWrapper != nullptr)
			m_pWrapper->ReleaseInstance(this);
		m_pWrapper = nullptr;
	}

	/**
	* CBase::handle - Returns handle to instance.
	*/
	LibMCDriver_OPCUAHandle handle() const
	{
		return m_pHandle;
	}

	/**
	* CBase::wrapper - Returns wrapper instance.
	*/
	CWrapper * wrapper() const
	{
		return m_pWrapper;
	}
	
	friend class CWrapper;
};
	
/*************************************************************************************************************************
 Class CDriver 
**************************************************************************************************************************/
class CDriver : public CBase {
public:
	
	/**
	* CDriver::CDriver - Constructor for Driver class.
	*/
	CDriver(CWrapper* pWrapper, LibMCDriver_OPCUAHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline void Configure(const std::string & sConfigurationString);
	inline std::string GetName();
	inline std::string GetType();
	inline void GetVersion(LibMCDriver_OPCUA_uint32 & nMajor, LibMCDriver_OPCUA_uint32 & nMinor, LibMCDriver_OPCUA_uint32 & nMicro, std::string & sBuild);
	inline void GetHeaderInformation(std::string & sNameSpace, std::string & sBaseName);
	inline void QueryParameters();
};
	
/*************************************************************************************************************************
 Class CPLCCommand 
**************************************************************************************************************************/
class CPLCCommand : public CBase {
public:
	
	/**
	* CPLCCommand::CPLCCommand - Constructor for PLCCommand class.
	*/
	CPLCCommand(CWrapper* pWrapper, LibMCDriver_OPCUAHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline void SetIntegerParameter(const std::string & sParameterName, const LibMCDriver_OPCUA_int64 nValue);
	inline void SetBoolParameter(const std::string & sParameterName, const bool bValue);
	inline void SetDoubleParameter(const std::string & sParameterName, const LibMCDriver_OPCUA_double dValue);
};
	
/*************************************************************************************************************************
 Class CPLCCommandList 
**************************************************************************************************************************/
class CPLCCommandList : public CBase {
public:
	
	/**
	* CPLCCommandList::CPLCCommandList - Constructor for PLCCommandList class.
	*/
	CPLCCommandList(CWrapper* pWrapper, LibMCDriver_OPCUAHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline void AddCommand(classParam<CPLCCommand> pCommandInstance);
	inline void FinishList();
	inline void ExecuteList();
	inline bool WaitForList(const LibMCDriver_OPCUA_uint32 nReactionTimeInMS, const LibMCDriver_OPCUA_uint32 nWaitForTimeInMS);
	inline void PauseList();
	inline void ResumeList();
};
	
/*************************************************************************************************************************
 Class CDriver_OPCUA 
**************************************************************************************************************************/
class CDriver_OPCUA : public CDriver {
public:
	
	/**
	* CDriver_OPCUA::CDriver_OPCUA - Constructor for Driver_OPCUA class.
	*/
	CDriver_OPCUA(CWrapper* pWrapper, LibMCDriver_OPCUAHandle pHandle)
		: CDriver(pWrapper, pHandle)
	{
	}
	
	inline void SetToSimulationMode();
	inline bool IsSimulationMode();
	inline void Connect(const std::string & sIPAddress, const LibMCDriver_OPCUA_uint32 nPort, const LibMCDriver_OPCUA_uint32 nTimeout);
	inline void Disconnect();
	inline PPLCCommandList CreateCommandList();
	inline PPLCCommand CreateCommand(const std::string & sCommandName);
	inline void StartJournaling();
	inline void StopJournaling();
	inline void RefreshJournal();
};
	
	/**
	* CWrapper::GetVersion - retrieves the binary version of this library.
	* @param[out] nMajor - returns the major version of this library
	* @param[out] nMinor - returns the minor version of this library
	* @param[out] nMicro - returns the micro version of this library
	*/
	inline void CWrapper::GetVersion(LibMCDriver_OPCUA_uint32 & nMajor, LibMCDriver_OPCUA_uint32 & nMinor, LibMCDriver_OPCUA_uint32 & nMicro)
	{
		CheckError(nullptr,m_WrapperTable.m_GetVersion(&nMajor, &nMinor, &nMicro));
	}
	
	/**
	* CWrapper::GetLastError - Returns the last error recorded on this object
	* @param[in] pInstance - Instance Handle
	* @param[out] sErrorMessage - Message of the last error
	* @return Is there a last error to query
	*/
	inline bool CWrapper::GetLastError(classParam<CBase> pInstance, std::string & sErrorMessage)
	{
		LibMCDriver_OPCUAHandle hInstance = pInstance.GetHandle();
		LibMCDriver_OPCUA_uint32 bytesNeededErrorMessage = 0;
		LibMCDriver_OPCUA_uint32 bytesWrittenErrorMessage = 0;
		bool resultHasError = 0;
		CheckError(nullptr,m_WrapperTable.m_GetLastError(hInstance, 0, &bytesNeededErrorMessage, nullptr, &resultHasError));
		std::vector<char> bufferErrorMessage(bytesNeededErrorMessage);
		CheckError(nullptr,m_WrapperTable.m_GetLastError(hInstance, bytesNeededErrorMessage, &bytesWrittenErrorMessage, &bufferErrorMessage[0], &resultHasError));
		sErrorMessage = std::string(&bufferErrorMessage[0]);
		
		return resultHasError;
	}
	
	/**
	* CWrapper::ReleaseInstance - Releases shared ownership of an Instance
	* @param[in] pInstance - Instance Handle
	*/
	inline void CWrapper::ReleaseInstance(classParam<CBase> pInstance)
	{
		LibMCDriver_OPCUAHandle hInstance = pInstance.GetHandle();
		CheckError(nullptr,m_WrapperTable.m_ReleaseInstance(hInstance));
	}
	
	/**
	* CWrapper::AcquireInstance - Acquires shared ownership of an Instance
	* @param[in] pInstance - Instance Handle
	*/
	inline void CWrapper::AcquireInstance(classParam<CBase> pInstance)
	{
		LibMCDriver_OPCUAHandle hInstance = pInstance.GetHandle();
		CheckError(nullptr,m_WrapperTable.m_AcquireInstance(hInstance));
	}
	
	/**
	* CWrapper::InjectComponent - Injects an imported component for usage within this component
	* @param[in] sNameSpace - NameSpace of the injected component
	* @param[in] pSymbolAddressMethod - Address of the SymbolAddressMethod of the injected component
	*/
	inline void CWrapper::InjectComponent(const std::string & sNameSpace, const LibMCDriver_OPCUA_pvoid pSymbolAddressMethod)
	{
		CheckError(nullptr,m_WrapperTable.m_InjectComponent(sNameSpace.c_str(), pSymbolAddressMethod));
		
		bool bNameSpaceFound = false;
		if (sNameSpace == "LibMCEnv") {
			if (m_pLibMCEnvWrapper != nullptr) {
				throw ELibMCDriver_OPCUAException(LIBMCDRIVER_OPCUA_ERROR_COULDNOTLOADLIBRARY, "Library with namespace " + sNameSpace + " is already registered.");
			}
			m_pLibMCEnvWrapper = LibMCEnv::CWrapper::loadLibraryFromSymbolLookupMethod(pSymbolAddressMethod);
			bNameSpaceFound = true;
		}
		if (!bNameSpaceFound)
			throw ELibMCDriver_OPCUAException(LIBMCDRIVER_OPCUA_ERROR_COULDNOTLOADLIBRARY, "Unknown namespace " + sNameSpace);
	}
	
	/**
	* CWrapper::GetSymbolLookupMethod - Returns the address of the SymbolLookupMethod
	* @return Address of the SymbolAddressMethod
	*/
	inline LibMCDriver_OPCUA_pvoid CWrapper::GetSymbolLookupMethod()
	{
		LibMCDriver_OPCUA_pvoid resultSymbolLookupMethod = 0;
		CheckError(nullptr,m_WrapperTable.m_GetSymbolLookupMethod(&resultSymbolLookupMethod));
		
		return resultSymbolLookupMethod;
	}
	
	/**
	* CWrapper::CreateDriver - Creates a driver instance with a specific name.
	* @param[in] sName - Name of driver to be created.
	* @param[in] sType - Type of driver to be created.
	* @param[in] pDriverEnvironment - Environment of this driver.
	* @return New Driver instance
	*/
	inline PDriver CWrapper::CreateDriver(const std::string & sName, const std::string & sType, classParam<LibMCEnv::CDriverEnvironment> pDriverEnvironment)
	{
		LibMCEnvHandle hDriverEnvironment = pDriverEnvironment.GetHandle();
		LibMCDriver_OPCUAHandle hInstance = nullptr;
		CheckError(nullptr,m_WrapperTable.m_CreateDriver(sName.c_str(), sType.c_str(), hDriverEnvironment, &hInstance));
		
		if (!hInstance) {
			CheckError(nullptr,LIBMCDRIVER_OPCUA_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CDriver>(this, hInstance);
	}
	
	inline void CWrapper::CheckError(CBase * pBaseClass, LibMCDriver_OPCUAResult nResult)
	{
		if (nResult != 0) {
			std::string sErrorMessage;
			if (pBaseClass != nullptr) {
				GetLastError(pBaseClass, sErrorMessage);
			}
			throw ELibMCDriver_OPCUAException(nResult, sErrorMessage);
		}
	}
	

	inline LibMCDriver_OPCUAResult CWrapper::initWrapperTable(sLibMCDriver_OPCUADynamicWrapperTable * pWrapperTable)
	{
		if (pWrapperTable == nullptr)
			return LIBMCDRIVER_OPCUA_ERROR_INVALIDPARAM;
		
		pWrapperTable->m_LibraryHandle = nullptr;
		pWrapperTable->m_Driver_Configure = nullptr;
		pWrapperTable->m_Driver_GetName = nullptr;
		pWrapperTable->m_Driver_GetType = nullptr;
		pWrapperTable->m_Driver_GetVersion = nullptr;
		pWrapperTable->m_Driver_GetHeaderInformation = nullptr;
		pWrapperTable->m_Driver_QueryParameters = nullptr;
		pWrapperTable->m_PLCCommand_SetIntegerParameter = nullptr;
		pWrapperTable->m_PLCCommand_SetBoolParameter = nullptr;
		pWrapperTable->m_PLCCommand_SetDoubleParameter = nullptr;
		pWrapperTable->m_PLCCommandList_AddCommand = nullptr;
		pWrapperTable->m_PLCCommandList_FinishList = nullptr;
		pWrapperTable->m_PLCCommandList_ExecuteList = nullptr;
		pWrapperTable->m_PLCCommandList_WaitForList = nullptr;
		pWrapperTable->m_PLCCommandList_PauseList = nullptr;
		pWrapperTable->m_PLCCommandList_ResumeList = nullptr;
		pWrapperTable->m_Driver_OPCUA_SetToSimulationMode = nullptr;
		pWrapperTable->m_Driver_OPCUA_IsSimulationMode = nullptr;
		pWrapperTable->m_Driver_OPCUA_Connect = nullptr;
		pWrapperTable->m_Driver_OPCUA_Disconnect = nullptr;
		pWrapperTable->m_Driver_OPCUA_CreateCommandList = nullptr;
		pWrapperTable->m_Driver_OPCUA_CreateCommand = nullptr;
		pWrapperTable->m_Driver_OPCUA_StartJournaling = nullptr;
		pWrapperTable->m_Driver_OPCUA_StopJournaling = nullptr;
		pWrapperTable->m_Driver_OPCUA_RefreshJournal = nullptr;
		pWrapperTable->m_GetVersion = nullptr;
		pWrapperTable->m_GetLastError = nullptr;
		pWrapperTable->m_ReleaseInstance = nullptr;
		pWrapperTable->m_AcquireInstance = nullptr;
		pWrapperTable->m_InjectComponent = nullptr;
		pWrapperTable->m_GetSymbolLookupMethod = nullptr;
		pWrapperTable->m_CreateDriver = nullptr;
		
		return LIBMCDRIVER_OPCUA_SUCCESS;
	}

	inline LibMCDriver_OPCUAResult CWrapper::releaseWrapperTable(sLibMCDriver_OPCUADynamicWrapperTable * pWrapperTable)
	{
		if (pWrapperTable == nullptr)
			return LIBMCDRIVER_OPCUA_ERROR_INVALIDPARAM;
		
		if (pWrapperTable->m_LibraryHandle != nullptr) {
		#ifdef _WIN32
			HMODULE hModule = (HMODULE) pWrapperTable->m_LibraryHandle;
			FreeLibrary(hModule);
		#else // _WIN32
			dlclose(pWrapperTable->m_LibraryHandle);
		#endif // _WIN32
			return initWrapperTable(pWrapperTable);
		}
		
		return LIBMCDRIVER_OPCUA_SUCCESS;
	}

	inline LibMCDriver_OPCUAResult CWrapper::loadWrapperTable(sLibMCDriver_OPCUADynamicWrapperTable * pWrapperTable, const char * pLibraryFileName)
	{
		if (pWrapperTable == nullptr)
			return LIBMCDRIVER_OPCUA_ERROR_INVALIDPARAM;
		if (pLibraryFileName == nullptr)
			return LIBMCDRIVER_OPCUA_ERROR_INVALIDPARAM;
		
		#ifdef _WIN32
		// Convert filename to UTF16-string
		int nLength = 0;
		while ((pLibraryFileName[nLength] != 0) && (nLength < MAX_PATH))
			nLength++;
		int nBufferSize = nLength * 2 + 2;
		std::vector<wchar_t> wsLibraryFileName(nBufferSize);
		int nResult = MultiByteToWideChar(CP_UTF8, 0, pLibraryFileName, nLength, &wsLibraryFileName[0], nBufferSize);
		if (nResult == 0)
			return LIBMCDRIVER_OPCUA_ERROR_COULDNOTLOADLIBRARY;
		
		HMODULE hLibrary = LoadLibraryW(wsLibraryFileName.data());
		if (hLibrary == 0) 
			return LIBMCDRIVER_OPCUA_ERROR_COULDNOTLOADLIBRARY;
		#else // _WIN32
		void* hLibrary = dlopen(pLibraryFileName, RTLD_LAZY);
		if (hLibrary == 0) 
			return LIBMCDRIVER_OPCUA_ERROR_COULDNOTLOADLIBRARY;
		dlerror();
		#endif // _WIN32
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_Configure = (PLibMCDriver_OPCUADriver_ConfigurePtr) GetProcAddress(hLibrary, "libmcdriver_opcua_driver_configure");
		#else // _WIN32
		pWrapperTable->m_Driver_Configure = (PLibMCDriver_OPCUADriver_ConfigurePtr) dlsym(hLibrary, "libmcdriver_opcua_driver_configure");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_Configure == nullptr)
			return LIBMCDRIVER_OPCUA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_GetName = (PLibMCDriver_OPCUADriver_GetNamePtr) GetProcAddress(hLibrary, "libmcdriver_opcua_driver_getname");
		#else // _WIN32
		pWrapperTable->m_Driver_GetName = (PLibMCDriver_OPCUADriver_GetNamePtr) dlsym(hLibrary, "libmcdriver_opcua_driver_getname");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_GetName == nullptr)
			return LIBMCDRIVER_OPCUA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_GetType = (PLibMCDriver_OPCUADriver_GetTypePtr) GetProcAddress(hLibrary, "libmcdriver_opcua_driver_gettype");
		#else // _WIN32
		pWrapperTable->m_Driver_GetType = (PLibMCDriver_OPCUADriver_GetTypePtr) dlsym(hLibrary, "libmcdriver_opcua_driver_gettype");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_GetType == nullptr)
			return LIBMCDRIVER_OPCUA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_GetVersion = (PLibMCDriver_OPCUADriver_GetVersionPtr) GetProcAddress(hLibrary, "libmcdriver_opcua_driver_getversion");
		#else // _WIN32
		pWrapperTable->m_Driver_GetVersion = (PLibMCDriver_OPCUADriver_GetVersionPtr) dlsym(hLibrary, "libmcdriver_opcua_driver_getversion");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_GetVersion == nullptr)
			return LIBMCDRIVER_OPCUA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_GetHeaderInformation = (PLibMCDriver_OPCUADriver_GetHeaderInformationPtr) GetProcAddress(hLibrary, "libmcdriver_opcua_driver_getheaderinformation");
		#else // _WIN32
		pWrapperTable->m_Driver_GetHeaderInformation = (PLibMCDriver_OPCUADriver_GetHeaderInformationPtr) dlsym(hLibrary, "libmcdriver_opcua_driver_getheaderinformation");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_GetHeaderInformation == nullptr)
			return LIBMCDRIVER_OPCUA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_QueryParameters = (PLibMCDriver_OPCUADriver_QueryParametersPtr) GetProcAddress(hLibrary, "libmcdriver_opcua_driver_queryparameters");
		#else // _WIN32
		pWrapperTable->m_Driver_QueryParameters = (PLibMCDriver_OPCUADriver_QueryParametersPtr) dlsym(hLibrary, "libmcdriver_opcua_driver_queryparameters");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_QueryParameters == nullptr)
			return LIBMCDRIVER_OPCUA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_PLCCommand_SetIntegerParameter = (PLibMCDriver_OPCUAPLCCommand_SetIntegerParameterPtr) GetProcAddress(hLibrary, "libmcdriver_opcua_plccommand_setintegerparameter");
		#else // _WIN32
		pWrapperTable->m_PLCCommand_SetIntegerParameter = (PLibMCDriver_OPCUAPLCCommand_SetIntegerParameterPtr) dlsym(hLibrary, "libmcdriver_opcua_plccommand_setintegerparameter");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_PLCCommand_SetIntegerParameter == nullptr)
			return LIBMCDRIVER_OPCUA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_PLCCommand_SetBoolParameter = (PLibMCDriver_OPCUAPLCCommand_SetBoolParameterPtr) GetProcAddress(hLibrary, "libmcdriver_opcua_plccommand_setboolparameter");
		#else // _WIN32
		pWrapperTable->m_PLCCommand_SetBoolParameter = (PLibMCDriver_OPCUAPLCCommand_SetBoolParameterPtr) dlsym(hLibrary, "libmcdriver_opcua_plccommand_setboolparameter");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_PLCCommand_SetBoolParameter == nullptr)
			return LIBMCDRIVER_OPCUA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_PLCCommand_SetDoubleParameter = (PLibMCDriver_OPCUAPLCCommand_SetDoubleParameterPtr) GetProcAddress(hLibrary, "libmcdriver_opcua_plccommand_setdoubleparameter");
		#else // _WIN32
		pWrapperTable->m_PLCCommand_SetDoubleParameter = (PLibMCDriver_OPCUAPLCCommand_SetDoubleParameterPtr) dlsym(hLibrary, "libmcdriver_opcua_plccommand_setdoubleparameter");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_PLCCommand_SetDoubleParameter == nullptr)
			return LIBMCDRIVER_OPCUA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_PLCCommandList_AddCommand = (PLibMCDriver_OPCUAPLCCommandList_AddCommandPtr) GetProcAddress(hLibrary, "libmcdriver_opcua_plccommandlist_addcommand");
		#else // _WIN32
		pWrapperTable->m_PLCCommandList_AddCommand = (PLibMCDriver_OPCUAPLCCommandList_AddCommandPtr) dlsym(hLibrary, "libmcdriver_opcua_plccommandlist_addcommand");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_PLCCommandList_AddCommand == nullptr)
			return LIBMCDRIVER_OPCUA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_PLCCommandList_FinishList = (PLibMCDriver_OPCUAPLCCommandList_FinishListPtr) GetProcAddress(hLibrary, "libmcdriver_opcua_plccommandlist_finishlist");
		#else // _WIN32
		pWrapperTable->m_PLCCommandList_FinishList = (PLibMCDriver_OPCUAPLCCommandList_FinishListPtr) dlsym(hLibrary, "libmcdriver_opcua_plccommandlist_finishlist");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_PLCCommandList_FinishList == nullptr)
			return LIBMCDRIVER_OPCUA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_PLCCommandList_ExecuteList = (PLibMCDriver_OPCUAPLCCommandList_ExecuteListPtr) GetProcAddress(hLibrary, "libmcdriver_opcua_plccommandlist_executelist");
		#else // _WIN32
		pWrapperTable->m_PLCCommandList_ExecuteList = (PLibMCDriver_OPCUAPLCCommandList_ExecuteListPtr) dlsym(hLibrary, "libmcdriver_opcua_plccommandlist_executelist");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_PLCCommandList_ExecuteList == nullptr)
			return LIBMCDRIVER_OPCUA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_PLCCommandList_WaitForList = (PLibMCDriver_OPCUAPLCCommandList_WaitForListPtr) GetProcAddress(hLibrary, "libmcdriver_opcua_plccommandlist_waitforlist");
		#else // _WIN32
		pWrapperTable->m_PLCCommandList_WaitForList = (PLibMCDriver_OPCUAPLCCommandList_WaitForListPtr) dlsym(hLibrary, "libmcdriver_opcua_plccommandlist_waitforlist");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_PLCCommandList_WaitForList == nullptr)
			return LIBMCDRIVER_OPCUA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_PLCCommandList_PauseList = (PLibMCDriver_OPCUAPLCCommandList_PauseListPtr) GetProcAddress(hLibrary, "libmcdriver_opcua_plccommandlist_pauselist");
		#else // _WIN32
		pWrapperTable->m_PLCCommandList_PauseList = (PLibMCDriver_OPCUAPLCCommandList_PauseListPtr) dlsym(hLibrary, "libmcdriver_opcua_plccommandlist_pauselist");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_PLCCommandList_PauseList == nullptr)
			return LIBMCDRIVER_OPCUA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_PLCCommandList_ResumeList = (PLibMCDriver_OPCUAPLCCommandList_ResumeListPtr) GetProcAddress(hLibrary, "libmcdriver_opcua_plccommandlist_resumelist");
		#else // _WIN32
		pWrapperTable->m_PLCCommandList_ResumeList = (PLibMCDriver_OPCUAPLCCommandList_ResumeListPtr) dlsym(hLibrary, "libmcdriver_opcua_plccommandlist_resumelist");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_PLCCommandList_ResumeList == nullptr)
			return LIBMCDRIVER_OPCUA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_OPCUA_SetToSimulationMode = (PLibMCDriver_OPCUADriver_OPCUA_SetToSimulationModePtr) GetProcAddress(hLibrary, "libmcdriver_opcua_driver_opcua_settosimulationmode");
		#else // _WIN32
		pWrapperTable->m_Driver_OPCUA_SetToSimulationMode = (PLibMCDriver_OPCUADriver_OPCUA_SetToSimulationModePtr) dlsym(hLibrary, "libmcdriver_opcua_driver_opcua_settosimulationmode");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_OPCUA_SetToSimulationMode == nullptr)
			return LIBMCDRIVER_OPCUA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_OPCUA_IsSimulationMode = (PLibMCDriver_OPCUADriver_OPCUA_IsSimulationModePtr) GetProcAddress(hLibrary, "libmcdriver_opcua_driver_opcua_issimulationmode");
		#else // _WIN32
		pWrapperTable->m_Driver_OPCUA_IsSimulationMode = (PLibMCDriver_OPCUADriver_OPCUA_IsSimulationModePtr) dlsym(hLibrary, "libmcdriver_opcua_driver_opcua_issimulationmode");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_OPCUA_IsSimulationMode == nullptr)
			return LIBMCDRIVER_OPCUA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_OPCUA_Connect = (PLibMCDriver_OPCUADriver_OPCUA_ConnectPtr) GetProcAddress(hLibrary, "libmcdriver_opcua_driver_opcua_connect");
		#else // _WIN32
		pWrapperTable->m_Driver_OPCUA_Connect = (PLibMCDriver_OPCUADriver_OPCUA_ConnectPtr) dlsym(hLibrary, "libmcdriver_opcua_driver_opcua_connect");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_OPCUA_Connect == nullptr)
			return LIBMCDRIVER_OPCUA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_OPCUA_Disconnect = (PLibMCDriver_OPCUADriver_OPCUA_DisconnectPtr) GetProcAddress(hLibrary, "libmcdriver_opcua_driver_opcua_disconnect");
		#else // _WIN32
		pWrapperTable->m_Driver_OPCUA_Disconnect = (PLibMCDriver_OPCUADriver_OPCUA_DisconnectPtr) dlsym(hLibrary, "libmcdriver_opcua_driver_opcua_disconnect");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_OPCUA_Disconnect == nullptr)
			return LIBMCDRIVER_OPCUA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_OPCUA_CreateCommandList = (PLibMCDriver_OPCUADriver_OPCUA_CreateCommandListPtr) GetProcAddress(hLibrary, "libmcdriver_opcua_driver_opcua_createcommandlist");
		#else // _WIN32
		pWrapperTable->m_Driver_OPCUA_CreateCommandList = (PLibMCDriver_OPCUADriver_OPCUA_CreateCommandListPtr) dlsym(hLibrary, "libmcdriver_opcua_driver_opcua_createcommandlist");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_OPCUA_CreateCommandList == nullptr)
			return LIBMCDRIVER_OPCUA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_OPCUA_CreateCommand = (PLibMCDriver_OPCUADriver_OPCUA_CreateCommandPtr) GetProcAddress(hLibrary, "libmcdriver_opcua_driver_opcua_createcommand");
		#else // _WIN32
		pWrapperTable->m_Driver_OPCUA_CreateCommand = (PLibMCDriver_OPCUADriver_OPCUA_CreateCommandPtr) dlsym(hLibrary, "libmcdriver_opcua_driver_opcua_createcommand");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_OPCUA_CreateCommand == nullptr)
			return LIBMCDRIVER_OPCUA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_OPCUA_StartJournaling = (PLibMCDriver_OPCUADriver_OPCUA_StartJournalingPtr) GetProcAddress(hLibrary, "libmcdriver_opcua_driver_opcua_startjournaling");
		#else // _WIN32
		pWrapperTable->m_Driver_OPCUA_StartJournaling = (PLibMCDriver_OPCUADriver_OPCUA_StartJournalingPtr) dlsym(hLibrary, "libmcdriver_opcua_driver_opcua_startjournaling");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_OPCUA_StartJournaling == nullptr)
			return LIBMCDRIVER_OPCUA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_OPCUA_StopJournaling = (PLibMCDriver_OPCUADriver_OPCUA_StopJournalingPtr) GetProcAddress(hLibrary, "libmcdriver_opcua_driver_opcua_stopjournaling");
		#else // _WIN32
		pWrapperTable->m_Driver_OPCUA_StopJournaling = (PLibMCDriver_OPCUADriver_OPCUA_StopJournalingPtr) dlsym(hLibrary, "libmcdriver_opcua_driver_opcua_stopjournaling");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_OPCUA_StopJournaling == nullptr)
			return LIBMCDRIVER_OPCUA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_OPCUA_RefreshJournal = (PLibMCDriver_OPCUADriver_OPCUA_RefreshJournalPtr) GetProcAddress(hLibrary, "libmcdriver_opcua_driver_opcua_refreshjournal");
		#else // _WIN32
		pWrapperTable->m_Driver_OPCUA_RefreshJournal = (PLibMCDriver_OPCUADriver_OPCUA_RefreshJournalPtr) dlsym(hLibrary, "libmcdriver_opcua_driver_opcua_refreshjournal");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_OPCUA_RefreshJournal == nullptr)
			return LIBMCDRIVER_OPCUA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GetVersion = (PLibMCDriver_OPCUAGetVersionPtr) GetProcAddress(hLibrary, "libmcdriver_opcua_getversion");
		#else // _WIN32
		pWrapperTable->m_GetVersion = (PLibMCDriver_OPCUAGetVersionPtr) dlsym(hLibrary, "libmcdriver_opcua_getversion");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GetVersion == nullptr)
			return LIBMCDRIVER_OPCUA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GetLastError = (PLibMCDriver_OPCUAGetLastErrorPtr) GetProcAddress(hLibrary, "libmcdriver_opcua_getlasterror");
		#else // _WIN32
		pWrapperTable->m_GetLastError = (PLibMCDriver_OPCUAGetLastErrorPtr) dlsym(hLibrary, "libmcdriver_opcua_getlasterror");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GetLastError == nullptr)
			return LIBMCDRIVER_OPCUA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ReleaseInstance = (PLibMCDriver_OPCUAReleaseInstancePtr) GetProcAddress(hLibrary, "libmcdriver_opcua_releaseinstance");
		#else // _WIN32
		pWrapperTable->m_ReleaseInstance = (PLibMCDriver_OPCUAReleaseInstancePtr) dlsym(hLibrary, "libmcdriver_opcua_releaseinstance");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ReleaseInstance == nullptr)
			return LIBMCDRIVER_OPCUA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_AcquireInstance = (PLibMCDriver_OPCUAAcquireInstancePtr) GetProcAddress(hLibrary, "libmcdriver_opcua_acquireinstance");
		#else // _WIN32
		pWrapperTable->m_AcquireInstance = (PLibMCDriver_OPCUAAcquireInstancePtr) dlsym(hLibrary, "libmcdriver_opcua_acquireinstance");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_AcquireInstance == nullptr)
			return LIBMCDRIVER_OPCUA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_InjectComponent = (PLibMCDriver_OPCUAInjectComponentPtr) GetProcAddress(hLibrary, "libmcdriver_opcua_injectcomponent");
		#else // _WIN32
		pWrapperTable->m_InjectComponent = (PLibMCDriver_OPCUAInjectComponentPtr) dlsym(hLibrary, "libmcdriver_opcua_injectcomponent");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_InjectComponent == nullptr)
			return LIBMCDRIVER_OPCUA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GetSymbolLookupMethod = (PLibMCDriver_OPCUAGetSymbolLookupMethodPtr) GetProcAddress(hLibrary, "libmcdriver_opcua_getsymbollookupmethod");
		#else // _WIN32
		pWrapperTable->m_GetSymbolLookupMethod = (PLibMCDriver_OPCUAGetSymbolLookupMethodPtr) dlsym(hLibrary, "libmcdriver_opcua_getsymbollookupmethod");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GetSymbolLookupMethod == nullptr)
			return LIBMCDRIVER_OPCUA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_CreateDriver = (PLibMCDriver_OPCUACreateDriverPtr) GetProcAddress(hLibrary, "libmcdriver_opcua_createdriver");
		#else // _WIN32
		pWrapperTable->m_CreateDriver = (PLibMCDriver_OPCUACreateDriverPtr) dlsym(hLibrary, "libmcdriver_opcua_createdriver");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_CreateDriver == nullptr)
			return LIBMCDRIVER_OPCUA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		pWrapperTable->m_LibraryHandle = hLibrary;
		return LIBMCDRIVER_OPCUA_SUCCESS;
	}

	inline LibMCDriver_OPCUAResult CWrapper::loadWrapperTableFromSymbolLookupMethod(sLibMCDriver_OPCUADynamicWrapperTable * pWrapperTable, void* pSymbolLookupMethod)
{
		if (pWrapperTable == nullptr)
			return LIBMCDRIVER_OPCUA_ERROR_INVALIDPARAM;
		if (pSymbolLookupMethod == nullptr)
			return LIBMCDRIVER_OPCUA_ERROR_INVALIDPARAM;
		
		typedef LibMCDriver_OPCUAResult(*SymbolLookupType)(const char*, void**);
		
		SymbolLookupType pLookup = (SymbolLookupType)pSymbolLookupMethod;
		
		LibMCDriver_OPCUAResult eLookupError = LIBMCDRIVER_OPCUA_SUCCESS;
		eLookupError = (*pLookup)("libmcdriver_opcua_driver_configure", (void**)&(pWrapperTable->m_Driver_Configure));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_Configure == nullptr) )
			return LIBMCDRIVER_OPCUA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_opcua_driver_getname", (void**)&(pWrapperTable->m_Driver_GetName));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_GetName == nullptr) )
			return LIBMCDRIVER_OPCUA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_opcua_driver_gettype", (void**)&(pWrapperTable->m_Driver_GetType));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_GetType == nullptr) )
			return LIBMCDRIVER_OPCUA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_opcua_driver_getversion", (void**)&(pWrapperTable->m_Driver_GetVersion));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_GetVersion == nullptr) )
			return LIBMCDRIVER_OPCUA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_opcua_driver_getheaderinformation", (void**)&(pWrapperTable->m_Driver_GetHeaderInformation));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_GetHeaderInformation == nullptr) )
			return LIBMCDRIVER_OPCUA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_opcua_driver_queryparameters", (void**)&(pWrapperTable->m_Driver_QueryParameters));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_QueryParameters == nullptr) )
			return LIBMCDRIVER_OPCUA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_opcua_plccommand_setintegerparameter", (void**)&(pWrapperTable->m_PLCCommand_SetIntegerParameter));
		if ( (eLookupError != 0) || (pWrapperTable->m_PLCCommand_SetIntegerParameter == nullptr) )
			return LIBMCDRIVER_OPCUA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_opcua_plccommand_setboolparameter", (void**)&(pWrapperTable->m_PLCCommand_SetBoolParameter));
		if ( (eLookupError != 0) || (pWrapperTable->m_PLCCommand_SetBoolParameter == nullptr) )
			return LIBMCDRIVER_OPCUA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_opcua_plccommand_setdoubleparameter", (void**)&(pWrapperTable->m_PLCCommand_SetDoubleParameter));
		if ( (eLookupError != 0) || (pWrapperTable->m_PLCCommand_SetDoubleParameter == nullptr) )
			return LIBMCDRIVER_OPCUA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_opcua_plccommandlist_addcommand", (void**)&(pWrapperTable->m_PLCCommandList_AddCommand));
		if ( (eLookupError != 0) || (pWrapperTable->m_PLCCommandList_AddCommand == nullptr) )
			return LIBMCDRIVER_OPCUA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_opcua_plccommandlist_finishlist", (void**)&(pWrapperTable->m_PLCCommandList_FinishList));
		if ( (eLookupError != 0) || (pWrapperTable->m_PLCCommandList_FinishList == nullptr) )
			return LIBMCDRIVER_OPCUA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_opcua_plccommandlist_executelist", (void**)&(pWrapperTable->m_PLCCommandList_ExecuteList));
		if ( (eLookupError != 0) || (pWrapperTable->m_PLCCommandList_ExecuteList == nullptr) )
			return LIBMCDRIVER_OPCUA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_opcua_plccommandlist_waitforlist", (void**)&(pWrapperTable->m_PLCCommandList_WaitForList));
		if ( (eLookupError != 0) || (pWrapperTable->m_PLCCommandList_WaitForList == nullptr) )
			return LIBMCDRIVER_OPCUA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_opcua_plccommandlist_pauselist", (void**)&(pWrapperTable->m_PLCCommandList_PauseList));
		if ( (eLookupError != 0) || (pWrapperTable->m_PLCCommandList_PauseList == nullptr) )
			return LIBMCDRIVER_OPCUA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_opcua_plccommandlist_resumelist", (void**)&(pWrapperTable->m_PLCCommandList_ResumeList));
		if ( (eLookupError != 0) || (pWrapperTable->m_PLCCommandList_ResumeList == nullptr) )
			return LIBMCDRIVER_OPCUA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_opcua_driver_opcua_settosimulationmode", (void**)&(pWrapperTable->m_Driver_OPCUA_SetToSimulationMode));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_OPCUA_SetToSimulationMode == nullptr) )
			return LIBMCDRIVER_OPCUA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_opcua_driver_opcua_issimulationmode", (void**)&(pWrapperTable->m_Driver_OPCUA_IsSimulationMode));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_OPCUA_IsSimulationMode == nullptr) )
			return LIBMCDRIVER_OPCUA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_opcua_driver_opcua_connect", (void**)&(pWrapperTable->m_Driver_OPCUA_Connect));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_OPCUA_Connect == nullptr) )
			return LIBMCDRIVER_OPCUA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_opcua_driver_opcua_disconnect", (void**)&(pWrapperTable->m_Driver_OPCUA_Disconnect));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_OPCUA_Disconnect == nullptr) )
			return LIBMCDRIVER_OPCUA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_opcua_driver_opcua_createcommandlist", (void**)&(pWrapperTable->m_Driver_OPCUA_CreateCommandList));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_OPCUA_CreateCommandList == nullptr) )
			return LIBMCDRIVER_OPCUA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_opcua_driver_opcua_createcommand", (void**)&(pWrapperTable->m_Driver_OPCUA_CreateCommand));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_OPCUA_CreateCommand == nullptr) )
			return LIBMCDRIVER_OPCUA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_opcua_driver_opcua_startjournaling", (void**)&(pWrapperTable->m_Driver_OPCUA_StartJournaling));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_OPCUA_StartJournaling == nullptr) )
			return LIBMCDRIVER_OPCUA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_opcua_driver_opcua_stopjournaling", (void**)&(pWrapperTable->m_Driver_OPCUA_StopJournaling));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_OPCUA_StopJournaling == nullptr) )
			return LIBMCDRIVER_OPCUA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_opcua_driver_opcua_refreshjournal", (void**)&(pWrapperTable->m_Driver_OPCUA_RefreshJournal));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_OPCUA_RefreshJournal == nullptr) )
			return LIBMCDRIVER_OPCUA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_opcua_getversion", (void**)&(pWrapperTable->m_GetVersion));
		if ( (eLookupError != 0) || (pWrapperTable->m_GetVersion == nullptr) )
			return LIBMCDRIVER_OPCUA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_opcua_getlasterror", (void**)&(pWrapperTable->m_GetLastError));
		if ( (eLookupError != 0) || (pWrapperTable->m_GetLastError == nullptr) )
			return LIBMCDRIVER_OPCUA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_opcua_releaseinstance", (void**)&(pWrapperTable->m_ReleaseInstance));
		if ( (eLookupError != 0) || (pWrapperTable->m_ReleaseInstance == nullptr) )
			return LIBMCDRIVER_OPCUA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_opcua_acquireinstance", (void**)&(pWrapperTable->m_AcquireInstance));
		if ( (eLookupError != 0) || (pWrapperTable->m_AcquireInstance == nullptr) )
			return LIBMCDRIVER_OPCUA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_opcua_injectcomponent", (void**)&(pWrapperTable->m_InjectComponent));
		if ( (eLookupError != 0) || (pWrapperTable->m_InjectComponent == nullptr) )
			return LIBMCDRIVER_OPCUA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_opcua_getsymbollookupmethod", (void**)&(pWrapperTable->m_GetSymbolLookupMethod));
		if ( (eLookupError != 0) || (pWrapperTable->m_GetSymbolLookupMethod == nullptr) )
			return LIBMCDRIVER_OPCUA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_opcua_createdriver", (void**)&(pWrapperTable->m_CreateDriver));
		if ( (eLookupError != 0) || (pWrapperTable->m_CreateDriver == nullptr) )
			return LIBMCDRIVER_OPCUA_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		return LIBMCDRIVER_OPCUA_SUCCESS;
}

	
	
	/**
	 * Method definitions for class CBase
	 */
	
	/**
	 * Method definitions for class CDriver
	 */
	
	/**
	* CDriver::Configure - Configures a driver with its specific configuration data.
	* @param[in] sConfigurationString - Configuration data of driver.
	*/
	void CDriver::Configure(const std::string & sConfigurationString)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_Configure(m_pHandle, sConfigurationString.c_str()));
	}
	
	/**
	* CDriver::GetName - returns the name identifier of the driver
	* @return Name of the driver.
	*/
	std::string CDriver::GetName()
	{
		LibMCDriver_OPCUA_uint32 bytesNeededName = 0;
		LibMCDriver_OPCUA_uint32 bytesWrittenName = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetName(m_pHandle, 0, &bytesNeededName, nullptr));
		std::vector<char> bufferName(bytesNeededName);
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetName(m_pHandle, bytesNeededName, &bytesWrittenName, &bufferName[0]));
		
		return std::string(&bufferName[0]);
	}
	
	/**
	* CDriver::GetType - returns the type identifier of the driver
	* @return Type of the driver.
	*/
	std::string CDriver::GetType()
	{
		LibMCDriver_OPCUA_uint32 bytesNeededType = 0;
		LibMCDriver_OPCUA_uint32 bytesWrittenType = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetType(m_pHandle, 0, &bytesNeededType, nullptr));
		std::vector<char> bufferType(bytesNeededType);
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetType(m_pHandle, bytesNeededType, &bytesWrittenType, &bufferType[0]));
		
		return std::string(&bufferType[0]);
	}
	
	/**
	* CDriver::GetVersion - returns the version identifiers of the driver
	* @param[out] nMajor - Major version.
	* @param[out] nMinor - Minor version.
	* @param[out] nMicro - Micro version.
	* @param[out] sBuild - Build identifier.
	*/
	void CDriver::GetVersion(LibMCDriver_OPCUA_uint32 & nMajor, LibMCDriver_OPCUA_uint32 & nMinor, LibMCDriver_OPCUA_uint32 & nMicro, std::string & sBuild)
	{
		LibMCDriver_OPCUA_uint32 bytesNeededBuild = 0;
		LibMCDriver_OPCUA_uint32 bytesWrittenBuild = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetVersion(m_pHandle, &nMajor, &nMinor, &nMicro, 0, &bytesNeededBuild, nullptr));
		std::vector<char> bufferBuild(bytesNeededBuild);
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetVersion(m_pHandle, &nMajor, &nMinor, &nMicro, bytesNeededBuild, &bytesWrittenBuild, &bufferBuild[0]));
		sBuild = std::string(&bufferBuild[0]);
	}
	
	/**
	* CDriver::GetHeaderInformation - returns the header information
	* @param[out] sNameSpace - NameSpace of the driver.
	* @param[out] sBaseName - BaseName of the driver.
	*/
	void CDriver::GetHeaderInformation(std::string & sNameSpace, std::string & sBaseName)
	{
		LibMCDriver_OPCUA_uint32 bytesNeededNameSpace = 0;
		LibMCDriver_OPCUA_uint32 bytesWrittenNameSpace = 0;
		LibMCDriver_OPCUA_uint32 bytesNeededBaseName = 0;
		LibMCDriver_OPCUA_uint32 bytesWrittenBaseName = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetHeaderInformation(m_pHandle, 0, &bytesNeededNameSpace, nullptr, 0, &bytesNeededBaseName, nullptr));
		std::vector<char> bufferNameSpace(bytesNeededNameSpace);
		std::vector<char> bufferBaseName(bytesNeededBaseName);
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetHeaderInformation(m_pHandle, bytesNeededNameSpace, &bytesWrittenNameSpace, &bufferNameSpace[0], bytesNeededBaseName, &bytesWrittenBaseName, &bufferBaseName[0]));
		sNameSpace = std::string(&bufferNameSpace[0]);
		sBaseName = std::string(&bufferBaseName[0]);
	}
	
	/**
	* CDriver::QueryParameters - Stores the driver parameters in the driver environment.
	*/
	void CDriver::QueryParameters()
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_QueryParameters(m_pHandle));
	}
	
	/**
	 * Method definitions for class CPLCCommand
	 */
	
	/**
	* CPLCCommand::SetIntegerParameter - Sets an integer parameter of the command
	* @param[in] sParameterName - Parameter Value
	* @param[in] nValue - Parameter Value
	*/
	void CPLCCommand::SetIntegerParameter(const std::string & sParameterName, const LibMCDriver_OPCUA_int64 nValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_PLCCommand_SetIntegerParameter(m_pHandle, sParameterName.c_str(), nValue));
	}
	
	/**
	* CPLCCommand::SetBoolParameter - Sets a bool parameter of the command
	* @param[in] sParameterName - Parameter Value
	* @param[in] bValue - Parameter Value
	*/
	void CPLCCommand::SetBoolParameter(const std::string & sParameterName, const bool bValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_PLCCommand_SetBoolParameter(m_pHandle, sParameterName.c_str(), bValue));
	}
	
	/**
	* CPLCCommand::SetDoubleParameter - Sets a double parameter of the command
	* @param[in] sParameterName - Parameter Value
	* @param[in] dValue - Parameter Value
	*/
	void CPLCCommand::SetDoubleParameter(const std::string & sParameterName, const LibMCDriver_OPCUA_double dValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_PLCCommand_SetDoubleParameter(m_pHandle, sParameterName.c_str(), dValue));
	}
	
	/**
	 * Method definitions for class CPLCCommandList
	 */
	
	/**
	* CPLCCommandList::AddCommand - Adds a command to the list. List must not be executed before.
	* @param[in] pCommandInstance - Add a command instance.
	*/
	void CPLCCommandList::AddCommand(classParam<CPLCCommand> pCommandInstance)
	{
		LibMCDriver_OPCUAHandle hCommandInstance = pCommandInstance.GetHandle();
		CheckError(m_pWrapper->m_WrapperTable.m_PLCCommandList_AddCommand(m_pHandle, hCommandInstance));
	}
	
	/**
	* CPLCCommandList::FinishList - Finish command list.
	*/
	void CPLCCommandList::FinishList()
	{
		CheckError(m_pWrapper->m_WrapperTable.m_PLCCommandList_FinishList(m_pHandle));
	}
	
	/**
	* CPLCCommandList::ExecuteList - Execute command list.
	*/
	void CPLCCommandList::ExecuteList()
	{
		CheckError(m_pWrapper->m_WrapperTable.m_PLCCommandList_ExecuteList(m_pHandle));
	}
	
	/**
	* CPLCCommandList::WaitForList - Wait for command list to finish executing
	* @param[in] nReactionTimeInMS - How much time the PLC may need to react to the command in Milliseconds. Will fail if no reaction in that time.
	* @param[in] nWaitForTimeInMS - How long to wait for the command to be finished in Milliseconds. Will return false if command has not finished.
	* @return Returns true if the command was finished successfully.
	*/
	bool CPLCCommandList::WaitForList(const LibMCDriver_OPCUA_uint32 nReactionTimeInMS, const LibMCDriver_OPCUA_uint32 nWaitForTimeInMS)
	{
		bool resultCommandSuccess = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_PLCCommandList_WaitForList(m_pHandle, nReactionTimeInMS, nWaitForTimeInMS, &resultCommandSuccess));
		
		return resultCommandSuccess;
	}
	
	/**
	* CPLCCommandList::PauseList - Pause command list. Must be executed or resumed before.
	*/
	void CPLCCommandList::PauseList()
	{
		CheckError(m_pWrapper->m_WrapperTable.m_PLCCommandList_PauseList(m_pHandle));
	}
	
	/**
	* CPLCCommandList::ResumeList - Resume command list. Must be paused before.
	*/
	void CPLCCommandList::ResumeList()
	{
		CheckError(m_pWrapper->m_WrapperTable.m_PLCCommandList_ResumeList(m_pHandle));
	}
	
	/**
	 * Method definitions for class CDriver_OPCUA
	 */
	
	/**
	* CDriver_OPCUA::SetToSimulationMode - Turns the driver into a simulation mode.
	*/
	void CDriver_OPCUA::SetToSimulationMode()
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_OPCUA_SetToSimulationMode(m_pHandle));
	}
	
	/**
	* CDriver_OPCUA::IsSimulationMode - Returns if the driver is in simulation mode.
	* @return Flag if driver is in simulation mode.
	*/
	bool CDriver_OPCUA::IsSimulationMode()
	{
		bool resultSimulationModeEnabled = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_OPCUA_IsSimulationMode(m_pHandle, &resultSimulationModeEnabled));
		
		return resultSimulationModeEnabled;
	}
	
	/**
	* CDriver_OPCUA::Connect - Connects to a OPCUA PLC Controller.
	* @param[in] sIPAddress - IP Address of PLC Service.
	* @param[in] nPort - Port of PLC Service.
	* @param[in] nTimeout - Timeout in milliseconds.
	*/
	void CDriver_OPCUA::Connect(const std::string & sIPAddress, const LibMCDriver_OPCUA_uint32 nPort, const LibMCDriver_OPCUA_uint32 nTimeout)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_OPCUA_Connect(m_pHandle, sIPAddress.c_str(), nPort, nTimeout));
	}
	
	/**
	* CDriver_OPCUA::Disconnect - Disconnects from the OPCUA PLC Controller.
	*/
	void CDriver_OPCUA::Disconnect()
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_OPCUA_Disconnect(m_pHandle));
	}
	
	/**
	* CDriver_OPCUA::CreateCommandList - Create Command
	* @return Command list instance
	*/
	PPLCCommandList CDriver_OPCUA::CreateCommandList()
	{
		LibMCDriver_OPCUAHandle hListInstance = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_OPCUA_CreateCommandList(m_pHandle, &hListInstance));
		
		if (!hListInstance) {
			CheckError(LIBMCDRIVER_OPCUA_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CPLCCommandList>(m_pWrapper, hListInstance);
	}
	
	/**
	* CDriver_OPCUA::CreateCommand - Creates a command instance.
	* @param[in] sCommandName - Command Name.
	* @return Returns a command instance.
	*/
	PPLCCommand CDriver_OPCUA::CreateCommand(const std::string & sCommandName)
	{
		LibMCDriver_OPCUAHandle hCommandInstance = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_OPCUA_CreateCommand(m_pHandle, sCommandName.c_str(), &hCommandInstance));
		
		if (!hCommandInstance) {
			CheckError(LIBMCDRIVER_OPCUA_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CPLCCommand>(m_pWrapper, hCommandInstance);
	}
	
	/**
	* CDriver_OPCUA::StartJournaling - Start Journaling.
	*/
	void CDriver_OPCUA::StartJournaling()
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_OPCUA_StartJournaling(m_pHandle));
	}
	
	/**
	* CDriver_OPCUA::StopJournaling - Stop Journaling.
	*/
	void CDriver_OPCUA::StopJournaling()
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_OPCUA_StopJournaling(m_pHandle));
	}
	
	/**
	* CDriver_OPCUA::RefreshJournal - Refresh Journal.
	*/
	void CDriver_OPCUA::RefreshJournal()
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_OPCUA_RefreshJournal(m_pHandle));
	}

} // namespace LibMCDriver_OPCUA

#endif // __LIBMCDRIVER_OPCUA_CPPHEADER_DYNAMIC_CPP

