/*++

Copyright (C) 2020 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.7.0-develop.

Abstract: This is an autogenerated C++-Header file in order to allow an easy
 use of MC Driver Marlin 2.0

Interface version: 1.0.0

*/

#ifndef __LIBMCDRIVER_MARLIN_CPPHEADER_DYNAMIC_CPP
#define __LIBMCDRIVER_MARLIN_CPPHEADER_DYNAMIC_CPP

#include "libmcdriver_marlin_types.hpp"
#include "libmcdriver_marlin_dynamic.h"

#include "libmcdriverenv_dynamic.hpp"

#ifdef _WIN32
#include <windows.h>
#else // _WIN32
#include <dlfcn.h>
#endif // _WIN32
#include <string>
#include <memory>
#include <vector>
#include <exception>

namespace LibMCDriver_Marlin {

/*************************************************************************************************************************
 Forward Declaration of all classes
**************************************************************************************************************************/
class CWrapper;
class CBase;
class CDriver;
class CDriver_Marlin;

/*************************************************************************************************************************
 Declaration of deprecated class types
**************************************************************************************************************************/
typedef CWrapper CLibMCDriver_MarlinWrapper;
typedef CBase CLibMCDriver_MarlinBase;
typedef CDriver CLibMCDriver_MarlinDriver;
typedef CDriver_Marlin CLibMCDriver_MarlinDriver_Marlin;

/*************************************************************************************************************************
 Declaration of shared pointer types
**************************************************************************************************************************/
typedef std::shared_ptr<CWrapper> PWrapper;
typedef std::shared_ptr<CBase> PBase;
typedef std::shared_ptr<CDriver> PDriver;
typedef std::shared_ptr<CDriver_Marlin> PDriver_Marlin;

/*************************************************************************************************************************
 Declaration of deprecated shared pointer types
**************************************************************************************************************************/
typedef PWrapper PLibMCDriver_MarlinWrapper;
typedef PBase PLibMCDriver_MarlinBase;
typedef PDriver PLibMCDriver_MarlinDriver;
typedef PDriver_Marlin PLibMCDriver_MarlinDriver_Marlin;


/*************************************************************************************************************************
 classParam Definition
**************************************************************************************************************************/

template<class T> class classParam {
private:
	const T* m_ptr;

public:
	classParam(const T* ptr)
		: m_ptr (ptr)
	{
	}

	classParam(std::shared_ptr <T> sharedPtr)
		: m_ptr (sharedPtr.get())
	{
	}

	LibMCDriver_MarlinHandle GetHandle()
	{
		if (m_ptr != nullptr)
			return m_ptr->handle();
		return nullptr;
	}
};

/*************************************************************************************************************************
 Class ELibMCDriver_MarlinException 
**************************************************************************************************************************/
class ELibMCDriver_MarlinException : public std::exception {
protected:
	/**
	* Error code for the Exception.
	*/
	LibMCDriver_MarlinResult m_errorCode;
	/**
	* Error message for the Exception.
	*/
	std::string m_errorMessage;

public:
	/**
	* Exception Constructor.
	*/
	ELibMCDriver_MarlinException(LibMCDriver_MarlinResult errorCode, const std::string & sErrorMessage)
		: m_errorMessage("LibMCDriver_Marlin Error " + std::to_string(errorCode) + " (" + sErrorMessage + ")")
	{
		m_errorCode = errorCode;
	}

	/**
	* Returns error code
	*/
	LibMCDriver_MarlinResult getErrorCode() const noexcept
	{
		return m_errorCode;
	}

	/**
	* Returns error message
	*/
	const char* what() const noexcept
	{
		return m_errorMessage.c_str();
	}

};

/*************************************************************************************************************************
 Class CInputVector
**************************************************************************************************************************/
template <typename T>
class CInputVector {
private:
	
	const T* m_data;
	size_t m_size;
	
public:
	
	CInputVector( const std::vector<T>& vec)
		: m_data( vec.data() ), m_size( vec.size() )
	{
	}
	
	CInputVector( const T* in_data, size_t in_size)
		: m_data( in_data ), m_size(in_size )
	{
	}
	
	const T* data() const
	{
		return m_data;
	}
	
	size_t size() const
	{
		return m_size;
	}
	
};

// declare deprecated class name
template<typename T>
using CLibMCDriver_MarlinInputVector = CInputVector<T>;

/*************************************************************************************************************************
 Class CWrapper 
**************************************************************************************************************************/
class CWrapper {
public:
	
	CWrapper(void* pSymbolLookupMethod)
	{
		CheckError(nullptr, initWrapperTable(&m_WrapperTable));
		CheckError(nullptr, loadWrapperTableFromSymbolLookupMethod(&m_WrapperTable, pSymbolLookupMethod));
		
		CheckError(nullptr, checkBinaryVersion());
	}
	
	CWrapper(const std::string &sFileName)
	{
		CheckError(nullptr, initWrapperTable(&m_WrapperTable));
		CheckError(nullptr, loadWrapperTable(&m_WrapperTable, sFileName.c_str()));
		
		CheckError(nullptr, checkBinaryVersion());
	}
	
	static PWrapper loadLibrary(const std::string &sFileName)
	{
		return std::make_shared<CWrapper>(sFileName);
	}
	
	static PWrapper loadLibraryFromSymbolLookupMethod(void* pSymbolLookupMethod)
	{
		return std::make_shared<CWrapper>(pSymbolLookupMethod);
	}
	
	~CWrapper()
	{
		releaseWrapperTable(&m_WrapperTable);
	}
	
	inline void CheckError(CBase * pBaseClass, LibMCDriver_MarlinResult nResult);

	inline void GetVersion(LibMCDriver_Marlin_uint32 & nMajor, LibMCDriver_Marlin_uint32 & nMinor, LibMCDriver_Marlin_uint32 & nMicro);
	inline bool GetLastError(classParam<CBase> pInstance, std::string & sErrorMessage);
	inline void ReleaseInstance(classParam<CBase> pInstance);
	inline void AcquireInstance(classParam<CBase> pInstance);
	inline void InjectComponent(const std::string & sNameSpace, const LibMCDriver_Marlin_pvoid pSymbolAddressMethod);
	inline LibMCDriver_Marlin_pvoid GetSymbolLookupMethod();
	inline PDriver CreateDriver(const std::string & sName, const std::string & sType, classParam<LibMCDriverEnv::CDriverEnvironment> pDriverEnvironment);

private:
	sLibMCDriver_MarlinDynamicWrapperTable m_WrapperTable;
	// Injected Components
	LibMCDriverEnv::PWrapper m_pLibMCDriverEnvWrapper;

	
	LibMCDriver_MarlinResult checkBinaryVersion()
	{
		LibMCDriver_Marlin_uint32 nMajor, nMinor, nMicro;
		GetVersion(nMajor, nMinor, nMicro);
		if ( (nMajor != LIBMCDRIVER_MARLIN_VERSION_MAJOR) || (nMinor < LIBMCDRIVER_MARLIN_VERSION_MINOR) ) {
			return LIBMCDRIVER_MARLIN_ERROR_INCOMPATIBLEBINARYVERSION;
		}
		return LIBMCDRIVER_MARLIN_SUCCESS;
	}
	LibMCDriver_MarlinResult initWrapperTable(sLibMCDriver_MarlinDynamicWrapperTable * pWrapperTable);
	LibMCDriver_MarlinResult releaseWrapperTable(sLibMCDriver_MarlinDynamicWrapperTable * pWrapperTable);
	LibMCDriver_MarlinResult loadWrapperTable(sLibMCDriver_MarlinDynamicWrapperTable * pWrapperTable, const char * pLibraryFileName);
	LibMCDriver_MarlinResult loadWrapperTableFromSymbolLookupMethod(sLibMCDriver_MarlinDynamicWrapperTable * pWrapperTable, void* pSymbolLookupMethod);

	friend class CBase;
	friend class CDriver;
	friend class CDriver_Marlin;

};

	
/*************************************************************************************************************************
 Class CBase 
**************************************************************************************************************************/
class CBase {
public:
	
protected:
	/* Wrapper Object that created the class. */
	CWrapper * m_pWrapper;
	/* Handle to Instance in library*/
	LibMCDriver_MarlinHandle m_pHandle;

	/* Checks for an Error code and raises Exceptions */
	void CheckError(LibMCDriver_MarlinResult nResult)
	{
		if (m_pWrapper != nullptr)
			m_pWrapper->CheckError(this, nResult);
	}
public:
	/**
	* CBase::CBase - Constructor for Base class.
	*/
	CBase(CWrapper * pWrapper, LibMCDriver_MarlinHandle pHandle)
		: m_pWrapper(pWrapper), m_pHandle(pHandle)
	{
	}

	/**
	* CBase::~CBase - Destructor for Base class.
	*/
	virtual ~CBase()
	{
		if (m_pWrapper != nullptr)
			m_pWrapper->ReleaseInstance(this);
		m_pWrapper = nullptr;
	}

	/**
	* CBase::handle - Returns handle to instance.
	*/
	LibMCDriver_MarlinHandle handle() const
	{
		return m_pHandle;
	}

	/**
	* CBase::wrapper - Returns wrapper instance.
	*/
	CWrapper * wrapper() const
	{
		return m_pWrapper;
	}
	
	friend class CWrapper;
};
	
/*************************************************************************************************************************
 Class CDriver 
**************************************************************************************************************************/
class CDriver : public CBase {
public:
	
	/**
	* CDriver::CDriver - Constructor for Driver class.
	*/
	CDriver(CWrapper* pWrapper, LibMCDriver_MarlinHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline std::string GetName();
	inline std::string GetType();
	inline void GetVersion(LibMCDriver_Marlin_uint32 & nMajor, LibMCDriver_Marlin_uint32 & nMinor, LibMCDriver_Marlin_uint32 & nMicro, std::string & sBuild);
	inline void GetHeaderInformation(std::string & sNameSpace, std::string & sBaseName);
};
	
/*************************************************************************************************************************
 Class CDriver_Marlin 
**************************************************************************************************************************/
class CDriver_Marlin : public CDriver {
public:
	
	/**
	* CDriver_Marlin::CDriver_Marlin - Constructor for Driver_Marlin class.
	*/
	CDriver_Marlin(CWrapper* pWrapper, LibMCDriver_MarlinHandle pHandle)
		: CDriver(pWrapper, pHandle)
	{
	}
	
	inline void Connect(const std::string & sCOMPort, const LibMCDriver_Marlin_uint32 nBaudrate, const LibMCDriver_Marlin_double dStatusUpdateInterval, const LibMCDriver_Marlin_uint32 nConnectTimeout);
	inline void Disconnect();
	inline void SetAbsolutePositioning(const bool bAbsolute);
	inline void SetHeatedBedTargetTemperature(const LibMCDriver_Marlin_double dTemperatureInDegreeCelcius, const bool bWaitForTemp);
	inline void SetExtruderTargetTemperature(const LibMCDriver_Marlin_uint32 nExtruderID, const LibMCDriver_Marlin_double dTemperatureInDegreeCelcius, const bool bWaitForTemp);
	inline void SetFanSpeed(const LibMCDriver_Marlin_uint32 nFanID, const LibMCDriver_Marlin_uint32 nSpeed);
	inline void SetPidParameters(const LibMCDriver_Marlin_double dP, const LibMCDriver_Marlin_double dI, const LibMCDriver_Marlin_double dD);
	inline void UpdateState(const LibMCDriver_Marlin_uint32 nExtruderID);
	inline void GetCurrentPosition(LibMCDriver_Marlin_double & dX, LibMCDriver_Marlin_double & dY, LibMCDriver_Marlin_double & dZ);
	inline void GetTargetPosition(LibMCDriver_Marlin_double & dX, LibMCDriver_Marlin_double & dY, LibMCDriver_Marlin_double & dZ);
	inline void GetExtruderTargetPosition(LibMCDriver_Marlin_double & dE);
	inline void GetHeatedBedTemperature(LibMCDriver_Marlin_double & dTargetTemperature, LibMCDriver_Marlin_double & dCurrentTemperature);
	inline void GetExtruderTemperature(const LibMCDriver_Marlin_uint32 nExtruderID, LibMCDriver_Marlin_double & dTargetTemperature, LibMCDriver_Marlin_double & dCurrentTemperature);
	inline void GetPidParameters(LibMCDriver_Marlin_double & dP, LibMCDriver_Marlin_double & dI, LibMCDriver_Marlin_double & dD);
	inline bool CanExecuteMovement();
	inline bool IsMoving();
	inline bool IsHomed();
	inline bool IsConnected();
	inline void MoveToXY(const LibMCDriver_Marlin_double dX, const LibMCDriver_Marlin_double dY, const LibMCDriver_Marlin_double dE, const LibMCDriver_Marlin_double dSpeed);
	inline void MoveFastToXY(const LibMCDriver_Marlin_double dX, const LibMCDriver_Marlin_double dY, const LibMCDriver_Marlin_double dSpeed);
	inline void MoveToZ(const LibMCDriver_Marlin_double dZ, const LibMCDriver_Marlin_double dE, const LibMCDriver_Marlin_double dSpeed);
	inline void MoveFastToZ(const LibMCDriver_Marlin_double dZ, const LibMCDriver_Marlin_double dSpeed);
	inline void StartHoming();
	inline void EmergencyStop();
};
	
	/**
	* CWrapper::GetVersion - retrieves the binary version of this library.
	* @param[out] nMajor - returns the major version of this library
	* @param[out] nMinor - returns the minor version of this library
	* @param[out] nMicro - returns the micro version of this library
	*/
	inline void CWrapper::GetVersion(LibMCDriver_Marlin_uint32 & nMajor, LibMCDriver_Marlin_uint32 & nMinor, LibMCDriver_Marlin_uint32 & nMicro)
	{
		CheckError(nullptr,m_WrapperTable.m_GetVersion(&nMajor, &nMinor, &nMicro));
	}
	
	/**
	* CWrapper::GetLastError - Returns the last error recorded on this object
	* @param[in] pInstance - Instance Handle
	* @param[out] sErrorMessage - Message of the last error
	* @return Is there a last error to query
	*/
	inline bool CWrapper::GetLastError(classParam<CBase> pInstance, std::string & sErrorMessage)
	{
		LibMCDriver_MarlinHandle hInstance = pInstance.GetHandle();
		LibMCDriver_Marlin_uint32 bytesNeededErrorMessage = 0;
		LibMCDriver_Marlin_uint32 bytesWrittenErrorMessage = 0;
		bool resultHasError = 0;
		CheckError(nullptr,m_WrapperTable.m_GetLastError(hInstance, 0, &bytesNeededErrorMessage, nullptr, &resultHasError));
		std::vector<char> bufferErrorMessage(bytesNeededErrorMessage);
		CheckError(nullptr,m_WrapperTable.m_GetLastError(hInstance, bytesNeededErrorMessage, &bytesWrittenErrorMessage, &bufferErrorMessage[0], &resultHasError));
		sErrorMessage = std::string(&bufferErrorMessage[0]);
		
		return resultHasError;
	}
	
	/**
	* CWrapper::ReleaseInstance - Releases shared ownership of an Instance
	* @param[in] pInstance - Instance Handle
	*/
	inline void CWrapper::ReleaseInstance(classParam<CBase> pInstance)
	{
		LibMCDriver_MarlinHandle hInstance = pInstance.GetHandle();
		CheckError(nullptr,m_WrapperTable.m_ReleaseInstance(hInstance));
	}
	
	/**
	* CWrapper::AcquireInstance - Acquires shared ownership of an Instance
	* @param[in] pInstance - Instance Handle
	*/
	inline void CWrapper::AcquireInstance(classParam<CBase> pInstance)
	{
		LibMCDriver_MarlinHandle hInstance = pInstance.GetHandle();
		CheckError(nullptr,m_WrapperTable.m_AcquireInstance(hInstance));
	}
	
	/**
	* CWrapper::InjectComponent - Injects an imported component for usage within this component
	* @param[in] sNameSpace - NameSpace of the injected component
	* @param[in] pSymbolAddressMethod - Address of the SymbolAddressMethod of the injected component
	*/
	inline void CWrapper::InjectComponent(const std::string & sNameSpace, const LibMCDriver_Marlin_pvoid pSymbolAddressMethod)
	{
		CheckError(nullptr,m_WrapperTable.m_InjectComponent(sNameSpace.c_str(), pSymbolAddressMethod));
		
		bool bNameSpaceFound = false;
		if (sNameSpace == "LibMCDriverEnv") {
			if (m_pLibMCDriverEnvWrapper != nullptr) {
				throw ELibMCDriver_MarlinException(LIBMCDRIVER_MARLIN_ERROR_COULDNOTLOADLIBRARY, "Library with namespace " + sNameSpace + " is already registered.");
			}
			m_pLibMCDriverEnvWrapper = LibMCDriverEnv::CWrapper::loadLibraryFromSymbolLookupMethod(pSymbolAddressMethod);
			bNameSpaceFound = true;
		}
		if (!bNameSpaceFound)
			throw ELibMCDriver_MarlinException(LIBMCDRIVER_MARLIN_ERROR_COULDNOTLOADLIBRARY, "Unknown namespace " + sNameSpace);
	}
	
	/**
	* CWrapper::GetSymbolLookupMethod - Returns the address of the SymbolLookupMethod
	* @return Address of the SymbolAddressMethod
	*/
	inline LibMCDriver_Marlin_pvoid CWrapper::GetSymbolLookupMethod()
	{
		LibMCDriver_Marlin_pvoid resultSymbolLookupMethod = 0;
		CheckError(nullptr,m_WrapperTable.m_GetSymbolLookupMethod(&resultSymbolLookupMethod));
		
		return resultSymbolLookupMethod;
	}
	
	/**
	* CWrapper::CreateDriver - Creates a driver instance with a specific name.
	* @param[in] sName - Name of driver to be created.
	* @param[in] sType - Type of driver to be created.
	* @param[in] pDriverEnvironment - Environment of this driver.
	* @return New Driver instance
	*/
	inline PDriver CWrapper::CreateDriver(const std::string & sName, const std::string & sType, classParam<LibMCDriverEnv::CDriverEnvironment> pDriverEnvironment)
	{
		LibMCDriverEnvHandle hDriverEnvironment = pDriverEnvironment.GetHandle();
		LibMCDriver_MarlinHandle hInstance = nullptr;
		CheckError(nullptr,m_WrapperTable.m_CreateDriver(sName.c_str(), sType.c_str(), hDriverEnvironment, &hInstance));
		
		if (!hInstance) {
			CheckError(nullptr,LIBMCDRIVER_MARLIN_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CDriver>(this, hInstance);
	}
	
	inline void CWrapper::CheckError(CBase * pBaseClass, LibMCDriver_MarlinResult nResult)
	{
		if (nResult != 0) {
			std::string sErrorMessage;
			if (pBaseClass != nullptr) {
				GetLastError(pBaseClass, sErrorMessage);
			}
			throw ELibMCDriver_MarlinException(nResult, sErrorMessage);
		}
	}
	

	inline LibMCDriver_MarlinResult CWrapper::initWrapperTable(sLibMCDriver_MarlinDynamicWrapperTable * pWrapperTable)
	{
		if (pWrapperTable == nullptr)
			return LIBMCDRIVER_MARLIN_ERROR_INVALIDPARAM;
		
		pWrapperTable->m_LibraryHandle = nullptr;
		pWrapperTable->m_Driver_GetName = nullptr;
		pWrapperTable->m_Driver_GetType = nullptr;
		pWrapperTable->m_Driver_GetVersion = nullptr;
		pWrapperTable->m_Driver_GetHeaderInformation = nullptr;
		pWrapperTable->m_Driver_Marlin_Connect = nullptr;
		pWrapperTable->m_Driver_Marlin_Disconnect = nullptr;
		pWrapperTable->m_Driver_Marlin_SetAbsolutePositioning = nullptr;
		pWrapperTable->m_Driver_Marlin_SetHeatedBedTargetTemperature = nullptr;
		pWrapperTable->m_Driver_Marlin_SetExtruderTargetTemperature = nullptr;
		pWrapperTable->m_Driver_Marlin_SetFanSpeed = nullptr;
		pWrapperTable->m_Driver_Marlin_SetPidParameters = nullptr;
		pWrapperTable->m_Driver_Marlin_UpdateState = nullptr;
		pWrapperTable->m_Driver_Marlin_GetCurrentPosition = nullptr;
		pWrapperTable->m_Driver_Marlin_GetTargetPosition = nullptr;
		pWrapperTable->m_Driver_Marlin_GetExtruderTargetPosition = nullptr;
		pWrapperTable->m_Driver_Marlin_GetHeatedBedTemperature = nullptr;
		pWrapperTable->m_Driver_Marlin_GetExtruderTemperature = nullptr;
		pWrapperTable->m_Driver_Marlin_GetPidParameters = nullptr;
		pWrapperTable->m_Driver_Marlin_CanExecuteMovement = nullptr;
		pWrapperTable->m_Driver_Marlin_IsMoving = nullptr;
		pWrapperTable->m_Driver_Marlin_IsHomed = nullptr;
		pWrapperTable->m_Driver_Marlin_IsConnected = nullptr;
		pWrapperTable->m_Driver_Marlin_MoveToXY = nullptr;
		pWrapperTable->m_Driver_Marlin_MoveFastToXY = nullptr;
		pWrapperTable->m_Driver_Marlin_MoveToZ = nullptr;
		pWrapperTable->m_Driver_Marlin_MoveFastToZ = nullptr;
		pWrapperTable->m_Driver_Marlin_StartHoming = nullptr;
		pWrapperTable->m_Driver_Marlin_EmergencyStop = nullptr;
		pWrapperTable->m_GetVersion = nullptr;
		pWrapperTable->m_GetLastError = nullptr;
		pWrapperTable->m_ReleaseInstance = nullptr;
		pWrapperTable->m_AcquireInstance = nullptr;
		pWrapperTable->m_InjectComponent = nullptr;
		pWrapperTable->m_GetSymbolLookupMethod = nullptr;
		pWrapperTable->m_CreateDriver = nullptr;
		
		return LIBMCDRIVER_MARLIN_SUCCESS;
	}

	inline LibMCDriver_MarlinResult CWrapper::releaseWrapperTable(sLibMCDriver_MarlinDynamicWrapperTable * pWrapperTable)
	{
		if (pWrapperTable == nullptr)
			return LIBMCDRIVER_MARLIN_ERROR_INVALIDPARAM;
		
		if (pWrapperTable->m_LibraryHandle != nullptr) {
		#ifdef _WIN32
			HMODULE hModule = (HMODULE) pWrapperTable->m_LibraryHandle;
			FreeLibrary(hModule);
		#else // _WIN32
			dlclose(pWrapperTable->m_LibraryHandle);
		#endif // _WIN32
			return initWrapperTable(pWrapperTable);
		}
		
		return LIBMCDRIVER_MARLIN_SUCCESS;
	}

	inline LibMCDriver_MarlinResult CWrapper::loadWrapperTable(sLibMCDriver_MarlinDynamicWrapperTable * pWrapperTable, const char * pLibraryFileName)
	{
		if (pWrapperTable == nullptr)
			return LIBMCDRIVER_MARLIN_ERROR_INVALIDPARAM;
		if (pLibraryFileName == nullptr)
			return LIBMCDRIVER_MARLIN_ERROR_INVALIDPARAM;
		
		#ifdef _WIN32
		// Convert filename to UTF16-string
		int nLength = (int)strlen(pLibraryFileName);
		int nBufferSize = nLength * 2 + 2;
		std::vector<wchar_t> wsLibraryFileName(nBufferSize);
		int nResult = MultiByteToWideChar(CP_UTF8, 0, pLibraryFileName, nLength, &wsLibraryFileName[0], nBufferSize);
		if (nResult == 0)
			return LIBMCDRIVER_MARLIN_ERROR_COULDNOTLOADLIBRARY;
		
		HMODULE hLibrary = LoadLibraryW(wsLibraryFileName.data());
		if (hLibrary == 0) 
			return LIBMCDRIVER_MARLIN_ERROR_COULDNOTLOADLIBRARY;
		#else // _WIN32
		void* hLibrary = dlopen(pLibraryFileName, RTLD_LAZY);
		if (hLibrary == 0) 
			return LIBMCDRIVER_MARLIN_ERROR_COULDNOTLOADLIBRARY;
		dlerror();
		#endif // _WIN32
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_GetName = (PLibMCDriver_MarlinDriver_GetNamePtr) GetProcAddress(hLibrary, "libmcdriver_marlin_driver_getname");
		#else // _WIN32
		pWrapperTable->m_Driver_GetName = (PLibMCDriver_MarlinDriver_GetNamePtr) dlsym(hLibrary, "libmcdriver_marlin_driver_getname");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_GetName == nullptr)
			return LIBMCDRIVER_MARLIN_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_GetType = (PLibMCDriver_MarlinDriver_GetTypePtr) GetProcAddress(hLibrary, "libmcdriver_marlin_driver_gettype");
		#else // _WIN32
		pWrapperTable->m_Driver_GetType = (PLibMCDriver_MarlinDriver_GetTypePtr) dlsym(hLibrary, "libmcdriver_marlin_driver_gettype");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_GetType == nullptr)
			return LIBMCDRIVER_MARLIN_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_GetVersion = (PLibMCDriver_MarlinDriver_GetVersionPtr) GetProcAddress(hLibrary, "libmcdriver_marlin_driver_getversion");
		#else // _WIN32
		pWrapperTable->m_Driver_GetVersion = (PLibMCDriver_MarlinDriver_GetVersionPtr) dlsym(hLibrary, "libmcdriver_marlin_driver_getversion");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_GetVersion == nullptr)
			return LIBMCDRIVER_MARLIN_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_GetHeaderInformation = (PLibMCDriver_MarlinDriver_GetHeaderInformationPtr) GetProcAddress(hLibrary, "libmcdriver_marlin_driver_getheaderinformation");
		#else // _WIN32
		pWrapperTable->m_Driver_GetHeaderInformation = (PLibMCDriver_MarlinDriver_GetHeaderInformationPtr) dlsym(hLibrary, "libmcdriver_marlin_driver_getheaderinformation");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_GetHeaderInformation == nullptr)
			return LIBMCDRIVER_MARLIN_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_Marlin_Connect = (PLibMCDriver_MarlinDriver_Marlin_ConnectPtr) GetProcAddress(hLibrary, "libmcdriver_marlin_driver_marlin_connect");
		#else // _WIN32
		pWrapperTable->m_Driver_Marlin_Connect = (PLibMCDriver_MarlinDriver_Marlin_ConnectPtr) dlsym(hLibrary, "libmcdriver_marlin_driver_marlin_connect");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_Marlin_Connect == nullptr)
			return LIBMCDRIVER_MARLIN_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_Marlin_Disconnect = (PLibMCDriver_MarlinDriver_Marlin_DisconnectPtr) GetProcAddress(hLibrary, "libmcdriver_marlin_driver_marlin_disconnect");
		#else // _WIN32
		pWrapperTable->m_Driver_Marlin_Disconnect = (PLibMCDriver_MarlinDriver_Marlin_DisconnectPtr) dlsym(hLibrary, "libmcdriver_marlin_driver_marlin_disconnect");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_Marlin_Disconnect == nullptr)
			return LIBMCDRIVER_MARLIN_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_Marlin_SetAbsolutePositioning = (PLibMCDriver_MarlinDriver_Marlin_SetAbsolutePositioningPtr) GetProcAddress(hLibrary, "libmcdriver_marlin_driver_marlin_setabsolutepositioning");
		#else // _WIN32
		pWrapperTable->m_Driver_Marlin_SetAbsolutePositioning = (PLibMCDriver_MarlinDriver_Marlin_SetAbsolutePositioningPtr) dlsym(hLibrary, "libmcdriver_marlin_driver_marlin_setabsolutepositioning");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_Marlin_SetAbsolutePositioning == nullptr)
			return LIBMCDRIVER_MARLIN_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_Marlin_SetHeatedBedTargetTemperature = (PLibMCDriver_MarlinDriver_Marlin_SetHeatedBedTargetTemperaturePtr) GetProcAddress(hLibrary, "libmcdriver_marlin_driver_marlin_setheatedbedtargettemperature");
		#else // _WIN32
		pWrapperTable->m_Driver_Marlin_SetHeatedBedTargetTemperature = (PLibMCDriver_MarlinDriver_Marlin_SetHeatedBedTargetTemperaturePtr) dlsym(hLibrary, "libmcdriver_marlin_driver_marlin_setheatedbedtargettemperature");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_Marlin_SetHeatedBedTargetTemperature == nullptr)
			return LIBMCDRIVER_MARLIN_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_Marlin_SetExtruderTargetTemperature = (PLibMCDriver_MarlinDriver_Marlin_SetExtruderTargetTemperaturePtr) GetProcAddress(hLibrary, "libmcdriver_marlin_driver_marlin_setextrudertargettemperature");
		#else // _WIN32
		pWrapperTable->m_Driver_Marlin_SetExtruderTargetTemperature = (PLibMCDriver_MarlinDriver_Marlin_SetExtruderTargetTemperaturePtr) dlsym(hLibrary, "libmcdriver_marlin_driver_marlin_setextrudertargettemperature");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_Marlin_SetExtruderTargetTemperature == nullptr)
			return LIBMCDRIVER_MARLIN_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_Marlin_SetFanSpeed = (PLibMCDriver_MarlinDriver_Marlin_SetFanSpeedPtr) GetProcAddress(hLibrary, "libmcdriver_marlin_driver_marlin_setfanspeed");
		#else // _WIN32
		pWrapperTable->m_Driver_Marlin_SetFanSpeed = (PLibMCDriver_MarlinDriver_Marlin_SetFanSpeedPtr) dlsym(hLibrary, "libmcdriver_marlin_driver_marlin_setfanspeed");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_Marlin_SetFanSpeed == nullptr)
			return LIBMCDRIVER_MARLIN_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_Marlin_SetPidParameters = (PLibMCDriver_MarlinDriver_Marlin_SetPidParametersPtr) GetProcAddress(hLibrary, "libmcdriver_marlin_driver_marlin_setpidparameters");
		#else // _WIN32
		pWrapperTable->m_Driver_Marlin_SetPidParameters = (PLibMCDriver_MarlinDriver_Marlin_SetPidParametersPtr) dlsym(hLibrary, "libmcdriver_marlin_driver_marlin_setpidparameters");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_Marlin_SetPidParameters == nullptr)
			return LIBMCDRIVER_MARLIN_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_Marlin_UpdateState = (PLibMCDriver_MarlinDriver_Marlin_UpdateStatePtr) GetProcAddress(hLibrary, "libmcdriver_marlin_driver_marlin_updatestate");
		#else // _WIN32
		pWrapperTable->m_Driver_Marlin_UpdateState = (PLibMCDriver_MarlinDriver_Marlin_UpdateStatePtr) dlsym(hLibrary, "libmcdriver_marlin_driver_marlin_updatestate");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_Marlin_UpdateState == nullptr)
			return LIBMCDRIVER_MARLIN_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_Marlin_GetCurrentPosition = (PLibMCDriver_MarlinDriver_Marlin_GetCurrentPositionPtr) GetProcAddress(hLibrary, "libmcdriver_marlin_driver_marlin_getcurrentposition");
		#else // _WIN32
		pWrapperTable->m_Driver_Marlin_GetCurrentPosition = (PLibMCDriver_MarlinDriver_Marlin_GetCurrentPositionPtr) dlsym(hLibrary, "libmcdriver_marlin_driver_marlin_getcurrentposition");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_Marlin_GetCurrentPosition == nullptr)
			return LIBMCDRIVER_MARLIN_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_Marlin_GetTargetPosition = (PLibMCDriver_MarlinDriver_Marlin_GetTargetPositionPtr) GetProcAddress(hLibrary, "libmcdriver_marlin_driver_marlin_gettargetposition");
		#else // _WIN32
		pWrapperTable->m_Driver_Marlin_GetTargetPosition = (PLibMCDriver_MarlinDriver_Marlin_GetTargetPositionPtr) dlsym(hLibrary, "libmcdriver_marlin_driver_marlin_gettargetposition");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_Marlin_GetTargetPosition == nullptr)
			return LIBMCDRIVER_MARLIN_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_Marlin_GetExtruderTargetPosition = (PLibMCDriver_MarlinDriver_Marlin_GetExtruderTargetPositionPtr) GetProcAddress(hLibrary, "libmcdriver_marlin_driver_marlin_getextrudertargetposition");
		#else // _WIN32
		pWrapperTable->m_Driver_Marlin_GetExtruderTargetPosition = (PLibMCDriver_MarlinDriver_Marlin_GetExtruderTargetPositionPtr) dlsym(hLibrary, "libmcdriver_marlin_driver_marlin_getextrudertargetposition");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_Marlin_GetExtruderTargetPosition == nullptr)
			return LIBMCDRIVER_MARLIN_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_Marlin_GetHeatedBedTemperature = (PLibMCDriver_MarlinDriver_Marlin_GetHeatedBedTemperaturePtr) GetProcAddress(hLibrary, "libmcdriver_marlin_driver_marlin_getheatedbedtemperature");
		#else // _WIN32
		pWrapperTable->m_Driver_Marlin_GetHeatedBedTemperature = (PLibMCDriver_MarlinDriver_Marlin_GetHeatedBedTemperaturePtr) dlsym(hLibrary, "libmcdriver_marlin_driver_marlin_getheatedbedtemperature");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_Marlin_GetHeatedBedTemperature == nullptr)
			return LIBMCDRIVER_MARLIN_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_Marlin_GetExtruderTemperature = (PLibMCDriver_MarlinDriver_Marlin_GetExtruderTemperaturePtr) GetProcAddress(hLibrary, "libmcdriver_marlin_driver_marlin_getextrudertemperature");
		#else // _WIN32
		pWrapperTable->m_Driver_Marlin_GetExtruderTemperature = (PLibMCDriver_MarlinDriver_Marlin_GetExtruderTemperaturePtr) dlsym(hLibrary, "libmcdriver_marlin_driver_marlin_getextrudertemperature");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_Marlin_GetExtruderTemperature == nullptr)
			return LIBMCDRIVER_MARLIN_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_Marlin_GetPidParameters = (PLibMCDriver_MarlinDriver_Marlin_GetPidParametersPtr) GetProcAddress(hLibrary, "libmcdriver_marlin_driver_marlin_getpidparameters");
		#else // _WIN32
		pWrapperTable->m_Driver_Marlin_GetPidParameters = (PLibMCDriver_MarlinDriver_Marlin_GetPidParametersPtr) dlsym(hLibrary, "libmcdriver_marlin_driver_marlin_getpidparameters");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_Marlin_GetPidParameters == nullptr)
			return LIBMCDRIVER_MARLIN_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_Marlin_CanExecuteMovement = (PLibMCDriver_MarlinDriver_Marlin_CanExecuteMovementPtr) GetProcAddress(hLibrary, "libmcdriver_marlin_driver_marlin_canexecutemovement");
		#else // _WIN32
		pWrapperTable->m_Driver_Marlin_CanExecuteMovement = (PLibMCDriver_MarlinDriver_Marlin_CanExecuteMovementPtr) dlsym(hLibrary, "libmcdriver_marlin_driver_marlin_canexecutemovement");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_Marlin_CanExecuteMovement == nullptr)
			return LIBMCDRIVER_MARLIN_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_Marlin_IsMoving = (PLibMCDriver_MarlinDriver_Marlin_IsMovingPtr) GetProcAddress(hLibrary, "libmcdriver_marlin_driver_marlin_ismoving");
		#else // _WIN32
		pWrapperTable->m_Driver_Marlin_IsMoving = (PLibMCDriver_MarlinDriver_Marlin_IsMovingPtr) dlsym(hLibrary, "libmcdriver_marlin_driver_marlin_ismoving");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_Marlin_IsMoving == nullptr)
			return LIBMCDRIVER_MARLIN_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_Marlin_IsHomed = (PLibMCDriver_MarlinDriver_Marlin_IsHomedPtr) GetProcAddress(hLibrary, "libmcdriver_marlin_driver_marlin_ishomed");
		#else // _WIN32
		pWrapperTable->m_Driver_Marlin_IsHomed = (PLibMCDriver_MarlinDriver_Marlin_IsHomedPtr) dlsym(hLibrary, "libmcdriver_marlin_driver_marlin_ishomed");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_Marlin_IsHomed == nullptr)
			return LIBMCDRIVER_MARLIN_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_Marlin_IsConnected = (PLibMCDriver_MarlinDriver_Marlin_IsConnectedPtr) GetProcAddress(hLibrary, "libmcdriver_marlin_driver_marlin_isconnected");
		#else // _WIN32
		pWrapperTable->m_Driver_Marlin_IsConnected = (PLibMCDriver_MarlinDriver_Marlin_IsConnectedPtr) dlsym(hLibrary, "libmcdriver_marlin_driver_marlin_isconnected");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_Marlin_IsConnected == nullptr)
			return LIBMCDRIVER_MARLIN_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_Marlin_MoveToXY = (PLibMCDriver_MarlinDriver_Marlin_MoveToXYPtr) GetProcAddress(hLibrary, "libmcdriver_marlin_driver_marlin_movetoxy");
		#else // _WIN32
		pWrapperTable->m_Driver_Marlin_MoveToXY = (PLibMCDriver_MarlinDriver_Marlin_MoveToXYPtr) dlsym(hLibrary, "libmcdriver_marlin_driver_marlin_movetoxy");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_Marlin_MoveToXY == nullptr)
			return LIBMCDRIVER_MARLIN_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_Marlin_MoveFastToXY = (PLibMCDriver_MarlinDriver_Marlin_MoveFastToXYPtr) GetProcAddress(hLibrary, "libmcdriver_marlin_driver_marlin_movefasttoxy");
		#else // _WIN32
		pWrapperTable->m_Driver_Marlin_MoveFastToXY = (PLibMCDriver_MarlinDriver_Marlin_MoveFastToXYPtr) dlsym(hLibrary, "libmcdriver_marlin_driver_marlin_movefasttoxy");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_Marlin_MoveFastToXY == nullptr)
			return LIBMCDRIVER_MARLIN_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_Marlin_MoveToZ = (PLibMCDriver_MarlinDriver_Marlin_MoveToZPtr) GetProcAddress(hLibrary, "libmcdriver_marlin_driver_marlin_movetoz");
		#else // _WIN32
		pWrapperTable->m_Driver_Marlin_MoveToZ = (PLibMCDriver_MarlinDriver_Marlin_MoveToZPtr) dlsym(hLibrary, "libmcdriver_marlin_driver_marlin_movetoz");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_Marlin_MoveToZ == nullptr)
			return LIBMCDRIVER_MARLIN_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_Marlin_MoveFastToZ = (PLibMCDriver_MarlinDriver_Marlin_MoveFastToZPtr) GetProcAddress(hLibrary, "libmcdriver_marlin_driver_marlin_movefasttoz");
		#else // _WIN32
		pWrapperTable->m_Driver_Marlin_MoveFastToZ = (PLibMCDriver_MarlinDriver_Marlin_MoveFastToZPtr) dlsym(hLibrary, "libmcdriver_marlin_driver_marlin_movefasttoz");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_Marlin_MoveFastToZ == nullptr)
			return LIBMCDRIVER_MARLIN_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_Marlin_StartHoming = (PLibMCDriver_MarlinDriver_Marlin_StartHomingPtr) GetProcAddress(hLibrary, "libmcdriver_marlin_driver_marlin_starthoming");
		#else // _WIN32
		pWrapperTable->m_Driver_Marlin_StartHoming = (PLibMCDriver_MarlinDriver_Marlin_StartHomingPtr) dlsym(hLibrary, "libmcdriver_marlin_driver_marlin_starthoming");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_Marlin_StartHoming == nullptr)
			return LIBMCDRIVER_MARLIN_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_Marlin_EmergencyStop = (PLibMCDriver_MarlinDriver_Marlin_EmergencyStopPtr) GetProcAddress(hLibrary, "libmcdriver_marlin_driver_marlin_emergencystop");
		#else // _WIN32
		pWrapperTable->m_Driver_Marlin_EmergencyStop = (PLibMCDriver_MarlinDriver_Marlin_EmergencyStopPtr) dlsym(hLibrary, "libmcdriver_marlin_driver_marlin_emergencystop");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_Marlin_EmergencyStop == nullptr)
			return LIBMCDRIVER_MARLIN_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GetVersion = (PLibMCDriver_MarlinGetVersionPtr) GetProcAddress(hLibrary, "libmcdriver_marlin_getversion");
		#else // _WIN32
		pWrapperTable->m_GetVersion = (PLibMCDriver_MarlinGetVersionPtr) dlsym(hLibrary, "libmcdriver_marlin_getversion");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GetVersion == nullptr)
			return LIBMCDRIVER_MARLIN_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GetLastError = (PLibMCDriver_MarlinGetLastErrorPtr) GetProcAddress(hLibrary, "libmcdriver_marlin_getlasterror");
		#else // _WIN32
		pWrapperTable->m_GetLastError = (PLibMCDriver_MarlinGetLastErrorPtr) dlsym(hLibrary, "libmcdriver_marlin_getlasterror");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GetLastError == nullptr)
			return LIBMCDRIVER_MARLIN_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ReleaseInstance = (PLibMCDriver_MarlinReleaseInstancePtr) GetProcAddress(hLibrary, "libmcdriver_marlin_releaseinstance");
		#else // _WIN32
		pWrapperTable->m_ReleaseInstance = (PLibMCDriver_MarlinReleaseInstancePtr) dlsym(hLibrary, "libmcdriver_marlin_releaseinstance");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ReleaseInstance == nullptr)
			return LIBMCDRIVER_MARLIN_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_AcquireInstance = (PLibMCDriver_MarlinAcquireInstancePtr) GetProcAddress(hLibrary, "libmcdriver_marlin_acquireinstance");
		#else // _WIN32
		pWrapperTable->m_AcquireInstance = (PLibMCDriver_MarlinAcquireInstancePtr) dlsym(hLibrary, "libmcdriver_marlin_acquireinstance");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_AcquireInstance == nullptr)
			return LIBMCDRIVER_MARLIN_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_InjectComponent = (PLibMCDriver_MarlinInjectComponentPtr) GetProcAddress(hLibrary, "libmcdriver_marlin_injectcomponent");
		#else // _WIN32
		pWrapperTable->m_InjectComponent = (PLibMCDriver_MarlinInjectComponentPtr) dlsym(hLibrary, "libmcdriver_marlin_injectcomponent");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_InjectComponent == nullptr)
			return LIBMCDRIVER_MARLIN_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GetSymbolLookupMethod = (PLibMCDriver_MarlinGetSymbolLookupMethodPtr) GetProcAddress(hLibrary, "libmcdriver_marlin_getsymbollookupmethod");
		#else // _WIN32
		pWrapperTable->m_GetSymbolLookupMethod = (PLibMCDriver_MarlinGetSymbolLookupMethodPtr) dlsym(hLibrary, "libmcdriver_marlin_getsymbollookupmethod");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GetSymbolLookupMethod == nullptr)
			return LIBMCDRIVER_MARLIN_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_CreateDriver = (PLibMCDriver_MarlinCreateDriverPtr) GetProcAddress(hLibrary, "libmcdriver_marlin_createdriver");
		#else // _WIN32
		pWrapperTable->m_CreateDriver = (PLibMCDriver_MarlinCreateDriverPtr) dlsym(hLibrary, "libmcdriver_marlin_createdriver");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_CreateDriver == nullptr)
			return LIBMCDRIVER_MARLIN_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		pWrapperTable->m_LibraryHandle = hLibrary;
		return LIBMCDRIVER_MARLIN_SUCCESS;
	}

	inline LibMCDriver_MarlinResult CWrapper::loadWrapperTableFromSymbolLookupMethod(sLibMCDriver_MarlinDynamicWrapperTable * pWrapperTable, void* pSymbolLookupMethod)
{
		if (pWrapperTable == nullptr)
			return LIBMCDRIVER_MARLIN_ERROR_INVALIDPARAM;
		if (pSymbolLookupMethod == nullptr)
			return LIBMCDRIVER_MARLIN_ERROR_INVALIDPARAM;
		
		typedef LibMCDriver_MarlinResult(*SymbolLookupType)(const char*, void**);
		
		SymbolLookupType pLookup = (SymbolLookupType)pSymbolLookupMethod;
		
		LibMCDriver_MarlinResult eLookupError = LIBMCDRIVER_MARLIN_SUCCESS;
		eLookupError = (*pLookup)("libmcdriver_marlin_driver_getname", (void**)&(pWrapperTable->m_Driver_GetName));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_GetName == nullptr) )
			return LIBMCDRIVER_MARLIN_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_marlin_driver_gettype", (void**)&(pWrapperTable->m_Driver_GetType));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_GetType == nullptr) )
			return LIBMCDRIVER_MARLIN_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_marlin_driver_getversion", (void**)&(pWrapperTable->m_Driver_GetVersion));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_GetVersion == nullptr) )
			return LIBMCDRIVER_MARLIN_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_marlin_driver_getheaderinformation", (void**)&(pWrapperTable->m_Driver_GetHeaderInformation));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_GetHeaderInformation == nullptr) )
			return LIBMCDRIVER_MARLIN_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_marlin_driver_marlin_connect", (void**)&(pWrapperTable->m_Driver_Marlin_Connect));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_Marlin_Connect == nullptr) )
			return LIBMCDRIVER_MARLIN_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_marlin_driver_marlin_disconnect", (void**)&(pWrapperTable->m_Driver_Marlin_Disconnect));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_Marlin_Disconnect == nullptr) )
			return LIBMCDRIVER_MARLIN_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_marlin_driver_marlin_setabsolutepositioning", (void**)&(pWrapperTable->m_Driver_Marlin_SetAbsolutePositioning));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_Marlin_SetAbsolutePositioning == nullptr) )
			return LIBMCDRIVER_MARLIN_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_marlin_driver_marlin_setheatedbedtargettemperature", (void**)&(pWrapperTable->m_Driver_Marlin_SetHeatedBedTargetTemperature));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_Marlin_SetHeatedBedTargetTemperature == nullptr) )
			return LIBMCDRIVER_MARLIN_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_marlin_driver_marlin_setextrudertargettemperature", (void**)&(pWrapperTable->m_Driver_Marlin_SetExtruderTargetTemperature));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_Marlin_SetExtruderTargetTemperature == nullptr) )
			return LIBMCDRIVER_MARLIN_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_marlin_driver_marlin_setfanspeed", (void**)&(pWrapperTable->m_Driver_Marlin_SetFanSpeed));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_Marlin_SetFanSpeed == nullptr) )
			return LIBMCDRIVER_MARLIN_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_marlin_driver_marlin_setpidparameters", (void**)&(pWrapperTable->m_Driver_Marlin_SetPidParameters));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_Marlin_SetPidParameters == nullptr) )
			return LIBMCDRIVER_MARLIN_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_marlin_driver_marlin_updatestate", (void**)&(pWrapperTable->m_Driver_Marlin_UpdateState));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_Marlin_UpdateState == nullptr) )
			return LIBMCDRIVER_MARLIN_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_marlin_driver_marlin_getcurrentposition", (void**)&(pWrapperTable->m_Driver_Marlin_GetCurrentPosition));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_Marlin_GetCurrentPosition == nullptr) )
			return LIBMCDRIVER_MARLIN_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_marlin_driver_marlin_gettargetposition", (void**)&(pWrapperTable->m_Driver_Marlin_GetTargetPosition));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_Marlin_GetTargetPosition == nullptr) )
			return LIBMCDRIVER_MARLIN_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_marlin_driver_marlin_getextrudertargetposition", (void**)&(pWrapperTable->m_Driver_Marlin_GetExtruderTargetPosition));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_Marlin_GetExtruderTargetPosition == nullptr) )
			return LIBMCDRIVER_MARLIN_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_marlin_driver_marlin_getheatedbedtemperature", (void**)&(pWrapperTable->m_Driver_Marlin_GetHeatedBedTemperature));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_Marlin_GetHeatedBedTemperature == nullptr) )
			return LIBMCDRIVER_MARLIN_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_marlin_driver_marlin_getextrudertemperature", (void**)&(pWrapperTable->m_Driver_Marlin_GetExtruderTemperature));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_Marlin_GetExtruderTemperature == nullptr) )
			return LIBMCDRIVER_MARLIN_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_marlin_driver_marlin_getpidparameters", (void**)&(pWrapperTable->m_Driver_Marlin_GetPidParameters));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_Marlin_GetPidParameters == nullptr) )
			return LIBMCDRIVER_MARLIN_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_marlin_driver_marlin_canexecutemovement", (void**)&(pWrapperTable->m_Driver_Marlin_CanExecuteMovement));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_Marlin_CanExecuteMovement == nullptr) )
			return LIBMCDRIVER_MARLIN_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_marlin_driver_marlin_ismoving", (void**)&(pWrapperTable->m_Driver_Marlin_IsMoving));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_Marlin_IsMoving == nullptr) )
			return LIBMCDRIVER_MARLIN_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_marlin_driver_marlin_ishomed", (void**)&(pWrapperTable->m_Driver_Marlin_IsHomed));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_Marlin_IsHomed == nullptr) )
			return LIBMCDRIVER_MARLIN_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_marlin_driver_marlin_isconnected", (void**)&(pWrapperTable->m_Driver_Marlin_IsConnected));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_Marlin_IsConnected == nullptr) )
			return LIBMCDRIVER_MARLIN_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_marlin_driver_marlin_movetoxy", (void**)&(pWrapperTable->m_Driver_Marlin_MoveToXY));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_Marlin_MoveToXY == nullptr) )
			return LIBMCDRIVER_MARLIN_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_marlin_driver_marlin_movefasttoxy", (void**)&(pWrapperTable->m_Driver_Marlin_MoveFastToXY));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_Marlin_MoveFastToXY == nullptr) )
			return LIBMCDRIVER_MARLIN_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_marlin_driver_marlin_movetoz", (void**)&(pWrapperTable->m_Driver_Marlin_MoveToZ));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_Marlin_MoveToZ == nullptr) )
			return LIBMCDRIVER_MARLIN_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_marlin_driver_marlin_movefasttoz", (void**)&(pWrapperTable->m_Driver_Marlin_MoveFastToZ));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_Marlin_MoveFastToZ == nullptr) )
			return LIBMCDRIVER_MARLIN_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_marlin_driver_marlin_starthoming", (void**)&(pWrapperTable->m_Driver_Marlin_StartHoming));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_Marlin_StartHoming == nullptr) )
			return LIBMCDRIVER_MARLIN_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_marlin_driver_marlin_emergencystop", (void**)&(pWrapperTable->m_Driver_Marlin_EmergencyStop));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_Marlin_EmergencyStop == nullptr) )
			return LIBMCDRIVER_MARLIN_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_marlin_getversion", (void**)&(pWrapperTable->m_GetVersion));
		if ( (eLookupError != 0) || (pWrapperTable->m_GetVersion == nullptr) )
			return LIBMCDRIVER_MARLIN_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_marlin_getlasterror", (void**)&(pWrapperTable->m_GetLastError));
		if ( (eLookupError != 0) || (pWrapperTable->m_GetLastError == nullptr) )
			return LIBMCDRIVER_MARLIN_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_marlin_releaseinstance", (void**)&(pWrapperTable->m_ReleaseInstance));
		if ( (eLookupError != 0) || (pWrapperTable->m_ReleaseInstance == nullptr) )
			return LIBMCDRIVER_MARLIN_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_marlin_acquireinstance", (void**)&(pWrapperTable->m_AcquireInstance));
		if ( (eLookupError != 0) || (pWrapperTable->m_AcquireInstance == nullptr) )
			return LIBMCDRIVER_MARLIN_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_marlin_injectcomponent", (void**)&(pWrapperTable->m_InjectComponent));
		if ( (eLookupError != 0) || (pWrapperTable->m_InjectComponent == nullptr) )
			return LIBMCDRIVER_MARLIN_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_marlin_getsymbollookupmethod", (void**)&(pWrapperTable->m_GetSymbolLookupMethod));
		if ( (eLookupError != 0) || (pWrapperTable->m_GetSymbolLookupMethod == nullptr) )
			return LIBMCDRIVER_MARLIN_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_marlin_createdriver", (void**)&(pWrapperTable->m_CreateDriver));
		if ( (eLookupError != 0) || (pWrapperTable->m_CreateDriver == nullptr) )
			return LIBMCDRIVER_MARLIN_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		return LIBMCDRIVER_MARLIN_SUCCESS;
}

	
	
	/**
	 * Method definitions for class CBase
	 */
	
	/**
	 * Method definitions for class CDriver
	 */
	
	/**
	* CDriver::GetName - returns the name identifier of the driver
	* @return Name of the driver.
	*/
	std::string CDriver::GetName()
	{
		LibMCDriver_Marlin_uint32 bytesNeededName = 0;
		LibMCDriver_Marlin_uint32 bytesWrittenName = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetName(m_pHandle, 0, &bytesNeededName, nullptr));
		std::vector<char> bufferName(bytesNeededName);
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetName(m_pHandle, bytesNeededName, &bytesWrittenName, &bufferName[0]));
		
		return std::string(&bufferName[0]);
	}
	
	/**
	* CDriver::GetType - returns the type identifier of the driver
	* @return Type of the driver.
	*/
	std::string CDriver::GetType()
	{
		LibMCDriver_Marlin_uint32 bytesNeededType = 0;
		LibMCDriver_Marlin_uint32 bytesWrittenType = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetType(m_pHandle, 0, &bytesNeededType, nullptr));
		std::vector<char> bufferType(bytesNeededType);
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetType(m_pHandle, bytesNeededType, &bytesWrittenType, &bufferType[0]));
		
		return std::string(&bufferType[0]);
	}
	
	/**
	* CDriver::GetVersion - returns the version identifiers of the driver
	* @param[out] nMajor - Major version.
	* @param[out] nMinor - Minor version.
	* @param[out] nMicro - Micro version.
	* @param[out] sBuild - Build identifier.
	*/
	void CDriver::GetVersion(LibMCDriver_Marlin_uint32 & nMajor, LibMCDriver_Marlin_uint32 & nMinor, LibMCDriver_Marlin_uint32 & nMicro, std::string & sBuild)
	{
		LibMCDriver_Marlin_uint32 bytesNeededBuild = 0;
		LibMCDriver_Marlin_uint32 bytesWrittenBuild = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetVersion(m_pHandle, &nMajor, &nMinor, &nMicro, 0, &bytesNeededBuild, nullptr));
		std::vector<char> bufferBuild(bytesNeededBuild);
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetVersion(m_pHandle, &nMajor, &nMinor, &nMicro, bytesNeededBuild, &bytesWrittenBuild, &bufferBuild[0]));
		sBuild = std::string(&bufferBuild[0]);
	}
	
	/**
	* CDriver::GetHeaderInformation - returns the header information
	* @param[out] sNameSpace - NameSpace of the driver.
	* @param[out] sBaseName - BaseName of the driver.
	*/
	void CDriver::GetHeaderInformation(std::string & sNameSpace, std::string & sBaseName)
	{
		LibMCDriver_Marlin_uint32 bytesNeededNameSpace = 0;
		LibMCDriver_Marlin_uint32 bytesWrittenNameSpace = 0;
		LibMCDriver_Marlin_uint32 bytesNeededBaseName = 0;
		LibMCDriver_Marlin_uint32 bytesWrittenBaseName = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetHeaderInformation(m_pHandle, 0, &bytesNeededNameSpace, nullptr, 0, &bytesNeededBaseName, nullptr));
		std::vector<char> bufferNameSpace(bytesNeededNameSpace);
		std::vector<char> bufferBaseName(bytesNeededBaseName);
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetHeaderInformation(m_pHandle, bytesNeededNameSpace, &bytesWrittenNameSpace, &bufferNameSpace[0], bytesNeededBaseName, &bytesWrittenBaseName, &bufferBaseName[0]));
		sNameSpace = std::string(&bufferNameSpace[0]);
		sBaseName = std::string(&bufferBaseName[0]);
	}
	
	/**
	 * Method definitions for class CDriver_Marlin
	 */
	
	/**
	* CDriver_Marlin::Connect - Creates and initializes a new Marlin Connector.
	* @param[in] sCOMPort - Device Port to connect to
	* @param[in] nBaudrate - Baudrate to use
	* @param[in] dStatusUpdateInterval - Timer interval [ms] for updating status
	* @param[in] nConnectTimeout - Timeout [ms] for connecting printer
	*/
	void CDriver_Marlin::Connect(const std::string & sCOMPort, const LibMCDriver_Marlin_uint32 nBaudrate, const LibMCDriver_Marlin_double dStatusUpdateInterval, const LibMCDriver_Marlin_uint32 nConnectTimeout)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_Marlin_Connect(m_pHandle, sCOMPort.c_str(), nBaudrate, dStatusUpdateInterval, nConnectTimeout));
	}
	
	/**
	* CDriver_Marlin::Disconnect - Disconnects from the Marlin board.
	*/
	void CDriver_Marlin::Disconnect()
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_Marlin_Disconnect(m_pHandle));
	}
	
	/**
	* CDriver_Marlin::SetAbsolutePositioning - Sets the positioning to absolute values (default true).
	* @param[in] bAbsolute - If true, sets positioning to absolute, if false to relative
	*/
	void CDriver_Marlin::SetAbsolutePositioning(const bool bAbsolute)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_Marlin_SetAbsolutePositioning(m_pHandle, bAbsolute));
	}
	
	/**
	* CDriver_Marlin::SetHeatedBedTargetTemperature - Sets heated bed target temperature.
	* @param[in] dTemperatureInDegreeCelcius - Bed target temperature.
	* @param[in] bWaitForTemp - If true, waits for the target bed temperature to be reached before proceeding
	*/
	void CDriver_Marlin::SetHeatedBedTargetTemperature(const LibMCDriver_Marlin_double dTemperatureInDegreeCelcius, const bool bWaitForTemp)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_Marlin_SetHeatedBedTargetTemperature(m_pHandle, dTemperatureInDegreeCelcius, bWaitForTemp));
	}
	
	/**
	* CDriver_Marlin::SetExtruderTargetTemperature - Sets target temperature of the given extruder.
	* @param[in] nExtruderID - ID of extruder.
	* @param[in] dTemperatureInDegreeCelcius - Extruder target temperature.
	* @param[in] bWaitForTemp - If true, waits for the target extruder temperature to be reached before proceeding
	*/
	void CDriver_Marlin::SetExtruderTargetTemperature(const LibMCDriver_Marlin_uint32 nExtruderID, const LibMCDriver_Marlin_double dTemperatureInDegreeCelcius, const bool bWaitForTemp)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_Marlin_SetExtruderTargetTemperature(m_pHandle, nExtruderID, dTemperatureInDegreeCelcius, bWaitForTemp));
	}
	
	/**
	* CDriver_Marlin::SetFanSpeed - Turns on one of the fans and set its speed.
	* @param[in] nFanID - ID of fan.
	* @param[in] nSpeed - Fan speed [0..255]. 0=0%!.(MISSING).255=100%!
(MISSING)	*/
	void CDriver_Marlin::SetFanSpeed(const LibMCDriver_Marlin_uint32 nFanID, const LibMCDriver_Marlin_uint32 nSpeed)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_Marlin_SetFanSpeed(m_pHandle, nFanID, nSpeed));
	}
	
	/**
	* CDriver_Marlin::SetPidParameters - Sets PID parameters.
	* @param[in] dP - New value for P parameter.
	* @param[in] dI - New value for I parameter.
	* @param[in] dD - New value for D parameter.
	*/
	void CDriver_Marlin::SetPidParameters(const LibMCDriver_Marlin_double dP, const LibMCDriver_Marlin_double dI, const LibMCDriver_Marlin_double dD)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_Marlin_SetPidParameters(m_pHandle, dP, dI, dD));
	}
	
	/**
	* CDriver_Marlin::UpdateState - Polls a new state from the firmware.
	* @param[in] nExtruderID - ID of extruder.
	*/
	void CDriver_Marlin::UpdateState(const LibMCDriver_Marlin_uint32 nExtruderID)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_Marlin_UpdateState(m_pHandle, nExtruderID));
	}
	
	/**
	* CDriver_Marlin::GetCurrentPosition - Returns the current axis position.
	* @param[out] dX - X Value in mm
	* @param[out] dY - Y Value in mm
	* @param[out] dZ - Z Value in mm
	*/
	void CDriver_Marlin::GetCurrentPosition(LibMCDriver_Marlin_double & dX, LibMCDriver_Marlin_double & dY, LibMCDriver_Marlin_double & dZ)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_Marlin_GetCurrentPosition(m_pHandle, &dX, &dY, &dZ));
	}
	
	/**
	* CDriver_Marlin::GetTargetPosition - Returns the current target position.
	* @param[out] dX - X Value in mm
	* @param[out] dY - Y Value in mm
	* @param[out] dZ - Z Value in mm
	*/
	void CDriver_Marlin::GetTargetPosition(LibMCDriver_Marlin_double & dX, LibMCDriver_Marlin_double & dY, LibMCDriver_Marlin_double & dZ)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_Marlin_GetTargetPosition(m_pHandle, &dX, &dY, &dZ));
	}
	
	/**
	* CDriver_Marlin::GetExtruderTargetPosition - Returns the target extruder position.
	* @param[out] dE - E Value in mm
	*/
	void CDriver_Marlin::GetExtruderTargetPosition(LibMCDriver_Marlin_double & dE)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_Marlin_GetExtruderTargetPosition(m_pHandle, &dE));
	}
	
	/**
	* CDriver_Marlin::GetHeatedBedTemperature - Returns the current and the target bed temperature.
	* @param[out] dTargetTemperature - Target Temperature in degree celsius.
	* @param[out] dCurrentTemperature - Current Temperature in degree celsius.
	*/
	void CDriver_Marlin::GetHeatedBedTemperature(LibMCDriver_Marlin_double & dTargetTemperature, LibMCDriver_Marlin_double & dCurrentTemperature)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_Marlin_GetHeatedBedTemperature(m_pHandle, &dTargetTemperature, &dCurrentTemperature));
	}
	
	/**
	* CDriver_Marlin::GetExtruderTemperature - Returns the current and the target temperature of an extruder.
	* @param[in] nExtruderID - ID of Extruder
	* @param[out] dTargetTemperature - Target Temperature in degree celsius.
	* @param[out] dCurrentTemperature - Current Temperature in degree celsius.
	*/
	void CDriver_Marlin::GetExtruderTemperature(const LibMCDriver_Marlin_uint32 nExtruderID, LibMCDriver_Marlin_double & dTargetTemperature, LibMCDriver_Marlin_double & dCurrentTemperature)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_Marlin_GetExtruderTemperature(m_pHandle, nExtruderID, &dTargetTemperature, &dCurrentTemperature));
	}
	
	/**
	* CDriver_Marlin::GetPidParameters - Returns the current PID values.
	* @param[out] dP - Current P value.
	* @param[out] dI - Current I value.
	* @param[out] dD - Current D value.
	*/
	void CDriver_Marlin::GetPidParameters(LibMCDriver_Marlin_double & dP, LibMCDriver_Marlin_double & dI, LibMCDriver_Marlin_double & dD)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_Marlin_GetPidParameters(m_pHandle, &dP, &dI, &dD));
	}
	
	/**
	* CDriver_Marlin::CanExecuteMovement - Returns if the movement buffer can receive another movement command..
	* @return True if a MoveTo or MoveFastTo command can be triggered.
	*/
	bool CDriver_Marlin::CanExecuteMovement()
	{
		bool resultValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_Marlin_CanExecuteMovement(m_pHandle, &resultValue));
		
		return resultValue;
	}
	
	/**
	* CDriver_Marlin::IsMoving - Returns if the extruder is moving..
	* @return Extruder is moving
	*/
	bool CDriver_Marlin::IsMoving()
	{
		bool resultValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_Marlin_IsMoving(m_pHandle, &resultValue));
		
		return resultValue;
	}
	
	/**
	* CDriver_Marlin::IsHomed - Returns if the printer is homed
	* @return True if printer is homed.
	*/
	bool CDriver_Marlin::IsHomed()
	{
		bool resultValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_Marlin_IsHomed(m_pHandle, &resultValue));
		
		return resultValue;
	}
	
	/**
	* CDriver_Marlin::IsConnected - Returns if the printer is coneccted
	* @return True if printer is connected.
	*/
	bool CDriver_Marlin::IsConnected()
	{
		bool resultValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_Marlin_IsConnected(m_pHandle, &resultValue));
		
		return resultValue;
	}
	
	/**
	* CDriver_Marlin::MoveToXY - Moves to/by a certain position by a linear move. Takes the relative/absolute mode into account. Fails if it cannot execute a movement.
	* @param[in] dX - X Value in mm
	* @param[in] dY - Y Value in mm
	* @param[in] dE - E Value in mm
	* @param[in] dSpeed - Movement speed in mm/s
	*/
	void CDriver_Marlin::MoveToXY(const LibMCDriver_Marlin_double dX, const LibMCDriver_Marlin_double dY, const LibMCDriver_Marlin_double dE, const LibMCDriver_Marlin_double dSpeed)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_Marlin_MoveToXY(m_pHandle, dX, dY, dE, dSpeed));
	}
	
	/**
	* CDriver_Marlin::MoveFastToXY - Moves to/by a certain position by a fast move. Takes the relative/absolute mode into account. Fails if it cannot execute a movement.
	* @param[in] dX - X Value in mm
	* @param[in] dY - Y Value in mm
	* @param[in] dSpeed - Movement speed in mm/s
	*/
	void CDriver_Marlin::MoveFastToXY(const LibMCDriver_Marlin_double dX, const LibMCDriver_Marlin_double dY, const LibMCDriver_Marlin_double dSpeed)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_Marlin_MoveFastToXY(m_pHandle, dX, dY, dSpeed));
	}
	
	/**
	* CDriver_Marlin::MoveToZ - Moves to/by a certain position by a linear move. Takes the relative/absolute mode into account. Fails if it cannot execute a movement.
	* @param[in] dZ - Z Value in mm
	* @param[in] dE - E Value in mm
	* @param[in] dSpeed - Movement speed in mm/s
	*/
	void CDriver_Marlin::MoveToZ(const LibMCDriver_Marlin_double dZ, const LibMCDriver_Marlin_double dE, const LibMCDriver_Marlin_double dSpeed)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_Marlin_MoveToZ(m_pHandle, dZ, dE, dSpeed));
	}
	
	/**
	* CDriver_Marlin::MoveFastToZ - Moves to/by a certain position by a fast move. Takes the relative/absolute mode into account. Fails if it cannot execute a movement.
	* @param[in] dZ - Z Value in mm
	* @param[in] dSpeed - Movement speed in mm/s
	*/
	void CDriver_Marlin::MoveFastToZ(const LibMCDriver_Marlin_double dZ, const LibMCDriver_Marlin_double dSpeed)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_Marlin_MoveFastToZ(m_pHandle, dZ, dSpeed));
	}
	
	/**
	* CDriver_Marlin::StartHoming - Start Homing of printer.
	*/
	void CDriver_Marlin::StartHoming()
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_Marlin_StartHoming(m_pHandle));
	}
	
	/**
	* CDriver_Marlin::EmergencyStop - Used for emergency stopping. Shuts down the machine, turns off all the steppers and heaters, and if possible, turns off the power supply.
	*/
	void CDriver_Marlin::EmergencyStop()
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_Marlin_EmergencyStop(m_pHandle));
	}

} // namespace LibMCDriver_Marlin

#endif // __LIBMCDRIVER_MARLIN_CPPHEADER_DYNAMIC_CPP

