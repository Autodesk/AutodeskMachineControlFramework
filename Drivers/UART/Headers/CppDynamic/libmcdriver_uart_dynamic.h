/*++

Copyright (C) 2022 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.8.0-develop.

Abstract: This is an autogenerated C++-Header file in order to allow an easy
 use of Generic UART Driver

Interface version: 1.0.0

*/

#ifndef __LIBMCDRIVER_UART_DYNAMICHEADER_CPPTYPES
#define __LIBMCDRIVER_UART_DYNAMICHEADER_CPPTYPES

#include "libmcdriver_uart_types.hpp"

#include "libmcenv_types.hpp"


/*************************************************************************************************************************
 Class definition for Base
**************************************************************************************************************************/

/*************************************************************************************************************************
 Class definition for Driver
**************************************************************************************************************************/

/**
* Configures a driver with its specific configuration data.
*
* @param[in] pDriver - Driver instance.
* @param[in] pConfigurationString - Configuration data of driver.
* @return error code or 0 (success)
*/
typedef LibMCDriver_UARTResult (*PLibMCDriver_UARTDriver_ConfigurePtr) (LibMCDriver_UART_Driver pDriver, const char * pConfigurationString);

/**
* returns the name identifier of the driver
*
* @param[in] pDriver - Driver instance.
* @param[in] nNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNameBuffer -  buffer of Name of the driver., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCDriver_UARTResult (*PLibMCDriver_UARTDriver_GetNamePtr) (LibMCDriver_UART_Driver pDriver, const LibMCDriver_UART_uint32 nNameBufferSize, LibMCDriver_UART_uint32* pNameNeededChars, char * pNameBuffer);

/**
* returns the type identifier of the driver
*
* @param[in] pDriver - Driver instance.
* @param[in] nTypeBufferSize - size of the buffer (including trailing 0)
* @param[out] pTypeNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pTypeBuffer -  buffer of Type of the driver., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCDriver_UARTResult (*PLibMCDriver_UARTDriver_GetTypePtr) (LibMCDriver_UART_Driver pDriver, const LibMCDriver_UART_uint32 nTypeBufferSize, LibMCDriver_UART_uint32* pTypeNeededChars, char * pTypeBuffer);

/**
* returns the version identifiers of the driver
*
* @param[in] pDriver - Driver instance.
* @param[out] pMajor - Major version.
* @param[out] pMinor - Minor version.
* @param[out] pMicro - Micro version.
* @param[in] nBuildBufferSize - size of the buffer (including trailing 0)
* @param[out] pBuildNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pBuildBuffer -  buffer of Build identifier., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCDriver_UARTResult (*PLibMCDriver_UARTDriver_GetVersionPtr) (LibMCDriver_UART_Driver pDriver, LibMCDriver_UART_uint32 * pMajor, LibMCDriver_UART_uint32 * pMinor, LibMCDriver_UART_uint32 * pMicro, const LibMCDriver_UART_uint32 nBuildBufferSize, LibMCDriver_UART_uint32* pBuildNeededChars, char * pBuildBuffer);

/**
* returns the header information
*
* @param[in] pDriver - Driver instance.
* @param[in] nNameSpaceBufferSize - size of the buffer (including trailing 0)
* @param[out] pNameSpaceNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNameSpaceBuffer -  buffer of NameSpace of the driver., may be NULL
* @param[in] nBaseNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pBaseNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pBaseNameBuffer -  buffer of BaseName of the driver., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCDriver_UARTResult (*PLibMCDriver_UARTDriver_GetHeaderInformationPtr) (LibMCDriver_UART_Driver pDriver, const LibMCDriver_UART_uint32 nNameSpaceBufferSize, LibMCDriver_UART_uint32* pNameSpaceNeededChars, char * pNameSpaceBuffer, const LibMCDriver_UART_uint32 nBaseNameBufferSize, LibMCDriver_UART_uint32* pBaseNameNeededChars, char * pBaseNameBuffer);

/**
* Stores the driver parameters in the driver environment.
*
* @param[in] pDriver - Driver instance.
* @return error code or 0 (success)
*/
typedef LibMCDriver_UARTResult (*PLibMCDriver_UARTDriver_QueryParametersPtr) (LibMCDriver_UART_Driver pDriver);

/*************************************************************************************************************************
 Class definition for Driver_UART
**************************************************************************************************************************/

/**
* Turns the driver into a simulation mode.
*
* @param[in] pDriver_UART - Driver_UART instance.
* @return error code or 0 (success)
*/
typedef LibMCDriver_UARTResult (*PLibMCDriver_UARTDriver_UART_SetToSimulationModePtr) (LibMCDriver_UART_Driver_UART pDriver_UART);

/**
* Returns if the driver is in simulation mode.
*
* @param[in] pDriver_UART - Driver_UART instance.
* @param[out] pSimulationModeEnabled - Flag if driver is in simulation mode.
* @return error code or 0 (success)
*/
typedef LibMCDriver_UARTResult (*PLibMCDriver_UARTDriver_UART_IsSimulationModePtr) (LibMCDriver_UART_Driver_UART pDriver_UART, bool * pSimulationModeEnabled);

/**
* Sets a parity mode for the next connection.
*
* @param[in] pDriver_UART - Driver_UART instance.
* @param[in] eParity - Parity mode.
* @return error code or 0 (success)
*/
typedef LibMCDriver_UARTResult (*PLibMCDriver_UARTDriver_UART_SetParityPtr) (LibMCDriver_UART_Driver_UART pDriver_UART, LibMCDriver_UART::eUARTParity eParity);

/**
* Returns parity mode of the next connection.
*
* @param[in] pDriver_UART - Driver_UART instance.
* @param[out] pParity - Parity mode.
* @return error code or 0 (success)
*/
typedef LibMCDriver_UARTResult (*PLibMCDriver_UARTDriver_UART_GetParityPtr) (LibMCDriver_UART_Driver_UART pDriver_UART, LibMCDriver_UART::eUARTParity * pParity);

/**
* Sets the stop bits for the next connection.
*
* @param[in] pDriver_UART - Driver_UART instance.
* @param[in] eStopBits - Stop bits
* @return error code or 0 (success)
*/
typedef LibMCDriver_UARTResult (*PLibMCDriver_UARTDriver_UART_SetStopBitsPtr) (LibMCDriver_UART_Driver_UART pDriver_UART, LibMCDriver_UART::eUARTStopBits eStopBits);

/**
* Returns the stop bits of the next connection.
*
* @param[in] pDriver_UART - Driver_UART instance.
* @param[out] pStopBits - Stop bits
* @return error code or 0 (success)
*/
typedef LibMCDriver_UARTResult (*PLibMCDriver_UARTDriver_UART_GetStopBitsPtr) (LibMCDriver_UART_Driver_UART pDriver_UART, LibMCDriver_UART::eUARTStopBits * pStopBits);

/**
* Sets the bytesize for the next connection.
*
* @param[in] pDriver_UART - Driver_UART instance.
* @param[in] eByteSize - Stop bits
* @return error code or 0 (success)
*/
typedef LibMCDriver_UARTResult (*PLibMCDriver_UARTDriver_UART_SetByteSizePtr) (LibMCDriver_UART_Driver_UART pDriver_UART, LibMCDriver_UART::eUARTByteSize eByteSize);

/**
* Returns the bytesize of the next connection.
*
* @param[in] pDriver_UART - Driver_UART instance.
* @param[out] pByteSize - Stop bits
* @return error code or 0 (success)
*/
typedef LibMCDriver_UARTResult (*PLibMCDriver_UARTDriver_UART_GetByteSizePtr) (LibMCDriver_UART_Driver_UART pDriver_UART, LibMCDriver_UART::eUARTByteSize * pByteSize);

/**
* Sets the flow control for the next connection.
*
* @param[in] pDriver_UART - Driver_UART instance.
* @param[in] eFlowControl - Flow control
* @return error code or 0 (success)
*/
typedef LibMCDriver_UARTResult (*PLibMCDriver_UARTDriver_UART_SetFlowControlPtr) (LibMCDriver_UART_Driver_UART pDriver_UART, LibMCDriver_UART::eUARTFlowControl eFlowControl);

/**
* Returns the flow control of the next connection.
*
* @param[in] pDriver_UART - Driver_UART instance.
* @param[out] pFlowControl - Flow control
* @return error code or 0 (success)
*/
typedef LibMCDriver_UARTResult (*PLibMCDriver_UARTDriver_UART_GetFlowControlPtr) (LibMCDriver_UART_Driver_UART pDriver_UART, LibMCDriver_UART::eUARTFlowControl * pFlowControl);

/**
* Connects to a UART device.
*
* @param[in] pDriver_UART - Driver_UART instance.
* @param[in] pDeviceAddress - Device Address of COM Port.
* @param[in] nBaudRate - BaudRate in baud.
* @param[in] nTimeout - Timeout in milliseconds.
* @return error code or 0 (success)
*/
typedef LibMCDriver_UARTResult (*PLibMCDriver_UARTDriver_UART_ConnectPtr) (LibMCDriver_UART_Driver_UART pDriver_UART, const char * pDeviceAddress, LibMCDriver_UART_uint32 nBaudRate, LibMCDriver_UART_uint32 nTimeout);

/**
* Disconnects from device
*
* @param[in] pDriver_UART - Driver_UART instance.
* @return error code or 0 (success)
*/
typedef LibMCDriver_UARTResult (*PLibMCDriver_UARTDriver_UART_DisconnectPtr) (LibMCDriver_UART_Driver_UART pDriver_UART);

/**
* Returns if the driver is connected.
*
* @param[in] pDriver_UART - Driver_UART instance.
* @param[out] pIsConnected - .
* @return error code or 0 (success)
*/
typedef LibMCDriver_UARTResult (*PLibMCDriver_UARTDriver_UART_IsConnectedPtr) (LibMCDriver_UART_Driver_UART pDriver_UART, bool * pIsConnected);

/**
* Sends a string over UART.
*
* @param[in] pDriver_UART - Driver_UART instance.
* @param[in] pStringToSend - String to send
* @param[in] nTimeout - Timeout in milliseconds.
* @return error code or 0 (success)
*/
typedef LibMCDriver_UARTResult (*PLibMCDriver_UARTDriver_UART_SendStringPtr) (LibMCDriver_UART_Driver_UART pDriver_UART, const char * pStringToSend, LibMCDriver_UART_uint32 nTimeout);

/**
* Waits for a received string.
*
* @param[in] pDriver_UART - Driver_UART instance.
* @param[in] nTimeout - Timeout in milliseconds.
* @param[in] pReceiveStringTermination - Termination String for retrieval ending before timeout.
* @param[in] nReceivedStringBufferSize - size of the buffer (including trailing 0)
* @param[out] pReceivedStringNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pReceivedStringBuffer -  buffer of Received string. Maximum string length is 64kB., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCDriver_UARTResult (*PLibMCDriver_UARTDriver_UART_ReceiveStringPtr) (LibMCDriver_UART_Driver_UART pDriver_UART, LibMCDriver_UART_uint32 nTimeout, const char * pReceiveStringTermination, const LibMCDriver_UART_uint32 nReceivedStringBufferSize, LibMCDriver_UART_uint32* pReceivedStringNeededChars, char * pReceivedStringBuffer);

/**
* Sends a string over UART and waits for a returning string.
*
* @param[in] pDriver_UART - Driver_UART instance.
* @param[in] pStringToSend - String to send
* @param[in] pReceiveStringTermination - Termination String for retrieval ending before timeout.
* @param[in] nTimeout - Timeout in milliseconds.
* @param[in] nReceivedStringBufferSize - size of the buffer (including trailing 0)
* @param[out] pReceivedStringNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pReceivedStringBuffer -  buffer of Received string. Maximum string length is 64kB., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCDriver_UARTResult (*PLibMCDriver_UARTDriver_UART_SendAndReceiveStringPtr) (LibMCDriver_UART_Driver_UART pDriver_UART, const char * pStringToSend, const char * pReceiveStringTermination, LibMCDriver_UART_uint32 nTimeout, const LibMCDriver_UART_uint32 nReceivedStringBufferSize, LibMCDriver_UART_uint32* pReceivedStringNeededChars, char * pReceivedStringBuffer);

/*************************************************************************************************************************
 Global functions
**************************************************************************************************************************/

/**
* retrieves the binary version of this library.
*
* @param[out] pMajor - returns the major version of this library
* @param[out] pMinor - returns the minor version of this library
* @param[out] pMicro - returns the micro version of this library
* @return error code or 0 (success)
*/
typedef LibMCDriver_UARTResult (*PLibMCDriver_UARTGetVersionPtr) (LibMCDriver_UART_uint32 * pMajor, LibMCDriver_UART_uint32 * pMinor, LibMCDriver_UART_uint32 * pMicro);

/**
* Returns the last error recorded on this object
*
* @param[in] pInstance - Instance Handle
* @param[in] nErrorMessageBufferSize - size of the buffer (including trailing 0)
* @param[out] pErrorMessageNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pErrorMessageBuffer -  buffer of Message of the last error, may be NULL
* @param[out] pHasError - Is there a last error to query
* @return error code or 0 (success)
*/
typedef LibMCDriver_UARTResult (*PLibMCDriver_UARTGetLastErrorPtr) (LibMCDriver_UART_Base pInstance, const LibMCDriver_UART_uint32 nErrorMessageBufferSize, LibMCDriver_UART_uint32* pErrorMessageNeededChars, char * pErrorMessageBuffer, bool * pHasError);

/**
* Releases shared ownership of an Instance
*
* @param[in] pInstance - Instance Handle
* @return error code or 0 (success)
*/
typedef LibMCDriver_UARTResult (*PLibMCDriver_UARTReleaseInstancePtr) (LibMCDriver_UART_Base pInstance);

/**
* Acquires shared ownership of an Instance
*
* @param[in] pInstance - Instance Handle
* @return error code or 0 (success)
*/
typedef LibMCDriver_UARTResult (*PLibMCDriver_UARTAcquireInstancePtr) (LibMCDriver_UART_Base pInstance);

/**
* Injects an imported component for usage within this component
*
* @param[in] pNameSpace - NameSpace of the injected component
* @param[in] pSymbolAddressMethod - Address of the SymbolAddressMethod of the injected component
* @return error code or 0 (success)
*/
typedef LibMCDriver_UARTResult (*PLibMCDriver_UARTInjectComponentPtr) (const char * pNameSpace, LibMCDriver_UART_pvoid pSymbolAddressMethod);

/**
* Returns the address of the SymbolLookupMethod
*
* @param[out] pSymbolLookupMethod - Address of the SymbolAddressMethod
* @return error code or 0 (success)
*/
typedef LibMCDriver_UARTResult (*PLibMCDriver_UARTGetSymbolLookupMethodPtr) (LibMCDriver_UART_pvoid * pSymbolLookupMethod);

/**
* Creates a driver instance with a specific name.
*
* @param[in] pName - Name of driver to be created.
* @param[in] pType - Type of driver to be created.
* @param[in] pDriverEnvironment - Environment of this driver.
* @param[out] pInstance - New Driver instance
* @return error code or 0 (success)
*/
typedef LibMCDriver_UARTResult (*PLibMCDriver_UARTCreateDriverPtr) (const char * pName, const char * pType, LibMCEnv_DriverEnvironment pDriverEnvironment, LibMCDriver_UART_Driver * pInstance);

/*************************************************************************************************************************
 Function Table Structure
**************************************************************************************************************************/

typedef struct {
	void * m_LibraryHandle;
	PLibMCDriver_UARTDriver_ConfigurePtr m_Driver_Configure;
	PLibMCDriver_UARTDriver_GetNamePtr m_Driver_GetName;
	PLibMCDriver_UARTDriver_GetTypePtr m_Driver_GetType;
	PLibMCDriver_UARTDriver_GetVersionPtr m_Driver_GetVersion;
	PLibMCDriver_UARTDriver_GetHeaderInformationPtr m_Driver_GetHeaderInformation;
	PLibMCDriver_UARTDriver_QueryParametersPtr m_Driver_QueryParameters;
	PLibMCDriver_UARTDriver_UART_SetToSimulationModePtr m_Driver_UART_SetToSimulationMode;
	PLibMCDriver_UARTDriver_UART_IsSimulationModePtr m_Driver_UART_IsSimulationMode;
	PLibMCDriver_UARTDriver_UART_SetParityPtr m_Driver_UART_SetParity;
	PLibMCDriver_UARTDriver_UART_GetParityPtr m_Driver_UART_GetParity;
	PLibMCDriver_UARTDriver_UART_SetStopBitsPtr m_Driver_UART_SetStopBits;
	PLibMCDriver_UARTDriver_UART_GetStopBitsPtr m_Driver_UART_GetStopBits;
	PLibMCDriver_UARTDriver_UART_SetByteSizePtr m_Driver_UART_SetByteSize;
	PLibMCDriver_UARTDriver_UART_GetByteSizePtr m_Driver_UART_GetByteSize;
	PLibMCDriver_UARTDriver_UART_SetFlowControlPtr m_Driver_UART_SetFlowControl;
	PLibMCDriver_UARTDriver_UART_GetFlowControlPtr m_Driver_UART_GetFlowControl;
	PLibMCDriver_UARTDriver_UART_ConnectPtr m_Driver_UART_Connect;
	PLibMCDriver_UARTDriver_UART_DisconnectPtr m_Driver_UART_Disconnect;
	PLibMCDriver_UARTDriver_UART_IsConnectedPtr m_Driver_UART_IsConnected;
	PLibMCDriver_UARTDriver_UART_SendStringPtr m_Driver_UART_SendString;
	PLibMCDriver_UARTDriver_UART_ReceiveStringPtr m_Driver_UART_ReceiveString;
	PLibMCDriver_UARTDriver_UART_SendAndReceiveStringPtr m_Driver_UART_SendAndReceiveString;
	PLibMCDriver_UARTGetVersionPtr m_GetVersion;
	PLibMCDriver_UARTGetLastErrorPtr m_GetLastError;
	PLibMCDriver_UARTReleaseInstancePtr m_ReleaseInstance;
	PLibMCDriver_UARTAcquireInstancePtr m_AcquireInstance;
	PLibMCDriver_UARTInjectComponentPtr m_InjectComponent;
	PLibMCDriver_UARTGetSymbolLookupMethodPtr m_GetSymbolLookupMethod;
	PLibMCDriver_UARTCreateDriverPtr m_CreateDriver;
} sLibMCDriver_UARTDynamicWrapperTable;

#endif // __LIBMCDRIVER_UART_DYNAMICHEADER_CPPTYPES

