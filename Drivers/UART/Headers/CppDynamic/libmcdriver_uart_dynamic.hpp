/*++

Copyright (C) 2022 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.8.0-develop.

Abstract: This is an autogenerated C++-Header file in order to allow an easy
 use of Generic UART Driver

Interface version: 1.0.0

*/

#ifndef __LIBMCDRIVER_UART_CPPHEADER_DYNAMIC_CPP
#define __LIBMCDRIVER_UART_CPPHEADER_DYNAMIC_CPP

#include "libmcdriver_uart_types.hpp"
#include "libmcdriver_uart_dynamic.h"

#include "libmcenv_dynamic.hpp"

#ifdef _WIN32
#include <windows.h>
#else // _WIN32
#include <dlfcn.h>
#endif // _WIN32
#include <string>
#include <memory>
#include <vector>
#include <exception>

namespace LibMCDriver_UART {

/*************************************************************************************************************************
 Forward Declaration of all classes
**************************************************************************************************************************/
class CWrapper;
class CBase;
class CDriver;
class CDriver_UART;

/*************************************************************************************************************************
 Declaration of deprecated class types
**************************************************************************************************************************/
typedef CWrapper CLibMCDriver_UARTWrapper;
typedef CBase CLibMCDriver_UARTBase;
typedef CDriver CLibMCDriver_UARTDriver;
typedef CDriver_UART CLibMCDriver_UARTDriver_UART;

/*************************************************************************************************************************
 Declaration of shared pointer types
**************************************************************************************************************************/
typedef std::shared_ptr<CWrapper> PWrapper;
typedef std::shared_ptr<CBase> PBase;
typedef std::shared_ptr<CDriver> PDriver;
typedef std::shared_ptr<CDriver_UART> PDriver_UART;

/*************************************************************************************************************************
 Declaration of deprecated shared pointer types
**************************************************************************************************************************/
typedef PWrapper PLibMCDriver_UARTWrapper;
typedef PBase PLibMCDriver_UARTBase;
typedef PDriver PLibMCDriver_UARTDriver;
typedef PDriver_UART PLibMCDriver_UARTDriver_UART;


/*************************************************************************************************************************
 classParam Definition
**************************************************************************************************************************/

template<class T> class classParam {
private:
	const T* m_ptr;

public:
	classParam(const T* ptr)
		: m_ptr (ptr)
	{
	}

	classParam(std::shared_ptr <T> sharedPtr)
		: m_ptr (sharedPtr.get())
	{
	}

	LibMCDriver_UARTHandle GetHandle()
	{
		if (m_ptr != nullptr)
			return m_ptr->handle();
		return nullptr;
	}
};

/*************************************************************************************************************************
 Class ELibMCDriver_UARTException 
**************************************************************************************************************************/
class ELibMCDriver_UARTException : public std::exception {
protected:
	/**
	* Error code for the Exception.
	*/
	LibMCDriver_UARTResult m_errorCode;
	/**
	* Error message for the Exception.
	*/
	std::string m_errorMessage;
	std::string m_originalErrorMessage;

public:
	/**
	* Exception Constructor.
	*/
	ELibMCDriver_UARTException(LibMCDriver_UARTResult errorCode, const std::string & sErrorMessage)
		: m_errorCode(errorCode), m_originalErrorMessage(sErrorMessage)
	{
		m_errorMessage = buildErrorMessage();
	}

	/**
	* Returns error code
	*/
	LibMCDriver_UARTResult getErrorCode() const noexcept
	{
		return m_errorCode;
	}

	/**
	* Returns error message
	*/
	const char* what() const noexcept
	{
		return m_errorMessage.c_str();
	}

	const char* getErrorMessage() const noexcept
	{
		return m_originalErrorMessage.c_str();
	}

	const char* getErrorName() const noexcept
	{
		switch(getErrorCode()) {
			case LIBMCDRIVER_UART_SUCCESS: return "SUCCESS";
			case LIBMCDRIVER_UART_ERROR_NOTIMPLEMENTED: return "NOTIMPLEMENTED";
			case LIBMCDRIVER_UART_ERROR_INVALIDPARAM: return "INVALIDPARAM";
			case LIBMCDRIVER_UART_ERROR_INVALIDCAST: return "INVALIDCAST";
			case LIBMCDRIVER_UART_ERROR_BUFFERTOOSMALL: return "BUFFERTOOSMALL";
			case LIBMCDRIVER_UART_ERROR_GENERICEXCEPTION: return "GENERICEXCEPTION";
			case LIBMCDRIVER_UART_ERROR_COULDNOTLOADLIBRARY: return "COULDNOTLOADLIBRARY";
			case LIBMCDRIVER_UART_ERROR_COULDNOTFINDLIBRARYEXPORT: return "COULDNOTFINDLIBRARYEXPORT";
			case LIBMCDRIVER_UART_ERROR_INCOMPATIBLEBINARYVERSION: return "INCOMPATIBLEBINARYVERSION";
			case LIBMCDRIVER_UART_ERROR_INVALIDSTATENAME: return "INVALIDSTATENAME";
			case LIBMCDRIVER_UART_ERROR_DRIVERERROR: return "DRIVERERROR";
			case LIBMCDRIVER_UART_ERROR_DRIVERNOTINITIALISED: return "DRIVERNOTINITIALISED";
			case LIBMCDRIVER_UART_ERROR_DRIVERNOTCONNECTED: return "DRIVERNOTCONNECTED";
			case LIBMCDRIVER_UART_ERROR_COULDNOTCONNECT: return "COULDNOTCONNECT";
			case LIBMCDRIVER_UART_ERROR_INVALIDBYTESIZE: return "INVALIDBYTESIZE";
			case LIBMCDRIVER_UART_ERROR_INVALIDPARITY: return "INVALIDPARITY";
			case LIBMCDRIVER_UART_ERROR_INVALIDFLOWCONTROL: return "INVALIDFLOWCONTROL";
			case LIBMCDRIVER_UART_ERROR_INVALIDSTOPBITS: return "INVALIDSTOPBITS";
		}
		return "UNKNOWN";
	}

	const char* getErrorDescription() const noexcept
	{
		switch(getErrorCode()) {
			case LIBMCDRIVER_UART_SUCCESS: return "success";
			case LIBMCDRIVER_UART_ERROR_NOTIMPLEMENTED: return "functionality not implemented";
			case LIBMCDRIVER_UART_ERROR_INVALIDPARAM: return "an invalid parameter was passed";
			case LIBMCDRIVER_UART_ERROR_INVALIDCAST: return "a type cast failed";
			case LIBMCDRIVER_UART_ERROR_BUFFERTOOSMALL: return "a provided buffer is too small";
			case LIBMCDRIVER_UART_ERROR_GENERICEXCEPTION: return "a generic exception occurred";
			case LIBMCDRIVER_UART_ERROR_COULDNOTLOADLIBRARY: return "the library could not be loaded";
			case LIBMCDRIVER_UART_ERROR_COULDNOTFINDLIBRARYEXPORT: return "a required exported symbol could not be found in the library";
			case LIBMCDRIVER_UART_ERROR_INCOMPATIBLEBINARYVERSION: return "the version of the binary interface does not match the bindings interface";
			case LIBMCDRIVER_UART_ERROR_INVALIDSTATENAME: return "invalid state name";
			case LIBMCDRIVER_UART_ERROR_DRIVERERROR: return "a driver error occured";
			case LIBMCDRIVER_UART_ERROR_DRIVERNOTINITIALISED: return "the driver is not initialised";
			case LIBMCDRIVER_UART_ERROR_DRIVERNOTCONNECTED: return "the driver is not connected";
			case LIBMCDRIVER_UART_ERROR_COULDNOTCONNECT: return "the driver is not connected";
			case LIBMCDRIVER_UART_ERROR_INVALIDBYTESIZE: return "invalid byte size";
			case LIBMCDRIVER_UART_ERROR_INVALIDPARITY: return "invalid parity";
			case LIBMCDRIVER_UART_ERROR_INVALIDFLOWCONTROL: return "invalid flow control";
			case LIBMCDRIVER_UART_ERROR_INVALIDSTOPBITS: return "invalid stop bits";
		}
		return "unknown error";
	}

private:

	std::string buildErrorMessage() const noexcept
	{
		std::string msg = m_originalErrorMessage;
		if (msg.empty()) {
			msg = getErrorDescription();
		}
		return std::string("Error: ") + getErrorName() + ": " + msg;
	}
};

/*************************************************************************************************************************
 Class CInputVector
**************************************************************************************************************************/
template <typename T>
class CInputVector {
private:
	
	const T* m_data;
	size_t m_size;
	
public:
	
	CInputVector(const std::vector<T>& vec)
		: m_data( vec.data() ), m_size( vec.size() )
	{
	}
	
	CInputVector(const T* in_data, size_t in_size)
		: m_data( in_data ), m_size(in_size )
	{
	}
	
	const T* data() const
	{
		return m_data;
	}
	
	size_t size() const
	{
		return m_size;
	}
	
};

// declare deprecated class name
template<typename T>
using CLibMCDriver_UARTInputVector = CInputVector<T>;

/*************************************************************************************************************************
 Class CWrapper 
**************************************************************************************************************************/
class CWrapper {
public:
	
	explicit CWrapper(void* pSymbolLookupMethod)
	{
		CheckError(nullptr, initWrapperTable(&m_WrapperTable));
		CheckError(nullptr, loadWrapperTableFromSymbolLookupMethod(&m_WrapperTable, pSymbolLookupMethod));
		
		CheckError(nullptr, checkBinaryVersion());
	}
	
	explicit CWrapper(const std::string &sFileName)
	{
		CheckError(nullptr, initWrapperTable(&m_WrapperTable));
		CheckError(nullptr, loadWrapperTable(&m_WrapperTable, sFileName.c_str()));
		
		CheckError(nullptr, checkBinaryVersion());
	}
	
	static PWrapper loadLibrary(const std::string &sFileName)
	{
		return std::make_shared<CWrapper>(sFileName);
	}
	
	static PWrapper loadLibraryFromSymbolLookupMethod(void* pSymbolLookupMethod)
	{
		return std::make_shared<CWrapper>(pSymbolLookupMethod);
	}
	
	~CWrapper()
	{
		releaseWrapperTable(&m_WrapperTable);
	}
	
	inline void CheckError(CBase * pBaseClass, LibMCDriver_UARTResult nResult);

	inline void GetVersion(LibMCDriver_UART_uint32 & nMajor, LibMCDriver_UART_uint32 & nMinor, LibMCDriver_UART_uint32 & nMicro);
	inline bool GetLastError(classParam<CBase> pInstance, std::string & sErrorMessage);
	inline void ReleaseInstance(classParam<CBase> pInstance);
	inline void AcquireInstance(classParam<CBase> pInstance);
	inline void InjectComponent(const std::string & sNameSpace, const LibMCDriver_UART_pvoid pSymbolAddressMethod);
	inline LibMCDriver_UART_pvoid GetSymbolLookupMethod();
	inline PDriver CreateDriver(const std::string & sName, const std::string & sType, classParam<LibMCEnv::CDriverEnvironment> pDriverEnvironment);

private:
	sLibMCDriver_UARTDynamicWrapperTable m_WrapperTable;
	// Injected Components
	LibMCEnv::PWrapper m_pLibMCEnvWrapper;

	
	LibMCDriver_UARTResult checkBinaryVersion()
	{
		LibMCDriver_UART_uint32 nMajor, nMinor, nMicro;
		GetVersion(nMajor, nMinor, nMicro);
		if (nMajor != LIBMCDRIVER_UART_VERSION_MAJOR) {
			return LIBMCDRIVER_UART_ERROR_INCOMPATIBLEBINARYVERSION;
		}
		return LIBMCDRIVER_UART_SUCCESS;
	}
	LibMCDriver_UARTResult initWrapperTable(sLibMCDriver_UARTDynamicWrapperTable * pWrapperTable);
	LibMCDriver_UARTResult releaseWrapperTable(sLibMCDriver_UARTDynamicWrapperTable * pWrapperTable);
	LibMCDriver_UARTResult loadWrapperTable(sLibMCDriver_UARTDynamicWrapperTable * pWrapperTable, const char * pLibraryFileName);
	LibMCDriver_UARTResult loadWrapperTableFromSymbolLookupMethod(sLibMCDriver_UARTDynamicWrapperTable * pWrapperTable, void* pSymbolLookupMethod);

	friend class CBase;
	friend class CDriver;
	friend class CDriver_UART;

};

	
/*************************************************************************************************************************
 Class CBase 
**************************************************************************************************************************/
class CBase {
public:
	
protected:
	/* Wrapper Object that created the class. */
	CWrapper * m_pWrapper;
	/* Handle to Instance in library*/
	LibMCDriver_UARTHandle m_pHandle;

	/* Checks for an Error code and raises Exceptions */
	void CheckError(LibMCDriver_UARTResult nResult)
	{
		if (m_pWrapper != nullptr)
			m_pWrapper->CheckError(this, nResult);
	}
public:
	/**
	* CBase::CBase - Constructor for Base class.
	*/
	CBase(CWrapper * pWrapper, LibMCDriver_UARTHandle pHandle)
		: m_pWrapper(pWrapper), m_pHandle(pHandle)
	{
	}

	/**
	* CBase::~CBase - Destructor for Base class.
	*/
	virtual ~CBase()
	{
		if (m_pWrapper != nullptr)
			m_pWrapper->ReleaseInstance(this);
		m_pWrapper = nullptr;
	}

	/**
	* CBase::handle - Returns handle to instance.
	*/
	LibMCDriver_UARTHandle handle() const
	{
		return m_pHandle;
	}

	/**
	* CBase::wrapper - Returns wrapper instance.
	*/
	CWrapper * wrapper() const
	{
		return m_pWrapper;
	}
	
	friend class CWrapper;
};
	
/*************************************************************************************************************************
 Class CDriver 
**************************************************************************************************************************/
class CDriver : public CBase {
public:
	
	/**
	* CDriver::CDriver - Constructor for Driver class.
	*/
	CDriver(CWrapper* pWrapper, LibMCDriver_UARTHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline void Configure(const std::string & sConfigurationString);
	inline std::string GetName();
	inline std::string GetType();
	inline void GetVersion(LibMCDriver_UART_uint32 & nMajor, LibMCDriver_UART_uint32 & nMinor, LibMCDriver_UART_uint32 & nMicro, std::string & sBuild);
	inline void GetHeaderInformation(std::string & sNameSpace, std::string & sBaseName);
	inline void QueryParameters();
};
	
/*************************************************************************************************************************
 Class CDriver_UART 
**************************************************************************************************************************/
class CDriver_UART : public CDriver {
public:
	
	/**
	* CDriver_UART::CDriver_UART - Constructor for Driver_UART class.
	*/
	CDriver_UART(CWrapper* pWrapper, LibMCDriver_UARTHandle pHandle)
		: CDriver(pWrapper, pHandle)
	{
	}
	
	inline void SetToSimulationMode();
	inline bool IsSimulationMode();
	inline void SetParity(const eUARTParity eParity);
	inline eUARTParity GetParity();
	inline void SetStopBits(const eUARTStopBits eStopBits);
	inline eUARTStopBits GetStopBits();
	inline void SetByteSize(const eUARTByteSize eByteSize);
	inline eUARTByteSize GetByteSize();
	inline void SetFlowControl(const eUARTFlowControl eFlowControl);
	inline eUARTFlowControl GetFlowControl();
	inline void Connect(const std::string & sDeviceAddress, const LibMCDriver_UART_uint32 nBaudRate, const LibMCDriver_UART_uint32 nTimeout);
	inline void Disconnect();
	inline bool IsConnected();
	inline void SendString(const std::string & sStringToSend, const LibMCDriver_UART_uint32 nTimeout);
	inline std::string ReceiveString(const LibMCDriver_UART_uint32 nTimeout, const std::string & sReceiveStringTermination);
	inline std::string SendAndReceiveString(const std::string & sStringToSend, const std::string & sReceiveStringTermination, const LibMCDriver_UART_uint32 nTimeout);
};
	
	/**
	* CWrapper::GetVersion - retrieves the binary version of this library.
	* @param[out] nMajor - returns the major version of this library
	* @param[out] nMinor - returns the minor version of this library
	* @param[out] nMicro - returns the micro version of this library
	*/
	inline void CWrapper::GetVersion(LibMCDriver_UART_uint32 & nMajor, LibMCDriver_UART_uint32 & nMinor, LibMCDriver_UART_uint32 & nMicro)
	{
		CheckError(nullptr,m_WrapperTable.m_GetVersion(&nMajor, &nMinor, &nMicro));
	}
	
	/**
	* CWrapper::GetLastError - Returns the last error recorded on this object
	* @param[in] pInstance - Instance Handle
	* @param[out] sErrorMessage - Message of the last error
	* @return Is there a last error to query
	*/
	inline bool CWrapper::GetLastError(classParam<CBase> pInstance, std::string & sErrorMessage)
	{
		LibMCDriver_UARTHandle hInstance = pInstance.GetHandle();
		LibMCDriver_UART_uint32 bytesNeededErrorMessage = 0;
		LibMCDriver_UART_uint32 bytesWrittenErrorMessage = 0;
		bool resultHasError = 0;
		CheckError(nullptr,m_WrapperTable.m_GetLastError(hInstance, 0, &bytesNeededErrorMessage, nullptr, &resultHasError));
		std::vector<char> bufferErrorMessage(bytesNeededErrorMessage);
		CheckError(nullptr,m_WrapperTable.m_GetLastError(hInstance, bytesNeededErrorMessage, &bytesWrittenErrorMessage, &bufferErrorMessage[0], &resultHasError));
		sErrorMessage = std::string(&bufferErrorMessage[0]);
		
		return resultHasError;
	}
	
	/**
	* CWrapper::ReleaseInstance - Releases shared ownership of an Instance
	* @param[in] pInstance - Instance Handle
	*/
	inline void CWrapper::ReleaseInstance(classParam<CBase> pInstance)
	{
		LibMCDriver_UARTHandle hInstance = pInstance.GetHandle();
		CheckError(nullptr,m_WrapperTable.m_ReleaseInstance(hInstance));
	}
	
	/**
	* CWrapper::AcquireInstance - Acquires shared ownership of an Instance
	* @param[in] pInstance - Instance Handle
	*/
	inline void CWrapper::AcquireInstance(classParam<CBase> pInstance)
	{
		LibMCDriver_UARTHandle hInstance = pInstance.GetHandle();
		CheckError(nullptr,m_WrapperTable.m_AcquireInstance(hInstance));
	}
	
	/**
	* CWrapper::InjectComponent - Injects an imported component for usage within this component
	* @param[in] sNameSpace - NameSpace of the injected component
	* @param[in] pSymbolAddressMethod - Address of the SymbolAddressMethod of the injected component
	*/
	inline void CWrapper::InjectComponent(const std::string & sNameSpace, const LibMCDriver_UART_pvoid pSymbolAddressMethod)
	{
		CheckError(nullptr,m_WrapperTable.m_InjectComponent(sNameSpace.c_str(), pSymbolAddressMethod));
		
		bool bNameSpaceFound = false;
		if (sNameSpace == "LibMCEnv") {
			if (m_pLibMCEnvWrapper != nullptr) {
				throw ELibMCDriver_UARTException(LIBMCDRIVER_UART_ERROR_COULDNOTLOADLIBRARY, "Library with namespace " + sNameSpace + " is already registered.");
			}
			m_pLibMCEnvWrapper = LibMCEnv::CWrapper::loadLibraryFromSymbolLookupMethod(pSymbolAddressMethod);
			bNameSpaceFound = true;
		}
		if (!bNameSpaceFound)
			throw ELibMCDriver_UARTException(LIBMCDRIVER_UART_ERROR_COULDNOTLOADLIBRARY, "Unknown namespace " + sNameSpace);
	}
	
	/**
	* CWrapper::GetSymbolLookupMethod - Returns the address of the SymbolLookupMethod
	* @return Address of the SymbolAddressMethod
	*/
	inline LibMCDriver_UART_pvoid CWrapper::GetSymbolLookupMethod()
	{
		LibMCDriver_UART_pvoid resultSymbolLookupMethod = 0;
		CheckError(nullptr,m_WrapperTable.m_GetSymbolLookupMethod(&resultSymbolLookupMethod));
		
		return resultSymbolLookupMethod;
	}
	
	/**
	* CWrapper::CreateDriver - Creates a driver instance with a specific name.
	* @param[in] sName - Name of driver to be created.
	* @param[in] sType - Type of driver to be created.
	* @param[in] pDriverEnvironment - Environment of this driver.
	* @return New Driver instance
	*/
	inline PDriver CWrapper::CreateDriver(const std::string & sName, const std::string & sType, classParam<LibMCEnv::CDriverEnvironment> pDriverEnvironment)
	{
		LibMCEnvHandle hDriverEnvironment = pDriverEnvironment.GetHandle();
		LibMCDriver_UARTHandle hInstance = nullptr;
		CheckError(nullptr,m_WrapperTable.m_CreateDriver(sName.c_str(), sType.c_str(), hDriverEnvironment, &hInstance));
		
		if (!hInstance) {
			CheckError(nullptr,LIBMCDRIVER_UART_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CDriver>(this, hInstance);
	}
	
	inline void CWrapper::CheckError(CBase * pBaseClass, LibMCDriver_UARTResult nResult)
	{
		if (nResult != 0) {
			std::string sErrorMessage;
			if (pBaseClass != nullptr) {
				GetLastError(pBaseClass, sErrorMessage);
			}
			throw ELibMCDriver_UARTException(nResult, sErrorMessage);
		}
	}
	

	inline LibMCDriver_UARTResult CWrapper::initWrapperTable(sLibMCDriver_UARTDynamicWrapperTable * pWrapperTable)
	{
		if (pWrapperTable == nullptr)
			return LIBMCDRIVER_UART_ERROR_INVALIDPARAM;
		
		pWrapperTable->m_LibraryHandle = nullptr;
		pWrapperTable->m_Driver_Configure = nullptr;
		pWrapperTable->m_Driver_GetName = nullptr;
		pWrapperTable->m_Driver_GetType = nullptr;
		pWrapperTable->m_Driver_GetVersion = nullptr;
		pWrapperTable->m_Driver_GetHeaderInformation = nullptr;
		pWrapperTable->m_Driver_QueryParameters = nullptr;
		pWrapperTable->m_Driver_UART_SetToSimulationMode = nullptr;
		pWrapperTable->m_Driver_UART_IsSimulationMode = nullptr;
		pWrapperTable->m_Driver_UART_SetParity = nullptr;
		pWrapperTable->m_Driver_UART_GetParity = nullptr;
		pWrapperTable->m_Driver_UART_SetStopBits = nullptr;
		pWrapperTable->m_Driver_UART_GetStopBits = nullptr;
		pWrapperTable->m_Driver_UART_SetByteSize = nullptr;
		pWrapperTable->m_Driver_UART_GetByteSize = nullptr;
		pWrapperTable->m_Driver_UART_SetFlowControl = nullptr;
		pWrapperTable->m_Driver_UART_GetFlowControl = nullptr;
		pWrapperTable->m_Driver_UART_Connect = nullptr;
		pWrapperTable->m_Driver_UART_Disconnect = nullptr;
		pWrapperTable->m_Driver_UART_IsConnected = nullptr;
		pWrapperTable->m_Driver_UART_SendString = nullptr;
		pWrapperTable->m_Driver_UART_ReceiveString = nullptr;
		pWrapperTable->m_Driver_UART_SendAndReceiveString = nullptr;
		pWrapperTable->m_GetVersion = nullptr;
		pWrapperTable->m_GetLastError = nullptr;
		pWrapperTable->m_ReleaseInstance = nullptr;
		pWrapperTable->m_AcquireInstance = nullptr;
		pWrapperTable->m_InjectComponent = nullptr;
		pWrapperTable->m_GetSymbolLookupMethod = nullptr;
		pWrapperTable->m_CreateDriver = nullptr;
		
		return LIBMCDRIVER_UART_SUCCESS;
	}

	inline LibMCDriver_UARTResult CWrapper::releaseWrapperTable(sLibMCDriver_UARTDynamicWrapperTable * pWrapperTable)
	{
		if (pWrapperTable == nullptr)
			return LIBMCDRIVER_UART_ERROR_INVALIDPARAM;
		
		if (pWrapperTable->m_LibraryHandle != nullptr) {
		#ifdef _WIN32
			HMODULE hModule = (HMODULE) pWrapperTable->m_LibraryHandle;
			FreeLibrary(hModule);
		#else // _WIN32
			dlclose(pWrapperTable->m_LibraryHandle);
		#endif // _WIN32
			return initWrapperTable(pWrapperTable);
		}
		
		return LIBMCDRIVER_UART_SUCCESS;
	}

	inline LibMCDriver_UARTResult CWrapper::loadWrapperTable(sLibMCDriver_UARTDynamicWrapperTable * pWrapperTable, const char * pLibraryFileName)
	{
		if (pWrapperTable == nullptr)
			return LIBMCDRIVER_UART_ERROR_INVALIDPARAM;
		if (pLibraryFileName == nullptr)
			return LIBMCDRIVER_UART_ERROR_INVALIDPARAM;
		
		#ifdef _WIN32
		// Convert filename to UTF16-string
		int nLength = 0;
		while ((pLibraryFileName[nLength] != 0) && (nLength < MAX_PATH))
			nLength++;
		int nBufferSize = nLength * 2 + 2;
		std::vector<wchar_t> wsLibraryFileName(nBufferSize);
		int nResult = MultiByteToWideChar(CP_UTF8, 0, pLibraryFileName, nLength, &wsLibraryFileName[0], nBufferSize);
		if (nResult == 0)
			return LIBMCDRIVER_UART_ERROR_COULDNOTLOADLIBRARY;
		
		HMODULE hLibrary = LoadLibraryW(wsLibraryFileName.data());
		if (hLibrary == 0) 
			return LIBMCDRIVER_UART_ERROR_COULDNOTLOADLIBRARY;
		#else // _WIN32
		void* hLibrary = dlopen(pLibraryFileName, RTLD_LAZY);
		if (hLibrary == 0) 
			return LIBMCDRIVER_UART_ERROR_COULDNOTLOADLIBRARY;
		dlerror();
		#endif // _WIN32
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_Configure = (PLibMCDriver_UARTDriver_ConfigurePtr) GetProcAddress(hLibrary, "libmcdriver_uart_driver_configure");
		#else // _WIN32
		pWrapperTable->m_Driver_Configure = (PLibMCDriver_UARTDriver_ConfigurePtr) dlsym(hLibrary, "libmcdriver_uart_driver_configure");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_Configure == nullptr)
			return LIBMCDRIVER_UART_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_GetName = (PLibMCDriver_UARTDriver_GetNamePtr) GetProcAddress(hLibrary, "libmcdriver_uart_driver_getname");
		#else // _WIN32
		pWrapperTable->m_Driver_GetName = (PLibMCDriver_UARTDriver_GetNamePtr) dlsym(hLibrary, "libmcdriver_uart_driver_getname");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_GetName == nullptr)
			return LIBMCDRIVER_UART_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_GetType = (PLibMCDriver_UARTDriver_GetTypePtr) GetProcAddress(hLibrary, "libmcdriver_uart_driver_gettype");
		#else // _WIN32
		pWrapperTable->m_Driver_GetType = (PLibMCDriver_UARTDriver_GetTypePtr) dlsym(hLibrary, "libmcdriver_uart_driver_gettype");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_GetType == nullptr)
			return LIBMCDRIVER_UART_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_GetVersion = (PLibMCDriver_UARTDriver_GetVersionPtr) GetProcAddress(hLibrary, "libmcdriver_uart_driver_getversion");
		#else // _WIN32
		pWrapperTable->m_Driver_GetVersion = (PLibMCDriver_UARTDriver_GetVersionPtr) dlsym(hLibrary, "libmcdriver_uart_driver_getversion");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_GetVersion == nullptr)
			return LIBMCDRIVER_UART_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_GetHeaderInformation = (PLibMCDriver_UARTDriver_GetHeaderInformationPtr) GetProcAddress(hLibrary, "libmcdriver_uart_driver_getheaderinformation");
		#else // _WIN32
		pWrapperTable->m_Driver_GetHeaderInformation = (PLibMCDriver_UARTDriver_GetHeaderInformationPtr) dlsym(hLibrary, "libmcdriver_uart_driver_getheaderinformation");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_GetHeaderInformation == nullptr)
			return LIBMCDRIVER_UART_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_QueryParameters = (PLibMCDriver_UARTDriver_QueryParametersPtr) GetProcAddress(hLibrary, "libmcdriver_uart_driver_queryparameters");
		#else // _WIN32
		pWrapperTable->m_Driver_QueryParameters = (PLibMCDriver_UARTDriver_QueryParametersPtr) dlsym(hLibrary, "libmcdriver_uart_driver_queryparameters");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_QueryParameters == nullptr)
			return LIBMCDRIVER_UART_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_UART_SetToSimulationMode = (PLibMCDriver_UARTDriver_UART_SetToSimulationModePtr) GetProcAddress(hLibrary, "libmcdriver_uart_driver_uart_settosimulationmode");
		#else // _WIN32
		pWrapperTable->m_Driver_UART_SetToSimulationMode = (PLibMCDriver_UARTDriver_UART_SetToSimulationModePtr) dlsym(hLibrary, "libmcdriver_uart_driver_uart_settosimulationmode");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_UART_SetToSimulationMode == nullptr)
			return LIBMCDRIVER_UART_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_UART_IsSimulationMode = (PLibMCDriver_UARTDriver_UART_IsSimulationModePtr) GetProcAddress(hLibrary, "libmcdriver_uart_driver_uart_issimulationmode");
		#else // _WIN32
		pWrapperTable->m_Driver_UART_IsSimulationMode = (PLibMCDriver_UARTDriver_UART_IsSimulationModePtr) dlsym(hLibrary, "libmcdriver_uart_driver_uart_issimulationmode");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_UART_IsSimulationMode == nullptr)
			return LIBMCDRIVER_UART_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_UART_SetParity = (PLibMCDriver_UARTDriver_UART_SetParityPtr) GetProcAddress(hLibrary, "libmcdriver_uart_driver_uart_setparity");
		#else // _WIN32
		pWrapperTable->m_Driver_UART_SetParity = (PLibMCDriver_UARTDriver_UART_SetParityPtr) dlsym(hLibrary, "libmcdriver_uart_driver_uart_setparity");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_UART_SetParity == nullptr)
			return LIBMCDRIVER_UART_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_UART_GetParity = (PLibMCDriver_UARTDriver_UART_GetParityPtr) GetProcAddress(hLibrary, "libmcdriver_uart_driver_uart_getparity");
		#else // _WIN32
		pWrapperTable->m_Driver_UART_GetParity = (PLibMCDriver_UARTDriver_UART_GetParityPtr) dlsym(hLibrary, "libmcdriver_uart_driver_uart_getparity");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_UART_GetParity == nullptr)
			return LIBMCDRIVER_UART_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_UART_SetStopBits = (PLibMCDriver_UARTDriver_UART_SetStopBitsPtr) GetProcAddress(hLibrary, "libmcdriver_uart_driver_uart_setstopbits");
		#else // _WIN32
		pWrapperTable->m_Driver_UART_SetStopBits = (PLibMCDriver_UARTDriver_UART_SetStopBitsPtr) dlsym(hLibrary, "libmcdriver_uart_driver_uart_setstopbits");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_UART_SetStopBits == nullptr)
			return LIBMCDRIVER_UART_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_UART_GetStopBits = (PLibMCDriver_UARTDriver_UART_GetStopBitsPtr) GetProcAddress(hLibrary, "libmcdriver_uart_driver_uart_getstopbits");
		#else // _WIN32
		pWrapperTable->m_Driver_UART_GetStopBits = (PLibMCDriver_UARTDriver_UART_GetStopBitsPtr) dlsym(hLibrary, "libmcdriver_uart_driver_uart_getstopbits");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_UART_GetStopBits == nullptr)
			return LIBMCDRIVER_UART_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_UART_SetByteSize = (PLibMCDriver_UARTDriver_UART_SetByteSizePtr) GetProcAddress(hLibrary, "libmcdriver_uart_driver_uart_setbytesize");
		#else // _WIN32
		pWrapperTable->m_Driver_UART_SetByteSize = (PLibMCDriver_UARTDriver_UART_SetByteSizePtr) dlsym(hLibrary, "libmcdriver_uart_driver_uart_setbytesize");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_UART_SetByteSize == nullptr)
			return LIBMCDRIVER_UART_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_UART_GetByteSize = (PLibMCDriver_UARTDriver_UART_GetByteSizePtr) GetProcAddress(hLibrary, "libmcdriver_uart_driver_uart_getbytesize");
		#else // _WIN32
		pWrapperTable->m_Driver_UART_GetByteSize = (PLibMCDriver_UARTDriver_UART_GetByteSizePtr) dlsym(hLibrary, "libmcdriver_uart_driver_uart_getbytesize");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_UART_GetByteSize == nullptr)
			return LIBMCDRIVER_UART_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_UART_SetFlowControl = (PLibMCDriver_UARTDriver_UART_SetFlowControlPtr) GetProcAddress(hLibrary, "libmcdriver_uart_driver_uart_setflowcontrol");
		#else // _WIN32
		pWrapperTable->m_Driver_UART_SetFlowControl = (PLibMCDriver_UARTDriver_UART_SetFlowControlPtr) dlsym(hLibrary, "libmcdriver_uart_driver_uart_setflowcontrol");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_UART_SetFlowControl == nullptr)
			return LIBMCDRIVER_UART_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_UART_GetFlowControl = (PLibMCDriver_UARTDriver_UART_GetFlowControlPtr) GetProcAddress(hLibrary, "libmcdriver_uart_driver_uart_getflowcontrol");
		#else // _WIN32
		pWrapperTable->m_Driver_UART_GetFlowControl = (PLibMCDriver_UARTDriver_UART_GetFlowControlPtr) dlsym(hLibrary, "libmcdriver_uart_driver_uart_getflowcontrol");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_UART_GetFlowControl == nullptr)
			return LIBMCDRIVER_UART_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_UART_Connect = (PLibMCDriver_UARTDriver_UART_ConnectPtr) GetProcAddress(hLibrary, "libmcdriver_uart_driver_uart_connect");
		#else // _WIN32
		pWrapperTable->m_Driver_UART_Connect = (PLibMCDriver_UARTDriver_UART_ConnectPtr) dlsym(hLibrary, "libmcdriver_uart_driver_uart_connect");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_UART_Connect == nullptr)
			return LIBMCDRIVER_UART_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_UART_Disconnect = (PLibMCDriver_UARTDriver_UART_DisconnectPtr) GetProcAddress(hLibrary, "libmcdriver_uart_driver_uart_disconnect");
		#else // _WIN32
		pWrapperTable->m_Driver_UART_Disconnect = (PLibMCDriver_UARTDriver_UART_DisconnectPtr) dlsym(hLibrary, "libmcdriver_uart_driver_uart_disconnect");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_UART_Disconnect == nullptr)
			return LIBMCDRIVER_UART_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_UART_IsConnected = (PLibMCDriver_UARTDriver_UART_IsConnectedPtr) GetProcAddress(hLibrary, "libmcdriver_uart_driver_uart_isconnected");
		#else // _WIN32
		pWrapperTable->m_Driver_UART_IsConnected = (PLibMCDriver_UARTDriver_UART_IsConnectedPtr) dlsym(hLibrary, "libmcdriver_uart_driver_uart_isconnected");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_UART_IsConnected == nullptr)
			return LIBMCDRIVER_UART_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_UART_SendString = (PLibMCDriver_UARTDriver_UART_SendStringPtr) GetProcAddress(hLibrary, "libmcdriver_uart_driver_uart_sendstring");
		#else // _WIN32
		pWrapperTable->m_Driver_UART_SendString = (PLibMCDriver_UARTDriver_UART_SendStringPtr) dlsym(hLibrary, "libmcdriver_uart_driver_uart_sendstring");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_UART_SendString == nullptr)
			return LIBMCDRIVER_UART_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_UART_ReceiveString = (PLibMCDriver_UARTDriver_UART_ReceiveStringPtr) GetProcAddress(hLibrary, "libmcdriver_uart_driver_uart_receivestring");
		#else // _WIN32
		pWrapperTable->m_Driver_UART_ReceiveString = (PLibMCDriver_UARTDriver_UART_ReceiveStringPtr) dlsym(hLibrary, "libmcdriver_uart_driver_uart_receivestring");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_UART_ReceiveString == nullptr)
			return LIBMCDRIVER_UART_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_UART_SendAndReceiveString = (PLibMCDriver_UARTDriver_UART_SendAndReceiveStringPtr) GetProcAddress(hLibrary, "libmcdriver_uart_driver_uart_sendandreceivestring");
		#else // _WIN32
		pWrapperTable->m_Driver_UART_SendAndReceiveString = (PLibMCDriver_UARTDriver_UART_SendAndReceiveStringPtr) dlsym(hLibrary, "libmcdriver_uart_driver_uart_sendandreceivestring");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_UART_SendAndReceiveString == nullptr)
			return LIBMCDRIVER_UART_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GetVersion = (PLibMCDriver_UARTGetVersionPtr) GetProcAddress(hLibrary, "libmcdriver_uart_getversion");
		#else // _WIN32
		pWrapperTable->m_GetVersion = (PLibMCDriver_UARTGetVersionPtr) dlsym(hLibrary, "libmcdriver_uart_getversion");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GetVersion == nullptr)
			return LIBMCDRIVER_UART_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GetLastError = (PLibMCDriver_UARTGetLastErrorPtr) GetProcAddress(hLibrary, "libmcdriver_uart_getlasterror");
		#else // _WIN32
		pWrapperTable->m_GetLastError = (PLibMCDriver_UARTGetLastErrorPtr) dlsym(hLibrary, "libmcdriver_uart_getlasterror");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GetLastError == nullptr)
			return LIBMCDRIVER_UART_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ReleaseInstance = (PLibMCDriver_UARTReleaseInstancePtr) GetProcAddress(hLibrary, "libmcdriver_uart_releaseinstance");
		#else // _WIN32
		pWrapperTable->m_ReleaseInstance = (PLibMCDriver_UARTReleaseInstancePtr) dlsym(hLibrary, "libmcdriver_uart_releaseinstance");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ReleaseInstance == nullptr)
			return LIBMCDRIVER_UART_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_AcquireInstance = (PLibMCDriver_UARTAcquireInstancePtr) GetProcAddress(hLibrary, "libmcdriver_uart_acquireinstance");
		#else // _WIN32
		pWrapperTable->m_AcquireInstance = (PLibMCDriver_UARTAcquireInstancePtr) dlsym(hLibrary, "libmcdriver_uart_acquireinstance");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_AcquireInstance == nullptr)
			return LIBMCDRIVER_UART_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_InjectComponent = (PLibMCDriver_UARTInjectComponentPtr) GetProcAddress(hLibrary, "libmcdriver_uart_injectcomponent");
		#else // _WIN32
		pWrapperTable->m_InjectComponent = (PLibMCDriver_UARTInjectComponentPtr) dlsym(hLibrary, "libmcdriver_uart_injectcomponent");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_InjectComponent == nullptr)
			return LIBMCDRIVER_UART_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GetSymbolLookupMethod = (PLibMCDriver_UARTGetSymbolLookupMethodPtr) GetProcAddress(hLibrary, "libmcdriver_uart_getsymbollookupmethod");
		#else // _WIN32
		pWrapperTable->m_GetSymbolLookupMethod = (PLibMCDriver_UARTGetSymbolLookupMethodPtr) dlsym(hLibrary, "libmcdriver_uart_getsymbollookupmethod");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GetSymbolLookupMethod == nullptr)
			return LIBMCDRIVER_UART_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_CreateDriver = (PLibMCDriver_UARTCreateDriverPtr) GetProcAddress(hLibrary, "libmcdriver_uart_createdriver");
		#else // _WIN32
		pWrapperTable->m_CreateDriver = (PLibMCDriver_UARTCreateDriverPtr) dlsym(hLibrary, "libmcdriver_uart_createdriver");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_CreateDriver == nullptr)
			return LIBMCDRIVER_UART_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		pWrapperTable->m_LibraryHandle = hLibrary;
		return LIBMCDRIVER_UART_SUCCESS;
	}

	inline LibMCDriver_UARTResult CWrapper::loadWrapperTableFromSymbolLookupMethod(sLibMCDriver_UARTDynamicWrapperTable * pWrapperTable, void* pSymbolLookupMethod)
{
		if (pWrapperTable == nullptr)
			return LIBMCDRIVER_UART_ERROR_INVALIDPARAM;
		if (pSymbolLookupMethod == nullptr)
			return LIBMCDRIVER_UART_ERROR_INVALIDPARAM;
		
		typedef LibMCDriver_UARTResult(*SymbolLookupType)(const char*, void**);
		
		SymbolLookupType pLookup = (SymbolLookupType)pSymbolLookupMethod;
		
		LibMCDriver_UARTResult eLookupError = LIBMCDRIVER_UART_SUCCESS;
		eLookupError = (*pLookup)("libmcdriver_uart_driver_configure", (void**)&(pWrapperTable->m_Driver_Configure));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_Configure == nullptr) )
			return LIBMCDRIVER_UART_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_uart_driver_getname", (void**)&(pWrapperTable->m_Driver_GetName));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_GetName == nullptr) )
			return LIBMCDRIVER_UART_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_uart_driver_gettype", (void**)&(pWrapperTable->m_Driver_GetType));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_GetType == nullptr) )
			return LIBMCDRIVER_UART_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_uart_driver_getversion", (void**)&(pWrapperTable->m_Driver_GetVersion));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_GetVersion == nullptr) )
			return LIBMCDRIVER_UART_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_uart_driver_getheaderinformation", (void**)&(pWrapperTable->m_Driver_GetHeaderInformation));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_GetHeaderInformation == nullptr) )
			return LIBMCDRIVER_UART_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_uart_driver_queryparameters", (void**)&(pWrapperTable->m_Driver_QueryParameters));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_QueryParameters == nullptr) )
			return LIBMCDRIVER_UART_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_uart_driver_uart_settosimulationmode", (void**)&(pWrapperTable->m_Driver_UART_SetToSimulationMode));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_UART_SetToSimulationMode == nullptr) )
			return LIBMCDRIVER_UART_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_uart_driver_uart_issimulationmode", (void**)&(pWrapperTable->m_Driver_UART_IsSimulationMode));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_UART_IsSimulationMode == nullptr) )
			return LIBMCDRIVER_UART_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_uart_driver_uart_setparity", (void**)&(pWrapperTable->m_Driver_UART_SetParity));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_UART_SetParity == nullptr) )
			return LIBMCDRIVER_UART_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_uart_driver_uart_getparity", (void**)&(pWrapperTable->m_Driver_UART_GetParity));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_UART_GetParity == nullptr) )
			return LIBMCDRIVER_UART_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_uart_driver_uart_setstopbits", (void**)&(pWrapperTable->m_Driver_UART_SetStopBits));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_UART_SetStopBits == nullptr) )
			return LIBMCDRIVER_UART_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_uart_driver_uart_getstopbits", (void**)&(pWrapperTable->m_Driver_UART_GetStopBits));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_UART_GetStopBits == nullptr) )
			return LIBMCDRIVER_UART_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_uart_driver_uart_setbytesize", (void**)&(pWrapperTable->m_Driver_UART_SetByteSize));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_UART_SetByteSize == nullptr) )
			return LIBMCDRIVER_UART_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_uart_driver_uart_getbytesize", (void**)&(pWrapperTable->m_Driver_UART_GetByteSize));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_UART_GetByteSize == nullptr) )
			return LIBMCDRIVER_UART_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_uart_driver_uart_setflowcontrol", (void**)&(pWrapperTable->m_Driver_UART_SetFlowControl));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_UART_SetFlowControl == nullptr) )
			return LIBMCDRIVER_UART_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_uart_driver_uart_getflowcontrol", (void**)&(pWrapperTable->m_Driver_UART_GetFlowControl));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_UART_GetFlowControl == nullptr) )
			return LIBMCDRIVER_UART_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_uart_driver_uart_connect", (void**)&(pWrapperTable->m_Driver_UART_Connect));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_UART_Connect == nullptr) )
			return LIBMCDRIVER_UART_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_uart_driver_uart_disconnect", (void**)&(pWrapperTable->m_Driver_UART_Disconnect));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_UART_Disconnect == nullptr) )
			return LIBMCDRIVER_UART_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_uart_driver_uart_isconnected", (void**)&(pWrapperTable->m_Driver_UART_IsConnected));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_UART_IsConnected == nullptr) )
			return LIBMCDRIVER_UART_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_uart_driver_uart_sendstring", (void**)&(pWrapperTable->m_Driver_UART_SendString));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_UART_SendString == nullptr) )
			return LIBMCDRIVER_UART_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_uart_driver_uart_receivestring", (void**)&(pWrapperTable->m_Driver_UART_ReceiveString));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_UART_ReceiveString == nullptr) )
			return LIBMCDRIVER_UART_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_uart_driver_uart_sendandreceivestring", (void**)&(pWrapperTable->m_Driver_UART_SendAndReceiveString));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_UART_SendAndReceiveString == nullptr) )
			return LIBMCDRIVER_UART_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_uart_getversion", (void**)&(pWrapperTable->m_GetVersion));
		if ( (eLookupError != 0) || (pWrapperTable->m_GetVersion == nullptr) )
			return LIBMCDRIVER_UART_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_uart_getlasterror", (void**)&(pWrapperTable->m_GetLastError));
		if ( (eLookupError != 0) || (pWrapperTable->m_GetLastError == nullptr) )
			return LIBMCDRIVER_UART_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_uart_releaseinstance", (void**)&(pWrapperTable->m_ReleaseInstance));
		if ( (eLookupError != 0) || (pWrapperTable->m_ReleaseInstance == nullptr) )
			return LIBMCDRIVER_UART_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_uart_acquireinstance", (void**)&(pWrapperTable->m_AcquireInstance));
		if ( (eLookupError != 0) || (pWrapperTable->m_AcquireInstance == nullptr) )
			return LIBMCDRIVER_UART_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_uart_injectcomponent", (void**)&(pWrapperTable->m_InjectComponent));
		if ( (eLookupError != 0) || (pWrapperTable->m_InjectComponent == nullptr) )
			return LIBMCDRIVER_UART_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_uart_getsymbollookupmethod", (void**)&(pWrapperTable->m_GetSymbolLookupMethod));
		if ( (eLookupError != 0) || (pWrapperTable->m_GetSymbolLookupMethod == nullptr) )
			return LIBMCDRIVER_UART_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_uart_createdriver", (void**)&(pWrapperTable->m_CreateDriver));
		if ( (eLookupError != 0) || (pWrapperTable->m_CreateDriver == nullptr) )
			return LIBMCDRIVER_UART_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		return LIBMCDRIVER_UART_SUCCESS;
}

	
	
	/**
	 * Method definitions for class CBase
	 */
	
	/**
	 * Method definitions for class CDriver
	 */
	
	/**
	* CDriver::Configure - Configures a driver with its specific configuration data.
	* @param[in] sConfigurationString - Configuration data of driver.
	*/
	void CDriver::Configure(const std::string & sConfigurationString)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_Configure(m_pHandle, sConfigurationString.c_str()));
	}
	
	/**
	* CDriver::GetName - returns the name identifier of the driver
	* @return Name of the driver.
	*/
	std::string CDriver::GetName()
	{
		LibMCDriver_UART_uint32 bytesNeededName = 0;
		LibMCDriver_UART_uint32 bytesWrittenName = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetName(m_pHandle, 0, &bytesNeededName, nullptr));
		std::vector<char> bufferName(bytesNeededName);
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetName(m_pHandle, bytesNeededName, &bytesWrittenName, &bufferName[0]));
		
		return std::string(&bufferName[0]);
	}
	
	/**
	* CDriver::GetType - returns the type identifier of the driver
	* @return Type of the driver.
	*/
	std::string CDriver::GetType()
	{
		LibMCDriver_UART_uint32 bytesNeededType = 0;
		LibMCDriver_UART_uint32 bytesWrittenType = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetType(m_pHandle, 0, &bytesNeededType, nullptr));
		std::vector<char> bufferType(bytesNeededType);
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetType(m_pHandle, bytesNeededType, &bytesWrittenType, &bufferType[0]));
		
		return std::string(&bufferType[0]);
	}
	
	/**
	* CDriver::GetVersion - returns the version identifiers of the driver
	* @param[out] nMajor - Major version.
	* @param[out] nMinor - Minor version.
	* @param[out] nMicro - Micro version.
	* @param[out] sBuild - Build identifier.
	*/
	void CDriver::GetVersion(LibMCDriver_UART_uint32 & nMajor, LibMCDriver_UART_uint32 & nMinor, LibMCDriver_UART_uint32 & nMicro, std::string & sBuild)
	{
		LibMCDriver_UART_uint32 bytesNeededBuild = 0;
		LibMCDriver_UART_uint32 bytesWrittenBuild = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetVersion(m_pHandle, &nMajor, &nMinor, &nMicro, 0, &bytesNeededBuild, nullptr));
		std::vector<char> bufferBuild(bytesNeededBuild);
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetVersion(m_pHandle, &nMajor, &nMinor, &nMicro, bytesNeededBuild, &bytesWrittenBuild, &bufferBuild[0]));
		sBuild = std::string(&bufferBuild[0]);
	}
	
	/**
	* CDriver::GetHeaderInformation - returns the header information
	* @param[out] sNameSpace - NameSpace of the driver.
	* @param[out] sBaseName - BaseName of the driver.
	*/
	void CDriver::GetHeaderInformation(std::string & sNameSpace, std::string & sBaseName)
	{
		LibMCDriver_UART_uint32 bytesNeededNameSpace = 0;
		LibMCDriver_UART_uint32 bytesWrittenNameSpace = 0;
		LibMCDriver_UART_uint32 bytesNeededBaseName = 0;
		LibMCDriver_UART_uint32 bytesWrittenBaseName = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetHeaderInformation(m_pHandle, 0, &bytesNeededNameSpace, nullptr, 0, &bytesNeededBaseName, nullptr));
		std::vector<char> bufferNameSpace(bytesNeededNameSpace);
		std::vector<char> bufferBaseName(bytesNeededBaseName);
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetHeaderInformation(m_pHandle, bytesNeededNameSpace, &bytesWrittenNameSpace, &bufferNameSpace[0], bytesNeededBaseName, &bytesWrittenBaseName, &bufferBaseName[0]));
		sNameSpace = std::string(&bufferNameSpace[0]);
		sBaseName = std::string(&bufferBaseName[0]);
	}
	
	/**
	* CDriver::QueryParameters - Stores the driver parameters in the driver environment.
	*/
	void CDriver::QueryParameters()
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_QueryParameters(m_pHandle));
	}
	
	/**
	 * Method definitions for class CDriver_UART
	 */
	
	/**
	* CDriver_UART::SetToSimulationMode - Turns the driver into a simulation mode.
	*/
	void CDriver_UART::SetToSimulationMode()
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_UART_SetToSimulationMode(m_pHandle));
	}
	
	/**
	* CDriver_UART::IsSimulationMode - Returns if the driver is in simulation mode.
	* @return Flag if driver is in simulation mode.
	*/
	bool CDriver_UART::IsSimulationMode()
	{
		bool resultSimulationModeEnabled = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_UART_IsSimulationMode(m_pHandle, &resultSimulationModeEnabled));
		
		return resultSimulationModeEnabled;
	}
	
	/**
	* CDriver_UART::SetParity - Sets a parity mode for the next connection.
	* @param[in] eParity - Parity mode.
	*/
	void CDriver_UART::SetParity(const eUARTParity eParity)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_UART_SetParity(m_pHandle, eParity));
	}
	
	/**
	* CDriver_UART::GetParity - Returns parity mode of the next connection.
	* @return Parity mode.
	*/
	eUARTParity CDriver_UART::GetParity()
	{
		eUARTParity resultParity = (eUARTParity) 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_UART_GetParity(m_pHandle, &resultParity));
		
		return resultParity;
	}
	
	/**
	* CDriver_UART::SetStopBits - Sets the stop bits for the next connection.
	* @param[in] eStopBits - Stop bits
	*/
	void CDriver_UART::SetStopBits(const eUARTStopBits eStopBits)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_UART_SetStopBits(m_pHandle, eStopBits));
	}
	
	/**
	* CDriver_UART::GetStopBits - Returns the stop bits of the next connection.
	* @return Stop bits
	*/
	eUARTStopBits CDriver_UART::GetStopBits()
	{
		eUARTStopBits resultStopBits = (eUARTStopBits) 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_UART_GetStopBits(m_pHandle, &resultStopBits));
		
		return resultStopBits;
	}
	
	/**
	* CDriver_UART::SetByteSize - Sets the bytesize for the next connection.
	* @param[in] eByteSize - Stop bits
	*/
	void CDriver_UART::SetByteSize(const eUARTByteSize eByteSize)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_UART_SetByteSize(m_pHandle, eByteSize));
	}
	
	/**
	* CDriver_UART::GetByteSize - Returns the bytesize of the next connection.
	* @return Stop bits
	*/
	eUARTByteSize CDriver_UART::GetByteSize()
	{
		eUARTByteSize resultByteSize = (eUARTByteSize) 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_UART_GetByteSize(m_pHandle, &resultByteSize));
		
		return resultByteSize;
	}
	
	/**
	* CDriver_UART::SetFlowControl - Sets the flow control for the next connection.
	* @param[in] eFlowControl - Flow control
	*/
	void CDriver_UART::SetFlowControl(const eUARTFlowControl eFlowControl)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_UART_SetFlowControl(m_pHandle, eFlowControl));
	}
	
	/**
	* CDriver_UART::GetFlowControl - Returns the flow control of the next connection.
	* @return Flow control
	*/
	eUARTFlowControl CDriver_UART::GetFlowControl()
	{
		eUARTFlowControl resultFlowControl = (eUARTFlowControl) 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_UART_GetFlowControl(m_pHandle, &resultFlowControl));
		
		return resultFlowControl;
	}
	
	/**
	* CDriver_UART::Connect - Connects to a UART device.
	* @param[in] sDeviceAddress - Device Address of COM Port.
	* @param[in] nBaudRate - BaudRate in baud.
	* @param[in] nTimeout - Timeout in milliseconds.
	*/
	void CDriver_UART::Connect(const std::string & sDeviceAddress, const LibMCDriver_UART_uint32 nBaudRate, const LibMCDriver_UART_uint32 nTimeout)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_UART_Connect(m_pHandle, sDeviceAddress.c_str(), nBaudRate, nTimeout));
	}
	
	/**
	* CDriver_UART::Disconnect - Disconnects from device
	*/
	void CDriver_UART::Disconnect()
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_UART_Disconnect(m_pHandle));
	}
	
	/**
	* CDriver_UART::IsConnected - Returns if the driver is connected.
	* @return .
	*/
	bool CDriver_UART::IsConnected()
	{
		bool resultIsConnected = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_UART_IsConnected(m_pHandle, &resultIsConnected));
		
		return resultIsConnected;
	}
	
	/**
	* CDriver_UART::SendString - Sends a string over UART.
	* @param[in] sStringToSend - String to send
	* @param[in] nTimeout - Timeout in milliseconds.
	*/
	void CDriver_UART::SendString(const std::string & sStringToSend, const LibMCDriver_UART_uint32 nTimeout)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_UART_SendString(m_pHandle, sStringToSend.c_str(), nTimeout));
	}
	
	/**
	* CDriver_UART::ReceiveString - Waits for a received string.
	* @param[in] nTimeout - Timeout in milliseconds.
	* @param[in] sReceiveStringTermination - Termination String for retrieval ending before timeout.
	* @return Received string. Maximum string length is 64kB.
	*/
	std::string CDriver_UART::ReceiveString(const LibMCDriver_UART_uint32 nTimeout, const std::string & sReceiveStringTermination)
	{
		LibMCDriver_UART_uint32 bytesNeededReceivedString = 0;
		LibMCDriver_UART_uint32 bytesWrittenReceivedString = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_UART_ReceiveString(m_pHandle, nTimeout, sReceiveStringTermination.c_str(), 0, &bytesNeededReceivedString, nullptr));
		std::vector<char> bufferReceivedString(bytesNeededReceivedString);
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_UART_ReceiveString(m_pHandle, nTimeout, sReceiveStringTermination.c_str(), bytesNeededReceivedString, &bytesWrittenReceivedString, &bufferReceivedString[0]));
		
		return std::string(&bufferReceivedString[0]);
	}
	
	/**
	* CDriver_UART::SendAndReceiveString - Sends a string over UART and waits for a returning string.
	* @param[in] sStringToSend - String to send
	* @param[in] sReceiveStringTermination - Termination String for retrieval ending before timeout.
	* @param[in] nTimeout - Timeout in milliseconds.
	* @return Received string. Maximum string length is 64kB.
	*/
	std::string CDriver_UART::SendAndReceiveString(const std::string & sStringToSend, const std::string & sReceiveStringTermination, const LibMCDriver_UART_uint32 nTimeout)
	{
		LibMCDriver_UART_uint32 bytesNeededReceivedString = 0;
		LibMCDriver_UART_uint32 bytesWrittenReceivedString = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_UART_SendAndReceiveString(m_pHandle, sStringToSend.c_str(), sReceiveStringTermination.c_str(), nTimeout, 0, &bytesNeededReceivedString, nullptr));
		std::vector<char> bufferReceivedString(bytesNeededReceivedString);
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_UART_SendAndReceiveString(m_pHandle, sStringToSend.c_str(), sReceiveStringTermination.c_str(), nTimeout, bytesNeededReceivedString, &bytesWrittenReceivedString, &bufferReceivedString[0]));
		
		return std::string(&bufferReceivedString[0]);
	}

} // namespace LibMCDriver_UART

#endif // __LIBMCDRIVER_UART_CPPHEADER_DYNAMIC_CPP

