<?xml version="1.0" encoding="UTF-8"?>
<component xmlns="http://schemas.autodesk.com/netfabb/automaticcomponenttoolkit/2018" 
	libraryname="Generic UART Driver" namespace="LibMCDriver_UART" copyright="Autodesk Inc." year="2022" basename="libmcdriver_uart"
	version="1.0.0">
	<license>
		<line value="All rights reserved." />
		<line value="" />
		<line value="Redistribution and use in source and binary forms, with or without" />
		<line value="modification, are permitted provided that the following conditions are met:" />
		<line value="    * Redistributions of source code must retain the above copyright" />
		<line value="      notice, this list of conditions and the following disclaimer." />
		<line value="    * Redistributions in binary form must reproduce the above copyright" />
		<line value="      notice, this list of conditions and the following disclaimer in the" />
		<line value="      documentation and/or other materials provided with the distribution." />
		<line value="    * Neither the name of the Autodesk Inc. nor the" />
		<line value="      names of its contributors may be used to endorse or promote products" />
		<line value="      derived from this software without specific prior written permission." />
		<line value="" />
		<line value="THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND" />
		<line value="ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED" />
		<line value="WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE" />
		<line value="DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY" />
		<line value="DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES" />
		<line value="(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;" />
		<line value="LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND" />
		<line value="ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT" />
		<line value="(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS" />
		<line value="SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." />
		<line value="" />
	</license>
	
	<bindings>
		<binding language="CppDynamic" indentation="tabs" documentation="1" />
	</bindings>
	<implementations>
		<implementation language="Cpp" indentation="tabs"/>
	</implementations>
	
	
	<importcomponent uri="../../../ACT/LibMCEnv.xml" namespace="LibMCEnv"/>
	
	<errors>
		<error name="NOTIMPLEMENTED" code="1" description="functionality not implemented" />
		<error name="INVALIDPARAM" code="2" description="an invalid parameter was passed" />
		<error name="INVALIDCAST" code="3" description="a type cast failed" />
		<error name="BUFFERTOOSMALL" code="4" description="a provided buffer is too small" />
		<error name="GENERICEXCEPTION" code="5" description="a generic exception occurred" />
		<error name="COULDNOTLOADLIBRARY" code="6" description="the library could not be loaded" />
		<error name="COULDNOTFINDLIBRARYEXPORT" code="7" description="a required exported symbol could not be found in the library" />
		<error name="INCOMPATIBLEBINARYVERSION" code="8" description="the version of the binary interface does not match the bindings interface" />
		<error name="INVALIDSTATENAME" code="9" description="invalid state name" />

		<error name="DRIVERERROR" code="1000" description="a driver error occured" />
		<error name="DRIVERNOTINITIALISED" code="1001" description="the driver is not initialised" />
		<error name="DRIVERNOTCONNECTED" code="1002" description="the driver is not connected" />		
		<error name="COULDNOTCONNECT" code="1003" description="the driver is not connected" />		

		<error name="INVALIDBYTESIZE" code="1004" description="invalid byte size" />		
		<error name="INVALIDPARITY" code="1005" description="invalid parity" />		
		<error name="INVALIDFLOWCONTROL" code="1006" description="invalid flow control" />		
		<error name="INVALIDSTOPBITS" code="1007" description="invalid stop bits" />		
		
	</errors>

	
<!--

This base Driver interface MUST be in Sync with LibMCDriver.xml

-->
	
	<class name="Base">
	</class>

	
	<class name="Driver" parent="Base" description="An abstract Machine Control Driver">

		<method name="Configure" description = "Configures a driver with its specific configuration data.">
			<param name="ConfigurationString" type="string" pass="in" description="Configuration data of driver." />
		</method>
	
		<method name="GetName" description = "returns the name identifier of the driver">
			<param name="Name" type="string" pass="return" description="Name of the driver." />
		</method>

		<method name="GetType" description = "returns the type identifier of the driver">
			<param name="Type" type="string" pass="return" description="Type of the driver." />
		</method>

		<method name="GetVersion" description = "returns the version identifiers of the driver">
			<param name="Major" type="uint32" pass="out" description="Major version." />
			<param name="Minor" type="uint32" pass="out" description="Minor version." />
			<param name="Micro" type="uint32" pass="out" description="Micro version." />
			<param name="Build" type="string" pass="out" description="Build identifier." />
		</method>

		<method name="GetHeaderInformation" description = "returns the header information">
			<param name="NameSpace" type="string" pass="out" description="NameSpace of the driver." />
			<param name="BaseName" type="string" pass="out" description="BaseName of the driver." />
		</method>
		
		<method name="QueryParameters" description = "Stores the driver parameters in the driver environment.">			
		</method>
	
	</class>

<!--

End Interface

-->


<!--

Custom implementation

-->

	<enum name="UARTParity">
		<option name="None" value="0"/>
		<option name="Odd" value="1"/>
		<option name="Even" value="2"/>
		<option name="Mark" value="3"/>
		<option name="Space" value="4"/>
	</enum>	

	<enum name="UARTStopBits">
		<option name="OneStopBit" value="1"/>
		<option name="TwoStopBits" value="2"/>
		<option name="OnePointFiveStopBits" value="3"/>
	</enum>	

	<enum name="UARTByteSize">
		<option name="FiveBits" value="5"/>
		<option name="SixBits" value="6"/>
		<option name="SevenBits" value="7"/>
		<option name="EightBits" value="8"/>
	</enum>	

	<enum name="UARTFlowControl">
		<option name="NoFlowControl" value="0"/>
		<option name="Software" value="1"/>
		<option name="Hardware" value="2"/>
	</enum>	

	<class name="Driver_UART" parent="Driver" description="A generic UART Driver.">

		<method name="SetToSimulationMode" description="Turns the driver into a simulation mode.">
		</method>
		
		<method name="IsSimulationMode" description="Returns if the driver is in simulation mode.">		
			<param name="SimulationModeEnabled" type="bool" pass="return" description="Flag if driver is in simulation mode." />
		</method>	
		
		
		<method name="SetParity" description="Sets a parity mode for the next connection.">
			<param name="Parity" type="enum" class="UARTParity" pass="in" description="Parity mode." />		
		</method>

		<method name="GetParity" description="Returns parity mode of the next connection.">
			<param name="Parity" type="enum" class="UARTParity" pass="return" description="Parity mode." />		
		</method>

		<method name="SetStopBits" description="Sets the stop bits for the next connection.">
			<param name="StopBits" type="enum" class="UARTStopBits" pass="in" description="Stop bits" />		
		</method>

		<method name="GetStopBits" description="Returns the stop bits of the next connection.">
			<param name="StopBits" type="enum" class="UARTStopBits" pass="return" description="Stop bits" />		
		</method>

		<method name="SetByteSize" description="Sets the bytesize for the next connection.">
			<param name="ByteSize" type="enum" class="UARTByteSize" pass="in" description="Stop bits" />		
		</method>

		<method name="GetByteSize" description="Returns the bytesize of the next connection.">
			<param name="ByteSize" type="enum" class="UARTByteSize" pass="return" description="Stop bits" />		
		</method>
		
		<method name="SetFlowControl" description="Sets the flow control for the next connection.">
			<param name="FlowControl" type="enum" class="UARTFlowControl" pass="in" description="Flow control" />		
		</method>

		<method name="GetFlowControl" description="Returns the flow control of the next connection.">
			<param name="FlowControl" type="enum" class="UARTFlowControl" pass="return" description="Flow control" />		
		</method>
		

		<method name="Connect" description= "Connects to a UART device.">
			<param name="DeviceAddress" type="string" pass="in" description="Device Address of COM Port." />
			<param name="BaudRate" type="uint32" pass="in" description="BaudRate in baud." />				
			<param name="Timeout" type="uint32" pass="in" description="Timeout in milliseconds." />				
		</method>


		<method name="Disconnect" description= "Disconnects from device">
		</method>
		
		<method name="IsConnected" description="Returns if the driver is connected.">		
			<param name="IsConnected" type="bool" pass="return" description="." />
		</method>	

		<method name="SendString" description= "Sends a string over UART.">
			<param name="StringToSend" type="string" pass="in" description="String to send" />
			<param name="Timeout" type="uint32" pass="in" description="Timeout in milliseconds." />				
		</method>		

		<method name="ReceiveString" description= "Waits for a received string.">
			<param name="Timeout" type="uint32" pass="in" description="Timeout in milliseconds." />				
			<param name="ReceiveStringTermination" type="string" pass="in" description="Termination String for retrieval ending before timeout." />
			<param name="ReceivedString" type="string" pass="return" description="Received string. Maximum string length is 64kB." />
		</method>	

		<method name="SendAndReceiveString" description= "Sends a string over UART and waits for a returning string.">
			<param name="StringToSend" type="string" pass="in" description="String to send" />
			<param name="ReceiveStringTermination" type="string" pass="in" description="Termination String for retrieval ending before timeout." />
			<param name="Timeout" type="uint32" pass="in" description="Timeout in milliseconds." />				
			<param name="ReceivedString" type="string" pass="return" description="Received string. Maximum string length is 64kB." />
		</method>		

	

	</class>




<!--

End of Custom implementation

-->

		
	<global baseclassname="Base" stringoutclassname="Base" releasemethod="ReleaseInstance" acquiremethod="AcquireInstance" versionmethod="GetVersion" errormethod="GetLastError" injectionmethod="InjectComponent" symbollookupmethod="GetSymbolLookupMethod">
		
		<method name="GetVersion" description = "retrieves the binary version of this library.">
			<param name="Major" type="uint32" pass="out" description="returns the major version of this library" />
			<param name="Minor" type="uint32" pass="out" description="returns the minor version of this library" />
			<param name="Micro" type="uint32" pass="out" description="returns the micro version of this library" />
		</method>
		<method name="GetLastError" description="Returns the last error recorded on this object">
			<param name="Instance" type="class" class="Base" pass="in" description="Instance Handle" />
			<param name="ErrorMessage" type="string" pass="out" description="Message of the last error" />
			<param name="HasError" type="bool" pass="return" description="Is there a last error to query" />
		</method>
		<method name="ReleaseInstance" description="Releases shared ownership of an Instance">
			<param name="Instance" type="class" class="Base" pass="in" description="Instance Handle" />
		</method>
		<method name="AcquireInstance" description="Acquires shared ownership of an Instance">
			<param name="Instance" type="class" class="Base" pass="in" description="Instance Handle" />
		</method>
		<method name="InjectComponent" description="Injects an imported component for usage within this component">
			<param name="NameSpace" type="string" pass="in" description="NameSpace of the injected component" />
			<param name="SymbolAddressMethod" type="pointer" pass="in" description="Address of the SymbolAddressMethod of the injected component" />
		</method>		
		<method name="GetSymbolLookupMethod" description="Returns the address of the SymbolLookupMethod">
			<param name="SymbolLookupMethod" type="pointer" pass="return" description="Address of the SymbolAddressMethod" />
		</method>				
		<method name="CreateDriver" description="Creates a driver instance with a specific name.">
			<param name="Name" type="string" pass="in" description="Name of driver to be created." />
			<param name="Type" type="string" pass="in" description="Type of driver to be created." />
			<param name="DriverEnvironment" type="class" class="LibMCEnv:DriverEnvironment" pass="in" description="Environment of this driver." />
			<param name="Instance" type="class" class="Driver" pass="return" description="New Driver instance" />
		</method>
		
	</global>
	
	
</component>


