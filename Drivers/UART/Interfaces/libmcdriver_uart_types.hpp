/*++

Copyright (C) 2022 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.7.0-develop.

Abstract: This is an autogenerated C++-Header file with basic types in
order to allow an easy use of Generic UART Driver

Interface version: 1.0.0

*/

#ifndef __LIBMCDRIVER_UART_TYPES_HEADER_CPP
#define __LIBMCDRIVER_UART_TYPES_HEADER_CPP


/*************************************************************************************************************************
 Scalar types definition
**************************************************************************************************************************/

#ifdef LIBMCDRIVER_UART_USELEGACYINTEGERTYPES

typedef unsigned char LibMCDriver_UART_uint8;
typedef unsigned short LibMCDriver_UART_uint16 ;
typedef unsigned int LibMCDriver_UART_uint32;
typedef unsigned long long LibMCDriver_UART_uint64;
typedef char LibMCDriver_UART_int8;
typedef short LibMCDriver_UART_int16;
typedef int LibMCDriver_UART_int32;
typedef long long LibMCDriver_UART_int64;

#else // LIBMCDRIVER_UART_USELEGACYINTEGERTYPES

#include <stdint.h>

typedef uint8_t LibMCDriver_UART_uint8;
typedef uint16_t LibMCDriver_UART_uint16;
typedef uint32_t LibMCDriver_UART_uint32;
typedef uint64_t LibMCDriver_UART_uint64;
typedef int8_t LibMCDriver_UART_int8;
typedef int16_t LibMCDriver_UART_int16;
typedef int32_t LibMCDriver_UART_int32;
typedef int64_t LibMCDriver_UART_int64 ;

#endif // LIBMCDRIVER_UART_USELEGACYINTEGERTYPES

typedef float LibMCDriver_UART_single;
typedef double LibMCDriver_UART_double;

/*************************************************************************************************************************
 General type definitions
**************************************************************************************************************************/

typedef LibMCDriver_UART_int32 LibMCDriver_UARTResult;
typedef void * LibMCDriver_UARTHandle;
typedef void * LibMCDriver_UART_pvoid;

/*************************************************************************************************************************
 Version for LibMCDriver_UART
**************************************************************************************************************************/

#define LIBMCDRIVER_UART_VERSION_MAJOR 1
#define LIBMCDRIVER_UART_VERSION_MINOR 0
#define LIBMCDRIVER_UART_VERSION_MICRO 0
#define LIBMCDRIVER_UART_VERSION_PRERELEASEINFO ""
#define LIBMCDRIVER_UART_VERSION_BUILDINFO ""

/*************************************************************************************************************************
 Error constants for LibMCDriver_UART
**************************************************************************************************************************/

#define LIBMCDRIVER_UART_SUCCESS 0
#define LIBMCDRIVER_UART_ERROR_NOTIMPLEMENTED 1
#define LIBMCDRIVER_UART_ERROR_INVALIDPARAM 2
#define LIBMCDRIVER_UART_ERROR_INVALIDCAST 3
#define LIBMCDRIVER_UART_ERROR_BUFFERTOOSMALL 4
#define LIBMCDRIVER_UART_ERROR_GENERICEXCEPTION 5
#define LIBMCDRIVER_UART_ERROR_COULDNOTLOADLIBRARY 6
#define LIBMCDRIVER_UART_ERROR_COULDNOTFINDLIBRARYEXPORT 7
#define LIBMCDRIVER_UART_ERROR_INCOMPATIBLEBINARYVERSION 8
#define LIBMCDRIVER_UART_ERROR_INVALIDSTATENAME 9
#define LIBMCDRIVER_UART_ERROR_DRIVERERROR 1000
#define LIBMCDRIVER_UART_ERROR_DRIVERNOTINITIALISED 1001
#define LIBMCDRIVER_UART_ERROR_DRIVERNOTCONNECTED 1002

/*************************************************************************************************************************
 Error strings for LibMCDriver_UART
**************************************************************************************************************************/

inline const char * LIBMCDRIVER_UART_GETERRORSTRING (LibMCDriver_UARTResult nErrorCode) {
  switch (nErrorCode) {
    case LIBMCDRIVER_UART_SUCCESS: return "no error";
    case LIBMCDRIVER_UART_ERROR_NOTIMPLEMENTED: return "functionality not implemented";
    case LIBMCDRIVER_UART_ERROR_INVALIDPARAM: return "an invalid parameter was passed";
    case LIBMCDRIVER_UART_ERROR_INVALIDCAST: return "a type cast failed";
    case LIBMCDRIVER_UART_ERROR_BUFFERTOOSMALL: return "a provided buffer is too small";
    case LIBMCDRIVER_UART_ERROR_GENERICEXCEPTION: return "a generic exception occurred";
    case LIBMCDRIVER_UART_ERROR_COULDNOTLOADLIBRARY: return "the library could not be loaded";
    case LIBMCDRIVER_UART_ERROR_COULDNOTFINDLIBRARYEXPORT: return "a required exported symbol could not be found in the library";
    case LIBMCDRIVER_UART_ERROR_INCOMPATIBLEBINARYVERSION: return "the version of the binary interface does not match the bindings interface";
    case LIBMCDRIVER_UART_ERROR_INVALIDSTATENAME: return "invalid state name";
    case LIBMCDRIVER_UART_ERROR_DRIVERERROR: return "a driver error occured";
    case LIBMCDRIVER_UART_ERROR_DRIVERNOTINITIALISED: return "the driver is not initialised";
    case LIBMCDRIVER_UART_ERROR_DRIVERNOTCONNECTED: return "the driver is not connected";
    default: return "unknown error";
  }
}

/*************************************************************************************************************************
 Declaration of handle classes 
**************************************************************************************************************************/

typedef LibMCDriver_UARTHandle LibMCDriver_UART_Base;
typedef LibMCDriver_UARTHandle LibMCDriver_UART_Driver;
typedef LibMCDriver_UARTHandle LibMCDriver_UART_Driver_UART;

namespace LibMCDriver_UART {

} // namespace LibMCDriver_UART;

// define legacy C-names for enums, structs and function types

#endif // __LIBMCDRIVER_UART_TYPES_HEADER_CPP
