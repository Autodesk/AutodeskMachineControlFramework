/*++

Copyright (C) 2023 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.8.0-develop.

Abstract: This is an autogenerated C++-Header file with basic types in
order to allow an easy use of MC Driver ScanLab SCANmotionControl

Interface version: 2.0.0

*/

#ifndef __LIBMCDRIVER_SCANLABSMC_TYPES_HEADER_CPP
#define __LIBMCDRIVER_SCANLABSMC_TYPES_HEADER_CPP


/*************************************************************************************************************************
 Scalar types definition
**************************************************************************************************************************/

#ifdef LIBMCDRIVER_SCANLABSMC_USELEGACYINTEGERTYPES

typedef unsigned char LibMCDriver_ScanLabSMC_uint8;
typedef unsigned short LibMCDriver_ScanLabSMC_uint16 ;
typedef unsigned int LibMCDriver_ScanLabSMC_uint32;
typedef unsigned long long LibMCDriver_ScanLabSMC_uint64;
typedef char LibMCDriver_ScanLabSMC_int8;
typedef short LibMCDriver_ScanLabSMC_int16;
typedef int LibMCDriver_ScanLabSMC_int32;
typedef long long LibMCDriver_ScanLabSMC_int64;

#else // LIBMCDRIVER_SCANLABSMC_USELEGACYINTEGERTYPES

#include <stdint.h>

typedef uint8_t LibMCDriver_ScanLabSMC_uint8;
typedef uint16_t LibMCDriver_ScanLabSMC_uint16;
typedef uint32_t LibMCDriver_ScanLabSMC_uint32;
typedef uint64_t LibMCDriver_ScanLabSMC_uint64;
typedef int8_t LibMCDriver_ScanLabSMC_int8;
typedef int16_t LibMCDriver_ScanLabSMC_int16;
typedef int32_t LibMCDriver_ScanLabSMC_int32;
typedef int64_t LibMCDriver_ScanLabSMC_int64 ;

#endif // LIBMCDRIVER_SCANLABSMC_USELEGACYINTEGERTYPES

typedef float LibMCDriver_ScanLabSMC_single;
typedef double LibMCDriver_ScanLabSMC_double;

/*************************************************************************************************************************
 General type definitions
**************************************************************************************************************************/

typedef LibMCDriver_ScanLabSMC_int32 LibMCDriver_ScanLabSMCResult;
typedef void * LibMCDriver_ScanLabSMCHandle;
typedef void * LibMCDriver_ScanLabSMC_pvoid;

/*************************************************************************************************************************
 Version for LibMCDriver_ScanLabSMC
**************************************************************************************************************************/

#define LIBMCDRIVER_SCANLABSMC_VERSION_MAJOR 2
#define LIBMCDRIVER_SCANLABSMC_VERSION_MINOR 0
#define LIBMCDRIVER_SCANLABSMC_VERSION_MICRO 0
#define LIBMCDRIVER_SCANLABSMC_VERSION_PRERELEASEINFO ""
#define LIBMCDRIVER_SCANLABSMC_VERSION_BUILDINFO ""

/*************************************************************************************************************************
 Error constants for LibMCDriver_ScanLabSMC
**************************************************************************************************************************/

#define LIBMCDRIVER_SCANLABSMC_SUCCESS 0
#define LIBMCDRIVER_SCANLABSMC_ERROR_NOTIMPLEMENTED 1 /** functionality not implemented */
#define LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDPARAM 2 /** an invalid parameter was passed */
#define LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDCAST 3 /** a type cast failed */
#define LIBMCDRIVER_SCANLABSMC_ERROR_BUFFERTOOSMALL 4 /** a provided buffer is too small */
#define LIBMCDRIVER_SCANLABSMC_ERROR_GENERICEXCEPTION 5 /** a generic exception occurred */
#define LIBMCDRIVER_SCANLABSMC_ERROR_COULDNOTLOADLIBRARY 6 /** the library could not be loaded */
#define LIBMCDRIVER_SCANLABSMC_ERROR_COULDNOTFINDLIBRARYEXPORT 7 /** a required exported symbol could not be found in the library */
#define LIBMCDRIVER_SCANLABSMC_ERROR_INCOMPATIBLEBINARYVERSION 8 /** the version of the binary interface does not match the bindings interface */
#define LIBMCDRIVER_SCANLABSMC_ERROR_EMPTYCONFIGURATIONXML 9 /** empty configuration XML */
#define LIBMCDRIVER_SCANLABSMC_ERROR_DRIVERERROR 1000 /** a driver error occured */
#define LIBMCDRIVER_SCANLABSMC_ERROR_UNSUPPORTEDPLATFORM 1001 /** Unsupported platform. SMC only works on Windows only for now. */
#define LIBMCDRIVER_SCANLABSMC_ERROR_SDKALREADYLOADED 1002 /** SDK has already been loaded. */
#define LIBMCDRIVER_SCANLABSMC_ERROR_EMPTYSMCDLLRESOURCENAME 1003 /** Empty SMC DLL Resource Name. */
#define LIBMCDRIVER_SCANLABSMC_ERROR_EMPTYRTCDLLRESOURCENAME 1004 /** Empty RTC DLL Resource Name. */
#define LIBMCDRIVER_SCANLABSMC_ERROR_SMCSDKRESOURCENOTFOUND 1005 /** SMC SDK Resource not found. */
#define LIBMCDRIVER_SCANLABSMC_ERROR_COULDNOTSTORESMCSDK 1006 /** Could not store SMC SDK. */
#define LIBMCDRIVER_SCANLABSMC_ERROR_RTCSDKRESOURCENOTFOUND 1007 /** RTC SDK Resource not found. */
#define LIBMCDRIVER_SCANLABSMC_ERROR_COULDNOTSTORERTCSDK 1008 /** Could not store RTC SDK. */
#define LIBMCDRIVER_SCANLABSMC_ERROR_EMPTYSMCDLLRESOURCEDATA 1009 /** Empty SMC DLL Resource Data. */
#define LIBMCDRIVER_SCANLABSMC_ERROR_EMPTYRTCDLLRESOURCEDATA 1010 /** Empty RTC DLL Resource Data. */
#define LIBMCDRIVER_SCANLABSMC_ERROR_EMPTYXERCESDLLRESOURCENAME 1011 /** Empty Xerces Resource Name. */
#define LIBMCDRIVER_SCANLABSMC_ERROR_XERCESRESOURCENOTFOUND 1012 /** Xerces Resource not found. */
#define LIBMCDRIVER_SCANLABSMC_ERROR_COULDNOTSTOREXERCESDLL 1013 /** Could not store Xerces DLL. */
#define LIBMCDRIVER_SCANLABSMC_ERROR_EMPTYXERCESRESOURCEDATA 1014 /** Empty Xerces Resource Data. */
#define LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDCONTEXTNAME 1015 /** Invalid context name. */
#define LIBMCDRIVER_SCANLABSMC_ERROR_CONTEXTEXISTSALREADY 1016 /** Context exists already. */
#define LIBMCDRIVER_SCANLABSMC_ERROR_CONTEXTNOTFOUND 1017 /** Context not found. */
#define LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDRTCSERIALNUMBER 1018 /** Invalid RTC Serial Number. */
#define LIBMCDRIVER_SCANLABSMC_ERROR_EMPTYRTCCORRECTIONRESOURCENAME 1019 /** Empty RTC correction resource. */
#define LIBMCDRIVER_SCANLABSMC_ERROR_RTCCORRECTIONRESOURCENOTFOUND 1020 /** RTC correction resource not found. */
#define LIBMCDRIVER_SCANLABSMC_ERROR_EMPTYRTCCORRECTIONFILE 1021 /** Empty RTC Correction File. */
#define LIBMCDRIVER_SCANLABSMC_ERROR_EMPTYIPADDRESS 1022 /** Empty IP Address. */
#define LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDIPADDRESS 1023 /** Invalid IP Address. */
#define LIBMCDRIVER_SCANLABSMC_ERROR_EMPTYRTCFIRMWARERESOURCENAME 1024 /** Empty RTC firmware resource name. */
#define LIBMCDRIVER_SCANLABSMC_ERROR_RTCFIRMWARERESOURCENOTFOUND 1025 /** RTC firmware resource not found. */
#define LIBMCDRIVER_SCANLABSMC_ERROR_EMPTYRTCFPGARESOURCENAME 1026 /** Empty RTC FPGA resource name. */
#define LIBMCDRIVER_SCANLABSMC_ERROR_RTCFPGARESOURCENOTFOUND 1027 /** RTC FPGA resource not found. */
#define LIBMCDRIVER_SCANLABSMC_ERROR_EMPTYRTCAUXILIARYRESOURCENAME 1028 /** Empty RTC auxiliary resource name */
#define LIBMCDRIVER_SCANLABSMC_ERROR_RTCAUXILIARYRESOURCENOTFOUND 1029 /** RTC auxiliary resource not found. */
#define LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDPOINTCOUNT 1030 /** Invalid point count. */
#define LIBMCDRIVER_SCANLABSMC_ERROR_EMPTYCONFIGURATIONRESOURCENAME 1031 /** Empty configuration resource name. */
#define LIBMCDRIVER_SCANLABSMC_ERROR_CONFIGURATIONRESOURCENOTFOUND 1032 /** Configuration resource not found. */
#define LIBMCDRIVER_SCANLABSMC_ERROR_COULDNOTOOPENSIMULATIONFILE 1033 /** Could not open simulation file. */
#define LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDSIMULATIONFILENAME 1034 /** Invalid simulation file name. */
#define LIBMCDRIVER_SCANLABSMC_ERROR_UNSUPPORTEDSMCVERSION 1035 /** Unsupported SMC Version. */
#define LIBMCDRIVER_SCANLABSMC_ERROR_SMCTEMPLATEVERSIONMISMATCH 1036 /** SMC Template version mismatch. */
#define LIBMCDRIVER_SCANLABSMC_ERROR_UNKNOWNSMCMAJORVERSION 1037 /** Unknown SMC Major Version. */
#define LIBMCDRIVER_SCANLABSMC_ERROR_UNKNOWNSMCMINORVERSION 1038 /** Unknown SMC Minor Version. */
#define LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDJOBCHARACTERISTIC 1039 /** Invalid job characteristic. */
#define LIBMCDRIVER_SCANLABSMC_ERROR_COULDNOTGETJOBCHARACTERISTIC 1040 /** Could not get job characteristic. */

/*************************************************************************************************************************
 Error strings for LibMCDriver_ScanLabSMC
**************************************************************************************************************************/

inline const char * LIBMCDRIVER_SCANLABSMC_GETERRORSTRING (LibMCDriver_ScanLabSMCResult nErrorCode) {
  switch (nErrorCode) {
    case LIBMCDRIVER_SCANLABSMC_SUCCESS: return "no error";
    case LIBMCDRIVER_SCANLABSMC_ERROR_NOTIMPLEMENTED: return "functionality not implemented";
    case LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDPARAM: return "an invalid parameter was passed";
    case LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDCAST: return "a type cast failed";
    case LIBMCDRIVER_SCANLABSMC_ERROR_BUFFERTOOSMALL: return "a provided buffer is too small";
    case LIBMCDRIVER_SCANLABSMC_ERROR_GENERICEXCEPTION: return "a generic exception occurred";
    case LIBMCDRIVER_SCANLABSMC_ERROR_COULDNOTLOADLIBRARY: return "the library could not be loaded";
    case LIBMCDRIVER_SCANLABSMC_ERROR_COULDNOTFINDLIBRARYEXPORT: return "a required exported symbol could not be found in the library";
    case LIBMCDRIVER_SCANLABSMC_ERROR_INCOMPATIBLEBINARYVERSION: return "the version of the binary interface does not match the bindings interface";
    case LIBMCDRIVER_SCANLABSMC_ERROR_EMPTYCONFIGURATIONXML: return "empty configuration XML";
    case LIBMCDRIVER_SCANLABSMC_ERROR_DRIVERERROR: return "a driver error occured";
    case LIBMCDRIVER_SCANLABSMC_ERROR_UNSUPPORTEDPLATFORM: return "Unsupported platform. SMC only works on Windows only for now.";
    case LIBMCDRIVER_SCANLABSMC_ERROR_SDKALREADYLOADED: return "SDK has already been loaded.";
    case LIBMCDRIVER_SCANLABSMC_ERROR_EMPTYSMCDLLRESOURCENAME: return "Empty SMC DLL Resource Name.";
    case LIBMCDRIVER_SCANLABSMC_ERROR_EMPTYRTCDLLRESOURCENAME: return "Empty RTC DLL Resource Name.";
    case LIBMCDRIVER_SCANLABSMC_ERROR_SMCSDKRESOURCENOTFOUND: return "SMC SDK Resource not found.";
    case LIBMCDRIVER_SCANLABSMC_ERROR_COULDNOTSTORESMCSDK: return "Could not store SMC SDK.";
    case LIBMCDRIVER_SCANLABSMC_ERROR_RTCSDKRESOURCENOTFOUND: return "RTC SDK Resource not found.";
    case LIBMCDRIVER_SCANLABSMC_ERROR_COULDNOTSTORERTCSDK: return "Could not store RTC SDK.";
    case LIBMCDRIVER_SCANLABSMC_ERROR_EMPTYSMCDLLRESOURCEDATA: return "Empty SMC DLL Resource Data.";
    case LIBMCDRIVER_SCANLABSMC_ERROR_EMPTYRTCDLLRESOURCEDATA: return "Empty RTC DLL Resource Data.";
    case LIBMCDRIVER_SCANLABSMC_ERROR_EMPTYXERCESDLLRESOURCENAME: return "Empty Xerces Resource Name.";
    case LIBMCDRIVER_SCANLABSMC_ERROR_XERCESRESOURCENOTFOUND: return "Xerces Resource not found.";
    case LIBMCDRIVER_SCANLABSMC_ERROR_COULDNOTSTOREXERCESDLL: return "Could not store Xerces DLL.";
    case LIBMCDRIVER_SCANLABSMC_ERROR_EMPTYXERCESRESOURCEDATA: return "Empty Xerces Resource Data.";
    case LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDCONTEXTNAME: return "Invalid context name.";
    case LIBMCDRIVER_SCANLABSMC_ERROR_CONTEXTEXISTSALREADY: return "Context exists already.";
    case LIBMCDRIVER_SCANLABSMC_ERROR_CONTEXTNOTFOUND: return "Context not found.";
    case LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDRTCSERIALNUMBER: return "Invalid RTC Serial Number.";
    case LIBMCDRIVER_SCANLABSMC_ERROR_EMPTYRTCCORRECTIONRESOURCENAME: return "Empty RTC correction resource.";
    case LIBMCDRIVER_SCANLABSMC_ERROR_RTCCORRECTIONRESOURCENOTFOUND: return "RTC correction resource not found.";
    case LIBMCDRIVER_SCANLABSMC_ERROR_EMPTYRTCCORRECTIONFILE: return "Empty RTC Correction File.";
    case LIBMCDRIVER_SCANLABSMC_ERROR_EMPTYIPADDRESS: return "Empty IP Address.";
    case LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDIPADDRESS: return "Invalid IP Address.";
    case LIBMCDRIVER_SCANLABSMC_ERROR_EMPTYRTCFIRMWARERESOURCENAME: return "Empty RTC firmware resource name.";
    case LIBMCDRIVER_SCANLABSMC_ERROR_RTCFIRMWARERESOURCENOTFOUND: return "RTC firmware resource not found.";
    case LIBMCDRIVER_SCANLABSMC_ERROR_EMPTYRTCFPGARESOURCENAME: return "Empty RTC FPGA resource name.";
    case LIBMCDRIVER_SCANLABSMC_ERROR_RTCFPGARESOURCENOTFOUND: return "RTC FPGA resource not found.";
    case LIBMCDRIVER_SCANLABSMC_ERROR_EMPTYRTCAUXILIARYRESOURCENAME: return "Empty RTC auxiliary resource name";
    case LIBMCDRIVER_SCANLABSMC_ERROR_RTCAUXILIARYRESOURCENOTFOUND: return "RTC auxiliary resource not found.";
    case LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDPOINTCOUNT: return "Invalid point count.";
    case LIBMCDRIVER_SCANLABSMC_ERROR_EMPTYCONFIGURATIONRESOURCENAME: return "Empty configuration resource name.";
    case LIBMCDRIVER_SCANLABSMC_ERROR_CONFIGURATIONRESOURCENOTFOUND: return "Configuration resource not found.";
    case LIBMCDRIVER_SCANLABSMC_ERROR_COULDNOTOOPENSIMULATIONFILE: return "Could not open simulation file.";
    case LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDSIMULATIONFILENAME: return "Invalid simulation file name.";
    case LIBMCDRIVER_SCANLABSMC_ERROR_UNSUPPORTEDSMCVERSION: return "Unsupported SMC Version.";
    case LIBMCDRIVER_SCANLABSMC_ERROR_SMCTEMPLATEVERSIONMISMATCH: return "SMC Template version mismatch.";
    case LIBMCDRIVER_SCANLABSMC_ERROR_UNKNOWNSMCMAJORVERSION: return "Unknown SMC Major Version.";
    case LIBMCDRIVER_SCANLABSMC_ERROR_UNKNOWNSMCMINORVERSION: return "Unknown SMC Minor Version.";
    case LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDJOBCHARACTERISTIC: return "Invalid job characteristic.";
    case LIBMCDRIVER_SCANLABSMC_ERROR_COULDNOTGETJOBCHARACTERISTIC: return "Could not get job characteristic.";
    default: return "unknown error";
  }
}

/*************************************************************************************************************************
 Declaration of handle classes 
**************************************************************************************************************************/

typedef LibMCDriver_ScanLabSMCHandle LibMCDriver_ScanLabSMC_Base;
typedef LibMCDriver_ScanLabSMCHandle LibMCDriver_ScanLabSMC_Driver;
typedef LibMCDriver_ScanLabSMCHandle LibMCDriver_ScanLabSMC_SMCJob;
typedef LibMCDriver_ScanLabSMCHandle LibMCDriver_ScanLabSMC_SMCConfiguration;
typedef LibMCDriver_ScanLabSMCHandle LibMCDriver_ScanLabSMC_SMCContext;
typedef LibMCDriver_ScanLabSMCHandle LibMCDriver_ScanLabSMC_Driver_ScanLabSMC;

namespace LibMCDriver_ScanLabSMC {

  /*************************************************************************************************************************
   Declaration of enums
  **************************************************************************************************************************/
  
  enum class eBlendMode : LibMCDriver_ScanLabSMC_int32 {
    Deactivated = 0,
    MaxAccuracy = 1,
    Fast = 2
  };
  
  enum class eDynamicViolationReaction : LibMCDriver_ScanLabSMC_int32 {
    Unknown = 0,
    WarningOnly = 1,
    AbortImmediately = 2,
    StopAndReport = 3
  };
  
  enum class eWarnLevel : LibMCDriver_ScanLabSMC_int32 {
    Unknown = 0,
    Error = 1,
    Warn = 2,
    Info = 3
  };
  
  enum class eSMCConfigVersion : LibMCDriver_ScanLabSMC_int32 {
    Unknown = 0,
    Version_0_8 = 8,
    Version_0_9 = 9
  };
  
  enum class eJobCharacteristic : LibMCDriver_ScanLabSMC_int32 {
    Cart_XPos_ScanAxis = 0, /** Max. absolute scan head position in X direction. In mm. */
    Cart_YPos_ScanAxis = 1, /** Max. absolute scan head position in Y direction. In mm. */
    Cart_ZPos_ScanAxis = 2, /** Max. absolute scan head position in Z direction. In mm. */
    Cart_XPos_StageAxis = 10, /** Max. absolute stage position in X direction. In mm. */
    Cart_YPos_StageAxis = 11, /** Max. absolute stage position in Y direction. In mm. */
    Cart_ZPos_StageAxis = 12, /** Max. absolute stage position in Z direction. In mm. */
    Cart_XVel_ScanAxis = 20, /** Max. absolute scan head velocity in X direction. In mm/s. */
    Cart_YVel_ScanAxis = 21, /** Max. absolute scan head velocity in Y direction. In mm/s. */
    Cart_ZVel_ScanAxis = 22, /** Max. absolute scan head velocity in Z direction. In mm/s. */
    Cart_XVel_StageAxis = 30, /** Max. absolute stage velocity in X direction. In mm/s. */
    Cart_YVel_StageAxis = 31, /** Max. absolute stage velocity in Y direction. In mm/s. */
    Cart_ZVel_StageAxis = 32, /** Max. absolute stage velocity in X direction. In mm/s. */
    Cart_XAcc_ScanAxis = 40, /** Max. absolute scan head acceleration in X direction. In mm/s^2. */
    Cart_YAcc_ScanAxis = 41, /** Max. absolute scan head acceleration in Y direction.In mm/s^2. */
    Cart_ZAcc_ScanAxis = 42, /** Max. absolute scan head acceleration in Zdirection.In mm/s^2. */
    Cart_XAcc_StageAxis = 50, /** Max. absolute stage acceleration in X direction. In mm/s^2. */
    Cart_YAcc_StageAxis = 51, /** Max. absolute stage acceleration in Y direction. In mm/s^2. */
    Cart_ZAcc_StageAxis = 52, /** Max. absolute stage acceleration in Z direction. In mm/s^2. */
    Cart_XJerk_StageAxis = 70, /** Max. absolute stage jerk in X direction. In mm/s^3. */
    Cart_YJerk_StageAxis = 71, /** Max. absolute stage jerk in Y direction. In mm/s^3. */
    Cart_ZJerk_StageAxis = 72, /** Max. absolute stage jerk in Z direction. In mm/s^3. */
    Cart_XPos_ScanAxis_LaserOn = 80, /** Max. absolute scan head position in X direction with active laser. In mm. */
    Cart_YPos_ScanAxis_LaserOn = 81, /** Max. absolute scan head position in Y direction with active laser. In mm. */
    Cart_ZPos_ScanAxis_LaserOn = 82, /** Max. absolute scan head position in Z direction with active laser. In mm. */
    Cart_XPos_StageAxis_LaserOn = 90, /** Max. abs. stage position in X direction with active laser. In mm. */
    Cart_YPos_StageAxis_LaserOn = 91, /** Max. abs. stage position in Y direction with active laser. In mm. */
    Cart_ZPos_StageAxis_LaserOn = 92, /** Max. abs. stage position in Z direction with active laser. In mm. */
    Cart_XPos_ScanAxis_Max = 100, /** Max. scan head position in X direction. In mm. */
    Cart_YPos_ScanAxis_Max = 101, /** Max. scan head position in Y direction. In mm. */
    Cart_ZPos_ScanAxis_Max = 102, /** Max. scan head position in Z direction. In mm. */
    Cart_XPos_ScanAxis_Min = 110, /** Min. scan head position in X direction. In mm. */
    Cart_YPos_ScanAxis_Min = 111, /** Min. scan head position in Y direction. In mm. */
    Cart_ZPos_ScanAxis_Min = 112, /** Min. scan head position in Z direction. In mm. */
    Cart_XPos_ScanAxis_LaserOn_Max = 120, /** Max. scan head position in X direction with active laser. In mm. */
    Cart_YPos_ScanAxis_LaserOn_Max = 121, /** Max. scan head position in Y direction with active laser. In mm. */
    Cart_ZPos_ScanAxis_LaserOn_Max = 122, /** Max. scan head position in Z direction with active laser. In mm. */
    Cart_XPos_ScanAxis_LaserOn_Min = 130, /** Min. scan head position in X direction with active laser. In mm. */
    Cart_YPos_ScanAxis_LaserOn_Min = 131, /** Min. scan head position in Y direction with active laser. In mm. */
    Cart_ZPos_ScanAxis_LaserOn_Min = 132, /** Min. scan head position in Z direction with active laser. In mm. */
    Cart_XPos_StageAxis_Max = 140, /** Max. stage position in X direction. In mm. */
    Cart_YPos_StageAxis_Max = 141, /** Max. stage position in Y direction. In mm. */
    Cart_ZPos_StageAxis_Max = 142, /** Max. stage position in Z direction. In mm. */
    Cart_XPos_StageAxis_Min = 150, /** Min. stage position in X direction. In mm. */
    Cart_YPos_StageAxis_Min = 151, /** Min. stage position in Y direction. In mm. */
    Cart_ZPos_StageAxis_Min = 152, /** Min. stage position in Z direction. In mm. */
    Cart_XPos_StageAxis_LaserOn_Max = 160, /** Max. stage position in X direction with active laser. In mm. */
    Cart_YPos_StageAxis_LaserOn_Max = 161, /** Max. stage position in Y direction with active laser. In mm. */
    Cart_ZPos_StageAxis_LaserOn_Max = 162, /** Max. stage position in Z direction with active laser. In mm. */
    Cart_XPos_StageAxis_LaserOn_Min = 170, /** Min. stage position in X direction with active laser. In mm. */
    Cart_YPos_StageAxis_LaserOn_Min = 171, /** Min. stage position in Y direction with active laser. In mm. */
    Cart_ZPos_StageAxis_LaserOn_Min = 172, /** Min. stage position in Z direction with active laser. In mm. */
    InsertedSkywritings = 180, /** Number of transitions in the job where a skywriting had to be inserted. */
    MotionMicroSteps = 181, /** Number of micro vectors that make up the job. */
    MinimalMarkSpeed = 182, /** Minimum velocity reached by the laser spot during the job. */
    MaximalMarkSpeed = 183 /** Maximum velocity reached by the laser spot during the job. */
  };
  
  /*************************************************************************************************************************
   Declaration of structs
  **************************************************************************************************************************/
  
  #pragma pack (1)
  
  typedef struct sPoint2D {
      LibMCDriver_ScanLabSMC_single m_X;
      LibMCDriver_ScanLabSMC_single m_Y;
  } sPoint2D;
  
  typedef struct sHatch2D {
      LibMCDriver_ScanLabSMC_single m_X1;
      LibMCDriver_ScanLabSMC_single m_Y1;
      LibMCDriver_ScanLabSMC_single m_X2;
      LibMCDriver_ScanLabSMC_single m_Y2;
  } sHatch2D;
  
  #pragma pack ()
  
} // namespace LibMCDriver_ScanLabSMC;

// define legacy C-names for enums, structs and function types
typedef LibMCDriver_ScanLabSMC::eBlendMode eLibMCDriver_ScanLabSMCBlendMode;
typedef LibMCDriver_ScanLabSMC::eDynamicViolationReaction eLibMCDriver_ScanLabSMCDynamicViolationReaction;
typedef LibMCDriver_ScanLabSMC::eWarnLevel eLibMCDriver_ScanLabSMCWarnLevel;
typedef LibMCDriver_ScanLabSMC::eSMCConfigVersion eLibMCDriver_ScanLabSMCSMCConfigVersion;
typedef LibMCDriver_ScanLabSMC::eJobCharacteristic eLibMCDriver_ScanLabSMCJobCharacteristic;
typedef LibMCDriver_ScanLabSMC::sPoint2D sLibMCDriver_ScanLabSMCPoint2D;
typedef LibMCDriver_ScanLabSMC::sHatch2D sLibMCDriver_ScanLabSMCHatch2D;

#endif // __LIBMCDRIVER_SCANLABSMC_TYPES_HEADER_CPP
