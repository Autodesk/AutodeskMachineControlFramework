/*++

Copyright (C) 2023 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.8.0-develop.

Abstract: This is an autogenerated C++-Header file with basic types in
order to allow an easy use of MC Driver ScanLab SCANmotionControl

Interface version: 2.0.0

*/

#ifndef __LIBMCDRIVER_SCANLABSMC_TYPES_HEADER_CPP
#define __LIBMCDRIVER_SCANLABSMC_TYPES_HEADER_CPP


/*************************************************************************************************************************
 Scalar types definition
**************************************************************************************************************************/

#ifdef LIBMCDRIVER_SCANLABSMC_USELEGACYINTEGERTYPES

typedef unsigned char LibMCDriver_ScanLabSMC_uint8;
typedef unsigned short LibMCDriver_ScanLabSMC_uint16 ;
typedef unsigned int LibMCDriver_ScanLabSMC_uint32;
typedef unsigned long long LibMCDriver_ScanLabSMC_uint64;
typedef char LibMCDriver_ScanLabSMC_int8;
typedef short LibMCDriver_ScanLabSMC_int16;
typedef int LibMCDriver_ScanLabSMC_int32;
typedef long long LibMCDriver_ScanLabSMC_int64;

#else // LIBMCDRIVER_SCANLABSMC_USELEGACYINTEGERTYPES

#include <stdint.h>

typedef uint8_t LibMCDriver_ScanLabSMC_uint8;
typedef uint16_t LibMCDriver_ScanLabSMC_uint16;
typedef uint32_t LibMCDriver_ScanLabSMC_uint32;
typedef uint64_t LibMCDriver_ScanLabSMC_uint64;
typedef int8_t LibMCDriver_ScanLabSMC_int8;
typedef int16_t LibMCDriver_ScanLabSMC_int16;
typedef int32_t LibMCDriver_ScanLabSMC_int32;
typedef int64_t LibMCDriver_ScanLabSMC_int64 ;

#endif // LIBMCDRIVER_SCANLABSMC_USELEGACYINTEGERTYPES

typedef float LibMCDriver_ScanLabSMC_single;
typedef double LibMCDriver_ScanLabSMC_double;

/*************************************************************************************************************************
 General type definitions
**************************************************************************************************************************/

typedef LibMCDriver_ScanLabSMC_int32 LibMCDriver_ScanLabSMCResult;
typedef void * LibMCDriver_ScanLabSMCHandle;
typedef void * LibMCDriver_ScanLabSMC_pvoid;

/*************************************************************************************************************************
 Version for LibMCDriver_ScanLabSMC
**************************************************************************************************************************/

#define LIBMCDRIVER_SCANLABSMC_VERSION_MAJOR 2
#define LIBMCDRIVER_SCANLABSMC_VERSION_MINOR 0
#define LIBMCDRIVER_SCANLABSMC_VERSION_MICRO 0
#define LIBMCDRIVER_SCANLABSMC_VERSION_PRERELEASEINFO ""
#define LIBMCDRIVER_SCANLABSMC_VERSION_BUILDINFO ""

/*************************************************************************************************************************
 Error constants for LibMCDriver_ScanLabSMC
**************************************************************************************************************************/

#define LIBMCDRIVER_SCANLABSMC_SUCCESS 0
#define LIBMCDRIVER_SCANLABSMC_ERROR_NOTIMPLEMENTED 1 /** functionality not implemented */
#define LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDPARAM 2 /** an invalid parameter was passed */
#define LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDCAST 3 /** a type cast failed */
#define LIBMCDRIVER_SCANLABSMC_ERROR_BUFFERTOOSMALL 4 /** a provided buffer is too small */
#define LIBMCDRIVER_SCANLABSMC_ERROR_GENERICEXCEPTION 5 /** a generic exception occurred */
#define LIBMCDRIVER_SCANLABSMC_ERROR_COULDNOTLOADLIBRARY 6 /** the library could not be loaded */
#define LIBMCDRIVER_SCANLABSMC_ERROR_COULDNOTFINDLIBRARYEXPORT 7 /** a required exported symbol could not be found in the library */
#define LIBMCDRIVER_SCANLABSMC_ERROR_INCOMPATIBLEBINARYVERSION 8 /** the version of the binary interface does not match the bindings interface */
#define LIBMCDRIVER_SCANLABSMC_ERROR_DRIVERERROR 1000 /** a driver error occured */

/*************************************************************************************************************************
 Error strings for LibMCDriver_ScanLabSMC
**************************************************************************************************************************/

inline const char * LIBMCDRIVER_SCANLABSMC_GETERRORSTRING (LibMCDriver_ScanLabSMCResult nErrorCode) {
  switch (nErrorCode) {
    case LIBMCDRIVER_SCANLABSMC_SUCCESS: return "no error";
    case LIBMCDRIVER_SCANLABSMC_ERROR_NOTIMPLEMENTED: return "functionality not implemented";
    case LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDPARAM: return "an invalid parameter was passed";
    case LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDCAST: return "a type cast failed";
    case LIBMCDRIVER_SCANLABSMC_ERROR_BUFFERTOOSMALL: return "a provided buffer is too small";
    case LIBMCDRIVER_SCANLABSMC_ERROR_GENERICEXCEPTION: return "a generic exception occurred";
    case LIBMCDRIVER_SCANLABSMC_ERROR_COULDNOTLOADLIBRARY: return "the library could not be loaded";
    case LIBMCDRIVER_SCANLABSMC_ERROR_COULDNOTFINDLIBRARYEXPORT: return "a required exported symbol could not be found in the library";
    case LIBMCDRIVER_SCANLABSMC_ERROR_INCOMPATIBLEBINARYVERSION: return "the version of the binary interface does not match the bindings interface";
    case LIBMCDRIVER_SCANLABSMC_ERROR_DRIVERERROR: return "a driver error occured";
    default: return "unknown error";
  }
}

/*************************************************************************************************************************
 Declaration of handle classes 
**************************************************************************************************************************/

typedef LibMCDriver_ScanLabSMCHandle LibMCDriver_ScanLabSMC_Base;
typedef LibMCDriver_ScanLabSMCHandle LibMCDriver_ScanLabSMC_Driver;
typedef LibMCDriver_ScanLabSMCHandle LibMCDriver_ScanLabSMC_SMCJob;
typedef LibMCDriver_ScanLabSMCHandle LibMCDriver_ScanLabSMC_SMCContext;

namespace LibMCDriver_ScanLabSMC {

  /*************************************************************************************************************************
   Declaration of enums
  **************************************************************************************************************************/
  
  enum class eBlendMode : LibMCDriver_ScanLabSMC_int32 {
    Deactivated = 0,
    MaxAccuracy = 1,
    Fast = 2
  };
  
  /*************************************************************************************************************************
   Declaration of structs
  **************************************************************************************************************************/
  
  #pragma pack (1)
  
  typedef struct sPoint2D {
      LibMCDriver_ScanLabSMC_single m_X;
      LibMCDriver_ScanLabSMC_single m_Y;
  } sPoint2D;
  
  typedef struct sHatch2D {
      LibMCDriver_ScanLabSMC_single m_X1;
      LibMCDriver_ScanLabSMC_single m_Y1;
      LibMCDriver_ScanLabSMC_single m_X2;
      LibMCDriver_ScanLabSMC_single m_Y2;
  } sHatch2D;
  
  #pragma pack ()
  
} // namespace LibMCDriver_ScanLabSMC;

// define legacy C-names for enums, structs and function types
typedef LibMCDriver_ScanLabSMC::eBlendMode eLibMCDriver_ScanLabSMCBlendMode;
typedef LibMCDriver_ScanLabSMC::sPoint2D sLibMCDriver_ScanLabSMCPoint2D;
typedef LibMCDriver_ScanLabSMC::sHatch2D sLibMCDriver_ScanLabSMCHatch2D;

#endif // __LIBMCDRIVER_SCANLABSMC_TYPES_HEADER_CPP
