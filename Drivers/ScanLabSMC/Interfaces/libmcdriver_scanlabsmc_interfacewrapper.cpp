/*++

Copyright (C) 2023 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.8.0-develop.

Abstract: This is an autogenerated C++ implementation file in order to allow easy
development of MC Driver ScanLab SCANmotionControl. The functions in this file need to be implemented. It needs to be generated only once.

Interface version: 2.0.0

*/

#include "libmcdriver_scanlabsmc_abi.hpp"
#include "libmcdriver_scanlabsmc_interfaces.hpp"
#include "libmcdriver_scanlabsmc_interfaceexception.hpp"

#include <map>

using namespace LibMCDriver_ScanLabSMC::Impl;

LibMCDriver_ScanLabSMCResult handleLibMCDriver_ScanLabSMCException(IBase * pIBaseClass, ELibMCDriver_ScanLabSMCInterfaceException & Exception)
{
	LibMCDriver_ScanLabSMCResult errorCode = Exception.getErrorCode();

	if (pIBaseClass != nullptr)
		pIBaseClass->RegisterErrorMessage(Exception.what());

	return errorCode;
}

LibMCDriver_ScanLabSMCResult handleStdException(IBase * pIBaseClass, std::exception & Exception)
{
	LibMCDriver_ScanLabSMCResult errorCode = LIBMCDRIVER_SCANLABSMC_ERROR_GENERICEXCEPTION;

	if (pIBaseClass != nullptr)
		pIBaseClass->RegisterErrorMessage(Exception.what());

	return errorCode;
}

LibMCDriver_ScanLabSMCResult handleUnhandledException(IBase * pIBaseClass)
{
	LibMCDriver_ScanLabSMCResult errorCode = LIBMCDRIVER_SCANLABSMC_ERROR_GENERICEXCEPTION;

	if (pIBaseClass != nullptr)
		pIBaseClass->RegisterErrorMessage("Unhandled Exception");

	return errorCode;
}



/*************************************************************************************************************************
 Class implementation for Base
**************************************************************************************************************************/

/*************************************************************************************************************************
 Class implementation for Driver
**************************************************************************************************************************/
LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_driver_configure(LibMCDriver_ScanLabSMC_Driver pDriver, const char * pConfigurationString)
{
	IBase* pIBaseClass = (IBase *)pDriver;

	try {
		if (pConfigurationString == nullptr)
			throw ELibMCDriver_ScanLabSMCInterfaceException (LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDPARAM);
		std::string sConfigurationString(pConfigurationString);
		IDriver* pIDriver = dynamic_cast<IDriver*>(pIBaseClass);
		if (!pIDriver)
			throw ELibMCDriver_ScanLabSMCInterfaceException(LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDCAST);
		
		pIDriver->Configure(sConfigurationString);

		return LIBMCDRIVER_SCANLABSMC_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabSMCInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabSMCException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_driver_getname(LibMCDriver_ScanLabSMC_Driver pDriver, const LibMCDriver_ScanLabSMC_uint32 nNameBufferSize, LibMCDriver_ScanLabSMC_uint32* pNameNeededChars, char * pNameBuffer)
{
	IBase* pIBaseClass = (IBase *)pDriver;

	try {
		if ( (!pNameBuffer) && !(pNameNeededChars) )
			throw ELibMCDriver_ScanLabSMCInterfaceException (LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDPARAM);
		std::string sName("");
		IDriver* pIDriver = dynamic_cast<IDriver*>(pIBaseClass);
		if (!pIDriver)
			throw ELibMCDriver_ScanLabSMCInterfaceException(LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDCAST);
		
		bool isCacheCall = (pNameBuffer == nullptr);
		if (isCacheCall) {
			sName = pIDriver->GetName();

			pIDriver->_setCache (new ParameterCache_1<std::string> (sName));
		}
		else {
			auto cache = dynamic_cast<ParameterCache_1<std::string>*> (pIDriver->_getCache ());
			if (cache == nullptr)
				throw ELibMCDriver_ScanLabSMCInterfaceException(LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDCAST);
			cache->retrieveData (sName);
			pIDriver->_setCache (nullptr);
		}
		
		if (pNameNeededChars)
			*pNameNeededChars = (LibMCDriver_ScanLabSMC_uint32) (sName.size()+1);
		if (pNameBuffer) {
			if (sName.size() >= nNameBufferSize)
				throw ELibMCDriver_ScanLabSMCInterfaceException (LIBMCDRIVER_SCANLABSMC_ERROR_BUFFERTOOSMALL);
			for (size_t iName = 0; iName < sName.size(); iName++)
				pNameBuffer[iName] = sName[iName];
			pNameBuffer[sName.size()] = 0;
		}
		return LIBMCDRIVER_SCANLABSMC_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabSMCInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabSMCException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_driver_gettype(LibMCDriver_ScanLabSMC_Driver pDriver, const LibMCDriver_ScanLabSMC_uint32 nTypeBufferSize, LibMCDriver_ScanLabSMC_uint32* pTypeNeededChars, char * pTypeBuffer)
{
	IBase* pIBaseClass = (IBase *)pDriver;

	try {
		if ( (!pTypeBuffer) && !(pTypeNeededChars) )
			throw ELibMCDriver_ScanLabSMCInterfaceException (LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDPARAM);
		std::string sType("");
		IDriver* pIDriver = dynamic_cast<IDriver*>(pIBaseClass);
		if (!pIDriver)
			throw ELibMCDriver_ScanLabSMCInterfaceException(LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDCAST);
		
		bool isCacheCall = (pTypeBuffer == nullptr);
		if (isCacheCall) {
			sType = pIDriver->GetType();

			pIDriver->_setCache (new ParameterCache_1<std::string> (sType));
		}
		else {
			auto cache = dynamic_cast<ParameterCache_1<std::string>*> (pIDriver->_getCache ());
			if (cache == nullptr)
				throw ELibMCDriver_ScanLabSMCInterfaceException(LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDCAST);
			cache->retrieveData (sType);
			pIDriver->_setCache (nullptr);
		}
		
		if (pTypeNeededChars)
			*pTypeNeededChars = (LibMCDriver_ScanLabSMC_uint32) (sType.size()+1);
		if (pTypeBuffer) {
			if (sType.size() >= nTypeBufferSize)
				throw ELibMCDriver_ScanLabSMCInterfaceException (LIBMCDRIVER_SCANLABSMC_ERROR_BUFFERTOOSMALL);
			for (size_t iType = 0; iType < sType.size(); iType++)
				pTypeBuffer[iType] = sType[iType];
			pTypeBuffer[sType.size()] = 0;
		}
		return LIBMCDRIVER_SCANLABSMC_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabSMCInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabSMCException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_driver_getversion(LibMCDriver_ScanLabSMC_Driver pDriver, LibMCDriver_ScanLabSMC_uint32 * pMajor, LibMCDriver_ScanLabSMC_uint32 * pMinor, LibMCDriver_ScanLabSMC_uint32 * pMicro, const LibMCDriver_ScanLabSMC_uint32 nBuildBufferSize, LibMCDriver_ScanLabSMC_uint32* pBuildNeededChars, char * pBuildBuffer)
{
	IBase* pIBaseClass = (IBase *)pDriver;

	try {
		if (!pMajor)
			throw ELibMCDriver_ScanLabSMCInterfaceException (LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDPARAM);
		if (!pMinor)
			throw ELibMCDriver_ScanLabSMCInterfaceException (LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDPARAM);
		if (!pMicro)
			throw ELibMCDriver_ScanLabSMCInterfaceException (LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDPARAM);
		if ( (!pBuildBuffer) && !(pBuildNeededChars) )
			throw ELibMCDriver_ScanLabSMCInterfaceException (LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDPARAM);
		std::string sBuild("");
		IDriver* pIDriver = dynamic_cast<IDriver*>(pIBaseClass);
		if (!pIDriver)
			throw ELibMCDriver_ScanLabSMCInterfaceException(LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDCAST);
		
		bool isCacheCall = (pBuildBuffer == nullptr);
		if (isCacheCall) {
			pIDriver->GetVersion(*pMajor, *pMinor, *pMicro, sBuild);

			pIDriver->_setCache (new ParameterCache_4<LibMCDriver_ScanLabSMC_uint32, LibMCDriver_ScanLabSMC_uint32, LibMCDriver_ScanLabSMC_uint32, std::string> (*pMajor, *pMinor, *pMicro, sBuild));
		}
		else {
			auto cache = dynamic_cast<ParameterCache_4<LibMCDriver_ScanLabSMC_uint32, LibMCDriver_ScanLabSMC_uint32, LibMCDriver_ScanLabSMC_uint32, std::string>*> (pIDriver->_getCache ());
			if (cache == nullptr)
				throw ELibMCDriver_ScanLabSMCInterfaceException(LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDCAST);
			cache->retrieveData (*pMajor, *pMinor, *pMicro, sBuild);
			pIDriver->_setCache (nullptr);
		}
		
		if (pBuildNeededChars)
			*pBuildNeededChars = (LibMCDriver_ScanLabSMC_uint32) (sBuild.size()+1);
		if (pBuildBuffer) {
			if (sBuild.size() >= nBuildBufferSize)
				throw ELibMCDriver_ScanLabSMCInterfaceException (LIBMCDRIVER_SCANLABSMC_ERROR_BUFFERTOOSMALL);
			for (size_t iBuild = 0; iBuild < sBuild.size(); iBuild++)
				pBuildBuffer[iBuild] = sBuild[iBuild];
			pBuildBuffer[sBuild.size()] = 0;
		}
		return LIBMCDRIVER_SCANLABSMC_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabSMCInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabSMCException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_driver_queryparameters(LibMCDriver_ScanLabSMC_Driver pDriver)
{
	IBase* pIBaseClass = (IBase *)pDriver;

	try {
		IDriver* pIDriver = dynamic_cast<IDriver*>(pIBaseClass);
		if (!pIDriver)
			throw ELibMCDriver_ScanLabSMCInterfaceException(LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDCAST);
		
		pIDriver->QueryParameters();

		return LIBMCDRIVER_SCANLABSMC_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabSMCInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabSMCException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_driver_queryparametersex(LibMCDriver_ScanLabSMC_Driver pDriver, LibMCEnv_DriverStatusUpdateSession pDriverUpdateInstance)
{
	IBase* pIBaseClass = (IBase *)pDriver;

	try {
		LibMCEnv::PDriverStatusUpdateSession pIDriverUpdateInstance = std::make_shared<LibMCEnv::CDriverStatusUpdateSession>(CWrapper::sPLibMCEnvWrapper.get(), pDriverUpdateInstance);
		CWrapper::sPLibMCEnvWrapper->AcquireInstance(pIDriverUpdateInstance.get());
		if (!pIDriverUpdateInstance)
			throw ELibMCDriver_ScanLabSMCInterfaceException (LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDCAST);
		
		IDriver* pIDriver = dynamic_cast<IDriver*>(pIBaseClass);
		if (!pIDriver)
			throw ELibMCDriver_ScanLabSMCInterfaceException(LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDCAST);
		
		pIDriver->QueryParametersEx(pIDriverUpdateInstance);

		return LIBMCDRIVER_SCANLABSMC_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabSMCInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabSMCException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}


/*************************************************************************************************************************
 Class implementation for SMCJob
**************************************************************************************************************************/
LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_smcjob_getjobid(LibMCDriver_ScanLabSMC_SMCJob pSMCJob, LibMCDriver_ScanLabSMC_uint64 * pJobID)
{
	IBase* pIBaseClass = (IBase *)pSMCJob;

	try {
		if (pJobID == nullptr)
			throw ELibMCDriver_ScanLabSMCInterfaceException (LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDPARAM);
		ISMCJob* pISMCJob = dynamic_cast<ISMCJob*>(pIBaseClass);
		if (!pISMCJob)
			throw ELibMCDriver_ScanLabSMCInterfaceException(LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDCAST);
		
		*pJobID = pISMCJob->GetJobID();

		return LIBMCDRIVER_SCANLABSMC_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabSMCInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabSMCException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_smcjob_finalize(LibMCDriver_ScanLabSMC_SMCJob pSMCJob)
{
	IBase* pIBaseClass = (IBase *)pSMCJob;

	try {
		ISMCJob* pISMCJob = dynamic_cast<ISMCJob*>(pIBaseClass);
		if (!pISMCJob)
			throw ELibMCDriver_ScanLabSMCInterfaceException(LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDCAST);
		
		pISMCJob->Finalize();

		return LIBMCDRIVER_SCANLABSMC_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabSMCInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabSMCException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_smcjob_isfinalized(LibMCDriver_ScanLabSMC_SMCJob pSMCJob, bool * pFinalized)
{
	IBase* pIBaseClass = (IBase *)pSMCJob;

	try {
		if (pFinalized == nullptr)
			throw ELibMCDriver_ScanLabSMCInterfaceException (LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDPARAM);
		ISMCJob* pISMCJob = dynamic_cast<ISMCJob*>(pIBaseClass);
		if (!pISMCJob)
			throw ELibMCDriver_ScanLabSMCInterfaceException(LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDCAST);
		
		*pFinalized = pISMCJob->IsFinalized();

		return LIBMCDRIVER_SCANLABSMC_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabSMCInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabSMCException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_smcjob_drawpolyline(LibMCDriver_ScanLabSMC_SMCJob pSMCJob, LibMCDriver_ScanLabSMC_uint64 nPointsBufferSize, const sLibMCDriver_ScanLabSMCPoint2D * pPointsBuffer, LibMCDriver_ScanLabSMC_double dMarkSpeed, LibMCDriver_ScanLabSMC_double dMinimalMarkSpeed, LibMCDriver_ScanLabSMC_double dJumpSpeed, LibMCDriver_ScanLabSMC_double dPower, LibMCDriver_ScanLabSMC_double dCornerTolerance, LibMCDriver_ScanLabSMC_double dZValue)
{
	IBase* pIBaseClass = (IBase *)pSMCJob;

	try {
		if ( (!pPointsBuffer) && (nPointsBufferSize>0))
			throw ELibMCDriver_ScanLabSMCInterfaceException (LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDPARAM);
		ISMCJob* pISMCJob = dynamic_cast<ISMCJob*>(pIBaseClass);
		if (!pISMCJob)
			throw ELibMCDriver_ScanLabSMCInterfaceException(LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDCAST);
		
		pISMCJob->DrawPolyline(nPointsBufferSize, pPointsBuffer, dMarkSpeed, dMinimalMarkSpeed, dJumpSpeed, dPower, dCornerTolerance, dZValue);

		return LIBMCDRIVER_SCANLABSMC_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabSMCInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabSMCException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_smcjob_drawloop(LibMCDriver_ScanLabSMC_SMCJob pSMCJob, LibMCDriver_ScanLabSMC_uint64 nPointsBufferSize, const sLibMCDriver_ScanLabSMCPoint2D * pPointsBuffer, LibMCDriver_ScanLabSMC_double dMarkSpeed, LibMCDriver_ScanLabSMC_double dMinimalMarkSpeed, LibMCDriver_ScanLabSMC_double dJumpSpeed, LibMCDriver_ScanLabSMC_double dPower, LibMCDriver_ScanLabSMC_double dCornerTolerance, LibMCDriver_ScanLabSMC_double dZValue)
{
	IBase* pIBaseClass = (IBase *)pSMCJob;

	try {
		if ( (!pPointsBuffer) && (nPointsBufferSize>0))
			throw ELibMCDriver_ScanLabSMCInterfaceException (LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDPARAM);
		ISMCJob* pISMCJob = dynamic_cast<ISMCJob*>(pIBaseClass);
		if (!pISMCJob)
			throw ELibMCDriver_ScanLabSMCInterfaceException(LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDCAST);
		
		pISMCJob->DrawLoop(nPointsBufferSize, pPointsBuffer, dMarkSpeed, dMinimalMarkSpeed, dJumpSpeed, dPower, dCornerTolerance, dZValue);

		return LIBMCDRIVER_SCANLABSMC_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabSMCInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabSMCException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_smcjob_drawhatches(LibMCDriver_ScanLabSMC_SMCJob pSMCJob, LibMCDriver_ScanLabSMC_uint64 nHatchesBufferSize, const sLibMCDriver_ScanLabSMCHatch2D * pHatchesBuffer, LibMCDriver_ScanLabSMC_double dMarkSpeed, LibMCDriver_ScanLabSMC_double dJumpSpeed, LibMCDriver_ScanLabSMC_double dPower, LibMCDriver_ScanLabSMC_double dZValue)
{
	IBase* pIBaseClass = (IBase *)pSMCJob;

	try {
		if ( (!pHatchesBuffer) && (nHatchesBufferSize>0))
			throw ELibMCDriver_ScanLabSMCInterfaceException (LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDPARAM);
		ISMCJob* pISMCJob = dynamic_cast<ISMCJob*>(pIBaseClass);
		if (!pISMCJob)
			throw ELibMCDriver_ScanLabSMCInterfaceException(LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDCAST);
		
		pISMCJob->DrawHatches(nHatchesBufferSize, pHatchesBuffer, dMarkSpeed, dJumpSpeed, dPower, dZValue);

		return LIBMCDRIVER_SCANLABSMC_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabSMCInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabSMCException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_smcjob_addlayertolist(LibMCDriver_ScanLabSMC_SMCJob pSMCJob, LibMCEnv_ToolpathLayer pLayer)
{
	IBase* pIBaseClass = (IBase *)pSMCJob;

	try {
		LibMCEnv::PToolpathLayer pILayer = std::make_shared<LibMCEnv::CToolpathLayer>(CWrapper::sPLibMCEnvWrapper.get(), pLayer);
		CWrapper::sPLibMCEnvWrapper->AcquireInstance(pILayer.get());
		if (!pILayer)
			throw ELibMCDriver_ScanLabSMCInterfaceException (LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDCAST);
		
		ISMCJob* pISMCJob = dynamic_cast<ISMCJob*>(pIBaseClass);
		if (!pISMCJob)
			throw ELibMCDriver_ScanLabSMCInterfaceException(LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDCAST);
		
		pISMCJob->AddLayerToList(pILayer);

		return LIBMCDRIVER_SCANLABSMC_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabSMCInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabSMCException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_smcjob_isready(LibMCDriver_ScanLabSMC_SMCJob pSMCJob, bool * pIsExecuting)
{
	IBase* pIBaseClass = (IBase *)pSMCJob;

	try {
		if (pIsExecuting == nullptr)
			throw ELibMCDriver_ScanLabSMCInterfaceException (LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDPARAM);
		ISMCJob* pISMCJob = dynamic_cast<ISMCJob*>(pIBaseClass);
		if (!pISMCJob)
			throw ELibMCDriver_ScanLabSMCInterfaceException(LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDCAST);
		
		*pIsExecuting = pISMCJob->IsReady();

		return LIBMCDRIVER_SCANLABSMC_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabSMCInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabSMCException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_smcjob_execute(LibMCDriver_ScanLabSMC_SMCJob pSMCJob, bool bBlocking)
{
	IBase* pIBaseClass = (IBase *)pSMCJob;

	try {
		ISMCJob* pISMCJob = dynamic_cast<ISMCJob*>(pIBaseClass);
		if (!pISMCJob)
			throw ELibMCDriver_ScanLabSMCInterfaceException(LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDCAST);
		
		pISMCJob->Execute(bBlocking);

		return LIBMCDRIVER_SCANLABSMC_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabSMCInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabSMCException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_smcjob_isexecuting(LibMCDriver_ScanLabSMC_SMCJob pSMCJob, bool * pIsExecuting)
{
	IBase* pIBaseClass = (IBase *)pSMCJob;

	try {
		if (pIsExecuting == nullptr)
			throw ELibMCDriver_ScanLabSMCInterfaceException (LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDPARAM);
		ISMCJob* pISMCJob = dynamic_cast<ISMCJob*>(pIBaseClass);
		if (!pISMCJob)
			throw ELibMCDriver_ScanLabSMCInterfaceException(LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDCAST);
		
		*pIsExecuting = pISMCJob->IsExecuting();

		return LIBMCDRIVER_SCANLABSMC_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabSMCInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabSMCException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_smcjob_waitforexecution(LibMCDriver_ScanLabSMC_SMCJob pSMCJob, LibMCDriver_ScanLabSMC_uint32 nTimeOutInMilliseconds)
{
	IBase* pIBaseClass = (IBase *)pSMCJob;

	try {
		ISMCJob* pISMCJob = dynamic_cast<ISMCJob*>(pIBaseClass);
		if (!pISMCJob)
			throw ELibMCDriver_ScanLabSMCInterfaceException(LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDCAST);
		
		pISMCJob->WaitForExecution(nTimeOutInMilliseconds);

		return LIBMCDRIVER_SCANLABSMC_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabSMCInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabSMCException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_smcjob_stopexecution(LibMCDriver_ScanLabSMC_SMCJob pSMCJob)
{
	IBase* pIBaseClass = (IBase *)pSMCJob;

	try {
		ISMCJob* pISMCJob = dynamic_cast<ISMCJob*>(pIBaseClass);
		if (!pISMCJob)
			throw ELibMCDriver_ScanLabSMCInterfaceException(LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDCAST);
		
		pISMCJob->StopExecution();

		return LIBMCDRIVER_SCANLABSMC_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabSMCInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabSMCException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_smcjob_loadsimulationdata(LibMCDriver_ScanLabSMC_SMCJob pSMCJob, LibMCEnv_DataTable pSimulationDataTable)
{
	IBase* pIBaseClass = (IBase *)pSMCJob;

	try {
		LibMCEnv::PDataTable pISimulationDataTable = std::make_shared<LibMCEnv::CDataTable>(CWrapper::sPLibMCEnvWrapper.get(), pSimulationDataTable);
		CWrapper::sPLibMCEnvWrapper->AcquireInstance(pISimulationDataTable.get());
		if (!pISimulationDataTable)
			throw ELibMCDriver_ScanLabSMCInterfaceException (LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDCAST);
		
		ISMCJob* pISMCJob = dynamic_cast<ISMCJob*>(pIBaseClass);
		if (!pISMCJob)
			throw ELibMCDriver_ScanLabSMCInterfaceException(LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDCAST);
		
		pISMCJob->LoadSimulationData(pISimulationDataTable);

		return LIBMCDRIVER_SCANLABSMC_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabSMCInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabSMCException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}


/*************************************************************************************************************************
 Class implementation for SMCConfiguration
**************************************************************************************************************************/
LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_smcconfiguration_setdynamicviolationreaction(LibMCDriver_ScanLabSMC_SMCConfiguration pSMCConfiguration, eLibMCDriver_ScanLabSMCDynamicViolationReaction eValue)
{
	IBase* pIBaseClass = (IBase *)pSMCConfiguration;

	try {
		ISMCConfiguration* pISMCConfiguration = dynamic_cast<ISMCConfiguration*>(pIBaseClass);
		if (!pISMCConfiguration)
			throw ELibMCDriver_ScanLabSMCInterfaceException(LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDCAST);
		
		pISMCConfiguration->SetDynamicViolationReaction(eValue);

		return LIBMCDRIVER_SCANLABSMC_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabSMCInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabSMCException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_smcconfiguration_getdynamicviolationreaction(LibMCDriver_ScanLabSMC_SMCConfiguration pSMCConfiguration, eLibMCDriver_ScanLabSMCDynamicViolationReaction * pValue)
{
	IBase* pIBaseClass = (IBase *)pSMCConfiguration;

	try {
		if (pValue == nullptr)
			throw ELibMCDriver_ScanLabSMCInterfaceException (LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDPARAM);
		ISMCConfiguration* pISMCConfiguration = dynamic_cast<ISMCConfiguration*>(pIBaseClass);
		if (!pISMCConfiguration)
			throw ELibMCDriver_ScanLabSMCInterfaceException(LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDCAST);
		
		*pValue = pISMCConfiguration->GetDynamicViolationReaction();

		return LIBMCDRIVER_SCANLABSMC_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabSMCInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabSMCException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_smcconfiguration_setwarnlevel(LibMCDriver_ScanLabSMC_SMCConfiguration pSMCConfiguration, eLibMCDriver_ScanLabSMCWarnLevel eValue)
{
	IBase* pIBaseClass = (IBase *)pSMCConfiguration;

	try {
		ISMCConfiguration* pISMCConfiguration = dynamic_cast<ISMCConfiguration*>(pIBaseClass);
		if (!pISMCConfiguration)
			throw ELibMCDriver_ScanLabSMCInterfaceException(LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDCAST);
		
		pISMCConfiguration->SetWarnLevel(eValue);

		return LIBMCDRIVER_SCANLABSMC_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabSMCInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabSMCException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_smcconfiguration_getwarnlevel(LibMCDriver_ScanLabSMC_SMCConfiguration pSMCConfiguration, eLibMCDriver_ScanLabSMCWarnLevel * pValue)
{
	IBase* pIBaseClass = (IBase *)pSMCConfiguration;

	try {
		if (pValue == nullptr)
			throw ELibMCDriver_ScanLabSMCInterfaceException (LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDPARAM);
		ISMCConfiguration* pISMCConfiguration = dynamic_cast<ISMCConfiguration*>(pIBaseClass);
		if (!pISMCConfiguration)
			throw ELibMCDriver_ScanLabSMCInterfaceException(LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDCAST);
		
		*pValue = pISMCConfiguration->GetWarnLevel();

		return LIBMCDRIVER_SCANLABSMC_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabSMCInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabSMCException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_smcconfiguration_setserialnumber(LibMCDriver_ScanLabSMC_SMCConfiguration pSMCConfiguration, LibMCDriver_ScanLabSMC_uint32 nValue)
{
	IBase* pIBaseClass = (IBase *)pSMCConfiguration;

	try {
		ISMCConfiguration* pISMCConfiguration = dynamic_cast<ISMCConfiguration*>(pIBaseClass);
		if (!pISMCConfiguration)
			throw ELibMCDriver_ScanLabSMCInterfaceException(LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDCAST);
		
		pISMCConfiguration->SetSerialNumber(nValue);

		return LIBMCDRIVER_SCANLABSMC_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabSMCInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabSMCException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_smcconfiguration_getserialnumber(LibMCDriver_ScanLabSMC_SMCConfiguration pSMCConfiguration, LibMCDriver_ScanLabSMC_uint32 * pValue)
{
	IBase* pIBaseClass = (IBase *)pSMCConfiguration;

	try {
		if (pValue == nullptr)
			throw ELibMCDriver_ScanLabSMCInterfaceException (LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDPARAM);
		ISMCConfiguration* pISMCConfiguration = dynamic_cast<ISMCConfiguration*>(pIBaseClass);
		if (!pISMCConfiguration)
			throw ELibMCDriver_ScanLabSMCInterfaceException(LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDCAST);
		
		*pValue = pISMCConfiguration->GetSerialNumber();

		return LIBMCDRIVER_SCANLABSMC_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabSMCInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabSMCException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_smcconfiguration_setipaddress(LibMCDriver_ScanLabSMC_SMCConfiguration pSMCConfiguration, const char * pValue)
{
	IBase* pIBaseClass = (IBase *)pSMCConfiguration;

	try {
		if (pValue == nullptr)
			throw ELibMCDriver_ScanLabSMCInterfaceException (LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDPARAM);
		std::string sValue(pValue);
		ISMCConfiguration* pISMCConfiguration = dynamic_cast<ISMCConfiguration*>(pIBaseClass);
		if (!pISMCConfiguration)
			throw ELibMCDriver_ScanLabSMCInterfaceException(LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDCAST);
		
		pISMCConfiguration->SetIPAddress(sValue);

		return LIBMCDRIVER_SCANLABSMC_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabSMCInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabSMCException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_smcconfiguration_getipaddress(LibMCDriver_ScanLabSMC_SMCConfiguration pSMCConfiguration, const LibMCDriver_ScanLabSMC_uint32 nValueBufferSize, LibMCDriver_ScanLabSMC_uint32* pValueNeededChars, char * pValueBuffer)
{
	IBase* pIBaseClass = (IBase *)pSMCConfiguration;

	try {
		if ( (!pValueBuffer) && !(pValueNeededChars) )
			throw ELibMCDriver_ScanLabSMCInterfaceException (LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDPARAM);
		std::string sValue("");
		ISMCConfiguration* pISMCConfiguration = dynamic_cast<ISMCConfiguration*>(pIBaseClass);
		if (!pISMCConfiguration)
			throw ELibMCDriver_ScanLabSMCInterfaceException(LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDCAST);
		
		bool isCacheCall = (pValueBuffer == nullptr);
		if (isCacheCall) {
			sValue = pISMCConfiguration->GetIPAddress();

			pISMCConfiguration->_setCache (new ParameterCache_1<std::string> (sValue));
		}
		else {
			auto cache = dynamic_cast<ParameterCache_1<std::string>*> (pISMCConfiguration->_getCache ());
			if (cache == nullptr)
				throw ELibMCDriver_ScanLabSMCInterfaceException(LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDCAST);
			cache->retrieveData (sValue);
			pISMCConfiguration->_setCache (nullptr);
		}
		
		if (pValueNeededChars)
			*pValueNeededChars = (LibMCDriver_ScanLabSMC_uint32) (sValue.size()+1);
		if (pValueBuffer) {
			if (sValue.size() >= nValueBufferSize)
				throw ELibMCDriver_ScanLabSMCInterfaceException (LIBMCDRIVER_SCANLABSMC_ERROR_BUFFERTOOSMALL);
			for (size_t iValue = 0; iValue < sValue.size(); iValue++)
				pValueBuffer[iValue] = sValue[iValue];
			pValueBuffer[sValue.size()] = 0;
		}
		return LIBMCDRIVER_SCANLABSMC_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabSMCInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabSMCException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_smcconfiguration_setcorrectionfile(LibMCDriver_ScanLabSMC_SMCConfiguration pSMCConfiguration, LibMCDriver_ScanLabSMC_uint64 nCorrectionFileDataBufferSize, const LibMCDriver_ScanLabSMC_uint8 * pCorrectionFileDataBuffer)
{
	IBase* pIBaseClass = (IBase *)pSMCConfiguration;

	try {
		if ( (!pCorrectionFileDataBuffer) && (nCorrectionFileDataBufferSize>0))
			throw ELibMCDriver_ScanLabSMCInterfaceException (LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDPARAM);
		ISMCConfiguration* pISMCConfiguration = dynamic_cast<ISMCConfiguration*>(pIBaseClass);
		if (!pISMCConfiguration)
			throw ELibMCDriver_ScanLabSMCInterfaceException(LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDCAST);
		
		pISMCConfiguration->SetCorrectionFile(nCorrectionFileDataBufferSize, pCorrectionFileDataBuffer);

		return LIBMCDRIVER_SCANLABSMC_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabSMCInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabSMCException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_smcconfiguration_setcorrectionfileresource(LibMCDriver_ScanLabSMC_SMCConfiguration pSMCConfiguration, const char * pResourceName)
{
	IBase* pIBaseClass = (IBase *)pSMCConfiguration;

	try {
		if (pResourceName == nullptr)
			throw ELibMCDriver_ScanLabSMCInterfaceException (LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDPARAM);
		std::string sResourceName(pResourceName);
		ISMCConfiguration* pISMCConfiguration = dynamic_cast<ISMCConfiguration*>(pIBaseClass);
		if (!pISMCConfiguration)
			throw ELibMCDriver_ScanLabSMCInterfaceException(LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDCAST);
		
		pISMCConfiguration->SetCorrectionFileResource(sResourceName);

		return LIBMCDRIVER_SCANLABSMC_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabSMCInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabSMCException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_smcconfiguration_setconfigurationtemplate(LibMCDriver_ScanLabSMC_SMCConfiguration pSMCConfiguration, const char * pTemplateXML)
{
	IBase* pIBaseClass = (IBase *)pSMCConfiguration;

	try {
		if (pTemplateXML == nullptr)
			throw ELibMCDriver_ScanLabSMCInterfaceException (LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDPARAM);
		std::string sTemplateXML(pTemplateXML);
		ISMCConfiguration* pISMCConfiguration = dynamic_cast<ISMCConfiguration*>(pIBaseClass);
		if (!pISMCConfiguration)
			throw ELibMCDriver_ScanLabSMCInterfaceException(LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDCAST);
		
		pISMCConfiguration->SetConfigurationTemplate(sTemplateXML);

		return LIBMCDRIVER_SCANLABSMC_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabSMCInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabSMCException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_smcconfiguration_setconfigurationtemplateresource(LibMCDriver_ScanLabSMC_SMCConfiguration pSMCConfiguration, const char * pResourceName)
{
	IBase* pIBaseClass = (IBase *)pSMCConfiguration;

	try {
		if (pResourceName == nullptr)
			throw ELibMCDriver_ScanLabSMCInterfaceException (LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDPARAM);
		std::string sResourceName(pResourceName);
		ISMCConfiguration* pISMCConfiguration = dynamic_cast<ISMCConfiguration*>(pIBaseClass);
		if (!pISMCConfiguration)
			throw ELibMCDriver_ScanLabSMCInterfaceException(LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDCAST);
		
		pISMCConfiguration->SetConfigurationTemplateResource(sResourceName);

		return LIBMCDRIVER_SCANLABSMC_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabSMCInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabSMCException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_smcconfiguration_getconfigurationtemplate(LibMCDriver_ScanLabSMC_SMCConfiguration pSMCConfiguration, const LibMCDriver_ScanLabSMC_uint32 nTemplateXMLBufferSize, LibMCDriver_ScanLabSMC_uint32* pTemplateXMLNeededChars, char * pTemplateXMLBuffer)
{
	IBase* pIBaseClass = (IBase *)pSMCConfiguration;

	try {
		if ( (!pTemplateXMLBuffer) && !(pTemplateXMLNeededChars) )
			throw ELibMCDriver_ScanLabSMCInterfaceException (LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDPARAM);
		std::string sTemplateXML("");
		ISMCConfiguration* pISMCConfiguration = dynamic_cast<ISMCConfiguration*>(pIBaseClass);
		if (!pISMCConfiguration)
			throw ELibMCDriver_ScanLabSMCInterfaceException(LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDCAST);
		
		bool isCacheCall = (pTemplateXMLBuffer == nullptr);
		if (isCacheCall) {
			sTemplateXML = pISMCConfiguration->GetConfigurationTemplate();

			pISMCConfiguration->_setCache (new ParameterCache_1<std::string> (sTemplateXML));
		}
		else {
			auto cache = dynamic_cast<ParameterCache_1<std::string>*> (pISMCConfiguration->_getCache ());
			if (cache == nullptr)
				throw ELibMCDriver_ScanLabSMCInterfaceException(LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDCAST);
			cache->retrieveData (sTemplateXML);
			pISMCConfiguration->_setCache (nullptr);
		}
		
		if (pTemplateXMLNeededChars)
			*pTemplateXMLNeededChars = (LibMCDriver_ScanLabSMC_uint32) (sTemplateXML.size()+1);
		if (pTemplateXMLBuffer) {
			if (sTemplateXML.size() >= nTemplateXMLBufferSize)
				throw ELibMCDriver_ScanLabSMCInterfaceException (LIBMCDRIVER_SCANLABSMC_ERROR_BUFFERTOOSMALL);
			for (size_t iTemplateXML = 0; iTemplateXML < sTemplateXML.size(); iTemplateXML++)
				pTemplateXMLBuffer[iTemplateXML] = sTemplateXML[iTemplateXML];
			pTemplateXMLBuffer[sTemplateXML.size()] = 0;
		}
		return LIBMCDRIVER_SCANLABSMC_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabSMCInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabSMCException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_smcconfiguration_setsimulationsubdirectory(LibMCDriver_ScanLabSMC_SMCConfiguration pSMCConfiguration, const char * pSubDirectory)
{
	IBase* pIBaseClass = (IBase *)pSMCConfiguration;

	try {
		if (pSubDirectory == nullptr)
			throw ELibMCDriver_ScanLabSMCInterfaceException (LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDPARAM);
		std::string sSubDirectory(pSubDirectory);
		ISMCConfiguration* pISMCConfiguration = dynamic_cast<ISMCConfiguration*>(pIBaseClass);
		if (!pISMCConfiguration)
			throw ELibMCDriver_ScanLabSMCInterfaceException(LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDCAST);
		
		pISMCConfiguration->SetSimulationSubDirectory(sSubDirectory);

		return LIBMCDRIVER_SCANLABSMC_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabSMCInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabSMCException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_smcconfiguration_getsimulationsubdirectory(LibMCDriver_ScanLabSMC_SMCConfiguration pSMCConfiguration, const LibMCDriver_ScanLabSMC_uint32 nSubDirectoryBufferSize, LibMCDriver_ScanLabSMC_uint32* pSubDirectoryNeededChars, char * pSubDirectoryBuffer)
{
	IBase* pIBaseClass = (IBase *)pSMCConfiguration;

	try {
		if ( (!pSubDirectoryBuffer) && !(pSubDirectoryNeededChars) )
			throw ELibMCDriver_ScanLabSMCInterfaceException (LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDPARAM);
		std::string sSubDirectory("");
		ISMCConfiguration* pISMCConfiguration = dynamic_cast<ISMCConfiguration*>(pIBaseClass);
		if (!pISMCConfiguration)
			throw ELibMCDriver_ScanLabSMCInterfaceException(LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDCAST);
		
		bool isCacheCall = (pSubDirectoryBuffer == nullptr);
		if (isCacheCall) {
			sSubDirectory = pISMCConfiguration->GetSimulationSubDirectory();

			pISMCConfiguration->_setCache (new ParameterCache_1<std::string> (sSubDirectory));
		}
		else {
			auto cache = dynamic_cast<ParameterCache_1<std::string>*> (pISMCConfiguration->_getCache ());
			if (cache == nullptr)
				throw ELibMCDriver_ScanLabSMCInterfaceException(LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDCAST);
			cache->retrieveData (sSubDirectory);
			pISMCConfiguration->_setCache (nullptr);
		}
		
		if (pSubDirectoryNeededChars)
			*pSubDirectoryNeededChars = (LibMCDriver_ScanLabSMC_uint32) (sSubDirectory.size()+1);
		if (pSubDirectoryBuffer) {
			if (sSubDirectory.size() >= nSubDirectoryBufferSize)
				throw ELibMCDriver_ScanLabSMCInterfaceException (LIBMCDRIVER_SCANLABSMC_ERROR_BUFFERTOOSMALL);
			for (size_t iSubDirectory = 0; iSubDirectory < sSubDirectory.size(); iSubDirectory++)
				pSubDirectoryBuffer[iSubDirectory] = sSubDirectory[iSubDirectory];
			pSubDirectoryBuffer[sSubDirectory.size()] = 0;
		}
		return LIBMCDRIVER_SCANLABSMC_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabSMCInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabSMCException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_smcconfiguration_setfirmware(LibMCDriver_ScanLabSMC_SMCConfiguration pSMCConfiguration, LibMCDriver_ScanLabSMC_uint64 nFirmwareDataBufferSize, const LibMCDriver_ScanLabSMC_uint8 * pFirmwareDataBuffer, LibMCDriver_ScanLabSMC_uint64 nFPGADataBufferSize, const LibMCDriver_ScanLabSMC_uint8 * pFPGADataBuffer, LibMCDriver_ScanLabSMC_uint64 nAuxiliaryDataBufferSize, const LibMCDriver_ScanLabSMC_uint8 * pAuxiliaryDataBuffer)
{
	IBase* pIBaseClass = (IBase *)pSMCConfiguration;

	try {
		if ( (!pFirmwareDataBuffer) && (nFirmwareDataBufferSize>0))
			throw ELibMCDriver_ScanLabSMCInterfaceException (LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDPARAM);
		if ( (!pFPGADataBuffer) && (nFPGADataBufferSize>0))
			throw ELibMCDriver_ScanLabSMCInterfaceException (LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDPARAM);
		if ( (!pAuxiliaryDataBuffer) && (nAuxiliaryDataBufferSize>0))
			throw ELibMCDriver_ScanLabSMCInterfaceException (LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDPARAM);
		ISMCConfiguration* pISMCConfiguration = dynamic_cast<ISMCConfiguration*>(pIBaseClass);
		if (!pISMCConfiguration)
			throw ELibMCDriver_ScanLabSMCInterfaceException(LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDCAST);
		
		pISMCConfiguration->SetFirmware(nFirmwareDataBufferSize, pFirmwareDataBuffer, nFPGADataBufferSize, pFPGADataBuffer, nAuxiliaryDataBufferSize, pAuxiliaryDataBuffer);

		return LIBMCDRIVER_SCANLABSMC_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabSMCInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabSMCException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_smcconfiguration_setfirmwareresources(LibMCDriver_ScanLabSMC_SMCConfiguration pSMCConfiguration, const char * pFirmwareDataResource, const char * pFPGADataResource, const char * pAuxiliaryDataResource)
{
	IBase* pIBaseClass = (IBase *)pSMCConfiguration;

	try {
		if (pFirmwareDataResource == nullptr)
			throw ELibMCDriver_ScanLabSMCInterfaceException (LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDPARAM);
		if (pFPGADataResource == nullptr)
			throw ELibMCDriver_ScanLabSMCInterfaceException (LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDPARAM);
		if (pAuxiliaryDataResource == nullptr)
			throw ELibMCDriver_ScanLabSMCInterfaceException (LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDPARAM);
		std::string sFirmwareDataResource(pFirmwareDataResource);
		std::string sFPGADataResource(pFPGADataResource);
		std::string sAuxiliaryDataResource(pAuxiliaryDataResource);
		ISMCConfiguration* pISMCConfiguration = dynamic_cast<ISMCConfiguration*>(pIBaseClass);
		if (!pISMCConfiguration)
			throw ELibMCDriver_ScanLabSMCInterfaceException(LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDCAST);
		
		pISMCConfiguration->SetFirmwareResources(sFirmwareDataResource, sFPGADataResource, sAuxiliaryDataResource);

		return LIBMCDRIVER_SCANLABSMC_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabSMCInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabSMCException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}


/*************************************************************************************************************************
 Class implementation for SMCContext
**************************************************************************************************************************/
LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_smccontext_settosimulationmode(LibMCDriver_ScanLabSMC_SMCContext pSMCContext)
{
	IBase* pIBaseClass = (IBase *)pSMCContext;

	try {
		ISMCContext* pISMCContext = dynamic_cast<ISMCContext*>(pIBaseClass);
		if (!pISMCContext)
			throw ELibMCDriver_ScanLabSMCInterfaceException(LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDCAST);
		
		pISMCContext->SetToSimulationMode();

		return LIBMCDRIVER_SCANLABSMC_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabSMCInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabSMCException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_smccontext_issimulationmode(LibMCDriver_ScanLabSMC_SMCContext pSMCContext, bool * pSimulationModeEnabled)
{
	IBase* pIBaseClass = (IBase *)pSMCContext;

	try {
		if (pSimulationModeEnabled == nullptr)
			throw ELibMCDriver_ScanLabSMCInterfaceException (LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDPARAM);
		ISMCContext* pISMCContext = dynamic_cast<ISMCContext*>(pIBaseClass);
		if (!pISMCContext)
			throw ELibMCDriver_ScanLabSMCInterfaceException(LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDCAST);
		
		*pSimulationModeEnabled = pISMCContext->IsSimulationMode();

		return LIBMCDRIVER_SCANLABSMC_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabSMCInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabSMCException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_smccontext_reinitializeinstance(LibMCDriver_ScanLabSMC_SMCContext pSMCContext)
{
	IBase* pIBaseClass = (IBase *)pSMCContext;

	try {
		ISMCContext* pISMCContext = dynamic_cast<ISMCContext*>(pIBaseClass);
		if (!pISMCContext)
			throw ELibMCDriver_ScanLabSMCInterfaceException(LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDCAST);
		
		pISMCContext->ReinitializeInstance();

		return LIBMCDRIVER_SCANLABSMC_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabSMCInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabSMCException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_smccontext_getipaddress(LibMCDriver_ScanLabSMC_SMCContext pSMCContext, const LibMCDriver_ScanLabSMC_uint32 nIPAddressBufferSize, LibMCDriver_ScanLabSMC_uint32* pIPAddressNeededChars, char * pIPAddressBuffer)
{
	IBase* pIBaseClass = (IBase *)pSMCContext;

	try {
		if ( (!pIPAddressBuffer) && !(pIPAddressNeededChars) )
			throw ELibMCDriver_ScanLabSMCInterfaceException (LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDPARAM);
		std::string sIPAddress("");
		ISMCContext* pISMCContext = dynamic_cast<ISMCContext*>(pIBaseClass);
		if (!pISMCContext)
			throw ELibMCDriver_ScanLabSMCInterfaceException(LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDCAST);
		
		bool isCacheCall = (pIPAddressBuffer == nullptr);
		if (isCacheCall) {
			sIPAddress = pISMCContext->GetIPAddress();

			pISMCContext->_setCache (new ParameterCache_1<std::string> (sIPAddress));
		}
		else {
			auto cache = dynamic_cast<ParameterCache_1<std::string>*> (pISMCContext->_getCache ());
			if (cache == nullptr)
				throw ELibMCDriver_ScanLabSMCInterfaceException(LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDCAST);
			cache->retrieveData (sIPAddress);
			pISMCContext->_setCache (nullptr);
		}
		
		if (pIPAddressNeededChars)
			*pIPAddressNeededChars = (LibMCDriver_ScanLabSMC_uint32) (sIPAddress.size()+1);
		if (pIPAddressBuffer) {
			if (sIPAddress.size() >= nIPAddressBufferSize)
				throw ELibMCDriver_ScanLabSMCInterfaceException (LIBMCDRIVER_SCANLABSMC_ERROR_BUFFERTOOSMALL);
			for (size_t iIPAddress = 0; iIPAddress < sIPAddress.size(); iIPAddress++)
				pIPAddressBuffer[iIPAddress] = sIPAddress[iIPAddress];
			pIPAddressBuffer[sIPAddress.size()] = 0;
		}
		return LIBMCDRIVER_SCANLABSMC_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabSMCInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabSMCException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_smccontext_getnetmask(LibMCDriver_ScanLabSMC_SMCContext pSMCContext, const LibMCDriver_ScanLabSMC_uint32 nNetmaskBufferSize, LibMCDriver_ScanLabSMC_uint32* pNetmaskNeededChars, char * pNetmaskBuffer)
{
	IBase* pIBaseClass = (IBase *)pSMCContext;

	try {
		if ( (!pNetmaskBuffer) && !(pNetmaskNeededChars) )
			throw ELibMCDriver_ScanLabSMCInterfaceException (LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDPARAM);
		std::string sNetmask("");
		ISMCContext* pISMCContext = dynamic_cast<ISMCContext*>(pIBaseClass);
		if (!pISMCContext)
			throw ELibMCDriver_ScanLabSMCInterfaceException(LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDCAST);
		
		bool isCacheCall = (pNetmaskBuffer == nullptr);
		if (isCacheCall) {
			sNetmask = pISMCContext->GetNetmask();

			pISMCContext->_setCache (new ParameterCache_1<std::string> (sNetmask));
		}
		else {
			auto cache = dynamic_cast<ParameterCache_1<std::string>*> (pISMCContext->_getCache ());
			if (cache == nullptr)
				throw ELibMCDriver_ScanLabSMCInterfaceException(LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDCAST);
			cache->retrieveData (sNetmask);
			pISMCContext->_setCache (nullptr);
		}
		
		if (pNetmaskNeededChars)
			*pNetmaskNeededChars = (LibMCDriver_ScanLabSMC_uint32) (sNetmask.size()+1);
		if (pNetmaskBuffer) {
			if (sNetmask.size() >= nNetmaskBufferSize)
				throw ELibMCDriver_ScanLabSMCInterfaceException (LIBMCDRIVER_SCANLABSMC_ERROR_BUFFERTOOSMALL);
			for (size_t iNetmask = 0; iNetmask < sNetmask.size(); iNetmask++)
				pNetmaskBuffer[iNetmask] = sNetmask[iNetmask];
			pNetmaskBuffer[sNetmask.size()] = 0;
		}
		return LIBMCDRIVER_SCANLABSMC_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabSMCInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabSMCException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_smccontext_getserialnumber(LibMCDriver_ScanLabSMC_SMCContext pSMCContext, LibMCDriver_ScanLabSMC_uint32 * pSerialNumber)
{
	IBase* pIBaseClass = (IBase *)pSMCContext;

	try {
		if (pSerialNumber == nullptr)
			throw ELibMCDriver_ScanLabSMCInterfaceException (LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDPARAM);
		ISMCContext* pISMCContext = dynamic_cast<ISMCContext*>(pIBaseClass);
		if (!pISMCContext)
			throw ELibMCDriver_ScanLabSMCInterfaceException(LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDCAST);
		
		*pSerialNumber = pISMCContext->GetSerialNumber();

		return LIBMCDRIVER_SCANLABSMC_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabSMCInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabSMCException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_smccontext_getsimulationsubdirectory(LibMCDriver_ScanLabSMC_SMCContext pSMCContext, const LibMCDriver_ScanLabSMC_uint32 nSubDirectoryBufferSize, LibMCDriver_ScanLabSMC_uint32* pSubDirectoryNeededChars, char * pSubDirectoryBuffer)
{
	IBase* pIBaseClass = (IBase *)pSMCContext;

	try {
		if ( (!pSubDirectoryBuffer) && !(pSubDirectoryNeededChars) )
			throw ELibMCDriver_ScanLabSMCInterfaceException (LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDPARAM);
		std::string sSubDirectory("");
		ISMCContext* pISMCContext = dynamic_cast<ISMCContext*>(pIBaseClass);
		if (!pISMCContext)
			throw ELibMCDriver_ScanLabSMCInterfaceException(LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDCAST);
		
		bool isCacheCall = (pSubDirectoryBuffer == nullptr);
		if (isCacheCall) {
			sSubDirectory = pISMCContext->GetSimulationSubDirectory();

			pISMCContext->_setCache (new ParameterCache_1<std::string> (sSubDirectory));
		}
		else {
			auto cache = dynamic_cast<ParameterCache_1<std::string>*> (pISMCContext->_getCache ());
			if (cache == nullptr)
				throw ELibMCDriver_ScanLabSMCInterfaceException(LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDCAST);
			cache->retrieveData (sSubDirectory);
			pISMCContext->_setCache (nullptr);
		}
		
		if (pSubDirectoryNeededChars)
			*pSubDirectoryNeededChars = (LibMCDriver_ScanLabSMC_uint32) (sSubDirectory.size()+1);
		if (pSubDirectoryBuffer) {
			if (sSubDirectory.size() >= nSubDirectoryBufferSize)
				throw ELibMCDriver_ScanLabSMCInterfaceException (LIBMCDRIVER_SCANLABSMC_ERROR_BUFFERTOOSMALL);
			for (size_t iSubDirectory = 0; iSubDirectory < sSubDirectory.size(); iSubDirectory++)
				pSubDirectoryBuffer[iSubDirectory] = sSubDirectory[iSubDirectory];
			pSubDirectoryBuffer[sSubDirectory.size()] = 0;
		}
		return LIBMCDRIVER_SCANLABSMC_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabSMCInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabSMCException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_smccontext_getlaserindex(LibMCDriver_ScanLabSMC_SMCContext pSMCContext, LibMCDriver_ScanLabSMC_uint32 * pLaserIndex)
{
	IBase* pIBaseClass = (IBase *)pSMCContext;

	try {
		if (pLaserIndex == nullptr)
			throw ELibMCDriver_ScanLabSMCInterfaceException (LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDPARAM);
		ISMCContext* pISMCContext = dynamic_cast<ISMCContext*>(pIBaseClass);
		if (!pISMCContext)
			throw ELibMCDriver_ScanLabSMCInterfaceException(LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDCAST);
		
		*pLaserIndex = pISMCContext->GetLaserIndex();

		return LIBMCDRIVER_SCANLABSMC_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabSMCInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabSMCException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_smccontext_setlaserorigin(LibMCDriver_ScanLabSMC_SMCContext pSMCContext, LibMCDriver_ScanLabSMC_double dOriginX, LibMCDriver_ScanLabSMC_double dOriginY)
{
	IBase* pIBaseClass = (IBase *)pSMCContext;

	try {
		ISMCContext* pISMCContext = dynamic_cast<ISMCContext*>(pIBaseClass);
		if (!pISMCContext)
			throw ELibMCDriver_ScanLabSMCInterfaceException(LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDCAST);
		
		pISMCContext->SetLaserOrigin(dOriginX, dOriginY);

		return LIBMCDRIVER_SCANLABSMC_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabSMCInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabSMCException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_smccontext_getlaserorigin(LibMCDriver_ScanLabSMC_SMCContext pSMCContext, LibMCDriver_ScanLabSMC_double * pOriginX, LibMCDriver_ScanLabSMC_double * pOriginY)
{
	IBase* pIBaseClass = (IBase *)pSMCContext;

	try {
		if (!pOriginX)
			throw ELibMCDriver_ScanLabSMCInterfaceException (LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDPARAM);
		if (!pOriginY)
			throw ELibMCDriver_ScanLabSMCInterfaceException (LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDPARAM);
		ISMCContext* pISMCContext = dynamic_cast<ISMCContext*>(pIBaseClass);
		if (!pISMCContext)
			throw ELibMCDriver_ScanLabSMCInterfaceException(LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDCAST);
		
		pISMCContext->GetLaserOrigin(*pOriginX, *pOriginY);

		return LIBMCDRIVER_SCANLABSMC_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabSMCInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabSMCException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_smccontext_setlaserfield(LibMCDriver_ScanLabSMC_SMCContext pSMCContext, LibMCDriver_ScanLabSMC_double dMinX, LibMCDriver_ScanLabSMC_double dMinY, LibMCDriver_ScanLabSMC_double dMaxX, LibMCDriver_ScanLabSMC_double dMaxY)
{
	IBase* pIBaseClass = (IBase *)pSMCContext;

	try {
		ISMCContext* pISMCContext = dynamic_cast<ISMCContext*>(pIBaseClass);
		if (!pISMCContext)
			throw ELibMCDriver_ScanLabSMCInterfaceException(LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDCAST);
		
		pISMCContext->SetLaserField(dMinX, dMinY, dMaxX, dMaxY);

		return LIBMCDRIVER_SCANLABSMC_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabSMCInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabSMCException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_smccontext_resetlaserfield(LibMCDriver_ScanLabSMC_SMCContext pSMCContext)
{
	IBase* pIBaseClass = (IBase *)pSMCContext;

	try {
		ISMCContext* pISMCContext = dynamic_cast<ISMCContext*>(pIBaseClass);
		if (!pISMCContext)
			throw ELibMCDriver_ScanLabSMCInterfaceException(LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDCAST);
		
		pISMCContext->ResetLaserField();

		return LIBMCDRIVER_SCANLABSMC_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabSMCInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabSMCException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_smccontext_getlaserfield(LibMCDriver_ScanLabSMC_SMCContext pSMCContext, LibMCDriver_ScanLabSMC_double * pMinX, LibMCDriver_ScanLabSMC_double * pMinY, LibMCDriver_ScanLabSMC_double * pMaxX, LibMCDriver_ScanLabSMC_double * pMaxY, bool * pHasLaserField)
{
	IBase* pIBaseClass = (IBase *)pSMCContext;

	try {
		if (!pMinX)
			throw ELibMCDriver_ScanLabSMCInterfaceException (LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDPARAM);
		if (!pMinY)
			throw ELibMCDriver_ScanLabSMCInterfaceException (LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDPARAM);
		if (!pMaxX)
			throw ELibMCDriver_ScanLabSMCInterfaceException (LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDPARAM);
		if (!pMaxY)
			throw ELibMCDriver_ScanLabSMCInterfaceException (LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDPARAM);
		if (pHasLaserField == nullptr)
			throw ELibMCDriver_ScanLabSMCInterfaceException (LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDPARAM);
		ISMCContext* pISMCContext = dynamic_cast<ISMCContext*>(pIBaseClass);
		if (!pISMCContext)
			throw ELibMCDriver_ScanLabSMCInterfaceException(LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDCAST);
		
		*pHasLaserField = pISMCContext->GetLaserField(*pMinX, *pMinY, *pMaxX, *pMaxY);

		return LIBMCDRIVER_SCANLABSMC_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabSMCInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabSMCException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_smccontext_beginjob(LibMCDriver_ScanLabSMC_SMCContext pSMCContext, LibMCDriver_ScanLabSMC_double dStartPositionX, LibMCDriver_ScanLabSMC_double dStartPositionY, eLibMCDriver_ScanLabSMCBlendMode eBlendMode, LibMCDriver_ScanLabSMC_SMCJob * pJobInstance)
{
	IBase* pIBaseClass = (IBase *)pSMCContext;

	try {
		if (pJobInstance == nullptr)
			throw ELibMCDriver_ScanLabSMCInterfaceException (LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDPARAM);
		IBase* pBaseJobInstance(nullptr);
		ISMCContext* pISMCContext = dynamic_cast<ISMCContext*>(pIBaseClass);
		if (!pISMCContext)
			throw ELibMCDriver_ScanLabSMCInterfaceException(LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDCAST);
		
		pBaseJobInstance = pISMCContext->BeginJob(dStartPositionX, dStartPositionY, eBlendMode);

		*pJobInstance = (IBase*)(pBaseJobInstance);
		return LIBMCDRIVER_SCANLABSMC_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabSMCInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabSMCException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_smccontext_getunfinishedjob(LibMCDriver_ScanLabSMC_SMCContext pSMCContext, LibMCDriver_ScanLabSMC_SMCJob * pJobInstance)
{
	IBase* pIBaseClass = (IBase *)pSMCContext;

	try {
		if (pJobInstance == nullptr)
			throw ELibMCDriver_ScanLabSMCInterfaceException (LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDPARAM);
		IBase* pBaseJobInstance(nullptr);
		ISMCContext* pISMCContext = dynamic_cast<ISMCContext*>(pIBaseClass);
		if (!pISMCContext)
			throw ELibMCDriver_ScanLabSMCInterfaceException(LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDCAST);
		
		pBaseJobInstance = pISMCContext->GetUnfinishedJob();

		*pJobInstance = (IBase*)(pBaseJobInstance);
		return LIBMCDRIVER_SCANLABSMC_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabSMCInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabSMCException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_smccontext_drawlayer(LibMCDriver_ScanLabSMC_SMCContext pSMCContext, const char * pStreamUUID, LibMCDriver_ScanLabSMC_uint32 nLayerIndex)
{
	IBase* pIBaseClass = (IBase *)pSMCContext;

	try {
		if (pStreamUUID == nullptr)
			throw ELibMCDriver_ScanLabSMCInterfaceException (LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDPARAM);
		std::string sStreamUUID(pStreamUUID);
		ISMCContext* pISMCContext = dynamic_cast<ISMCContext*>(pIBaseClass);
		if (!pISMCContext)
			throw ELibMCDriver_ScanLabSMCInterfaceException(LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDCAST);
		
		pISMCContext->DrawLayer(sStreamUUID, nLayerIndex);

		return LIBMCDRIVER_SCANLABSMC_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabSMCInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabSMCException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}


/*************************************************************************************************************************
 Class implementation for Driver_ScanLabSMC
**************************************************************************************************************************/
LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_driver_scanlabsmc_setdllresources(LibMCDriver_ScanLabSMC_Driver_ScanLabSMC pDriver_ScanLabSMC, const char * pSMCDLLResourceName, const char * pRTCDLLResourceName)
{
	IBase* pIBaseClass = (IBase *)pDriver_ScanLabSMC;

	try {
		if (pSMCDLLResourceName == nullptr)
			throw ELibMCDriver_ScanLabSMCInterfaceException (LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDPARAM);
		if (pRTCDLLResourceName == nullptr)
			throw ELibMCDriver_ScanLabSMCInterfaceException (LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDPARAM);
		std::string sSMCDLLResourceName(pSMCDLLResourceName);
		std::string sRTCDLLResourceName(pRTCDLLResourceName);
		IDriver_ScanLabSMC* pIDriver_ScanLabSMC = dynamic_cast<IDriver_ScanLabSMC*>(pIBaseClass);
		if (!pIDriver_ScanLabSMC)
			throw ELibMCDriver_ScanLabSMCInterfaceException(LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDCAST);
		
		pIDriver_ScanLabSMC->SetDLLResources(sSMCDLLResourceName, sRTCDLLResourceName);

		return LIBMCDRIVER_SCANLABSMC_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabSMCInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabSMCException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_driver_scanlabsmc_setxercesdllresource(LibMCDriver_ScanLabSMC_Driver_ScanLabSMC pDriver_ScanLabSMC, const char * pXercesDLLResourceName)
{
	IBase* pIBaseClass = (IBase *)pDriver_ScanLabSMC;

	try {
		if (pXercesDLLResourceName == nullptr)
			throw ELibMCDriver_ScanLabSMCInterfaceException (LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDPARAM);
		std::string sXercesDLLResourceName(pXercesDLLResourceName);
		IDriver_ScanLabSMC* pIDriver_ScanLabSMC = dynamic_cast<IDriver_ScanLabSMC*>(pIBaseClass);
		if (!pIDriver_ScanLabSMC)
			throw ELibMCDriver_ScanLabSMCInterfaceException(LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDCAST);
		
		pIDriver_ScanLabSMC->SetXercesDLLResource(sXercesDLLResourceName);

		return LIBMCDRIVER_SCANLABSMC_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabSMCInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabSMCException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_driver_scanlabsmc_setcustomdlldata(LibMCDriver_ScanLabSMC_Driver_ScanLabSMC pDriver_ScanLabSMC, LibMCDriver_ScanLabSMC_uint64 nSMCDLLResourceDataBufferSize, const LibMCDriver_ScanLabSMC_uint8 * pSMCDLLResourceDataBuffer, LibMCDriver_ScanLabSMC_uint64 nRTCDLLResourceDataBufferSize, const LibMCDriver_ScanLabSMC_uint8 * pRTCDLLResourceDataBuffer)
{
	IBase* pIBaseClass = (IBase *)pDriver_ScanLabSMC;

	try {
		if ( (!pSMCDLLResourceDataBuffer) && (nSMCDLLResourceDataBufferSize>0))
			throw ELibMCDriver_ScanLabSMCInterfaceException (LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDPARAM);
		if ( (!pRTCDLLResourceDataBuffer) && (nRTCDLLResourceDataBufferSize>0))
			throw ELibMCDriver_ScanLabSMCInterfaceException (LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDPARAM);
		IDriver_ScanLabSMC* pIDriver_ScanLabSMC = dynamic_cast<IDriver_ScanLabSMC*>(pIBaseClass);
		if (!pIDriver_ScanLabSMC)
			throw ELibMCDriver_ScanLabSMCInterfaceException(LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDCAST);
		
		pIDriver_ScanLabSMC->SetCustomDLLData(nSMCDLLResourceDataBufferSize, pSMCDLLResourceDataBuffer, nRTCDLLResourceDataBufferSize, pRTCDLLResourceDataBuffer);

		return LIBMCDRIVER_SCANLABSMC_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabSMCInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabSMCException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_driver_scanlabsmc_setcustomxercesdlldata(LibMCDriver_ScanLabSMC_Driver_ScanLabSMC pDriver_ScanLabSMC, LibMCDriver_ScanLabSMC_uint64 nXercesDLLResourceDataBufferSize, const LibMCDriver_ScanLabSMC_uint8 * pXercesDLLResourceDataBuffer)
{
	IBase* pIBaseClass = (IBase *)pDriver_ScanLabSMC;

	try {
		if ( (!pXercesDLLResourceDataBuffer) && (nXercesDLLResourceDataBufferSize>0))
			throw ELibMCDriver_ScanLabSMCInterfaceException (LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDPARAM);
		IDriver_ScanLabSMC* pIDriver_ScanLabSMC = dynamic_cast<IDriver_ScanLabSMC*>(pIBaseClass);
		if (!pIDriver_ScanLabSMC)
			throw ELibMCDriver_ScanLabSMCInterfaceException(LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDCAST);
		
		pIDriver_ScanLabSMC->SetCustomXercesDLLData(nXercesDLLResourceDataBufferSize, pXercesDLLResourceDataBuffer);

		return LIBMCDRIVER_SCANLABSMC_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabSMCInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabSMCException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_driver_scanlabsmc_loadsdk(LibMCDriver_ScanLabSMC_Driver_ScanLabSMC pDriver_ScanLabSMC)
{
	IBase* pIBaseClass = (IBase *)pDriver_ScanLabSMC;

	try {
		IDriver_ScanLabSMC* pIDriver_ScanLabSMC = dynamic_cast<IDriver_ScanLabSMC*>(pIBaseClass);
		if (!pIDriver_ScanLabSMC)
			throw ELibMCDriver_ScanLabSMCInterfaceException(LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDCAST);
		
		pIDriver_ScanLabSMC->LoadSDK();

		return LIBMCDRIVER_SCANLABSMC_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabSMCInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabSMCException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_driver_scanlabsmc_createcontext(LibMCDriver_ScanLabSMC_Driver_ScanLabSMC pDriver_ScanLabSMC, const char * pContextName, LibMCDriver_ScanLabSMC_SMCConfiguration pSMCConfiguration, LibMCDriver_ScanLabSMC_SMCContext * pInstance)
{
	IBase* pIBaseClass = (IBase *)pDriver_ScanLabSMC;

	try {
		if (pContextName == nullptr)
			throw ELibMCDriver_ScanLabSMCInterfaceException (LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDPARAM);
		if (pInstance == nullptr)
			throw ELibMCDriver_ScanLabSMCInterfaceException (LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDPARAM);
		std::string sContextName(pContextName);
		IBase* pIBaseClassSMCConfiguration = (IBase *)pSMCConfiguration;
		ISMCConfiguration* pISMCConfiguration = dynamic_cast<ISMCConfiguration*>(pIBaseClassSMCConfiguration);
		if (!pISMCConfiguration)
			throw ELibMCDriver_ScanLabSMCInterfaceException (LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDCAST);
		
		IBase* pBaseInstance(nullptr);
		IDriver_ScanLabSMC* pIDriver_ScanLabSMC = dynamic_cast<IDriver_ScanLabSMC*>(pIBaseClass);
		if (!pIDriver_ScanLabSMC)
			throw ELibMCDriver_ScanLabSMCInterfaceException(LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDCAST);
		
		pBaseInstance = pIDriver_ScanLabSMC->CreateContext(sContextName, pISMCConfiguration);

		*pInstance = (IBase*)(pBaseInstance);
		return LIBMCDRIVER_SCANLABSMC_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabSMCInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabSMCException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_driver_scanlabsmc_contextexists(LibMCDriver_ScanLabSMC_Driver_ScanLabSMC pDriver_ScanLabSMC, const char * pContextName, bool * pExists)
{
	IBase* pIBaseClass = (IBase *)pDriver_ScanLabSMC;

	try {
		if (pContextName == nullptr)
			throw ELibMCDriver_ScanLabSMCInterfaceException (LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDPARAM);
		if (pExists == nullptr)
			throw ELibMCDriver_ScanLabSMCInterfaceException (LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDPARAM);
		std::string sContextName(pContextName);
		IDriver_ScanLabSMC* pIDriver_ScanLabSMC = dynamic_cast<IDriver_ScanLabSMC*>(pIBaseClass);
		if (!pIDriver_ScanLabSMC)
			throw ELibMCDriver_ScanLabSMCInterfaceException(LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDCAST);
		
		*pExists = pIDriver_ScanLabSMC->ContextExists(sContextName);

		return LIBMCDRIVER_SCANLABSMC_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabSMCInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabSMCException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_driver_scanlabsmc_findcontext(LibMCDriver_ScanLabSMC_Driver_ScanLabSMC pDriver_ScanLabSMC, const char * pContextName, LibMCDriver_ScanLabSMC_SMCContext * pInstance)
{
	IBase* pIBaseClass = (IBase *)pDriver_ScanLabSMC;

	try {
		if (pContextName == nullptr)
			throw ELibMCDriver_ScanLabSMCInterfaceException (LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDPARAM);
		if (pInstance == nullptr)
			throw ELibMCDriver_ScanLabSMCInterfaceException (LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDPARAM);
		std::string sContextName(pContextName);
		IBase* pBaseInstance(nullptr);
		IDriver_ScanLabSMC* pIDriver_ScanLabSMC = dynamic_cast<IDriver_ScanLabSMC*>(pIBaseClass);
		if (!pIDriver_ScanLabSMC)
			throw ELibMCDriver_ScanLabSMCInterfaceException(LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDCAST);
		
		pBaseInstance = pIDriver_ScanLabSMC->FindContext(sContextName);

		*pInstance = (IBase*)(pBaseInstance);
		return LIBMCDRIVER_SCANLABSMC_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabSMCInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabSMCException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_driver_scanlabsmc_releasecontext(LibMCDriver_ScanLabSMC_Driver_ScanLabSMC pDriver_ScanLabSMC, const char * pContextName)
{
	IBase* pIBaseClass = (IBase *)pDriver_ScanLabSMC;

	try {
		if (pContextName == nullptr)
			throw ELibMCDriver_ScanLabSMCInterfaceException (LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDPARAM);
		std::string sContextName(pContextName);
		IDriver_ScanLabSMC* pIDriver_ScanLabSMC = dynamic_cast<IDriver_ScanLabSMC*>(pIBaseClass);
		if (!pIDriver_ScanLabSMC)
			throw ELibMCDriver_ScanLabSMCInterfaceException(LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDCAST);
		
		pIDriver_ScanLabSMC->ReleaseContext(sContextName);

		return LIBMCDRIVER_SCANLABSMC_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabSMCInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabSMCException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_driver_scanlabsmc_createemptyconfiguration(LibMCDriver_ScanLabSMC_Driver_ScanLabSMC pDriver_ScanLabSMC, LibMCDriver_ScanLabSMC_SMCConfiguration * pInstance)
{
	IBase* pIBaseClass = (IBase *)pDriver_ScanLabSMC;

	try {
		if (pInstance == nullptr)
			throw ELibMCDriver_ScanLabSMCInterfaceException (LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDPARAM);
		IBase* pBaseInstance(nullptr);
		IDriver_ScanLabSMC* pIDriver_ScanLabSMC = dynamic_cast<IDriver_ScanLabSMC*>(pIBaseClass);
		if (!pIDriver_ScanLabSMC)
			throw ELibMCDriver_ScanLabSMCInterfaceException(LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDCAST);
		
		pBaseInstance = pIDriver_ScanLabSMC->CreateEmptyConfiguration();

		*pInstance = (IBase*)(pBaseInstance);
		return LIBMCDRIVER_SCANLABSMC_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabSMCInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabSMCException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_driver_scanlabsmc_createtemplateconfiguration(LibMCDriver_ScanLabSMC_Driver_ScanLabSMC pDriver_ScanLabSMC, const char * pTemplateName, LibMCDriver_ScanLabSMC_SMCConfiguration * pInstance)
{
	IBase* pIBaseClass = (IBase *)pDriver_ScanLabSMC;

	try {
		if (pTemplateName == nullptr)
			throw ELibMCDriver_ScanLabSMCInterfaceException (LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDPARAM);
		if (pInstance == nullptr)
			throw ELibMCDriver_ScanLabSMCInterfaceException (LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDPARAM);
		std::string sTemplateName(pTemplateName);
		IBase* pBaseInstance(nullptr);
		IDriver_ScanLabSMC* pIDriver_ScanLabSMC = dynamic_cast<IDriver_ScanLabSMC*>(pIBaseClass);
		if (!pIDriver_ScanLabSMC)
			throw ELibMCDriver_ScanLabSMCInterfaceException(LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDCAST);
		
		pBaseInstance = pIDriver_ScanLabSMC->CreateTemplateConfiguration(sTemplateName);

		*pInstance = (IBase*)(pBaseInstance);
		return LIBMCDRIVER_SCANLABSMC_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabSMCInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabSMCException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}



/*************************************************************************************************************************
 Function table lookup implementation
**************************************************************************************************************************/

LibMCDriver_ScanLabSMCResult LibMCDriver_ScanLabSMC::Impl::LibMCDriver_ScanLabSMC_GetProcAddress (const char * pProcName, void ** ppProcAddress)
{
	if (pProcName == nullptr)
		return LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDPARAM;
	if (ppProcAddress == nullptr)
		return LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDPARAM;
	*ppProcAddress = nullptr;
	std::string sProcName (pProcName);
	
	if (sProcName == "libmcdriver_scanlabsmc_driver_configure") 
		*ppProcAddress = (void*) &libmcdriver_scanlabsmc_driver_configure;
	if (sProcName == "libmcdriver_scanlabsmc_driver_getname") 
		*ppProcAddress = (void*) &libmcdriver_scanlabsmc_driver_getname;
	if (sProcName == "libmcdriver_scanlabsmc_driver_gettype") 
		*ppProcAddress = (void*) &libmcdriver_scanlabsmc_driver_gettype;
	if (sProcName == "libmcdriver_scanlabsmc_driver_getversion") 
		*ppProcAddress = (void*) &libmcdriver_scanlabsmc_driver_getversion;
	if (sProcName == "libmcdriver_scanlabsmc_driver_queryparameters") 
		*ppProcAddress = (void*) &libmcdriver_scanlabsmc_driver_queryparameters;
	if (sProcName == "libmcdriver_scanlabsmc_driver_queryparametersex") 
		*ppProcAddress = (void*) &libmcdriver_scanlabsmc_driver_queryparametersex;
	if (sProcName == "libmcdriver_scanlabsmc_smcjob_getjobid") 
		*ppProcAddress = (void*) &libmcdriver_scanlabsmc_smcjob_getjobid;
	if (sProcName == "libmcdriver_scanlabsmc_smcjob_finalize") 
		*ppProcAddress = (void*) &libmcdriver_scanlabsmc_smcjob_finalize;
	if (sProcName == "libmcdriver_scanlabsmc_smcjob_isfinalized") 
		*ppProcAddress = (void*) &libmcdriver_scanlabsmc_smcjob_isfinalized;
	if (sProcName == "libmcdriver_scanlabsmc_smcjob_drawpolyline") 
		*ppProcAddress = (void*) &libmcdriver_scanlabsmc_smcjob_drawpolyline;
	if (sProcName == "libmcdriver_scanlabsmc_smcjob_drawloop") 
		*ppProcAddress = (void*) &libmcdriver_scanlabsmc_smcjob_drawloop;
	if (sProcName == "libmcdriver_scanlabsmc_smcjob_drawhatches") 
		*ppProcAddress = (void*) &libmcdriver_scanlabsmc_smcjob_drawhatches;
	if (sProcName == "libmcdriver_scanlabsmc_smcjob_addlayertolist") 
		*ppProcAddress = (void*) &libmcdriver_scanlabsmc_smcjob_addlayertolist;
	if (sProcName == "libmcdriver_scanlabsmc_smcjob_isready") 
		*ppProcAddress = (void*) &libmcdriver_scanlabsmc_smcjob_isready;
	if (sProcName == "libmcdriver_scanlabsmc_smcjob_execute") 
		*ppProcAddress = (void*) &libmcdriver_scanlabsmc_smcjob_execute;
	if (sProcName == "libmcdriver_scanlabsmc_smcjob_isexecuting") 
		*ppProcAddress = (void*) &libmcdriver_scanlabsmc_smcjob_isexecuting;
	if (sProcName == "libmcdriver_scanlabsmc_smcjob_waitforexecution") 
		*ppProcAddress = (void*) &libmcdriver_scanlabsmc_smcjob_waitforexecution;
	if (sProcName == "libmcdriver_scanlabsmc_smcjob_stopexecution") 
		*ppProcAddress = (void*) &libmcdriver_scanlabsmc_smcjob_stopexecution;
	if (sProcName == "libmcdriver_scanlabsmc_smcjob_loadsimulationdata") 
		*ppProcAddress = (void*) &libmcdriver_scanlabsmc_smcjob_loadsimulationdata;
	if (sProcName == "libmcdriver_scanlabsmc_smcconfiguration_setdynamicviolationreaction") 
		*ppProcAddress = (void*) &libmcdriver_scanlabsmc_smcconfiguration_setdynamicviolationreaction;
	if (sProcName == "libmcdriver_scanlabsmc_smcconfiguration_getdynamicviolationreaction") 
		*ppProcAddress = (void*) &libmcdriver_scanlabsmc_smcconfiguration_getdynamicviolationreaction;
	if (sProcName == "libmcdriver_scanlabsmc_smcconfiguration_setwarnlevel") 
		*ppProcAddress = (void*) &libmcdriver_scanlabsmc_smcconfiguration_setwarnlevel;
	if (sProcName == "libmcdriver_scanlabsmc_smcconfiguration_getwarnlevel") 
		*ppProcAddress = (void*) &libmcdriver_scanlabsmc_smcconfiguration_getwarnlevel;
	if (sProcName == "libmcdriver_scanlabsmc_smcconfiguration_setserialnumber") 
		*ppProcAddress = (void*) &libmcdriver_scanlabsmc_smcconfiguration_setserialnumber;
	if (sProcName == "libmcdriver_scanlabsmc_smcconfiguration_getserialnumber") 
		*ppProcAddress = (void*) &libmcdriver_scanlabsmc_smcconfiguration_getserialnumber;
	if (sProcName == "libmcdriver_scanlabsmc_smcconfiguration_setipaddress") 
		*ppProcAddress = (void*) &libmcdriver_scanlabsmc_smcconfiguration_setipaddress;
	if (sProcName == "libmcdriver_scanlabsmc_smcconfiguration_getipaddress") 
		*ppProcAddress = (void*) &libmcdriver_scanlabsmc_smcconfiguration_getipaddress;
	if (sProcName == "libmcdriver_scanlabsmc_smcconfiguration_setcorrectionfile") 
		*ppProcAddress = (void*) &libmcdriver_scanlabsmc_smcconfiguration_setcorrectionfile;
	if (sProcName == "libmcdriver_scanlabsmc_smcconfiguration_setcorrectionfileresource") 
		*ppProcAddress = (void*) &libmcdriver_scanlabsmc_smcconfiguration_setcorrectionfileresource;
	if (sProcName == "libmcdriver_scanlabsmc_smcconfiguration_setconfigurationtemplate") 
		*ppProcAddress = (void*) &libmcdriver_scanlabsmc_smcconfiguration_setconfigurationtemplate;
	if (sProcName == "libmcdriver_scanlabsmc_smcconfiguration_setconfigurationtemplateresource") 
		*ppProcAddress = (void*) &libmcdriver_scanlabsmc_smcconfiguration_setconfigurationtemplateresource;
	if (sProcName == "libmcdriver_scanlabsmc_smcconfiguration_getconfigurationtemplate") 
		*ppProcAddress = (void*) &libmcdriver_scanlabsmc_smcconfiguration_getconfigurationtemplate;
	if (sProcName == "libmcdriver_scanlabsmc_smcconfiguration_setsimulationsubdirectory") 
		*ppProcAddress = (void*) &libmcdriver_scanlabsmc_smcconfiguration_setsimulationsubdirectory;
	if (sProcName == "libmcdriver_scanlabsmc_smcconfiguration_getsimulationsubdirectory") 
		*ppProcAddress = (void*) &libmcdriver_scanlabsmc_smcconfiguration_getsimulationsubdirectory;
	if (sProcName == "libmcdriver_scanlabsmc_smcconfiguration_setfirmware") 
		*ppProcAddress = (void*) &libmcdriver_scanlabsmc_smcconfiguration_setfirmware;
	if (sProcName == "libmcdriver_scanlabsmc_smcconfiguration_setfirmwareresources") 
		*ppProcAddress = (void*) &libmcdriver_scanlabsmc_smcconfiguration_setfirmwareresources;
	if (sProcName == "libmcdriver_scanlabsmc_smccontext_settosimulationmode") 
		*ppProcAddress = (void*) &libmcdriver_scanlabsmc_smccontext_settosimulationmode;
	if (sProcName == "libmcdriver_scanlabsmc_smccontext_issimulationmode") 
		*ppProcAddress = (void*) &libmcdriver_scanlabsmc_smccontext_issimulationmode;
	if (sProcName == "libmcdriver_scanlabsmc_smccontext_reinitializeinstance") 
		*ppProcAddress = (void*) &libmcdriver_scanlabsmc_smccontext_reinitializeinstance;
	if (sProcName == "libmcdriver_scanlabsmc_smccontext_getipaddress") 
		*ppProcAddress = (void*) &libmcdriver_scanlabsmc_smccontext_getipaddress;
	if (sProcName == "libmcdriver_scanlabsmc_smccontext_getnetmask") 
		*ppProcAddress = (void*) &libmcdriver_scanlabsmc_smccontext_getnetmask;
	if (sProcName == "libmcdriver_scanlabsmc_smccontext_getserialnumber") 
		*ppProcAddress = (void*) &libmcdriver_scanlabsmc_smccontext_getserialnumber;
	if (sProcName == "libmcdriver_scanlabsmc_smccontext_getsimulationsubdirectory") 
		*ppProcAddress = (void*) &libmcdriver_scanlabsmc_smccontext_getsimulationsubdirectory;
	if (sProcName == "libmcdriver_scanlabsmc_smccontext_getlaserindex") 
		*ppProcAddress = (void*) &libmcdriver_scanlabsmc_smccontext_getlaserindex;
	if (sProcName == "libmcdriver_scanlabsmc_smccontext_setlaserorigin") 
		*ppProcAddress = (void*) &libmcdriver_scanlabsmc_smccontext_setlaserorigin;
	if (sProcName == "libmcdriver_scanlabsmc_smccontext_getlaserorigin") 
		*ppProcAddress = (void*) &libmcdriver_scanlabsmc_smccontext_getlaserorigin;
	if (sProcName == "libmcdriver_scanlabsmc_smccontext_setlaserfield") 
		*ppProcAddress = (void*) &libmcdriver_scanlabsmc_smccontext_setlaserfield;
	if (sProcName == "libmcdriver_scanlabsmc_smccontext_resetlaserfield") 
		*ppProcAddress = (void*) &libmcdriver_scanlabsmc_smccontext_resetlaserfield;
	if (sProcName == "libmcdriver_scanlabsmc_smccontext_getlaserfield") 
		*ppProcAddress = (void*) &libmcdriver_scanlabsmc_smccontext_getlaserfield;
	if (sProcName == "libmcdriver_scanlabsmc_smccontext_beginjob") 
		*ppProcAddress = (void*) &libmcdriver_scanlabsmc_smccontext_beginjob;
	if (sProcName == "libmcdriver_scanlabsmc_smccontext_getunfinishedjob") 
		*ppProcAddress = (void*) &libmcdriver_scanlabsmc_smccontext_getunfinishedjob;
	if (sProcName == "libmcdriver_scanlabsmc_smccontext_drawlayer") 
		*ppProcAddress = (void*) &libmcdriver_scanlabsmc_smccontext_drawlayer;
	if (sProcName == "libmcdriver_scanlabsmc_driver_scanlabsmc_setdllresources") 
		*ppProcAddress = (void*) &libmcdriver_scanlabsmc_driver_scanlabsmc_setdllresources;
	if (sProcName == "libmcdriver_scanlabsmc_driver_scanlabsmc_setxercesdllresource") 
		*ppProcAddress = (void*) &libmcdriver_scanlabsmc_driver_scanlabsmc_setxercesdllresource;
	if (sProcName == "libmcdriver_scanlabsmc_driver_scanlabsmc_setcustomdlldata") 
		*ppProcAddress = (void*) &libmcdriver_scanlabsmc_driver_scanlabsmc_setcustomdlldata;
	if (sProcName == "libmcdriver_scanlabsmc_driver_scanlabsmc_setcustomxercesdlldata") 
		*ppProcAddress = (void*) &libmcdriver_scanlabsmc_driver_scanlabsmc_setcustomxercesdlldata;
	if (sProcName == "libmcdriver_scanlabsmc_driver_scanlabsmc_loadsdk") 
		*ppProcAddress = (void*) &libmcdriver_scanlabsmc_driver_scanlabsmc_loadsdk;
	if (sProcName == "libmcdriver_scanlabsmc_driver_scanlabsmc_createcontext") 
		*ppProcAddress = (void*) &libmcdriver_scanlabsmc_driver_scanlabsmc_createcontext;
	if (sProcName == "libmcdriver_scanlabsmc_driver_scanlabsmc_contextexists") 
		*ppProcAddress = (void*) &libmcdriver_scanlabsmc_driver_scanlabsmc_contextexists;
	if (sProcName == "libmcdriver_scanlabsmc_driver_scanlabsmc_findcontext") 
		*ppProcAddress = (void*) &libmcdriver_scanlabsmc_driver_scanlabsmc_findcontext;
	if (sProcName == "libmcdriver_scanlabsmc_driver_scanlabsmc_releasecontext") 
		*ppProcAddress = (void*) &libmcdriver_scanlabsmc_driver_scanlabsmc_releasecontext;
	if (sProcName == "libmcdriver_scanlabsmc_driver_scanlabsmc_createemptyconfiguration") 
		*ppProcAddress = (void*) &libmcdriver_scanlabsmc_driver_scanlabsmc_createemptyconfiguration;
	if (sProcName == "libmcdriver_scanlabsmc_driver_scanlabsmc_createtemplateconfiguration") 
		*ppProcAddress = (void*) &libmcdriver_scanlabsmc_driver_scanlabsmc_createtemplateconfiguration;
	if (sProcName == "libmcdriver_scanlabsmc_getversion") 
		*ppProcAddress = (void*) &libmcdriver_scanlabsmc_getversion;
	if (sProcName == "libmcdriver_scanlabsmc_getlasterror") 
		*ppProcAddress = (void*) &libmcdriver_scanlabsmc_getlasterror;
	if (sProcName == "libmcdriver_scanlabsmc_releaseinstance") 
		*ppProcAddress = (void*) &libmcdriver_scanlabsmc_releaseinstance;
	if (sProcName == "libmcdriver_scanlabsmc_acquireinstance") 
		*ppProcAddress = (void*) &libmcdriver_scanlabsmc_acquireinstance;
	if (sProcName == "libmcdriver_scanlabsmc_injectcomponent") 
		*ppProcAddress = (void*) &libmcdriver_scanlabsmc_injectcomponent;
	if (sProcName == "libmcdriver_scanlabsmc_getsymbollookupmethod") 
		*ppProcAddress = (void*) &libmcdriver_scanlabsmc_getsymbollookupmethod;
	if (sProcName == "libmcdriver_scanlabsmc_createdriver") 
		*ppProcAddress = (void*) &libmcdriver_scanlabsmc_createdriver;
	
	if (*ppProcAddress == nullptr) 
		return LIBMCDRIVER_SCANLABSMC_ERROR_COULDNOTFINDLIBRARYEXPORT;
	return LIBMCDRIVER_SCANLABSMC_SUCCESS;
}

/*************************************************************************************************************************
 Global functions implementation
**************************************************************************************************************************/
LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_getversion(LibMCDriver_ScanLabSMC_uint32 * pMajor, LibMCDriver_ScanLabSMC_uint32 * pMinor, LibMCDriver_ScanLabSMC_uint32 * pMicro)
{
	IBase* pIBaseClass = nullptr;

	try {
		if (!pMajor)
			throw ELibMCDriver_ScanLabSMCInterfaceException (LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDPARAM);
		if (!pMinor)
			throw ELibMCDriver_ScanLabSMCInterfaceException (LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDPARAM);
		if (!pMicro)
			throw ELibMCDriver_ScanLabSMCInterfaceException (LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDPARAM);
		CWrapper::GetVersion(*pMajor, *pMinor, *pMicro);

		return LIBMCDRIVER_SCANLABSMC_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabSMCInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabSMCException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_getlasterror(LibMCDriver_ScanLabSMC_Base pInstance, const LibMCDriver_ScanLabSMC_uint32 nErrorMessageBufferSize, LibMCDriver_ScanLabSMC_uint32* pErrorMessageNeededChars, char * pErrorMessageBuffer, bool * pHasError)
{
	IBase* pIBaseClass = nullptr;

	try {
		if ( (!pErrorMessageBuffer) && !(pErrorMessageNeededChars) )
			throw ELibMCDriver_ScanLabSMCInterfaceException (LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDPARAM);
		if (pHasError == nullptr)
			throw ELibMCDriver_ScanLabSMCInterfaceException (LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDPARAM);
		IBase* pIBaseClassInstance = (IBase *)pInstance;
		IBase* pIInstance = dynamic_cast<IBase*>(pIBaseClassInstance);
		if (!pIInstance)
			throw ELibMCDriver_ScanLabSMCInterfaceException (LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDCAST);
		
		std::string sErrorMessage("");
		*pHasError = CWrapper::GetLastError(pIInstance, sErrorMessage);

		if (pErrorMessageNeededChars)
			*pErrorMessageNeededChars = (LibMCDriver_ScanLabSMC_uint32) (sErrorMessage.size()+1);
		if (pErrorMessageBuffer) {
			if (sErrorMessage.size() >= nErrorMessageBufferSize)
				throw ELibMCDriver_ScanLabSMCInterfaceException (LIBMCDRIVER_SCANLABSMC_ERROR_BUFFERTOOSMALL);
			for (size_t iErrorMessage = 0; iErrorMessage < sErrorMessage.size(); iErrorMessage++)
				pErrorMessageBuffer[iErrorMessage] = sErrorMessage[iErrorMessage];
			pErrorMessageBuffer[sErrorMessage.size()] = 0;
		}
		return LIBMCDRIVER_SCANLABSMC_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabSMCInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabSMCException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_releaseinstance(LibMCDriver_ScanLabSMC_Base pInstance)
{
	IBase* pIBaseClass = nullptr;

	try {
		IBase* pIBaseClassInstance = (IBase *)pInstance;
		IBase* pIInstance = dynamic_cast<IBase*>(pIBaseClassInstance);
		if (!pIInstance)
			throw ELibMCDriver_ScanLabSMCInterfaceException (LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDCAST);
		
		CWrapper::ReleaseInstance(pIInstance);

		return LIBMCDRIVER_SCANLABSMC_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabSMCInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabSMCException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_acquireinstance(LibMCDriver_ScanLabSMC_Base pInstance)
{
	IBase* pIBaseClass = nullptr;

	try {
		IBase* pIBaseClassInstance = (IBase *)pInstance;
		IBase* pIInstance = dynamic_cast<IBase*>(pIBaseClassInstance);
		if (!pIInstance)
			throw ELibMCDriver_ScanLabSMCInterfaceException (LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDCAST);
		
		CWrapper::AcquireInstance(pIInstance);

		return LIBMCDRIVER_SCANLABSMC_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabSMCInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabSMCException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_injectcomponent(const char * pNameSpace, LibMCDriver_ScanLabSMC_pvoid pSymbolAddressMethod)
{
	IBase* pIBaseClass = nullptr;

	try {
		if (pNameSpace == nullptr)
			throw ELibMCDriver_ScanLabSMCInterfaceException (LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDPARAM);
		std::string sNameSpace(pNameSpace);
		
		bool bNameSpaceFound = false;
		
		if (sNameSpace == "LibMCEnv") {
			if (CWrapper::sPLibMCEnvWrapper.get() != nullptr) {
				throw ELibMCDriver_ScanLabSMCInterfaceException(LIBMCDRIVER_SCANLABSMC_ERROR_COULDNOTLOADLIBRARY);
			}
			CWrapper::sPLibMCEnvWrapper = LibMCEnv::CWrapper::loadLibraryFromSymbolLookupMethod(pSymbolAddressMethod);
			bNameSpaceFound = true;
		}
		
		if (!bNameSpaceFound)
			throw ELibMCDriver_ScanLabSMCInterfaceException(LIBMCDRIVER_SCANLABSMC_ERROR_COULDNOTLOADLIBRARY);
		
		return LIBMCDRIVER_SCANLABSMC_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabSMCInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabSMCException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_getsymbollookupmethod(LibMCDriver_ScanLabSMC_pvoid * pSymbolLookupMethod)
{
	IBase* pIBaseClass = nullptr;

	try {
		if (pSymbolLookupMethod == nullptr)
			throw ELibMCDriver_ScanLabSMCInterfaceException (LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDPARAM);
		*pSymbolLookupMethod = (void*)&LibMCDriver_ScanLabSMC::Impl::LibMCDriver_ScanLabSMC_GetProcAddress;
		return LIBMCDRIVER_SCANLABSMC_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabSMCInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabSMCException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_createdriver(const char * pName, const char * pType, LibMCEnv_DriverEnvironment pDriverEnvironment, LibMCDriver_ScanLabSMC_Driver * pInstance)
{
	IBase* pIBaseClass = nullptr;

	try {
		if (pName == nullptr)
			throw ELibMCDriver_ScanLabSMCInterfaceException (LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDPARAM);
		if (pType == nullptr)
			throw ELibMCDriver_ScanLabSMCInterfaceException (LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDPARAM);
		if (pInstance == nullptr)
			throw ELibMCDriver_ScanLabSMCInterfaceException (LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDPARAM);
		std::string sName(pName);
		std::string sType(pType);
		LibMCEnv::PDriverEnvironment pIDriverEnvironment = std::make_shared<LibMCEnv::CDriverEnvironment>(CWrapper::sPLibMCEnvWrapper.get(), pDriverEnvironment);
		CWrapper::sPLibMCEnvWrapper->AcquireInstance(pIDriverEnvironment.get());
		if (!pIDriverEnvironment)
			throw ELibMCDriver_ScanLabSMCInterfaceException (LIBMCDRIVER_SCANLABSMC_ERROR_INVALIDCAST);
		
		IBase* pBaseInstance(nullptr);
		pBaseInstance = CWrapper::CreateDriver(sName, sType, pIDriverEnvironment);

		*pInstance = (IBase*)(pBaseInstance);
		return LIBMCDRIVER_SCANLABSMC_SUCCESS;
	}
	catch (ELibMCDriver_ScanLabSMCInterfaceException & Exception) {
		return handleLibMCDriver_ScanLabSMCException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}


