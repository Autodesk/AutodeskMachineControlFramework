/*++

Copyright (C) 2023 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.8.0-develop.

Abstract: This is an autogenerated C++ header file in order to allow easy
development of MC Driver ScanLab SCANmotionControl. The implementer of MC Driver ScanLab SCANmotionControl needs to
derive concrete classes from the abstract classes in this header.

Interface version: 2.0.0

*/


#ifndef __LIBMCDRIVER_SCANLABSMC_CPPINTERFACES
#define __LIBMCDRIVER_SCANLABSMC_CPPINTERFACES

#include <string>
#include <memory>

#include "libmcdriver_scanlabsmc_types.hpp"


#include "libmcenv_dynamic.hpp"

namespace LibMCDriver_ScanLabSMC {
namespace Impl {

/**
 Forward declarations of class interfaces
*/
class IBase;
class IDriver;
class ISMCJob;
class ISMCConfiguration;
class ISMCContext;
class IDriver_ScanLabSMC;



/*************************************************************************************************************************
 Parameter Cache definitions
**************************************************************************************************************************/

class ParameterCache {
	public:
		virtual ~ParameterCache() {}
};

template <class T1> class ParameterCache_1 : public ParameterCache {
	private:
		T1 m_param1;
	public:
		ParameterCache_1 (const T1 & param1)
			: m_param1 (param1)
		{
		}

		void retrieveData (T1 & param1)
		{
			param1 = m_param1;
		}
};

template <class T1, class T2> class ParameterCache_2 : public ParameterCache {
	private:
		T1 m_param1;
		T2 m_param2;
	public:
		ParameterCache_2 (const T1 & param1, const T2 & param2)
			: m_param1 (param1), m_param2 (param2)
		{
		}

		void retrieveData (T1 & param1, T2 & param2)
		{
			param1 = m_param1;
			param2 = m_param2;
		}
};

template <class T1, class T2, class T3> class ParameterCache_3 : public ParameterCache {
	private:
		T1 m_param1;
		T2 m_param2;
		T3 m_param3;
	public:
		ParameterCache_3 (const T1 & param1, const T2 & param2, const T3 & param3)
			: m_param1 (param1), m_param2 (param2), m_param3 (param3)
		{
		}

		void retrieveData (T1 & param1, T2 & param2, T3 & param3)
		{
			param1 = m_param1;
			param2 = m_param2;
			param3 = m_param3;
		}
};

template <class T1, class T2, class T3, class T4> class ParameterCache_4 : public ParameterCache {
	private:
		T1 m_param1;
		T2 m_param2;
		T3 m_param3;
		T4 m_param4;
	public:
		ParameterCache_4 (const T1 & param1, const T2 & param2, const T3 & param3, const T4 & param4)
			: m_param1 (param1), m_param2 (param2), m_param3 (param3), m_param4 (param4)
		{
		}

		void retrieveData (T1 & param1, T2 & param2, T3 & param3, T4 & param4)
		{
			param1 = m_param1;
			param2 = m_param2;
			param3 = m_param3;
			param4 = m_param4;
		}
};

template <class T1, class T2, class T3, class T4, class T5> class ParameterCache_5 : public ParameterCache {
	private:
		T1 m_param1;
		T2 m_param2;
		T3 m_param3;
		T4 m_param4;
		T5 m_param5;
	public:
		ParameterCache_5 (const T1 & param1, const T2 & param2, const T3 & param3, const T4 & param4, const T5 & param5)
			: m_param1 (param1), m_param2 (param2), m_param3 (param3), m_param4 (param4), m_param5 (param5)
		{
		}

		void retrieveData (T1 & param1, T2 & param2, T3 & param3, T4 & param4, T5 & param5)
		{
			param1 = m_param1;
			param2 = m_param2;
			param3 = m_param3;
			param4 = m_param4;
			param5 = m_param5;
		}
};


/*************************************************************************************************************************
 Class interface for Base 
**************************************************************************************************************************/

class IBase {
private:
	std::unique_ptr<ParameterCache> m_ParameterCache;
public:
	/**
	* IBase::~IBase - virtual destructor of IBase
	*/
	virtual ~IBase() {};

	/**
	* IBase::ReleaseBaseClassInterface - Releases ownership of a base class interface. Deletes the reference, if necessary.
	* @param[in] pIBase - The base class instance to release
	*/
	static void ReleaseBaseClassInterface(IBase* pIBase)
	{
		if (pIBase) {
			pIBase->DecRefCount();
		}
	};

	/**
	* IBase::AcquireBaseClassInterface - Acquires shared ownership of a base class interface.
	* @param[in] pIBase - The base class instance to acquire
	*/
	static void AcquireBaseClassInterface(IBase* pIBase)
	{
		if (pIBase) {
			pIBase->IncRefCount();
		}
	};


	/**
	* IBase::GetLastErrorMessage - Returns the last error registered of this class instance
	* @param[out] sErrorMessage - Message of the last error registered
	* @return Has an error been registered already
	*/
	virtual bool GetLastErrorMessage(std::string & sErrorMessage) = 0;

	/**
	* IBase::ClearErrorMessages - Clears all registered messages of this class instance
	*/
	virtual void ClearErrorMessages() = 0;

	/**
	* IBase::RegisterErrorMessage - Registers an error message with this class instance
	* @param[in] sErrorMessage - Error message to register
	*/
	virtual void RegisterErrorMessage(const std::string & sErrorMessage) = 0;

	/**
	* IBase::IncRefCount - Increases the reference count of a class instance
	*/
	virtual void IncRefCount() = 0;

	/**
	* IBase::DecRefCount - Decreases the reference count of a class instance and free releases it, if the last reference has been removed
	* @return Has the object been released
	*/
	virtual bool DecRefCount() = 0;

	/**
	* IBase::_setCache - set parameter cache of object
	*/
	void _setCache(ParameterCache * pCache)
	{
		m_ParameterCache.reset(pCache);
	}

	/**
	* IBase::_getCache - returns parameter cache of object
	*/
	ParameterCache* _getCache()
	{
		return m_ParameterCache.get();
	}

};


/**
 Definition of a shared pointer class for IBase
*/
template<class T>
class IBaseSharedPtr : public std::shared_ptr<T>
{
public:
	explicit IBaseSharedPtr(T* t = nullptr)
		: std::shared_ptr<T>(t, IBase::ReleaseBaseClassInterface)
	{
		t->IncRefCount();
	}

	// Reset function, as it also needs to properly set the deleter.
	void reset(T* t = nullptr)
	{
		std::shared_ptr<T>::reset(t, IBase::ReleaseBaseClassInterface);
	}

	// Get-function that increases the Base class's reference count
	T* getCoOwningPtr()
	{
		T* t = this->get();
		t->IncRefCount();
		return t;
	}
};


typedef IBaseSharedPtr<IBase> PIBase;


/*************************************************************************************************************************
 Class interface for Driver 
**************************************************************************************************************************/

class IDriver : public virtual IBase {
public:
	/**
	* IDriver::Configure - Configures a driver with its specific configuration data.
	* @param[in] sConfigurationString - Configuration data of driver.
	*/
	virtual void Configure(const std::string & sConfigurationString) = 0;

	/**
	* IDriver::GetName - returns the name identifier of the driver
	* @return Name of the driver.
	*/
	virtual std::string GetName() = 0;

	/**
	* IDriver::GetType - returns the type identifier of the driver
	* @return Type of the driver.
	*/
	virtual std::string GetType() = 0;

	/**
	* IDriver::GetVersion - returns the version identifiers of the driver
	* @param[out] nMajor - Major version.
	* @param[out] nMinor - Minor version.
	* @param[out] nMicro - Micro version.
	* @param[out] sBuild - Build identifier.
	*/
	virtual void GetVersion(LibMCDriver_ScanLabSMC_uint32 & nMajor, LibMCDriver_ScanLabSMC_uint32 & nMinor, LibMCDriver_ScanLabSMC_uint32 & nMicro, std::string & sBuild) = 0;

	/**
	* IDriver::QueryParameters - Updates the driver parameters in the driver environment. Should only be called in the driver thread.
	*/
	virtual void QueryParameters() = 0;

	/**
	* IDriver::QueryParametersEx - Updates the driver parameters in the driver environment. Might be called out of thread. Implementation MUST be able to handle parallel calls.
	* @param[in] pDriverUpdateInstance - Status update instance.
	*/
	virtual void QueryParametersEx(LibMCEnv::PDriverStatusUpdateSession pDriverUpdateInstance) = 0;

};

typedef IBaseSharedPtr<IDriver> PIDriver;


/*************************************************************************************************************************
 Class interface for SMCJob 
**************************************************************************************************************************/

class ISMCJob : public virtual IBase {
public:
	/**
	* ISMCJob::GetJobID - Returns the Job ID
	* @return Job ID.
	*/
	virtual LibMCDriver_ScanLabSMC_uint64 GetJobID() = 0;

	/**
	* ISMCJob::Finalize - Finalizes the job definition.
	*/
	virtual void Finalize() = 0;

	/**
	* ISMCJob::IsFinalized - Returns if job is finalized.
	* @return If flag returns false, new data can be written to the job.
	*/
	virtual bool IsFinalized() = 0;

	/**
	* ISMCJob::DrawPolyline - Writes a polyline into the open list
	* @param[in] nPointsBufferSize - Number of elements in buffer
	* @param[in] pPointsBuffer - Points of polyline to draw.
	* @param[in] dMarkSpeed - Mark speed in mm/s
	* @param[in] dMinimalMarkSpeed - Minimal allowed mark speed in mm/s
	* @param[in] dJumpSpeed - Jump speed in mm/s
	* @param[in] dPower - Laser power in percent
	* @param[in] dCornerTolerance - Allowed position deviation on corners (in mm.)
	* @param[in] dZValue - Focus Z Value
	*/
	virtual void DrawPolyline(const LibMCDriver_ScanLabSMC_uint64 nPointsBufferSize, const LibMCDriver_ScanLabSMC::sPoint2D * pPointsBuffer, const LibMCDriver_ScanLabSMC_double dMarkSpeed, const LibMCDriver_ScanLabSMC_double dMinimalMarkSpeed, const LibMCDriver_ScanLabSMC_double dJumpSpeed, const LibMCDriver_ScanLabSMC_double dPower, const LibMCDriver_ScanLabSMC_double dCornerTolerance, const LibMCDriver_ScanLabSMC_double dZValue) = 0;

	/**
	* ISMCJob::DrawLoop - Writes a loop into the open list
	* @param[in] nPointsBufferSize - Number of elements in buffer
	* @param[in] pPointsBuffer - Points of polyline to draw.
	* @param[in] dMarkSpeed - Mark speed in mm/s
	* @param[in] dMinimalMarkSpeed - Minimal allowed mark speed in mm/s
	* @param[in] dJumpSpeed - Jump speed in mm/s
	* @param[in] dPower - Laser power in percent
	* @param[in] dCornerTolerance - Allowed position deviation on corners (in mm.)
	* @param[in] dZValue - Focus Z Value
	*/
	virtual void DrawLoop(const LibMCDriver_ScanLabSMC_uint64 nPointsBufferSize, const LibMCDriver_ScanLabSMC::sPoint2D * pPointsBuffer, const LibMCDriver_ScanLabSMC_double dMarkSpeed, const LibMCDriver_ScanLabSMC_double dMinimalMarkSpeed, const LibMCDriver_ScanLabSMC_double dJumpSpeed, const LibMCDriver_ScanLabSMC_double dPower, const LibMCDriver_ScanLabSMC_double dCornerTolerance, const LibMCDriver_ScanLabSMC_double dZValue) = 0;

	/**
	* ISMCJob::DrawHatches - Writes a list of hatches into the open list
	* @param[in] nHatchesBufferSize - Number of elements in buffer
	* @param[in] pHatchesBuffer - Hatches to draw.
	* @param[in] dMarkSpeed - Mark speed in mm/s
	* @param[in] dJumpSpeed - Jump speed in mm/s
	* @param[in] dPower - Laser power in percent
	* @param[in] dZValue - Focus Z Value
	*/
	virtual void DrawHatches(const LibMCDriver_ScanLabSMC_uint64 nHatchesBufferSize, const LibMCDriver_ScanLabSMC::sHatch2D * pHatchesBuffer, const LibMCDriver_ScanLabSMC_double dMarkSpeed, const LibMCDriver_ScanLabSMC_double dJumpSpeed, const LibMCDriver_ScanLabSMC_double dPower, const LibMCDriver_ScanLabSMC_double dZValue) = 0;

	/**
	* ISMCJob::IsReady - Returns if the scanner is ready for execution.
	* @return Returns true if the scanner is executing.
	*/
	virtual bool IsReady() = 0;

	/**
	* ISMCJob::Execute - Starts the list execution. Will fail if the scanner is not ready or the job is not finalized.
	* @param[in] bBlocking - If true, the method waits until the execution is finished.
	*/
	virtual void Execute(const bool bBlocking) = 0;

	/**
	* ISMCJob::IsExecuting - Returns if the scanner is executing.
	* @return Returns true if the scanner is executing.
	*/
	virtual bool IsExecuting() = 0;

	/**
	* ISMCJob::WaitForExecution - Waits until the execution is finished. Will fail if an error occured or the timeout is reached.
	* @param[in] nTimeOutInMilliseconds - Timeout for the execution.
	*/
	virtual void WaitForExecution(const LibMCDriver_ScanLabSMC_uint32 nTimeOutInMilliseconds) = 0;

	/**
	* ISMCJob::StopExecution - Stops the execution of the current list immediately.
	*/
	virtual void StopExecution() = 0;

};

typedef IBaseSharedPtr<ISMCJob> PISMCJob;


/*************************************************************************************************************************
 Class interface for SMCConfiguration 
**************************************************************************************************************************/

class ISMCConfiguration : public virtual IBase {
public:
	/**
	* ISMCConfiguration::SetDynamicViolationReaction - Sets the response to a dynamic violation. Default is WarningOnly.
	* @param[in] eValue - Value to set.
	*/
	virtual void SetDynamicViolationReaction(const LibMCDriver_ScanLabSMC::eDynamicViolationReaction eValue) = 0;

	/**
	* ISMCConfiguration::GetDynamicViolationReaction - Returns the response to a dynamic violation.
	* @return Current Value.
	*/
	virtual LibMCDriver_ScanLabSMC::eDynamicViolationReaction GetDynamicViolationReaction() = 0;

	/**
	* ISMCConfiguration::SetWarnLevel - Sets the log warning level.
	* @param[in] eValue - Value to set.
	*/
	virtual void SetWarnLevel(const LibMCDriver_ScanLabSMC::eWarnLevel eValue) = 0;

	/**
	* ISMCConfiguration::GetWarnLevel - Returns the log warning level.
	* @return Current Value.
	*/
	virtual LibMCDriver_ScanLabSMC::eWarnLevel GetWarnLevel() = 0;

};

typedef IBaseSharedPtr<ISMCConfiguration> PISMCConfiguration;


/*************************************************************************************************************************
 Class interface for SMCContext 
**************************************************************************************************************************/

class ISMCContext : public virtual IBase {
public:
	/**
	* ISMCContext::SetToSimulationMode - Turns the driver into a simulation mode.
	*/
	virtual void SetToSimulationMode() = 0;

	/**
	* ISMCContext::IsSimulationMode - Returns if the driver is in simulation mode.
	* @return Flag if driver is in simulation mode.
	*/
	virtual bool IsSimulationMode() = 0;

	/**
	* ISMCContext::SetFirmware - Sets card firmware from binary data.
	* @param[in] nFirmwareDataBufferSize - Number of elements in buffer
	* @param[in] pFirmwareDataBuffer - byte array of the firmware program file.
	* @param[in] nFPGADataBufferSize - Number of elements in buffer
	* @param[in] pFPGADataBuffer - byte array of the firmware FPGA file.
	* @param[in] nAuxiliaryDataBufferSize - Number of elements in buffer
	* @param[in] pAuxiliaryDataBuffer - byte array of the binary auxiliary file.
	*/
	virtual void SetFirmware(const LibMCDriver_ScanLabSMC_uint64 nFirmwareDataBufferSize, const LibMCDriver_ScanLabSMC_uint8 * pFirmwareDataBuffer, const LibMCDriver_ScanLabSMC_uint64 nFPGADataBufferSize, const LibMCDriver_ScanLabSMC_uint8 * pFPGADataBuffer, const LibMCDriver_ScanLabSMC_uint64 nAuxiliaryDataBufferSize, const LibMCDriver_ScanLabSMC_uint8 * pAuxiliaryDataBuffer) = 0;

	/**
	* ISMCContext::SetCorrectionFile - Sets correction file as binary data.
	* @param[in] nCorrectionFileDataBufferSize - Number of elements in buffer
	* @param[in] pCorrectionFileDataBuffer - byte array of the firmware program file.
	*/
	virtual void SetCorrectionFile(const LibMCDriver_ScanLabSMC_uint64 nCorrectionFileDataBufferSize, const LibMCDriver_ScanLabSMC_uint8 * pCorrectionFileDataBuffer) = 0;

	/**
	* ISMCContext::ReinitializeInstance - Reinitializes an instance of SCANmotionControl. All created jobs will become invalid.
	*/
	virtual void ReinitializeInstance() = 0;

	/**
	* ISMCContext::GetIPAddress - Returns the IP Address of the RTC Card. Fails if driver has not been initialized.
	* @return IP Address Value.
	*/
	virtual std::string GetIPAddress() = 0;

	/**
	* ISMCContext::GetNetmask - Returns the Netmask of the RTC Card. Fails if driver has not been initialized.
	* @return Netmask Value.
	*/
	virtual std::string GetNetmask() = 0;

	/**
	* ISMCContext::GetSerialNumber - Returns serial number of card
	* @return Returns serial number of board.
	*/
	virtual LibMCDriver_ScanLabSMC_uint32 GetSerialNumber() = 0;

	/**
	* ISMCContext::GetLaserIndex - Returns the laser index assigned to the card. This is the laser index that will be used to map the toolpath laser data to the according device.
	* @return Returns laser index of board.
	*/
	virtual LibMCDriver_ScanLabSMC_uint32 GetLaserIndex() = 0;

	/**
	* ISMCContext::SetLaserOrigin - Sets the laser origin in absolute coordinates. This origin will be used to relatively position lasers to one another.
	* @param[in] dOriginX - Sets laser origin X coordinate of the laser in mm. All laser movements will be moved by that minus that amount in X.
	* @param[in] dOriginY - Sets laser origin Y coordinate of the laser in mm. All laser movements will be moved by that minus that amount in X.
	*/
	virtual void SetLaserOrigin(const LibMCDriver_ScanLabSMC_double dOriginX, const LibMCDriver_ScanLabSMC_double dOriginY) = 0;

	/**
	* ISMCContext::GetLaserOrigin - Returns the laser origin in absolute coordinates. This origin will be used to relatively position lasers to one another.
	* @param[out] dOriginX - Laser origin X coordinate of the laser in mm. All laser movements will be moved by that minus that amount in X.
	* @param[out] dOriginY - Laser origin Y coordinate of the laser in mm. All laser movements will be moved by that minus that amount in X.
	*/
	virtual void GetLaserOrigin(LibMCDriver_ScanLabSMC_double & dOriginX, LibMCDriver_ScanLabSMC_double & dOriginY) = 0;

	/**
	* ISMCContext::SetLaserField - Sets the laser field limits in absolute coordinates.
	* @param[in] dMinX - Sets minimum laser X coordinate in mm.
	* @param[in] dMinY - Sets minimum laser Y coordinate in mm.
	* @param[in] dMaxX - Sets maximum laser X coordinate in mm.
	* @param[in] dMaxY - Sets maximum laser Y coordinate in mm.
	*/
	virtual void SetLaserField(const LibMCDriver_ScanLabSMC_double dMinX, const LibMCDriver_ScanLabSMC_double dMinY, const LibMCDriver_ScanLabSMC_double dMaxX, const LibMCDriver_ScanLabSMC_double dMaxY) = 0;

	/**
	* ISMCContext::ResetLaserField - Resets the laser field to default values.
	*/
	virtual void ResetLaserField() = 0;

	/**
	* ISMCContext::GetLaserField - Returns the laser field limits in absolute coordinates.
	* @param[out] dMinX - Sets minimum laser X coordinate in mm.
	* @param[out] dMinY - Sets minimum laser Y coordinate in mm.
	* @param[out] dMaxX - Sets maximum laser X coordinate in mm.
	* @param[out] dMaxY - Sets maximum laser Y coordinate in mm.
	* @return Returns true if a laser field has been set.
	*/
	virtual bool GetLaserField(LibMCDriver_ScanLabSMC_double & dMinX, LibMCDriver_ScanLabSMC_double & dMinY, LibMCDriver_ScanLabSMC_double & dMaxX, LibMCDriver_ScanLabSMC_double & dMaxY) = 0;

	/**
	* ISMCContext::BeginJob - Starts a new job definition. Fails if another job is not finalized yet.
	* @param[in] dStartPositionX - Start position in X.
	* @param[in] dStartPositionY - Start position in Y.
	* @param[in] eBlendMode - Blend Mode that the job shall be drawn in.
	* @return SMC Job Instance.
	*/
	virtual ISMCJob * BeginJob(const LibMCDriver_ScanLabSMC_double dStartPositionX, const LibMCDriver_ScanLabSMC_double dStartPositionY, const LibMCDriver_ScanLabSMC::eBlendMode eBlendMode) = 0;

	/**
	* ISMCContext::GetUnfinishedJob - Returns the job that is not finalized yet. Returns null if no job is active.
	* @return SMC Job Instance.
	*/
	virtual ISMCJob * GetUnfinishedJob() = 0;

};

typedef IBaseSharedPtr<ISMCContext> PISMCContext;


/*************************************************************************************************************************
 Class interface for Driver_ScanLabSMC 
**************************************************************************************************************************/

class IDriver_ScanLabSMC : public virtual IDriver {
public:
	/**
	* IDriver_ScanLabSMC::SetDLLResources - Sets the default resource name of the SCANLAB DLLs. Overrides custom resource data if set before.
	* @param[in] sSMCDLLResourceName - Resource name of SCANmotionControl DLL
	* @param[in] sRTCDLLResourceName - Resource name of RTC DLL
	*/
	virtual void SetDLLResources(const std::string & sSMCDLLResourceName, const std::string & sRTCDLLResourceName) = 0;

	/**
	* IDriver_ScanLabSMC::SetXercesDLLResource - Sets the default resource name of auxiliary resource DLLs. Overrides custom resource data if set before.
	* @param[in] sXercesDLLResourceName - Resource name of the Xerces dependency DLL
	*/
	virtual void SetXercesDLLResource(const std::string & sXercesDLLResourceName) = 0;

	/**
	* IDriver_ScanLabSMC::SetCustomDLLData - Sets custom binaries for the needed SCANLAB DLLs. Overrides custom resource data if set before.
	* @param[in] nSMCDLLResourceDataBufferSize - Number of elements in buffer
	* @param[in] pSMCDLLResourceDataBuffer - Resource data of SCANmotionControl DLL
	* @param[in] nRTCDLLResourceDataBufferSize - Number of elements in buffer
	* @param[in] pRTCDLLResourceDataBuffer - Resource data of RTC DLL
	*/
	virtual void SetCustomDLLData(const LibMCDriver_ScanLabSMC_uint64 nSMCDLLResourceDataBufferSize, const LibMCDriver_ScanLabSMC_uint8 * pSMCDLLResourceDataBuffer, const LibMCDriver_ScanLabSMC_uint64 nRTCDLLResourceDataBufferSize, const LibMCDriver_ScanLabSMC_uint8 * pRTCDLLResourceDataBuffer) = 0;

	/**
	* IDriver_ScanLabSMC::SetCustomXercesDLLData - Sets the custom binary for auxiliary resource DLLs. Overrides custom resource data if set before.
	* @param[in] nXercesDLLResourceDataBufferSize - Number of elements in buffer
	* @param[in] pXercesDLLResourceDataBuffer - Resource data of the Xerces dependency DLL
	*/
	virtual void SetCustomXercesDLLData(const LibMCDriver_ScanLabSMC_uint64 nXercesDLLResourceDataBufferSize, const LibMCDriver_ScanLabSMC_uint8 * pXercesDLLResourceDataBuffer) = 0;

	/**
	* IDriver_ScanLabSMC::LoadSDK - Initializes the SCANmotionControl SDK.
	*/
	virtual void LoadSDK() = 0;

	/**
	* IDriver_ScanLabSMC::CreateContext - Creates and initializes a new SMC context. Fails if Configuration Data is invalid.
	* @param[in] pSMCConfiguration - SMC Configuration Data.
	* @return New Context instance
	*/
	virtual ISMCContext * CreateContext(ISMCConfiguration* pSMCConfiguration) = 0;

	/**
	* IDriver_ScanLabSMC::CreateEmptyConfiguration - Creates and initializes a SMC configuration with default values.
	* @return New Configuration instance
	*/
	virtual ISMCConfiguration * CreateEmptyConfiguration() = 0;

	/**
	* IDriver_ScanLabSMC::CreateTemplateConfiguration - Creates and initializes a SMC configuration with templated values.
	* @param[in] sTemplateName - Name of SMC Template.
	* @return New Configuration instance
	*/
	virtual ISMCConfiguration * CreateTemplateConfiguration(const std::string & sTemplateName) = 0;

};

typedef IBaseSharedPtr<IDriver_ScanLabSMC> PIDriver_ScanLabSMC;


/*************************************************************************************************************************
 Global functions declarations
**************************************************************************************************************************/
class CWrapper {
public:
	// Injected Components
	static LibMCEnv::PWrapper sPLibMCEnvWrapper;

	/**
	* Ilibmcdriver_scanlabsmc::GetVersion - retrieves the binary version of this library.
	* @param[out] nMajor - returns the major version of this library
	* @param[out] nMinor - returns the minor version of this library
	* @param[out] nMicro - returns the micro version of this library
	*/
	static void GetVersion(LibMCDriver_ScanLabSMC_uint32 & nMajor, LibMCDriver_ScanLabSMC_uint32 & nMinor, LibMCDriver_ScanLabSMC_uint32 & nMicro);

	/**
	* Ilibmcdriver_scanlabsmc::GetLastError - Returns the last error recorded on this object
	* @param[in] pInstance - Instance Handle
	* @param[out] sErrorMessage - Message of the last error
	* @return Is there a last error to query
	*/
	static bool GetLastError(IBase* pInstance, std::string & sErrorMessage);

	/**
	* Ilibmcdriver_scanlabsmc::ReleaseInstance - Releases shared ownership of an Instance
	* @param[in] pInstance - Instance Handle
	*/
	static void ReleaseInstance(IBase* pInstance);

	/**
	* Ilibmcdriver_scanlabsmc::AcquireInstance - Acquires shared ownership of an Instance
	* @param[in] pInstance - Instance Handle
	*/
	static void AcquireInstance(IBase* pInstance);

	/**
	* Ilibmcdriver_scanlabsmc::CreateDriver - Creates a driver instance with a specific name.
	* @param[in] sName - Name of driver to be created.
	* @param[in] sType - Type of driver to be created.
	* @param[in] pDriverEnvironment - Environment of this driver.
	* @return New Driver instance
	*/
	static IDriver * CreateDriver(const std::string & sName, const std::string & sType, LibMCEnv::PDriverEnvironment pDriverEnvironment);

};

LibMCDriver_ScanLabSMCResult LibMCDriver_ScanLabSMC_GetProcAddress (const char * pProcName, void ** ppProcAddress);

} // namespace Impl
} // namespace LibMCDriver_ScanLabSMC

#endif // __LIBMCDRIVER_SCANLABSMC_CPPINTERFACES
