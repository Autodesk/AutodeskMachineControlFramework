/*++

Copyright (C) 2023 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.8.0-develop.

Abstract: This is an autogenerated C++-Header file in order to allow an easy
 use of MC Driver ScanLab SCANmotionControl

Interface version: 2.0.0

*/

#ifndef __LIBMCDRIVER_SCANLABSMC_HEADER_CPP
#define __LIBMCDRIVER_SCANLABSMC_HEADER_CPP

#ifdef __LIBMCDRIVER_SCANLABSMC_EXPORTS
#ifdef _WIN32
#define LIBMCDRIVER_SCANLABSMC_DECLSPEC __declspec (dllexport)
#else // _WIN32
#define LIBMCDRIVER_SCANLABSMC_DECLSPEC __attribute__((visibility("default")))
#endif // _WIN32
#else // __LIBMCDRIVER_SCANLABSMC_EXPORTS
#define LIBMCDRIVER_SCANLABSMC_DECLSPEC
#endif // __LIBMCDRIVER_SCANLABSMC_EXPORTS

#include "libmcdriver_scanlabsmc_types.hpp"

#include "libmcenv_dynamic.hpp"

#ifdef __cplusplus
extern "C" {
#endif

/*************************************************************************************************************************
 Class definition for Base
**************************************************************************************************************************/

/*************************************************************************************************************************
 Class definition for Driver
**************************************************************************************************************************/

/**
* Configures a driver with its specific configuration data.
*
* @param[in] pDriver - Driver instance.
* @param[in] pConfigurationString - Configuration data of driver.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLABSMC_DECLSPEC LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_driver_configure(LibMCDriver_ScanLabSMC_Driver pDriver, const char * pConfigurationString);

/**
* returns the name identifier of the driver
*
* @param[in] pDriver - Driver instance.
* @param[in] nNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNameBuffer -  buffer of Name of the driver., may be NULL
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLABSMC_DECLSPEC LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_driver_getname(LibMCDriver_ScanLabSMC_Driver pDriver, const LibMCDriver_ScanLabSMC_uint32 nNameBufferSize, LibMCDriver_ScanLabSMC_uint32* pNameNeededChars, char * pNameBuffer);

/**
* returns the type identifier of the driver
*
* @param[in] pDriver - Driver instance.
* @param[in] nTypeBufferSize - size of the buffer (including trailing 0)
* @param[out] pTypeNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pTypeBuffer -  buffer of Type of the driver., may be NULL
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLABSMC_DECLSPEC LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_driver_gettype(LibMCDriver_ScanLabSMC_Driver pDriver, const LibMCDriver_ScanLabSMC_uint32 nTypeBufferSize, LibMCDriver_ScanLabSMC_uint32* pTypeNeededChars, char * pTypeBuffer);

/**
* returns the version identifiers of the driver
*
* @param[in] pDriver - Driver instance.
* @param[out] pMajor - Major version.
* @param[out] pMinor - Minor version.
* @param[out] pMicro - Micro version.
* @param[in] nBuildBufferSize - size of the buffer (including trailing 0)
* @param[out] pBuildNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pBuildBuffer -  buffer of Build identifier., may be NULL
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLABSMC_DECLSPEC LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_driver_getversion(LibMCDriver_ScanLabSMC_Driver pDriver, LibMCDriver_ScanLabSMC_uint32 * pMajor, LibMCDriver_ScanLabSMC_uint32 * pMinor, LibMCDriver_ScanLabSMC_uint32 * pMicro, const LibMCDriver_ScanLabSMC_uint32 nBuildBufferSize, LibMCDriver_ScanLabSMC_uint32* pBuildNeededChars, char * pBuildBuffer);

/**
* Updates the driver parameters in the driver environment. Should only be called in the driver thread.
*
* @param[in] pDriver - Driver instance.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLABSMC_DECLSPEC LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_driver_queryparameters(LibMCDriver_ScanLabSMC_Driver pDriver);

/**
* Updates the driver parameters in the driver environment. Might be called out of thread. Implementation MUST be able to handle parallel calls.
*
* @param[in] pDriver - Driver instance.
* @param[in] pDriverUpdateInstance - Status update instance.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLABSMC_DECLSPEC LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_driver_queryparametersex(LibMCDriver_ScanLabSMC_Driver pDriver, LibMCEnv_DriverStatusUpdateSession pDriverUpdateInstance);

/*************************************************************************************************************************
 Class definition for SMCJob
**************************************************************************************************************************/

/**
* Returns the Job ID
*
* @param[in] pSMCJob - SMCJob instance.
* @param[out] pJobID - Job ID.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLABSMC_DECLSPEC LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_smcjob_getjobid(LibMCDriver_ScanLabSMC_SMCJob pSMCJob, LibMCDriver_ScanLabSMC_uint64 * pJobID);

/**
* Finalizes the job definition.
*
* @param[in] pSMCJob - SMCJob instance.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLABSMC_DECLSPEC LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_smcjob_finalize(LibMCDriver_ScanLabSMC_SMCJob pSMCJob);

/**
* Returns if job is finalized.
*
* @param[in] pSMCJob - SMCJob instance.
* @param[out] pFinalized - If flag returns false, new data can be written to the job.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLABSMC_DECLSPEC LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_smcjob_isfinalized(LibMCDriver_ScanLabSMC_SMCJob pSMCJob, bool * pFinalized);

/**
* Writes a polyline into the open list
*
* @param[in] pSMCJob - SMCJob instance.
* @param[in] nPointsBufferSize - Number of elements in buffer
* @param[in] pPointsBuffer - Point2D buffer of Points of polyline to draw.
* @param[in] dMarkSpeed - Mark speed in mm/s
* @param[in] dMinimalMarkSpeed - Minimal allowed mark speed in mm/s
* @param[in] dJumpSpeed - Jump speed in mm/s
* @param[in] dPower - Laser power in percent
* @param[in] dCornerTolerance - Allowed position deviation on corners (in mm.)
* @param[in] dZValue - Focus Z Value
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLABSMC_DECLSPEC LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_smcjob_drawpolyline(LibMCDriver_ScanLabSMC_SMCJob pSMCJob, LibMCDriver_ScanLabSMC_uint64 nPointsBufferSize, const LibMCDriver_ScanLabSMC::sPoint2D * pPointsBuffer, LibMCDriver_ScanLabSMC_double dMarkSpeed, LibMCDriver_ScanLabSMC_double dMinimalMarkSpeed, LibMCDriver_ScanLabSMC_double dJumpSpeed, LibMCDriver_ScanLabSMC_double dPower, LibMCDriver_ScanLabSMC_double dCornerTolerance, LibMCDriver_ScanLabSMC_double dZValue);

/**
* Writes a loop into the open list
*
* @param[in] pSMCJob - SMCJob instance.
* @param[in] nPointsBufferSize - Number of elements in buffer
* @param[in] pPointsBuffer - Point2D buffer of Points of polyline to draw.
* @param[in] dMarkSpeed - Mark speed in mm/s
* @param[in] dMinimalMarkSpeed - Minimal allowed mark speed in mm/s
* @param[in] dJumpSpeed - Jump speed in mm/s
* @param[in] dPower - Laser power in percent
* @param[in] dCornerTolerance - Allowed position deviation on corners (in mm.)
* @param[in] dZValue - Focus Z Value
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLABSMC_DECLSPEC LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_smcjob_drawloop(LibMCDriver_ScanLabSMC_SMCJob pSMCJob, LibMCDriver_ScanLabSMC_uint64 nPointsBufferSize, const LibMCDriver_ScanLabSMC::sPoint2D * pPointsBuffer, LibMCDriver_ScanLabSMC_double dMarkSpeed, LibMCDriver_ScanLabSMC_double dMinimalMarkSpeed, LibMCDriver_ScanLabSMC_double dJumpSpeed, LibMCDriver_ScanLabSMC_double dPower, LibMCDriver_ScanLabSMC_double dCornerTolerance, LibMCDriver_ScanLabSMC_double dZValue);

/**
* Writes a list of hatches into the open list
*
* @param[in] pSMCJob - SMCJob instance.
* @param[in] nHatchesBufferSize - Number of elements in buffer
* @param[in] pHatchesBuffer - Hatch2D buffer of Hatches to draw.
* @param[in] dMarkSpeed - Mark speed in mm/s
* @param[in] dJumpSpeed - Jump speed in mm/s
* @param[in] dPower - Laser power in percent
* @param[in] dZValue - Focus Z Value
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLABSMC_DECLSPEC LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_smcjob_drawhatches(LibMCDriver_ScanLabSMC_SMCJob pSMCJob, LibMCDriver_ScanLabSMC_uint64 nHatchesBufferSize, const LibMCDriver_ScanLabSMC::sHatch2D * pHatchesBuffer, LibMCDriver_ScanLabSMC_double dMarkSpeed, LibMCDriver_ScanLabSMC_double dJumpSpeed, LibMCDriver_ScanLabSMC_double dPower, LibMCDriver_ScanLabSMC_double dZValue);

/**
* Returns if the scanner is ready for execution.
*
* @param[in] pSMCJob - SMCJob instance.
* @param[out] pIsExecuting - Returns true if the scanner is executing.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLABSMC_DECLSPEC LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_smcjob_isready(LibMCDriver_ScanLabSMC_SMCJob pSMCJob, bool * pIsExecuting);

/**
* Starts the list execution. Will fail if the scanner is not ready or the job is not finalized.
*
* @param[in] pSMCJob - SMCJob instance.
* @param[in] bBlocking - If true, the method waits until the execution is finished.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLABSMC_DECLSPEC LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_smcjob_execute(LibMCDriver_ScanLabSMC_SMCJob pSMCJob, bool bBlocking);

/**
* Returns if the scanner is executing.
*
* @param[in] pSMCJob - SMCJob instance.
* @param[out] pIsExecuting - Returns true if the scanner is executing.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLABSMC_DECLSPEC LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_smcjob_isexecuting(LibMCDriver_ScanLabSMC_SMCJob pSMCJob, bool * pIsExecuting);

/**
* Waits until the execution is finished. Will fail if an error occured or the timeout is reached.
*
* @param[in] pSMCJob - SMCJob instance.
* @param[in] nTimeOutInMilliseconds - Timeout for the execution.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLABSMC_DECLSPEC LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_smcjob_waitforexecution(LibMCDriver_ScanLabSMC_SMCJob pSMCJob, LibMCDriver_ScanLabSMC_uint32 nTimeOutInMilliseconds);

/**
* Stops the execution of the current list immediately.
*
* @param[in] pSMCJob - SMCJob instance.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLABSMC_DECLSPEC LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_smcjob_stopexecution(LibMCDriver_ScanLabSMC_SMCJob pSMCJob);

/*************************************************************************************************************************
 Class definition for SMCConfiguration
**************************************************************************************************************************/

/**
* Sets the response to a dynamic violation. Default is WarningOnly.
*
* @param[in] pSMCConfiguration - SMCConfiguration instance.
* @param[in] eValue - Value to set.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLABSMC_DECLSPEC LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_smcconfiguration_setdynamicviolationreaction(LibMCDriver_ScanLabSMC_SMCConfiguration pSMCConfiguration, LibMCDriver_ScanLabSMC::eDynamicViolationReaction eValue);

/**
* Returns the response to a dynamic violation.
*
* @param[in] pSMCConfiguration - SMCConfiguration instance.
* @param[out] pValue - Current Value.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLABSMC_DECLSPEC LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_smcconfiguration_getdynamicviolationreaction(LibMCDriver_ScanLabSMC_SMCConfiguration pSMCConfiguration, LibMCDriver_ScanLabSMC::eDynamicViolationReaction * pValue);

/**
* Sets the log warning level.
*
* @param[in] pSMCConfiguration - SMCConfiguration instance.
* @param[in] eValue - Value to set.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLABSMC_DECLSPEC LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_smcconfiguration_setwarnlevel(LibMCDriver_ScanLabSMC_SMCConfiguration pSMCConfiguration, LibMCDriver_ScanLabSMC::eWarnLevel eValue);

/**
* Returns the log warning level.
*
* @param[in] pSMCConfiguration - SMCConfiguration instance.
* @param[out] pValue - Current Value.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLABSMC_DECLSPEC LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_smcconfiguration_getwarnlevel(LibMCDriver_ScanLabSMC_SMCConfiguration pSMCConfiguration, LibMCDriver_ScanLabSMC::eWarnLevel * pValue);

/*************************************************************************************************************************
 Class definition for SMCContext
**************************************************************************************************************************/

/**
* Turns the driver into a simulation mode.
*
* @param[in] pSMCContext - SMCContext instance.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLABSMC_DECLSPEC LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_smccontext_settosimulationmode(LibMCDriver_ScanLabSMC_SMCContext pSMCContext);

/**
* Returns if the driver is in simulation mode.
*
* @param[in] pSMCContext - SMCContext instance.
* @param[out] pSimulationModeEnabled - Flag if driver is in simulation mode.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLABSMC_DECLSPEC LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_smccontext_issimulationmode(LibMCDriver_ScanLabSMC_SMCContext pSMCContext, bool * pSimulationModeEnabled);

/**
* Sets card firmware from binary data.
*
* @param[in] pSMCContext - SMCContext instance.
* @param[in] nFirmwareDataBufferSize - Number of elements in buffer
* @param[in] pFirmwareDataBuffer - uint8 buffer of byte array of the firmware program file.
* @param[in] nFPGADataBufferSize - Number of elements in buffer
* @param[in] pFPGADataBuffer - uint8 buffer of byte array of the firmware FPGA file.
* @param[in] nAuxiliaryDataBufferSize - Number of elements in buffer
* @param[in] pAuxiliaryDataBuffer - uint8 buffer of byte array of the binary auxiliary file.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLABSMC_DECLSPEC LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_smccontext_setfirmware(LibMCDriver_ScanLabSMC_SMCContext pSMCContext, LibMCDriver_ScanLabSMC_uint64 nFirmwareDataBufferSize, const LibMCDriver_ScanLabSMC_uint8 * pFirmwareDataBuffer, LibMCDriver_ScanLabSMC_uint64 nFPGADataBufferSize, const LibMCDriver_ScanLabSMC_uint8 * pFPGADataBuffer, LibMCDriver_ScanLabSMC_uint64 nAuxiliaryDataBufferSize, const LibMCDriver_ScanLabSMC_uint8 * pAuxiliaryDataBuffer);

/**
* Sets correction file as binary data.
*
* @param[in] pSMCContext - SMCContext instance.
* @param[in] nCorrectionFileDataBufferSize - Number of elements in buffer
* @param[in] pCorrectionFileDataBuffer - uint8 buffer of byte array of the firmware program file.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLABSMC_DECLSPEC LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_smccontext_setcorrectionfile(LibMCDriver_ScanLabSMC_SMCContext pSMCContext, LibMCDriver_ScanLabSMC_uint64 nCorrectionFileDataBufferSize, const LibMCDriver_ScanLabSMC_uint8 * pCorrectionFileDataBuffer);

/**
* Reinitializes an instance of SCANmotionControl. All created jobs will become invalid.
*
* @param[in] pSMCContext - SMCContext instance.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLABSMC_DECLSPEC LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_smccontext_reinitializeinstance(LibMCDriver_ScanLabSMC_SMCContext pSMCContext);

/**
* Returns the IP Address of the RTC Card. Fails if driver has not been initialized.
*
* @param[in] pSMCContext - SMCContext instance.
* @param[in] nIPAddressBufferSize - size of the buffer (including trailing 0)
* @param[out] pIPAddressNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pIPAddressBuffer -  buffer of IP Address Value., may be NULL
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLABSMC_DECLSPEC LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_smccontext_getipaddress(LibMCDriver_ScanLabSMC_SMCContext pSMCContext, const LibMCDriver_ScanLabSMC_uint32 nIPAddressBufferSize, LibMCDriver_ScanLabSMC_uint32* pIPAddressNeededChars, char * pIPAddressBuffer);

/**
* Returns the Netmask of the RTC Card. Fails if driver has not been initialized.
*
* @param[in] pSMCContext - SMCContext instance.
* @param[in] nNetmaskBufferSize - size of the buffer (including trailing 0)
* @param[out] pNetmaskNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNetmaskBuffer -  buffer of Netmask Value., may be NULL
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLABSMC_DECLSPEC LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_smccontext_getnetmask(LibMCDriver_ScanLabSMC_SMCContext pSMCContext, const LibMCDriver_ScanLabSMC_uint32 nNetmaskBufferSize, LibMCDriver_ScanLabSMC_uint32* pNetmaskNeededChars, char * pNetmaskBuffer);

/**
* Returns serial number of card
*
* @param[in] pSMCContext - SMCContext instance.
* @param[out] pSerialNumber - Returns serial number of board.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLABSMC_DECLSPEC LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_smccontext_getserialnumber(LibMCDriver_ScanLabSMC_SMCContext pSMCContext, LibMCDriver_ScanLabSMC_uint32 * pSerialNumber);

/**
* Returns the laser index assigned to the card. This is the laser index that will be used to map the toolpath laser data to the according device.
*
* @param[in] pSMCContext - SMCContext instance.
* @param[out] pLaserIndex - Returns laser index of board.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLABSMC_DECLSPEC LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_smccontext_getlaserindex(LibMCDriver_ScanLabSMC_SMCContext pSMCContext, LibMCDriver_ScanLabSMC_uint32 * pLaserIndex);

/**
* Sets the laser origin in absolute coordinates. This origin will be used to relatively position lasers to one another.
*
* @param[in] pSMCContext - SMCContext instance.
* @param[in] dOriginX - Sets laser origin X coordinate of the laser in mm. All laser movements will be moved by that minus that amount in X.
* @param[in] dOriginY - Sets laser origin Y coordinate of the laser in mm. All laser movements will be moved by that minus that amount in X.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLABSMC_DECLSPEC LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_smccontext_setlaserorigin(LibMCDriver_ScanLabSMC_SMCContext pSMCContext, LibMCDriver_ScanLabSMC_double dOriginX, LibMCDriver_ScanLabSMC_double dOriginY);

/**
* Returns the laser origin in absolute coordinates. This origin will be used to relatively position lasers to one another.
*
* @param[in] pSMCContext - SMCContext instance.
* @param[out] pOriginX - Laser origin X coordinate of the laser in mm. All laser movements will be moved by that minus that amount in X.
* @param[out] pOriginY - Laser origin Y coordinate of the laser in mm. All laser movements will be moved by that minus that amount in X.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLABSMC_DECLSPEC LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_smccontext_getlaserorigin(LibMCDriver_ScanLabSMC_SMCContext pSMCContext, LibMCDriver_ScanLabSMC_double * pOriginX, LibMCDriver_ScanLabSMC_double * pOriginY);

/**
* Sets the laser field limits in absolute coordinates.
*
* @param[in] pSMCContext - SMCContext instance.
* @param[in] dMinX - Sets minimum laser X coordinate in mm.
* @param[in] dMinY - Sets minimum laser Y coordinate in mm.
* @param[in] dMaxX - Sets maximum laser X coordinate in mm.
* @param[in] dMaxY - Sets maximum laser Y coordinate in mm.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLABSMC_DECLSPEC LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_smccontext_setlaserfield(LibMCDriver_ScanLabSMC_SMCContext pSMCContext, LibMCDriver_ScanLabSMC_double dMinX, LibMCDriver_ScanLabSMC_double dMinY, LibMCDriver_ScanLabSMC_double dMaxX, LibMCDriver_ScanLabSMC_double dMaxY);

/**
* Resets the laser field to default values.
*
* @param[in] pSMCContext - SMCContext instance.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLABSMC_DECLSPEC LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_smccontext_resetlaserfield(LibMCDriver_ScanLabSMC_SMCContext pSMCContext);

/**
* Returns the laser field limits in absolute coordinates.
*
* @param[in] pSMCContext - SMCContext instance.
* @param[out] pMinX - Sets minimum laser X coordinate in mm.
* @param[out] pMinY - Sets minimum laser Y coordinate in mm.
* @param[out] pMaxX - Sets maximum laser X coordinate in mm.
* @param[out] pMaxY - Sets maximum laser Y coordinate in mm.
* @param[out] pHasLaserField - Returns true if a laser field has been set.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLABSMC_DECLSPEC LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_smccontext_getlaserfield(LibMCDriver_ScanLabSMC_SMCContext pSMCContext, LibMCDriver_ScanLabSMC_double * pMinX, LibMCDriver_ScanLabSMC_double * pMinY, LibMCDriver_ScanLabSMC_double * pMaxX, LibMCDriver_ScanLabSMC_double * pMaxY, bool * pHasLaserField);

/**
* Starts a new job definition. Fails if another job is not finalized yet.
*
* @param[in] pSMCContext - SMCContext instance.
* @param[in] dStartPositionX - Start position in X.
* @param[in] dStartPositionY - Start position in Y.
* @param[in] eBlendMode - Blend Mode that the job shall be drawn in.
* @param[out] pJobInstance - SMC Job Instance.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLABSMC_DECLSPEC LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_smccontext_beginjob(LibMCDriver_ScanLabSMC_SMCContext pSMCContext, LibMCDriver_ScanLabSMC_double dStartPositionX, LibMCDriver_ScanLabSMC_double dStartPositionY, LibMCDriver_ScanLabSMC::eBlendMode eBlendMode, LibMCDriver_ScanLabSMC_SMCJob * pJobInstance);

/**
* Returns the job that is not finalized yet. Returns null if no job is active.
*
* @param[in] pSMCContext - SMCContext instance.
* @param[out] pJobInstance - SMC Job Instance.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLABSMC_DECLSPEC LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_smccontext_getunfinishedjob(LibMCDriver_ScanLabSMC_SMCContext pSMCContext, LibMCDriver_ScanLabSMC_SMCJob * pJobInstance);

/*************************************************************************************************************************
 Class definition for Driver_ScanLabSMC
**************************************************************************************************************************/

/**
* Sets the default resource name of the SCANLAB DLLs. Overrides custom resource data if set before.
*
* @param[in] pDriver_ScanLabSMC - Driver_ScanLabSMC instance.
* @param[in] pSMCDLLResourceName - Resource name of SCANmotionControl DLL
* @param[in] pRTCDLLResourceName - Resource name of RTC DLL
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLABSMC_DECLSPEC LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_driver_scanlabsmc_setdllresources(LibMCDriver_ScanLabSMC_Driver_ScanLabSMC pDriver_ScanLabSMC, const char * pSMCDLLResourceName, const char * pRTCDLLResourceName);

/**
* Sets the default resource name of auxiliary resource DLLs. Overrides custom resource data if set before.
*
* @param[in] pDriver_ScanLabSMC - Driver_ScanLabSMC instance.
* @param[in] pXercesDLLResourceName - Resource name of the Xerces dependency DLL
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLABSMC_DECLSPEC LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_driver_scanlabsmc_setxercesdllresource(LibMCDriver_ScanLabSMC_Driver_ScanLabSMC pDriver_ScanLabSMC, const char * pXercesDLLResourceName);

/**
* Sets custom binaries for the needed SCANLAB DLLs. Overrides custom resource data if set before.
*
* @param[in] pDriver_ScanLabSMC - Driver_ScanLabSMC instance.
* @param[in] nSMCDLLResourceDataBufferSize - Number of elements in buffer
* @param[in] pSMCDLLResourceDataBuffer - uint8 buffer of Resource data of SCANmotionControl DLL
* @param[in] nRTCDLLResourceDataBufferSize - Number of elements in buffer
* @param[in] pRTCDLLResourceDataBuffer - uint8 buffer of Resource data of RTC DLL
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLABSMC_DECLSPEC LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_driver_scanlabsmc_setcustomdlldata(LibMCDriver_ScanLabSMC_Driver_ScanLabSMC pDriver_ScanLabSMC, LibMCDriver_ScanLabSMC_uint64 nSMCDLLResourceDataBufferSize, const LibMCDriver_ScanLabSMC_uint8 * pSMCDLLResourceDataBuffer, LibMCDriver_ScanLabSMC_uint64 nRTCDLLResourceDataBufferSize, const LibMCDriver_ScanLabSMC_uint8 * pRTCDLLResourceDataBuffer);

/**
* Sets the custom binary for auxiliary resource DLLs. Overrides custom resource data if set before.
*
* @param[in] pDriver_ScanLabSMC - Driver_ScanLabSMC instance.
* @param[in] nXercesDLLResourceDataBufferSize - Number of elements in buffer
* @param[in] pXercesDLLResourceDataBuffer - uint8 buffer of Resource data of the Xerces dependency DLL
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLABSMC_DECLSPEC LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_driver_scanlabsmc_setcustomxercesdlldata(LibMCDriver_ScanLabSMC_Driver_ScanLabSMC pDriver_ScanLabSMC, LibMCDriver_ScanLabSMC_uint64 nXercesDLLResourceDataBufferSize, const LibMCDriver_ScanLabSMC_uint8 * pXercesDLLResourceDataBuffer);

/**
* Initializes the SCANmotionControl SDK.
*
* @param[in] pDriver_ScanLabSMC - Driver_ScanLabSMC instance.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLABSMC_DECLSPEC LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_driver_scanlabsmc_loadsdk(LibMCDriver_ScanLabSMC_Driver_ScanLabSMC pDriver_ScanLabSMC);

/**
* Creates and initializes a new SMC context. Fails if Configuration Data is invalid or context already exists.
*
* @param[in] pDriver_ScanLabSMC - Driver_ScanLabSMC instance.
* @param[in] pContextName - Unique context identifier. MUST NOT be empty.
* @param[in] pSMCConfiguration - SMC Configuration Data.
* @param[out] pInstance - New Context instance
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLABSMC_DECLSPEC LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_driver_scanlabsmc_createcontext(LibMCDriver_ScanLabSMC_Driver_ScanLabSMC pDriver_ScanLabSMC, const char * pContextName, LibMCDriver_ScanLabSMC_SMCConfiguration pSMCConfiguration, LibMCDriver_ScanLabSMC_SMCContext * pInstance);

/**
* Checks if a context identifier exists already.
*
* @param[in] pDriver_ScanLabSMC - Driver_ScanLabSMC instance.
* @param[in] pContextName - Unique context identifier. MUST NOT be empty.
* @param[out] pExists - Returns true if a context exists.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLABSMC_DECLSPEC LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_driver_scanlabsmc_contextexists(LibMCDriver_ScanLabSMC_Driver_ScanLabSMC pDriver_ScanLabSMC, const char * pContextName, bool * pExists);

/**
* Retrieves an existing context by identifier. Fails if context does not exist.
*
* @param[in] pDriver_ScanLabSMC - Driver_ScanLabSMC instance.
* @param[in] pContextName - Unique context identifier. MUST NOT be empty.
* @param[out] pInstance - New Context instance
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLABSMC_DECLSPEC LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_driver_scanlabsmc_findcontext(LibMCDriver_ScanLabSMC_Driver_ScanLabSMC pDriver_ScanLabSMC, const char * pContextName, LibMCDriver_ScanLabSMC_SMCContext * pInstance);

/**
* Releases an existing context by identifier. Fails if context does not exist.
*
* @param[in] pDriver_ScanLabSMC - Driver_ScanLabSMC instance.
* @param[in] pContextName - Unique context identifier. MUST NOT be empty.
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLABSMC_DECLSPEC LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_driver_scanlabsmc_releasecontext(LibMCDriver_ScanLabSMC_Driver_ScanLabSMC pDriver_ScanLabSMC, const char * pContextName);

/**
* Creates and initializes a SMC configuration with default values.
*
* @param[in] pDriver_ScanLabSMC - Driver_ScanLabSMC instance.
* @param[out] pInstance - New Configuration instance
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLABSMC_DECLSPEC LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_driver_scanlabsmc_createemptyconfiguration(LibMCDriver_ScanLabSMC_Driver_ScanLabSMC pDriver_ScanLabSMC, LibMCDriver_ScanLabSMC_SMCConfiguration * pInstance);

/**
* Creates and initializes a SMC configuration with templated values.
*
* @param[in] pDriver_ScanLabSMC - Driver_ScanLabSMC instance.
* @param[in] pTemplateName - Name of SMC Template.
* @param[out] pInstance - New Configuration instance
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLABSMC_DECLSPEC LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_driver_scanlabsmc_createtemplateconfiguration(LibMCDriver_ScanLabSMC_Driver_ScanLabSMC pDriver_ScanLabSMC, const char * pTemplateName, LibMCDriver_ScanLabSMC_SMCConfiguration * pInstance);

/*************************************************************************************************************************
 Global functions
**************************************************************************************************************************/

/**
* retrieves the binary version of this library.
*
* @param[out] pMajor - returns the major version of this library
* @param[out] pMinor - returns the minor version of this library
* @param[out] pMicro - returns the micro version of this library
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLABSMC_DECLSPEC LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_getversion(LibMCDriver_ScanLabSMC_uint32 * pMajor, LibMCDriver_ScanLabSMC_uint32 * pMinor, LibMCDriver_ScanLabSMC_uint32 * pMicro);

/**
* Returns the last error recorded on this object
*
* @param[in] pInstance - Instance Handle
* @param[in] nErrorMessageBufferSize - size of the buffer (including trailing 0)
* @param[out] pErrorMessageNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pErrorMessageBuffer -  buffer of Message of the last error, may be NULL
* @param[out] pHasError - Is there a last error to query
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLABSMC_DECLSPEC LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_getlasterror(LibMCDriver_ScanLabSMC_Base pInstance, const LibMCDriver_ScanLabSMC_uint32 nErrorMessageBufferSize, LibMCDriver_ScanLabSMC_uint32* pErrorMessageNeededChars, char * pErrorMessageBuffer, bool * pHasError);

/**
* Releases shared ownership of an Instance
*
* @param[in] pInstance - Instance Handle
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLABSMC_DECLSPEC LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_releaseinstance(LibMCDriver_ScanLabSMC_Base pInstance);

/**
* Acquires shared ownership of an Instance
*
* @param[in] pInstance - Instance Handle
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLABSMC_DECLSPEC LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_acquireinstance(LibMCDriver_ScanLabSMC_Base pInstance);

/**
* Injects an imported component for usage within this component
*
* @param[in] pNameSpace - NameSpace of the injected component
* @param[in] pSymbolAddressMethod - Address of the SymbolAddressMethod of the injected component
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLABSMC_DECLSPEC LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_injectcomponent(const char * pNameSpace, LibMCDriver_ScanLabSMC_pvoid pSymbolAddressMethod);

/**
* Returns the address of the SymbolLookupMethod
*
* @param[out] pSymbolLookupMethod - Address of the SymbolAddressMethod
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLABSMC_DECLSPEC LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_getsymbollookupmethod(LibMCDriver_ScanLabSMC_pvoid * pSymbolLookupMethod);

/**
* Creates a driver instance with a specific name.
*
* @param[in] pName - Name of driver to be created.
* @param[in] pType - Type of driver to be created.
* @param[in] pDriverEnvironment - Environment of this driver.
* @param[out] pInstance - New Driver instance
* @return error code or 0 (success)
*/
LIBMCDRIVER_SCANLABSMC_DECLSPEC LibMCDriver_ScanLabSMCResult libmcdriver_scanlabsmc_createdriver(const char * pName, const char * pType, LibMCEnv_DriverEnvironment pDriverEnvironment, LibMCDriver_ScanLabSMC_Driver * pInstance);

#ifdef __cplusplus
}
#endif

#endif // __LIBMCDRIVER_SCANLABSMC_HEADER_CPP

