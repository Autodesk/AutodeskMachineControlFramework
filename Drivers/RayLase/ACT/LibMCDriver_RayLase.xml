<?xml version="1.0" encoding="UTF-8"?>
<component xmlns="http://schemas.autodesk.com/netfabb/automaticcomponenttoolkit/2018" 
	libraryname="MC Driver Raylase" namespace="LibMCDriver_Raylase" copyright="Autodesk Inc." year="2020" basename="libmcdriver_raylase"
	version="2.0.0">
	<license>
		<line value="All rights reserved." />
		<line value="" />
		<line value="Redistribution and use in source and binary forms, with or without" />
		<line value="modification, are permitted provided that the following conditions are met:" />
		<line value="    * Redistributions of source code must retain the above copyright" />
		<line value="      notice, this list of conditions and the following disclaimer." />
		<line value="    * Redistributions in binary form must reproduce the above copyright" />
		<line value="      notice, this list of conditions and the following disclaimer in the" />
		<line value="      documentation and/or other materials provided with the distribution." />
		<line value="    * Neither the name of the Autodesk Inc. nor the" />
		<line value="      names of its contributors may be used to endorse or promote products" />
		<line value="      derived from this software without specific prior written permission." />
		<line value="" />
		<line value="THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND" />
		<line value="ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED" />
		<line value="WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE" />
		<line value="DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY" />
		<line value="DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES" />
		<line value="(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;" />
		<line value="LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND" />
		<line value="ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT" />
		<line value="(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS" />
		<line value="SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." />
		<line value="" />
	</license>
	
	<bindings>
		<binding language="CppDynamic" indentation="tabs" documentation="1" />
	</bindings>
	<implementations>
		<implementation language="Cpp" indentation="tabs"/>
	</implementations>
	
	
	<importcomponent uri="../../../ACT/LibMCEnv.xml" namespace="LibMCEnv"/>
	
	<errors>
		<error name="NOTIMPLEMENTED" code="1" description="functionality not implemented" />
		<error name="INVALIDPARAM" code="2" description="an invalid parameter was passed" />
		<error name="INVALIDCAST" code="3" description="a type cast failed" />
		<error name="BUFFERTOOSMALL" code="4" description="a provided buffer is too small" />
		<error name="GENERICEXCEPTION" code="5" description="a generic exception occurred" />
		<error name="COULDNOTLOADLIBRARY" code="6" description="the library could not be loaded" />
		<error name="COULDNOTFINDLIBRARYEXPORT" code="7" description="a required exported symbol could not be found in the library" />
		<error name="INCOMPATIBLEBINARYVERSION" code="8" description="the version of the binary interface does not match the bindings interface" />

		<error name="DRIVERERROR" code="1000" description="a driver error occured" />
		<error name="SDKNOTINITIALIZED" code="1001" description="SDK not initialized" />
		<error name="INVALIDCARDNAME" code="1002" description="Invalid card name" />
		<error name="INVALIDCARDIP" code="1003" description="Invalid card IP" />
		<error name="INVALIDCARDPORT" code="1004" description="Invalid card port" />
		<error name="CARDALREADYREGISTERED" code="1005" description="Card already registered" />
		<error name="CARDNOTREGISTERED" code="1006" description="Card not registered" />	
		<error name="INVALIDPOINTCOUNT" code="1007" description="Invalid point count" />
		<error name="INVALIDLASERPOWER" code="1008" description="Invalid laser power" />
		<error name="INVALIDRAYLASESDK" code="1009" description="Invalid Raylase SDK" />		
		<error name="ASSIGNEDDUPLICATELASERINDEX" code="1010" description="Assigned duplicate laser index" />		
		<error name="NOLASERINDICESASSIGNED" code="1011" description="No laser indices have been assigned" />		
		<error name="INVALIDLISTID" code="1012" description="Invalid list ID" />		
		<error name="SEGMENTHASNOASSIGNEDCARD" code="1013" description="Segment has no assigned card." />		
		
			
				
	</errors>


	<struct name="Point2D">
		<member name="X" type="single" />
		<member name="Y" type="single" />
	</struct>

	<struct name="Hatch2D">
		<member name="X1" type="single" />
		<member name="Y1" type="single" />
		<member name="X2" type="single" />
		<member name="Y2" type="single" />
	</struct>

	
<!--

This base Driver interface MUST be in Sync with LibMCDriver.xml

-->
	
	<class name="Base">
	</class>
	
	<class name="Driver" parent="Base" description="An abstract Machine Control Driver">

		<method name="Configure" description = "Configures a driver with its specific configuration data.">
			<param name="ConfigurationString" type="string" pass="in" description="Configuration data of driver." />
		</method>
	
		<method name="GetName" description = "returns the name identifier of the driver">
			<param name="Name" type="string" pass="return" description="Name of the driver." />
		</method>

		<method name="GetType" description = "returns the type identifier of the driver">
			<param name="Type" type="string" pass="return" description="Type of the driver." />
		</method>

		<method name="GetVersion" description = "returns the version identifiers of the driver">
			<param name="Major" type="uint32" pass="out" description="Major version." />
			<param name="Minor" type="uint32" pass="out" description="Minor version." />
			<param name="Micro" type="uint32" pass="out" description="Micro version." />
			<param name="Build" type="string" pass="out" description="Build identifier." />
		</method>

		<method name="QueryParameters" description = "Updates the driver parameters in the driver environment. Should only be called in the driver thread.">
		</method>

		<method name="QueryParametersEx" description = "Updates the driver parameters in the driver environment. Might be called out of thread. Implementation MUST be able to handle parallel calls.">
			<param name="DriverUpdateInstance" type="class" class="LibMCEnv:DriverStatusUpdateSession" pass="in" description="Status update instance." />
		</method>

	</class>

<!--

End Interface

-->


<!--

Custom implementation

-->




	<class name="RaylaseCard" parent="Base" description="Object to control a raylase-card.">
	
		<method name="IsConnected" description="Checks if the card is connected.">
			<param name="IsConnected" type="bool" pass="return" description="Flag if the card is disconnected." />
		</method>

		<method name="Disconnect" description="Disconnects and unregisters the card.">
		</method>

		<method name="ResetToSystemDefaults" description="Resets the card settings to system defaults.">
		</method>

		<method name="LaserOn" description="Turns the laser on.">
		</method>

		<method name="LaserOff" description="Turns the laser off.">
		</method>

		<method name="ArmLaser" description="Arms or disarms the laser.">
			<param name="ShallBeArmed" type="bool" pass="in" description="Shall the laser be armed or disarmed." />
		</method>

		<method name="IsLaserArmed" description="Checks if the laser is armed.">
			<param name="LaserIsArmed" type="bool" pass="return" description="Flag if the laser is armed." />
		</method>

		<method name="EnablePilot" description="Enables the pilot pointer.">
			<param name="ShallBeEnabled" type="bool" pass="in" description="Shall the pilot be enabled." />
		</method>

		<method name="PilotIsEnabled" description="Checks if the pilot is enabled.">
			<param name="PilotIsEnabled" type="bool" pass="return" description="Flag if the pilot is enabled." />
		</method>

		<method name="GetLaserStatus" description="Returns the laser status.">
			<param name="PilotIsEnabled" type="bool" pass="out" description="Flag if the pilot is enabled." />
			<param name="LaserIsArmed" type="bool" pass="out" description="Flag if the laser is armed." />
			<param name="LaserAlarm" type="bool" pass="out" description="Flag if the laser is in alarm state." />
		</method>
		
		<method name="AssignLaserIndex" description="Assigns a laser index to the card.">
			<param name="LaserIndex" type="uint32" pass="in" description="Laser index to assign. This will map to the laser indices given in the build file. 0 means no assignment." />
		</method>

		<method name="GetAssignedLaserIndex" description="Returns the assigned laser index to the card. Default value is 0 (unassigned).">
			<param name="LaserIndex" type="uint32" pass="return" description="Assigned laser index. This will map to the laser indices given in the build file. 0 means no assignment." />
		</method>
		
		<method name="DrawLayer" description="Draws a layer of a build stream. Blocks until the layer is drawn.">
			<param name="StreamUUID" type="string" pass="in" description="UUID of the build stream. Must have been loaded in memory by the system." />
			<param name="LayerIndex" type="uint32" pass="in" description="Layer index of the build file." />
		</method>
		
	
	</class>


	<class name="Driver_Raylase" parent="Driver" description="A LaserScanner Driver for a Raylase card.">

		<method name="SetToSimulationMode" description="Sets the driver in Simulation mode.">
		</method>

		<method name="IsSimulationMode" description="Returns if the driver is in Simulation mode.">
			<param name="IsSimulationMode" type="bool" pass="return" description="Simulation mode is active." />
		</method>

		<method name="SetCustomSDKResource" description="Sets the machine resource name of the SDK to load. MUST be called before LoadSDK or it has no effect.">
			<param name="ResourceName" type="string" pass="in" description="Resource name of core machine package. Empty means standard naming applies." />
		</method>

		<method name="LoadSDK" description="Initializes the Raylase SDK.">
		</method>

		<method name="ConnectByIP" description="Connects to the Raylase Scanner Card. Fails if connection is not successful.">
			<param name="CardName" type="string" pass="in" description="Name of scanner to be connected to. MUST not be in use." />
			<param name="CardIP" type="string" pass="in" description="IP Address to connect to." />
			<param name="Port" type="uint32" pass="in" description="Port to connect to." />
			<param name="MaxLaserPowerInWatts" type="double" pass="in" description="Maximum laser power in Watts." />
			<param name="RaylaseCardInstance" type="class" class="RaylaseCard" pass="return" description="Instance of connected card." />
		</method>

		<method name="GetConnectedCard" description="Retrieves a connected card instance.">
			<param name="CardName" type="string" pass="in" description="Name of scanner card to retrieve. MUST have been connected before." />
			<param name="RaylaseCardInstance" type="class" class="RaylaseCard" pass="return" description="Instance of connected card." />
		</method>

		<method name="DrawLayerMultiLaser" description="Draws a layer of a build stream. Blocks until the layer is drawn. The call will fail if the laser assignment of the cards is not unique.">
			<param name="StreamUUID" type="string" pass="in" description="UUID of the build stream. Must have been loaded in memory by the system." />
			<param name="LayerIndex" type="uint32" pass="in" description="Layer index of the build file." />
			<param name="FailIfNonAssignedDataExists" type="bool" pass="in" description="If true, the call will fail in case a layer contains data that is not assigned to any defined scanner card." />
		</method>

	</class>


<!--

End of Custom implementation

-->

		
	<global baseclassname="Base" stringoutclassname="Base" releasemethod="ReleaseInstance" acquiremethod="AcquireInstance" versionmethod="GetVersion" errormethod="GetLastError" injectionmethod="InjectComponent" symbollookupmethod="GetSymbolLookupMethod">
		
		<method name="GetVersion" description = "retrieves the binary version of this library.">
			<param name="Major" type="uint32" pass="out" description="returns the major version of this library" />
			<param name="Minor" type="uint32" pass="out" description="returns the minor version of this library" />
			<param name="Micro" type="uint32" pass="out" description="returns the micro version of this library" />
		</method>
		<method name="GetLastError" description="Returns the last error recorded on this object">
			<param name="Instance" type="class" class="Base" pass="in" description="Instance Handle" />
			<param name="ErrorMessage" type="string" pass="out" description="Message of the last error" />
			<param name="HasError" type="bool" pass="return" description="Is there a last error to query" />
		</method>
		<method name="ReleaseInstance" description="Releases shared ownership of an Instance">
			<param name="Instance" type="class" class="Base" pass="in" description="Instance Handle" />
		</method>
		<method name="AcquireInstance" description="Acquires shared ownership of an Instance">
			<param name="Instance" type="class" class="Base" pass="in" description="Instance Handle" />
		</method>
		<method name="InjectComponent" description="Injects an imported component for usage within this component">
			<param name="NameSpace" type="string" pass="in" description="NameSpace of the injected component" />
			<param name="SymbolAddressMethod" type="pointer" pass="in" description="Address of the SymbolAddressMethod of the injected component" />
		</method>		
		<method name="GetSymbolLookupMethod" description="Returns the address of the SymbolLookupMethod">
			<param name="SymbolLookupMethod" type="pointer" pass="return" description="Address of the SymbolAddressMethod" />
		</method>				
		<method name="CreateDriver" description="Creates a driver instance with a specific name.">
			<param name="Name" type="string" pass="in" description="Name of driver to be created." />
			<param name="Type" type="string" pass="in" description="Type of driver to be created." />
			<param name="DriverEnvironment" type="class" class="LibMCEnv:DriverEnvironment" pass="in" description="Environment of this driver." />
			<param name="Instance" type="optionalclass" class="Driver" pass="return" description="New Driver instance" />
		</method>
		
	</global>
	
	
</component>

