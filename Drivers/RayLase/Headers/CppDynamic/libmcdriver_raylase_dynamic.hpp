/*++

Copyright (C) 2020 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.8.0-develop.

Abstract: This is an autogenerated C++-Header file in order to allow an easy
 use of MC Driver Raylase

Interface version: 2.0.0

*/

#ifndef __LIBMCDRIVER_RAYLASE_CPPHEADER_DYNAMIC_CPP
#define __LIBMCDRIVER_RAYLASE_CPPHEADER_DYNAMIC_CPP

#include "libmcdriver_raylase_types.hpp"
#include "libmcdriver_raylase_dynamic.h"

#include "libmcenv_dynamic.hpp"

#ifdef _WIN32
#include <windows.h>
#else // _WIN32
#include <dlfcn.h>
#endif // _WIN32
#include <string>
#include <memory>
#include <vector>
#include <exception>

namespace LibMCDriver_Raylase {

/*************************************************************************************************************************
 Forward Declaration of all classes
**************************************************************************************************************************/
class CWrapper;
class CBase;
class CDriver;
class CRaylaseCard;
class CDriver_Raylase;

/*************************************************************************************************************************
 Declaration of deprecated class types
**************************************************************************************************************************/
typedef CWrapper CLibMCDriver_RaylaseWrapper;
typedef CBase CLibMCDriver_RaylaseBase;
typedef CDriver CLibMCDriver_RaylaseDriver;
typedef CRaylaseCard CLibMCDriver_RaylaseRaylaseCard;
typedef CDriver_Raylase CLibMCDriver_RaylaseDriver_Raylase;

/*************************************************************************************************************************
 Declaration of shared pointer types
**************************************************************************************************************************/
typedef std::shared_ptr<CWrapper> PWrapper;
typedef std::shared_ptr<CBase> PBase;
typedef std::shared_ptr<CDriver> PDriver;
typedef std::shared_ptr<CRaylaseCard> PRaylaseCard;
typedef std::shared_ptr<CDriver_Raylase> PDriver_Raylase;

/*************************************************************************************************************************
 Declaration of deprecated shared pointer types
**************************************************************************************************************************/
typedef PWrapper PLibMCDriver_RaylaseWrapper;
typedef PBase PLibMCDriver_RaylaseBase;
typedef PDriver PLibMCDriver_RaylaseDriver;
typedef PRaylaseCard PLibMCDriver_RaylaseRaylaseCard;
typedef PDriver_Raylase PLibMCDriver_RaylaseDriver_Raylase;


/*************************************************************************************************************************
 classParam Definition
**************************************************************************************************************************/

template<class T> class classParam {
private:
	const T* m_ptr;

public:
	classParam(const T* ptr)
		: m_ptr (ptr)
	{
	}

	classParam(std::shared_ptr <T> sharedPtr)
		: m_ptr (sharedPtr.get())
	{
	}

	LibMCDriver_RaylaseHandle GetHandle()
	{
		if (m_ptr != nullptr)
			return m_ptr->handle();
		return nullptr;
	}
};

/*************************************************************************************************************************
 Class ELibMCDriver_RaylaseException 
**************************************************************************************************************************/
class ELibMCDriver_RaylaseException : public std::exception {
protected:
	/**
	* Error code for the Exception.
	*/
	LibMCDriver_RaylaseResult m_errorCode;
	/**
	* Error message for the Exception.
	*/
	std::string m_errorMessage;
	std::string m_originalErrorMessage;

public:
	/**
	* Exception Constructor.
	*/
	ELibMCDriver_RaylaseException(LibMCDriver_RaylaseResult errorCode, const std::string & sErrorMessage)
		: m_errorCode(errorCode), m_originalErrorMessage(sErrorMessage)
	{
		m_errorMessage = buildErrorMessage();
	}

	/**
	* Returns error code
	*/
	LibMCDriver_RaylaseResult getErrorCode() const noexcept
	{
		return m_errorCode;
	}

	/**
	* Returns error message
	*/
	const char* what() const noexcept
	{
		return m_errorMessage.c_str();
	}

	const char* getErrorMessage() const noexcept
	{
		return m_originalErrorMessage.c_str();
	}

	const char* getErrorName() const noexcept
	{
		switch(getErrorCode()) {
			case LIBMCDRIVER_RAYLASE_SUCCESS: return "SUCCESS";
			case LIBMCDRIVER_RAYLASE_ERROR_NOTIMPLEMENTED: return "NOTIMPLEMENTED";
			case LIBMCDRIVER_RAYLASE_ERROR_INVALIDPARAM: return "INVALIDPARAM";
			case LIBMCDRIVER_RAYLASE_ERROR_INVALIDCAST: return "INVALIDCAST";
			case LIBMCDRIVER_RAYLASE_ERROR_BUFFERTOOSMALL: return "BUFFERTOOSMALL";
			case LIBMCDRIVER_RAYLASE_ERROR_GENERICEXCEPTION: return "GENERICEXCEPTION";
			case LIBMCDRIVER_RAYLASE_ERROR_COULDNOTLOADLIBRARY: return "COULDNOTLOADLIBRARY";
			case LIBMCDRIVER_RAYLASE_ERROR_COULDNOTFINDLIBRARYEXPORT: return "COULDNOTFINDLIBRARYEXPORT";
			case LIBMCDRIVER_RAYLASE_ERROR_INCOMPATIBLEBINARYVERSION: return "INCOMPATIBLEBINARYVERSION";
			case LIBMCDRIVER_RAYLASE_ERROR_DRIVERERROR: return "DRIVERERROR";
			case LIBMCDRIVER_RAYLASE_ERROR_SDKNOTINITIALIZED: return "SDKNOTINITIALIZED";
			case LIBMCDRIVER_RAYLASE_ERROR_INVALIDCARDNAME: return "INVALIDCARDNAME";
			case LIBMCDRIVER_RAYLASE_ERROR_INVALIDCARDIP: return "INVALIDCARDIP";
			case LIBMCDRIVER_RAYLASE_ERROR_INVALIDCARDPORT: return "INVALIDCARDPORT";
			case LIBMCDRIVER_RAYLASE_ERROR_CARDALREADYREGISTERED: return "CARDALREADYREGISTERED";
			case LIBMCDRIVER_RAYLASE_ERROR_CARDNOTREGISTERED: return "CARDNOTREGISTERED";
			case LIBMCDRIVER_RAYLASE_ERROR_INVALIDPOINTCOUNT: return "INVALIDPOINTCOUNT";
			case LIBMCDRIVER_RAYLASE_ERROR_INVALIDLASERPOWER: return "INVALIDLASERPOWER";
			case LIBMCDRIVER_RAYLASE_ERROR_INVALIDRAYLASESDK: return "INVALIDRAYLASESDK";
			case LIBMCDRIVER_RAYLASE_ERROR_ASSIGNEDDUPLICATELASERINDEX: return "ASSIGNEDDUPLICATELASERINDEX";
			case LIBMCDRIVER_RAYLASE_ERROR_NOLASERINDICESASSIGNED: return "NOLASERINDICESASSIGNED";
			case LIBMCDRIVER_RAYLASE_ERROR_INVALIDLISTID: return "INVALIDLISTID";
			case LIBMCDRIVER_RAYLASE_ERROR_SEGMENTHASNOASSIGNEDCARD: return "SEGMENTHASNOASSIGNEDCARD";
			case LIBMCDRIVER_RAYLASE_ERROR_INVALIDSYSTEMTIMING: return "INVALIDSYSTEMTIMING";
			case LIBMCDRIVER_RAYLASE_ERROR_SCANNINGTIMEOUT: return "SCANNINGTIMEOUT";
			case LIBMCDRIVER_RAYLASE_ERROR_CANNOTDELETELISTLISTINPROGRESS: return "CANNOTDELETELISTLISTINPROGRESS";
		}
		return "UNKNOWN";
	}

	const char* getErrorDescription() const noexcept
	{
		switch(getErrorCode()) {
			case LIBMCDRIVER_RAYLASE_SUCCESS: return "success";
			case LIBMCDRIVER_RAYLASE_ERROR_NOTIMPLEMENTED: return "functionality not implemented";
			case LIBMCDRIVER_RAYLASE_ERROR_INVALIDPARAM: return "an invalid parameter was passed";
			case LIBMCDRIVER_RAYLASE_ERROR_INVALIDCAST: return "a type cast failed";
			case LIBMCDRIVER_RAYLASE_ERROR_BUFFERTOOSMALL: return "a provided buffer is too small";
			case LIBMCDRIVER_RAYLASE_ERROR_GENERICEXCEPTION: return "a generic exception occurred";
			case LIBMCDRIVER_RAYLASE_ERROR_COULDNOTLOADLIBRARY: return "the library could not be loaded";
			case LIBMCDRIVER_RAYLASE_ERROR_COULDNOTFINDLIBRARYEXPORT: return "a required exported symbol could not be found in the library";
			case LIBMCDRIVER_RAYLASE_ERROR_INCOMPATIBLEBINARYVERSION: return "the version of the binary interface does not match the bindings interface";
			case LIBMCDRIVER_RAYLASE_ERROR_DRIVERERROR: return "a driver error occured";
			case LIBMCDRIVER_RAYLASE_ERROR_SDKNOTINITIALIZED: return "SDK not initialized";
			case LIBMCDRIVER_RAYLASE_ERROR_INVALIDCARDNAME: return "Invalid card name";
			case LIBMCDRIVER_RAYLASE_ERROR_INVALIDCARDIP: return "Invalid card IP";
			case LIBMCDRIVER_RAYLASE_ERROR_INVALIDCARDPORT: return "Invalid card port";
			case LIBMCDRIVER_RAYLASE_ERROR_CARDALREADYREGISTERED: return "Card already registered";
			case LIBMCDRIVER_RAYLASE_ERROR_CARDNOTREGISTERED: return "Card not registered";
			case LIBMCDRIVER_RAYLASE_ERROR_INVALIDPOINTCOUNT: return "Invalid point count";
			case LIBMCDRIVER_RAYLASE_ERROR_INVALIDLASERPOWER: return "Invalid laser power";
			case LIBMCDRIVER_RAYLASE_ERROR_INVALIDRAYLASESDK: return "Invalid Raylase SDK";
			case LIBMCDRIVER_RAYLASE_ERROR_ASSIGNEDDUPLICATELASERINDEX: return "Assigned duplicate laser index";
			case LIBMCDRIVER_RAYLASE_ERROR_NOLASERINDICESASSIGNED: return "No laser indices have been assigned";
			case LIBMCDRIVER_RAYLASE_ERROR_INVALIDLISTID: return "Invalid list ID";
			case LIBMCDRIVER_RAYLASE_ERROR_SEGMENTHASNOASSIGNEDCARD: return "Segment has no assigned card.";
			case LIBMCDRIVER_RAYLASE_ERROR_INVALIDSYSTEMTIMING: return "Invalid system timing";
			case LIBMCDRIVER_RAYLASE_ERROR_SCANNINGTIMEOUT: return "A scanning timeout occured";
			case LIBMCDRIVER_RAYLASE_ERROR_CANNOTDELETELISTLISTINPROGRESS: return "Cannot delete list in progress";
		}
		return "unknown error";
	}

private:

	std::string buildErrorMessage() const noexcept
	{
		std::string msg = m_originalErrorMessage;
		if (msg.empty()) {
			msg = getErrorDescription();
		}
		return std::string("Error: ") + getErrorName() + ": " + msg;
	}
};

/*************************************************************************************************************************
 Class CInputVector
**************************************************************************************************************************/
template <typename T>
class CInputVector {
private:
	
	const T* m_data;
	size_t m_size;
	
public:
	
	CInputVector(const std::vector<T>& vec)
		: m_data( vec.data() ), m_size( vec.size() )
	{
	}
	
	CInputVector(const T* in_data, size_t in_size)
		: m_data( in_data ), m_size(in_size )
	{
	}
	
	const T* data() const
	{
		return m_data;
	}
	
	size_t size() const
	{
		return m_size;
	}
	
};

// declare deprecated class name
template<typename T>
using CLibMCDriver_RaylaseInputVector = CInputVector<T>;

/*************************************************************************************************************************
 Class CWrapper 
**************************************************************************************************************************/
class CWrapper {
public:
	
	explicit CWrapper(void* pSymbolLookupMethod)
	{
		CheckError(nullptr, initWrapperTable(&m_WrapperTable));
		CheckError(nullptr, loadWrapperTableFromSymbolLookupMethod(&m_WrapperTable, pSymbolLookupMethod));
		
		CheckError(nullptr, checkBinaryVersion());
	}
	
	explicit CWrapper(const std::string &sFileName)
	{
		CheckError(nullptr, initWrapperTable(&m_WrapperTable));
		CheckError(nullptr, loadWrapperTable(&m_WrapperTable, sFileName.c_str()));
		
		CheckError(nullptr, checkBinaryVersion());
	}
	
	static PWrapper loadLibrary(const std::string &sFileName)
	{
		return std::make_shared<CWrapper>(sFileName);
	}
	
	static PWrapper loadLibraryFromSymbolLookupMethod(void* pSymbolLookupMethod)
	{
		return std::make_shared<CWrapper>(pSymbolLookupMethod);
	}
	
	~CWrapper()
	{
		releaseWrapperTable(&m_WrapperTable);
	}
	
	inline void CheckError(CBase * pBaseClass, LibMCDriver_RaylaseResult nResult);

	inline void GetVersion(LibMCDriver_Raylase_uint32 & nMajor, LibMCDriver_Raylase_uint32 & nMinor, LibMCDriver_Raylase_uint32 & nMicro);
	inline bool GetLastError(classParam<CBase> pInstance, std::string & sErrorMessage);
	inline void ReleaseInstance(classParam<CBase> pInstance);
	inline void AcquireInstance(classParam<CBase> pInstance);
	inline void InjectComponent(const std::string & sNameSpace, const LibMCDriver_Raylase_pvoid pSymbolAddressMethod);
	inline LibMCDriver_Raylase_pvoid GetSymbolLookupMethod();
	inline PDriver CreateDriver(const std::string & sName, const std::string & sType, classParam<LibMCEnv::CDriverEnvironment> pDriverEnvironment);

private:
	sLibMCDriver_RaylaseDynamicWrapperTable m_WrapperTable;
	// Injected Components
	LibMCEnv::PWrapper m_pLibMCEnvWrapper;

	
	LibMCDriver_RaylaseResult checkBinaryVersion()
	{
		LibMCDriver_Raylase_uint32 nMajor, nMinor, nMicro;
		GetVersion(nMajor, nMinor, nMicro);
		if (nMajor != LIBMCDRIVER_RAYLASE_VERSION_MAJOR) {
			return LIBMCDRIVER_RAYLASE_ERROR_INCOMPATIBLEBINARYVERSION;
		}
		return LIBMCDRIVER_RAYLASE_SUCCESS;
	}
	LibMCDriver_RaylaseResult initWrapperTable(sLibMCDriver_RaylaseDynamicWrapperTable * pWrapperTable);
	LibMCDriver_RaylaseResult releaseWrapperTable(sLibMCDriver_RaylaseDynamicWrapperTable * pWrapperTable);
	LibMCDriver_RaylaseResult loadWrapperTable(sLibMCDriver_RaylaseDynamicWrapperTable * pWrapperTable, const char * pLibraryFileName);
	LibMCDriver_RaylaseResult loadWrapperTableFromSymbolLookupMethod(sLibMCDriver_RaylaseDynamicWrapperTable * pWrapperTable, void* pSymbolLookupMethod);

	friend class CBase;
	friend class CDriver;
	friend class CRaylaseCard;
	friend class CDriver_Raylase;

};

	
/*************************************************************************************************************************
 Class CBase 
**************************************************************************************************************************/
class CBase {
public:
	
protected:
	/* Wrapper Object that created the class. */
	CWrapper * m_pWrapper;
	/* Handle to Instance in library*/
	LibMCDriver_RaylaseHandle m_pHandle;

	/* Checks for an Error code and raises Exceptions */
	void CheckError(LibMCDriver_RaylaseResult nResult)
	{
		if (m_pWrapper != nullptr)
			m_pWrapper->CheckError(this, nResult);
	}
public:
	/**
	* CBase::CBase - Constructor for Base class.
	*/
	CBase(CWrapper * pWrapper, LibMCDriver_RaylaseHandle pHandle)
		: m_pWrapper(pWrapper), m_pHandle(pHandle)
	{
	}

	/**
	* CBase::~CBase - Destructor for Base class.
	*/
	virtual ~CBase()
	{
		if (m_pWrapper != nullptr)
			m_pWrapper->ReleaseInstance(this);
		m_pWrapper = nullptr;
	}

	/**
	* CBase::handle - Returns handle to instance.
	*/
	LibMCDriver_RaylaseHandle handle() const
	{
		return m_pHandle;
	}

	/**
	* CBase::wrapper - Returns wrapper instance.
	*/
	CWrapper * wrapper() const
	{
		return m_pWrapper;
	}
	
	friend class CWrapper;
};
	
/*************************************************************************************************************************
 Class CDriver 
**************************************************************************************************************************/
class CDriver : public CBase {
public:
	
	/**
	* CDriver::CDriver - Constructor for Driver class.
	*/
	CDriver(CWrapper* pWrapper, LibMCDriver_RaylaseHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline void Configure(const std::string & sConfigurationString);
	inline std::string GetName();
	inline std::string GetType();
	inline void GetVersion(LibMCDriver_Raylase_uint32 & nMajor, LibMCDriver_Raylase_uint32 & nMinor, LibMCDriver_Raylase_uint32 & nMicro, std::string & sBuild);
	inline void QueryParameters();
	inline void QueryParametersEx(classParam<LibMCEnv::CDriverStatusUpdateSession> pDriverUpdateInstance);
};
	
/*************************************************************************************************************************
 Class CRaylaseCard 
**************************************************************************************************************************/
class CRaylaseCard : public CBase {
public:
	
	/**
	* CRaylaseCard::CRaylaseCard - Constructor for RaylaseCard class.
	*/
	CRaylaseCard(CWrapper* pWrapper, LibMCDriver_RaylaseHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline bool IsConnected();
	inline void ResetToSystemDefaults();
	inline void LaserOn();
	inline void LaserOff();
	inline void ArmLaser(const bool bShallBeArmed);
	inline bool IsLaserArmed();
	inline void EnablePilot(const bool bShallBeEnabled);
	inline bool PilotIsEnabled();
	inline void GetLaserStatus(bool & bPilotIsEnabled, bool & bLaserIsArmed, bool & bLaserAlarm);
	inline void AssignLaserIndex(const LibMCDriver_Raylase_uint32 nLaserIndex);
	inline LibMCDriver_Raylase_uint32 GetAssignedLaserIndex();
	inline void DrawLayer(const std::string & sStreamUUID, const LibMCDriver_Raylase_uint32 nLayerIndex, const LibMCDriver_Raylase_uint32 nScanningTimeoutInMS);
};
	
/*************************************************************************************************************************
 Class CDriver_Raylase 
**************************************************************************************************************************/
class CDriver_Raylase : public CDriver {
public:
	
	/**
	* CDriver_Raylase::CDriver_Raylase - Constructor for Driver_Raylase class.
	*/
	CDriver_Raylase(CWrapper* pWrapper, LibMCDriver_RaylaseHandle pHandle)
		: CDriver(pWrapper, pHandle)
	{
	}
	
	inline void SetToSimulationMode();
	inline bool IsSimulationMode();
	inline void SetCustomSDKResource(const std::string & sResourceName);
	inline void LoadSDK();
	inline PRaylaseCard ConnectByIP(const std::string & sCardName, const std::string & sCardIP, const LibMCDriver_Raylase_uint32 nPort, const LibMCDriver_Raylase_double dMaxLaserPowerInWatts);
	inline PRaylaseCard GetConnectedCard(const std::string & sCardName);
	inline bool CardExists(const std::string & sCardName);
	inline void DisconnectCard(const std::string & sCardName);
	inline void DrawLayerMultiLaser(const std::string & sStreamUUID, const LibMCDriver_Raylase_uint32 nLayerIndex, const bool bFailIfNonAssignedDataExists, const LibMCDriver_Raylase_uint32 nScanningTimeoutInMS);
};
	
	/**
	* CWrapper::GetVersion - retrieves the binary version of this library.
	* @param[out] nMajor - returns the major version of this library
	* @param[out] nMinor - returns the minor version of this library
	* @param[out] nMicro - returns the micro version of this library
	*/
	inline void CWrapper::GetVersion(LibMCDriver_Raylase_uint32 & nMajor, LibMCDriver_Raylase_uint32 & nMinor, LibMCDriver_Raylase_uint32 & nMicro)
	{
		CheckError(nullptr,m_WrapperTable.m_GetVersion(&nMajor, &nMinor, &nMicro));
	}
	
	/**
	* CWrapper::GetLastError - Returns the last error recorded on this object
	* @param[in] pInstance - Instance Handle
	* @param[out] sErrorMessage - Message of the last error
	* @return Is there a last error to query
	*/
	inline bool CWrapper::GetLastError(classParam<CBase> pInstance, std::string & sErrorMessage)
	{
		LibMCDriver_RaylaseHandle hInstance = pInstance.GetHandle();
		LibMCDriver_Raylase_uint32 bytesNeededErrorMessage = 0;
		LibMCDriver_Raylase_uint32 bytesWrittenErrorMessage = 0;
		bool resultHasError = 0;
		CheckError(nullptr,m_WrapperTable.m_GetLastError(hInstance, 0, &bytesNeededErrorMessage, nullptr, &resultHasError));
		std::vector<char> bufferErrorMessage(bytesNeededErrorMessage);
		CheckError(nullptr,m_WrapperTable.m_GetLastError(hInstance, bytesNeededErrorMessage, &bytesWrittenErrorMessage, &bufferErrorMessage[0], &resultHasError));
		sErrorMessage = std::string(&bufferErrorMessage[0]);
		
		return resultHasError;
	}
	
	/**
	* CWrapper::ReleaseInstance - Releases shared ownership of an Instance
	* @param[in] pInstance - Instance Handle
	*/
	inline void CWrapper::ReleaseInstance(classParam<CBase> pInstance)
	{
		LibMCDriver_RaylaseHandle hInstance = pInstance.GetHandle();
		CheckError(nullptr,m_WrapperTable.m_ReleaseInstance(hInstance));
	}
	
	/**
	* CWrapper::AcquireInstance - Acquires shared ownership of an Instance
	* @param[in] pInstance - Instance Handle
	*/
	inline void CWrapper::AcquireInstance(classParam<CBase> pInstance)
	{
		LibMCDriver_RaylaseHandle hInstance = pInstance.GetHandle();
		CheckError(nullptr,m_WrapperTable.m_AcquireInstance(hInstance));
	}
	
	/**
	* CWrapper::InjectComponent - Injects an imported component for usage within this component
	* @param[in] sNameSpace - NameSpace of the injected component
	* @param[in] pSymbolAddressMethod - Address of the SymbolAddressMethod of the injected component
	*/
	inline void CWrapper::InjectComponent(const std::string & sNameSpace, const LibMCDriver_Raylase_pvoid pSymbolAddressMethod)
	{
		CheckError(nullptr,m_WrapperTable.m_InjectComponent(sNameSpace.c_str(), pSymbolAddressMethod));
		
		bool bNameSpaceFound = false;
		if (sNameSpace == "LibMCEnv") {
			if (m_pLibMCEnvWrapper != nullptr) {
				throw ELibMCDriver_RaylaseException(LIBMCDRIVER_RAYLASE_ERROR_COULDNOTLOADLIBRARY, "Library with namespace " + sNameSpace + " is already registered.");
			}
			m_pLibMCEnvWrapper = LibMCEnv::CWrapper::loadLibraryFromSymbolLookupMethod(pSymbolAddressMethod);
			bNameSpaceFound = true;
		}
		if (!bNameSpaceFound)
			throw ELibMCDriver_RaylaseException(LIBMCDRIVER_RAYLASE_ERROR_COULDNOTLOADLIBRARY, "Unknown namespace " + sNameSpace);
	}
	
	/**
	* CWrapper::GetSymbolLookupMethod - Returns the address of the SymbolLookupMethod
	* @return Address of the SymbolAddressMethod
	*/
	inline LibMCDriver_Raylase_pvoid CWrapper::GetSymbolLookupMethod()
	{
		LibMCDriver_Raylase_pvoid resultSymbolLookupMethod = 0;
		CheckError(nullptr,m_WrapperTable.m_GetSymbolLookupMethod(&resultSymbolLookupMethod));
		
		return resultSymbolLookupMethod;
	}
	
	/**
	* CWrapper::CreateDriver - Creates a driver instance with a specific name.
	* @param[in] sName - Name of driver to be created.
	* @param[in] sType - Type of driver to be created.
	* @param[in] pDriverEnvironment - Environment of this driver.
	* @return New Driver instance
	*/
	inline PDriver CWrapper::CreateDriver(const std::string & sName, const std::string & sType, classParam<LibMCEnv::CDriverEnvironment> pDriverEnvironment)
	{
		LibMCEnvHandle hDriverEnvironment = pDriverEnvironment.GetHandle();
		LibMCDriver_RaylaseHandle hInstance = nullptr;
		CheckError(nullptr,m_WrapperTable.m_CreateDriver(sName.c_str(), sType.c_str(), hDriverEnvironment, &hInstance));
		
		if (hInstance) {
			return std::make_shared<CDriver>(this, hInstance);
		} else {
			return nullptr;
		}
	}
	
	inline void CWrapper::CheckError(CBase * pBaseClass, LibMCDriver_RaylaseResult nResult)
	{
		if (nResult != 0) {
			std::string sErrorMessage;
			if (pBaseClass != nullptr) {
				GetLastError(pBaseClass, sErrorMessage);
			}
			throw ELibMCDriver_RaylaseException(nResult, sErrorMessage);
		}
	}
	

	inline LibMCDriver_RaylaseResult CWrapper::initWrapperTable(sLibMCDriver_RaylaseDynamicWrapperTable * pWrapperTable)
	{
		if (pWrapperTable == nullptr)
			return LIBMCDRIVER_RAYLASE_ERROR_INVALIDPARAM;
		
		pWrapperTable->m_LibraryHandle = nullptr;
		pWrapperTable->m_Driver_Configure = nullptr;
		pWrapperTable->m_Driver_GetName = nullptr;
		pWrapperTable->m_Driver_GetType = nullptr;
		pWrapperTable->m_Driver_GetVersion = nullptr;
		pWrapperTable->m_Driver_QueryParameters = nullptr;
		pWrapperTable->m_Driver_QueryParametersEx = nullptr;
		pWrapperTable->m_RaylaseCard_IsConnected = nullptr;
		pWrapperTable->m_RaylaseCard_ResetToSystemDefaults = nullptr;
		pWrapperTable->m_RaylaseCard_LaserOn = nullptr;
		pWrapperTable->m_RaylaseCard_LaserOff = nullptr;
		pWrapperTable->m_RaylaseCard_ArmLaser = nullptr;
		pWrapperTable->m_RaylaseCard_IsLaserArmed = nullptr;
		pWrapperTable->m_RaylaseCard_EnablePilot = nullptr;
		pWrapperTable->m_RaylaseCard_PilotIsEnabled = nullptr;
		pWrapperTable->m_RaylaseCard_GetLaserStatus = nullptr;
		pWrapperTable->m_RaylaseCard_AssignLaserIndex = nullptr;
		pWrapperTable->m_RaylaseCard_GetAssignedLaserIndex = nullptr;
		pWrapperTable->m_RaylaseCard_DrawLayer = nullptr;
		pWrapperTable->m_Driver_Raylase_SetToSimulationMode = nullptr;
		pWrapperTable->m_Driver_Raylase_IsSimulationMode = nullptr;
		pWrapperTable->m_Driver_Raylase_SetCustomSDKResource = nullptr;
		pWrapperTable->m_Driver_Raylase_LoadSDK = nullptr;
		pWrapperTable->m_Driver_Raylase_ConnectByIP = nullptr;
		pWrapperTable->m_Driver_Raylase_GetConnectedCard = nullptr;
		pWrapperTable->m_Driver_Raylase_CardExists = nullptr;
		pWrapperTable->m_Driver_Raylase_DisconnectCard = nullptr;
		pWrapperTable->m_Driver_Raylase_DrawLayerMultiLaser = nullptr;
		pWrapperTable->m_GetVersion = nullptr;
		pWrapperTable->m_GetLastError = nullptr;
		pWrapperTable->m_ReleaseInstance = nullptr;
		pWrapperTable->m_AcquireInstance = nullptr;
		pWrapperTable->m_InjectComponent = nullptr;
		pWrapperTable->m_GetSymbolLookupMethod = nullptr;
		pWrapperTable->m_CreateDriver = nullptr;
		
		return LIBMCDRIVER_RAYLASE_SUCCESS;
	}

	inline LibMCDriver_RaylaseResult CWrapper::releaseWrapperTable(sLibMCDriver_RaylaseDynamicWrapperTable * pWrapperTable)
	{
		if (pWrapperTable == nullptr)
			return LIBMCDRIVER_RAYLASE_ERROR_INVALIDPARAM;
		
		if (pWrapperTable->m_LibraryHandle != nullptr) {
		#ifdef _WIN32
			HMODULE hModule = (HMODULE) pWrapperTable->m_LibraryHandle;
			FreeLibrary(hModule);
		#else // _WIN32
			dlclose(pWrapperTable->m_LibraryHandle);
		#endif // _WIN32
			return initWrapperTable(pWrapperTable);
		}
		
		return LIBMCDRIVER_RAYLASE_SUCCESS;
	}

	inline LibMCDriver_RaylaseResult CWrapper::loadWrapperTable(sLibMCDriver_RaylaseDynamicWrapperTable * pWrapperTable, const char * pLibraryFileName)
	{
		if (pWrapperTable == nullptr)
			return LIBMCDRIVER_RAYLASE_ERROR_INVALIDPARAM;
		if (pLibraryFileName == nullptr)
			return LIBMCDRIVER_RAYLASE_ERROR_INVALIDPARAM;
		
		#ifdef _WIN32
		// Convert filename to UTF16-string
		int nLength = 0;
		while ((pLibraryFileName[nLength] != 0) && (nLength < MAX_PATH))
			nLength++;
		int nBufferSize = nLength * 2 + 2;
		std::vector<wchar_t> wsLibraryFileName(nBufferSize);
		int nResult = MultiByteToWideChar(CP_UTF8, 0, pLibraryFileName, nLength, &wsLibraryFileName[0], nBufferSize);
		if (nResult == 0)
			return LIBMCDRIVER_RAYLASE_ERROR_COULDNOTLOADLIBRARY;
		
		HMODULE hLibrary = LoadLibraryW(wsLibraryFileName.data());
		if (hLibrary == 0) 
			return LIBMCDRIVER_RAYLASE_ERROR_COULDNOTLOADLIBRARY;
		#else // _WIN32
		void* hLibrary = dlopen(pLibraryFileName, RTLD_LAZY);
		if (hLibrary == 0) 
			return LIBMCDRIVER_RAYLASE_ERROR_COULDNOTLOADLIBRARY;
		dlerror();
		#endif // _WIN32
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_Configure = (PLibMCDriver_RaylaseDriver_ConfigurePtr) GetProcAddress(hLibrary, "libmcdriver_raylase_driver_configure");
		#else // _WIN32
		pWrapperTable->m_Driver_Configure = (PLibMCDriver_RaylaseDriver_ConfigurePtr) dlsym(hLibrary, "libmcdriver_raylase_driver_configure");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_Configure == nullptr)
			return LIBMCDRIVER_RAYLASE_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_GetName = (PLibMCDriver_RaylaseDriver_GetNamePtr) GetProcAddress(hLibrary, "libmcdriver_raylase_driver_getname");
		#else // _WIN32
		pWrapperTable->m_Driver_GetName = (PLibMCDriver_RaylaseDriver_GetNamePtr) dlsym(hLibrary, "libmcdriver_raylase_driver_getname");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_GetName == nullptr)
			return LIBMCDRIVER_RAYLASE_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_GetType = (PLibMCDriver_RaylaseDriver_GetTypePtr) GetProcAddress(hLibrary, "libmcdriver_raylase_driver_gettype");
		#else // _WIN32
		pWrapperTable->m_Driver_GetType = (PLibMCDriver_RaylaseDriver_GetTypePtr) dlsym(hLibrary, "libmcdriver_raylase_driver_gettype");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_GetType == nullptr)
			return LIBMCDRIVER_RAYLASE_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_GetVersion = (PLibMCDriver_RaylaseDriver_GetVersionPtr) GetProcAddress(hLibrary, "libmcdriver_raylase_driver_getversion");
		#else // _WIN32
		pWrapperTable->m_Driver_GetVersion = (PLibMCDriver_RaylaseDriver_GetVersionPtr) dlsym(hLibrary, "libmcdriver_raylase_driver_getversion");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_GetVersion == nullptr)
			return LIBMCDRIVER_RAYLASE_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_QueryParameters = (PLibMCDriver_RaylaseDriver_QueryParametersPtr) GetProcAddress(hLibrary, "libmcdriver_raylase_driver_queryparameters");
		#else // _WIN32
		pWrapperTable->m_Driver_QueryParameters = (PLibMCDriver_RaylaseDriver_QueryParametersPtr) dlsym(hLibrary, "libmcdriver_raylase_driver_queryparameters");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_QueryParameters == nullptr)
			return LIBMCDRIVER_RAYLASE_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_QueryParametersEx = (PLibMCDriver_RaylaseDriver_QueryParametersExPtr) GetProcAddress(hLibrary, "libmcdriver_raylase_driver_queryparametersex");
		#else // _WIN32
		pWrapperTable->m_Driver_QueryParametersEx = (PLibMCDriver_RaylaseDriver_QueryParametersExPtr) dlsym(hLibrary, "libmcdriver_raylase_driver_queryparametersex");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_QueryParametersEx == nullptr)
			return LIBMCDRIVER_RAYLASE_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_RaylaseCard_IsConnected = (PLibMCDriver_RaylaseRaylaseCard_IsConnectedPtr) GetProcAddress(hLibrary, "libmcdriver_raylase_raylasecard_isconnected");
		#else // _WIN32
		pWrapperTable->m_RaylaseCard_IsConnected = (PLibMCDriver_RaylaseRaylaseCard_IsConnectedPtr) dlsym(hLibrary, "libmcdriver_raylase_raylasecard_isconnected");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_RaylaseCard_IsConnected == nullptr)
			return LIBMCDRIVER_RAYLASE_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_RaylaseCard_ResetToSystemDefaults = (PLibMCDriver_RaylaseRaylaseCard_ResetToSystemDefaultsPtr) GetProcAddress(hLibrary, "libmcdriver_raylase_raylasecard_resettosystemdefaults");
		#else // _WIN32
		pWrapperTable->m_RaylaseCard_ResetToSystemDefaults = (PLibMCDriver_RaylaseRaylaseCard_ResetToSystemDefaultsPtr) dlsym(hLibrary, "libmcdriver_raylase_raylasecard_resettosystemdefaults");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_RaylaseCard_ResetToSystemDefaults == nullptr)
			return LIBMCDRIVER_RAYLASE_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_RaylaseCard_LaserOn = (PLibMCDriver_RaylaseRaylaseCard_LaserOnPtr) GetProcAddress(hLibrary, "libmcdriver_raylase_raylasecard_laseron");
		#else // _WIN32
		pWrapperTable->m_RaylaseCard_LaserOn = (PLibMCDriver_RaylaseRaylaseCard_LaserOnPtr) dlsym(hLibrary, "libmcdriver_raylase_raylasecard_laseron");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_RaylaseCard_LaserOn == nullptr)
			return LIBMCDRIVER_RAYLASE_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_RaylaseCard_LaserOff = (PLibMCDriver_RaylaseRaylaseCard_LaserOffPtr) GetProcAddress(hLibrary, "libmcdriver_raylase_raylasecard_laseroff");
		#else // _WIN32
		pWrapperTable->m_RaylaseCard_LaserOff = (PLibMCDriver_RaylaseRaylaseCard_LaserOffPtr) dlsym(hLibrary, "libmcdriver_raylase_raylasecard_laseroff");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_RaylaseCard_LaserOff == nullptr)
			return LIBMCDRIVER_RAYLASE_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_RaylaseCard_ArmLaser = (PLibMCDriver_RaylaseRaylaseCard_ArmLaserPtr) GetProcAddress(hLibrary, "libmcdriver_raylase_raylasecard_armlaser");
		#else // _WIN32
		pWrapperTable->m_RaylaseCard_ArmLaser = (PLibMCDriver_RaylaseRaylaseCard_ArmLaserPtr) dlsym(hLibrary, "libmcdriver_raylase_raylasecard_armlaser");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_RaylaseCard_ArmLaser == nullptr)
			return LIBMCDRIVER_RAYLASE_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_RaylaseCard_IsLaserArmed = (PLibMCDriver_RaylaseRaylaseCard_IsLaserArmedPtr) GetProcAddress(hLibrary, "libmcdriver_raylase_raylasecard_islaserarmed");
		#else // _WIN32
		pWrapperTable->m_RaylaseCard_IsLaserArmed = (PLibMCDriver_RaylaseRaylaseCard_IsLaserArmedPtr) dlsym(hLibrary, "libmcdriver_raylase_raylasecard_islaserarmed");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_RaylaseCard_IsLaserArmed == nullptr)
			return LIBMCDRIVER_RAYLASE_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_RaylaseCard_EnablePilot = (PLibMCDriver_RaylaseRaylaseCard_EnablePilotPtr) GetProcAddress(hLibrary, "libmcdriver_raylase_raylasecard_enablepilot");
		#else // _WIN32
		pWrapperTable->m_RaylaseCard_EnablePilot = (PLibMCDriver_RaylaseRaylaseCard_EnablePilotPtr) dlsym(hLibrary, "libmcdriver_raylase_raylasecard_enablepilot");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_RaylaseCard_EnablePilot == nullptr)
			return LIBMCDRIVER_RAYLASE_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_RaylaseCard_PilotIsEnabled = (PLibMCDriver_RaylaseRaylaseCard_PilotIsEnabledPtr) GetProcAddress(hLibrary, "libmcdriver_raylase_raylasecard_pilotisenabled");
		#else // _WIN32
		pWrapperTable->m_RaylaseCard_PilotIsEnabled = (PLibMCDriver_RaylaseRaylaseCard_PilotIsEnabledPtr) dlsym(hLibrary, "libmcdriver_raylase_raylasecard_pilotisenabled");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_RaylaseCard_PilotIsEnabled == nullptr)
			return LIBMCDRIVER_RAYLASE_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_RaylaseCard_GetLaserStatus = (PLibMCDriver_RaylaseRaylaseCard_GetLaserStatusPtr) GetProcAddress(hLibrary, "libmcdriver_raylase_raylasecard_getlaserstatus");
		#else // _WIN32
		pWrapperTable->m_RaylaseCard_GetLaserStatus = (PLibMCDriver_RaylaseRaylaseCard_GetLaserStatusPtr) dlsym(hLibrary, "libmcdriver_raylase_raylasecard_getlaserstatus");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_RaylaseCard_GetLaserStatus == nullptr)
			return LIBMCDRIVER_RAYLASE_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_RaylaseCard_AssignLaserIndex = (PLibMCDriver_RaylaseRaylaseCard_AssignLaserIndexPtr) GetProcAddress(hLibrary, "libmcdriver_raylase_raylasecard_assignlaserindex");
		#else // _WIN32
		pWrapperTable->m_RaylaseCard_AssignLaserIndex = (PLibMCDriver_RaylaseRaylaseCard_AssignLaserIndexPtr) dlsym(hLibrary, "libmcdriver_raylase_raylasecard_assignlaserindex");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_RaylaseCard_AssignLaserIndex == nullptr)
			return LIBMCDRIVER_RAYLASE_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_RaylaseCard_GetAssignedLaserIndex = (PLibMCDriver_RaylaseRaylaseCard_GetAssignedLaserIndexPtr) GetProcAddress(hLibrary, "libmcdriver_raylase_raylasecard_getassignedlaserindex");
		#else // _WIN32
		pWrapperTable->m_RaylaseCard_GetAssignedLaserIndex = (PLibMCDriver_RaylaseRaylaseCard_GetAssignedLaserIndexPtr) dlsym(hLibrary, "libmcdriver_raylase_raylasecard_getassignedlaserindex");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_RaylaseCard_GetAssignedLaserIndex == nullptr)
			return LIBMCDRIVER_RAYLASE_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_RaylaseCard_DrawLayer = (PLibMCDriver_RaylaseRaylaseCard_DrawLayerPtr) GetProcAddress(hLibrary, "libmcdriver_raylase_raylasecard_drawlayer");
		#else // _WIN32
		pWrapperTable->m_RaylaseCard_DrawLayer = (PLibMCDriver_RaylaseRaylaseCard_DrawLayerPtr) dlsym(hLibrary, "libmcdriver_raylase_raylasecard_drawlayer");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_RaylaseCard_DrawLayer == nullptr)
			return LIBMCDRIVER_RAYLASE_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_Raylase_SetToSimulationMode = (PLibMCDriver_RaylaseDriver_Raylase_SetToSimulationModePtr) GetProcAddress(hLibrary, "libmcdriver_raylase_driver_raylase_settosimulationmode");
		#else // _WIN32
		pWrapperTable->m_Driver_Raylase_SetToSimulationMode = (PLibMCDriver_RaylaseDriver_Raylase_SetToSimulationModePtr) dlsym(hLibrary, "libmcdriver_raylase_driver_raylase_settosimulationmode");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_Raylase_SetToSimulationMode == nullptr)
			return LIBMCDRIVER_RAYLASE_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_Raylase_IsSimulationMode = (PLibMCDriver_RaylaseDriver_Raylase_IsSimulationModePtr) GetProcAddress(hLibrary, "libmcdriver_raylase_driver_raylase_issimulationmode");
		#else // _WIN32
		pWrapperTable->m_Driver_Raylase_IsSimulationMode = (PLibMCDriver_RaylaseDriver_Raylase_IsSimulationModePtr) dlsym(hLibrary, "libmcdriver_raylase_driver_raylase_issimulationmode");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_Raylase_IsSimulationMode == nullptr)
			return LIBMCDRIVER_RAYLASE_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_Raylase_SetCustomSDKResource = (PLibMCDriver_RaylaseDriver_Raylase_SetCustomSDKResourcePtr) GetProcAddress(hLibrary, "libmcdriver_raylase_driver_raylase_setcustomsdkresource");
		#else // _WIN32
		pWrapperTable->m_Driver_Raylase_SetCustomSDKResource = (PLibMCDriver_RaylaseDriver_Raylase_SetCustomSDKResourcePtr) dlsym(hLibrary, "libmcdriver_raylase_driver_raylase_setcustomsdkresource");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_Raylase_SetCustomSDKResource == nullptr)
			return LIBMCDRIVER_RAYLASE_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_Raylase_LoadSDK = (PLibMCDriver_RaylaseDriver_Raylase_LoadSDKPtr) GetProcAddress(hLibrary, "libmcdriver_raylase_driver_raylase_loadsdk");
		#else // _WIN32
		pWrapperTable->m_Driver_Raylase_LoadSDK = (PLibMCDriver_RaylaseDriver_Raylase_LoadSDKPtr) dlsym(hLibrary, "libmcdriver_raylase_driver_raylase_loadsdk");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_Raylase_LoadSDK == nullptr)
			return LIBMCDRIVER_RAYLASE_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_Raylase_ConnectByIP = (PLibMCDriver_RaylaseDriver_Raylase_ConnectByIPPtr) GetProcAddress(hLibrary, "libmcdriver_raylase_driver_raylase_connectbyip");
		#else // _WIN32
		pWrapperTable->m_Driver_Raylase_ConnectByIP = (PLibMCDriver_RaylaseDriver_Raylase_ConnectByIPPtr) dlsym(hLibrary, "libmcdriver_raylase_driver_raylase_connectbyip");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_Raylase_ConnectByIP == nullptr)
			return LIBMCDRIVER_RAYLASE_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_Raylase_GetConnectedCard = (PLibMCDriver_RaylaseDriver_Raylase_GetConnectedCardPtr) GetProcAddress(hLibrary, "libmcdriver_raylase_driver_raylase_getconnectedcard");
		#else // _WIN32
		pWrapperTable->m_Driver_Raylase_GetConnectedCard = (PLibMCDriver_RaylaseDriver_Raylase_GetConnectedCardPtr) dlsym(hLibrary, "libmcdriver_raylase_driver_raylase_getconnectedcard");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_Raylase_GetConnectedCard == nullptr)
			return LIBMCDRIVER_RAYLASE_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_Raylase_CardExists = (PLibMCDriver_RaylaseDriver_Raylase_CardExistsPtr) GetProcAddress(hLibrary, "libmcdriver_raylase_driver_raylase_cardexists");
		#else // _WIN32
		pWrapperTable->m_Driver_Raylase_CardExists = (PLibMCDriver_RaylaseDriver_Raylase_CardExistsPtr) dlsym(hLibrary, "libmcdriver_raylase_driver_raylase_cardexists");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_Raylase_CardExists == nullptr)
			return LIBMCDRIVER_RAYLASE_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_Raylase_DisconnectCard = (PLibMCDriver_RaylaseDriver_Raylase_DisconnectCardPtr) GetProcAddress(hLibrary, "libmcdriver_raylase_driver_raylase_disconnectcard");
		#else // _WIN32
		pWrapperTable->m_Driver_Raylase_DisconnectCard = (PLibMCDriver_RaylaseDriver_Raylase_DisconnectCardPtr) dlsym(hLibrary, "libmcdriver_raylase_driver_raylase_disconnectcard");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_Raylase_DisconnectCard == nullptr)
			return LIBMCDRIVER_RAYLASE_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_Raylase_DrawLayerMultiLaser = (PLibMCDriver_RaylaseDriver_Raylase_DrawLayerMultiLaserPtr) GetProcAddress(hLibrary, "libmcdriver_raylase_driver_raylase_drawlayermultilaser");
		#else // _WIN32
		pWrapperTable->m_Driver_Raylase_DrawLayerMultiLaser = (PLibMCDriver_RaylaseDriver_Raylase_DrawLayerMultiLaserPtr) dlsym(hLibrary, "libmcdriver_raylase_driver_raylase_drawlayermultilaser");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_Raylase_DrawLayerMultiLaser == nullptr)
			return LIBMCDRIVER_RAYLASE_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GetVersion = (PLibMCDriver_RaylaseGetVersionPtr) GetProcAddress(hLibrary, "libmcdriver_raylase_getversion");
		#else // _WIN32
		pWrapperTable->m_GetVersion = (PLibMCDriver_RaylaseGetVersionPtr) dlsym(hLibrary, "libmcdriver_raylase_getversion");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GetVersion == nullptr)
			return LIBMCDRIVER_RAYLASE_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GetLastError = (PLibMCDriver_RaylaseGetLastErrorPtr) GetProcAddress(hLibrary, "libmcdriver_raylase_getlasterror");
		#else // _WIN32
		pWrapperTable->m_GetLastError = (PLibMCDriver_RaylaseGetLastErrorPtr) dlsym(hLibrary, "libmcdriver_raylase_getlasterror");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GetLastError == nullptr)
			return LIBMCDRIVER_RAYLASE_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ReleaseInstance = (PLibMCDriver_RaylaseReleaseInstancePtr) GetProcAddress(hLibrary, "libmcdriver_raylase_releaseinstance");
		#else // _WIN32
		pWrapperTable->m_ReleaseInstance = (PLibMCDriver_RaylaseReleaseInstancePtr) dlsym(hLibrary, "libmcdriver_raylase_releaseinstance");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ReleaseInstance == nullptr)
			return LIBMCDRIVER_RAYLASE_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_AcquireInstance = (PLibMCDriver_RaylaseAcquireInstancePtr) GetProcAddress(hLibrary, "libmcdriver_raylase_acquireinstance");
		#else // _WIN32
		pWrapperTable->m_AcquireInstance = (PLibMCDriver_RaylaseAcquireInstancePtr) dlsym(hLibrary, "libmcdriver_raylase_acquireinstance");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_AcquireInstance == nullptr)
			return LIBMCDRIVER_RAYLASE_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_InjectComponent = (PLibMCDriver_RaylaseInjectComponentPtr) GetProcAddress(hLibrary, "libmcdriver_raylase_injectcomponent");
		#else // _WIN32
		pWrapperTable->m_InjectComponent = (PLibMCDriver_RaylaseInjectComponentPtr) dlsym(hLibrary, "libmcdriver_raylase_injectcomponent");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_InjectComponent == nullptr)
			return LIBMCDRIVER_RAYLASE_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GetSymbolLookupMethod = (PLibMCDriver_RaylaseGetSymbolLookupMethodPtr) GetProcAddress(hLibrary, "libmcdriver_raylase_getsymbollookupmethod");
		#else // _WIN32
		pWrapperTable->m_GetSymbolLookupMethod = (PLibMCDriver_RaylaseGetSymbolLookupMethodPtr) dlsym(hLibrary, "libmcdriver_raylase_getsymbollookupmethod");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GetSymbolLookupMethod == nullptr)
			return LIBMCDRIVER_RAYLASE_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_CreateDriver = (PLibMCDriver_RaylaseCreateDriverPtr) GetProcAddress(hLibrary, "libmcdriver_raylase_createdriver");
		#else // _WIN32
		pWrapperTable->m_CreateDriver = (PLibMCDriver_RaylaseCreateDriverPtr) dlsym(hLibrary, "libmcdriver_raylase_createdriver");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_CreateDriver == nullptr)
			return LIBMCDRIVER_RAYLASE_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		pWrapperTable->m_LibraryHandle = hLibrary;
		return LIBMCDRIVER_RAYLASE_SUCCESS;
	}

	inline LibMCDriver_RaylaseResult CWrapper::loadWrapperTableFromSymbolLookupMethod(sLibMCDriver_RaylaseDynamicWrapperTable * pWrapperTable, void* pSymbolLookupMethod)
{
		if (pWrapperTable == nullptr)
			return LIBMCDRIVER_RAYLASE_ERROR_INVALIDPARAM;
		if (pSymbolLookupMethod == nullptr)
			return LIBMCDRIVER_RAYLASE_ERROR_INVALIDPARAM;
		
		typedef LibMCDriver_RaylaseResult(*SymbolLookupType)(const char*, void**);
		
		SymbolLookupType pLookup = (SymbolLookupType)pSymbolLookupMethod;
		
		LibMCDriver_RaylaseResult eLookupError = LIBMCDRIVER_RAYLASE_SUCCESS;
		eLookupError = (*pLookup)("libmcdriver_raylase_driver_configure", (void**)&(pWrapperTable->m_Driver_Configure));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_Configure == nullptr) )
			return LIBMCDRIVER_RAYLASE_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_raylase_driver_getname", (void**)&(pWrapperTable->m_Driver_GetName));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_GetName == nullptr) )
			return LIBMCDRIVER_RAYLASE_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_raylase_driver_gettype", (void**)&(pWrapperTable->m_Driver_GetType));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_GetType == nullptr) )
			return LIBMCDRIVER_RAYLASE_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_raylase_driver_getversion", (void**)&(pWrapperTable->m_Driver_GetVersion));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_GetVersion == nullptr) )
			return LIBMCDRIVER_RAYLASE_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_raylase_driver_queryparameters", (void**)&(pWrapperTable->m_Driver_QueryParameters));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_QueryParameters == nullptr) )
			return LIBMCDRIVER_RAYLASE_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_raylase_driver_queryparametersex", (void**)&(pWrapperTable->m_Driver_QueryParametersEx));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_QueryParametersEx == nullptr) )
			return LIBMCDRIVER_RAYLASE_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_raylase_raylasecard_isconnected", (void**)&(pWrapperTable->m_RaylaseCard_IsConnected));
		if ( (eLookupError != 0) || (pWrapperTable->m_RaylaseCard_IsConnected == nullptr) )
			return LIBMCDRIVER_RAYLASE_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_raylase_raylasecard_resettosystemdefaults", (void**)&(pWrapperTable->m_RaylaseCard_ResetToSystemDefaults));
		if ( (eLookupError != 0) || (pWrapperTable->m_RaylaseCard_ResetToSystemDefaults == nullptr) )
			return LIBMCDRIVER_RAYLASE_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_raylase_raylasecard_laseron", (void**)&(pWrapperTable->m_RaylaseCard_LaserOn));
		if ( (eLookupError != 0) || (pWrapperTable->m_RaylaseCard_LaserOn == nullptr) )
			return LIBMCDRIVER_RAYLASE_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_raylase_raylasecard_laseroff", (void**)&(pWrapperTable->m_RaylaseCard_LaserOff));
		if ( (eLookupError != 0) || (pWrapperTable->m_RaylaseCard_LaserOff == nullptr) )
			return LIBMCDRIVER_RAYLASE_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_raylase_raylasecard_armlaser", (void**)&(pWrapperTable->m_RaylaseCard_ArmLaser));
		if ( (eLookupError != 0) || (pWrapperTable->m_RaylaseCard_ArmLaser == nullptr) )
			return LIBMCDRIVER_RAYLASE_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_raylase_raylasecard_islaserarmed", (void**)&(pWrapperTable->m_RaylaseCard_IsLaserArmed));
		if ( (eLookupError != 0) || (pWrapperTable->m_RaylaseCard_IsLaserArmed == nullptr) )
			return LIBMCDRIVER_RAYLASE_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_raylase_raylasecard_enablepilot", (void**)&(pWrapperTable->m_RaylaseCard_EnablePilot));
		if ( (eLookupError != 0) || (pWrapperTable->m_RaylaseCard_EnablePilot == nullptr) )
			return LIBMCDRIVER_RAYLASE_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_raylase_raylasecard_pilotisenabled", (void**)&(pWrapperTable->m_RaylaseCard_PilotIsEnabled));
		if ( (eLookupError != 0) || (pWrapperTable->m_RaylaseCard_PilotIsEnabled == nullptr) )
			return LIBMCDRIVER_RAYLASE_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_raylase_raylasecard_getlaserstatus", (void**)&(pWrapperTable->m_RaylaseCard_GetLaserStatus));
		if ( (eLookupError != 0) || (pWrapperTable->m_RaylaseCard_GetLaserStatus == nullptr) )
			return LIBMCDRIVER_RAYLASE_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_raylase_raylasecard_assignlaserindex", (void**)&(pWrapperTable->m_RaylaseCard_AssignLaserIndex));
		if ( (eLookupError != 0) || (pWrapperTable->m_RaylaseCard_AssignLaserIndex == nullptr) )
			return LIBMCDRIVER_RAYLASE_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_raylase_raylasecard_getassignedlaserindex", (void**)&(pWrapperTable->m_RaylaseCard_GetAssignedLaserIndex));
		if ( (eLookupError != 0) || (pWrapperTable->m_RaylaseCard_GetAssignedLaserIndex == nullptr) )
			return LIBMCDRIVER_RAYLASE_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_raylase_raylasecard_drawlayer", (void**)&(pWrapperTable->m_RaylaseCard_DrawLayer));
		if ( (eLookupError != 0) || (pWrapperTable->m_RaylaseCard_DrawLayer == nullptr) )
			return LIBMCDRIVER_RAYLASE_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_raylase_driver_raylase_settosimulationmode", (void**)&(pWrapperTable->m_Driver_Raylase_SetToSimulationMode));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_Raylase_SetToSimulationMode == nullptr) )
			return LIBMCDRIVER_RAYLASE_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_raylase_driver_raylase_issimulationmode", (void**)&(pWrapperTable->m_Driver_Raylase_IsSimulationMode));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_Raylase_IsSimulationMode == nullptr) )
			return LIBMCDRIVER_RAYLASE_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_raylase_driver_raylase_setcustomsdkresource", (void**)&(pWrapperTable->m_Driver_Raylase_SetCustomSDKResource));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_Raylase_SetCustomSDKResource == nullptr) )
			return LIBMCDRIVER_RAYLASE_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_raylase_driver_raylase_loadsdk", (void**)&(pWrapperTable->m_Driver_Raylase_LoadSDK));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_Raylase_LoadSDK == nullptr) )
			return LIBMCDRIVER_RAYLASE_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_raylase_driver_raylase_connectbyip", (void**)&(pWrapperTable->m_Driver_Raylase_ConnectByIP));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_Raylase_ConnectByIP == nullptr) )
			return LIBMCDRIVER_RAYLASE_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_raylase_driver_raylase_getconnectedcard", (void**)&(pWrapperTable->m_Driver_Raylase_GetConnectedCard));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_Raylase_GetConnectedCard == nullptr) )
			return LIBMCDRIVER_RAYLASE_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_raylase_driver_raylase_cardexists", (void**)&(pWrapperTable->m_Driver_Raylase_CardExists));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_Raylase_CardExists == nullptr) )
			return LIBMCDRIVER_RAYLASE_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_raylase_driver_raylase_disconnectcard", (void**)&(pWrapperTable->m_Driver_Raylase_DisconnectCard));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_Raylase_DisconnectCard == nullptr) )
			return LIBMCDRIVER_RAYLASE_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_raylase_driver_raylase_drawlayermultilaser", (void**)&(pWrapperTable->m_Driver_Raylase_DrawLayerMultiLaser));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_Raylase_DrawLayerMultiLaser == nullptr) )
			return LIBMCDRIVER_RAYLASE_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_raylase_getversion", (void**)&(pWrapperTable->m_GetVersion));
		if ( (eLookupError != 0) || (pWrapperTable->m_GetVersion == nullptr) )
			return LIBMCDRIVER_RAYLASE_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_raylase_getlasterror", (void**)&(pWrapperTable->m_GetLastError));
		if ( (eLookupError != 0) || (pWrapperTable->m_GetLastError == nullptr) )
			return LIBMCDRIVER_RAYLASE_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_raylase_releaseinstance", (void**)&(pWrapperTable->m_ReleaseInstance));
		if ( (eLookupError != 0) || (pWrapperTable->m_ReleaseInstance == nullptr) )
			return LIBMCDRIVER_RAYLASE_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_raylase_acquireinstance", (void**)&(pWrapperTable->m_AcquireInstance));
		if ( (eLookupError != 0) || (pWrapperTable->m_AcquireInstance == nullptr) )
			return LIBMCDRIVER_RAYLASE_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_raylase_injectcomponent", (void**)&(pWrapperTable->m_InjectComponent));
		if ( (eLookupError != 0) || (pWrapperTable->m_InjectComponent == nullptr) )
			return LIBMCDRIVER_RAYLASE_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_raylase_getsymbollookupmethod", (void**)&(pWrapperTable->m_GetSymbolLookupMethod));
		if ( (eLookupError != 0) || (pWrapperTable->m_GetSymbolLookupMethod == nullptr) )
			return LIBMCDRIVER_RAYLASE_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_raylase_createdriver", (void**)&(pWrapperTable->m_CreateDriver));
		if ( (eLookupError != 0) || (pWrapperTable->m_CreateDriver == nullptr) )
			return LIBMCDRIVER_RAYLASE_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		return LIBMCDRIVER_RAYLASE_SUCCESS;
}

	
	
	/**
	 * Method definitions for class CBase
	 */
	
	/**
	 * Method definitions for class CDriver
	 */
	
	/**
	* CDriver::Configure - Configures a driver with its specific configuration data.
	* @param[in] sConfigurationString - Configuration data of driver.
	*/
	void CDriver::Configure(const std::string & sConfigurationString)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_Configure(m_pHandle, sConfigurationString.c_str()));
	}
	
	/**
	* CDriver::GetName - returns the name identifier of the driver
	* @return Name of the driver.
	*/
	std::string CDriver::GetName()
	{
		LibMCDriver_Raylase_uint32 bytesNeededName = 0;
		LibMCDriver_Raylase_uint32 bytesWrittenName = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetName(m_pHandle, 0, &bytesNeededName, nullptr));
		std::vector<char> bufferName(bytesNeededName);
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetName(m_pHandle, bytesNeededName, &bytesWrittenName, &bufferName[0]));
		
		return std::string(&bufferName[0]);
	}
	
	/**
	* CDriver::GetType - returns the type identifier of the driver
	* @return Type of the driver.
	*/
	std::string CDriver::GetType()
	{
		LibMCDriver_Raylase_uint32 bytesNeededType = 0;
		LibMCDriver_Raylase_uint32 bytesWrittenType = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetType(m_pHandle, 0, &bytesNeededType, nullptr));
		std::vector<char> bufferType(bytesNeededType);
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetType(m_pHandle, bytesNeededType, &bytesWrittenType, &bufferType[0]));
		
		return std::string(&bufferType[0]);
	}
	
	/**
	* CDriver::GetVersion - returns the version identifiers of the driver
	* @param[out] nMajor - Major version.
	* @param[out] nMinor - Minor version.
	* @param[out] nMicro - Micro version.
	* @param[out] sBuild - Build identifier.
	*/
	void CDriver::GetVersion(LibMCDriver_Raylase_uint32 & nMajor, LibMCDriver_Raylase_uint32 & nMinor, LibMCDriver_Raylase_uint32 & nMicro, std::string & sBuild)
	{
		LibMCDriver_Raylase_uint32 bytesNeededBuild = 0;
		LibMCDriver_Raylase_uint32 bytesWrittenBuild = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetVersion(m_pHandle, &nMajor, &nMinor, &nMicro, 0, &bytesNeededBuild, nullptr));
		std::vector<char> bufferBuild(bytesNeededBuild);
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetVersion(m_pHandle, &nMajor, &nMinor, &nMicro, bytesNeededBuild, &bytesWrittenBuild, &bufferBuild[0]));
		sBuild = std::string(&bufferBuild[0]);
	}
	
	/**
	* CDriver::QueryParameters - Updates the driver parameters in the driver environment. Should only be called in the driver thread.
	*/
	void CDriver::QueryParameters()
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_QueryParameters(m_pHandle));
	}
	
	/**
	* CDriver::QueryParametersEx - Updates the driver parameters in the driver environment. Might be called out of thread. Implementation MUST be able to handle parallel calls.
	* @param[in] pDriverUpdateInstance - Status update instance.
	*/
	void CDriver::QueryParametersEx(classParam<LibMCEnv::CDriverStatusUpdateSession> pDriverUpdateInstance)
	{
		LibMCEnvHandle hDriverUpdateInstance = pDriverUpdateInstance.GetHandle();
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_QueryParametersEx(m_pHandle, hDriverUpdateInstance));
	}
	
	/**
	 * Method definitions for class CRaylaseCard
	 */
	
	/**
	* CRaylaseCard::IsConnected - Checks if the card is connected.
	* @return Flag if the card is disconnected.
	*/
	bool CRaylaseCard::IsConnected()
	{
		bool resultIsConnected = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_RaylaseCard_IsConnected(m_pHandle, &resultIsConnected));
		
		return resultIsConnected;
	}
	
	/**
	* CRaylaseCard::ResetToSystemDefaults - Resets the card settings to system defaults.
	*/
	void CRaylaseCard::ResetToSystemDefaults()
	{
		CheckError(m_pWrapper->m_WrapperTable.m_RaylaseCard_ResetToSystemDefaults(m_pHandle));
	}
	
	/**
	* CRaylaseCard::LaserOn - Turns the laser on.
	*/
	void CRaylaseCard::LaserOn()
	{
		CheckError(m_pWrapper->m_WrapperTable.m_RaylaseCard_LaserOn(m_pHandle));
	}
	
	/**
	* CRaylaseCard::LaserOff - Turns the laser off.
	*/
	void CRaylaseCard::LaserOff()
	{
		CheckError(m_pWrapper->m_WrapperTable.m_RaylaseCard_LaserOff(m_pHandle));
	}
	
	/**
	* CRaylaseCard::ArmLaser - Arms or disarms the laser.
	* @param[in] bShallBeArmed - Shall the laser be armed or disarmed.
	*/
	void CRaylaseCard::ArmLaser(const bool bShallBeArmed)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_RaylaseCard_ArmLaser(m_pHandle, bShallBeArmed));
	}
	
	/**
	* CRaylaseCard::IsLaserArmed - Checks if the laser is armed.
	* @return Flag if the laser is armed.
	*/
	bool CRaylaseCard::IsLaserArmed()
	{
		bool resultLaserIsArmed = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_RaylaseCard_IsLaserArmed(m_pHandle, &resultLaserIsArmed));
		
		return resultLaserIsArmed;
	}
	
	/**
	* CRaylaseCard::EnablePilot - Enables the pilot pointer.
	* @param[in] bShallBeEnabled - Shall the pilot be enabled.
	*/
	void CRaylaseCard::EnablePilot(const bool bShallBeEnabled)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_RaylaseCard_EnablePilot(m_pHandle, bShallBeEnabled));
	}
	
	/**
	* CRaylaseCard::PilotIsEnabled - Checks if the pilot is enabled.
	* @return Flag if the pilot is enabled.
	*/
	bool CRaylaseCard::PilotIsEnabled()
	{
		bool resultPilotIsEnabled = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_RaylaseCard_PilotIsEnabled(m_pHandle, &resultPilotIsEnabled));
		
		return resultPilotIsEnabled;
	}
	
	/**
	* CRaylaseCard::GetLaserStatus - Returns the laser status.
	* @param[out] bPilotIsEnabled - Flag if the pilot is enabled.
	* @param[out] bLaserIsArmed - Flag if the laser is armed.
	* @param[out] bLaserAlarm - Flag if the laser is in alarm state.
	*/
	void CRaylaseCard::GetLaserStatus(bool & bPilotIsEnabled, bool & bLaserIsArmed, bool & bLaserAlarm)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_RaylaseCard_GetLaserStatus(m_pHandle, &bPilotIsEnabled, &bLaserIsArmed, &bLaserAlarm));
	}
	
	/**
	* CRaylaseCard::AssignLaserIndex - Assigns a laser index to the card.
	* @param[in] nLaserIndex - Laser index to assign. This will map to the laser indices given in the build file. 0 means no assignment.
	*/
	void CRaylaseCard::AssignLaserIndex(const LibMCDriver_Raylase_uint32 nLaserIndex)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_RaylaseCard_AssignLaserIndex(m_pHandle, nLaserIndex));
	}
	
	/**
	* CRaylaseCard::GetAssignedLaserIndex - Returns the assigned laser index to the card. Default value is 0 (unassigned).
	* @return Assigned laser index. This will map to the laser indices given in the build file. 0 means no assignment.
	*/
	LibMCDriver_Raylase_uint32 CRaylaseCard::GetAssignedLaserIndex()
	{
		LibMCDriver_Raylase_uint32 resultLaserIndex = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_RaylaseCard_GetAssignedLaserIndex(m_pHandle, &resultLaserIndex));
		
		return resultLaserIndex;
	}
	
	/**
	* CRaylaseCard::DrawLayer - Draws a layer of a build stream. Blocks until the layer is drawn.
	* @param[in] sStreamUUID - UUID of the build stream. Must have been loaded in memory by the system.
	* @param[in] nLayerIndex - Layer index of the build file.
	* @param[in] nScanningTimeoutInMS - Maximum duration of the scanning process in milliseconds.
	*/
	void CRaylaseCard::DrawLayer(const std::string & sStreamUUID, const LibMCDriver_Raylase_uint32 nLayerIndex, const LibMCDriver_Raylase_uint32 nScanningTimeoutInMS)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_RaylaseCard_DrawLayer(m_pHandle, sStreamUUID.c_str(), nLayerIndex, nScanningTimeoutInMS));
	}
	
	/**
	 * Method definitions for class CDriver_Raylase
	 */
	
	/**
	* CDriver_Raylase::SetToSimulationMode - Sets the driver in Simulation mode.
	*/
	void CDriver_Raylase::SetToSimulationMode()
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_Raylase_SetToSimulationMode(m_pHandle));
	}
	
	/**
	* CDriver_Raylase::IsSimulationMode - Returns if the driver is in Simulation mode.
	* @return Simulation mode is active.
	*/
	bool CDriver_Raylase::IsSimulationMode()
	{
		bool resultIsSimulationMode = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_Raylase_IsSimulationMode(m_pHandle, &resultIsSimulationMode));
		
		return resultIsSimulationMode;
	}
	
	/**
	* CDriver_Raylase::SetCustomSDKResource - Sets the machine resource name of the SDK to load. MUST be called before LoadSDK or it has no effect.
	* @param[in] sResourceName - Resource name of core machine package. Empty means standard naming applies.
	*/
	void CDriver_Raylase::SetCustomSDKResource(const std::string & sResourceName)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_Raylase_SetCustomSDKResource(m_pHandle, sResourceName.c_str()));
	}
	
	/**
	* CDriver_Raylase::LoadSDK - Initializes the Raylase SDK.
	*/
	void CDriver_Raylase::LoadSDK()
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_Raylase_LoadSDK(m_pHandle));
	}
	
	/**
	* CDriver_Raylase::ConnectByIP - Connects to the Raylase Scanner Card. Fails if connection is not successful.
	* @param[in] sCardName - Name of scanner to be connected to. MUST not be in use.
	* @param[in] sCardIP - IP Address to connect to.
	* @param[in] nPort - Port to connect to.
	* @param[in] dMaxLaserPowerInWatts - Maximum laser power in Watts.
	* @return Instance of connected card.
	*/
	PRaylaseCard CDriver_Raylase::ConnectByIP(const std::string & sCardName, const std::string & sCardIP, const LibMCDriver_Raylase_uint32 nPort, const LibMCDriver_Raylase_double dMaxLaserPowerInWatts)
	{
		LibMCDriver_RaylaseHandle hRaylaseCardInstance = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_Raylase_ConnectByIP(m_pHandle, sCardName.c_str(), sCardIP.c_str(), nPort, dMaxLaserPowerInWatts, &hRaylaseCardInstance));
		
		if (!hRaylaseCardInstance) {
			CheckError(LIBMCDRIVER_RAYLASE_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CRaylaseCard>(m_pWrapper, hRaylaseCardInstance);
	}
	
	/**
	* CDriver_Raylase::GetConnectedCard - Retrieves a connected card instance.
	* @param[in] sCardName - Name of scanner card to retrieve. MUST have been connected before.
	* @return Instance of connected card.
	*/
	PRaylaseCard CDriver_Raylase::GetConnectedCard(const std::string & sCardName)
	{
		LibMCDriver_RaylaseHandle hRaylaseCardInstance = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_Raylase_GetConnectedCard(m_pHandle, sCardName.c_str(), &hRaylaseCardInstance));
		
		if (!hRaylaseCardInstance) {
			CheckError(LIBMCDRIVER_RAYLASE_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CRaylaseCard>(m_pWrapper, hRaylaseCardInstance);
	}
	
	/**
	* CDriver_Raylase::CardExists - Retrieves.
	* @param[in] sCardName - Name of scanner card to retrieve.
	* @return Returns true if card exists, false otherwise.
	*/
	bool CDriver_Raylase::CardExists(const std::string & sCardName)
	{
		bool resultCardExistsAndIsConnected = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_Raylase_CardExists(m_pHandle, sCardName.c_str(), &resultCardExistsAndIsConnected));
		
		return resultCardExistsAndIsConnected;
	}
	
	/**
	* CDriver_Raylase::DisconnectCard - Disconnects and unregisters a card. Does nothing if card does not exist.
	* @param[in] sCardName - Name of scanner card to disconnect. Card will be removed from driver.
	*/
	void CDriver_Raylase::DisconnectCard(const std::string & sCardName)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_Raylase_DisconnectCard(m_pHandle, sCardName.c_str()));
	}
	
	/**
	* CDriver_Raylase::DrawLayerMultiLaser - Draws a layer of a build stream. Blocks until the layer is drawn. The call will fail if the laser assignment of the cards is not unique.
	* @param[in] sStreamUUID - UUID of the build stream. Must have been loaded in memory by the system.
	* @param[in] nLayerIndex - Layer index of the build file.
	* @param[in] bFailIfNonAssignedDataExists - If true, the call will fail in case a layer contains data that is not assigned to any defined scanner card.
	* @param[in] nScanningTimeoutInMS - Maximum duration of the scanning process in milliseconds.
	*/
	void CDriver_Raylase::DrawLayerMultiLaser(const std::string & sStreamUUID, const LibMCDriver_Raylase_uint32 nLayerIndex, const bool bFailIfNonAssignedDataExists, const LibMCDriver_Raylase_uint32 nScanningTimeoutInMS)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_Raylase_DrawLayerMultiLaser(m_pHandle, sStreamUUID.c_str(), nLayerIndex, bFailIfNonAssignedDataExists, nScanningTimeoutInMS));
	}

} // namespace LibMCDriver_Raylase

#endif // __LIBMCDRIVER_RAYLASE_CPPHEADER_DYNAMIC_CPP

