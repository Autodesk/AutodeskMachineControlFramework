/*++

Copyright (C) 2020 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.8.0-develop.

Abstract: This is an autogenerated C++-Header file with basic types in
order to allow an easy use of MC Driver Raylase

Interface version: 1.0.0

*/

#ifndef __LIBMCDRIVER_RAYLASE_TYPES_HEADER_CPP
#define __LIBMCDRIVER_RAYLASE_TYPES_HEADER_CPP


/*************************************************************************************************************************
 Scalar types definition
**************************************************************************************************************************/

#ifdef LIBMCDRIVER_RAYLASE_USELEGACYINTEGERTYPES

typedef unsigned char LibMCDriver_Raylase_uint8;
typedef unsigned short LibMCDriver_Raylase_uint16 ;
typedef unsigned int LibMCDriver_Raylase_uint32;
typedef unsigned long long LibMCDriver_Raylase_uint64;
typedef char LibMCDriver_Raylase_int8;
typedef short LibMCDriver_Raylase_int16;
typedef int LibMCDriver_Raylase_int32;
typedef long long LibMCDriver_Raylase_int64;

#else // LIBMCDRIVER_RAYLASE_USELEGACYINTEGERTYPES

#include <stdint.h>

typedef uint8_t LibMCDriver_Raylase_uint8;
typedef uint16_t LibMCDriver_Raylase_uint16;
typedef uint32_t LibMCDriver_Raylase_uint32;
typedef uint64_t LibMCDriver_Raylase_uint64;
typedef int8_t LibMCDriver_Raylase_int8;
typedef int16_t LibMCDriver_Raylase_int16;
typedef int32_t LibMCDriver_Raylase_int32;
typedef int64_t LibMCDriver_Raylase_int64 ;

#endif // LIBMCDRIVER_RAYLASE_USELEGACYINTEGERTYPES

typedef float LibMCDriver_Raylase_single;
typedef double LibMCDriver_Raylase_double;

/*************************************************************************************************************************
 General type definitions
**************************************************************************************************************************/

typedef LibMCDriver_Raylase_int32 LibMCDriver_RaylaseResult;
typedef void * LibMCDriver_RaylaseHandle;
typedef void * LibMCDriver_Raylase_pvoid;

/*************************************************************************************************************************
 Version for LibMCDriver_Raylase
**************************************************************************************************************************/

#define LIBMCDRIVER_RAYLASE_VERSION_MAJOR 1
#define LIBMCDRIVER_RAYLASE_VERSION_MINOR 0
#define LIBMCDRIVER_RAYLASE_VERSION_MICRO 0
#define LIBMCDRIVER_RAYLASE_VERSION_PRERELEASEINFO ""
#define LIBMCDRIVER_RAYLASE_VERSION_BUILDINFO ""

/*************************************************************************************************************************
 Error constants for LibMCDriver_Raylase
**************************************************************************************************************************/

#define LIBMCDRIVER_RAYLASE_SUCCESS 0
#define LIBMCDRIVER_RAYLASE_ERROR_NOTIMPLEMENTED 1 /** functionality not implemented */
#define LIBMCDRIVER_RAYLASE_ERROR_INVALIDPARAM 2 /** an invalid parameter was passed */
#define LIBMCDRIVER_RAYLASE_ERROR_INVALIDCAST 3 /** a type cast failed */
#define LIBMCDRIVER_RAYLASE_ERROR_BUFFERTOOSMALL 4 /** a provided buffer is too small */
#define LIBMCDRIVER_RAYLASE_ERROR_GENERICEXCEPTION 5 /** a generic exception occurred */
#define LIBMCDRIVER_RAYLASE_ERROR_COULDNOTLOADLIBRARY 6 /** the library could not be loaded */
#define LIBMCDRIVER_RAYLASE_ERROR_COULDNOTFINDLIBRARYEXPORT 7 /** a required exported symbol could not be found in the library */
#define LIBMCDRIVER_RAYLASE_ERROR_INCOMPATIBLEBINARYVERSION 8 /** the version of the binary interface does not match the bindings interface */
#define LIBMCDRIVER_RAYLASE_ERROR_INVALIDSTATENAME 9 /** invalid state name */
#define LIBMCDRIVER_RAYLASE_ERROR_DRIVERERROR 1000 /** a driver error occured */
#define LIBMCDRIVER_RAYLASE_ERROR_SDKNOTINITIALIZED 1001 /** SDK not initialized */
#define LIBMCDRIVER_RAYLASE_ERROR_INVALIDCARDNAME 1002 /** Invalid card name */
#define LIBMCDRIVER_RAYLASE_ERROR_INVALIDCARDIP 1003 /** Invalid card IP */
#define LIBMCDRIVER_RAYLASE_ERROR_INVALIDCARDPORT 1004 /** Invalid card port */
#define LIBMCDRIVER_RAYLASE_ERROR_CARDALREADYREGISTERED 1005 /** Card already registered */
#define LIBMCDRIVER_RAYLASE_ERROR_CARDNOTREGISTERED 1006 /** Card not registered */
#define LIBMCDRIVER_RAYLASE_ERROR_INVALIDPOINTCOUNT 1007 /** Invalid point count */
#define LIBMCDRIVER_RAYLASE_ERROR_INVALIDLASERPOWER 1008 /** Invalid laser power */
#define LIBMCDRIVER_RAYLASE_ERROR_INVALIDRAYLASESDK 1009 /** Invalid Raylase SDK */

/*************************************************************************************************************************
 Error strings for LibMCDriver_Raylase
**************************************************************************************************************************/

inline const char * LIBMCDRIVER_RAYLASE_GETERRORSTRING (LibMCDriver_RaylaseResult nErrorCode) {
  switch (nErrorCode) {
    case LIBMCDRIVER_RAYLASE_SUCCESS: return "no error";
    case LIBMCDRIVER_RAYLASE_ERROR_NOTIMPLEMENTED: return "functionality not implemented";
    case LIBMCDRIVER_RAYLASE_ERROR_INVALIDPARAM: return "an invalid parameter was passed";
    case LIBMCDRIVER_RAYLASE_ERROR_INVALIDCAST: return "a type cast failed";
    case LIBMCDRIVER_RAYLASE_ERROR_BUFFERTOOSMALL: return "a provided buffer is too small";
    case LIBMCDRIVER_RAYLASE_ERROR_GENERICEXCEPTION: return "a generic exception occurred";
    case LIBMCDRIVER_RAYLASE_ERROR_COULDNOTLOADLIBRARY: return "the library could not be loaded";
    case LIBMCDRIVER_RAYLASE_ERROR_COULDNOTFINDLIBRARYEXPORT: return "a required exported symbol could not be found in the library";
    case LIBMCDRIVER_RAYLASE_ERROR_INCOMPATIBLEBINARYVERSION: return "the version of the binary interface does not match the bindings interface";
    case LIBMCDRIVER_RAYLASE_ERROR_INVALIDSTATENAME: return "invalid state name";
    case LIBMCDRIVER_RAYLASE_ERROR_DRIVERERROR: return "a driver error occured";
    case LIBMCDRIVER_RAYLASE_ERROR_SDKNOTINITIALIZED: return "SDK not initialized";
    case LIBMCDRIVER_RAYLASE_ERROR_INVALIDCARDNAME: return "Invalid card name";
    case LIBMCDRIVER_RAYLASE_ERROR_INVALIDCARDIP: return "Invalid card IP";
    case LIBMCDRIVER_RAYLASE_ERROR_INVALIDCARDPORT: return "Invalid card port";
    case LIBMCDRIVER_RAYLASE_ERROR_CARDALREADYREGISTERED: return "Card already registered";
    case LIBMCDRIVER_RAYLASE_ERROR_CARDNOTREGISTERED: return "Card not registered";
    case LIBMCDRIVER_RAYLASE_ERROR_INVALIDPOINTCOUNT: return "Invalid point count";
    case LIBMCDRIVER_RAYLASE_ERROR_INVALIDLASERPOWER: return "Invalid laser power";
    case LIBMCDRIVER_RAYLASE_ERROR_INVALIDRAYLASESDK: return "Invalid Raylase SDK";
    default: return "unknown error";
  }
}

/*************************************************************************************************************************
 Declaration of handle classes 
**************************************************************************************************************************/

typedef LibMCDriver_RaylaseHandle LibMCDriver_Raylase_Base;
typedef LibMCDriver_RaylaseHandle LibMCDriver_Raylase_Driver;
typedef LibMCDriver_RaylaseHandle LibMCDriver_Raylase_RaylaseCard;
typedef LibMCDriver_RaylaseHandle LibMCDriver_Raylase_Driver_Raylase;

namespace LibMCDriver_Raylase {

  /*************************************************************************************************************************
   Declaration of structs
  **************************************************************************************************************************/
  
  #pragma pack (1)
  
  typedef struct sPoint2D {
      LibMCDriver_Raylase_single m_X;
      LibMCDriver_Raylase_single m_Y;
  } sPoint2D;
  
  typedef struct sHatch2D {
      LibMCDriver_Raylase_single m_X1;
      LibMCDriver_Raylase_single m_Y1;
      LibMCDriver_Raylase_single m_X2;
      LibMCDriver_Raylase_single m_Y2;
  } sHatch2D;
  
  #pragma pack ()
  
} // namespace LibMCDriver_Raylase;

// define legacy C-names for enums, structs and function types
typedef LibMCDriver_Raylase::sPoint2D sLibMCDriver_RaylasePoint2D;
typedef LibMCDriver_Raylase::sHatch2D sLibMCDriver_RaylaseHatch2D;

#endif // __LIBMCDRIVER_RAYLASE_TYPES_HEADER_CPP
