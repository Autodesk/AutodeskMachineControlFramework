/*++

Copyright (C) 2020 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.8.0-develop.

Abstract: This is an autogenerated C++ header file in order to allow easy
development of MC Driver Raylase. The implementer of MC Driver Raylase needs to
derive concrete classes from the abstract classes in this header.

Interface version: 2.0.0

*/


#ifndef __LIBMCDRIVER_RAYLASE_CPPINTERFACES
#define __LIBMCDRIVER_RAYLASE_CPPINTERFACES

#include <string>
#include <memory>

#include "libmcdriver_raylase_types.hpp"


#include "libmcenv_dynamic.hpp"

namespace LibMCDriver_Raylase {
namespace Impl {

/**
 Forward declarations of class interfaces
*/
class IBase;
class IDriver;
class IRaylaseCard;
class IDriver_Raylase;



/*************************************************************************************************************************
 Parameter Cache definitions
**************************************************************************************************************************/

class ParameterCache {
	public:
		virtual ~ParameterCache() {}
};

template <class T1> class ParameterCache_1 : public ParameterCache {
	private:
		T1 m_param1;
	public:
		ParameterCache_1 (const T1 & param1)
			: m_param1 (param1)
		{
		}

		void retrieveData (T1 & param1)
		{
			param1 = m_param1;
		}
};

template <class T1, class T2> class ParameterCache_2 : public ParameterCache {
	private:
		T1 m_param1;
		T2 m_param2;
	public:
		ParameterCache_2 (const T1 & param1, const T2 & param2)
			: m_param1 (param1), m_param2 (param2)
		{
		}

		void retrieveData (T1 & param1, T2 & param2)
		{
			param1 = m_param1;
			param2 = m_param2;
		}
};

template <class T1, class T2, class T3> class ParameterCache_3 : public ParameterCache {
	private:
		T1 m_param1;
		T2 m_param2;
		T3 m_param3;
	public:
		ParameterCache_3 (const T1 & param1, const T2 & param2, const T3 & param3)
			: m_param1 (param1), m_param2 (param2), m_param3 (param3)
		{
		}

		void retrieveData (T1 & param1, T2 & param2, T3 & param3)
		{
			param1 = m_param1;
			param2 = m_param2;
			param3 = m_param3;
		}
};

template <class T1, class T2, class T3, class T4> class ParameterCache_4 : public ParameterCache {
	private:
		T1 m_param1;
		T2 m_param2;
		T3 m_param3;
		T4 m_param4;
	public:
		ParameterCache_4 (const T1 & param1, const T2 & param2, const T3 & param3, const T4 & param4)
			: m_param1 (param1), m_param2 (param2), m_param3 (param3), m_param4 (param4)
		{
		}

		void retrieveData (T1 & param1, T2 & param2, T3 & param3, T4 & param4)
		{
			param1 = m_param1;
			param2 = m_param2;
			param3 = m_param3;
			param4 = m_param4;
		}
};


/*************************************************************************************************************************
 Class interface for Base 
**************************************************************************************************************************/

class IBase {
private:
	std::unique_ptr<ParameterCache> m_ParameterCache;
public:
	/**
	* IBase::~IBase - virtual destructor of IBase
	*/
	virtual ~IBase() {};

	/**
	* IBase::ReleaseBaseClassInterface - Releases ownership of a base class interface. Deletes the reference, if necessary.
	* @param[in] pIBase - The base class instance to release
	*/
	static void ReleaseBaseClassInterface(IBase* pIBase)
	{
		if (pIBase) {
			pIBase->DecRefCount();
		}
	};

	/**
	* IBase::AcquireBaseClassInterface - Acquires shared ownership of a base class interface.
	* @param[in] pIBase - The base class instance to acquire
	*/
	static void AcquireBaseClassInterface(IBase* pIBase)
	{
		if (pIBase) {
			pIBase->IncRefCount();
		}
	};


	/**
	* IBase::GetLastErrorMessage - Returns the last error registered of this class instance
	* @param[out] sErrorMessage - Message of the last error registered
	* @return Has an error been registered already
	*/
	virtual bool GetLastErrorMessage(std::string & sErrorMessage) = 0;

	/**
	* IBase::ClearErrorMessages - Clears all registered messages of this class instance
	*/
	virtual void ClearErrorMessages() = 0;

	/**
	* IBase::RegisterErrorMessage - Registers an error message with this class instance
	* @param[in] sErrorMessage - Error message to register
	*/
	virtual void RegisterErrorMessage(const std::string & sErrorMessage) = 0;

	/**
	* IBase::IncRefCount - Increases the reference count of a class instance
	*/
	virtual void IncRefCount() = 0;

	/**
	* IBase::DecRefCount - Decreases the reference count of a class instance and free releases it, if the last reference has been removed
	* @return Has the object been released
	*/
	virtual bool DecRefCount() = 0;

	/**
	* IBase::_setCache - set parameter cache of object
	*/
	void _setCache(ParameterCache * pCache)
	{
		m_ParameterCache.reset(pCache);
	}

	/**
	* IBase::_getCache - returns parameter cache of object
	*/
	ParameterCache* _getCache()
	{
		return m_ParameterCache.get();
	}

};


/**
 Definition of a shared pointer class for IBase
*/
template<class T>
class IBaseSharedPtr : public std::shared_ptr<T>
{
public:
	explicit IBaseSharedPtr(T* t = nullptr)
		: std::shared_ptr<T>(t, IBase::ReleaseBaseClassInterface)
	{
		t->IncRefCount();
	}

	// Reset function, as it also needs to properly set the deleter.
	void reset(T* t = nullptr)
	{
		std::shared_ptr<T>::reset(t, IBase::ReleaseBaseClassInterface);
	}

	// Get-function that increases the Base class's reference count
	T* getCoOwningPtr()
	{
		T* t = this->get();
		t->IncRefCount();
		return t;
	}
};


typedef IBaseSharedPtr<IBase> PIBase;


/*************************************************************************************************************************
 Class interface for Driver 
**************************************************************************************************************************/

class IDriver : public virtual IBase {
public:
	/**
	* IDriver::Configure - Configures a driver with its specific configuration data.
	* @param[in] sConfigurationString - Configuration data of driver.
	*/
	virtual void Configure(const std::string & sConfigurationString) = 0;

	/**
	* IDriver::GetName - returns the name identifier of the driver
	* @return Name of the driver.
	*/
	virtual std::string GetName() = 0;

	/**
	* IDriver::GetType - returns the type identifier of the driver
	* @return Type of the driver.
	*/
	virtual std::string GetType() = 0;

	/**
	* IDriver::GetVersion - returns the version identifiers of the driver
	* @param[out] nMajor - Major version.
	* @param[out] nMinor - Minor version.
	* @param[out] nMicro - Micro version.
	* @param[out] sBuild - Build identifier.
	*/
	virtual void GetVersion(LibMCDriver_Raylase_uint32 & nMajor, LibMCDriver_Raylase_uint32 & nMinor, LibMCDriver_Raylase_uint32 & nMicro, std::string & sBuild) = 0;

	/**
	* IDriver::QueryParameters - Updates the driver parameters in the driver environment. Should only be called in the driver thread.
	*/
	virtual void QueryParameters() = 0;

	/**
	* IDriver::QueryParametersEx - Updates the driver parameters in the driver environment. Might be called out of thread. Implementation MUST be able to handle parallel calls.
	* @param[in] pDriverUpdateInstance - Status update instance.
	*/
	virtual void QueryParametersEx(LibMCEnv::PDriverStatusUpdateSession pDriverUpdateInstance) = 0;

};

typedef IBaseSharedPtr<IDriver> PIDriver;


/*************************************************************************************************************************
 Class interface for RaylaseCard 
**************************************************************************************************************************/

class IRaylaseCard : public virtual IBase {
public:
	/**
	* IRaylaseCard::IsConnected - Checks if the card is connected.
	* @return Flag if the card is disconnected.
	*/
	virtual bool IsConnected() = 0;

	/**
	* IRaylaseCard::Disconnect - Disconnects and unregisters the card.
	*/
	virtual void Disconnect() = 0;

	/**
	* IRaylaseCard::ResetToSystemDefaults - Resets the card settings to system defaults.
	*/
	virtual void ResetToSystemDefaults() = 0;

	/**
	* IRaylaseCard::LaserOn - Turns the laser on.
	*/
	virtual void LaserOn() = 0;

	/**
	* IRaylaseCard::LaserOff - Turns the laser off.
	*/
	virtual void LaserOff() = 0;

	/**
	* IRaylaseCard::ArmLaser - Arms or disarms the laser.
	* @param[in] bShallBeArmed - Shall the laser be armed or disarmed.
	*/
	virtual void ArmLaser(const bool bShallBeArmed) = 0;

	/**
	* IRaylaseCard::IsLaserArmed - Checks if the laser is armed.
	* @return Flag if the laser is armed.
	*/
	virtual bool IsLaserArmed() = 0;

	/**
	* IRaylaseCard::EnablePilot - Enables the pilot pointer.
	* @param[in] bShallBeEnabled - Shall the pilot be enabled.
	*/
	virtual void EnablePilot(const bool bShallBeEnabled) = 0;

	/**
	* IRaylaseCard::PilotIsEnabled - Checks if the pilot is enabled.
	* @return Flag if the pilot is enabled.
	*/
	virtual bool PilotIsEnabled() = 0;

	/**
	* IRaylaseCard::GetLaserStatus - Returns the laser status.
	* @param[out] bPilotIsEnabled - Flag if the pilot is enabled.
	* @param[out] bLaserIsArmed - Flag if the laser is armed.
	* @param[out] bLaserAlarm - Flag if the laser is in alarm state.
	*/
	virtual void GetLaserStatus(bool & bPilotIsEnabled, bool & bLaserIsArmed, bool & bLaserAlarm) = 0;

	/**
	* IRaylaseCard::AssignLaserIndex - Assigns a laser index to the card.
	* @param[in] nLaserIndex - Laser index to assign. This will map to the laser indices given in the build file. 0 means no assignment.
	*/
	virtual void AssignLaserIndex(const LibMCDriver_Raylase_uint32 nLaserIndex) = 0;

	/**
	* IRaylaseCard::GetAssignedLaserIndex - Returns the assigned laser index to the card. Default value is 0 (unassigned).
	* @return Assigned laser index. This will map to the laser indices given in the build file. 0 means no assignment.
	*/
	virtual LibMCDriver_Raylase_uint32 GetAssignedLaserIndex() = 0;

	/**
	* IRaylaseCard::DrawLayer - Draws a layer of a build stream. Blocks until the layer is drawn.
	* @param[in] sStreamUUID - UUID of the build stream. Must have been loaded in memory by the system.
	* @param[in] nLayerIndex - Layer index of the build file.
	*/
	virtual void DrawLayer(const std::string & sStreamUUID, const LibMCDriver_Raylase_uint32 nLayerIndex) = 0;

};

typedef IBaseSharedPtr<IRaylaseCard> PIRaylaseCard;


/*************************************************************************************************************************
 Class interface for Driver_Raylase 
**************************************************************************************************************************/

class IDriver_Raylase : public virtual IDriver {
public:
	/**
	* IDriver_Raylase::SetToSimulationMode - Sets the driver in Simulation mode.
	*/
	virtual void SetToSimulationMode() = 0;

	/**
	* IDriver_Raylase::IsSimulationMode - Returns if the driver is in Simulation mode.
	* @return Simulation mode is active.
	*/
	virtual bool IsSimulationMode() = 0;

	/**
	* IDriver_Raylase::SetCustomSDKResource - Sets the machine resource name of the SDK to load. MUST be called before LoadSDK or it has no effect.
	* @param[in] sResourceName - Resource name of core machine package. Empty means standard naming applies.
	*/
	virtual void SetCustomSDKResource(const std::string & sResourceName) = 0;

	/**
	* IDriver_Raylase::LoadSDK - Initializes the Raylase SDK.
	*/
	virtual void LoadSDK() = 0;

	/**
	* IDriver_Raylase::ConnectByIP - Connects to the Raylase Scanner Card. Fails if connection is not successful.
	* @param[in] sCardName - Name of scanner to be connected to. MUST not be in use.
	* @param[in] sCardIP - IP Address to connect to.
	* @param[in] nPort - Port to connect to.
	* @param[in] dMaxLaserPowerInWatts - Maximum laser power in Watts.
	* @return Instance of connected card.
	*/
	virtual IRaylaseCard * ConnectByIP(const std::string & sCardName, const std::string & sCardIP, const LibMCDriver_Raylase_uint32 nPort, const LibMCDriver_Raylase_double dMaxLaserPowerInWatts) = 0;

	/**
	* IDriver_Raylase::GetConnectedCard - Retrieves a connected card instance.
	* @param[in] sCardName - Name of scanner card to retrieve. MUST have been connected before.
	* @return Instance of connected card.
	*/
	virtual IRaylaseCard * GetConnectedCard(const std::string & sCardName) = 0;

	/**
	* IDriver_Raylase::DrawLayerMultiLaser - Draws a layer of a build stream. Blocks until the layer is drawn. The call will fail if the laser assignment of the cards is not unique.
	* @param[in] sStreamUUID - UUID of the build stream. Must have been loaded in memory by the system.
	* @param[in] nLayerIndex - Layer index of the build file.
	* @param[in] bFailIfNonAssignedDataExists - If true, the call will fail in case a layer contains data that is not assigned to any defined scanner card.
	*/
	virtual void DrawLayerMultiLaser(const std::string & sStreamUUID, const LibMCDriver_Raylase_uint32 nLayerIndex, const bool bFailIfNonAssignedDataExists) = 0;

};

typedef IBaseSharedPtr<IDriver_Raylase> PIDriver_Raylase;


/*************************************************************************************************************************
 Global functions declarations
**************************************************************************************************************************/
class CWrapper {
public:
	// Injected Components
	static LibMCEnv::PWrapper sPLibMCEnvWrapper;

	/**
	* Ilibmcdriver_raylase::GetVersion - retrieves the binary version of this library.
	* @param[out] nMajor - returns the major version of this library
	* @param[out] nMinor - returns the minor version of this library
	* @param[out] nMicro - returns the micro version of this library
	*/
	static void GetVersion(LibMCDriver_Raylase_uint32 & nMajor, LibMCDriver_Raylase_uint32 & nMinor, LibMCDriver_Raylase_uint32 & nMicro);

	/**
	* Ilibmcdriver_raylase::GetLastError - Returns the last error recorded on this object
	* @param[in] pInstance - Instance Handle
	* @param[out] sErrorMessage - Message of the last error
	* @return Is there a last error to query
	*/
	static bool GetLastError(IBase* pInstance, std::string & sErrorMessage);

	/**
	* Ilibmcdriver_raylase::ReleaseInstance - Releases shared ownership of an Instance
	* @param[in] pInstance - Instance Handle
	*/
	static void ReleaseInstance(IBase* pInstance);

	/**
	* Ilibmcdriver_raylase::AcquireInstance - Acquires shared ownership of an Instance
	* @param[in] pInstance - Instance Handle
	*/
	static void AcquireInstance(IBase* pInstance);

	/**
	* Ilibmcdriver_raylase::CreateDriver - Creates a driver instance with a specific name.
	* @param[in] sName - Name of driver to be created.
	* @param[in] sType - Type of driver to be created.
	* @param[in] pDriverEnvironment - Environment of this driver.
	* @return New Driver instance
	*/
	static IDriver * CreateDriver(const std::string & sName, const std::string & sType, LibMCEnv::PDriverEnvironment pDriverEnvironment);

};

LibMCDriver_RaylaseResult LibMCDriver_Raylase_GetProcAddress (const char * pProcName, void ** ppProcAddress);

} // namespace Impl
} // namespace LibMCDriver_Raylase

#endif // __LIBMCDRIVER_RAYLASE_CPPINTERFACES
