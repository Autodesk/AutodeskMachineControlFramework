/*++

Copyright (C) 2020 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.8.0-develop.

Abstract: This is an autogenerated C++ implementation file in order to allow easy
development of MC Driver Raylase. The functions in this file need to be implemented. It needs to be generated only once.

Interface version: 2.0.0

*/

#include "libmcdriver_raylase_abi.hpp"
#include "libmcdriver_raylase_interfaces.hpp"
#include "libmcdriver_raylase_interfaceexception.hpp"

#include <map>

using namespace LibMCDriver_Raylase::Impl;

LibMCDriver_RaylaseResult handleLibMCDriver_RaylaseException(IBase * pIBaseClass, ELibMCDriver_RaylaseInterfaceException & Exception)
{
	LibMCDriver_RaylaseResult errorCode = Exception.getErrorCode();

	if (pIBaseClass != nullptr)
		pIBaseClass->RegisterErrorMessage(Exception.what());

	return errorCode;
}

LibMCDriver_RaylaseResult handleStdException(IBase * pIBaseClass, std::exception & Exception)
{
	LibMCDriver_RaylaseResult errorCode = LIBMCDRIVER_RAYLASE_ERROR_GENERICEXCEPTION;

	if (pIBaseClass != nullptr)
		pIBaseClass->RegisterErrorMessage(Exception.what());

	return errorCode;
}

LibMCDriver_RaylaseResult handleUnhandledException(IBase * pIBaseClass)
{
	LibMCDriver_RaylaseResult errorCode = LIBMCDRIVER_RAYLASE_ERROR_GENERICEXCEPTION;

	if (pIBaseClass != nullptr)
		pIBaseClass->RegisterErrorMessage("Unhandled Exception");

	return errorCode;
}



/*************************************************************************************************************************
 Class implementation for Base
**************************************************************************************************************************/

/*************************************************************************************************************************
 Class implementation for Driver
**************************************************************************************************************************/
LibMCDriver_RaylaseResult libmcdriver_raylase_driver_configure(LibMCDriver_Raylase_Driver pDriver, const char * pConfigurationString)
{
	IBase* pIBaseClass = (IBase *)pDriver;

	try {
		if (pConfigurationString == nullptr)
			throw ELibMCDriver_RaylaseInterfaceException (LIBMCDRIVER_RAYLASE_ERROR_INVALIDPARAM);
		std::string sConfigurationString(pConfigurationString);
		IDriver* pIDriver = dynamic_cast<IDriver*>(pIBaseClass);
		if (!pIDriver)
			throw ELibMCDriver_RaylaseInterfaceException(LIBMCDRIVER_RAYLASE_ERROR_INVALIDCAST);
		
		pIDriver->Configure(sConfigurationString);

		return LIBMCDRIVER_RAYLASE_SUCCESS;
	}
	catch (ELibMCDriver_RaylaseInterfaceException & Exception) {
		return handleLibMCDriver_RaylaseException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_RaylaseResult libmcdriver_raylase_driver_getname(LibMCDriver_Raylase_Driver pDriver, const LibMCDriver_Raylase_uint32 nNameBufferSize, LibMCDriver_Raylase_uint32* pNameNeededChars, char * pNameBuffer)
{
	IBase* pIBaseClass = (IBase *)pDriver;

	try {
		if ( (!pNameBuffer) && !(pNameNeededChars) )
			throw ELibMCDriver_RaylaseInterfaceException (LIBMCDRIVER_RAYLASE_ERROR_INVALIDPARAM);
		std::string sName("");
		IDriver* pIDriver = dynamic_cast<IDriver*>(pIBaseClass);
		if (!pIDriver)
			throw ELibMCDriver_RaylaseInterfaceException(LIBMCDRIVER_RAYLASE_ERROR_INVALIDCAST);
		
		bool isCacheCall = (pNameBuffer == nullptr);
		if (isCacheCall) {
			sName = pIDriver->GetName();

			pIDriver->_setCache (new ParameterCache_1<std::string> (sName));
		}
		else {
			auto cache = dynamic_cast<ParameterCache_1<std::string>*> (pIDriver->_getCache ());
			if (cache == nullptr)
				throw ELibMCDriver_RaylaseInterfaceException(LIBMCDRIVER_RAYLASE_ERROR_INVALIDCAST);
			cache->retrieveData (sName);
			pIDriver->_setCache (nullptr);
		}
		
		if (pNameNeededChars)
			*pNameNeededChars = (LibMCDriver_Raylase_uint32) (sName.size()+1);
		if (pNameBuffer) {
			if (sName.size() >= nNameBufferSize)
				throw ELibMCDriver_RaylaseInterfaceException (LIBMCDRIVER_RAYLASE_ERROR_BUFFERTOOSMALL);
			for (size_t iName = 0; iName < sName.size(); iName++)
				pNameBuffer[iName] = sName[iName];
			pNameBuffer[sName.size()] = 0;
		}
		return LIBMCDRIVER_RAYLASE_SUCCESS;
	}
	catch (ELibMCDriver_RaylaseInterfaceException & Exception) {
		return handleLibMCDriver_RaylaseException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_RaylaseResult libmcdriver_raylase_driver_gettype(LibMCDriver_Raylase_Driver pDriver, const LibMCDriver_Raylase_uint32 nTypeBufferSize, LibMCDriver_Raylase_uint32* pTypeNeededChars, char * pTypeBuffer)
{
	IBase* pIBaseClass = (IBase *)pDriver;

	try {
		if ( (!pTypeBuffer) && !(pTypeNeededChars) )
			throw ELibMCDriver_RaylaseInterfaceException (LIBMCDRIVER_RAYLASE_ERROR_INVALIDPARAM);
		std::string sType("");
		IDriver* pIDriver = dynamic_cast<IDriver*>(pIBaseClass);
		if (!pIDriver)
			throw ELibMCDriver_RaylaseInterfaceException(LIBMCDRIVER_RAYLASE_ERROR_INVALIDCAST);
		
		bool isCacheCall = (pTypeBuffer == nullptr);
		if (isCacheCall) {
			sType = pIDriver->GetType();

			pIDriver->_setCache (new ParameterCache_1<std::string> (sType));
		}
		else {
			auto cache = dynamic_cast<ParameterCache_1<std::string>*> (pIDriver->_getCache ());
			if (cache == nullptr)
				throw ELibMCDriver_RaylaseInterfaceException(LIBMCDRIVER_RAYLASE_ERROR_INVALIDCAST);
			cache->retrieveData (sType);
			pIDriver->_setCache (nullptr);
		}
		
		if (pTypeNeededChars)
			*pTypeNeededChars = (LibMCDriver_Raylase_uint32) (sType.size()+1);
		if (pTypeBuffer) {
			if (sType.size() >= nTypeBufferSize)
				throw ELibMCDriver_RaylaseInterfaceException (LIBMCDRIVER_RAYLASE_ERROR_BUFFERTOOSMALL);
			for (size_t iType = 0; iType < sType.size(); iType++)
				pTypeBuffer[iType] = sType[iType];
			pTypeBuffer[sType.size()] = 0;
		}
		return LIBMCDRIVER_RAYLASE_SUCCESS;
	}
	catch (ELibMCDriver_RaylaseInterfaceException & Exception) {
		return handleLibMCDriver_RaylaseException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_RaylaseResult libmcdriver_raylase_driver_getversion(LibMCDriver_Raylase_Driver pDriver, LibMCDriver_Raylase_uint32 * pMajor, LibMCDriver_Raylase_uint32 * pMinor, LibMCDriver_Raylase_uint32 * pMicro, const LibMCDriver_Raylase_uint32 nBuildBufferSize, LibMCDriver_Raylase_uint32* pBuildNeededChars, char * pBuildBuffer)
{
	IBase* pIBaseClass = (IBase *)pDriver;

	try {
		if (!pMajor)
			throw ELibMCDriver_RaylaseInterfaceException (LIBMCDRIVER_RAYLASE_ERROR_INVALIDPARAM);
		if (!pMinor)
			throw ELibMCDriver_RaylaseInterfaceException (LIBMCDRIVER_RAYLASE_ERROR_INVALIDPARAM);
		if (!pMicro)
			throw ELibMCDriver_RaylaseInterfaceException (LIBMCDRIVER_RAYLASE_ERROR_INVALIDPARAM);
		if ( (!pBuildBuffer) && !(pBuildNeededChars) )
			throw ELibMCDriver_RaylaseInterfaceException (LIBMCDRIVER_RAYLASE_ERROR_INVALIDPARAM);
		std::string sBuild("");
		IDriver* pIDriver = dynamic_cast<IDriver*>(pIBaseClass);
		if (!pIDriver)
			throw ELibMCDriver_RaylaseInterfaceException(LIBMCDRIVER_RAYLASE_ERROR_INVALIDCAST);
		
		bool isCacheCall = (pBuildBuffer == nullptr);
		if (isCacheCall) {
			pIDriver->GetVersion(*pMajor, *pMinor, *pMicro, sBuild);

			pIDriver->_setCache (new ParameterCache_4<LibMCDriver_Raylase_uint32, LibMCDriver_Raylase_uint32, LibMCDriver_Raylase_uint32, std::string> (*pMajor, *pMinor, *pMicro, sBuild));
		}
		else {
			auto cache = dynamic_cast<ParameterCache_4<LibMCDriver_Raylase_uint32, LibMCDriver_Raylase_uint32, LibMCDriver_Raylase_uint32, std::string>*> (pIDriver->_getCache ());
			if (cache == nullptr)
				throw ELibMCDriver_RaylaseInterfaceException(LIBMCDRIVER_RAYLASE_ERROR_INVALIDCAST);
			cache->retrieveData (*pMajor, *pMinor, *pMicro, sBuild);
			pIDriver->_setCache (nullptr);
		}
		
		if (pBuildNeededChars)
			*pBuildNeededChars = (LibMCDriver_Raylase_uint32) (sBuild.size()+1);
		if (pBuildBuffer) {
			if (sBuild.size() >= nBuildBufferSize)
				throw ELibMCDriver_RaylaseInterfaceException (LIBMCDRIVER_RAYLASE_ERROR_BUFFERTOOSMALL);
			for (size_t iBuild = 0; iBuild < sBuild.size(); iBuild++)
				pBuildBuffer[iBuild] = sBuild[iBuild];
			pBuildBuffer[sBuild.size()] = 0;
		}
		return LIBMCDRIVER_RAYLASE_SUCCESS;
	}
	catch (ELibMCDriver_RaylaseInterfaceException & Exception) {
		return handleLibMCDriver_RaylaseException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_RaylaseResult libmcdriver_raylase_driver_queryparameters(LibMCDriver_Raylase_Driver pDriver)
{
	IBase* pIBaseClass = (IBase *)pDriver;

	try {
		IDriver* pIDriver = dynamic_cast<IDriver*>(pIBaseClass);
		if (!pIDriver)
			throw ELibMCDriver_RaylaseInterfaceException(LIBMCDRIVER_RAYLASE_ERROR_INVALIDCAST);
		
		pIDriver->QueryParameters();

		return LIBMCDRIVER_RAYLASE_SUCCESS;
	}
	catch (ELibMCDriver_RaylaseInterfaceException & Exception) {
		return handleLibMCDriver_RaylaseException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_RaylaseResult libmcdriver_raylase_driver_queryparametersex(LibMCDriver_Raylase_Driver pDriver, LibMCEnv_DriverStatusUpdateSession pDriverUpdateInstance)
{
	IBase* pIBaseClass = (IBase *)pDriver;

	try {
		LibMCEnv::PDriverStatusUpdateSession pIDriverUpdateInstance = std::make_shared<LibMCEnv::CDriverStatusUpdateSession>(CWrapper::sPLibMCEnvWrapper.get(), pDriverUpdateInstance);
		CWrapper::sPLibMCEnvWrapper->AcquireInstance(pIDriverUpdateInstance.get());
		if (!pIDriverUpdateInstance)
			throw ELibMCDriver_RaylaseInterfaceException (LIBMCDRIVER_RAYLASE_ERROR_INVALIDCAST);
		
		IDriver* pIDriver = dynamic_cast<IDriver*>(pIBaseClass);
		if (!pIDriver)
			throw ELibMCDriver_RaylaseInterfaceException(LIBMCDRIVER_RAYLASE_ERROR_INVALIDCAST);
		
		pIDriver->QueryParametersEx(pIDriverUpdateInstance);

		return LIBMCDRIVER_RAYLASE_SUCCESS;
	}
	catch (ELibMCDriver_RaylaseInterfaceException & Exception) {
		return handleLibMCDriver_RaylaseException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}


/*************************************************************************************************************************
 Class implementation for RaylaseCard
**************************************************************************************************************************/
LibMCDriver_RaylaseResult libmcdriver_raylase_raylasecard_isconnected(LibMCDriver_Raylase_RaylaseCard pRaylaseCard, bool * pIsConnected)
{
	IBase* pIBaseClass = (IBase *)pRaylaseCard;

	try {
		if (pIsConnected == nullptr)
			throw ELibMCDriver_RaylaseInterfaceException (LIBMCDRIVER_RAYLASE_ERROR_INVALIDPARAM);
		IRaylaseCard* pIRaylaseCard = dynamic_cast<IRaylaseCard*>(pIBaseClass);
		if (!pIRaylaseCard)
			throw ELibMCDriver_RaylaseInterfaceException(LIBMCDRIVER_RAYLASE_ERROR_INVALIDCAST);
		
		*pIsConnected = pIRaylaseCard->IsConnected();

		return LIBMCDRIVER_RAYLASE_SUCCESS;
	}
	catch (ELibMCDriver_RaylaseInterfaceException & Exception) {
		return handleLibMCDriver_RaylaseException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_RaylaseResult libmcdriver_raylase_raylasecard_disconnect(LibMCDriver_Raylase_RaylaseCard pRaylaseCard)
{
	IBase* pIBaseClass = (IBase *)pRaylaseCard;

	try {
		IRaylaseCard* pIRaylaseCard = dynamic_cast<IRaylaseCard*>(pIBaseClass);
		if (!pIRaylaseCard)
			throw ELibMCDriver_RaylaseInterfaceException(LIBMCDRIVER_RAYLASE_ERROR_INVALIDCAST);
		
		pIRaylaseCard->Disconnect();

		return LIBMCDRIVER_RAYLASE_SUCCESS;
	}
	catch (ELibMCDriver_RaylaseInterfaceException & Exception) {
		return handleLibMCDriver_RaylaseException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_RaylaseResult libmcdriver_raylase_raylasecard_resettosystemdefaults(LibMCDriver_Raylase_RaylaseCard pRaylaseCard)
{
	IBase* pIBaseClass = (IBase *)pRaylaseCard;

	try {
		IRaylaseCard* pIRaylaseCard = dynamic_cast<IRaylaseCard*>(pIBaseClass);
		if (!pIRaylaseCard)
			throw ELibMCDriver_RaylaseInterfaceException(LIBMCDRIVER_RAYLASE_ERROR_INVALIDCAST);
		
		pIRaylaseCard->ResetToSystemDefaults();

		return LIBMCDRIVER_RAYLASE_SUCCESS;
	}
	catch (ELibMCDriver_RaylaseInterfaceException & Exception) {
		return handleLibMCDriver_RaylaseException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_RaylaseResult libmcdriver_raylase_raylasecard_laseron(LibMCDriver_Raylase_RaylaseCard pRaylaseCard)
{
	IBase* pIBaseClass = (IBase *)pRaylaseCard;

	try {
		IRaylaseCard* pIRaylaseCard = dynamic_cast<IRaylaseCard*>(pIBaseClass);
		if (!pIRaylaseCard)
			throw ELibMCDriver_RaylaseInterfaceException(LIBMCDRIVER_RAYLASE_ERROR_INVALIDCAST);
		
		pIRaylaseCard->LaserOn();

		return LIBMCDRIVER_RAYLASE_SUCCESS;
	}
	catch (ELibMCDriver_RaylaseInterfaceException & Exception) {
		return handleLibMCDriver_RaylaseException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_RaylaseResult libmcdriver_raylase_raylasecard_laseroff(LibMCDriver_Raylase_RaylaseCard pRaylaseCard)
{
	IBase* pIBaseClass = (IBase *)pRaylaseCard;

	try {
		IRaylaseCard* pIRaylaseCard = dynamic_cast<IRaylaseCard*>(pIBaseClass);
		if (!pIRaylaseCard)
			throw ELibMCDriver_RaylaseInterfaceException(LIBMCDRIVER_RAYLASE_ERROR_INVALIDCAST);
		
		pIRaylaseCard->LaserOff();

		return LIBMCDRIVER_RAYLASE_SUCCESS;
	}
	catch (ELibMCDriver_RaylaseInterfaceException & Exception) {
		return handleLibMCDriver_RaylaseException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_RaylaseResult libmcdriver_raylase_raylasecard_armlaser(LibMCDriver_Raylase_RaylaseCard pRaylaseCard, bool bShallBeArmed)
{
	IBase* pIBaseClass = (IBase *)pRaylaseCard;

	try {
		IRaylaseCard* pIRaylaseCard = dynamic_cast<IRaylaseCard*>(pIBaseClass);
		if (!pIRaylaseCard)
			throw ELibMCDriver_RaylaseInterfaceException(LIBMCDRIVER_RAYLASE_ERROR_INVALIDCAST);
		
		pIRaylaseCard->ArmLaser(bShallBeArmed);

		return LIBMCDRIVER_RAYLASE_SUCCESS;
	}
	catch (ELibMCDriver_RaylaseInterfaceException & Exception) {
		return handleLibMCDriver_RaylaseException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_RaylaseResult libmcdriver_raylase_raylasecard_islaserarmed(LibMCDriver_Raylase_RaylaseCard pRaylaseCard, bool * pLaserIsArmed)
{
	IBase* pIBaseClass = (IBase *)pRaylaseCard;

	try {
		if (pLaserIsArmed == nullptr)
			throw ELibMCDriver_RaylaseInterfaceException (LIBMCDRIVER_RAYLASE_ERROR_INVALIDPARAM);
		IRaylaseCard* pIRaylaseCard = dynamic_cast<IRaylaseCard*>(pIBaseClass);
		if (!pIRaylaseCard)
			throw ELibMCDriver_RaylaseInterfaceException(LIBMCDRIVER_RAYLASE_ERROR_INVALIDCAST);
		
		*pLaserIsArmed = pIRaylaseCard->IsLaserArmed();

		return LIBMCDRIVER_RAYLASE_SUCCESS;
	}
	catch (ELibMCDriver_RaylaseInterfaceException & Exception) {
		return handleLibMCDriver_RaylaseException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_RaylaseResult libmcdriver_raylase_raylasecard_enablepilot(LibMCDriver_Raylase_RaylaseCard pRaylaseCard, bool bShallBeEnabled)
{
	IBase* pIBaseClass = (IBase *)pRaylaseCard;

	try {
		IRaylaseCard* pIRaylaseCard = dynamic_cast<IRaylaseCard*>(pIBaseClass);
		if (!pIRaylaseCard)
			throw ELibMCDriver_RaylaseInterfaceException(LIBMCDRIVER_RAYLASE_ERROR_INVALIDCAST);
		
		pIRaylaseCard->EnablePilot(bShallBeEnabled);

		return LIBMCDRIVER_RAYLASE_SUCCESS;
	}
	catch (ELibMCDriver_RaylaseInterfaceException & Exception) {
		return handleLibMCDriver_RaylaseException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_RaylaseResult libmcdriver_raylase_raylasecard_pilotisenabled(LibMCDriver_Raylase_RaylaseCard pRaylaseCard, bool * pPilotIsEnabled)
{
	IBase* pIBaseClass = (IBase *)pRaylaseCard;

	try {
		if (pPilotIsEnabled == nullptr)
			throw ELibMCDriver_RaylaseInterfaceException (LIBMCDRIVER_RAYLASE_ERROR_INVALIDPARAM);
		IRaylaseCard* pIRaylaseCard = dynamic_cast<IRaylaseCard*>(pIBaseClass);
		if (!pIRaylaseCard)
			throw ELibMCDriver_RaylaseInterfaceException(LIBMCDRIVER_RAYLASE_ERROR_INVALIDCAST);
		
		*pPilotIsEnabled = pIRaylaseCard->PilotIsEnabled();

		return LIBMCDRIVER_RAYLASE_SUCCESS;
	}
	catch (ELibMCDriver_RaylaseInterfaceException & Exception) {
		return handleLibMCDriver_RaylaseException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_RaylaseResult libmcdriver_raylase_raylasecard_getlaserstatus(LibMCDriver_Raylase_RaylaseCard pRaylaseCard, bool * pPilotIsEnabled, bool * pLaserIsArmed, bool * pLaserAlarm)
{
	IBase* pIBaseClass = (IBase *)pRaylaseCard;

	try {
		if (!pPilotIsEnabled)
			throw ELibMCDriver_RaylaseInterfaceException (LIBMCDRIVER_RAYLASE_ERROR_INVALIDPARAM);
		if (!pLaserIsArmed)
			throw ELibMCDriver_RaylaseInterfaceException (LIBMCDRIVER_RAYLASE_ERROR_INVALIDPARAM);
		if (!pLaserAlarm)
			throw ELibMCDriver_RaylaseInterfaceException (LIBMCDRIVER_RAYLASE_ERROR_INVALIDPARAM);
		IRaylaseCard* pIRaylaseCard = dynamic_cast<IRaylaseCard*>(pIBaseClass);
		if (!pIRaylaseCard)
			throw ELibMCDriver_RaylaseInterfaceException(LIBMCDRIVER_RAYLASE_ERROR_INVALIDCAST);
		
		pIRaylaseCard->GetLaserStatus(*pPilotIsEnabled, *pLaserIsArmed, *pLaserAlarm);

		return LIBMCDRIVER_RAYLASE_SUCCESS;
	}
	catch (ELibMCDriver_RaylaseInterfaceException & Exception) {
		return handleLibMCDriver_RaylaseException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_RaylaseResult libmcdriver_raylase_raylasecard_assignlaserindex(LibMCDriver_Raylase_RaylaseCard pRaylaseCard, LibMCDriver_Raylase_uint32 nLaserIndex)
{
	IBase* pIBaseClass = (IBase *)pRaylaseCard;

	try {
		IRaylaseCard* pIRaylaseCard = dynamic_cast<IRaylaseCard*>(pIBaseClass);
		if (!pIRaylaseCard)
			throw ELibMCDriver_RaylaseInterfaceException(LIBMCDRIVER_RAYLASE_ERROR_INVALIDCAST);
		
		pIRaylaseCard->AssignLaserIndex(nLaserIndex);

		return LIBMCDRIVER_RAYLASE_SUCCESS;
	}
	catch (ELibMCDriver_RaylaseInterfaceException & Exception) {
		return handleLibMCDriver_RaylaseException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_RaylaseResult libmcdriver_raylase_raylasecard_getassignedlaserindex(LibMCDriver_Raylase_RaylaseCard pRaylaseCard, LibMCDriver_Raylase_uint32 * pLaserIndex)
{
	IBase* pIBaseClass = (IBase *)pRaylaseCard;

	try {
		if (pLaserIndex == nullptr)
			throw ELibMCDriver_RaylaseInterfaceException (LIBMCDRIVER_RAYLASE_ERROR_INVALIDPARAM);
		IRaylaseCard* pIRaylaseCard = dynamic_cast<IRaylaseCard*>(pIBaseClass);
		if (!pIRaylaseCard)
			throw ELibMCDriver_RaylaseInterfaceException(LIBMCDRIVER_RAYLASE_ERROR_INVALIDCAST);
		
		*pLaserIndex = pIRaylaseCard->GetAssignedLaserIndex();

		return LIBMCDRIVER_RAYLASE_SUCCESS;
	}
	catch (ELibMCDriver_RaylaseInterfaceException & Exception) {
		return handleLibMCDriver_RaylaseException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_RaylaseResult libmcdriver_raylase_raylasecard_drawlayer(LibMCDriver_Raylase_RaylaseCard pRaylaseCard, const char * pStreamUUID, LibMCDriver_Raylase_uint32 nLayerIndex)
{
	IBase* pIBaseClass = (IBase *)pRaylaseCard;

	try {
		if (pStreamUUID == nullptr)
			throw ELibMCDriver_RaylaseInterfaceException (LIBMCDRIVER_RAYLASE_ERROR_INVALIDPARAM);
		std::string sStreamUUID(pStreamUUID);
		IRaylaseCard* pIRaylaseCard = dynamic_cast<IRaylaseCard*>(pIBaseClass);
		if (!pIRaylaseCard)
			throw ELibMCDriver_RaylaseInterfaceException(LIBMCDRIVER_RAYLASE_ERROR_INVALIDCAST);
		
		pIRaylaseCard->DrawLayer(sStreamUUID, nLayerIndex);

		return LIBMCDRIVER_RAYLASE_SUCCESS;
	}
	catch (ELibMCDriver_RaylaseInterfaceException & Exception) {
		return handleLibMCDriver_RaylaseException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}


/*************************************************************************************************************************
 Class implementation for Driver_Raylase
**************************************************************************************************************************/
LibMCDriver_RaylaseResult libmcdriver_raylase_driver_raylase_settosimulationmode(LibMCDriver_Raylase_Driver_Raylase pDriver_Raylase)
{
	IBase* pIBaseClass = (IBase *)pDriver_Raylase;

	try {
		IDriver_Raylase* pIDriver_Raylase = dynamic_cast<IDriver_Raylase*>(pIBaseClass);
		if (!pIDriver_Raylase)
			throw ELibMCDriver_RaylaseInterfaceException(LIBMCDRIVER_RAYLASE_ERROR_INVALIDCAST);
		
		pIDriver_Raylase->SetToSimulationMode();

		return LIBMCDRIVER_RAYLASE_SUCCESS;
	}
	catch (ELibMCDriver_RaylaseInterfaceException & Exception) {
		return handleLibMCDriver_RaylaseException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_RaylaseResult libmcdriver_raylase_driver_raylase_issimulationmode(LibMCDriver_Raylase_Driver_Raylase pDriver_Raylase, bool * pIsSimulationMode)
{
	IBase* pIBaseClass = (IBase *)pDriver_Raylase;

	try {
		if (pIsSimulationMode == nullptr)
			throw ELibMCDriver_RaylaseInterfaceException (LIBMCDRIVER_RAYLASE_ERROR_INVALIDPARAM);
		IDriver_Raylase* pIDriver_Raylase = dynamic_cast<IDriver_Raylase*>(pIBaseClass);
		if (!pIDriver_Raylase)
			throw ELibMCDriver_RaylaseInterfaceException(LIBMCDRIVER_RAYLASE_ERROR_INVALIDCAST);
		
		*pIsSimulationMode = pIDriver_Raylase->IsSimulationMode();

		return LIBMCDRIVER_RAYLASE_SUCCESS;
	}
	catch (ELibMCDriver_RaylaseInterfaceException & Exception) {
		return handleLibMCDriver_RaylaseException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_RaylaseResult libmcdriver_raylase_driver_raylase_setcustomsdkresource(LibMCDriver_Raylase_Driver_Raylase pDriver_Raylase, const char * pResourceName)
{
	IBase* pIBaseClass = (IBase *)pDriver_Raylase;

	try {
		if (pResourceName == nullptr)
			throw ELibMCDriver_RaylaseInterfaceException (LIBMCDRIVER_RAYLASE_ERROR_INVALIDPARAM);
		std::string sResourceName(pResourceName);
		IDriver_Raylase* pIDriver_Raylase = dynamic_cast<IDriver_Raylase*>(pIBaseClass);
		if (!pIDriver_Raylase)
			throw ELibMCDriver_RaylaseInterfaceException(LIBMCDRIVER_RAYLASE_ERROR_INVALIDCAST);
		
		pIDriver_Raylase->SetCustomSDKResource(sResourceName);

		return LIBMCDRIVER_RAYLASE_SUCCESS;
	}
	catch (ELibMCDriver_RaylaseInterfaceException & Exception) {
		return handleLibMCDriver_RaylaseException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_RaylaseResult libmcdriver_raylase_driver_raylase_loadsdk(LibMCDriver_Raylase_Driver_Raylase pDriver_Raylase)
{
	IBase* pIBaseClass = (IBase *)pDriver_Raylase;

	try {
		IDriver_Raylase* pIDriver_Raylase = dynamic_cast<IDriver_Raylase*>(pIBaseClass);
		if (!pIDriver_Raylase)
			throw ELibMCDriver_RaylaseInterfaceException(LIBMCDRIVER_RAYLASE_ERROR_INVALIDCAST);
		
		pIDriver_Raylase->LoadSDK();

		return LIBMCDRIVER_RAYLASE_SUCCESS;
	}
	catch (ELibMCDriver_RaylaseInterfaceException & Exception) {
		return handleLibMCDriver_RaylaseException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_RaylaseResult libmcdriver_raylase_driver_raylase_connectbyip(LibMCDriver_Raylase_Driver_Raylase pDriver_Raylase, const char * pCardName, const char * pCardIP, LibMCDriver_Raylase_uint32 nPort, LibMCDriver_Raylase_double dMaxLaserPowerInWatts, LibMCDriver_Raylase_RaylaseCard * pRaylaseCardInstance)
{
	IBase* pIBaseClass = (IBase *)pDriver_Raylase;

	try {
		if (pCardName == nullptr)
			throw ELibMCDriver_RaylaseInterfaceException (LIBMCDRIVER_RAYLASE_ERROR_INVALIDPARAM);
		if (pCardIP == nullptr)
			throw ELibMCDriver_RaylaseInterfaceException (LIBMCDRIVER_RAYLASE_ERROR_INVALIDPARAM);
		if (pRaylaseCardInstance == nullptr)
			throw ELibMCDriver_RaylaseInterfaceException (LIBMCDRIVER_RAYLASE_ERROR_INVALIDPARAM);
		std::string sCardName(pCardName);
		std::string sCardIP(pCardIP);
		IBase* pBaseRaylaseCardInstance(nullptr);
		IDriver_Raylase* pIDriver_Raylase = dynamic_cast<IDriver_Raylase*>(pIBaseClass);
		if (!pIDriver_Raylase)
			throw ELibMCDriver_RaylaseInterfaceException(LIBMCDRIVER_RAYLASE_ERROR_INVALIDCAST);
		
		pBaseRaylaseCardInstance = pIDriver_Raylase->ConnectByIP(sCardName, sCardIP, nPort, dMaxLaserPowerInWatts);

		*pRaylaseCardInstance = (IBase*)(pBaseRaylaseCardInstance);
		return LIBMCDRIVER_RAYLASE_SUCCESS;
	}
	catch (ELibMCDriver_RaylaseInterfaceException & Exception) {
		return handleLibMCDriver_RaylaseException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_RaylaseResult libmcdriver_raylase_driver_raylase_getconnectedcard(LibMCDriver_Raylase_Driver_Raylase pDriver_Raylase, const char * pCardName, LibMCDriver_Raylase_RaylaseCard * pRaylaseCardInstance)
{
	IBase* pIBaseClass = (IBase *)pDriver_Raylase;

	try {
		if (pCardName == nullptr)
			throw ELibMCDriver_RaylaseInterfaceException (LIBMCDRIVER_RAYLASE_ERROR_INVALIDPARAM);
		if (pRaylaseCardInstance == nullptr)
			throw ELibMCDriver_RaylaseInterfaceException (LIBMCDRIVER_RAYLASE_ERROR_INVALIDPARAM);
		std::string sCardName(pCardName);
		IBase* pBaseRaylaseCardInstance(nullptr);
		IDriver_Raylase* pIDriver_Raylase = dynamic_cast<IDriver_Raylase*>(pIBaseClass);
		if (!pIDriver_Raylase)
			throw ELibMCDriver_RaylaseInterfaceException(LIBMCDRIVER_RAYLASE_ERROR_INVALIDCAST);
		
		pBaseRaylaseCardInstance = pIDriver_Raylase->GetConnectedCard(sCardName);

		*pRaylaseCardInstance = (IBase*)(pBaseRaylaseCardInstance);
		return LIBMCDRIVER_RAYLASE_SUCCESS;
	}
	catch (ELibMCDriver_RaylaseInterfaceException & Exception) {
		return handleLibMCDriver_RaylaseException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_RaylaseResult libmcdriver_raylase_driver_raylase_drawlayermultilaser(LibMCDriver_Raylase_Driver_Raylase pDriver_Raylase, const char * pStreamUUID, LibMCDriver_Raylase_uint32 nLayerIndex, bool bFailIfNonAssignedDataExists)
{
	IBase* pIBaseClass = (IBase *)pDriver_Raylase;

	try {
		if (pStreamUUID == nullptr)
			throw ELibMCDriver_RaylaseInterfaceException (LIBMCDRIVER_RAYLASE_ERROR_INVALIDPARAM);
		std::string sStreamUUID(pStreamUUID);
		IDriver_Raylase* pIDriver_Raylase = dynamic_cast<IDriver_Raylase*>(pIBaseClass);
		if (!pIDriver_Raylase)
			throw ELibMCDriver_RaylaseInterfaceException(LIBMCDRIVER_RAYLASE_ERROR_INVALIDCAST);
		
		pIDriver_Raylase->DrawLayerMultiLaser(sStreamUUID, nLayerIndex, bFailIfNonAssignedDataExists);

		return LIBMCDRIVER_RAYLASE_SUCCESS;
	}
	catch (ELibMCDriver_RaylaseInterfaceException & Exception) {
		return handleLibMCDriver_RaylaseException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}



/*************************************************************************************************************************
 Function table lookup implementation
**************************************************************************************************************************/

LibMCDriver_RaylaseResult LibMCDriver_Raylase::Impl::LibMCDriver_Raylase_GetProcAddress (const char * pProcName, void ** ppProcAddress)
{
	if (pProcName == nullptr)
		return LIBMCDRIVER_RAYLASE_ERROR_INVALIDPARAM;
	if (ppProcAddress == nullptr)
		return LIBMCDRIVER_RAYLASE_ERROR_INVALIDPARAM;
	*ppProcAddress = nullptr;
	std::string sProcName (pProcName);
	
	if (sProcName == "libmcdriver_raylase_driver_configure") 
		*ppProcAddress = (void*) &libmcdriver_raylase_driver_configure;
	if (sProcName == "libmcdriver_raylase_driver_getname") 
		*ppProcAddress = (void*) &libmcdriver_raylase_driver_getname;
	if (sProcName == "libmcdriver_raylase_driver_gettype") 
		*ppProcAddress = (void*) &libmcdriver_raylase_driver_gettype;
	if (sProcName == "libmcdriver_raylase_driver_getversion") 
		*ppProcAddress = (void*) &libmcdriver_raylase_driver_getversion;
	if (sProcName == "libmcdriver_raylase_driver_queryparameters") 
		*ppProcAddress = (void*) &libmcdriver_raylase_driver_queryparameters;
	if (sProcName == "libmcdriver_raylase_driver_queryparametersex") 
		*ppProcAddress = (void*) &libmcdriver_raylase_driver_queryparametersex;
	if (sProcName == "libmcdriver_raylase_raylasecard_isconnected") 
		*ppProcAddress = (void*) &libmcdriver_raylase_raylasecard_isconnected;
	if (sProcName == "libmcdriver_raylase_raylasecard_disconnect") 
		*ppProcAddress = (void*) &libmcdriver_raylase_raylasecard_disconnect;
	if (sProcName == "libmcdriver_raylase_raylasecard_resettosystemdefaults") 
		*ppProcAddress = (void*) &libmcdriver_raylase_raylasecard_resettosystemdefaults;
	if (sProcName == "libmcdriver_raylase_raylasecard_laseron") 
		*ppProcAddress = (void*) &libmcdriver_raylase_raylasecard_laseron;
	if (sProcName == "libmcdriver_raylase_raylasecard_laseroff") 
		*ppProcAddress = (void*) &libmcdriver_raylase_raylasecard_laseroff;
	if (sProcName == "libmcdriver_raylase_raylasecard_armlaser") 
		*ppProcAddress = (void*) &libmcdriver_raylase_raylasecard_armlaser;
	if (sProcName == "libmcdriver_raylase_raylasecard_islaserarmed") 
		*ppProcAddress = (void*) &libmcdriver_raylase_raylasecard_islaserarmed;
	if (sProcName == "libmcdriver_raylase_raylasecard_enablepilot") 
		*ppProcAddress = (void*) &libmcdriver_raylase_raylasecard_enablepilot;
	if (sProcName == "libmcdriver_raylase_raylasecard_pilotisenabled") 
		*ppProcAddress = (void*) &libmcdriver_raylase_raylasecard_pilotisenabled;
	if (sProcName == "libmcdriver_raylase_raylasecard_getlaserstatus") 
		*ppProcAddress = (void*) &libmcdriver_raylase_raylasecard_getlaserstatus;
	if (sProcName == "libmcdriver_raylase_raylasecard_assignlaserindex") 
		*ppProcAddress = (void*) &libmcdriver_raylase_raylasecard_assignlaserindex;
	if (sProcName == "libmcdriver_raylase_raylasecard_getassignedlaserindex") 
		*ppProcAddress = (void*) &libmcdriver_raylase_raylasecard_getassignedlaserindex;
	if (sProcName == "libmcdriver_raylase_raylasecard_drawlayer") 
		*ppProcAddress = (void*) &libmcdriver_raylase_raylasecard_drawlayer;
	if (sProcName == "libmcdriver_raylase_driver_raylase_settosimulationmode") 
		*ppProcAddress = (void*) &libmcdriver_raylase_driver_raylase_settosimulationmode;
	if (sProcName == "libmcdriver_raylase_driver_raylase_issimulationmode") 
		*ppProcAddress = (void*) &libmcdriver_raylase_driver_raylase_issimulationmode;
	if (sProcName == "libmcdriver_raylase_driver_raylase_setcustomsdkresource") 
		*ppProcAddress = (void*) &libmcdriver_raylase_driver_raylase_setcustomsdkresource;
	if (sProcName == "libmcdriver_raylase_driver_raylase_loadsdk") 
		*ppProcAddress = (void*) &libmcdriver_raylase_driver_raylase_loadsdk;
	if (sProcName == "libmcdriver_raylase_driver_raylase_connectbyip") 
		*ppProcAddress = (void*) &libmcdriver_raylase_driver_raylase_connectbyip;
	if (sProcName == "libmcdriver_raylase_driver_raylase_getconnectedcard") 
		*ppProcAddress = (void*) &libmcdriver_raylase_driver_raylase_getconnectedcard;
	if (sProcName == "libmcdriver_raylase_driver_raylase_drawlayermultilaser") 
		*ppProcAddress = (void*) &libmcdriver_raylase_driver_raylase_drawlayermultilaser;
	if (sProcName == "libmcdriver_raylase_getversion") 
		*ppProcAddress = (void*) &libmcdriver_raylase_getversion;
	if (sProcName == "libmcdriver_raylase_getlasterror") 
		*ppProcAddress = (void*) &libmcdriver_raylase_getlasterror;
	if (sProcName == "libmcdriver_raylase_releaseinstance") 
		*ppProcAddress = (void*) &libmcdriver_raylase_releaseinstance;
	if (sProcName == "libmcdriver_raylase_acquireinstance") 
		*ppProcAddress = (void*) &libmcdriver_raylase_acquireinstance;
	if (sProcName == "libmcdriver_raylase_injectcomponent") 
		*ppProcAddress = (void*) &libmcdriver_raylase_injectcomponent;
	if (sProcName == "libmcdriver_raylase_getsymbollookupmethod") 
		*ppProcAddress = (void*) &libmcdriver_raylase_getsymbollookupmethod;
	if (sProcName == "libmcdriver_raylase_createdriver") 
		*ppProcAddress = (void*) &libmcdriver_raylase_createdriver;
	
	if (*ppProcAddress == nullptr) 
		return LIBMCDRIVER_RAYLASE_ERROR_COULDNOTFINDLIBRARYEXPORT;
	return LIBMCDRIVER_RAYLASE_SUCCESS;
}

/*************************************************************************************************************************
 Global functions implementation
**************************************************************************************************************************/
LibMCDriver_RaylaseResult libmcdriver_raylase_getversion(LibMCDriver_Raylase_uint32 * pMajor, LibMCDriver_Raylase_uint32 * pMinor, LibMCDriver_Raylase_uint32 * pMicro)
{
	IBase* pIBaseClass = nullptr;

	try {
		if (!pMajor)
			throw ELibMCDriver_RaylaseInterfaceException (LIBMCDRIVER_RAYLASE_ERROR_INVALIDPARAM);
		if (!pMinor)
			throw ELibMCDriver_RaylaseInterfaceException (LIBMCDRIVER_RAYLASE_ERROR_INVALIDPARAM);
		if (!pMicro)
			throw ELibMCDriver_RaylaseInterfaceException (LIBMCDRIVER_RAYLASE_ERROR_INVALIDPARAM);
		CWrapper::GetVersion(*pMajor, *pMinor, *pMicro);

		return LIBMCDRIVER_RAYLASE_SUCCESS;
	}
	catch (ELibMCDriver_RaylaseInterfaceException & Exception) {
		return handleLibMCDriver_RaylaseException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_RaylaseResult libmcdriver_raylase_getlasterror(LibMCDriver_Raylase_Base pInstance, const LibMCDriver_Raylase_uint32 nErrorMessageBufferSize, LibMCDriver_Raylase_uint32* pErrorMessageNeededChars, char * pErrorMessageBuffer, bool * pHasError)
{
	IBase* pIBaseClass = nullptr;

	try {
		if ( (!pErrorMessageBuffer) && !(pErrorMessageNeededChars) )
			throw ELibMCDriver_RaylaseInterfaceException (LIBMCDRIVER_RAYLASE_ERROR_INVALIDPARAM);
		if (pHasError == nullptr)
			throw ELibMCDriver_RaylaseInterfaceException (LIBMCDRIVER_RAYLASE_ERROR_INVALIDPARAM);
		IBase* pIBaseClassInstance = (IBase *)pInstance;
		IBase* pIInstance = dynamic_cast<IBase*>(pIBaseClassInstance);
		if (!pIInstance)
			throw ELibMCDriver_RaylaseInterfaceException (LIBMCDRIVER_RAYLASE_ERROR_INVALIDCAST);
		
		std::string sErrorMessage("");
		*pHasError = CWrapper::GetLastError(pIInstance, sErrorMessage);

		if (pErrorMessageNeededChars)
			*pErrorMessageNeededChars = (LibMCDriver_Raylase_uint32) (sErrorMessage.size()+1);
		if (pErrorMessageBuffer) {
			if (sErrorMessage.size() >= nErrorMessageBufferSize)
				throw ELibMCDriver_RaylaseInterfaceException (LIBMCDRIVER_RAYLASE_ERROR_BUFFERTOOSMALL);
			for (size_t iErrorMessage = 0; iErrorMessage < sErrorMessage.size(); iErrorMessage++)
				pErrorMessageBuffer[iErrorMessage] = sErrorMessage[iErrorMessage];
			pErrorMessageBuffer[sErrorMessage.size()] = 0;
		}
		return LIBMCDRIVER_RAYLASE_SUCCESS;
	}
	catch (ELibMCDriver_RaylaseInterfaceException & Exception) {
		return handleLibMCDriver_RaylaseException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_RaylaseResult libmcdriver_raylase_releaseinstance(LibMCDriver_Raylase_Base pInstance)
{
	IBase* pIBaseClass = nullptr;

	try {
		IBase* pIBaseClassInstance = (IBase *)pInstance;
		IBase* pIInstance = dynamic_cast<IBase*>(pIBaseClassInstance);
		if (!pIInstance)
			throw ELibMCDriver_RaylaseInterfaceException (LIBMCDRIVER_RAYLASE_ERROR_INVALIDCAST);
		
		CWrapper::ReleaseInstance(pIInstance);

		return LIBMCDRIVER_RAYLASE_SUCCESS;
	}
	catch (ELibMCDriver_RaylaseInterfaceException & Exception) {
		return handleLibMCDriver_RaylaseException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_RaylaseResult libmcdriver_raylase_acquireinstance(LibMCDriver_Raylase_Base pInstance)
{
	IBase* pIBaseClass = nullptr;

	try {
		IBase* pIBaseClassInstance = (IBase *)pInstance;
		IBase* pIInstance = dynamic_cast<IBase*>(pIBaseClassInstance);
		if (!pIInstance)
			throw ELibMCDriver_RaylaseInterfaceException (LIBMCDRIVER_RAYLASE_ERROR_INVALIDCAST);
		
		CWrapper::AcquireInstance(pIInstance);

		return LIBMCDRIVER_RAYLASE_SUCCESS;
	}
	catch (ELibMCDriver_RaylaseInterfaceException & Exception) {
		return handleLibMCDriver_RaylaseException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_RaylaseResult libmcdriver_raylase_injectcomponent(const char * pNameSpace, LibMCDriver_Raylase_pvoid pSymbolAddressMethod)
{
	IBase* pIBaseClass = nullptr;

	try {
		if (pNameSpace == nullptr)
			throw ELibMCDriver_RaylaseInterfaceException (LIBMCDRIVER_RAYLASE_ERROR_INVALIDPARAM);
		std::string sNameSpace(pNameSpace);
		
		bool bNameSpaceFound = false;
		
		if (sNameSpace == "LibMCEnv") {
			if (CWrapper::sPLibMCEnvWrapper.get() != nullptr) {
				throw ELibMCDriver_RaylaseInterfaceException(LIBMCDRIVER_RAYLASE_ERROR_COULDNOTLOADLIBRARY);
			}
			CWrapper::sPLibMCEnvWrapper = LibMCEnv::CWrapper::loadLibraryFromSymbolLookupMethod(pSymbolAddressMethod);
			bNameSpaceFound = true;
		}
		
		if (!bNameSpaceFound)
			throw ELibMCDriver_RaylaseInterfaceException(LIBMCDRIVER_RAYLASE_ERROR_COULDNOTLOADLIBRARY);
		
		return LIBMCDRIVER_RAYLASE_SUCCESS;
	}
	catch (ELibMCDriver_RaylaseInterfaceException & Exception) {
		return handleLibMCDriver_RaylaseException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_RaylaseResult libmcdriver_raylase_getsymbollookupmethod(LibMCDriver_Raylase_pvoid * pSymbolLookupMethod)
{
	IBase* pIBaseClass = nullptr;

	try {
		if (pSymbolLookupMethod == nullptr)
			throw ELibMCDriver_RaylaseInterfaceException (LIBMCDRIVER_RAYLASE_ERROR_INVALIDPARAM);
		*pSymbolLookupMethod = (void*)&LibMCDriver_Raylase::Impl::LibMCDriver_Raylase_GetProcAddress;
		return LIBMCDRIVER_RAYLASE_SUCCESS;
	}
	catch (ELibMCDriver_RaylaseInterfaceException & Exception) {
		return handleLibMCDriver_RaylaseException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}

LibMCDriver_RaylaseResult libmcdriver_raylase_createdriver(const char * pName, const char * pType, LibMCEnv_DriverEnvironment pDriverEnvironment, LibMCDriver_Raylase_Driver * pInstance)
{
	IBase* pIBaseClass = nullptr;

	try {
		if (pName == nullptr)
			throw ELibMCDriver_RaylaseInterfaceException (LIBMCDRIVER_RAYLASE_ERROR_INVALIDPARAM);
		if (pType == nullptr)
			throw ELibMCDriver_RaylaseInterfaceException (LIBMCDRIVER_RAYLASE_ERROR_INVALIDPARAM);
		if (pInstance == nullptr)
			throw ELibMCDriver_RaylaseInterfaceException (LIBMCDRIVER_RAYLASE_ERROR_INVALIDPARAM);
		std::string sName(pName);
		std::string sType(pType);
		LibMCEnv::PDriverEnvironment pIDriverEnvironment = std::make_shared<LibMCEnv::CDriverEnvironment>(CWrapper::sPLibMCEnvWrapper.get(), pDriverEnvironment);
		CWrapper::sPLibMCEnvWrapper->AcquireInstance(pIDriverEnvironment.get());
		if (!pIDriverEnvironment)
			throw ELibMCDriver_RaylaseInterfaceException (LIBMCDRIVER_RAYLASE_ERROR_INVALIDCAST);
		
		IBase* pBaseInstance(nullptr);
		pBaseInstance = CWrapper::CreateDriver(sName, sType, pIDriverEnvironment);

		*pInstance = (IBase*)(pBaseInstance);
		return LIBMCDRIVER_RAYLASE_SUCCESS;
	}
	catch (ELibMCDriver_RaylaseInterfaceException & Exception) {
		return handleLibMCDriver_RaylaseException(pIBaseClass, Exception);
	}
	catch (std::exception & StdException) {
		return handleStdException(pIBaseClass, StdException);
	}
	catch (...) {
		return handleUnhandledException(pIBaseClass);
	}
}


