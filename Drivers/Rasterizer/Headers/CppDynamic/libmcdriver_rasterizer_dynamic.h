/*++

Copyright (C) 2022 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.8.0-develop.

Abstract: This is an autogenerated C++-Header file in order to allow an easy
 use of Generic Rasterizer Driver

Interface version: 1.0.0

*/

#ifndef __LIBMCDRIVER_RASTERIZER_DYNAMICHEADER_CPPTYPES
#define __LIBMCDRIVER_RASTERIZER_DYNAMICHEADER_CPPTYPES

#include "libmcdriver_rasterizer_types.hpp"

#include "libmcenv_types.hpp"


/*************************************************************************************************************************
 Class definition for Base
**************************************************************************************************************************/

/*************************************************************************************************************************
 Class definition for Driver
**************************************************************************************************************************/

/**
* Configures a driver with its specific configuration data.
*
* @param[in] pDriver - Driver instance.
* @param[in] pConfigurationString - Configuration data of driver.
* @return error code or 0 (success)
*/
typedef LibMCDriver_RasterizerResult (*PLibMCDriver_RasterizerDriver_ConfigurePtr) (LibMCDriver_Rasterizer_Driver pDriver, const char * pConfigurationString);

/**
* returns the name identifier of the driver
*
* @param[in] pDriver - Driver instance.
* @param[in] nNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNameBuffer -  buffer of Name of the driver., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCDriver_RasterizerResult (*PLibMCDriver_RasterizerDriver_GetNamePtr) (LibMCDriver_Rasterizer_Driver pDriver, const LibMCDriver_Rasterizer_uint32 nNameBufferSize, LibMCDriver_Rasterizer_uint32* pNameNeededChars, char * pNameBuffer);

/**
* returns the type identifier of the driver
*
* @param[in] pDriver - Driver instance.
* @param[in] nTypeBufferSize - size of the buffer (including trailing 0)
* @param[out] pTypeNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pTypeBuffer -  buffer of Type of the driver., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCDriver_RasterizerResult (*PLibMCDriver_RasterizerDriver_GetTypePtr) (LibMCDriver_Rasterizer_Driver pDriver, const LibMCDriver_Rasterizer_uint32 nTypeBufferSize, LibMCDriver_Rasterizer_uint32* pTypeNeededChars, char * pTypeBuffer);

/**
* returns the version identifiers of the driver
*
* @param[in] pDriver - Driver instance.
* @param[out] pMajor - Major version.
* @param[out] pMinor - Minor version.
* @param[out] pMicro - Micro version.
* @param[in] nBuildBufferSize - size of the buffer (including trailing 0)
* @param[out] pBuildNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pBuildBuffer -  buffer of Build identifier., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCDriver_RasterizerResult (*PLibMCDriver_RasterizerDriver_GetVersionPtr) (LibMCDriver_Rasterizer_Driver pDriver, LibMCDriver_Rasterizer_uint32 * pMajor, LibMCDriver_Rasterizer_uint32 * pMinor, LibMCDriver_Rasterizer_uint32 * pMicro, const LibMCDriver_Rasterizer_uint32 nBuildBufferSize, LibMCDriver_Rasterizer_uint32* pBuildNeededChars, char * pBuildBuffer);

/**
* returns the header information
*
* @param[in] pDriver - Driver instance.
* @param[in] nNameSpaceBufferSize - size of the buffer (including trailing 0)
* @param[out] pNameSpaceNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNameSpaceBuffer -  buffer of NameSpace of the driver., may be NULL
* @param[in] nBaseNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pBaseNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pBaseNameBuffer -  buffer of BaseName of the driver., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCDriver_RasterizerResult (*PLibMCDriver_RasterizerDriver_GetHeaderInformationPtr) (LibMCDriver_Rasterizer_Driver pDriver, const LibMCDriver_Rasterizer_uint32 nNameSpaceBufferSize, LibMCDriver_Rasterizer_uint32* pNameSpaceNeededChars, char * pNameSpaceBuffer, const LibMCDriver_Rasterizer_uint32 nBaseNameBufferSize, LibMCDriver_Rasterizer_uint32* pBaseNameNeededChars, char * pBaseNameBuffer);

/**
* Stores the driver parameters in the driver environment.
*
* @param[in] pDriver - Driver instance.
* @return error code or 0 (success)
*/
typedef LibMCDriver_RasterizerResult (*PLibMCDriver_RasterizerDriver_QueryParametersPtr) (LibMCDriver_Rasterizer_Driver pDriver);

/*************************************************************************************************************************
 Class definition for LayerObject
**************************************************************************************************************************/

/**
* Returns count of Entity in Layer.
*
* @param[in] pLayerObject - LayerObject instance.
* @param[out] pEntityCount - Number of entity in layer.
* @return error code or 0 (success)
*/
typedef LibMCDriver_RasterizerResult (*PLibMCDriver_RasterizerLayerObject_GetEntityCountPtr) (LibMCDriver_Rasterizer_LayerObject pLayerObject, LibMCDriver_Rasterizer_uint32 * pEntityCount);

/**
* Returns a entity in a layer.
*
* @param[in] pLayerObject - LayerObject instance.
* @param[in] nEntityIndex - Index of entity in layer.
* @param[out] pGeometryType - Geometry type of Entity.
* @param[in] nPointsBufferSize - Number of elements in buffer
* @param[out] pPointsNeededCount - will be filled with the count of the written elements, or needed buffer size.
* @param[out] pPointsBuffer - Position2D  buffer of Points of Entity.
* @return error code or 0 (success)
*/
typedef LibMCDriver_RasterizerResult (*PLibMCDriver_RasterizerLayerObject_GetEntityPtr) (LibMCDriver_Rasterizer_LayerObject pLayerObject, LibMCDriver_Rasterizer_uint32 nEntityIndex, LibMCDriver_Rasterizer::eGeometryType * pGeometryType, const LibMCDriver_Rasterizer_uint64 nPointsBufferSize, LibMCDriver_Rasterizer_uint64* pPointsNeededCount, LibMCDriver_Rasterizer::sPosition2D * pPointsBuffer);

/**
* Adds a entity to a layer.
*
* @param[in] pLayerObject - LayerObject instance.
* @param[in] nPointsBufferSize - Number of elements in buffer
* @param[in] pPointsBuffer - Position2D buffer of Points of Entity.
* @param[in] eGeometryType - Geometry type of Entity.
* @param[out] pEntityIndex - Index of entity in layer.
* @return error code or 0 (success)
*/
typedef LibMCDriver_RasterizerResult (*PLibMCDriver_RasterizerLayerObject_AddEntityPtr) (LibMCDriver_Rasterizer_LayerObject pLayerObject, LibMCDriver_Rasterizer_uint64 nPointsBufferSize, const LibMCDriver_Rasterizer::sPosition2D * pPointsBuffer, LibMCDriver_Rasterizer::eGeometryType eGeometryType, LibMCDriver_Rasterizer_uint32 * pEntityIndex);

/**
* Removes self-intersections of a layer.
*
* @param[in] pLayerObject - LayerObject instance.
* @param[out] pLayerObjectInstance - New Layer Object Instance
* @return error code or 0 (success)
*/
typedef LibMCDriver_RasterizerResult (*PLibMCDriver_RasterizerLayerObject_RemoveSelfIntersectionsPtr) (LibMCDriver_Rasterizer_LayerObject pLayerObject, LibMCDriver_Rasterizer_LayerObject * pLayerObjectInstance);

/**
* Merges layer into another layer object.
*
* @param[in] pLayerObject - LayerObject instance.
* @param[in] pOtherLayerObject - Layer object to modify.
* @return error code or 0 (success)
*/
typedef LibMCDriver_RasterizerResult (*PLibMCDriver_RasterizerLayerObject_MergeIntoPtr) (LibMCDriver_Rasterizer_LayerObject pLayerObject, LibMCDriver_Rasterizer_LayerObject pOtherLayerObject);

/**
* Calculates an offset to a layer.
*
* @param[in] pLayerObject - LayerObject instance.
* @param[in] dOffsetValue - Offset in mm
* @param[out] pLayerObjectInstance - Offsetted Layer Object Instance
* @return error code or 0 (success)
*/
typedef LibMCDriver_RasterizerResult (*PLibMCDriver_RasterizerLayerObject_CalculateOffsetPtr) (LibMCDriver_Rasterizer_LayerObject pLayerObject, LibMCDriver_Rasterizer_double dOffsetValue, LibMCDriver_Rasterizer_LayerObject * pLayerObjectInstance);

/**
* Thickens up polylines of a layer.
*
* @param[in] pLayerObject - LayerObject instance.
* @param[in] dThickness - Thickness in mm
* @param[out] pLayerObjectInstance - Offsetted Layer Object Instance
* @return error code or 0 (success)
*/
typedef LibMCDriver_RasterizerResult (*PLibMCDriver_RasterizerLayerObject_ThickenPolylinesPtr) (LibMCDriver_Rasterizer_LayerObject pLayerObject, LibMCDriver_Rasterizer_double dThickness, LibMCDriver_Rasterizer_LayerObject * pLayerObjectInstance);

/**
* Thickens up hatches of a layer.
*
* @param[in] pLayerObject - LayerObject instance.
* @param[in] dThickness - Thickness in mm
* @param[out] pLayerObjectInstance - Offsetted Layer Object Instance
* @return error code or 0 (success)
*/
typedef LibMCDriver_RasterizerResult (*PLibMCDriver_RasterizerLayerObject_ThickenHatchesPtr) (LibMCDriver_Rasterizer_LayerObject pLayerObject, LibMCDriver_Rasterizer_double dThickness, LibMCDriver_Rasterizer_LayerObject * pLayerObjectInstance);

/**
* Distorts a layer with a callback function
*
* @param[in] pLayerObject - LayerObject instance.
* @param[in] dRefinementValue - Lines longer than this value are split up in smaller segments to not loose distortion information.
* @param[in] pDistortionCallback - pointer to the callback function.
* @param[in] pUserData - pointer to arbitrary user data that is passed without modification to the callback.
* @param[out] pLayerObjectInstance - Offsetted Layer Object Instance
* @return error code or 0 (success)
*/
typedef LibMCDriver_RasterizerResult (*PLibMCDriver_RasterizerLayerObject_DistortLayerPtr) (LibMCDriver_Rasterizer_LayerObject pLayerObject, LibMCDriver_Rasterizer_double dRefinementValue, LibMCDriver_Rasterizer::DistortionCallback pDistortionCallback, LibMCDriver_Rasterizer_pvoid pUserData, LibMCDriver_Rasterizer_LayerObject * pLayerObjectInstance);

/*************************************************************************************************************************
 Class definition for Rasterizer
**************************************************************************************************************************/

/**
* Returns DPI values in X and Y.
*
* @param[in] pRasterizer - Rasterizer instance.
* @param[out] pDPIValueX - DPI value in X
* @param[out] pDPIValueY - DPI value in Y
* @return error code or 0 (success)
*/
typedef LibMCDriver_RasterizerResult (*PLibMCDriver_RasterizerRasterizer_GetDPIPtr) (LibMCDriver_Rasterizer_Rasterizer pRasterizer, LibMCDriver_Rasterizer_double * pDPIValueX, LibMCDriver_Rasterizer_double * pDPIValueY);

/**
* Returns image sizes.
*
* @param[in] pRasterizer - Rasterizer instance.
* @param[out] pSizeX - Size in X in mm
* @param[out] pSizeY - Size in Y in mm
* @return error code or 0 (success)
*/
typedef LibMCDriver_RasterizerResult (*PLibMCDriver_RasterizerRasterizer_GetSizePtr) (LibMCDriver_Rasterizer_Rasterizer pRasterizer, LibMCDriver_Rasterizer_double * pSizeX, LibMCDriver_Rasterizer_double * pSizeY);

/**
* Returns image pixel sizes.
*
* @param[in] pRasterizer - Rasterizer instance.
* @param[out] pPixelSizeX - Number of pixels in X
* @param[out] pPixelSizeY - Number of pixels in Y
* @return error code or 0 (success)
*/
typedef LibMCDriver_RasterizerResult (*PLibMCDriver_RasterizerRasterizer_GetPixelSizePtr) (LibMCDriver_Rasterizer_Rasterizer pRasterizer, LibMCDriver_Rasterizer_uint32 * pPixelSizeX, LibMCDriver_Rasterizer_uint32 * pPixelSizeY);

/**
* Returns image position.
*
* @param[in] pRasterizer - Rasterizer instance.
* @param[out] pPositionX - Position in X in mm
* @param[out] pPositionY - Position in Y in mm
* @return error code or 0 (success)
*/
typedef LibMCDriver_RasterizerResult (*PLibMCDriver_RasterizerRasterizer_GetPositionPtr) (LibMCDriver_Rasterizer_Rasterizer pRasterizer, LibMCDriver_Rasterizer_double * pPositionX, LibMCDriver_Rasterizer_double * pPositionY);

/**
* Sets image position.
*
* @param[in] pRasterizer - Rasterizer instance.
* @param[in] dPositionX - Position in X in mm
* @param[in] dPositionY - Position in Y in mm
* @return error code or 0 (success)
*/
typedef LibMCDriver_RasterizerResult (*PLibMCDriver_RasterizerRasterizer_SetPositionPtr) (LibMCDriver_Rasterizer_Rasterizer pRasterizer, LibMCDriver_Rasterizer_double dPositionX, LibMCDriver_Rasterizer_double dPositionY);

/**
* Set subsampling values in X and Y.
*
* @param[in] pRasterizer - Rasterizer instance.
* @param[in] nSubsamplingX - Subsampling in X
* @param[in] nSubsamplingY - Subsampling in Y
* @return error code or 0 (success)
*/
typedef LibMCDriver_RasterizerResult (*PLibMCDriver_RasterizerRasterizer_SetSubsamplingPtr) (LibMCDriver_Rasterizer_Rasterizer pRasterizer, LibMCDriver_Rasterizer_uint32 nSubsamplingX, LibMCDriver_Rasterizer_uint32 nSubsamplingY);

/**
* Returns subsampling values in X and Y.
*
* @param[in] pRasterizer - Rasterizer instance.
* @param[out] pSubsamplingX - Subsampling in X
* @param[out] pSubsamplingY - Subsampling in Y
* @return error code or 0 (success)
*/
typedef LibMCDriver_RasterizerResult (*PLibMCDriver_RasterizerRasterizer_GetSubsamplingPtr) (LibMCDriver_Rasterizer_Rasterizer pRasterizer, LibMCDriver_Rasterizer_uint32 * pSubsamplingX, LibMCDriver_Rasterizer_uint32 * pSubsamplingY);

/**
* Set sampling parameters of algorithm.
*
* @param[in] pRasterizer - Rasterizer instance.
* @param[in] nUnitsPerSubpixel - Units per subpixel. Line coordinates will be discretized with this value. Minimum 4, Maximum 1048576. Must be even.
* @param[in] nPixelsPerBlock - Pixels per lookup block. Improves calculation speed. Minimum 4, Maximum 1024.
* @return error code or 0 (success)
*/
typedef LibMCDriver_RasterizerResult (*PLibMCDriver_RasterizerRasterizer_SetSamplingParametersPtr) (LibMCDriver_Rasterizer_Rasterizer pRasterizer, LibMCDriver_Rasterizer_uint32 nUnitsPerSubpixel, LibMCDriver_Rasterizer_uint32 nPixelsPerBlock);

/**
* Returns sampling parameters of algorithm.
*
* @param[in] pRasterizer - Rasterizer instance.
* @param[out] pUnitsPerSubpixel - Units per subpixel. Line coordinates will be discretized with this value. Minimum 4, Maximum 1048576. Must be even.
* @param[out] pPixelsPerBlock - Pixels per lookup block. Improves calculation speed. Minimum 4, Maximum 1024.
* @return error code or 0 (success)
*/
typedef LibMCDriver_RasterizerResult (*PLibMCDriver_RasterizerRasterizer_GetSamplingParametersPtr) (LibMCDriver_Rasterizer_Rasterizer pRasterizer, LibMCDriver_Rasterizer_uint32 * pUnitsPerSubpixel, LibMCDriver_Rasterizer_uint32 * pPixelsPerBlock);

/**
* Adds a layer object to subsample.
*
* @param[in] pRasterizer - Rasterizer instance.
* @param[in] pLayerObject - Layer object instance.
* @return error code or 0 (success)
*/
typedef LibMCDriver_RasterizerResult (*PLibMCDriver_RasterizerRasterizer_AddLayerPtr) (LibMCDriver_Rasterizer_Rasterizer pRasterizer, LibMCDriver_Rasterizer_LayerObject pLayerObject);

/**
* Calculates the image.
*
* @param[in] pRasterizer - Rasterizer instance.
* @param[in] pImageObject - ImageObject Instance to render into
* @param[in] bAntialiased - Image output is greyscale if true, black and white with 0.5 threshold if false.
* @return error code or 0 (success)
*/
typedef LibMCDriver_RasterizerResult (*PLibMCDriver_RasterizerRasterizer_CalculateImagePtr) (LibMCDriver_Rasterizer_Rasterizer pRasterizer, LibMCEnv_ImageData pImageObject, bool bAntialiased);

/*************************************************************************************************************************
 Class definition for SliceStack
**************************************************************************************************************************/

/**
* Returns layer count of slice stack.
*
* @param[in] pSliceStack - SliceStack instance.
* @param[out] pLayerCount - Returns number of layers
* @return error code or 0 (success)
*/
typedef LibMCDriver_RasterizerResult (*PLibMCDriver_RasterizerSliceStack_GetLayerCountPtr) (LibMCDriver_Rasterizer_SliceStack pSliceStack, LibMCDriver_Rasterizer_uint32 * pLayerCount);

/**
* Returns layer thickness of slice stack.
*
* @param[in] pSliceStack - SliceStack instance.
* @param[out] pLayerThickness - Returns layer thickness in mm
* @return error code or 0 (success)
*/
typedef LibMCDriver_RasterizerResult (*PLibMCDriver_RasterizerSliceStack_GetLayerThicknessPtr) (LibMCDriver_Rasterizer_SliceStack pSliceStack, LibMCDriver_Rasterizer_double * pLayerThickness);

/**
* Returns Z value of bottom of slice stack in mm.
*
* @param[in] pSliceStack - SliceStack instance.
* @param[out] pZValue - Z-Value of bottom of slice stack
* @return error code or 0 (success)
*/
typedef LibMCDriver_RasterizerResult (*PLibMCDriver_RasterizerSliceStack_GetBottomZPtr) (LibMCDriver_Rasterizer_SliceStack pSliceStack, LibMCDriver_Rasterizer_double * pZValue);

/**
* Returns Z value of top of slice stack in mm.
*
* @param[in] pSliceStack - SliceStack instance.
* @param[out] pZValue - Z-Value of top of slice stack
* @return error code or 0 (success)
*/
typedef LibMCDriver_RasterizerResult (*PLibMCDriver_RasterizerSliceStack_GetTopZPtr) (LibMCDriver_Rasterizer_SliceStack pSliceStack, LibMCDriver_Rasterizer_double * pZValue);

/**
* Returns layer object for a given Z Value.
*
* @param[in] pSliceStack - SliceStack instance.
* @param[in] nLayerIndex - Index of layer.
* @param[out] pLayerObject - LayerObject Instance
* @return error code or 0 (success)
*/
typedef LibMCDriver_RasterizerResult (*PLibMCDriver_RasterizerSliceStack_GetLayerPtr) (LibMCDriver_Rasterizer_SliceStack pSliceStack, LibMCDriver_Rasterizer_uint32 nLayerIndex, LibMCDriver_Rasterizer_LayerObject * pLayerObject);

/*************************************************************************************************************************
 Class definition for Driver_Rasterizer
**************************************************************************************************************************/

/**
* creates an empty slice stack.
*
* @param[in] pDriver_Rasterizer - Driver_Rasterizer instance.
* @param[in] nLayerCount - Number of layers. MUST be positive.
* @param[in] dLayerThickness - Layerthickness in mm. MUST be positive.
* @param[in] dBottomZ - Bottom Z value in mm.
* @param[out] pSliceStackInstance - Instance of Slice Stack
* @return error code or 0 (success)
*/
typedef LibMCDriver_RasterizerResult (*PLibMCDriver_RasterizerDriver_Rasterizer_CreateSliceStackPtr) (LibMCDriver_Rasterizer_Driver_Rasterizer pDriver_Rasterizer, LibMCDriver_Rasterizer_uint32 nLayerCount, LibMCDriver_Rasterizer_double dLayerThickness, LibMCDriver_Rasterizer_double dBottomZ, LibMCDriver_Rasterizer_SliceStack * pSliceStackInstance);

/**
* creates an empty layer object.
*
* @param[in] pDriver_Rasterizer - Driver_Rasterizer instance.
* @param[out] pLayerObject - Instance of a Layer Object
* @return error code or 0 (success)
*/
typedef LibMCDriver_RasterizerResult (*PLibMCDriver_RasterizerDriver_Rasterizer_CreateEmptyLayerPtr) (LibMCDriver_Rasterizer_Driver_Rasterizer pDriver_Rasterizer, LibMCDriver_Rasterizer_LayerObject * pLayerObject);

/**
* creates a new rasterization instance.
*
* @param[in] pDriver_Rasterizer - Driver_Rasterizer instance.
* @param[in] pIdentifier - Identifier object. MUST be unique.
* @param[in] nPixelSizeX - Pixel size in X. MUST be positive.
* @param[in] nPixelSizeY - Pixel size in Y. MUST be positive.
* @param[in] dDPIX - DPI in X. MUST be positive.
* @param[in] dDPIY - DPI in Y. MUST be positive.
* @param[out] pRasterizerInstance - Instance of Rasterizer
* @return error code or 0 (success)
*/
typedef LibMCDriver_RasterizerResult (*PLibMCDriver_RasterizerDriver_Rasterizer_RegisterInstancePtr) (LibMCDriver_Rasterizer_Driver_Rasterizer pDriver_Rasterizer, const char * pIdentifier, LibMCDriver_Rasterizer_uint32 nPixelSizeX, LibMCDriver_Rasterizer_uint32 nPixelSizeY, LibMCDriver_Rasterizer_double dDPIX, LibMCDriver_Rasterizer_double dDPIY, LibMCDriver_Rasterizer_Rasterizer * pRasterizerInstance);

/**
* destroys a rasterization instance. Instance MUST exist.
*
* @param[in] pDriver_Rasterizer - Driver_Rasterizer instance.
* @param[in] pIdentifier - Identifier object. MUST be unique.
* @return error code or 0 (success)
*/
typedef LibMCDriver_RasterizerResult (*PLibMCDriver_RasterizerDriver_Rasterizer_UnregisterInstancePtr) (LibMCDriver_Rasterizer_Driver_Rasterizer pDriver_Rasterizer, const char * pIdentifier);

/**
* Checks if a rasterization instance exists.
*
* @param[in] pDriver_Rasterizer - Driver_Rasterizer instance.
* @param[in] pIdentifier - Identifier object. MUST be unique.
* @param[out] pInstanceExists - Flag if instance exists.
* @return error code or 0 (success)
*/
typedef LibMCDriver_RasterizerResult (*PLibMCDriver_RasterizerDriver_Rasterizer_HasInstancePtr) (LibMCDriver_Rasterizer_Driver_Rasterizer pDriver_Rasterizer, const char * pIdentifier, bool * pInstanceExists);

/**
* retrieves an existing rasterization instance.
*
* @param[in] pDriver_Rasterizer - Driver_Rasterizer instance.
* @param[in] pIdentifier - Identifier object. MUST be unique.
* @param[out] pRasterizerInstance - Instance of Rasterizer
* @return error code or 0 (success)
*/
typedef LibMCDriver_RasterizerResult (*PLibMCDriver_RasterizerDriver_Rasterizer_GetInstancePtr) (LibMCDriver_Rasterizer_Driver_Rasterizer pDriver_Rasterizer, const char * pIdentifier, LibMCDriver_Rasterizer_Rasterizer * pRasterizerInstance);

/*************************************************************************************************************************
 Global functions
**************************************************************************************************************************/

/**
* retrieves the binary version of this library.
*
* @param[out] pMajor - returns the major version of this library
* @param[out] pMinor - returns the minor version of this library
* @param[out] pMicro - returns the micro version of this library
* @return error code or 0 (success)
*/
typedef LibMCDriver_RasterizerResult (*PLibMCDriver_RasterizerGetVersionPtr) (LibMCDriver_Rasterizer_uint32 * pMajor, LibMCDriver_Rasterizer_uint32 * pMinor, LibMCDriver_Rasterizer_uint32 * pMicro);

/**
* Returns the last error recorded on this object
*
* @param[in] pInstance - Instance Handle
* @param[in] nErrorMessageBufferSize - size of the buffer (including trailing 0)
* @param[out] pErrorMessageNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pErrorMessageBuffer -  buffer of Message of the last error, may be NULL
* @param[out] pHasError - Is there a last error to query
* @return error code or 0 (success)
*/
typedef LibMCDriver_RasterizerResult (*PLibMCDriver_RasterizerGetLastErrorPtr) (LibMCDriver_Rasterizer_Base pInstance, const LibMCDriver_Rasterizer_uint32 nErrorMessageBufferSize, LibMCDriver_Rasterizer_uint32* pErrorMessageNeededChars, char * pErrorMessageBuffer, bool * pHasError);

/**
* Releases shared ownership of an Instance
*
* @param[in] pInstance - Instance Handle
* @return error code or 0 (success)
*/
typedef LibMCDriver_RasterizerResult (*PLibMCDriver_RasterizerReleaseInstancePtr) (LibMCDriver_Rasterizer_Base pInstance);

/**
* Acquires shared ownership of an Instance
*
* @param[in] pInstance - Instance Handle
* @return error code or 0 (success)
*/
typedef LibMCDriver_RasterizerResult (*PLibMCDriver_RasterizerAcquireInstancePtr) (LibMCDriver_Rasterizer_Base pInstance);

/**
* Injects an imported component for usage within this component
*
* @param[in] pNameSpace - NameSpace of the injected component
* @param[in] pSymbolAddressMethod - Address of the SymbolAddressMethod of the injected component
* @return error code or 0 (success)
*/
typedef LibMCDriver_RasterizerResult (*PLibMCDriver_RasterizerInjectComponentPtr) (const char * pNameSpace, LibMCDriver_Rasterizer_pvoid pSymbolAddressMethod);

/**
* Returns the address of the SymbolLookupMethod
*
* @param[out] pSymbolLookupMethod - Address of the SymbolAddressMethod
* @return error code or 0 (success)
*/
typedef LibMCDriver_RasterizerResult (*PLibMCDriver_RasterizerGetSymbolLookupMethodPtr) (LibMCDriver_Rasterizer_pvoid * pSymbolLookupMethod);

/**
* Creates a driver instance with a specific name.
*
* @param[in] pName - Name of driver to be created.
* @param[in] pType - Type of driver to be created.
* @param[in] pDriverEnvironment - Environment of this driver.
* @param[out] pInstance - New Driver instance
* @return error code or 0 (success)
*/
typedef LibMCDriver_RasterizerResult (*PLibMCDriver_RasterizerCreateDriverPtr) (const char * pName, const char * pType, LibMCEnv_DriverEnvironment pDriverEnvironment, LibMCDriver_Rasterizer_Driver * pInstance);

/*************************************************************************************************************************
 Function Table Structure
**************************************************************************************************************************/

typedef struct {
	void * m_LibraryHandle;
	PLibMCDriver_RasterizerDriver_ConfigurePtr m_Driver_Configure;
	PLibMCDriver_RasterizerDriver_GetNamePtr m_Driver_GetName;
	PLibMCDriver_RasterizerDriver_GetTypePtr m_Driver_GetType;
	PLibMCDriver_RasterizerDriver_GetVersionPtr m_Driver_GetVersion;
	PLibMCDriver_RasterizerDriver_GetHeaderInformationPtr m_Driver_GetHeaderInformation;
	PLibMCDriver_RasterizerDriver_QueryParametersPtr m_Driver_QueryParameters;
	PLibMCDriver_RasterizerLayerObject_GetEntityCountPtr m_LayerObject_GetEntityCount;
	PLibMCDriver_RasterizerLayerObject_GetEntityPtr m_LayerObject_GetEntity;
	PLibMCDriver_RasterizerLayerObject_AddEntityPtr m_LayerObject_AddEntity;
	PLibMCDriver_RasterizerLayerObject_RemoveSelfIntersectionsPtr m_LayerObject_RemoveSelfIntersections;
	PLibMCDriver_RasterizerLayerObject_MergeIntoPtr m_LayerObject_MergeInto;
	PLibMCDriver_RasterizerLayerObject_CalculateOffsetPtr m_LayerObject_CalculateOffset;
	PLibMCDriver_RasterizerLayerObject_ThickenPolylinesPtr m_LayerObject_ThickenPolylines;
	PLibMCDriver_RasterizerLayerObject_ThickenHatchesPtr m_LayerObject_ThickenHatches;
	PLibMCDriver_RasterizerLayerObject_DistortLayerPtr m_LayerObject_DistortLayer;
	PLibMCDriver_RasterizerRasterizer_GetDPIPtr m_Rasterizer_GetDPI;
	PLibMCDriver_RasterizerRasterizer_GetSizePtr m_Rasterizer_GetSize;
	PLibMCDriver_RasterizerRasterizer_GetPixelSizePtr m_Rasterizer_GetPixelSize;
	PLibMCDriver_RasterizerRasterizer_GetPositionPtr m_Rasterizer_GetPosition;
	PLibMCDriver_RasterizerRasterizer_SetPositionPtr m_Rasterizer_SetPosition;
	PLibMCDriver_RasterizerRasterizer_SetSubsamplingPtr m_Rasterizer_SetSubsampling;
	PLibMCDriver_RasterizerRasterizer_GetSubsamplingPtr m_Rasterizer_GetSubsampling;
	PLibMCDriver_RasterizerRasterizer_SetSamplingParametersPtr m_Rasterizer_SetSamplingParameters;
	PLibMCDriver_RasterizerRasterizer_GetSamplingParametersPtr m_Rasterizer_GetSamplingParameters;
	PLibMCDriver_RasterizerRasterizer_AddLayerPtr m_Rasterizer_AddLayer;
	PLibMCDriver_RasterizerRasterizer_CalculateImagePtr m_Rasterizer_CalculateImage;
	PLibMCDriver_RasterizerSliceStack_GetLayerCountPtr m_SliceStack_GetLayerCount;
	PLibMCDriver_RasterizerSliceStack_GetLayerThicknessPtr m_SliceStack_GetLayerThickness;
	PLibMCDriver_RasterizerSliceStack_GetBottomZPtr m_SliceStack_GetBottomZ;
	PLibMCDriver_RasterizerSliceStack_GetTopZPtr m_SliceStack_GetTopZ;
	PLibMCDriver_RasterizerSliceStack_GetLayerPtr m_SliceStack_GetLayer;
	PLibMCDriver_RasterizerDriver_Rasterizer_CreateSliceStackPtr m_Driver_Rasterizer_CreateSliceStack;
	PLibMCDriver_RasterizerDriver_Rasterizer_CreateEmptyLayerPtr m_Driver_Rasterizer_CreateEmptyLayer;
	PLibMCDriver_RasterizerDriver_Rasterizer_RegisterInstancePtr m_Driver_Rasterizer_RegisterInstance;
	PLibMCDriver_RasterizerDriver_Rasterizer_UnregisterInstancePtr m_Driver_Rasterizer_UnregisterInstance;
	PLibMCDriver_RasterizerDriver_Rasterizer_HasInstancePtr m_Driver_Rasterizer_HasInstance;
	PLibMCDriver_RasterizerDriver_Rasterizer_GetInstancePtr m_Driver_Rasterizer_GetInstance;
	PLibMCDriver_RasterizerGetVersionPtr m_GetVersion;
	PLibMCDriver_RasterizerGetLastErrorPtr m_GetLastError;
	PLibMCDriver_RasterizerReleaseInstancePtr m_ReleaseInstance;
	PLibMCDriver_RasterizerAcquireInstancePtr m_AcquireInstance;
	PLibMCDriver_RasterizerInjectComponentPtr m_InjectComponent;
	PLibMCDriver_RasterizerGetSymbolLookupMethodPtr m_GetSymbolLookupMethod;
	PLibMCDriver_RasterizerCreateDriverPtr m_CreateDriver;
} sLibMCDriver_RasterizerDynamicWrapperTable;

#endif // __LIBMCDRIVER_RASTERIZER_DYNAMICHEADER_CPPTYPES

