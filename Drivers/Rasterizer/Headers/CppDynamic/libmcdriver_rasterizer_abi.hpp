/*++

Copyright (C) 2022 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.7.0-develop.

Abstract: This is an autogenerated C++-Header file in order to allow an easy
 use of Generic Rasterizer Driver

Interface version: 1.0.0

*/

#ifndef __LIBMCDRIVER_RASTERIZER_HEADER_CPP
#define __LIBMCDRIVER_RASTERIZER_HEADER_CPP

#ifdef __LIBMCDRIVER_RASTERIZER_EXPORTS
#ifdef _WIN32
#define LIBMCDRIVER_RASTERIZER_DECLSPEC __declspec (dllexport)
#else // _WIN32
#define LIBMCDRIVER_RASTERIZER_DECLSPEC __attribute__((visibility("default")))
#endif // _WIN32
#else // __LIBMCDRIVER_RASTERIZER_EXPORTS
#define LIBMCDRIVER_RASTERIZER_DECLSPEC
#endif // __LIBMCDRIVER_RASTERIZER_EXPORTS

#include "libmcdriver_rasterizer_types.hpp"

#include "libmcenv_dynamic.hpp"

#ifdef __cplusplus
extern "C" {
#endif

/*************************************************************************************************************************
 Class definition for Base
**************************************************************************************************************************/

/*************************************************************************************************************************
 Class definition for Driver
**************************************************************************************************************************/

/**
* Configures a driver with its specific configuration data.
*
* @param[in] pDriver - Driver instance.
* @param[in] pConfigurationString - Configuration data of driver.
* @return error code or 0 (success)
*/
LIBMCDRIVER_RASTERIZER_DECLSPEC LibMCDriver_RasterizerResult libmcdriver_rasterizer_driver_configure(LibMCDriver_Rasterizer_Driver pDriver, const char * pConfigurationString);

/**
* returns the name identifier of the driver
*
* @param[in] pDriver - Driver instance.
* @param[in] nNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNameBuffer -  buffer of Name of the driver., may be NULL
* @return error code or 0 (success)
*/
LIBMCDRIVER_RASTERIZER_DECLSPEC LibMCDriver_RasterizerResult libmcdriver_rasterizer_driver_getname(LibMCDriver_Rasterizer_Driver pDriver, const LibMCDriver_Rasterizer_uint32 nNameBufferSize, LibMCDriver_Rasterizer_uint32* pNameNeededChars, char * pNameBuffer);

/**
* returns the type identifier of the driver
*
* @param[in] pDriver - Driver instance.
* @param[in] nTypeBufferSize - size of the buffer (including trailing 0)
* @param[out] pTypeNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pTypeBuffer -  buffer of Type of the driver., may be NULL
* @return error code or 0 (success)
*/
LIBMCDRIVER_RASTERIZER_DECLSPEC LibMCDriver_RasterizerResult libmcdriver_rasterizer_driver_gettype(LibMCDriver_Rasterizer_Driver pDriver, const LibMCDriver_Rasterizer_uint32 nTypeBufferSize, LibMCDriver_Rasterizer_uint32* pTypeNeededChars, char * pTypeBuffer);

/**
* returns the version identifiers of the driver
*
* @param[in] pDriver - Driver instance.
* @param[out] pMajor - Major version.
* @param[out] pMinor - Minor version.
* @param[out] pMicro - Micro version.
* @param[in] nBuildBufferSize - size of the buffer (including trailing 0)
* @param[out] pBuildNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pBuildBuffer -  buffer of Build identifier., may be NULL
* @return error code or 0 (success)
*/
LIBMCDRIVER_RASTERIZER_DECLSPEC LibMCDriver_RasterizerResult libmcdriver_rasterizer_driver_getversion(LibMCDriver_Rasterizer_Driver pDriver, LibMCDriver_Rasterizer_uint32 * pMajor, LibMCDriver_Rasterizer_uint32 * pMinor, LibMCDriver_Rasterizer_uint32 * pMicro, const LibMCDriver_Rasterizer_uint32 nBuildBufferSize, LibMCDriver_Rasterizer_uint32* pBuildNeededChars, char * pBuildBuffer);

/**
* returns the header information
*
* @param[in] pDriver - Driver instance.
* @param[in] nNameSpaceBufferSize - size of the buffer (including trailing 0)
* @param[out] pNameSpaceNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNameSpaceBuffer -  buffer of NameSpace of the driver., may be NULL
* @param[in] nBaseNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pBaseNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pBaseNameBuffer -  buffer of BaseName of the driver., may be NULL
* @return error code or 0 (success)
*/
LIBMCDRIVER_RASTERIZER_DECLSPEC LibMCDriver_RasterizerResult libmcdriver_rasterizer_driver_getheaderinformation(LibMCDriver_Rasterizer_Driver pDriver, const LibMCDriver_Rasterizer_uint32 nNameSpaceBufferSize, LibMCDriver_Rasterizer_uint32* pNameSpaceNeededChars, char * pNameSpaceBuffer, const LibMCDriver_Rasterizer_uint32 nBaseNameBufferSize, LibMCDriver_Rasterizer_uint32* pBaseNameNeededChars, char * pBaseNameBuffer);

/**
* Stores the driver parameters in the driver environment.
*
* @param[in] pDriver - Driver instance.
* @return error code or 0 (success)
*/
LIBMCDRIVER_RASTERIZER_DECLSPEC LibMCDriver_RasterizerResult libmcdriver_rasterizer_driver_queryparameters(LibMCDriver_Rasterizer_Driver pDriver);

/*************************************************************************************************************************
 Class definition for ImageObject
**************************************************************************************************************************/

/**
* Returns DPI values in X and Y.
*
* @param[in] pImageObject - ImageObject instance.
* @param[out] pDPIValueX - DPI value in X
* @param[out] pDPIValueY - DPI value in Y
* @return error code or 0 (success)
*/
LIBMCDRIVER_RASTERIZER_DECLSPEC LibMCDriver_RasterizerResult libmcdriver_rasterizer_imageobject_getdpi(LibMCDriver_Rasterizer_ImageObject pImageObject, LibMCDriver_Rasterizer_double * pDPIValueX, LibMCDriver_Rasterizer_double * pDPIValueY);

/**
* Returns image sizes.
*
* @param[in] pImageObject - ImageObject instance.
* @param[out] pSizeX - Size in X in mm
* @param[out] pSizeY - Size in Y in mm
* @return error code or 0 (success)
*/
LIBMCDRIVER_RASTERIZER_DECLSPEC LibMCDriver_RasterizerResult libmcdriver_rasterizer_imageobject_getsize(LibMCDriver_Rasterizer_ImageObject pImageObject, LibMCDriver_Rasterizer_double * pSizeX, LibMCDriver_Rasterizer_double * pSizeY);

/**
* Returns image pixel sizes.
*
* @param[in] pImageObject - ImageObject instance.
* @param[out] pPixelSizeX - Number of pixels in X
* @param[out] pPixelSizeY - Number of pixels in Y
* @return error code or 0 (success)
*/
LIBMCDRIVER_RASTERIZER_DECLSPEC LibMCDriver_RasterizerResult libmcdriver_rasterizer_imageobject_getpixelsize(LibMCDriver_Rasterizer_ImageObject pImageObject, LibMCDriver_Rasterizer_uint32 * pPixelSizeX, LibMCDriver_Rasterizer_uint32 * pPixelSizeY);

/**
* Encodes PNG and stores data stream in image object.
*
* @param[in] pImageObject - ImageObject instance.
* @return error code or 0 (success)
*/
LIBMCDRIVER_RASTERIZER_DECLSPEC LibMCDriver_RasterizerResult libmcdriver_rasterizer_imageobject_encodepng(LibMCDriver_Rasterizer_ImageObject pImageObject);

/**
* Releases encoded data stream of image object.
*
* @param[in] pImageObject - ImageObject instance.
* @return error code or 0 (success)
*/
LIBMCDRIVER_RASTERIZER_DECLSPEC LibMCDriver_RasterizerResult libmcdriver_rasterizer_imageobject_clearencodedpng(LibMCDriver_Rasterizer_ImageObject pImageObject);

/**
* Retrieves encoded data stream of image object. MUST have been encoded with EncodePNG before.
*
* @param[in] pImageObject - ImageObject instance.
* @param[in] nPNGDataBufferSize - Number of elements in buffer
* @param[out] pPNGDataNeededCount - will be filled with the count of the written elements, or needed buffer size.
* @param[out] pPNGDataBuffer - uint8 buffer of PNG Data stream.
* @return error code or 0 (success)
*/
LIBMCDRIVER_RASTERIZER_DECLSPEC LibMCDriver_RasterizerResult libmcdriver_rasterizer_imageobject_getencodedpngdata(LibMCDriver_Rasterizer_ImageObject pImageObject, const LibMCDriver_Rasterizer_uint64 nPNGDataBufferSize, LibMCDriver_Rasterizer_uint64* pPNGDataNeededCount, LibMCDriver_Rasterizer_uint8 * pPNGDataBuffer);

/**
* Sets all pixels to a single value.
*
* @param[in] pImageObject - ImageObject instance.
* @param[in] nValue - Pixel value.
* @return error code or 0 (success)
*/
LIBMCDRIVER_RASTERIZER_DECLSPEC LibMCDriver_RasterizerResult libmcdriver_rasterizer_imageobject_clear(LibMCDriver_Rasterizer_ImageObject pImageObject, LibMCDriver_Rasterizer_uint8 nValue);

/**
* Returns one pixel of an image.
*
* @param[in] pImageObject - ImageObject instance.
* @param[in] nX - Pixel coordinate in X
* @param[in] nY - Pixel coordinate in Y
* @param[out] pValue - Pixel value at this position
* @return error code or 0 (success)
*/
LIBMCDRIVER_RASTERIZER_DECLSPEC LibMCDriver_RasterizerResult libmcdriver_rasterizer_imageobject_getpixel(LibMCDriver_Rasterizer_ImageObject pImageObject, LibMCDriver_Rasterizer_uint32 nX, LibMCDriver_Rasterizer_uint32 nY, LibMCDriver_Rasterizer_uint8 * pValue);

/**
* Sets one pixel of an image.
*
* @param[in] pImageObject - ImageObject instance.
* @param[in] nX - Pixel coordinate in X
* @param[in] nY - Pixel coordinate in Y
* @param[in] nValue - New Pixel value at this position
* @return error code or 0 (success)
*/
LIBMCDRIVER_RASTERIZER_DECLSPEC LibMCDriver_RasterizerResult libmcdriver_rasterizer_imageobject_setpixel(LibMCDriver_Rasterizer_ImageObject pImageObject, LibMCDriver_Rasterizer_uint32 nX, LibMCDriver_Rasterizer_uint32 nY, LibMCDriver_Rasterizer_uint8 nValue);

/**
* Returns a subset of an image or the whole image data.
*
* @param[in] pImageObject - ImageObject instance.
* @param[in] nXMin - Min Pixel coordinate in X. MUST be within image bounds.
* @param[in] nYMin - Min Pixel coordinate in Y. MUST be within image bounds.
* @param[in] nXMax - Max Pixel coordinate in X. MUST be within image bounds. MUST be larger or equal than MinX
* @param[in] nYMax - Max Pixel coordinate in Y. MUST be within image bounds. MUST be larger or equal than MinY
* @param[in] nValueBufferSize - Number of elements in buffer
* @param[out] pValueNeededCount - will be filled with the count of the written elements, or needed buffer size.
* @param[out] pValueBuffer - uint8 buffer of Pixel values of the rectangle, rowwise array. MUST have the exact number of pixels in size.
* @return error code or 0 (success)
*/
LIBMCDRIVER_RASTERIZER_DECLSPEC LibMCDriver_RasterizerResult libmcdriver_rasterizer_imageobject_getpixelrange(LibMCDriver_Rasterizer_ImageObject pImageObject, LibMCDriver_Rasterizer_uint32 nXMin, LibMCDriver_Rasterizer_uint32 nYMin, LibMCDriver_Rasterizer_uint32 nXMax, LibMCDriver_Rasterizer_uint32 nYMax, const LibMCDriver_Rasterizer_uint64 nValueBufferSize, LibMCDriver_Rasterizer_uint64* pValueNeededCount, LibMCDriver_Rasterizer_uint8 * pValueBuffer);

/**
* Exchanges a subset of an image or the whole image data.
*
* @param[in] pImageObject - ImageObject instance.
* @param[in] nXMin - Min Pixel coordinate in X. MUST be within image bounds.
* @param[in] nYMin - Min Pixel coordinate in Y. MUST be within image bounds.
* @param[in] nXMax - Max Pixel coordinate in X. MUST be within image bounds. MUST be larger or equal than MinX
* @param[in] nYMax - Max Pixel coordinate in Y. MUST be within image bounds. MUST be larger or equal than MinY
* @param[in] nValueBufferSize - Number of elements in buffer
* @param[in] pValueBuffer - uint8 buffer of New pixel values of the rectangle, rowwise array. MUST have the exact number of pixels in size.
* @return error code or 0 (success)
*/
LIBMCDRIVER_RASTERIZER_DECLSPEC LibMCDriver_RasterizerResult libmcdriver_rasterizer_imageobject_setpixelrange(LibMCDriver_Rasterizer_ImageObject pImageObject, LibMCDriver_Rasterizer_uint32 nXMin, LibMCDriver_Rasterizer_uint32 nYMin, LibMCDriver_Rasterizer_uint32 nXMax, LibMCDriver_Rasterizer_uint32 nYMax, LibMCDriver_Rasterizer_uint64 nValueBufferSize, const LibMCDriver_Rasterizer_uint8 * pValueBuffer);

/*************************************************************************************************************************
 Class definition for LayerObject
**************************************************************************************************************************/

/**
* Returns count of Entity in Layer.
*
* @param[in] pLayerObject - LayerObject instance.
* @param[out] pEntityCount - Number of entity in layer.
* @return error code or 0 (success)
*/
LIBMCDRIVER_RASTERIZER_DECLSPEC LibMCDriver_RasterizerResult libmcdriver_rasterizer_layerobject_getentitycount(LibMCDriver_Rasterizer_LayerObject pLayerObject, LibMCDriver_Rasterizer_uint32 * pEntityCount);

/**
* Returns a entity in a layer.
*
* @param[in] pLayerObject - LayerObject instance.
* @param[in] nEntityIndex - Index of entity in layer.
* @param[out] pGeometryType - Geometry type of Entity.
* @param[in] nPointsBufferSize - Number of elements in buffer
* @param[out] pPointsNeededCount - will be filled with the count of the written elements, or needed buffer size.
* @param[out] pPointsBuffer - Position2D buffer of Points of Entity.
* @return error code or 0 (success)
*/
LIBMCDRIVER_RASTERIZER_DECLSPEC LibMCDriver_RasterizerResult libmcdriver_rasterizer_layerobject_getentity(LibMCDriver_Rasterizer_LayerObject pLayerObject, LibMCDriver_Rasterizer_uint32 nEntityIndex, LibMCDriver_Rasterizer::eGeometryType * pGeometryType, const LibMCDriver_Rasterizer_uint64 nPointsBufferSize, LibMCDriver_Rasterizer_uint64* pPointsNeededCount, LibMCDriver_Rasterizer::sPosition2D * pPointsBuffer);

/**
* Adds a entity to a layer.
*
* @param[in] pLayerObject - LayerObject instance.
* @param[in] nPointsBufferSize - Number of elements in buffer
* @param[in] pPointsBuffer - Position2D buffer of Points of Entity.
* @param[in] eGeometryType - Geometry type of Entity.
* @param[out] pEntityIndex - Index of entity in layer.
* @return error code or 0 (success)
*/
LIBMCDRIVER_RASTERIZER_DECLSPEC LibMCDriver_RasterizerResult libmcdriver_rasterizer_layerobject_addentity(LibMCDriver_Rasterizer_LayerObject pLayerObject, LibMCDriver_Rasterizer_uint64 nPointsBufferSize, const LibMCDriver_Rasterizer::sPosition2D * pPointsBuffer, LibMCDriver_Rasterizer::eGeometryType eGeometryType, LibMCDriver_Rasterizer_uint32 * pEntityIndex);

/**
* Removes self-intersections of a layer.
*
* @param[in] pLayerObject - LayerObject instance.
* @param[out] pLayerObjectInstance - New Layer Object Instance
* @return error code or 0 (success)
*/
LIBMCDRIVER_RASTERIZER_DECLSPEC LibMCDriver_RasterizerResult libmcdriver_rasterizer_layerobject_removeselfintersections(LibMCDriver_Rasterizer_LayerObject pLayerObject, LibMCDriver_Rasterizer_LayerObject * pLayerObjectInstance);

/**
* Merges layer into another layer object.
*
* @param[in] pLayerObject - LayerObject instance.
* @param[in] pOtherLayerObject - Layer object to modify.
* @return error code or 0 (success)
*/
LIBMCDRIVER_RASTERIZER_DECLSPEC LibMCDriver_RasterizerResult libmcdriver_rasterizer_layerobject_mergeinto(LibMCDriver_Rasterizer_LayerObject pLayerObject, LibMCDriver_Rasterizer_LayerObject pOtherLayerObject);

/**
* Calculates an offset to a layer.
*
* @param[in] pLayerObject - LayerObject instance.
* @param[in] dOffsetValue - Offset in mm
* @param[out] pLayerObjectInstance - Offsetted Layer Object Instance
* @return error code or 0 (success)
*/
LIBMCDRIVER_RASTERIZER_DECLSPEC LibMCDriver_RasterizerResult libmcdriver_rasterizer_layerobject_calculateoffset(LibMCDriver_Rasterizer_LayerObject pLayerObject, LibMCDriver_Rasterizer_double dOffsetValue, LibMCDriver_Rasterizer_LayerObject * pLayerObjectInstance);

/**
* Thickens up polylines of a layer.
*
* @param[in] pLayerObject - LayerObject instance.
* @param[in] dThickness - Thickness in mm
* @param[out] pLayerObjectInstance - Offsetted Layer Object Instance
* @return error code or 0 (success)
*/
LIBMCDRIVER_RASTERIZER_DECLSPEC LibMCDriver_RasterizerResult libmcdriver_rasterizer_layerobject_thickenpolylines(LibMCDriver_Rasterizer_LayerObject pLayerObject, LibMCDriver_Rasterizer_double dThickness, LibMCDriver_Rasterizer_LayerObject * pLayerObjectInstance);

/**
* Thickens up hatches of a layer.
*
* @param[in] pLayerObject - LayerObject instance.
* @param[in] dThickness - Thickness in mm
* @param[out] pLayerObjectInstance - Offsetted Layer Object Instance
* @return error code or 0 (success)
*/
LIBMCDRIVER_RASTERIZER_DECLSPEC LibMCDriver_RasterizerResult libmcdriver_rasterizer_layerobject_thickenhatches(LibMCDriver_Rasterizer_LayerObject pLayerObject, LibMCDriver_Rasterizer_double dThickness, LibMCDriver_Rasterizer_LayerObject * pLayerObjectInstance);

/**
* Distorts a layer with a callback function
*
* @param[in] pLayerObject - LayerObject instance.
* @param[in] dRefinementValue - Lines longer than this value are split up in smaller segments to not loose distortion information.
* @param[in] pDistortionCallback - pointer to the callback function.
* @param[in] pUserData - pointer to arbitrary user data that is passed without modification to the callback.
* @param[out] pLayerObjectInstance - Offsetted Layer Object Instance
* @return error code or 0 (success)
*/
LIBMCDRIVER_RASTERIZER_DECLSPEC LibMCDriver_RasterizerResult libmcdriver_rasterizer_layerobject_distortlayer(LibMCDriver_Rasterizer_LayerObject pLayerObject, LibMCDriver_Rasterizer_double dRefinementValue, LibMCDriver_Rasterizer::DistortionCallback pDistortionCallback, LibMCDriver_Rasterizer_pvoid pUserData, LibMCDriver_Rasterizer_LayerObject * pLayerObjectInstance);

/*************************************************************************************************************************
 Class definition for Rasterizer
**************************************************************************************************************************/

/**
* Returns DPI values in X and Y.
*
* @param[in] pRasterizer - Rasterizer instance.
* @param[out] pDPIValueX - DPI value in X
* @param[out] pDPIValueY - DPI value in Y
* @return error code or 0 (success)
*/
LIBMCDRIVER_RASTERIZER_DECLSPEC LibMCDriver_RasterizerResult libmcdriver_rasterizer_rasterizer_getdpi(LibMCDriver_Rasterizer_Rasterizer pRasterizer, LibMCDriver_Rasterizer_double * pDPIValueX, LibMCDriver_Rasterizer_double * pDPIValueY);

/**
* Returns image sizes.
*
* @param[in] pRasterizer - Rasterizer instance.
* @param[out] pSizeX - Size in X in mm
* @param[out] pSizeY - Size in Y in mm
* @return error code or 0 (success)
*/
LIBMCDRIVER_RASTERIZER_DECLSPEC LibMCDriver_RasterizerResult libmcdriver_rasterizer_rasterizer_getsize(LibMCDriver_Rasterizer_Rasterizer pRasterizer, LibMCDriver_Rasterizer_double * pSizeX, LibMCDriver_Rasterizer_double * pSizeY);

/**
* Returns image pixel sizes.
*
* @param[in] pRasterizer - Rasterizer instance.
* @param[out] pPixelSizeX - Number of pixels in X
* @param[out] pPixelSizeY - Number of pixels in Y
* @return error code or 0 (success)
*/
LIBMCDRIVER_RASTERIZER_DECLSPEC LibMCDriver_RasterizerResult libmcdriver_rasterizer_rasterizer_getpixelsize(LibMCDriver_Rasterizer_Rasterizer pRasterizer, LibMCDriver_Rasterizer_uint32 * pPixelSizeX, LibMCDriver_Rasterizer_uint32 * pPixelSizeY);

/**
* Returns image position.
*
* @param[in] pRasterizer - Rasterizer instance.
* @param[out] pPositionX - Position in X in mm
* @param[out] pPositionY - Position in Y in mm
* @return error code or 0 (success)
*/
LIBMCDRIVER_RASTERIZER_DECLSPEC LibMCDriver_RasterizerResult libmcdriver_rasterizer_rasterizer_getposition(LibMCDriver_Rasterizer_Rasterizer pRasterizer, LibMCDriver_Rasterizer_double * pPositionX, LibMCDriver_Rasterizer_double * pPositionY);

/**
* Sets image position.
*
* @param[in] pRasterizer - Rasterizer instance.
* @param[in] dPositionX - Position in X in mm
* @param[in] dPositionY - Position in Y in mm
* @return error code or 0 (success)
*/
LIBMCDRIVER_RASTERIZER_DECLSPEC LibMCDriver_RasterizerResult libmcdriver_rasterizer_rasterizer_setposition(LibMCDriver_Rasterizer_Rasterizer pRasterizer, LibMCDriver_Rasterizer_double dPositionX, LibMCDriver_Rasterizer_double dPositionY);

/**
* Set subsampling values in X and Y.
*
* @param[in] pRasterizer - Rasterizer instance.
* @param[in] nSubsamplingX - Subsampling in X
* @param[in] nSubsamplingY - Subsampling in Y
* @return error code or 0 (success)
*/
LIBMCDRIVER_RASTERIZER_DECLSPEC LibMCDriver_RasterizerResult libmcdriver_rasterizer_rasterizer_setsubsampling(LibMCDriver_Rasterizer_Rasterizer pRasterizer, LibMCDriver_Rasterizer_uint32 nSubsamplingX, LibMCDriver_Rasterizer_uint32 nSubsamplingY);

/**
* Returns subsampling values in X and Y.
*
* @param[in] pRasterizer - Rasterizer instance.
* @param[out] pSubsamplingX - Subsampling in X
* @param[out] pSubsamplingY - Subsampling in Y
* @return error code or 0 (success)
*/
LIBMCDRIVER_RASTERIZER_DECLSPEC LibMCDriver_RasterizerResult libmcdriver_rasterizer_rasterizer_getsubsampling(LibMCDriver_Rasterizer_Rasterizer pRasterizer, LibMCDriver_Rasterizer_uint32 * pSubsamplingX, LibMCDriver_Rasterizer_uint32 * pSubsamplingY);

/**
* Adds a layer object to subsample.
*
* @param[in] pRasterizer - Rasterizer instance.
* @param[in] pLayerObject - Layer object instance.
* @return error code or 0 (success)
*/
LIBMCDRIVER_RASTERIZER_DECLSPEC LibMCDriver_RasterizerResult libmcdriver_rasterizer_rasterizer_addlayer(LibMCDriver_Rasterizer_Rasterizer pRasterizer, LibMCDriver_Rasterizer_LayerObject pLayerObject);

/**
* Calculates the image.
*
* @param[in] pRasterizer - Rasterizer instance.
* @param[in] bAntialiased - Image output is greyscale if true, black and white with 0.5 threshold if false.
* @param[out] pImageObject - ImageObject Instance
* @return error code or 0 (success)
*/
LIBMCDRIVER_RASTERIZER_DECLSPEC LibMCDriver_RasterizerResult libmcdriver_rasterizer_rasterizer_calculateimage(LibMCDriver_Rasterizer_Rasterizer pRasterizer, bool bAntialiased, LibMCDriver_Rasterizer_ImageObject * pImageObject);

/*************************************************************************************************************************
 Class definition for SliceStack
**************************************************************************************************************************/

/**
* Returns layer count of slice stack.
*
* @param[in] pSliceStack - SliceStack instance.
* @param[out] pLayerCount - Returns number of layers
* @return error code or 0 (success)
*/
LIBMCDRIVER_RASTERIZER_DECLSPEC LibMCDriver_RasterizerResult libmcdriver_rasterizer_slicestack_getlayercount(LibMCDriver_Rasterizer_SliceStack pSliceStack, LibMCDriver_Rasterizer_uint32 * pLayerCount);

/**
* Returns layer thickness of slice stack.
*
* @param[in] pSliceStack - SliceStack instance.
* @param[out] pLayerThickness - Returns layer thickness in mm
* @return error code or 0 (success)
*/
LIBMCDRIVER_RASTERIZER_DECLSPEC LibMCDriver_RasterizerResult libmcdriver_rasterizer_slicestack_getlayerthickness(LibMCDriver_Rasterizer_SliceStack pSliceStack, LibMCDriver_Rasterizer_double * pLayerThickness);

/**
* Returns Z value of bottom of slice stack in mm.
*
* @param[in] pSliceStack - SliceStack instance.
* @param[out] pZValue - Z-Value of bottom of slice stack
* @return error code or 0 (success)
*/
LIBMCDRIVER_RASTERIZER_DECLSPEC LibMCDriver_RasterizerResult libmcdriver_rasterizer_slicestack_getbottomz(LibMCDriver_Rasterizer_SliceStack pSliceStack, LibMCDriver_Rasterizer_double * pZValue);

/**
* Returns Z value of top of slice stack in mm.
*
* @param[in] pSliceStack - SliceStack instance.
* @param[out] pZValue - Z-Value of top of slice stack
* @return error code or 0 (success)
*/
LIBMCDRIVER_RASTERIZER_DECLSPEC LibMCDriver_RasterizerResult libmcdriver_rasterizer_slicestack_gettopz(LibMCDriver_Rasterizer_SliceStack pSliceStack, LibMCDriver_Rasterizer_double * pZValue);

/**
* Returns layer object for a given Z Value.
*
* @param[in] pSliceStack - SliceStack instance.
* @param[in] nLayerIndex - Index of layer.
* @param[out] pLayerObject - LayerObject Instance
* @return error code or 0 (success)
*/
LIBMCDRIVER_RASTERIZER_DECLSPEC LibMCDriver_RasterizerResult libmcdriver_rasterizer_slicestack_getlayer(LibMCDriver_Rasterizer_SliceStack pSliceStack, LibMCDriver_Rasterizer_uint32 nLayerIndex, LibMCDriver_Rasterizer_LayerObject * pLayerObject);

/*************************************************************************************************************************
 Class definition for Driver_Rasterizer
**************************************************************************************************************************/

/**
* creates an empty slice stack.
*
* @param[in] pDriver_Rasterizer - Driver_Rasterizer instance.
* @param[in] nLayerCount - Number of layers. MUST be positive.
* @param[in] dLayerThickness - Layerthickness in mm. MUST be positive.
* @param[in] dBottomZ - Bottom Z value in mm.
* @param[out] pSliceStackInstance - Instance of Slice Stack
* @return error code or 0 (success)
*/
LIBMCDRIVER_RASTERIZER_DECLSPEC LibMCDriver_RasterizerResult libmcdriver_rasterizer_driver_rasterizer_createslicestack(LibMCDriver_Rasterizer_Driver_Rasterizer pDriver_Rasterizer, LibMCDriver_Rasterizer_uint32 nLayerCount, LibMCDriver_Rasterizer_double dLayerThickness, LibMCDriver_Rasterizer_double dBottomZ, LibMCDriver_Rasterizer_SliceStack * pSliceStackInstance);

/**
* creates an empty layer object.
*
* @param[in] pDriver_Rasterizer - Driver_Rasterizer instance.
* @param[out] pLayerObject - Instance of a Layer Object
* @return error code or 0 (success)
*/
LIBMCDRIVER_RASTERIZER_DECLSPEC LibMCDriver_RasterizerResult libmcdriver_rasterizer_driver_rasterizer_createemptylayer(LibMCDriver_Rasterizer_Driver_Rasterizer pDriver_Rasterizer, LibMCDriver_Rasterizer_LayerObject * pLayerObject);

/**
* creates a new rasterization instance.
*
* @param[in] pDriver_Rasterizer - Driver_Rasterizer instance.
* @param[in] pIdentifier - Identifier object. MUST be unique.
* @param[in] nPixelSizeX - Pixel size in X. MUST be positive.
* @param[in] nPixelSizeY - Pixel size in Y. MUST be positive.
* @param[in] dDPIX - DPI in X. MUST be positive.
* @param[in] dDPIY - DPI in Y. MUST be positive.
* @param[out] pRasterizerInstance - Instance of Rasterizer
* @return error code or 0 (success)
*/
LIBMCDRIVER_RASTERIZER_DECLSPEC LibMCDriver_RasterizerResult libmcdriver_rasterizer_driver_rasterizer_registerinstance(LibMCDriver_Rasterizer_Driver_Rasterizer pDriver_Rasterizer, const char * pIdentifier, LibMCDriver_Rasterizer_uint32 nPixelSizeX, LibMCDriver_Rasterizer_uint32 nPixelSizeY, LibMCDriver_Rasterizer_double dDPIX, LibMCDriver_Rasterizer_double dDPIY, LibMCDriver_Rasterizer_Rasterizer * pRasterizerInstance);

/**
* destroys a rasterization instance. Instance MUST exist.
*
* @param[in] pDriver_Rasterizer - Driver_Rasterizer instance.
* @param[in] pIdentifier - Identifier object. MUST be unique.
* @return error code or 0 (success)
*/
LIBMCDRIVER_RASTERIZER_DECLSPEC LibMCDriver_RasterizerResult libmcdriver_rasterizer_driver_rasterizer_unregisterinstance(LibMCDriver_Rasterizer_Driver_Rasterizer pDriver_Rasterizer, const char * pIdentifier);

/**
* Checks if a rasterization instance exists.
*
* @param[in] pDriver_Rasterizer - Driver_Rasterizer instance.
* @param[in] pIdentifier - Identifier object. MUST be unique.
* @param[out] pInstanceExists - Flag if instance exists.
* @return error code or 0 (success)
*/
LIBMCDRIVER_RASTERIZER_DECLSPEC LibMCDriver_RasterizerResult libmcdriver_rasterizer_driver_rasterizer_hasinstance(LibMCDriver_Rasterizer_Driver_Rasterizer pDriver_Rasterizer, const char * pIdentifier, bool * pInstanceExists);

/**
* retrieves an existing rasterization instance.
*
* @param[in] pDriver_Rasterizer - Driver_Rasterizer instance.
* @param[in] pIdentifier - Identifier object. MUST be unique.
* @param[out] pRasterizerInstance - Instance of Rasterizer
* @return error code or 0 (success)
*/
LIBMCDRIVER_RASTERIZER_DECLSPEC LibMCDriver_RasterizerResult libmcdriver_rasterizer_driver_rasterizer_getinstance(LibMCDriver_Rasterizer_Driver_Rasterizer pDriver_Rasterizer, const char * pIdentifier, LibMCDriver_Rasterizer_Rasterizer * pRasterizerInstance);

/*************************************************************************************************************************
 Global functions
**************************************************************************************************************************/

/**
* retrieves the binary version of this library.
*
* @param[out] pMajor - returns the major version of this library
* @param[out] pMinor - returns the minor version of this library
* @param[out] pMicro - returns the micro version of this library
* @return error code or 0 (success)
*/
LIBMCDRIVER_RASTERIZER_DECLSPEC LibMCDriver_RasterizerResult libmcdriver_rasterizer_getversion(LibMCDriver_Rasterizer_uint32 * pMajor, LibMCDriver_Rasterizer_uint32 * pMinor, LibMCDriver_Rasterizer_uint32 * pMicro);

/**
* Returns the last error recorded on this object
*
* @param[in] pInstance - Instance Handle
* @param[in] nErrorMessageBufferSize - size of the buffer (including trailing 0)
* @param[out] pErrorMessageNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pErrorMessageBuffer -  buffer of Message of the last error, may be NULL
* @param[out] pHasError - Is there a last error to query
* @return error code or 0 (success)
*/
LIBMCDRIVER_RASTERIZER_DECLSPEC LibMCDriver_RasterizerResult libmcdriver_rasterizer_getlasterror(LibMCDriver_Rasterizer_Base pInstance, const LibMCDriver_Rasterizer_uint32 nErrorMessageBufferSize, LibMCDriver_Rasterizer_uint32* pErrorMessageNeededChars, char * pErrorMessageBuffer, bool * pHasError);

/**
* Releases shared ownership of an Instance
*
* @param[in] pInstance - Instance Handle
* @return error code or 0 (success)
*/
LIBMCDRIVER_RASTERIZER_DECLSPEC LibMCDriver_RasterizerResult libmcdriver_rasterizer_releaseinstance(LibMCDriver_Rasterizer_Base pInstance);

/**
* Acquires shared ownership of an Instance
*
* @param[in] pInstance - Instance Handle
* @return error code or 0 (success)
*/
LIBMCDRIVER_RASTERIZER_DECLSPEC LibMCDriver_RasterizerResult libmcdriver_rasterizer_acquireinstance(LibMCDriver_Rasterizer_Base pInstance);

/**
* Injects an imported component for usage within this component
*
* @param[in] pNameSpace - NameSpace of the injected component
* @param[in] pSymbolAddressMethod - Address of the SymbolAddressMethod of the injected component
* @return error code or 0 (success)
*/
LIBMCDRIVER_RASTERIZER_DECLSPEC LibMCDriver_RasterizerResult libmcdriver_rasterizer_injectcomponent(const char * pNameSpace, LibMCDriver_Rasterizer_pvoid pSymbolAddressMethod);

/**
* Returns the address of the SymbolLookupMethod
*
* @param[out] pSymbolLookupMethod - Address of the SymbolAddressMethod
* @return error code or 0 (success)
*/
LIBMCDRIVER_RASTERIZER_DECLSPEC LibMCDriver_RasterizerResult libmcdriver_rasterizer_getsymbollookupmethod(LibMCDriver_Rasterizer_pvoid * pSymbolLookupMethod);

/**
* Creates a driver instance with a specific name.
*
* @param[in] pName - Name of driver to be created.
* @param[in] pType - Type of driver to be created.
* @param[in] pDriverEnvironment - Environment of this driver.
* @param[out] pInstance - New Driver instance
* @return error code or 0 (success)
*/
LIBMCDRIVER_RASTERIZER_DECLSPEC LibMCDriver_RasterizerResult libmcdriver_rasterizer_createdriver(const char * pName, const char * pType, LibMCEnv_DriverEnvironment pDriverEnvironment, LibMCDriver_Rasterizer_Driver * pInstance);

#ifdef __cplusplus
}
#endif

#endif // __LIBMCDRIVER_RASTERIZER_HEADER_CPP

