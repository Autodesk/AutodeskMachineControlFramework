/*++

Copyright (C) 2022 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.7.0-develop.

Abstract: This is an autogenerated C++-Header file with basic types in
order to allow an easy use of Generic Rasterizer Driver

Interface version: 1.0.0

*/

#ifndef __LIBMCDRIVER_RASTERIZER_TYPES_HEADER_CPP
#define __LIBMCDRIVER_RASTERIZER_TYPES_HEADER_CPP


/*************************************************************************************************************************
 Scalar types definition
**************************************************************************************************************************/

#ifdef LIBMCDRIVER_RASTERIZER_USELEGACYINTEGERTYPES

typedef unsigned char LibMCDriver_Rasterizer_uint8;
typedef unsigned short LibMCDriver_Rasterizer_uint16 ;
typedef unsigned int LibMCDriver_Rasterizer_uint32;
typedef unsigned long long LibMCDriver_Rasterizer_uint64;
typedef char LibMCDriver_Rasterizer_int8;
typedef short LibMCDriver_Rasterizer_int16;
typedef int LibMCDriver_Rasterizer_int32;
typedef long long LibMCDriver_Rasterizer_int64;

#else // LIBMCDRIVER_RASTERIZER_USELEGACYINTEGERTYPES

#include <stdint.h>

typedef uint8_t LibMCDriver_Rasterizer_uint8;
typedef uint16_t LibMCDriver_Rasterizer_uint16;
typedef uint32_t LibMCDriver_Rasterizer_uint32;
typedef uint64_t LibMCDriver_Rasterizer_uint64;
typedef int8_t LibMCDriver_Rasterizer_int8;
typedef int16_t LibMCDriver_Rasterizer_int16;
typedef int32_t LibMCDriver_Rasterizer_int32;
typedef int64_t LibMCDriver_Rasterizer_int64 ;

#endif // LIBMCDRIVER_RASTERIZER_USELEGACYINTEGERTYPES

typedef float LibMCDriver_Rasterizer_single;
typedef double LibMCDriver_Rasterizer_double;

/*************************************************************************************************************************
 General type definitions
**************************************************************************************************************************/

typedef LibMCDriver_Rasterizer_int32 LibMCDriver_RasterizerResult;
typedef void * LibMCDriver_RasterizerHandle;
typedef void * LibMCDriver_Rasterizer_pvoid;

/*************************************************************************************************************************
 Version for LibMCDriver_Rasterizer
**************************************************************************************************************************/

#define LIBMCDRIVER_RASTERIZER_VERSION_MAJOR 1
#define LIBMCDRIVER_RASTERIZER_VERSION_MINOR 0
#define LIBMCDRIVER_RASTERIZER_VERSION_MICRO 0
#define LIBMCDRIVER_RASTERIZER_VERSION_PRERELEASEINFO ""
#define LIBMCDRIVER_RASTERIZER_VERSION_BUILDINFO ""

/*************************************************************************************************************************
 Error constants for LibMCDriver_Rasterizer
**************************************************************************************************************************/

#define LIBMCDRIVER_RASTERIZER_SUCCESS 0
#define LIBMCDRIVER_RASTERIZER_ERROR_NOTIMPLEMENTED 1
#define LIBMCDRIVER_RASTERIZER_ERROR_INVALIDPARAM 2
#define LIBMCDRIVER_RASTERIZER_ERROR_INVALIDCAST 3
#define LIBMCDRIVER_RASTERIZER_ERROR_BUFFERTOOSMALL 4
#define LIBMCDRIVER_RASTERIZER_ERROR_GENERICEXCEPTION 5
#define LIBMCDRIVER_RASTERIZER_ERROR_COULDNOTLOADLIBRARY 6
#define LIBMCDRIVER_RASTERIZER_ERROR_COULDNOTFINDLIBRARYEXPORT 7
#define LIBMCDRIVER_RASTERIZER_ERROR_INCOMPATIBLEBINARYVERSION 8
#define LIBMCDRIVER_RASTERIZER_ERROR_INVALIDSUBSAMPLING 9
#define LIBMCDRIVER_RASTERIZER_ERROR_COULDNOTCOMPRESSPNGIMAGE 10
#define LIBMCDRIVER_RASTERIZER_ERROR_EMPTYPNGIMAGEDATA 11
#define LIBMCDRIVER_RASTERIZER_ERROR_COULDNOTSTOREPNGIMAGE 12
#define LIBMCDRIVER_RASTERIZER_ERROR_INVALIDXCOORDINATE 13
#define LIBMCDRIVER_RASTERIZER_ERROR_INVALIDYCOORDINATE 14
#define LIBMCDRIVER_RASTERIZER_ERROR_INVALIDXCOORDINATERANGE 15
#define LIBMCDRIVER_RASTERIZER_ERROR_INVALIDYCOORDINATERANGE 16
#define LIBMCDRIVER_RASTERIZER_ERROR_INVALIDPIXELDATACOUNT 17
#define LIBMCDRIVER_RASTERIZER_ERROR_INVALIDLAYERCOUNT 18
#define LIBMCDRIVER_RASTERIZER_ERROR_INVALIDLAYERTHICKNESS 19
#define LIBMCDRIVER_RASTERIZER_ERROR_INVALIDPIXELCOUNT 20
#define LIBMCDRIVER_RASTERIZER_ERROR_INVALIDDPIVALUE 21
#define LIBMCDRIVER_RASTERIZER_ERROR_DRIVERERROR 22
#define LIBMCDRIVER_RASTERIZER_ERROR_INVALIDIDENTIFIER 23
#define LIBMCDRIVER_RASTERIZER_ERROR_IDENTIFIERNOTREGISTERED 24
#define LIBMCDRIVER_RASTERIZER_ERROR_IDENTIFIERALREADYREGISTERED 25
#define LIBMCDRIVER_RASTERIZER_ERROR_PIXELFORMATSHOULDBEGREYSCALE 26
#define LIBMCDRIVER_RASTERIZER_ERROR_PIXELSIZEMISMATCH 27

/*************************************************************************************************************************
 Error strings for LibMCDriver_Rasterizer
**************************************************************************************************************************/

inline const char * LIBMCDRIVER_RASTERIZER_GETERRORSTRING (LibMCDriver_RasterizerResult nErrorCode) {
  switch (nErrorCode) {
    case LIBMCDRIVER_RASTERIZER_SUCCESS: return "no error";
    case LIBMCDRIVER_RASTERIZER_ERROR_NOTIMPLEMENTED: return "functionality not implemented";
    case LIBMCDRIVER_RASTERIZER_ERROR_INVALIDPARAM: return "an invalid parameter was passed";
    case LIBMCDRIVER_RASTERIZER_ERROR_INVALIDCAST: return "a type cast failed";
    case LIBMCDRIVER_RASTERIZER_ERROR_BUFFERTOOSMALL: return "a provided buffer is too small";
    case LIBMCDRIVER_RASTERIZER_ERROR_GENERICEXCEPTION: return "a generic exception occurred";
    case LIBMCDRIVER_RASTERIZER_ERROR_COULDNOTLOADLIBRARY: return "the library could not be loaded";
    case LIBMCDRIVER_RASTERIZER_ERROR_COULDNOTFINDLIBRARYEXPORT: return "a required exported symbol could not be found in the library";
    case LIBMCDRIVER_RASTERIZER_ERROR_INCOMPATIBLEBINARYVERSION: return "the version of the binary interface does not match the bindings interface";
    case LIBMCDRIVER_RASTERIZER_ERROR_INVALIDSUBSAMPLING: return "invalid subsampling";
    case LIBMCDRIVER_RASTERIZER_ERROR_COULDNOTCOMPRESSPNGIMAGE: return "could not compress png image";
    case LIBMCDRIVER_RASTERIZER_ERROR_EMPTYPNGIMAGEDATA: return "empty png image data";
    case LIBMCDRIVER_RASTERIZER_ERROR_COULDNOTSTOREPNGIMAGE: return "could not store png image";
    case LIBMCDRIVER_RASTERIZER_ERROR_INVALIDXCOORDINATE: return "invalid x coordinate";
    case LIBMCDRIVER_RASTERIZER_ERROR_INVALIDYCOORDINATE: return "invalid y coordinate";
    case LIBMCDRIVER_RASTERIZER_ERROR_INVALIDXCOORDINATERANGE: return "invalid x coordinate range";
    case LIBMCDRIVER_RASTERIZER_ERROR_INVALIDYCOORDINATERANGE: return "invalid y coordinate range";
    case LIBMCDRIVER_RASTERIZER_ERROR_INVALIDPIXELDATACOUNT: return "invalid pixel data count";
    case LIBMCDRIVER_RASTERIZER_ERROR_INVALIDLAYERCOUNT: return "invalid layer count";
    case LIBMCDRIVER_RASTERIZER_ERROR_INVALIDLAYERTHICKNESS: return "invalid layer thickness";
    case LIBMCDRIVER_RASTERIZER_ERROR_INVALIDPIXELCOUNT: return "invalid pixel count";
    case LIBMCDRIVER_RASTERIZER_ERROR_INVALIDDPIVALUE: return "invalid dpi value";
    case LIBMCDRIVER_RASTERIZER_ERROR_DRIVERERROR: return "driver error";
    case LIBMCDRIVER_RASTERIZER_ERROR_INVALIDIDENTIFIER: return "invalid identifier string";
    case LIBMCDRIVER_RASTERIZER_ERROR_IDENTIFIERNOTREGISTERED: return "identifier not registered";
    case LIBMCDRIVER_RASTERIZER_ERROR_IDENTIFIERALREADYREGISTERED: return "identifier already registered";
    case LIBMCDRIVER_RASTERIZER_ERROR_PIXELFORMATSHOULDBEGREYSCALE: return "pixel format should be greyscale";
    case LIBMCDRIVER_RASTERIZER_ERROR_PIXELSIZEMISMATCH: return "pixel size mismatch";
    default: return "unknown error";
  }
}

/*************************************************************************************************************************
 Declaration of handle classes 
**************************************************************************************************************************/

typedef LibMCDriver_RasterizerHandle LibMCDriver_Rasterizer_Base;
typedef LibMCDriver_RasterizerHandle LibMCDriver_Rasterizer_Driver;
typedef LibMCDriver_RasterizerHandle LibMCDriver_Rasterizer_LayerObject;
typedef LibMCDriver_RasterizerHandle LibMCDriver_Rasterizer_Rasterizer;
typedef LibMCDriver_RasterizerHandle LibMCDriver_Rasterizer_SliceStack;
typedef LibMCDriver_RasterizerHandle LibMCDriver_Rasterizer_Driver_Rasterizer;

namespace LibMCDriver_Rasterizer {

  /*************************************************************************************************************************
   Declaration of enums
  **************************************************************************************************************************/
  
  enum class eGeometryType : LibMCDriver_Rasterizer_int32 {
    Unknown = 0,
    SolidGeometry = 1,
    OpenPolyline = 2,
    OpenHatches = 3
  };
  
  /*************************************************************************************************************************
   Declaration of structs
  **************************************************************************************************************************/
  
  #pragma pack (1)
  
  typedef struct {
      LibMCDriver_Rasterizer_double m_Coordinates[2];
  } sPosition2D;
  
  #pragma pack ()
  
  /*************************************************************************************************************************
   Declaration of function pointers 
  **************************************************************************************************************************/
  
  /**
  * DistortionCallback - A callback function for distorting a layer
  *
  * @param[in] dOrigX - Original X Value
  * @param[in] dOrigY - Original Y Value
  * @param[out] pNewX - Distorted X Value
  * @param[out] pNewY - Distorted Y Value
  * @param[in] pUserData - User Data
  */
  typedef void(*DistortionCallback)(LibMCDriver_Rasterizer_double, LibMCDriver_Rasterizer_double, LibMCDriver_Rasterizer_double *, LibMCDriver_Rasterizer_double *, LibMCDriver_Rasterizer_pvoid);
  
} // namespace LibMCDriver_Rasterizer;

// define legacy C-names for enums, structs and function types
typedef LibMCDriver_Rasterizer::eGeometryType eLibMCDriver_RasterizerGeometryType;
typedef LibMCDriver_Rasterizer::sPosition2D sLibMCDriver_RasterizerPosition2D;
typedef LibMCDriver_Rasterizer::DistortionCallback LibMCDriver_RasterizerDistortionCallback;

#endif // __LIBMCDRIVER_RASTERIZER_TYPES_HEADER_CPP
