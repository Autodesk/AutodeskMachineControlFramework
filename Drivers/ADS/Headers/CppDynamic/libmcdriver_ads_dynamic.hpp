/*++

Copyright (C) 2020 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.7.0-develop.

Abstract: This is an autogenerated C++-Header file in order to allow an easy
 use of MC Driver ADS

Interface version: 1.0.0

*/

#ifndef __LIBMCDRIVER_ADS_CPPHEADER_DYNAMIC_CPP
#define __LIBMCDRIVER_ADS_CPPHEADER_DYNAMIC_CPP

#include "libmcdriver_ads_types.hpp"
#include "libmcdriver_ads_dynamic.h"

#include "libmcenv_dynamic.hpp"

#ifdef _WIN32
#include <windows.h>
#else // _WIN32
#include <dlfcn.h>
#endif // _WIN32
#include <string>
#include <memory>
#include <vector>
#include <exception>

namespace LibMCDriver_ADS {

/*************************************************************************************************************************
 Forward Declaration of all classes
**************************************************************************************************************************/
class CWrapper;
class CBase;
class CDriver;
class CPLCCommand;
class CPLCCommandList;
class CDriver_ADS;

/*************************************************************************************************************************
 Declaration of deprecated class types
**************************************************************************************************************************/
typedef CWrapper CLibMCDriver_ADSWrapper;
typedef CBase CLibMCDriver_ADSBase;
typedef CDriver CLibMCDriver_ADSDriver;
typedef CPLCCommand CLibMCDriver_ADSPLCCommand;
typedef CPLCCommandList CLibMCDriver_ADSPLCCommandList;
typedef CDriver_ADS CLibMCDriver_ADSDriver_ADS;

/*************************************************************************************************************************
 Declaration of shared pointer types
**************************************************************************************************************************/
typedef std::shared_ptr<CWrapper> PWrapper;
typedef std::shared_ptr<CBase> PBase;
typedef std::shared_ptr<CDriver> PDriver;
typedef std::shared_ptr<CPLCCommand> PPLCCommand;
typedef std::shared_ptr<CPLCCommandList> PPLCCommandList;
typedef std::shared_ptr<CDriver_ADS> PDriver_ADS;

/*************************************************************************************************************************
 Declaration of deprecated shared pointer types
**************************************************************************************************************************/
typedef PWrapper PLibMCDriver_ADSWrapper;
typedef PBase PLibMCDriver_ADSBase;
typedef PDriver PLibMCDriver_ADSDriver;
typedef PPLCCommand PLibMCDriver_ADSPLCCommand;
typedef PPLCCommandList PLibMCDriver_ADSPLCCommandList;
typedef PDriver_ADS PLibMCDriver_ADSDriver_ADS;


/*************************************************************************************************************************
 classParam Definition
**************************************************************************************************************************/

template<class T> class classParam {
private:
	const T* m_ptr;

public:
	classParam(const T* ptr)
		: m_ptr (ptr)
	{
	}

	classParam(std::shared_ptr <T> sharedPtr)
		: m_ptr (sharedPtr.get())
	{
	}

	LibMCDriver_ADSHandle GetHandle()
	{
		if (m_ptr != nullptr)
			return m_ptr->handle();
		return nullptr;
	}
};

/*************************************************************************************************************************
 Class ELibMCDriver_ADSException 
**************************************************************************************************************************/
class ELibMCDriver_ADSException : public std::exception {
protected:
	/**
	* Error code for the Exception.
	*/
	LibMCDriver_ADSResult m_errorCode;
	/**
	* Error message for the Exception.
	*/
	std::string m_errorMessage;

public:
	/**
	* Exception Constructor.
	*/
	ELibMCDriver_ADSException(LibMCDriver_ADSResult errorCode, const std::string & sErrorMessage)
		: m_errorMessage("LibMCDriver_ADS Error " + std::to_string(errorCode) + " (" + sErrorMessage + ")")
	{
		m_errorCode = errorCode;
	}

	/**
	* Returns error code
	*/
	LibMCDriver_ADSResult getErrorCode() const noexcept
	{
		return m_errorCode;
	}

	/**
	* Returns error message
	*/
	const char* what() const noexcept
	{
		return m_errorMessage.c_str();
	}

};

/*************************************************************************************************************************
 Class CInputVector
**************************************************************************************************************************/
template <typename T>
class CInputVector {
private:
	
	const T* m_data;
	size_t m_size;
	
public:
	
	CInputVector( const std::vector<T>& vec)
		: m_data( vec.data() ), m_size( vec.size() )
	{
	}
	
	CInputVector( const T* in_data, size_t in_size)
		: m_data( in_data ), m_size(in_size )
	{
	}
	
	const T* data() const
	{
		return m_data;
	}
	
	size_t size() const
	{
		return m_size;
	}
	
};

// declare deprecated class name
template<typename T>
using CLibMCDriver_ADSInputVector = CInputVector<T>;

/*************************************************************************************************************************
 Class CWrapper 
**************************************************************************************************************************/
class CWrapper {
public:
	
	CWrapper(void* pSymbolLookupMethod)
	{
		CheckError(nullptr, initWrapperTable(&m_WrapperTable));
		CheckError(nullptr, loadWrapperTableFromSymbolLookupMethod(&m_WrapperTable, pSymbolLookupMethod));
		
		CheckError(nullptr, checkBinaryVersion());
	}
	
	CWrapper(const std::string &sFileName)
	{
		CheckError(nullptr, initWrapperTable(&m_WrapperTable));
		CheckError(nullptr, loadWrapperTable(&m_WrapperTable, sFileName.c_str()));
		
		CheckError(nullptr, checkBinaryVersion());
	}
	
	static PWrapper loadLibrary(const std::string &sFileName)
	{
		return std::make_shared<CWrapper>(sFileName);
	}
	
	static PWrapper loadLibraryFromSymbolLookupMethod(void* pSymbolLookupMethod)
	{
		return std::make_shared<CWrapper>(pSymbolLookupMethod);
	}
	
	~CWrapper()
	{
		releaseWrapperTable(&m_WrapperTable);
	}
	
	inline void CheckError(CBase * pBaseClass, LibMCDriver_ADSResult nResult);

	inline void GetVersion(LibMCDriver_ADS_uint32 & nMajor, LibMCDriver_ADS_uint32 & nMinor, LibMCDriver_ADS_uint32 & nMicro);
	inline bool GetLastError(classParam<CBase> pInstance, std::string & sErrorMessage);
	inline void ReleaseInstance(classParam<CBase> pInstance);
	inline void AcquireInstance(classParam<CBase> pInstance);
	inline void InjectComponent(const std::string & sNameSpace, const LibMCDriver_ADS_pvoid pSymbolAddressMethod);
	inline LibMCDriver_ADS_pvoid GetSymbolLookupMethod();
	inline PDriver CreateDriver(const std::string & sName, const std::string & sType, classParam<LibMCEnv::CDriverEnvironment> pDriverEnvironment);

private:
	sLibMCDriver_ADSDynamicWrapperTable m_WrapperTable;
	// Injected Components
	LibMCEnv::PWrapper m_pLibMCEnvWrapper;

	
	LibMCDriver_ADSResult checkBinaryVersion()
	{
		LibMCDriver_ADS_uint32 nMajor, nMinor, nMicro;
		GetVersion(nMajor, nMinor, nMicro);
		if ( (nMajor != LIBMCDRIVER_ADS_VERSION_MAJOR) || (nMinor < LIBMCDRIVER_ADS_VERSION_MINOR) ) {
			return LIBMCDRIVER_ADS_ERROR_INCOMPATIBLEBINARYVERSION;
		}
		return LIBMCDRIVER_ADS_SUCCESS;
	}
	LibMCDriver_ADSResult initWrapperTable(sLibMCDriver_ADSDynamicWrapperTable * pWrapperTable);
	LibMCDriver_ADSResult releaseWrapperTable(sLibMCDriver_ADSDynamicWrapperTable * pWrapperTable);
	LibMCDriver_ADSResult loadWrapperTable(sLibMCDriver_ADSDynamicWrapperTable * pWrapperTable, const char * pLibraryFileName);
	LibMCDriver_ADSResult loadWrapperTableFromSymbolLookupMethod(sLibMCDriver_ADSDynamicWrapperTable * pWrapperTable, void* pSymbolLookupMethod);

	friend class CBase;
	friend class CDriver;
	friend class CPLCCommand;
	friend class CPLCCommandList;
	friend class CDriver_ADS;

};

	
/*************************************************************************************************************************
 Class CBase 
**************************************************************************************************************************/
class CBase {
public:
	
protected:
	/* Wrapper Object that created the class. */
	CWrapper * m_pWrapper;
	/* Handle to Instance in library*/
	LibMCDriver_ADSHandle m_pHandle;

	/* Checks for an Error code and raises Exceptions */
	void CheckError(LibMCDriver_ADSResult nResult)
	{
		if (m_pWrapper != nullptr)
			m_pWrapper->CheckError(this, nResult);
	}
public:
	/**
	* CBase::CBase - Constructor for Base class.
	*/
	CBase(CWrapper * pWrapper, LibMCDriver_ADSHandle pHandle)
		: m_pWrapper(pWrapper), m_pHandle(pHandle)
	{
	}

	/**
	* CBase::~CBase - Destructor for Base class.
	*/
	virtual ~CBase()
	{
		if (m_pWrapper != nullptr)
			m_pWrapper->ReleaseInstance(this);
		m_pWrapper = nullptr;
	}

	/**
	* CBase::handle - Returns handle to instance.
	*/
	LibMCDriver_ADSHandle handle() const
	{
		return m_pHandle;
	}

	/**
	* CBase::wrapper - Returns wrapper instance.
	*/
	CWrapper * wrapper() const
	{
		return m_pWrapper;
	}
	
	friend class CWrapper;
};
	
/*************************************************************************************************************************
 Class CDriver 
**************************************************************************************************************************/
class CDriver : public CBase {
public:
	
	/**
	* CDriver::CDriver - Constructor for Driver class.
	*/
	CDriver(CWrapper* pWrapper, LibMCDriver_ADSHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline void Configure(const std::string & sConfigurationString);
	inline std::string GetName();
	inline std::string GetType();
	inline void GetVersion(LibMCDriver_ADS_uint32 & nMajor, LibMCDriver_ADS_uint32 & nMinor, LibMCDriver_ADS_uint32 & nMicro, std::string & sBuild);
	inline void GetHeaderInformation(std::string & sNameSpace, std::string & sBaseName);
	inline void QueryParameters();
};
	
/*************************************************************************************************************************
 Class CPLCCommand 
**************************************************************************************************************************/
class CPLCCommand : public CBase {
public:
	
	/**
	* CPLCCommand::CPLCCommand - Constructor for PLCCommand class.
	*/
	CPLCCommand(CWrapper* pWrapper, LibMCDriver_ADSHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline void SetIntegerParameter(const std::string & sParameterName, const LibMCDriver_ADS_int64 nValue);
	inline void SetBoolParameter(const std::string & sParameterName, const bool bValue);
	inline void SetDoubleParameter(const std::string & sParameterName, const LibMCDriver_ADS_double dValue);
};
	
/*************************************************************************************************************************
 Class CPLCCommandList 
**************************************************************************************************************************/
class CPLCCommandList : public CBase {
public:
	
	/**
	* CPLCCommandList::CPLCCommandList - Constructor for PLCCommandList class.
	*/
	CPLCCommandList(CWrapper* pWrapper, LibMCDriver_ADSHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline void AddCommand(classParam<CPLCCommand> pCommandInstance);
	inline void FinishList();
	inline void ExecuteList();
	inline bool WaitForList(const LibMCDriver_ADS_uint32 nReactionTimeInMS, const LibMCDriver_ADS_uint32 nWaitForTimeInMS);
	inline void PauseList();
	inline void ResumeList();
};
	
/*************************************************************************************************************************
 Class CDriver_ADS 
**************************************************************************************************************************/
class CDriver_ADS : public CDriver {
public:
	
	/**
	* CDriver_ADS::CDriver_ADS - Constructor for Driver_ADS class.
	*/
	CDriver_ADS(CWrapper* pWrapper, LibMCDriver_ADSHandle pHandle)
		: CDriver(pWrapper, pHandle)
	{
	}
	
	inline void SetToSimulationMode();
	inline bool IsSimulationMode();
	inline void Connect(const std::string & sIPAddress, const LibMCDriver_ADS_uint32 nPort, const LibMCDriver_ADS_uint32 nTimeout);
	inline void Disconnect();
	inline PPLCCommandList CreateCommandList();
	inline PPLCCommand CreateCommand(const std::string & sCommandName);
	inline void StartJournaling();
	inline void StopJournaling();
	inline void RefreshJournal();
};
	
	/**
	* CWrapper::GetVersion - retrieves the binary version of this library.
	* @param[out] nMajor - returns the major version of this library
	* @param[out] nMinor - returns the minor version of this library
	* @param[out] nMicro - returns the micro version of this library
	*/
	inline void CWrapper::GetVersion(LibMCDriver_ADS_uint32 & nMajor, LibMCDriver_ADS_uint32 & nMinor, LibMCDriver_ADS_uint32 & nMicro)
	{
		CheckError(nullptr,m_WrapperTable.m_GetVersion(&nMajor, &nMinor, &nMicro));
	}
	
	/**
	* CWrapper::GetLastError - Returns the last error recorded on this object
	* @param[in] pInstance - Instance Handle
	* @param[out] sErrorMessage - Message of the last error
	* @return Is there a last error to query
	*/
	inline bool CWrapper::GetLastError(classParam<CBase> pInstance, std::string & sErrorMessage)
	{
		LibMCDriver_ADSHandle hInstance = pInstance.GetHandle();
		LibMCDriver_ADS_uint32 bytesNeededErrorMessage = 0;
		LibMCDriver_ADS_uint32 bytesWrittenErrorMessage = 0;
		bool resultHasError = 0;
		CheckError(nullptr,m_WrapperTable.m_GetLastError(hInstance, 0, &bytesNeededErrorMessage, nullptr, &resultHasError));
		std::vector<char> bufferErrorMessage(bytesNeededErrorMessage);
		CheckError(nullptr,m_WrapperTable.m_GetLastError(hInstance, bytesNeededErrorMessage, &bytesWrittenErrorMessage, &bufferErrorMessage[0], &resultHasError));
		sErrorMessage = std::string(&bufferErrorMessage[0]);
		
		return resultHasError;
	}
	
	/**
	* CWrapper::ReleaseInstance - Releases shared ownership of an Instance
	* @param[in] pInstance - Instance Handle
	*/
	inline void CWrapper::ReleaseInstance(classParam<CBase> pInstance)
	{
		LibMCDriver_ADSHandle hInstance = pInstance.GetHandle();
		CheckError(nullptr,m_WrapperTable.m_ReleaseInstance(hInstance));
	}
	
	/**
	* CWrapper::AcquireInstance - Acquires shared ownership of an Instance
	* @param[in] pInstance - Instance Handle
	*/
	inline void CWrapper::AcquireInstance(classParam<CBase> pInstance)
	{
		LibMCDriver_ADSHandle hInstance = pInstance.GetHandle();
		CheckError(nullptr,m_WrapperTable.m_AcquireInstance(hInstance));
	}
	
	/**
	* CWrapper::InjectComponent - Injects an imported component for usage within this component
	* @param[in] sNameSpace - NameSpace of the injected component
	* @param[in] pSymbolAddressMethod - Address of the SymbolAddressMethod of the injected component
	*/
	inline void CWrapper::InjectComponent(const std::string & sNameSpace, const LibMCDriver_ADS_pvoid pSymbolAddressMethod)
	{
		CheckError(nullptr,m_WrapperTable.m_InjectComponent(sNameSpace.c_str(), pSymbolAddressMethod));
		
		bool bNameSpaceFound = false;
		if (sNameSpace == "LibMCEnv") {
			if (m_pLibMCEnvWrapper != nullptr) {
				throw ELibMCDriver_ADSException(LIBMCDRIVER_ADS_ERROR_COULDNOTLOADLIBRARY, "Library with namespace " + sNameSpace + " is already registered.");
			}
			m_pLibMCEnvWrapper = LibMCEnv::CWrapper::loadLibraryFromSymbolLookupMethod(pSymbolAddressMethod);
			bNameSpaceFound = true;
		}
		if (!bNameSpaceFound)
			throw ELibMCDriver_ADSException(LIBMCDRIVER_ADS_ERROR_COULDNOTLOADLIBRARY, "Unknown namespace " + sNameSpace);
	}
	
	/**
	* CWrapper::GetSymbolLookupMethod - Returns the address of the SymbolLookupMethod
	* @return Address of the SymbolAddressMethod
	*/
	inline LibMCDriver_ADS_pvoid CWrapper::GetSymbolLookupMethod()
	{
		LibMCDriver_ADS_pvoid resultSymbolLookupMethod = 0;
		CheckError(nullptr,m_WrapperTable.m_GetSymbolLookupMethod(&resultSymbolLookupMethod));
		
		return resultSymbolLookupMethod;
	}
	
	/**
	* CWrapper::CreateDriver - Creates a driver instance with a specific name.
	* @param[in] sName - Name of driver to be created.
	* @param[in] sType - Type of driver to be created.
	* @param[in] pDriverEnvironment - Environment of this driver.
	* @return New Driver instance
	*/
	inline PDriver CWrapper::CreateDriver(const std::string & sName, const std::string & sType, classParam<LibMCEnv::CDriverEnvironment> pDriverEnvironment)
	{
		LibMCEnvHandle hDriverEnvironment = pDriverEnvironment.GetHandle();
		LibMCDriver_ADSHandle hInstance = nullptr;
		CheckError(nullptr,m_WrapperTable.m_CreateDriver(sName.c_str(), sType.c_str(), hDriverEnvironment, &hInstance));
		
		if (!hInstance) {
			CheckError(nullptr,LIBMCDRIVER_ADS_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CDriver>(this, hInstance);
	}
	
	inline void CWrapper::CheckError(CBase * pBaseClass, LibMCDriver_ADSResult nResult)
	{
		if (nResult != 0) {
			std::string sErrorMessage;
			if (pBaseClass != nullptr) {
				GetLastError(pBaseClass, sErrorMessage);
			}
			throw ELibMCDriver_ADSException(nResult, sErrorMessage);
		}
	}
	

	inline LibMCDriver_ADSResult CWrapper::initWrapperTable(sLibMCDriver_ADSDynamicWrapperTable * pWrapperTable)
	{
		if (pWrapperTable == nullptr)
			return LIBMCDRIVER_ADS_ERROR_INVALIDPARAM;
		
		pWrapperTable->m_LibraryHandle = nullptr;
		pWrapperTable->m_Driver_Configure = nullptr;
		pWrapperTable->m_Driver_GetName = nullptr;
		pWrapperTable->m_Driver_GetType = nullptr;
		pWrapperTable->m_Driver_GetVersion = nullptr;
		pWrapperTable->m_Driver_GetHeaderInformation = nullptr;
		pWrapperTable->m_Driver_QueryParameters = nullptr;
		pWrapperTable->m_PLCCommand_SetIntegerParameter = nullptr;
		pWrapperTable->m_PLCCommand_SetBoolParameter = nullptr;
		pWrapperTable->m_PLCCommand_SetDoubleParameter = nullptr;
		pWrapperTable->m_PLCCommandList_AddCommand = nullptr;
		pWrapperTable->m_PLCCommandList_FinishList = nullptr;
		pWrapperTable->m_PLCCommandList_ExecuteList = nullptr;
		pWrapperTable->m_PLCCommandList_WaitForList = nullptr;
		pWrapperTable->m_PLCCommandList_PauseList = nullptr;
		pWrapperTable->m_PLCCommandList_ResumeList = nullptr;
		pWrapperTable->m_Driver_ADS_SetToSimulationMode = nullptr;
		pWrapperTable->m_Driver_ADS_IsSimulationMode = nullptr;
		pWrapperTable->m_Driver_ADS_Connect = nullptr;
		pWrapperTable->m_Driver_ADS_Disconnect = nullptr;
		pWrapperTable->m_Driver_ADS_CreateCommandList = nullptr;
		pWrapperTable->m_Driver_ADS_CreateCommand = nullptr;
		pWrapperTable->m_Driver_ADS_StartJournaling = nullptr;
		pWrapperTable->m_Driver_ADS_StopJournaling = nullptr;
		pWrapperTable->m_Driver_ADS_RefreshJournal = nullptr;
		pWrapperTable->m_GetVersion = nullptr;
		pWrapperTable->m_GetLastError = nullptr;
		pWrapperTable->m_ReleaseInstance = nullptr;
		pWrapperTable->m_AcquireInstance = nullptr;
		pWrapperTable->m_InjectComponent = nullptr;
		pWrapperTable->m_GetSymbolLookupMethod = nullptr;
		pWrapperTable->m_CreateDriver = nullptr;
		
		return LIBMCDRIVER_ADS_SUCCESS;
	}

	inline LibMCDriver_ADSResult CWrapper::releaseWrapperTable(sLibMCDriver_ADSDynamicWrapperTable * pWrapperTable)
	{
		if (pWrapperTable == nullptr)
			return LIBMCDRIVER_ADS_ERROR_INVALIDPARAM;
		
		if (pWrapperTable->m_LibraryHandle != nullptr) {
		#ifdef _WIN32
			HMODULE hModule = (HMODULE) pWrapperTable->m_LibraryHandle;
			FreeLibrary(hModule);
		#else // _WIN32
			dlclose(pWrapperTable->m_LibraryHandle);
		#endif // _WIN32
			return initWrapperTable(pWrapperTable);
		}
		
		return LIBMCDRIVER_ADS_SUCCESS;
	}

	inline LibMCDriver_ADSResult CWrapper::loadWrapperTable(sLibMCDriver_ADSDynamicWrapperTable * pWrapperTable, const char * pLibraryFileName)
	{
		if (pWrapperTable == nullptr)
			return LIBMCDRIVER_ADS_ERROR_INVALIDPARAM;
		if (pLibraryFileName == nullptr)
			return LIBMCDRIVER_ADS_ERROR_INVALIDPARAM;
		
		#ifdef _WIN32
		// Convert filename to UTF16-string
		int nLength = (int)strlen(pLibraryFileName);
		int nBufferSize = nLength * 2 + 2;
		std::vector<wchar_t> wsLibraryFileName(nBufferSize);
		int nResult = MultiByteToWideChar(CP_UTF8, 0, pLibraryFileName, nLength, &wsLibraryFileName[0], nBufferSize);
		if (nResult == 0)
			return LIBMCDRIVER_ADS_ERROR_COULDNOTLOADLIBRARY;
		
		HMODULE hLibrary = LoadLibraryW(wsLibraryFileName.data());
		if (hLibrary == 0) 
			return LIBMCDRIVER_ADS_ERROR_COULDNOTLOADLIBRARY;
		#else // _WIN32
		void* hLibrary = dlopen(pLibraryFileName, RTLD_LAZY);
		if (hLibrary == 0) 
			return LIBMCDRIVER_ADS_ERROR_COULDNOTLOADLIBRARY;
		dlerror();
		#endif // _WIN32
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_Configure = (PLibMCDriver_ADSDriver_ConfigurePtr) GetProcAddress(hLibrary, "libmcdriver_ads_driver_configure");
		#else // _WIN32
		pWrapperTable->m_Driver_Configure = (PLibMCDriver_ADSDriver_ConfigurePtr) dlsym(hLibrary, "libmcdriver_ads_driver_configure");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_Configure == nullptr)
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_GetName = (PLibMCDriver_ADSDriver_GetNamePtr) GetProcAddress(hLibrary, "libmcdriver_ads_driver_getname");
		#else // _WIN32
		pWrapperTable->m_Driver_GetName = (PLibMCDriver_ADSDriver_GetNamePtr) dlsym(hLibrary, "libmcdriver_ads_driver_getname");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_GetName == nullptr)
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_GetType = (PLibMCDriver_ADSDriver_GetTypePtr) GetProcAddress(hLibrary, "libmcdriver_ads_driver_gettype");
		#else // _WIN32
		pWrapperTable->m_Driver_GetType = (PLibMCDriver_ADSDriver_GetTypePtr) dlsym(hLibrary, "libmcdriver_ads_driver_gettype");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_GetType == nullptr)
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_GetVersion = (PLibMCDriver_ADSDriver_GetVersionPtr) GetProcAddress(hLibrary, "libmcdriver_ads_driver_getversion");
		#else // _WIN32
		pWrapperTable->m_Driver_GetVersion = (PLibMCDriver_ADSDriver_GetVersionPtr) dlsym(hLibrary, "libmcdriver_ads_driver_getversion");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_GetVersion == nullptr)
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_GetHeaderInformation = (PLibMCDriver_ADSDriver_GetHeaderInformationPtr) GetProcAddress(hLibrary, "libmcdriver_ads_driver_getheaderinformation");
		#else // _WIN32
		pWrapperTable->m_Driver_GetHeaderInformation = (PLibMCDriver_ADSDriver_GetHeaderInformationPtr) dlsym(hLibrary, "libmcdriver_ads_driver_getheaderinformation");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_GetHeaderInformation == nullptr)
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_QueryParameters = (PLibMCDriver_ADSDriver_QueryParametersPtr) GetProcAddress(hLibrary, "libmcdriver_ads_driver_queryparameters");
		#else // _WIN32
		pWrapperTable->m_Driver_QueryParameters = (PLibMCDriver_ADSDriver_QueryParametersPtr) dlsym(hLibrary, "libmcdriver_ads_driver_queryparameters");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_QueryParameters == nullptr)
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_PLCCommand_SetIntegerParameter = (PLibMCDriver_ADSPLCCommand_SetIntegerParameterPtr) GetProcAddress(hLibrary, "libmcdriver_ads_plccommand_setintegerparameter");
		#else // _WIN32
		pWrapperTable->m_PLCCommand_SetIntegerParameter = (PLibMCDriver_ADSPLCCommand_SetIntegerParameterPtr) dlsym(hLibrary, "libmcdriver_ads_plccommand_setintegerparameter");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_PLCCommand_SetIntegerParameter == nullptr)
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_PLCCommand_SetBoolParameter = (PLibMCDriver_ADSPLCCommand_SetBoolParameterPtr) GetProcAddress(hLibrary, "libmcdriver_ads_plccommand_setboolparameter");
		#else // _WIN32
		pWrapperTable->m_PLCCommand_SetBoolParameter = (PLibMCDriver_ADSPLCCommand_SetBoolParameterPtr) dlsym(hLibrary, "libmcdriver_ads_plccommand_setboolparameter");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_PLCCommand_SetBoolParameter == nullptr)
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_PLCCommand_SetDoubleParameter = (PLibMCDriver_ADSPLCCommand_SetDoubleParameterPtr) GetProcAddress(hLibrary, "libmcdriver_ads_plccommand_setdoubleparameter");
		#else // _WIN32
		pWrapperTable->m_PLCCommand_SetDoubleParameter = (PLibMCDriver_ADSPLCCommand_SetDoubleParameterPtr) dlsym(hLibrary, "libmcdriver_ads_plccommand_setdoubleparameter");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_PLCCommand_SetDoubleParameter == nullptr)
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_PLCCommandList_AddCommand = (PLibMCDriver_ADSPLCCommandList_AddCommandPtr) GetProcAddress(hLibrary, "libmcdriver_ads_plccommandlist_addcommand");
		#else // _WIN32
		pWrapperTable->m_PLCCommandList_AddCommand = (PLibMCDriver_ADSPLCCommandList_AddCommandPtr) dlsym(hLibrary, "libmcdriver_ads_plccommandlist_addcommand");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_PLCCommandList_AddCommand == nullptr)
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_PLCCommandList_FinishList = (PLibMCDriver_ADSPLCCommandList_FinishListPtr) GetProcAddress(hLibrary, "libmcdriver_ads_plccommandlist_finishlist");
		#else // _WIN32
		pWrapperTable->m_PLCCommandList_FinishList = (PLibMCDriver_ADSPLCCommandList_FinishListPtr) dlsym(hLibrary, "libmcdriver_ads_plccommandlist_finishlist");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_PLCCommandList_FinishList == nullptr)
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_PLCCommandList_ExecuteList = (PLibMCDriver_ADSPLCCommandList_ExecuteListPtr) GetProcAddress(hLibrary, "libmcdriver_ads_plccommandlist_executelist");
		#else // _WIN32
		pWrapperTable->m_PLCCommandList_ExecuteList = (PLibMCDriver_ADSPLCCommandList_ExecuteListPtr) dlsym(hLibrary, "libmcdriver_ads_plccommandlist_executelist");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_PLCCommandList_ExecuteList == nullptr)
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_PLCCommandList_WaitForList = (PLibMCDriver_ADSPLCCommandList_WaitForListPtr) GetProcAddress(hLibrary, "libmcdriver_ads_plccommandlist_waitforlist");
		#else // _WIN32
		pWrapperTable->m_PLCCommandList_WaitForList = (PLibMCDriver_ADSPLCCommandList_WaitForListPtr) dlsym(hLibrary, "libmcdriver_ads_plccommandlist_waitforlist");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_PLCCommandList_WaitForList == nullptr)
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_PLCCommandList_PauseList = (PLibMCDriver_ADSPLCCommandList_PauseListPtr) GetProcAddress(hLibrary, "libmcdriver_ads_plccommandlist_pauselist");
		#else // _WIN32
		pWrapperTable->m_PLCCommandList_PauseList = (PLibMCDriver_ADSPLCCommandList_PauseListPtr) dlsym(hLibrary, "libmcdriver_ads_plccommandlist_pauselist");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_PLCCommandList_PauseList == nullptr)
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_PLCCommandList_ResumeList = (PLibMCDriver_ADSPLCCommandList_ResumeListPtr) GetProcAddress(hLibrary, "libmcdriver_ads_plccommandlist_resumelist");
		#else // _WIN32
		pWrapperTable->m_PLCCommandList_ResumeList = (PLibMCDriver_ADSPLCCommandList_ResumeListPtr) dlsym(hLibrary, "libmcdriver_ads_plccommandlist_resumelist");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_PLCCommandList_ResumeList == nullptr)
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_ADS_SetToSimulationMode = (PLibMCDriver_ADSDriver_ADS_SetToSimulationModePtr) GetProcAddress(hLibrary, "libmcdriver_ads_driver_ads_settosimulationmode");
		#else // _WIN32
		pWrapperTable->m_Driver_ADS_SetToSimulationMode = (PLibMCDriver_ADSDriver_ADS_SetToSimulationModePtr) dlsym(hLibrary, "libmcdriver_ads_driver_ads_settosimulationmode");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_ADS_SetToSimulationMode == nullptr)
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_ADS_IsSimulationMode = (PLibMCDriver_ADSDriver_ADS_IsSimulationModePtr) GetProcAddress(hLibrary, "libmcdriver_ads_driver_ads_issimulationmode");
		#else // _WIN32
		pWrapperTable->m_Driver_ADS_IsSimulationMode = (PLibMCDriver_ADSDriver_ADS_IsSimulationModePtr) dlsym(hLibrary, "libmcdriver_ads_driver_ads_issimulationmode");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_ADS_IsSimulationMode == nullptr)
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_ADS_Connect = (PLibMCDriver_ADSDriver_ADS_ConnectPtr) GetProcAddress(hLibrary, "libmcdriver_ads_driver_ads_connect");
		#else // _WIN32
		pWrapperTable->m_Driver_ADS_Connect = (PLibMCDriver_ADSDriver_ADS_ConnectPtr) dlsym(hLibrary, "libmcdriver_ads_driver_ads_connect");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_ADS_Connect == nullptr)
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_ADS_Disconnect = (PLibMCDriver_ADSDriver_ADS_DisconnectPtr) GetProcAddress(hLibrary, "libmcdriver_ads_driver_ads_disconnect");
		#else // _WIN32
		pWrapperTable->m_Driver_ADS_Disconnect = (PLibMCDriver_ADSDriver_ADS_DisconnectPtr) dlsym(hLibrary, "libmcdriver_ads_driver_ads_disconnect");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_ADS_Disconnect == nullptr)
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_ADS_CreateCommandList = (PLibMCDriver_ADSDriver_ADS_CreateCommandListPtr) GetProcAddress(hLibrary, "libmcdriver_ads_driver_ads_createcommandlist");
		#else // _WIN32
		pWrapperTable->m_Driver_ADS_CreateCommandList = (PLibMCDriver_ADSDriver_ADS_CreateCommandListPtr) dlsym(hLibrary, "libmcdriver_ads_driver_ads_createcommandlist");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_ADS_CreateCommandList == nullptr)
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_ADS_CreateCommand = (PLibMCDriver_ADSDriver_ADS_CreateCommandPtr) GetProcAddress(hLibrary, "libmcdriver_ads_driver_ads_createcommand");
		#else // _WIN32
		pWrapperTable->m_Driver_ADS_CreateCommand = (PLibMCDriver_ADSDriver_ADS_CreateCommandPtr) dlsym(hLibrary, "libmcdriver_ads_driver_ads_createcommand");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_ADS_CreateCommand == nullptr)
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_ADS_StartJournaling = (PLibMCDriver_ADSDriver_ADS_StartJournalingPtr) GetProcAddress(hLibrary, "libmcdriver_ads_driver_ads_startjournaling");
		#else // _WIN32
		pWrapperTable->m_Driver_ADS_StartJournaling = (PLibMCDriver_ADSDriver_ADS_StartJournalingPtr) dlsym(hLibrary, "libmcdriver_ads_driver_ads_startjournaling");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_ADS_StartJournaling == nullptr)
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_ADS_StopJournaling = (PLibMCDriver_ADSDriver_ADS_StopJournalingPtr) GetProcAddress(hLibrary, "libmcdriver_ads_driver_ads_stopjournaling");
		#else // _WIN32
		pWrapperTable->m_Driver_ADS_StopJournaling = (PLibMCDriver_ADSDriver_ADS_StopJournalingPtr) dlsym(hLibrary, "libmcdriver_ads_driver_ads_stopjournaling");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_ADS_StopJournaling == nullptr)
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_ADS_RefreshJournal = (PLibMCDriver_ADSDriver_ADS_RefreshJournalPtr) GetProcAddress(hLibrary, "libmcdriver_ads_driver_ads_refreshjournal");
		#else // _WIN32
		pWrapperTable->m_Driver_ADS_RefreshJournal = (PLibMCDriver_ADSDriver_ADS_RefreshJournalPtr) dlsym(hLibrary, "libmcdriver_ads_driver_ads_refreshjournal");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_ADS_RefreshJournal == nullptr)
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GetVersion = (PLibMCDriver_ADSGetVersionPtr) GetProcAddress(hLibrary, "libmcdriver_ads_getversion");
		#else // _WIN32
		pWrapperTable->m_GetVersion = (PLibMCDriver_ADSGetVersionPtr) dlsym(hLibrary, "libmcdriver_ads_getversion");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GetVersion == nullptr)
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GetLastError = (PLibMCDriver_ADSGetLastErrorPtr) GetProcAddress(hLibrary, "libmcdriver_ads_getlasterror");
		#else // _WIN32
		pWrapperTable->m_GetLastError = (PLibMCDriver_ADSGetLastErrorPtr) dlsym(hLibrary, "libmcdriver_ads_getlasterror");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GetLastError == nullptr)
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ReleaseInstance = (PLibMCDriver_ADSReleaseInstancePtr) GetProcAddress(hLibrary, "libmcdriver_ads_releaseinstance");
		#else // _WIN32
		pWrapperTable->m_ReleaseInstance = (PLibMCDriver_ADSReleaseInstancePtr) dlsym(hLibrary, "libmcdriver_ads_releaseinstance");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ReleaseInstance == nullptr)
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_AcquireInstance = (PLibMCDriver_ADSAcquireInstancePtr) GetProcAddress(hLibrary, "libmcdriver_ads_acquireinstance");
		#else // _WIN32
		pWrapperTable->m_AcquireInstance = (PLibMCDriver_ADSAcquireInstancePtr) dlsym(hLibrary, "libmcdriver_ads_acquireinstance");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_AcquireInstance == nullptr)
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_InjectComponent = (PLibMCDriver_ADSInjectComponentPtr) GetProcAddress(hLibrary, "libmcdriver_ads_injectcomponent");
		#else // _WIN32
		pWrapperTable->m_InjectComponent = (PLibMCDriver_ADSInjectComponentPtr) dlsym(hLibrary, "libmcdriver_ads_injectcomponent");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_InjectComponent == nullptr)
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GetSymbolLookupMethod = (PLibMCDriver_ADSGetSymbolLookupMethodPtr) GetProcAddress(hLibrary, "libmcdriver_ads_getsymbollookupmethod");
		#else // _WIN32
		pWrapperTable->m_GetSymbolLookupMethod = (PLibMCDriver_ADSGetSymbolLookupMethodPtr) dlsym(hLibrary, "libmcdriver_ads_getsymbollookupmethod");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GetSymbolLookupMethod == nullptr)
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_CreateDriver = (PLibMCDriver_ADSCreateDriverPtr) GetProcAddress(hLibrary, "libmcdriver_ads_createdriver");
		#else // _WIN32
		pWrapperTable->m_CreateDriver = (PLibMCDriver_ADSCreateDriverPtr) dlsym(hLibrary, "libmcdriver_ads_createdriver");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_CreateDriver == nullptr)
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		pWrapperTable->m_LibraryHandle = hLibrary;
		return LIBMCDRIVER_ADS_SUCCESS;
	}

	inline LibMCDriver_ADSResult CWrapper::loadWrapperTableFromSymbolLookupMethod(sLibMCDriver_ADSDynamicWrapperTable * pWrapperTable, void* pSymbolLookupMethod)
{
		if (pWrapperTable == nullptr)
			return LIBMCDRIVER_ADS_ERROR_INVALIDPARAM;
		if (pSymbolLookupMethod == nullptr)
			return LIBMCDRIVER_ADS_ERROR_INVALIDPARAM;
		
		typedef LibMCDriver_ADSResult(*SymbolLookupType)(const char*, void**);
		
		SymbolLookupType pLookup = (SymbolLookupType)pSymbolLookupMethod;
		
		LibMCDriver_ADSResult eLookupError = LIBMCDRIVER_ADS_SUCCESS;
		eLookupError = (*pLookup)("libmcdriver_ads_driver_configure", (void**)&(pWrapperTable->m_Driver_Configure));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_Configure == nullptr) )
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_ads_driver_getname", (void**)&(pWrapperTable->m_Driver_GetName));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_GetName == nullptr) )
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_ads_driver_gettype", (void**)&(pWrapperTable->m_Driver_GetType));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_GetType == nullptr) )
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_ads_driver_getversion", (void**)&(pWrapperTable->m_Driver_GetVersion));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_GetVersion == nullptr) )
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_ads_driver_getheaderinformation", (void**)&(pWrapperTable->m_Driver_GetHeaderInformation));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_GetHeaderInformation == nullptr) )
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_ads_driver_queryparameters", (void**)&(pWrapperTable->m_Driver_QueryParameters));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_QueryParameters == nullptr) )
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_ads_plccommand_setintegerparameter", (void**)&(pWrapperTable->m_PLCCommand_SetIntegerParameter));
		if ( (eLookupError != 0) || (pWrapperTable->m_PLCCommand_SetIntegerParameter == nullptr) )
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_ads_plccommand_setboolparameter", (void**)&(pWrapperTable->m_PLCCommand_SetBoolParameter));
		if ( (eLookupError != 0) || (pWrapperTable->m_PLCCommand_SetBoolParameter == nullptr) )
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_ads_plccommand_setdoubleparameter", (void**)&(pWrapperTable->m_PLCCommand_SetDoubleParameter));
		if ( (eLookupError != 0) || (pWrapperTable->m_PLCCommand_SetDoubleParameter == nullptr) )
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_ads_plccommandlist_addcommand", (void**)&(pWrapperTable->m_PLCCommandList_AddCommand));
		if ( (eLookupError != 0) || (pWrapperTable->m_PLCCommandList_AddCommand == nullptr) )
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_ads_plccommandlist_finishlist", (void**)&(pWrapperTable->m_PLCCommandList_FinishList));
		if ( (eLookupError != 0) || (pWrapperTable->m_PLCCommandList_FinishList == nullptr) )
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_ads_plccommandlist_executelist", (void**)&(pWrapperTable->m_PLCCommandList_ExecuteList));
		if ( (eLookupError != 0) || (pWrapperTable->m_PLCCommandList_ExecuteList == nullptr) )
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_ads_plccommandlist_waitforlist", (void**)&(pWrapperTable->m_PLCCommandList_WaitForList));
		if ( (eLookupError != 0) || (pWrapperTable->m_PLCCommandList_WaitForList == nullptr) )
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_ads_plccommandlist_pauselist", (void**)&(pWrapperTable->m_PLCCommandList_PauseList));
		if ( (eLookupError != 0) || (pWrapperTable->m_PLCCommandList_PauseList == nullptr) )
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_ads_plccommandlist_resumelist", (void**)&(pWrapperTable->m_PLCCommandList_ResumeList));
		if ( (eLookupError != 0) || (pWrapperTable->m_PLCCommandList_ResumeList == nullptr) )
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_ads_driver_ads_settosimulationmode", (void**)&(pWrapperTable->m_Driver_ADS_SetToSimulationMode));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_ADS_SetToSimulationMode == nullptr) )
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_ads_driver_ads_issimulationmode", (void**)&(pWrapperTable->m_Driver_ADS_IsSimulationMode));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_ADS_IsSimulationMode == nullptr) )
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_ads_driver_ads_connect", (void**)&(pWrapperTable->m_Driver_ADS_Connect));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_ADS_Connect == nullptr) )
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_ads_driver_ads_disconnect", (void**)&(pWrapperTable->m_Driver_ADS_Disconnect));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_ADS_Disconnect == nullptr) )
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_ads_driver_ads_createcommandlist", (void**)&(pWrapperTable->m_Driver_ADS_CreateCommandList));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_ADS_CreateCommandList == nullptr) )
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_ads_driver_ads_createcommand", (void**)&(pWrapperTable->m_Driver_ADS_CreateCommand));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_ADS_CreateCommand == nullptr) )
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_ads_driver_ads_startjournaling", (void**)&(pWrapperTable->m_Driver_ADS_StartJournaling));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_ADS_StartJournaling == nullptr) )
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_ads_driver_ads_stopjournaling", (void**)&(pWrapperTable->m_Driver_ADS_StopJournaling));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_ADS_StopJournaling == nullptr) )
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_ads_driver_ads_refreshjournal", (void**)&(pWrapperTable->m_Driver_ADS_RefreshJournal));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_ADS_RefreshJournal == nullptr) )
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_ads_getversion", (void**)&(pWrapperTable->m_GetVersion));
		if ( (eLookupError != 0) || (pWrapperTable->m_GetVersion == nullptr) )
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_ads_getlasterror", (void**)&(pWrapperTable->m_GetLastError));
		if ( (eLookupError != 0) || (pWrapperTable->m_GetLastError == nullptr) )
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_ads_releaseinstance", (void**)&(pWrapperTable->m_ReleaseInstance));
		if ( (eLookupError != 0) || (pWrapperTable->m_ReleaseInstance == nullptr) )
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_ads_acquireinstance", (void**)&(pWrapperTable->m_AcquireInstance));
		if ( (eLookupError != 0) || (pWrapperTable->m_AcquireInstance == nullptr) )
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_ads_injectcomponent", (void**)&(pWrapperTable->m_InjectComponent));
		if ( (eLookupError != 0) || (pWrapperTable->m_InjectComponent == nullptr) )
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_ads_getsymbollookupmethod", (void**)&(pWrapperTable->m_GetSymbolLookupMethod));
		if ( (eLookupError != 0) || (pWrapperTable->m_GetSymbolLookupMethod == nullptr) )
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_ads_createdriver", (void**)&(pWrapperTable->m_CreateDriver));
		if ( (eLookupError != 0) || (pWrapperTable->m_CreateDriver == nullptr) )
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		return LIBMCDRIVER_ADS_SUCCESS;
}

	
	
	/**
	 * Method definitions for class CBase
	 */
	
	/**
	 * Method definitions for class CDriver
	 */
	
	/**
	* CDriver::Configure - Configures a driver with its specific configuration data.
	* @param[in] sConfigurationString - Configuration data of driver.
	*/
	void CDriver::Configure(const std::string & sConfigurationString)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_Configure(m_pHandle, sConfigurationString.c_str()));
	}
	
	/**
	* CDriver::GetName - returns the name identifier of the driver
	* @return Name of the driver.
	*/
	std::string CDriver::GetName()
	{
		LibMCDriver_ADS_uint32 bytesNeededName = 0;
		LibMCDriver_ADS_uint32 bytesWrittenName = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetName(m_pHandle, 0, &bytesNeededName, nullptr));
		std::vector<char> bufferName(bytesNeededName);
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetName(m_pHandle, bytesNeededName, &bytesWrittenName, &bufferName[0]));
		
		return std::string(&bufferName[0]);
	}
	
	/**
	* CDriver::GetType - returns the type identifier of the driver
	* @return Type of the driver.
	*/
	std::string CDriver::GetType()
	{
		LibMCDriver_ADS_uint32 bytesNeededType = 0;
		LibMCDriver_ADS_uint32 bytesWrittenType = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetType(m_pHandle, 0, &bytesNeededType, nullptr));
		std::vector<char> bufferType(bytesNeededType);
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetType(m_pHandle, bytesNeededType, &bytesWrittenType, &bufferType[0]));
		
		return std::string(&bufferType[0]);
	}
	
	/**
	* CDriver::GetVersion - returns the version identifiers of the driver
	* @param[out] nMajor - Major version.
	* @param[out] nMinor - Minor version.
	* @param[out] nMicro - Micro version.
	* @param[out] sBuild - Build identifier.
	*/
	void CDriver::GetVersion(LibMCDriver_ADS_uint32 & nMajor, LibMCDriver_ADS_uint32 & nMinor, LibMCDriver_ADS_uint32 & nMicro, std::string & sBuild)
	{
		LibMCDriver_ADS_uint32 bytesNeededBuild = 0;
		LibMCDriver_ADS_uint32 bytesWrittenBuild = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetVersion(m_pHandle, &nMajor, &nMinor, &nMicro, 0, &bytesNeededBuild, nullptr));
		std::vector<char> bufferBuild(bytesNeededBuild);
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetVersion(m_pHandle, &nMajor, &nMinor, &nMicro, bytesNeededBuild, &bytesWrittenBuild, &bufferBuild[0]));
		sBuild = std::string(&bufferBuild[0]);
	}
	
	/**
	* CDriver::GetHeaderInformation - returns the header information
	* @param[out] sNameSpace - NameSpace of the driver.
	* @param[out] sBaseName - BaseName of the driver.
	*/
	void CDriver::GetHeaderInformation(std::string & sNameSpace, std::string & sBaseName)
	{
		LibMCDriver_ADS_uint32 bytesNeededNameSpace = 0;
		LibMCDriver_ADS_uint32 bytesWrittenNameSpace = 0;
		LibMCDriver_ADS_uint32 bytesNeededBaseName = 0;
		LibMCDriver_ADS_uint32 bytesWrittenBaseName = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetHeaderInformation(m_pHandle, 0, &bytesNeededNameSpace, nullptr, 0, &bytesNeededBaseName, nullptr));
		std::vector<char> bufferNameSpace(bytesNeededNameSpace);
		std::vector<char> bufferBaseName(bytesNeededBaseName);
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetHeaderInformation(m_pHandle, bytesNeededNameSpace, &bytesWrittenNameSpace, &bufferNameSpace[0], bytesNeededBaseName, &bytesWrittenBaseName, &bufferBaseName[0]));
		sNameSpace = std::string(&bufferNameSpace[0]);
		sBaseName = std::string(&bufferBaseName[0]);
	}
	
	/**
	* CDriver::QueryParameters - Stores the driver parameters in the driver environment.
	*/
	void CDriver::QueryParameters()
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_QueryParameters(m_pHandle));
	}
	
	/**
	 * Method definitions for class CPLCCommand
	 */
	
	/**
	* CPLCCommand::SetIntegerParameter - Sets an integer parameter of the command
	* @param[in] sParameterName - Parameter Value
	* @param[in] nValue - Parameter Value
	*/
	void CPLCCommand::SetIntegerParameter(const std::string & sParameterName, const LibMCDriver_ADS_int64 nValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_PLCCommand_SetIntegerParameter(m_pHandle, sParameterName.c_str(), nValue));
	}
	
	/**
	* CPLCCommand::SetBoolParameter - Sets a bool parameter of the command
	* @param[in] sParameterName - Parameter Value
	* @param[in] bValue - Parameter Value
	*/
	void CPLCCommand::SetBoolParameter(const std::string & sParameterName, const bool bValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_PLCCommand_SetBoolParameter(m_pHandle, sParameterName.c_str(), bValue));
	}
	
	/**
	* CPLCCommand::SetDoubleParameter - Sets a double parameter of the command
	* @param[in] sParameterName - Parameter Value
	* @param[in] dValue - Parameter Value
	*/
	void CPLCCommand::SetDoubleParameter(const std::string & sParameterName, const LibMCDriver_ADS_double dValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_PLCCommand_SetDoubleParameter(m_pHandle, sParameterName.c_str(), dValue));
	}
	
	/**
	 * Method definitions for class CPLCCommandList
	 */
	
	/**
	* CPLCCommandList::AddCommand - Adds a command to the list. List must not be executed before.
	* @param[in] pCommandInstance - Add a command instance.
	*/
	void CPLCCommandList::AddCommand(classParam<CPLCCommand> pCommandInstance)
	{
		LibMCDriver_ADSHandle hCommandInstance = pCommandInstance.GetHandle();
		CheckError(m_pWrapper->m_WrapperTable.m_PLCCommandList_AddCommand(m_pHandle, hCommandInstance));
	}
	
	/**
	* CPLCCommandList::FinishList - Finish command list.
	*/
	void CPLCCommandList::FinishList()
	{
		CheckError(m_pWrapper->m_WrapperTable.m_PLCCommandList_FinishList(m_pHandle));
	}
	
	/**
	* CPLCCommandList::ExecuteList - Execute command list.
	*/
	void CPLCCommandList::ExecuteList()
	{
		CheckError(m_pWrapper->m_WrapperTable.m_PLCCommandList_ExecuteList(m_pHandle));
	}
	
	/**
	* CPLCCommandList::WaitForList - Wait for command list to finish executing
	* @param[in] nReactionTimeInMS - How much time the PLC may need to react to the command in Milliseconds. Will fail if no reaction in that time.
	* @param[in] nWaitForTimeInMS - How long to wait for the command to be finished in Milliseconds. Will return false if command has not finished.
	* @return Returns true if the command was finished successfully.
	*/
	bool CPLCCommandList::WaitForList(const LibMCDriver_ADS_uint32 nReactionTimeInMS, const LibMCDriver_ADS_uint32 nWaitForTimeInMS)
	{
		bool resultCommandSuccess = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_PLCCommandList_WaitForList(m_pHandle, nReactionTimeInMS, nWaitForTimeInMS, &resultCommandSuccess));
		
		return resultCommandSuccess;
	}
	
	/**
	* CPLCCommandList::PauseList - Pause command list. Must be executed or resumed before.
	*/
	void CPLCCommandList::PauseList()
	{
		CheckError(m_pWrapper->m_WrapperTable.m_PLCCommandList_PauseList(m_pHandle));
	}
	
	/**
	* CPLCCommandList::ResumeList - Resume command list. Must be paused before.
	*/
	void CPLCCommandList::ResumeList()
	{
		CheckError(m_pWrapper->m_WrapperTable.m_PLCCommandList_ResumeList(m_pHandle));
	}
	
	/**
	 * Method definitions for class CDriver_ADS
	 */
	
	/**
	* CDriver_ADS::SetToSimulationMode - Turns the driver into a simulation mode.
	*/
	void CDriver_ADS::SetToSimulationMode()
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_ADS_SetToSimulationMode(m_pHandle));
	}
	
	/**
	* CDriver_ADS::IsSimulationMode - Returns if the driver is in simulation mode.
	* @return Flag if driver is in simulation mode.
	*/
	bool CDriver_ADS::IsSimulationMode()
	{
		bool resultSimulationModeEnabled = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_ADS_IsSimulationMode(m_pHandle, &resultSimulationModeEnabled));
		
		return resultSimulationModeEnabled;
	}
	
	/**
	* CDriver_ADS::Connect - Connects to a ADS PLC Controller.
	* @param[in] sIPAddress - IP Address of PLC Service.
	* @param[in] nPort - Port of PLC Service.
	* @param[in] nTimeout - Timeout in milliseconds.
	*/
	void CDriver_ADS::Connect(const std::string & sIPAddress, const LibMCDriver_ADS_uint32 nPort, const LibMCDriver_ADS_uint32 nTimeout)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_ADS_Connect(m_pHandle, sIPAddress.c_str(), nPort, nTimeout));
	}
	
	/**
	* CDriver_ADS::Disconnect - Disconnects from the ADS PLC Controller.
	*/
	void CDriver_ADS::Disconnect()
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_ADS_Disconnect(m_pHandle));
	}
	
	/**
	* CDriver_ADS::CreateCommandList - Create Command
	* @return Command list instance
	*/
	PPLCCommandList CDriver_ADS::CreateCommandList()
	{
		LibMCDriver_ADSHandle hListInstance = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_ADS_CreateCommandList(m_pHandle, &hListInstance));
		
		if (!hListInstance) {
			CheckError(LIBMCDRIVER_ADS_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CPLCCommandList>(m_pWrapper, hListInstance);
	}
	
	/**
	* CDriver_ADS::CreateCommand - Creates a command instance.
	* @param[in] sCommandName - Command Name.
	* @return Returns a command instance.
	*/
	PPLCCommand CDriver_ADS::CreateCommand(const std::string & sCommandName)
	{
		LibMCDriver_ADSHandle hCommandInstance = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_ADS_CreateCommand(m_pHandle, sCommandName.c_str(), &hCommandInstance));
		
		if (!hCommandInstance) {
			CheckError(LIBMCDRIVER_ADS_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CPLCCommand>(m_pWrapper, hCommandInstance);
	}
	
	/**
	* CDriver_ADS::StartJournaling - Start Journaling.
	*/
	void CDriver_ADS::StartJournaling()
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_ADS_StartJournaling(m_pHandle));
	}
	
	/**
	* CDriver_ADS::StopJournaling - Stop Journaling.
	*/
	void CDriver_ADS::StopJournaling()
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_ADS_StopJournaling(m_pHandle));
	}
	
	/**
	* CDriver_ADS::RefreshJournal - Refresh Journal.
	*/
	void CDriver_ADS::RefreshJournal()
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_ADS_RefreshJournal(m_pHandle));
	}

} // namespace LibMCDriver_ADS

#endif // __LIBMCDRIVER_ADS_CPPHEADER_DYNAMIC_CPP

