/*++

Copyright (C) 2020 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.8.0-develop.

Abstract: This is an autogenerated C++-Header file in order to allow an easy
 use of MC Driver ADS

Interface version: 2.0.0

*/

#ifndef __LIBMCDRIVER_ADS_CPPHEADER_DYNAMIC_CPP
#define __LIBMCDRIVER_ADS_CPPHEADER_DYNAMIC_CPP

#include "libmcdriver_ads_types.hpp"
#include "libmcdriver_ads_dynamic.h"

#include "libmcenv_dynamic.hpp"

#ifdef _WIN32
#include <windows.h>
#else // _WIN32
#include <dlfcn.h>
#endif // _WIN32
#include <string>
#include <memory>
#include <vector>
#include <exception>

namespace LibMCDriver_ADS {

/*************************************************************************************************************************
 Forward Declaration of all classes
**************************************************************************************************************************/
class CWrapper;
class CBase;
class CDriver;
class CDriver_ADS;

/*************************************************************************************************************************
 Declaration of deprecated class types
**************************************************************************************************************************/
typedef CWrapper CLibMCDriver_ADSWrapper;
typedef CBase CLibMCDriver_ADSBase;
typedef CDriver CLibMCDriver_ADSDriver;
typedef CDriver_ADS CLibMCDriver_ADSDriver_ADS;

/*************************************************************************************************************************
 Declaration of shared pointer types
**************************************************************************************************************************/
typedef std::shared_ptr<CWrapper> PWrapper;
typedef std::shared_ptr<CBase> PBase;
typedef std::shared_ptr<CDriver> PDriver;
typedef std::shared_ptr<CDriver_ADS> PDriver_ADS;

/*************************************************************************************************************************
 Declaration of deprecated shared pointer types
**************************************************************************************************************************/
typedef PWrapper PLibMCDriver_ADSWrapper;
typedef PBase PLibMCDriver_ADSBase;
typedef PDriver PLibMCDriver_ADSDriver;
typedef PDriver_ADS PLibMCDriver_ADSDriver_ADS;


/*************************************************************************************************************************
 classParam Definition
**************************************************************************************************************************/

template<class T> class classParam {
private:
	const T* m_ptr;

public:
	classParam(const T* ptr)
		: m_ptr (ptr)
	{
	}

	classParam(std::shared_ptr <T> sharedPtr)
		: m_ptr (sharedPtr.get())
	{
	}

	LibMCDriver_ADSHandle GetHandle()
	{
		if (m_ptr != nullptr)
			return m_ptr->handle();
		return nullptr;
	}
};

/*************************************************************************************************************************
 Class ELibMCDriver_ADSException 
**************************************************************************************************************************/
class ELibMCDriver_ADSException : public std::exception {
protected:
	/**
	* Error code for the Exception.
	*/
	LibMCDriver_ADSResult m_errorCode;
	/**
	* Error message for the Exception.
	*/
	std::string m_errorMessage;
	std::string m_originalErrorMessage;

public:
	/**
	* Exception Constructor.
	*/
	ELibMCDriver_ADSException(LibMCDriver_ADSResult errorCode, const std::string & sErrorMessage)
		: m_errorCode(errorCode), m_originalErrorMessage(sErrorMessage)
	{
		m_errorMessage = buildErrorMessage();
	}

	/**
	* Returns error code
	*/
	LibMCDriver_ADSResult getErrorCode() const noexcept
	{
		return m_errorCode;
	}

	/**
	* Returns error message
	*/
	const char* what() const noexcept
	{
		return m_errorMessage.c_str();
	}

	const char* getErrorMessage() const noexcept
	{
		return m_originalErrorMessage.c_str();
	}

	const char* getErrorName() const noexcept
	{
		switch(getErrorCode()) {
			case LIBMCDRIVER_ADS_SUCCESS: return "SUCCESS";
			case LIBMCDRIVER_ADS_ERROR_NOTIMPLEMENTED: return "NOTIMPLEMENTED";
			case LIBMCDRIVER_ADS_ERROR_INVALIDPARAM: return "INVALIDPARAM";
			case LIBMCDRIVER_ADS_ERROR_INVALIDCAST: return "INVALIDCAST";
			case LIBMCDRIVER_ADS_ERROR_BUFFERTOOSMALL: return "BUFFERTOOSMALL";
			case LIBMCDRIVER_ADS_ERROR_GENERICEXCEPTION: return "GENERICEXCEPTION";
			case LIBMCDRIVER_ADS_ERROR_COULDNOTLOADLIBRARY: return "COULDNOTLOADLIBRARY";
			case LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT: return "COULDNOTFINDLIBRARYEXPORT";
			case LIBMCDRIVER_ADS_ERROR_INCOMPATIBLEBINARYVERSION: return "INCOMPATIBLEBINARYVERSION";
			case LIBMCDRIVER_ADS_ERROR_DRIVERERROR: return "DRIVERERROR";
			case LIBMCDRIVER_ADS_ERROR_DRIVERNOTINITIALISED: return "DRIVERNOTINITIALISED";
			case LIBMCDRIVER_ADS_ERROR_DRIVERNOTCONNECTED: return "DRIVERNOTCONNECTED";
			case LIBMCDRIVER_ADS_ERROR_INVALIDDRIVERPROTOCOL: return "INVALIDDRIVERPROTOCOL";
			case LIBMCDRIVER_ADS_ERROR_COULDNOTPARSEDRIVERPROTOCOL: return "COULDNOTPARSEDRIVERPROTOCOL";
			case LIBMCDRIVER_ADS_ERROR_NOTCONNECTED: return "NOTCONNECTED";
			case LIBMCDRIVER_ADS_ERROR_INTEGERVALUEOUTOFRANGE: return "INTEGERVALUEOUTOFRANGE";
			case LIBMCDRIVER_ADS_ERROR_COULDNOTREADDATA: return "COULDNOTREADDATA";
			case LIBMCDRIVER_ADS_ERROR_COULDNOTREADHANDLEVALUE: return "COULDNOTREADHANDLEVALUE";
			case LIBMCDRIVER_ADS_ERROR_NAMELENGTHEXCEEDSMAXIMUM: return "NAMELENGTHEXCEEDSMAXIMUM";
			case LIBMCDRIVER_ADS_ERROR_NOVERSIONDEFINITION: return "NOVERSIONDEFINITION";
			case LIBMCDRIVER_ADS_ERROR_NOMAJORVERSION: return "NOMAJORVERSION";
			case LIBMCDRIVER_ADS_ERROR_NOMINORVERSION: return "NOMINORVERSION";
			case LIBMCDRIVER_ADS_ERROR_NOPATCHVERSION: return "NOPATCHVERSION";
			case LIBMCDRIVER_ADS_ERROR_NOVARIABLEDEFINITION: return "NOVARIABLEDEFINITION";
			case LIBMCDRIVER_ADS_ERROR_DRIVERNOTCONFIGURED: return "DRIVERNOTCONFIGURED";
			case LIBMCDRIVER_ADS_ERROR_VARIABLEISNOTINTEGER: return "VARIABLEISNOTINTEGER";
			case LIBMCDRIVER_ADS_ERROR_VARIABLEISNOTBOOLEAN: return "VARIABLEISNOTBOOLEAN";
			case LIBMCDRIVER_ADS_ERROR_VARIABLENOTFOUND: return "VARIABLENOTFOUND";
			case LIBMCDRIVER_ADS_ERROR_VARIABLEISNOTFLOAT: return "VARIABLEISNOTFLOAT";
			case LIBMCDRIVER_ADS_ERROR_VARIABLEISNOTSTRING: return "VARIABLEISNOTSTRING";
			case LIBMCDRIVER_ADS_ERROR_VARIABLEISNOTSTRUCT: return "VARIABLEISNOTSTRUCT";
			case LIBMCDRIVER_ADS_ERROR_VARIABLENAMEMISSING: return "VARIABLENAMEMISSING";
			case LIBMCDRIVER_ADS_ERROR_VARIABLEDESCRIPTIONMISSING: return "VARIABLEDESCRIPTIONMISSING";
			case LIBMCDRIVER_ADS_ERROR_VARIABLEADSNAMEMISSING: return "VARIABLEADSNAMEMISSING";
			case LIBMCDRIVER_ADS_ERROR_VARIABLEACCESSMISSING: return "VARIABLEACCESSMISSING";
			case LIBMCDRIVER_ADS_ERROR_INVALIDVARIABLEACCESS: return "INVALIDVARIABLEACCESS";
			case LIBMCDRIVER_ADS_ERROR_INVALIDVARIABLETYPE: return "INVALIDVARIABLETYPE";
			case LIBMCDRIVER_ADS_ERROR_INVALIDSTRINGBUFFERLENGTH: return "INVALIDSTRINGBUFFERLENGTH";
			case LIBMCDRIVER_ADS_ERROR_STRINGLENGTHEXCEEDSBUFFERSIZE: return "STRINGLENGTHEXCEEDSBUFFERSIZE";
			case LIBMCDRIVER_ADS_ERROR_STRINGLENGTHMISSING: return "STRINGLENGTHMISSING";
			case LIBMCDRIVER_ADS_ERROR_INVALIDSTRINGLENGTH: return "INVALIDSTRINGLENGTH";
			case LIBMCDRIVER_ADS_ERROR_INVALIDADSSDKRESOURCE: return "INVALIDADSSDKRESOURCE";
		}
		return "UNKNOWN";
	}

	const char* getErrorDescription() const noexcept
	{
		switch(getErrorCode()) {
			case LIBMCDRIVER_ADS_SUCCESS: return "success";
			case LIBMCDRIVER_ADS_ERROR_NOTIMPLEMENTED: return "functionality not implemented";
			case LIBMCDRIVER_ADS_ERROR_INVALIDPARAM: return "an invalid parameter was passed";
			case LIBMCDRIVER_ADS_ERROR_INVALIDCAST: return "a type cast failed";
			case LIBMCDRIVER_ADS_ERROR_BUFFERTOOSMALL: return "a provided buffer is too small";
			case LIBMCDRIVER_ADS_ERROR_GENERICEXCEPTION: return "a generic exception occurred";
			case LIBMCDRIVER_ADS_ERROR_COULDNOTLOADLIBRARY: return "the library could not be loaded";
			case LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT: return "a required exported symbol could not be found in the library";
			case LIBMCDRIVER_ADS_ERROR_INCOMPATIBLEBINARYVERSION: return "the version of the binary interface does not match the bindings interface";
			case LIBMCDRIVER_ADS_ERROR_DRIVERERROR: return "a driver error occured";
			case LIBMCDRIVER_ADS_ERROR_DRIVERNOTINITIALISED: return "the driver is not initialised";
			case LIBMCDRIVER_ADS_ERROR_DRIVERNOTCONNECTED: return "the driver is not connected";
			case LIBMCDRIVER_ADS_ERROR_INVALIDDRIVERPROTOCOL: return "invalid driver protocol definition";
			case LIBMCDRIVER_ADS_ERROR_COULDNOTPARSEDRIVERPROTOCOL: return "could not parse driver protocol";
			case LIBMCDRIVER_ADS_ERROR_NOTCONNECTED: return "Not connected";
			case LIBMCDRIVER_ADS_ERROR_INTEGERVALUEOUTOFRANGE: return "Integer value out of range";
			case LIBMCDRIVER_ADS_ERROR_COULDNOTREADDATA: return "Could not read data";
			case LIBMCDRIVER_ADS_ERROR_COULDNOTREADHANDLEVALUE: return "Could not read handle value";
			case LIBMCDRIVER_ADS_ERROR_NAMELENGTHEXCEEDSMAXIMUM: return "Name length exceeds maximum";
			case LIBMCDRIVER_ADS_ERROR_NOVERSIONDEFINITION: return "No version definition";
			case LIBMCDRIVER_ADS_ERROR_NOMAJORVERSION: return "No major version";
			case LIBMCDRIVER_ADS_ERROR_NOMINORVERSION: return "No minor version";
			case LIBMCDRIVER_ADS_ERROR_NOPATCHVERSION: return "No patch version";
			case LIBMCDRIVER_ADS_ERROR_NOVARIABLEDEFINITION: return "No variable definition";
			case LIBMCDRIVER_ADS_ERROR_DRIVERNOTCONFIGURED: return "Driver not configured";
			case LIBMCDRIVER_ADS_ERROR_VARIABLEISNOTINTEGER: return "Variable is not integer";
			case LIBMCDRIVER_ADS_ERROR_VARIABLEISNOTBOOLEAN: return "Variable is not a boolean";
			case LIBMCDRIVER_ADS_ERROR_VARIABLENOTFOUND: return "Variable not found";
			case LIBMCDRIVER_ADS_ERROR_VARIABLEISNOTFLOAT: return "Variable is not a float";
			case LIBMCDRIVER_ADS_ERROR_VARIABLEISNOTSTRING: return "Variable is not a string";
			case LIBMCDRIVER_ADS_ERROR_VARIABLEISNOTSTRUCT: return "Variable is not a struct";
			case LIBMCDRIVER_ADS_ERROR_VARIABLENAMEMISSING: return "Variable name missing";
			case LIBMCDRIVER_ADS_ERROR_VARIABLEDESCRIPTIONMISSING: return "Variable description missing";
			case LIBMCDRIVER_ADS_ERROR_VARIABLEADSNAMEMISSING: return "variable ads name missing";
			case LIBMCDRIVER_ADS_ERROR_VARIABLEACCESSMISSING: return "variable access missing";
			case LIBMCDRIVER_ADS_ERROR_INVALIDVARIABLEACCESS: return "invalid variable access";
			case LIBMCDRIVER_ADS_ERROR_INVALIDVARIABLETYPE: return "invalid variable type";
			case LIBMCDRIVER_ADS_ERROR_INVALIDSTRINGBUFFERLENGTH: return "invalid string buffer length";
			case LIBMCDRIVER_ADS_ERROR_STRINGLENGTHEXCEEDSBUFFERSIZE: return "string length exceeds buffer size";
			case LIBMCDRIVER_ADS_ERROR_STRINGLENGTHMISSING: return "string length missing";
			case LIBMCDRIVER_ADS_ERROR_INVALIDSTRINGLENGTH: return "invalid string length";
			case LIBMCDRIVER_ADS_ERROR_INVALIDADSSDKRESOURCE: return "invalid ads sdk resource";
		}
		return "unknown error";
	}

private:

	std::string buildErrorMessage() const noexcept
	{
		std::string msg = m_originalErrorMessage;
		if (msg.empty()) {
			msg = getErrorDescription();
		}
		return std::string("Error: ") + getErrorName() + ": " + msg;
	}
};

/*************************************************************************************************************************
 Class CInputVector
**************************************************************************************************************************/
template <typename T>
class CInputVector {
private:
	
	const T* m_data;
	size_t m_size;
	
public:
	
	CInputVector(const std::vector<T>& vec)
		: m_data( vec.data() ), m_size( vec.size() )
	{
	}
	
	CInputVector(const T* in_data, size_t in_size)
		: m_data( in_data ), m_size(in_size )
	{
	}
	
	const T* data() const
	{
		return m_data;
	}
	
	size_t size() const
	{
		return m_size;
	}
	
};

// declare deprecated class name
template<typename T>
using CLibMCDriver_ADSInputVector = CInputVector<T>;

/*************************************************************************************************************************
 Class CWrapper 
**************************************************************************************************************************/
class CWrapper {
public:
	
	explicit CWrapper(void* pSymbolLookupMethod)
	{
		CheckError(nullptr, initWrapperTable(&m_WrapperTable));
		CheckError(nullptr, loadWrapperTableFromSymbolLookupMethod(&m_WrapperTable, pSymbolLookupMethod));
		
		CheckError(nullptr, checkBinaryVersion());
	}
	
	explicit CWrapper(const std::string &sFileName)
	{
		CheckError(nullptr, initWrapperTable(&m_WrapperTable));
		CheckError(nullptr, loadWrapperTable(&m_WrapperTable, sFileName.c_str()));
		
		CheckError(nullptr, checkBinaryVersion());
	}
	
	static PWrapper loadLibrary(const std::string &sFileName)
	{
		return std::make_shared<CWrapper>(sFileName);
	}
	
	static PWrapper loadLibraryFromSymbolLookupMethod(void* pSymbolLookupMethod)
	{
		return std::make_shared<CWrapper>(pSymbolLookupMethod);
	}
	
	~CWrapper()
	{
		releaseWrapperTable(&m_WrapperTable);
	}
	
	inline void CheckError(CBase * pBaseClass, LibMCDriver_ADSResult nResult);

	inline void GetVersion(LibMCDriver_ADS_uint32 & nMajor, LibMCDriver_ADS_uint32 & nMinor, LibMCDriver_ADS_uint32 & nMicro);
	inline bool GetLastError(classParam<CBase> pInstance, std::string & sErrorMessage);
	inline void ReleaseInstance(classParam<CBase> pInstance);
	inline void AcquireInstance(classParam<CBase> pInstance);
	inline void InjectComponent(const std::string & sNameSpace, const LibMCDriver_ADS_pvoid pSymbolAddressMethod);
	inline LibMCDriver_ADS_pvoid GetSymbolLookupMethod();
	inline PDriver CreateDriver(const std::string & sName, const std::string & sType, classParam<LibMCEnv::CDriverEnvironment> pDriverEnvironment);

private:
	sLibMCDriver_ADSDynamicWrapperTable m_WrapperTable;
	// Injected Components
	LibMCEnv::PWrapper m_pLibMCEnvWrapper;

	
	LibMCDriver_ADSResult checkBinaryVersion()
	{
		LibMCDriver_ADS_uint32 nMajor, nMinor, nMicro;
		GetVersion(nMajor, nMinor, nMicro);
		if (nMajor != LIBMCDRIVER_ADS_VERSION_MAJOR) {
			return LIBMCDRIVER_ADS_ERROR_INCOMPATIBLEBINARYVERSION;
		}
		return LIBMCDRIVER_ADS_SUCCESS;
	}
	LibMCDriver_ADSResult initWrapperTable(sLibMCDriver_ADSDynamicWrapperTable * pWrapperTable);
	LibMCDriver_ADSResult releaseWrapperTable(sLibMCDriver_ADSDynamicWrapperTable * pWrapperTable);
	LibMCDriver_ADSResult loadWrapperTable(sLibMCDriver_ADSDynamicWrapperTable * pWrapperTable, const char * pLibraryFileName);
	LibMCDriver_ADSResult loadWrapperTableFromSymbolLookupMethod(sLibMCDriver_ADSDynamicWrapperTable * pWrapperTable, void* pSymbolLookupMethod);

	friend class CBase;
	friend class CDriver;
	friend class CDriver_ADS;

};

	
/*************************************************************************************************************************
 Class CBase 
**************************************************************************************************************************/
class CBase {
public:
	
protected:
	/* Wrapper Object that created the class. */
	CWrapper * m_pWrapper;
	/* Handle to Instance in library*/
	LibMCDriver_ADSHandle m_pHandle;

	/* Checks for an Error code and raises Exceptions */
	void CheckError(LibMCDriver_ADSResult nResult)
	{
		if (m_pWrapper != nullptr)
			m_pWrapper->CheckError(this, nResult);
	}
public:
	/**
	* CBase::CBase - Constructor for Base class.
	*/
	CBase(CWrapper * pWrapper, LibMCDriver_ADSHandle pHandle)
		: m_pWrapper(pWrapper), m_pHandle(pHandle)
	{
	}

	/**
	* CBase::~CBase - Destructor for Base class.
	*/
	virtual ~CBase()
	{
		if (m_pWrapper != nullptr)
			m_pWrapper->ReleaseInstance(this);
		m_pWrapper = nullptr;
	}

	/**
	* CBase::handle - Returns handle to instance.
	*/
	LibMCDriver_ADSHandle handle() const
	{
		return m_pHandle;
	}

	/**
	* CBase::wrapper - Returns wrapper instance.
	*/
	CWrapper * wrapper() const
	{
		return m_pWrapper;
	}
	
	friend class CWrapper;
};
	
/*************************************************************************************************************************
 Class CDriver 
**************************************************************************************************************************/
class CDriver : public CBase {
public:
	
	/**
	* CDriver::CDriver - Constructor for Driver class.
	*/
	CDriver(CWrapper* pWrapper, LibMCDriver_ADSHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline void Configure(const std::string & sConfigurationString);
	inline std::string GetName();
	inline std::string GetType();
	inline void GetVersion(LibMCDriver_ADS_uint32 & nMajor, LibMCDriver_ADS_uint32 & nMinor, LibMCDriver_ADS_uint32 & nMicro, std::string & sBuild);
	inline void QueryParameters();
	inline void QueryParametersEx(classParam<LibMCEnv::CDriverStatusUpdateSession> pDriverUpdateInstance);
};
	
/*************************************************************************************************************************
 Class CDriver_ADS 
**************************************************************************************************************************/
class CDriver_ADS : public CDriver {
public:
	
	/**
	* CDriver_ADS::CDriver_ADS - Constructor for Driver_ADS class.
	*/
	CDriver_ADS(CWrapper* pWrapper, LibMCDriver_ADSHandle pHandle)
		: CDriver(pWrapper, pHandle)
	{
	}
	
	inline void SetToSimulationMode();
	inline bool IsSimulationMode();
	inline void SetCustomSDKResource(const std::string & sResourceName);
	inline void Connect(const LibMCDriver_ADS_uint32 nPort, const LibMCDriver_ADS_uint32 nTimeout);
	inline void Disconnect();
	inline bool VariableExists(const std::string & sVariableName);
	inline LibMCDriver_ADS_int64 ReadIntegerValue(const std::string & sVariableName);
	inline void WriteIntegerValue(const std::string & sVariableName, const LibMCDriver_ADS_int64 nValue);
	inline LibMCDriver_ADS_double ReadFloatValue(const std::string & sVariableName);
	inline void WriteFloatValue(const std::string & sVariableName, const LibMCDriver_ADS_double dValue);
	inline bool ReadBoolValue(const std::string & sVariableName);
	inline void WriteBoolValue(const std::string & sVariableName, const bool bValue);
	inline std::string ReadStringValue(const std::string & sVariableName);
	inline void WriteStringValue(const std::string & sVariableName, const std::string & sValue);
	inline void GetVariableBounds(const std::string & sVariableName, LibMCDriver_ADS_int64 & nMinValue, LibMCDriver_ADS_int64 & nMaxValue);
};
	
	/**
	* CWrapper::GetVersion - retrieves the binary version of this library.
	* @param[out] nMajor - returns the major version of this library
	* @param[out] nMinor - returns the minor version of this library
	* @param[out] nMicro - returns the micro version of this library
	*/
	inline void CWrapper::GetVersion(LibMCDriver_ADS_uint32 & nMajor, LibMCDriver_ADS_uint32 & nMinor, LibMCDriver_ADS_uint32 & nMicro)
	{
		CheckError(nullptr,m_WrapperTable.m_GetVersion(&nMajor, &nMinor, &nMicro));
	}
	
	/**
	* CWrapper::GetLastError - Returns the last error recorded on this object
	* @param[in] pInstance - Instance Handle
	* @param[out] sErrorMessage - Message of the last error
	* @return Is there a last error to query
	*/
	inline bool CWrapper::GetLastError(classParam<CBase> pInstance, std::string & sErrorMessage)
	{
		LibMCDriver_ADSHandle hInstance = pInstance.GetHandle();
		LibMCDriver_ADS_uint32 bytesNeededErrorMessage = 0;
		LibMCDriver_ADS_uint32 bytesWrittenErrorMessage = 0;
		bool resultHasError = 0;
		CheckError(nullptr,m_WrapperTable.m_GetLastError(hInstance, 0, &bytesNeededErrorMessage, nullptr, &resultHasError));
		std::vector<char> bufferErrorMessage(bytesNeededErrorMessage);
		CheckError(nullptr,m_WrapperTable.m_GetLastError(hInstance, bytesNeededErrorMessage, &bytesWrittenErrorMessage, &bufferErrorMessage[0], &resultHasError));
		sErrorMessage = std::string(&bufferErrorMessage[0]);
		
		return resultHasError;
	}
	
	/**
	* CWrapper::ReleaseInstance - Releases shared ownership of an Instance
	* @param[in] pInstance - Instance Handle
	*/
	inline void CWrapper::ReleaseInstance(classParam<CBase> pInstance)
	{
		LibMCDriver_ADSHandle hInstance = pInstance.GetHandle();
		CheckError(nullptr,m_WrapperTable.m_ReleaseInstance(hInstance));
	}
	
	/**
	* CWrapper::AcquireInstance - Acquires shared ownership of an Instance
	* @param[in] pInstance - Instance Handle
	*/
	inline void CWrapper::AcquireInstance(classParam<CBase> pInstance)
	{
		LibMCDriver_ADSHandle hInstance = pInstance.GetHandle();
		CheckError(nullptr,m_WrapperTable.m_AcquireInstance(hInstance));
	}
	
	/**
	* CWrapper::InjectComponent - Injects an imported component for usage within this component
	* @param[in] sNameSpace - NameSpace of the injected component
	* @param[in] pSymbolAddressMethod - Address of the SymbolAddressMethod of the injected component
	*/
	inline void CWrapper::InjectComponent(const std::string & sNameSpace, const LibMCDriver_ADS_pvoid pSymbolAddressMethod)
	{
		CheckError(nullptr,m_WrapperTable.m_InjectComponent(sNameSpace.c_str(), pSymbolAddressMethod));
		
		bool bNameSpaceFound = false;
		if (sNameSpace == "LibMCEnv") {
			if (m_pLibMCEnvWrapper != nullptr) {
				throw ELibMCDriver_ADSException(LIBMCDRIVER_ADS_ERROR_COULDNOTLOADLIBRARY, "Library with namespace " + sNameSpace + " is already registered.");
			}
			m_pLibMCEnvWrapper = LibMCEnv::CWrapper::loadLibraryFromSymbolLookupMethod(pSymbolAddressMethod);
			bNameSpaceFound = true;
		}
		if (!bNameSpaceFound)
			throw ELibMCDriver_ADSException(LIBMCDRIVER_ADS_ERROR_COULDNOTLOADLIBRARY, "Unknown namespace " + sNameSpace);
	}
	
	/**
	* CWrapper::GetSymbolLookupMethod - Returns the address of the SymbolLookupMethod
	* @return Address of the SymbolAddressMethod
	*/
	inline LibMCDriver_ADS_pvoid CWrapper::GetSymbolLookupMethod()
	{
		LibMCDriver_ADS_pvoid resultSymbolLookupMethod = 0;
		CheckError(nullptr,m_WrapperTable.m_GetSymbolLookupMethod(&resultSymbolLookupMethod));
		
		return resultSymbolLookupMethod;
	}
	
	/**
	* CWrapper::CreateDriver - Creates a driver instance with a specific name.
	* @param[in] sName - Name of driver to be created.
	* @param[in] sType - Type of driver to be created.
	* @param[in] pDriverEnvironment - Environment of this driver.
	* @return New Driver instance
	*/
	inline PDriver CWrapper::CreateDriver(const std::string & sName, const std::string & sType, classParam<LibMCEnv::CDriverEnvironment> pDriverEnvironment)
	{
		LibMCEnvHandle hDriverEnvironment = pDriverEnvironment.GetHandle();
		LibMCDriver_ADSHandle hInstance = nullptr;
		CheckError(nullptr,m_WrapperTable.m_CreateDriver(sName.c_str(), sType.c_str(), hDriverEnvironment, &hInstance));
		
		if (hInstance) {
			return std::make_shared<CDriver>(this, hInstance);
		} else {
			return nullptr;
		}
	}
	
	inline void CWrapper::CheckError(CBase * pBaseClass, LibMCDriver_ADSResult nResult)
	{
		if (nResult != 0) {
			std::string sErrorMessage;
			if (pBaseClass != nullptr) {
				GetLastError(pBaseClass, sErrorMessage);
			}
			throw ELibMCDriver_ADSException(nResult, sErrorMessage);
		}
	}
	

	inline LibMCDriver_ADSResult CWrapper::initWrapperTable(sLibMCDriver_ADSDynamicWrapperTable * pWrapperTable)
	{
		if (pWrapperTable == nullptr)
			return LIBMCDRIVER_ADS_ERROR_INVALIDPARAM;
		
		pWrapperTable->m_LibraryHandle = nullptr;
		pWrapperTable->m_Driver_Configure = nullptr;
		pWrapperTable->m_Driver_GetName = nullptr;
		pWrapperTable->m_Driver_GetType = nullptr;
		pWrapperTable->m_Driver_GetVersion = nullptr;
		pWrapperTable->m_Driver_QueryParameters = nullptr;
		pWrapperTable->m_Driver_QueryParametersEx = nullptr;
		pWrapperTable->m_Driver_ADS_SetToSimulationMode = nullptr;
		pWrapperTable->m_Driver_ADS_IsSimulationMode = nullptr;
		pWrapperTable->m_Driver_ADS_SetCustomSDKResource = nullptr;
		pWrapperTable->m_Driver_ADS_Connect = nullptr;
		pWrapperTable->m_Driver_ADS_Disconnect = nullptr;
		pWrapperTable->m_Driver_ADS_VariableExists = nullptr;
		pWrapperTable->m_Driver_ADS_ReadIntegerValue = nullptr;
		pWrapperTable->m_Driver_ADS_WriteIntegerValue = nullptr;
		pWrapperTable->m_Driver_ADS_ReadFloatValue = nullptr;
		pWrapperTable->m_Driver_ADS_WriteFloatValue = nullptr;
		pWrapperTable->m_Driver_ADS_ReadBoolValue = nullptr;
		pWrapperTable->m_Driver_ADS_WriteBoolValue = nullptr;
		pWrapperTable->m_Driver_ADS_ReadStringValue = nullptr;
		pWrapperTable->m_Driver_ADS_WriteStringValue = nullptr;
		pWrapperTable->m_Driver_ADS_GetVariableBounds = nullptr;
		pWrapperTable->m_GetVersion = nullptr;
		pWrapperTable->m_GetLastError = nullptr;
		pWrapperTable->m_ReleaseInstance = nullptr;
		pWrapperTable->m_AcquireInstance = nullptr;
		pWrapperTable->m_InjectComponent = nullptr;
		pWrapperTable->m_GetSymbolLookupMethod = nullptr;
		pWrapperTable->m_CreateDriver = nullptr;
		
		return LIBMCDRIVER_ADS_SUCCESS;
	}

	inline LibMCDriver_ADSResult CWrapper::releaseWrapperTable(sLibMCDriver_ADSDynamicWrapperTable * pWrapperTable)
	{
		if (pWrapperTable == nullptr)
			return LIBMCDRIVER_ADS_ERROR_INVALIDPARAM;
		
		if (pWrapperTable->m_LibraryHandle != nullptr) {
		#ifdef _WIN32
			HMODULE hModule = (HMODULE) pWrapperTable->m_LibraryHandle;
			FreeLibrary(hModule);
		#else // _WIN32
			dlclose(pWrapperTable->m_LibraryHandle);
		#endif // _WIN32
			return initWrapperTable(pWrapperTable);
		}
		
		return LIBMCDRIVER_ADS_SUCCESS;
	}

	inline LibMCDriver_ADSResult CWrapper::loadWrapperTable(sLibMCDriver_ADSDynamicWrapperTable * pWrapperTable, const char * pLibraryFileName)
	{
		if (pWrapperTable == nullptr)
			return LIBMCDRIVER_ADS_ERROR_INVALIDPARAM;
		if (pLibraryFileName == nullptr)
			return LIBMCDRIVER_ADS_ERROR_INVALIDPARAM;
		
		#ifdef _WIN32
		// Convert filename to UTF16-string
		int nLength = 0;
		while ((pLibraryFileName[nLength] != 0) && (nLength < MAX_PATH))
			nLength++;
		int nBufferSize = nLength * 2 + 2;
		std::vector<wchar_t> wsLibraryFileName(nBufferSize);
		int nResult = MultiByteToWideChar(CP_UTF8, 0, pLibraryFileName, nLength, &wsLibraryFileName[0], nBufferSize);
		if (nResult == 0)
			return LIBMCDRIVER_ADS_ERROR_COULDNOTLOADLIBRARY;
		
		HMODULE hLibrary = LoadLibraryW(wsLibraryFileName.data());
		if (hLibrary == 0) 
			return LIBMCDRIVER_ADS_ERROR_COULDNOTLOADLIBRARY;
		#else // _WIN32
		void* hLibrary = dlopen(pLibraryFileName, RTLD_LAZY);
		if (hLibrary == 0) 
			return LIBMCDRIVER_ADS_ERROR_COULDNOTLOADLIBRARY;
		dlerror();
		#endif // _WIN32
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_Configure = (PLibMCDriver_ADSDriver_ConfigurePtr) GetProcAddress(hLibrary, "libmcdriver_ads_driver_configure");
		#else // _WIN32
		pWrapperTable->m_Driver_Configure = (PLibMCDriver_ADSDriver_ConfigurePtr) dlsym(hLibrary, "libmcdriver_ads_driver_configure");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_Configure == nullptr)
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_GetName = (PLibMCDriver_ADSDriver_GetNamePtr) GetProcAddress(hLibrary, "libmcdriver_ads_driver_getname");
		#else // _WIN32
		pWrapperTable->m_Driver_GetName = (PLibMCDriver_ADSDriver_GetNamePtr) dlsym(hLibrary, "libmcdriver_ads_driver_getname");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_GetName == nullptr)
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_GetType = (PLibMCDriver_ADSDriver_GetTypePtr) GetProcAddress(hLibrary, "libmcdriver_ads_driver_gettype");
		#else // _WIN32
		pWrapperTable->m_Driver_GetType = (PLibMCDriver_ADSDriver_GetTypePtr) dlsym(hLibrary, "libmcdriver_ads_driver_gettype");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_GetType == nullptr)
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_GetVersion = (PLibMCDriver_ADSDriver_GetVersionPtr) GetProcAddress(hLibrary, "libmcdriver_ads_driver_getversion");
		#else // _WIN32
		pWrapperTable->m_Driver_GetVersion = (PLibMCDriver_ADSDriver_GetVersionPtr) dlsym(hLibrary, "libmcdriver_ads_driver_getversion");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_GetVersion == nullptr)
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_QueryParameters = (PLibMCDriver_ADSDriver_QueryParametersPtr) GetProcAddress(hLibrary, "libmcdriver_ads_driver_queryparameters");
		#else // _WIN32
		pWrapperTable->m_Driver_QueryParameters = (PLibMCDriver_ADSDriver_QueryParametersPtr) dlsym(hLibrary, "libmcdriver_ads_driver_queryparameters");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_QueryParameters == nullptr)
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_QueryParametersEx = (PLibMCDriver_ADSDriver_QueryParametersExPtr) GetProcAddress(hLibrary, "libmcdriver_ads_driver_queryparametersex");
		#else // _WIN32
		pWrapperTable->m_Driver_QueryParametersEx = (PLibMCDriver_ADSDriver_QueryParametersExPtr) dlsym(hLibrary, "libmcdriver_ads_driver_queryparametersex");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_QueryParametersEx == nullptr)
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_ADS_SetToSimulationMode = (PLibMCDriver_ADSDriver_ADS_SetToSimulationModePtr) GetProcAddress(hLibrary, "libmcdriver_ads_driver_ads_settosimulationmode");
		#else // _WIN32
		pWrapperTable->m_Driver_ADS_SetToSimulationMode = (PLibMCDriver_ADSDriver_ADS_SetToSimulationModePtr) dlsym(hLibrary, "libmcdriver_ads_driver_ads_settosimulationmode");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_ADS_SetToSimulationMode == nullptr)
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_ADS_IsSimulationMode = (PLibMCDriver_ADSDriver_ADS_IsSimulationModePtr) GetProcAddress(hLibrary, "libmcdriver_ads_driver_ads_issimulationmode");
		#else // _WIN32
		pWrapperTable->m_Driver_ADS_IsSimulationMode = (PLibMCDriver_ADSDriver_ADS_IsSimulationModePtr) dlsym(hLibrary, "libmcdriver_ads_driver_ads_issimulationmode");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_ADS_IsSimulationMode == nullptr)
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_ADS_SetCustomSDKResource = (PLibMCDriver_ADSDriver_ADS_SetCustomSDKResourcePtr) GetProcAddress(hLibrary, "libmcdriver_ads_driver_ads_setcustomsdkresource");
		#else // _WIN32
		pWrapperTable->m_Driver_ADS_SetCustomSDKResource = (PLibMCDriver_ADSDriver_ADS_SetCustomSDKResourcePtr) dlsym(hLibrary, "libmcdriver_ads_driver_ads_setcustomsdkresource");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_ADS_SetCustomSDKResource == nullptr)
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_ADS_Connect = (PLibMCDriver_ADSDriver_ADS_ConnectPtr) GetProcAddress(hLibrary, "libmcdriver_ads_driver_ads_connect");
		#else // _WIN32
		pWrapperTable->m_Driver_ADS_Connect = (PLibMCDriver_ADSDriver_ADS_ConnectPtr) dlsym(hLibrary, "libmcdriver_ads_driver_ads_connect");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_ADS_Connect == nullptr)
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_ADS_Disconnect = (PLibMCDriver_ADSDriver_ADS_DisconnectPtr) GetProcAddress(hLibrary, "libmcdriver_ads_driver_ads_disconnect");
		#else // _WIN32
		pWrapperTable->m_Driver_ADS_Disconnect = (PLibMCDriver_ADSDriver_ADS_DisconnectPtr) dlsym(hLibrary, "libmcdriver_ads_driver_ads_disconnect");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_ADS_Disconnect == nullptr)
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_ADS_VariableExists = (PLibMCDriver_ADSDriver_ADS_VariableExistsPtr) GetProcAddress(hLibrary, "libmcdriver_ads_driver_ads_variableexists");
		#else // _WIN32
		pWrapperTable->m_Driver_ADS_VariableExists = (PLibMCDriver_ADSDriver_ADS_VariableExistsPtr) dlsym(hLibrary, "libmcdriver_ads_driver_ads_variableexists");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_ADS_VariableExists == nullptr)
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_ADS_ReadIntegerValue = (PLibMCDriver_ADSDriver_ADS_ReadIntegerValuePtr) GetProcAddress(hLibrary, "libmcdriver_ads_driver_ads_readintegervalue");
		#else // _WIN32
		pWrapperTable->m_Driver_ADS_ReadIntegerValue = (PLibMCDriver_ADSDriver_ADS_ReadIntegerValuePtr) dlsym(hLibrary, "libmcdriver_ads_driver_ads_readintegervalue");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_ADS_ReadIntegerValue == nullptr)
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_ADS_WriteIntegerValue = (PLibMCDriver_ADSDriver_ADS_WriteIntegerValuePtr) GetProcAddress(hLibrary, "libmcdriver_ads_driver_ads_writeintegervalue");
		#else // _WIN32
		pWrapperTable->m_Driver_ADS_WriteIntegerValue = (PLibMCDriver_ADSDriver_ADS_WriteIntegerValuePtr) dlsym(hLibrary, "libmcdriver_ads_driver_ads_writeintegervalue");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_ADS_WriteIntegerValue == nullptr)
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_ADS_ReadFloatValue = (PLibMCDriver_ADSDriver_ADS_ReadFloatValuePtr) GetProcAddress(hLibrary, "libmcdriver_ads_driver_ads_readfloatvalue");
		#else // _WIN32
		pWrapperTable->m_Driver_ADS_ReadFloatValue = (PLibMCDriver_ADSDriver_ADS_ReadFloatValuePtr) dlsym(hLibrary, "libmcdriver_ads_driver_ads_readfloatvalue");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_ADS_ReadFloatValue == nullptr)
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_ADS_WriteFloatValue = (PLibMCDriver_ADSDriver_ADS_WriteFloatValuePtr) GetProcAddress(hLibrary, "libmcdriver_ads_driver_ads_writefloatvalue");
		#else // _WIN32
		pWrapperTable->m_Driver_ADS_WriteFloatValue = (PLibMCDriver_ADSDriver_ADS_WriteFloatValuePtr) dlsym(hLibrary, "libmcdriver_ads_driver_ads_writefloatvalue");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_ADS_WriteFloatValue == nullptr)
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_ADS_ReadBoolValue = (PLibMCDriver_ADSDriver_ADS_ReadBoolValuePtr) GetProcAddress(hLibrary, "libmcdriver_ads_driver_ads_readboolvalue");
		#else // _WIN32
		pWrapperTable->m_Driver_ADS_ReadBoolValue = (PLibMCDriver_ADSDriver_ADS_ReadBoolValuePtr) dlsym(hLibrary, "libmcdriver_ads_driver_ads_readboolvalue");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_ADS_ReadBoolValue == nullptr)
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_ADS_WriteBoolValue = (PLibMCDriver_ADSDriver_ADS_WriteBoolValuePtr) GetProcAddress(hLibrary, "libmcdriver_ads_driver_ads_writeboolvalue");
		#else // _WIN32
		pWrapperTable->m_Driver_ADS_WriteBoolValue = (PLibMCDriver_ADSDriver_ADS_WriteBoolValuePtr) dlsym(hLibrary, "libmcdriver_ads_driver_ads_writeboolvalue");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_ADS_WriteBoolValue == nullptr)
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_ADS_ReadStringValue = (PLibMCDriver_ADSDriver_ADS_ReadStringValuePtr) GetProcAddress(hLibrary, "libmcdriver_ads_driver_ads_readstringvalue");
		#else // _WIN32
		pWrapperTable->m_Driver_ADS_ReadStringValue = (PLibMCDriver_ADSDriver_ADS_ReadStringValuePtr) dlsym(hLibrary, "libmcdriver_ads_driver_ads_readstringvalue");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_ADS_ReadStringValue == nullptr)
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_ADS_WriteStringValue = (PLibMCDriver_ADSDriver_ADS_WriteStringValuePtr) GetProcAddress(hLibrary, "libmcdriver_ads_driver_ads_writestringvalue");
		#else // _WIN32
		pWrapperTable->m_Driver_ADS_WriteStringValue = (PLibMCDriver_ADSDriver_ADS_WriteStringValuePtr) dlsym(hLibrary, "libmcdriver_ads_driver_ads_writestringvalue");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_ADS_WriteStringValue == nullptr)
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_ADS_GetVariableBounds = (PLibMCDriver_ADSDriver_ADS_GetVariableBoundsPtr) GetProcAddress(hLibrary, "libmcdriver_ads_driver_ads_getvariablebounds");
		#else // _WIN32
		pWrapperTable->m_Driver_ADS_GetVariableBounds = (PLibMCDriver_ADSDriver_ADS_GetVariableBoundsPtr) dlsym(hLibrary, "libmcdriver_ads_driver_ads_getvariablebounds");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_ADS_GetVariableBounds == nullptr)
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GetVersion = (PLibMCDriver_ADSGetVersionPtr) GetProcAddress(hLibrary, "libmcdriver_ads_getversion");
		#else // _WIN32
		pWrapperTable->m_GetVersion = (PLibMCDriver_ADSGetVersionPtr) dlsym(hLibrary, "libmcdriver_ads_getversion");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GetVersion == nullptr)
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GetLastError = (PLibMCDriver_ADSGetLastErrorPtr) GetProcAddress(hLibrary, "libmcdriver_ads_getlasterror");
		#else // _WIN32
		pWrapperTable->m_GetLastError = (PLibMCDriver_ADSGetLastErrorPtr) dlsym(hLibrary, "libmcdriver_ads_getlasterror");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GetLastError == nullptr)
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ReleaseInstance = (PLibMCDriver_ADSReleaseInstancePtr) GetProcAddress(hLibrary, "libmcdriver_ads_releaseinstance");
		#else // _WIN32
		pWrapperTable->m_ReleaseInstance = (PLibMCDriver_ADSReleaseInstancePtr) dlsym(hLibrary, "libmcdriver_ads_releaseinstance");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ReleaseInstance == nullptr)
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_AcquireInstance = (PLibMCDriver_ADSAcquireInstancePtr) GetProcAddress(hLibrary, "libmcdriver_ads_acquireinstance");
		#else // _WIN32
		pWrapperTable->m_AcquireInstance = (PLibMCDriver_ADSAcquireInstancePtr) dlsym(hLibrary, "libmcdriver_ads_acquireinstance");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_AcquireInstance == nullptr)
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_InjectComponent = (PLibMCDriver_ADSInjectComponentPtr) GetProcAddress(hLibrary, "libmcdriver_ads_injectcomponent");
		#else // _WIN32
		pWrapperTable->m_InjectComponent = (PLibMCDriver_ADSInjectComponentPtr) dlsym(hLibrary, "libmcdriver_ads_injectcomponent");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_InjectComponent == nullptr)
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GetSymbolLookupMethod = (PLibMCDriver_ADSGetSymbolLookupMethodPtr) GetProcAddress(hLibrary, "libmcdriver_ads_getsymbollookupmethod");
		#else // _WIN32
		pWrapperTable->m_GetSymbolLookupMethod = (PLibMCDriver_ADSGetSymbolLookupMethodPtr) dlsym(hLibrary, "libmcdriver_ads_getsymbollookupmethod");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GetSymbolLookupMethod == nullptr)
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_CreateDriver = (PLibMCDriver_ADSCreateDriverPtr) GetProcAddress(hLibrary, "libmcdriver_ads_createdriver");
		#else // _WIN32
		pWrapperTable->m_CreateDriver = (PLibMCDriver_ADSCreateDriverPtr) dlsym(hLibrary, "libmcdriver_ads_createdriver");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_CreateDriver == nullptr)
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		pWrapperTable->m_LibraryHandle = hLibrary;
		return LIBMCDRIVER_ADS_SUCCESS;
	}

	inline LibMCDriver_ADSResult CWrapper::loadWrapperTableFromSymbolLookupMethod(sLibMCDriver_ADSDynamicWrapperTable * pWrapperTable, void* pSymbolLookupMethod)
{
		if (pWrapperTable == nullptr)
			return LIBMCDRIVER_ADS_ERROR_INVALIDPARAM;
		if (pSymbolLookupMethod == nullptr)
			return LIBMCDRIVER_ADS_ERROR_INVALIDPARAM;
		
		typedef LibMCDriver_ADSResult(*SymbolLookupType)(const char*, void**);
		
		SymbolLookupType pLookup = (SymbolLookupType)pSymbolLookupMethod;
		
		LibMCDriver_ADSResult eLookupError = LIBMCDRIVER_ADS_SUCCESS;
		eLookupError = (*pLookup)("libmcdriver_ads_driver_configure", (void**)&(pWrapperTable->m_Driver_Configure));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_Configure == nullptr) )
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_ads_driver_getname", (void**)&(pWrapperTable->m_Driver_GetName));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_GetName == nullptr) )
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_ads_driver_gettype", (void**)&(pWrapperTable->m_Driver_GetType));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_GetType == nullptr) )
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_ads_driver_getversion", (void**)&(pWrapperTable->m_Driver_GetVersion));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_GetVersion == nullptr) )
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_ads_driver_queryparameters", (void**)&(pWrapperTable->m_Driver_QueryParameters));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_QueryParameters == nullptr) )
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_ads_driver_queryparametersex", (void**)&(pWrapperTable->m_Driver_QueryParametersEx));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_QueryParametersEx == nullptr) )
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_ads_driver_ads_settosimulationmode", (void**)&(pWrapperTable->m_Driver_ADS_SetToSimulationMode));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_ADS_SetToSimulationMode == nullptr) )
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_ads_driver_ads_issimulationmode", (void**)&(pWrapperTable->m_Driver_ADS_IsSimulationMode));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_ADS_IsSimulationMode == nullptr) )
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_ads_driver_ads_setcustomsdkresource", (void**)&(pWrapperTable->m_Driver_ADS_SetCustomSDKResource));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_ADS_SetCustomSDKResource == nullptr) )
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_ads_driver_ads_connect", (void**)&(pWrapperTable->m_Driver_ADS_Connect));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_ADS_Connect == nullptr) )
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_ads_driver_ads_disconnect", (void**)&(pWrapperTable->m_Driver_ADS_Disconnect));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_ADS_Disconnect == nullptr) )
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_ads_driver_ads_variableexists", (void**)&(pWrapperTable->m_Driver_ADS_VariableExists));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_ADS_VariableExists == nullptr) )
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_ads_driver_ads_readintegervalue", (void**)&(pWrapperTable->m_Driver_ADS_ReadIntegerValue));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_ADS_ReadIntegerValue == nullptr) )
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_ads_driver_ads_writeintegervalue", (void**)&(pWrapperTable->m_Driver_ADS_WriteIntegerValue));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_ADS_WriteIntegerValue == nullptr) )
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_ads_driver_ads_readfloatvalue", (void**)&(pWrapperTable->m_Driver_ADS_ReadFloatValue));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_ADS_ReadFloatValue == nullptr) )
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_ads_driver_ads_writefloatvalue", (void**)&(pWrapperTable->m_Driver_ADS_WriteFloatValue));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_ADS_WriteFloatValue == nullptr) )
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_ads_driver_ads_readboolvalue", (void**)&(pWrapperTable->m_Driver_ADS_ReadBoolValue));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_ADS_ReadBoolValue == nullptr) )
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_ads_driver_ads_writeboolvalue", (void**)&(pWrapperTable->m_Driver_ADS_WriteBoolValue));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_ADS_WriteBoolValue == nullptr) )
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_ads_driver_ads_readstringvalue", (void**)&(pWrapperTable->m_Driver_ADS_ReadStringValue));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_ADS_ReadStringValue == nullptr) )
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_ads_driver_ads_writestringvalue", (void**)&(pWrapperTable->m_Driver_ADS_WriteStringValue));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_ADS_WriteStringValue == nullptr) )
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_ads_driver_ads_getvariablebounds", (void**)&(pWrapperTable->m_Driver_ADS_GetVariableBounds));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_ADS_GetVariableBounds == nullptr) )
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_ads_getversion", (void**)&(pWrapperTable->m_GetVersion));
		if ( (eLookupError != 0) || (pWrapperTable->m_GetVersion == nullptr) )
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_ads_getlasterror", (void**)&(pWrapperTable->m_GetLastError));
		if ( (eLookupError != 0) || (pWrapperTable->m_GetLastError == nullptr) )
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_ads_releaseinstance", (void**)&(pWrapperTable->m_ReleaseInstance));
		if ( (eLookupError != 0) || (pWrapperTable->m_ReleaseInstance == nullptr) )
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_ads_acquireinstance", (void**)&(pWrapperTable->m_AcquireInstance));
		if ( (eLookupError != 0) || (pWrapperTable->m_AcquireInstance == nullptr) )
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_ads_injectcomponent", (void**)&(pWrapperTable->m_InjectComponent));
		if ( (eLookupError != 0) || (pWrapperTable->m_InjectComponent == nullptr) )
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_ads_getsymbollookupmethod", (void**)&(pWrapperTable->m_GetSymbolLookupMethod));
		if ( (eLookupError != 0) || (pWrapperTable->m_GetSymbolLookupMethod == nullptr) )
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_ads_createdriver", (void**)&(pWrapperTable->m_CreateDriver));
		if ( (eLookupError != 0) || (pWrapperTable->m_CreateDriver == nullptr) )
			return LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		return LIBMCDRIVER_ADS_SUCCESS;
}

	
	
	/**
	 * Method definitions for class CBase
	 */
	
	/**
	 * Method definitions for class CDriver
	 */
	
	/**
	* CDriver::Configure - Configures a driver with its specific configuration data.
	* @param[in] sConfigurationString - Configuration data of driver.
	*/
	void CDriver::Configure(const std::string & sConfigurationString)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_Configure(m_pHandle, sConfigurationString.c_str()));
	}
	
	/**
	* CDriver::GetName - returns the name identifier of the driver
	* @return Name of the driver.
	*/
	std::string CDriver::GetName()
	{
		LibMCDriver_ADS_uint32 bytesNeededName = 0;
		LibMCDriver_ADS_uint32 bytesWrittenName = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetName(m_pHandle, 0, &bytesNeededName, nullptr));
		std::vector<char> bufferName(bytesNeededName);
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetName(m_pHandle, bytesNeededName, &bytesWrittenName, &bufferName[0]));
		
		return std::string(&bufferName[0]);
	}
	
	/**
	* CDriver::GetType - returns the type identifier of the driver
	* @return Type of the driver.
	*/
	std::string CDriver::GetType()
	{
		LibMCDriver_ADS_uint32 bytesNeededType = 0;
		LibMCDriver_ADS_uint32 bytesWrittenType = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetType(m_pHandle, 0, &bytesNeededType, nullptr));
		std::vector<char> bufferType(bytesNeededType);
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetType(m_pHandle, bytesNeededType, &bytesWrittenType, &bufferType[0]));
		
		return std::string(&bufferType[0]);
	}
	
	/**
	* CDriver::GetVersion - returns the version identifiers of the driver
	* @param[out] nMajor - Major version.
	* @param[out] nMinor - Minor version.
	* @param[out] nMicro - Micro version.
	* @param[out] sBuild - Build identifier.
	*/
	void CDriver::GetVersion(LibMCDriver_ADS_uint32 & nMajor, LibMCDriver_ADS_uint32 & nMinor, LibMCDriver_ADS_uint32 & nMicro, std::string & sBuild)
	{
		LibMCDriver_ADS_uint32 bytesNeededBuild = 0;
		LibMCDriver_ADS_uint32 bytesWrittenBuild = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetVersion(m_pHandle, &nMajor, &nMinor, &nMicro, 0, &bytesNeededBuild, nullptr));
		std::vector<char> bufferBuild(bytesNeededBuild);
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetVersion(m_pHandle, &nMajor, &nMinor, &nMicro, bytesNeededBuild, &bytesWrittenBuild, &bufferBuild[0]));
		sBuild = std::string(&bufferBuild[0]);
	}
	
	/**
	* CDriver::QueryParameters - Updates the driver parameters in the driver environment. Should be called in the driver thread.
	*/
	void CDriver::QueryParameters()
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_QueryParameters(m_pHandle));
	}
	
	/**
	* CDriver::QueryParametersEx - Updates the driver parameters in the driver environment. Might be called out of thread. Implementation MUST be able to handle parallel calls.
	* @param[in] pDriverUpdateInstance - Status update instance.
	*/
	void CDriver::QueryParametersEx(classParam<LibMCEnv::CDriverStatusUpdateSession> pDriverUpdateInstance)
	{
		LibMCEnvHandle hDriverUpdateInstance = pDriverUpdateInstance.GetHandle();
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_QueryParametersEx(m_pHandle, hDriverUpdateInstance));
	}
	
	/**
	 * Method definitions for class CDriver_ADS
	 */
	
	/**
	* CDriver_ADS::SetToSimulationMode - Turns the driver into a simulation mode.
	*/
	void CDriver_ADS::SetToSimulationMode()
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_ADS_SetToSimulationMode(m_pHandle));
	}
	
	/**
	* CDriver_ADS::IsSimulationMode - Returns if the driver is in simulation mode.
	* @return Flag if driver is in simulation mode.
	*/
	bool CDriver_ADS::IsSimulationMode()
	{
		bool resultSimulationModeEnabled = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_ADS_IsSimulationMode(m_pHandle, &resultSimulationModeEnabled));
		
		return resultSimulationModeEnabled;
	}
	
	/**
	* CDriver_ADS::SetCustomSDKResource - Sets the machine resource name of the ADS SDK to load. MUST be called before Connect or it has no effect.
	* @param[in] sResourceName - Resource name of core machine package. Empty means standard naming applies.
	*/
	void CDriver_ADS::SetCustomSDKResource(const std::string & sResourceName)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_ADS_SetCustomSDKResource(m_pHandle, sResourceName.c_str()));
	}
	
	/**
	* CDriver_ADS::Connect - Connects to a ADS PLC Controller.
	* @param[in] nPort - Port of PLC Service.
	* @param[in] nTimeout - Timeout in milliseconds.
	*/
	void CDriver_ADS::Connect(const LibMCDriver_ADS_uint32 nPort, const LibMCDriver_ADS_uint32 nTimeout)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_ADS_Connect(m_pHandle, nPort, nTimeout));
	}
	
	/**
	* CDriver_ADS::Disconnect - Disconnects from the ADS PLC Controller.
	*/
	void CDriver_ADS::Disconnect()
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_ADS_Disconnect(m_pHandle));
	}
	
	/**
	* CDriver_ADS::VariableExists - Returns if a variable exists.
	* @param[in] sVariableName - Name of variable.
	* @return Flag if value exists.
	*/
	bool CDriver_ADS::VariableExists(const std::string & sVariableName)
	{
		bool resultVariableExists = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_ADS_VariableExists(m_pHandle, sVariableName.c_str(), &resultVariableExists));
		
		return resultVariableExists;
	}
	
	/**
	* CDriver_ADS::ReadIntegerValue - Reads a value from an integer Variable.
	* @param[in] sVariableName - Name of variable.
	* @return Result value.
	*/
	LibMCDriver_ADS_int64 CDriver_ADS::ReadIntegerValue(const std::string & sVariableName)
	{
		LibMCDriver_ADS_int64 resultValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_ADS_ReadIntegerValue(m_pHandle, sVariableName.c_str(), &resultValue));
		
		return resultValue;
	}
	
	/**
	* CDriver_ADS::WriteIntegerValue - Reads a value from an integer Variable. Fails if value is not within the bounds of the variable.
	* @param[in] sVariableName - Name of variable.
	* @param[in] nValue - Value to set.
	*/
	void CDriver_ADS::WriteIntegerValue(const std::string & sVariableName, const LibMCDriver_ADS_int64 nValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_ADS_WriteIntegerValue(m_pHandle, sVariableName.c_str(), nValue));
	}
	
	/**
	* CDriver_ADS::ReadFloatValue - Reads a value from an float Variable.
	* @param[in] sVariableName - Name of variable.
	* @return Result value.
	*/
	LibMCDriver_ADS_double CDriver_ADS::ReadFloatValue(const std::string & sVariableName)
	{
		LibMCDriver_ADS_double resultValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_ADS_ReadFloatValue(m_pHandle, sVariableName.c_str(), &resultValue));
		
		return resultValue;
	}
	
	/**
	* CDriver_ADS::WriteFloatValue - Reads a value from an integer Variable.
	* @param[in] sVariableName - Name of variable.
	* @param[in] dValue - Value to set.
	*/
	void CDriver_ADS::WriteFloatValue(const std::string & sVariableName, const LibMCDriver_ADS_double dValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_ADS_WriteFloatValue(m_pHandle, sVariableName.c_str(), dValue));
	}
	
	/**
	* CDriver_ADS::ReadBoolValue - Reads a value from an boolean Variable.
	* @param[in] sVariableName - Name of variable.
	* @return Result value.
	*/
	bool CDriver_ADS::ReadBoolValue(const std::string & sVariableName)
	{
		bool resultValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_ADS_ReadBoolValue(m_pHandle, sVariableName.c_str(), &resultValue));
		
		return resultValue;
	}
	
	/**
	* CDriver_ADS::WriteBoolValue - Reads a value from an boolean Variable.
	* @param[in] sVariableName - Name of variable.
	* @param[in] bValue - Value to set.
	*/
	void CDriver_ADS::WriteBoolValue(const std::string & sVariableName, const bool bValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_ADS_WriteBoolValue(m_pHandle, sVariableName.c_str(), bValue));
	}
	
	/**
	* CDriver_ADS::ReadStringValue - Reads a value from an string Variable.
	* @param[in] sVariableName - Name of variable.
	* @return Result value.
	*/
	std::string CDriver_ADS::ReadStringValue(const std::string & sVariableName)
	{
		LibMCDriver_ADS_uint32 bytesNeededValue = 0;
		LibMCDriver_ADS_uint32 bytesWrittenValue = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_ADS_ReadStringValue(m_pHandle, sVariableName.c_str(), 0, &bytesNeededValue, nullptr));
		std::vector<char> bufferValue(bytesNeededValue);
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_ADS_ReadStringValue(m_pHandle, sVariableName.c_str(), bytesNeededValue, &bytesWrittenValue, &bufferValue[0]));
		
		return std::string(&bufferValue[0]);
	}
	
	/**
	* CDriver_ADS::WriteStringValue - Reads a value from an string Variable.
	* @param[in] sVariableName - Name of variable.
	* @param[in] sValue - Value to set.
	*/
	void CDriver_ADS::WriteStringValue(const std::string & sVariableName, const std::string & sValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_ADS_WriteStringValue(m_pHandle, sVariableName.c_str(), sValue.c_str()));
	}
	
	/**
	* CDriver_ADS::GetVariableBounds - Returns the min and max value an integer variable can hold.
	* @param[in] sVariableName - Name of variable. Fails if variable does not exist or is not an integer value.
	* @param[out] nMinValue - Minimum value.
	* @param[out] nMaxValue - Minimum value.
	*/
	void CDriver_ADS::GetVariableBounds(const std::string & sVariableName, LibMCDriver_ADS_int64 & nMinValue, LibMCDriver_ADS_int64 & nMaxValue)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_ADS_GetVariableBounds(m_pHandle, sVariableName.c_str(), &nMinValue, &nMaxValue));
	}

} // namespace LibMCDriver_ADS

#endif // __LIBMCDRIVER_ADS_CPPHEADER_DYNAMIC_CPP

