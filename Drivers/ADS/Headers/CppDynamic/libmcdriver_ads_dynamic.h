/*++

Copyright (C) 2020 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.8.0-develop.

Abstract: This is an autogenerated C++-Header file in order to allow an easy
 use of MC Driver ADS

Interface version: 2.0.0

*/

#ifndef __LIBMCDRIVER_ADS_DYNAMICHEADER_CPPTYPES
#define __LIBMCDRIVER_ADS_DYNAMICHEADER_CPPTYPES

#include "libmcdriver_ads_types.hpp"

#include "libmcenv_types.hpp"


/*************************************************************************************************************************
 Class definition for Base
**************************************************************************************************************************/

/*************************************************************************************************************************
 Class definition for Driver
**************************************************************************************************************************/

/**
* Configures a driver with its specific configuration data.
*
* @param[in] pDriver - Driver instance.
* @param[in] pConfigurationString - Configuration data of driver.
* @return error code or 0 (success)
*/
typedef LibMCDriver_ADSResult (*PLibMCDriver_ADSDriver_ConfigurePtr) (LibMCDriver_ADS_Driver pDriver, const char * pConfigurationString);

/**
* returns the name identifier of the driver
*
* @param[in] pDriver - Driver instance.
* @param[in] nNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNameBuffer -  buffer of Name of the driver., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCDriver_ADSResult (*PLibMCDriver_ADSDriver_GetNamePtr) (LibMCDriver_ADS_Driver pDriver, const LibMCDriver_ADS_uint32 nNameBufferSize, LibMCDriver_ADS_uint32* pNameNeededChars, char * pNameBuffer);

/**
* returns the type identifier of the driver
*
* @param[in] pDriver - Driver instance.
* @param[in] nTypeBufferSize - size of the buffer (including trailing 0)
* @param[out] pTypeNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pTypeBuffer -  buffer of Type of the driver., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCDriver_ADSResult (*PLibMCDriver_ADSDriver_GetTypePtr) (LibMCDriver_ADS_Driver pDriver, const LibMCDriver_ADS_uint32 nTypeBufferSize, LibMCDriver_ADS_uint32* pTypeNeededChars, char * pTypeBuffer);

/**
* returns the version identifiers of the driver
*
* @param[in] pDriver - Driver instance.
* @param[out] pMajor - Major version.
* @param[out] pMinor - Minor version.
* @param[out] pMicro - Micro version.
* @param[in] nBuildBufferSize - size of the buffer (including trailing 0)
* @param[out] pBuildNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pBuildBuffer -  buffer of Build identifier., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCDriver_ADSResult (*PLibMCDriver_ADSDriver_GetVersionPtr) (LibMCDriver_ADS_Driver pDriver, LibMCDriver_ADS_uint32 * pMajor, LibMCDriver_ADS_uint32 * pMinor, LibMCDriver_ADS_uint32 * pMicro, const LibMCDriver_ADS_uint32 nBuildBufferSize, LibMCDriver_ADS_uint32* pBuildNeededChars, char * pBuildBuffer);

/**
* Updates the driver parameters in the driver environment. Should only be called in the driver thread.
*
* @param[in] pDriver - Driver instance.
* @return error code or 0 (success)
*/
typedef LibMCDriver_ADSResult (*PLibMCDriver_ADSDriver_QueryParametersPtr) (LibMCDriver_ADS_Driver pDriver);

/**
* Updates the driver parameters in the driver environment. Might be called out of thread. Implementation MUST be able to handle parallel calls.
*
* @param[in] pDriver - Driver instance.
* @param[in] pDriverUpdateInstance - Status update instance.
* @return error code or 0 (success)
*/
typedef LibMCDriver_ADSResult (*PLibMCDriver_ADSDriver_QueryParametersExPtr) (LibMCDriver_ADS_Driver pDriver, LibMCEnv_DriverStatusUpdateSession pDriverUpdateInstance);

/*************************************************************************************************************************
 Class definition for Driver_ADS
**************************************************************************************************************************/

/**
* Turns the driver into a simulation mode.
*
* @param[in] pDriver_ADS - Driver_ADS instance.
* @return error code or 0 (success)
*/
typedef LibMCDriver_ADSResult (*PLibMCDriver_ADSDriver_ADS_SetToSimulationModePtr) (LibMCDriver_ADS_Driver_ADS pDriver_ADS);

/**
* Returns if the driver is in simulation mode.
*
* @param[in] pDriver_ADS - Driver_ADS instance.
* @param[out] pSimulationModeEnabled - Flag if driver is in simulation mode.
* @return error code or 0 (success)
*/
typedef LibMCDriver_ADSResult (*PLibMCDriver_ADSDriver_ADS_IsSimulationModePtr) (LibMCDriver_ADS_Driver_ADS pDriver_ADS, bool * pSimulationModeEnabled);

/**
* Sets the machine resource name of the ADS SDK to load. MUST be called before Connect or it has no effect.
*
* @param[in] pDriver_ADS - Driver_ADS instance.
* @param[in] pResourceName - Resource name of core machine package. Empty means standard naming applies.
* @return error code or 0 (success)
*/
typedef LibMCDriver_ADSResult (*PLibMCDriver_ADSDriver_ADS_SetCustomSDKResourcePtr) (LibMCDriver_ADS_Driver_ADS pDriver_ADS, const char * pResourceName);

/**
* Connects to a ADS PLC Controller.
*
* @param[in] pDriver_ADS - Driver_ADS instance.
* @param[in] nPort - Port of PLC Service.
* @param[in] nTimeout - Timeout in milliseconds.
* @return error code or 0 (success)
*/
typedef LibMCDriver_ADSResult (*PLibMCDriver_ADSDriver_ADS_ConnectPtr) (LibMCDriver_ADS_Driver_ADS pDriver_ADS, LibMCDriver_ADS_uint32 nPort, LibMCDriver_ADS_uint32 nTimeout);

/**
* Disconnects from the ADS PLC Controller.
*
* @param[in] pDriver_ADS - Driver_ADS instance.
* @return error code or 0 (success)
*/
typedef LibMCDriver_ADSResult (*PLibMCDriver_ADSDriver_ADS_DisconnectPtr) (LibMCDriver_ADS_Driver_ADS pDriver_ADS);

/**
* Returns if a variable exists.
*
* @param[in] pDriver_ADS - Driver_ADS instance.
* @param[in] pVariableName - Name of variable.
* @param[out] pVariableExists - Flag if value exists.
* @return error code or 0 (success)
*/
typedef LibMCDriver_ADSResult (*PLibMCDriver_ADSDriver_ADS_VariableExistsPtr) (LibMCDriver_ADS_Driver_ADS pDriver_ADS, const char * pVariableName, bool * pVariableExists);

/**
* Reads a value from an integer Variable.
*
* @param[in] pDriver_ADS - Driver_ADS instance.
* @param[in] pVariableName - Name of variable.
* @param[out] pValue - Result value.
* @return error code or 0 (success)
*/
typedef LibMCDriver_ADSResult (*PLibMCDriver_ADSDriver_ADS_ReadIntegerValuePtr) (LibMCDriver_ADS_Driver_ADS pDriver_ADS, const char * pVariableName, LibMCDriver_ADS_int64 * pValue);

/**
* Reads a value from an integer Variable. Fails if value is not within the bounds of the variable.
*
* @param[in] pDriver_ADS - Driver_ADS instance.
* @param[in] pVariableName - Name of variable.
* @param[in] nValue - Value to set.
* @return error code or 0 (success)
*/
typedef LibMCDriver_ADSResult (*PLibMCDriver_ADSDriver_ADS_WriteIntegerValuePtr) (LibMCDriver_ADS_Driver_ADS pDriver_ADS, const char * pVariableName, LibMCDriver_ADS_int64 nValue);

/**
* Reads a value from an float Variable.
*
* @param[in] pDriver_ADS - Driver_ADS instance.
* @param[in] pVariableName - Name of variable.
* @param[out] pValue - Result value.
* @return error code or 0 (success)
*/
typedef LibMCDriver_ADSResult (*PLibMCDriver_ADSDriver_ADS_ReadFloatValuePtr) (LibMCDriver_ADS_Driver_ADS pDriver_ADS, const char * pVariableName, LibMCDriver_ADS_double * pValue);

/**
* Reads a value from an integer Variable.
*
* @param[in] pDriver_ADS - Driver_ADS instance.
* @param[in] pVariableName - Name of variable.
* @param[in] dValue - Value to set.
* @return error code or 0 (success)
*/
typedef LibMCDriver_ADSResult (*PLibMCDriver_ADSDriver_ADS_WriteFloatValuePtr) (LibMCDriver_ADS_Driver_ADS pDriver_ADS, const char * pVariableName, LibMCDriver_ADS_double dValue);

/**
* Reads a value from an boolean Variable.
*
* @param[in] pDriver_ADS - Driver_ADS instance.
* @param[in] pVariableName - Name of variable.
* @param[out] pValue - Result value.
* @return error code or 0 (success)
*/
typedef LibMCDriver_ADSResult (*PLibMCDriver_ADSDriver_ADS_ReadBoolValuePtr) (LibMCDriver_ADS_Driver_ADS pDriver_ADS, const char * pVariableName, bool * pValue);

/**
* Reads a value from an boolean Variable.
*
* @param[in] pDriver_ADS - Driver_ADS instance.
* @param[in] pVariableName - Name of variable.
* @param[in] bValue - Value to set.
* @return error code or 0 (success)
*/
typedef LibMCDriver_ADSResult (*PLibMCDriver_ADSDriver_ADS_WriteBoolValuePtr) (LibMCDriver_ADS_Driver_ADS pDriver_ADS, const char * pVariableName, bool bValue);

/**
* Reads a value from an string Variable.
*
* @param[in] pDriver_ADS - Driver_ADS instance.
* @param[in] pVariableName - Name of variable.
* @param[in] nValueBufferSize - size of the buffer (including trailing 0)
* @param[out] pValueNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pValueBuffer -  buffer of Result value., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCDriver_ADSResult (*PLibMCDriver_ADSDriver_ADS_ReadStringValuePtr) (LibMCDriver_ADS_Driver_ADS pDriver_ADS, const char * pVariableName, const LibMCDriver_ADS_uint32 nValueBufferSize, LibMCDriver_ADS_uint32* pValueNeededChars, char * pValueBuffer);

/**
* Reads a value from an string Variable.
*
* @param[in] pDriver_ADS - Driver_ADS instance.
* @param[in] pVariableName - Name of variable.
* @param[in] pValue - Value to set.
* @return error code or 0 (success)
*/
typedef LibMCDriver_ADSResult (*PLibMCDriver_ADSDriver_ADS_WriteStringValuePtr) (LibMCDriver_ADS_Driver_ADS pDriver_ADS, const char * pVariableName, const char * pValue);

/**
* Returns the min and max value an integer variable can hold.
*
* @param[in] pDriver_ADS - Driver_ADS instance.
* @param[in] pVariableName - Name of variable. Fails if variable does not exist or is not an integer value.
* @param[out] pMinValue - Minimum value.
* @param[out] pMaxValue - Minimum value.
* @return error code or 0 (success)
*/
typedef LibMCDriver_ADSResult (*PLibMCDriver_ADSDriver_ADS_GetVariableBoundsPtr) (LibMCDriver_ADS_Driver_ADS pDriver_ADS, const char * pVariableName, LibMCDriver_ADS_int64 * pMinValue, LibMCDriver_ADS_int64 * pMaxValue);

/*************************************************************************************************************************
 Global functions
**************************************************************************************************************************/

/**
* retrieves the binary version of this library.
*
* @param[out] pMajor - returns the major version of this library
* @param[out] pMinor - returns the minor version of this library
* @param[out] pMicro - returns the micro version of this library
* @return error code or 0 (success)
*/
typedef LibMCDriver_ADSResult (*PLibMCDriver_ADSGetVersionPtr) (LibMCDriver_ADS_uint32 * pMajor, LibMCDriver_ADS_uint32 * pMinor, LibMCDriver_ADS_uint32 * pMicro);

/**
* Returns the last error recorded on this object
*
* @param[in] pInstance - Instance Handle
* @param[in] nErrorMessageBufferSize - size of the buffer (including trailing 0)
* @param[out] pErrorMessageNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pErrorMessageBuffer -  buffer of Message of the last error, may be NULL
* @param[out] pHasError - Is there a last error to query
* @return error code or 0 (success)
*/
typedef LibMCDriver_ADSResult (*PLibMCDriver_ADSGetLastErrorPtr) (LibMCDriver_ADS_Base pInstance, const LibMCDriver_ADS_uint32 nErrorMessageBufferSize, LibMCDriver_ADS_uint32* pErrorMessageNeededChars, char * pErrorMessageBuffer, bool * pHasError);

/**
* Releases shared ownership of an Instance
*
* @param[in] pInstance - Instance Handle
* @return error code or 0 (success)
*/
typedef LibMCDriver_ADSResult (*PLibMCDriver_ADSReleaseInstancePtr) (LibMCDriver_ADS_Base pInstance);

/**
* Acquires shared ownership of an Instance
*
* @param[in] pInstance - Instance Handle
* @return error code or 0 (success)
*/
typedef LibMCDriver_ADSResult (*PLibMCDriver_ADSAcquireInstancePtr) (LibMCDriver_ADS_Base pInstance);

/**
* Injects an imported component for usage within this component
*
* @param[in] pNameSpace - NameSpace of the injected component
* @param[in] pSymbolAddressMethod - Address of the SymbolAddressMethod of the injected component
* @return error code or 0 (success)
*/
typedef LibMCDriver_ADSResult (*PLibMCDriver_ADSInjectComponentPtr) (const char * pNameSpace, LibMCDriver_ADS_pvoid pSymbolAddressMethod);

/**
* Returns the address of the SymbolLookupMethod
*
* @param[out] pSymbolLookupMethod - Address of the SymbolAddressMethod
* @return error code or 0 (success)
*/
typedef LibMCDriver_ADSResult (*PLibMCDriver_ADSGetSymbolLookupMethodPtr) (LibMCDriver_ADS_pvoid * pSymbolLookupMethod);

/**
* Creates a driver instance with a specific name.
*
* @param[in] pName - Name of driver to be created.
* @param[in] pType - Type of driver to be created.
* @param[in] pDriverEnvironment - Environment of this driver.
* @param[out] pInstance - New Driver instance
* @return error code or 0 (success)
*/
typedef LibMCDriver_ADSResult (*PLibMCDriver_ADSCreateDriverPtr) (const char * pName, const char * pType, LibMCEnv_DriverEnvironment pDriverEnvironment, LibMCDriver_ADS_Driver * pInstance);

/*************************************************************************************************************************
 Function Table Structure
**************************************************************************************************************************/

typedef struct {
	void * m_LibraryHandle;
	PLibMCDriver_ADSDriver_ConfigurePtr m_Driver_Configure;
	PLibMCDriver_ADSDriver_GetNamePtr m_Driver_GetName;
	PLibMCDriver_ADSDriver_GetTypePtr m_Driver_GetType;
	PLibMCDriver_ADSDriver_GetVersionPtr m_Driver_GetVersion;
	PLibMCDriver_ADSDriver_QueryParametersPtr m_Driver_QueryParameters;
	PLibMCDriver_ADSDriver_QueryParametersExPtr m_Driver_QueryParametersEx;
	PLibMCDriver_ADSDriver_ADS_SetToSimulationModePtr m_Driver_ADS_SetToSimulationMode;
	PLibMCDriver_ADSDriver_ADS_IsSimulationModePtr m_Driver_ADS_IsSimulationMode;
	PLibMCDriver_ADSDriver_ADS_SetCustomSDKResourcePtr m_Driver_ADS_SetCustomSDKResource;
	PLibMCDriver_ADSDriver_ADS_ConnectPtr m_Driver_ADS_Connect;
	PLibMCDriver_ADSDriver_ADS_DisconnectPtr m_Driver_ADS_Disconnect;
	PLibMCDriver_ADSDriver_ADS_VariableExistsPtr m_Driver_ADS_VariableExists;
	PLibMCDriver_ADSDriver_ADS_ReadIntegerValuePtr m_Driver_ADS_ReadIntegerValue;
	PLibMCDriver_ADSDriver_ADS_WriteIntegerValuePtr m_Driver_ADS_WriteIntegerValue;
	PLibMCDriver_ADSDriver_ADS_ReadFloatValuePtr m_Driver_ADS_ReadFloatValue;
	PLibMCDriver_ADSDriver_ADS_WriteFloatValuePtr m_Driver_ADS_WriteFloatValue;
	PLibMCDriver_ADSDriver_ADS_ReadBoolValuePtr m_Driver_ADS_ReadBoolValue;
	PLibMCDriver_ADSDriver_ADS_WriteBoolValuePtr m_Driver_ADS_WriteBoolValue;
	PLibMCDriver_ADSDriver_ADS_ReadStringValuePtr m_Driver_ADS_ReadStringValue;
	PLibMCDriver_ADSDriver_ADS_WriteStringValuePtr m_Driver_ADS_WriteStringValue;
	PLibMCDriver_ADSDriver_ADS_GetVariableBoundsPtr m_Driver_ADS_GetVariableBounds;
	PLibMCDriver_ADSGetVersionPtr m_GetVersion;
	PLibMCDriver_ADSGetLastErrorPtr m_GetLastError;
	PLibMCDriver_ADSReleaseInstancePtr m_ReleaseInstance;
	PLibMCDriver_ADSAcquireInstancePtr m_AcquireInstance;
	PLibMCDriver_ADSInjectComponentPtr m_InjectComponent;
	PLibMCDriver_ADSGetSymbolLookupMethodPtr m_GetSymbolLookupMethod;
	PLibMCDriver_ADSCreateDriverPtr m_CreateDriver;
} sLibMCDriver_ADSDynamicWrapperTable;

#endif // __LIBMCDRIVER_ADS_DYNAMICHEADER_CPPTYPES

