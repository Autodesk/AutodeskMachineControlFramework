/*++

Copyright (C) 2020 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.8.0-develop.

Abstract: This is an autogenerated C++-Header file with basic types in
order to allow an easy use of MC Driver ADS

Interface version: 2.0.0

*/

#ifndef __LIBMCDRIVER_ADS_TYPES_HEADER_CPP
#define __LIBMCDRIVER_ADS_TYPES_HEADER_CPP


/*************************************************************************************************************************
 Scalar types definition
**************************************************************************************************************************/

#ifdef LIBMCDRIVER_ADS_USELEGACYINTEGERTYPES

typedef unsigned char LibMCDriver_ADS_uint8;
typedef unsigned short LibMCDriver_ADS_uint16 ;
typedef unsigned int LibMCDriver_ADS_uint32;
typedef unsigned long long LibMCDriver_ADS_uint64;
typedef char LibMCDriver_ADS_int8;
typedef short LibMCDriver_ADS_int16;
typedef int LibMCDriver_ADS_int32;
typedef long long LibMCDriver_ADS_int64;

#else // LIBMCDRIVER_ADS_USELEGACYINTEGERTYPES

#include <stdint.h>

typedef uint8_t LibMCDriver_ADS_uint8;
typedef uint16_t LibMCDriver_ADS_uint16;
typedef uint32_t LibMCDriver_ADS_uint32;
typedef uint64_t LibMCDriver_ADS_uint64;
typedef int8_t LibMCDriver_ADS_int8;
typedef int16_t LibMCDriver_ADS_int16;
typedef int32_t LibMCDriver_ADS_int32;
typedef int64_t LibMCDriver_ADS_int64 ;

#endif // LIBMCDRIVER_ADS_USELEGACYINTEGERTYPES

typedef float LibMCDriver_ADS_single;
typedef double LibMCDriver_ADS_double;

/*************************************************************************************************************************
 General type definitions
**************************************************************************************************************************/

typedef LibMCDriver_ADS_int32 LibMCDriver_ADSResult;
typedef void * LibMCDriver_ADSHandle;
typedef void * LibMCDriver_ADS_pvoid;

/*************************************************************************************************************************
 Version for LibMCDriver_ADS
**************************************************************************************************************************/

#define LIBMCDRIVER_ADS_VERSION_MAJOR 2
#define LIBMCDRIVER_ADS_VERSION_MINOR 0
#define LIBMCDRIVER_ADS_VERSION_MICRO 0
#define LIBMCDRIVER_ADS_VERSION_PRERELEASEINFO ""
#define LIBMCDRIVER_ADS_VERSION_BUILDINFO ""

/*************************************************************************************************************************
 Error constants for LibMCDriver_ADS
**************************************************************************************************************************/

#define LIBMCDRIVER_ADS_SUCCESS 0
#define LIBMCDRIVER_ADS_ERROR_NOTIMPLEMENTED 1 /** functionality not implemented */
#define LIBMCDRIVER_ADS_ERROR_INVALIDPARAM 2 /** an invalid parameter was passed */
#define LIBMCDRIVER_ADS_ERROR_INVALIDCAST 3 /** a type cast failed */
#define LIBMCDRIVER_ADS_ERROR_BUFFERTOOSMALL 4 /** a provided buffer is too small */
#define LIBMCDRIVER_ADS_ERROR_GENERICEXCEPTION 5 /** a generic exception occurred */
#define LIBMCDRIVER_ADS_ERROR_COULDNOTLOADLIBRARY 6 /** the library could not be loaded */
#define LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT 7 /** a required exported symbol could not be found in the library */
#define LIBMCDRIVER_ADS_ERROR_INCOMPATIBLEBINARYVERSION 8 /** the version of the binary interface does not match the bindings interface */
#define LIBMCDRIVER_ADS_ERROR_DRIVERERROR 1000 /** a driver error occured */
#define LIBMCDRIVER_ADS_ERROR_DRIVERNOTINITIALISED 1001 /** the driver is not initialised */
#define LIBMCDRIVER_ADS_ERROR_DRIVERNOTCONNECTED 1002 /** the driver is not connected */
#define LIBMCDRIVER_ADS_ERROR_INVALIDDRIVERPROTOCOL 1003 /** invalid driver protocol definition */
#define LIBMCDRIVER_ADS_ERROR_COULDNOTPARSEDRIVERPROTOCOL 1004 /** could not parse driver protocol */
#define LIBMCDRIVER_ADS_ERROR_NOTCONNECTED 1005 /** Not connected */
#define LIBMCDRIVER_ADS_ERROR_INTEGERVALUEOUTOFRANGE 1006 /** Integer value out of range */
#define LIBMCDRIVER_ADS_ERROR_COULDNOTREADDATA 1007 /** Could not read data */
#define LIBMCDRIVER_ADS_ERROR_COULDNOTREADHANDLEVALUE 1008 /** Could not read handle value */
#define LIBMCDRIVER_ADS_ERROR_NAMELENGTHEXCEEDSMAXIMUM 1009 /** Name length exceeds maximum */
#define LIBMCDRIVER_ADS_ERROR_NOVERSIONDEFINITION 1010 /** No version definition */
#define LIBMCDRIVER_ADS_ERROR_NOMAJORVERSION 1011 /** No major version */
#define LIBMCDRIVER_ADS_ERROR_NOMINORVERSION 1012 /** No minor version */
#define LIBMCDRIVER_ADS_ERROR_NOPATCHVERSION 1013 /** No patch version */
#define LIBMCDRIVER_ADS_ERROR_NOVARIABLEDEFINITION 1014 /** No variable definition */
#define LIBMCDRIVER_ADS_ERROR_DRIVERNOTCONFIGURED 1015 /** Driver not configured */
#define LIBMCDRIVER_ADS_ERROR_VARIABLEISNOTINTEGER 1016 /** Variable is not integer */
#define LIBMCDRIVER_ADS_ERROR_VARIABLEISNOTBOOLEAN 1017 /** Variable is not a boolean */
#define LIBMCDRIVER_ADS_ERROR_VARIABLENOTFOUND 1018 /** Variable not found */
#define LIBMCDRIVER_ADS_ERROR_VARIABLEISNOTFLOAT 1019 /** Variable is not a float */
#define LIBMCDRIVER_ADS_ERROR_VARIABLEISNOTSTRING 1020 /** Variable is not a string */
#define LIBMCDRIVER_ADS_ERROR_VARIABLEISNOTSTRUCT 1021 /** Variable is not a struct */
#define LIBMCDRIVER_ADS_ERROR_VARIABLENAMEMISSING 1022 /** Variable name missing */
#define LIBMCDRIVER_ADS_ERROR_VARIABLEDESCRIPTIONMISSING 1023 /** Variable description missing */
#define LIBMCDRIVER_ADS_ERROR_VARIABLEADSNAMEMISSING 1024 /** variable ads name missing */
#define LIBMCDRIVER_ADS_ERROR_VARIABLEACCESSMISSING 1025 /** variable access missing */
#define LIBMCDRIVER_ADS_ERROR_INVALIDVARIABLEACCESS 1026 /** invalid variable access */
#define LIBMCDRIVER_ADS_ERROR_INVALIDVARIABLETYPE 1027 /** invalid variable type */
#define LIBMCDRIVER_ADS_ERROR_INVALIDSTRINGBUFFERLENGTH 1028 /** invalid string buffer length */
#define LIBMCDRIVER_ADS_ERROR_STRINGLENGTHEXCEEDSBUFFERSIZE 1029 /** string length exceeds buffer size */
#define LIBMCDRIVER_ADS_ERROR_STRINGLENGTHMISSING 1030 /** string length missing */
#define LIBMCDRIVER_ADS_ERROR_INVALIDSTRINGLENGTH 1031 /** invalid string length */
#define LIBMCDRIVER_ADS_ERROR_INVALIDADSSDKRESOURCE 1032 /** invalid ads sdk resource */

/*************************************************************************************************************************
 Error strings for LibMCDriver_ADS
**************************************************************************************************************************/

inline const char * LIBMCDRIVER_ADS_GETERRORSTRING (LibMCDriver_ADSResult nErrorCode) {
  switch (nErrorCode) {
    case LIBMCDRIVER_ADS_SUCCESS: return "no error";
    case LIBMCDRIVER_ADS_ERROR_NOTIMPLEMENTED: return "functionality not implemented";
    case LIBMCDRIVER_ADS_ERROR_INVALIDPARAM: return "an invalid parameter was passed";
    case LIBMCDRIVER_ADS_ERROR_INVALIDCAST: return "a type cast failed";
    case LIBMCDRIVER_ADS_ERROR_BUFFERTOOSMALL: return "a provided buffer is too small";
    case LIBMCDRIVER_ADS_ERROR_GENERICEXCEPTION: return "a generic exception occurred";
    case LIBMCDRIVER_ADS_ERROR_COULDNOTLOADLIBRARY: return "the library could not be loaded";
    case LIBMCDRIVER_ADS_ERROR_COULDNOTFINDLIBRARYEXPORT: return "a required exported symbol could not be found in the library";
    case LIBMCDRIVER_ADS_ERROR_INCOMPATIBLEBINARYVERSION: return "the version of the binary interface does not match the bindings interface";
    case LIBMCDRIVER_ADS_ERROR_DRIVERERROR: return "a driver error occured";
    case LIBMCDRIVER_ADS_ERROR_DRIVERNOTINITIALISED: return "the driver is not initialised";
    case LIBMCDRIVER_ADS_ERROR_DRIVERNOTCONNECTED: return "the driver is not connected";
    case LIBMCDRIVER_ADS_ERROR_INVALIDDRIVERPROTOCOL: return "invalid driver protocol definition";
    case LIBMCDRIVER_ADS_ERROR_COULDNOTPARSEDRIVERPROTOCOL: return "could not parse driver protocol";
    case LIBMCDRIVER_ADS_ERROR_NOTCONNECTED: return "Not connected";
    case LIBMCDRIVER_ADS_ERROR_INTEGERVALUEOUTOFRANGE: return "Integer value out of range";
    case LIBMCDRIVER_ADS_ERROR_COULDNOTREADDATA: return "Could not read data";
    case LIBMCDRIVER_ADS_ERROR_COULDNOTREADHANDLEVALUE: return "Could not read handle value";
    case LIBMCDRIVER_ADS_ERROR_NAMELENGTHEXCEEDSMAXIMUM: return "Name length exceeds maximum";
    case LIBMCDRIVER_ADS_ERROR_NOVERSIONDEFINITION: return "No version definition";
    case LIBMCDRIVER_ADS_ERROR_NOMAJORVERSION: return "No major version";
    case LIBMCDRIVER_ADS_ERROR_NOMINORVERSION: return "No minor version";
    case LIBMCDRIVER_ADS_ERROR_NOPATCHVERSION: return "No patch version";
    case LIBMCDRIVER_ADS_ERROR_NOVARIABLEDEFINITION: return "No variable definition";
    case LIBMCDRIVER_ADS_ERROR_DRIVERNOTCONFIGURED: return "Driver not configured";
    case LIBMCDRIVER_ADS_ERROR_VARIABLEISNOTINTEGER: return "Variable is not integer";
    case LIBMCDRIVER_ADS_ERROR_VARIABLEISNOTBOOLEAN: return "Variable is not a boolean";
    case LIBMCDRIVER_ADS_ERROR_VARIABLENOTFOUND: return "Variable not found";
    case LIBMCDRIVER_ADS_ERROR_VARIABLEISNOTFLOAT: return "Variable is not a float";
    case LIBMCDRIVER_ADS_ERROR_VARIABLEISNOTSTRING: return "Variable is not a string";
    case LIBMCDRIVER_ADS_ERROR_VARIABLEISNOTSTRUCT: return "Variable is not a struct";
    case LIBMCDRIVER_ADS_ERROR_VARIABLENAMEMISSING: return "Variable name missing";
    case LIBMCDRIVER_ADS_ERROR_VARIABLEDESCRIPTIONMISSING: return "Variable description missing";
    case LIBMCDRIVER_ADS_ERROR_VARIABLEADSNAMEMISSING: return "variable ads name missing";
    case LIBMCDRIVER_ADS_ERROR_VARIABLEACCESSMISSING: return "variable access missing";
    case LIBMCDRIVER_ADS_ERROR_INVALIDVARIABLEACCESS: return "invalid variable access";
    case LIBMCDRIVER_ADS_ERROR_INVALIDVARIABLETYPE: return "invalid variable type";
    case LIBMCDRIVER_ADS_ERROR_INVALIDSTRINGBUFFERLENGTH: return "invalid string buffer length";
    case LIBMCDRIVER_ADS_ERROR_STRINGLENGTHEXCEEDSBUFFERSIZE: return "string length exceeds buffer size";
    case LIBMCDRIVER_ADS_ERROR_STRINGLENGTHMISSING: return "string length missing";
    case LIBMCDRIVER_ADS_ERROR_INVALIDSTRINGLENGTH: return "invalid string length";
    case LIBMCDRIVER_ADS_ERROR_INVALIDADSSDKRESOURCE: return "invalid ads sdk resource";
    default: return "unknown error";
  }
}

/*************************************************************************************************************************
 Declaration of handle classes 
**************************************************************************************************************************/

typedef LibMCDriver_ADSHandle LibMCDriver_ADS_Base;
typedef LibMCDriver_ADSHandle LibMCDriver_ADS_Driver;
typedef LibMCDriver_ADSHandle LibMCDriver_ADS_Driver_ADS;

namespace LibMCDriver_ADS {

} // namespace LibMCDriver_ADS;

// define legacy C-names for enums, structs and function types

#endif // __LIBMCDRIVER_ADS_TYPES_HEADER_CPP
