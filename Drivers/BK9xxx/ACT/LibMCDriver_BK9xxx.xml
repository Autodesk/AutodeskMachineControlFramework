<?xml version="1.0" encoding="UTF-8"?>
<component xmlns="http://schemas.autodesk.com/netfabb/automaticcomponenttoolkit/2018" 
	libraryname="MC Driver Beckhoff BK9xxx bus coupler" namespace="LibMCDriver_BK9xxx" copyright="Autodesk Inc." year="2023" basename="libmcdriver_bk9xxx"
	version="2.0.0">
	<license>
		<line value="All rights reserved." />
		<line value="" />
		<line value="Redistribution and use in source and binary forms, with or without" />
		<line value="modification, are permitted provided that the following conditions are met:" />
		<line value="    * Redistributions of source code must retain the above copyright" />
		<line value="      notice, this list of conditions and the following disclaimer." />
		<line value="    * Redistributions in binary form must reproduce the above copyright" />
		<line value="      notice, this list of conditions and the following disclaimer in the" />
		<line value="      documentation and/or other materials provided with the distribution." />
		<line value="    * Neither the name of the Autodesk Inc. nor the" />
		<line value="      names of its contributors may be used to endorse or promote products" />
		<line value="      derived from this software without specific prior written permission." />
		<line value="" />
		<line value="THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND" />
		<line value="ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED" />
		<line value="WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE" />
		<line value="DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY" />
		<line value="DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES" />
		<line value="(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;" />
		<line value="LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND" />
		<line value="ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT" />
		<line value="(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS" />
		<line value="SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." />
		<line value="" />
	</license>
	
	<bindings>
		<binding language="CppDynamic" indentation="tabs" documentation="1" />
	</bindings>
	<implementations>
		<implementation language="Cpp" indentation="tabs"/>
	</implementations>
	
	
	<importcomponent uri="../../../ACT/LibMCEnv.xml" namespace="LibMCEnv"/>
	
	<errors>
		<error name="NOTIMPLEMENTED" code="1" description="functionality not implemented" />
		<error name="INVALIDPARAM" code="2" description="an invalid parameter was passed" />
		<error name="INVALIDCAST" code="3" description="a type cast failed" />
		<error name="BUFFERTOOSMALL" code="4" description="a provided buffer is too small" />
		<error name="GENERICEXCEPTION" code="5" description="a generic exception occurred" />
		<error name="COULDNOTLOADLIBRARY" code="6" description="the library could not be loaded" />
		<error name="COULDNOTFINDLIBRARYEXPORT" code="7" description="a required exported symbol could not be found in the library" />
		<error name="INCOMPATIBLEBINARYVERSION" code="8" description="the version of the binary interface does not match the bindings interface" />
		<error name="UNKNOWNEXCEPTION" code="9" description="an unknown exception occurred" />

		<error name="DRIVERERROR" code="1000" description="a driver error occured" />
		<error name="DRIVERNOTINITIALISED" code="1001" description="the driver is not initialised" />
		<error name="DRIVERNOTCONNECTED" code="1002" description="the driver is not connected" />
		<error name="INVALIDDRIVERPROTOCOL" code="1003" description="invalid driver protocol definition" />
		<error name="COULDNOTPARSEDRIVERPROTOCOL" code="1004" description="could not parse driver protocol" />
		
		<error name="NOTCONNECTED" code="1005" description="Not connected" />
		<error name="SETSIMULATIONMODEBEFORECONNECTING" code="1006" description="Set error simulation mode before connecting." />
		<error name="NOVERSIONDEFINITION" code="1007" description="no version definition" />
		<error name="NOMAJORVERSION" code="1008" description="no major version" />
		<error name="NOMINORVERSION" code="1009" description="no minor version" />
		<error name="NOPATCHVERSION" code="1010" description="no patch version" />
		<error name="NOCONFIGURATIONSCHEMA" code="1011" description="no configuration schema" />
		<error name="INVALIDCONFIGURATIONSCHEMA" code="1012" description="invalid configuration schema" />
		
		<error name="MISSINGDIGITALIOOFFSET" code="1013" description="missing digital IO offset" />
		<error name="INVALIDDIGITALIOOFFSET" code="1014" description="invalid digital IO offset" />
		<error name="MISSINGDIGITALIONAME" code="1015" description="missing digitial IO name" />
		<error name="EMPTYDIGITALIONAME" code="1016" description="empty digitial IO name" />
		<error name="INVALIDDIGITALIOINDEX" code="1017" description="invalid digital IO index" />
		<error name="DIGITALIONOTFOUND" code="1018" description="digital IO not found" />		
		<error name="DUPLICATEDIGITALINPUT" code="1019" description="duplicate digital input" />
		<error name="DUPLICATEDIGITALOUTPUT" code="1020" description="duplicate digital output" />		
		<error name="MISSINGDIGITALIOSTARTADDRESS" code="1021" description="missing digitial io start address"/>
		<error name="INVALIDDIGITALIOSTARTADDRESS" code="1022" description="invalid digital io start address" />
		<error name="MISSINGDIGITALIOBITCOUNT" code="1023" description="missing digital io bit count" />
		<error name="INVALIDDIGITALIOBITCOUNT" code="1024" description="invalid digital io bit count" />
		<error name="MISSINGANALOGIOOFFSET" code="1025" description="missing analog IO offset" />
		<error name="INVALIDANALOGIOOFFSET" code="1026" description="invalid analog IO offset" />
		<error name="MISSINGANALOGIONAME" code="1027" description="missing analog IO name" />
		<error name="EMPTYANALOGIONAME" code="1028" description="empty analog IO name" />
		<error name="INVALIDANALOGIOINDEX" code="1029" description="invalid analog IO index" />
		<error name="ANALOGIONOTFOUND" code="1030" description="analog IO not found" />		
		<error name="DUPLICATEANALOGINPUT" code="1031" description="duplicate analog input" />
		<error name="DUPLICATEANALOGOUTPUT" code="1032" description="duplicate analog output" />		
		<error name="MISSINGANALOGIOSTARTADDRESS" code="1033" description="missing analog io start address"/>
		<error name="INVALIDANALOGIOSTARTADDRESS" code="1034" description="invalid analog io start address" />
		<error name="MISSINGANALOGIOREGISTERCOUNT" code="1035" description="missing analog io register count" />
		<error name="INVALIDANALOGIOREGISTERCOUNT" code="1036" description="invalid analog io register count" />
		<error name="DUPLICATEVARIABLENAME" code="1037" description="duplicate variable name" />
		<error name="VARIABLENOTFOUND" code="1038" description="variable not found" />
		<error name="MISSINGANALOGIORAWMINVALUE" code="1039" description="missing analog io raw min value" />
		<error name="MISSINGANALOGIORAWMAXVALUE" code="1040" description="missing analog io raw max value" />
		<error name="INVALIDANALOGIORAWMINVALUE" code="1041" description="invalid analog io raw min value" />
		<error name="INVALIDANALOGIORAWMAXVALUE" code="1042" description="invalid analog io raw max value" />
		<error name="INVALIDANALOGIORAWINTERVAL" code="1043" description="invalid analog io raw interval" />
		<error name="MISSINGANALOGIOSCALEDMINVALUE" code="1044" description="missing analog io scaled min value" />
		<error name="MISSINGANALOGIOSCALEDMAXVALUE" code="1045" description="missing analog io scaled max value" />
		<error name="INVALIDANALOGIOSCALEDMINVALUE" code="1046" description="invalid analog io scaled min value" />
		<error name="INVALIDANALOGIOSCALEDMAXVALUE" code="1047" description="invalid analog io scaled max value" />
		<error name="INVALIDANALOGIOSCALEDINTERVAL" code="1048" description="invalid analog io scaled interval" />
		<error name="DIGITALIOOFFSETOUTOFRANGE" code="1049" description="digital io offset is out of range" />
		<error name="ANALOGIOOFFSETOUTOFRANGE" code="1050" description="analog io offset is out of range" />
		<error name="DIGITALIOWRITETIMEOUT" code="1051" description="digital io write timeout" />
		<error name="ANALOGIOWRITETIMEOUT" code="1052" description="analog io write timeout" />
		
								
	</errors>

	
	<enum name="VariableType">
		<option name="Unknown" value="0"/>
		<option name="DigitalInput" value="1"/>
		<option name="DigitalOutput" value="2"/>
		<option name="AnalogInput" value="3"/>
		<option name="AnalogOutput" value="4"/>
	</enum>	
	
	<enum name="ErrorState">
		<option name="NoError" value="0" />
		<option name="ConnectionFailed" value="1" />
		<option name="AttemptingReconnection" value="2" />
		<option name="ReconnectionFailed" value="3" />
		<option name="ConnectionLost" value="4" />
	</enum>	
	
	
<!--

This base Driver interface MUST be in Sync with LibMCDriver.xml

-->
	
	<class name="Base">
	</class>

	
	<class name="Driver" parent="Base" description="An abstract Machine Control Driver">

		<method name="Configure" description = "Configures a driver with its specific configuration data.">
			<param name="ConfigurationString" type="string" pass="in" description="Configuration data of driver." />
		</method>
	
		<method name="GetName" description = "returns the name identifier of the driver">
			<param name="Name" type="string" pass="return" description="Name of the driver." />
		</method>

		<method name="GetType" description = "returns the type identifier of the driver">
			<param name="Type" type="string" pass="return" description="Type of the driver." />
		</method>

		<method name="GetVersion" description = "returns the version identifiers of the driver">
			<param name="Major" type="uint32" pass="out" description="Major version." />
			<param name="Minor" type="uint32" pass="out" description="Minor version." />
			<param name="Micro" type="uint32" pass="out" description="Micro version." />
			<param name="Build" type="string" pass="out" description="Build identifier." />
		</method>
		
		<method name="QueryParameters" description = "Updates the driver parameters in the driver environment. Might be called out of thread. Implementation MUST be able to handle parallel calls.">
			<param name="DriverUpdateInstance" type="class" class="LibMCEnv:DriverStatusUpdateSession" pass="in" description="Status update instance." />
		</method>	
		
	</class>

<!--

End Interface

-->


<!--

Custom implementation

-->


	<class name="Driver_BK9xxx" parent="Driver" description="A Driver for a Beckhoff BK9000, 9050 or 9100 bus coupler protocol.">

		<method name="SetToSimulationMode" description="Turns the driver into a simulation mode.">		
		</method>
		
		<method name="IsSimulationMode" description="Returns if the driver is in simulation mode.">		
			<param name="SimulationModeEnabled" type="bool" pass="return" description="Flag if driver is in simulation mode." />
		</method>	
		
		<method name="Connect" description= "Connects to a BK9xxx bus coupler.">
			<param name="IPAddress" type="string" pass="in" description="Address of BK9xxx coupler." />
			<param name="Port" type="uint32" pass="in" description="Modbus TCP port of BK9xxx coupler. (Usually 502)." />
			<param name="TimeOutInMs" type="uint32" pass="in" description="Connection timeout in milliseconds." />				
		</method>

		<method name="GetIPAddress" description= "Returns the IP Address of the connection.">
			<param name="IPAddress" type="string" pass="return" description="Address of BK9xxx coupler." />
		</method>

		<method name="GetPort" description= "Returns the Port of the connection.">
			<param name="Port" type="uint32" pass="return" description="Modbus TCP port of BK9xxx coupler. (Usually 502)." />
		</method>
		
		<method name="GetTimeOut" description= "Returns the Timeout of the connection.">
			<param name="TimeOutInMs" type="uint32" pass="return" description="Connection timeout in milliseconds." />				
		</method>

		<method name="SetErrorRecoveryMode" description= "Sets the connection recovery mode.">
			<param name="ReconnectionDelayInMs" type="uint32" pass="in" description="If connection is lost, how much time should be waited to reconnect in Milliseconds. Default is 300." />
			<param name="ReconnectionCount" type="uint32" pass="in" description="How many times should a reconnection be attempted. Default is 3." />
		</method>

		<method name="GetErrorRecoveryMode" description= "Gets the connection recovery mode.">
			<param name="ReconnectionDelayInMs" type="uint32" pass="out" description="If connection is lost, how much time should be waited to reconnect in Milliseconds. Default is 300." />
			<param name="ReconnectionCount" type="uint32" pass="in" description="How many times should a reconnection be attempted. Default is 3." />
		</method>

		<method name="Disconnect" description= "Disconnects from the Bus coupler.">
		</method>		

		<method name="ResetDevice" description="Resets the Bk9xxx bus coupler. Fails if not connected.">
		</method>	

		<method name="Reconnect" description="Reconnects to the Bk9xxx bus coupler. Fails if Connect has never been called.">
		</method>	
				
		<method name="IsConnected" description="Returns if the the Bk9xxx bus coupler is connected.">
			<param name="IsConnected" type="bool" pass="return" description="Flag if BK9xxx is connected." />				
		</method>	

		<method name="GetErrorState" description="Returns the error state of the Bk9xxx bus coupler connection.">
			<param name="ErrorState" type="enum" class="ErrorState" pass="return" description="Error state of the connection." />				
		</method>	

		<method name="VariableExists" description="Returns if any input or output exists by this name.">
			<param name="Name" type="string" pass="in" description="Name of variable." />
			<param name="NameExists" type="bool" pass="return" description="Flag if value exists." />
		</method>		
		
		<method name="GetVariableType" description="Returns type of a variable.">
			<param name="Name" type="string" pass="in" description="Name of variable." />
			<param name="VariableType" type="enum" class="VariableType" pass="return" description="Type of variable." />
		</method>		

		<method name="DigitalInputExists" description="Returns if a digital input exists.">
			<param name="Name" type="string" pass="in" description="Name of variable." />
			<param name="NameExists" type="bool" pass="return" description="Flag if value exists." />
		</method>		

		<method name="DigitalOutputExists" description="Returns if a digital output exists.">
			<param name="Name" type="string" pass="in" description="Name of variable." />
			<param name="NameExists" type="bool" pass="return" description="Flag if value exists." />
		</method>		

		<method name="AnalogInputExists" description="Returns if an analog input exists.">
			<param name="Name" type="string" pass="in" description="Name of variable." />
			<param name="NameExists" type="bool" pass="return" description="Flag if value exists." />
		</method>		

		<method name="AnalogOutputExists" description="Returns if an analog output exists.">
			<param name="Name" type="string" pass="in" description="Name of variable." />
			<param name="NameExists" type="bool" pass="return" description="Flag if value exists." />
		</method>				

		<method name="GetDigitalInput" description="Reads a value from an digital input variable. Fails if variable does not exist.">
			<param name="VariableName" type="string" pass="in" description="Name of variable." />
			<param name="Value" type="bool" pass="return" description="Result value." />
		</method>		
		
		<method name="GetDigitalOutput" description="Reads a value from an digital output variable. Fails if variable does not exist.">
			<param name="VariableName" type="string" pass="in" description="Name of variable." />
			<param name="Value" type="bool" pass="return" description="Result value." />
		</method>		

		<method name="GetAnalogInputRaw" description="Reads a raw value from an analog input variable. Fails if variable does not exist.">
			<param name="VariableName" type="string" pass="in" description="Name of variable." />
			<param name="Value" type="uint32" pass="return" description="Result value." />
		</method>		
		
		<method name="GetAnalogOutputRaw" description="Reads a raw value from an analog output variable. Fails if variable does not exist.">
			<param name="VariableName" type="string" pass="in" description="Name of variable." />
			<param name="Value" type="uint32" pass="return" description="Result value." />
		</method>		

		<method name="GetAnalogInput" description="Reads a scaled value from an analog input variable. Fails if variable does not exist.">
			<param name="VariableName" type="string" pass="in" description="Name of variable." />
			<param name="Value" type="double" pass="return" description="Result value." />
		</method>		
		
		<method name="GetAnalogOutput" description="Reads a scaled value from an analog output variable. Fails if variable does not exist.">
			<param name="VariableName" type="string" pass="in" description="Name of variable." />
			<param name="Value" type="double" pass="return" description="Result value." />
		</method>		

		<method name="SetDigitalOutput" description="Writes a value to a digital output variable. Fails if variable does not exist.">
			<param name="VariableName" type="string" pass="in" description="Name of variable." />
			<param name="Value" type="bool" pass="in" description="Value to be set." />
			<param name="TimeOutInMs" type="uint32" pass="in" description="If Timeout is larger than 0, the call waits until the end point has acknowledged that the new value has been set. If timeout is 0, the call returns immediately, even if the end point might not have changed the value yet." />
		</method>		

		<method name="SetAnalogOutputRaw" description="Writes a raw value to an analog output variable. Fails if variable does not exist.">
			<param name="VariableName" type="string" pass="in" description="Name of variable." />
			<param name="Value" type="uint32" pass="in" description="Value to be set." />
			<param name="TimeOutInMs" type="uint32" pass="in" description="If Timeout is larger than 0, the call waits until the end point has acknowledged that the new value has been set. If timeout is 0, the call returns immediately, even if the end point might not have changed the value yet." />
		</method>		

		<method name="SetAnalogOutput" description="Writes a scaled value to an analog output variable. Fails if variable does not exist.">
			<param name="VariableName" type="string" pass="in" description="Name of variable." />
			<param name="Value" type="double" pass="in" description="Value to be set." />
			<param name="TimeOutInMs" type="uint32" pass="in" description="If Timeout is larger than 0, the call waits until the end point has acknowledged that the new value has been set. If timeout is 0, the call returns immediately, even if the end point might not have changed the value yet." />
		</method>		


	</class>




<!--

End of Custom implementation

-->

		
	<global baseclassname="Base" stringoutclassname="Base" releasemethod="ReleaseInstance" acquiremethod="AcquireInstance" versionmethod="GetVersion" errormethod="GetLastError" injectionmethod="InjectComponent" symbollookupmethod="GetSymbolLookupMethod">
		
		<method name="GetVersion" description = "retrieves the binary version of this library.">
			<param name="Major" type="uint32" pass="out" description="returns the major version of this library" />
			<param name="Minor" type="uint32" pass="out" description="returns the minor version of this library" />
			<param name="Micro" type="uint32" pass="out" description="returns the micro version of this library" />
		</method>
		<method name="GetLastError" description="Returns the last error recorded on this object">
			<param name="Instance" type="class" class="Base" pass="in" description="Instance Handle" />
			<param name="ErrorMessage" type="string" pass="out" description="Message of the last error" />
			<param name="HasError" type="bool" pass="return" description="Is there a last error to query" />
		</method>
		<method name="ReleaseInstance" description="Releases shared ownership of an Instance">
			<param name="Instance" type="class" class="Base" pass="in" description="Instance Handle" />
		</method>
		<method name="AcquireInstance" description="Acquires shared ownership of an Instance">
			<param name="Instance" type="class" class="Base" pass="in" description="Instance Handle" />
		</method>
		<method name="InjectComponent" description="Injects an imported component for usage within this component">
			<param name="NameSpace" type="string" pass="in" description="NameSpace of the injected component" />
			<param name="SymbolAddressMethod" type="pointer" pass="in" description="Address of the SymbolAddressMethod of the injected component" />
		</method>		
		<method name="GetSymbolLookupMethod" description="Returns the address of the SymbolLookupMethod">
			<param name="SymbolLookupMethod" type="pointer" pass="return" description="Address of the SymbolAddressMethod" />
		</method>				
		<method name="CreateDriver" description="Creates a driver instance with a specific name.">
			<param name="Name" type="string" pass="in" description="Name of driver to be created." />
			<param name="Type" type="string" pass="in" description="Type of driver to be created." />
			<param name="DriverEnvironment" type="class" class="LibMCEnv:DriverEnvironment" pass="in" description="Environment of this driver." />
			<param name="Instance" type="optionalclass" class="Driver" pass="return" description="New Driver instance" />
		</method>
		
	</global>
	
	
</component>


