/*++

Copyright (C) 2023 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.8.0-develop.

Abstract: This is an autogenerated C++-Header file in order to allow an easy
 use of MC Driver Beckhoff BK9xxx bus coupler

Interface version: 2.0.0

*/

#ifndef __LIBMCDRIVER_BK9XXX_HEADER_CPP
#define __LIBMCDRIVER_BK9XXX_HEADER_CPP

#ifdef __LIBMCDRIVER_BK9XXX_EXPORTS
#ifdef _WIN32
#define LIBMCDRIVER_BK9XXX_DECLSPEC __declspec (dllexport)
#else // _WIN32
#define LIBMCDRIVER_BK9XXX_DECLSPEC __attribute__((visibility("default")))
#endif // _WIN32
#else // __LIBMCDRIVER_BK9XXX_EXPORTS
#define LIBMCDRIVER_BK9XXX_DECLSPEC
#endif // __LIBMCDRIVER_BK9XXX_EXPORTS

#include "libmcdriver_bk9xxx_types.hpp"

#include "libmcenv_dynamic.hpp"

#ifdef __cplusplus
extern "C" {
#endif

/*************************************************************************************************************************
 Class definition for Base
**************************************************************************************************************************/

/*************************************************************************************************************************
 Class definition for Driver
**************************************************************************************************************************/

/**
* Configures a driver with its specific configuration data.
*
* @param[in] pDriver - Driver instance.
* @param[in] pConfigurationString - Configuration data of driver.
* @return error code or 0 (success)
*/
LIBMCDRIVER_BK9XXX_DECLSPEC LibMCDriver_BK9xxxResult libmcdriver_bk9xxx_driver_configure(LibMCDriver_BK9xxx_Driver pDriver, const char * pConfigurationString);

/**
* returns the name identifier of the driver
*
* @param[in] pDriver - Driver instance.
* @param[in] nNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNameBuffer -  buffer of Name of the driver., may be NULL
* @return error code or 0 (success)
*/
LIBMCDRIVER_BK9XXX_DECLSPEC LibMCDriver_BK9xxxResult libmcdriver_bk9xxx_driver_getname(LibMCDriver_BK9xxx_Driver pDriver, const LibMCDriver_BK9xxx_uint32 nNameBufferSize, LibMCDriver_BK9xxx_uint32* pNameNeededChars, char * pNameBuffer);

/**
* returns the type identifier of the driver
*
* @param[in] pDriver - Driver instance.
* @param[in] nTypeBufferSize - size of the buffer (including trailing 0)
* @param[out] pTypeNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pTypeBuffer -  buffer of Type of the driver., may be NULL
* @return error code or 0 (success)
*/
LIBMCDRIVER_BK9XXX_DECLSPEC LibMCDriver_BK9xxxResult libmcdriver_bk9xxx_driver_gettype(LibMCDriver_BK9xxx_Driver pDriver, const LibMCDriver_BK9xxx_uint32 nTypeBufferSize, LibMCDriver_BK9xxx_uint32* pTypeNeededChars, char * pTypeBuffer);

/**
* returns the version identifiers of the driver
*
* @param[in] pDriver - Driver instance.
* @param[out] pMajor - Major version.
* @param[out] pMinor - Minor version.
* @param[out] pMicro - Micro version.
* @param[in] nBuildBufferSize - size of the buffer (including trailing 0)
* @param[out] pBuildNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pBuildBuffer -  buffer of Build identifier., may be NULL
* @return error code or 0 (success)
*/
LIBMCDRIVER_BK9XXX_DECLSPEC LibMCDriver_BK9xxxResult libmcdriver_bk9xxx_driver_getversion(LibMCDriver_BK9xxx_Driver pDriver, LibMCDriver_BK9xxx_uint32 * pMajor, LibMCDriver_BK9xxx_uint32 * pMinor, LibMCDriver_BK9xxx_uint32 * pMicro, const LibMCDriver_BK9xxx_uint32 nBuildBufferSize, LibMCDriver_BK9xxx_uint32* pBuildNeededChars, char * pBuildBuffer);

/**
* Updates the driver parameters in the driver environment. Should only be called in the driver thread.
*
* @param[in] pDriver - Driver instance.
* @return error code or 0 (success)
*/
LIBMCDRIVER_BK9XXX_DECLSPEC LibMCDriver_BK9xxxResult libmcdriver_bk9xxx_driver_queryparameters(LibMCDriver_BK9xxx_Driver pDriver);

/**
* Updates the driver parameters in the driver environment. Might be called out of thread. Implementation MUST be able to handle parallel calls.
*
* @param[in] pDriver - Driver instance.
* @param[in] pDriverUpdateInstance - Status update instance.
* @return error code or 0 (success)
*/
LIBMCDRIVER_BK9XXX_DECLSPEC LibMCDriver_BK9xxxResult libmcdriver_bk9xxx_driver_queryparametersex(LibMCDriver_BK9xxx_Driver pDriver, LibMCEnv_DriverStatusUpdateSession pDriverUpdateInstance);

/*************************************************************************************************************************
 Class definition for Driver_BK9xxx
**************************************************************************************************************************/

/**
* Turns the driver into a simulation mode.
*
* @param[in] pDriver_BK9xxx - Driver_BK9xxx instance.
* @return error code or 0 (success)
*/
LIBMCDRIVER_BK9XXX_DECLSPEC LibMCDriver_BK9xxxResult libmcdriver_bk9xxx_driver_bk9xxx_settosimulationmode(LibMCDriver_BK9xxx_Driver_BK9xxx pDriver_BK9xxx);

/**
* Returns if the driver is in simulation mode.
*
* @param[in] pDriver_BK9xxx - Driver_BK9xxx instance.
* @param[out] pSimulationModeEnabled - Flag if driver is in simulation mode.
* @return error code or 0 (success)
*/
LIBMCDRIVER_BK9XXX_DECLSPEC LibMCDriver_BK9xxxResult libmcdriver_bk9xxx_driver_bk9xxx_issimulationmode(LibMCDriver_BK9xxx_Driver_BK9xxx pDriver_BK9xxx, bool * pSimulationModeEnabled);

/**
* Connects to a BK9xxx bus coupler.
*
* @param[in] pDriver_BK9xxx - Driver_BK9xxx instance.
* @param[in] pIPAddress - Address of BK9xxx coupler.
* @param[in] nPort - Modbus TCP port of BK9xxx coupler. (Usually 502).
* @param[in] nTimeOutInMs - Connection timeout in milliseconds.
* @return error code or 0 (success)
*/
LIBMCDRIVER_BK9XXX_DECLSPEC LibMCDriver_BK9xxxResult libmcdriver_bk9xxx_driver_bk9xxx_connect(LibMCDriver_BK9xxx_Driver_BK9xxx pDriver_BK9xxx, const char * pIPAddress, LibMCDriver_BK9xxx_uint32 nPort, LibMCDriver_BK9xxx_uint32 nTimeOutInMs);

/**
* Returns the IP Address of the connection.
*
* @param[in] pDriver_BK9xxx - Driver_BK9xxx instance.
* @param[in] nIPAddressBufferSize - size of the buffer (including trailing 0)
* @param[out] pIPAddressNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pIPAddressBuffer -  buffer of Address of BK9xxx coupler., may be NULL
* @return error code or 0 (success)
*/
LIBMCDRIVER_BK9XXX_DECLSPEC LibMCDriver_BK9xxxResult libmcdriver_bk9xxx_driver_bk9xxx_getipaddress(LibMCDriver_BK9xxx_Driver_BK9xxx pDriver_BK9xxx, const LibMCDriver_BK9xxx_uint32 nIPAddressBufferSize, LibMCDriver_BK9xxx_uint32* pIPAddressNeededChars, char * pIPAddressBuffer);

/**
* Returns the Port of the connection.
*
* @param[in] pDriver_BK9xxx - Driver_BK9xxx instance.
* @param[out] pPort - Modbus TCP port of BK9xxx coupler. (Usually 502).
* @return error code or 0 (success)
*/
LIBMCDRIVER_BK9XXX_DECLSPEC LibMCDriver_BK9xxxResult libmcdriver_bk9xxx_driver_bk9xxx_getport(LibMCDriver_BK9xxx_Driver_BK9xxx pDriver_BK9xxx, LibMCDriver_BK9xxx_uint32 * pPort);

/**
* Returns the Timeout of the connection.
*
* @param[in] pDriver_BK9xxx - Driver_BK9xxx instance.
* @param[out] pTimeOutInMs - Connection timeout in milliseconds.
* @return error code or 0 (success)
*/
LIBMCDRIVER_BK9XXX_DECLSPEC LibMCDriver_BK9xxxResult libmcdriver_bk9xxx_driver_bk9xxx_gettimeout(LibMCDriver_BK9xxx_Driver_BK9xxx pDriver_BK9xxx, LibMCDriver_BK9xxx_uint32 * pTimeOutInMs);

/**
* Sets the connection recovery mode.
*
* @param[in] pDriver_BK9xxx - Driver_BK9xxx instance.
* @param[in] nReconnectionDelayInMs - If connection is lost, how much time should be waited to reconnect in Milliseconds. Default is 300.
* @param[in] nReconnectionCount - How many times should a reconnection be attempted. Default is 3.
* @return error code or 0 (success)
*/
LIBMCDRIVER_BK9XXX_DECLSPEC LibMCDriver_BK9xxxResult libmcdriver_bk9xxx_driver_bk9xxx_seterrorrecoverymode(LibMCDriver_BK9xxx_Driver_BK9xxx pDriver_BK9xxx, LibMCDriver_BK9xxx_uint32 nReconnectionDelayInMs, LibMCDriver_BK9xxx_uint32 nReconnectionCount);

/**
* Gets the connection recovery mode.
*
* @param[in] pDriver_BK9xxx - Driver_BK9xxx instance.
* @param[out] pReconnectionDelayInMs - If connection is lost, how much time should be waited to reconnect in Milliseconds. Default is 300.
* @param[in] nReconnectionCount - How many times should a reconnection be attempted. Default is 3.
* @return error code or 0 (success)
*/
LIBMCDRIVER_BK9XXX_DECLSPEC LibMCDriver_BK9xxxResult libmcdriver_bk9xxx_driver_bk9xxx_geterrorrecoverymode(LibMCDriver_BK9xxx_Driver_BK9xxx pDriver_BK9xxx, LibMCDriver_BK9xxx_uint32 * pReconnectionDelayInMs, LibMCDriver_BK9xxx_uint32 nReconnectionCount);

/**
* Disconnects from the Bus coupler.
*
* @param[in] pDriver_BK9xxx - Driver_BK9xxx instance.
* @return error code or 0 (success)
*/
LIBMCDRIVER_BK9XXX_DECLSPEC LibMCDriver_BK9xxxResult libmcdriver_bk9xxx_driver_bk9xxx_disconnect(LibMCDriver_BK9xxx_Driver_BK9xxx pDriver_BK9xxx);

/**
* Resets the Bk9xxx bus coupler. Fails if not connected.
*
* @param[in] pDriver_BK9xxx - Driver_BK9xxx instance.
* @return error code or 0 (success)
*/
LIBMCDRIVER_BK9XXX_DECLSPEC LibMCDriver_BK9xxxResult libmcdriver_bk9xxx_driver_bk9xxx_resetdevice(LibMCDriver_BK9xxx_Driver_BK9xxx pDriver_BK9xxx);

/**
* Reconnects to the Bk9xxx bus coupler. Fails if Connect has never been called.
*
* @param[in] pDriver_BK9xxx - Driver_BK9xxx instance.
* @return error code or 0 (success)
*/
LIBMCDRIVER_BK9XXX_DECLSPEC LibMCDriver_BK9xxxResult libmcdriver_bk9xxx_driver_bk9xxx_reconnect(LibMCDriver_BK9xxx_Driver_BK9xxx pDriver_BK9xxx);

/**
* Returns if the the Bk9xxx bus coupler is connected.
*
* @param[in] pDriver_BK9xxx - Driver_BK9xxx instance.
* @param[out] pIsConnected - Flag if BK9xxx is connected.
* @return error code or 0 (success)
*/
LIBMCDRIVER_BK9XXX_DECLSPEC LibMCDriver_BK9xxxResult libmcdriver_bk9xxx_driver_bk9xxx_isconnected(LibMCDriver_BK9xxx_Driver_BK9xxx pDriver_BK9xxx, bool * pIsConnected);

/**
* Returns the error state of the Bk9xxx bus coupler connection.
*
* @param[in] pDriver_BK9xxx - Driver_BK9xxx instance.
* @param[out] pErrorState - Error state of the connection.
* @return error code or 0 (success)
*/
LIBMCDRIVER_BK9XXX_DECLSPEC LibMCDriver_BK9xxxResult libmcdriver_bk9xxx_driver_bk9xxx_geterrorstate(LibMCDriver_BK9xxx_Driver_BK9xxx pDriver_BK9xxx, LibMCDriver_BK9xxx::eErrorState * pErrorState);

/**
* Returns if any input or output exists by this name.
*
* @param[in] pDriver_BK9xxx - Driver_BK9xxx instance.
* @param[in] pName - Name of variable.
* @param[out] pNameExists - Flag if value exists.
* @return error code or 0 (success)
*/
LIBMCDRIVER_BK9XXX_DECLSPEC LibMCDriver_BK9xxxResult libmcdriver_bk9xxx_driver_bk9xxx_variableexists(LibMCDriver_BK9xxx_Driver_BK9xxx pDriver_BK9xxx, const char * pName, bool * pNameExists);

/**
* Returns type of a variable.
*
* @param[in] pDriver_BK9xxx - Driver_BK9xxx instance.
* @param[in] pName - Name of variable.
* @param[out] pVariableType - Type of variable.
* @return error code or 0 (success)
*/
LIBMCDRIVER_BK9XXX_DECLSPEC LibMCDriver_BK9xxxResult libmcdriver_bk9xxx_driver_bk9xxx_getvariabletype(LibMCDriver_BK9xxx_Driver_BK9xxx pDriver_BK9xxx, const char * pName, LibMCDriver_BK9xxx::eVariableType * pVariableType);

/**
* Returns if a digital input exists.
*
* @param[in] pDriver_BK9xxx - Driver_BK9xxx instance.
* @param[in] pName - Name of variable.
* @param[out] pNameExists - Flag if value exists.
* @return error code or 0 (success)
*/
LIBMCDRIVER_BK9XXX_DECLSPEC LibMCDriver_BK9xxxResult libmcdriver_bk9xxx_driver_bk9xxx_digitalinputexists(LibMCDriver_BK9xxx_Driver_BK9xxx pDriver_BK9xxx, const char * pName, bool * pNameExists);

/**
* Returns if a digital output exists.
*
* @param[in] pDriver_BK9xxx - Driver_BK9xxx instance.
* @param[in] pName - Name of variable.
* @param[out] pNameExists - Flag if value exists.
* @return error code or 0 (success)
*/
LIBMCDRIVER_BK9XXX_DECLSPEC LibMCDriver_BK9xxxResult libmcdriver_bk9xxx_driver_bk9xxx_digitaloutputexists(LibMCDriver_BK9xxx_Driver_BK9xxx pDriver_BK9xxx, const char * pName, bool * pNameExists);

/**
* Returns if an analog input exists.
*
* @param[in] pDriver_BK9xxx - Driver_BK9xxx instance.
* @param[in] pName - Name of variable.
* @param[out] pNameExists - Flag if value exists.
* @return error code or 0 (success)
*/
LIBMCDRIVER_BK9XXX_DECLSPEC LibMCDriver_BK9xxxResult libmcdriver_bk9xxx_driver_bk9xxx_analoginputexists(LibMCDriver_BK9xxx_Driver_BK9xxx pDriver_BK9xxx, const char * pName, bool * pNameExists);

/**
* Returns if an analog output exists.
*
* @param[in] pDriver_BK9xxx - Driver_BK9xxx instance.
* @param[in] pName - Name of variable.
* @param[out] pNameExists - Flag if value exists.
* @return error code or 0 (success)
*/
LIBMCDRIVER_BK9XXX_DECLSPEC LibMCDriver_BK9xxxResult libmcdriver_bk9xxx_driver_bk9xxx_analogoutputexists(LibMCDriver_BK9xxx_Driver_BK9xxx pDriver_BK9xxx, const char * pName, bool * pNameExists);

/**
* Reads a value from an digital input variable. Fails if variable does not exist.
*
* @param[in] pDriver_BK9xxx - Driver_BK9xxx instance.
* @param[in] pVariableName - Name of variable.
* @param[out] pValue - Result value.
* @return error code or 0 (success)
*/
LIBMCDRIVER_BK9XXX_DECLSPEC LibMCDriver_BK9xxxResult libmcdriver_bk9xxx_driver_bk9xxx_getdigitalinput(LibMCDriver_BK9xxx_Driver_BK9xxx pDriver_BK9xxx, const char * pVariableName, bool * pValue);

/**
* Reads a value from an digital output variable. Fails if variable does not exist.
*
* @param[in] pDriver_BK9xxx - Driver_BK9xxx instance.
* @param[in] pVariableName - Name of variable.
* @param[out] pValue - Result value.
* @return error code or 0 (success)
*/
LIBMCDRIVER_BK9XXX_DECLSPEC LibMCDriver_BK9xxxResult libmcdriver_bk9xxx_driver_bk9xxx_getdigitaloutput(LibMCDriver_BK9xxx_Driver_BK9xxx pDriver_BK9xxx, const char * pVariableName, bool * pValue);

/**
* Reads a raw value from an analog input variable. Fails if variable does not exist.
*
* @param[in] pDriver_BK9xxx - Driver_BK9xxx instance.
* @param[in] pVariableName - Name of variable.
* @param[out] pValue - Result value.
* @return error code or 0 (success)
*/
LIBMCDRIVER_BK9XXX_DECLSPEC LibMCDriver_BK9xxxResult libmcdriver_bk9xxx_driver_bk9xxx_getanaloginputraw(LibMCDriver_BK9xxx_Driver_BK9xxx pDriver_BK9xxx, const char * pVariableName, LibMCDriver_BK9xxx_uint32 * pValue);

/**
* Reads a raw value from an analog output variable. Fails if variable does not exist.
*
* @param[in] pDriver_BK9xxx - Driver_BK9xxx instance.
* @param[in] pVariableName - Name of variable.
* @param[out] pValue - Result value.
* @return error code or 0 (success)
*/
LIBMCDRIVER_BK9XXX_DECLSPEC LibMCDriver_BK9xxxResult libmcdriver_bk9xxx_driver_bk9xxx_getanalogoutputraw(LibMCDriver_BK9xxx_Driver_BK9xxx pDriver_BK9xxx, const char * pVariableName, LibMCDriver_BK9xxx_uint32 * pValue);

/**
* Reads a scaled value from an analog input variable. Fails if variable does not exist.
*
* @param[in] pDriver_BK9xxx - Driver_BK9xxx instance.
* @param[in] pVariableName - Name of variable.
* @param[out] pValue - Result value.
* @return error code or 0 (success)
*/
LIBMCDRIVER_BK9XXX_DECLSPEC LibMCDriver_BK9xxxResult libmcdriver_bk9xxx_driver_bk9xxx_getanaloginput(LibMCDriver_BK9xxx_Driver_BK9xxx pDriver_BK9xxx, const char * pVariableName, LibMCDriver_BK9xxx_double * pValue);

/**
* Reads a scaled value from an analog output variable. Fails if variable does not exist.
*
* @param[in] pDriver_BK9xxx - Driver_BK9xxx instance.
* @param[in] pVariableName - Name of variable.
* @param[out] pValue - Result value.
* @return error code or 0 (success)
*/
LIBMCDRIVER_BK9XXX_DECLSPEC LibMCDriver_BK9xxxResult libmcdriver_bk9xxx_driver_bk9xxx_getanalogoutput(LibMCDriver_BK9xxx_Driver_BK9xxx pDriver_BK9xxx, const char * pVariableName, LibMCDriver_BK9xxx_double * pValue);

/**
* Writes a value to a digital output variable. Fails if variable does not exist.
*
* @param[in] pDriver_BK9xxx - Driver_BK9xxx instance.
* @param[in] pVariableName - Name of variable.
* @param[in] bValue - Value to be set.
* @param[in] nTimeOutInMs - If Timeout is larger than 0, the call waits until the end point has acknowledged that the new value has been set. If timeout is 0, the call returns immediately, even if the end point might not have changed the value yet.
* @return error code or 0 (success)
*/
LIBMCDRIVER_BK9XXX_DECLSPEC LibMCDriver_BK9xxxResult libmcdriver_bk9xxx_driver_bk9xxx_setdigitaloutput(LibMCDriver_BK9xxx_Driver_BK9xxx pDriver_BK9xxx, const char * pVariableName, bool bValue, LibMCDriver_BK9xxx_uint32 nTimeOutInMs);

/**
* Writes a raw value to an analog output variable. Fails if variable does not exist.
*
* @param[in] pDriver_BK9xxx - Driver_BK9xxx instance.
* @param[in] pVariableName - Name of variable.
* @param[in] nValue - Value to be set.
* @param[in] nTimeOutInMs - If Timeout is larger than 0, the call waits until the end point has acknowledged that the new value has been set. If timeout is 0, the call returns immediately, even if the end point might not have changed the value yet.
* @return error code or 0 (success)
*/
LIBMCDRIVER_BK9XXX_DECLSPEC LibMCDriver_BK9xxxResult libmcdriver_bk9xxx_driver_bk9xxx_setanalogoutputraw(LibMCDriver_BK9xxx_Driver_BK9xxx pDriver_BK9xxx, const char * pVariableName, LibMCDriver_BK9xxx_uint32 nValue, LibMCDriver_BK9xxx_uint32 nTimeOutInMs);

/**
* Writes a scaled value to an analog output variable. Fails if variable does not exist.
*
* @param[in] pDriver_BK9xxx - Driver_BK9xxx instance.
* @param[in] pVariableName - Name of variable.
* @param[in] dValue - Value to be set.
* @param[in] nTimeOutInMs - If Timeout is larger than 0, the call waits until the end point has acknowledged that the new value has been set. If timeout is 0, the call returns immediately, even if the end point might not have changed the value yet.
* @return error code or 0 (success)
*/
LIBMCDRIVER_BK9XXX_DECLSPEC LibMCDriver_BK9xxxResult libmcdriver_bk9xxx_driver_bk9xxx_setanalogoutput(LibMCDriver_BK9xxx_Driver_BK9xxx pDriver_BK9xxx, const char * pVariableName, LibMCDriver_BK9xxx_double dValue, LibMCDriver_BK9xxx_uint32 nTimeOutInMs);

/*************************************************************************************************************************
 Global functions
**************************************************************************************************************************/

/**
* retrieves the binary version of this library.
*
* @param[out] pMajor - returns the major version of this library
* @param[out] pMinor - returns the minor version of this library
* @param[out] pMicro - returns the micro version of this library
* @return error code or 0 (success)
*/
LIBMCDRIVER_BK9XXX_DECLSPEC LibMCDriver_BK9xxxResult libmcdriver_bk9xxx_getversion(LibMCDriver_BK9xxx_uint32 * pMajor, LibMCDriver_BK9xxx_uint32 * pMinor, LibMCDriver_BK9xxx_uint32 * pMicro);

/**
* Returns the last error recorded on this object
*
* @param[in] pInstance - Instance Handle
* @param[in] nErrorMessageBufferSize - size of the buffer (including trailing 0)
* @param[out] pErrorMessageNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pErrorMessageBuffer -  buffer of Message of the last error, may be NULL
* @param[out] pHasError - Is there a last error to query
* @return error code or 0 (success)
*/
LIBMCDRIVER_BK9XXX_DECLSPEC LibMCDriver_BK9xxxResult libmcdriver_bk9xxx_getlasterror(LibMCDriver_BK9xxx_Base pInstance, const LibMCDriver_BK9xxx_uint32 nErrorMessageBufferSize, LibMCDriver_BK9xxx_uint32* pErrorMessageNeededChars, char * pErrorMessageBuffer, bool * pHasError);

/**
* Releases shared ownership of an Instance
*
* @param[in] pInstance - Instance Handle
* @return error code or 0 (success)
*/
LIBMCDRIVER_BK9XXX_DECLSPEC LibMCDriver_BK9xxxResult libmcdriver_bk9xxx_releaseinstance(LibMCDriver_BK9xxx_Base pInstance);

/**
* Acquires shared ownership of an Instance
*
* @param[in] pInstance - Instance Handle
* @return error code or 0 (success)
*/
LIBMCDRIVER_BK9XXX_DECLSPEC LibMCDriver_BK9xxxResult libmcdriver_bk9xxx_acquireinstance(LibMCDriver_BK9xxx_Base pInstance);

/**
* Injects an imported component for usage within this component
*
* @param[in] pNameSpace - NameSpace of the injected component
* @param[in] pSymbolAddressMethod - Address of the SymbolAddressMethod of the injected component
* @return error code or 0 (success)
*/
LIBMCDRIVER_BK9XXX_DECLSPEC LibMCDriver_BK9xxxResult libmcdriver_bk9xxx_injectcomponent(const char * pNameSpace, LibMCDriver_BK9xxx_pvoid pSymbolAddressMethod);

/**
* Returns the address of the SymbolLookupMethod
*
* @param[out] pSymbolLookupMethod - Address of the SymbolAddressMethod
* @return error code or 0 (success)
*/
LIBMCDRIVER_BK9XXX_DECLSPEC LibMCDriver_BK9xxxResult libmcdriver_bk9xxx_getsymbollookupmethod(LibMCDriver_BK9xxx_pvoid * pSymbolLookupMethod);

/**
* Creates a driver instance with a specific name.
*
* @param[in] pName - Name of driver to be created.
* @param[in] pType - Type of driver to be created.
* @param[in] pDriverEnvironment - Environment of this driver.
* @param[out] pInstance - New Driver instance
* @return error code or 0 (success)
*/
LIBMCDRIVER_BK9XXX_DECLSPEC LibMCDriver_BK9xxxResult libmcdriver_bk9xxx_createdriver(const char * pName, const char * pType, LibMCEnv_DriverEnvironment pDriverEnvironment, LibMCDriver_BK9xxx_Driver * pInstance);

#ifdef __cplusplus
}
#endif

#endif // __LIBMCDRIVER_BK9XXX_HEADER_CPP

