/*++

Copyright (C) 2023 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.8.0-develop.

Abstract: This is an autogenerated C++-Header file with basic types in
order to allow an easy use of MC Driver Beckhoff BK9xxx bus coupler

Interface version: 1.0.0

*/

#ifndef __LIBMCDRIVER_BK9XXX_TYPES_HEADER_CPP
#define __LIBMCDRIVER_BK9XXX_TYPES_HEADER_CPP


/*************************************************************************************************************************
 Scalar types definition
**************************************************************************************************************************/

#ifdef LIBMCDRIVER_BK9XXX_USELEGACYINTEGERTYPES

typedef unsigned char LibMCDriver_BK9xxx_uint8;
typedef unsigned short LibMCDriver_BK9xxx_uint16 ;
typedef unsigned int LibMCDriver_BK9xxx_uint32;
typedef unsigned long long LibMCDriver_BK9xxx_uint64;
typedef char LibMCDriver_BK9xxx_int8;
typedef short LibMCDriver_BK9xxx_int16;
typedef int LibMCDriver_BK9xxx_int32;
typedef long long LibMCDriver_BK9xxx_int64;

#else // LIBMCDRIVER_BK9XXX_USELEGACYINTEGERTYPES

#include <stdint.h>

typedef uint8_t LibMCDriver_BK9xxx_uint8;
typedef uint16_t LibMCDriver_BK9xxx_uint16;
typedef uint32_t LibMCDriver_BK9xxx_uint32;
typedef uint64_t LibMCDriver_BK9xxx_uint64;
typedef int8_t LibMCDriver_BK9xxx_int8;
typedef int16_t LibMCDriver_BK9xxx_int16;
typedef int32_t LibMCDriver_BK9xxx_int32;
typedef int64_t LibMCDriver_BK9xxx_int64 ;

#endif // LIBMCDRIVER_BK9XXX_USELEGACYINTEGERTYPES

typedef float LibMCDriver_BK9xxx_single;
typedef double LibMCDriver_BK9xxx_double;

/*************************************************************************************************************************
 General type definitions
**************************************************************************************************************************/

typedef LibMCDriver_BK9xxx_int32 LibMCDriver_BK9xxxResult;
typedef void * LibMCDriver_BK9xxxHandle;
typedef void * LibMCDriver_BK9xxx_pvoid;

/*************************************************************************************************************************
 Version for LibMCDriver_BK9xxx
**************************************************************************************************************************/

#define LIBMCDRIVER_BK9XXX_VERSION_MAJOR 1
#define LIBMCDRIVER_BK9XXX_VERSION_MINOR 0
#define LIBMCDRIVER_BK9XXX_VERSION_MICRO 0
#define LIBMCDRIVER_BK9XXX_VERSION_PRERELEASEINFO ""
#define LIBMCDRIVER_BK9XXX_VERSION_BUILDINFO ""

/*************************************************************************************************************************
 Error constants for LibMCDriver_BK9xxx
**************************************************************************************************************************/

#define LIBMCDRIVER_BK9XXX_SUCCESS 0
#define LIBMCDRIVER_BK9XXX_ERROR_NOTIMPLEMENTED 1 /** functionality not implemented */
#define LIBMCDRIVER_BK9XXX_ERROR_INVALIDPARAM 2 /** an invalid parameter was passed */
#define LIBMCDRIVER_BK9XXX_ERROR_INVALIDCAST 3 /** a type cast failed */
#define LIBMCDRIVER_BK9XXX_ERROR_BUFFERTOOSMALL 4 /** a provided buffer is too small */
#define LIBMCDRIVER_BK9XXX_ERROR_GENERICEXCEPTION 5 /** a generic exception occurred */
#define LIBMCDRIVER_BK9XXX_ERROR_COULDNOTLOADLIBRARY 6 /** the library could not be loaded */
#define LIBMCDRIVER_BK9XXX_ERROR_COULDNOTFINDLIBRARYEXPORT 7 /** a required exported symbol could not be found in the library */
#define LIBMCDRIVER_BK9XXX_ERROR_INCOMPATIBLEBINARYVERSION 8 /** the version of the binary interface does not match the bindings interface */
#define LIBMCDRIVER_BK9XXX_ERROR_INVALIDSTATENAME 9 /** invalid state name */
#define LIBMCDRIVER_BK9XXX_ERROR_DRIVERERROR 1000 /** a driver error occured */
#define LIBMCDRIVER_BK9XXX_ERROR_DRIVERNOTINITIALISED 1001 /** the driver is not initialised */
#define LIBMCDRIVER_BK9XXX_ERROR_DRIVERNOTCONNECTED 1002 /** the driver is not connected */
#define LIBMCDRIVER_BK9XXX_ERROR_INVALIDDRIVERPROTOCOL 1003 /** invalid driver protocol definition */
#define LIBMCDRIVER_BK9XXX_ERROR_COULDNOTPARSEDRIVERPROTOCOL 1004 /** could not parse driver protocol */
#define LIBMCDRIVER_BK9XXX_ERROR_NOTCONNECTED 1005 /** Not connected */
#define LIBMCDRIVER_BK9XXX_ERROR_SETSIMULATIONMODEBEFORECONNECTING 1006 /** Set error simulation mode before connecting. */
#define LIBMCDRIVER_BK9XXX_ERROR_NOVERSIONDEFINITION 1007 /** no version definition */
#define LIBMCDRIVER_BK9XXX_ERROR_NOMAJORVERSION 1008 /** no major version */
#define LIBMCDRIVER_BK9XXX_ERROR_NOMINORVERSION 1009 /** no minor version */
#define LIBMCDRIVER_BK9XXX_ERROR_NOPATCHVERSION 1010 /** no patch version */
#define LIBMCDRIVER_BK9XXX_ERROR_NOCONFIGURATIONSCHEMA 1011 /** no configuration schema */
#define LIBMCDRIVER_BK9XXX_ERROR_INVALIDCONFIGURATIONSCHEMA 1012 /** invalid configuration schema */
#define LIBMCDRIVER_BK9XXX_ERROR_MISSINGDIGITALIOOFFSET 1013 /** missing digital IO offset */
#define LIBMCDRIVER_BK9XXX_ERROR_INVALIDDIGITALIOOFFSET 1014 /** invalid digital IO offset */
#define LIBMCDRIVER_BK9XXX_ERROR_MISSINGDIGITALIONAME 1015 /** missing digitial IO name */
#define LIBMCDRIVER_BK9XXX_ERROR_EMPTYDIGITALIONAME 1016 /** empty digitial IO name */
#define LIBMCDRIVER_BK9XXX_ERROR_INVALIDDIGITALIOINDEX 1017 /** invalid digital IO index */
#define LIBMCDRIVER_BK9XXX_ERROR_DIGITALIONOTFOUND 1018 /** digital IO not found */
#define LIBMCDRIVER_BK9XXX_ERROR_DUPLICATEDIGITALINPUT 1019 /** duplicate digital input */
#define LIBMCDRIVER_BK9XXX_ERROR_DUPLICATEDIGITALOUTPUT 1020 /** duplicate digital output */
#define LIBMCDRIVER_BK9XXX_ERROR_MISSINGDIGITALIOSTARTADDRESS 1021 /** missing digitial io start address */
#define LIBMCDRIVER_BK9XXX_ERROR_INVALIDDIGITALIOSTARTADDRESS 1022 /** invalid digital io start address */
#define LIBMCDRIVER_BK9XXX_ERROR_MISSINGDIGITALIOBITCOUNT 1023 /** missing digital io bit count */
#define LIBMCDRIVER_BK9XXX_ERROR_INVALIDDIGITALIOBITCOUNT 1024 /** invalid digital io bit count */
#define LIBMCDRIVER_BK9XXX_ERROR_MISSINGANALOGIOOFFSET 1025 /** missing analog IO offset */
#define LIBMCDRIVER_BK9XXX_ERROR_INVALIDANALOGIOOFFSET 1026 /** invalid analog IO offset */
#define LIBMCDRIVER_BK9XXX_ERROR_MISSINGANALOGIONAME 1027 /** missing analog IO name */
#define LIBMCDRIVER_BK9XXX_ERROR_EMPTYANALOGIONAME 1028 /** empty analog IO name */
#define LIBMCDRIVER_BK9XXX_ERROR_INVALIDANALOGIOINDEX 1029 /** invalid analog IO index */
#define LIBMCDRIVER_BK9XXX_ERROR_ANALOGIONOTFOUND 1030 /** analog IO not found */
#define LIBMCDRIVER_BK9XXX_ERROR_DUPLICATEANALOGINPUT 1031 /** duplicate analog input */
#define LIBMCDRIVER_BK9XXX_ERROR_DUPLICATEANALOGOUTPUT 1032 /** duplicate analog output */
#define LIBMCDRIVER_BK9XXX_ERROR_MISSINGANALOGIOSTARTADDRESS 1033 /** missing analog io start address */
#define LIBMCDRIVER_BK9XXX_ERROR_INVALIDANALOGIOSTARTADDRESS 1034 /** invalid analog io start address */
#define LIBMCDRIVER_BK9XXX_ERROR_MISSINGANALOGIOREGISTERCOUNT 1035 /** missing analog io register count */
#define LIBMCDRIVER_BK9XXX_ERROR_INVALIDANALOGIOREGISTERCOUNT 1036 /** invalid analog io register count */
#define LIBMCDRIVER_BK9XXX_ERROR_DUPLICATEVARIABLENAME 1037 /** duplicate variable name */
#define LIBMCDRIVER_BK9XXX_ERROR_VARIABLENOTFOUND 1038 /** variable not found */
#define LIBMCDRIVER_BK9XXX_ERROR_MISSINGANALOGIORAWMINVALUE 1039 /** missing analog io raw min value */
#define LIBMCDRIVER_BK9XXX_ERROR_MISSINGANALOGIORAWMAXVALUE 1040 /** missing analog io raw max value */
#define LIBMCDRIVER_BK9XXX_ERROR_INVALIDANALOGIORAWMINVALUE 1041 /** invalid analog io raw min value */
#define LIBMCDRIVER_BK9XXX_ERROR_INVALIDANALOGIORAWMAXVALUE 1042 /** invalid analog io raw max value */
#define LIBMCDRIVER_BK9XXX_ERROR_INVALIDANALOGIORAWINTERVAL 1043 /** invalid analog io raw interval */
#define LIBMCDRIVER_BK9XXX_ERROR_MISSINGANALOGIOSCALEDMINVALUE 1044 /** missing analog io scaled min value */
#define LIBMCDRIVER_BK9XXX_ERROR_MISSINGANALOGIOSCALEDMAXVALUE 1045 /** missing analog io scaled max value */
#define LIBMCDRIVER_BK9XXX_ERROR_INVALIDANALOGIOSCALEDMINVALUE 1046 /** invalid analog io scaled min value */
#define LIBMCDRIVER_BK9XXX_ERROR_INVALIDANALOGIOSCALEDMAXVALUE 1047 /** invalid analog io scaled max value */
#define LIBMCDRIVER_BK9XXX_ERROR_INVALIDANALOGIOSCALEDINTERVAL 1048 /** invalid analog io scaled interval */

/*************************************************************************************************************************
 Error strings for LibMCDriver_BK9xxx
**************************************************************************************************************************/

inline const char * LIBMCDRIVER_BK9XXX_GETERRORSTRING (LibMCDriver_BK9xxxResult nErrorCode) {
  switch (nErrorCode) {
    case LIBMCDRIVER_BK9XXX_SUCCESS: return "no error";
    case LIBMCDRIVER_BK9XXX_ERROR_NOTIMPLEMENTED: return "functionality not implemented";
    case LIBMCDRIVER_BK9XXX_ERROR_INVALIDPARAM: return "an invalid parameter was passed";
    case LIBMCDRIVER_BK9XXX_ERROR_INVALIDCAST: return "a type cast failed";
    case LIBMCDRIVER_BK9XXX_ERROR_BUFFERTOOSMALL: return "a provided buffer is too small";
    case LIBMCDRIVER_BK9XXX_ERROR_GENERICEXCEPTION: return "a generic exception occurred";
    case LIBMCDRIVER_BK9XXX_ERROR_COULDNOTLOADLIBRARY: return "the library could not be loaded";
    case LIBMCDRIVER_BK9XXX_ERROR_COULDNOTFINDLIBRARYEXPORT: return "a required exported symbol could not be found in the library";
    case LIBMCDRIVER_BK9XXX_ERROR_INCOMPATIBLEBINARYVERSION: return "the version of the binary interface does not match the bindings interface";
    case LIBMCDRIVER_BK9XXX_ERROR_INVALIDSTATENAME: return "invalid state name";
    case LIBMCDRIVER_BK9XXX_ERROR_DRIVERERROR: return "a driver error occured";
    case LIBMCDRIVER_BK9XXX_ERROR_DRIVERNOTINITIALISED: return "the driver is not initialised";
    case LIBMCDRIVER_BK9XXX_ERROR_DRIVERNOTCONNECTED: return "the driver is not connected";
    case LIBMCDRIVER_BK9XXX_ERROR_INVALIDDRIVERPROTOCOL: return "invalid driver protocol definition";
    case LIBMCDRIVER_BK9XXX_ERROR_COULDNOTPARSEDRIVERPROTOCOL: return "could not parse driver protocol";
    case LIBMCDRIVER_BK9XXX_ERROR_NOTCONNECTED: return "Not connected";
    case LIBMCDRIVER_BK9XXX_ERROR_SETSIMULATIONMODEBEFORECONNECTING: return "Set error simulation mode before connecting.";
    case LIBMCDRIVER_BK9XXX_ERROR_NOVERSIONDEFINITION: return "no version definition";
    case LIBMCDRIVER_BK9XXX_ERROR_NOMAJORVERSION: return "no major version";
    case LIBMCDRIVER_BK9XXX_ERROR_NOMINORVERSION: return "no minor version";
    case LIBMCDRIVER_BK9XXX_ERROR_NOPATCHVERSION: return "no patch version";
    case LIBMCDRIVER_BK9XXX_ERROR_NOCONFIGURATIONSCHEMA: return "no configuration schema";
    case LIBMCDRIVER_BK9XXX_ERROR_INVALIDCONFIGURATIONSCHEMA: return "invalid configuration schema";
    case LIBMCDRIVER_BK9XXX_ERROR_MISSINGDIGITALIOOFFSET: return "missing digital IO offset";
    case LIBMCDRIVER_BK9XXX_ERROR_INVALIDDIGITALIOOFFSET: return "invalid digital IO offset";
    case LIBMCDRIVER_BK9XXX_ERROR_MISSINGDIGITALIONAME: return "missing digitial IO name";
    case LIBMCDRIVER_BK9XXX_ERROR_EMPTYDIGITALIONAME: return "empty digitial IO name";
    case LIBMCDRIVER_BK9XXX_ERROR_INVALIDDIGITALIOINDEX: return "invalid digital IO index";
    case LIBMCDRIVER_BK9XXX_ERROR_DIGITALIONOTFOUND: return "digital IO not found";
    case LIBMCDRIVER_BK9XXX_ERROR_DUPLICATEDIGITALINPUT: return "duplicate digital input";
    case LIBMCDRIVER_BK9XXX_ERROR_DUPLICATEDIGITALOUTPUT: return "duplicate digital output";
    case LIBMCDRIVER_BK9XXX_ERROR_MISSINGDIGITALIOSTARTADDRESS: return "missing digitial io start address";
    case LIBMCDRIVER_BK9XXX_ERROR_INVALIDDIGITALIOSTARTADDRESS: return "invalid digital io start address";
    case LIBMCDRIVER_BK9XXX_ERROR_MISSINGDIGITALIOBITCOUNT: return "missing digital io bit count";
    case LIBMCDRIVER_BK9XXX_ERROR_INVALIDDIGITALIOBITCOUNT: return "invalid digital io bit count";
    case LIBMCDRIVER_BK9XXX_ERROR_MISSINGANALOGIOOFFSET: return "missing analog IO offset";
    case LIBMCDRIVER_BK9XXX_ERROR_INVALIDANALOGIOOFFSET: return "invalid analog IO offset";
    case LIBMCDRIVER_BK9XXX_ERROR_MISSINGANALOGIONAME: return "missing analog IO name";
    case LIBMCDRIVER_BK9XXX_ERROR_EMPTYANALOGIONAME: return "empty analog IO name";
    case LIBMCDRIVER_BK9XXX_ERROR_INVALIDANALOGIOINDEX: return "invalid analog IO index";
    case LIBMCDRIVER_BK9XXX_ERROR_ANALOGIONOTFOUND: return "analog IO not found";
    case LIBMCDRIVER_BK9XXX_ERROR_DUPLICATEANALOGINPUT: return "duplicate analog input";
    case LIBMCDRIVER_BK9XXX_ERROR_DUPLICATEANALOGOUTPUT: return "duplicate analog output";
    case LIBMCDRIVER_BK9XXX_ERROR_MISSINGANALOGIOSTARTADDRESS: return "missing analog io start address";
    case LIBMCDRIVER_BK9XXX_ERROR_INVALIDANALOGIOSTARTADDRESS: return "invalid analog io start address";
    case LIBMCDRIVER_BK9XXX_ERROR_MISSINGANALOGIOREGISTERCOUNT: return "missing analog io register count";
    case LIBMCDRIVER_BK9XXX_ERROR_INVALIDANALOGIOREGISTERCOUNT: return "invalid analog io register count";
    case LIBMCDRIVER_BK9XXX_ERROR_DUPLICATEVARIABLENAME: return "duplicate variable name";
    case LIBMCDRIVER_BK9XXX_ERROR_VARIABLENOTFOUND: return "variable not found";
    case LIBMCDRIVER_BK9XXX_ERROR_MISSINGANALOGIORAWMINVALUE: return "missing analog io raw min value";
    case LIBMCDRIVER_BK9XXX_ERROR_MISSINGANALOGIORAWMAXVALUE: return "missing analog io raw max value";
    case LIBMCDRIVER_BK9XXX_ERROR_INVALIDANALOGIORAWMINVALUE: return "invalid analog io raw min value";
    case LIBMCDRIVER_BK9XXX_ERROR_INVALIDANALOGIORAWMAXVALUE: return "invalid analog io raw max value";
    case LIBMCDRIVER_BK9XXX_ERROR_INVALIDANALOGIORAWINTERVAL: return "invalid analog io raw interval";
    case LIBMCDRIVER_BK9XXX_ERROR_MISSINGANALOGIOSCALEDMINVALUE: return "missing analog io scaled min value";
    case LIBMCDRIVER_BK9XXX_ERROR_MISSINGANALOGIOSCALEDMAXVALUE: return "missing analog io scaled max value";
    case LIBMCDRIVER_BK9XXX_ERROR_INVALIDANALOGIOSCALEDMINVALUE: return "invalid analog io scaled min value";
    case LIBMCDRIVER_BK9XXX_ERROR_INVALIDANALOGIOSCALEDMAXVALUE: return "invalid analog io scaled max value";
    case LIBMCDRIVER_BK9XXX_ERROR_INVALIDANALOGIOSCALEDINTERVAL: return "invalid analog io scaled interval";
    default: return "unknown error";
  }
}

/*************************************************************************************************************************
 Declaration of handle classes 
**************************************************************************************************************************/

typedef LibMCDriver_BK9xxxHandle LibMCDriver_BK9xxx_Base;
typedef LibMCDriver_BK9xxxHandle LibMCDriver_BK9xxx_Driver;
typedef LibMCDriver_BK9xxxHandle LibMCDriver_BK9xxx_Driver_BK9xxx;

namespace LibMCDriver_BK9xxx {

  /*************************************************************************************************************************
   Declaration of enums
  **************************************************************************************************************************/
  
  enum class eVariableType : LibMCDriver_BK9xxx_int32 {
    Unknown = 0,
    DigitalInput = 1,
    DigitalOutput = 2,
    AnalogInput = 3,
    AnalogOutput = 4
  };
  
  enum class eErrorState : LibMCDriver_BK9xxx_int32 {
    NoError = 0,
    ConnectionFailed = 1,
    AttemptingReconnection = 2,
    ReconnectionFailed = 3,
    ConnectionLost = 4
  };
  
} // namespace LibMCDriver_BK9xxx;

// define legacy C-names for enums, structs and function types
typedef LibMCDriver_BK9xxx::eVariableType eLibMCDriver_BK9xxxVariableType;
typedef LibMCDriver_BK9xxx::eErrorState eLibMCDriver_BK9xxxErrorState;

#endif // __LIBMCDRIVER_BK9XXX_TYPES_HEADER_CPP
