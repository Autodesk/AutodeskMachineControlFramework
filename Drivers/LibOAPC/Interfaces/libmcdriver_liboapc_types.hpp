/*++

Copyright (C) 2020 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.8.0-develop.

Abstract: This is an autogenerated C++-Header file with basic types in
order to allow an easy use of MC Driver LibOAPC

Interface version: 2.0.0

*/

#ifndef __LIBMCDRIVER_LIBOAPC_TYPES_HEADER_CPP
#define __LIBMCDRIVER_LIBOAPC_TYPES_HEADER_CPP


/*************************************************************************************************************************
 Scalar types definition
**************************************************************************************************************************/

#ifdef LIBMCDRIVER_LIBOAPC_USELEGACYINTEGERTYPES

typedef unsigned char LibMCDriver_LibOAPC_uint8;
typedef unsigned short LibMCDriver_LibOAPC_uint16 ;
typedef unsigned int LibMCDriver_LibOAPC_uint32;
typedef unsigned long long LibMCDriver_LibOAPC_uint64;
typedef char LibMCDriver_LibOAPC_int8;
typedef short LibMCDriver_LibOAPC_int16;
typedef int LibMCDriver_LibOAPC_int32;
typedef long long LibMCDriver_LibOAPC_int64;

#else // LIBMCDRIVER_LIBOAPC_USELEGACYINTEGERTYPES

#include <stdint.h>

typedef uint8_t LibMCDriver_LibOAPC_uint8;
typedef uint16_t LibMCDriver_LibOAPC_uint16;
typedef uint32_t LibMCDriver_LibOAPC_uint32;
typedef uint64_t LibMCDriver_LibOAPC_uint64;
typedef int8_t LibMCDriver_LibOAPC_int8;
typedef int16_t LibMCDriver_LibOAPC_int16;
typedef int32_t LibMCDriver_LibOAPC_int32;
typedef int64_t LibMCDriver_LibOAPC_int64 ;

#endif // LIBMCDRIVER_LIBOAPC_USELEGACYINTEGERTYPES

typedef float LibMCDriver_LibOAPC_single;
typedef double LibMCDriver_LibOAPC_double;

/*************************************************************************************************************************
 General type definitions
**************************************************************************************************************************/

typedef LibMCDriver_LibOAPC_int32 LibMCDriver_LibOAPCResult;
typedef void * LibMCDriver_LibOAPCHandle;
typedef void * LibMCDriver_LibOAPC_pvoid;

/*************************************************************************************************************************
 Version for LibMCDriver_LibOAPC
**************************************************************************************************************************/

#define LIBMCDRIVER_LIBOAPC_VERSION_MAJOR 2
#define LIBMCDRIVER_LIBOAPC_VERSION_MINOR 0
#define LIBMCDRIVER_LIBOAPC_VERSION_MICRO 0
#define LIBMCDRIVER_LIBOAPC_VERSION_PRERELEASEINFO ""
#define LIBMCDRIVER_LIBOAPC_VERSION_BUILDINFO ""

/*************************************************************************************************************************
 Error constants for LibMCDriver_LibOAPC
**************************************************************************************************************************/

#define LIBMCDRIVER_LIBOAPC_SUCCESS 0
#define LIBMCDRIVER_LIBOAPC_ERROR_NOTIMPLEMENTED 1 /** functionality not implemented */
#define LIBMCDRIVER_LIBOAPC_ERROR_INVALIDPARAM 2 /** an invalid parameter was passed */
#define LIBMCDRIVER_LIBOAPC_ERROR_INVALIDCAST 3 /** a type cast failed */
#define LIBMCDRIVER_LIBOAPC_ERROR_BUFFERTOOSMALL 4 /** a provided buffer is too small */
#define LIBMCDRIVER_LIBOAPC_ERROR_GENERICEXCEPTION 5 /** a generic exception occurred */
#define LIBMCDRIVER_LIBOAPC_ERROR_COULDNOTLOADLIBRARY 6 /** the library could not be loaded */
#define LIBMCDRIVER_LIBOAPC_ERROR_COULDNOTFINDLIBRARYEXPORT 7 /** a required exported symbol could not be found in the library */
#define LIBMCDRIVER_LIBOAPC_ERROR_INCOMPATIBLEBINARYVERSION 8 /** the version of the binary interface does not match the bindings interface */
#define LIBMCDRIVER_LIBOAPC_ERROR_E1701_ERROR_GENERIC 100 /** generic E1701 error */
#define LIBMCDRIVER_LIBOAPC_ERROR_E1701_ERROR_INVALID_CARD 101 /** wrong or illegal card number specified */
#define LIBMCDRIVER_LIBOAPC_ERROR_E1701_ERROR_NO_CONNECTION 102 /** could not connect to card */
#define LIBMCDRIVER_LIBOAPC_ERROR_E1701_ERROR_NO_MEMORY 103 /** wrong or illegal card number specified */
#define LIBMCDRIVER_LIBOAPC_ERROR_E1701_ERROR_UNKNOWN_FW 104 /** unknown or incompatible firmware version */
#define LIBMCDRIVER_LIBOAPC_ERROR_E1701_ERROR_UNKNOWN 105 /** unknown or unspecified error */
#define LIBMCDRIVER_LIBOAPC_ERROR_E1701_ERROR_TRANSMISSION 106 /** wrong or illegal card number specified */
#define LIBMCDRIVER_LIBOAPC_ERROR_E1701_ERROR_FILEOPEN 107 /** opening a file failed */
#define LIBMCDRIVER_LIBOAPC_ERROR_E1701_ERROR_FILEWRITE 108 /** writing data to a file failed */
#define LIBMCDRIVER_LIBOAPC_ERROR_E1701_ERROR_BORD_NA 109 /** a base- or extension board that would be required for a function is not available */
#define LIBMCDRIVER_LIBOAPC_ERROR_E1701_ERROR_INVALID_DATA 110 /** a function was called with invalid data or by using an operation mode where this function is not used or allowed */
#define LIBMCDRIVER_LIBOAPC_ERROR_E1701_ERROR_UNKNOWN_BOARD 111 /** trying to access a board that is not a scanner controller */
#define LIBMCDRIVER_LIBOAPC_ERROR_E1701_ERROR_FILENAME 112 /** there is an error with the given filename */
#define LIBMCDRIVER_LIBOAPC_ERROR_E1701_ERROR_NOT_SUPPORTED 113 /** the requested feature is not supported by the current firmware version */
#define LIBMCDRIVER_LIBOAPC_ERROR_E1701_ERROR_NO_DATA_AVAILABLE 114 /** tried to receive some data but there are none avilable yet */
#define LIBMCDRIVER_LIBOAPC_ERROR_DRIVERERROR 1000 /** a driver error occured */
#define LIBMCDRIVER_LIBOAPC_ERROR_NOTCONNECTED 1001 /** scanner is not connected */
#define LIBMCDRIVER_LIBOAPC_ERROR_INVALIDPOINTCOUNT 1002 /** invalid point count */
#define LIBMCDRIVER_LIBOAPC_ERROR_INVALIDFIELDSIZE 1003 /** invalid field size */

/*************************************************************************************************************************
 Error strings for LibMCDriver_LibOAPC
**************************************************************************************************************************/

inline const char * LIBMCDRIVER_LIBOAPC_GETERRORSTRING (LibMCDriver_LibOAPCResult nErrorCode) {
  switch (nErrorCode) {
    case LIBMCDRIVER_LIBOAPC_SUCCESS: return "no error";
    case LIBMCDRIVER_LIBOAPC_ERROR_NOTIMPLEMENTED: return "functionality not implemented";
    case LIBMCDRIVER_LIBOAPC_ERROR_INVALIDPARAM: return "an invalid parameter was passed";
    case LIBMCDRIVER_LIBOAPC_ERROR_INVALIDCAST: return "a type cast failed";
    case LIBMCDRIVER_LIBOAPC_ERROR_BUFFERTOOSMALL: return "a provided buffer is too small";
    case LIBMCDRIVER_LIBOAPC_ERROR_GENERICEXCEPTION: return "a generic exception occurred";
    case LIBMCDRIVER_LIBOAPC_ERROR_COULDNOTLOADLIBRARY: return "the library could not be loaded";
    case LIBMCDRIVER_LIBOAPC_ERROR_COULDNOTFINDLIBRARYEXPORT: return "a required exported symbol could not be found in the library";
    case LIBMCDRIVER_LIBOAPC_ERROR_INCOMPATIBLEBINARYVERSION: return "the version of the binary interface does not match the bindings interface";
    case LIBMCDRIVER_LIBOAPC_ERROR_E1701_ERROR_GENERIC: return "generic E1701 error";
    case LIBMCDRIVER_LIBOAPC_ERROR_E1701_ERROR_INVALID_CARD: return "wrong or illegal card number specified";
    case LIBMCDRIVER_LIBOAPC_ERROR_E1701_ERROR_NO_CONNECTION: return "could not connect to card";
    case LIBMCDRIVER_LIBOAPC_ERROR_E1701_ERROR_NO_MEMORY: return "wrong or illegal card number specified";
    case LIBMCDRIVER_LIBOAPC_ERROR_E1701_ERROR_UNKNOWN_FW: return "unknown or incompatible firmware version";
    case LIBMCDRIVER_LIBOAPC_ERROR_E1701_ERROR_UNKNOWN: return "unknown or unspecified error";
    case LIBMCDRIVER_LIBOAPC_ERROR_E1701_ERROR_TRANSMISSION: return "wrong or illegal card number specified";
    case LIBMCDRIVER_LIBOAPC_ERROR_E1701_ERROR_FILEOPEN: return "opening a file failed";
    case LIBMCDRIVER_LIBOAPC_ERROR_E1701_ERROR_FILEWRITE: return "writing data to a file failed";
    case LIBMCDRIVER_LIBOAPC_ERROR_E1701_ERROR_BORD_NA: return "a base- or extension board that would be required for a function is not available";
    case LIBMCDRIVER_LIBOAPC_ERROR_E1701_ERROR_INVALID_DATA: return "a function was called with invalid data or by using an operation mode where this function is not used or allowed";
    case LIBMCDRIVER_LIBOAPC_ERROR_E1701_ERROR_UNKNOWN_BOARD: return "trying to access a board that is not a scanner controller";
    case LIBMCDRIVER_LIBOAPC_ERROR_E1701_ERROR_FILENAME: return "there is an error with the given filename";
    case LIBMCDRIVER_LIBOAPC_ERROR_E1701_ERROR_NOT_SUPPORTED: return "the requested feature is not supported by the current firmware version";
    case LIBMCDRIVER_LIBOAPC_ERROR_E1701_ERROR_NO_DATA_AVAILABLE: return "tried to receive some data but there are none avilable yet";
    case LIBMCDRIVER_LIBOAPC_ERROR_DRIVERERROR: return "a driver error occured";
    case LIBMCDRIVER_LIBOAPC_ERROR_NOTCONNECTED: return "scanner is not connected";
    case LIBMCDRIVER_LIBOAPC_ERROR_INVALIDPOINTCOUNT: return "invalid point count";
    case LIBMCDRIVER_LIBOAPC_ERROR_INVALIDFIELDSIZE: return "invalid field size";
    default: return "unknown error";
  }
}

/*************************************************************************************************************************
 Declaration of handle classes 
**************************************************************************************************************************/

typedef LibMCDriver_LibOAPCHandle LibMCDriver_LibOAPC_Base;
typedef LibMCDriver_LibOAPCHandle LibMCDriver_LibOAPC_Driver;
typedef LibMCDriver_LibOAPCHandle LibMCDriver_LibOAPC_Driver_E1701;

namespace LibMCDriver_LibOAPC {

} // namespace LibMCDriver_LibOAPC;

// define legacy C-names for enums, structs and function types

#endif // __LIBMCDRIVER_LIBOAPC_TYPES_HEADER_CPP
