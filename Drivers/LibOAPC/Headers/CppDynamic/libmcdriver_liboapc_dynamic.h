/*++

Copyright (C) 2020 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.8.0-develop.

Abstract: This is an autogenerated C++-Header file in order to allow an easy
 use of MC Driver LibOAPC

Interface version: 2.0.0

*/

#ifndef __LIBMCDRIVER_LIBOAPC_DYNAMICHEADER_CPPTYPES
#define __LIBMCDRIVER_LIBOAPC_DYNAMICHEADER_CPPTYPES

#include "libmcdriver_liboapc_types.hpp"

#include "libmcenv_types.hpp"


/*************************************************************************************************************************
 Class definition for Base
**************************************************************************************************************************/

/*************************************************************************************************************************
 Class definition for Driver
**************************************************************************************************************************/

/**
* returns the name identifier of the driver
*
* @param[in] pDriver - Driver instance.
* @param[in] nNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNameBuffer -  buffer of Name of the driver., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCDriver_LibOAPCResult (*PLibMCDriver_LibOAPCDriver_GetNamePtr) (LibMCDriver_LibOAPC_Driver pDriver, const LibMCDriver_LibOAPC_uint32 nNameBufferSize, LibMCDriver_LibOAPC_uint32* pNameNeededChars, char * pNameBuffer);

/**
* returns the type identifier of the driver
*
* @param[in] pDriver - Driver instance.
* @param[in] nTypeBufferSize - size of the buffer (including trailing 0)
* @param[out] pTypeNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pTypeBuffer -  buffer of Type of the driver., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCDriver_LibOAPCResult (*PLibMCDriver_LibOAPCDriver_GetTypePtr) (LibMCDriver_LibOAPC_Driver pDriver, const LibMCDriver_LibOAPC_uint32 nTypeBufferSize, LibMCDriver_LibOAPC_uint32* pTypeNeededChars, char * pTypeBuffer);

/**
* returns the version identifiers of the driver
*
* @param[in] pDriver - Driver instance.
* @param[out] pMajor - Major version.
* @param[out] pMinor - Minor version.
* @param[out] pMicro - Micro version.
* @param[in] nBuildBufferSize - size of the buffer (including trailing 0)
* @param[out] pBuildNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pBuildBuffer -  buffer of Build identifier., may be NULL
* @return error code or 0 (success)
*/
typedef LibMCDriver_LibOAPCResult (*PLibMCDriver_LibOAPCDriver_GetVersionPtr) (LibMCDriver_LibOAPC_Driver pDriver, LibMCDriver_LibOAPC_uint32 * pMajor, LibMCDriver_LibOAPC_uint32 * pMinor, LibMCDriver_LibOAPC_uint32 * pMicro, const LibMCDriver_LibOAPC_uint32 nBuildBufferSize, LibMCDriver_LibOAPC_uint32* pBuildNeededChars, char * pBuildBuffer);

/**
* Updates the driver parameters in the driver environment. Might be called out of thread. Implementation MUST be able to handle parallel calls.
*
* @param[in] pDriver - Driver instance.
* @param[in] pDriverUpdateInstance - Status update instance.
* @return error code or 0 (success)
*/
typedef LibMCDriver_LibOAPCResult (*PLibMCDriver_LibOAPCDriver_QueryParametersPtr) (LibMCDriver_LibOAPC_Driver pDriver, LibMCEnv_DriverStatusUpdateSession pDriverUpdateInstance);

/*************************************************************************************************************************
 Class definition for Driver_E1701
**************************************************************************************************************************/

/**
* Sets the correction file stream.
*
* @param[in] pDriver_E1701 - Driver_E1701 instance.
* @param[in] nCorrectionFileBufferSize - Number of elements in buffer
* @param[in] pCorrectionFileBuffer - uint8 buffer of binary data of the correction file.
* @return error code or 0 (success)
*/
typedef LibMCDriver_LibOAPCResult (*PLibMCDriver_LibOAPCDriver_E1701_SetCorrectionFilePtr) (LibMCDriver_LibOAPC_Driver_E1701 pDriver_E1701, LibMCDriver_LibOAPC_uint64 nCorrectionFileBufferSize, const LibMCDriver_LibOAPC_uint8 * pCorrectionFileBuffer);

/**
* Sets the field size in mm of the optical system.
*
* @param[in] pDriver_E1701 - Driver_E1701 instance.
* @param[in] dMinX - Minimum X Coordinate in mm
* @param[in] dMinY - Minimum Y Coordinate in mm
* @param[in] dMaxX - Maximum X Coordinate in mm
* @param[in] dMaxY - Maximum Y Coordinate in mm
* @return error code or 0 (success)
*/
typedef LibMCDriver_LibOAPCResult (*PLibMCDriver_LibOAPCDriver_E1701_SetOpticalFieldPtr) (LibMCDriver_LibOAPC_Driver_E1701 pDriver_E1701, LibMCDriver_LibOAPC_double dMinX, LibMCDriver_LibOAPC_double dMinY, LibMCDriver_LibOAPC_double dMaxX, LibMCDriver_LibOAPC_double dMaxY);

/**
* Sets the field size in mm of the internal unit system.
*
* @param[in] pDriver_E1701 - Driver_E1701 instance.
* @param[in] nMinX - Minimum X Coordinate in logical units
* @param[in] nMinY - Minimum Y Coordinate in logical units
* @param[in] nMaxX - Maximum X Coordinate in logical units
* @param[in] nMaxY - Maximum Y Coordinate in logical units
* @return error code or 0 (success)
*/
typedef LibMCDriver_LibOAPCResult (*PLibMCDriver_LibOAPCDriver_E1701_SetLogicalFieldPtr) (LibMCDriver_LibOAPC_Driver_E1701 pDriver_E1701, LibMCDriver_LibOAPC_int32 nMinX, LibMCDriver_LibOAPC_int32 nMinY, LibMCDriver_LibOAPC_int32 nMaxX, LibMCDriver_LibOAPC_int32 nMaxY);

/**
* Creates and initializes the OAPC Scanner Driver.
*
* @param[in] pDriver_E1701 - Driver_E1701 instance.
* @param[in] pConnectionString - Connection string of the device.
* @param[in] pPassword - Password of the device. Pass empty string if not used.
* @return error code or 0 (success)
*/
typedef LibMCDriver_LibOAPCResult (*PLibMCDriver_LibOAPCDriver_E1701_ConnectPtr) (LibMCDriver_LibOAPC_Driver_E1701 pDriver_E1701, const char * pConnectionString, const char * pPassword);

/**
* Disconnects from the Laser Scanner Emulator.
*
* @param[in] pDriver_E1701 - Driver_E1701 instance.
* @return error code or 0 (success)
*/
typedef LibMCDriver_LibOAPCResult (*PLibMCDriver_LibOAPCDriver_E1701_DisconnectPtr) (LibMCDriver_LibOAPC_Driver_E1701 pDriver_E1701);

/**
* Draws a layer of a build stream. Blocks until the layer is drawn.
*
* @param[in] pDriver_E1701 - Driver_E1701 instance.
* @param[in] pStreamUUID - UUID of the build stream. Must have been loaded in memory by the system.
* @param[in] nLayerIndex - Layer index of the build file.
* @return error code or 0 (success)
*/
typedef LibMCDriver_LibOAPCResult (*PLibMCDriver_LibOAPCDriver_E1701_DrawLayerPtr) (LibMCDriver_LibOAPC_Driver_E1701 pDriver_E1701, const char * pStreamUUID, LibMCDriver_LibOAPC_uint32 nLayerIndex);

/*************************************************************************************************************************
 Global functions
**************************************************************************************************************************/

/**
* retrieves the binary version of this library.
*
* @param[out] pMajor - returns the major version of this library
* @param[out] pMinor - returns the minor version of this library
* @param[out] pMicro - returns the micro version of this library
* @return error code or 0 (success)
*/
typedef LibMCDriver_LibOAPCResult (*PLibMCDriver_LibOAPCGetVersionPtr) (LibMCDriver_LibOAPC_uint32 * pMajor, LibMCDriver_LibOAPC_uint32 * pMinor, LibMCDriver_LibOAPC_uint32 * pMicro);

/**
* Returns the last error recorded on this object
*
* @param[in] pInstance - Instance Handle
* @param[in] nErrorMessageBufferSize - size of the buffer (including trailing 0)
* @param[out] pErrorMessageNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pErrorMessageBuffer -  buffer of Message of the last error, may be NULL
* @param[out] pHasError - Is there a last error to query
* @return error code or 0 (success)
*/
typedef LibMCDriver_LibOAPCResult (*PLibMCDriver_LibOAPCGetLastErrorPtr) (LibMCDriver_LibOAPC_Base pInstance, const LibMCDriver_LibOAPC_uint32 nErrorMessageBufferSize, LibMCDriver_LibOAPC_uint32* pErrorMessageNeededChars, char * pErrorMessageBuffer, bool * pHasError);

/**
* Releases shared ownership of an Instance
*
* @param[in] pInstance - Instance Handle
* @return error code or 0 (success)
*/
typedef LibMCDriver_LibOAPCResult (*PLibMCDriver_LibOAPCReleaseInstancePtr) (LibMCDriver_LibOAPC_Base pInstance);

/**
* Acquires shared ownership of an Instance
*
* @param[in] pInstance - Instance Handle
* @return error code or 0 (success)
*/
typedef LibMCDriver_LibOAPCResult (*PLibMCDriver_LibOAPCAcquireInstancePtr) (LibMCDriver_LibOAPC_Base pInstance);

/**
* Injects an imported component for usage within this component
*
* @param[in] pNameSpace - NameSpace of the injected component
* @param[in] pSymbolAddressMethod - Address of the SymbolAddressMethod of the injected component
* @return error code or 0 (success)
*/
typedef LibMCDriver_LibOAPCResult (*PLibMCDriver_LibOAPCInjectComponentPtr) (const char * pNameSpace, LibMCDriver_LibOAPC_pvoid pSymbolAddressMethod);

/**
* Returns the address of the SymbolLookupMethod
*
* @param[out] pSymbolLookupMethod - Address of the SymbolAddressMethod
* @return error code or 0 (success)
*/
typedef LibMCDriver_LibOAPCResult (*PLibMCDriver_LibOAPCGetSymbolLookupMethodPtr) (LibMCDriver_LibOAPC_pvoid * pSymbolLookupMethod);

/**
* Creates a driver instance with a specific name.
*
* @param[in] pName - Name of driver to be created.
* @param[in] pType - Type of driver to be created.
* @param[in] pDriverEnvironment - Environment of this driver.
* @param[out] pInstance - New Driver instance
* @return error code or 0 (success)
*/
typedef LibMCDriver_LibOAPCResult (*PLibMCDriver_LibOAPCCreateDriverPtr) (const char * pName, const char * pType, LibMCEnv_DriverEnvironment pDriverEnvironment, LibMCDriver_LibOAPC_Driver * pInstance);

/*************************************************************************************************************************
 Function Table Structure
**************************************************************************************************************************/

typedef struct {
	void * m_LibraryHandle;
	PLibMCDriver_LibOAPCDriver_GetNamePtr m_Driver_GetName;
	PLibMCDriver_LibOAPCDriver_GetTypePtr m_Driver_GetType;
	PLibMCDriver_LibOAPCDriver_GetVersionPtr m_Driver_GetVersion;
	PLibMCDriver_LibOAPCDriver_QueryParametersPtr m_Driver_QueryParameters;
	PLibMCDriver_LibOAPCDriver_E1701_SetCorrectionFilePtr m_Driver_E1701_SetCorrectionFile;
	PLibMCDriver_LibOAPCDriver_E1701_SetOpticalFieldPtr m_Driver_E1701_SetOpticalField;
	PLibMCDriver_LibOAPCDriver_E1701_SetLogicalFieldPtr m_Driver_E1701_SetLogicalField;
	PLibMCDriver_LibOAPCDriver_E1701_ConnectPtr m_Driver_E1701_Connect;
	PLibMCDriver_LibOAPCDriver_E1701_DisconnectPtr m_Driver_E1701_Disconnect;
	PLibMCDriver_LibOAPCDriver_E1701_DrawLayerPtr m_Driver_E1701_DrawLayer;
	PLibMCDriver_LibOAPCGetVersionPtr m_GetVersion;
	PLibMCDriver_LibOAPCGetLastErrorPtr m_GetLastError;
	PLibMCDriver_LibOAPCReleaseInstancePtr m_ReleaseInstance;
	PLibMCDriver_LibOAPCAcquireInstancePtr m_AcquireInstance;
	PLibMCDriver_LibOAPCInjectComponentPtr m_InjectComponent;
	PLibMCDriver_LibOAPCGetSymbolLookupMethodPtr m_GetSymbolLookupMethod;
	PLibMCDriver_LibOAPCCreateDriverPtr m_CreateDriver;
} sLibMCDriver_LibOAPCDynamicWrapperTable;

#endif // __LIBMCDRIVER_LIBOAPC_DYNAMICHEADER_CPPTYPES

