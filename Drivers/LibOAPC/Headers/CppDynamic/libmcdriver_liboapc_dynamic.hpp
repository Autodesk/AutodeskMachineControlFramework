/*++

Copyright (C) 2020 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.8.0-develop.

Abstract: This is an autogenerated C++-Header file in order to allow an easy
 use of MC Driver LibOAPC

Interface version: 2.0.0

*/

#ifndef __LIBMCDRIVER_LIBOAPC_CPPHEADER_DYNAMIC_CPP
#define __LIBMCDRIVER_LIBOAPC_CPPHEADER_DYNAMIC_CPP

#include "libmcdriver_liboapc_types.hpp"
#include "libmcdriver_liboapc_dynamic.h"

#include "libmcenv_dynamic.hpp"

#ifdef _WIN32
#include <windows.h>
#else // _WIN32
#include <dlfcn.h>
#endif // _WIN32
#include <string>
#include <memory>
#include <vector>
#include <exception>

namespace LibMCDriver_LibOAPC {

/*************************************************************************************************************************
 Forward Declaration of all classes
**************************************************************************************************************************/
class CWrapper;
class CBase;
class CDriver;
class CDriver_E1701;

/*************************************************************************************************************************
 Declaration of deprecated class types
**************************************************************************************************************************/
typedef CWrapper CLibMCDriver_LibOAPCWrapper;
typedef CBase CLibMCDriver_LibOAPCBase;
typedef CDriver CLibMCDriver_LibOAPCDriver;
typedef CDriver_E1701 CLibMCDriver_LibOAPCDriver_E1701;

/*************************************************************************************************************************
 Declaration of shared pointer types
**************************************************************************************************************************/
typedef std::shared_ptr<CWrapper> PWrapper;
typedef std::shared_ptr<CBase> PBase;
typedef std::shared_ptr<CDriver> PDriver;
typedef std::shared_ptr<CDriver_E1701> PDriver_E1701;

/*************************************************************************************************************************
 Declaration of deprecated shared pointer types
**************************************************************************************************************************/
typedef PWrapper PLibMCDriver_LibOAPCWrapper;
typedef PBase PLibMCDriver_LibOAPCBase;
typedef PDriver PLibMCDriver_LibOAPCDriver;
typedef PDriver_E1701 PLibMCDriver_LibOAPCDriver_E1701;


/*************************************************************************************************************************
 classParam Definition
**************************************************************************************************************************/

template<class T> class classParam {
private:
	const T* m_ptr;

public:
	classParam(const T* ptr)
		: m_ptr (ptr)
	{
	}

	classParam(std::shared_ptr <T> sharedPtr)
		: m_ptr (sharedPtr.get())
	{
	}

	LibMCDriver_LibOAPCHandle GetHandle()
	{
		if (m_ptr != nullptr)
			return m_ptr->handle();
		return nullptr;
	}
};

/*************************************************************************************************************************
 Class ELibMCDriver_LibOAPCException 
**************************************************************************************************************************/
class ELibMCDriver_LibOAPCException : public std::exception {
protected:
	/**
	* Error code for the Exception.
	*/
	LibMCDriver_LibOAPCResult m_errorCode;
	/**
	* Error message for the Exception.
	*/
	std::string m_errorMessage;
	std::string m_originalErrorMessage;

public:
	/**
	* Exception Constructor.
	*/
	ELibMCDriver_LibOAPCException(LibMCDriver_LibOAPCResult errorCode, const std::string & sErrorMessage)
		: m_errorCode(errorCode), m_originalErrorMessage(sErrorMessage)
	{
		m_errorMessage = buildErrorMessage();
	}

	/**
	* Returns error code
	*/
	LibMCDriver_LibOAPCResult getErrorCode() const noexcept
	{
		return m_errorCode;
	}

	/**
	* Returns error message
	*/
	const char* what() const noexcept
	{
		return m_errorMessage.c_str();
	}

	const char* getErrorMessage() const noexcept
	{
		return m_originalErrorMessage.c_str();
	}

	const char* getErrorName() const noexcept
	{
		switch(getErrorCode()) {
			case LIBMCDRIVER_LIBOAPC_SUCCESS: return "SUCCESS";
			case LIBMCDRIVER_LIBOAPC_ERROR_NOTIMPLEMENTED: return "NOTIMPLEMENTED";
			case LIBMCDRIVER_LIBOAPC_ERROR_INVALIDPARAM: return "INVALIDPARAM";
			case LIBMCDRIVER_LIBOAPC_ERROR_INVALIDCAST: return "INVALIDCAST";
			case LIBMCDRIVER_LIBOAPC_ERROR_BUFFERTOOSMALL: return "BUFFERTOOSMALL";
			case LIBMCDRIVER_LIBOAPC_ERROR_GENERICEXCEPTION: return "GENERICEXCEPTION";
			case LIBMCDRIVER_LIBOAPC_ERROR_COULDNOTLOADLIBRARY: return "COULDNOTLOADLIBRARY";
			case LIBMCDRIVER_LIBOAPC_ERROR_COULDNOTFINDLIBRARYEXPORT: return "COULDNOTFINDLIBRARYEXPORT";
			case LIBMCDRIVER_LIBOAPC_ERROR_INCOMPATIBLEBINARYVERSION: return "INCOMPATIBLEBINARYVERSION";
			case LIBMCDRIVER_LIBOAPC_ERROR_E1701_ERROR_GENERIC: return "E1701_ERROR_GENERIC";
			case LIBMCDRIVER_LIBOAPC_ERROR_E1701_ERROR_INVALID_CARD: return "E1701_ERROR_INVALID_CARD";
			case LIBMCDRIVER_LIBOAPC_ERROR_E1701_ERROR_NO_CONNECTION: return "E1701_ERROR_NO_CONNECTION";
			case LIBMCDRIVER_LIBOAPC_ERROR_E1701_ERROR_NO_MEMORY: return "E1701_ERROR_NO_MEMORY";
			case LIBMCDRIVER_LIBOAPC_ERROR_E1701_ERROR_UNKNOWN_FW: return "E1701_ERROR_UNKNOWN_FW";
			case LIBMCDRIVER_LIBOAPC_ERROR_E1701_ERROR_UNKNOWN: return "E1701_ERROR_UNKNOWN";
			case LIBMCDRIVER_LIBOAPC_ERROR_E1701_ERROR_TRANSMISSION: return "E1701_ERROR_TRANSMISSION";
			case LIBMCDRIVER_LIBOAPC_ERROR_E1701_ERROR_FILEOPEN: return "E1701_ERROR_FILEOPEN";
			case LIBMCDRIVER_LIBOAPC_ERROR_E1701_ERROR_FILEWRITE: return "E1701_ERROR_FILEWRITE";
			case LIBMCDRIVER_LIBOAPC_ERROR_E1701_ERROR_BORD_NA: return "E1701_ERROR_BORD_NA";
			case LIBMCDRIVER_LIBOAPC_ERROR_E1701_ERROR_INVALID_DATA: return "E1701_ERROR_INVALID_DATA";
			case LIBMCDRIVER_LIBOAPC_ERROR_E1701_ERROR_UNKNOWN_BOARD: return "E1701_ERROR_UNKNOWN_BOARD";
			case LIBMCDRIVER_LIBOAPC_ERROR_E1701_ERROR_FILENAME: return "E1701_ERROR_FILENAME";
			case LIBMCDRIVER_LIBOAPC_ERROR_E1701_ERROR_NOT_SUPPORTED: return "E1701_ERROR_NOT_SUPPORTED";
			case LIBMCDRIVER_LIBOAPC_ERROR_E1701_ERROR_NO_DATA_AVAILABLE: return "E1701_ERROR_NO_DATA_AVAILABLE";
			case LIBMCDRIVER_LIBOAPC_ERROR_DRIVERERROR: return "DRIVERERROR";
			case LIBMCDRIVER_LIBOAPC_ERROR_NOTCONNECTED: return "NOTCONNECTED";
			case LIBMCDRIVER_LIBOAPC_ERROR_INVALIDPOINTCOUNT: return "INVALIDPOINTCOUNT";
			case LIBMCDRIVER_LIBOAPC_ERROR_INVALIDFIELDSIZE: return "INVALIDFIELDSIZE";
		}
		return "UNKNOWN";
	}

	const char* getErrorDescription() const noexcept
	{
		switch(getErrorCode()) {
			case LIBMCDRIVER_LIBOAPC_SUCCESS: return "success";
			case LIBMCDRIVER_LIBOAPC_ERROR_NOTIMPLEMENTED: return "functionality not implemented";
			case LIBMCDRIVER_LIBOAPC_ERROR_INVALIDPARAM: return "an invalid parameter was passed";
			case LIBMCDRIVER_LIBOAPC_ERROR_INVALIDCAST: return "a type cast failed";
			case LIBMCDRIVER_LIBOAPC_ERROR_BUFFERTOOSMALL: return "a provided buffer is too small";
			case LIBMCDRIVER_LIBOAPC_ERROR_GENERICEXCEPTION: return "a generic exception occurred";
			case LIBMCDRIVER_LIBOAPC_ERROR_COULDNOTLOADLIBRARY: return "the library could not be loaded";
			case LIBMCDRIVER_LIBOAPC_ERROR_COULDNOTFINDLIBRARYEXPORT: return "a required exported symbol could not be found in the library";
			case LIBMCDRIVER_LIBOAPC_ERROR_INCOMPATIBLEBINARYVERSION: return "the version of the binary interface does not match the bindings interface";
			case LIBMCDRIVER_LIBOAPC_ERROR_E1701_ERROR_GENERIC: return "generic E1701 error";
			case LIBMCDRIVER_LIBOAPC_ERROR_E1701_ERROR_INVALID_CARD: return "wrong or illegal card number specified";
			case LIBMCDRIVER_LIBOAPC_ERROR_E1701_ERROR_NO_CONNECTION: return "could not connect to card";
			case LIBMCDRIVER_LIBOAPC_ERROR_E1701_ERROR_NO_MEMORY: return "wrong or illegal card number specified";
			case LIBMCDRIVER_LIBOAPC_ERROR_E1701_ERROR_UNKNOWN_FW: return "unknown or incompatible firmware version";
			case LIBMCDRIVER_LIBOAPC_ERROR_E1701_ERROR_UNKNOWN: return "unknown or unspecified error";
			case LIBMCDRIVER_LIBOAPC_ERROR_E1701_ERROR_TRANSMISSION: return "wrong or illegal card number specified";
			case LIBMCDRIVER_LIBOAPC_ERROR_E1701_ERROR_FILEOPEN: return "opening a file failed";
			case LIBMCDRIVER_LIBOAPC_ERROR_E1701_ERROR_FILEWRITE: return "writing data to a file failed";
			case LIBMCDRIVER_LIBOAPC_ERROR_E1701_ERROR_BORD_NA: return "a base- or extension board that would be required for a function is not available";
			case LIBMCDRIVER_LIBOAPC_ERROR_E1701_ERROR_INVALID_DATA: return "a function was called with invalid data or by using an operation mode where this function is not used or allowed";
			case LIBMCDRIVER_LIBOAPC_ERROR_E1701_ERROR_UNKNOWN_BOARD: return "trying to access a board that is not a scanner controller";
			case LIBMCDRIVER_LIBOAPC_ERROR_E1701_ERROR_FILENAME: return "there is an error with the given filename";
			case LIBMCDRIVER_LIBOAPC_ERROR_E1701_ERROR_NOT_SUPPORTED: return "the requested feature is not supported by the current firmware version";
			case LIBMCDRIVER_LIBOAPC_ERROR_E1701_ERROR_NO_DATA_AVAILABLE: return "tried to receive some data but there are none avilable yet";
			case LIBMCDRIVER_LIBOAPC_ERROR_DRIVERERROR: return "a driver error occured";
			case LIBMCDRIVER_LIBOAPC_ERROR_NOTCONNECTED: return "scanner is not connected";
			case LIBMCDRIVER_LIBOAPC_ERROR_INVALIDPOINTCOUNT: return "invalid point count";
			case LIBMCDRIVER_LIBOAPC_ERROR_INVALIDFIELDSIZE: return "invalid field size";
		}
		return "unknown error";
	}

private:

	std::string buildErrorMessage() const noexcept
	{
		std::string msg = m_originalErrorMessage;
		if (msg.empty()) {
			msg = getErrorDescription();
		}
		return std::string("Error: ") + getErrorName() + ": " + msg;
	}
};

/*************************************************************************************************************************
 Class CInputVector
**************************************************************************************************************************/
template <typename T>
class CInputVector {
private:
	
	const T* m_data;
	size_t m_size;
	
public:
	
	CInputVector(const std::vector<T>& vec)
		: m_data( vec.data() ), m_size( vec.size() )
	{
	}
	
	CInputVector(const T* in_data, size_t in_size)
		: m_data( in_data ), m_size(in_size )
	{
	}
	
	const T* data() const
	{
		return m_data;
	}
	
	size_t size() const
	{
		return m_size;
	}
	
};

// declare deprecated class name
template<typename T>
using CLibMCDriver_LibOAPCInputVector = CInputVector<T>;

/*************************************************************************************************************************
 Class CWrapper 
**************************************************************************************************************************/
class CWrapper {
public:
	
	explicit CWrapper(void* pSymbolLookupMethod)
	{
		CheckError(nullptr, initWrapperTable(&m_WrapperTable));
		CheckError(nullptr, loadWrapperTableFromSymbolLookupMethod(&m_WrapperTable, pSymbolLookupMethod));
		
		CheckError(nullptr, checkBinaryVersion());
	}
	
	explicit CWrapper(const std::string &sFileName)
	{
		CheckError(nullptr, initWrapperTable(&m_WrapperTable));
		CheckError(nullptr, loadWrapperTable(&m_WrapperTable, sFileName.c_str()));
		
		CheckError(nullptr, checkBinaryVersion());
	}
	
	static PWrapper loadLibrary(const std::string &sFileName)
	{
		return std::make_shared<CWrapper>(sFileName);
	}
	
	static PWrapper loadLibraryFromSymbolLookupMethod(void* pSymbolLookupMethod)
	{
		return std::make_shared<CWrapper>(pSymbolLookupMethod);
	}
	
	~CWrapper()
	{
		releaseWrapperTable(&m_WrapperTable);
	}
	
	inline void CheckError(CBase * pBaseClass, LibMCDriver_LibOAPCResult nResult);

	inline void GetVersion(LibMCDriver_LibOAPC_uint32 & nMajor, LibMCDriver_LibOAPC_uint32 & nMinor, LibMCDriver_LibOAPC_uint32 & nMicro);
	inline bool GetLastError(classParam<CBase> pInstance, std::string & sErrorMessage);
	inline void ReleaseInstance(classParam<CBase> pInstance);
	inline void AcquireInstance(classParam<CBase> pInstance);
	inline void InjectComponent(const std::string & sNameSpace, const LibMCDriver_LibOAPC_pvoid pSymbolAddressMethod);
	inline LibMCDriver_LibOAPC_pvoid GetSymbolLookupMethod();
	inline PDriver CreateDriver(const std::string & sName, const std::string & sType, classParam<LibMCEnv::CDriverEnvironment> pDriverEnvironment);

private:
	sLibMCDriver_LibOAPCDynamicWrapperTable m_WrapperTable;
	// Injected Components
	LibMCEnv::PWrapper m_pLibMCEnvWrapper;

	
	LibMCDriver_LibOAPCResult checkBinaryVersion()
	{
		LibMCDriver_LibOAPC_uint32 nMajor, nMinor, nMicro;
		GetVersion(nMajor, nMinor, nMicro);
		if (nMajor != LIBMCDRIVER_LIBOAPC_VERSION_MAJOR) {
			return LIBMCDRIVER_LIBOAPC_ERROR_INCOMPATIBLEBINARYVERSION;
		}
		return LIBMCDRIVER_LIBOAPC_SUCCESS;
	}
	LibMCDriver_LibOAPCResult initWrapperTable(sLibMCDriver_LibOAPCDynamicWrapperTable * pWrapperTable);
	LibMCDriver_LibOAPCResult releaseWrapperTable(sLibMCDriver_LibOAPCDynamicWrapperTable * pWrapperTable);
	LibMCDriver_LibOAPCResult loadWrapperTable(sLibMCDriver_LibOAPCDynamicWrapperTable * pWrapperTable, const char * pLibraryFileName);
	LibMCDriver_LibOAPCResult loadWrapperTableFromSymbolLookupMethod(sLibMCDriver_LibOAPCDynamicWrapperTable * pWrapperTable, void* pSymbolLookupMethod);

	friend class CBase;
	friend class CDriver;
	friend class CDriver_E1701;

};

	
/*************************************************************************************************************************
 Class CBase 
**************************************************************************************************************************/
class CBase {
public:
	
protected:
	/* Wrapper Object that created the class. */
	CWrapper * m_pWrapper;
	/* Handle to Instance in library*/
	LibMCDriver_LibOAPCHandle m_pHandle;

	/* Checks for an Error code and raises Exceptions */
	void CheckError(LibMCDriver_LibOAPCResult nResult)
	{
		if (m_pWrapper != nullptr)
			m_pWrapper->CheckError(this, nResult);
	}
public:
	/**
	* CBase::CBase - Constructor for Base class.
	*/
	CBase(CWrapper * pWrapper, LibMCDriver_LibOAPCHandle pHandle)
		: m_pWrapper(pWrapper), m_pHandle(pHandle)
	{
	}

	/**
	* CBase::~CBase - Destructor for Base class.
	*/
	virtual ~CBase()
	{
		if (m_pWrapper != nullptr)
			m_pWrapper->ReleaseInstance(this);
		m_pWrapper = nullptr;
	}

	/**
	* CBase::handle - Returns handle to instance.
	*/
	LibMCDriver_LibOAPCHandle handle() const
	{
		return m_pHandle;
	}

	/**
	* CBase::wrapper - Returns wrapper instance.
	*/
	CWrapper * wrapper() const
	{
		return m_pWrapper;
	}
	
	friend class CWrapper;
};
	
/*************************************************************************************************************************
 Class CDriver 
**************************************************************************************************************************/
class CDriver : public CBase {
public:
	
	/**
	* CDriver::CDriver - Constructor for Driver class.
	*/
	CDriver(CWrapper* pWrapper, LibMCDriver_LibOAPCHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline std::string GetName();
	inline std::string GetType();
	inline void GetVersion(LibMCDriver_LibOAPC_uint32 & nMajor, LibMCDriver_LibOAPC_uint32 & nMinor, LibMCDriver_LibOAPC_uint32 & nMicro, std::string & sBuild);
	inline void QueryParameters(classParam<LibMCEnv::CDriverStatusUpdateSession> pDriverUpdateInstance);
};
	
/*************************************************************************************************************************
 Class CDriver_E1701 
**************************************************************************************************************************/
class CDriver_E1701 : public CDriver {
public:
	
	/**
	* CDriver_E1701::CDriver_E1701 - Constructor for Driver_E1701 class.
	*/
	CDriver_E1701(CWrapper* pWrapper, LibMCDriver_LibOAPCHandle pHandle)
		: CDriver(pWrapper, pHandle)
	{
	}
	
	inline void SetCorrectionFile(const CInputVector<LibMCDriver_LibOAPC_uint8> & CorrectionFileBuffer);
	inline void SetOpticalField(const LibMCDriver_LibOAPC_double dMinX, const LibMCDriver_LibOAPC_double dMinY, const LibMCDriver_LibOAPC_double dMaxX, const LibMCDriver_LibOAPC_double dMaxY);
	inline void SetLogicalField(const LibMCDriver_LibOAPC_int32 nMinX, const LibMCDriver_LibOAPC_int32 nMinY, const LibMCDriver_LibOAPC_int32 nMaxX, const LibMCDriver_LibOAPC_int32 nMaxY);
	inline void Connect(const std::string & sConnectionString, const std::string & sPassword);
	inline void Disconnect();
	inline void DrawLayer(const std::string & sStreamUUID, const LibMCDriver_LibOAPC_uint32 nLayerIndex);
};
	
	/**
	* CWrapper::GetVersion - retrieves the binary version of this library.
	* @param[out] nMajor - returns the major version of this library
	* @param[out] nMinor - returns the minor version of this library
	* @param[out] nMicro - returns the micro version of this library
	*/
	inline void CWrapper::GetVersion(LibMCDriver_LibOAPC_uint32 & nMajor, LibMCDriver_LibOAPC_uint32 & nMinor, LibMCDriver_LibOAPC_uint32 & nMicro)
	{
		CheckError(nullptr,m_WrapperTable.m_GetVersion(&nMajor, &nMinor, &nMicro));
	}
	
	/**
	* CWrapper::GetLastError - Returns the last error recorded on this object
	* @param[in] pInstance - Instance Handle
	* @param[out] sErrorMessage - Message of the last error
	* @return Is there a last error to query
	*/
	inline bool CWrapper::GetLastError(classParam<CBase> pInstance, std::string & sErrorMessage)
	{
		LibMCDriver_LibOAPCHandle hInstance = pInstance.GetHandle();
		LibMCDriver_LibOAPC_uint32 bytesNeededErrorMessage = 0;
		LibMCDriver_LibOAPC_uint32 bytesWrittenErrorMessage = 0;
		bool resultHasError = 0;
		CheckError(nullptr,m_WrapperTable.m_GetLastError(hInstance, 0, &bytesNeededErrorMessage, nullptr, &resultHasError));
		std::vector<char> bufferErrorMessage(bytesNeededErrorMessage);
		CheckError(nullptr,m_WrapperTable.m_GetLastError(hInstance, bytesNeededErrorMessage, &bytesWrittenErrorMessage, &bufferErrorMessage[0], &resultHasError));
		sErrorMessage = std::string(&bufferErrorMessage[0]);
		
		return resultHasError;
	}
	
	/**
	* CWrapper::ReleaseInstance - Releases shared ownership of an Instance
	* @param[in] pInstance - Instance Handle
	*/
	inline void CWrapper::ReleaseInstance(classParam<CBase> pInstance)
	{
		LibMCDriver_LibOAPCHandle hInstance = pInstance.GetHandle();
		CheckError(nullptr,m_WrapperTable.m_ReleaseInstance(hInstance));
	}
	
	/**
	* CWrapper::AcquireInstance - Acquires shared ownership of an Instance
	* @param[in] pInstance - Instance Handle
	*/
	inline void CWrapper::AcquireInstance(classParam<CBase> pInstance)
	{
		LibMCDriver_LibOAPCHandle hInstance = pInstance.GetHandle();
		CheckError(nullptr,m_WrapperTable.m_AcquireInstance(hInstance));
	}
	
	/**
	* CWrapper::InjectComponent - Injects an imported component for usage within this component
	* @param[in] sNameSpace - NameSpace of the injected component
	* @param[in] pSymbolAddressMethod - Address of the SymbolAddressMethod of the injected component
	*/
	inline void CWrapper::InjectComponent(const std::string & sNameSpace, const LibMCDriver_LibOAPC_pvoid pSymbolAddressMethod)
	{
		CheckError(nullptr,m_WrapperTable.m_InjectComponent(sNameSpace.c_str(), pSymbolAddressMethod));
		
		bool bNameSpaceFound = false;
		if (sNameSpace == "LibMCEnv") {
			if (m_pLibMCEnvWrapper != nullptr) {
				throw ELibMCDriver_LibOAPCException(LIBMCDRIVER_LIBOAPC_ERROR_COULDNOTLOADLIBRARY, "Library with namespace " + sNameSpace + " is already registered.");
			}
			m_pLibMCEnvWrapper = LibMCEnv::CWrapper::loadLibraryFromSymbolLookupMethod(pSymbolAddressMethod);
			bNameSpaceFound = true;
		}
		if (!bNameSpaceFound)
			throw ELibMCDriver_LibOAPCException(LIBMCDRIVER_LIBOAPC_ERROR_COULDNOTLOADLIBRARY, "Unknown namespace " + sNameSpace);
	}
	
	/**
	* CWrapper::GetSymbolLookupMethod - Returns the address of the SymbolLookupMethod
	* @return Address of the SymbolAddressMethod
	*/
	inline LibMCDriver_LibOAPC_pvoid CWrapper::GetSymbolLookupMethod()
	{
		LibMCDriver_LibOAPC_pvoid resultSymbolLookupMethod = 0;
		CheckError(nullptr,m_WrapperTable.m_GetSymbolLookupMethod(&resultSymbolLookupMethod));
		
		return resultSymbolLookupMethod;
	}
	
	/**
	* CWrapper::CreateDriver - Creates a driver instance with a specific name.
	* @param[in] sName - Name of driver to be created.
	* @param[in] sType - Type of driver to be created.
	* @param[in] pDriverEnvironment - Environment of this driver.
	* @return New Driver instance
	*/
	inline PDriver CWrapper::CreateDriver(const std::string & sName, const std::string & sType, classParam<LibMCEnv::CDriverEnvironment> pDriverEnvironment)
	{
		LibMCEnvHandle hDriverEnvironment = pDriverEnvironment.GetHandle();
		LibMCDriver_LibOAPCHandle hInstance = nullptr;
		CheckError(nullptr,m_WrapperTable.m_CreateDriver(sName.c_str(), sType.c_str(), hDriverEnvironment, &hInstance));
		
		if (hInstance) {
			return std::make_shared<CDriver>(this, hInstance);
		} else {
			return nullptr;
		}
	}
	
	inline void CWrapper::CheckError(CBase * pBaseClass, LibMCDriver_LibOAPCResult nResult)
	{
		if (nResult != 0) {
			std::string sErrorMessage;
			if (pBaseClass != nullptr) {
				GetLastError(pBaseClass, sErrorMessage);
			}
			throw ELibMCDriver_LibOAPCException(nResult, sErrorMessage);
		}
	}
	

	inline LibMCDriver_LibOAPCResult CWrapper::initWrapperTable(sLibMCDriver_LibOAPCDynamicWrapperTable * pWrapperTable)
	{
		if (pWrapperTable == nullptr)
			return LIBMCDRIVER_LIBOAPC_ERROR_INVALIDPARAM;
		
		pWrapperTable->m_LibraryHandle = nullptr;
		pWrapperTable->m_Driver_GetName = nullptr;
		pWrapperTable->m_Driver_GetType = nullptr;
		pWrapperTable->m_Driver_GetVersion = nullptr;
		pWrapperTable->m_Driver_QueryParameters = nullptr;
		pWrapperTable->m_Driver_E1701_SetCorrectionFile = nullptr;
		pWrapperTable->m_Driver_E1701_SetOpticalField = nullptr;
		pWrapperTable->m_Driver_E1701_SetLogicalField = nullptr;
		pWrapperTable->m_Driver_E1701_Connect = nullptr;
		pWrapperTable->m_Driver_E1701_Disconnect = nullptr;
		pWrapperTable->m_Driver_E1701_DrawLayer = nullptr;
		pWrapperTable->m_GetVersion = nullptr;
		pWrapperTable->m_GetLastError = nullptr;
		pWrapperTable->m_ReleaseInstance = nullptr;
		pWrapperTable->m_AcquireInstance = nullptr;
		pWrapperTable->m_InjectComponent = nullptr;
		pWrapperTable->m_GetSymbolLookupMethod = nullptr;
		pWrapperTable->m_CreateDriver = nullptr;
		
		return LIBMCDRIVER_LIBOAPC_SUCCESS;
	}

	inline LibMCDriver_LibOAPCResult CWrapper::releaseWrapperTable(sLibMCDriver_LibOAPCDynamicWrapperTable * pWrapperTable)
	{
		if (pWrapperTable == nullptr)
			return LIBMCDRIVER_LIBOAPC_ERROR_INVALIDPARAM;
		
		if (pWrapperTable->m_LibraryHandle != nullptr) {
		#ifdef _WIN32
			HMODULE hModule = (HMODULE) pWrapperTable->m_LibraryHandle;
			FreeLibrary(hModule);
		#else // _WIN32
			dlclose(pWrapperTable->m_LibraryHandle);
		#endif // _WIN32
			return initWrapperTable(pWrapperTable);
		}
		
		return LIBMCDRIVER_LIBOAPC_SUCCESS;
	}

	inline LibMCDriver_LibOAPCResult CWrapper::loadWrapperTable(sLibMCDriver_LibOAPCDynamicWrapperTable * pWrapperTable, const char * pLibraryFileName)
	{
		if (pWrapperTable == nullptr)
			return LIBMCDRIVER_LIBOAPC_ERROR_INVALIDPARAM;
		if (pLibraryFileName == nullptr)
			return LIBMCDRIVER_LIBOAPC_ERROR_INVALIDPARAM;
		
		#ifdef _WIN32
		// Convert filename to UTF16-string
		int nLength = 0;
		while ((pLibraryFileName[nLength] != 0) && (nLength < MAX_PATH))
			nLength++;
		int nBufferSize = nLength * 2 + 2;
		std::vector<wchar_t> wsLibraryFileName(nBufferSize);
		int nResult = MultiByteToWideChar(CP_UTF8, 0, pLibraryFileName, nLength, &wsLibraryFileName[0], nBufferSize);
		if (nResult == 0)
			return LIBMCDRIVER_LIBOAPC_ERROR_COULDNOTLOADLIBRARY;
		
		HMODULE hLibrary = LoadLibraryW(wsLibraryFileName.data());
		if (hLibrary == 0) 
			return LIBMCDRIVER_LIBOAPC_ERROR_COULDNOTLOADLIBRARY;
		#else // _WIN32
		void* hLibrary = dlopen(pLibraryFileName, RTLD_LAZY);
		if (hLibrary == 0) 
			return LIBMCDRIVER_LIBOAPC_ERROR_COULDNOTLOADLIBRARY;
		dlerror();
		#endif // _WIN32
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_GetName = (PLibMCDriver_LibOAPCDriver_GetNamePtr) GetProcAddress(hLibrary, "libmcdriver_liboapc_driver_getname");
		#else // _WIN32
		pWrapperTable->m_Driver_GetName = (PLibMCDriver_LibOAPCDriver_GetNamePtr) dlsym(hLibrary, "libmcdriver_liboapc_driver_getname");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_GetName == nullptr)
			return LIBMCDRIVER_LIBOAPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_GetType = (PLibMCDriver_LibOAPCDriver_GetTypePtr) GetProcAddress(hLibrary, "libmcdriver_liboapc_driver_gettype");
		#else // _WIN32
		pWrapperTable->m_Driver_GetType = (PLibMCDriver_LibOAPCDriver_GetTypePtr) dlsym(hLibrary, "libmcdriver_liboapc_driver_gettype");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_GetType == nullptr)
			return LIBMCDRIVER_LIBOAPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_GetVersion = (PLibMCDriver_LibOAPCDriver_GetVersionPtr) GetProcAddress(hLibrary, "libmcdriver_liboapc_driver_getversion");
		#else // _WIN32
		pWrapperTable->m_Driver_GetVersion = (PLibMCDriver_LibOAPCDriver_GetVersionPtr) dlsym(hLibrary, "libmcdriver_liboapc_driver_getversion");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_GetVersion == nullptr)
			return LIBMCDRIVER_LIBOAPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_QueryParameters = (PLibMCDriver_LibOAPCDriver_QueryParametersPtr) GetProcAddress(hLibrary, "libmcdriver_liboapc_driver_queryparameters");
		#else // _WIN32
		pWrapperTable->m_Driver_QueryParameters = (PLibMCDriver_LibOAPCDriver_QueryParametersPtr) dlsym(hLibrary, "libmcdriver_liboapc_driver_queryparameters");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_QueryParameters == nullptr)
			return LIBMCDRIVER_LIBOAPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_E1701_SetCorrectionFile = (PLibMCDriver_LibOAPCDriver_E1701_SetCorrectionFilePtr) GetProcAddress(hLibrary, "libmcdriver_liboapc_driver_e1701_setcorrectionfile");
		#else // _WIN32
		pWrapperTable->m_Driver_E1701_SetCorrectionFile = (PLibMCDriver_LibOAPCDriver_E1701_SetCorrectionFilePtr) dlsym(hLibrary, "libmcdriver_liboapc_driver_e1701_setcorrectionfile");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_E1701_SetCorrectionFile == nullptr)
			return LIBMCDRIVER_LIBOAPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_E1701_SetOpticalField = (PLibMCDriver_LibOAPCDriver_E1701_SetOpticalFieldPtr) GetProcAddress(hLibrary, "libmcdriver_liboapc_driver_e1701_setopticalfield");
		#else // _WIN32
		pWrapperTable->m_Driver_E1701_SetOpticalField = (PLibMCDriver_LibOAPCDriver_E1701_SetOpticalFieldPtr) dlsym(hLibrary, "libmcdriver_liboapc_driver_e1701_setopticalfield");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_E1701_SetOpticalField == nullptr)
			return LIBMCDRIVER_LIBOAPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_E1701_SetLogicalField = (PLibMCDriver_LibOAPCDriver_E1701_SetLogicalFieldPtr) GetProcAddress(hLibrary, "libmcdriver_liboapc_driver_e1701_setlogicalfield");
		#else // _WIN32
		pWrapperTable->m_Driver_E1701_SetLogicalField = (PLibMCDriver_LibOAPCDriver_E1701_SetLogicalFieldPtr) dlsym(hLibrary, "libmcdriver_liboapc_driver_e1701_setlogicalfield");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_E1701_SetLogicalField == nullptr)
			return LIBMCDRIVER_LIBOAPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_E1701_Connect = (PLibMCDriver_LibOAPCDriver_E1701_ConnectPtr) GetProcAddress(hLibrary, "libmcdriver_liboapc_driver_e1701_connect");
		#else // _WIN32
		pWrapperTable->m_Driver_E1701_Connect = (PLibMCDriver_LibOAPCDriver_E1701_ConnectPtr) dlsym(hLibrary, "libmcdriver_liboapc_driver_e1701_connect");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_E1701_Connect == nullptr)
			return LIBMCDRIVER_LIBOAPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_E1701_Disconnect = (PLibMCDriver_LibOAPCDriver_E1701_DisconnectPtr) GetProcAddress(hLibrary, "libmcdriver_liboapc_driver_e1701_disconnect");
		#else // _WIN32
		pWrapperTable->m_Driver_E1701_Disconnect = (PLibMCDriver_LibOAPCDriver_E1701_DisconnectPtr) dlsym(hLibrary, "libmcdriver_liboapc_driver_e1701_disconnect");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_E1701_Disconnect == nullptr)
			return LIBMCDRIVER_LIBOAPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_Driver_E1701_DrawLayer = (PLibMCDriver_LibOAPCDriver_E1701_DrawLayerPtr) GetProcAddress(hLibrary, "libmcdriver_liboapc_driver_e1701_drawlayer");
		#else // _WIN32
		pWrapperTable->m_Driver_E1701_DrawLayer = (PLibMCDriver_LibOAPCDriver_E1701_DrawLayerPtr) dlsym(hLibrary, "libmcdriver_liboapc_driver_e1701_drawlayer");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_Driver_E1701_DrawLayer == nullptr)
			return LIBMCDRIVER_LIBOAPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GetVersion = (PLibMCDriver_LibOAPCGetVersionPtr) GetProcAddress(hLibrary, "libmcdriver_liboapc_getversion");
		#else // _WIN32
		pWrapperTable->m_GetVersion = (PLibMCDriver_LibOAPCGetVersionPtr) dlsym(hLibrary, "libmcdriver_liboapc_getversion");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GetVersion == nullptr)
			return LIBMCDRIVER_LIBOAPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GetLastError = (PLibMCDriver_LibOAPCGetLastErrorPtr) GetProcAddress(hLibrary, "libmcdriver_liboapc_getlasterror");
		#else // _WIN32
		pWrapperTable->m_GetLastError = (PLibMCDriver_LibOAPCGetLastErrorPtr) dlsym(hLibrary, "libmcdriver_liboapc_getlasterror");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GetLastError == nullptr)
			return LIBMCDRIVER_LIBOAPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ReleaseInstance = (PLibMCDriver_LibOAPCReleaseInstancePtr) GetProcAddress(hLibrary, "libmcdriver_liboapc_releaseinstance");
		#else // _WIN32
		pWrapperTable->m_ReleaseInstance = (PLibMCDriver_LibOAPCReleaseInstancePtr) dlsym(hLibrary, "libmcdriver_liboapc_releaseinstance");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ReleaseInstance == nullptr)
			return LIBMCDRIVER_LIBOAPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_AcquireInstance = (PLibMCDriver_LibOAPCAcquireInstancePtr) GetProcAddress(hLibrary, "libmcdriver_liboapc_acquireinstance");
		#else // _WIN32
		pWrapperTable->m_AcquireInstance = (PLibMCDriver_LibOAPCAcquireInstancePtr) dlsym(hLibrary, "libmcdriver_liboapc_acquireinstance");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_AcquireInstance == nullptr)
			return LIBMCDRIVER_LIBOAPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_InjectComponent = (PLibMCDriver_LibOAPCInjectComponentPtr) GetProcAddress(hLibrary, "libmcdriver_liboapc_injectcomponent");
		#else // _WIN32
		pWrapperTable->m_InjectComponent = (PLibMCDriver_LibOAPCInjectComponentPtr) dlsym(hLibrary, "libmcdriver_liboapc_injectcomponent");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_InjectComponent == nullptr)
			return LIBMCDRIVER_LIBOAPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GetSymbolLookupMethod = (PLibMCDriver_LibOAPCGetSymbolLookupMethodPtr) GetProcAddress(hLibrary, "libmcdriver_liboapc_getsymbollookupmethod");
		#else // _WIN32
		pWrapperTable->m_GetSymbolLookupMethod = (PLibMCDriver_LibOAPCGetSymbolLookupMethodPtr) dlsym(hLibrary, "libmcdriver_liboapc_getsymbollookupmethod");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GetSymbolLookupMethod == nullptr)
			return LIBMCDRIVER_LIBOAPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_CreateDriver = (PLibMCDriver_LibOAPCCreateDriverPtr) GetProcAddress(hLibrary, "libmcdriver_liboapc_createdriver");
		#else // _WIN32
		pWrapperTable->m_CreateDriver = (PLibMCDriver_LibOAPCCreateDriverPtr) dlsym(hLibrary, "libmcdriver_liboapc_createdriver");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_CreateDriver == nullptr)
			return LIBMCDRIVER_LIBOAPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		pWrapperTable->m_LibraryHandle = hLibrary;
		return LIBMCDRIVER_LIBOAPC_SUCCESS;
	}

	inline LibMCDriver_LibOAPCResult CWrapper::loadWrapperTableFromSymbolLookupMethod(sLibMCDriver_LibOAPCDynamicWrapperTable * pWrapperTable, void* pSymbolLookupMethod)
{
		if (pWrapperTable == nullptr)
			return LIBMCDRIVER_LIBOAPC_ERROR_INVALIDPARAM;
		if (pSymbolLookupMethod == nullptr)
			return LIBMCDRIVER_LIBOAPC_ERROR_INVALIDPARAM;
		
		typedef LibMCDriver_LibOAPCResult(*SymbolLookupType)(const char*, void**);
		
		SymbolLookupType pLookup = (SymbolLookupType)pSymbolLookupMethod;
		
		LibMCDriver_LibOAPCResult eLookupError = LIBMCDRIVER_LIBOAPC_SUCCESS;
		eLookupError = (*pLookup)("libmcdriver_liboapc_driver_getname", (void**)&(pWrapperTable->m_Driver_GetName));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_GetName == nullptr) )
			return LIBMCDRIVER_LIBOAPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_liboapc_driver_gettype", (void**)&(pWrapperTable->m_Driver_GetType));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_GetType == nullptr) )
			return LIBMCDRIVER_LIBOAPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_liboapc_driver_getversion", (void**)&(pWrapperTable->m_Driver_GetVersion));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_GetVersion == nullptr) )
			return LIBMCDRIVER_LIBOAPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_liboapc_driver_queryparameters", (void**)&(pWrapperTable->m_Driver_QueryParameters));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_QueryParameters == nullptr) )
			return LIBMCDRIVER_LIBOAPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_liboapc_driver_e1701_setcorrectionfile", (void**)&(pWrapperTable->m_Driver_E1701_SetCorrectionFile));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_E1701_SetCorrectionFile == nullptr) )
			return LIBMCDRIVER_LIBOAPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_liboapc_driver_e1701_setopticalfield", (void**)&(pWrapperTable->m_Driver_E1701_SetOpticalField));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_E1701_SetOpticalField == nullptr) )
			return LIBMCDRIVER_LIBOAPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_liboapc_driver_e1701_setlogicalfield", (void**)&(pWrapperTable->m_Driver_E1701_SetLogicalField));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_E1701_SetLogicalField == nullptr) )
			return LIBMCDRIVER_LIBOAPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_liboapc_driver_e1701_connect", (void**)&(pWrapperTable->m_Driver_E1701_Connect));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_E1701_Connect == nullptr) )
			return LIBMCDRIVER_LIBOAPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_liboapc_driver_e1701_disconnect", (void**)&(pWrapperTable->m_Driver_E1701_Disconnect));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_E1701_Disconnect == nullptr) )
			return LIBMCDRIVER_LIBOAPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_liboapc_driver_e1701_drawlayer", (void**)&(pWrapperTable->m_Driver_E1701_DrawLayer));
		if ( (eLookupError != 0) || (pWrapperTable->m_Driver_E1701_DrawLayer == nullptr) )
			return LIBMCDRIVER_LIBOAPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_liboapc_getversion", (void**)&(pWrapperTable->m_GetVersion));
		if ( (eLookupError != 0) || (pWrapperTable->m_GetVersion == nullptr) )
			return LIBMCDRIVER_LIBOAPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_liboapc_getlasterror", (void**)&(pWrapperTable->m_GetLastError));
		if ( (eLookupError != 0) || (pWrapperTable->m_GetLastError == nullptr) )
			return LIBMCDRIVER_LIBOAPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_liboapc_releaseinstance", (void**)&(pWrapperTable->m_ReleaseInstance));
		if ( (eLookupError != 0) || (pWrapperTable->m_ReleaseInstance == nullptr) )
			return LIBMCDRIVER_LIBOAPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_liboapc_acquireinstance", (void**)&(pWrapperTable->m_AcquireInstance));
		if ( (eLookupError != 0) || (pWrapperTable->m_AcquireInstance == nullptr) )
			return LIBMCDRIVER_LIBOAPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_liboapc_injectcomponent", (void**)&(pWrapperTable->m_InjectComponent));
		if ( (eLookupError != 0) || (pWrapperTable->m_InjectComponent == nullptr) )
			return LIBMCDRIVER_LIBOAPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_liboapc_getsymbollookupmethod", (void**)&(pWrapperTable->m_GetSymbolLookupMethod));
		if ( (eLookupError != 0) || (pWrapperTable->m_GetSymbolLookupMethod == nullptr) )
			return LIBMCDRIVER_LIBOAPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("libmcdriver_liboapc_createdriver", (void**)&(pWrapperTable->m_CreateDriver));
		if ( (eLookupError != 0) || (pWrapperTable->m_CreateDriver == nullptr) )
			return LIBMCDRIVER_LIBOAPC_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		return LIBMCDRIVER_LIBOAPC_SUCCESS;
}

	
	
	/**
	 * Method definitions for class CBase
	 */
	
	/**
	 * Method definitions for class CDriver
	 */
	
	/**
	* CDriver::GetName - returns the name identifier of the driver
	* @return Name of the driver.
	*/
	std::string CDriver::GetName()
	{
		LibMCDriver_LibOAPC_uint32 bytesNeededName = 0;
		LibMCDriver_LibOAPC_uint32 bytesWrittenName = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetName(m_pHandle, 0, &bytesNeededName, nullptr));
		std::vector<char> bufferName(bytesNeededName);
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetName(m_pHandle, bytesNeededName, &bytesWrittenName, &bufferName[0]));
		
		return std::string(&bufferName[0]);
	}
	
	/**
	* CDriver::GetType - returns the type identifier of the driver
	* @return Type of the driver.
	*/
	std::string CDriver::GetType()
	{
		LibMCDriver_LibOAPC_uint32 bytesNeededType = 0;
		LibMCDriver_LibOAPC_uint32 bytesWrittenType = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetType(m_pHandle, 0, &bytesNeededType, nullptr));
		std::vector<char> bufferType(bytesNeededType);
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetType(m_pHandle, bytesNeededType, &bytesWrittenType, &bufferType[0]));
		
		return std::string(&bufferType[0]);
	}
	
	/**
	* CDriver::GetVersion - returns the version identifiers of the driver
	* @param[out] nMajor - Major version.
	* @param[out] nMinor - Minor version.
	* @param[out] nMicro - Micro version.
	* @param[out] sBuild - Build identifier.
	*/
	void CDriver::GetVersion(LibMCDriver_LibOAPC_uint32 & nMajor, LibMCDriver_LibOAPC_uint32 & nMinor, LibMCDriver_LibOAPC_uint32 & nMicro, std::string & sBuild)
	{
		LibMCDriver_LibOAPC_uint32 bytesNeededBuild = 0;
		LibMCDriver_LibOAPC_uint32 bytesWrittenBuild = 0;
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetVersion(m_pHandle, &nMajor, &nMinor, &nMicro, 0, &bytesNeededBuild, nullptr));
		std::vector<char> bufferBuild(bytesNeededBuild);
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_GetVersion(m_pHandle, &nMajor, &nMinor, &nMicro, bytesNeededBuild, &bytesWrittenBuild, &bufferBuild[0]));
		sBuild = std::string(&bufferBuild[0]);
	}
	
	/**
	* CDriver::QueryParameters - Updates the driver parameters in the driver environment. Might be called out of thread. Implementation MUST be able to handle parallel calls.
	* @param[in] pDriverUpdateInstance - Status update instance.
	*/
	void CDriver::QueryParameters(classParam<LibMCEnv::CDriverStatusUpdateSession> pDriverUpdateInstance)
	{
		LibMCEnvHandle hDriverUpdateInstance = pDriverUpdateInstance.GetHandle();
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_QueryParameters(m_pHandle, hDriverUpdateInstance));
	}
	
	/**
	 * Method definitions for class CDriver_E1701
	 */
	
	/**
	* CDriver_E1701::SetCorrectionFile - Sets the correction file stream.
	* @param[in] CorrectionFileBuffer - binary data of the correction file.
	*/
	void CDriver_E1701::SetCorrectionFile(const CInputVector<LibMCDriver_LibOAPC_uint8> & CorrectionFileBuffer)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_E1701_SetCorrectionFile(m_pHandle, (LibMCDriver_LibOAPC_uint64)CorrectionFileBuffer.size(), CorrectionFileBuffer.data()));
	}
	
	/**
	* CDriver_E1701::SetOpticalField - Sets the field size in mm of the optical system.
	* @param[in] dMinX - Minimum X Coordinate in mm
	* @param[in] dMinY - Minimum Y Coordinate in mm
	* @param[in] dMaxX - Maximum X Coordinate in mm
	* @param[in] dMaxY - Maximum Y Coordinate in mm
	*/
	void CDriver_E1701::SetOpticalField(const LibMCDriver_LibOAPC_double dMinX, const LibMCDriver_LibOAPC_double dMinY, const LibMCDriver_LibOAPC_double dMaxX, const LibMCDriver_LibOAPC_double dMaxY)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_E1701_SetOpticalField(m_pHandle, dMinX, dMinY, dMaxX, dMaxY));
	}
	
	/**
	* CDriver_E1701::SetLogicalField - Sets the field size in mm of the internal unit system.
	* @param[in] nMinX - Minimum X Coordinate in logical units
	* @param[in] nMinY - Minimum Y Coordinate in logical units
	* @param[in] nMaxX - Maximum X Coordinate in logical units
	* @param[in] nMaxY - Maximum Y Coordinate in logical units
	*/
	void CDriver_E1701::SetLogicalField(const LibMCDriver_LibOAPC_int32 nMinX, const LibMCDriver_LibOAPC_int32 nMinY, const LibMCDriver_LibOAPC_int32 nMaxX, const LibMCDriver_LibOAPC_int32 nMaxY)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_E1701_SetLogicalField(m_pHandle, nMinX, nMinY, nMaxX, nMaxY));
	}
	
	/**
	* CDriver_E1701::Connect - Creates and initializes the OAPC Scanner Driver.
	* @param[in] sConnectionString - Connection string of the device.
	* @param[in] sPassword - Password of the device. Pass empty string if not used.
	*/
	void CDriver_E1701::Connect(const std::string & sConnectionString, const std::string & sPassword)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_E1701_Connect(m_pHandle, sConnectionString.c_str(), sPassword.c_str()));
	}
	
	/**
	* CDriver_E1701::Disconnect - Disconnects from the Laser Scanner Emulator.
	*/
	void CDriver_E1701::Disconnect()
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_E1701_Disconnect(m_pHandle));
	}
	
	/**
	* CDriver_E1701::DrawLayer - Draws a layer of a build stream. Blocks until the layer is drawn.
	* @param[in] sStreamUUID - UUID of the build stream. Must have been loaded in memory by the system.
	* @param[in] nLayerIndex - Layer index of the build file.
	*/
	void CDriver_E1701::DrawLayer(const std::string & sStreamUUID, const LibMCDriver_LibOAPC_uint32 nLayerIndex)
	{
		CheckError(m_pWrapper->m_WrapperTable.m_Driver_E1701_DrawLayer(m_pHandle, sStreamUUID.c_str(), nLayerIndex));
	}

} // namespace LibMCDriver_LibOAPC

#endif // __LIBMCDRIVER_LIBOAPC_CPPHEADER_DYNAMIC_CPP

