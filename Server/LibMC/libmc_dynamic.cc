/*++

Copyright (C) 2020 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.7.0-develop.

Abstract: This is an autogenerated plain C Header file in order to allow an easy
 use of Machine Control library

Interface version: 1.0.0

*/

#include "libmc_types.h"
#include "libmc_dynamic.h"
#ifdef _WIN32
#include <windows.h>
#else // _WIN32
#include <dlfcn.h>
#include <stdlib.h>
#endif // _WIN32

LibMCResult InitLibMCWrapperTable(sLibMCDynamicWrapperTable * pWrapperTable)
{
	if (pWrapperTable == NULL)
		return LIBMC_ERROR_INVALIDPARAM;
	
	pWrapperTable->m_LibraryHandle = NULL;
	pWrapperTable->m_APIRequestHandler_ExpectsRawBody = NULL;
	pWrapperTable->m_APIRequestHandler_ExpectsFormData = NULL;
	pWrapperTable->m_APIRequestHandler_GetFormDataDetails = NULL;
	pWrapperTable->m_APIRequestHandler_SetFormDataField = NULL;
	pWrapperTable->m_APIRequestHandler_SetFormStringField = NULL;
	pWrapperTable->m_APIRequestHandler_Handle = NULL;
	pWrapperTable->m_APIRequestHandler_GetResultData = NULL;
	pWrapperTable->m_MCContext_RegisterLibraryPath = NULL;
	pWrapperTable->m_MCContext_ParseConfiguration = NULL;
	pWrapperTable->m_MCContext_StartAllThreads = NULL;
	pWrapperTable->m_MCContext_TerminateAllThreads = NULL;
	pWrapperTable->m_MCContext_LoadClientPackage = NULL;
	pWrapperTable->m_MCContext_Log = NULL;
	pWrapperTable->m_MCContext_CreateAPIRequestHandler = NULL;
	pWrapperTable->m_GetVersion = NULL;
	pWrapperTable->m_GetLastError = NULL;
	pWrapperTable->m_ReleaseInstance = NULL;
	pWrapperTable->m_AcquireInstance = NULL;
	pWrapperTable->m_InjectComponent = NULL;
	pWrapperTable->m_CreateMCContext = NULL;
	
	return LIBMC_SUCCESS;
}

LibMCResult ReleaseLibMCWrapperTable(sLibMCDynamicWrapperTable * pWrapperTable)
{
	if (pWrapperTable == NULL)
		return LIBMC_ERROR_INVALIDPARAM;
	
	if (pWrapperTable->m_LibraryHandle != NULL) {
	#ifdef _WIN32
		HMODULE hModule = (HMODULE) pWrapperTable->m_LibraryHandle;
		FreeLibrary(hModule);
	#else // _WIN32
		dlclose(pWrapperTable->m_LibraryHandle);
	#endif // _WIN32
		return InitLibMCWrapperTable(pWrapperTable);
	}
	
	return LIBMC_SUCCESS;
}

LibMCResult LoadLibMCWrapperTable(sLibMCDynamicWrapperTable * pWrapperTable, const char * pLibraryFileName)
{
	if (pWrapperTable == NULL)
		return LIBMC_ERROR_INVALIDPARAM;
	if (pLibraryFileName == NULL)
		return LIBMC_ERROR_INVALIDPARAM;
	
	#ifdef _WIN32
	// Convert filename to UTF16-string
	int nLength = (int)strlen(pLibraryFileName);
	int nBufferSize = nLength * 2 + 2;
	wchar_t* wsLibraryFileName = (wchar_t*)malloc(nBufferSize*sizeof(wchar_t));
	memset(wsLibraryFileName, 0, nBufferSize*sizeof(wchar_t));
	int nResult = MultiByteToWideChar(CP_UTF8, 0, pLibraryFileName, nLength, wsLibraryFileName, nBufferSize);
	if (nResult == 0) {
		free(wsLibraryFileName);
		return LIBMC_ERROR_COULDNOTLOADLIBRARY;
	}
	
	HMODULE hLibrary = LoadLibraryW(wsLibraryFileName);
	free(wsLibraryFileName);
	if (hLibrary == 0) 
		return LIBMC_ERROR_COULDNOTLOADLIBRARY;
	#else // _WIN32
	void* hLibrary = dlopen(pLibraryFileName, RTLD_LAZY);
	if (hLibrary == 0) 
		return LIBMC_ERROR_COULDNOTLOADLIBRARY;
	dlerror();
	#endif // _WIN32
	
	#ifdef _WIN32
	pWrapperTable->m_APIRequestHandler_ExpectsRawBody = (PLibMCAPIRequestHandler_ExpectsRawBodyPtr) GetProcAddress(hLibrary, "libmc_apirequesthandler_expectsrawbody");
	#else // _WIN32
	pWrapperTable->m_APIRequestHandler_ExpectsRawBody = (PLibMCAPIRequestHandler_ExpectsRawBodyPtr) dlsym(hLibrary, "libmc_apirequesthandler_expectsrawbody");
	dlerror();
	#endif // _WIN32
	if (pWrapperTable->m_APIRequestHandler_ExpectsRawBody == NULL)
		return LIBMC_ERROR_COULDNOTFINDLIBRARYEXPORT;
	
	#ifdef _WIN32
	pWrapperTable->m_APIRequestHandler_ExpectsFormData = (PLibMCAPIRequestHandler_ExpectsFormDataPtr) GetProcAddress(hLibrary, "libmc_apirequesthandler_expectsformdata");
	#else // _WIN32
	pWrapperTable->m_APIRequestHandler_ExpectsFormData = (PLibMCAPIRequestHandler_ExpectsFormDataPtr) dlsym(hLibrary, "libmc_apirequesthandler_expectsformdata");
	dlerror();
	#endif // _WIN32
	if (pWrapperTable->m_APIRequestHandler_ExpectsFormData == NULL)
		return LIBMC_ERROR_COULDNOTFINDLIBRARYEXPORT;
	
	#ifdef _WIN32
	pWrapperTable->m_APIRequestHandler_GetFormDataDetails = (PLibMCAPIRequestHandler_GetFormDataDetailsPtr) GetProcAddress(hLibrary, "libmc_apirequesthandler_getformdatadetails");
	#else // _WIN32
	pWrapperTable->m_APIRequestHandler_GetFormDataDetails = (PLibMCAPIRequestHandler_GetFormDataDetailsPtr) dlsym(hLibrary, "libmc_apirequesthandler_getformdatadetails");
	dlerror();
	#endif // _WIN32
	if (pWrapperTable->m_APIRequestHandler_GetFormDataDetails == NULL)
		return LIBMC_ERROR_COULDNOTFINDLIBRARYEXPORT;
	
	#ifdef _WIN32
	pWrapperTable->m_APIRequestHandler_SetFormDataField = (PLibMCAPIRequestHandler_SetFormDataFieldPtr) GetProcAddress(hLibrary, "libmc_apirequesthandler_setformdatafield");
	#else // _WIN32
	pWrapperTable->m_APIRequestHandler_SetFormDataField = (PLibMCAPIRequestHandler_SetFormDataFieldPtr) dlsym(hLibrary, "libmc_apirequesthandler_setformdatafield");
	dlerror();
	#endif // _WIN32
	if (pWrapperTable->m_APIRequestHandler_SetFormDataField == NULL)
		return LIBMC_ERROR_COULDNOTFINDLIBRARYEXPORT;
	
	#ifdef _WIN32
	pWrapperTable->m_APIRequestHandler_SetFormStringField = (PLibMCAPIRequestHandler_SetFormStringFieldPtr) GetProcAddress(hLibrary, "libmc_apirequesthandler_setformstringfield");
	#else // _WIN32
	pWrapperTable->m_APIRequestHandler_SetFormStringField = (PLibMCAPIRequestHandler_SetFormStringFieldPtr) dlsym(hLibrary, "libmc_apirequesthandler_setformstringfield");
	dlerror();
	#endif // _WIN32
	if (pWrapperTable->m_APIRequestHandler_SetFormStringField == NULL)
		return LIBMC_ERROR_COULDNOTFINDLIBRARYEXPORT;
	
	#ifdef _WIN32
	pWrapperTable->m_APIRequestHandler_Handle = (PLibMCAPIRequestHandler_HandlePtr) GetProcAddress(hLibrary, "libmc_apirequesthandler_handle");
	#else // _WIN32
	pWrapperTable->m_APIRequestHandler_Handle = (PLibMCAPIRequestHandler_HandlePtr) dlsym(hLibrary, "libmc_apirequesthandler_handle");
	dlerror();
	#endif // _WIN32
	if (pWrapperTable->m_APIRequestHandler_Handle == NULL)
		return LIBMC_ERROR_COULDNOTFINDLIBRARYEXPORT;
	
	#ifdef _WIN32
	pWrapperTable->m_APIRequestHandler_GetResultData = (PLibMCAPIRequestHandler_GetResultDataPtr) GetProcAddress(hLibrary, "libmc_apirequesthandler_getresultdata");
	#else // _WIN32
	pWrapperTable->m_APIRequestHandler_GetResultData = (PLibMCAPIRequestHandler_GetResultDataPtr) dlsym(hLibrary, "libmc_apirequesthandler_getresultdata");
	dlerror();
	#endif // _WIN32
	if (pWrapperTable->m_APIRequestHandler_GetResultData == NULL)
		return LIBMC_ERROR_COULDNOTFINDLIBRARYEXPORT;
	
	#ifdef _WIN32
	pWrapperTable->m_MCContext_RegisterLibraryPath = (PLibMCMCContext_RegisterLibraryPathPtr) GetProcAddress(hLibrary, "libmc_mccontext_registerlibrarypath");
	#else // _WIN32
	pWrapperTable->m_MCContext_RegisterLibraryPath = (PLibMCMCContext_RegisterLibraryPathPtr) dlsym(hLibrary, "libmc_mccontext_registerlibrarypath");
	dlerror();
	#endif // _WIN32
	if (pWrapperTable->m_MCContext_RegisterLibraryPath == NULL)
		return LIBMC_ERROR_COULDNOTFINDLIBRARYEXPORT;
	
	#ifdef _WIN32
	pWrapperTable->m_MCContext_ParseConfiguration = (PLibMCMCContext_ParseConfigurationPtr) GetProcAddress(hLibrary, "libmc_mccontext_parseconfiguration");
	#else // _WIN32
	pWrapperTable->m_MCContext_ParseConfiguration = (PLibMCMCContext_ParseConfigurationPtr) dlsym(hLibrary, "libmc_mccontext_parseconfiguration");
	dlerror();
	#endif // _WIN32
	if (pWrapperTable->m_MCContext_ParseConfiguration == NULL)
		return LIBMC_ERROR_COULDNOTFINDLIBRARYEXPORT;
	
	#ifdef _WIN32
	pWrapperTable->m_MCContext_StartAllThreads = (PLibMCMCContext_StartAllThreadsPtr) GetProcAddress(hLibrary, "libmc_mccontext_startallthreads");
	#else // _WIN32
	pWrapperTable->m_MCContext_StartAllThreads = (PLibMCMCContext_StartAllThreadsPtr) dlsym(hLibrary, "libmc_mccontext_startallthreads");
	dlerror();
	#endif // _WIN32
	if (pWrapperTable->m_MCContext_StartAllThreads == NULL)
		return LIBMC_ERROR_COULDNOTFINDLIBRARYEXPORT;
	
	#ifdef _WIN32
	pWrapperTable->m_MCContext_TerminateAllThreads = (PLibMCMCContext_TerminateAllThreadsPtr) GetProcAddress(hLibrary, "libmc_mccontext_terminateallthreads");
	#else // _WIN32
	pWrapperTable->m_MCContext_TerminateAllThreads = (PLibMCMCContext_TerminateAllThreadsPtr) dlsym(hLibrary, "libmc_mccontext_terminateallthreads");
	dlerror();
	#endif // _WIN32
	if (pWrapperTable->m_MCContext_TerminateAllThreads == NULL)
		return LIBMC_ERROR_COULDNOTFINDLIBRARYEXPORT;
	
	#ifdef _WIN32
	pWrapperTable->m_MCContext_LoadClientPackage = (PLibMCMCContext_LoadClientPackagePtr) GetProcAddress(hLibrary, "libmc_mccontext_loadclientpackage");
	#else // _WIN32
	pWrapperTable->m_MCContext_LoadClientPackage = (PLibMCMCContext_LoadClientPackagePtr) dlsym(hLibrary, "libmc_mccontext_loadclientpackage");
	dlerror();
	#endif // _WIN32
	if (pWrapperTable->m_MCContext_LoadClientPackage == NULL)
		return LIBMC_ERROR_COULDNOTFINDLIBRARYEXPORT;
	
	#ifdef _WIN32
	pWrapperTable->m_MCContext_Log = (PLibMCMCContext_LogPtr) GetProcAddress(hLibrary, "libmc_mccontext_log");
	#else // _WIN32
	pWrapperTable->m_MCContext_Log = (PLibMCMCContext_LogPtr) dlsym(hLibrary, "libmc_mccontext_log");
	dlerror();
	#endif // _WIN32
	if (pWrapperTable->m_MCContext_Log == NULL)
		return LIBMC_ERROR_COULDNOTFINDLIBRARYEXPORT;
	
	#ifdef _WIN32
	pWrapperTable->m_MCContext_CreateAPIRequestHandler = (PLibMCMCContext_CreateAPIRequestHandlerPtr) GetProcAddress(hLibrary, "libmc_mccontext_createapirequesthandler");
	#else // _WIN32
	pWrapperTable->m_MCContext_CreateAPIRequestHandler = (PLibMCMCContext_CreateAPIRequestHandlerPtr) dlsym(hLibrary, "libmc_mccontext_createapirequesthandler");
	dlerror();
	#endif // _WIN32
	if (pWrapperTable->m_MCContext_CreateAPIRequestHandler == NULL)
		return LIBMC_ERROR_COULDNOTFINDLIBRARYEXPORT;
	
	#ifdef _WIN32
	pWrapperTable->m_GetVersion = (PLibMCGetVersionPtr) GetProcAddress(hLibrary, "libmc_getversion");
	#else // _WIN32
	pWrapperTable->m_GetVersion = (PLibMCGetVersionPtr) dlsym(hLibrary, "libmc_getversion");
	dlerror();
	#endif // _WIN32
	if (pWrapperTable->m_GetVersion == NULL)
		return LIBMC_ERROR_COULDNOTFINDLIBRARYEXPORT;
	
	#ifdef _WIN32
	pWrapperTable->m_GetLastError = (PLibMCGetLastErrorPtr) GetProcAddress(hLibrary, "libmc_getlasterror");
	#else // _WIN32
	pWrapperTable->m_GetLastError = (PLibMCGetLastErrorPtr) dlsym(hLibrary, "libmc_getlasterror");
	dlerror();
	#endif // _WIN32
	if (pWrapperTable->m_GetLastError == NULL)
		return LIBMC_ERROR_COULDNOTFINDLIBRARYEXPORT;
	
	#ifdef _WIN32
	pWrapperTable->m_ReleaseInstance = (PLibMCReleaseInstancePtr) GetProcAddress(hLibrary, "libmc_releaseinstance");
	#else // _WIN32
	pWrapperTable->m_ReleaseInstance = (PLibMCReleaseInstancePtr) dlsym(hLibrary, "libmc_releaseinstance");
	dlerror();
	#endif // _WIN32
	if (pWrapperTable->m_ReleaseInstance == NULL)
		return LIBMC_ERROR_COULDNOTFINDLIBRARYEXPORT;
	
	#ifdef _WIN32
	pWrapperTable->m_AcquireInstance = (PLibMCAcquireInstancePtr) GetProcAddress(hLibrary, "libmc_acquireinstance");
	#else // _WIN32
	pWrapperTable->m_AcquireInstance = (PLibMCAcquireInstancePtr) dlsym(hLibrary, "libmc_acquireinstance");
	dlerror();
	#endif // _WIN32
	if (pWrapperTable->m_AcquireInstance == NULL)
		return LIBMC_ERROR_COULDNOTFINDLIBRARYEXPORT;
	
	#ifdef _WIN32
	pWrapperTable->m_InjectComponent = (PLibMCInjectComponentPtr) GetProcAddress(hLibrary, "libmc_injectcomponent");
	#else // _WIN32
	pWrapperTable->m_InjectComponent = (PLibMCInjectComponentPtr) dlsym(hLibrary, "libmc_injectcomponent");
	dlerror();
	#endif // _WIN32
	if (pWrapperTable->m_InjectComponent == NULL)
		return LIBMC_ERROR_COULDNOTFINDLIBRARYEXPORT;
	
	#ifdef _WIN32
	pWrapperTable->m_CreateMCContext = (PLibMCCreateMCContextPtr) GetProcAddress(hLibrary, "libmc_createmccontext");
	#else // _WIN32
	pWrapperTable->m_CreateMCContext = (PLibMCCreateMCContextPtr) dlsym(hLibrary, "libmc_createmccontext");
	dlerror();
	#endif // _WIN32
	if (pWrapperTable->m_CreateMCContext == NULL)
		return LIBMC_ERROR_COULDNOTFINDLIBRARYEXPORT;
	
	pWrapperTable->m_LibraryHandle = hLibrary;
	return LIBMC_SUCCESS;
}

