/*++

Copyright (C) 2020 Autodesk Inc.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Autodesk Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AUTODESK INC. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


This file has been generated by the Automatic Component Toolkit (ACT) version 1.7.0-develop.

Abstract: This is an autogenerated plain C Header file with basic types in
order to allow an easy use of Machine Control data model library

Interface version: 1.0.0

*/

#ifndef __LIBMCDATA_TYPES_HEADER
#define __LIBMCDATA_TYPES_HEADER

#include <stdbool.h>

/*************************************************************************************************************************
 Scalar types definition
**************************************************************************************************************************/

#ifdef LIBMCDATA_USELEGACYINTEGERTYPES

typedef unsigned char LibMCData_uint8;
typedef unsigned short LibMCData_uint16 ;
typedef unsigned int LibMCData_uint32;
typedef unsigned long long LibMCData_uint64;
typedef char LibMCData_int8;
typedef short LibMCData_int16;
typedef int LibMCData_int32;
typedef long long LibMCData_int64;

#else // LIBMCDATA_USELEGACYINTEGERTYPES

#include <stdint.h>

typedef uint8_t LibMCData_uint8;
typedef uint16_t LibMCData_uint16;
typedef uint32_t LibMCData_uint32;
typedef uint64_t LibMCData_uint64;
typedef int8_t LibMCData_int8;
typedef int16_t LibMCData_int16;
typedef int32_t LibMCData_int32;
typedef int64_t LibMCData_int64 ;

#endif // LIBMCDATA_USELEGACYINTEGERTYPES

typedef float LibMCData_single;
typedef double LibMCData_double;

/*************************************************************************************************************************
 General type definitions
**************************************************************************************************************************/

typedef LibMCData_int32 LibMCDataResult;
typedef void * LibMCDataHandle;
typedef void * LibMCData_pvoid;

/*************************************************************************************************************************
 Version for LibMCData
**************************************************************************************************************************/

#define LIBMCDATA_VERSION_MAJOR 1
#define LIBMCDATA_VERSION_MINOR 0
#define LIBMCDATA_VERSION_MICRO 0
#define LIBMCDATA_VERSION_PRERELEASEINFO ""
#define LIBMCDATA_VERSION_BUILDINFO ""

/*************************************************************************************************************************
 Error constants for LibMCData
**************************************************************************************************************************/

#define LIBMCDATA_SUCCESS 0
#define LIBMCDATA_ERROR_NOTIMPLEMENTED 1
#define LIBMCDATA_ERROR_INVALIDPARAM 2
#define LIBMCDATA_ERROR_INVALIDCAST 3
#define LIBMCDATA_ERROR_BUFFERTOOSMALL 4
#define LIBMCDATA_ERROR_GENERICEXCEPTION 5
#define LIBMCDATA_ERROR_COULDNOTLOADLIBRARY 6
#define LIBMCDATA_ERROR_COULDNOTFINDLIBRARYEXPORT 7
#define LIBMCDATA_ERROR_INCOMPATIBLEBINARYVERSION 8
#define LIBMCDATA_ERROR_NOCOLUMNAVAILABLE 58
#define LIBMCDATA_ERROR_INVALIDTEXTCOLUMN 59
#define LIBMCDATA_ERROR_INVALIDCOLUMNTYPE 60
#define LIBMCDATA_ERROR_INVALIDDATABASEMIGRATION 88
#define LIBMCDATA_ERROR_INTERNALERROR 89
#define LIBMCDATA_ERROR_UNKNOWNDATABASETYPE 81
#define LIBMCDATA_ERROR_SQLITE_ERROR 101
#define LIBMCDATA_ERROR_SQLITE_INTERNAL 102
#define LIBMCDATA_ERROR_SQLITE_PERM 103
#define LIBMCDATA_ERROR_SQLITE_ABORT 104
#define LIBMCDATA_ERROR_SQLITE_BUSY 105
#define LIBMCDATA_ERROR_SQLITE_LOCKED 106
#define LIBMCDATA_ERROR_SQLITE_NOMEM 107
#define LIBMCDATA_ERROR_SQLITE_READONLY 108
#define LIBMCDATA_ERROR_SQLITE_INTERRUPT 109
#define LIBMCDATA_ERROR_SQLITE_IOERR 110
#define LIBMCDATA_ERROR_SQLITE_CORRUPT 111
#define LIBMCDATA_ERROR_SQLITE_NOTFOUND 112
#define LIBMCDATA_ERROR_SQLITE_FULL 113
#define LIBMCDATA_ERROR_SQLITE_CANTOPEN 114
#define LIBMCDATA_ERROR_SQLITE_PROTOCOL 115
#define LIBMCDATA_ERROR_SQLITE_SCHEMA 117
#define LIBMCDATA_ERROR_SQLITE_TOOBIG 118
#define LIBMCDATA_ERROR_SQLITE_CONSTRAINT 119
#define LIBMCDATA_ERROR_SQLITE_MISMATCH 120
#define LIBMCDATA_ERROR_SQLITE_MISUSE 121
#define LIBMCDATA_ERROR_SQLITE_NOLFS 122
#define LIBMCDATA_ERROR_SQLITE_AUTH 123
#define LIBMCDATA_ERROR_SQLITE_RANGE 125
#define LIBMCDATA_ERROR_SQLITE_NOTADB 126
#define LIBMCDATA_ERROR_SQLITE_NOTICE 127
#define LIBMCDATA_ERROR_SQLITE_WARNING 128
#define LIBMCDATA_ERROR_SQLITE_OTHER 130
#define LIBMCDATA_ERROR_SQLITE_TOOMANYRESULTROWS 131

/*************************************************************************************************************************
 Error strings for LibMCData
**************************************************************************************************************************/

inline const char * LIBMCDATA_GETERRORSTRING (LibMCDataResult nErrorCode) {
  switch (nErrorCode) {
    case LIBMCDATA_SUCCESS: return "no error";
    case LIBMCDATA_ERROR_NOTIMPLEMENTED: return "functionality not implemented";
    case LIBMCDATA_ERROR_INVALIDPARAM: return "an invalid parameter was passed";
    case LIBMCDATA_ERROR_INVALIDCAST: return "a type cast failed";
    case LIBMCDATA_ERROR_BUFFERTOOSMALL: return "a provided buffer is too small";
    case LIBMCDATA_ERROR_GENERICEXCEPTION: return "a generic exception occurred";
    case LIBMCDATA_ERROR_COULDNOTLOADLIBRARY: return "the library could not be loaded";
    case LIBMCDATA_ERROR_COULDNOTFINDLIBRARYEXPORT: return "a required exported symbol could not be found in the library";
    case LIBMCDATA_ERROR_INCOMPATIBLEBINARYVERSION: return "the version of the binary interface does not match the bindings interface";
    case LIBMCDATA_ERROR_NOCOLUMNAVAILABLE: return "no column available";
    case LIBMCDATA_ERROR_INVALIDTEXTCOLUMN: return "invalid text column";
    case LIBMCDATA_ERROR_INVALIDCOLUMNTYPE: return "invalid column type";
    case LIBMCDATA_ERROR_INVALIDDATABASEMIGRATION: return "invalid database migration";
    case LIBMCDATA_ERROR_INTERNALERROR: return "internal error";
    case LIBMCDATA_ERROR_UNKNOWNDATABASETYPE: return "unknown database type";
    case LIBMCDATA_ERROR_SQLITE_ERROR: return "SQLite: Generic Error";
    case LIBMCDATA_ERROR_SQLITE_INTERNAL: return "SQLite: Internal logic error in SQLite";
    case LIBMCDATA_ERROR_SQLITE_PERM: return "SQLite: Access permission denied";
    case LIBMCDATA_ERROR_SQLITE_ABORT: return "SQLite: Callback routine requested an abort";
    case LIBMCDATA_ERROR_SQLITE_BUSY: return "SQLite: The database file is locked";
    case LIBMCDATA_ERROR_SQLITE_LOCKED: return "SQLite: A table in the database is locked";
    case LIBMCDATA_ERROR_SQLITE_NOMEM: return "SQLite: A malloc failed";
    case LIBMCDATA_ERROR_SQLITE_READONLY: return "SQLite: Attempt to write a readonly database";
    case LIBMCDATA_ERROR_SQLITE_INTERRUPT: return "SQLite: Operation terminated by sqlite3_interrupt";
    case LIBMCDATA_ERROR_SQLITE_IOERR: return "SQLite: Some kind of disk I/O error occurred";
    case LIBMCDATA_ERROR_SQLITE_CORRUPT: return "SQLite: The database disk image is malformed";
    case LIBMCDATA_ERROR_SQLITE_NOTFOUND: return "SQLite: Unknown opcode in sqlite3_file_control";
    case LIBMCDATA_ERROR_SQLITE_FULL: return "SQLite: Insertion failed because database is full";
    case LIBMCDATA_ERROR_SQLITE_CANTOPEN: return "SQLite: Unable to open the database file";
    case LIBMCDATA_ERROR_SQLITE_PROTOCOL: return "SQLite: Database lock protocol error";
    case LIBMCDATA_ERROR_SQLITE_SCHEMA: return "SQLite: The database schema changed";
    case LIBMCDATA_ERROR_SQLITE_TOOBIG: return "SQLite: String or BLOB exceeds size limit";
    case LIBMCDATA_ERROR_SQLITE_CONSTRAINT: return "SQLite: Abort due to constraint violation";
    case LIBMCDATA_ERROR_SQLITE_MISMATCH: return "SQLite: Data type mismatch";
    case LIBMCDATA_ERROR_SQLITE_MISUSE: return "SQLite: Library used incorrectly";
    case LIBMCDATA_ERROR_SQLITE_NOLFS: return "SQLite: Uses OS features not supported on host";
    case LIBMCDATA_ERROR_SQLITE_AUTH: return "SQLite: Authorization denied";
    case LIBMCDATA_ERROR_SQLITE_RANGE: return "SQLite: 2nd parameter to sqlite3_bind out of range";
    case LIBMCDATA_ERROR_SQLITE_NOTADB: return "SQLite: File opened that is not a database file";
    case LIBMCDATA_ERROR_SQLITE_NOTICE: return "SQLite: Notifications from sqlite3_log";
    case LIBMCDATA_ERROR_SQLITE_WARNING: return "SQLite: Warnings from sqlite3_log";
    case LIBMCDATA_ERROR_SQLITE_OTHER: return "SQLite: Other Error";
    case LIBMCDATA_ERROR_SQLITE_TOOMANYRESULTROWS: return "too many result rows";
    default: return "unknown error";
  }
}

/*************************************************************************************************************************
 Declaration of handle classes 
**************************************************************************************************************************/

typedef LibMCDataHandle LibMCData_Base;
typedef LibMCDataHandle LibMCData_StorageStream;
typedef LibMCDataHandle LibMCData_StorageEntity;
typedef LibMCDataHandle LibMCData_Storage;
typedef LibMCDataHandle LibMCData_LogSession;
typedef LibMCDataHandle LibMCData_DataModel;

/*************************************************************************************************************************
 Declaration of enums
**************************************************************************************************************************/

typedef enum eLibMCDataLogLevel {
  eLogLevelFatalError = 1,
  eLogLevelCriticalError = 2,
  eLogLevelWarning = 3,
  eLogLevelMessage = 4,
  eLogLevelInfo = 5,
  eLogLevelDebug = 6,
  eLogLevelUnknown = 7
} eLibMCDataLogLevel;

typedef enum eLibMCDataDataBaseType {
  eDataBaseTypeUnknown = 0,
  eDataBaseTypeSqLite = 1
} eLibMCDataDataBaseType;

/*************************************************************************************************************************
 Declaration of enum members for 4 byte struct alignment
**************************************************************************************************************************/

typedef union {
  eLibMCDataLogLevel m_enum;
  int m_code;
} structEnumLibMCDataLogLevel;

typedef union {
  eLibMCDataDataBaseType m_enum;
  int m_code;
} structEnumLibMCDataDataBaseType;


#endif // __LIBMCDATA_TYPES_HEADER
